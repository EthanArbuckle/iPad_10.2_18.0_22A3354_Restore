uint64_t vfx_script_get_arguments_buffer(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

id VFXScene.LoadOptions.init()()
{
  _BYTE *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  objc_super v7;

  v0[OBJC_IVAR___VFXSceneLoadOptions_isAuthoringWorld] = 0;
  v0[OBJC_IVAR___VFXSceneLoadOptions_isVFX2] = 0;
  v0[OBJC_IVAR___VFXSceneLoadOptions_enableRuntimeScriptCompilation] = 0;
  v0[OBJC_IVAR___VFXSceneLoadOptions_allowLoadingFromFuture] = 0;
  v0[OBJC_IVAR___VFXSceneLoadOptions_setupAsTemplate] = 0;
  v0[OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene] = 1;
  v0[OBJC_IVAR___VFXSceneLoadOptions_setupAsyncRuntime] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___VFXSceneLoadOptions_world] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___VFXSceneLoadOptions_asyncRuntimeLock] = 0;
  v0[OBJC_IVAR___VFXSceneLoadOptions_loadBindingsMetadata] = 1;
  v0[OBJC_IVAR___VFXSceneLoadOptions_enableParallelDecoding] = 1;
  v0[OBJC_IVAR___VFXSceneLoadOptions_setupRenderer] = 1;
  *(_QWORD *)&v0[OBJC_IVAR___VFXSceneLoadOptions_colorPixelFormat] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___VFXSceneLoadOptions_depthPixelFormat] = 0;
  v0[OBJC_IVAR___VFXSceneLoadOptions_enableDeferredRendering] = 2;
  v0[OBJC_IVAR___VFXSceneLoadOptions_internalPixelFormatDepth] = 1;
  v0[OBJC_IVAR___VFXSceneLoadOptions_useGammaBlending] = 0;
  v0[OBJC_IVAR___VFXSceneLoadOptions_doNotClearRenderOutput] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___VFXSceneLoadOptions_device] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___VFXSceneLoadOptions_commandQueue] = 0;
  v1 = &v0[OBJC_IVAR___VFXSceneLoadOptions_clientID];
  *v1 = 0;
  v1[1] = 0;
  v2 = &v0[OBJC_IVAR___VFXSceneLoadOptions_metalLibraryURL];
  v3 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)&v0[OBJC_IVAR___VFXSceneLoadOptions_systemRegistrationOptions] = 3179529;
  v4 = OBJC_IVAR___VFXSceneLoadOptions_counterStorage;
  v5 = v0;
  *(_QWORD *)&v0[v4] = vfx_counters_null();
  *(_DWORD *)&v5[OBJC_IVAR___VFXSceneLoadOptions_peerPid] = -1;
  *(_DWORD *)&v5[OBJC_IVAR___VFXSceneLoadOptions_peerTaskIdentity] = 0;
  v5[OBJC_IVAR___VFXSceneLoadOptions_loadPrecompiledScripts] = 1;

  v7.receiver = v5;
  v7.super_class = (Class)type metadata accessor for VFXScene.LoadOptions(0);
  return objc_msgSendSuper2(&v7, sel_init);
}

char *sub_1B17906F0(uint64_t a1, char *a2)
{
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  int v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  void (*v25)(uint64_t, int, uint64_t);
  void (*v26)(uint64_t, int, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;

  v44 = type metadata accessor for BundleInfo();
  MEMORY[0x1E0C80A78](v44, v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v45 = (uint64_t)&v43 - v9;
  v10 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  swift_unknownObjectWeakAssign();
  v11 = (char *)v10;
  v12 = sub_1B1CBD028(0xFFFFFFFF);
  v13 = (unsigned int *)&v11[OBJC_IVAR____TtC3VFX9VFXEffect_effectID];
  *v13 = v12 ^ 0x80000000;
  *((_BYTE *)v13 + 4) = 0;
  v14 = sub_1B222805C();
  v15 = (uint64_t *)&v11[OBJC_IVAR____TtC3VFX9VFXEffect_name];
  *v15 = v14;
  v15[1] = v16;
  swift_bridgeObjectRelease();
  v17 = &v11[OBJC_IVAR____TtC3VFX9VFXEffect_url];
  sub_1B1AEA224((uint64_t)&v11[OBJC_IVAR____TtC3VFX9VFXEffect_url], (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  v18 = sub_1B2228110();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v17, a2, v18);
  v46 = v19;
  v47 = v18;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  v20 = sub_1B1F43C48();
  v21 = *v13;
  v22 = *((unsigned __int8 *)v13 + 4);
  swift_retain();
  LOBYTE(v51) = v22;
  if (v22)
    v23 = 0;
  else
    v23 = v21;
  v48 = a2;
  v24 = v49;
  v25 = sub_1B2122140((uint64_t)v6, a2, 0, v20, v23 | ((unint64_t)v22 << 32));
  if (v24)
  {

    swift_release();
    swift_release();
  }
  else
  {
    v26 = v25;
    v27 = (uint64_t)v6;
    v28 = v45;
    sub_1B1C2D830(v27, v45);
    v26(v20, 7, 0);
    if ((v22 & 1) == 0)
    {
      v30 = *(_QWORD **)(v20 + 176);
      swift_retain();
      v31 = sub_1B1F22B64((uint64_t)&type metadata for EffectsRegistry, (uint64_t)&off_1E6383A70, v30);
      swift_release();
      v51 = v31;
      v32 = sub_1B1B8B6B0(&v50, v21);
      v49 = &v43;
      v33 = v51;
      MEMORY[0x1E0C80A78](v32, v34);
      *(&v43 - 2) = v33;
      v35 = *(_QWORD **)(v20 + 176);
      MEMORY[0x1E0C80A78](v36, v37);
      *(&v43 - 2) = (uint64_t)sub_1B1CBD0AC;
      *(&v43 - 1) = v38;
      swift_retain();
      sub_1B1F22244((uint64_t)&type metadata for EffectsRegistry, (uint64_t)&off_1E6383A70, v35, (void (*)(uint64_t))sub_1B1B6932C);
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_release();
    v39 = *(_QWORD *)(v28 + *(int *)(v44 + 24));
    sub_1B1B8A68C(v28);
    swift_release();
    swift_release();
    *(_QWORD *)&v11[OBJC_IVAR____TtC3VFX9VFXEffect_version] = v39;
    v51 = sub_1B1F43D90();
    v40 = swift_allocObject();
    swift_unknownObjectUnownedInit();
    v41 = swift_allocObject();
    *(_QWORD *)(v41 + 16) = sub_1B1F4C640;
    *(_QWORD *)(v41 + 24) = v40;
    v42 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95D78];
    sub_1B17915FC(0, &qword_1ED4BA230, MEMORY[0x1E0C95D78]);
    sub_1B1F44EA8((unint64_t *)&unk_1ED4BB1B0, &qword_1ED4BA230, v42, MEMORY[0x1E0C95D90]);
    sub_1B2228470();
    swift_release();
    swift_release();
    sub_1B2228410();
    swift_release();
    sub_1B1F446FC();

  }
  (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v47);
  return v11;
}

uint64_t sub_1B1790B98(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = v2;
  v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v6;
  v7[3] = a1;
  v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v7[4] = a2;
  if (*(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
  {
    swift_retain_n();
    swift_retain();
    swift_retain();
    sub_1B1E608D4((uint64_t)sub_1B17924B0, (uint64_t)v7);
    swift_release();
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    sub_1B1D9E884(v8, v6, a1, a2);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B1790CB8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  NSObject *v24;
  os_signpost_type_t v25;
  os_signpost_id_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_signpost_type_t v30;
  os_signpost_id_t v31;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;

  v33 = a3;
  v34 = a2;
  v4 = sub_1B22283B0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B2228380();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v33 - v17;
  v19 = MEMORY[0x1B5E240CC](a1 + 16, v16);
  if (v19)
  {
    v20 = (void *)v19;
    v21 = *(_QWORD *)(v19 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
    swift_retain();

    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v21 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v9);
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v13, v9);
  }
  else
  {
    sub_1B222838C();
  }
  v35 = v10;
  v36 = v9;
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v22 = sub_1B1B40EC8(v4, (uint64_t)qword_1ED4D0E48);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v22, v4);
  v23 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v23 = 0;
  v24 = sub_1B2228398();
  v25 = sub_1B2228FA4();
  v26 = sub_1B2228374();
  _os_signpost_emit_with_name_impl(&dword_1B178D000, v24, v25, v26, "transaction", "", v23, 2u);
  v34(v27);
  v28 = v4;
  v29 = v5;
  v30 = sub_1B2228F98();
  v31 = sub_1B2228374();
  _os_signpost_emit_with_name_impl(&dword_1B178D000, v24, v30, v31, "transaction", "", v23, 2u);

  MEMORY[0x1B5E23F88](v23, -1, -1);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v18, v36);
}

_QWORD *vfx_script_color_ramp_destroy(uint64_t a1, unint64_t a2)
{
  return sub_1B2029170(a1, a2, (uint64_t)&type metadata for ColorRamp, 0x18uLL);
}

uint64_t vfx_script_color_ramp_copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *vfx_script_color_ramp_create_setting_color(_:_:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;

  v5 = *(char **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = ecs_stack_allocator_allocate(v8, 17, 8);
  *v9 = v5;
  v9[1] = v6;
  *((_BYTE *)v9 + 16) = v7;
  if ((a3 & 0x8000000000000000) == 0 && *((_QWORD *)v5 + 2) > a3)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v5 = sub_1B1791044((uint64_t)v5);
    *(__n128 *)&v5[16 * a3 + 32] = a4;
    *v9 = v5;
  }
  return v9;
}

{
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;

  v5 = *(char **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_BYTE *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = ecs_stack_allocator_allocate(v8, 17, 8);
  *v9 = v5;
  v9[1] = v6;
  *((_BYTE *)v9 + 16) = v7;
  if ((a3 & 0x8000000000000000) == 0 && *((_QWORD *)v5 + 2) > a3)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v9 = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v5 = sub_1B1791044((uint64_t)v5);
    *(__n128 *)&v5[16 * a3 + 32] = a4;
    *v9 = v5;
  }
  return v9;
}

char *sub_1B1791044(uint64_t a1)
{
  return sub_1B1791058(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B1791058(char a1, uint64_t a2, char a3, char *a4)
{
  return sub_1B1C636EC(a1, a2, a3, a4, (void (*)(_QWORD))sub_1B1AE11F4);
}

void sub_1B1791068()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BB0E0)
  {
    sub_1B19F8DCC();
    v0 = sub_1B222A030();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BB0E0);
  }
}

uint64_t vfx_script_string_copy(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

double vfx_script_clock_time(_QWORD *a1)
{
  return *(double *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
}

uint64_t vfx_script_get_iteration_range(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 24);
  *a3 = v3;
  return result;
}

unint64_t vfx_script_clock_simulation_index(_QWORD *a1)
{
  unint64_t result;

  result = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 24);
  if ((result & 0x8000000000000000) != 0 || HIDWORD(result))
  {
    result = sub_1B222967C();
    __break(1u);
  }
  return result;
}

uint64_t vfx_script_texture_sample1d(uint64_t a1)
{
  if ((unint64_t)a1 > 1)
    return sub_1B202B210(a1);
  return a1;
}

BOOL vfx_script_clock_is_first_frame(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  v3 = *(_QWORD *)(v1 + 8);
  v2 = *(_QWORD *)(v1 + 16);
  return v3 == 1 && v2 == 0;
}

float vfx_script_clock_delta_time(_QWORD *a1)
{
  return *(float *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
}

uint64_t sub_1B1791240()
{
  uint64_t v0;

  sub_1B1A05648(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_1B1791274()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B17912A8()
{
  return swift_release();
}

uint64_t sub_1B17912B0()
{
  return swift_release();
}

uint64_t sub_1B17912B8()
{
  return swift_release();
}

uint64_t sub_1B17912C0()
{
  return swift_release();
}

uint64_t sub_1B17912C8()
{
  return swift_release();
}

uint64_t sub_1B17912D0()
{
  return swift_release();
}

uint64_t sub_1B17912D8()
{
  return swift_release();
}

uint64_t sub_1B17912E0()
{
  return swift_release();
}

uint64_t sub_1B17912E8()
{
  return swift_release();
}

uint64_t sub_1B17912F0()
{
  return swift_release();
}

uint64_t sub_1B17912F8()
{
  return swift_release();
}

uint64_t sub_1B1791300()
{
  return swift_release();
}

uint64_t sub_1B1791308()
{
  return swift_release();
}

uint64_t sub_1B1791310()
{
  return swift_release();
}

uint64_t sub_1B1791318()
{
  return swift_release();
}

uint64_t sub_1B1791320()
{
  return swift_release();
}

uint64_t sub_1B1791328()
{
  return swift_release();
}

uint64_t sub_1B1791330()
{
  return swift_release();
}

uint64_t sub_1B1791338()
{
  return swift_release();
}

uint64_t sub_1B1791340()
{
  return swift_release();
}

uint64_t sub_1B1791348()
{
  return swift_release();
}

uint64_t sub_1B1791350()
{
  return swift_release();
}

uint64_t sub_1B1791358()
{
  return swift_release();
}

uint64_t sub_1B1791360()
{
  return swift_release();
}

uint64_t sub_1B1791368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791378(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791398(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17913A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17913B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17913C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17913D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17913E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17913F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791418(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791428(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B1791498(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17914A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17914B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17914C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1B17914D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

unint64_t sub_1B17914E8()
{
  unint64_t result;

  result = qword_1ED4B72D0;
  if (!qword_1ED4B72D0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B72D0);
  }
  return result;
}

void sub_1B1791524(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1B179157C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA480)
  {
    sub_1B222847C();
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA480);
  }
}

uint64_t sub_1B17915D0(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1B17915FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t, _QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1B179165C()
{
  unint64_t v0;

  sub_1B1791524(319, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for VFXEffect()
{
  uint64_t result;

  result = qword_1ED4BB4C0;
  if (!qword_1ED4BB4C0)
    return swift_getSingletonMetadata();
  return result;
}

id sub_1B17917A4()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  objc_super v10;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC3VFX9VFXEffect_effectID];
  *(_DWORD *)v2 = 0;
  v2[4] = 1;
  v3 = &v0[OBJC_IVAR____TtC3VFX9VFXEffect_url];
  v4 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &v1[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX9VFXEffect_entityObject] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX9VFXEffect_delegate] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX9VFXEffect_version] = 0;
  v6 = OBJC_IVAR____TtC3VFX9VFXEffect_onEffectRestartSubject;
  sub_1B17915FC(0, (unint64_t *)&qword_1ED4BA238, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F28]);
  swift_allocObject();
  v7 = v1;
  *(_QWORD *)&v1[v6] = sub_1B2228434();
  *(_QWORD *)&v7[OBJC_IVAR____TtC3VFX9VFXEffect_cancellables] = MEMORY[0x1E0DEE9E8];
  v7[OBJC_IVAR____TtC3VFX9VFXEffect__enabled] = 1;
  v7[OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned] = 0;
  swift_unknownObjectWeakAssign();
  *(_DWORD *)v2 = 0;
  v2[4] = 1;
  v8 = &v7[OBJC_IVAR____TtC3VFX9VFXEffect_name];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0xE000000000000000;

  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for VFXEffect();
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t dispatch thunk of VFXEffect.id.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t sub_1B1791948()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    return 0;
  else
    return *(int *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
}

void sub_1B179196C()
{
  uint64_t v0;

  sub_1B1791978(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_1B1791978(uint64_t a1, char a2)
{
  void *v4;
  char v5;
  unint64_t v6;
  uint64_t v7;

  v4 = (void *)MEMORY[0x1B5E240CC](a1 + OBJC_IVAR____TtC3VFX9VFXEffect_scene);

  if (v4)
  {
    v5 = a2 & 1;
    *(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect__enabled) = v5;
    if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) == 0)
    {
      v6 = *(unsigned int *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
      sub_1B1F43C48();
      v7 = swift_retain();
      sub_1B1DA35C8(v7, v5, v7, v6);
      swift_release();
    }
  }
}

void sub_1B1791A24()
{
  unint64_t v0;

  sub_1B1792854(319, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for VFXScene(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1ED4BB4D0);
}

uint64_t dispatch thunk of VFXScene.timeScale.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

float sub_1B1791B44()
{
  uint64_t v0;

  return *(float *)(*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                              + OBJC_IVAR____TtC3VFX13EntityManager_scheduler)
                  + 208);
}

void sub_1B1791B68()
{
  uint64_t v0;

  sub_1B1791B84(*(id **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void ***)(v0 + 40));
}

void sub_1B1791B84(id *a1, void *a2, uint64_t a3, void **a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  id v18;
  char *v19;
  id v20;
  uint64_t v21;

  v9 = sub_1B2228110();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VFXEffect();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  v14 = a2;
  v15 = sub_1B17906F0((uint64_t)v14, v13);
  if (v4)
  {

    v16 = *a4;
    *a4 = v4;

  }
  else
  {
    v17 = v15;

    v18 = *a1;
    *a1 = v17;

    v19 = &v14[OBJC_IVAR____TtC3VFX8VFXScene_effects];
    v20 = *a1;
    MEMORY[0x1B5E2064C]();
    if (*(_QWORD *)((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v19 & 0xFFFFFFFFFFFFFF8)
                                                                                 + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
  }
}

uint64_t dispatch thunk of VFXScene.addEffect(from:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3C0))();
}

void sub_1B1791D00(uint64_t a1)
{
  _QWORD v1[6];
  uint64_t v2;
  id v3;

  v2 = 0;
  v3 = 0;
  v1[4] = a1;
  v1[5] = &v2;
  sub_1B1C276DC(sub_1B1791B68, (uint64_t)v1);
  if (v2)
  {
    swift_willThrow();

  }
}

uint64_t dispatch thunk of VFXScene.isFrozen.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t sub_1B1791D98()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager)
                            + OBJC_IVAR____TtC3VFX13EntityManager_clock
                            + 97);
}

id VFXScene.init(options:)(_BYTE *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  id v15;
  id v16;
  uint64_t v17;
  objc_super v19;

  v2 = v1;
  v4 = OBJC_IVAR____TtC3VFX8VFXScene_loader;
  type metadata accessor for VFXLoader();
  swift_allocObject();
  sub_1B21218F8();
  *(_QWORD *)&v1[v4] = v5;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_templateRemapTable] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_templateWasPrepared] = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_effects] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityObjects] = v6;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene__version] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_isInsideRE] = 0;
  v1[OBJC_IVAR____TtC3VFX8VFXScene_isREAssetScene] = 0;
  v7 = OBJC_IVAR____TtC3VFX8VFXScene_transientDrawCall;
  v8 = objc_allocWithZone((Class)type metadata accessor for VFXREDrawCall());
  v9 = v2;
  *(_QWORD *)&v2[v7] = objc_msgSend(v8, sel_init);
  v9[OBJC_IVAR____TtC3VFX8VFXScene_hasSharedEntityManager] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs] = 0;
  v10 = &v9[OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL];
  v11 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormat] = 115;
  v9[OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth] = 1;
  v9[OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_debugUIOptions] = 0;
  if (a1[OBJC_IVAR___VFXSceneLoadOptions_setupRenderer])
    v12 = 0x746E657365727028;
  else
    v12 = 0x296C65646F6D28;
  if (a1[OBJC_IVAR___VFXSceneLoadOptions_setupRenderer])
    v13 = 0xEE00296E6F697461;
  else
    v13 = 0xE700000000000000;
  type metadata accessor for EntityManager();
  swift_allocObject();
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_entityManager] = sub_1B1DA6CC4(v12, v13, 1, 0);
  *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX8VFXScene_loadOptions] = a1;
  v14 = a1;

  v19.receiver = v9;
  v19.super_class = (Class)type metadata accessor for VFXScene(0);
  v15 = objc_msgSendSuper2(&v19, sel_init);
  swift_unknownObjectWeakAssign();
  v16 = v15;
  v17 = swift_retain();
  sub_1B1C28548(v17);
  swift_release();
  if (qword_1ED4B91A0 != -1)
    swift_once();

  return v16;
}

uint64_t dispatch thunk of VFXScene.effects.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t sub_1B1792068()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B179207C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v1 = sub_1B2228110();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, v6);
  MEMORY[0x1E0C80A78](v7, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v40 - v12;
  v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  result = *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (result)
  {
    v40 = v11;
    v43 = swift_retain();
    sub_1B1C2A4E0(v43);
    swift_getKeyPath();
    v16 = *(_QWORD *)(v14 + 176);
    swift_retain();
    v17 = sub_1B1F22924((uint64_t)&type metadata for SceneAssetRegistryInstance, (uint64_t)&off_1E63B2458, v16, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1B692E4);
    swift_release();
    swift_release();
    swift_release();
    if (!v17)
    {
      type metadata accessor for SceneAssetRegistry();
      v18 = v0;
      v19 = swift_allocObject();
      swift_retain();
      v20 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)(v19 + 16) = sub_1B1B8065C(MEMORY[0x1E0DEE9D8]);
      *(_QWORD *)(v19 + 24) = sub_1B1B80780(v20);
      swift_weakInit();
      swift_weakAssign();
      v21 = swift_release();
      MEMORY[0x1E0C80A78](v21, v22);
      *(&v40 - 2) = v19;
      v23 = *(_QWORD **)(v14 + 176);
      swift_retain();
      sub_1B1F22244((uint64_t)&type metadata for SceneAssetRegistryInstance, (uint64_t)&off_1E63B2458, v23, (void (*)(uint64_t))sub_1B1C2F670);
      v0 = v18;
      swift_release();
      swift_release();
    }
    v41 = v0;
    v24 = MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs))
      v24 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8VFXScene_metalBinaryArchiveURLs);
    v42 = v24;
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v26 = v42 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      v27 = *(_QWORD *)(v2 + 72);
      v28 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v28(v13, v26, v1);
        v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
        v29(v13, 0, 1, v1);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v13, 1, v1) == 1)
          break;
        (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v13, v1);
        sub_1B1B2D3BC();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
        v26 += v27;
        if (!--v25)
          goto LABEL_12;
      }
    }
    else
    {
      v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      swift_bridgeObjectRetain();
LABEL_12:
      v29(v13, 1, 1, v1);
    }
    swift_bridgeObjectRelease();
    v30 = v40;
    v31 = v41;
    sub_1B19EC90C(v41 + OBJC_IVAR____TtC3VFX8VFXScene_recordedMetalBinaryArchiveURL, v40);
    v32 = v43;
    sub_1B17927B4(v30, *(_QWORD *)(v43 + 232) + OBJC_IVAR____TtC3VFX11ShaderCache_urlToSaveBinaryArchiveTo);
    v33 = *(unsigned __int8 *)(v31 + OBJC_IVAR____TtC3VFX8VFXScene_internalPixelFormatDepth);
    if (v33 != 1)
    {
      *(_BYTE *)(v32 + 585) = v33;
      sub_1B1BA370C();
    }
    if (*(_BYTE *)(v31 + OBJC_IVAR____TtC3VFX8VFXScene_useGammaBlending) != 1)
      return swift_release();
    *(_BYTE *)(v32 + 600) = 1;
    sub_1B1BA3980();
    sub_1B1BA1794();
    v34 = *(_QWORD *)(v32 + 272);
    sub_1B2061BE4(*(_QWORD *)(v32 + 592));
    if (*(_QWORD *)(v32 + 608))
      return swift_release();
    v35 = *(unsigned __int8 *)(v32 + 585);
    v36 = *(unsigned __int8 *)(v32 + 600);
    if (v35 == 2)
    {
      v38 = v36 == 0;
      v39 = 552;
    }
    else
    {
      if (v35 == 1)
      {
        v37 = 115;
LABEL_26:
        *(_QWORD *)(v34 + 48) = v37;
        sub_1B2062FFC(v37);
        return swift_release();
      }
      if (*(_BYTE *)(v32 + 585))
      {
        v44 = *(_BYTE *)(v32 + 585);
        result = sub_1B2229F70();
        __break(1u);
        return result;
      }
      v38 = v36 == 0;
      v39 = 70;
    }
    if (v38)
      v37 = v39 + 1;
    else
      v37 = v39;
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_1B17924B0()
{
  uint64_t v0;

  return sub_1B1790CB8(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t dispatch thunk of VFXScene.performTransaction(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

void sub_1B17924D8()
{
  unint64_t v0;

  sub_1B1792854(319, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1B17925E0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for VFXScene.LoadOptions(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1ED4BBC48);
}

uint64_t dispatch thunk of VFXScene.LoadOptions.clientID.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x328))();
}

uint64_t sub_1B1792664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3 = (_QWORD *)(v2 + OBJC_IVAR___VFXSceneLoadOptions_clientID);
  *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t dispatch thunk of VFXScene.LoadOptions.automaticallyPrepareScene.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t sub_1B179269C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_automaticallyPrepareScene) = result;
  return result;
}

uint64_t dispatch thunk of VFXScene.LoadOptions.internalPixelFormatDepth.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t sub_1B17926C8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_internalPixelFormatDepth) = result;
  return result;
}

uint64_t dispatch thunk of VFXScene.LoadOptions.loadBindingsMetadata.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t sub_1B17926F4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_loadBindingsMetadata) = result;
  return result;
}

uint64_t dispatch thunk of VFXScene.LoadOptions.setupAsyncRuntime.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t sub_1B1792720(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_setupAsyncRuntime) = result;
  return result;
}

uint64_t dispatch thunk of VFXScene.LoadOptions.useGammaBlending.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t sub_1B179274C(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_useGammaBlending) = result;
  return result;
}

uint64_t dispatch thunk of VFXScene.LoadOptions.setupAsTemplate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t sub_1B1792778(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR___VFXSceneLoadOptions_setupAsTemplate) = result;
  return result;
}

uint64_t dispatch thunk of VFXScene.LoadOptions.metalLibraryURL.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t sub_1B17927A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B17927B4(a1, v1 + OBJC_IVAR___VFXSceneLoadOptions_metalLibraryURL);
}

uint64_t sub_1B17927B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1792810(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1B1792854(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1B2229124();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1B17928A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BF720)
  {
    sub_1B2228110();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BF720);
  }
}

void *sub_1B17928F4(void *a1, CFX::CrossFrameResourceManager *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v57;
  uint64_t v58;

  v4 = CFX::CrossFrameResourceManager::get(this, 0xD877AC05CAC46D3ELL);
  if (v4)
  {
    v11 = (_QWORD *)v4;
    v12 = *(void **)(v4 + 16);
  }
  else
  {
    v11 = sub_1B1792A94(this, 0xD877AC05CAC46D3ELL);
    v16 = (void *)objc_msgSend_resourceManager(a1, v13, v14, v15);
    v18 = (void *)objc_msgSend_texture2DDescriptorWithPixelFormat_width_height_mipmapped_(MEMORY[0x1E0CC6BB0], v17, 125, 32, 32, 0);
    objc_msgSend_setStorageMode_(v18, v19, 2, v20);
    objc_msgSend_setUsage_(v18, v21, 1, v22);
    v12 = (void *)objc_msgSend_newTextureWithDescriptor_(v16, v23, (uint64_t)v18, v24);
    v28 = (void *)objc_msgSend_device(a1, v25, v26, v27);
    v30 = (const char *)(id)objc_msgSend_newBufferWithBytes_length_options_(v28, v29, (uint64_t)&unk_1B2240BF0, 0x4000, 0);
    v34 = (void *)objc_msgSend_commandQueue(a1, v31, v32, v33);
    v38 = (void *)objc_msgSend_commandBuffer(v34, v35, v36, v37);
    v57 = 0;
    v58 = 0;
    sub_1B1792B08(&v57, v38, 0, v39, v40, v41, v42, v43);
    sub_1B1792BAC(&v57, v30, 0, v12, 0, 0);
    v51 = v57;
    if (!v57)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v45, v46, v47, v48, v49, v50, (uint64_t)"_encoder != nil");
      v51 = v57;
    }
    objc_msgSend_endEncoding(v51, v44, v45, v46);
    v57 = 0;
    v58 = 0;
    objc_msgSend_commit(v38, v52, v53, v54);
    v55 = (void *)v11[2];
    if (v55 != v12)
    {
      if (v55)

      v11[2] = v12;
    }
  }
  if (!v12)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v5, v6, v7, v8, v9, v10, (uint64_t)"_ptr != NULL");
    return (void *)v11[2];
  }
  return v12;
}

_QWORD *sub_1B1792A94(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CE408;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void *sub_1B1792B08(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  const char *v12;
  uint64_t v13;

  if (*a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_encoder == nil");
  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commandBuffer != nil");
  *a1 = 0;
  a1[1] = 0;
  result = (void *)objc_msgSend_blitCommandEncoder(a2, (const char *)a2, a3, a4);
  *a1 = result;
  a1[1] = a2;
  if (a3)
    return (void *)objc_msgSend_setLabel_(result, v12, a3, v13);
  return result;
}

uint64_t sub_1B1792BAC(void **a1, const char *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  _QWORD v36[3];
  _QWORD v37[3];

  objc_msgSend_pixelFormat(a4, a2, a3, (uint64_t)a4);
  v12 = (unint64_t)sub_1B189D6D0() >> 3;
  v16 = objc_msgSend_width(a4, v13, v14, v15) * v12;
  v20 = objc_msgSend_height(a4, v17, v18, v19) * v16;
  v24 = objc_msgSend_width(a4, v21, v22, v23);
  v28 = objc_msgSend_height(a4, v25, v26, v27);
  v32 = objc_msgSend_depth(a4, v29, v30, v31);
  memset(v36, 0, sizeof(v36));
  v33 = *a1;
  v37[0] = v24;
  v37[1] = v28;
  v37[2] = v32;
  return objc_msgSend_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_(v33, v34, (uint64_t)a2, a3, v16, v20, v37, a4, a5, a6, v36);
}

uint64_t sub_1B1792C8C(void *a1, CFX::CrossFrameResourceManager *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t result;
  void *v56[3];
  int v57;

  v10 = CFX::CrossFrameResourceManager::get(this, 0x2D6F9F4D8FCEC7B4);
  if (!v10)
  {
    v10 = (uint64_t)sub_1B1792A94(this, 0x2D6F9F4D8FCEC7B4);
    v14 = (void *)objc_msgSend_resourceManager(a1, v11, v12, v13);
    v16 = (void *)objc_msgSend_texture2DDescriptorWithPixelFormat_width_height_mipmapped_(MEMORY[0x1E0CC6BB0], v15, 72, 256, 256, 0);
    objc_msgSend_setUsage_(v16, v17, 3, v18);
    v21 = objc_msgSend_newTextureWithDescriptor_(v14, v19, (uint64_t)v16, v20);
    v25 = (void *)objc_msgSend_commandQueue(a1, v22, v23, v24);
    v29 = (void *)objc_msgSend_commandBuffer(v25, v26, v27, v28);
    v56[1] = v29;
    v57 = 0;
    v56[0] = objc_alloc_init(RGCachedComputeCommandEncoder);
    objc_msgSend_loadWithCommandBuffer_label_(v56[0], v30, (uint64_t)v29, 0);
    v56[2] = 0;
    v34 = (void *)objc_msgSend_resourceManager(a1, v31, v32, v33);
    v37 = (void *)objc_msgSend_newComputePipelineStateWithFunctionName_(v34, v35, (uint64_t)CFSTR("vfx_generate_grain"), v36);
    v38 = sub_1B18FD774((uint64_t)v37);
    objc_msgSend_setComputePipelineState_(v56[0], v39, v38, v40);
    objc_msgSend_setTexture_atIndex_(v56[0], v41, v21, 0);
    objc_msgSend_dispatchOnTexture2D_(v56[0], v42, v21, v43);
    sub_1B1792E3C((uint64_t)v56, v44, v45, v46, v47, v48, v49, v50);

    objc_msgSend_commit(v29, v51, v52, v53);
    v54 = *(void **)(v10 + 16);
    if (v54 != (void *)v21)
    {
      if (v54)

      *(_QWORD *)(v10 + 16) = v21;
    }

  }
  result = *(_QWORD *)(v10 + 16);
  if (!result)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v4, v5, v6, v7, v8, v9, (uint64_t)"_ptr != NULL");
    return *(_QWORD *)(v10 + 16);
  }
  return result;
}

void sub_1B1792E20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B1792E3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  const char *v10;
  uint64_t v11;

  v9 = *(void **)a1;
  if (!v9)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_encoder != nil");
    v9 = *(void **)a1;
  }
  objc_msgSend_endEncoding(v9, a2, a3, a4);
  *(_QWORD *)(a1 + 8) = 0;
  return objc_msgSend_setEncoder_(*(void **)a1, v10, 0, v11);
}

void sub_1B1792E98(unsigned int a1, float32x2_t *a2, float a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  double v8;
  int v9;
  int v10;
  float32x2_t *v11;
  float v12;
  int v13;
  float32x2_t *v14;
  float v15;
  float v16;
  __float2 v17;
  uint64_t v18;
  float v19;
  float32x2_t *v20;
  float *v22;
  float v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  float32x2_t *v29;
  float32x2_t v30;
  float v32;
  double v38;
  double v39;
  uint64_t v40;
  float v42;
  float v44;
  uint64_t v46;
  float v47;
  float32x2_t *v48;
  int v49;
  float32x2_t *v50;
  int v51;
  __int128 v52;
  float v53;

  if (a1)
  {
    v5 = 0;
    LODWORD(v3) = vcvtps_s32_f32(a3);
    v6 = a1;
    v7 = a1 - 1;
    v8 = a3;
    if ((int)v3 >= 0)
      v9 = v3;
    else
      v9 = -(int)v3;
    v51 = v9;
    v10 = v9 + 1;
    v11 = &a2[(int)v3 + (uint64_t)-(int)v3];
    do
    {
      if ((v3 & 0x80000000) == 0)
      {
        v52 = xmmword_1B2244BF0[3 * (int)v7 + v5];
        LODWORD(v12) = HIDWORD(*(_QWORD *)&xmmword_1B2244BF0[3 * (int)v7 + v5]);
        v13 = -(int)v3;
        v14 = v11;
        do
        {
          v15 = (float)v13 * 1.1 / v8;
          v16 = v15 * v15;
          v53 = expf(v12 * (float)(v15 * v15));
          v17 = __sincosf_stret(*(float *)&v52 * v16);
          *v14++ = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v17.__sinval), LODWORD(v17.__cosval)), v53);
          ++v13;
        }
        while (v10 != v13);
      }
      ++v5;
      v11 += 128;
    }
    while (v5 != v6);
    v18 = 0;
    v19 = 0.0;
    v20 = a2;
    do
    {
      _D1 = a2[128 * v18 + (int)v3];
      v22 = (float *)&xmmword_1B2244BF0[3 * (int)v7 + v18];
      v23 = v22[2];
      v24 = v22[3];
      v19 = (float)(v19 + (float)(v23 * vmlas_n_f32(vmuls_lane_f32(-_D1.f32[1], _D1, 1), _D1.f32[0], _D1.f32[0])))
          + v24 * ((_D1.f32[0] + _D1.f32[0]) * _D1.f32[1]);
      if ((int)v3 >= 1)
      {
        v25 = v23;
        v26 = v25 + v25;
        v27 = v24 + v24;
        v28 = v3;
        v29 = v20;
        do
        {
          v30 = *v29++;
          _V17.S[1] = v30.i32[1];
          v32 = v19 + v26 * vmlas_n_f32(vmuls_lane_f32(-_D1.f32[1], v30, 1), _D1.f32[0], v30.f32[0]);
          __asm { FMLA            S18, S1, V17.S[1] }
          v19 = v32 + v27 * _S18;
          --v28;
        }
        while (v28);
        v38 = v25 * 4.0;
        v39 = v24 * 4.0;
        do
        {
          v40 = 0;
          _D16 = a2[128 * v18 + v28];
          v42 = v19 + v26 * vmlas_n_f32(-(float)(_D16.f32[1] * _D1.f32[1]), _D1.f32[0], _D16.f32[0]);
          v19 = v42 + v27 * vmlas_n_f32(vmuls_lane_f32(_D1.f32[0], _D16, 1), _D1.f32[1], _D16.f32[0]);
          do
          {
            _D19 = v20[v40];
            v44 = v19 + v38 * vmlas_n_f32(vmuls_lane_f32(-_D16.f32[1], _D19, 1), _D16.f32[0], _D19.f32[0]);
            __asm { FMLA            S20, S16, V19.S[1] }
            v19 = v44 + v39 * _S20;
            ++v40;
          }
          while (v3 != v40);
          ++v28;
        }
        while (v28 != v3);
      }
      ++v18;
      v20 += 128;
    }
    while (v18 != v6);
    v46 = 0;
    v47 = 1.0 / sqrtf(v19);
    v48 = &a2[(int)v3 + (uint64_t)-(int)v3];
    do
    {
      v49 = v3 + v51 + 1;
      v50 = v48;
      if ((v3 & 0x80000000) == 0)
      {
        do
        {
          *v50 = vmul_n_f32(*v50, v47);
          ++v50;
          --v49;
        }
        while (v49);
      }
      ++v46;
      v48 += 128;
    }
    while (v46 != v6);
  }
}

uint64_t sub_1B1793184(void *a1, CFX::CrossFrameResourceManager *this, unsigned int a3, void *a4, float a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t result;
  float32x2_t v30[386];

  v30[385] = *(float32x2_t *)MEMORY[0x1E0C80C00];
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * ((unint64_t)a5 ^ 0x43C4F620D84108D1)) ^ ((0x9DDFEA08EB382D69
                                                                                  * ((unint64_t)a5 ^ 0x43C4F620D84108D1)) >> 47) ^ 0x43C4F620D84108D1);
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  v12 = a3;
  v13 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ a3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ a3)))) ^ ((0x9DDFEA08EB382D69 * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ a3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ a3)))) >> 47));
  v20 = CFX::CrossFrameResourceManager::get(this, v13);
  if (!v20)
  {
    v20 = (uint64_t)sub_1B179333C(this, v13);
    MEMORY[0x1E0C80A78](v20, v21);
    sub_1B1792E98(a3, v30, a5);
    v25 = objc_msgSend_resourceManager(a1, v22, v23, v24);
    v26 = sub_1B18FBF78(v25, (const char *)v30, v12 << 10, 0);
    v27 = *(void **)(v20 + 16);
    if (v27 != (void *)v26)
    {
      v28 = v26;
      if (v27)

      *(_QWORD *)(v20 + 16) = v28;
    }
  }
  if (a4)
    memcpy(a4, &xmmword_1B2244BF0[3 * v12 - 3], 16 * v12);
  result = *(_QWORD *)(v20 + 16);
  if (!result)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v14, v15, v16, v17, v18, v19, (uint64_t)"_ptr != NULL");
    return *(_QWORD *)(v20 + 16);
  }
  return result;
}

_QWORD *sub_1B179333C(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CE3E8;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B17933B0(CFX::CrossFrameResourceManager *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v31[4];

  v2 = CFX::CrossFrameResourceManager::get(a1, 0x5A81C135E3353BC9);
  if (!v2)
  {
    v2 = (uint64_t)sub_1B1793480(a1, 0x5A81C135E3353BC9);
    v3 = sub_1B1877ABC();
    sub_1B193E5B0(v3, CFSTR("--SimplifiedMaterial--"), v4, v5, v6, v7, v8, v9);
    v17 = sub_1B187813C(v3, v10, v11, v12, v13, v14, v15, v16);
    sub_1B18412A8(v17, 2, v18, v19, v20, v21, v22, v23);
    v24 = *(const void **)(v2 + 16);
    if (v24 != (const void *)v3)
    {
      if (v24)
        CFRelease(v24);
      *(_QWORD *)(v2 + 16) = v3;
    }
    sub_1B179CD74(v31, 1.0, 1.0, 1.0, 1.0);
    sub_1B1841B94(v17, 1, v31, v25, v26, v27, v28, v29);
  }
  return *(_QWORD *)(v2 + 16);
}

_QWORD *sub_1B1793480(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CE460;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

_QWORD *sub_1B17934F4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CE408;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B179352C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CE408;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B1793574(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CE3E8;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B17935AC(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CE3E8;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B17935F4(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E63CE460;
  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1B179362C(_QWORD *a1)
{
  const void *v1;

  *a1 = &off_1E63CE460;
  v1 = (const void *)a1[2];
  if (v1)
    CFRelease(v1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B1793A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v8;
  _QWORD v9[3];

  v8 = *(__n128 **)(a1 + 32);
  memset(v9, 0, sizeof(v9));
  sub_1B17A1A2C(v8, (unsigned __int8 *)v9, a3, a4, a5, a6, a7, a8);
}

void sub_1B1793D8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v5 = (__n128 *)objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  v12 = *(_OWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 56);
  sub_1B17A1A2C(v5, (unsigned __int8 *)&v12, v6, v7, v8, v9, v10, v11);
}

void *dlsym_default(char *__symbol)
{
  return dlsym((void *)0xFFFFFFFFFFFFFFFELL, __symbol);
}

void *dlsym_self(char *__symbol)
{
  return dlsym((void *)0xFFFFFFFFFFFFFFFDLL, __symbol);
}

uint64_t vfx_swift_deimmortalize(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0x100000003;
  return result;
}

BOOL vfx_swift_is_immortal(uint64_t a1)
{
  return (~*(_QWORD *)(a1 + 8) & 0x80000000FFFFFFFFLL) == 0;
}

BOOL _vfx_swift_has_weak_ref(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return (~v1 & 0x80000000FFFFFFFFLL) != 0 && v1 < 0;
}

uint64_t vfx_swift_release_dealloc(_QWORD *a1)
{
  return (*(uint64_t (**)(void))(*a1 - 16))();
}

BOOL sub_1B1793FE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (sub_1B185F484(a1))
    v9 = sub_1B185F4D4(a1, v2, v3, v4, v5, v6, v7, v8);
  else
    v9 = 0;
  if (sub_1B186105C(a1) || ((sub_1B185F474(a1, v10, v11, v12, v13, v14, v15, v16) | v9) & 1) != 0)
    return 0;
  v24 = sub_1B186064C(a1, v17, v18, v19, v20, v21, v22, v23);
  if (v24 != 1 && v24 != 3)
  {
    if (v24 == 4)
      return sub_1B1861474(a1, v25, v26, v27, v28, v29, v30, v31) != 0;
    return 0;
  }
  return sub_1B185FC40(a1, v25, v26, v27, v28, v29, v30, v31) > 0.0;
}

uint64_t sub_1B1794080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v9 = sub_1B186064C(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((v9 & 0xFFFFFFFB) == 0)
    return 0;
  v17 = v9 - 1;
  result = 1;
  switch(v17)
  {
    case 0:
    case 2:
      if (sub_1B185FC40(a1, v10, v11, v12, v13, v14, v15, v16) <= 0.0)
        goto LABEL_9;
      goto LABEL_4;
    case 1:
    case 4:
      return result;
    default:
LABEL_4:
      if (sub_1B185F484(a1))
        v26 = sub_1B185F4D4(a1, v19, v20, v21, v22, v23, v24, v25);
      else
        v26 = 0;
      if (sub_1B186105C(a1))
LABEL_9:
        result = 1;
      else
        result = sub_1B185F474(a1, v27, v28, v29, v30, v31, v32, v33) | v26;
      break;
  }
  return result;
}

uint64_t sub_1B1794128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v9 = a2;
  result = (uint64_t)sub_1B1868FE8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v18 = result;
    result = sub_1B1794080(result, v11, v12, v13, v14, v15, v16, v17);
    if ((_DWORD)result)
    {
      v26 = *(unsigned int *)(a3 + 584);
      if (v26 <= 7)
      {
        *(_DWORD *)(a3 + 4 * v26 + 520) = v9;
        result = sub_1B185F324(v18, v19, v20, v21, v22, v23, v24, v25);
        *(_DWORD *)(a3 + 4 * (*(_DWORD *)(a3 + 584))++ + 552) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1B1794198(const __CFDictionary *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = sub_1B17943C0;
  v10[3] = &unk_1E63D4B00;
  v10[5] = a3;
  v10[6] = a1;
  v10[4] = &v11;
  sub_1B1794224(a1, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
  v8 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v8;
}

const __CFDictionary *sub_1B1794224(const __CFDictionary *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFDictionary *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t *v74;
  _OWORD v75[4];
  _OWORD v76[4];
  uint64_t v77;

  v10 = result;
  v77 = *MEMORY[0x1E0C80C00];
  memset(v76, 0, sizeof(v76));
  memset(v75, 0, sizeof(v75));
  v11 = *((unsigned int *)result + 146);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v13 = *((unsigned int *)result + i + 130);
      v14 = (v13 & 0xFFFFFFF) - 1;
      v15 = (char *)result + ((v13 >> 25) & 0x78);
      *((_QWORD *)v76 + i) = *(_QWORD *)(*((_QWORD *)v15 + 19) + 8 * v14);
      *((_QWORD *)v75 + i) = *(_QWORD *)(*((_QWORD *)v15 + 27) + 8 * v14);
    }
    return (const __CFDictionary *)(*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
  }
  else if (!(*((_DWORD *)result + 23) | *((_DWORD *)result + 22) | *((_DWORD *)result + 26) | *((_DWORD *)result + 27)))
  {
    result = sub_1B1795AFC((uint64_t)a2, v11, a3, a4, a5, a6, a7, a8);
    if ((_DWORD)result)
    {
      v74 = sub_1B1814578((uint64_t)a2, v16, v17, v18, v19, v20, v21, v22);
      v30 = sub_1B1868FE8((uint64_t)v74, v23, v24, v25, v26, v27, v28, v29);
      if (sub_1B1814720((uint64_t)a2, v31, v32, v33, v34, v35, v36, v37))
      {
        v45 = sub_1B1814768(a2, v38, v39, v40, v41, v42, v43, v44);
        sub_1B18138CC((uint64_t)a2, (uint64_t)v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        v59 = sub_1B1814530((uint64_t)a2, v38, v39, v40, v41, v42, v43, v44);
        v67 = sub_1B1814768(a2, v60, v61, v62, v63, v64, v65, v66);
        sub_1B18138CC((uint64_t)a2, (uint64_t)v67, v68, v69, v70, v71, v72, v73);
        if (!v59)
          sub_1B18141B0((uint64_t)a2, 0, v53, v54, v55, v56, v57, v58);
      }
      *((_DWORD *)v10 + 138) = sub_1B185F324((uint64_t)v30, v52, v53, v54, v55, v56, v57, v58);
      return (const __CFDictionary *)(*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
    }
  }
  return result;
}

_QWORD *sub_1B17943C0(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _OWORD *v6;
  __int128 v7;
  char v8;

  v1 = result[5];
  v2 = (_QWORD *)result[6];
  if (*(_QWORD *)v1 == v2[69]
    && *(_QWORD *)(v1 + 8) == v2[70]
    && *(_QWORD *)(v1 + 16) == v2[71]
    && *(_QWORD *)(v1 + 24) == v2[72])
  {
    v8 = 0;
  }
  else
  {
    v6 = v2 + 69;
    v7 = v6[1];
    *(_OWORD *)v1 = *v6;
    *(_OWORD *)(v1 + 16) = v7;
    v8 = 1;
  }
  *(_BYTE *)(*(_QWORD *)(result[4] + 8) + 24) = v8;
  return result;
}

void *sub_1B1794418(void *a1, size_t a2, size_t a3, size_t alignment)
{
  void *memptr;

  memptr = 0;
  malloc_type_posix_memalign(&memptr, alignment, a3, 0x3D13089FuLL);
  if (a2)
    memcpy(memptr, a1, a2);
  free(a1);
  return memptr;
}

void sub_1B1794478(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  size_t v15;
  void **v16;
  void *v17;
  void **v18;
  void **v19;
  void **v20;
  size_t v21;
  unsigned int v22;

  v8 = a3;
  if (a2 >= 8)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong light type"), a3, a4, a5, a6, a7, a8, (uint64_t)"type < kCFXLightEffectiveTypeCount");
  }
  else if (a2 == 4)
  {
    sub_1B1847EF8(*(_QWORD *)(a1 + 24), a3 + 1, a3, a4, a5, a6, a7, a8);
  }
  v11 = a1 + 4 * a2;
  v14 = *(_DWORD *)(v11 + 112);
  v13 = (_DWORD *)(v11 + 112);
  v12 = v14;
  if (v14 <= v8)
  {
    if (v12)
      v15 = 2 * v12;
    else
      v15 = 8;
    v16 = (void **)(a1 + 8 * a2);
    v18 = v16 + 19;
    v17 = v16[19];
    v19 = v16 + 27;
    if (v17)
    {
      *v18 = malloc_type_realloc(v17, 8 * v15, 0x2004093837F09uLL);
      v16[35] = malloc_type_realloc(v16[35], 8 * v15, 0x100004000313F17uLL);
      *v19 = malloc_type_realloc(*v19, 8 * v15, 0x2004093837F09uLL);
      v16[43] = malloc_type_realloc(v16[43], v15, 0x100004077774924uLL);
      v16[51] = malloc_type_realloc(v16[51], v15, 0x100004077774924uLL);
      switch(a2)
      {
        case 2u:
          *(_QWORD *)(a1 + 472) = sub_1B1794418(*(void **)(a1 + 472), 16 * *v13, 16 * v15, 0x10uLL);
          break;
        case 3u:
          *(_QWORD *)(a1 + 488) = sub_1B1794418(*(void **)(a1 + 488), 48 * *v13, 48 * v15, 0x10uLL);
          break;
        case 5u:
          *(_QWORD *)(a1 + 496) = sub_1B1794418(*(void **)(a1 + 496), 80 * *v13, 80 * v15, 0x10uLL);
          break;
        case 6u:
          *(_QWORD *)(a1 + 480) = sub_1B1794418(*(void **)(a1 + 480), 16 * *v13, 16 * v15, 0x10uLL);
          break;
        default:
          break;
      }
    }
    else
    {
      *v18 = malloc_type_calloc(8uLL, v15, 0xAD0AAE88uLL);
      v16[35] = malloc_type_calloc(8 * v15, 1uLL, 0x813033A4uLL);
      *v19 = malloc_type_calloc(8uLL, v15, 0x879268EEuLL);
      v16[43] = malloc_type_calloc(1uLL, v15, 0xFBCFBD3FuLL);
      v16[51] = malloc_type_calloc(1uLL, v15, 0xDBA7E0E2uLL);
      switch(a2)
      {
        case 2u:
          v20 = (void **)(a1 + 472);
          goto LABEL_20;
        case 3u:
          v20 = (void **)(a1 + 488);
          v21 = 48 * v15;
          v22 = -288221644;
          goto LABEL_21;
        case 5u:
          v20 = (void **)(a1 + 496);
          v21 = 80 * v15;
          v22 = 1112007933;
          goto LABEL_21;
        case 6u:
          v20 = (void **)(a1 + 480);
LABEL_20:
          v21 = 16 * v15;
          v22 = 1159420904;
LABEL_21:
          malloc_type_posix_memalign(v20, 0x10uLL, v21, v22 | 0x100004000000000);
          break;
        default:
          break;
      }
    }
    *v13 = v15;
  }
}

void sub_1B1794784(uint64_t a1, void *value)
{
  __CFSet **v3;
  __CFSet *Mutable;

  v3 = (__CFSet **)(a1 + 116504);
  Mutable = *(__CFSet **)(a1 + 116504);
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B3B0]);
    *v3 = Mutable;
  }
  CFSetAddValue(Mutable, value);
}

void sub_1B17947D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  uint64_t v53;
  float v54;
  int32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  unsigned int v59;
  float32x2_t v60;
  float32x2_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  __int128 v85;

  v10 = a3;
  v11 = a2;
  v13 = sub_1B1869AC8(a4, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  v84 = sub_1B185FC40((uint64_t)a5, v14, v15, v16, v17, v18, v19, v20);
  v28 = &a1[v11];
  *(_QWORD *)(v28[35] + 8 * v10) = sub_1B185FE0C((uint64_t)a5, v21, v22, v23, v24, v25, v26, v27);
  if (sub_1B1861080((uint64_t)a5, v29, v30, v31, v32, v33, v34, v35)
    || sub_1B185FC88((uint64_t)a5, v36, v37, v38, v39, v40, v41, v42))
  {
    *(_QWORD *)(v28[35] + 8 * v10) = 0;
  }
  switch(v11)
  {
    case 2:
      v43 = a1[59];
      v44 = *(_OWORD *)(v13 + 48);
      *((float *)&v44 + 3) = v84;
      goto LABEL_10;
    case 3:
      v51 = sub_1B185FA20((uint64_t)a5, v36, v37, v38, v39, v40, v41, v42) / 180.0 * 3.14159265 * 0.5;
      if (v84 <= 0.0)
        v52 = INFINITY;
      else
        v52 = v84;
      v53 = a1[61] + 48 * v10;
      v83 = *(float32x4_t *)(v13 + 32);
      v85 = *(_OWORD *)(v13 + 48);
      v54 = tanf(v51);
      v55 = (int32x4_t)vmulq_f32(v83, v83);
      v55.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v55, 2), vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1))).u32[0];
      v56 = vrsqrte_f32((float32x2_t)v55.u32[0]);
      v57 = vmul_f32(v56, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v56, v56)));
      v58 = vmulq_n_f32(vnegq_f32(v83), vmul_f32(v57, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v57, v57))).f32[0]);
      *(float *)&v59 = (float)(v54 * v54) + 1.0;
      v60 = vrsqrte_f32((float32x2_t)v59);
      v61 = vmul_f32(v60, vrsqrts_f32((float32x2_t)v59, vmul_f32(v60, v60)));
      *(_OWORD *)v53 = v85;
      *(float32x4_t *)(v53 + 16) = v58;
      *(float *)(v53 + 32) = v52;
      *(float *)(v53 + 36) = v52 * v54;
      *(_DWORD *)(v53 + 40) = vmul_f32(v61, vrsqrts_f32((float32x2_t)v59, vmul_f32(v61, v61))).u32[0];
      *(float *)(v53 + 44) = v54;
      break;
    case 4:
      if (sub_1B1861474((uint64_t)a5, v36, v37, v38, v39, v40, v41, v42))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong probe type"), v45, v46, v47, v48, v49, v50, (uint64_t)"CFXLightGetProbeType(light) == kCFXLightProbeTypeIrradiance");
      sub_1B1847FA8(a1[3], v10, a4, (uint64_t)a5, v47, v48, v49, v50);
      break;
    case 5:
      if (sub_1B1861474((uint64_t)a5, v36, v37, v38, v39, v40, v41, v42) != 1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong probe type"), v63, v64, v65, v66, v67, v68, (uint64_t)"CFXLightGetProbeType(light) == kCFXLightProbeTypeRadiance");
      v69 = sub_1B18618E0(a5, v62, v63, v64, v65, v66, v67, v68);
      v70.i64[0] = 0x3F0000003F000000;
      v70.i64[1] = 0x3F0000003F000000;
      v71 = vmulq_f32((float32x4_t)v69, v70);
      v72 = a1[62] + 80 * v10;
      v73 = *(float32x4_t *)(v13 + 16);
      v74 = *(float32x4_t *)(v13 + 32);
      v75 = vmlaq_f32(vmlaq_f32(vmlaq_f32(*(float32x4_t *)(v13 + 48), (float32x4_t)0, v74), (float32x4_t)0, v73), (float32x4_t)0, *(float32x4_t *)v13);
      v75.i32[3] = 1.0;
      v76 = vmulq_f32(*(float32x4_t *)v13, *(float32x4_t *)v13);
      v77 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1)));
      v78 = vmulq_f32(v73, v73);
      v77.f32[0] = sqrtf(v77.f32[0]);
      v78.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).u64[0];
      v78.f32[0] = sqrtf(v78.f32[0]);
      v79 = vmulq_f32(v74, v74);
      v79.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1))).u64[0];
      v80 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 0);
      v77.i32[1] = v78.i32[0];
      v79.f32[0] = sqrtf(v79.f32[0]);
      v77.i32[2] = v79.i32[0];
      v81 = vdivq_f32(*(float32x4_t *)v13, v80);
      v82 = vmulq_f32(v71, v77);
      v82.i32[3] = 0;
      *(float32x4_t *)v72 = v75;
      *(float32x4_t *)(v72 + 16) = v81;
      *(float32x4_t *)(v72 + 32) = vdivq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 0));
      *(float32x4_t *)(v72 + 48) = vdivq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 0));
      *(float32x4_t *)(v72 + 64) = v82;
      break;
    case 6:
      v44 = *(_OWORD *)(v13 + 48);
      HIDWORD(v44) = 1120403456;
      v43 = a1[60];
LABEL_10:
      *(_OWORD *)(v43 + 16 * v10) = v44;
      break;
    default:
      return;
  }
}

uint64_t sub_1B1794AF0(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFDictionary *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;

  v9 = *a3;
  v10 = sub_1B1868FE8(*(_QWORD *)(a1 + 8 * *a2), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v18 = sub_1B1860108((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  v19 = (int)*(float *)&v18;
  v27 = sub_1B1868FE8(*(_QWORD *)(a1 + 8 * v9), v20, v21, v22, v23, v24, v25, v26);
  v35 = sub_1B1860108((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34);
  return ((int)*(float *)&v35 - v19);
}

void sub_1B1794B40(unsigned int *a1)
{
  size_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  float v28;
  const __CFDictionary *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v47;
  int v48;
  int v49;
  float32x2_t v50;
  float32x2_t v55;
  const __CFDictionary *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int32 v89;
  float v90;
  float32x2_t v91;
  uint64_t v92;
  _OWORD *v93;
  __int128 v94;
  __int128 v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  float v99;
  float v100;
  uint64_t v101;
  _DWORD *v102;
  float32x2_t *v103;
  __int128 v105;
  float32x2_t v106;
  float v107;
  __int128 v108;
  _BYTE __src[160];
  _DWORD __base[8];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v1 = a1[29194];
  if ((_DWORD)v1)
  {
    v103 = (float32x2_t *)(a1 + 29194);
    v2 = 0;
    v102 = a1 + 33886;
    do
    {
      __base[v2] = v2;
      ++v2;
    }
    while (v1 != v2);
    v3 = a1 + 33868;
    qsort_r(__base, v1, 4uLL, a1 + 33868, (int (__cdecl *)(void *, const void *, const void *))sub_1B1794AF0);
    v11 = sub_1B1868FE8(*(_QWORD *)&v3[2 * __base[0]], v4, v5, v6, v7, v8, v9, v10);
    *(double *)&v26 = sub_1B1860108((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
    v27 = 0;
    *(float *)&v26 = (float)*(float *)&v26;
    v105 = v26;
    v28 = 0.0;
    do
    {
      v29 = sub_1B1868FE8(*(_QWORD *)&v3[2 * __base[v27]], v19, v20, v21, v22, v23, v24, v25);
      v37 = sub_1B1860108((uint64_t)v29, v30, v31, v32, v33, v34, v35, v36);
      v107 = *(float *)&v37;
      if (sub_1B186064C((uint64_t)v29, v38, v39, v40, v41, v42, v43, v44) == 1)
        v45 = 6;
      else
        v45 = sub_1B185F610((uint64_t)v29, v19, v20, v21, v22, v23, v24, v25);
      ++v27;
      *((_QWORD *)&_Q0 + 1) = *((_QWORD *)&v105 + 1);
      v28 = v28 + (float)((float)((float)(v107 / *(float *)&v105) * (float)v45) * (float)(v107 / *(float *)&v105));
    }
    while (v1 != v27);
    v47 = 0;
    v48 = 0;
    v49 = 0;
    *(float *)&_Q0 = ceil(sqrt((double)vcvtps_u32_f32(v28)));
    DWORD1(_Q0) = ceilf((float)ceilf(v28) / *(float *)&_Q0);
    v50 = vmul_n_f32(*(float32x2_t *)&_Q0, *(float *)&v105);
    __asm { FMOV            V0.2S, #1.0 }
    v55 = vdiv_f32(*(float32x2_t *)&_Q0, v50);
    *(_QWORD *)&_Q0 = 0;
    v106 = v50;
    v108 = _Q0;
    while (1)
    {
      v56 = sub_1B1868FE8(*(_QWORD *)&v3[2 * __base[v47]], v19, v20, v21, v22, v23, v24, v25);
      v64 = sub_1B1860108((uint64_t)v56, v57, v58, v59, v60, v61, v62, v63);
      v65 = *(float *)&v64;
      v66 = __base[v47];
      a1[584 * v66 + 29779] = *(float *)&v64;
      v74 = (float32x4_t *)sub_1B1868FE8(*(_QWORD *)&v3[2 * v66], v67, v68, v69, v70, v71, v72, v73);
      if (sub_1B186064C((uint64_t)v74, v75, v76, v77, v78, v79, v80, v81) == 1)
      {
        v89 = 6;
      }
      else
      {
        v89 = sub_1B185F610((uint64_t)v74, v82, v83, v84, v85, v86, v87, v88);
        if (!v89)
          goto LABEL_26;
      }
      v90 = (float)v65;
      v91 = vmul_n_f32(v55, (float)v65);
      v92 = v89;
      v93 = __src;
      v94 = v108;
      do
      {
        *(float32x2_t *)&v95 = vmul_f32(v55, *(float32x2_t *)&v94);
        *((float32x2_t *)&v95 + 1) = v91;
        *v93 = v95;
        v96 = *(float *)&v94 + v90;
        if (v49)
        {
          v97 = (v49 - 1);
          v98 = *(_QWORD *)&__src[8 * v97 + 96];
          v99 = *((float *)&v94 + 1) + v90;
          if (*((float *)&v98 + 1) == (float)(*((float *)&v94 + 1) + v90))
          {
            *(float *)&v98 = *(float *)&v94 + v90;
            *(_QWORD *)&__src[8 * v97 + 96] = v98;
            goto LABEL_19;
          }
        }
        else
        {
          v99 = *((float *)&v94 + 1) + v90;
        }
        *(_QWORD *)&__src[8 * v49++ + 96] = __PAIR64__(LODWORD(v99), LODWORD(v96));
LABEL_19:
        if (v96 == v106.f32[0])
        {
          v100 = *((float *)&v94 + 1) + v90;
          if (v49 == 1)
          {
            v49 = 0;
            LODWORD(v94) = 0;
            *((float *)&v94 + 1) = *((float *)&v94 + 1) + v90;
          }
          else
          {
            *(_QWORD *)&v94 = *(_QWORD *)&__src[8 * (v49 - 2) + 96];
            *((float *)&v94 + 1) = v100;
            --v49;
          }
        }
        else
        {
          *(float *)&v94 = *(float *)&v94 + v90;
        }
        ++v93;
        --v92;
      }
      while (v92);
      v108 = v94;
LABEL_26:
      sub_1B1862660(v74, v89, __src, v84, v85, v86, v87, v88, v101);
      v48 += v89;
      if (++v47 == v1)
      {
        v103[2345] = v106;
        *v102 = v48;
        return;
      }
    }
  }
}

void sub_1B1794E3C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int *v9;
  const void *Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  v9 = (int *)(a1 + 116776);
  if (*(_DWORD *)(a1 + 116776) < 8u)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
    if (Value)
    {
      v19 = *(_QWORD *)(a1 + 8 * (Value >> 28) + 408);
      v20 = (Value & 0xFFFFFFF) - 1;
      if (!*(_BYTE *)(v19 + v20))
      {
        v21 = *v9;
        v22 = *v9 + 1;
        *v9 = v22;
        *(_QWORD *)(a1 + 8 * v21 + 135472) = a2;
        *(_BYTE *)(v19 + v20) = v22;
        sub_1B1794B40((unsigned int *)a1);
      }
    }
    else
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: The shadow node is not registered"), v13, v14, v15, v16, v17, v18, a9);
    }
  }
  else if ((byte_1EEF65460 & 1) == 0)
  {
    byte_1EEF65460 = 1;
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Too many shadow caster lights at once. Limit is %d"), a3, a4, a5, a6, a7, a8, 8);
  }
}

void sub_1B1794F30(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *Value;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  const void *v23;
  unsigned int v24;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  if (Value)
  {
    v17 = a1 + 8 * (Value >> 28);
    v18 = *(_QWORD *)(v17 + 408);
    v19 = (Value & 0xFFFFFFF) - 1;
    v20 = *(unsigned __int8 *)(v18 + v19);
    if (*(_BYTE *)(v18 + v19))
    {
      v21 = *(_DWORD *)(a1 + 116776);
      *(_DWORD *)(a1 + 116776) = v21 - 1;
      if (v21 > v20)
      {
        v22 = (uint64_t *)(v17 + 408);
        v23 = *(const void **)(a1 + 135472 + 8 * (v21 - 1));
        v24 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v23);
        *(_BYTE *)((v24 & 0xFFFFFFF) + *(_QWORD *)(a1 + 8 * (v24 >> 28) + 408) - 1) = v20;
        *(_QWORD *)(a1 + 135472 + 8 * (v20 - 1)) = v23;
        v18 = *v22;
      }
      *(_BYTE *)(v18 + v19) = 0;
      sub_1B1794B40((unsigned int *)a1);
    }
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: The shadow node is not registered"), v11, v12, v13, v14, v15, v16, a9);
  }
}

void sub_1B179501C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  const __CFDictionary *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  if (Value)
  {
    v19 = Value;
    v20 = sub_1B1868FE8((uint64_t)a2, v12, v13, v14, v15, v16, v17, v18);
    v21 = *(unsigned __int8 *)((v19 & 0xFFFFFFF) + *(_QWORD *)(a1 + 8 * (v19 >> 28) + 408) - 1);
    v29 = sub_1B185F4D4((uint64_t)v20, v22, v23, v24, v25, v26, v27, v28);
    if (v21)
    {
      if ((v29 & 1) != 0)
      {
        v44 = sub_1B1860108((uint64_t)v20, v30, v31, v32, v33, v34, v35, v36);
        if (*(_DWORD *)(a1 + 2336 * (v21 - 1) + 119116) != *(float *)&v44
          || (v45 = sub_1B1862714((uint64_t)v20, v37, v38, v39, v40, v41, v42, v43),
              v45 != sub_1B185F610((uint64_t)v20, v46, v47, v48, v49, v50, v51, v52)))
        {
          sub_1B1794B40((unsigned int *)a1);
        }
      }
      else
      {
        sub_1B1794F30(a1, a2, v31, v32, v33, v34, v35, v36, a9);
      }
    }
    else if (v29)
    {
      sub_1B1794E3C(a1, a2, v31, v32, v33, v34, v35, v36, a9);
    }
  }
}

uint64_t sub_1B1795114(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B1795140(uint64_t a1)
{
  uint64_t v2;
  const __CFAllocator *v3;
  const CFSetCallBacks *v4;
  CFMutableSetRef Mutable;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;

  if (qword_1EEF65470 != -1)
    dispatch_once_f(&qword_1EEF65470, &qword_1EEF65468, (dispatch_function_t)sub_1B1795114);
  v2 = sub_1B179CB90(qword_1EEF65468, 0x21170uLL);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = sub_1B184770C();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(v2 + 32) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  *(_QWORD *)(v2 + 40) = CFDictionaryCreateMutable(v3, 0, 0, MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v2 + 56) = CFDictionaryCreateMutable(v3, 0, 0, 0);
  v4 = (const CFSetCallBacks *)MEMORY[0x1E0C9B3B0];
  *(_QWORD *)(v2 + 512) = CFSetCreateMutable(v3, 0, MEMORY[0x1E0C9B3B0]);
  Mutable = CFSetCreateMutable(v3, 0, v4);
  v6 = 0;
  *(_QWORD *)(v2 + 504) = Mutable;
  *(_DWORD *)(v2 + 116512) = -1;
  v7 = v2 + 117024;
  do
  {
    for (i = 0; i != 1536; i += 384)
      *(_QWORD *)(v7 + i) = sub_1B19E0BFC();
    ++v6;
    v7 += 2336;
  }
  while (v6 != 8);
  return v2;
}

uint64_t sub_1B1795288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  _BOOL4 v26;
  unsigned __int8 v27;
  int v28;

  v9 = sub_1B186064C(a1, a2, a3, a4, a5, a6, a7, a8);
  v24 = sub_1B185FC40(a1, v10, v11, v12, v13, v14, v15, v16);
  v26 = (LODWORD(v24) & 0x7FFFFFFF) == 0 || LODWORD(v24) == 2139095040;
  v27 = 0;
  switch(v9)
  {
    case 0:
      return v27;
    case 1:
      if (v26)
        v27 = 1;
      else
        v27 = 2;
      break;
    case 2:
      v27 = 1;
      break;
    case 3:
      v27 = 3;
      break;
    case 4:
      v28 = sub_1B1861474(a1, v17, v18, v19, v20, v21, v22, v23);
      if (v28)
      {
        if (v28 != 1)
          goto LABEL_16;
        v27 = 5;
      }
      else
      {
        v27 = 4;
      }
      break;
    case 5:
      v27 = 7;
      break;
    case 6:
      if (v26)
        v27 = 1;
      else
        v27 = 6;
      break;
    default:
LABEL_16:
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v18, v19, v20, v21, v22, v23, (uint64_t)"0");
      v27 = 8;
      break;
  }
  return v27;
}

void sub_1B1795378(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFString *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v11 = sub_1B1868FE8((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (!v11)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v13, v14, v15, v16, v17, v18, (uint64_t)"light");
    v26 = CFSTR("Warning: Should not register a node without light to the light system");
    v27 = 0;
LABEL_9:
    sub_1B17C4408(v27, (uint64_t)v26, v20, v21, v22, v23, v24, v25, a9);
    return;
  }
  v19 = (__n128 *)v11;
  if (sub_1B186C66C((uint64_t)a2, v12, v13, v14, v15, v16, v17, v18))
    return;
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2))
  {
    v26 = CFSTR("Error: Node is already registered to the light system");
    v27 = 16;
    goto LABEL_9;
  }
  v29 = sub_1B1795288((uint64_t)v19, v28, v20, v21, v22, v23, v24, v25);
  v30 = a1 + 4 * v29;
  v31 = *(unsigned int *)(v30 + 80);
  *(_DWORD *)(v30 + 80) = v31 + 1;
  sub_1B1794478(a1, v29, v31, v32, v33, v34, v35, v36);
  v37 = a1 + 8 * v29;
  *(_QWORD *)(*(_QWORD *)(v37 + 152) + 8 * v31) = a2;
  *(_QWORD *)(*(_QWORD *)(v37 + 216) + 8 * v31) = v19;
  sub_1B18619F0((uint64_t)v19, v31 + 1, v38, v39, v40, v41, v42, v43);
  sub_1B17947D4((uint64_t *)a1, v29, v31, (uint64_t)a2, v19, v44, v45, v46);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, (const void *)(((int)v31 + 1) & 0xFFFFFFF | (v29 << 28)));
  if (sub_1B1794080((uint64_t)v19, v47, v48, v49, v50, v51, v52, v53))
  {
    *(_DWORD *)(a1 + 584) = 0;
    *(_OWORD *)(a1 + 520) = 0u;
    *(_OWORD *)(a1 + 536) = 0u;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 32), (CFDictionaryApplierFunction)sub_1B1794128, (void *)a1);
  }
  else if (!*(_DWORD *)(a1 + 588))
  {
    v61 = *(_QWORD *)(a1 + 116440);
    if (v61)
      sub_1B181FF28(v61, v54, v55, v56, v57, v58, v59, v60);
  }
  sub_1B1795560(a1);
  if (sub_1B185E930((uint64_t)v19, v62, v63, v64, v65, v66, v67, v68))
    sub_1B1794784(a1, v19);
  if (sub_1B185F4D4((uint64_t)v19, v69, v70, v71, v72, v73, v74, v75))
    sub_1B1794E3C(a1, a2, v76, v77, v78, v79, v80, v81, a9);
}

uint64_t sub_1B1795560(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  *(_DWORD *)(result + 588) = 0;
  for (i = 2; i != 7; ++i)
  {
    v3 = *(unsigned int *)(v1 + 4 * i + 80);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8 * v3;
      do
      {
        result = *(_QWORD *)(*(_QWORD *)(v1 + 8 * i + 216) + v4);
        if (result)
        {
          result = sub_1B1793FE0(result);
          if ((_DWORD)result)
            ++*(_DWORD *)(v1 + 588);
        }
        v4 += 8;
      }
      while (v5 != v4);
    }
  }
  return result;
}

void sub_1B17955E8(uint64_t a1, const void *a2)
{
  const void *Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const __CFDictionary *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  uint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __CFSet *v69;
  uint64_t v70;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  if (Value)
  {
    v12 = Value;
    v13 = sub_1B1868FE8((uint64_t)a2, v5, v6, v7, v8, v9, v10, v11);
    if (sub_1B185F4D4((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20))
      sub_1B1794F30(a1, a2, v21, v22, v23, v24, v25, v26, v70);
    v27 = (v12 & 0xFFFFFFF) - 1;
    v28 = v12 >> 28;
    v29 = a1 + 4 * v28;
    v30 = (*(_DWORD *)(v29 + 80) - 1);
    *(_DWORD *)(v29 + 80) = v30;
    if (v27 < v30)
    {
      v31 = (_QWORD *)(a1 + 8 * v28);
      v32 = v31[19];
      v33 = *(const void **)(v32 + 8 * v30);
      v34 = *(_QWORD *)(v31[27] + 8 * v30);
      *(_QWORD *)(v32 + 8 * v27) = v33;
      *(_QWORD *)(v31[27] + 8 * v27) = v34;
      *(_BYTE *)(v31[43] + v27) = *(_BYTE *)(v31[43] + v30);
      *(_BYTE *)(v31[51] + v27) = *(_BYTE *)(v31[51] + v30);
      *(_BYTE *)(v31[51] + v30) = 0;
      switch((int)v28)
      {
        case 2:
          v35 = *(_QWORD *)(a1 + 472);
          goto LABEL_11;
        case 3:
          v36 = *(_QWORD *)(a1 + 488);
          v37 = (__int128 *)(v36 + 48 * v30);
          v38 = *v37;
          v39 = v37[2];
          v40 = (_OWORD *)(v36 + 48 * v27);
          v40[1] = v37[1];
          v40[2] = v39;
          *v40 = v38;
          break;
        case 4:
          sub_1B1847FA8(*(_QWORD *)(a1 + 24), v27, (uint64_t)v33, v34, v23, v24, v25, v26);
          break;
        case 5:
          v41 = *(_QWORD *)(a1 + 496);
          v42 = (_OWORD *)(v41 + 80 * v27);
          v43 = (_OWORD *)(v41 + 80 * v30);
          *v42 = *v43;
          v44 = v43[1];
          v45 = v43[2];
          v46 = v43[4];
          v42[3] = v43[3];
          v42[4] = v46;
          v42[1] = v44;
          v42[2] = v45;
          sub_1B18619F0(v34, (__int16)v12, v21, v34, v23, v24, v25, v26);
          break;
        case 6:
          v35 = *(_QWORD *)(a1 + 480);
LABEL_11:
          *(_OWORD *)(v35 + 16 * v27) = *(_OWORD *)(v35 + 16 * v30);
          break;
        default:
          break;
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v33, v12);
    }
    if ((_DWORD)v28 == 4)
      sub_1B1847EF8(*(_QWORD *)(a1 + 24), v30, v21, v22, v23, v24, v25, v26);
    v47 = (uint64_t *)(a1 + 116440);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), a2);
    if (v13 && sub_1B1794080((uint64_t)v13, v48, v49, v50, v51, v52, v53, v54))
    {
      *(_DWORD *)(a1 + 584) = 0;
      *(_OWORD *)(a1 + 520) = 0u;
      *(_OWORD *)(a1 + 536) = 0u;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 32), (CFDictionaryApplierFunction)sub_1B1794128, (void *)a1);
    }
    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 512), a2);
    sub_1B1795560(a1);
    if (sub_1B185E930((uint64_t)v13, v55, v56, v57, v58, v59, v60, v61))
    {
      v69 = *(__CFSet **)(a1 + 116504);
      if (v69)
        CFSetRemoveValue(v69, v13);
    }
    if (!*(_DWORD *)(a1 + 588))
    {
      if (*v47)
        sub_1B181FF28(*v47, v62, v63, v64, v65, v66, v67, v68);
    }
  }
}

void sub_1B1795820(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;

  if ((sub_1B1794080((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
    goto LABEL_2;
  v10 = *(unsigned int *)(a1 + 584);
  if ((_DWORD)v10)
  {
    if (*(const void **)(*(_QWORD *)(a1 + (((unint64_t)*(unsigned int *)(a1 + 520) >> 25) & 0x78) + 216)
                        + 8 * ((*(_DWORD *)(a1 + 520) & 0xFFFFFFFu) - 1)) == a2)
      goto LABEL_2;
    v11 = 0;
    do
    {
      v12 = v11;
      if (v10 - 1 == v11)
        break;
      v13 = *(const void **)(*(_QWORD *)(a1
                                       + (((unint64_t)*(unsigned int *)(a1 + 524 + 4 * v11) >> 25) & 0x78)
                                       + 216)
                           + 8 * ((*(_DWORD *)(a1 + 524 + 4 * v11) & 0xFFFFFFFu) - 1));
      ++v11;
    }
    while (v13 != a2);
    if (v12 + 1 < v10)
    {
LABEL_2:
      *(_DWORD *)(a1 + 584) = 0;
      *(_OWORD *)(a1 + 520) = 0u;
      *(_OWORD *)(a1 + 536) = 0u;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 32), (CFDictionaryApplierFunction)sub_1B1794128, (void *)a1);
    }
  }
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 504), a2);
}

double sub_1B17958FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x2_t v15;
  double result;
  __int128 v17;

  v17 = 0uLL;
  sub_1B179CD74((float *)&v17, 0.0, 0.0, 0.0, 1.0);
  v11 = *(unsigned int *)(a1 + 80);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 8 * v11;
    do
    {
      v14 = *(float32x4_t **)(*(_QWORD *)(a1 + 216) + v12);
      if (v14)
      {
        sub_1B1861194(v14, v2, v3, v4, v5, v6, v7, v8, v9, v10);
        v10.i32[0] = v2;
        *(float32x2_t *)v9.f32 = vadd_f32(*(float32x2_t *)&v17, v15);
        *(_QWORD *)&v17 = v9.i64[0];
        v9.f32[0] = *((float *)&v17 + 2) + *(float *)&v2;
        *((float *)&v17 + 2) = *((float *)&v17 + 2) + *(float *)&v2;
      }
      v12 += 8;
    }
    while (v13 != v12);
  }
  result = *(double *)&v17;
  *(_OWORD *)(a1 + 64) = v17;
  return result;
}

uint64_t sub_1B1795998(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int *v44;

  v2 = 0;
  v3 = 0;
  do
  {
    v4 = a1 + 4 * v2;
    v5 = *(unsigned int *)(v4 + 80);
    v44 = (unsigned int *)(v4 + 80);
    if (*(_DWORD *)(v4 + 80))
    {
      v6 = 0;
      v7 = a1 + 8 * v2;
      v8 = (_QWORD *)(v7 + 216);
      v9 = (_QWORD *)(v7 + 152);
      do
      {
        v10 = *(__n128 **)(*v8 + 8 * v6);
        if (CFSetContainsValue(*(CFSetRef *)(a1 + 504), v10))
        {
          v18 = *(const void **)(*v9 + 8 * v6);
          v22 = sub_1B1795288((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
          if (v2 == v22)
          {
            sub_1B17947D4((uint64_t *)a1, v2, v6, (uint64_t)v18, v10, v19, v20, v21);
            sub_1B179501C(a1, v18, v23, v24, v25, v26, v27, v28, v43);
          }
          else
          {
            sub_1B17955E8(a1, v18);
            sub_1B1795378(a1, v18, v36, v37, v38, v39, v40, v41, v43);
            v5 = *v44;
            --v6;
          }
          v3 |= v22 == 0;
          sub_1B1868DA4((uint64_t)v18, v29, v30, v31, v32, v33, v34, v35);
        }
        ++v6;
      }
      while (v6 < v5);
    }
    ++v2;
  }
  while (v2 != 8);
  sub_1B1795560(a1);
  return v3 & 1;
}

const __CFDictionary *sub_1B1795ABC(int32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (vaddvq_s32(a1[5]) + a1[6].i32[2] + a1[6].i32[3] + a1[6].i32[1] + a1[6].i32[0] || a1[37].i32[2])
    return (const __CFDictionary *)1;
  else
    return sub_1B1795AFC(a2, a2, a3, a4, a5, a6, a7, a8);
}

const __CFDictionary *sub_1B1795AFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFDictionary *result;
  CFTypeRef *v33;
  const void *v34;
  CFTypeRef v35;
  int v36;
  const void *v37;

  v9 = sub_1B1813884(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = sub_1B187B0F0(v9, 0);
  if (v10)
  {
    v18 = v10;
    if (sub_1B1841A40(v10, v11, v12, v13, v14, v15, v16, v17) || sub_1B1842E64(v18, v19, v20, v21, v22, v23, v24, v25))
      return 0;
  }
  if ((sub_1B187C0CC(v9, v11, v12, v13, v14, v15, v16, v17) & 1) != 0)
    return 0;
  v33 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (v9)
  {
    v34 = (const void *)sub_1B187A778(v9, CFSTR("triggerOptionsForRealtimeViewer"));
    if (!v34)
      v34 = (const void *)*MEMORY[0x1E0C9AE40];
    v35 = *v33;
    v36 = CFEqual(v34, *v33);
    v37 = v35;
    if (v36)
    {
      if (!v35)
        goto LABEL_16;
    }
    else
    {
      v37 = (const void *)sub_1B187A778(v9, CFSTR("defaultLight"));
      if (!v37)
        goto LABEL_16;
    }
    if (CFEqual(v37, v35))
      return (const __CFDictionary *)1;
  }
LABEL_16:
  result = sub_1B18146BC(a1, CFSTR("defaultLight"), v26, v27, v28, v29, v30, v31);
  if (result)
    return (const __CFDictionary *)(CFEqual(result, *v33) != 0);
  return result;
}

void sub_1B1795C08(uint64_t a1)
{
  int v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (CFSetGetCount(*(CFSetRef *)(a1 + 504)))
  {
    v2 = sub_1B1795998(a1);
    CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 504));
    if (v2)
    {
      v3 = sub_1B179CCCC((float *)(a1 + 64));
      sub_1B17958FC(a1);
      if (v3 != sub_1B179CCCC((float *)(a1 + 64)))
      {
        v11 = *(_QWORD *)(a1 + 116440);
        if (v11)
          sub_1B181FF28(v11, v4, v5, v6, v7, v8, v9, v10);
      }
    }
  }
}

void sub_1B1795C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v11 = a1 + 116416;
  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"lightingSpaceMatrix");
  *(_QWORD *)(v11 + 16) = a3;
  v12 = sub_1B1813884(a3, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(v11 + 24) = sub_1B187B140(v12, v13, v14, v15, v16, v17, v18, v19);
  *(_BYTE *)(v11 + 32) = 0;
  v20 = *(_OWORD *)(a2 + 48);
  v22 = *(float32x4_t *)a2;
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 116384) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 116400) = v20;
  *(float32x4_t *)(a1 + 116352) = v22;
  *(_OWORD *)(a1 + 116368) = v21;
  v23 = vmulq_f32(*(float32x4_t *)a2, *(float32x4_t *)a2);
  v24 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1)));
  v25 = vmulq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a2 + 16));
  v24.f32[0] = sqrtf(v24.f32[0]);
  v26 = vmulq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 32));
  v24.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
  v24.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
  v27 = vabsq_f32(v24);
  *(float *)v11 = fmaxf(fmaxf(v27.f32[0], v27.f32[2]), v27.f32[1]);
  sub_1B1795C08(a1);
  for (i = 1; i != 8; ++i)
  {
    v32 = *(unsigned int *)(a1 + 4 * i + 80);
    if ((_DWORD)v32)
    {
      v33 = 0;
      v34 = a1 + 8 * i;
      v35 = (_QWORD *)(v34 + 152);
      v36 = (_QWORD *)(v34 + 216);
      do
      {
        sub_1B17947D4((uint64_t *)a1, i, v33, *(_QWORD *)(*v35 + 8 * v33), *(__n128 **)(*v36 + 8 * v33), v28, v29, v30);
        ++v33;
      }
      while (v32 != v33);
    }
  }
  for (j = 0; j != 7; ++j)
    bzero(*(void **)(a1 + 8 * j + 352), *(unsigned int *)(a1 + 4 * j + 84));
  bzero((void *)(a1 + 2680), 0x800uLL);
  bzero((void *)(a1 + 632), 0x800uLL);
  *(_DWORD *)(a1 + 624) = 0;
  v44 = sub_1B1814484(a3, 0, v38, v39, v40, v41, v42, v43);
  *(_QWORD *)(v11 + 40) = v44;
  if (v44)
  {
    v45 = sub_1B1814458(a3);
    v46 = *(_QWORD *)(v11 + 40);
    *(_BYTE *)(v11 + 84) = (v45 & 0x100000) != 0;
    if (v46)
    {
      *(_DWORD *)(a1 + 116496) = 0;
      *(_OWORD *)(a1 + 116464) = 0u;
      *(_OWORD *)(a1 + 116480) = 0u;
    }
  }
  else
  {
    *(_BYTE *)(v11 + 84) = 0;
  }
  sub_1B17958FC(a1);
  if (*(_DWORD *)(a1 + 96))
    sub_1B18481FC(*(_QWORD *)(a1 + 24), a3);
}

uint64_t sub_1B1795EC0(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  *a2 = *(_QWORD *)(a1 + 592);
  *a3 = *(_DWORD *)(a1 + 600);
  return *(unsigned __int8 *)(a1 + 604);
}

uint64_t sub_1B1795ED8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

__n128 sub_1B1795EE4@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  __int16 v16;
  uint64_t *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  _QWORD v22[6];
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v24 = 0;
  v25 = &v24;
  v26 = 0x8000000000;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  sub_1B17958FC(a1);
  v23 = *(_OWORD *)(a1 + 64);
  v6 = sub_1B179CCCC((float *)&v23);
  v12 = v25;
  v13 = v25[3] & 0xFFFE | v6 ^ 1;
  *((_WORD *)v25 + 12) = v13;
  v14 = *(_DWORD *)(a1 + 96);
  if (v14)
  {
    LOWORD(v14) = 8 * (sub_1B1849664(*(_QWORD *)(a1 + 24)) & 7);
    v12 = v25;
    v13 = *((_WORD *)v25 + 12);
  }
  v15 = v13 & 0xFFC7 | v14;
  *((_WORD *)v12 + 12) = v15;
  v16 = v15 & 0xFFFD | (2 * (*(_DWORD *)(a1 + 588) != 0));
  *((_WORD *)v12 + 12) = v16;
  *((_WORD *)v12 + 12) = v16 & 0xFFFB | (4 * (*(_DWORD *)(a1 + 100) != 0));
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 0x40000000;
  v22[2] = sub_1B17960A0;
  v22[3] = &unk_1E63D4B28;
  v22[4] = &v24;
  v22[5] = a1;
  sub_1B1794224((const __CFDictionary *)a1, a2, (uint64_t)v22, v7, v8, v9, v10, v11);
  v17 = v25;
  v18 = *(_OWORD *)(v25 + 9);
  v19 = *(_OWORD *)(v25 + 13);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v25 + 11);
  *(_OWORD *)(a3 + 80) = v19;
  *(_QWORD *)(a3 + 96) = v17[15];
  v20 = *(_OWORD *)(v17 + 5);
  *(_OWORD *)a3 = *(_OWORD *)(v17 + 3);
  *(_OWORD *)(a3 + 16) = v20;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v17 + 7);
  *(_OWORD *)(a3 + 48) = v18;
  _Block_object_dispose(&v24, 8);
  return result;
}

BOOL sub_1B1796048(uint64_t a1)
{
  return *(_DWORD *)(a1 + 588) != 0;
}

uint64_t sub_1B1796058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"lightingSystem");
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_1B17960A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v9 = *(_OWORD *)(*(_QWORD *)(result + 40) + 552);
  *(_OWORD *)(v8 + 44) = *(_OWORD *)(*(_QWORD *)(result + 40) + 568);
  *(_OWORD *)(v8 + 28) = v9;
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8)
                                                                            + 24) & 0xC03F | (a2 << 6);
  if ((_DWORD)a2)
  {
    v11 = result;
    v12 = 0;
    v13 = 8 * a2;
    do
    {
      result = sub_1B185FE0C(*(_QWORD *)(a4 + v12), a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 32) + 8) + v12 + 64) = result;
      v12 += 8;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t sub_1B179612C(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  *a3 = 0u;
  a3[1] = 0u;
  do
  {
    v12 = *(unsigned __int8 *)(a2 + v11);
    if (!*(_BYTE *)(a2 + v11))
      break;
    if ((_DWORD)v12 != 255 && *(_DWORD *)(a1 + 624) < v12)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Invalid runtime light index"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"((rInd > 0) && (rInd <= pipelineData->_runtimeLightsCount)) || (rInd == kDefaultRuntimeIndex)");
    *((_DWORD *)a3 + v11++) = *(_DWORD *)(a1 + 4 * v12 + 4728);
  }
  while (v11 != 8);
  return v11;
}

void sub_1B17961D0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;

  v11 = 0;
  v12 = 0;
  while (1)
  {
    v13 = *(unsigned __int8 *)(a2 + v12);
    if (!*(_BYTE *)(a2 + v12))
      break;
    if ((_DWORD)v13 == 255 || *(_DWORD *)(a1 + 624) >= v13)
    {
      a3[v12 + 1] = *(_QWORD *)(a1 + 624 + 8 * v13 + 2056);
      v15 = a1 + 624 + 432 * v13 + 5136;
    }
    else
    {
      if ((byte_1EEF65478 & 1) == 0)
      {
        byte_1EEF65478 = 1;
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: Invalid runtime light index"), (uint64_t)a3, a4, a5, a6, a7, a8, v17);
      }
      v15 = 0;
      a3[v12 + 1] = 0;
    }
    a3[v12++ + 9] = v15;
    ++v11;
    if (v12 == 8)
    {
      *a3 = 8;
      return;
    }
  }
  *a3 = v12;
  if (v12 <= 7)
  {
    do
    {
      v16 = &a3[v11];
      v16[1] = 0;
      v16[9] = 0;
      ++v11;
    }
    while (v11 != 8);
  }
}

uint64_t sub_1B17962D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  unsigned int v11;
  uint64_t v14;

  for (i = 0; i != 8; ++i)
  {
    v11 = *(unsigned __int8 *)(a2 + i);
    if (!*(_BYTE *)(a2 + i))
      break;
    if (v11 == 255 || *(_DWORD *)(a1 + 624) >= v11)
    {
      if ((*(_BYTE *)(a1 + 432 * *(unsigned __int8 *)(a2 + i) + 5872) & 0x10) != 0)
        return 1;
    }
    else if ((byte_1EEF65479 & 1) == 0)
    {
      byte_1EEF65479 = 1;
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Invalid runtime light index"), a3, a4, a5, a6, a7, a8, v14);
    }
  }
  return 0;
}

void sub_1B1796384(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _BOOL4 v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t *v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  __int128 *v66;
  unsigned int v67;
  uint64_t v68;
  _QWORD v69[4];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _QWORD v80[4];
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  float32x4_t v84[2];
  __int128 v85;
  __int128 v86;
  _OWORD v87[4];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 116432;
  v3 = *(char **)(a1 + 116456);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 604))
    {
      v4 = *(_DWORD *)(a1 + 600);
      if (v4 >= 8)
        v4 = 8;
      *(_DWORD *)(a1 + 4 * v4 + 116464) = 666;
    }
    sub_1B17FEAFC(v3, (const void *)(a1 + 116464), 9u);
    if ((sub_1B1814458(*(_QWORD *)v2) & 0x100000) != 0)
    {
      v85 = xmmword_1B2244E50;
      v86 = xmmword_1B2244E40;
      v68 = *(unsigned int *)(a1 + 84);
      if ((_DWORD)v68)
      {
        for (i = 0; i != v68; ++i)
        {
          v20 = (float32x4_t *)sub_1B1869AC8(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * i), v5, v6, v7, v8, v9, v10, v11);
          v21 = *(_QWORD *)(a1 + 416);
          v22 = *(unsigned __int8 *)(v21 + i);
          if (*(_BYTE *)(v21 + i))
          {
            v87[0] = *(_OWORD *)"fff?";
            v87[1] = unk_1B2244CD0;
            v87[2] = xmmword_1B2244CE0;
            v87[3] = unk_1B2244CF0;
            v23 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * i);
            v24 = sub_1B185F5C0(v23, v13, v14, v15, v16, v17, v18, v19);
            if (!v24)
            {
              v26 = 1;
LABEL_14:
              v27 = a1 + 2336 * (v22 - 1) + 116784;
              v28 = (float *)v87;
              do
              {
                if (v24)
                {
                  v84[0] = *(float32x4_t *)v28;
                  v84[0].i32[2] = 1056964608;
                  v34 = sub_1B18622E8(v23, v13, v14, v15, v16, v17, v18, v19);
                  v35 = *(uint64_t **)(v2 + 24);
                  if ((v34 & 1) != 0)
                    sub_1B17FC150(v35, *(_QWORD *)(v27 + 240), 0, v84[0].f32, v30, v31, v32, v33);
                  else
                    sub_1B17FA598((uint64_t)v35, 0, (__int128 *)v84, v29, v30, v31, v32, v33, *(__n128 *)(v27 + 224));
                }
                sub_1B17FB25C(*(uint64_t **)(v2 + 24), v27 + 256, 0, v28, v16, v17, v18, v19);
                v36 = *(float32x4_t *)(v27 + 368);
                v84[0] = *(float32x4_t *)(v27 + 352);
                v84[1] = v36;
                sub_1B17FB0F8(*(_QWORD *)(v2 + 24), v84, v27, v28, v37, v38, v39, v40);
                v27 += 384;
                v28 += 4;
                --v26;
              }
              while (v26);
              goto LABEL_20;
            }
            v25 = sub_1B185F610(v23, v13, v14, v15, v16, v17, v18, v19);
            if (v25)
            {
              v26 = v25;
              goto LABEL_14;
            }
          }
LABEL_20:
          v41 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 352) + i);
          v47 = sub_1B186064C(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * i), v13, v14, v15, v16, v17, v18, v19);
          v48 = *(_QWORD *)(v2 + 24);
          if (v41)
            v49 = &v85;
          else
            v49 = &v86;
          if (v47 == 2)
          {
            sub_1B17FA410(v48, (uint64_t)v20, (float *)v49, v42, v43, v44, v45, v46, (float32x4_t)0, (float32x4_t)xmmword_1B2244E00);
          }
          else
          {
            sub_1B17FA4D4(v48, v20, (float *)v49, v42, v43, v44, v45, v46, (float32x4_t)xmmword_1B2244DB0, (float32x4_t)xmmword_1B2244DC0);
            sub_1B17FA4D4(*(_QWORD *)(v2 + 24), v20, (float *)v49, v50, v51, v52, v53, v54, (float32x4_t)xmmword_1B2244DD0, (float32x4_t)xmmword_1B2244DE0);
            sub_1B17FA4D4(*(_QWORD *)(v2 + 24), v20, (float *)v49, v55, v56, v57, v58, v59, (float32x4_t)xmmword_1B2244D90, (float32x4_t)xmmword_1B2244DF0);
          }
        }
      }
      v60 = MEMORY[0x1E0C809B0];
      v80[0] = MEMORY[0x1E0C809B0];
      v80[1] = 0x40000000;
      v80[2] = sub_1B17967BC;
      v80[3] = &unk_1E63D4B48;
      v83 = a1;
      v81 = v85;
      v82 = v86;
      v61 = *(_DWORD *)(a1 + 88);
      if (v61)
        sub_1B17967BC((uint64_t)v80, v61, v6, v7, *(_QWORD *)(a1 + 472), v9, v10, v11);
      v73 = v60;
      v74 = 0x40000000;
      v75 = sub_1B1796840;
      v76 = &unk_1E63D4B68;
      v79 = a1;
      v77 = v85;
      v78 = v86;
      v62 = *(unsigned int *)(a1 + 104);
      if ((_DWORD)v62)
      {
        v63 = 0;
        v64 = *(_QWORD *)(a1 + 480);
        do
        {
          v65 = *(__n128 *)(v64 + 16 * v63);
          v65.n128_u32[3] = sqrtf(v65.n128_f32[3]);
          if (*(_BYTE *)(*(_QWORD *)(v79 + 392) + v63))
            v66 = &v77;
          else
            v66 = &v78;
          sub_1B17FA598(*(_QWORD *)(v79 + 116456), 0, v66, v7, v8, v9, v10, v11, v65);
          ++v63;
        }
        while (v62 != v63);
      }
      v69[0] = v60;
      v69[1] = 0x40000000;
      v69[2] = sub_1B17968F8;
      v69[3] = &unk_1E63D4B88;
      v72 = a1;
      v70 = v85;
      v71 = v86;
      v67 = *(_DWORD *)(a1 + 92);
      if (v67)
        sub_1B17968F8((uint64_t)v69, v67, v6, v7, *(_QWORD *)(a1 + 488), v9, v10, v11);
    }
  }
  if (*(_DWORD *)(a1 + 96))
    sub_1B1848B84(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = 0;
}

uint64_t sub_1B1796794(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(result + 88);
  if ((_DWORD)v2)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a2 + 16))(a2, v2, *(_QWORD *)(result + 168), *(_QWORD *)(result + 232), *(_QWORD *)(result + 472));
  return result;
}

void sub_1B17967BC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;

  if (a2)
  {
    v10 = 0;
    v11 = (__int128 *)(a1 + 32);
    v12 = (__int128 *)(a1 + 48);
    v13 = a2;
    do
    {
      v14 = *(_QWORD *)(a1 + 64);
      if (*(_BYTE *)(*(_QWORD *)(v14 + 360) + v10))
        v15 = v11;
      else
        v15 = v12;
      sub_1B17FA598(*(_QWORD *)(v14 + 116456), 0, v15, a4, a5, a6, a7, a8, *(__n128 *)(a5 + 16 * v10++));
    }
    while (v13 != v10);
  }
}

void sub_1B1796840(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __int128 *v16;

  if (a2)
  {
    v10 = 0;
    v11 = (__int128 *)(a1 + 32);
    v12 = (__int128 *)(a1 + 48);
    v13 = a2;
    do
    {
      v14 = *(__n128 *)(a5 + 16 * v10);
      v14.n128_u32[3] = sqrtf(v14.n128_f32[3]);
      v15 = *(_QWORD *)(a1 + 64);
      if (*(_BYTE *)(*(_QWORD *)(v15 + 392) + v10))
        v16 = v11;
      else
        v16 = v12;
      sub_1B17FA598(*(_QWORD *)(v15 + 116456), 0, v16, a4, a5, a6, a7, a8, v14);
      ++v10;
    }
    while (v13 != v10);
  }
}

uint64_t sub_1B17968D0(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(result + 92);
  if ((_DWORD)v2)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a2 + 16))(a2, v2, *(_QWORD *)(result + 176), *(_QWORD *)(result + 240), *(_QWORD *)(result + 488));
  return result;
}

void sub_1B17968F8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  if (a2)
  {
    v9 = 0;
    v10 = a1 + 32;
    v11 = a1 + 48;
    v12 = a5 + 32;
    v13 = a2;
    do
    {
      v14 = *(_OWORD *)(v12 - 32);
      v15 = *(_OWORD *)(v12 - 16);
      v12 += 48;
      v18 = v15;
      v19 = v14;
      v16 = *(_QWORD *)(a1 + 64);
      if (*(_BYTE *)(*(_QWORD *)(v16 + 368) + v9))
        v17 = v10;
      else
        v17 = v11;
      sub_1B17FC754(*(uint64_t **)(v16 + 116456), (uint64_t)&v19, (uint64_t)&v18, 0, v17, 0, a7, a8);
      ++v9;
    }
    while (v13 != v9);
  }
}

uint64_t sub_1B1796998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"lightingSystem");
  return *(_QWORD *)(a1 + 24);
}

void sub_1B17969E0(uint64_t a1)
{
  *(_QWORD *)(a1 + 48) = 0;
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 56));
  sub_1B1795C08(a1);
}

uint64_t sub_1B1796A0C(uint64_t result, _OWORD *a2, float a3, float a4, uint64_t a5, __int128 *a6, __int128 *a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v7 = a2[1];
  *(_OWORD *)(result + 116528) = *a2;
  *(_OWORD *)(result + 116544) = v7;
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[5];
  *(_OWORD *)(result + 116592) = a2[4];
  *(_OWORD *)(result + 116608) = v10;
  *(_OWORD *)(result + 116560) = v8;
  *(_OWORD *)(result + 116576) = v9;
  v11 = *a7;
  v12 = a7[1];
  v13 = a7[3];
  *(_OWORD *)(result + 116736) = a7[2];
  *(_OWORD *)(result + 116752) = v13;
  *(_OWORD *)(result + 116704) = v11;
  *(_OWORD *)(result + 116720) = v12;
  v14 = *a6;
  v15 = a6[1];
  v16 = a6[3];
  *(_OWORD *)(result + 116656) = a6[2];
  *(_OWORD *)(result + 116672) = v16;
  *(_OWORD *)(result + 116624) = v14;
  *(_OWORD *)(result + 116640) = v15;
  *(float *)(result + 116688) = a3;
  *(float *)(result + 116692) = a4;
  return result;
}

double sub_1B1796A6C()
{
  double result;

  *(_QWORD *)&result = 1056964608;
  return result;
}

double sub_1B1796A80(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __n128 a17, __n128 a18, __n128 a19, __n128 a20)
{
  unint64_t v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;

  v20 = 0;
  v32 = a5;
  v33 = a6;
  v34 = a7;
  v35 = a8;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v36 + v20) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244D70, COERCE_FLOAT(*(_OWORD *)((char *)&v32 + v20))), (float32x4_t)xmmword_1B2244D80, (float32x2_t)v32.n128_u64[v20 / 8], 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)((char *)&v32 + v20), 2), (float32x4_t)xmmword_1B2244DA0, *(float32x4_t *)((char *)&v32 + v20), 3);
    v20 += 16;
  }
  while (v20 != 64);
  v21 = 0;
  v22 = v36;
  v23 = v37;
  v24 = v38;
  v25 = v39;
  v32 = a1;
  v33 = a2;
  v34 = a3;
  v35 = a4;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v36 + v21) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)((char *)&v32 + v21))), v23, (float32x2_t)v32.n128_u64[v21 / 8], 1), v24, *(float32x4_t *)((char *)&v32 + v21), 2), v25, *(float32x4_t *)((char *)&v32 + v21), 3);
    v21 += 16;
  }
  while (v21 != 64);
  v26 = 0;
  v27 = v36;
  v28 = v37;
  v29 = v38;
  v30 = v39;
  v32 = a17;
  v33 = a18;
  v34 = a19;
  v35 = a20;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v36 + v26) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(*(_OWORD *)((char *)&v32 + v26))), v28, (float32x2_t)v32.n128_u64[v26 / 8], 1), v29, *(float32x4_t *)((char *)&v32 + v26), 2), v30, *(float32x4_t *)((char *)&v32 + v26), 3);
    v26 += 16;
  }
  while (v26 != 64);
  return *(double *)v36.i64;
}

void sub_1B1796B98(uint64_t a1, unsigned int a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;

  v6 = a2 + 1;
  if (a2 == -1)
  {
    LODWORD(v6) = 0;
LABEL_6:
    v16 = v6;
    do
    {
      *(_DWORD *)(a1 + 4 * v16) = *(_DWORD *)(a1 + 4 * (v16 - 1));
      ++v16;
    }
    while ((_DWORD)v16 != 5);
    return;
  }
  v9 = 0;
  v10 = a4 - a3;
  v11 = (float)a2;
  v12 = a4 / a3;
  do
  {
    v13 = (float)v9 / v11;
    v14 = a3 + (float)(v10 * v13);
    v15 = powf(v12, v13);
    *(float *)(a1 + 4 * v9++) = (float)(v15 * a3) + (float)(a5 * (float)(v14 - (float)(v15 * a3)));
  }
  while (v6 != v9);
  if (v6 <= 4)
    goto LABEL_6;
}

double sub_1B1796C50(__n128 a1, __n128 a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  unsigned int v6;
  __int128 v7;
  float64x2_t v8;
  float64x2_t v9;
  _OWORD v11[4];
  _OWORD v12[4];

  v2 = 0;
  v3 = (float)-a2.n128_f32[2];
  if (a1.n128_f32[2] < a2.n128_f32[2])
    v4 = (float)-a1.n128_f32[2];
  else
    v4 = v3 + 1.0;
  v5 = v3 - v4;
  *(float *)&v6 = 1.0 / v5;
  *(_QWORD *)&v7 = 0;
  *((_QWORD *)&v7 + 1) = v6;
  v8 = vcvtq_f64_f32((float32x2_t)a1.n128_u64[0]);
  v9 = vcvtq_f64_f32((float32x2_t)a2.n128_u64[0]);
  *(float32x2_t *)&v8.f64[0] = vcvt_f32_f64(vdivq_f64(vnegq_f64(vaddq_f64(v8, v9)), vsubq_f64(v9, v8)));
  *(float *)v9.f64 = v3 / v5;
  *(_QWORD *)&v8.f64[1] = __PAIR64__(1.0, LODWORD(v9.f64[0]));
  v11[2] = v7;
  v11[3] = v8;
  memset(v12, 0, sizeof(v12));
  do
  {
    v12[v2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(v11[v2])), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)&v11[v2], 1), (float32x4_t)xmmword_1B2244DF0, (float32x4_t)v11[v2], 2), (float32x4_t)xmmword_1B2244E10, (float32x4_t)v11[v2], 3);
    ++v2;
  }
  while (v2 != 4);
  return *(double *)v12;
}

void sub_1B1796D58(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x2_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x2_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x2_t v55;
  float32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x2_t v72;
  float32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x2_t v87;
  float32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int32x2_t v104;
  float32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x2_t v118;
  float32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  float32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  float32x4_t v127;
  int32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int32x2_t v131;
  float32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  uint64_t v143;
  simd_float4x4 v144;
  uint64_t v145;
  float v146;
  int32x2_t v147;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x4_t v154;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  __n128 v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  uint64_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x2_t v192;
  double v193;
  float32x4_t v194;
  float32x2_t v195;
  int8x16_t v196;
  __int128 v197;
  simd_float4 v198;
  simd_float4 v199;
  simd_float4 v200;
  simd_float4 v201;
  __n128 v204;
  simd_float4 v205;
  __n128 v206;
  _OWORD v207[4];
  _OWORD v208[8];
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  uint64_t v213;
  simd_float4x4 v214;

  v213 = *MEMORY[0x1E0C80C00];
  v6 = *(float32x4_t *)(a1 + 336);
  v7 = *(int32x4_t *)(a1 + 272);
  v8 = *(int32x4_t *)(a1 + 288);
  v9 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL);
  v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL);
  v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL);
  v12 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL), (int8x16_t)v7, 8uLL);
  v13 = vmlaq_f32(vmulq_f32(v12, vnegq_f32(v11)), v10, v9);
  v14 = vmulq_f32(v6, v13);
  v15 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).u64[0];
  if (*(float *)v15.i32 != 0.0)
  {
    v16 = *(float32x4_t *)(a1 + 336);
    v16.f32[0] = -v6.f32[3];
    v17 = *(int32x4_t *)(a1 + 288);
    *(float *)v17.i32 = -*(float *)&v8.i32[3];
    v18 = *(int32x4_t *)(a1 + 272);
    *(float *)v18.i32 = -*(float *)&v7.i32[3];
    v19 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v18, (int8x16_t)v18, 0xCuLL), (int8x16_t)v18, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v17, (int8x16_t)v17, 0xCuLL), (int8x16_t)v17, 8uLL));
    v20 = *(float32x4_t *)(a1 + 336);
    v20.f32[1] = -v6.f32[3];
    v21 = *(int32x4_t *)(a1 + 288);
    *(float *)&v21.i32[1] = -*(float *)&v8.i32[3];
    v22 = (int32x4_t)vmulq_f32(v16, v19);
    v23 = *(int32x4_t *)(a1 + 272);
    *(float *)&v23.i32[1] = -*(float *)&v7.i32[3];
    v24 = (int32x4_t)vmulq_f32(v20, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v23, (int8x16_t)v23, 0xCuLL), (int8x16_t)v23, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v21, (int8x16_t)v21, 0xCuLL), (int8x16_t)v21, 8uLL)));
    *(float32x2_t *)v20.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v24.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v24.i8));
    v25 = (float32x4_t)vzip2q_s32(v22, v24);
    *(float32x2_t *)v25.f32 = vadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v20.f32);
    v26 = *(float32x4_t *)(a1 + 336);
    v26.f32[2] = -v6.f32[3];
    v27 = *(int32x4_t *)(a1 + 288);
    *(float *)&v27.i32[2] = -*(float *)&v8.i32[3];
    v28 = *(int32x4_t *)(a1 + 272);
    *(float *)&v28.i32[2] = -*(float *)&v7.i32[3];
    v29 = vmulq_f32(v26, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL), (int8x16_t)v28, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL), (int8x16_t)v27, 8uLL)));
    v25.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u32[0];
    v208[0] = vdivq_f32(v25, (float32x4_t)vdupq_lane_s32(v15, 0));
  }
  v30 = *(int32x4_t *)(a1 + 256);
  v31 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL), (int8x16_t)v30, 8uLL);
  v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
  v33 = vmlaq_f32(vmulq_f32(v9, vnegq_f32(v32)), v11, v31);
  v34 = vmulq_f32(v6, v33);
  v35 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).u64[0];
  if (*(float *)v35.i32 != 0.0)
  {
    v36 = v6;
    v36.f32[0] = -v6.f32[3];
    v37 = *(int32x4_t *)(a1 + 256);
    *(float *)v37.i32 = -*(float *)&v30.i32[3];
    v38 = v8;
    *(float *)v38.i32 = -*(float *)&v8.i32[3];
    v39 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL), (int8x16_t)v38, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v37, (int8x16_t)v37, 0xCuLL), (int8x16_t)v37, 8uLL));
    v40 = v6;
    v40.f32[1] = -v6.f32[3];
    v41 = *(int32x4_t *)(a1 + 256);
    *(float *)&v41.i32[1] = -*(float *)&v30.i32[3];
    v42 = (int32x4_t)vmulq_f32(v36, v39);
    v43 = v8;
    *(float *)&v43.i32[1] = -*(float *)&v8.i32[3];
    v44 = (int32x4_t)vmulq_f32(v40, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL), (int8x16_t)v43, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v43, v43), (int8x16_t)v43, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL), (int8x16_t)v41, 8uLL)));
    *(float32x2_t *)v40.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v42.i8, *(int32x2_t *)v44.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v42.i8, *(int32x2_t *)v44.i8));
    v45 = (float32x4_t)vzip2q_s32(v42, v44);
    *(float32x2_t *)v45.f32 = vadd_f32(*(float32x2_t *)v45.f32, *(float32x2_t *)v40.f32);
    v46 = v6;
    v46.f32[2] = -v6.f32[3];
    v47 = *(int32x4_t *)(a1 + 256);
    *(float *)&v47.i32[2] = -*(float *)&v30.i32[3];
    v48 = v8;
    *(float *)&v48.i32[2] = -*(float *)&v8.i32[3];
    v49 = vmulq_f32(v46, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v48, (int8x16_t)v48, 0xCuLL), (int8x16_t)v48, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v47, v47), (int8x16_t)v47, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v48, v48), (int8x16_t)v48, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v47, (int8x16_t)v47, 0xCuLL), (int8x16_t)v47, 8uLL)));
    v45.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).u32[0];
    v208[1] = vdivq_f32(v45, (float32x4_t)vdupq_lane_s32(v35, 0));
  }
  v50 = *(int32x4_t *)(a1 + 304);
  v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), (int8x16_t)v50, 0xCuLL);
  v52 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v50, (int8x16_t)v50, 0xCuLL), (int8x16_t)v50, 8uLL);
  v53 = vmlaq_f32(vmulq_f32(v52, vnegq_f32(v10)), v51, v12);
  v54 = vmulq_f32(v6, v53);
  v55 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).u64[0];
  if (*(float *)v55.i32 != 0.0)
  {
    v56 = v6;
    v56.f32[0] = -v6.f32[3];
    v57 = v7;
    *(float *)v57.i32 = -*(float *)&v7.i32[3];
    v58 = *(int32x4_t *)(a1 + 304);
    *(float *)v58.i32 = -*(float *)&v50.i32[3];
    v59 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v58, (int8x16_t)v58, 0xCuLL), (int8x16_t)v58, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v57, v57), (int8x16_t)v57, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v58, v58), (int8x16_t)v58, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v57, (int8x16_t)v57, 0xCuLL), (int8x16_t)v57, 8uLL));
    v60 = v6;
    v60.f32[1] = -v6.f32[3];
    v61 = v7;
    *(float *)&v61.i32[1] = -*(float *)&v7.i32[3];
    v62 = (int32x4_t)vmulq_f32(v56, v59);
    v63 = *(int32x4_t *)(a1 + 304);
    *(float *)&v63.i32[1] = -*(float *)&v50.i32[3];
    v64 = (int32x4_t)vmulq_f32(v60, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v63, (int8x16_t)v63, 0xCuLL), (int8x16_t)v63, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v61, v61), (int8x16_t)v61, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v63, v63), (int8x16_t)v63, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v61, (int8x16_t)v61, 0xCuLL), (int8x16_t)v61, 8uLL)));
    *(float32x2_t *)v60.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v62.i8, *(int32x2_t *)v64.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v62.i8, *(int32x2_t *)v64.i8));
    v65 = (float32x4_t)vzip2q_s32(v62, v64);
    *(float32x2_t *)v65.f32 = vadd_f32(*(float32x2_t *)v65.f32, *(float32x2_t *)v60.f32);
    v66 = v6;
    v66.f32[2] = -v6.f32[3];
    v67 = v7;
    *(float *)&v67.i32[2] = -*(float *)&v7.i32[3];
    v68 = *(int32x4_t *)(a1 + 304);
    *(float *)&v68.i32[2] = -*(float *)&v50.i32[3];
    v69 = vmulq_f32(v66, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v68, (int8x16_t)v68, 0xCuLL), (int8x16_t)v68, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v67, v67), (int8x16_t)v67, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v68, v68), (int8x16_t)v68, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v67, (int8x16_t)v67, 0xCuLL), (int8x16_t)v67, 8uLL)));
    v65.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).u32[0];
    v208[2] = vdivq_f32(v65, (float32x4_t)vdupq_lane_s32(v55, 0));
  }
  v70 = vmlaq_f32(vmulq_f32(v31, vnegq_f32(v51)), v32, v52);
  v71 = vmulq_f32(v6, v70);
  v72 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).u64[0];
  if (*(float *)v72.i32 != 0.0)
  {
    v73 = v6;
    v73.f32[0] = -v6.f32[3];
    v74 = v50;
    *(float *)v74.i32 = -*(float *)&v50.i32[3];
    v75 = v30;
    *(float *)v75.i32 = -*(float *)&v30.i32[3];
    v76 = (int32x4_t)vmulq_f32(v73, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v75, (int8x16_t)v75, 0xCuLL), (int8x16_t)v75, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v74, v74), (int8x16_t)v74, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v75, v75), (int8x16_t)v75, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v74, (int8x16_t)v74, 0xCuLL), (int8x16_t)v74, 8uLL)));
    v77 = v6;
    v77.f32[1] = -v6.f32[3];
    v78 = v50;
    *(float *)&v78.i32[1] = -*(float *)&v50.i32[3];
    v79 = v30;
    *(float *)&v79.i32[1] = -*(float *)&v30.i32[3];
    v80 = (int32x4_t)vmulq_f32(v77, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v79, (int8x16_t)v79, 0xCuLL), (int8x16_t)v79, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v78, v78), (int8x16_t)v78, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v79, v79), (int8x16_t)v79, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v78, (int8x16_t)v78, 0xCuLL), (int8x16_t)v78, 8uLL)));
    *(float32x2_t *)v78.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v76.i8, *(int32x2_t *)v80.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v76.i8, *(int32x2_t *)v80.i8));
    v81 = (float32x4_t)vzip2q_s32(v76, v80);
    *(float32x2_t *)v81.f32 = vadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v78.i8);
    v6.f32[2] = -v6.f32[3];
    v82 = v50;
    *(float *)&v82.i32[2] = -*(float *)&v50.i32[3];
    v83 = v30;
    *(float *)&v83.i32[2] = -*(float *)&v30.i32[3];
    v84 = vmulq_f32(v6, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v83, (int8x16_t)v83, 0xCuLL), (int8x16_t)v83, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v82, v82), (int8x16_t)v82, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v83, v83), (int8x16_t)v83, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v82, (int8x16_t)v82, 0xCuLL), (int8x16_t)v82, 8uLL)));
    v81.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2), vaddq_f32(v84, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1))).u32[0];
    v208[3] = vdivq_f32(v81, (float32x4_t)vdupq_lane_s32(v72, 0));
  }
  v85 = *(float32x4_t *)(a1 + 320);
  v86 = vmulq_f32(v13, v85);
  v87 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).u64[0];
  if (*(float *)v87.i32 != 0.0)
  {
    v88 = *(float32x4_t *)(a1 + 320);
    v88.f32[0] = -v85.f32[3];
    v89 = v8;
    *(float *)v89.i32 = -*(float *)&v8.i32[3];
    v90 = v7;
    *(float *)v90.i32 = -*(float *)&v7.i32[3];
    v91 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v90, (int8x16_t)v90, 0xCuLL), (int8x16_t)v90, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v89, v89), (int8x16_t)v89, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v89, (int8x16_t)v89, 0xCuLL), (int8x16_t)v89, 8uLL));
    v92 = *(float32x4_t *)(a1 + 320);
    v92.f32[1] = -v85.f32[3];
    v93 = v8;
    *(float *)&v93.i32[1] = -*(float *)&v8.i32[3];
    v94 = (int32x4_t)vmulq_f32(v91, v88);
    v95 = v7;
    *(float *)&v95.i32[1] = -*(float *)&v7.i32[3];
    v96 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v95, (int8x16_t)v95, 0xCuLL), (int8x16_t)v95, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v93, v93), (int8x16_t)v93, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v95, v95), (int8x16_t)v95, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v93, (int8x16_t)v93, 0xCuLL), (int8x16_t)v93, 8uLL)), v92);
    *(float32x2_t *)v92.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v94.i8, *(int32x2_t *)v96.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v94.i8, *(int32x2_t *)v96.i8));
    v97 = (float32x4_t)vzip2q_s32(v94, v96);
    *(float32x2_t *)v97.f32 = vadd_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v92.f32);
    v98 = *(float32x4_t *)(a1 + 320);
    v98.f32[2] = -v85.f32[3];
    v99 = v8;
    *(float *)&v99.i32[2] = -*(float *)&v8.i32[3];
    v100 = v7;
    *(float *)&v100.i32[2] = -*(float *)&v7.i32[3];
    v101 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v100, (int8x16_t)v100, 0xCuLL), (int8x16_t)v100, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v99, v99), (int8x16_t)v99, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v100, v100), (int8x16_t)v100, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL), (int8x16_t)v99, 8uLL)), v98);
    v97.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 2), vaddq_f32(v101, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v101.f32, 1))).u32[0];
    v208[4] = vdivq_f32(v97, (float32x4_t)vdupq_lane_s32(v87, 0));
  }
  v102 = vmulq_f32(v33, v85);
  v103 = vaddq_f32(v102, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v102.f32, 1));
  v104 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 2), v103).u64[0];
  if (*(float *)v104.i32 != 0.0)
  {
    v105 = v85;
    v105.f32[0] = -v85.f32[3];
    v106 = v30;
    *(float *)v106.i32 = -*(float *)&v30.i32[3];
    v107 = v8;
    *(float *)v107.i32 = -*(float *)&v8.i32[3];
    v108 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v107, (int8x16_t)v107, 0xCuLL), (int8x16_t)v107, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v106, v106), (int8x16_t)v106, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v107, v107), (int8x16_t)v107, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v106, (int8x16_t)v106, 0xCuLL), (int8x16_t)v106, 8uLL)), v105);
    v109 = v85;
    v109.f32[1] = -v85.f32[3];
    v110 = v30;
    *(float *)&v110.i32[1] = -*(float *)&v30.i32[3];
    v111 = v8;
    *(float *)&v111.i32[1] = -*(float *)&v8.i32[3];
    v112 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v111, (int8x16_t)v111, 0xCuLL), (int8x16_t)v111, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v110, v110), (int8x16_t)v110, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v111, v111), (int8x16_t)v111, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v110, (int8x16_t)v110, 0xCuLL), (int8x16_t)v110, 8uLL)), v109);
    *(float32x2_t *)v110.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v108.i8, *(int32x2_t *)v112.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v108.i8, *(int32x2_t *)v112.i8));
    v108.i64[0] = vzip2q_s32(v108, v112).u64[0];
    v113 = v85;
    v113.f32[2] = -v85.f32[3];
    *(float32x2_t *)v103.f32 = vadd_f32(*(float32x2_t *)v108.i8, *(float32x2_t *)v110.i8);
    v114 = v30;
    *(float *)&v114.i32[2] = -*(float *)&v30.i32[3];
    *(float *)&v8.i32[2] = -*(float *)&v8.i32[3];
    v115 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v8, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v114, v114), (int8x16_t)v114, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v114, (int8x16_t)v114, 0xCuLL), (int8x16_t)v114, 8uLL)), v113);
    v103.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 2), vaddq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 1))).u32[0];
    v208[5] = vdivq_f32(v103, (float32x4_t)vdupq_lane_s32(v104, 0));
  }
  v116 = vmulq_f32(v53, v85);
  v117 = vaddq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1));
  v118 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), v117).u64[0];
  if (*(float *)v118.i32 != 0.0)
  {
    v119 = v85;
    v119.f32[0] = -v85.f32[3];
    v120 = v7;
    *(float *)v120.i32 = -*(float *)&v7.i32[3];
    v121 = v50;
    *(float *)v121.i32 = -*(float *)&v50.i32[3];
    v122 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v121, (int8x16_t)v121, 0xCuLL), (int8x16_t)v121, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v120, v120), (int8x16_t)v120, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v121, v121), (int8x16_t)v121, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v120, (int8x16_t)v120, 0xCuLL), (int8x16_t)v120, 8uLL)), v119);
    v123 = v85;
    v123.f32[1] = -v85.f32[3];
    v124 = v7;
    *(float *)&v124.i32[1] = -*(float *)&v7.i32[3];
    v125 = v50;
    *(float *)&v125.i32[1] = -*(float *)&v50.i32[3];
    v126 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v125, (int8x16_t)v125, 0xCuLL), (int8x16_t)v125, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v124, v124), (int8x16_t)v124, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v125, v125), (int8x16_t)v125, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v124, (int8x16_t)v124, 0xCuLL), (int8x16_t)v124, 8uLL)), v123);
    *(float32x2_t *)v124.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v122.i8, *(int32x2_t *)v126.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v122.i8, *(int32x2_t *)v126.i8));
    v122.i64[0] = vzip2q_s32(v122, v126).u64[0];
    v127 = v85;
    v127.f32[2] = -v85.f32[3];
    *(float32x2_t *)v117.f32 = vadd_f32(*(float32x2_t *)v122.i8, *(float32x2_t *)v124.i8);
    *(float *)&v7.i32[2] = -*(float *)&v7.i32[3];
    v128 = v50;
    *(float *)&v128.i32[2] = -*(float *)&v50.i32[3];
    v129 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v128, (int8x16_t)v128, 0xCuLL), (int8x16_t)v128, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v128, v128), (int8x16_t)v128, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v7, (int8x16_t)v7, 0xCuLL), (int8x16_t)v7, 8uLL)), v127);
    v117.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v129, 2), vaddq_f32(v129, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v129.f32, 1))).u32[0];
    v208[6] = vdivq_f32(v117, (float32x4_t)vdupq_lane_s32(v118, 0));
  }
  v130 = vmulq_f32(v70, v85);
  v131 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 2), vaddq_f32(v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.f32, 1))).u64[0];
  if (*(float *)v131.i32 != 0.0)
  {
    v132 = v85;
    v132.f32[0] = -v85.f32[3];
    v133 = v50;
    *(float *)v133.i32 = -*(float *)&v50.i32[3];
    v134 = v30;
    *(float *)v134.i32 = -*(float *)&v30.i32[3];
    v135 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v134, (int8x16_t)v134, 0xCuLL), (int8x16_t)v134, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v133, v133), (int8x16_t)v133, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v134, v134), (int8x16_t)v134, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v133, (int8x16_t)v133, 0xCuLL), (int8x16_t)v133, 8uLL));
    v136 = v85;
    v136.f32[1] = -v85.f32[3];
    v137 = v50;
    *(float *)&v137.i32[1] = -*(float *)&v50.i32[3];
    v138 = v30;
    *(float *)&v138.i32[1] = -*(float *)&v30.i32[3];
    v139 = (int32x4_t)vmulq_f32(v135, v132);
    v140 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v138, (int8x16_t)v138, 0xCuLL), (int8x16_t)v138, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v137, v137), (int8x16_t)v137, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v138, v138), (int8x16_t)v138, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v137, (int8x16_t)v137, 0xCuLL), (int8x16_t)v137, 8uLL)), v136);
    *(float32x2_t *)v136.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v139.i8, *(int32x2_t *)v140.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v139.i8, *(int32x2_t *)v140.i8));
    v141 = (float32x4_t)vzip2q_s32(v139, v140);
    *(float32x2_t *)v141.f32 = vadd_f32(*(float32x2_t *)v141.f32, *(float32x2_t *)v136.f32);
    v85.f32[2] = -v85.f32[3];
    *(float *)&v50.i32[2] = -*(float *)&v50.i32[3];
    *(float *)&v30.i32[2] = -*(float *)&v30.i32[3];
    v142 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v30, (int8x16_t)v30, 0xCuLL), (int8x16_t)v30, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), (int8x16_t)v50, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v50, (int8x16_t)v50, 0xCuLL), (int8x16_t)v50, 8uLL)), v85);
    v141.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2), vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))).u32[0];
    v208[7] = vdivq_f32(v141, (float32x4_t)vdupq_lane_s32(v131, 0));
  }
  v143 = 0;
  v144.columns[0] = 0uLL;
  do
    v144.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v144.columns[0], (float32x4_t)v208[v143++]);
  while (v143 != 8);
  v145 = 0;
  v144.columns[1].i64[0] = 0x3E0000003E000000;
  v144.columns[1].i64[1] = 0x3E0000003E000000;
  v144.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v144.columns[0], (float32x4_t)v144.columns[1]);
  v144.columns[0].i32[0] = 0;
  do
  {
    v144.columns[1] = (simd_float4)vsubq_f32((float32x4_t)v208[v145], (float32x4_t)v144.columns[3]);
    v144.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v144.columns[1], (float32x4_t)v144.columns[1]);
    v144.columns[1] = (simd_float4)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144.columns[1], 2), vaddq_f32((float32x4_t)v144.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.columns[1].f32, 1)));
    v144.columns[0].f32[0] = fmaxf(v144.columns[0].f32[0], sqrtf(v144.columns[1].f32[0]));
    ++v145;
  }
  while (v145 != 8);
  v146 = ceilf(v144.columns[0].f32[0] * 16.0);
  v144.columns[1].f32[0] = v146 * 0.0625;
  v205 = v144.columns[1];
  v144.columns[0] = v144.columns[3];
  v144.columns[0].f32[3] = v146 * 0.0625;
  *(simd_float4 *)(a1 + 224) = v144.columns[0];
  v144.columns[3].i32[3] = *(_DWORD *)(a1 + 60);
  *(simd_float4 *)(a1 + 48) = v144.columns[3];
  v144.columns[0] = *(simd_float4 *)a1;
  v144.columns[1] = *(simd_float4 *)(a1 + 16);
  v144.columns[2] = *(simd_float4 *)(a1 + 32);
  v214 = __invert_f4(v144);
  v148 = 0;
  v149 = *(float32x4_t *)(a1 + 32);
  v150 = *(float32x4_t *)(a1 + 48);
  v151 = (int32x4_t)vmulq_f32(v149, v149);
  v151.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v151, 2), vadd_f32(*(float32x2_t *)v151.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v151.i8, 1))).u32[0];
  v152 = vrsqrte_f32((float32x2_t)v151.u32[0]);
  v153 = vmul_f32(v152, vrsqrts_f32((float32x2_t)v151.u32[0], vmul_f32(v152, v152)));
  v154 = vmulq_n_f32(v149, vmul_f32(v153, vrsqrts_f32((float32x2_t)v151.u32[0], vmul_f32(v153, v153))).f32[0]);
  __asm { FMOV            V4.4S, #1.0 }
  v160 = _Q4;
  v164 = vdivq_f32(_Q4, v154);
  _Q4.f32[0] = -(float)(v146 * 0.0625);
  v161 = _Q4;
  v161.f32[1] = _Q4.f32[0];
  v200 = v214.columns[1];
  v201 = v214.columns[0];
  *(simd_float4x4 *)(a1 + 64) = v214;
  v161.i32[2] = v205.i32[0];
  v160.i32[0] = v205.i32[0];
  v198 = v214.columns[3];
  v199 = v214.columns[2];
  v162 = v160;
  v162.f32[1] = _Q4.f32[0];
  v162.i32[2] = v205.i32[0];
  v209 = v161;
  v210 = v162;
  v160.i32[1] = v205.i32[0];
  v160.i32[2] = v205.i32[0];
  _Q4.i32[1] = v205.i32[0];
  v163 = (__n128)v205;
  _Q4.i32[2] = v205.i32[0];
  v211 = v160;
  v212 = _Q4;
  v164.i32[3] = 1259902592;
  v165 = vsubq_f32(a3, a4);
  v166 = vaddq_f32(a3, a4);
  v167 = 0.0;
  do
  {
    v168 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)a1, COERCE_FLOAT(*(_OWORD *)((char *)&v209 + v148 * 4))), *(float32x4_t *)(a1 + 16), *(float32x2_t *)&v209.f32[v148], 1), v149, *(float32x4_t *)((char *)&v209 + v148 * 4), 2), v150, *(float32x4_t *)((char *)&v209 + v148 * 4), 3);
    v168.i32[3] = 1.0;
    v169 = vmulq_f32(v164, vsubq_f32(v165, v168));
    v170 = vmulq_f32(v164, vsubq_f32(v166, v168));
    v169.i32[3] = 0;
    v170.i32[3] = 0;
    v171 = vminnmq_f32(v169, v170);
    v172 = vmaxnmq_f32(v169, v170);
    v173 = fmaxf(fmaxf(v171.f32[0], v171.f32[2]), v171.f32[1]);
    v174 = fminf(fminf(v172.f32[0], v172.f32[2]), v172.f32[1]);
    if (v174 >= v173)
    {
      if (v173 > 0.0 && v173 < 10000000.0 || v174 > 0.0 && (v173 = v174, v174 < 10000000.0))
        v167 = fmaxf(v167, v173);
    }
    v148 += 4;
  }
  while (v148 != 16);
  *(float *)v147.i32 = -(float)(v146 * 0.0625);
  v163.n128_u32[1] = v205.i32[0];
  v163.n128_f32[2] = v205.f32[0] + v167;
  v204 = (__n128)vdupq_lane_s32(v147, 0);
  v206 = v163;
  *(double *)v182.i64 = sub_1B1796C50(v204, v163);
  v186 = 0;
  *(float32x4_t *)(a1 + 128) = v182;
  *(float32x4_t *)(a1 + 144) = v183;
  *(float32x4_t *)(a1 + 160) = v184;
  *(float32x4_t *)(a1 + 176) = v185;
  v187 = (float32x4_t)v204;
  v188 = (float32x4_t)v206;
  v187.i32[3] = 1.0;
  v188.i32[3] = 1.0;
  v189 = vaddq_f32(v187, v188);
  v190 = v188;
  v191 = v187;
  v187.i64[0] = 0x3F0000003F000000;
  v187.i64[1] = 0x3F0000003F000000;
  *(float32x4_t *)(a1 + 352) = vmulq_f32(v189, v187);
  *(float32x4_t *)(a1 + 368) = vmulq_f32(vsubq_f32(v190, v191), v187);
  v207[0] = v201;
  v207[1] = v200;
  v207[2] = v199;
  v207[3] = v198;
  v209 = 0u;
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v209 + v186 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v182, COERCE_FLOAT(v207[v186])), v183, *(float32x2_t *)&v207[v186], 1), v184, (float32x4_t)v207[v186], 2), v185, (float32x4_t)v207[v186], 3);
    ++v186;
  }
  while (v186 != 4);
  v192 = vadd_f32(*(float32x2_t *)v212.f32, (float32x2_t)*(_OWORD *)&vmlaq_f32(vmlaq_f32(vmulq_f32(v209, (float32x4_t)0), (float32x4_t)0, v210), (float32x4_t)0, v211));
  v193 = sub_1B1860108(a2, v175, v176, v177, v178, v179, v180, v181);
  *(float32x2_t *)v194.f32 = vmul_n_f32(v192, 0.5 * *(float *)&v193);
  v195 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vrndaq_f32(v194), *(float32x2_t *)v194.f32), 2.0 / *(float *)&v193);
  v196 = *(int8x16_t *)(a1 + 176);
  *(float32x2_t *)&v197 = vadd_f32(*(float32x2_t *)v196.i8, v195);
  *((_QWORD *)&v197 + 1) = vextq_s8(v196, v196, 8uLL).u64[0];
  *(_OWORD *)(a1 + 176) = v197;
}

double sub_1B1797AF8(uint64_t a1)
{
  return *(double *)(a1 + 135536);
}

uint64_t sub_1B1797B08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 135544);
}

void sub_1B1797B18(float32x4_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  simd_float4 v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  int v85;
  int32x4_t v86;
  float32x2_t v87;
  float32x2_t v88;
  __int128 *v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float *v99;
  uint64_t v100;
  simd_float4 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  _QWORD *v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  _OWORD *v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _OWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double v143;
  float v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  uint64_t v162;
  double v163;
  float v164;
  double v165;
  double v166;
  unsigned int v167;
  float v168;
  unint64_t v169;
  unsigned int v170;
  __int128 v171;
  __int128 v172;
  simd_float4 v173;
  simd_float4 v174;
  __int128 v175;
  float v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  float v184;
  __int128 v185;
  float32x4_t v186;
  unsigned __int8 *v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 *v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  unsigned int v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  int v207;
  __int128 v208;
  __int128 v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  float32x4_t v215;
  float32x4_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  float32x4_t v222;
  simd_float4 v223;
  simd_float4 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  simd_float4x4 v231;
  simd_float4x4 v232;

  v230 = *MEMORY[0x1E0C80C00];
  if (sub_1B185F5C0(a3, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    LODWORD(v19) = sub_1B185F610(a3, v12, v13, v14, v15, v16, v17, v18);
  else
    LODWORD(v19) = 1;
  v20 = sub_1B186064C(a3, v12, v13, v14, v15, v16, v17, v18);
  if ((sub_1B1862334(a3, v21, v22, v23, v24, v25, v26, v27) & 1) != 0)
  {
    if (v20 == 2)
    {
      v35 = a1 + 7291;
      v36 = sub_1B17C6244(a2, v28, v29, v30, v31, v32, v33, v34);
      v44 = sub_1B187B260(v36, v37, v38, v39, v40, v41, v42, v43);
      v210 = 0;
      v208 = 0u;
      v209 = 0u;
      sub_1B197CAD0(0, (uint64_t)&v208);
      *(_QWORD *)&v209 = 0x200000014;
      *(_QWORD *)&v208 = sub_1B185FE0C(a3, v45, v46, v47, v48, v49, v50, v51);
      DWORD2(v209) = 1;
      sub_1B197E0BC(v44, (uint64_t)&v208);
      v205 = v53;
      v206 = v52;
      v61 = sub_1B1869AC8((uint64_t)a2, v54, v55, v56, v57, v58, v59, v60);
      v231.columns[1] = *(simd_float4 *)(v61 + 16);
      v62 = *(simd_float4 *)(v61 + 32);
      v222 = *(float32x4_t *)v61;
      v223 = v231.columns[1];
      v231.columns[3] = (simd_float4)xmmword_1B2244E20;
      v224 = v62;
      v225 = xmmword_1B2244E20;
      v231.columns[0] = (simd_float4)v222;
      v231.columns[2] = v224;
      v232 = __invert_f4(v231);
      v203 = (float32x4_t)v232.columns[1];
      v204 = (float32x4_t)v232.columns[0];
      v201 = (float32x4_t)v232.columns[3];
      v202 = (float32x4_t)v232.columns[2];
      v63 = a1[7293].f32[0];
      v64 = fminf(a1[7293].f32[1], sub_1B18624C4(a3));
      v72 = sub_1B18622E8(a3, v65, v66, v67, v68, v69, v70, v71);
      v80 = v72;
      if (v72)
      {
        v81 = vmulq_f32(v205, v205);
        v81.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0]);
        v82 = vsubq_f32(v206, a1[7292]);
        v83 = vmulq_f32(v82, v82);
        v83.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).f32[0]);
        v63 = fmaxf(v63, v83.f32[0] - v81.f32[0]);
        v64 = fminf(v64, v81.f32[0] + v83.f32[0]);
      }
      v84 = sub_1B1862520(a3, v73, v74, v75, v76, v77, v78, v79);
      sub_1B1796B98(a4 + 2304, v19, v63, v64, v84);
      v195 = v19;
      v85 = 0;
      if ((_DWORD)v19)
      {
        v86 = (int32x4_t)vmulq_f32(*v35, *v35);
        v86.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v86, 2), vadd_f32(*(float32x2_t *)v86.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.i8, 1))).u32[0];
        v87 = vrsqrte_f32((float32x2_t)v86.u32[0]);
        v88 = vmul_f32(v87, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v87, v87)));
        v199 = vmulq_n_f32(*v35, vmul_f32(v88, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v88, v88))).f32[0]);
        v200 = a1[7292];
        v198 = vnegq_f32(v199);
        v89 = (__int128 *)&a1[7283];
        v91 = v201;
        v90 = v202;
        v93 = v205;
        v92 = v206;
        v95 = v203;
        v94 = v204;
        v96 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v201, v202, v206, 2), v203, *(float32x2_t *)v206.f32, 1), v204, v206.f32[0]);
        v96.i32[3] = v206.i32[3];
        v97 = v205;
        v97.i32[1] = v205.i32[0];
        v97.i32[2] = v205.i32[0];
        v98 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v205.f32, 1), (int32x4_t)v205), vabsq_f32(v203)), v97, vabsq_f32(v204)), (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v93, (int32x4_t)v93), (int32x4_t)v205), vabsq_f32(v202));
        v98.i32[2] = fminf(v98.f32[2], 10000.0);
        v196 = vaddq_f32(v96, v98);
        v197 = vsubq_f32(v96, v98);
        v19 = v19;
        v99 = (float *)(a4 + 2308);
        do
        {
          v100 = a4 + 384 * v85;
          v101 = v223;
          *(float32x4_t *)v100 = v222;
          *(simd_float4 *)(v100 + 16) = v101;
          v102 = v225;
          *(simd_float4 *)(v100 + 32) = v224;
          *(_OWORD *)(v100 + 48) = v102;
          *(float32x4_t *)(v100 + 64) = v94;
          *(float32x4_t *)(v100 + 80) = v95;
          *(float32x4_t *)(v100 + 96) = v90;
          *(float32x4_t *)(v100 + 112) = v91;
          v104 = v89[1];
          v226 = *v89;
          v103 = v226;
          v227 = v104;
          v105 = v89[3];
          v106 = vmulq_f32(vmlaq_n_f32(v200, v198, *(v99 - 1)), v198);
          v107 = v198;
          v107.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1))).f32[0];
          v108 = vmulq_f32(v199, vmlaq_n_f32(v200, v198, *v99));
          v228 = v89[2];
          v229 = v105;
          v106.f32[0] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1))).f32[0];
          v109 = v199;
          v109.i32[3] = v106.i32[0];
          *(_OWORD *)(v100 + 288) = v228;
          *(_OWORD *)(v100 + 304) = v105;
          *(_OWORD *)(v100 + 256) = v103;
          *(_OWORD *)(v100 + 272) = v104;
          *(float32x4_t *)(v100 + 320) = v109;
          *(float32x4_t *)(v100 + 336) = v107;
          if ((v80 & 1) != 0)
          {
            v110 = *(_QWORD **)(a4 + 384 * v85 + 240);
            v211 = v226;
            v212 = v227;
            v213 = v228;
            v214 = v229;
            v215 = v109;
            v216 = v107;
            sub_1B19E0FEC(v110, (uint64_t)&v211);
            if (!sub_1B19E2A64(v110, v206, v205))
              goto LABEL_16;
            *(double *)v111.i64 = sub_1B19E2BE8((uint64_t)v110, v204, v203, v202, v201);
            v113 = vsubq_f32(v111, v112);
            v114 = vaddq_f32(v111, v112);
            v113.i32[2] = v197.i32[2];
            v114.i32[2] = v196.i32[2];
            v115.i64[0] = 0x3F0000003F000000;
            v115.i64[1] = 0x3F0000003F000000;
            sub_1B19E0F44(v110, vmulq_f32(vaddq_f32(v114, v113), v115), vmulq_f32(vsubq_f32(v114, v113), v115));
            sub_1B19E2B9C((uint64_t)v110, &v222);
            if (!sub_1B19E2A64(v110, v206, v205))
              goto LABEL_16;
            *(double *)v116.i64 = sub_1B19E2BE8((uint64_t)v110, v204, v203, v202, v201);
            v118 = vmulq_f32(vaddq_f32(v117, (float32x4_t)vdupq_n_s32(0x3C23D70Au)), (float32x4_t)vdupq_n_s32(0x3F800054u));
            v118.i32[3] = v117.i32[3];
            v119 = (_OWORD *)(a4 + 384 * v85);
            v119[22] = v116;
            v119[23] = v118;
            *(double *)&v120 = sub_1B1796C50((__n128)vsubq_f32(v116, v118), (__n128)vaddq_f32(v116, v118));
            v119[8] = v120;
            v119[9] = v121;
            v119[10] = v122;
            v119[11] = v123;
          }
          else
          {
            sub_1B1796D58(v100, a3, v92, v93);
          }
          ++v85;
LABEL_16:
          v95 = v203;
          v94 = v204;
          v91 = v201;
          v90 = v202;
          ++v99;
          --v19;
          v93 = v205;
          v92 = v206;
        }
        while (v19);
      }
      if (v195 > v85)
      {
        *(double *)&v124 = sub_1B1796C50((__n128)vdupq_n_s32(0x47C34F80u), (__n128)vdupq_n_s32(0x47C35000u));
        do
        {
          v128 = (_OWORD *)(a4 + 384 * v85);
          v128[8] = v124;
          v128[9] = v125;
          v128[10] = v126;
          v128[11] = v127;
          ++v85;
        }
        while (v195 > v85);
      }
    }
    else
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Not Yet Implemented!!!!"), v29, v30, v31, v32, v33, v34, (uint64_t)"0");
    }
  }
  else
  {
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    v216 = 0u;
    v217 = 0u;
    v214 = 0u;
    v215 = 0u;
    v212 = 0u;
    v213 = 0u;
    v211 = 0u;
    sub_1B185F8E8(a3, (uint64_t)&v211, v29, v30, v31, v32, v33, v34);
    v143 = sub_1B1860108(a3, v129, v130, v131, v132, v133, v134, v135);
    if (v20 == 1)
    {
      v144 = sub_1B1860734(a3, v136, v137, v138, v139, v140, v141, v142);
      v145 = v144;
      v153 = sub_1B1860694(a3, v146, v147, v148, v149, v150, v151, v152);
      v161 = __tanpi(0.25);
      v162 = 0;
      if (v161 == 0.0)
        v163 = 1.0;
      else
        v163 = 1.0 / v161;
      v164 = v163;
      v165 = v145 + 1.0;
      if (v153 > v144)
        v165 = v153;
      v166 = v165 / (v145 - v165);
      *(float *)&v167 = v166;
      v168 = v164;
      LODWORD(v169) = 0;
      *((float *)&v169 + 1) = v164;
      *(float *)&v170 = v166 * v145;
      *(_QWORD *)&v171 = 0;
      *((_QWORD *)&v171 + 1) = __PAIR64__(-1.0, v167);
      *(_QWORD *)&v172 = 0;
      *((_QWORD *)&v172 + 1) = v170;
      v226 = LODWORD(v168);
      v227 = v169;
      v228 = v171;
      v229 = v172;
      v222 = 0u;
      v223 = 0u;
      v224 = 0u;
      v225 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v222 + v162) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(__int128 *)((char *)&v226 + v162))), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)((char *)&v226 + v162), 1), (float32x4_t)xmmword_1B2244DF0, *(float32x4_t *)((char *)&v226 + v162), 2), (float32x4_t)xmmword_1B2244E10, *(float32x4_t *)((char *)&v226 + v162), 3);
        v162 += 16;
      }
      while (v162 != 64);
      v173 = v223;
      v174 = v224;
      v207 = DWORD2(v225);
      v175 = v225;
      *(float32x4_t *)(a4 + 128) = v222;
      *(simd_float4 *)(a4 + 144) = v173;
      *(simd_float4 *)(a4 + 160) = v174;
      *(_OWORD *)(a4 + 176) = v175;
      v176 = v174.f32[2];
      v184 = sub_1B1860068(a3, v154, v155, v156, v157, v158, v159, v160);
      *(float *)&v185 = -v176;
      DWORD1(v185) = v207;
      *((float *)&v185 + 2) = v184 * 0.001;
      *(_OWORD *)(a4 + 192) = v185;
    }
    else
    {
      v186.i64[0] = 0;
      *(double *)&v186.i64[1] = v143;
      v222 = v186;
      v187 = sub_1B18667B4((unsigned __int8 *)&v211, (uint64_t)&v222, v137, v138, v139, v140, v141, v142);
      v188 = *((_OWORD *)v187 + 3);
      v190 = *(_OWORD *)v187;
      v189 = *((_OWORD *)v187 + 1);
      *(_OWORD *)(a4 + 160) = *((_OWORD *)v187 + 2);
      *(_OWORD *)(a4 + 176) = v188;
      *(_OWORD *)(a4 + 128) = v190;
      *(_OWORD *)(a4 + 144) = v189;
    }
    v191 = (__int128 *)sub_1B1869AC8((uint64_t)a2, v177, v178, v179, v180, v181, v182, v183);
    v192 = v191[3];
    v194 = *v191;
    v193 = v191[1];
    *(_OWORD *)(a4 + 32) = v191[2];
    *(_OWORD *)(a4 + 48) = v192;
    *(_OWORD *)a4 = v194;
    *(_OWORD *)(a4 + 16) = v193;
    *(simd_float4x4 *)(a4 + 64) = __invert_f4(*(simd_float4x4 *)a4);
  }
}

void sub_1B17981CC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, simd_float4 *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *Value;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD *v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __n128 *v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  float32x4_t *v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  simd_float4 v89;
  simd_float4 v90;
  simd_float4 v91;
  simd_float4 v92;
  simd_float4 v93;
  simd_float4 v94;
  simd_float4 v95;
  simd_float4 v96;
  __n128 v97;
  __n128 v98;
  __n128 v99;
  __n128 v100;
  _OWORD v101[4];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  simd_float4x4 v106;
  simd_float4x4 v107;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"lightNode");
  sub_1B1795C08(a1);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  if (Value)
  {
    v24 = a1 + 8 * (Value >> 28);
    v25 = (Value & 0xFFFFFFF) - 1;
    v26 = *(_QWORD *)(*(_QWORD *)(v24 + 216) + 8 * v25);
    if ((sub_1B185F4D4(v26, v17, v18, v19, v20, v21, v22, v23) & 1) != 0)
    {
      if (*(_BYTE *)(*(_QWORD *)(v24 + 408) + v25))
      {
        if (*(_DWORD *)(a1 + 116776) < 9u)
        {
          v33 = a1 + 2336 * (*(unsigned __int8 *)(*(_QWORD *)(v24 + 408) + v25) - 1) + 116784;
          sub_1B1797B18((float32x4_t *)a1, a2, v26, v33, v29, v30, v31, v32);
          v100 = *(__n128 *)(a1 + 116704);
          v98 = *(__n128 *)(a1 + 116736);
          v99 = *(__n128 *)(a1 + 116720);
          v97 = *(__n128 *)(a1 + 116752);
          v41 = sub_1B185F5C0(v26, v34, v35, v36, v37, v38, v39, v40);
          if ((_DWORD)v41)
          {
            v41 = sub_1B185F610(v26, v42, v43, v44, v45, v46, v47, v48);
            v49 = v41;
          }
          else
          {
            v49 = 1;
          }
          *(double *)v106.columns[0].i64 = sub_1B1796A80(*(__n128 *)(v33 + 64), *(__n128 *)(v33 + 80), *(__n128 *)(v33 + 96), *(__n128 *)(v33 + 112), *(__n128 *)(v33 + 128), *(__n128 *)(v33 + 144), *(__n128 *)(v33 + 160), *(__n128 *)(v33 + 176), v41, v42, v43, v44, v45, v46, v47, v48, v100, v99, v98,
                                             v97);
          v91 = v106.columns[1];
          v92 = v106.columns[0];
          v89 = v106.columns[3];
          v90 = v106.columns[2];
          v107 = __invert_f4(v106);
          v95 = v107.columns[1];
          v96 = v107.columns[0];
          v93 = v107.columns[3];
          v94 = v107.columns[2];
          if (v49)
          {
            v58 = 0;
            __asm { FMOV            V0.4S, #1.0 }
            v88 = _Q0;
            do
            {
              if (a3)
              {
                v64 = (__int128 *)(v33 + 384 * v58);
                v65 = (_OWORD *)(a3 + (v58 << 6));
                v66 = *v64;
                v67 = v64[1];
                v68 = v64[3];
                v65[2] = v64[2];
                v65[3] = v68;
                *v65 = v66;
                v65[1] = v67;
              }
              if (a4)
              {
                v69 = (_OWORD *)(a4 + (v58 << 6));
                v70 = (_OWORD *)(v33 + 384 * v58);
                v71 = v70[8];
                v72 = v70[9];
                v73 = v70[11];
                v69[2] = v70[10];
                v69[3] = v73;
                *v69 = v71;
                v69[1] = v72;
              }
              if (v58)
              {
                v74 = (__n128 *)(v33 + 384 * v58);
                *(double *)v75.i64 = sub_1B1796A80(v74[4], v74[5], v74[6], v74[7], v74[8], v74[9], v74[10], v74[11], v50, v51, v52, v53, v54, v55, v56, v57, v100, v99, v98,
                                       v97);
                v79 = 0;
                v101[0] = v96;
                v101[1] = v95;
                v101[2] = v94;
                v101[3] = v93;
                v102 = 0u;
                v103 = 0u;
                v104 = 0u;
                v105 = 0u;
                do
                {
                  *(__int128 *)((char *)&v102 + v79 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v75, COERCE_FLOAT(v101[v79])), v76, *(float32x2_t *)&v101[v79], 1), v77, (float32x4_t)v101[v79], 2), v78, (float32x4_t)v101[v79], 3);
                  ++v79;
                }
                while (v79 != 4);
                v80 = v102;
                v81 = v105;
                DWORD1(v80) = DWORD1(v103);
                DWORD2(v80) = DWORD2(v104);
                v82 = v33 + 384 * v58;
                *(_OWORD *)(v82 + 192) = v80;
                *(_OWORD *)(v82 + 208) = v81;
                if (a5)
                {
                  v83 = (float32x4_t *)&a5[4 * v58];
                  *v83 = v75;
                  v83[1] = v76;
                  v83[2] = v77;
                  v83[3] = v78;
                }
              }
              else
              {
                v50 = sub_1B186064C(v26, v51, v52, v53, v54, v55, v56, v57);
                if ((_DWORD)v50 != 1)
                {
                  *(_OWORD *)(v33 + 192) = v88;
                  *(_OWORD *)(v33 + 208) = 0u;
                }
                if (a5)
                {
                  *a5 = v92;
                  a5[1] = v91;
                  a5[2] = v90;
                  a5[3] = v89;
                }
              }
              if (a6)
              {
                v84 = *(_OWORD *)(v33 + 384 * v58 + 192);
                v85 = a6 + 16 * v58;
                HIDWORD(v84) = *(_DWORD *)(v85 + 12);
                *(_OWORD *)v85 = v84;
              }
              if (a7)
              {
                v86 = *(_OWORD *)(v33 + 384 * v58 + 208);
                v87 = a7 + 16 * v58;
                HIDWORD(v86) = *(_DWORD *)(v87 + 12);
                *(_OWORD *)v87 = v86;
              }
              ++v58;
            }
            while (v58 != v49);
          }
        }
        else if ((byte_1EEF6547A & 1) == 0)
        {
          byte_1EEF6547A = 1;
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: Too many shadow caster lights at once. Limit is %d"), v27, v28, v29, v30, v31, v32, 8);
        }
      }
    }
    else
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Light does not casts shadow. Cannot compute shadow parameters."), v27, v28, v29, v30, v31, v32, (uint64_t)"0");
    }
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: The shadow node is not registered"), v18, v19, v20, v21, v22, v23, a9);
  }
}

uint64_t sub_1B179856C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(result + 100);
  if ((_DWORD)v2)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a2 + 16))(a2, v2, *(_QWORD *)(result + 192), *(_QWORD *)(result + 256), *(_QWORD *)(result + 496));
  return result;
}

uint64_t sub_1B1798594(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t sub_1B179859C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

const void *sub_1B17985A4(uint64_t a1, const void *a2)
{
  const void *result;

  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), a2);
  if (result)
    return (const void *)*(unsigned __int8 *)((result & 0xFFFFFFF)
                                            + *(_QWORD *)(a1 + 8 * (result >> 28) + 408)
                                            - 1);
  return result;
}

uint64_t sub_1B17985E4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
  {
    if (a2 >= 9)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Max caster index overflow"), a3, a4, a5, a6, a7, a8, (uint64_t)"casterIndex <= kMaxRuntimeShadows");
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. 0 caster index is reserved"), a3, a4, a5, a6, a7, a8, (uint64_t)"casterIndex > 0");
  }
  return a1 + 2336 * a2 + 114448;
}

uint64_t sub_1B179865C(uint64_t a1)
{
  return a1 + 135472;
}

uint64_t sub_1B1798668(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116776);
}

void sub_1B179867C(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  const void *v8;

  CFRelease(*(CFTypeRef *)(a1 + 24));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFRelease(*(CFTypeRef *)(a1 + 40));
  CFRelease(*(CFTypeRef *)(a1 + 56));
  CFRelease(*(CFTypeRef *)(a1 + 512));
  CFRelease(*(CFTypeRef *)(a1 + 504));
  v2 = *(const void **)(a1 + 116504);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 116504) = 0;
  }
  v3 = a1 + 408;
  v4 = -64;
  do
  {
    free(*(void **)(v3 + v4 - 192));
    free(*(void **)(v3 + v4 - 128));
    free(*(void **)(v3 + v4 - 64));
    free(*(void **)(v3 + v4));
    free(*(void **)(v3 + v4 + 64));
    v4 += 8;
  }
  while (v4);
  free(*(void **)(a1 + 472));
  free(*(void **)(a1 + 480));
  free(*(void **)(a1 + 488));
  free(*(void **)(a1 + 496));
  v5 = 0;
  v6 = a1 + 117024;
  do
  {
    for (i = 0; i != 1536; i += 384)
    {
      v8 = *(const void **)(v6 + i);
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(v6 + i) = 0;
      }
    }
    ++v5;
    v6 += 2336;
  }
  while (v5 != 8);
}

CFStringRef sub_1B1798780(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXLightingSystem %p>"), a1);
}

CFStringRef sub_1B17987BC(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXLightingSystem %p>"), a1);
}

BOOL sub_1B17987F8(CFTypeRef cf1, const void *a2)
{
  _BOOL8 result;

  result = 0;
  if (cf1)
  {
    if (a2)
      return CFEqual(cf1, a2) != 0;
  }
  return result;
}

float32x4_t *moveSystem(float32x4_t *result, float32x4_t *a2, unsigned int a3, int32x2_t a4)
{
  float32x4_t v4;
  uint64_t v5;
  float32x4_t v11;
  int32x4_t v12;
  uint32x4_t v13;
  int8x16_t v14;

  if (a3)
  {
    v4 = (float32x4_t)vdupq_lane_s32(a4, 0);
    v5 = a3;
    __asm { FMOV            V1.4S, #10.0 }
    do
    {
      v11 = vmlaq_f32(*result, v4, *a2);
      v12 = vcgtq_f32(vabsq_f32(v11), _Q1);
      v13 = (uint32x4_t)v12;
      v13.i32[3] = v12.i32[2];
      if ((vmaxvq_u32(v13) & 0x80000000) != 0)
      {
        v12.i32[3] = 0;
        v14 = vbslq_s8((int8x16_t)vcltzq_s32(v12), (int8x16_t)vnegq_f32(*a2), *(int8x16_t *)a2);
        v14.i32[3] = HIDWORD(*(unsigned __int128 *)a2);
        *a2 = (float32x4_t)v14;
      }
      else
      {
        v11.i32[3] = HIDWORD(*(unsigned __int128 *)result);
        *result = v11;
      }
      ++result;
      ++a2;
      --v5;
    }
    while (v5);
  }
  return result;
}

float32x4_t globalClamp(float32x4_t *a1, int8x16_t *a2, float32x4_t a3)
{
  int8x16_t v3;
  float32x4_t result;

  v3.i64[0] = 0x8000000080000000;
  v3.i64[1] = 0x8000000080000000;
  *a2 = veorq_s8(vandq_s8((int8x16_t)vcgtq_f32(*a1, a3), v3), *a2);
  result = vmaxnmq_f32(vnegq_f32(a3), vminnmq_f32(*a1, a3));
  *a1 = result;
  return result;
}

float srdnoise3(_OWORD *a1, float a2, float a3, float a4, float a5)
{
  __int128 v9;
  __float2 v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  _BOOL4 v26;
  float v27;
  float v28;
  float v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float *v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  float *v70;
  float *v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  float *v80;
  float *v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;

  v10 = __sincosf_stret(a5);
  v11 = (float)((float)(a2 + a3) + a4) * 0.33333;
  v12 = floorf(v11 + a2);
  v13 = floorf(v11 + a3);
  v14 = floorf(v11 + a4);
  v15 = (float)(v14 + (float)(v12 + v13)) * 0.16667;
  v16 = v13 - v15;
  v17 = v14 - v15;
  v18 = a2 - (float)(v12 - v15);
  v19 = a3 - v16;
  v20 = a4 - v17;
  if (v18 >= v19)
  {
    v22 = 0;
    if (v19 < v20)
    {
      v25 = 0;
      v21 = v18 >= v20;
      v24 = v18 < v20;
      v23 = 1;
      goto LABEL_6;
    }
    v24 = 0;
    v26 = 0;
    v21 = 1;
    v23 = 1;
  }
  else
  {
    v21 = 0;
    if (v19 < v20)
    {
      v22 = 0;
      v23 = 0;
      v24 = 1;
      v25 = 1;
LABEL_6:
      v26 = 1;
      goto LABEL_10;
    }
    v24 = 0;
    v23 = v18 >= v20;
    v26 = v18 < v20;
    v22 = 1;
  }
  v25 = 1;
LABEL_10:
  v27 = (float)(v18 - (float)v21) + 0.16667;
  v28 = (float)(v19 - (float)v22) + 0.16667;
  v29 = (float)(v20 - (float)v24) + 0.16667;
  v30 = (int)v12;
  v31 = (int)v13;
  v32 = (int)v14;
  v33 = (float)((float)(0.6 - (float)(v18 * v18)) - (float)(v19 * v19)) - (float)(v20 * v20);
  v34 = 0.0;
  v35 = 0.0;
  v36 = 0.0;
  v37 = 0.0;
  v38 = 0.0;
  v39 = 0.0;
  v40 = 0.0;
  v41 = 0.0;
  if (v33 >= 0.0)
  {
    v42 = (float *)((char *)&unk_1B2244FA0
                  + 12
                  * (byte_1B2245120[byte_1B2245120[byte_1B2245120[v32] + (unint64_t)v31]
                                  + (unint64_t)(int)v12] & 0xF));
    v43 = (float *)((char *)&unk_1B2245060
                  + 12
                  * (byte_1B2245120[byte_1B2245120[byte_1B2245120[v32] + (unint64_t)v31]
                                  + (unint64_t)(int)v12] & 0xF));
    v35 = (float)(v10.__sinval * *v43) + (float)(v10.__cosval * *v42);
    v36 = (float)(v10.__sinval * v43[1]) + (float)(v10.__cosval * v42[1]);
    v37 = (float)(v10.__sinval * v43[2]) + (float)(v10.__cosval * v42[2]);
    v39 = v33 * v33;
    v40 = v39 * v39;
    v41 = (float)(v39 * v39) * (float)((float)((float)(v19 * v36) + (float)(v35 * v18)) + (float)(v37 * v20));
    v38 = (float)((float)(0.6 - (float)(v18 * v18)) - (float)(v19 * v19)) - (float)(v20 * v20);
  }
  v94 = v38;
  v95 = v35;
  v96 = v36;
  v97 = v37;
  v102 = v41;
  v44 = (float)(v18 - (float)v23) + 0.33333;
  v45 = (float)(v19 - (float)v25) + 0.33333;
  v46 = (float)(v20 - (float)v26) + 0.33333;
  v47 = (float)((float)(0.6 - (float)(v27 * v27)) - (float)(v28 * v28)) - (float)(v29 * v29);
  v48 = 0.0;
  v49 = 0.0;
  v50 = 0.0;
  v51 = 0.0;
  v52 = 0.0;
  v53 = 0.0;
  if (v47 >= 0.0)
  {
    v54 = 3
        * (byte_1B2245120[(v21 + v30)
                        + (unint64_t)byte_1B2245120[v22
                                                         + v31
                                                         + (unint64_t)byte_1B2245120[v24
                                                                                          + (unint64_t)v32]]] & 0xF);
    v55 = (float *)((char *)&unk_1B2244FA0 + 4 * v54);
    v56 = (float *)((char *)&unk_1B2245060 + 4 * v54);
    v34 = (float)(v10.__sinval * *v56) + (float)(v10.__cosval * *v55);
    v48 = (float)(v10.__sinval * v56[1]) + (float)(v10.__cosval * v55[1]);
    v49 = (float)(v10.__sinval * v56[2]) + (float)(v10.__cosval * v55[2]);
    v51 = v47 * v47;
    v52 = v51 * v51;
    v53 = (float)(v51 * v51) * (float)((float)((float)(v28 * v48) + (float)(v34 * v27)) + (float)(v49 * v29));
    v50 = (float)((float)(0.6 - (float)(v27 * v27)) - (float)(v28 * v28)) - (float)(v29 * v29);
  }
  v93 = v49;
  v100 = (float)(v18 - (float)v21) + 0.16667;
  v101 = v53;
  v98 = v29;
  v99 = v28;
  v57 = (float)(v18 + -1.0) + 0.5;
  v58 = (float)(v19 + -1.0) + 0.5;
  v59 = (float)(v20 + -1.0) + 0.5;
  v60 = (float)((float)(0.6 - (float)(v44 * v44)) - (float)(v45 * v45)) - (float)(v46 * v46);
  v61 = 0.0;
  v62 = 0.0;
  v63 = 0.0;
  v64 = 0.0;
  v65 = 0.0;
  v66 = 0.0;
  v67 = 0.0;
  v68 = 0.0;
  if (v60 >= 0.0)
  {
    v69 = 3
        * (byte_1B2245120[(v23 + v30)
                        + (unint64_t)byte_1B2245120[v25
                                                         + v31
                                                         + (unint64_t)byte_1B2245120[v26
                                                                                          + (unint64_t)v32]]] & 0xF);
    v70 = (float *)((char *)&unk_1B2244FA0 + 4 * v69);
    v71 = (float *)((char *)&unk_1B2245060 + 4 * v69);
    v62 = (float)(v10.__sinval * *v71) + (float)(v10.__cosval * *v70);
    v63 = (float)(v10.__sinval * v71[1]) + (float)(v10.__cosval * v70[1]);
    v64 = (float)(v10.__sinval * v71[2]) + (float)(v10.__cosval * v70[2]);
    v66 = v60 * v60;
    v67 = v66 * v66;
    v68 = (float)(v66 * v66) * (float)((float)((float)(v45 * v63) + (float)(v62 * v44)) + (float)(v64 * v46));
    v65 = (float)((float)(0.6 - (float)(v44 * v44)) - (float)(v45 * v45)) - (float)(v46 * v46);
  }
  v92 = v62;
  v72 = (float)((float)(0.6 - (float)(v57 * v57)) - (float)(v58 * v58)) - (float)(v59 * v59);
  v73 = 0.0;
  v74 = 0.0;
  v75 = 0.0;
  v76 = 0.0;
  v77 = 0.0;
  v78 = 0.0;
  if (v72 >= 0.0)
  {
    v79 = 3
        * (byte_1B2245120[(v30 + 1)
                        + (unint64_t)byte_1B2245120[v31
                                                         + 1
                                                         + (unint64_t)byte_1B2245120[v32 + 1]]] & 0xF);
    v80 = (float *)((char *)&unk_1B2244FA0 + 4 * v79);
    v81 = (float *)((char *)&unk_1B2245060 + 4 * v79);
    v61 = (float)(v10.__sinval * *v81) + (float)(v10.__cosval * *v80);
    v73 = (float)(v10.__sinval * v81[1]) + (float)(v10.__cosval * v80[1]);
    v74 = (float)(v10.__sinval * v81[2]) + (float)(v10.__cosval * v80[2]);
    v76 = v72 * v72;
    v77 = v76 * v76;
    v78 = (float)(v76 * v76) * (float)((float)((float)(v58 * v73) + (float)(v61 * v57)) + (float)(v74 * v59));
    v75 = (float)((float)(0.6 - (float)(v57 * v57)) - (float)(v58 * v58)) - (float)(v59 * v59);
  }
  if (a1)
  {
    v82 = (float)((float)((float)(v19 * v96) + (float)(v95 * v18)) + (float)(v97 * v20)) * (float)(v94 * v39);
    *(float *)&v9 = (float)((float)((float)(v99 * v48) + (float)(v34 * v100)) + (float)(v93 * v98)) * (float)(v50 * v51);
    v83 = (float)(v18 * v82) + (float)(*(float *)&v9 * v100);
    v84 = (float)(v19 * v82) + (float)(*(float *)&v9 * v99);
    v85 = (float)(v20 * v82) + (float)(*(float *)&v9 * v98);
    *(float *)&v9 = (float)((float)((float)(v45 * v63) + (float)(v92 * v44)) + (float)(v64 * v46)) * (float)(v65 * v66);
    v86 = v83 + (float)(*(float *)&v9 * v44);
    v87 = v84 + (float)(*(float *)&v9 * v45);
    v88 = v85 + (float)(*(float *)&v9 * v46);
    *(float *)&v9 = (float)((float)((float)(v58 * v73) + (float)(v61 * v57)) + (float)(v74 * v59)) * (float)(v75 * v76);
    v89 = v87 + (float)(*(float *)&v9 * v58);
    v90 = (float)(v88 + (float)(*(float *)&v9 * v59)) * 8.0;
    *(float *)&v9 = (float)((float)((float)((float)((float)(v34 * v52) + (float)(v40 * v95)) + (float)(v67 * v92))
                                  + (float)(v77 * v61))
                          - (float)((float)(v86 + (float)(*(float *)&v9 * v57)) * 8.0))
                  * 28.0;
    *((float *)&v9 + 1) = (float)((float)((float)((float)((float)(v48 * v52) + (float)(v40 * v96)) + (float)(v67 * v63))
                                        + (float)(v77 * v73))
                                - (float)(v89 * 8.0))
                        * 28.0;
    *((float *)&v9 + 2) = (float)((float)((float)((float)((float)(v93 * v52) + (float)(v40 * v97)) + (float)(v67 * v64))
                                        + (float)(v77 * v74))
                                - v90)
                        * 28.0;
    *a1 = v9;
  }
  return (float)((float)((float)(v102 + v101) + v68) + v78) * 28.0;
}

double noised(float32x4_t a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v12;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float v91;
  int8x16_t v92;
  float v95;
  float v98;
  float32_t v99;
  float v100;
  float v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  double result;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;

  v1 = a1;
  v1.i32[3] = 0;
  v2 = vrndmq_f32(v1);
  v3 = vsubq_f32(a1, v2);
  v4 = v2;
  v123 = v2;
  v3.i32[3] = 0;
  v5 = vminnmq_f32(v3, (float32x4_t)xmmword_1B2244EB0);
  __asm
  {
    FMOV            V1.4S, #6.0
    FMOV            V2.4S, #-15.0
  }
  v12 = vmlaq_f32(_Q2, _Q1, v5);
  __asm { FMOV            V1.4S, #10.0 }
  v118 = v5;
  v119 = vmulq_f32(vmulq_f32(v5, vmulq_f32(v5, v5)), vmlaq_f32(_Q1, v12, v5));
  __asm { FMOV            V0.4S, #30.0 }
  _Q1.i64[0] = 0xC0000000C0000000;
  _Q1.i64[1] = 0xC0000000C0000000;
  __asm { FMOV            V2.4S, #1.0 }
  v117 = _Q2;
  v120 = vmulq_f32(vmulq_f32(v5, vmulq_f32(v5, _Q0)), vmlaq_f32(_Q2, vaddq_f32(v5, _Q1), v5));
  v16 = vaddq_f32(v4, (float32x4_t)0);
  v17 = (int32x4_t)vmulq_f32(v16, (float32x4_t)xmmword_1B2244E80);
  v17.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32(v17, 2), vaddq_f32((float32x4_t)v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
  v18 = vmulq_f32(v16, (float32x4_t)xmmword_1B2244E90);
  v19 = vmulq_f32(v16, (float32x4_t)xmmword_1B2244EA0);
  v17.i32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).u32[0];
  v17.i64[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).u32[0];
  v122 = (float32x4_t)vdupq_n_s32(0x472AEE8Cu);
  v20 = vmulq_f32((float32x4_t)_simd_sin_f4((simd_float4)v17), v122);
  v21 = v20;
  v21.i32[3] = 0;
  v22 = vsubq_f32(v20, vrndmq_f32(v21));
  v22.i32[3] = 0;
  v23.i64[0] = 0x4000000040000000;
  v23.i64[1] = 0x4000000040000000;
  __asm { FMOV            V1.4S, #-1.0 }
  v121 = _Q1;
  v116 = vmlaq_f32(_Q1, v23, vminnmq_f32(v22, (float32x4_t)xmmword_1B2244EB0));
  v25 = vaddq_f32(v123, (float32x4_t)xmmword_1B2244DB0);
  v26 = (int32x4_t)vmulq_f32(v25, (float32x4_t)xmmword_1B2244E80);
  v27 = vmulq_f32(v25, (float32x4_t)xmmword_1B2244E90);
  v26.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32(v26, 2), vaddq_f32((float32x4_t)v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
  v28 = vmulq_f32(v25, (float32x4_t)xmmword_1B2244EA0);
  v26.i32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).u32[0];
  v26.i64[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).u32[0];
  v29 = vmulq_f32((float32x4_t)_simd_sin_f4((simd_float4)v26), v122);
  v30 = v29;
  v30.i32[3] = 0;
  v31 = vsubq_f32(v29, vrndmq_f32(v30));
  v31.i32[3] = 0;
  v32.i64[0] = 0x4000000040000000;
  v32.i64[1] = 0x4000000040000000;
  v115 = vmlaq_f32(v121, v32, vminnmq_f32(v31, (float32x4_t)xmmword_1B2244EB0));
  v33 = vaddq_f32(v123, (float32x4_t)xmmword_1B2244DD0);
  v34 = (int32x4_t)vmulq_f32(v33, (float32x4_t)xmmword_1B2244E80);
  v35 = vmulq_f32(v33, (float32x4_t)xmmword_1B2244E90);
  v34.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32(v34, 2), vaddq_f32((float32x4_t)v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
  v36 = vmulq_f32(v33, (float32x4_t)xmmword_1B2244EA0);
  v34.i32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).u32[0];
  v34.i64[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).u32[0];
  v37 = vmulq_f32((float32x4_t)_simd_sin_f4((simd_float4)v34), v122);
  v38 = v37;
  v38.i32[3] = 0;
  v39 = vsubq_f32(v37, vrndmq_f32(v38));
  v39.i32[3] = 0;
  v40.i64[0] = 0x4000000040000000;
  v40.i64[1] = 0x4000000040000000;
  v114 = vmlaq_f32(v121, v40, vminnmq_f32(v39, (float32x4_t)xmmword_1B2244EB0));
  v41 = vaddq_f32(v123, (float32x4_t)xmmword_1B2244EC0);
  v42 = (int32x4_t)vmulq_f32(v41, (float32x4_t)xmmword_1B2244E80);
  v43 = vmulq_f32(v41, (float32x4_t)xmmword_1B2244E90);
  v42.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32(v42, 2), vaddq_f32((float32x4_t)v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.i8, 1))).u32[0];
  v44 = vmulq_f32(v41, (float32x4_t)xmmword_1B2244EA0);
  v42.i32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).u32[0];
  v42.i64[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).u32[0];
  v45 = vmulq_f32((float32x4_t)_simd_sin_f4((simd_float4)v42), v122);
  v46 = v45;
  v46.i32[3] = 0;
  v47 = vsubq_f32(v45, vrndmq_f32(v46));
  v47.i32[3] = 0;
  v48.i64[0] = 0x4000000040000000;
  v48.i64[1] = 0x4000000040000000;
  v113 = vmlaq_f32(v121, v48, vminnmq_f32(v47, (float32x4_t)xmmword_1B2244EB0));
  v49 = vaddq_f32(v123, (float32x4_t)xmmword_1B2244D90);
  v50 = (int32x4_t)vmulq_f32(v49, (float32x4_t)xmmword_1B2244E80);
  v51 = vmulq_f32(v49, (float32x4_t)xmmword_1B2244E90);
  v50.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32(v50, 2), vaddq_f32((float32x4_t)v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.i8, 1))).u32[0];
  v52 = vmulq_f32(v49, (float32x4_t)xmmword_1B2244EA0);
  v50.i32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).u32[0];
  v50.i64[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).u32[0];
  v53 = vmulq_f32((float32x4_t)_simd_sin_f4((simd_float4)v50), v122);
  v54 = v53;
  v54.i32[3] = 0;
  v55 = vsubq_f32(v53, vrndmq_f32(v54));
  v55.i32[3] = 0;
  v54.i64[0] = 0x4000000040000000;
  v54.i64[1] = 0x4000000040000000;
  v112 = vmlaq_f32(v121, v54, vminnmq_f32(v55, (float32x4_t)xmmword_1B2244EB0));
  v56 = vaddq_f32(v123, (float32x4_t)xmmword_1B2244ED0);
  v57 = (int32x4_t)vmulq_f32(v56, (float32x4_t)xmmword_1B2244E80);
  v58 = vmulq_f32(v56, (float32x4_t)xmmword_1B2244E90);
  v57.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32(v57, 2), vaddq_f32((float32x4_t)v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.i8, 1))).u32[0];
  v59 = vmulq_f32(v56, (float32x4_t)xmmword_1B2244EA0);
  v57.i32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).u32[0];
  v57.i64[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).u32[0];
  v60 = vmulq_f32((float32x4_t)_simd_sin_f4((simd_float4)v57), v122);
  v61 = v60;
  v61.i32[3] = 0;
  v62 = vsubq_f32(v60, vrndmq_f32(v61));
  v62.i32[3] = 0;
  v61.i64[0] = 0x4000000040000000;
  v61.i64[1] = 0x4000000040000000;
  v111 = vmlaq_f32(v121, v61, vminnmq_f32(v62, (float32x4_t)xmmword_1B2244EB0));
  v63 = vaddq_f32(v123, (float32x4_t)xmmword_1B2244EE0);
  v64 = (int32x4_t)vmulq_f32(v63, (float32x4_t)xmmword_1B2244E80);
  v65 = vmulq_f32(v63, (float32x4_t)xmmword_1B2244E90);
  v64.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32(v64, 2), vaddq_f32((float32x4_t)v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1))).u32[0];
  v66 = vmulq_f32(v63, (float32x4_t)xmmword_1B2244EA0);
  v64.i32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).u32[0];
  v64.i64[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).u32[0];
  v67 = vmulq_f32((float32x4_t)_simd_sin_f4((simd_float4)v64), v122);
  v68 = v67;
  v68.i32[3] = 0;
  v69 = vsubq_f32(v67, vrndmq_f32(v68));
  v69.i32[3] = 0;
  v68.i64[0] = 0x4000000040000000;
  v68.i64[1] = 0x4000000040000000;
  v110 = vmlaq_f32(v121, v68, vminnmq_f32(v69, (float32x4_t)xmmword_1B2244EB0));
  v70 = vaddq_f32(v123, v117);
  v71 = (int32x4_t)vmulq_f32(v70, (float32x4_t)xmmword_1B2244E80);
  v72 = vmulq_f32(v70, (float32x4_t)xmmword_1B2244E90);
  v71.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32(v71, 2), vaddq_f32((float32x4_t)v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.i8, 1))).u32[0];
  v73 = vmulq_f32(v70, (float32x4_t)xmmword_1B2244EA0);
  v71.i32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).u32[0];
  v71.i64[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1))).u32[0];
  v74 = vmulq_f32((float32x4_t)_simd_sin_f4((simd_float4)v71), v122);
  v75 = v74;
  v75.i32[3] = 0;
  v76 = vsubq_f32(v74, vrndmq_f32(v75));
  v76.i32[3] = 0;
  v77 = vminnmq_f32(v76, (float32x4_t)xmmword_1B2244EB0);
  v78.i64[0] = 0x4000000040000000;
  v78.i64[1] = 0x4000000040000000;
  v79 = vmlaq_f32(v121, v78, v77);
  v80 = (int8x16_t)vmulq_f32(v118, v116);
  v77.f32[0] = vaddv_f32(*(float32x2_t *)v80.i8);
  v81 = vmulq_f32(vaddq_f32(v118, (float32x4_t)xmmword_1B2244EF0), v115);
  v82 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0];
  v83 = vmulq_f32(vaddq_f32(v118, (float32x4_t)xmmword_1B2244F00), v114);
  v84 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1)));
  v85 = vmulq_f32(vaddq_f32(v118, (float32x4_t)xmmword_1B2244F10), v113);
  v85.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1))).f32[0];
  v86 = vmulq_f32(vaddq_f32(v118, (float32x4_t)xmmword_1B2244F20), v112);
  v87 = vmulq_f32(vaddq_f32(v118, (float32x4_t)xmmword_1B2244F30), v111);
  v87.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).f32[0];
  v88 = vmulq_f32(vaddq_f32(v118, (float32x4_t)xmmword_1B2244F40), v110);
  v88.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0];
  v89 = vmulq_f32(vaddq_f32(v118, v121), v79);
  _Q26 = v119;
  v91 = vmuls_lane_f32(_Q26.f32[0], *(float32x2_t *)_Q26.f32, 1);
  v92 = vextq_s8(v80, v80, 8uLL);
  v92.i32[1] = v86.i32[0];
  v86.i32[0] = v77.i32[0];
  *(float32x2_t *)v92.i8 = vadd_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v86.f32);
  v77.f32[0] = v82 - *(float *)v92.i32;
  _S21 = *(float *)v84.i32 - *(float *)v92.i32;
  _S22 = (float)(*(float *)&v92.i32[1] + v86.f32[2]) - *(float *)v92.i32;
  v86.f32[0] = *(float *)v92.i32 - v82;
  v95 = *(float *)v92.i32 - *(float *)v84.i32;
  __asm
  {
    FMLA            S23, S21, V26.S[1]
    FMLA            S23, S22, V26.S[2]
  }
  *(float *)v92.i32 = (float)(v86.f32[0] - *(float *)v84.i32) + v85.f32[0];
  v98 = vmuls_lane_f32(v119.f32[1], v119, 2);
  v99 = (float)(v95 - (float)(*(float *)&v92.i32[1] + v86.f32[2])) + v88.f32[0];
  v100 = vmuls_lane_f32(_Q26.f32[0], _Q26, 2);
  v86.f32[0] = (float)(v86.f32[0] - (float)(*(float *)&v92.i32[1] + v86.f32[2])) + v87.f32[0];
  v101 = vmuls_lane_f32(v91, v119, 2);
  v87.f32[0] = (float)((float)((float)((float)((float)(v77.f32[0] + *(float *)v84.i32) - v85.f32[0])
                                     + (float)(*(float *)&v92.i32[1] + v86.f32[2]))
                             - v87.f32[0])
                     - v88.f32[0])
             + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1))).f32[0];
  *(float *)v84.i32 = (float)((float)((float)(_S23 + (float)(v91 * *(float *)v92.i32)) + (float)(v98 * v99))
                            + (float)(v100 * v86.f32[0]))
                    + (float)(v101 * v87.f32[0]);
  v102 = vsubq_f32(v115, v116);
  v103 = vsubq_f32(v116, v115);
  v77.f32[1] = _S21;
  v104 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmlaq_n_f32(v116, v102, v119.f32[0]), vsubq_f32(v114, v116), *(float32x2_t *)v119.f32, 1), vsubq_f32(v112, v116), v119, 2), vaddq_f32(vsubq_f32(v103, v114), v113), v91), vaddq_f32(vsubq_f32(vsubq_f32(v116, v114), v112), v110), v98), vaddq_f32(vsubq_f32(v103, v112), v111), v100), vaddq_f32(vsubq_f32(vsubq_f32(vaddq_f32(vsubq_f32(vaddq_f32(v102, v114), v113), v112), v111), v110), v79),
           v101);
  v77.f32[2] = _S22;
  v105 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 0xCuLL), (int8x16_t)v119, 8uLL);
  v106 = (float32x4_t)v92;
  v106.f32[1] = v99;
  v106.i32[2] = v86.i32[0];
  v107 = vmlaq_f32(v77, v106, v105);
  v108 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q26, (int32x4_t)_Q26), (int8x16_t)v119, 0xCuLL);
  v86.i32[1] = v92.i32[0];
  v86.f32[2] = v99;
  *(_QWORD *)&result = vextq_s8(vextq_s8(v84, v84, 4uLL), (int8x16_t)vmlaq_f32(v104, vmlaq_n_f32(vmlaq_f32(v107, v86, v108), vmulq_f32(v105, v108), v87.f32[0]), v120), 0xCuLL).u64[0];
  return result;
}

uint64_t sub_1B1799610(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  float32x4_t *v5;
  float32x4_t *v6;
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unint64_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t *v22;
  unint64_t v23;
  int64x2_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;

  if (a4)
  {
    v4 = 0;
    v5 = *(float32x4_t **)result;
    v6 = *(float32x4_t **)(result + 8);
    v7 = *(float32x4_t **)(result + 16);
    v8 = a4;
    v9 = *(_QWORD *)result + 16;
    v10.i64[0] = 0x400000004;
    v10.i64[1] = 0x400000004;
    do
    {
      v11 = *(int32x4_t *)(a2 + 16 * v4);
      v12 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 0);
      v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 1);
      v14 = (float32x4_t)vdupq_laneq_s32(v11, 2);
      v15 = vsubq_f32(v12, *v5);
      v16 = vsubq_f32(v13, *v6);
      v17 = vsubq_f32(v14, *v7);
      v18 = vmlaq_f32(vmlaq_f32(vmulq_f32(v16, v16), v15, v15), v17, v17);
      v19 = *(unsigned int *)(result + 24);
      if (v19 < 5)
      {
        v24 = (int64x2_t)xmmword_1B2240BB0;
      }
      else
      {
        v20 = v7 + 1;
        v21 = v6 + 1;
        v22 = (float32x4_t *)v9;
        v23 = 4;
        v24 = (int64x2_t)xmmword_1B2240BB0;
        v25 = (int32x4_t)xmmword_1B2240BA0;
        do
        {
          v26 = *v22++;
          v27 = v26;
          v28 = *v21++;
          v29 = v28;
          v30 = *v20++;
          v31 = vsubq_f32(v12, v27);
          v32 = vsubq_f32(v13, v29);
          v33 = vsubq_f32(v14, v30);
          v34 = vmlaq_f32(vmlaq_f32(vmulq_f32(v32, v32), v31, v31), v33, v33);
          v35 = (int8x16_t)vcgtq_f32(v18, v34);
          v18 = vminnmq_f32(v34, v18);
          v24 = (int64x2_t)vbslq_s8(v35, (int8x16_t)v25, (int8x16_t)v24);
          v23 += 4;
          v25 = vaddq_s32(v25, v10);
        }
        while (v23 < v19);
      }
      v36 = (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL);
      v37 = vminnmq_f32(v18, v36);
      v38 = vbslq_s8((int8x16_t)vcgtq_f32(v18, v36), (int8x16_t)vdupq_laneq_s64(v24, 1), (int8x16_t)v24);
      *(_DWORD *)(a3 + 4 * v4++) = *(_DWORD *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                              * (*(_QWORD *)&vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1), v37))) & 1)));
    }
    while (v4 != v8);
  }
  return result;
}

uint64_t sub_1B1799738(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unint64_t v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  unint64_t v26;
  int64x2_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  int8x16_t v43;

  if (!a4)
    return 0;
  v5 = 0;
  v6 = *(float32x4_t **)a1;
  v7 = *(float32x4_t **)(a1 + 8);
  v8 = *(float32x4_t **)(a1 + 16);
  v9 = a5;
  v10 = a4;
  v11 = *(_QWORD *)a1 + 16;
  LOBYTE(v12) = 1;
  v13.i64[0] = 0x400000004;
  v13.i64[1] = 0x400000004;
  do
  {
    v14 = *(int32x4_t *)(a2 + 16 * v5);
    v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 0);
    v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1);
    v17 = (float32x4_t)vdupq_laneq_s32(v14, 2);
    v18 = vsubq_f32(v15, *v6);
    v19 = vsubq_f32(v16, *v7);
    v20 = vsubq_f32(v17, *v8);
    v21 = vmlaq_f32(vmlaq_f32(vmulq_f32(v19, v19), v18, v18), v20, v20);
    v22 = *(unsigned int *)(a1 + 24);
    if (v22 < 5)
    {
      v27 = (int64x2_t)xmmword_1B2240BB0;
    }
    else
    {
      v23 = v8 + 1;
      v24 = v7 + 1;
      v25 = (float32x4_t *)v11;
      v26 = 4;
      v27 = (int64x2_t)xmmword_1B2240BB0;
      v28 = (int32x4_t)xmmword_1B2240BA0;
      do
      {
        v29 = *v25++;
        v30 = v29;
        v31 = *v24++;
        v32 = v31;
        v33 = *v23++;
        v34 = vsubq_f32(v15, v30);
        v35 = vsubq_f32(v16, v32);
        v36 = vsubq_f32(v17, v33);
        v37 = vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v35), v34, v34), v36, v36);
        v38 = (int8x16_t)vcgtq_f32(v21, v37);
        v21 = vminnmq_f32(v37, v21);
        v27 = (int64x2_t)vbslq_s8(v38, (int8x16_t)v28, (int8x16_t)v27);
        v26 += 4;
        v28 = vaddq_s32(v28, v13);
      }
      while (v26 < v22);
    }
    v39 = (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL);
    v40 = vminnmq_f32(v21, v39);
    v43 = vbslq_s8((int8x16_t)vcgtq_f32(v21, v39), (int8x16_t)vdupq_laneq_s64(v27, 1), (int8x16_t)v27);
    v41 = *(int *)((unint64_t)&v43 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                  * (*(_QWORD *)&vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1), v40))) & 1)));
    *(_DWORD *)(a3 + 4 * v5) = v41;
    v12 = v12 & (v41 == v9);
    ++v5;
  }
  while (v5 != v10);
  return v12 ^ 1u;
}

uint64_t sub_1B1799880(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  kcluster_update = (uint64_t)sub_1B1799610;
  return sub_1B1799610(result, a2, a3, a4);
}

uint64_t sub_1B1799894(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  kcluster_update_compare = (uint64_t (*)())sub_1B1799738;
  return sub_1B1799738(a1, a2, a3, a4, a5);
}

float noise(float32x4_t a1)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  simd_float4 v4;
  simd_float4 v5;
  float32x4_t v6;
  float32x4_t v7;
  simd_float4 v8;
  simd_float4 v14;
  simd_float4 v15;
  int8x16_t v17;
  float result;
  simd_float4 v20;
  float32x4_t v21;
  simd_float4 v22;
  simd_float4 v23;

  v1 = a1;
  v1.i32[3] = 0;
  v2 = vrndmq_f32(v1);
  v3 = vmulq_f32(v2, (float32x4_t)xmmword_1B2244F50);
  v22 = (simd_float4)vaddq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))), 0), (float32x4_t)xmmword_1B2244F60);
  v4 = (simd_float4)vmulq_f32(vsubq_f32(a1, v2), (float32x4_t)vdupq_n_s32(0x40490FDBu));
  v4.i32[3] = 0;
  v5 = _simd_cos_f4(v4);
  v6.i64[0] = 0xBF000000BF000000;
  v6.i64[1] = 0xBF000000BF000000;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v21 = vmlaq_f32(v7, v6, (float32x4_t)v5);
  v8 = _simd_cos_f4(v22);
  v20 = _simd_sin_f4((simd_float4)vmulq_f32((float32x4_t)v22, (float32x4_t)v8));
  __asm { FMOV            V0.4S, #1.0 }
  v23 = (simd_float4)vaddq_f32((float32x4_t)v22, _Q0);
  v14 = _simd_cos_f4(v23);
  v15 = _simd_sin_f4((simd_float4)vmulq_f32((float32x4_t)v23, (float32x4_t)v14));
  _V2.S[2] = v21.i32[2];
  v17 = (int8x16_t)vmlaq_n_f32((float32x4_t)v20, vsubq_f32((float32x4_t)v15, (float32x4_t)v20), v21.f32[0]);
  _D1 = (int32x2_t)vextq_s8(v17, v17, 8uLL).u64[0];
  *(int32x2_t *)v15.f32 = vzip1_s32(*(int32x2_t *)v17.i8, _D1);
  *(float32x2_t *)v15.f32 = vmla_lane_f32(*(float32x2_t *)v15.f32, vsub_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v17.i8, _D1), *(float32x2_t *)v15.f32), *(float32x2_t *)v21.f32, 1);
  _D1.i32[0] = vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1), *(float32x2_t *)v15.f32).u32[0];
  __asm { FMLA            S0, S1, V2.S[2] }
  return result;
}

uint64_t box_contains(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  return vminvq_u32((uint32x4_t)vcgeq_f32(a2, vabdq_f32(a3, a1))) >> 31;
}

float32x4_t *voxel_draw_points(float32x4_t *result, uint64_t a2, int a3, float a4)
{
  int32x2_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;

  if (a3)
  {
    v5 = 0;
    v6 = result[1];
    v7 = result[2];
    v8 = result->i32[2];
    v9 = vmulq_n_f32(v7, 2.0 / (float)v8);
    v9.i32[3] = 1.0;
    v10.i32[0] = 1;
    v10.i32[1] = v8;
    v10.i64[1] = (v8 * v8);
    v11 = vsubq_f32(v7, v6);
    __asm { FMOV            V6.4S, #1.0 }
    v17 = vdivq_f32(_Q6, v9);
    *(float *)v4.i32 = (float)(v8 - 1);
    v18 = (float32x4_t)vdupq_lane_s32(v4, 0);
    v18.i32[3] = 0;
    v19 = result->i64[0];
    v20 = (float32x4_t)vdupq_n_s32(0x3F7FFFFFu);
    v21.i64[0] = 0xBF000000BF000000;
    v21.i64[1] = 0xBF000000BF000000;
    v22.i64[0] = 0x8000000080000000;
    v22.i64[1] = 0x8000000080000000;
    do
    {
      v23 = *(float32x4_t *)(a2 + 16 * v5);
      if ((vminvq_u32((uint32x4_t)vcgeq_f32(v7, vabdq_f32(v23, v6))) & 0x80000000) != 0)
      {
        v24 = 0;
        v25 = vmulq_f32(v17, vaddq_f32(v11, v23));
        v26 = vaddq_f32(vminnmq_f32(vsubq_f32(v25, vrndmq_f32(v25)), v20), v21);
        v27 = (float32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v26, v22), (int8x16_t)_Q6), vorrq_s8((int8x16_t)vcltzq_f32(v26), (int8x16_t)vcgtzq_f32(v26)));
        v28 = vabsq_f32(v26);
        do
        {
          v29 = (float32x4_t)xmmword_1B2245320[v24];
          v30 = (int8x16_t)vmulq_s32(v10, vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmlaq_f32(v25, v29, v27), (float32x4_t)0), v18)));
          *(int32x2_t *)v30.i8 = vadd_s32(*(int32x2_t *)v30.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
          v31 = vsubq_f32(v29, v28);
          v32 = vmulq_f32(v31, v31);
          v30.i32[0] = vadd_s32(*(int32x2_t *)v30.i8, vdup_lane_s32(*(int32x2_t *)v30.i8, 1)).u32[0];
          *(float *)(v19 + 4 * v30.i32[0]) = *(float *)(v19 + 4 * v30.i32[0])
                                             + (float)((float)((float)(0.1 * v17.f32[0])
                                                             * fmaxf(1.0- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]), 0.0))* a4);
          ++v24;
        }
        while (v24 != 8);
      }
      ++v5;
    }
    while (v5 != a3);
  }
  return result;
}

float32x4_t *voxel_draw_colored_points(float32x4_t *result, uint64_t a2, uint64_t a3, int a4, float a5)
{
  int32x2_t v5;
  uint64_t v6;
  float32x4_t v7;
  int v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;

  if (a4)
  {
    v6 = 0;
    v7 = result[2];
    v8 = result->i32[2];
    v9 = vmulq_n_f32(v7, 2.0 / (float)v8);
    v9.i32[3] = 1.0;
    v10 = result[1];
    v11.i32[0] = 1;
    v11.i32[1] = v8;
    v11.i64[1] = (v8 * v8);
    v12 = vsubq_f32(v7, v10);
    __asm { FMOV            V6.4S, #1.0 }
    v18 = vdivq_f32(_Q6, v9);
    *(float *)v5.i32 = (float)(v8 - 1);
    v19 = (float32x4_t)vdupq_lane_s32(v5, 0);
    v19.i32[3] = 0;
    v20 = result->i64[0];
    v21 = vmulq_n_f32((float32x4_t)xmmword_1B2244F70, 0.1 * v18.f32[0]);
    v22 = vmulq_n_f32((float32x4_t)xmmword_1B2244F80, 0.1 * v18.f32[0]);
    v23 = (float32x4_t)vdupq_n_s32(0x3F7FFFFFu);
    v24.i64[0] = 0xBF000000BF000000;
    v24.i64[1] = 0xBF000000BF000000;
    v25.i64[0] = 0x8000000080000000;
    v25.i64[1] = 0x8000000080000000;
    do
    {
      v26 = (float32x4_t)xmmword_1B2244E20;
      if (a3)
        v26 = vmaxnmq_f32(vmlaq_f32(v22, v21, *(float32x4_t *)(a3 + 16 * v6)), (float32x4_t)0);
      v27 = *(float32x4_t *)(a2 + 16 * v6);
      if ((vminvq_u32((uint32x4_t)vcgeq_f32(v7, vabdq_f32(v27, v10))) & 0x80000000) != 0)
      {
        v28 = 0;
        v26.i32[3] = vmuls_lane_f32(a5, v26, 3);
        v29 = vmulq_f32(v18, vaddq_f32(v12, v27));
        v30 = vaddq_f32(vminnmq_f32(vsubq_f32(v29, vrndmq_f32(v29)), v23), v24);
        v31 = (float32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v30, v25), (int8x16_t)_Q6), vorrq_s8((int8x16_t)vcltzq_f32(v30), (int8x16_t)vcgtzq_f32(v30)));
        v32 = vabsq_f32(v30);
        v33 = (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 0xCuLL);
        do
        {
          v34 = (float32x4_t)xmmword_1B2245320[v28];
          v35 = (int8x16_t)vmulq_s32(v11, vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmlaq_f32(v29, v34, v31), (float32x4_t)0), v19)));
          *(int32x2_t *)v35.i8 = vadd_s32(*(int32x2_t *)v35.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
          v36 = vsubq_f32(v34, v32);
          v35.i32[0] = vadd_s32(*(int32x2_t *)v35.i8, vdup_lane_s32(*(int32x2_t *)v35.i8, 1)).u32[0];
          v37 = vmulq_f32(v36, v36);
          *(float32x4_t *)(v20 + 16 * v35.i32[0]) = vmlaq_n_f32(*(float32x4_t *)(v20 + 16 * v35.i32[0]), v33, fmaxf(1.0- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0]), 0.0));
          ++v28;
        }
        while (v28 != 8);
      }
      ++v6;
    }
    while (v6 != a4);
  }
  return result;
}

void voxel_draw_spheres(float32x4_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, float a5)
{
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  float32x4_t v10;
  float v11;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  int v35;
  long double v36;
  int v37;
  long double v38;
  int v39;
  int v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  __int32 v45;
  __int32 v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int32x2_t v50;
  int v51;
  int v52;
  _BOOL4 v54;
  int v55;
  int v56;
  uint64_t i;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;

  if (a4)
  {
    v6 = 0;
    v7 = a1[1];
    v8 = a1[2];
    v9 = a1->i32[2];
    v10 = vmulq_n_f32(v8, 2.0 / (float)v9);
    v11 = 1.0;
    v10.i32[3] = 1.0;
    v12.i32[0] = 1;
    v12.i32[1] = v9;
    v12.i64[1] = (v9 * v9);
    v13 = vsubq_f32(v8, v7);
    __asm { FMOV            V1.4S, #1.0 }
    v7.f32[0] = (float)(v9 - 1);
    v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0);
    v64 = (int8x16_t)_Q1;
    v65 = v13;
    v19.i32[3] = 0;
    v20 = a1->i64[0];
    v21 = a4;
    v62 = (float32x4_t)vdupq_n_s32(0x3F7FFFFFu);
    v63 = vdivq_f32(_Q1, v10);
    v22 = 0uLL;
    v71 = v19;
    v72 = v12;
    do
    {
      v23 = vmulq_f32(v63, vaddq_f32(v65, *(float32x4_t *)(a2 + 16 * v6)));
      v24 = (int)(float)(v63.f32[0] * *(float *)(a3 + 4 * v6));
      v25.i64[0] = 0xBF000000BF000000;
      v25.i64[1] = 0xBF000000BF000000;
      v26 = vaddq_f32(vminnmq_f32(vsubq_f32(v23, vrndmq_f32(v23)), v62), v25);
      v25.i64[0] = 0x8000000080000000;
      v25.i64[1] = 0x8000000080000000;
      v27 = (float32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v26, (int8x16_t)v25), v64), vorrq_s8((int8x16_t)vcltzq_f32(v26), (int8x16_t)vcgtzq_f32(v26)));
      v28 = vabsq_f32(v26);
      if (v24 <= 0)
      {
        for (i = 0; i != 8; ++i)
        {
          v58 = (float32x4_t)xmmword_1B2245320[i];
          v59 = (int8x16_t)vmulq_s32(v12, vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmlaq_f32(v23, v58, v27), v22), v19)));
          *(int32x2_t *)v59.i8 = vadd_s32(*(int32x2_t *)v59.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
          v60 = vsubq_f32(v58, v28);
          v59.i32[0] = vadd_s32(*(int32x2_t *)v59.i8, vdup_lane_s32(*(int32x2_t *)v59.i8, 1)).u32[0];
          v61 = vmulq_f32(v60, v60);
          *(float *)(v20 + 4 * v59.i32[0]) = *(float *)(v20 + 4 * v59.i32[0])
                                             + (float)(fmaxf(v11- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0]), 0.0)* a5);
        }
      }
      else
      {
        v29 = 0;
        v69 = v27;
        v70 = v23;
        v68 = v28;
        do
        {
          v30 = (float32x4_t)xmmword_1B2245320[v29];
          v31 = vmlaq_f32(v23, v30, v27);
          v32 = vsubq_f32(v30, v28);
          v33 = vmulq_f32(v32, v32);
          v34 = fmaxf(v11- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]), 0.0)* a5;
          v35 = -v24;
          v73 = v31;
          do
          {
            v36 = cos((float)((float)v35 / (float)v24) * 3.14159265 * 0.5);
            v22 = 0uLL;
            v19 = v71;
            v12 = v72;
            v37 = 0;
            v38 = v36 * (double)v24;
            v39 = -(int)v38;
            v40 = 2 - 2 * (int)v38;
            do
            {
              v41.i32[3] = 0;
              v41.f32[0] = (float)-v39;
              v42 = (float32x4_t)v41.u32[0];
              v42.f32[1] = (float)v37;
              v42.f32[2] = (float)v35;
              v43 = (int8x16_t)vmulq_s32(v72, vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v73, v42), (float32x4_t)0), v71)));
              v41.f32[1] = (float)-v37;
              v41.f32[2] = (float)v35;
              v44 = (float32x4_t)vmulq_s32(v72, vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v73, v41), (float32x4_t)0), v71)));
              *(int32x2_t *)v43.i8 = vadd_s32(*(int32x2_t *)v43.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
              *(int32x2_t *)v44.f32 = vadd_s32(*(int32x2_t *)v44.f32, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL));
              *(int32x2_t *)v43.i8 = vadd_s32(vzip1_s32(*(int32x2_t *)v43.i8, *(int32x2_t *)v44.f32), vzip2_s32(*(int32x2_t *)v43.i8, *(int32x2_t *)v44.f32));
              v44.i32[3] = 0;
              v44.f32[0] = (float)v39;
              v45 = v43.i32[1];
              v46 = v43.i32[0];
              v47 = (float32x4_t)COERCE_UNSIGNED_INT((float)v39);
              v47.f32[1] = (float)-v37;
              v47.f32[2] = (float)v35;
              v48 = (int8x16_t)vmulq_s32(v72, vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v73, v47), (float32x4_t)0), v71)));
              *(int32x2_t *)v48.i8 = vadd_s32(*(int32x2_t *)v48.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
              *(float *)(v20 + 4 * v46) = v34 + *(float *)(v20 + 4 * v46);
              v44.f32[1] = (float)v37;
              v44.f32[2] = (float)v35;
              v49 = (int8x16_t)vmulq_s32(v72, vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(v73, v44), (float32x4_t)0), v71)));
              *(int32x2_t *)v49.i8 = vadd_s32(*(int32x2_t *)v49.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
              *(float *)(v20 + 4 * v45) = v34 + *(float *)(v20 + 4 * v45);
              v50 = vadd_s32(vzip1_s32(*(int32x2_t *)v48.i8, *(int32x2_t *)v49.i8), vzip2_s32(*(int32x2_t *)v48.i8, *(int32x2_t *)v49.i8));
              *(float *)(v20 + 4 * v50.i32[0]) = v34 + *(float *)(v20 + 4 * v50.i32[0]);
              v51 = (2 * (v37 + 1)) | 1;
              if (v40 > v37)
                v51 = 0;
              else
                ++v37;
              v52 = v51 + v40;
              v54 = v40 > v39 || v52 > v37;
              *(float *)(v20 + 4 * v50.i32[1]) = v34 + *(float *)(v20 + 4 * v50.i32[1]);
              v55 = (2 * (v39 + 1)) | 1;
              if (v54)
              {
                ++v39;
                v56 = v55;
              }
              else
              {
                v56 = 0;
              }
              v40 = v56 + v52;
            }
            while (v39 < 1);
          }
          while (v35++ != v24);
          ++v29;
          v11 = 1.0;
          v27 = v69;
          v23 = v70;
          v28 = v68;
        }
        while (v29 != 8);
      }
      ++v6;
    }
    while (v6 != v21);
  }
}

float32x4_t *voxel_draw_colored_spheres(float32x4_t *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, float a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v11;
  float32x4_t v12;
  int v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;

  if (a5)
  {
    v11 = 0;
    v12 = result[2];
    v13 = result->i32[2];
    v14 = vmulq_n_f32(v12, 2.0 / (float)v13);
    v14.i32[3] = 1.0;
    v15.i32[0] = 1;
    v15.i32[1] = v13;
    v15.i64[1] = (v13 * v13);
    v16 = vsubq_f32(v12, result[1]);
    __asm { FMOV            V4.4S, #1.0 }
    *(float *)&a11 = (float)(v13 - 1);
    v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
    v22.i32[3] = 0;
    v23 = vdivq_f32(_Q4, v14);
    v24 = result->i64[0];
    v25 = (float32x4_t)vdupq_n_s32(0x3F7FFFFFu);
    v26.i64[0] = 0xBF000000BF000000;
    v26.i64[1] = 0xBF000000BF000000;
    v27.i64[0] = 0x8000000080000000;
    v27.i64[1] = 0x8000000080000000;
    do
    {
      v28 = (float32x4_t)xmmword_1B2244E20;
      if (a4)
        v28 = vmaxnmq_f32(vmlaq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244F80, v23.f32[0] * *(float *)(a3 + 4 * v11)), vmulq_n_f32((float32x4_t)xmmword_1B2244F70, v23.f32[0] * *(float *)(a3 + 4 * v11)), *(float32x4_t *)(a4 + 16 * v11)), (float32x4_t)0);
      v29 = 0;
      v30 = vmulq_f32(v23, vaddq_f32(v16, *(float32x4_t *)(a2 + 16 * v11)));
      v28.i32[3] = vmuls_lane_f32(a6, v28, 3);
      v31 = vaddq_f32(vminnmq_f32(vsubq_f32(v30, vrndmq_f32(v30)), v25), v26);
      v32 = (float32x4_t)vandq_s8(vorrq_s8(vandq_s8((int8x16_t)v31, v27), (int8x16_t)_Q4), vorrq_s8((int8x16_t)vcltzq_f32(v31), (int8x16_t)vcgtzq_f32(v31)));
      v33 = vabsq_f32(v31);
      v34 = (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL);
      do
      {
        v35 = (float32x4_t)xmmword_1B2245320[v29];
        v36 = (int8x16_t)vmulq_s32(v15, vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmlaq_f32(v30, v35, v32), (float32x4_t)0), v22)));
        *(int32x2_t *)v36.i8 = vadd_s32(*(int32x2_t *)v36.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
        v37 = vsubq_f32(v35, v33);
        v38 = vmulq_f32(v37, v37);
        v36.i32[0] = vadd_s32(*(int32x2_t *)v36.i8, vdup_lane_s32(*(int32x2_t *)v36.i8, 1)).u32[0];
        *(float32x4_t *)(v24 + 16 * v36.i32[0]) = vaddq_f32(*(float32x4_t *)(v24 + 16 * v36.i32[0]), vmulq_n_f32(v34, fmaxf(1.0- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0]), 0.0)));
        ++v29;
      }
      while (v29 != 8);
      ++v11;
    }
    while (v11 != a5);
  }
  return result;
}

uint64_t voxel_opacity_color_clamp(uint64_t result)
{
  uint64_t v1;
  float32x4_t *v2;

  v1 = (*(_DWORD *)(result + 8) * *(_DWORD *)(result + 8) * *(_DWORD *)(result + 8));
  if ((_DWORD)v1)
  {
    v2 = *(float32x4_t **)result;
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      *v2 = vminnmq_f32(*v2, _Q0);
      ++v2;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t voxel_opacity_clamp(uint64_t result)
{
  uint64_t v1;
  float *v2;

  v1 = (*(_DWORD *)(result + 8) * *(_DWORD *)(result + 8) * *(_DWORD *)(result + 8));
  if ((_DWORD)v1)
  {
    v2 = *(float **)result;
    do
    {
      *v2 = fminf(*v2, 1.0);
      ++v2;
      --v1;
    }
    while (v1);
  }
  return result;
}

float32x4_t merge_aabb(float32x4_t *a1, float32x4_t *a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t result;

  v3 = vminq_f32(vsubq_f32(*a1, *a2), a3);
  v4 = vmaxq_f32(vaddq_f32(*a1, *a2), a3);
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  *a1 = vmulq_f32(vaddq_f32(v3, v4), v5);
  result = vmulq_f32(vsubq_f32(v4, v3), v5);
  *a2 = result;
  return result;
}

__n64 sub_1B179A2CC(double a1, double a2, double a3, float a4, int8x16_t a5, int8x16_t a6)
{
  float32x4_t v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x4_t v10;
  float v11;
  __n64 result;

  *(float *)a6.i32 = (float)((float)((float)(*(float *)&a3 * -1.5) + (float)(a4 * 0.5)) + (float)(*(float *)&a2 * 1.5))
                   + (float)(*(float *)&a1 * -0.5);
  *(float *)&a2 = (float)((float)((float)(*(float *)&a3 + *(float *)&a3) + (float)(a4 * -0.5))
                        + (float)(*(float *)&a2 * -2.5))
                + *(float *)&a1;
  *(float *)&a1 = (float)(*(float *)&a1 * -0.5) + (float)(*(float *)&a3 * 0.5);
  *(float *)&a3 = *(float *)a5.i32 * *(float *)a5.i32;
  *(float *)&a2 = (float)(*(float *)&a2 + *(float *)&a2) * *(float *)a5.i32;
  v6 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a1, 0), vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0), *(float *)a6.i32 * 3.0));
  v7 = (int32x4_t)vmulq_f32(v6, v6);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  v10 = vmulq_n_f32(v6, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  a5.i32[0] = v10.i32[2];
  a6.i32[0] = 1.0;
  v7.i64[0] = 0x8000000080000000;
  v7.i64[1] = 0x8000000080000000;
  v11 = *(float *)vbslq_s8((int8x16_t)v7, a6, a5).i32;
  v6.f32[0] = v10.f32[1] / (float)(fabsf(v10.f32[2]) + 1.0);
  *(float *)v7.i32 = -(float)(v10.f32[0] * v6.f32[0]);
  result.n64_f32[0] = v10.f32[2] + (float)(v11 * vmuls_lane_f32(v6.f32[0], *(float32x2_t *)v10.f32, 1));
  result.n64_f32[1] = v11 * *(float *)v7.i32;
  return result;
}

double catmull_rom_spline_basis_quat(double a1, double a2, double a3, float a4, int8x16_t a5, int8x16_t a6)
{
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  float v9;
  float v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  float v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  unsigned __int32 v25;
  float32x2_t v30;
  float v31;
  unsigned int v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;

  *(__n64 *)v6.i8 = sub_1B179A2CC(a1, a2, a3, a4, a5, a6);
  v9 = *(float *)&v8.i32[2] + (float)(*(float *)v6.i32 + *(float *)&v7.i32[1]);
  if (v9 >= 0.0)
  {
    v18 = sqrtf(v9 + 1.0);
    v19 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v18 + v18));
    v20 = vmul_f32(v19, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v18 + v18), v19));
    v30 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v7, vuzp1q_s32(v7, v8)), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v8, vzip2q_s32(v8, v6))), vmul_f32(v20, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v18 + v18), v20)).f32[0]);
  }
  else if (*(float *)v6.i32 < *(float *)&v7.i32[1] || *(float *)v6.i32 < *(float *)&v8.i32[2])
  {
    v11 = 1.0 - *(float *)v6.i32;
    if (*(float *)&v7.i32[1] >= *(float *)&v8.i32[2])
    {
      v31 = sqrtf(*(float *)&v7.i32[1] + (float)(v11 - *(float *)&v8.i32[2]));
      *(float *)&v32 = v31 + v31;
      v33 = vrecpe_f32((float32x2_t)v32);
      v34 = vmul_f32(v33, vrecps_f32((float32x2_t)v32, v33));
      v35.i32[0] = vmul_f32(v34, vrecps_f32((float32x2_t)v32, v34)).u32[0];
      v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v6.i8, 1), *(float32x2_t *)v7.i8).u32[0];
      v34.i32[1] = v32;
      v35.i32[1] = 0.25;
      v30 = vmul_f32(v34, v35);
    }
    else
    {
      v12 = (float32x2_t)__PAIR64__(v6.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)&v8.i32[2] + (float)(v11 - *(float *)&v7.i32[1]))));
      v13 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v6, v7), *(float32x2_t *)v8.i8);
      v14 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 0);
      v14.i32[0] = 2.0;
      v14.i32[0] = vmul_f32(v12, v14).u32[0];
      v15 = vrecpe_f32((float32x2_t)v14.u32[0]);
      v16 = vmul_f32(v15, vrecps_f32((float32x2_t)v14.u32[0], v15));
      v30 = vmul_n_f32(v13, vmul_f32(v16, vrecps_f32((float32x2_t)v14.u32[0], v16)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    v21 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 0);
    v22 = vadd_f32(*(float32x2_t *)v6.i8, v21);
    v21.i32[0] = 2.0;
    v21.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v6.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v6.i32+ (float)((float)(1.0 - *(float *)&v7.i32[1]) - *(float *)&v8.i32[2])))), v21).u32[0];
    v21.i32[1] = v22.i32[1];
    v23 = vrecpe_f32((float32x2_t)v21.u32[0]);
    v24 = vmul_f32(v23, vrecps_f32((float32x2_t)v21.u32[0], v23));
    v25 = vmul_f32(v24, vrecps_f32((float32x2_t)v21.u32[0], v24)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v25;
    v30 = vmul_f32(v21, _D5);
  }
  return *(double *)&v30;
}

float catmull_rom_spline_arclength(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float a5, float a6)
{
  uint64_t v6;
  float v7;
  float v8;
  float32x4_t v14;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;

  v6 = 0;
  v7 = (float)(a6 - a5) * 0.5;
  v8 = (float)(a5 + a6) * 0.5;
  __asm { FMOV            V5.4S, #-1.5 }
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V16.4S, #1.5 }
  v16 = vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(a3, _Q5), v14, a4), _Q16, a2), v14, a1);
  v17 = vmlsq_f32(vaddq_f32(a3, a3), v14, a4);
  __asm { FMOV            V3.4S, #-2.5 }
  v19 = vaddq_f32(a1, vmlaq_f32(v17, _Q3, a2));
  v20.i64[0] = 0xBF000000BF000000;
  v20.i64[1] = 0xBF000000BF000000;
  v21 = vmlaq_f32(vmulq_f32(a1, v20), v14, a3);
  __asm { FMOV            V1.4S, #3.0 }
  v23 = vmulq_f32(v16, _Q1);
  v24 = vaddq_f32(v19, v19);
  v25 = 0.0;
  do
  {
    v26 = vaddq_f32(v21, vmlaq_n_f32(vmulq_n_f32(v24, v8 + (float)(v7 * *(float *)&dword_1B22453A0[v6])), v23, (float)(v8 + (float)(v7 * *(float *)&dword_1B22453A0[v6]))* (float)(v8 + (float)(v7 * *(float *)&dword_1B22453A0[v6]))));
    v27 = vmulq_f32(v26, v26);
    v25 = v25
        + (float)(*(float *)&dword_1B22453D4[v6++]
                * sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]));
  }
  while (v6 != 13);
  return v7 * v25;
}

float sample_curve(uint64_t a1, float a2)
{
  float v2;
  signed int v3;
  float v4;
  float *v5;

  v2 = *(float *)(a1 + 144) + (float)(fminf(fmaxf(a2, 0.0), 1.0) * *(float *)(a1 + 140));
  v3 = vcvtms_s32_f32(v2);
  v4 = v2 - floorf(v2);
  v5 = (float *)(a1 + 4 * v3);
  return (float)((float)(*v5 + *v5)
               + (float)((float)((float)(v5[1] - *(v5 - 1))
                               + (float)((float)((float)((float)((float)((float)(v5[1] * 4.0) + (float)(*(v5 - 1) * 2.0))
                                                               + (float)(*v5 * -5.0))
                                                       - v5[2])
                                               + (float)((float)((float)(v5[2] + (float)((float)(*v5 - v5[1]) * 3.0))
                                                               - *(v5 - 1))
                                                       * v4))
                                       * v4))
                       * v4))
       * 0.5;
}

void computeTangents(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, float32x4_t *a9, uint64_t a10, int a11)
{
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  float32x2_t v29;
  float32x2_t v30;
  int32x2_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  unsigned int v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x2_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  float v52;

  v18 = a9;
  v19 = (float32x4_t *)malloc_type_calloc(16 * a2, 1uLL, 0x10E093CBuLL);
  if (a3 == 4)
  {
    v24 = 0;
  }
  else
  {
    if (a3 != 2)
    {
      printf("ComputeTangents : Unsupported index size (%zu)", a3);
      return;
    }
    v24 = a4;
    a4 = 0;
  }
  if (a1)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v20.i32[3] = 0;
    do
    {
      if (v24)
      {
        v26 = *(unsigned __int16 *)(v24 + 2 * v25);
        v27 = *(unsigned __int16 *)(v24 + 2 * (v25 + 1));
        v28 = *(unsigned __int16 *)(v24 + 2 * (v25 + 2));
      }
      else if (a4)
      {
        v26 = *(_DWORD *)(a4 + 4 * v25);
        v27 = *(_DWORD *)(a4 + 4 * (v25 + 1));
        v28 = *(_DWORD *)(a4 + 4 * (v25 + 2));
      }
      v29 = *(float32x2_t *)(a10 + (v26 * a11));
      v30 = vsub_f32(*(float32x2_t *)(a10 + (v27 * a11)), v29);
      v31 = (int32x2_t)vsub_f32(*(float32x2_t *)(a10 + (v28 * a11)), v29);
      v32 = vmlas_n_f32((float)-v30.f32[1] * *(float *)v31.i32, *(float *)&v31.i32[1], v30.f32[0]);
      if (v32 == 0.0)
      {
        v31 = (int32x2_t)vadd_f32((float32x2_t)v31, (float32x2_t)0xB400000034000000);
        v30 = vadd_f32(v30, (float32x2_t)0xB4000000B4000000);
        v32 = vmlas_n_f32((float)-v30.f32[1] * *(float *)v31.i32, *(float *)&v31.i32[1], v30.f32[0]);
      }
      v33 = a5 + (v26 * a6);
      v21.i64[0] = *(_QWORD *)v33;
      v21.i32[2] = *(_DWORD *)(v33 + 8);
      v34 = a5 + (v27 * a6);
      v22.i64[0] = *(_QWORD *)v34;
      v22.i32[2] = *(_DWORD *)(v34 + 8);
      v35 = a5 + (v28 * a6);
      v23.i64[0] = *(_QWORD *)v35;
      v23.i32[2] = *(_DWORD *)(v35 + 8);
      v22 = vsubq_f32(v22, v21);
      v21 = vsubq_f32(v23, v21);
      v36 = v32;
      v37 = vrecpe_f32((float32x2_t)LODWORD(v32));
      v38 = vmul_f32(v37, vrecps_f32((float32x2_t)LODWORD(v36), v37));
      v38.i32[0] = vmul_f32(v38, vrecps_f32((float32x2_t)LODWORD(v36), v38)).u32[0];
      v23 = vmulq_n_f32(vmlaq_lane_f32(vmulq_lane_f32(vnegq_f32(v21), v30, 1), v22, (float32x2_t)v31, 1), v38.f32[0]);
      v23.i32[3] = 0;
      a9[v26] = vaddq_f32(a9[v26], v23);
      a9[v27] = vaddq_f32(a9[v27], v23);
      a9[v28] = vaddq_f32(a9[v28], v23);
      v39 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v22, vnegq_f32((float32x4_t)vdupq_lane_s32(v31, 0))), v21, v30.f32[0]), v38.f32[0]);
      v39.i32[3] = v20.i32[3];
      v19[v26] = vaddq_f32(v39, v19[v26]);
      v19[v27] = vaddq_f32(v39, v19[v27]);
      v19[v28] = vaddq_f32(v39, v19[v28]);
      v25 += 3;
      v20.i64[1] = v39.i64[1];
    }
    while (3 * a1 != v25);
  }
  if (a2)
  {
    v40 = 0;
    v41 = a2;
    v42 = v19;
    do
    {
      v43 = a7 + v40;
      v20.i64[0] = *(_QWORD *)v43;
      v44 = v20;
      v44.i32[2] = *(_DWORD *)(v43 + 8);
      v20.i32[2] = v44.i32[2];
      v45 = vmulq_f32(*v18, v20);
      v46 = vmlsq_lane_f32(*v18, v44, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))), 0);
      v47 = (int32x4_t)vmulq_f32(v46, v46);
      v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1))).u32[0];
      v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
      v49 = *v42++;
      v20 = vmulq_n_f32(v46, vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48))).f32[0]);
      v50 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(v44)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL));
      v51 = vmulq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), (int8x16_t)v50, 0xCuLL));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).f32[0] < 0.0)v52 = -1.0;
      else
        v52 = 1.0;
      v20.f32[3] = v52;
      *v18++ = v20;
      v40 += a8;
      --v41;
    }
    while (v41);
  }
  free(v19);
}

uint64_t matrix_multiply_batch(uint64_t result, uint64_t a2, unint64_t a3, double a4, double a5, __n128 a6, __n128 a7)
{
  uint64_t v7;
  uint64_t i;
  _OWORD v9[4];

  v9[2] = a6;
  v9[3] = a7;
  if (a3)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 4; ++i)
        *(float32x4_t *)(result + i * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(*(float32x4_t *)(a2 + (v7 << 6) + 16), *(float32x2_t *)&v9[i], 1), *(float32x4_t *)(a2 + (v7 << 6)), COERCE_FLOAT(v9[i])), *(float32x4_t *)(a2 + (v7 << 6) + 32), (float32x4_t)v9[i], 2), *(float32x4_t *)(a2 + (v7 << 6) + 48), (float32x4_t)v9[i], 3);
      ++v7;
      result += 64;
    }
    while (a3 > v7);
  }
  return result;
}

uint64_t matrix_multiply_constant_batch(uint64_t result, uint64_t a2, unint64_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7;
  uint64_t i;

  if (a3)
  {
    v7 = 0;
    do
    {
      for (i = 0; i != 64; i += 16)
        *(float32x4_t *)(result + i) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(a5, *(float32x2_t *)(a2 + i), 1), a4, COERCE_FLOAT(*(_OWORD *)(a2 + i))), a6, *(float32x4_t *)(a2 + i), 2), a7, *(float32x4_t *)(a2 + i), 3);
      ++v7;
      a2 += 64;
      result += 64;
    }
    while (a3 > v7);
  }
  return result;
}

int32x4_t matrix_transpose_batch(uint64_t a1, int32x4_t *a2, unint64_t a3)
{
  int32x4_t *v3;
  float *v4;
  unsigned int v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x2x2_t v10;
  int32x4_t v11;
  int32x4_t result;
  float *v13;
  unint64_t v14;
  float32x2x2_t v15;

  if (a3)
  {
    v3 = a2 + 2;
    v4 = (float *)(a1 + 32);
    v5 = 1;
    do
    {
      v6 = v3[-2];
      v7 = v3[-1];
      v8 = *v3;
      v9 = v3[1];
      v3 += 4;
      v10 = (float32x2x2_t)vzip1q_s32(v6, v8);
      v15.val[0] = (float32x2_t)vzip2q_s32(v6, v8).u64[0];
      v11 = vzip1q_s32(v7, v9);
      v15.val[1] = (float32x2_t)vzip2q_s32(v7, v9).u64[0];
      result = vzip2q_s32((int32x4_t)v10, v11);
      v13 = v4 - 8;
      vst2_f32(v13, v10);
      *((int32x4_t *)v4 - 1) = result;
      v14 = v5;
      vst2_f32(v4, v15);
      ++v5;
      v4 += 12;
    }
    while (v14 < a3);
  }
  return result;
}

double sub_1B179AB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v7 = atomic_load((unsigned __int8 *)&qword_1EEF65488);
  v8 = &unk_1EEF65000;
  if ((v7 & 1) == 0)
  {
    v20 = a2;
    v21 = a3;
    v19 = __cxa_guard_acquire(&qword_1EEF65488);
    v8 = &unk_1EEF65000;
    a2 = v20;
    a3 = v21;
    if (v19)
    {
      byte_1EEF65480 = 1;
      __cxa_guard_release(&qword_1EEF65488);
      v8 = (_BYTE *)&unk_1EEF65000;
      a2 = v20;
      a3 = v21;
    }
  }
  if (v8[1152])
    v9 = 0xA65946FB2DD0B312;
  else
    v9 = 0;
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v9, 0);
  *(_QWORD *)a1 = &off_1E63CF160;
  v10 = *(_OWORD *)(a5 + 24);
  v11 = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 416) = v11;
  *(_OWORD *)(a1 + 384) = v10;
  v12 = *(_OWORD *)(a5 + 72);
  v13 = *(_OWORD *)(a5 + 88);
  v14 = *(_OWORD *)(a5 + 120);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 480) = v14;
  *(_OWORD *)(a1 + 432) = v12;
  *(_OWORD *)(a1 + 448) = v13;
  v15 = *(_OWORD *)(a5 + 136);
  v16 = *(_OWORD *)(a5 + 152);
  v17 = *(_OWORD *)(a5 + 184);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a5 + 168);
  *(_OWORD *)(a1 + 544) = v17;
  *(_OWORD *)(a1 + 496) = v15;
  *(_OWORD *)(a1 + 512) = v16;
  result = 0.0;
  *(_OWORD *)(a1 + 568) = 0u;
  return result;
}

void sub_1B179AC18(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::CrossFrameResourceManager::get(a2[4], v4);
  *(_QWORD *)(a1 + 560) = v5;
  if (!v5)
  {
    *(_QWORD *)(a1 + 560) = sub_1B179AD4C(a2[4], v4);
    v13 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v6, v7, v8, v9, v10, v11, v12);
    v17 = (void *)objc_msgSend_resourceManager(v13, v14, v15, v16);
    v18 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_atIndex_(v18, v19, a1 + 552, 53, 20301);
    v20 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 576));
    v21 = *(_BYTE *)(v20 + 9);
    v22 = *(_QWORD *)(v20 + 16);
    v23 = *(_QWORD *)(a1 + 560);
    v24 = (void *)sub_1B18FD768((uint64_t)v17);
    *((_QWORD *)&v34 + 1) = objc_msgSend_frameworkLibrary(v24, v25, v26, v27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v35 = v22;
    LOBYTE(v36) = v21;
    *((_QWORD *)&v37 + 1) = v18;
    *((_QWORD *)&v38 + 1) = CFSTR("vertex_draw_quad");
    *(_QWORD *)&v39 = CFSTR("bloom_threshold");
    v30 = objc_msgSend_newRenderPipelineStateWithDesc_(v17, v28, (uint64_t)&v33, v29);
    v31 = *(void **)(v23 + 16);
    if (v31 != (void *)v30)
    {
      v32 = v30;
      if (v31)

      *(_QWORD *)(v23 + 16) = v32;
    }

  }
}

_QWORD *sub_1B179AD4C(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CF140;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B179ADC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  id Texture;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;

  prof_beginFlame((uint64_t)"Bloom threshold", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/BloomPass.mm", 55);
  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v4, v5, v6, v7, v8, v9, v10);
  v22 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  v23 = *(_QWORD *)(a1 + 560);
  v24 = *(void **)(v23 + 16);
  if (!v24)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v16, v17, v18, v19, v20, v21, (uint64_t)"_ptr != NULL");
    v24 = *(void **)(v23 + 16);
  }
  v25 = objc_msgSend_state(v24, v15, v16, v17);
  objc_msgSend_setRenderPipelineState_(*(void **)(v22 + 16), v26, v25, v27);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 568));
  sub_1B179AEE4(v22, Texture, 0, v29);
  v37 = sub_1B18E91D8(*(_QWORD *)(a1 + 544), v30, v31, v32, v33, v34, v35, v36);
  v47 = __PAIR64__(COERCE_UNSIGNED_INT(sub_1B18E9308(*(_QWORD *)(a1 + 544), v38, v39, v40, v41, v42, v43, v44)), LODWORD(v37));
  v48 = 0;
  v49 = 0;
  v50 = 0;
  sub_1B1868D14(*(_QWORD *)(v22 + 24), &v47, 8uLL, &v48);
  objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v22 + 16), v45, v49, v50, 0);
  sub_1B179AF64(v22, v46);
  prof_endFlame();
}

void sub_1B179AEC8(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B179AEE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v13;

  v13 = (uint64_t)a2;
  if (a2 && (objc_msgSend_conformsToProtocol_(a2, (const char *)a2, (uint64_t)&unk_1EF023E28, a4) & 1) == 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. texture is not a MTLTexture"), v6, a4, v7, v8, v9, v10, (uint64_t)"!texture || [texture conformsToProtocol:@protocol(MTLTexture)]");
  sub_1B189E888(*(__IOSurface **)(a1 + 8), (const char *)&v13, 1, a4);
  return objc_msgSend_setFragmentTexture_atIndex_(*(void **)(a1 + 16), v11, v13, a3);
}

uint64_t sub_1B179AF64(uint64_t a1, const char *a2)
{
  unsigned int v2;
  void *v3;

  v2 = *(_DWORD *)a1;
  v3 = *(void **)(a1 + 16);
  if (v2 < 2)
    return objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v3, a2, 3, 0, 3);
  else
    return objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_(v3, a2, 3, 0, 3);
}

uint64_t sub_1B179AF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  CFX::RG::Pass *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v7 = atomic_load((unsigned __int8 *)&qword_1EEF65498);
  v8 = &unk_1EEF65000;
  if ((v7 & 1) == 0)
  {
    v21 = a2;
    v22 = a3;
    v20 = __cxa_guard_acquire(&qword_1EEF65498);
    v8 = (_QWORD *)&unk_1EEF65000;
    a2 = v21;
    a3 = v22;
    if (v20)
    {
      qword_1EEF65490 = (uint64_t)sub_1B179BF14("BLOOM_DOWNSAMPLE_PASS", 0x15u);
      __cxa_guard_release(&qword_1EEF65498);
      v8 = (_QWORD *)&unk_1EEF65000;
      a2 = v21;
      a3 = v22;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v8[146], 0);
  *(_QWORD *)a1 = &off_1E63CF3C8;
  v9 = *(_OWORD *)(a5 + 24);
  v10 = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 416) = v10;
  *(_OWORD *)(a1 + 384) = v9;
  v11 = *(_OWORD *)(a5 + 72);
  v12 = *(_OWORD *)(a5 + 88);
  v13 = *(_OWORD *)(a5 + 120);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 480) = v13;
  *(_OWORD *)(a1 + 432) = v11;
  *(_OWORD *)(a1 + 448) = v12;
  v14 = *(_OWORD *)(a5 + 136);
  v15 = *(_OWORD *)(a5 + 152);
  v16 = *(_OWORD *)(a5 + 184);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a5 + 168);
  *(_OWORD *)(a1 + 544) = v16;
  *(_OWORD *)(a1 + 496) = v14;
  *(_OWORD *)(a1 + 512) = v15;
  *(_OWORD *)(a1 + 568) = 0u;
  v17 = *(_DWORD *)(a1 + 552);
  *(_BYTE *)(CFX::RG::Pass::commonRenderParameters(v18) + 274) = v17;
  return a1;
}

void sub_1B179B098(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B179B0AC(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char v52;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 576));
  v6 = *(unsigned __int8 *)(v5 + 9);
  v7 = *(_QWORD *)(v5 + 16);
  v15 = sub_1B18E9274(*(_QWORD *)(a1 + 544), v8, v9, v10, v11, v12, v13, v14);
  v52 = v15;
  v16 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ v15)));
  v17 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47))) ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47))) ^ v7)));
  v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
  v19 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v18 ^ ((0x9DDFEA08EB382D69 * (v18 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v18 ^ v6)))) ^ ((0x9DDFEA08EB382D69 * (v18 ^ ((0x9DDFEA08EB382D69 * (v18 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v18 ^ v6)))) >> 47));
  v20 = CFX::CrossFrameResourceManager::get(a2[4], v19);
  *(_QWORD *)(a1 + 560) = v20;
  if (!v20)
  {
    *(_QWORD *)(a1 + 560) = sub_1B179B25C(a2[4], v19);
    v28 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v21, v22, v23, v24, v25, v26, v27);
    v32 = (void *)objc_msgSend_resourceManager(v28, v29, v30, v31);
    v33 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_atIndex_(v33, v34, (uint64_t)&v52, 53, 20300);
    v35 = *(_QWORD *)(a1 + 560);
    v36 = (void *)sub_1B18FD768((uint64_t)v32);
    *((_QWORD *)&v46 + 1) = objc_msgSend_frameworkLibrary(v36, v37, v38, v39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v47 = v7;
    LOBYTE(v48) = v6;
    *((_QWORD *)&v49 + 1) = v33;
    *((_QWORD *)&v50 + 1) = CFSTR("vertex_draw_quad");
    *(_QWORD *)&v51 = CFSTR("bloom_down_sample");
    v42 = objc_msgSend_newRenderPipelineStateWithDesc_(v32, v40, (uint64_t)&v45, v41);
    v43 = *(void **)(v35 + 16);
    if (v43 != (void *)v42)
    {
      v44 = v42;
      if (v43)

      *(_QWORD *)(v35 + 16) = v44;
    }

  }
}

_QWORD *sub_1B179B25C(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CF3A8;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B179B2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  id Texture;
  uint64_t v29;
  const char *v30;
  const char *v31;
  float v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;

  prof_beginFlame((uint64_t)"Bloom downsample", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/BloomPass.mm", 128);
  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v4, v5, v6, v7, v8, v9, v10);
  v22 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  v23 = *(_QWORD *)(a1 + 560);
  v24 = *(void **)(v23 + 16);
  if (!v24)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v16, v17, v18, v19, v20, v21, (uint64_t)"_ptr != NULL");
    v24 = *(void **)(v23 + 16);
  }
  v25 = objc_msgSend_state(v24, v15, v16, v17);
  objc_msgSend_setRenderPipelineState_(*(void **)(v22 + 16), v26, v25, v27);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 568));
  sub_1B179AEE4(v22, Texture, 0, v29);
  v32 = (float)*(unsigned int *)(a1 + 552) + -1.0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  sub_1B1868D14(*(_QWORD *)(v22 + 24), &v32, 4uLL, &v33);
  objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v22 + 16), v30, v34, v35, 0);
  sub_1B179AF64(v22, v31);
  prof_endFlame();
}

void sub_1B179B3CC(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B179B3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned __int8 v7;
  _QWORD *v8;
  int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v7 = atomic_load((unsigned __int8 *)&qword_1EEF654A8);
  v8 = &unk_1EEF65000;
  if ((v7 & 1) == 0)
  {
    v12 = a2;
    v13 = a3;
    v11 = __cxa_guard_acquire(&qword_1EEF654A8);
    v8 = (_QWORD *)&unk_1EEF65000;
    a2 = v12;
    a3 = v13;
    if (v11)
    {
      qword_1EEF654A0 = (uint64_t)sub_1B179BF14("BLOOM_UPSAMPLE_PASS", 0x13u);
      __cxa_guard_release(&qword_1EEF654A8);
      v8 = (_QWORD *)&unk_1EEF65000;
      a2 = v12;
      a3 = v13;
    }
  }
  sub_1B182AAEC(a1, a2, a3, a5, v8[148], 0);
  *(_QWORD *)a1 = &off_1E63CEFA0;
  memcpy((void *)(a1 + 384), a5 + 3, 0x150uLL);
  *(_QWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  v9 = *(_DWORD *)(a1 + 712);
  *(_BYTE *)(CFX::RG::Pass::commonRenderParameters((CFX::RG::Pass *)a1) + 274) = v9;
  return a1;
}

void sub_1B179B4C0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B179B4D4(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint32x4_t v28;
  _BOOL4 v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char v69;
  BOOL v70;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 744));
  v6 = *(unsigned __int8 *)(v5 + 9);
  v7 = *(_QWORD *)(v5 + 16);
  v22 = sub_1B18EA670((__n128 *)*(_QWORD *)(a1 + 704), v8, v9, v10, v11, v12, v13, v14);
  __asm { FMOV            V1.4S, #1.0 }
  v28 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32((float32x4_t)v22, _Q1));
  v28.i32[3] = v28.i32[2];
  v29 = (vmaxvq_u32(v28) & 0x80000000) != 0
     || sub_1B18EA708(*(_QWORD *)(a1 + 704), v15, v16, v17, v18, v19, v20, v21) != 1.0
     || sub_1B18EA7A4(*(_QWORD *)(a1 + 704), v15, v16, v17, v18, v19, v20, v21) != 1.0;
  v70 = v29;
  v30 = sub_1B18E9274(*(_QWORD *)(a1 + 704), v15, v16, v17, v18, v19, v20, v21);
  v69 = v30;
  v31 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ v30)));
  v32 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47))) ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47))) ^ v29)));
  v33 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47))) ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47))) ^ v7)));
  v34 = 0x9DDFEA08EB382D69 * (v33 ^ (v33 >> 47));
  v35 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ v6)))) ^ ((0x9DDFEA08EB382D69 * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ v6)))) >> 47));
  v36 = CFX::CrossFrameResourceManager::get(a2[4], v35);
  *(_QWORD *)(a1 + 720) = v36;
  if (!v36)
  {
    *(_QWORD *)(a1 + 720) = sub_1B179B714(a2[4], v35);
    v44 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v37, v38, v39, v40, v41, v42, v43);
    v48 = (void *)objc_msgSend_resourceManager(v44, v45, v46, v47);
    v49 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_atIndex_(v49, v50, (uint64_t)&v69, 53, 20300);
    objc_msgSend_setConstantValue_type_atIndex_(v49, v51, (uint64_t)&v70, 53, 20302);
    v52 = *(_QWORD *)(a1 + 720);
    v53 = (void *)sub_1B18FD768((uint64_t)v48);
    *((_QWORD *)&v63 + 1) = objc_msgSend_frameworkLibrary(v53, v54, v55, v56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v64 = v7;
    LOBYTE(v65) = v6;
    *((_QWORD *)&v66 + 1) = v49;
    *((_QWORD *)&v67 + 1) = CFSTR("vertex_draw_quad");
    *(_QWORD *)&v68 = CFSTR("bloom_up_sample_color_grading");
    v59 = objc_msgSend_newRenderPipelineStateWithDesc_(v48, v57, (uint64_t)&v62, v58);
    v60 = *(void **)(v52 + 16);
    if (v60 != (void *)v59)
    {
      v61 = v59;
      if (v60)

      *(_QWORD *)(v52 + 16) = v61;
    }

  }
}

_QWORD *sub_1B179B714(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CEF80;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B179B788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  id Texture;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint32x2_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  __int128 v57;
  __n128 v58;
  __int128 v59;
  float32x2_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;

  prof_beginFlame((uint64_t)"Bloom upsample", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/BloomPass.mm", 206);
  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v4, v5, v6, v7, v8, v9, v10);
  v22 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  v23 = *(_QWORD *)(a1 + 720);
  v24 = *(void **)(v23 + 16);
  if (!v24)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v16, v17, v18, v19, v20, v21, (uint64_t)"_ptr != NULL");
    v24 = *(void **)(v23 + 16);
  }
  v25 = objc_msgSend_state(v24, v15, v16, v17);
  objc_msgSend_setRenderPipelineState_(*(void **)(v22 + 16), v26, v25, v27);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 728));
  v29 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 736));
  sub_1B179AEE4(v22, v29, 0, v30);
  sub_1B179AEE4(v22, Texture, 1, v31);
  v32.i32[0] = *(_DWORD *)(a1 + 712) + 1;
  v32.i32[1] = *(_DWORD *)(a1 + 712);
  v60 = vcvt_f32_u32(v32);
  v57 = 0uLL;
  v58.n128_u64[0] = 0;
  sub_1B1868D14(*(_QWORD *)(v22 + 24), &v60, 8uLL, (void **)&v57);
  objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v22 + 16), v33, *((uint64_t *)&v57 + 1), v58.n128_i64[0], 0);
  v58 = 0u;
  v59 = 0u;
  v57 = 0u;
  LODWORD(v57) = 1065353216;
  v58 = sub_1B18EA670((__n128 *)*(_QWORD *)(a1 + 704), v34, v35, v36, v37, v38, v39, v40);
  LODWORD(v59) = sub_1B18EA708(*(_QWORD *)(a1 + 704), v41, v42, v43, v44, v45, v46, v47);
  DWORD1(v59) = sub_1B18EA7A4(*(_QWORD *)(a1 + 704), v48, v49, v50, v51, v52, v53, v54);
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_1B1868D14(*(_QWORD *)(v22 + 24), &v57, 0x30uLL, &v61);
  objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v22 + 16), v55, v62, v63, 1);
  sub_1B179AF64(v22, v56);
  prof_endFlame();
}

void sub_1B179B90C(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t *sub_1B179B930(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v11;
  const __CFDictionary *v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  __int128 v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  CFX::RG::Resource *v32;
  CFX::RG::Resource *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  const char *v50;
  CFX::RG::Resource *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  CFX::RG::Resource *v64;
  CFX::RG::Pass *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t *v69;
  CFX::RG::Pass *v70;
  uint64_t v71;
  CFX::RG::Resource *v72;
  uint64_t v74;
  CFX::RG::Resource *v75;
  CFX::RG::Resource *v76;
  const char *v77;
  uint64_t v78;
  __int16 v79;
  _BYTE v80[160];
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  _QWORD v85[2];
  __int16 v86;
  _QWORD v87[21];
  char v88;
  _WORD v89[2];
  int v90;
  char v91;
  char v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  _WORD v100[2];
  int v101;
  char v102;
  char v103;
  int v104;
  __int16 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  int v115;
  __int16 v116;
  _BYTE v117[160];
  _OWORD v118[11];

  v11 = *(const void **)(a3 + 8);
  if (!v11)
  {
    v11 = sub_1B1814768(*(uint64_t **)a3, a2, a3, a4, a5, a6, a7, a8);
    if (!v11)
      return 0;
  }
  v12 = sub_1B186CFA8((uint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if (!v12)
    return 0;
  v13 = (uint64_t)v12;
  v75 = (CFX::RG::Resource *)a4;
  v14 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)(a3 + 16));
  v15 = v14[1];
  v118[0] = *v14;
  v118[1] = v15;
  v16 = v14[5];
  v18 = v14[2];
  v17 = v14[3];
  v118[4] = v14[4];
  v118[5] = v16;
  v118[2] = v18;
  v118[3] = v17;
  v19 = v14[9];
  v21 = v14[6];
  v20 = v14[7];
  v118[8] = v14[8];
  v118[9] = v19;
  v118[6] = v21;
  v118[7] = v20;
  CFX::RG::TextureDescriptorReference::withSampleCount(v118, 1, (uint64_t)v117);
  v22 = *(unsigned __int16 *)(a3 + 24);
  v23 = *(unsigned __int16 *)(a3 + 26);
  v24 = *(_DWORD *)(a3 + 28);
  v115 = *(_DWORD *)(a3 + 34);
  v116 = *(_WORD *)(a3 + 38);
  v25 = *(_OWORD *)(a3 + 64);
  v111 = *(_OWORD *)(a3 + 48);
  v112 = v25;
  v113 = *(_OWORD *)(a3 + 80);
  v114 = *(_QWORD *)(a3 + 96);
  v26 = v23 >> 1;
  v27 = v22 >> 1;
  if ((int)(v23 >> 1) <= (int)(v22 >> 1))
    v28 = v22 >> 1;
  else
    v28 = v23 >> 1;
  if (v28 <= 1)
    v28 = 1;
  v29 = (int)(float)(floorf(log2f((float)v28)) + 1.0);
  v100[0] = v27;
  v100[1] = v26;
  v101 = v24;
  v102 = v29;
  v103 = 1;
  v104 = *(_DWORD *)(a3 + 34);
  v105 = *(_WORD *)(a3 + 38);
  v30 = *(_OWORD *)(a3 + 64);
  v107 = *(_OWORD *)(a3 + 48);
  v108 = v30;
  v109 = *(_OWORD *)(a3 + 80);
  v31 = *(_QWORD *)(a3 + 96);
  v106 = 92;
  v110 = v31;
  v32 = sub_1B179BD38(a1, (uint64_t)"BLOOM OUTPUT", (uint64_t)v100);
  v96 = v111;
  v89[0] = v27;
  v89[1] = v26;
  v90 = v24;
  v91 = v29;
  v92 = 1;
  v93 = v115;
  v94 = v116;
  v97 = v112;
  v98 = v113;
  v95 = 92;
  v99 = v114;
  v33 = sub_1B179BD38(a1, (uint64_t)"BLOOM TMP", (uint64_t)v89);
  v47 = sub_1B186483C(v13, v34, v35, v36, v37, v38, v39, v40);
  if (!v47)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v41, v42, v43, v44, v45, v46, (uint64_t)"bloom");
  v48 = *(uint64_t **)a3;
  v85[0] = "Bloom threshold";
  v85[1] = v48;
  v86 = 0;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)v87);
  v87[20] = v47;
  v88 = 0;
  v49 = (uint64_t *)sub_1B179BD94(a1, (uint64_t)a1, (uint64_t)v85);
  v51 = (CFX::RG::Resource *)CFX::RG::copyIfNeeded((CFX::RG *)a1, *(CFX::RG::RenderGraphBuilder **)(a3 + 16), v75, (CFX::RG::Pass *)v117, 0, v50);
  v49[71] = (uint64_t)v51;
  CFX::RG::Pass::readFrom(v49, v51);
  v49[72] = (uint64_t)v33;
  CFX::RG::Pass::renderTo((uint64_t)v49, (uint64_t)v33, 0x100000000, 0);
  v52 = v29 - 3;
  v60 = sub_1B18EA840(v47, v53, v54, v55, v56, v57, v58, v59);
  if (v52 >= v60)
    v61 = v60;
  else
    v61 = v52;
  if (v61 <= 2)
    v62 = 2;
  else
    v62 = v61;
  v63 = 1;
  v64 = (CFX::RG::Resource *)a3;
  do
  {
    v65 = (CFX::RG::Pass *)v49;
    v66 = *(_QWORD *)v64;
    v77 = "Bloom downsample";
    v78 = v66;
    v79 = 0;
    CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)v80);
    v81 = v47;
    v82 = v63;
    v49 = (uint64_t *)sub_1B179BDE8(a1, (uint64_t)a1, (uint64_t)&v77);
    v49[71] = (uint64_t)v33;
    CFX::RG::Pass::readFrom(v49, v33);
    v49[72] = (uint64_t)v33;
    CFX::RG::Pass::renderTo((uint64_t)v49, (uint64_t)v33, 0x100000000, 0);
    CFX::RG::Pass::dependsOn(v49, v65);
    ++v63;
  }
  while (v62 != v63);
  v74 = v47;
  v76 = v64;
  v67 = 0;
  v68 = v62 - 1;
  v69 = v49;
  do
  {
    v70 = (CFX::RG::Pass *)v69;
    v71 = *(_QWORD *)v76;
    --v68;
    v77 = "Bloom upsample";
    v78 = v71;
    v79 = 0;
    CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)v80);
    CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)&v81);
    v83 = v74;
    v84 = v68;
    v69 = (uint64_t *)sub_1B179BE3C(a1, (uint64_t)a1, (uint64_t *)&v77);
    v69[91] = (uint64_t)v33;
    CFX::RG::Pass::readFrom(v69, v33);
    if (v67)
      v72 = v32;
    else
      v72 = v33;
    v69[92] = (uint64_t)v72;
    CFX::RG::Pass::readFrom(v69, v72);
    v69[93] = (uint64_t)v32;
    CFX::RG::Pass::renderTo((uint64_t)v69, (uint64_t)v32, 0x100000000, 0);
    CFX::RG::Pass::dependsOn(v69, v70);
    if (v70 != (CFX::RG::Pass *)v49)
      CFX::RG::Pass::dependsOn(v69, (CFX::RG::Pass *)v49);
    ++v67;
  }
  while (v68 > 0);
  return v69;
}

CFX::RG::Resource *sub_1B179BD38(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  CFX::RG::Resource *v6;
  CFX::RG::Resource *v7;
  char v9;
  uint64_t v10;

  v10 = a2;
  v4 = *a1;
  v5 = a1[1];
  v9 = 1;
  sub_1B179C14C(v4, v5, &v10, a3, &v9);
  v7 = v6;
  CFX::RG::RenderGraphBuilder::appendResource(a1, v6);
  return v7;
}

uint64_t sub_1B179BD94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[2];

  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  sub_1B179C6E8(v8[0], v5, v8, a2, a3);
  v8[0] = v6;
  sub_1B179C734(a1 + 18, v8);
  return v8[0];
}

uint64_t sub_1B179BDE8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B179CAC8(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B179BE3C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B179CB14(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B179BE94(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B179BEB8()
{
  return 1;
}

void sub_1B179BEC8(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B179BEF0(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B179BF14(unsigned __int8 *result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;

  if (result)
  {
    v2 = 0;
    v3 = 0xC6A4A7935BD1E995 * a2;
    do
    {
      v3 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * *(_QWORD *)&result[v2]) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)&result[v2]) >> 47))) ^ v3);
      v2 += 8;
    }
    while (v2 != 16);
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_11;
      case 2u:
        goto LABEL_10;
      case 3u:
        goto LABEL_9;
      case 4u:
        goto LABEL_8;
      case 5u:
        goto LABEL_7;
      case 6u:
        goto LABEL_6;
      case 7u:
        v3 ^= (unint64_t)result[22] << 48;
LABEL_6:
        v3 ^= (unint64_t)result[21] << 40;
LABEL_7:
        v3 ^= (unint64_t)result[20] << 32;
LABEL_8:
        v3 ^= (unint64_t)result[19] << 24;
LABEL_9:
        v3 ^= (unint64_t)result[18] << 16;
LABEL_10:
        v3 ^= (unint64_t)result[17] << 8;
LABEL_11:
        v3 = 0xC6A4A7935BD1E995 * (v3 ^ result[16]);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v3 ^ (v3 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) >> 47));
  }
  return result;
}

_QWORD *sub_1B179BFCC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CF140;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B179C004(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CF140;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B179C04C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CF3A8;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B179C084(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CF3A8;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B179C0CC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CEF80;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B179C104(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CEF80;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

double sub_1B179C14C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char *a5)
{
  uint64_t v8;
  uint64_t v9;
  double result;
  _BYTE v11[160];
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v8 = sub_1B179C1C0(v12, 0xE0u, 8u);
  v9 = *a3;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v11, a4);
  *(_QWORD *)&result = CFX::RG::Resource::Resource(v8, v9, (uint64_t)v11, *a5).n128_u64[0];
  return result;
}

uint64_t sub_1B179C1C0(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  void *v7[129];
  uint64_t v8;
  uint64_t *v9;

  result = CScratchAllocatorAllocateAligned(*a1, a2, a3);
  v8 = result;
  if (a1[1])
  {
    LODWORD(v7[128]) = backtrace(v7, 128);
    v5 = a1[1];
    v9 = &v8;
    v6 = sub_1B179C248(v5, &v8, (uint64_t)&unk_1B22458B0, &v9);
    memcpy(v6 + 3, v7, 0x408uLL);
    return v8;
  }
  return result;
}

_QWORD *sub_1B179C248(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x420uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  bzero(i + 3, 0x408uLL);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_1B179C4B4(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B179C494(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B179C4A8()
{
  abort();
}

void sub_1B179C4B4(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1B179C590(a1, prime);
  }
}

void sub_1B179C590(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_1B179C4A8();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

double sub_1B179C6E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v7 = sub_1B179C1C0(v10, 0x248u, 8u);
  return sub_1B179AB18(v7, *a3, a3[1], v8, a5);
}

uint64_t *sub_1B179C734(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = result;
  v4 = *((_DWORD *)result + 4);
  v5 = v4 + 1;
  if (v4 + 1 > *((_DWORD *)result + 5))
  {
    result = sub_1B179C78C((uint64_t)result, 1, 0);
    v4 = *((_DWORD *)v3 + 4);
    v5 = v4 + 1;
  }
  *(_QWORD *)(v3[3] + 8 * v4) = *a2;
  *((_DWORD *)v3 + 4) = v5;
  return result;
}

uint64_t *sub_1B179C78C(uint64_t a1, int a2, int a3)
{
  const void *v4;
  const void *v5;
  double v6;
  unsigned int v7;
  void *v8;
  uint64_t *result;
  const void *v10;

  v4 = *(const void **)(a1 + 24);
  v5 = (const void *)(a1 + 32);
  v6 = 1.5;
  if (a3)
    v6 = 1.0;
  v7 = (v6 * (double)(*(_DWORD *)(a1 + 20) + a2));
  v8 = (void *)sub_1B179C1C0((_QWORD *)a1, 8 * v7, 8u);
  result = (uint64_t *)memcpy(v8, v4, 8 * *(unsigned int *)(a1 + 16));
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 20) = v7;
  if (v4 != v5)
  {
    v10 = v4;
    result = *(uint64_t **)(a1 + 8);
    if (result)
      return sub_1B179C834(result, &v10);
  }
  return result;
}

uint64_t *sub_1B179C834(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = sub_1B179C868(a1, a2);
  if (result)
  {
    sub_1B179C954(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *sub_1B179C868(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B179C954(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_1B179C994(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *sub_1B179C994@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_1B179CAC8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v7 = sub_1B179C1C0(v10, 0x248u, 8u);
  return sub_1B179AF90(v7, *a3, a3[1], v8, a5);
}

uint64_t sub_1B179CB14(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v7 = sub_1B179C1C0(v10, 0x2F0u, 8u);
  return sub_1B179B3E8(v7, *a3, a3[1], v8, a5);
}

uint64_t sub_1B179CB60(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    result = _CFRuntimeRegisterClass();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B179CB90(CFTypeID a1, size_t a2)
{
  uint64_t v2;
  uint64_t Instance;
  CFStringRef v6;

  if (HIDWORD(a2))
    return 0;
  Instance = _CFRuntimeCreateInstance();
  v2 = Instance;
  if (Instance)
  {
    bzero((void *)(Instance + 16), a2);
  }
  else
  {
    v6 = CFCopyTypeIDDescription(a1);
    CFRelease(v6);
  }
  return v2;
}

BOOL sub_1B179CC0C(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL sub_1B179CC58(float *a1, float *a2)
{
  return vabds_f32(*a1, *a2) <= 0.001
      && vabds_f32(a1[1], a2[1]) <= 0.001
      && vabds_f32(a1[2], a2[2]) <= 0.001
      && vabds_f32(a1[3], a2[3]) <= 0.001;
}

BOOL sub_1B179CCCC(float *a1)
{
  return *a1 <= 0.001 && a1[1] <= 0.001 && a1[2] <= 0.001;
}

BOOL sub_1B179CD10(float *a1)
{
  return fabsf(*a1 + -1.0) <= 0.001 && fabsf(a1[1] + -1.0) <= 0.001 && fabsf(a1[2] + -1.0) <= 0.001;
}

float *sub_1B179CD74(float *result, float a2, float a3, float a4, float a5)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

float sub_1B179CD80(float *a1, float *a2, float *a3, float a4)
{
  float result;

  *a3 = *a1 + (float)((float)(*a2 - *a1) * a4);
  a3[1] = a1[1] + (float)((float)(a2[1] - a1[1]) * a4);
  a3[2] = a1[2] + (float)((float)(a2[2] - a1[2]) * a4);
  result = a1[3] + (float)((float)(a2[3] - a1[3]) * a4);
  a3[3] = result;
  return result;
}

float sub_1B179CDD4(float *a1, float *a2, float *a3)
{
  float result;

  *a3 = *a1 + *a2;
  a3[1] = a1[1] + a2[1];
  a3[2] = a1[2] + a2[2];
  result = a1[3] + a2[3];
  a3[3] = result;
  return result;
}

float sub_1B179CE18(float *a1, float *a2, float *a3)
{
  float result;

  *a3 = *a1 - *a2;
  a3[1] = a1[1] - a2[1];
  a3[2] = a1[2] - a2[2];
  result = a1[3] - a2[3];
  a3[3] = result;
  return result;
}

float sub_1B179CE5C(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;

  v2 = a1[1] - a2[1];
  v3 = a1[2] - a2[2];
  v4 = a1[3] - a2[3];
  return sqrtf((float)((float)((float)(v2 * v2) + (float)((float)(*a1 - *a2) * (float)(*a1 - *a2))) + (float)(v3 * v3))+ (float)(v4 * v4));
}

unint64_t sub_1B179CE94(uint64_t a1, int a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  float v13;
  float v14;

  if (*((float *)&a1 + 1) <= 1.0)
    v2 = *((float *)&a1 + 1);
  else
    v2 = 1.0;
  v3 = 0.0;
  if (*((float *)&a1 + 1) < 0.0)
    v2 = 0.0;
  if (*(float *)&a2 <= 1.0)
    v4 = *(float *)&a2;
  else
    v4 = 1.0;
  if (*(float *)&a2 < 0.0)
    v4 = 0.0;
  if (v2 == 0.0)
  {
    v5 = v4;
    v6 = v4;
  }
  else
  {
    v8 = *(float *)&a1 * 360.0;
    if (*(float *)&a1 > 1.0)
      v8 = 360.0;
    if (*(float *)&a1 >= 0.0)
      v9 = v8;
    else
      v9 = 0.0;
    if (v9 != 360.0)
      v3 = v9 / 60.0;
    v10 = (int)v3;
    v11 = v3 - (float)(int)v3;
    v12 = v4 * (float)(1.0 - v2);
    v13 = v4 * (float)(1.0 - (float)(v2 * v11));
    v14 = v4 * (float)(1.0 - (float)(v2 * (float)(1.0 - v11)));
    v5 = v4;
    v6 = v14;
    switch(v10)
    {
      case 0:
        return LODWORD(v5) | ((unint64_t)LODWORD(v6) << 32);
      case 1:
        v5 = v13;
        v6 = v4;
        break;
      case 2:
        v5 = v12;
        v6 = v4;
        break;
      case 3:
        v5 = v12;
        v6 = v13;
        break;
      case 4:
        v5 = v14;
        v6 = v12;
        break;
      default:
        v5 = v4;
        v6 = v12;
        break;
    }
  }
  return LODWORD(v5) | ((unint64_t)LODWORD(v6) << 32);
}

uint64_t sub_1B179CFC4()
{
  uint64_t *v0;

  if (sub_1B179FFA4())
  {
    if (qword_1EEF65528 != -1)
      dispatch_once(&qword_1EEF65528, &unk_1E63D4D98);
    v0 = &qword_1EEF65520;
  }
  else
  {
    if (qword_1ED4CECC0 != -1)
      dispatch_once(&qword_1ED4CECC0, &unk_1E63D1A90);
    v0 = &qword_1ED4CECB8;
  }
  return *v0;
}

uint64_t sub_1B179D044()
{
  if (qword_1EEF654E8 != -1)
    dispatch_once(&qword_1EEF654E8, &unk_1E63D15B0);
  return qword_1EEF654E0;
}

__n128 sub_1B179D084(CGColorRef color, CGColorSpace *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGColor *v10;
  CGColor *v11;
  size_t NumberOfComponents;
  float64x2_t *Components;
  __int32 v14;
  int8x16_t v15;
  float v16;
  __int128 v17;
  float v18;
  __int128 v20;

  if (!color)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"color");
  if (CGColorGetColorSpace(color) == a2)
    v10 = CGColorRetain(color);
  else
    v10 = (CGColor *)CGColorTransformConvertColor();
  v11 = v10;
  NumberOfComponents = CGColorGetNumberOfComponents(v10);
  Components = (float64x2_t *)CGColorGetComponents(v11);
  if (NumberOfComponents >= 4)
  {
    *(float *)&v14 = Components[1].f64[1];
    v15.i64[0] = 0;
    v15.i32[2] = 0;
    v15.i32[3] = v14;
LABEL_12:
    *(float32x2_t *)&v17 = vcvt_f32_f64(*Components);
    *((_QWORD *)&v17 + 1) = vextq_s8(v15, v15, 8uLL).u64[0];
    v18 = Components[1].f64[0];
LABEL_15:
    *((float *)&v17 + 2) = v18;
    goto LABEL_16;
  }
  if (NumberOfComponents == 2)
  {
    v16 = Components->f64[1];
    *((float *)&v17 + 3) = v16;
    goto LABEL_14;
  }
  if (NumberOfComponents >= 3)
  {
    v15 = (int8x16_t)xmmword_1B2244E20;
    goto LABEL_12;
  }
  v17 = xmmword_1B2244E20;
  if (NumberOfComponents)
  {
LABEL_14:
    v18 = Components->f64[0];
    *(float *)&v17 = v18;
    *((float *)&v17 + 1) = v18;
    goto LABEL_15;
  }
LABEL_16:
  v20 = v17;
  CGColorRelease(v11);
  return (__n128)v20;
}

uint64_t sub_1B179D1A8()
{
  if (qword_1EEF654B8 != -1)
    dispatch_once(&qword_1EEF654B8, &unk_1E63D0950);
  return qword_1EEF654B0;
}

uint64_t sub_1B179D1E8()
{
  if (qword_1ED4CEBA8 != -1)
    dispatch_once(&qword_1ED4CEBA8, &unk_1E63D4BE8);
  return qword_1ED4CEBA0;
}

uint64_t sub_1B179D228()
{
  if (qword_1EEF654F8 != -1)
    dispatch_once(&qword_1EEF654F8, &unk_1E63D4CA8);
  return qword_1EEF654F0;
}

double sub_1B179D268(CGColorRef color, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGColorSpace *v9;
  double result;

  if (qword_1EEF654F8 != -1)
    dispatch_once(&qword_1EEF654F8, &unk_1E63D4CA8);
  v9 = (CGColorSpace *)qword_1EEF654F0;
  if (qword_1EEF65528 != -1)
    dispatch_once(&qword_1EEF65528, &unk_1E63D4D98);
  *(_QWORD *)&result = sub_1B179D084(color, v9, qword_1EEF65520, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

uint64_t sub_1B179D2EC()
{
  if (qword_1EEF65508 != -1)
    dispatch_once(&qword_1EEF65508, &unk_1E63D1730);
  return qword_1EEF65500;
}

double sub_1B179D32C(CGColorRef color, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGColorSpace *v9;
  double result;

  if (qword_1EEF65518 != -1)
    dispatch_once(&qword_1EEF65518, &unk_1E63D1790);
  v9 = (CGColorSpace *)qword_1EEF65510;
  if (qword_1EEF65558 != -1)
    dispatch_once(&qword_1EEF65558, &unk_1E63D4E58);
  *(_QWORD *)&result = sub_1B179D084(color, v9, qword_1EEF65550, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

unint64_t sub_1B179D3B0(CGColorRef color, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  CGColorSpace *v11;
  CGColor *v12;
  CGColor *v13;
  size_t NumberOfComponents;
  const CGFloat *Components;
  float v16;
  unsigned __int32 v17;
  double v18;
  float v19;
  double v20;
  BOOL v21;
  float v22;
  float v23;
  float v25;

  if (color)
  {
    if ((a2 & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"color");
    if ((a2 & 1) != 0)
    {
LABEL_16:
      v12 = CGColorRetain(color);
      goto LABEL_20;
    }
  }
  if (sub_1B179FFA4())
  {
    if (qword_1EEF654F8 != -1)
      dispatch_once(&qword_1EEF654F8, &unk_1E63D4CA8);
    v10 = &qword_1EEF654F0;
  }
  else
  {
    if (qword_1ED4CEBA8 != -1)
      dispatch_once(&qword_1ED4CEBA8, &unk_1E63D4BE8);
    v10 = &qword_1ED4CEBA0;
  }
  v11 = (CGColorSpace *)*v10;
  if (CGColorGetColorSpace(color) == v11)
    goto LABEL_16;
  if (sub_1B179FFA4())
  {
    if (qword_1EEF65528 != -1)
      dispatch_once(&qword_1EEF65528, &unk_1E63D4D98);
  }
  else if (qword_1ED4CECC0 != -1)
  {
    dispatch_once(&qword_1ED4CECC0, &unk_1E63D1A90);
  }
  v12 = (CGColor *)CGColorTransformConvertColor();
LABEL_20:
  v13 = v12;
  NumberOfComponents = CGColorGetNumberOfComponents(v12);
  Components = CGColorGetComponents(v13);
  if (NumberOfComponents >= 4)
  {
LABEL_21:
    v16 = *Components;
    v25 = v16;
    v17 = vcvt_f32_f64(*(float64x2_t *)(Components + 1)).u32[0];
    goto LABEL_26;
  }
  if (NumberOfComponents == 2)
    goto LABEL_25;
  if (NumberOfComponents >= 3)
    goto LABEL_21;
  if (NumberOfComponents)
  {
LABEL_25:
    v18 = *Components;
    *(float *)&v18 = *Components;
    v25 = *(float *)&v18;
    v17 = vdup_lane_s32(*(int32x2_t *)&v18, 0).u32[0];
  }
  else
  {
    v17 = 0;
    v25 = 0.0;
  }
LABEL_26:
  CGColorRelease(v13);
  if (a2)
  {
    v19 = v25;
    v20 = v25;
    if (v25 <= 0.00001)
      v19 = 0.0;
    v21 = v20 < 0.99999;
    LODWORD(v20) = 1.0;
    if (v21)
      v22 = v19;
    else
      v22 = 1.0;
    if (v22 <= 0.00001)
      v23 = 0.0;
    else
      v23 = v22;
    if (v22 < 0.99999)
      *(float *)&v20 = v23;
    v17 = vdup_lane_s32(*(int32x2_t *)&v20, 0).u32[0];
  }
  else
  {
    v22 = v25;
  }
  return LODWORD(v22) | ((unint64_t)v17 << 32);
}

CGColorRef sub_1B179D614(float32x4_t a1)
{
  _OWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[0] = vcvtq_f64_f32(*(float32x2_t *)a1.f32);
  v2[1] = vcvt_hight_f64_f32(a1);
  if (qword_1EEF654F8 != -1)
    dispatch_once(&qword_1EEF654F8, &unk_1E63D4CA8);
  return CGColorCreate((CGColorSpaceRef)qword_1EEF654F0, (const CGFloat *)v2);
}

CGColorRef sub_1B179D69C(uint64_t a1, uint64_t a2)
{
  float32x4_t v3;
  CGFloat components[2];
  float64x2_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3.i64[0] = a1;
  v3.i64[1] = a2;
  sub_1B179D734(&v3);
  *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v3.f32);
  v5 = vcvtq_f64_f32(*(float32x2_t *)&v3.u32[2]);
  if (qword_1EEF654E8 != -1)
    dispatch_once(&qword_1EEF654E8, &unk_1E63D15B0);
  return CGColorCreate((CGColorSpaceRef)qword_1EEF654E0, components);
}

float64_t sub_1B179D734(float32x4_t *a1)
{
  float64_t result;
  float64x2_t v3;

  v3.f64[0] = 0.0;
  v3.f64[1] = a1->f32[3];
  if (sub_1B179FFA4())
  {
    if (qword_1EEF65538 != -1)
      dispatch_once(&qword_1EEF65538, &unk_1E63D4DF8);
    if (qword_1EEF654F8 != -1)
      dispatch_once(&qword_1EEF654F8, &unk_1E63D4CA8);
  }
  else
  {
    if (qword_1EEF65548 != -1)
      dispatch_once(&qword_1EEF65548, &unk_1E63D1AF0);
    if (qword_1ED4CEBA8 != -1)
      dispatch_once(&qword_1ED4CEBA8, &unk_1E63D4BE8);
  }
  CGColorTransformConvertColorComponents();
  result = v3.f64[0];
  *a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), v3);
  return result;
}

CGColorSpaceRef sub_1B179D8A0()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  qword_1EEF654B0 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B179D8C8()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  qword_1ED4CEBA0 = (uint64_t)result;
  return result;
}

uint64_t sub_1B179D8F0()
{
  if (qword_1EEF654C8 != -1)
    dispatch_once(&qword_1EEF654C8, &unk_1E63D4C28);
  return qword_1EEF654C0;
}

CGColorSpaceRef sub_1B179D930()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D978]);
  qword_1EEF654C0 = (uint64_t)result;
  return result;
}

uint64_t sub_1B179D958()
{
  if (qword_1EEF654D8 != -1)
    dispatch_once(&qword_1EEF654D8, &unk_1E63D1570);
  return qword_1EEF654D0;
}

CGColorSpaceRef sub_1B179D998()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9F0]);
  qword_1EEF654D0 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B179D9C0()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  qword_1EEF654E0 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B179D9E8()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D958]);
  qword_1EEF654F0 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B179DA10()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9E8]);
  qword_1EEF65500 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B179DA38()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9D0]);
  qword_1EEF65510 = (uint64_t)result;
  return result;
}

void sub_1B179DAE0(CGColorSpaceRef a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  CGColorConversionInfoRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGColorConversionInfoRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v40 = &v39;
  v41 = 0xA000000000;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v35 = 0;
  v36 = &v35;
  v37 = 0x2000000000;
  v38 = -1;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = -1;
  v5 = CGColorConversionInfoCreateFromList(0, a1, kCGColorConversionTransformFromSpace, kCGRenderingIntentDefault, a2, 1, 0, 0);
  if (v5)
  {
    v12 = v5;
    if ((CGColorConversionInfoIterateFunctionsWithCallbacks() & 1) == 0)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Failed to compute color conversion parameters for %@ → %@"), v13, v14, v15, v16, v17, v18, (uint64_t)a1);
      v19 = v40;
      *((_WORD *)v40 + 16) = 0;
      *((_BYTE *)v19 + 34) = 0;
    }
    CFRelease(v12);
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: No conversion info for %@ → %@, texture will be copied"), v6, v7, v8, v9, v10, v11, (uint64_t)a1);
  }
  if (!*((_BYTE *)v40 + 33))
  {
    if (*((_BYTE *)v40 + 34))
    {
      if (*((_BYTE *)v40 + 32) || *((_DWORD *)v32 + 6) != 4)
        goto LABEL_7;
    }
    else if (!*((_BYTE *)v40 + 32) || *((_DWORD *)v36 + 6) != 1)
    {
      goto LABEL_7;
    }
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Color matching for %@ → %@ could be done more efficiently by switching to a _sRGB variant of the MTLPixelFormat"), v20, v21, v22, v23, v24, v25, (uint64_t)a1);
  }
LABEL_7:
  v26 = v40;
  v27 = *((_OWORD *)v40 + 7);
  a3[4] = *((_OWORD *)v40 + 6);
  a3[5] = v27;
  v28 = *((_OWORD *)v26 + 9);
  a3[6] = *((_OWORD *)v26 + 8);
  a3[7] = v28;
  v29 = *((_OWORD *)v26 + 3);
  *a3 = *((_OWORD *)v26 + 2);
  a3[1] = v29;
  v30 = *((_OWORD *)v26 + 5);
  a3[2] = *((_OWORD *)v26 + 4);
  a3[3] = v30;
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
}

uint64_t sub_1B179DD2C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 52) + 8 * *a5);
  if (a4 >= 2)
  {
    v12 = a4 - 1;
    v13 = a5 + 1;
    do
    {
      v14 = *v13++;
      if (*(_QWORD *)(*(_QWORD *)(a2 + 52) + 8 * v14) != v11)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Unsupported conversion info - different TRCs for input components"), a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"trcOther == trc");
      --v12;
    }
    while (v12);
  }
  v15 = CGColorTRCGetGammaID();
  if (v15 == 7)
    return 1;
  v17 = v15;
  CGColorTRCGetFunction();
  if (!a3)
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v17;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 32) = 1;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 36) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 40) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 44) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 48) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 52) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 56) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 60) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 64) = 0;
    return 1;
  }
  if (*(_QWORD *)(a2 + 4) - 1 == a3)
  {
    *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v17;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 34) = 1;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 128) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 132) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 136) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 140) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 144) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 148) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 152) = 0;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 156) = 0;
    return 1;
  }
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: Unsupported conversion info - stage %d of %d will be ignored!"), v18, v19, v20, v21, v22, v23, a3);
  return 0;
}

BOOL sub_1B179DF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];

  v8 = *(_QWORD *)(a2 + 36);
  if (v8 == 1)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 33) = 1;
    memset(v14, 0, 24);
    CGColorMatrixGetMatrix();
    v10 = 0u;
    DWORD1(v10) = 0;
    DWORD2(v10) = 0;
    *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 80) = v10;
    v11 = *(_OWORD *)((char *)v14 + 4);
    DWORD1(v11) = 0;
    DWORD2(v11) = 0;
    *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 96) = v11;
    v12 = *(_OWORD *)((char *)v14 + 8);
    DWORD1(v12) = 0;
    DWORD2(v12) = 0;
    *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 112) = v12;
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Unsupported conversion info - %d color matrices"), a3, a4, a5, a6, a7, a8, *(_QWORD *)(a2 + 36));
  }
  return v8 == 1;
}

uint64_t sub_1B179E084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  sub_1B17C4408(16, (uint64_t)CFSTR("Error: Unsupported conversion info - NxMLUTs not supported"), a3, a4, a5, a6, a7, a8, vars0);
  return 0;
}

uint64_t sub_1B179E0A8()
{
  uint64_t result;

  if (qword_1EEF654F8 != -1)
    dispatch_once(&qword_1EEF654F8, &unk_1E63D4CA8);
  result = MEMORY[0x1B5E22614](qword_1EEF654F0, 0);
  qword_1EEF65520 = result;
  return result;
}

uint64_t sub_1B179E0F8()
{
  uint64_t result;

  if (qword_1ED4CEBA8 != -1)
    dispatch_once(&qword_1ED4CEBA8, &unk_1E63D4BE8);
  result = MEMORY[0x1B5E22614](qword_1ED4CEBA0, 0);
  qword_1ED4CECB8 = result;
  return result;
}

uint64_t sub_1B179E148()
{
  uint64_t result;

  if (qword_1EEF654E8 != -1)
    dispatch_once(&qword_1EEF654E8, &unk_1E63D15B0);
  result = MEMORY[0x1B5E22614](qword_1EEF654E0, 0);
  qword_1EEF65530 = result;
  return result;
}

uint64_t sub_1B179E198()
{
  uint64_t result;

  if (qword_1EEF654B8 != -1)
    dispatch_once(&qword_1EEF654B8, &unk_1E63D0950);
  result = MEMORY[0x1B5E22614](qword_1EEF654B0, 0);
  qword_1EEF65540 = result;
  return result;
}

uint64_t sub_1B179E1E8()
{
  uint64_t result;

  if (qword_1EEF65518 != -1)
    dispatch_once(&qword_1EEF65518, &unk_1E63D1790);
  result = MEMORY[0x1B5E22614](qword_1EEF65510, 0);
  qword_1EEF65550 = result;
  return result;
}

void *sub_1B179E238(size_t a1)
{
  return malloc_type_malloc(a1, 0xDCFB6CECuLL);
}

void *sub_1B179E244(size_t a1)
{
  return malloc_type_malloc(a1, 0xE0978C61uLL);
}

uint64_t sub_1B179E250(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 45)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unknown type"), a3, a4, a5, a6, a7, a8, (uint64_t)"type < kCFXBaseTypeCount");
  return qword_1B2245488[a1];
}

uint64_t sub_1B179E2A4(const __CFString *a1)
{
  CFRange v2;
  const __CFString *v3;
  uint64_t IntValue;
  CFRange v6;

  v2 = CFStringFind(a1, CFSTR("["), 4uLL);
  if (!v2.length)
    return 1;
  v6.length = CFStringGetLength(a1) - v2.location - 2;
  v6.location = v2.location + 1;
  v3 = CFStringCreateWithSubstring(0, a1, v6);
  IntValue = CFStringGetIntValue(v3);
  CFRelease(v3);
  return IntValue;
}

CFComparisonResult sub_1B179E324(const __CFString *a1)
{
  CFRange v2;
  const __CFString *v3;
  CFComparisonResult v4;
  CFRange v6;

  v2 = CFStringFind(a1, CFSTR("["), 4uLL);
  if (!v2.length)
    return sub_1B179E390(a1);
  v6.length = v2.location;
  v6.location = 0;
  v3 = CFStringCreateWithSubstring(0, a1, v6);
  v4 = sub_1B179E390(v3);
  CFRelease(v3);
  return v4;
}

CFComparisonResult sub_1B179E390(const __CFString *a1)
{
  CFComparisonResult result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (CFStringCompare(a1, CFSTR("int"), 0) == kCFCompareEqualTo)
    return 2;
  if (CFStringCompare(a1, CFSTR("BOOL"), 0) == kCFCompareEqualTo)
    return 3;
  if (CFStringCompare(a1, CFSTR("texture1d"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("texture2d"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("texture3d"), 0) == kCFCompareEqualTo
    || CFStringCompare(a1, CFSTR("texturecube"), 0) == kCFCompareEqualTo)
  {
    return 5;
  }
  if (CFStringCompare(a1, CFSTR("float"), 0) == kCFCompareEqualTo)
    return 1;
  if (CFStringCompare(a1, CFSTR("float2"), 0) == kCFCompareEqualTo)
    return 7;
  if (CFStringCompare(a1, CFSTR("float3"), 0) == kCFCompareEqualTo)
    return 8;
  if (CFStringCompare(a1, CFSTR("float4"), 0) == kCFCompareEqualTo)
    return 9;
  if (CFStringCompare(a1, CFSTR("int2"), 0) == kCFCompareEqualTo)
    return 17;
  if (CFStringCompare(a1, CFSTR("int3"), 0) == kCFCompareEqualTo)
    return 18;
  if (CFStringCompare(a1, CFSTR("int4"), 0) == kCFCompareEqualTo)
    return 19;
  if (CFStringCompare(a1, CFSTR("float4x4"), 0) == kCFCompareEqualTo)
    return 10;
  result = CFStringCompare(a1, CFSTR("none"), 0);
  if (result)
  {
    result = CFStringCompare(a1, CFSTR("sampler"), 0);
    if (result)
    {
      sub_1B17C4408(0, (uint64_t)CFSTR("Warning: CFXBaseTypeFromMetalString: unknown type name '%@'"), v3, v4, v5, v6, v7, v8, (uint64_t)a1);
      return 0;
    }
  }
  return result;
}

const __CFString *sub_1B179E5A0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 45)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unknown type"), a3, a4, a5, a6, a7, a8, (uint64_t)"type < kCFXBaseTypeCount");
  }
  else if (a1 <= 0x2C)
  {
    return off_1E63D4E78[(unsigned __int16)a1];
  }
  return CFSTR("unknown type");
}

uint64_t sub_1B179E600(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (a1 < 0x2D)
  {
    return (__int16)word_1B22455F0[3 * (unsigned __int16)a1];
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown type"), a3, a4, a5, a6, a7, a8, vars0);
    return 0;
  }
}

uint64_t sub_1B179E64C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (a1 < 0x2D)
    return HIBYTE(word_1B22455F0[3 * (unsigned __int16)a1 + 1]);
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown type"), a3, a4, a5, a6, a7, a8, vars0);
  return 1;
}

uint64_t sub_1B179E694(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (a1 < 0x2D)
    return LOBYTE(word_1B22455F0[3 * (unsigned __int16)a1 + 1]);
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown type"), a3, a4, a5, a6, a7, a8, vars0);
  return 0;
}

unint64_t sub_1B179E6DC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (a1 < 0x2D)
    return (0x1FFC0CF05FC2uLL >> a1) & 1;
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown type"), a3, a4, a5, a6, a7, a8, v8);
  return 0;
}

uint64_t sub_1B179E720(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  char v9;
  unint64_t v10;
  const char *v11;

  LOWORD(v8) = a1;
  switch(a1)
  {
    case 1:
      if ((a2 - 1) < 4)
      {
        v9 = 16 * (a2 - 1);
        v10 = 0x9000800070001;
        goto LABEL_19;
      }
      v11 = "kCFXBaseTypeFloat";
      goto LABEL_48;
    case 2:
      if ((a2 - 1) < 4)
      {
        v9 = 16 * (a2 - 1);
        v10 = 0x13001200110002;
        goto LABEL_19;
      }
      v11 = "kCFXBaseTypeInteger";
      goto LABEL_48;
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 17:
    case 18:
    case 19:
      goto LABEL_8;
    case 4:
      if (a2 == 1)
      {
        LOWORD(v8) = 4;
        return (__int16)v8;
      }
      if (a2 == 4)
      {
        LOWORD(v8) = 25;
        return (__int16)v8;
      }
      v11 = "kCFXBaseTypeChar";
      goto LABEL_48;
    case 13:
      if ((a2 - 1) < 4)
      {
        v9 = 16 * (a2 - 1);
        v10 = 0x210020001F000DLL;
        goto LABEL_19;
      }
      v11 = "kCFXBaseTypeShort";
      goto LABEL_48;
    case 14:
      if ((a2 - 1) >= 4)
      {
        v11 = "kCFXBaseTypeHalf";
        goto LABEL_48;
      }
      v9 = 16 * (a2 - 1);
      v10 = 0x2C002B002A000ELL;
LABEL_19:
      v8 = v10 >> v9;
      return (__int16)v8;
    case 15:
      if (a2 == 1)
      {
        LOWORD(v8) = 15;
        return (__int16)v8;
      }
      if (a2 == 4)
      {
        LOWORD(v8) = 24;
        return (__int16)v8;
      }
      v11 = "kCFXBaseTypeUnsignedChar";
      goto LABEL_48;
    case 16:
      if ((a2 - 1) < 4)
      {
        v8 = 0x1E001D001C0010uLL >> (16 * (a2 - 1));
        return (__int16)v8;
      }
      v11 = "kCFXBaseTypeUnsignedShort";
      goto LABEL_48;
    case 20:
      if (a2 == 1)
      {
        LOWORD(v8) = 20;
        return (__int16)v8;
      }
      if (a2 == 4)
      {
        LOWORD(v8) = 26;
        return (__int16)v8;
      }
      v11 = "kCFXBaseTypeUnsignedCharNormalized";
      goto LABEL_48;
    case 21:
      if (a2 == 1)
      {
        LOWORD(v8) = 21;
        return (__int16)v8;
      }
      if (a2 == 4)
      {
        LOWORD(v8) = 27;
        return (__int16)v8;
      }
      v11 = "kCFXBaseTypeCharNormalized";
      goto LABEL_48;
    default:
      if (a1 == 34)
      {
        if ((a2 - 1) < 4)
        {
          LOWORD(v8) = a2 + 33;
          return (__int16)v8;
        }
        v11 = "kCFXBaseTypeUnsignedShortNormalized";
        goto LABEL_48;
      }
      if (a1 == 38)
      {
        if ((a2 - 1) < 4)
        {
          LOWORD(v8) = a2 + 37;
          return (__int16)v8;
        }
        v11 = "kCFXBaseTypeShortNormalized";
LABEL_48:
        sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Compound type %s%d is not supported"), a3, a4, a5, a6, a7, a8, (uint64_t)v11);
        return (__int16)v8;
      }
LABEL_8:
      if (a2 != 1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Only one compound type per vector"), a3, a4, a5, a6, a7, a8, (uint64_t)"componentCount == 1");
      return (__int16)v8;
  }
}

BOOL sub_1B179E998(int a1, uint64_t *a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 >= 45)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unknown type"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"type < kCFXBaseTypeCount");
  if (!a2 || !a3 || !a4)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong parameters"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"bytesPerComponent && componentsCount && floatComponents");
  v12 = (unsigned __int8 *)&word_1B22455F0[3 * a1];
  v13 = v12[2];
  v14 = v12[3];
  LOBYTE(v12) = v12[4];
  *a2 = v13;
  *a3 = v14;
  *a4 = v12 & 1;
  return sub_1B179EA58(*a2, v14, v12 & 1, (uint64_t)a4, a5, a6, a7, a8) == a1;
}

uint64_t sub_1B179EA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v15;

  LOWORD(v9) = 6;
  switch(a1)
  {
    case 1:
      if ((_DWORD)a3)
        goto LABEL_10;
      goto LABEL_20;
    case 2:
      v10 = a2 - 1;
      if ((_DWORD)a3)
      {
        if ((unint64_t)(a2 - 1) >= 4)
          goto LABEL_10;
        v11 = 16 * v10;
        v12 = 0x2C002B002A000ELL;
      }
      else
      {
        if ((unint64_t)(a2 - 1) >= 4)
          goto LABEL_20;
        v11 = 16 * v10;
        v12 = 0x210020001F000DLL;
      }
      goto LABEL_19;
    case 4:
      v13 = a2 - 1;
      if ((_DWORD)a3)
      {
        if ((unint64_t)(a2 - 1) < 4)
        {
          v9 = 0x9000800070001uLL >> (16 * v13);
          return (__int16)v9;
        }
LABEL_10:
        if ((byte_1EEF65560 & 1) == 0)
        {
          byte_1EEF65560 = 1;
          sub_1B17C4408(16, (uint64_t)CFSTR("Warning: CFXBaseTypeFromDescription - signed/unsigned ambiguity"), a3, a4, a5, a6, a7, a8, v15);
        }
        if (a2 != 1)
        {
          if (a2 == 4)
          {
            LOWORD(v9) = 26;
            return (__int16)v9;
          }
LABEL_25:
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXBaseTypeFromDescription - Type not supported"), a3, a4, a5, a6, a7, a8, v15);
          LOWORD(v9) = 0;
          return (__int16)v9;
        }
        LOWORD(v9) = 20;
      }
      else if ((unint64_t)(a2 - 1) >= 4)
      {
LABEL_20:
        if ((byte_1EEF65561 & 1) == 0)
        {
          byte_1EEF65561 = 1;
          sub_1B17C4408(16, (uint64_t)CFSTR("Warning: CFXBaseTypeFromDescription - signed/unsigned ambiguity"), a3, a4, a5, a6, a7, a8, v15);
        }
        if (a2 != 1)
        {
          if (a2 == 4)
          {
            LOWORD(v9) = 24;
            return (__int16)v9;
          }
          goto LABEL_25;
        }
        LOWORD(v9) = 15;
      }
      else
      {
        v11 = 16 * v13;
        v12 = 0x13001200110002;
LABEL_19:
        v9 = v12 >> v11;
      }
      return (__int16)v9;
    case 8:
      return (__int16)v9;
    default:
      goto LABEL_25;
  }
}

void sub_1B179EBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v13;
  const __CFString *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;

  if (a2)
  {
    if (a3)
      goto LABEL_3;
LABEL_7:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_b");
    if (a4)
      goto LABEL_4;
LABEL_8:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_dst");
    goto LABEL_4;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_a");
  if (!a3)
    goto LABEL_7;
LABEL_3:
  if (!a4)
    goto LABEL_8;
LABEL_4:
  switch((int)a1)
  {
    case 1:
      *(float *)a4 = *(float *)a2 + *(float *)a3;
      return;
    case 2:
      *(_DWORD *)a4 = *(_DWORD *)a3 + *(_DWORD *)a2;
      return;
    case 3:
    case 4:
    case 5:
    case 11:
    case 15:
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXAddBaseType - type %d can't be added"), a3, a4, a5, a6, a7, a8, a1);
      return;
    case 6:
      v13 = *(double *)a2 + *(double *)a3;
      goto LABEL_16;
    case 7:
    case 17:
      v13 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)a2, *(float32x2_t *)a3));
LABEL_16:
      *(double *)a4 = v13;
      return;
    case 8:
    case 9:
    case 18:
    case 19:
      *(float32x4_t *)a4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
      return;
    case 10:
      v15 = vaddq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a3 + 16));
      v16 = vaddq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a3 + 32));
      v17 = vaddq_f32(*(float32x4_t *)(a2 + 48), *(float32x4_t *)(a3 + 48));
      *(float32x4_t *)a4 = vaddq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
      *(float32x4_t *)(a4 + 16) = v15;
      *(float32x4_t *)(a4 + 32) = v16;
      *(float32x4_t *)(a4 + 48) = v17;
      return;
    case 12:
      sub_1B179CDD4((float *)a2, (float *)a3, (float *)a4);
      return;
    case 13:
    case 16:
      *(_WORD *)a4 = *(_WORD *)a3 + *(_WORD *)a2;
      return;
    case 14:
      v14 = CFSTR("Error: CFXAddBaseType - addition of half float not supported");
      goto LABEL_21;
    default:
      v14 = CFSTR("Error: CFXAddBaseType - unknown type");
LABEL_21:
      sub_1B17C4408(16, (uint64_t)v14, a3, a4, a5, a6, a7, a8, a9);
      return;
  }
}

void sub_1B179ED9C(uint64_t a1, _OWORD *a2, float32x4_t *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[4];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  if (a2)
  {
    if (a3)
      goto LABEL_3;
LABEL_10:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"_b");
    if (a4)
      goto LABEL_4;
    goto LABEL_11;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"_a");
  if (!a3)
    goto LABEL_10;
LABEL_3:
  if (a4)
    goto LABEL_4;
LABEL_11:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"_dst");
LABEL_4:
  if ((_DWORD)a1 == 10)
  {
    v13 = 0;
    v14 = *a3;
    v15 = a3[1];
    v16 = a3[2];
    v17 = a3[3];
    v18 = a2[1];
    v19 = a2[2];
    v20 = a2[3];
    v24[0] = *a2;
    v24[1] = v18;
    v24[2] = v19;
    v24[3] = v20;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    do
    {
      *(__int128 *)((char *)&v25 + v13 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(v24[v13])), v15, *(float32x2_t *)&v24[v13], 1), v16, (float32x4_t)v24[v13], 2), v17, (float32x4_t)v24[v13], 3);
      ++v13;
    }
    while (v13 != 4);
    v21 = v26;
    v22 = v27;
    v23 = v28;
    *a4 = v25;
    a4[1] = v21;
    a4[2] = v22;
    a4[3] = v23;
  }
  else
  {
    sub_1B179EBD4(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  }
}

void sub_1B179EED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v13;
  const __CFString *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;

  if (a2)
  {
    if (a3)
      goto LABEL_3;
LABEL_7:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_b");
    if (a4)
      goto LABEL_4;
LABEL_8:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_dst");
    goto LABEL_4;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_a");
  if (!a3)
    goto LABEL_7;
LABEL_3:
  if (!a4)
    goto LABEL_8;
LABEL_4:
  switch((int)a1)
  {
    case 1:
      *(float *)a4 = *(float *)a2 - *(float *)a3;
      return;
    case 2:
      *(_DWORD *)a4 = *(_DWORD *)a2 - *(_DWORD *)a3;
      return;
    case 3:
    case 4:
    case 5:
    case 11:
    case 15:
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXSubBaseType - type %d can't be substracted"), a3, a4, a5, a6, a7, a8, a1);
      return;
    case 6:
      v13 = *(double *)a2 - *(double *)a3;
      goto LABEL_16;
    case 7:
    case 17:
      v13 = COERCE_DOUBLE(vsub_f32(*(float32x2_t *)a2, *(float32x2_t *)a3));
LABEL_16:
      *(double *)a4 = v13;
      return;
    case 8:
    case 9:
    case 18:
    case 19:
      *(float32x4_t *)a4 = vsubq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
      return;
    case 10:
      v15 = vsubq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a3 + 16));
      v16 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a3 + 32));
      v17 = vsubq_f32(*(float32x4_t *)(a2 + 48), *(float32x4_t *)(a3 + 48));
      *(float32x4_t *)a4 = vsubq_f32(*(float32x4_t *)a2, *(float32x4_t *)a3);
      *(float32x4_t *)(a4 + 16) = v15;
      *(float32x4_t *)(a4 + 32) = v16;
      *(float32x4_t *)(a4 + 48) = v17;
      return;
    case 12:
      sub_1B179CE18((float *)a2, (float *)a3, (float *)a4);
      return;
    case 13:
    case 16:
      *(_WORD *)a4 = *(_WORD *)a2 - *(_WORD *)a3;
      return;
    case 14:
      v14 = CFSTR("Error: CFXSubBaseType - substraction of half float not supported");
      goto LABEL_21;
    default:
      v14 = CFSTR("Error: CFXSubBaseType - unknown type");
LABEL_21:
      sub_1B17C4408(16, (uint64_t)v14, a3, a4, a5, a6, a7, a8, a9);
      return;
  }
}

uint64_t sub_1B179F098(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](MEMORY[0x1E0CB34E8], sel_stringFromByteCount_countStyle_, a1, 3);
}

const char *sub_1B179F0AC(const char *result)
{
  char *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v1 = (char *)result;
    result = CFStringGetCStringPtr((CFStringRef)result, 0x600u);
    if (!result)
      return (const char *)objc_msgSend_UTF8String(v1, v2, v3, v4);
  }
  return result;
}

CFCharacterSetRef sub_1B179F0E8(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, char a5)
{
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  CFCharacterSetRef result;

  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a4;
  if (theString)
  {
    *(_QWORD *)(a1 + 144) = theString;
    *(_QWORD *)(a1 + 168) = a3;
    *(_QWORD *)(a1 + 176) = a4;
    CharactersPtr = CFStringGetCharactersPtr(theString);
    *(_QWORD *)(a1 + 152) = CharactersPtr;
    if (CharactersPtr)
      CStringPtr = 0;
    else
      CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
    *(_QWORD *)(a1 + 160) = CStringPtr;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
  }
  *(_QWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = a5;
  *(_QWORD *)(a1 + 224) = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  result = CFCharacterSetGetPredefined(kCFCharacterSetAlphaNumeric);
  *(_QWORD *)(a1 + 232) = result;
  return result;
}

uint64_t sub_1B179F174(uint64_t a1)
{
  return sub_1B179F7E4(a1, 0);
}

uint64_t sub_1B179F17C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200);
}

void sub_1B179F188(UniChar *buffer, uint64_t *a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  UniChar v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFRange v13;

  for (i = *a2; i < a3; *a2 = i)
  {
    if (i < 0 || (v7 = *((_QWORD *)buffer + 20), v7 <= i))
    {
      v9 = 0;
    }
    else
    {
      v8 = *((_QWORD *)buffer + 17);
      if (v8)
      {
        v9 = *(_WORD *)(v8 + 2 * (*((_QWORD *)buffer + 19) + i));
      }
      else
      {
        v10 = *((_QWORD *)buffer + 18);
        if (v10)
        {
          v9 = *(char *)(v10 + *((_QWORD *)buffer + 19) + i);
        }
        else
        {
          if (*((_QWORD *)buffer + 22) <= i || (v11 = *((_QWORD *)buffer + 21), v11 > i))
          {
            v12 = i - 4;
            if ((unint64_t)i < 4)
              v12 = 0;
            if (v12 + 64 < v7)
              v7 = v12 + 64;
            *((_QWORD *)buffer + 21) = v12;
            *((_QWORD *)buffer + 22) = v7;
            v13.location = *((_QWORD *)buffer + 19) + v12;
            v13.length = v7 - v12;
            CFStringGetCharacters(*((CFStringRef *)buffer + 16), v13, buffer);
            v11 = *((_QWORD *)buffer + 21);
          }
          v9 = buffer[i - v11];
        }
      }
    }
    if (v9 != 12288 && (unsigned __int16)(v9 - 0x2000) >= 0xCu && v9 >= 0x21u && (unsigned __int16)(v9 - 127) > 0x21u)
      break;
    i = *a2 + 1;
  }
}

BOOL sub_1B179F2AC(const __CFString *a1, const __CFString *a2)
{
  CFIndex Length;
  CFIndex v5;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  const __CFString *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  UniChar v13;
  uint64_t v14;
  UniChar v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  UniChar v23[8];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CFStringRef v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  UniChar buffer[8];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  CFStringRef theString;
  const UniChar *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CFRange v50;
  CFRange v51;

  Length = CFStringGetLength(a1);
  v5 = CFStringGetLength(a2);
  theString = a1;
  v46 = 0;
  v47 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0;
  v44 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  v48 = 0;
  v49 = 0;
  v45 = CStringPtr;
  v31[0] = a2;
  v33 = (unint64_t)v5;
  v34 = 0;
  v8 = (const __CFString *)CFStringGetCharactersPtr(a2);
  v9 = 0;
  v31[1] = v8;
  if (!v8)
    v9 = CFStringGetCStringPtr(a2, 0x600u);
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  *(_OWORD *)buffer = 0u;
  v36 = 0u;
  *((_QWORD *)&v33 + 1) = 0;
  v34 = 0;
  *(_QWORD *)&v32 = v9;
  v21 = 0;
  v22 = 0;
  sub_1B179F188(buffer, &v22, Length);
LABEL_6:
  sub_1B179F188(v23, &v21, v5);
  v10 = v21;
  while (1)
  {
    if (v10 == v5)
      return 1;
    v11 = v22;
    if (v22 == Length)
      goto LABEL_51;
    if (v22 < 0 || (v12 = v47, v47 <= v22))
    {
      v13 = 0;
    }
    else if (v44)
    {
      v13 = v44[v46 + v22];
    }
    else if (v45)
    {
      v13 = v45[v46 + v22];
    }
    else
    {
      if (v49 <= v22 || (v16 = v48, v48 > v22))
      {
        v17 = v22 - 4;
        if ((unint64_t)v22 < 4)
          v17 = 0;
        if (v17 + 64 < v47)
          v12 = v17 + 64;
        v48 = v17;
        v49 = v12;
        v50.location = v46 + v17;
        v50.length = v12 - v17;
        CFStringGetCharacters(theString, v50, buffer);
        v16 = v48;
      }
      v13 = buffer[v11 - v16];
    }
    if (v10 < 0 || (v14 = v33, (uint64_t)v33 <= v10))
    {
      v15 = 0;
    }
    else if (v31[1])
    {
      v15 = *((_WORD *)&v31[1]->isa + *((_QWORD *)&v32 + 1) + v10);
    }
    else if ((_QWORD)v32)
    {
      v15 = *(char *)(v32 + *((_QWORD *)&v32 + 1) + v10);
    }
    else
    {
      if (v34 <= v10 || (v18 = *((_QWORD *)&v33 + 1), *((uint64_t *)&v33 + 1) > v10))
      {
        v19 = v10 - 4;
        if ((unint64_t)v10 < 4)
          v19 = 0;
        if (v19 + 64 < (uint64_t)v33)
          v14 = v19 + 64;
        *((_QWORD *)&v33 + 1) = v19;
        v34 = v14;
        v51.location = *((_QWORD *)&v32 + 1) + v19;
        v51.length = v14 - v19;
        CFStringGetCharacters(v31[0], v51, v23);
        v18 = *((_QWORD *)&v33 + 1);
      }
      v15 = v23[v10 - v18];
    }
    if (v15 == 12288
      || (unsigned __int16)(v15 - 0x2000) < 0xCu
      || v15 < 0x21u
      || (unsigned __int16)(v15 - 127) <= 0x21u)
    {
      if (v13 == 12288
        || (unsigned __int16)(v13 - 0x2000) < 0xCu
        || v13 < 0x21u
        || (unsigned __int16)(v13 - 127) <= 0x21u)
      {
        sub_1B179F188(buffer, &v22, Length);
        goto LABEL_6;
      }
LABEL_51:
      sub_1B179F188(v23, &v21, v5);
      return v21 == v5;
    }
    if (v13 != v15)
      return 0;
    v21 = ++v10;
    v22 = v11 + 1;
  }
}

uint64_t sub_1B179F5E4()
{
  uint64_t result;
  int v1;
  size_t v2;
  int v3;

  result = dword_1EEF54D30;
  if (dword_1EEF54D30 == -1)
  {
    dword_1EEF54D30 = 0;
    v3 = 0;
    v2 = 4;
    if (!sysctlbyname("hw.optional.sse2", &v3, &v2, 0, 0) && v3)
      dword_1EEF54D30 |= 1u;
    v3 = 0;
    v2 = 4;
    if (!sysctlbyname("hw.optional.sse3", &v3, &v2, 0, 0) && v3)
      dword_1EEF54D30 |= 2u;
    v3 = 0;
    v2 = 4;
    if (!sysctlbyname("hw.optional.supplementalsse3", &v3, &v2, 0, 0) && v3)
      dword_1EEF54D30 |= 2u;
    v3 = 0;
    v2 = 4;
    if (!sysctlbyname("hw.optional.sse4_1", &v3, &v2, 0, 0) && v3)
      dword_1EEF54D30 |= 8u;
    v3 = 0;
    v2 = 4;
    if (!sysctlbyname("hw.optional.sse4_2", &v3, &v2, 0, 0) && v3)
      dword_1EEF54D30 |= 0x10u;
    v3 = 0;
    v2 = 4;
    if (!sysctlbyname("hw.optional.avx1_0", &v3, &v2, 0, 0) && v3)
      dword_1EEF54D30 |= 0x20u;
    v3 = 0;
    v2 = 4;
    v1 = sysctlbyname("hw.optional.fma", &v3, &v2, 0, 0);
    result = dword_1EEF54D30;
    if (!v1)
    {
      if (v3)
      {
        result = dword_1EEF54D30 | 0x40u;
        dword_1EEF54D30 |= 0x40u;
      }
    }
  }
  return result;
}

uint64_t sub_1B179F7DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 217);
}

uint64_t sub_1B179F7E4(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  UniChar v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  UniChar v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  UniChar v32;
  int IsCharacterMember;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CFRange v39;
  CFRange v40;
  CFRange v41;

  result = 0;
  v4 = *(_QWORD *)(a1 + 208) + *(_QWORD *)(a1 + 200);
  v5 = *(_QWORD *)(a1 + 8) + *(_QWORD *)a1;
  *(_BYTE *)(a1 + 217) = 0;
  if (v4 >= v5)
    return result;
  v7 = a1 + 16;
  while (1)
  {
    v8 = v4 - *(_QWORD *)a1;
    if (v8 < 0 || (v9 = *(_QWORD *)(a1 + 176), v9 <= v8))
    {
      v11 = 0;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 152);
      if (v10)
      {
        v11 = *(_WORD *)(v10 + 2 * (*(_QWORD *)(a1 + 168) + v8));
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 160);
        if (v22)
        {
          v11 = *(char *)(v22 + *(_QWORD *)(a1 + 168) + v8);
        }
        else
        {
          if (*(_QWORD *)(a1 + 192) <= v8 || (v23 = *(_QWORD *)(a1 + 184), v23 > v8))
          {
            v24 = v8 - 4;
            if ((unint64_t)v8 < 4)
              v24 = 0;
            if (v24 + 64 < v9)
              v9 = v24 + 64;
            *(_QWORD *)(a1 + 184) = v24;
            *(_QWORD *)(a1 + 192) = v9;
            v40.location = *(_QWORD *)(a1 + 168) + v24;
            v40.length = v9 - v24;
            CFStringGetCharacters(*(CFStringRef *)(a1 + 144), v40, (UniChar *)(a1 + 16));
            v23 = *(_QWORD *)(a1 + 184);
          }
          v11 = *(_WORD *)(v7 + 2 * (v8 - v23));
        }
      }
    }
    ++v4;
    if (CFCharacterSetIsCharacterMember(*(CFCharacterSetRef *)(a1 + 224), v11))
    {
      v12 = v4;
      do
      {
        v4 = v12;
        v13 = v12 - *(_QWORD *)a1;
        if (v13 < 0 || (v14 = *(_QWORD *)(a1 + 176), v14 <= v13))
        {
          v16 = 0;
        }
        else
        {
          v15 = *(_QWORD *)(a1 + 152);
          if (v15)
          {
            v16 = *(_WORD *)(v15 + 2 * (*(_QWORD *)(a1 + 168) + v13));
          }
          else
          {
            v17 = *(_QWORD *)(a1 + 160);
            if (v17)
            {
              v16 = *(char *)(v17 + *(_QWORD *)(a1 + 168) + v13);
            }
            else
            {
              if (*(_QWORD *)(a1 + 192) <= v13 || (v18 = *(_QWORD *)(a1 + 184), v18 > v13))
              {
                v19 = v13 - 4;
                if ((unint64_t)v13 < 4)
                  v19 = 0;
                if (v19 + 64 < v14)
                  v14 = v19 + 64;
                *(_QWORD *)(a1 + 184) = v19;
                *(_QWORD *)(a1 + 192) = v14;
                v39.location = *(_QWORD *)(a1 + 168) + v19;
                v39.length = v14 - v19;
                CFStringGetCharacters(*(CFStringRef *)(a1 + 144), v39, (UniChar *)(a1 + 16));
                v18 = *(_QWORD *)(a1 + 184);
              }
              v16 = *(_WORD *)(v7 + 2 * (v13 - v18));
            }
          }
        }
        v12 = v4 + 1;
      }
      while (CFCharacterSetIsCharacterMember(*(CFCharacterSetRef *)(a1 + 224), v16));
      v20 = *(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 208);
      *(_QWORD *)(a1 + 200) = v20;
      *(_QWORD *)(a1 + 208) = v4 - v20;
      if (*(_BYTE *)(a1 + 216))
      {
        result = 1;
        *(_BYTE *)(a1 + 217) = 1;
        return result;
      }
      goto LABEL_32;
    }
    if (v11 == 95 || CFCharacterSetIsCharacterMember(*(CFCharacterSetRef *)(a1 + 232), v11))
      break;
    v21 = *(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 208);
    *(_QWORD *)(a1 + 200) = v21;
    *(_QWORD *)(a1 + 208) = v4 - v21;
    if (*(_BYTE *)(a1 + 216))
      return 1;
LABEL_32:
    if (v4 >= v5)
      return 0;
  }
  v25 = 0;
  v26 = v4;
  do
  {
LABEL_45:
    v27 = v26;
    while (1)
    {
      v26 = v27;
      v28 = v4++;
      v29 = v28 - *(_QWORD *)a1;
      if (v29 < 0 || (v30 = *(_QWORD *)(a1 + 176), v30 <= v29))
      {
        v32 = 0;
      }
      else
      {
        v31 = *(_QWORD *)(a1 + 152);
        if (v31)
        {
          v32 = *(_WORD *)(v31 + 2 * (*(_QWORD *)(a1 + 168) + v29));
        }
        else
        {
          v35 = *(_QWORD *)(a1 + 160);
          if (v35)
          {
            v32 = *(char *)(v35 + *(_QWORD *)(a1 + 168) + v29);
          }
          else
          {
            if (*(_QWORD *)(a1 + 192) <= v29 || (v36 = *(_QWORD *)(a1 + 184), v36 > v29))
            {
              v37 = v29 - 4;
              if ((unint64_t)v29 < 4)
                v37 = 0;
              if (v37 + 64 < v30)
                v30 = v37 + 64;
              *(_QWORD *)(a1 + 184) = v37;
              *(_QWORD *)(a1 + 192) = v30;
              v41.location = *(_QWORD *)(a1 + 168) + v37;
              v41.length = v30 - v37;
              CFStringGetCharacters(*(CFStringRef *)(a1 + 144), v41, (UniChar *)(a1 + 16));
              v36 = *(_QWORD *)(a1 + 184);
            }
            v32 = *(_WORD *)(v7 + 2 * (v29 - v36));
          }
        }
        if (v32 == 95)
        {
          CFCharacterSetIsCharacterMember(*(CFCharacterSetRef *)(a1 + 224), 0x5Fu);
          goto LABEL_52;
        }
      }
      IsCharacterMember = CFCharacterSetIsCharacterMember(*(CFCharacterSetRef *)(a1 + 232), v32);
      v34 = CFCharacterSetIsCharacterMember(*(CFCharacterSetRef *)(a1 + 224), v32);
      if (!IsCharacterMember)
        break;
LABEL_52:
      v27 = v4;
      if ((v25 & 1) != 0)
        goto LABEL_70;
    }
    if (!a2)
      break;
    v25 = 1;
    if (v32 == 42)
    {
      v26 = v4;
      goto LABEL_45;
    }
  }
  while (v34);
LABEL_70:
  v38 = *(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = v38;
  *(_QWORD *)(a1 + 208) = v26 - v38;
  return 1;
}

CFURLRef sub_1B179FB68(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *PathComponent;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const __CFString *v16;
  __CFBundle *BundleWithIdentifier;
  CFURLRef v18;
  __CFBundle *MainBundle;

  PathComponent = (void *)objc_msgSend_lastPathComponent(a1, a2, a3, a4);
  if ((objc_msgSend_isEqualToString_(a1, v6, (uint64_t)PathComponent, v7) & 1) != 0)
    v11 = 0;
  else
    v11 = (const __CFString *)objc_msgSend_stringByDeletingLastPathComponent(a1, v8, v9, v10);
  v12 = (const __CFString *)objc_msgSend_pathExtension(a1, v8, v9, v10);
  v16 = (const __CFString *)objc_msgSend_stringByDeletingPathExtension(PathComponent, v13, v14, v15);
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.vfx"));
  v18 = CFBundleCopyResourceURL(BundleWithIdentifier, v16, v12, 0);
  if (!v18)
  {
    MainBundle = CFBundleGetMainBundle();
    v18 = CFBundleCopyResourceURL(MainBundle, v16, v12, v11);
  }
  return v18;
}

CFURLRef sub_1B179FC08(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFURLRef v4;
  CFURLRef v5;

  v4 = sub_1B179FB68(a1, a2, a3, a4);
  v5 = v4;
  if (v4)
    CFRetain(v4);
  return v5;
}

uint64_t sub_1B179FC38(const __CFURL *a1)
{
  __CFBundle *MainBundle;
  uint64_t v3;
  __CFBundle *v4;
  const __CFURL *v5;
  const __CFURL *v6;
  __CFString *v7;
  __CFString *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  __CFString *v12;
  const __CFString *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  CFRange v18;
  BOOL v19;
  uint64_t v20;
  UInt32 packageCreator[2];

  MainBundle = CFBundleGetMainBundle();
  v3 = 0;
  if (!a1)
    return v3;
  v4 = MainBundle;
  if (!MainBundle)
    return v3;
  *(_QWORD *)packageCreator = 0;
  CFBundleGetPackageInfo(MainBundle, &packageCreator[1], packageCreator);
  v3 = 0;
  if (packageCreator[1] != 1095782476)
    return v3;
  v5 = CFBundleCopyBundleURL(v4);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = (__CFString *)CFURLCopyPath(v5);
  v8 = (__CFString *)CFURLCopyPath(a1);
  v12 = v8;
  if (v7 && v8)
  {
    v13 = (const __CFString *)objc_msgSend_stringByStandardizingPath(v8, v9, v10, v11);
    v17 = (const __CFString *)objc_msgSend_stringByStandardizingPath(v7, v14, v15, v16);
    v18 = CFStringFind(v13, v17, 1uLL);
    if (v18.location)
      v19 = 1;
    else
      v19 = v18.length <= 0;
    v20 = !v19;
    goto LABEL_15;
  }
  v20 = 0;
  v3 = 0;
  if (v7)
  {
LABEL_15:
    CFRelease(v7);
    v3 = v20;
  }
  if (v12)
    CFRelease(v12);
  CFRelease(v6);
  return v3;
}

uint64_t sub_1B179FD44(void *a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t result;
  CFURLRef v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = (void *)sub_1B19B83D4(a1);
  if (!v2
    || (v6 = objc_msgSend_dataUsingEncoding_(v2, v3, 4, v5),
        v17 = 0,
        (result = objc_msgSend_propertyListWithData_options_format_error_(MEMORY[0x1E0CB38B0], v7, v6, 0, &v17, 0)) == 0))
  {
    v9 = sub_1B179FB68(a1, v3, v4, v5);
    if (v9)
    {
      return objc_msgSend_dictionaryWithContentsOfURL_(MEMORY[0x1E0C99D80], v10, (uint64_t)v9, v12);
    }
    else
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: failed to load dictionary named %@"), v11, v12, v13, v14, v15, v16, (uint64_t)a1);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B179FDD8()
{
  return 1;
}

uint64_t sub_1B179FDE0(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a2 = objc_msgSend_length(a1, a2, a3, a4);
  return objc_msgSend_contents(a1, v5, v6, v7);
}

uint64_t sub_1B179FE0C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;

  if (objc_msgSend_storageMode(a1, a2, a3, a4) == 2)
  {
    if ((byte_1EEF65562 & 1) == 0)
    {
      byte_1EEF65562 = 1;
      sub_1B17C4408(16, (uint64_t)CFSTR("Warning: CFXDataFromMTLBuffer - can't read private MTL buffer"), v6, v7, v8, v9, v10, v11, v20);
    }
    return 0;
  }
  else
  {
    v13 = (void *)MEMORY[0x1E0C99D50];
    v14 = objc_msgSend_contents(a1, v5, v6, v7);
    v18 = objc_msgSend_length(a1, v15, v16, v17);
    return objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(v13, v19, v14, v18, 0);
  }
}

uint64_t sub_1B179FEA0()
{
  if (qword_1EEF65568 != -1)
    dispatch_once(&qword_1EEF65568, &unk_1E63D0970);
  return byte_1EEF65563;
}

void sub_1B179FF20()
{
  const char *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  id v6;

  v6 = MTLCreateSystemDefaultDevice();
  byte_1EEF65564 = v6 != 0;
  byte_1EEF65563 |= objc_msgSend_supportsFeatureSet_(v6, v0, 1, v1);
  byte_1EEF65563 |= objc_msgSend_supportsFeatureSet_(v6, v2, 3, v3);
  byte_1EEF65563 |= objc_msgSend_supportsFeatureSet_(v6, v4, 4, v5);

}

uint64_t sub_1B179FFA4()
{
  if (qword_1ED4CEEC0 != -1)
    dispatch_once(&qword_1ED4CEEC0, &unk_1E63D17D0);
  return byte_1ED4BB1A0;
}

uint64_t sub_1B179FFE4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;

  byte_1ED4BB1A0 = 0;
  byte_1ED4BB1A0 = sub_1B17C46BC(6);
  if ((byte_1ED4BB1A0 & 1) != 0)
  {
    byte_1ED4BB1A0 = 1;
  }
  else
  {
    v2 = sub_1B17C4714((uint64_t)CFSTR("VFXEnableWideGamut"), 0, v0, v1);
    result = 0;
    byte_1ED4BB1A0 = v2;
    if ((v2 & 1) == 0)
      goto LABEL_9;
  }
  if (qword_1EEF65568 != -1)
    dispatch_once(&qword_1EEF65568, &unk_1E63D0970);
  byte_1ED4BB1A0 = byte_1EEF65564;
  if (byte_1EEF65564)
    result = MGGetBoolAnswer();
  else
    result = 0;
LABEL_9:
  byte_1ED4BB1A0 = result;
  return result;
}

uint64_t sub_1B17A0090()
{
  if (qword_1ED4CEEB8 != -1)
    dispatch_once(&qword_1ED4CEEB8, &unk_1E63D5000);
  return byte_1EEF54D35;
}

BOOL sub_1B17A00D0()
{
  _BOOL8 result;

  result = sub_1B17C46BC(16);
  byte_1EEF54D35 = result;
  return result;
}

uint64_t sub_1B17A00F0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"length");
  v9 = sqrt((double)(a1 / 0xC));
  if (12 * (v9 * v9) != a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Spherical Harmonics Data seems malformed: order(%d) !=> length(%zu)"), a3, a4, a5, a6, a7, a8, (uint64_t)"(order * order * sizePerCoeff) == length");
  return v9;
}

uint64_t sub_1B17A0188()
{
  if (qword_1EEF65578 != -1)
    dispatch_once(&qword_1EEF65578, &unk_1E63D5020);
  return byte_1EEF65570;
}

uint64_t sub_1B17A01C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t result;

  v4 = (void *)objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4);
  v8 = (void *)objc_msgSend_bundleIdentifier(v4, v5, v6, v7);
  result = objc_msgSend_hasPrefix_(v8, v9, (uint64_t)CFSTR("com.apple.vfxstudio"), v10);
  byte_1EEF65570 = result;
  return result;
}

CFTypeRef sub_1B17A01FC(CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)qword_1EEF65580;
  if ((CFTypeRef)qword_1EEF65580 != cf)
  {
    if (qword_1EEF65580)
    {
      CFRelease((CFTypeRef)qword_1EEF65580);
      qword_1EEF65580 = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    qword_1EEF65580 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_1B17A024C()
{
  return qword_1EEF65580;
}

CFTypeRef _VFXSetShaderCacheURL_0(CFTypeRef cf)
{
  CFTypeRef result;

  result = (CFTypeRef)qword_1EEF65588;
  if ((CFTypeRef)qword_1EEF65588 != cf)
  {
    if (qword_1EEF65588)
    {
      CFRelease((CFTypeRef)qword_1EEF65588);
      qword_1EEF65588 = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    qword_1EEF65588 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_1B17A02A8()
{
  return qword_1EEF65588;
}

const __CFString *sub_1B17A02B4(const __CFString *theString)
{
  if (theString)
    return (const __CFString *)CFStringCreateArrayBySeparatingStrings(0, theString, CFSTR("."));
  return theString;
}

const __CFArray *sub_1B17A02D0(const __CFArray *theArray)
{
  if (theArray)
    return (const __CFArray *)CFStringCreateByCombiningStrings(0, theArray, CFSTR("."));
  return theArray;
}

__CFArray *sub_1B17A02EC(CFArrayRef theArray)
{
  __CFArray *MutableCopy;
  CFRange v4;

  if (!theArray)
    return 0;
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
  v4.length = CFArrayGetCount(theArray);
  v4.location = 0;
  CFArraySortValues(MutableCopy, v4, (CFComparatorFunction)sub_1B17A0358, 0);
  return MutableCopy;
}

CFComparisonResult sub_1B17A0358(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 0);
}

uint64_t sub_1B17A0360(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_subarrayWithRange_(a1, a2, (uint64_t)a2, a3);
}

CFArrayRef sub_1B17A036C(const __CFDictionary *a1)
{
  CFIndex Count;
  CFIndex v3;
  const void **v4;
  CFArrayRef v5;

  if (!a1)
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
  Count = CFDictionaryGetCount(a1);
  if (!Count)
    return CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
  v3 = Count;
  v4 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  CFDictionaryGetKeysAndValues(a1, v4, 0);
  v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, v3, MEMORY[0x1E0C9B378]);
  free(v4);
  return v5;
}

void sub_1B17A0428(const __CFSet *a1, uint64_t a2)
{
  uint64_t context;

  if (a1)
  {
    if (a2)
    {
      context = a2;
      CFSetApplyFunction(a1, (CFSetApplierFunction)sub_1B17A045C, &context);
    }
  }
}

uint64_t sub_1B17A045C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a2 + 16))();
}

void sub_1B17A0470(const __CFArray *a1, uint64_t a2)
{
  _QWORD v3[2];
  CFRange v4;

  if (a1)
  {
    if (a2)
    {
      v3[0] = 0;
      v3[1] = a2;
      v4.length = CFArrayGetCount(a1);
      v4.location = 0;
      CFArrayApplyFunction(a1, v4, (CFArrayApplierFunction)sub_1B17A04C0, v3);
    }
  }
}

uint64_t sub_1B17A04C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  ++*a2;
  return (*(uint64_t (**)(void))(v2 + 16))();
}

void sub_1B17A04DC(const __CFDictionary *a1, uint64_t a2)
{
  uint64_t context;

  if (a1)
  {
    if (a2)
    {
      context = a2;
      CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_1B17A0510, &context);
    }
  }
}

uint64_t sub_1B17A0510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
}

void sub_1B17A0528(const __CFDictionary *a1, uint64_t a2)
{
  const __CFArray *v4;
  __CFArray *v5;
  _QWORD v6[6];

  if (a1)
  {
    if (a2)
    {
      v4 = sub_1B17A036C(a1);
      v5 = sub_1B17A02EC(v4);
      CFRelease(v4);
      v6[0] = MEMORY[0x1E0C809B0];
      v6[1] = 3221225472;
      v6[2] = sub_1B17A05BC;
      v6[3] = &unk_1E63D5048;
      v6[4] = a2;
      v6[5] = a1;
      sub_1B17A0470(v5, (uint64_t)v6);
      CFRelease(v5);
    }
  }
}

uint64_t sub_1B17A05BC(uint64_t a1, int a2, void *key)
{
  CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), key);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1B17A0600(uint64_t a1)
{
  const __CFSet *v1;

  v1 = *(const __CFSet **)(a1 + 88);
  if (v1)
    CFSetApplyFunction(v1, (CFSetApplierFunction)sub_1B17A05FC, 0);
}

id sub_1B17A0620(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFSet *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  void *v15;

  sub_1B194F874(CFSTR("kCFXNotificationGeometryWillDie"), a1, 0, 1u);
  sub_1B184A660(a1);
  v9 = (const __CFSet *)a1[11];
  if (v9)
  {
    if (CFSetGetCount(v9))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. No node should be tracked anymore by the geometry %@"), v3, v4, v5, v6, v7, v8, (uint64_t)"!geometry->_trackedNodes || !CFSetGetCount(geometry->_trackedNodes)");
    v10 = (const void *)a1[11];
    if (v10)
    {
      CFRelease(v10);
      a1[11] = 0;
    }
  }
  v11 = (const void *)a1[10];
  if (v11)
  {
    CFRelease(v11);
    a1[10] = 0;
  }
  v12 = (const void *)a1[9];
  if (v12)
  {
    CFRelease(v12);
    a1[9] = 0;
  }
  v13 = (const void *)a1[8];
  if (v13)
  {
    CFRelease(v13);
    a1[8] = 0;
  }
  v14 = (const void *)a1[12];
  if (v14)
  {
    CFRelease(v14);
    a1[12] = 0;
  }
  v15 = (void *)a1[13];
  if (v15)
    free(v15);
  a1[13] = 0;
  return sub_1B193E38C((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
}

__CFString *sub_1B17A06F8(const void *a1)
{
  CFTypeID v2;
  CFStringRef v3;
  __CFString *Mutable;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFArray *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = CFGetTypeID(a1);
  v3 = CFCopyTypeIDDescription(v2);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v12 = sub_1B17A0800((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
  CFStringAppendFormat(Mutable, 0, CFSTR("<%@:%p \"%@\"\n"), v3, a1, v12);
  v20 = sub_1B17A0848((uint64_t)a1, v13, v14, v15, v16, v17, v18, v19);
  CFStringAppendFormat(Mutable, 0, CFSTR("  mesh: %@\n"), v20);
  if ((uint64_t)sub_1B17A08A0((uint64_t)a1, v21, v22, v23, v24, v25, v26, v27) >= 1)
  {
    v34 = 0;
    do
    {
      v35 = sub_1B17A08FC((uint64_t)a1, v34, v28, v29, v30, v31, v32, v33);
      CFStringAppendFormat(Mutable, 0, CFSTR("  mat%d: %@\n"), v34++, v35);
    }
    while (v34 < (uint64_t)sub_1B17A08A0((uint64_t)a1, v36, v37, v38, v39, v40, v41, v42));
  }
  CFStringAppend(Mutable, CFSTR(">"));
  CFRelease(v3);
  return Mutable;
}

uint64_t sub_1B17A0800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  return sub_1B193E568(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B17A0848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v9)(uint64_t);

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  v9 = *(void (**)(uint64_t))(a1 + 120);
  if (v9)
    v9(a1);
  return *(_QWORD *)(a1 + 64);
}

const __CFArray *sub_1B17A08A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  result = *(const __CFArray **)(a1 + 80);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const __CFArray *sub_1B17A08FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  result = sub_1B17A08A0(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
    return (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), a2 % (uint64_t)result);
  return result;
}

uint64_t sub_1B17A096C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  const __CFArray *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFArray *v18;
  uint64_t v19;
  const __CFArray *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;

  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
    v10 = sub_1B18786DC(v9, a2, a3, a4, a5, a6, a7, a8) != 0;
  else
    v10 = 0;
  v11 = sub_1B17A08A0(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((uint64_t)v11 >= 1 && (v10 & 1) == 0)
  {
    v18 = v11;
    v19 = 1;
    do
    {
      v20 = sub_1B17A08FC(a1, v19 - 1, v12, v13, v14, v15, v16, v17);
      v28 = sub_1B18786DC((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27);
      v10 = v28 != 0;
      v36 = sub_1B187813C((uint64_t)v20, v29, v30, v31, v32, v33, v34, v35);
      if (v36)
      {
        v37 = sub_1B1840E70(v36, 16, 0, v13, v14, v15, v16, v17);
        if (v37)
        {
          v39 = v37;
          v41 = sub_1B1841A40(v37, v38, v12, v13, v14, v15, v16, v17)
             && sub_1B1841E14(v39, v40, v12, v13, v14, v15, v16, v17) != 0.0;
          if (v28)
            v10 = 1;
          else
            v10 = v41;
        }
      }
      if (v19 >= (uint64_t)v18)
        break;
      ++v19;
    }
    while ((v10 & 1) == 0);
  }
  return v10;
}

uint64_t sub_1B17A0A4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

void sub_1B17A0A54(uint64_t a1, _OWORD *a2)
{
  _OWORD *v3;
  __int128 v5;
  const __CFSet *v6;

  v3 = *(_OWORD **)(a1 + 104);
  if (a2)
  {
    if (!v3)
    {
      v3 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
      *(_QWORD *)(a1 + 104) = v3;
    }
    v5 = a2[1];
    *v3 = *a2;
    v3[1] = v5;
  }
  else
  {
    if (!v3)
      return;
    free(v3);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v6 = *(const __CFSet **)(a1 + 88);
  if (v6)
    CFSetApplyFunction(v6, (CFSetApplierFunction)sub_1B17A05FC, 0);
}

__CFArray *sub_1B17A0AD4(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  __CFDictionary *v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  __CFDictionary *v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  uint64_t v37;
  int v38;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v38 = 1;
  valuePtr = 5;
  v37 = sub_1B17A0800(a1, v6, v7, v8, v9, v10, v11, v12);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
  v15 = CFNumberCreate(0, kCFNumberLongType, &v37);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("name"));
  CFDictionarySetValue(v5, CFSTR("type"), v13);
  CFDictionarySetValue(v5, CFSTR("address"), v15);
  CFDictionarySetValue(v5, CFSTR("semantic"), v14);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v14);
  CFRelease(v5);
  CFRelease(v15);
  CFRelease(v13);
  v16 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v38 = 2;
  valuePtr = 5;
  v37 = a1 + 64;
  v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
  v19 = CFNumberCreate(0, kCFNumberLongType, &v37);
  CFDictionarySetValue(v16, CFSTR("name"), CFSTR("mesh"));
  CFDictionarySetValue(v16, CFSTR("type"), v17);
  CFDictionarySetValue(v16, CFSTR("address"), v19);
  CFDictionarySetValue(v16, CFSTR("semantic"), v18);
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v18);
  CFRelease(v16);
  CFRelease(v19);
  CFRelease(v17);
  v20 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v38 = 2;
  valuePtr = 5;
  v37 = a1 + 72;
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
  v23 = CFNumberCreate(0, kCFNumberLongType, &v37);
  CFDictionarySetValue(v20, CFSTR("name"), CFSTR("overrideMaterial"));
  CFDictionarySetValue(v20, CFSTR("type"), v21);
  CFDictionarySetValue(v20, CFSTR("address"), v23);
  CFDictionarySetValue(v20, CFSTR("semantic"), v22);
  CFArrayAppendValue(Mutable, v20);
  CFRelease(v22);
  CFRelease(v20);
  CFRelease(v23);
  CFRelease(v21);
  v24 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v38 = 2;
  valuePtr = 5;
  v37 = a1 + 80;
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
  v27 = CFNumberCreate(0, kCFNumberLongType, &v37);
  CFDictionarySetValue(v24, CFSTR("name"), CFSTR("materials"));
  CFDictionarySetValue(v24, CFSTR("type"), v25);
  CFDictionarySetValue(v24, CFSTR("address"), v27);
  CFDictionarySetValue(v24, CFSTR("semantic"), v26);
  CFArrayAppendValue(Mutable, v24);
  CFRelease(v26);
  CFRelease(v24);
  CFRelease(v27);
  CFRelease(v25);
  v28 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v38 = 2;
  valuePtr = 5;
  v37 = a1 + 96;
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
  v31 = CFNumberCreate(0, kCFNumberLongType, &v37);
  CFDictionarySetValue(v28, CFSTR("name"), CFSTR("levelsOfDetail"));
  CFDictionarySetValue(v28, CFSTR("type"), v29);
  CFDictionarySetValue(v28, CFSTR("address"), v31);
  CFDictionarySetValue(v28, CFSTR("semantic"), v30);
  CFArrayAppendValue(Mutable, v28);
  CFRelease(v30);
  CFRelease(v28);
  CFRelease(v31);
  CFRelease(v29);
  v32 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v38 = 0;
  valuePtr = 5;
  v37 = a1 + 48;
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &v38);
  v35 = CFNumberCreate(0, kCFNumberLongType, &v37);
  CFDictionarySetValue(v32, CFSTR("name"), CFSTR("worldRef"));
  CFDictionarySetValue(v32, CFSTR("type"), v33);
  CFDictionarySetValue(v32, CFSTR("address"), v35);
  CFDictionarySetValue(v32, CFSTR("semantic"), v34);
  CFArrayAppendValue(Mutable, v32);
  CFRelease(v34);
  CFRelease(v32);
  CFRelease(v35);
  CFRelease(v33);
  return Mutable;
}

uint64_t sub_1B17A10A4(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  const __CFArray *v16;
  CFIndex v17;
  CFIndex v18;
  CFIndex j;
  const void *v20;
  uint64_t result;

  v10 = *((_QWORD *)cf + 8);
  if (v10)
    (*(void (**)(uint64_t))(a2 + 16))(a2);
  v11 = (const __CFArray *)*((_QWORD *)cf + 10);
  if (v11)
  {
    Count = CFArrayGetCount(*((CFArrayRef *)cf + 10));
    if (Count >= 1)
    {
      v13 = Count;
      for (i = 0; i != v13; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v11, i);
        (*(void (**)(uint64_t, const void *))(a2 + 16))(a2, ValueAtIndex);
      }
    }
  }
  v16 = (const __CFArray *)*((_QWORD *)cf + 12);
  if (v16)
  {
    v17 = CFArrayGetCount(v16);
    if (v17 >= 1)
    {
      v18 = v17;
      for (j = 0; j != v18; ++j)
      {
        v20 = CFArrayGetValueAtIndex(*((CFArrayRef *)cf + 12), j);
        (*(void (**)(uint64_t, const void *))(a2 + 16))(a2, v20);
      }
    }
  }
  result = sub_1B17C5B7C(cf, v10, a3, a4, a5, a6, a7, a8);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, result);
  return result;
}

const __CFDictionary *sub_1B17A11A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  return sub_1B193E800(a1, CFSTR("kBehaviorGraph"), a3, a4, a5, a6, a7, a8);
}

void sub_1B17A11FC(CFTypeRef *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  v10 = sub_1B17C6244(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B17A11A4((uint64_t)a1, v11, v12, v13, v14, v15, v16, v17);
  if (v10 && v18)
    sub_1B17C5DD0(v18, v10, v19, v20, v21, v22, v23, v24);
  sub_1B193E88C(a1, CFSTR("kBehaviorGraph"), a2, v10 != 0, v21, v22, v23, v24);
  if (a2)
  {
    if (v10)
      sub_1B17C5FC0((uint64_t *)a2, v10, v25, v26, v27, v28, v29, v30);
  }
}

uint64_t sub_1B17A12B4()
{
  if (qword_1ED4CECA8 != -1)
    dispatch_once(&qword_1ED4CECA8, &unk_1E63D0990);
  return qword_1ED4CECB0;
}

double sub_1B17A12F4()
{
  void *v0;
  const void *v1;
  double result;

  if (!qword_1ED4CECB0)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CECB0);
    qword_1ED4CECB0 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C3258();
    *(_OWORD *)algn_1ED4BE150 = xmmword_1E63D2F80;
    *(_OWORD *)&algn_1ED4BE150[16] = xmmword_1E63D2F90;
    qword_1ED4BE148 = (uint64_t)sub_1B17A0AD4;
    qword_1ED4BE180 = (uint64_t)sub_1B17A29E0;
    unk_1ED4BE188 = sub_1B17A2A2C;
    *(_OWORD *)&algn_1ED4BE150[32] = unk_1E63D2FA0;
    qword_1ED4BE190 = (uint64_t)sub_1B17A2AC4;
    *(_QWORD *)&result = 0x1B17A11A0;
    unk_1ED4BE1A0 = xmmword_1E63D2F70;
  }
  return result;
}

double sub_1B17A13B4(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  return sub_1B184A63C(a1);
}

uint64_t sub_1B17A148C(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"input");
  return sub_1B17C5A5C(cf, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B17A14D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t *v19;
  const __CFSet *v20;

  v8 = (uint64_t *)a2;
  if (*(_QWORD *)(a1 + 64) != a2)
  {
    v16 = sub_1B17C61FC(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v16)
    {
      v17 = *(void **)(a1 + 64);
      if (!v17)
      {
        if (!v8)
          goto LABEL_20;
        LOBYTE(v18) = 1;
        goto LABEL_13;
      }
      sub_1B17C5DD0(v17, v16, v10, v11, v12, v13, v14, v15);
      v18 = 1;
LABEL_9:
      v19 = *(uint64_t **)(a1 + 64);
      if (v19 == v8)
      {
        if (!v18)
        {
LABEL_22:
          *(_BYTE *)(a1 + 200) = 0;
          v20 = *(const __CFSet **)(a1 + 88);
          if (v20)
            CFSetApplyFunction(v20, (CFSetApplierFunction)sub_1B17A05FC, 0);
          return;
        }
LABEL_20:
        if (v8)
          sub_1B17C5FC0(v8, v16, v10, v11, v12, v13, v14, v15);
        goto LABEL_22;
      }
      if (v19)
      {
        CFRelease(v19);
        *(_QWORD *)(a1 + 64) = 0;
      }
      if (!v8)
      {
LABEL_14:
        *(_QWORD *)(a1 + 64) = v8;
        if ((v18 & 1) == 0)
          goto LABEL_22;
        goto LABEL_20;
      }
LABEL_13:
      v8 = (uint64_t *)CFRetain(v8);
      goto LABEL_14;
    }
LABEL_8:
    v18 = 0;
    goto LABEL_9;
  }
  if (!a2 && *(_QWORD *)(a1 + 120))
  {
    v16 = sub_1B17C61FC(a1, 0, a3, a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
}

void sub_1B17A15D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *v16;
  const __CFArray *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_17:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"dst");
    if (a1)
      goto LABEL_4;
    goto LABEL_18;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  if (!a2)
    goto LABEL_17;
LABEL_3:
  if (a1)
    goto LABEL_4;
LABEL_18:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
LABEL_4:
  sub_1B17A14D4(a2, *(_QWORD *)(a1 + 64), a3, a4, a5, a6, a7, a8);
  v16 = *(const __CFArray **)(a1 + 80);
  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"geometry");
  v17 = *(const __CFArray **)(a2 + 80);
  if (v17 != v16)
  {
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(a2 + 80) = 0;
    }
    if (v16)
      *(_QWORD *)(a2 + 80) = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v16);
  }
  sub_1B17A179C(a2, *(_QWORD *)(a1 + 96), v10, v11, v12, v13, v14, v15);
  v25 = (const __CFString *)sub_1B17A0800(a1, v18, v19, v20, v21, v22, v23, v24);
  if (v25)
    sub_1B17A19DC(a2, v25, v26, v27, v28, v29, v30, v31);
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(a1 + 104))
  {
    v32 = sub_1B179E238(0x20uLL);
    *(_QWORD *)(a2 + 104) = v32;
    v33 = *(_OWORD **)(a1 + 104);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
  }
  sub_1B193EAC4(a1, (CFTypeRef *)a2, v26, v27, v28, v29, v30, v31);
  sub_1B184A6B8(a1, a2);
  v41 = *(_OWORD *)(a1 + 176);
  v42 = *(_QWORD *)(a1 + 192);
  sub_1B17A1A2C((__n128 *)a2, (unsigned __int8 *)&v41, v35, v36, v37, v38, v39, v40);
}

uint64_t sub_1B17A1754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  return *(_QWORD *)(a1 + 64);
}

void sub_1B17A179C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v8;
  uint64_t v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const __CFArray *v24;
  CFIndex v25;
  CFIndex v26;
  CFIndex j;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CFIndex v35;
  CFIndex v36;
  CFIndex k;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFIndex v45;
  CFIndex v46;
  CFIndex m;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const __CFSet *v57;

  v8 = (const __CFArray *)a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  v10 = sub_1B17C61FC(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(const __CFArray **)(a1 + 96);
  if (v11)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      Count = CFArrayGetCount(v11);
      if (Count >= 1)
      {
        v13 = Count;
        for (i = 0; i != v13; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), i);
          v23 = (void *)sub_1B184696C((uint64_t)ValueAtIndex, v16, v17, v18, v19, v20, v21, v22);
          if (v23)
            CFSetApplyFunction(*(CFSetRef *)(a1 + 88), (CFSetApplierFunction)sub_1B17A21B4, v23);
        }
      }
    }
  }
  v24 = *(const __CFArray **)(a1 + 96);
  if (v24 && v10)
  {
    v25 = CFArrayGetCount(v24);
    if (v25 >= 1)
    {
      v26 = v25;
      for (j = 0; j != v26; ++j)
      {
        v28 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), j);
        sub_1B17C5DD0(v28, v10, v29, v30, v31, v32, v33, v34);
      }
    }
    v24 = *(const __CFArray **)(a1 + 96);
  }
  if (v24 != v8)
  {
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (v8)
      v8 = (const __CFArray *)CFRetain(v8);
    *(_QWORD *)(a1 + 96) = v8;
  }
  if (v8 && v10)
  {
    v35 = CFArrayGetCount(v8);
    if (v35 >= 1)
    {
      v36 = v35;
      for (k = 0; k != v36; ++k)
      {
        v38 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), k);
        sub_1B17C5FC0(v38, v10, v39, v40, v41, v42, v43, v44);
      }
    }
    v8 = *(const __CFArray **)(a1 + 96);
  }
  if (v8)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      v45 = CFArrayGetCount(v8);
      if (v45 >= 1)
      {
        v46 = v45;
        for (m = 0; m != v46; ++m)
        {
          v48 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), m);
          v56 = (void *)sub_1B184696C((uint64_t)v48, v49, v50, v51, v52, v53, v54, v55);
          if (v56)
            CFSetApplyFunction(*(CFSetRef *)(a1 + 88), (CFSetApplierFunction)sub_1B17A21C4, v56);
        }
      }
    }
  }
  v57 = *(const __CFSet **)(a1 + 88);
  if (v57)
    CFSetApplyFunction(v57, (CFSetApplierFunction)sub_1B17A21D4, 0);
}

uint64_t sub_1B17A1994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  return *(_QWORD *)(a1 + 96);
}

CFStringRef sub_1B17A19DC(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  return sub_1B193E5B0(a1, theString, a3, a4, a5, a6, a7, a8);
}

void sub_1B17A1A2C(__n128 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  v10 = a1[11].n128_u8[0];
  v11 = a1[11].n128_u8[12];
  v12 = *(__n128 *)a2;
  a1[12].n128_u64[0] = *((_QWORD *)a2 + 2);
  a1[11] = v12;
  if (v11 != a2[12])
  {
    v13 = sub_1B17C6244(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    sub_1B187A8A4(v13, 6, a1, 0, v14, v15, v16, v17);
  }
  sub_1B184A8B4(a1, v10, *a2, a1[8].n128_u8[0], a1[8].n128_u8[0], a6, a7, a8);
}

CFTypeRef sub_1B17A1ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (sub_1B184A810(a1, a2, a3, a4, a5, a6, a7, a8))
    return sub_1B18F8384(a1);
  else
    return (CFTypeRef)sub_1B17A0848(a1, v9, v10, v11, v12, v13, v14, v15);
}

void sub_1B17A1B04(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
    if (value)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
    goto LABEL_3;
  }
  if (!value)
    goto LABEL_5;
LABEL_3:
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), value);
  v17 = sub_1B17C61FC(a1, v10, v11, v12, v13, v14, v15, v16);
  sub_1B17C5FC0((uint64_t *)value, v17, v18, v19, v20, v21, v22, v23);
  sub_1B17A1B98((_QWORD *)a1);
}

void sub_1B17A1B98(_QWORD *cf)
{
  const __CFSet *v2;
  CFTypeID v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (const __CFSet *)cf[11];
  if (v2)
    CFSetApplyFunction(v2, (CFSetApplierFunction)sub_1B17A05FC, 0);
  v3 = CFGetTypeID(cf);
  if (v3 == sub_1B19156CC())
    sub_1B19153F8((uint64_t)cf, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B17A1BF4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 120) = a2;
  return result;
}

void sub_1B17A1BFC(uint64_t a1, CFIndex a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  if (sub_1B17C61FC(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), a2);
    v18 = sub_1B17C61FC(a1, v11, v12, v13, v14, v15, v16, v17);
    sub_1B17C5DD0(ValueAtIndex, v18, v19, v20, v21, v22, v23, v24);
  }
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 80), a2);
  sub_1B17A1B98((_QWORD *)a1);
}

void sub_1B17A1C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  void *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  if (sub_1B17C61FC(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
    if (Count >= 1)
    {
      v10 = Count;
      for (i = 0; i != v10; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), i);
        v20 = sub_1B17C61FC(a1, v13, v14, v15, v16, v17, v18, v19);
        sub_1B17C5DD0(ValueAtIndex, v20, v21, v22, v23, v24, v25, v26);
      }
    }
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 80));
  sub_1B17A1B98((_QWORD *)a1);
}

void sub_1B17A1D38(uint64_t a1, void *value, CFIndex idx, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), idx, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 80), idx, value);
  v18 = sub_1B17C61FC(a1, v11, v12, v13, v14, v15, v16, v17);
  sub_1B17C5FC0((uint64_t *)value, v18, v19, v20, v21, v22, v23, v24);
  sub_1B17A1B98((_QWORD *)a1);
}

void sub_1B17A1DB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *newValues;
  CFRange v41;

  newValues = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  if (sub_1B17C61FC(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), a3);
    v18 = sub_1B17C61FC(a1, v11, v12, v13, v14, v15, v16, v17);
    sub_1B17C5DD0(ValueAtIndex, v18, v19, v20, v21, v22, v23, v24);
  }
  v41.location = a3;
  v41.length = 1;
  CFArrayReplaceValues(*(CFMutableArrayRef *)(a1 + 80), v41, (const void **)&newValues, 1);
  v25 = (uint64_t *)newValues;
  v33 = sub_1B17C61FC(a1, v26, v27, v28, v29, v30, v31, v32);
  sub_1B17C5FC0(v25, v33, v34, v35, v36, v37, v38, v39);
  sub_1B17A1B98((_QWORD *)a1);
}

CFIndex sub_1B17A1E70(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFSet *Mutable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex result;
  CFIndex v18;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
LABEL_3:
  Mutable = *(const __CFSet **)(a1 + 88);
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    *(_QWORD *)(a1 + 88) = Mutable;
  }
  if (CFSetContainsValue(Mutable, a2))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Node should not already been tracked by this geometry"), v11, v12, v13, v14, v15, v16, (uint64_t)"!CFSetContainsValue(geometry->_trackedNodes, node)");
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 88), a2);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a1 + 112) & 0xFE | (CFSetGetCount(*(CFSetRef *)(a1 + 88)) > 4);
  result = *(_QWORD *)(a1 + 96);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v18 = result;
      for (i = 0; i != v18; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), i);
        result = sub_1B184696C((uint64_t)ValueAtIndex, v21, v22, v23, v24, v25, v26, v27);
        if (result)
          result = sub_1B17A1E70(result, a2);
      }
    }
  }
  return result;
}

void sub_1B17A1FA4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFSet *v10;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __CFSet *v24;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
    if (a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!a2)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
LABEL_4:
  v10 = *(const __CFSet **)(a1 + 88);
  if (!v10 || !CFSetContainsValue(v10, a2))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Node should been tracked by this geometry"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry->_trackedNodes && CFSetContainsValue(geometry->_trackedNodes, node)");
  v11 = *(const __CFArray **)(a1 + 96);
  if (v11)
  {
    Count = CFArrayGetCount(v11);
    if (Count >= 1)
    {
      v13 = Count;
      for (i = 0; i != v13; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), i);
        v23 = sub_1B184696C((uint64_t)ValueAtIndex, v16, v17, v18, v19, v20, v21, v22);
        if (v23)
          sub_1B17A1FA4(v23, a2);
      }
    }
  }
  v24 = *(__CFSet **)(a1 + 88);
  if (v24
    || (sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry->_trackedNodes"), (v24 = *(__CFSet **)(a1 + 88)) != 0))
  {
    CFSetRemoveValue(v24, a2);
  }
}

void sub_1B17A20D4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *v16;
  uint64_t i;
  const __CFArray *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = sub_1B17A08A0((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((uint64_t)v9 >= 1)
  {
    v16 = v9;
    for (i = 0; (const __CFArray *)i != v16; ++i)
    {
      v18 = sub_1B17A08FC((uint64_t)a1, i, v10, v11, v12, v13, v14, v15);
      sub_1B1878850((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25);
    }
  }
  sub_1B17A1B98(a1);
  sub_1B194F874(CFSTR("kCFXShadableDidChange"), a1, 0, 1u);
}

void sub_1B17A2148(_QWORD *a1, void *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = (const void *)a1[9];
  if (v10 != cf)
  {
    if (v10)
    {
      CFRelease(v10);
      a1[9] = 0;
    }
    if (cf)
      v11 = CFRetain(cf);
    else
      v11 = 0;
    a1[9] = v11;
  }
  if (cf)
  {
    v12 = sub_1B17C61FC((uint64_t)a1, (uint64_t)cf, a3, a4, a5, a6, a7, a8);
    sub_1B17C5FC0((uint64_t *)cf, v12, v13, v14, v15, v16, v17, v18);
  }
  sub_1B17A20D4(a1, (uint64_t)cf, a3, a4, a5, a6, a7, a8);
}

void sub_1B17A21B4(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B17A1FA4(a2, a1, a3, a4, a5, a6, a7, a8);
}

CFIndex sub_1B17A21C4(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B17A1E70(a2, a1, a3, a4, a5, a6, a7, a8);
}

BOOL sub_1B17A21D8(uint64_t a1)
{
  if (qword_1ED4CECA8 != -1)
    dispatch_once(&qword_1ED4CECA8, &unk_1E63D0990);
  return qword_1ED4CECB0 == a1
      || sub_1B18D9D1C() == a1
      || sub_1B19156CC() == a1
      || sub_1B19DDABC() == a1
      || sub_1B19DDBE8() == a1;
}

void sub_1B17A2264(CFTypeRef cf, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  CFTypeID v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFArray *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  int v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  int32x2_t v77;
  int32x2_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  unsigned int v90;
  float v91;
  unsigned int v92;
  float v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  float32x4_t v98;
  int32x4_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x4_t v102;
  unsigned int v103;
  float32x4_t v104;
  int32x4_t v105;
  float32x2_t v106;
  float32x2_t v107;
  uint64_t v108;
  const __CFArray *v109;
  uint64_t v110;
  _OWORD *v111;
  _OWORD *v112;
  uint64_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t v121;

  v9 = a6;
  v10 = (_OWORD *)a5;
  v11 = (_OWORD *)a4;
  v114 = a2;
  v121 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a6 != 2)
  {
    v13 = CFGetTypeID(cf);
    if (v13 == sub_1B19156CC())
    {
      sub_1B1915154((uint64_t)cf, v114, (uint64_t)a3, (uint64_t)v11, (uint64_t)v10, v9, a7, a8, a9);
      return;
    }
  }
  v14 = sub_1B17A0848((uint64_t)cf, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v14)
  {
    v21 = v14;
    v22 = sub_1B1875E70(v14, 1, v15, v16, v17, v18, v19, v20);
    if (v22)
    {
      v30 = (uint64_t)v22;
      v31 = sub_1B17EDAE0((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29);
      if (v31)
      {
        v38 = v31;
        v39 = sub_1B18760A0(v21, 1, v32, v33, v34, v35, v36, v37);
        v47 = (uint64_t)v39;
        if (!v39 || sub_1B17EDAE0((uint64_t)v39, v40, v41, v42, v43, v44, v45, v46) == v38)
        {
          if ((_DWORD)v9 == 1)
          {
            if ((byte_1EEF65591 & 1) == 0)
            {
              byte_1EEF65591 = 1;
              sub_1B17C4408(16, (uint64_t)CFSTR("Error: Cannot use volume generation on a generic mesh. fallbacking on surface"), v41, v42, v43, v44, v45, v46, v108);
            }
            LODWORD(v9) = 0;
          }
          v48 = sub_1B1874BE0(v21, v40, v41, v42, v43, v44, v45, v46);
          if (v48)
            v55 = 0;
          else
            v55 = (_DWORD)v9 == 0;
          if (v55)
            v56 = 2;
          else
            v56 = v9;
          if (v56)
          {
            if (v56 == 2 && v114 >= 1)
            {
              if (v10)
                v57 = v47 == 0;
              else
                v57 = 1;
              v58 = !v57;
              do
              {
                v59 = 214013 * *a3 + 2531011;
                *a3 = v59;
                v60 = v59 % v38;
                *(double *)&v61 = sub_1B17EE400(v30, v59 % v38, v49, v50, v51, v52, v53, v54);
                *v11 = v61;
                if (v58)
                {
                  *(double *)&v62 = sub_1B17EE400(v47, v60, v49, v50, v51, v52, v53, v54);
                  *v10 = v62;
                }
                ++v10;
                ++v11;
                --v114;
              }
              while (v114);
            }
            return;
          }
          if (v114 < 1)
            return;
          v63 = 0;
          v111 = v11;
          v112 = v10;
          v109 = v48;
          v110 = v21;
          while (1)
          {
            v64 = 214013 * *a3 + 2531011;
            *a3 = v64;
            v65 = sub_1B1874C3C(v21, v64 % (uint64_t)v48, 1, v50, v51, v52, v53, v54);
            v66 = sub_1B17A47FC((uint64_t)v65);
            v67 = 214013 * *a3 + 2531011;
            *a3 = v67;
            v75 = sub_1B17A4410((uint64_t)v65, v68, v69, v70, v71, v72, v73, v74);
            if (v75 >= 1)
            {
              v79 = 0;
              v80 = v67 % v66;
              do
              {
                v81 = sub_1B17A4A74((uint64_t)v65, v80, v79, 0, v51, v52, v53, v54);
                *(double *)&v76 = sub_1B17EE400(v30, v81, v82, v83, v84, v85, v86, v87);
                *((_OWORD *)&v118 + v79) = v76;
                if (v47)
                {
                  *(double *)&v76 = sub_1B17EE400(v47, v81, v88, v50, v51, v52, v53, v54);
                  *((_OWORD *)&v115 + v79) = v76;
                }
                ++v79;
              }
              while (v75 != v79);
            }
            if (v75 == 1)
            {
              v89 = v112;
              v111[v63] = v118;
              v48 = v109;
              v21 = v110;
              if (v112)
              {
                v102 = v115;
LABEL_50:
                v89[v63] = v102;
              }
            }
            else
            {
              v89 = v112;
              v48 = v109;
              v21 = v110;
              if (v75 != 2)
              {
                if (v75 != 3)
                  goto LABEL_51;
                v90 = 214013 * *a3 + 2531011;
                v91 = (float)HIWORD(v90) * 0.000015259;
                v92 = 214013 * v90 + 2531011;
                v93 = (float)HIWORD(v92) * 0.000015259;
                v94 = 214013 * v92 + 2531011;
                *a3 = v94;
                v95 = (float)HIWORD(v94) * 0.000015259;
                v96 = 1.0 / (float)((float)(v91 + v93) + v95);
                *(float *)v77.i32 = v91 * v96;
                v97 = v93 * v96;
                v111[v63] = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v119, v93 * v96), v118, *(float *)v77.i32), v120, v95 * v96);
                if (!v112)
                  goto LABEL_51;
                *(float *)v78.i32 = v95 * v96;
                v98 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v116, v97), v115, (float32x4_t)vdupq_lane_s32(v77, 0)), v117, (float32x4_t)vdupq_lane_s32(v78, 0));
                v99 = (int32x4_t)vmulq_f32(v98, v98);
                v99.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v99, 2), vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1))).u32[0];
                v100 = vrsqrte_f32((float32x2_t)v99.u32[0]);
                v101 = vmul_f32(v100, vrsqrts_f32((float32x2_t)v99.u32[0], vmul_f32(v100, v100)));
                v102 = vmulq_n_f32(v98, vmul_f32(v101, vrsqrts_f32((float32x2_t)v99.u32[0], vmul_f32(v101, v101))).f32[0]);
                goto LABEL_50;
              }
              v103 = 214013 * *a3 + 2531011;
              *a3 = v103;
              *(float *)&v76 = (float)HIWORD(v103) * 0.000015259;
              v111[v63] = vmlaq_n_f32(v118, vsubq_f32(v119, v118), *(float *)&v76);
              if (v112)
              {
                v104 = vmlaq_f32(v115, vsubq_f32(v116, v115), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v76, 0));
                v105 = (int32x4_t)vmulq_f32(v104, v104);
                v105.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v105, 2), vadd_f32(*(float32x2_t *)v105.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.i8, 1))).u32[0];
                v106 = vrsqrte_f32((float32x2_t)v105.u32[0]);
                v107 = vmul_f32(v106, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v106, v106)));
                v102 = vmulq_n_f32(v104, vmul_f32(v107, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v107, v107))).f32[0]);
                goto LABEL_50;
              }
            }
LABEL_51:
            if (++v63 == v114)
              return;
          }
        }
        if ((byte_1EEF65590 & 1) == 0)
        {
          byte_1EEF65590 = 1;
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: cannot generate points : mismatch between vertices and normals count"), v41, v42, v43, v44, v45, v46, a9);
        }
      }
    }
  }
}

uint64_t sub_1B17A276C(uint64_t a1)
{
  return *(_BYTE *)(a1 + 112) & 1;
}

BOOL sub_1B17A2778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  const __CFArray *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = *(_BYTE *)(a1 + 200);
  v9 = v8 & 3;
  if ((v8 & 3) == 0)
  {
    v9 = 1;
    v11 = (const __CFArray *)sub_1B1876264(*(_QWORD *)(a1 + 64), 1, a3, a4, a5, a6, a7, a8);
    Count = CFArrayGetCount(v11);
    if (Count >= 1)
    {
      v13 = Count;
      v14 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v11, v14);
        if (sub_1B17A426C((uint64_t)ValueAtIndex, v16, v17, v18, v19, v20, v21, v22))
          break;
        if (v13 == ++v14)
        {
          v9 = 1;
          goto LABEL_8;
        }
      }
      v9 = 2;
    }
LABEL_8:
    *(_BYTE *)(a1 + 200) = v9 | v8 & 0xFC;
  }
  return v9 == 1;
}

BOOL sub_1B17A2818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  if (*(unsigned __int8 *)(a1 + 176) - 1 < 3)
    return sub_1B17A2778(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 176))
    return sub_1B184AB48(a1, a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

BOOL sub_1B17A289C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  return !sub_1B184A830(a1, a2, a3, a4, a5, a6, a7, a8);
}

__n128 sub_1B17A28EC@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, __n128 *a8@<X8>)
{
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a2, a3, a4, a5, a6, a7, (uint64_t)"geometry");
  result = a1[11];
  *a8 = result;
  a8[1].n128_u64[0] = a1[12].n128_u64[0];
  return result;
}

uint64_t sub_1B17A2948(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *(float32x4_t **)(a1 + 104);
  if (v10)
  {
    *a3 = vsubq_f32(*v10, v10[1]);
    *a4 = vaddq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 104), *(float32x4_t *)(*(_QWORD *)(a1 + 104) + 16));
    return 1;
  }
  else
  {
    result = sub_1B17A0848(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
      return sub_1B1874504(result, a3, a4, v12, v13, v14, v15, v16);
  }
  return result;
}

uint64_t sub_1B17A29AC(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B17A0848(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (result)
    return sub_1B1874680(result, a3, v10, v11, v12, v13, v14, v15);
  return result;
}

void sub_1B17A29E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = sub_1B17A0848(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    v17 = (const void *)sub_1B18741B0(v9, v10, v11, v12, v13, v14, v15, v16);
    sub_1B17A14D4(a1, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
    if (v17)
      CFRelease(v17);
  }
}

uint64_t sub_1B17A2A2C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFArray *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFArray *v26;
  uint64_t v27;
  const __CFArray *v28;
  uint64_t v29;
  const void *v30;

  v9 = a1;
  v10 = (const void *)sub_1B193E634(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (!sub_1B17987F8(v10, a2))
  {
    v18 = sub_1B17A08A0(v9, v11, v12, v13, v14, v15, v16, v17);
    if ((uint64_t)v18 < 1)
    {
LABEL_6:
      v30 = (const void *)sub_1B17A0848(v9, v19, v20, v21, v22, v23, v24, v25);
      return sub_1B17C62B4(v30, (uint64_t)a2);
    }
    v26 = v18;
    v27 = 0;
    while (1)
    {
      v28 = sub_1B17A08FC(v9, v27, v20, v21, v22, v23, v24, v25);
      v29 = sub_1B17C62B4(v28, (uint64_t)a2);
      if (v29)
        return v29;
      if (v26 == (const __CFArray *)++v27)
        goto LABEL_6;
    }
  }
  return v9;
}

uint64_t sub_1B17A2AC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = -[VFXModel __createCFObject]_0();
  sub_1B17A15D0(a1, v2, v3, v4, v5, v6, v7, v8);
  return v2;
}

double sub_1B17A2AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = sub_1B21AB51C(a1, "Main");
  *(_QWORD *)v3 = off_1E63CE2D0;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = 0;
  *(_WORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  result = NAN;
  *(_OWORD *)(v3 + 88) = xmmword_1B2245710;
  return result;
}

uint64_t sub_1B17A2B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v5, *(_WORD *)(a1 + 8), 9273, 1656467160);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v6, *(_WORD *)(a1 + 8), 9273, -797957750);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v7, *(_WORD *)(a1 + 8), 9273, 1490954098);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v8, *(_WORD *)(a1 + 8), 9273, -1170177454);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v9, *(_WORD *)(a1 + 8), 9273, 839732700);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v10, *(_WORD *)(a1 + 8), 9273, -691122579);
  return sub_1B17A371C(a2, &v5, 6);
}

uint64_t sub_1B17A2C48@<X0>(CFX::RG::ResourceIdentifier *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = CFX::RG::ResourceIdentifier::finalColor(a1);
  return sub_1B17A371C(a2, v4, 1);
}

unint64_t sub_1B17A2CB0(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;

  v10 = *(unsigned __int16 *)(a1 + 8);
  v11 = *a3;
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)*((_QWORD *)a3 + 1);
    v13 = 8 * v11;
    do
    {
      v14 = *v12++;
      v48 = v14;
      v15 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v48);
      v10 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v10 ^ ((0x9DDFEA08EB382D69 * (v15 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * (v15 ^ v10)))) ^ ((0x9DDFEA08EB382D69 * (v10 ^ ((0x9DDFEA08EB382D69 * (v15 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * (v15 ^ v10)))) >> 47));
      v13 -= 8;
    }
    while (v13);
  }
  v16 = sub_1B1814768(*(uint64_t **)(a1 + 24), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = sub_1B186CFA8((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
  v32 = sub_1B1865610((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31);
  v33 = *(unsigned __int8 *)(a1 + 48);
  v34 = *(_QWORD *)(a1 + 80);
  v41 = sub_1B17CBA40(*(_QWORD *)(a1 + 24), a2, v35, v36, v37, v38, v39, v40);
  v42 = *(_QWORD *)(a1 + 32);
  if ((v41 & 1) != 0)
    *(_QWORD *)(a1 + 32) = ++v42;
  v43 = 0x9DDFEA08EB382D69
      * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v32)));
  v44 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v43 ^ (v43 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v43 ^ (v43 >> 47))) ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v43 ^ (v43 >> 47))) ^ v33)));
  v45 = 0x9DDFEA08EB382D69 * (v44 ^ (v44 >> 47));
  v46 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v34)))) >> 47));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v46 ^ ((0x9DDFEA08EB382D69 * (v42 ^ v46)) >> 47) ^ (0x9DDFEA08EB382D69 * (v42 ^ v46)))) ^ ((0x9DDFEA08EB382D69 * (v46 ^ ((0x9DDFEA08EB382D69 * (v42 ^ v46)) >> 47) ^ (0x9DDFEA08EB382D69 * (v42 ^ v46)))) >> 47));
}

uint64_t *sub_1B17A2DF4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, _OWORD *a7, _OWORD *a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t **v31;
  const __CFDictionary *v32;
  uint64_t v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  MTLTextureType v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  float v46;
  CFX::RG::Resource *v47;
  _WORD *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  char v61;
  __int128 v62;
  float32x2_t v63;
  CFX::RG::Pass *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  CFX::RG::Resource *v80;
  CFX::RG::Resource *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float v110;
  uint64_t *v111;
  char v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  _OWORD *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t **v146;
  uint64_t v147;
  uint64_t *v148;
  CFX::RG::Resource *v149;
  CFX::RG::Pass *v150;
  __int16 v152;
  _OWORD *v153;
  _OWORD v154[10];
  _OWORD v155[10];
  _OWORD v156[10];
  _OWORD v157[10];
  _OWORD v158[10];
  _OWORD v159[10];
  _OWORD v160[10];
  _OWORD v161[10];
  _OWORD v162[10];
  _OWORD v163[10];
  _BYTE v164[160];
  uint64_t v165[20];
  _OWORD v166[10];
  __int128 v167;
  uint64_t **v168;
  uint64_t *v169;
  uint64_t v170;
  _OWORD v171[8];
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  sub_1B1815FE8((uint64_t)a3, 0);
  v30 = (void *)sub_1B1813BC4((uint64_t)a3, v16, v17, v18, v19, v20, v21, v22);
  v31 = *(uint64_t ***)(a4 + 32);
  if (!v31)
  {
    v31 = (uint64_t **)sub_1B1814768(a3, v23, v24, v25, v26, v27, v28, v29);
    if (!v31)
      return 0;
  }
  v153 = a7;
  v32 = sub_1B186CFA8((uint64_t)v31, v23, v24, v25, v26, v27, v28, v29);
  if (!v32)
    return 0;
  v33 = (uint64_t)v32;
  v34 = sub_1B179F7DC((uint64_t)a3);
  v152 = v34;
  if (a8)
  {
    v35 = a8[7];
    v166[6] = a8[6];
    v166[7] = v35;
    v36 = a8[9];
    v166[8] = a8[8];
    v166[9] = v36;
    v37 = a8[3];
    v166[2] = a8[2];
    v166[3] = v37;
    v38 = a8[5];
    v166[4] = a8[4];
    v166[5] = v38;
    v39 = a8[1];
    v166[0] = *a8;
    v166[1] = v39;
  }
  else
  {
    if (v34 <= 1)
      v41 = MTLTextureType2D;
    else
      v41 = MTLTextureType2DArray;
    CFX::RG::TextureDescriptorReference::finalColor((uint64_t)v163);
    v45 = objc_msgSend_sampleCount(v30, v42, v43, v44);
    CFX::RG::TextureDescriptorReference::withSampleCount(v163, v45, (uint64_t)v164);
    CFX::RG::TextureDescriptorReference::withTextureType((CFX::RG::TextureDescriptorReference *)v164, v41, (uint64_t)v165);
    CFX::RG::TextureDescriptorReference::withArraylength((CFX::RG::TextureDescriptorReference *)v165, v152, (uint64_t)&v167);
    v46 = sub_1B1815CC0((uint64_t)a3);
    CFX::RG::TextureDescriptorReference::withSizeFactor(&v167, v46, (float *)v166);
  }
  CFX::RG::TextureDescriptorReference::withPixelFormatIf(v166, MTLPixelFormatRGBA16Float, *a5, (uint64_t)v162);
  v47 = sub_1B17A34D0(a1, (uint64_t)"COLOR", v162);
  *(_QWORD *)a6 = v47;
  v48 = (_WORD *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, v47);
  LOWORD(v49) = *v48;
  *(float *)&v50 = (float)v49;
  LOWORD(v51) = v48[1];
  *((float *)&v50 + 1) = (float)v51;
  *((_QWORD *)a5 + 1) = v50;
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)v166, MTLPixelFormatDepth32Float, (uint64_t)v161);
  *(_QWORD *)(a6 + 8) = sub_1B17A34D0(a1, (uint64_t)"DEPTH", v161);
  sub_1B1815A88((uint64_t)a3, a5[5]);
  if (a5[5])
  {
    CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)v166, MTLPixelFormatRGBA16Float, (uint64_t)v160);
    *(_QWORD *)(a6 + 24) = sub_1B17A34D0(a1, (uint64_t)"VELOCITY", v160);
  }
  if (a5[2])
  {
    CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)v166, MTLPixelFormatRGBA16Float, (uint64_t)v159);
    *(_QWORD *)(a6 + 16) = sub_1B17A34D0(a1, (uint64_t)"NORMAL", v159);
    CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)v166, MTLPixelFormatRGBA16Float, (uint64_t)v158);
    *(_QWORD *)(a6 + 40) = sub_1B17A34D0(a1, (uint64_t)"REFLECTANCE ROUGHNESS", v158);
    CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)v166, MTLPixelFormatRGBA16Float, (uint64_t)v157);
    *(_QWORD *)(a6 + 32) = sub_1B17A34D0(a1, (uint64_t)"RADIANCE", v157);
  }
  if (*(_BYTE *)a4)
    v59 = 40;
  else
    v59 = 32;
  if (sub_1B1814D00((uint64_t)a3, v52, v53, v54, v55, v56, v57, v58))
    v59 |= 0x100uLL;
  v60 = *(float32x4_t *)(a4 + 16);
  if ((vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v60))) & 0x80000000) != 0)
  {
    v63 = *(float32x2_t *)(a5 + 8);
    *(float32x2_t *)&v62 = vmul_f32(*(float32x2_t *)v60.f32, v63);
    *((float32x2_t *)&v62 + 1) = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL), v63);
    v61 = 1;
  }
  else
  {
    v61 = 0;
    v62 = 0uLL;
  }
  *(_QWORD *)&v167 = a3;
  BYTE8(v167) = 1;
  v170 = 0;
  v168 = v31;
  v169 = 0;
  *(_OWORD *)((char *)v171 + 8) = v62;
  BYTE8(v171[1]) = v61;
  *(_OWORD *)((char *)&v171[2] + 8) = *(_OWORD *)(a4 + 40);
  BYTE8(v171[3]) = sub_1B1814EF8((uint64_t)a3);
  BYTE9(v171[3]) = sub_1B1815C80((uint64_t)a3);
  *(_QWORD *)&v171[4] = v59;
  DWORD2(v171[4]) = 1;
  WORD6(v171[4]) = v152;
  v64 = (CFX::RG::Pass *)sub_1B18E6560(a1, &v167, (uint64_t)"MainCulling");
  if (sub_1B1865610(v33, v65, v66, v67, v68, v69, v70, v71))
  {
    v79 = sub_1B1864F3C(v33, v72, v73, v74, v75, v76, v77, v78);
    CFX::RG::TextureDescriptorReference::withSampleCount(v166, 1, (uint64_t)&v167);
    CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v167, MTLPixelFormatDepth32Float, (uint64_t)v156);
    v80 = sub_1B17A34D0(a1, (uint64_t)"DEPTH_PREPASS", v156);
    CFX::RG::TextureDescriptorReference::withSampleCount(v166, 1, (uint64_t)&v167);
    CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v167, MTLPixelFormatRGBA16Float, (uint64_t)v155);
    v81 = sub_1B17A34D0(a1, (uint64_t)"NORMAL_PREPASS", v155);
    *(_QWORD *)&v167 = "depthPrePass";
    *((_QWORD *)&v167 + 1) = a3;
    LOWORD(v168) = 0;
    LOBYTE(v169) = 0;
    v170 = sub_1B18E63D8((uint64_t)v64);
    *(_QWORD *)&v171[0] = 0;
    *((_QWORD *)&v171[0] + 1) = v80;
    *(_QWORD *)&v171[1] = v81;
    memset((char *)&v171[1] + 8, 0, 56);
    v88 = sub_1B1840038(a1, (uint64_t)&v167, v82, v83, v84, v85, v86, v87);
    CFX::RG::Pass::dependsOn(v88, v64);
    LOBYTE(v167) = 0;
    DWORD1(v167) = sub_1B18E8CD4(v79, v89, v90, v91, v92, v93, v94, v95);
    DWORD2(v167) = sub_1B18E91D8(v79, v96, v97, v98, v99, v100, v101, v102);
    HIDWORD(v167) = sub_1B18E9308(v79, v103, v104, v105, v106, v107, v108, v109);
    v110 = sub_1B1815CC0((uint64_t)a3);
    *(float *)&v168 = v110 * (float)(1.0 / sub_1B1815C9C((uint64_t)a3));
    v169 = a3;
    v170 = 0;
    *(_QWORD *)&v171[0] = v80;
    *(_OWORD *)((char *)v171 + 8) = (unint64_t)v81;
    v111 = sub_1B17C25A0(a1, (CFX::RG::RenderGraphContext *)a2, (uint64_t)&v167);
    CFX::RG::Pass::dependsOn(v111, (CFX::RG::Pass *)v88);
  }
  else
  {
    v111 = 0;
  }
  *(_QWORD *)&v167 = "Main";
  *((_QWORD *)&v167 + 1) = a3;
  LOBYTE(v168) = sub_1B1814EF8((uint64_t)a3);
  if (sub_1B1814EF8((uint64_t)a3) == 1)
    v112 = sub_1B1815C10((uint64_t)a3);
  else
    v112 = 0;
  BYTE1(v168) = v112;
  LOBYTE(v169) = 1;
  v170 = sub_1B18E63D8((uint64_t)v64);
  v113 = *(_OWORD *)(a6 + 16);
  v171[0] = *(_OWORD *)a6;
  v171[1] = v113;
  v114 = *(_OWORD *)(a6 + 48);
  v171[2] = *(_OWORD *)(a6 + 32);
  v171[3] = v114;
  v171[4] = *v153;
  v40 = sub_1B1840038(a1, (uint64_t)&v167, v115, v116, v117, v118, v119, v120);
  CFX::RG::Pass::dependsOn(v40, v64);
  if (v111)
    CFX::RG::Pass::dependsOn(v40, (CFX::RG::Pass *)v111);
  v126 = sub_1B190D680(a1, a2[2], (uint64_t)a3, v121, v122, v123, v124, v125);
  v127 = (uint64_t *)v126;
  if (v126)
  {
    CFX::RG::Pass::readFrom(v40, *(CFX::RG::Resource **)(v126 + 424));
    CFX::RG::Pass::dependsOn(v127, v64);
  }
  v128 = a2[2];
  v129 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)a6);
  v130 = v129[1];
  v154[0] = *v129;
  v154[1] = v130;
  v131 = v129[2];
  v132 = v129[3];
  v133 = v129[5];
  v154[4] = v129[4];
  v154[5] = v133;
  v154[2] = v131;
  v154[3] = v132;
  v134 = v129[6];
  v135 = v129[7];
  v136 = v129[9];
  v154[8] = v129[8];
  v154[9] = v136;
  v154[6] = v134;
  v154[7] = v135;
  sub_1B1912AD4((uint64_t)a1, v128, (uint64_t)a3, (uint64_t)v154, v137, v138, v139, v140, (uint64_t *)&v167);
  if (DWORD2(v167))
  {
    v146 = v168;
    v147 = 8 * DWORD2(v167);
    do
    {
      v148 = *v146;
      CFX::RG::Pass::readFrom(v40, (CFX::RG::Resource *)(*v146)[71]);
      v149 = (CFX::RG::Resource *)v148[72];
      if (v149)
        CFX::RG::Pass::readFrom(v40, v149);
      CFX::RG::Pass::dependsOn(v148, v64);
      ++v146;
      v147 -= 8;
    }
    while (v147);
  }
  v165[0] = (uint64_t)a3;
  v165[1] = 0;
  v150 = (CFX::RG::Pass *)sub_1B17CBB74(a1, (uint64_t)a2, v165, v141, v142, v143, v144, v145);
  if (v150)
  {
    CFX::RG::Pass::dependsOn(v40, v150);
    CFX::RG::Pass::dependsOn((uint64_t *)v150, v64);
  }
  return v40;
}

CFX::RG::Resource *sub_1B17A34D0(uint64_t *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFX::RG::Resource *v6;
  CFX::RG::Resource *v7;
  char v9;
  uint64_t v10;

  v10 = a2;
  v4 = *a1;
  v5 = a1[1];
  v9 = 1;
  sub_1B17A38A0(v4, v5, &v10, a3, &v9);
  v7 = v6;
  CFX::RG::RenderGraphBuilder::appendResource(a1, v6);
  return v7;
}

void sub_1B17A352C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[3];

  sub_1B1815FE8(*(_QWORD *)(a1 + 24), 0);
  v13 = sub_1B1814768(*(uint64_t **)(a1 + 24), v6, v7, v8, v9, v10, v11, v12);
  if (v13 && sub_1B186CFA8((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20))
  {
    if (*(_BYTE *)(a1 + 49))
      memset(v39, 0, sizeof(v39));
    else
      sub_1B18A8498(v39, *(_QWORD *)(a1 + 24), 0);
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0uLL;
    v21 = sub_1B17A2DF4(a3, a2, *(uint64_t **)(a1 + 24), a1 + 48, (unsigned __int8 *)v39, (uint64_t)&v35, &v34, 0);
    v22 = v35;
    if ((_QWORD)v35)
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v33, *(_WORD *)(a1 + 8), 9273, 1656467160);
      CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v33, v22, (uint64_t)v21);
    }
    v23 = *((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1))
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v32, *(_WORD *)(a1 + 8), 9273, -797957750);
      CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v32, v23, (uint64_t)v21);
    }
    v24 = v36;
    if ((_QWORD)v36)
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v31, *(_WORD *)(a1 + 8), 9273, 1490954098);
      CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v31, v24, (uint64_t)v21);
    }
    v25 = *((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v30, *(_WORD *)(a1 + 8), 9273, -691122579);
      CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v30, v25, (uint64_t)v21);
    }
    v26 = v37;
    if ((_QWORD)v37)
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v29, *(_WORD *)(a1 + 8), 9273, 839732700);
      CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v29, v26, (uint64_t)v21);
    }
    v27 = *((_QWORD *)&v36 + 1);
    if (*((_QWORD *)&v36 + 1))
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v28, *(_WORD *)(a1 + 8), 9273, -1170177454);
      CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v28, v27, (uint64_t)v21);
    }
  }
}

uint64_t sub_1B17A371C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  sub_1B17A378C((unsigned int *)a1, a3, 1);
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      v7 = *a2++;
      v9 = v7;
      sub_1B17A3844(a1, &v9);
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1B17A378C(unsigned int *a1, int a2, int a3)
{
  unsigned int *v4;
  unsigned int *v5;
  double v6;
  unsigned int v7;
  void *v8;

  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  v5 = a1 + 4;
  v6 = 1.5;
  if (a3)
    v6 = 1.0;
  v7 = (v6 * (double)(a1[1] + a2));
  v8 = malloc_type_malloc(8 * v7, 0xD5346062uLL);
  memset(v8, 255, 8 * v7);
  memcpy(v8, v4, 8 * *a1);
  *((_QWORD *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v5)
    free(v4);
}

void sub_1B17A3844(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B17A378C((unsigned int *)a1, 1, 0);
    v4 = *(_DWORD *)a1;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = *a2;
  ++*(_DWORD *)a1;
}

double sub_1B17A38A0(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4, char *a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  _OWORD v16[10];
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  v8 = sub_1B179C1C0(v17, 0xE0u, 8u);
  v9 = *a3;
  v10 = a4[7];
  v16[6] = a4[6];
  v16[7] = v10;
  v11 = a4[9];
  v16[8] = a4[8];
  v16[9] = v11;
  v12 = a4[3];
  v16[2] = a4[2];
  v16[3] = v12;
  v13 = a4[5];
  v16[4] = a4[4];
  v16[5] = v13;
  v14 = a4[1];
  v16[0] = *a4;
  v16[1] = v14;
  *(_QWORD *)&result = CFX::RG::Resource::Resource(v8, v9, (uint64_t)v16, *a5).n128_u64[0];
  return result;
}

uint64_t sub_1B17A3924()
{
  if (qword_1ED4CED40 != -1)
    dispatch_once(&qword_1ED4CED40, &unk_1E63D09B0);
  return qword_1ED4CED48;
}

void sub_1B17A3964()
{
  if (!qword_1ED4CED48)
  {
    qword_1ED4CED48 = sub_1B179CB60(&qword_1ED4CED48);
    qword_1ED4BE730 = (uint64_t)sub_1B17A6B08;
  }
}

uint64_t sub_1B17A39B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_1ED4CED40 != -1)
    dispatch_once(&qword_1ED4CED40, &unk_1E63D09B0);
  v6 = sub_1B179CB90(qword_1ED4CED48, 0xD0uLL);
  if (!v6)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v0, v1, v2, v3, v4, v5, (uint64_t)"meshElement");
  *(_BYTE *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_DWORD *)(v6 + 128) = 0x10000;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_DWORD *)(v6 + 68) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v6 + 144) = _D0;
  *(_DWORD *)(v6 + 152) = 1065353216;
  return v6;
}

uint64_t sub_1B17A3A60()
{
  if (qword_1EEF65598 != -1)
    dispatch_once(&qword_1EEF65598, &unk_1E63D1A10);
  return qword_1EEF655A0;
}

uint64_t sub_1B17A3AA0()
{
  uint64_t result;

  result = sub_1B17A39B4();
  qword_1EEF655A0 = result;
  return result;
}

void sub_1B17A3ABC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef cf, uint64_t a7, uint64_t a8)
{
  char v8;
  char v10;
  char v11;
  int v12;

  v8 = a7;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, (uint64_t)cf, a7, a8, (uint64_t)"meshElement");
  *(_BYTE *)(a1 + 88) = a2;
  *(_BYTE *)(a1 + 130) = v11;
  *(_BYTE *)(a1 + 131) = v10;
  *(_DWORD *)(a1 + 104) = v12;
  sub_1B17A44B0(a1, cf, v8);
  free(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
}

void sub_1B17A3B60(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  *(_BYTE *)(a1 + 88) = a2;
}

CFTypeRef sub_1B17A3BAC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v10;
  char v11;
  int v12;
  CFTypeRef result;

  v8 = a7;
  v10 = a5;
  v11 = a4;
  v12 = a3;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, (uint64_t)a6, a7, a8, (uint64_t)"meshElement");
  *(_BYTE *)(a1 + 88) = a2;
  *(_BYTE *)(a1 + 130) = v11;
  *(_BYTE *)(a1 + 131) = v10;
  *(_DWORD *)(a1 + 104) = v12;
  sub_1B17A44B0(a1, 0, v8);
  free(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  result = CFRetain(a6);
  *(_QWORD *)(a1 + 136) = result;
  return result;
}

void sub_1B17A3C5C(uint64_t a1, char a2, uint64_t a3, CFTypeRef cf, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B17A3ABC(a1, a2, a3, 1, 1, cf, a5, a8);
}

uint64_t sub_1B17A3C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"input");
  v9 = sub_1B17A39B4();
  sub_1B17A3CD0(a1, v9, 0, v10, v11, v12, v13, v14);
  return v9;
}

void sub_1B17A3CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const __CFData *v11;
  CFDataRef Copy;
  CFDataRef v13;
  CFTypeRef v14;
  const __CFData *v15;
  CFTypeRef v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  void *v26;

  v8 = a3;
  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"src");
    if (a2)
      goto LABEL_3;
LABEL_16:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"dst");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_16;
LABEL_3:
  *(_WORD *)(a2 + 80) = *(_WORD *)(a1 + 80);
  *(_BYTE *)(a2 + 88) = *(_BYTE *)(a1 + 88);
  v11 = *(const __CFData **)(a1 + 96);
  if (v8 && v11)
  {
    Copy = CFDataCreateCopy(0, v11);
    v13 = *(CFDataRef *)(a2 + 96);
    if (v13 != Copy)
    {
      if (v13)
      {
        CFRelease(v13);
        *(_QWORD *)(a2 + 96) = 0;
      }
      if (Copy)
        v14 = CFRetain(Copy);
      else
        v14 = 0;
      *(_QWORD *)(a2 + 96) = v14;
    }
    CFRelease(Copy);
  }
  else
  {
    v15 = *(const __CFData **)(a2 + 96);
    if (v15 != v11)
    {
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(a2 + 96) = 0;
        v11 = *(const __CFData **)(a1 + 96);
      }
      if (v11)
        v16 = CFRetain(v11);
      else
        v16 = 0;
      *(_QWORD *)(a2 + 96) = v16;
    }
  }
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 104);
  free(*(void **)(a2 + 112));
  *(_QWORD *)(a2 + 112) = 0;
  if (*(_QWORD *)(a1 + 112))
  {
    v17 = 4 * *(unsigned int *)(a1 + 104);
    v18 = malloc_type_malloc(v17, 0x4BA2350uLL);
    *(_QWORD *)(a2 + 112) = v18;
    memcpy(v18, *(const void **)(a1 + 112), v17);
  }
  free(*(void **)(a2 + 120));
  *(_QWORD *)(a2 + 120) = 0;
  if (*(_QWORD *)(a1 + 120))
  {
    v25 = 2 * *(unsigned __int16 *)(a1 + 128);
    v26 = malloc_type_malloc(v25, 0xFF13E64BuLL);
    *(_QWORD *)(a2 + 120) = v26;
    memcpy(v26, *(const void **)(a1 + 120), v25);
  }
  *(_DWORD *)(a2 + 128) = *(_DWORD *)(a1 + 128);
  sub_1B193EAC4(a1, (CFTypeRef *)a2, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_1B17A3E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"input");
  v9 = sub_1B17A39B4();
  sub_1B17A3CD0(a1, v9, 1, v10, v11, v12, v13, v14);
  return v9;
}

CFTypeRef sub_1B17A3ED4(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  result = *(CFTypeRef *)(a1 + 168);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 168) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 168) = result;
  }
  return result;
}

uint64_t sub_1B17A3F4C(CFArrayRef theArray, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  CFTypeRef *ValueAtIndex;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  CFIndex i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  UInt8 *v69;
  CFIndex j;
  CFDataRef *v71;
  CFIndex Length;
  const UInt8 *BytePtr;
  unint64_t v74;
  uint64_t v75;
  uint64_t v77;
  __CFData *cf;

  if (!theArray)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"elements");
  Count = CFArrayGetCount(theArray);
  if (!Count)
    return 0;
  v16 = Count;
  if (Count < 1)
  {
LABEL_10:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"meshElement");
    LODWORD(v17) = 0;
    ValueAtIndex = 0;
    v20 = 1;
  }
  else
  {
    v17 = 0;
    while (1)
    {
      ValueAtIndex = (CFTypeRef *)CFArrayGetValueAtIndex(theArray, v17);
      if (!ValueAtIndex)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"meshElement");
      if (*((unsigned __int8 *)ValueAtIndex + 88) < 6u)
        break;
      if (v16 == ++v17)
        goto LABEL_10;
    }
    v20 = 0;
  }
  v21 = *((unsigned __int8 *)ValueAtIndex + 81);
  v28 = sub_1B17A4304((uint64_t)ValueAtIndex, v18, v10, v11, v12, v13, v14, v15);
  v29 = *((unsigned __int8 *)ValueAtIndex + 88);
  v30 = *((unsigned __int8 *)ValueAtIndex + 80);
  if (v29 == 1)
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshElementCreateByMergingElements - strip not supported"), v22, v23, v24, v25, v26, v27, v77);
  for (i = (v17 + 1); v16 > i; ++i)
  {
    v39 = (unsigned __int8 *)CFArrayGetValueAtIndex(theArray, i);
    if (!v39)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v33, v34, v35, v36, v37, v38, (uint64_t)"meshElement");
    if (v39[88] <= 5u)
    {
      v40 = sub_1B17A4304((uint64_t)v39, v32, v33, v34, v35, v36, v37, v38);
      if ((_DWORD)v30 != v39[80])
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshElementCreateByMergingElements - merging elements with different byte per index"), v41, v42, v43, v44, v45, v46, v77);
        return 0;
      }
      v28 += v40;
    }
  }
  v53 = sub_1B17A39B4();
  if (v20)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v47, v48, v49, v50, v51, v52, (uint64_t)"meshElement");
  sub_1B17A3ED4(v53, ValueAtIndex[21], v47, v48, v49, v50, v51, v52);
  if (!v53)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v54, v55, v56, v57, v58, v59, (uint64_t)"meshElement");
  *(_BYTE *)(v53 + 81) = v21 != 0;
  *(_BYTE *)(v53 + 88) = v29;
  Mutable = CFDataCreateMutable(0, v28 * v30);
  CFDataSetLength(Mutable, v28 * v30);
  cf = Mutable;
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  if (v16 >= 1)
  {
    v69 = MutableBytePtr;
    for (j = 0; j != v16; ++j)
    {
      v71 = (CFDataRef *)CFArrayGetValueAtIndex(theArray, j);
      if (!v71)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v63, v64, v65, v66, v67, v68, (uint64_t)"meshElement");
      if (*((unsigned __int8 *)v71 + 88) <= 5u)
      {
        Length = CFDataGetLength(v71[12]);
        BytePtr = CFDataGetBytePtr(v71[12]);
        memcpy(v69, BytePtr, Length);
        v69 += Length;
      }
    }
  }
  v74 = sub_1B17A4410(v53, v62, v63, v64, v65, v66, v67, v68);
  if (v74 <= 1)
    v75 = 1;
  else
    v75 = v74;
  *(_DWORD *)(v53 + 104) = v28 / v75;
  sub_1B17A44B0(v53, cf, v30);
  free(*(void **)(v53 + 120));
  *(_QWORD *)(v53 + 120) = 0;
  *(_WORD *)(v53 + 128) = 0;
  CFRelease(cf);
  return v53;
}

BOOL sub_1B17A4260(unsigned int a1)
{
  return a1 < 6;
}

uint64_t sub_1B17A426C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  return *(char *)(a1 + 88);
}

BOOL sub_1B17A42B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  return *(_BYTE *)(a1 + 81) != 0;
}

uint64_t sub_1B17A4304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  v9 = *(unsigned __int8 *)(a1 + 88);
  if (v9 != 4)
    return sub_1B17A4A10((char)v9, *(unsigned int *)(a1 + 104), a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int8 *)(a1 + 80);
  v10 = *(unsigned int *)(a1 + 104);
  v18 = CFDataGetLength(*(CFDataRef *)(a1 + 96)) / v11 - v10;
  v19 = *(unsigned __int8 *)(a1 + 130);
  v20 = v18 / v19;
  if (v18 % v19)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Internal consistency error: number of indices should be a multiple of number of channels"), v12, v13, v14, v15, v16, v17, (uint64_t)"indexCount % channelCount == 0");
  return v20;
}

void sub_1B17A43C4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  *(_BYTE *)(a1 + 81) = a2;
}

uint64_t sub_1B17A4410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  v8 = *(char *)(a1 + 88);
  if (v8 < 4)
    return qword_1B2245740[v8];
  sub_1B17C4408(0, (uint64_t)CFSTR("Warning: %s does not support non-renderable topologies."), a3, a4, a5, a6, a7, a8, (uint64_t)"CFXMeshElementGetIndexCountPerPrimitive");
  return 0;
}

void sub_1B17A4464(uint64_t a1, int a2, CFTypeRef cf, char a4)
{
  *(_DWORD *)(a1 + 104) = a2;
  sub_1B17A44B0(a1, cf, a4);
  free(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
}

BOOL sub_1B17A44A0(char a1)
{
  return (a1 & 0xFA) == 0;
}

void sub_1B17A44B0(uint64_t a1, CFTypeRef cf, char a3)
{
  CFTypeRef v3;
  CFTypeRef v5;
  void *v6;
  CFIndex Length;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;

  v3 = cf;
  *(_BYTE *)(a1 + 80) = a3;
  v5 = *(CFTypeRef *)(a1 + 96);
  if (v5 != cf)
  {
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (v3)
      v3 = CFRetain(v3);
    *(_QWORD *)(a1 + 96) = v3;
  }
  v6 = *(void **)(a1 + 112);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 112) = 0;
    v3 = *(CFTypeRef *)(a1 + 96);
  }
  if (v3)
  {
    Length = CFDataGetLength((CFDataRef)v3);
    v8 = *(unsigned int *)(a1 + 64);
    v9 = *(unsigned __int8 *)(a1 + 80);
    if (Length < v8 + sub_1B17A4304(a1, v10, v11, v12, v13, v14, v15, v16) * v9)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshElementSetPrimitives invalid index buffer size"), v17, v18, v19, v20, v21, v22, v24);
      v23 = *(const void **)(a1 + 96);
      if (v23)
      {
        CFRelease(v23);
        *(_QWORD *)(a1 + 96) = 0;
      }
    }
  }
}

uint64_t sub_1B17A4568(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136);
}

uint64_t sub_1B17A4570(uint64_t a1, _DWORD *a2)
{
  if (a2)
    *a2 = *(unsigned __int8 *)(a1 + 80);
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_1B17A4584(uint64_t a1)
{
  if (*(_WORD *)(a1 + 128) == 1)
    return **(_QWORD **)(a1 + 120);
  else
    return -1;
}

_QWORD *sub_1B17A45A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _QWORD *result;

  v6 = *(unsigned __int16 *)(a1 + 128);
  result = *(_QWORD **)(a1 + 120);
  if (!v6)
  {
    result = malloc_type_realloc(result, 0x10uLL, 0x1000040451B5BE8uLL);
    *(_QWORD *)(a1 + 120) = result;
  }
  *result = a2;
  result[1] = a3;
  *(_WORD *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_1B17A4608(uint64_t a1, _WORD *a2)
{
  if (a2)
    *a2 = *(_WORD *)(a1 + 128);
  return *(_QWORD *)(a1 + 120);
}

void sub_1B17A461C(uint64_t a1, uint64_t a2, __int16 a3)
{
  free(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 120) = a2;
  *(_WORD *)(a1 + 128) = a3;
}

uint64_t sub_1B17A4658(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  if (*(_QWORD *)(result + 120))
  {
    v2 = result;
    if (*(_WORD *)(result + 128))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)(v2 + 120) + v4), *(_QWORD *)(*(_QWORD *)(v2 + 120) + v4 + 8));
        ++v5;
        v4 += 16;
      }
      while (v5 < *(unsigned __int16 *)(v2 + 128));
    }
  }
  return result;
}

uint64_t sub_1B17A46C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 120);
  if (!v1)
    return *(unsigned int *)(a1 + 104);
  v2 = *(unsigned __int16 *)(a1 + 128);
  if (!*(_WORD *)(a1 + 128))
    return 0;
  result = 0;
  v4 = (uint64_t *)(v1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
    result += v5;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t sub_1B17A4700(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  if (*(_QWORD *)(result + 120))
  {
    v4 = *(unsigned __int16 *)(result + 128);
    if (*(_WORD *)(result + 128))
    {
      v5 = 0;
      do
      {
        v6 = (unsigned int *)(*(_QWORD *)(v3 + 120) + 16 * v5);
        v7 = *v6;
        v8 = *((_QWORD *)v6 + 1);
        if (v7 < (int)v8 + (int)v7)
        {
          do
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v7);
            v7 = (v7 + 1);
            LODWORD(v8) = v8 - 1;
          }
          while ((_DWORD)v8);
          v4 = *(unsigned __int16 *)(v3 + 128);
        }
        ++v5;
      }
      while (v5 < v4);
    }
  }
  else if (*(_DWORD *)(result + 104))
  {
    v9 = 0;
    do
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v9);
      v9 = (v9 + 1);
    }
    while (v9 < *(_DWORD *)(v3 + 104));
  }
  return result;
}

uint64_t sub_1B17A47BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 130);
}

uint64_t sub_1B17A47C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 131);
}

float sub_1B17A47CC(uint64_t a1)
{
  return *(float *)(a1 + 144);
}

uint64_t sub_1B17A47D4(uint64_t result, float a2)
{
  *(float *)(result + 144) = a2;
  return result;
}

float sub_1B17A47DC(uint64_t a1)
{
  return *(float *)(a1 + 148);
}

uint64_t sub_1B17A47E4(uint64_t result, float a2)
{
  *(float *)(result + 148) = a2;
  return result;
}

float sub_1B17A47EC(uint64_t a1)
{
  return *(float *)(a1 + 152);
}

uint64_t sub_1B17A47F4(uint64_t result, float a2)
{
  *(float *)(result + 152) = a2;
  return result;
}

uint64_t sub_1B17A47FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

const UInt8 *sub_1B17A4804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v12;
  int v13;
  int v14;
  const UInt8 *result;
  const UInt8 *v16;
  uint64_t v17;
  const UInt8 *v18;

  v9 = a2;
  v12 = *(unsigned __int8 *)(a1 + 130);
  if (a2 < 0 || v12 <= a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Mesh element has %d channels but channel %d was requested"), a3, a4, a5, a6, a7, a8, (uint64_t)"channel >= 0 && channel < channelCount");
  v13 = *(unsigned __int8 *)(a1 + 131);
  if (!*(_BYTE *)(a1 + 131))
    v9 *= sub_1B17A4304(a1, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(unsigned __int8 *)(a1 + 88);
  result = *(const UInt8 **)(a1 + 96);
  if (result)
  {
    result = CFDataGetBytePtr((CFDataRef)result);
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 8) = 0;
    if (v14 == 4 && result)
      v16 = &result[*(_DWORD *)(a1 + 104) * *(unsigned __int8 *)(a1 + 80)];
    else
      v16 = result;
  }
  else
  {
    v16 = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)(a9 + 24) = 0;
  }
  *(_QWORD *)a9 = v16;
  if (v13)
    v17 = v12;
  else
    v17 = 1;
  *(_DWORD *)(a9 + 8) = *(_DWORD *)(a1 + 104);
  *(_QWORD *)(a9 + 16) = *(_QWORD *)(a1 + 120);
  *(_WORD *)(a9 + 24) = *(_WORD *)(a1 + 128);
  *(_BYTE *)(a9 + 26) = *(_BYTE *)(a1 + 88);
  *(_BYTE *)(a9 + 27) = *(_BYTE *)(a1 + 80);
  if (v14 == 4)
    v18 = result;
  else
    v18 = 0;
  *(_QWORD *)(a9 + 32) = v18;
  *(_QWORD *)(a9 + 40) = v9;
  *(_QWORD *)(a9 + 48) = v17;
  return result;
}

uint64_t sub_1B17A4914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t Length;
  const UInt8 *BytePtr;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (*(_BYTE *)(a1 + 88) == 4)
  {
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 96));
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 96));
    v18 = *(unsigned __int8 *)(a1 + 80);
    if (*(unsigned __int8 *)(a1 + 80) * (unint64_t)(a2 + 1) <= Length)
    {
      switch(v18)
      {
        case 4:
          return *(unsigned int *)&BytePtr[4 * a2];
        case 2:
          return *(unsigned __int16 *)&BytePtr[2 * a2];
        case 1:
          return BytePtr[a2];
      }
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. %s - unsupported index size (%ld)"), v12, v13, v14, v15, v16, v17, (uint64_t)"false");
    }
    else
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: __readIndexInBuffer - index (%u) out of bounds (%lu)"), v12, v13, v14, v15, v16, v17, a2);
    }
    return 0;
  }
  return sub_1B17A4410(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B17A4A10(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  switch(a1)
  {
    case 0:
      a2 *= 3;
      break;
    case 1:
    case 5:
      a2 += 2;
      break;
    case 2:
      a2 *= 2;
      break;
    case 3:
      return a2;
    default:
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshElementGetIndexCount:primitive type not handled"), a3, a4, a5, a6, a7, a8, v8);
      a2 = 0;
      break;
  }
  return a2;
}

uint64_t sub_1B17A4A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const __CFData *v17;
  unsigned int v18;
  unint64_t v19;
  const UInt8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v29;
  unint64_t Length;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  const UInt8 *BytePtr;

  v8 = a4;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  if (*(_BYTE *)(a1 + 88) == 4)
  {
    v12 = *(unsigned int *)(a1 + 104);
    v13 = *(_DWORD **)(a1 + 112);
    if (v13)
      goto LABEL_5;
    v29 = *(unsigned __int8 *)(a1 + 80);
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 96));
    BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 96));
    if (BytePtr)
    {
      v31 = *(unsigned int *)(a1 + 104);
      v13 = malloc_type_malloc(4 * v31, 0x100004052888210uLL);
      *(_QWORD *)(a1 + 112) = v13;
      if (!(_DWORD)v31)
        goto LABEL_5;
      v36 = v12;
      v32 = 0;
      v33 = 0;
      v34 = v29;
      while (v34 <= Length)
      {
        switch((_DWORD)v29)
        {
          case 4:
            v35 = *(_DWORD *)&BytePtr[4 * v32];
            break;
          case 2:
            v35 = *(unsigned __int16 *)&BytePtr[2 * v32];
            break;
          case 1:
            v35 = BytePtr[v32];
            break;
          default:
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. %s - unsupported index size (%ld)"), a3, a4, a5, a6, a7, a8, (uint64_t)"false");
            goto LABEL_34;
        }
LABEL_35:
        v33 += v35;
        v13 = *(_DWORD **)(a1 + 112);
        v13[v32] = v33;
        v34 += v29;
        if (v31 == ++v32)
        {
          v12 = v36;
          goto LABEL_5;
        }
      }
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: __readIndexInBuffer - index (%u) out of bounds (%lu)"), a3, a4, a5, a6, a7, a8, v32);
LABEL_34:
      v35 = 0;
      goto LABEL_35;
    }
    v13 = *(_DWORD **)(a1 + 112);
LABEL_5:
    v14 = 0;
    if (a2 >= 1 && v13)
      v14 = v13[a2 - 1];
  }
  else
  {
    v12 = 0;
    v14 = sub_1B17A4410(a1, a2, a3, a4, a5, a6, a7, a8) * a2;
  }
  if (*(_BYTE *)(a1 + 131))
  {
    v15 = *(unsigned __int8 *)(a1 + 130);
  }
  else
  {
    v8 *= sub_1B17A4304(a1, a2, a3, a4, a5, a6, a7, a8);
    v15 = 1;
  }
  v16 = v8 + v12 + v15 * (a3 + v14);
  v17 = *(const __CFData **)(a1 + 96);
  if (v17)
  {
    v18 = *(unsigned __int8 *)(a1 + 80);
    v19 = CFDataGetLength(*(CFDataRef *)(a1 + 96));
    v20 = CFDataGetBytePtr(v17);
    if (v18 * (unint64_t)(v16 + 1) <= v19)
    {
      switch(v18)
      {
        case 4u:
          return *(unsigned int *)&v20[4 * v16];
        case 2u:
          return *(unsigned __int16 *)&v20[2 * v16];
        case 1u:
          return v20[v16];
      }
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. %s - unsupported index size (%ld)"), v21, v22, v23, v24, v25, v26, (uint64_t)"false");
    }
    else
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: __readIndexInBuffer - index (%u) out of bounds (%lu)"), v21, v22, v23, v24, v25, v26, v16);
    }
    return 0;
  }
  return v16;
}

uint64_t sub_1B17A4D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  unsigned int v11;
  unsigned int v12;
  unint64_t Length;
  const UInt8 *BytePtr;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const UInt8 *v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;

  v8 = a3;
  v9 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  v11 = sub_1B17A4304(a1, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(unsigned __int8 *)(a1 + 80);
  Length = CFDataGetLength(*(CFDataRef *)(a1 + 96));
  BytePtr = CFDataGetBytePtr(*(CFDataRef *)(a1 + 96));
  v21 = BytePtr;
  if (*(_BYTE *)(a1 + 88) == 4)
  {
    v22 = *(_DWORD *)(a1 + 104);
    v21 = &BytePtr[v22 * (unint64_t)v12];
    Length -= v22 * (unint64_t)v12;
  }
  if (*(_BYTE *)(a1 + 131))
  {
    if (v11)
    {
      v23 = 0;
      while (1)
      {
        v24 = v9 + v23 * *(unsigned __int8 *)(a1 + 130);
        if (v12 * (unint64_t)(v24 + 1) > Length)
          break;
        switch(v12)
        {
          case 4u:
            v25 = *(_DWORD *)&v21[4 * v24];
            break;
          case 2u:
            v25 = *(unsigned __int16 *)&v21[2 * v24];
            break;
          case 1u:
            v25 = v21[v24];
            break;
          default:
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. %s - unsupported index size (%ld)"), v15, v16, v17, v18, v19, v20, (uint64_t)"false");
            goto LABEL_10;
        }
LABEL_11:
        v26 = v8 + v23 * *(unsigned __int8 *)(a1 + 130);
        if (v12 * (unint64_t)(v26 + 1) <= Length)
        {
          switch(v12)
          {
            case 4u:
              v27 = *(_DWORD *)&v21[4 * v26];
              goto LABEL_14;
            case 2u:
              v27 = *(unsigned __int16 *)&v21[2 * v26];
              goto LABEL_14;
            case 1u:
              v27 = v21[v26];
              goto LABEL_14;
          }
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. %s - unsupported index size (%ld)"), v15, v16, v17, v18, v19, v20, (uint64_t)"false");
        }
        else
        {
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: __readIndexInBuffer - index (%u) out of bounds (%lu)"), v15, v16, v17, v18, v19, v20, v8 + v23 * *(unsigned __int8 *)(a1 + 130));
        }
        v27 = 0;
LABEL_14:
        if (v25 != v27)
          return 0;
        if (v11 == ++v23)
          return 1;
      }
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: __readIndexInBuffer - index (%u) out of bounds (%lu)"), v15, v16, v17, v18, v19, v20, v9 + v23 * *(unsigned __int8 *)(a1 + 130));
LABEL_10:
      v25 = 0;
      goto LABEL_11;
    }
  }
  else if (memcmp(&v21[v12 * (unint64_t)(v11 * v9)], &v21[v12 * (unint64_t)(v11 * v8)], v11 * (unint64_t)v12))
  {
    return 0;
  }
  return 1;
}

uint64_t sub_1B17A4F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t result;
  unsigned __int8 i;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  v9 = *(unsigned __int8 *)(a1 + 130);
  if (v9 < 2)
    return 1;
  for (i = 1; i < v9; ++i)
  {
    result = sub_1B17A4D18(a1, 0, i, a4, a5, a6, a7, a8);
    if (!(_DWORD)result)
      break;
  }
  return result;
}

uint64_t sub_1B17A4FB0(uint64_t result)
{
  if (*(_QWORD *)(result + 72))
    return *(_QWORD *)(result + 72);
  return result;
}

uint64_t sub_1B17A4FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_1B17A5008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1B17A5050()
{
  uint64_t result;

  result = sub_1B17A39B4();
  *(_BYTE *)(result + 82) = 1;
  return result;
}

BOOL sub_1B17A506C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  return *(_BYTE *)(a1 + 82) != 0;
}

void sub_1B17A50BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  *(_QWORD *)(a1 + 160) = a2;
}

uint64_t sub_1B17A5108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  return *(_QWORD *)(a1 + 160);
}

uint64_t sub_1B17A5150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  return *(unsigned __int8 *)(a1 + 80);
}

void sub_1B17A5198(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v8[5];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = sub_1B17A5C74;
  v8[3] = &unk_1E63D50D0;
  v8[4] = a2;
  sub_1B17A51EC(a1, 1, (uint64_t)v8, a4, a5, a6, a7, a8);
}

void sub_1B17A51EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t *v64;
  uint64_t m;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  _DWORD *v74;
  unsigned int v75;
  _DWORD *v76;
  uint64_t j;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  uint64_t k;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t i;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;
  char *v120;
  _QWORD *v121;
  uint64_t v122;
  char *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  char v128;
  _OWORD v129[3];
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned __int8 *)a1 + 26);
  v9 = (char)v8;
  v127 = *((unsigned int *)a1 + 2);
  v10 = *((unsigned __int8 *)a1 + 27);
  v11 = a1[4];
  v128 = 0;
  v13 = a2;
  switch(v8)
  {
    case 0:
    case 1:
    case 5:
      if ((_DWORD)a2 == 1)
      {
        if ((_DWORD)v127)
        {
          v15 = 0;
          v16 = 0;
          v17 = *a1;
          v19 = a1[5];
          v18 = a1[6];
          while (1)
          {
            if (v9)
            {
              if ((v16 & 1) != 0)
                v20 = 1;
              else
                v20 = 2;
              if ((v16 & 1) != 0)
                v21 = 2;
              else
                v21 = 1;
              v22 = v9 == 1 || v9 != 5;
              v23 = 1;
              if (v9 == 1)
                v24 = v20;
              else
                v24 = 2;
              if (v9 == 1)
                v25 = v21;
              else
                v25 = 1;
              if (!v17)
              {
LABEL_27:
                v28 = v23 * v16;
                LODWORD(v129[0]) = v16 * v22;
                DWORD1(v129[0]) = v25 + v28;
                v27 = v28 + v24;
                goto LABEL_30;
              }
            }
            else
            {
              v22 = 3;
              v23 = 3;
              v24 = 2;
              v25 = 1;
              if (!v17)
                goto LABEL_27;
            }
            switch((_DWORD)v10)
            {
              case 4:
                LODWORD(v129[0]) = *(_DWORD *)(v17 + 4 * (v19 + v15 * v22));
                v29 = v23 * v16;
                DWORD1(v129[0]) = *(_DWORD *)(v17 + 4 * (v19 + (v25 + v29) * v18));
                v27 = *(_DWORD *)(v17 + 4 * (v19 + (v29 + v24) * v18));
                goto LABEL_30;
              case 2:
                LODWORD(v129[0]) = *(unsigned __int16 *)(v17 + 2 * (v19 + v15 * v22));
                v30 = v23 * v16;
                DWORD1(v129[0]) = *(unsigned __int16 *)(v17 + 2 * (v19 + (v25 + v30) * v18));
                v27 = *(unsigned __int16 *)(v17 + 2 * (v19 + (v30 + v24) * v18));
                goto LABEL_30;
              case 1:
                LODWORD(v129[0]) = *(unsigned __int8 *)(v17 + v19 + v15 * v22);
                v26 = v23 * v16;
                DWORD1(v129[0]) = *(unsigned __int8 *)(v17 + v19 + (v25 + v26) * v18);
                v27 = *(unsigned __int8 *)(v17 + v19 + (v26 + v24) * v18);
LABEL_30:
                DWORD2(v129[0]) = v27;
                goto LABEL_31;
            }
            *(_QWORD *)&v129[0] = 0;
            DWORD2(v129[0]) = 0;
            sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), a3, a4, a5, a6, a7, a8, v10);
LABEL_31:
            (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, char *))(a3 + 16))(a3, v16, v129, 3, &v128);
            if (!v128)
            {
              ++v16;
              v15 += v18;
              if (v127 != v16)
                continue;
            }
            return;
          }
        }
      }
      else
      {
        v126 = &v125;
        MEMORY[0x1E0C80A78](a1, a2);
        v35 = (char *)&v125 - v34;
        if ((_DWORD)v127)
        {
          v36 = 0;
          do
          {
            if (v13)
            {
              v37 = 0;
              v38 = a1;
              do
              {
                v39 = *((_OWORD *)v38 + 1);
                v129[0] = *(_OWORD *)v38;
                v129[1] = v39;
                v129[2] = *((_OWORD *)v38 + 2);
                v130 = v38[6];
                sub_1B17A5DC4((uint64_t *)v129, v36, &v35[v37], &v35[4 * v13 + v37], &v35[8 * v13 + v37], v31, v32, v33);
                v37 += 4;
                v38 += 7;
              }
              while (4 * v13 != v37);
            }
            (*(void (**)(uint64_t, uint64_t, char *, uint64_t, char *))(a3 + 16))(a3, v36, v35, 3, &v128);
            if (v128)
              break;
            ++v36;
          }
          while (v36 != v127);
        }
      }
      return;
    case 2:
      if ((_DWORD)a2 == 1)
      {
        if (!(_DWORD)v127)
          return;
        v40 = 0;
        v41 = *a1;
        v42 = 1;
        v44 = a1[5];
        v43 = a1[6];
        while (1)
        {
          switch((_DWORD)v10)
          {
            case 1:
              LODWORD(v129[0]) = *(unsigned __int8 *)(v41 + v44 + v43 * (v42 - 1));
              v45 = *(unsigned __int8 *)(v41 + v44 + v43 * v42);
              break;
            case 2:
              LODWORD(v129[0]) = *(unsigned __int16 *)(v41 + 2 * (v44 + v43 * (v42 - 1)));
              v45 = *(unsigned __int16 *)(v41 + 2 * (v44 + v43 * v42));
              break;
            case 4:
              LODWORD(v129[0]) = *(_DWORD *)(v41 + 4 * (v44 + v43 * (v42 - 1)));
              v45 = *(_DWORD *)(v41 + 4 * (v44 + v43 * v42));
              break;
            default:
              goto LABEL_54;
          }
          DWORD1(v129[0]) = v45;
LABEL_54:
          (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, char *))(a3 + 16))(a3, v40, v129, 2, &v128);
          if (!v128)
          {
            ++v40;
            v42 += 2;
            if (v127 != v40)
              continue;
          }
          return;
        }
      }
      MEMORY[0x1E0C80A78](a1, a2);
      v94 = (char *)&v125 - v93;
      if ((_DWORD)v127)
      {
        v95 = 0;
        v96 = 4 * v13;
        v97 = &v94[v96];
        do
        {
          if ((_DWORD)v10 == 1)
          {
            if (v13)
            {
              v103 = 0;
              v104 = a1 + 6;
              do
              {
                v105 = *(v104 - 6);
                v106 = *(v104 - 1);
                v107 = *v104;
                *(_DWORD *)&v94[v103] = *(unsigned __int8 *)(v105 + v106 + *v104 * (2 * v95));
                *(_DWORD *)&v97[v103] = *(unsigned __int8 *)(v105 + v106 + v107 * ((2 * (_DWORD)v95) | 1u));
                v103 += 4;
                v104 += 7;
              }
              while (v96 != v103);
            }
          }
          else if ((_DWORD)v10 == 2)
          {
            if (v13)
            {
              v108 = 0;
              v109 = a1 + 6;
              do
              {
                v110 = *(v109 - 6);
                v111 = *(v109 - 1);
                v112 = *v109;
                *(_DWORD *)&v94[v108] = *(unsigned __int16 *)(v110 + 2 * (v111 + *v109 * (2 * v95)));
                *(_DWORD *)&v97[v108] = *(unsigned __int16 *)(v110 + 2 * (v111 + v112 * ((2 * (_DWORD)v95) | 1u)));
                v108 += 4;
                v109 += 7;
              }
              while (v96 != v108);
            }
          }
          else if ((_DWORD)v10 == 4 && v13)
          {
            v98 = 0;
            v99 = a1 + 6;
            do
            {
              v100 = *(v99 - 6);
              v101 = *(v99 - 1);
              v102 = *v99;
              *(_DWORD *)&v94[v98] = *(_DWORD *)(v100 + 4 * (v101 + *v99 * (2 * v95)));
              *(_DWORD *)&v97[v98] = *(_DWORD *)(v100 + 4 * (v101 + v102 * ((2 * (_DWORD)v95) | 1u)));
              v98 += 4;
              v99 += 7;
            }
            while (v96 != v98);
          }
          (*(void (**)(uint64_t, uint64_t, char *, uint64_t, char *))(a3 + 16))(a3, v95, v94, 2, &v128);
          if (v128)
            break;
          ++v95;
        }
        while (v95 != v127);
      }
      return;
    case 3:
      if ((_DWORD)a2 == 1)
      {
        v46 = *a1;
        v48 = a1[5];
        v47 = a1[6];
        LODWORD(v129[0]) = 0;
        if (!(_DWORD)v127)
          return;
        v49 = 0;
        while (1)
        {
          switch((_DWORD)v10)
          {
            case 4:
              v50 = *(_DWORD *)(v46 + 4 * v48);
              break;
            case 2:
              v50 = *(unsigned __int16 *)(v46 + 2 * v48);
              break;
            case 1:
              v50 = *(unsigned __int8 *)(v46 + v48);
              break;
            default:
              goto LABEL_67;
          }
          LODWORD(v129[0]) = v50;
LABEL_67:
          (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, char *))(a3 + 16))(a3, v49, v129, 1, &v128);
          if (!v128)
          {
            ++v49;
            v48 += v47;
            if (v127 != v49)
              continue;
          }
          return;
        }
      }
      MEMORY[0x1E0C80A78](a1, a2);
      v114 = (char *)&v125 - v113;
      if ((_DWORD)v127)
      {
        for (i = 0; i != v127; ++i)
        {
          switch((_DWORD)v10)
          {
            case 1:
              if (v13)
              {
                v119 = v13;
                v120 = v114;
                v121 = a1 + 6;
                do
                {
                  *(_DWORD *)v120 = *(unsigned __int8 *)(*(v121 - 6) + *(v121 - 1) + *v121 * i);
                  v120 += 4;
                  v121 += 7;
                  --v119;
                }
                while (v119);
              }
              break;
            case 2:
              v122 = v13;
              v123 = v114;
              v124 = a1 + 6;
              if (v13)
              {
                do
                {
                  *(_DWORD *)v123 = *(unsigned __int16 *)(*(v124 - 6) + 2 * (*(v124 - 1) + *v124 * i));
                  v123 += 4;
                  v124 += 7;
                  --v122;
                }
                while (v122);
              }
              break;
            case 4:
              v116 = v13;
              v117 = v114;
              v118 = a1 + 6;
              if (v13)
              {
                do
                {
                  *(_DWORD *)v117 = *(_DWORD *)(*(v118 - 6) + 4 * (*(v118 - 1) + *v118 * i));
                  v117 += 4;
                  v118 += 7;
                  --v116;
                }
                while (v116);
              }
              break;
          }
          (*(void (**)(uint64_t, uint64_t, char *, uint64_t, char *))(a3 + 16))(a3, i, v114, 1, &v128);
          if (v128)
            break;
        }
      }
      return;
    case 4:
      if (!(_DWORD)v127)
        return;
      v51 = 0;
      v52 = 0;
      v125 = v11;
      while (2)
      {
        switch((_DWORD)v10)
        {
          case 4:
            v53 = *(unsigned int *)(v11 + 4 * v51);
            break;
          case 2:
            v53 = *(unsigned __int16 *)(v11 + 2 * v51);
            break;
          case 1:
            v53 = *(unsigned __int8 *)(v11 + v51);
            break;
          default:
            LODWORD(v53) = 0;
            goto LABEL_86;
        }
        if (v53 <= 2)
        {
LABEL_86:
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: unexpected vertex count"), a3, a4, a5, a6, a7, a8, v125);
          goto LABEL_114;
        }
        if (v13 == 1)
        {
          MEMORY[0x1E0C80A78](*((unsigned __int8 *)a1 + 27), a2);
          if ((_DWORD)v10 == 1)
          {
            v73 = v52;
            v74 = (_DWORD *)((char *)&v125 - v58);
            do
            {
              *v74++ = *(unsigned __int8 *)(v54 + v55 + v57 * v73++);
              --v56;
            }
            while (v56);
          }
          else if ((_DWORD)v10 == 2)
          {
            v75 = v52;
            v76 = (_DWORD *)((char *)&v125 - v58);
            do
            {
              *v76++ = *(unsigned __int16 *)(v54 + 2 * (v55 + v57 * v75++));
              --v56;
            }
            while (v56);
          }
          else
          {
            v59 = v52;
            v60 = (_DWORD *)((char *)&v125 - v58);
            do
            {
              *v60++ = *(_DWORD *)(v54 + 4 * (v55 + v57 * v59++));
              --v56;
            }
            while (v56);
          }
          (*(void (**)(uint64_t, uint64_t, char *, uint64_t, char *))(a3 + 16))(a3, v51, (char *)&v125 - v58, v53, &v128);
          v11 = v125;
          if (v128)
            return;
LABEL_114:
          v52 += v53;
          if (++v51 == v127)
            return;
          continue;
        }
        break;
      }
      v61 = MEMORY[0x1E0C80A78](56, a2);
      v63 = (char *)&v125 - v62;
      v126 = v64;
      if ((_DWORD)v10 == 1)
      {
        if (v13)
        {
          for (j = 0; j != v13; ++j)
          {
            v78 = (uint64_t *)((char *)a1 + j * v61);
            v79 = *v78;
            v80 = v78[5];
            v81 = v78[6];
            v82 = v53;
            v83 = v52;
            v84 = j;
            do
            {
              *(_DWORD *)&v63[4 * v84] = *(unsigned __int8 *)(v79 + v80 + v81 * v83);
              v84 += v13;
              ++v83;
              --v82;
            }
            while (v82);
          }
        }
      }
      else if ((_DWORD)v10 == 2)
      {
        if (v13)
        {
          for (k = 0; k != v13; ++k)
          {
            v86 = (uint64_t *)((char *)a1 + k * v61);
            v87 = *v86;
            v88 = v86[5];
            v89 = v86[6];
            v90 = v53;
            v91 = v52;
            v92 = k;
            do
            {
              *(_DWORD *)&v63[4 * v92] = *(unsigned __int16 *)(v87 + 2 * (v88 + v89 * v91));
              v92 += v13;
              ++v91;
              --v90;
            }
            while (v90);
          }
        }
      }
      else if (v13)
      {
        for (m = 0; m != v13; ++m)
        {
          v66 = (uint64_t *)((char *)a1 + m * v61);
          v67 = *v66;
          v68 = v66[5];
          v69 = v66[6];
          v70 = v53;
          v71 = v52;
          v72 = m;
          do
          {
            *(_DWORD *)&v63[4 * v72] = *(_DWORD *)(v67 + 4 * (v68 + v69 * v71));
            v72 += v13;
            ++v71;
            --v70;
          }
          while (v70);
        }
      }
      (*(void (**)(uint64_t, uint64_t, char *, uint64_t, char *))(a3 + 16))(a3, v51, v63, v53, &v128);
      if (!v128)
        goto LABEL_114;
      return;
    default:
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unknown primitive type %d"), a3, a4, a5, a6, a7, a8, (char)v8);
      return;
  }
}

uint64_t sub_1B17A5C74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1B17A5C80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v8[5];

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = sub_1B17A5CD4;
  v8[3] = &unk_1E63D50F8;
  v8[4] = a2;
  sub_1B17A51EC(a1, 1, (uint64_t)v8, a4, a5, a6, a7, a8);
}

void sub_1B17A5CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a4 == 3)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  }
  else if (a4 < 4)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: unexpected vertex count"), a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    v11 = 0;
    v12 = (a4 - 2);
    do
    {
      if (v12 == v11)
        break;
      v13 = v11 + 1;
      (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
      v11 = v13;
    }
    while (!a5);
  }
}

void sub_1B17A5DC4(uint64_t *a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  _BOOL8 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = *((unsigned __int8 *)a1 + 26);
  v9 = 3;
  if ((a2 & 1) != 0)
    v10 = 1;
  else
    v10 = 2;
  if ((a2 & 1) != 0)
    v11 = 2;
  else
    v11 = 1;
  v12 = v8 != 5;
  v13 = v8 == 1 || v8 != 5;
  if (v8 != 1)
  {
    v10 = 2;
    v11 = 1;
  }
  v14 = v8 == 0;
  if (*((_BYTE *)a1 + 26))
    v15 = v13;
  else
    v15 = 3;
  if (*((_BYTE *)a1 + 26))
  {
    v9 = 1;
    v16 = v10;
  }
  else
  {
    v16 = 2;
  }
  if (v14)
    v17 = 1;
  else
    v17 = v11;
  v18 = *a1;
  if (!*a1)
  {
    *a3 = v15 * a2;
    *a4 = v17 + v9 * a2;
    v23 = v9 * a2 + v16;
    goto LABEL_29;
  }
  v19 = *((unsigned __int8 *)a1 + 27);
  switch((_DWORD)v19)
  {
    case 4:
      v24 = a1[5];
      v25 = a1[6];
      *a3 = *(_DWORD *)(v18 + 4 * (v24 + v15 * a2 * v25));
      v26 = v9 * a2;
      *a4 = *(_DWORD *)(v18 + 4 * (v24 + v25 * (v17 + v26)));
      v23 = *(_DWORD *)(v18 + 4 * (v24 + v25 * (v26 + v16)));
      goto LABEL_29;
    case 2:
      v27 = a1[5];
      v28 = a1[6];
      *a3 = *(unsigned __int16 *)(v18 + 2 * (v27 + v15 * a2 * v28));
      v29 = v9 * a2;
      *a4 = *(unsigned __int16 *)(v18 + 2 * (v27 + v28 * (v17 + v29)));
      v23 = *(unsigned __int16 *)(v18 + 2 * (v27 + v28 * (v29 + v16)));
      goto LABEL_29;
    case 1:
      v20 = a1[5];
      v21 = a1[6];
      *a3 = *(unsigned __int8 *)(v18 + v20 + v15 * a2 * v21);
      v22 = v9 * a2;
      *a4 = *(unsigned __int8 *)(v18 + v20 + v21 * (v17 + v22));
      v23 = *(unsigned __int8 *)(v18 + v20 + v21 * (v22 + v16));
LABEL_29:
      *a5 = v23;
      return;
  }
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, 1, v12, a8, v19);
}

void sub_1B17A5F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD v100[5];
  _OWORD v101[3];
  uint64_t v102;
  uint64_t v103;

  v9 = a1;
  v103 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 16))
  {
    v32 = *(_OWORD *)(a1 + 16);
    v101[0] = *(_OWORD *)a1;
    v101[1] = v32;
    v101[2] = *(_OWORD *)(a1 + 32);
    v102 = *(_QWORD *)(a1 + 48);
    v100[0] = MEMORY[0x1E0C809B0];
    v100[1] = 0x40000000;
    v100[2] = sub_1B17A5C74;
    v100[3] = &unk_1E63D50D0;
    v100[4] = a2;
    sub_1B17A51EC((uint64_t *)v101, 1, (uint64_t)v100, a4, a5, a6, a7, a8);
    return;
  }
  LOBYTE(v100[0]) = 0;
  switch(*(_BYTE *)(a1 + 26))
  {
    case 0:
    case 1:
    case 5:
      DWORD2(v101[0]) = 0;
      *(_QWORD *)&v101[0] = 0;
      v10 = *(unsigned __int16 *)(a1 + 24);
      if (!*(_WORD *)(a1 + 24))
        return;
      v11 = 0;
      do
      {
        v12 = (_QWORD *)(*(_QWORD *)(v9 + 16) + 16 * v11);
        v13 = v12[1];
        if (*v12 >= v13 + *v12)
          goto LABEL_37;
        v14 = *v12;
        do
        {
          v15 = *(unsigned __int8 *)(v9 + 26);
          if (*(_BYTE *)(v9 + 26))
          {
            if ((v14 & 1) != 0)
              v16 = 1;
            else
              v16 = 2;
            if ((v14 & 1) != 0)
              v17 = 2;
            else
              v17 = 1;
            v18 = v15 == 1;
            v19 = v15 == 1 || v15 != 5;
            v20 = 1;
            if (v15 == 1)
              v21 = v16;
            else
              v21 = 2;
            if (v18)
              v22 = v17;
            else
              v22 = 1;
          }
          else
          {
            v19 = 3;
            v20 = 3;
            v21 = 2;
            v22 = 1;
          }
          v23 = *(_QWORD *)v9;
          if (!*(_QWORD *)v9)
          {
            v29 = v20 * v14;
            LODWORD(v101[0]) = v14 * v19;
            DWORD1(v101[0]) = v22 + v29;
            v28 = v29 + v21;
            goto LABEL_32;
          }
          v24 = *(unsigned __int8 *)(v9 + 27);
          v25 = *(_QWORD *)(v9 + 40);
          v26 = *(_QWORD *)(v9 + 48);
          switch((_DWORD)v24)
          {
            case 4:
              LODWORD(v101[0]) = *(_DWORD *)(v23 + 4 * (v25 + v26 * v14 * v19));
              v30 = v20 * v14;
              DWORD1(v101[0]) = *(_DWORD *)(v23 + 4 * (v25 + (v22 + v30) * v26));
              v28 = *(_DWORD *)(v23 + 4 * (v25 + (v30 + v21) * v26));
              goto LABEL_32;
            case 2:
              LODWORD(v101[0]) = *(unsigned __int16 *)(v23 + 2 * (v25 + v26 * v14 * v19));
              v31 = v20 * v14;
              DWORD1(v101[0]) = *(unsigned __int16 *)(v23 + 2 * (v25 + (v22 + v31) * v26));
              v28 = *(unsigned __int16 *)(v23 + 2 * (v25 + (v31 + v21) * v26));
              goto LABEL_32;
            case 1:
              LODWORD(v101[0]) = *(unsigned __int8 *)(v23 + v25 + v26 * v14 * v19);
              v27 = v20 * v14;
              DWORD1(v101[0]) = *(unsigned __int8 *)(v23 + v25 + (v22 + v27) * v26);
              v28 = *(unsigned __int8 *)(v23 + v25 + (v27 + v21) * v26);
LABEL_32:
              DWORD2(v101[0]) = v28;
              goto LABEL_33;
          }
          *(_QWORD *)&v101[0] = 0;
          DWORD2(v101[0]) = 0;
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), a3, a4, a5, a6, a7, a8, v24);
LABEL_33:
          (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, _QWORD *))(a2 + 16))(a2, v14, v101, 3, v100);
          if (LOBYTE(v100[0]))
            return;
          ++v14;
          LODWORD(v13) = v13 - 1;
        }
        while ((_DWORD)v13);
        v10 = *(unsigned __int16 *)(v9 + 24);
LABEL_37:
        ++v11;
      }
      while (v11 < v10);
      return;
    case 2:
      *(_QWORD *)&v101[0] = 0;
      v33 = *(unsigned __int16 *)(a1 + 24);
      if (!*(_WORD *)(a1 + 24))
        return;
      v34 = 0;
      while (1)
      {
        v35 = (uint64_t *)(*(_QWORD *)(v9 + 16) + 16 * v34);
        v36 = *v35;
        v37 = v35[1] + *v35;
        if (v36 < v37)
          break;
LABEL_56:
        if (++v34 >= (unint64_t)v33)
          return;
      }
      v38 = v36;
      v39 = 2 * v36;
      v40 = v37 - (unint64_t)v36;
      while (1)
      {
        v41 = *(unsigned __int8 *)(v9 + 27);
        if (v41 == 1)
          break;
        if (v41 == 2)
        {
          v49 = *(_QWORD *)v9;
          v50 = *(_QWORD *)(v9 + 40);
          v51 = *(_QWORD *)(v9 + 48);
          LODWORD(v101[0]) = *(unsigned __int16 *)(*(_QWORD *)v9 + 2 * (v50 + v51 * v39));
          v45 = *(unsigned __int16 *)(v49 + 2 * (v50 + v51 * (v39 + 1)));
          goto LABEL_52;
        }
        if (v41 == 4)
        {
          v42 = *(_QWORD *)v9;
          v43 = *(_QWORD *)(v9 + 40);
          v44 = *(_QWORD *)(v9 + 48);
          LODWORD(v101[0]) = *(_DWORD *)(*(_QWORD *)v9 + 4 * (v43 + v44 * v39));
          v45 = *(_DWORD *)(v42 + 4 * (v43 + v44 * (v39 + 1)));
LABEL_52:
          DWORD1(v101[0]) = v45;
        }
        (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, _QWORD *))(a2 + 16))(a2, v38, v101, 2, v100);
        if (LOBYTE(v100[0]))
          return;
        ++v38;
        v39 += 2;
        if (!--v40)
        {
          v33 = *(unsigned __int16 *)(v9 + 24);
          goto LABEL_56;
        }
      }
      v46 = *(_QWORD *)v9;
      v47 = *(_QWORD *)(v9 + 40);
      v48 = *(_QWORD *)(v9 + 48);
      LODWORD(v101[0]) = *(unsigned __int8 *)(*(_QWORD *)v9 + v47 + v48 * v39);
      v45 = *(unsigned __int8 *)(v46 + v47 + v48 * (v39 + 1));
      goto LABEL_52;
    case 3:
      LODWORD(v101[0]) = 0;
      v52 = *(unsigned __int16 *)(a1 + 24);
      if (!*(_WORD *)(a1 + 24))
        return;
      v53 = 0;
      while (1)
      {
        v54 = (uint64_t *)(*(_QWORD *)(v9 + 16) + 16 * v53);
        v55 = *v54;
        v56 = v54[1] + *v54;
        if (v55 < v56)
          break;
LABEL_72:
        if (++v53 >= (unint64_t)v52)
          return;
      }
      v57 = v55;
      v58 = v56;
      while (1)
      {
        v59 = *(unsigned __int8 *)(v9 + 27);
        if (v59 == 4)
          break;
        if (v59 == 2)
        {
          v60 = *(unsigned __int16 *)(*(_QWORD *)v9 + 2 * (*(_QWORD *)(v9 + 40) + *(_QWORD *)(v9 + 48) * v57));
          goto LABEL_68;
        }
        if (v59 == 1)
        {
          v60 = *(unsigned __int8 *)(*(_QWORD *)v9 + *(_QWORD *)(v9 + 40) + *(_QWORD *)(v9 + 48) * v57);
LABEL_68:
          LODWORD(v101[0]) = v60;
        }
        (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, _QWORD *))(a2 + 16))(a2, v57, v101, 1, v100);
        if (LOBYTE(v100[0]))
          return;
        if (v58 == ++v57)
        {
          v52 = *(unsigned __int16 *)(v9 + 24);
          goto LABEL_72;
        }
      }
      v60 = *(_DWORD *)(*(_QWORD *)v9 + 4 * (*(_QWORD *)(v9 + 40) + *(_QWORD *)(v9 + 48) * v57));
      goto LABEL_68;
    case 4:
      v61 = *(unsigned __int16 *)(a1 + 24);
      if (!*(_WORD *)(a1 + 24))
        return;
      v62 = 0;
      while (2)
      {
        v63 = (uint64_t *)(*(_QWORD *)(v9 + 16) + 16 * v62);
        v64 = *v63;
        if (*v63)
        {
          v65 = 0;
          v66 = 0;
          v67 = *(unsigned __int8 *)(v9 + 27);
          do
          {
            switch(v67)
            {
              case 4:
                v68 = *(_DWORD *)(*(_QWORD *)(v9 + 32) + 4 * v65);
                break;
              case 2:
                v68 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 32) + 2 * v65);
                break;
              case 1:
                v68 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 32) + v65);
                break;
              default:
                v68 = 0;
                break;
            }
            v66 += v68;
            ++v65;
          }
          while (*v63 != v65);
        }
        else
        {
          v66 = 0;
        }
        v69 = v63[1] + v64;
        if (v64 >= v69)
          goto LABEL_115;
        v70 = v64;
        v71 = v69;
LABEL_90:
        v72 = *(unsigned __int8 *)(v9 + 27);
        switch(v72)
        {
          case 4:
            v73 = *(unsigned int *)(*(_QWORD *)(v9 + 32) + 4 * v70);
            break;
          case 2:
            v73 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 32) + 2 * v70);
            break;
          case 1:
            v73 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 32) + v70);
            break;
          default:
            LODWORD(v73) = 0;
            goto LABEL_104;
        }
        if (v73 > 2)
        {
          MEMORY[0x1E0C80A78](a1, a2);
          v76 = (char *)&v100[-1] - v75;
          v77 = *(unsigned __int8 *)(v9 + 27);
          switch((_DWORD)v77)
          {
            case 4:
              v83 = *(_QWORD *)v9;
              v84 = v66;
              v85 = (_DWORD *)((char *)&v100[-1] - v75);
              v86 = *(_QWORD *)(v9 + 40);
              v87 = *(_QWORD *)(v9 + 48);
              do
              {
                *v85++ = *(_DWORD *)(v83 + 4 * (v86 + v87 * v84++));
                --v74;
              }
              while (v74);
              break;
            case 2:
              v88 = *(_QWORD *)v9;
              v89 = v66;
              v90 = (_DWORD *)((char *)&v100[-1] - v75);
              v91 = *(_QWORD *)(v9 + 40);
              v92 = *(_QWORD *)(v9 + 48);
              do
              {
                *v90++ = *(unsigned __int16 *)(v88 + 2 * (v91 + v92 * v89++));
                --v74;
              }
              while (v74);
              break;
            case 1:
              v78 = *(_QWORD *)v9;
              v79 = v66;
              v80 = (_DWORD *)((char *)&v100[-1] - v75);
              v81 = *(_QWORD *)(v9 + 40);
              v82 = *(_QWORD *)(v9 + 48);
              do
              {
                *v80++ = *(unsigned __int8 *)(v78 + v81 + v82 * v79++);
                --v74;
              }
              while (v74);
              break;
            default:
              bzero((char *)&v100[-1] - v75, 4 * v74);
              sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), v93, v94, v95, v96, v97, v98, v77);
              break;
          }
          a1 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, _QWORD *))(a2 + 16))(a2, v70, v76, v73, v100);
          if (LOBYTE(v100[0]))
            return;
LABEL_113:
          v66 += v73;
          if (++v70 == v71)
          {
            v61 = *(unsigned __int16 *)(v9 + 24);
LABEL_115:
            if (++v62 >= (unint64_t)v61)
              return;
            continue;
          }
          goto LABEL_90;
        }
        break;
      }
LABEL_104:
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: unexpected vertex count"), a3, a4, a5, a6, a7, a8, v99);
      goto LABEL_113;
    default:
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unknown primitive type %d"), a3, a4, a5, a6, a7, a8, *(unsigned __int8 *)(a1 + 26));
      return;
  }
}

void sub_1B17A6658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[3];
  uint64_t v25;
  _QWORD v26[5];
  char v27;
  _QWORD v28[3];
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[6];

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  v9 = *(unsigned __int8 *)(a1 + 130);
  if (*(_BYTE *)(a1 + 130))
  {
    v10 = 0;
    v11 = *(_BYTE *)(a1 + 88);
    v12 = MEMORY[0x1E0C809B0];
    do
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C20], "CHANNEL %ld/%ld\n", v10 + 1, v9);
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      sub_1B17A4804(a1, v10, v13, v14, v15, v16, v17, v18, (uint64_t)&v30);
      v28[0] = 0;
      v28[1] = v28;
      v28[2] = 0x2000000000;
      v29 = 0;
      v26[0] = v12;
      v26[1] = 0x40000000;
      v26[2] = sub_1B17A67C4;
      v26[3] = &unk_1E63D5120;
      v27 = v11;
      v26[4] = v28;
      v24[0] = v30;
      v24[1] = v31;
      v24[2] = v32;
      v25 = v33;
      v34[0] = v12;
      v34[1] = 0x40000000;
      v34[2] = sub_1B17A5C74;
      v34[3] = &unk_1E63D50D0;
      v34[4] = v26;
      sub_1B17A51EC((uint64_t *)v24, 1, (uint64_t)v34, v19, v20, v21, v22, v23);
      _Block_object_dispose(v28, 8);
      ++v10;
    }
    while (v9 != v10);
  }
}

uint64_t sub_1B17A67C4(uint64_t result, uint64_t a2, int *a3, unsigned int a4)
{
  uint64_t v4;
  FILE **v7;
  uint64_t v8;
  int v9;

  v4 = result;
  switch(*(_BYTE *)(result + 40))
  {
    case 0:
    case 1:
    case 5:
      result = fprintf((FILE *)*MEMORY[0x1E0C80C20], "%4u : %4u %4u %4u\n");
      break;
    case 2:
      result = fprintf((FILE *)*MEMORY[0x1E0C80C20], "%4u : %4u %4u\n");
      break;
    case 3:
      result = fprintf((FILE *)*MEMORY[0x1E0C80C20], "%4u : %4u\n");
      break;
    case 4:
      v7 = (FILE **)MEMORY[0x1E0C80C20];
      fprintf((FILE *)*MEMORY[0x1E0C80C20], "%2u : [Polygon %4u]", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24), a4);
      if (a4)
      {
        v8 = a4;
        do
        {
          v9 = *a3++;
          fprintf(*v7, " %4u", v9);
          --v8;
        }
        while (v8);
      }
      result = fputc(10, *v7);
      break;
    default:
      break;
  }
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 24);
  return result;
}

id sub_1B17A6930(uint64_t a1)
{
  uint64_t v2;
  CFNumberRef v3;
  __CFNotificationCenter *LocalCenter;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t valuePtr;

  valuePtr = a1;
  v2 = a1;
  if (!*(_QWORD *)(a1 + 72))
  {
    v3 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCFXNotificationMeshElementWillDie"), v3, 0, 1u);
    CFRelease(v3);
    v2 = valuePtr;
  }
  v5 = *(const void **)(v2 + 96);
  if (v5)
  {
    CFRelease(v5);
    v2 = valuePtr;
    *(_QWORD *)(valuePtr + 96) = 0;
  }
  v6 = *(const void **)(v2 + 168);
  if (v6)
  {
    CFRelease(v6);
    v2 = valuePtr;
    *(_QWORD *)(valuePtr + 168) = 0;
  }
  v7 = *(const void **)(v2 + 72);
  if (v7)
  {
    CFRelease(v7);
    v2 = valuePtr;
    *(_QWORD *)(valuePtr + 72) = 0;
  }
  v8 = *(const void **)(v2 + 136);
  if (v8)
  {
    CFRelease(v8);
    v2 = valuePtr;
    *(_QWORD *)(valuePtr + 136) = 0;
  }
  free(*(void **)(v2 + 112));
  free(*(void **)(valuePtr + 120));
  free(*(void **)(valuePtr + 208));
  return sub_1B193E38C(a1, v9, v10, v11, v12, v13, v14, v15);
}

__CFString *sub_1B17A6A20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFString *Mutable;
  unint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  const __CFData *Length;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v9 = *(char *)(a1 + 88);
  if (v9 > 5)
    v10 = CFSTR("invalid");
  else
    v10 = off_1E63D5140[v9];
  v11 = *(unsigned int *)(a1 + 104);
  v12 = *(unsigned __int8 *)(a1 + 130);
  v13 = *(unsigned __int8 *)(a1 + 80);
  v14 = *(unsigned int *)(a1 + 64);
  v15 = sub_1B199927C(a1, 0x20uLL, v2, v3, v4, v5, v6, v7);
  v16 = *(unsigned int *)(a1 + 68);
  Length = *(const __CFData **)(a1 + 96);
  if (Length)
    Length = (const __CFData *)CFDataGetLength(Length);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXMeshElement %p type:%@ primCount:%d channels:%d indexBytes:%d offset:%d acmr:%f inst:%d dataSize:%d shared:%p>"), a1, v10, v11, v12, v13, v14, v15, v16, Length, *(_QWORD *)(a1 + 72));
  return Mutable;
}

__CFArray *sub_1B17A6B08(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  const CFDictionaryValueCallBacks *v13;
  __CFDictionary *v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  const CFDictionaryKeyCallBacks *v18;
  __CFDictionary *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  __CFDictionary *v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  __CFDictionary *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  __CFDictionary *v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  uint64_t v40;
  int v41;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 1;
  valuePtr = 5;
  v40 = *(_QWORD *)(a1 + 96);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("indexes"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v41 = 0;
  valuePtr = 2;
  v40 = a1 + 104;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("subElementsCount"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = v4;
  v14 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v41 = 0;
  valuePtr = 2;
  v40 = a1 + 88;
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v16 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v17 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v14, CFSTR("name"), CFSTR("type"));
  CFDictionarySetValue(v14, CFSTR("type"), v15);
  CFDictionarySetValue(v14, CFSTR("address"), v17);
  CFDictionarySetValue(v14, CFSTR("semantic"), v16);
  CFArrayAppendValue(Mutable, v14);
  CFRelease(v16);
  CFRelease(v14);
  CFRelease(v17);
  CFRelease(v15);
  v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v19 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v13);
  v41 = 0;
  valuePtr = 2;
  v40 = a1 + 80;
  v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v22 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v19, CFSTR("name"), CFSTR("bytesPerIndex"));
  CFDictionarySetValue(v19, CFSTR("type"), v20);
  CFDictionarySetValue(v19, CFSTR("address"), v22);
  CFDictionarySetValue(v19, CFSTR("semantic"), v21);
  CFArrayAppendValue(Mutable, v19);
  CFRelease(v21);
  CFRelease(v19);
  CFRelease(v22);
  CFRelease(v20);
  v23 = CFDictionaryCreateMutable(0, 4, v18, MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 3;
  v40 = a1 + 81;
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v26 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v23, CFSTR("name"), CFSTR("doubleSided"));
  CFDictionarySetValue(v23, CFSTR("type"), v24);
  CFDictionarySetValue(v23, CFSTR("address"), v26);
  CFDictionarySetValue(v23, CFSTR("semantic"), v25);
  CFArrayAppendValue(Mutable, v23);
  CFRelease(v25);
  CFRelease(v23);
  CFRelease(v26);
  CFRelease(v24);
  v27 = CFDictionaryCreateMutable(0, 4, v18, MEMORY[0x1E0C9B3A0]);
  v41 = 1;
  valuePtr = 5;
  v40 = *(_QWORD *)(a1 + 168);
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v30 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v27, CFSTR("name"), CFSTR("primitiveNormals"));
  CFDictionarySetValue(v27, CFSTR("type"), v28);
  CFDictionarySetValue(v27, CFSTR("address"), v30);
  CFDictionarySetValue(v27, CFSTR("semantic"), v29);
  CFArrayAppendValue(Mutable, v27);
  CFRelease(v29);
  CFRelease(v27);
  CFRelease(v30);
  CFRelease(v28);
  v31 = CFDictionaryCreateMutable(0, 4, v18, MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 8;
  v40 = a1 + 176;
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v34 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v31, CFSTR("name"), CFSTR("bbox[0]"));
  CFDictionarySetValue(v31, CFSTR("type"), v32);
  CFDictionarySetValue(v31, CFSTR("address"), v34);
  CFDictionarySetValue(v31, CFSTR("semantic"), v33);
  CFArrayAppendValue(Mutable, v31);
  CFRelease(v33);
  CFRelease(v31);
  CFRelease(v34);
  CFRelease(v32);
  v35 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 0;
  valuePtr = 8;
  v40 = a1 + 192;
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v38 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v35, CFSTR("name"), CFSTR("bbox[1]"));
  CFDictionarySetValue(v35, CFSTR("type"), v36);
  CFDictionarySetValue(v35, CFSTR("address"), v38);
  CFDictionarySetValue(v35, CFSTR("semantic"), v37);
  CFArrayAppendValue(Mutable, v35);
  CFRelease(v37);
  CFRelease(v35);
  CFRelease(v38);
  CFRelease(v36);
  return Mutable;
}

uint64_t sub_1B17A7298@<X0>(uint64_t a1@<X0>, CFX::RG::RenderGraphProvider *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v5 = a1;
  CFX::RG::RenderGraphProvider::RenderGraphProvider(a2, "Forward");
  sub_1B17A733C((uint64_t)a2, &v5);
  sub_1B17A73A4((uint64_t)a2, &v5);
  sub_1B17A7400((uint64_t)a2, &v5);
  v3 = sub_1B17A7464((uint64_t)a2, &v5);
  result = sub_1B17A74C0((uint64_t)a2, &v5);
  *(_WORD *)(result + 24) = *((_WORD *)v3 + 4);
  *((_BYTE *)a2 + 41) = 1;
  return result;
}

void sub_1B17A7320(_Unwind_Exception *a1)
{
  CFX::RG::RenderGraphProvider *v1;

  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17A733C(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v8;

  v4 = malloc_type_malloc(0x70uLL, 0xD5346062uLL);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *v4 = v5;
  v4[1] = v5;
  v4[2] = v5;
  v4[3] = v5;
  v4[4] = v5;
  v4[5] = v5;
  v4[6] = v5;
  sub_1B17A2AF8((uint64_t)v4, *a2);
  v8 = v6;
  sub_1B17A7C40(a1 + 8, &v8);
  return v8;
}

_QWORD *sub_1B17A73A4(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  __int128 v5;
  _QWORD *v7;

  v4 = malloc_type_malloc(0x20uLL, 0xD5346062uLL);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *v4 = v5;
  v4[1] = v5;
  v7 = sub_1B17DE158((uint64_t)v4, *a2);
  sub_1B17A7C40(a1 + 8, &v7);
  return v7;
}

_QWORD *sub_1B17A7400(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  __int128 v5;
  _QWORD *v7;

  v4 = malloc_type_malloc(0x28uLL, 0xD5346062uLL);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *v4 = v5;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = -1;
  v7 = sub_1B17C6338((uint64_t)v4, *a2);
  sub_1B17A7C40(a1 + 8, &v7);
  return v7;
}

_QWORD *sub_1B17A7464(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  __int128 v5;
  _QWORD *v7;

  v4 = malloc_type_malloc(0x20uLL, 0xD5346062uLL);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *v4 = v5;
  v4[1] = v5;
  v7 = sub_1B17D44F0((uint64_t)v4, *a2);
  sub_1B17A7C40(a1 + 8, &v7);
  return v7;
}

uint64_t sub_1B17A74C0(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v7;

  v4 = malloc_type_malloc(0x28uLL, 0xD5346062uLL);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *v4 = v5;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = -1;
  v7 = sub_1B18A4A78((uint64_t)v4, *a2);
  sub_1B17A7C40(a1 + 8, &v7);
  return v7;
}

uint64_t sub_1B17A7524@<X0>(uint64_t a1@<X0>, CFX::RG::RenderGraphProvider *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v5 = a1;
  CFX::RG::RenderGraphProvider::RenderGraphProvider(a2, "PathTracer");
  sub_1B17A75C0((uint64_t)a2, &v5);
  sub_1B17A761C((uint64_t)a2, &v5);
  sub_1B17A73A4((uint64_t)a2, &v5);
  v3 = sub_1B17A7464((uint64_t)a2, &v5);
  result = sub_1B17A74C0((uint64_t)a2, &v5);
  *(_WORD *)(result + 24) = *((_WORD *)v3 + 4);
  return result;
}

void sub_1B17A75A4(_Unwind_Exception *a1)
{
  CFX::RG::RenderGraphProvider *v1;

  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B17A75C0(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  __int128 v5;
  _QWORD *v7;

  v4 = malloc_type_malloc(0x20uLL, 0xD5346062uLL);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *v4 = v5;
  v4[1] = v5;
  v7 = sub_1B19A5B50((uint64_t)v4, *a2);
  sub_1B17A7C40(a1 + 8, &v7);
  return v7;
}

_QWORD *sub_1B17A761C(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  __int128 v5;
  _QWORD *v7;

  v4 = malloc_type_malloc(0x20uLL, 0xD5346062uLL);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *v4 = v5;
  v4[1] = v5;
  v7 = sub_1B19AA114((uint64_t)v4, *a2);
  sub_1B17A7C40(a1 + 8, &v7);
  return v7;
}

uint64_t sub_1B17A7678@<X0>(uint64_t a1@<X0>, CFX::RG::RenderGraphProvider *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;

  v5 = a1;
  CFX::RG::RenderGraphProvider::RenderGraphProvider(a2, "Hybrid");
  sub_1B17A75C0((uint64_t)a2, &v5);
  sub_1B17A7714((uint64_t)a2, &v5);
  sub_1B17A73A4((uint64_t)a2, &v5);
  v3 = sub_1B17A7464((uint64_t)a2, &v5);
  result = sub_1B17A74C0((uint64_t)a2, &v5);
  *(_WORD *)(result + 24) = *((_WORD *)v3 + 4);
  return result;
}

void sub_1B17A76F8(_Unwind_Exception *a1)
{
  CFX::RG::RenderGraphProvider *v1;

  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v1);
  _Unwind_Resume(a1);
}

void *sub_1B17A7714(uint64_t a1, uint64_t *a2)
{
  void *v4;
  void *v6;

  v4 = malloc_type_malloc(0x7A0uLL, 0xD5346062uLL);
  memset(v4, 255, 0x7A0uLL);
  sub_1B17C0288((uint64_t)v4, *a2);
  v6 = v4;
  sub_1B17A7C40(a1 + 8, &v6);
  return v6;
}

uint64_t sub_1B17A7784@<X0>(uint64_t a1@<X0>, CFX::RG::RenderGraphProvider *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v5 = a1;
  CFX::RG::RenderGraphProvider::RenderGraphProvider(a2, "Stereo");
  v3 = sub_1B17A733C((uint64_t)a2, &v5);
  *(_BYTE *)(v3 + 49) = 1;
  result = sub_1B17A7800((uint64_t)a2, &v5);
  *(_WORD *)(result + 24) = *(_WORD *)(v3 + 8);
  return result;
}

void sub_1B17A77E8(_Unwind_Exception *a1)
{
  CFX::RG::RenderGraphProvider *v1;

  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17A7800(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v7;

  v4 = malloc_type_malloc(0x28uLL, 0xD5346062uLL);
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *v4 = v5;
  v4[1] = v5;
  *((_QWORD *)v4 + 4) = -1;
  v7 = sub_1B18A4D74((uint64_t)v4, *a2);
  sub_1B17A7C40(a1 + 8, &v7);
  return v7;
}

uint64_t sub_1B17A7864@<X0>(uint64_t a1@<X0>, CFX::RG::RenderGraphProvider *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v5 = a1;
  CFX::RG::RenderGraphProvider::RenderGraphProvider(a2, "Holographic");
  v3 = sub_1B17A733C((uint64_t)a2, &v5);
  *(_BYTE *)(v3 + 49) = 1;
  result = sub_1B17A74C0((uint64_t)a2, &v5);
  *(_WORD *)(result + 24) = *(_WORD *)(v3 + 8);
  return result;
}

void sub_1B17A78C8(_Unwind_Exception *a1)
{
  CFX::RG::RenderGraphProvider *v1;

  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v1);
  _Unwind_Resume(a1);
}

_OWORD *sub_1B17A78E0()
{
  _OWORD *v0;
  __int128 v1;
  uint64_t v2;

  v0 = malloc_type_malloc(0x38uLL, 0xD5346062uLL);
  *(_QWORD *)&v1 = -1;
  *((_QWORD *)&v1 + 1) = -1;
  *v0 = v1;
  v0[1] = v1;
  v0[2] = v1;
  *((_QWORD *)v0 + 6) = -1;
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)v0, "Compute irradiance");
  sub_1B17A7950(v2);
  return v0;
}

uint64_t sub_1B17A7950(uint64_t a1)
{
  _OWORD *v2;
  __int128 v3;
  uint64_t v5;

  v2 = malloc_type_malloc(0x38uLL, 0xD5346062uLL);
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *v2 = v3;
  v2[1] = v3;
  v2[2] = v3;
  *((_QWORD *)v2 + 6) = -1;
  v5 = sub_1B19A95F0();
  sub_1B17A7C40(a1 + 8, &v5);
  return v5;
}

_OWORD *sub_1B17A79D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned __int8 v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  v28 = a1;
  v26 = a4;
  v27 = a3;
  v5 = atomic_load((unsigned __int8 *)&qword_1EEF655B0);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF655B0))
  {
    CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)&unk_1EEF655A8, "CustomAuthoring.Final.Color");
    __cxa_guard_release(&qword_1EEF655B0);
  }
  v6 = malloc_type_malloc(0x38uLL, 0xD5346062uLL);
  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  *v6 = v7;
  v6[1] = v7;
  v6[2] = v7;
  *((_QWORD *)v6 + 6) = -1;
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)v6, "Custom");
  *(_BYTE *)(v8 + 41) = 1;
  v9 = sub_1B17A7BC8(v8);
  v10 = (unsigned int *)sub_1B194FBCC(v9);
  v11 = *v10;
  if ((_DWORD)v11)
  {
    v12 = (unsigned __int16 *)*((_QWORD *)v10 + 1);
    v13 = 8 * v11;
    while (1)
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v25, 6893, 6893, 1656467160);
      if (CFX::RG::ResourceIdentifier::match(v12, v25))
        break;
      v12 += 4;
      v13 -= 8;
      if (!v13)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    sub_1B17A733C((uint64_t)v6, &v28);
    sub_1B17A73A4((uint64_t)v6, &v28);
  }
  v14 = malloc_type_malloc(0x20uLL, 0xD5346062uLL);
  *(_QWORD *)&v15 = -1;
  *((_QWORD *)&v15 + 1) = -1;
  *v14 = v15;
  v14[1] = v15;
  sub_1B17D44F0((uint64_t)v14, v28);
  CFX::RG::RenderGraphProvider::addSubgraph((uint64_t)v6, (uint64_t)v14);
  *(_WORD *)(sub_1B17A74C0((uint64_t)v6, &v28) + 24) = *((_WORD *)v14 + 4);
  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  if ((CFX::RG::RenderGraphProvider::resolve((uint64_t)v6, a2, (uint64_t)__p) & 1) == 0)
  {
    v18 = v26;
    if (v24 >= 0)
      v19 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v16, (uint64_t)__p, v17);
    else
      v19 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v16, (uint64_t)__p[0], v17);
    objc_msgSend_addGenericRenderGraphErrorWithMessage_(v18, v20, v19, v21);
  }
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1B17A7B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_1EEF655B0);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17A7BC8(uint64_t a1)
{
  _OWORD *v2;
  __int128 v3;
  uint64_t v5;

  v2 = malloc_type_malloc(0x40uLL, 0xD5346062uLL);
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *v2 = v3;
  v2[1] = v3;
  v2[2] = v3;
  v2[3] = v3;
  v5 = sub_1B194FA48();
  sub_1B17A7C40(a1 + 8, &v5);
  return v5;
}

void sub_1B17A7C40(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int v5;

  v4 = *(_DWORD *)a1;
  v5 = *(_DWORD *)a1 + 1;
  if (v5 > *(_DWORD *)(a1 + 4))
  {
    sub_1B17A378C((unsigned int *)a1, 1, 0);
    v4 = *(_DWORD *)a1;
    v5 = *(_DWORD *)a1 + 1;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = *a2;
  *(_DWORD *)a1 = v5;
}

uint64_t sub_1B17A7C98(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B17A7CC4()
{
  if (qword_1EEF655C0 != -1)
    dispatch_once_f(&qword_1EEF655C0, &qword_1EEF655B8, (dispatch_function_t)sub_1B17A7C98);
  return sub_1B179CB90(qword_1EEF655B8, 0xD0uLL);
}

uint64_t sub_1B17A7D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B17A7D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  return *(_QWORD *)(a1 + 24);
}

CFTypeRef sub_1B17A7DA0(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  result = *(CFTypeRef *)(a1 + 16);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1B17A7E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1B17A7E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1B17A7EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  return a1 + 64;
}

uint64_t sub_1B17A7EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  return a1 + 96;
}

uint64_t sub_1B17A7F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  return a1 + 80;
}

double sub_1B17A7F80(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v24;
  float32x4_t v25;
  double result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v12 = (int32x4_t)vmulq_f32(v9, v9);
  v13 = (int32x4_t)vmulq_f32(v10, v10);
  v14 = (int32x4_t)vmulq_f32(v11, v11);
  v15 = vzip1q_s32(v12, v14);
  v16 = vzip2q_s32(v12, v14);
  v17 = (float32x4_t)vtrn2q_s32(v12, v13);
  v17.i32[2] = v14.i32[1];
  v18 = vaddq_f32((float32x4_t)vzip1q_s32(v16, vdupq_laneq_s32(v13, 2)), vaddq_f32((float32x4_t)vzip1q_s32(v15, v13), v17));
  __asm { FMOV            V5.4S, #1.0 }
  v24 = vceqzq_f32(v18);
  v24.i32[3] = 0;
  v25 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v24), (int8x16_t)v18, (int8x16_t)vdivq_f32(_Q5, v18));
  *(_QWORD *)&result = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(vmulq_laneq_f32(v11, v25, 2), a1[5], 2), vmulq_lane_f32(v10, *(float32x2_t *)v25.f32, 1), *(float32x2_t *)a1[5].f32, 1), vmulq_n_f32(v9, v25.f32[0]), COERCE_FLOAT(*(_OWORD *)&a1[5])).u64[0];
  return result;
}

uint64_t sub_1B17A8030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"result");
  return a1 + 112;
}

double sub_1B17A8078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  uint64_t v122;
  uint64_t v123;
  float32x4_t v124;
  _OWORD v125[3];

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"hit");
  v10 = *(_QWORD *)(a1 + 16);
  v11 = 0.0;
  if (v10)
  {
    v12 = sub_1B1868FA0(v10, a2, a3, a4, a5, a6, a7, a8);
    if (v12)
    {
      v20 = sub_1B17A0848(v12, v13, v14, v15, v16, v17, v18, v19);
      if (v20)
      {
        v25 = v20;
        v26 = sub_1B1875540(v20, 3, a2, 0, v21, v22, v23, v24);
        if (v26)
        {
          v33 = (uint64_t)v26;
          v34 = sub_1B1875E70(v25, 0, v27, v28, v29, v30, v31, v32);
          if (v34)
          {
            v40 = (uint64_t)v34;
            v41 = sub_1B1874C3C(v25, *(_QWORD *)(a1 + 32), 0, v35, v36, v37, v38, v39);
            if (v41)
            {
              v47 = (uint64_t)v41;
              v48 = sub_1B1875D94(v25, 3, a2, v42, v43, v44, v45, v46);
              v54 = sub_1B1875D94(v25, 0, 0, v49, v50, v51, v52, v53);
              v59 = sub_1B17A4A74(v47, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), v48, v55, v56, v57, v58);
              v64 = sub_1B17A4A74(v47, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 52), v48, v60, v61, v62, v63);
              v75 = sub_1B17A4A74(v47, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), v48, v65, v66, v67, v68);
              v122 = v64;
              v123 = v59;
              v76 = v75;
              if (v54 != v48)
              {
                v59 = sub_1B17A4A74(v47, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), v54, v71, v72, v73, v74);
                v64 = sub_1B17A4A74(v47, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 52), v54, v77, v78, v79, v80);
                v76 = sub_1B17A4A74(v47, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56), v54, v81, v82, v83, v84);
              }
              *(double *)&v85 = sub_1B17EE400(v40, v59, v69, v70, v71, v72, v73, v74);
              v125[0] = v85;
              *(double *)&v92 = sub_1B17EE400(v40, v64, v86, v87, v88, v89, v90, v91);
              v125[1] = v92;
              *(double *)&v99 = sub_1B17EE400(v40, v76, v93, v94, v95, v96, v97, v98);
              v125[2] = v99;
              v124.i32[2] = 0;
              v124.i64[0] = 0;
              sub_1B1821F3C(v125, (__int128 *)(a1 + 64), &v124);
              v106 = sub_1B17EE478(v33, v123, v100, v101, v102, v103, v104, v105);
              v113 = sub_1B17EE478(v33, v122, v107, v108, v109, v110, v111, v112);
              v120 = sub_1B17EE478(v33, v75, v114, v115, v116, v117, v118, v119);
              return COERCE_DOUBLE(vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)&v113, *(float32x2_t *)v124.f32, 1), *(float32x2_t *)&v106, v124.f32[0]), *(float32x2_t *)&v120, v124, 2));
            }
          }
        }
      }
    }
  }
  return v11;
}

uint64_t sub_1B17A829C(float32x4_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  float32x2_t *v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float64x2_t v32;
  uint64_t v33;
  float32x2_t v34;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float v44;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  simd_float4x4 v51;
  _OWORD v52[11];
  __n128 v53;
  simd_float4x4 v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  simd_float4x4 v59;

  v9 = (float32x2_t *)a5;
  v53 = a9;
  if (!a3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), 0, a4, a5, a6, a7, a8, (uint64_t)"pointOfView");
  memset(v52, 0, sizeof(v52));
  v20 = sub_1B17B33F4(a3, (uint64_t)v52, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v20)
  {
    if (a4 && (v52[0] & 2) != 0)
      sub_1B17B34F8((uint64_t)v52, a3, 0, a4, v16, v17, v18, v19, v46);
    v21 = sub_1B18667B4((unsigned __int8 *)v52, (uint64_t)&v53, v14, v15, v16, v17, v18, v19);
    v49 = *((float32x4_t *)v21 + 1);
    v50 = *(float32x4_t *)v21;
    v47 = *((float32x4_t *)v21 + 3);
    v48 = *((float32x4_t *)v21 + 2);
    memset(&v51, 0, sizeof(v51));
    sub_1B186BDB8(a3, (uint64_t)&v51, v22, v23, v24, v25, v26, v27);
    v59 = __invert_f4(v51);
    v28 = 0;
    v29 = (int8x16_t)v53;
    v54 = v59;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v55 + v28 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, COERCE_FLOAT(*(_OWORD *)&v54.columns[v28])), v49, *(float32x2_t *)v54.columns[v28].f32, 1), v48, (float32x4_t)v54.columns[v28], 2), v47, (float32x4_t)v54.columns[v28], 3);
      ++v28;
    }
    while (v28 != 4);
    if (a2 >= 1)
    {
      v30 = v55;
      v31 = v56;
      v32 = vcvtq_f64_f32(*(float32x2_t *)v29.i8);
      v33 = a2;
      v34 = (float32x2_t)vextq_s8(v29, v29, 8uLL).u64[0];
      __asm
      {
        FMOV            V5.2S, #1.0
        FMOV            V6.2D, #0.5
      }
      v41 = v57;
      v42 = v58;
      do
      {
        v43 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v42, v41, *a1, 2), v31, *(float32x2_t *)a1->f32, 1), v30, COERCE_FLOAT(*a1));
        if (v43.f32[3] == 0.0)
          break;
        v44 = 1.0 / v43.f32[3];
        if ((float)(1.0 / v43.f32[3]) == 0.0)
          break;
        v9[1].f32[0] = 1.0 - vmuls_lane_f32(v44, v43, 2);
        *v9 = vcvt_f32_f64(vaddq_f64(vmulq_f64(vcvtq_f64_f32(vmul_f32(v34, vadd_f32(vmul_n_f32(*(float32x2_t *)v43.f32, v44), _D5))), _Q6), v32));
        v9 += 2;
        ++a1;
        --v33;
      }
      while (v33);
    }
  }
  return v20;
}

uint64_t sub_1B17A8484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  float32x4_t *v9;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  _OWORD v34[11];

  v9 = (float32x4_t *)a5;
  if (!a3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), 0, a4, a5, a6, a7, a8, (uint64_t)"pointOfView");
  memset(v34, 0, sizeof(v34));
  result = sub_1B17B33F4(a3, (uint64_t)v34, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    if (a4 && (v34[0] & 2) != 0)
      sub_1B17B34F8((uint64_t)v34, a3, 0, a4, v15, v16, v17, v18, v32);
    result = sub_1B1866C40((float *)v34, a1, a2, (uint64_t)v9, v15, v16, v17, v18, a9);
    if ((_DWORD)result)
    {
      v26 = (float32x4_t *)sub_1B1869AC8(a3, v19, v20, v21, v22, v23, v24, v25);
      if ((int)a2 >= 1)
      {
        v28 = v26[2];
        v27 = v26[3];
        v29 = a2;
        v31 = *v26;
        v30 = v26[1];
        do
        {
          *v9 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v27, v28, *v9, 2), v30, *(float32x2_t *)v9->f32, 1), v31, COERCE_FLOAT(*v9));
          ++v9;
          --v29;
        }
        while (v29);
      }
      return 1;
    }
  }
  return result;
}

double sub_1B17A8594(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, __n128 a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    __asm { FMOV            V2.4S, #1.0 }
    *(double *)&_Q2 = a6;
    v20[0] = *(unint64_t *)&a6;
    v20[1] = _Q2;
    sub_1B17A8484((uint64_t)v20, 2, a1, a2, (uint64_t)&v18, a8, a9, a10, a5);
    if (a3)
    {
      a5.n128_u64[0] = v18;
      *a3 = v18;
    }
    if (a4)
    {
      a5.n128_u64[0] = v19;
      *a4 = v19;
    }
  }
  return a5.n128_f64[0];
}

_OWORD *sub_1B17A8638(_OWORD *result, CFDictionaryRef theDict)
{
  uint64_t v3;
  const void *Value;
  CFTypeRef *v5;
  char v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const __CFNumber *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  const void *v28;
  const void *v29;
  const void *v30;
  uint64_t valuePtr;

  result[25] = 0u;
  result[26] = 0u;
  result[23] = 0u;
  result[24] = 0u;
  result[21] = 0u;
  result[22] = 0u;
  result[19] = 0u;
  result[20] = 0u;
  result[17] = 0u;
  result[18] = 0u;
  result[15] = 0u;
  result[16] = 0u;
  result[13] = 0u;
  result[14] = 0u;
  result[11] = 0u;
  result[12] = 0u;
  result[9] = 0u;
  result[10] = 0u;
  result[7] = 0u;
  result[8] = 0u;
  result[5] = 0u;
  result[6] = 0u;
  result[3] = 0u;
  result[4] = 0u;
  result[1] = 0u;
  result[2] = 0u;
  *result = 0u;
  *(_QWORD *)result = -1;
  *((_BYTE *)result + 10) = 1;
  *((_WORD *)result + 4) = *((_WORD *)result + 4) & 0xE400 | 0xA3F;
  if (!theDict)
    return result;
  v3 = (uint64_t)result;
  Value = CFDictionaryGetValue(theDict, CFSTR("kHitTestAllLayers"));
  v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (Value)
  {
    if (CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], Value))
      v6 = 3;
    else
      v6 = 1;
    *(_BYTE *)(v3 + 10) = v6;
  }
  v7 = (void *)CFDictionaryGetValue(theDict, CFSTR("kHitTestLayerMask"));
  if (v7)
  {
    v11 = objc_msgSend_integerValue(v7, v8, v9, v10);
    if (v11 >= 1)
      *(_BYTE *)(v3 + 10) = v11;
  }
  v12 = CFDictionaryGetValue(theDict, CFSTR("kHitTestClipToZRange"));
  if (v12)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFFFD | (2 * (CFEqual(*v5, v12) != 0));
  v13 = CFDictionaryGetValue(theDict, CFSTR("kHitTestIgnoreLockedNodes"));
  if (v13)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xEFFF | ((CFEqual(*v5, v13) != 0) << 12);
  v14 = CFDictionaryGetValue(theDict, CFSTR("kHitTestBackFaceCulling"));
  if (v14)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFFF7 | (8 * (CFEqual(*v5, v14) != 0));
  v15 = CFDictionaryGetValue(theDict, CFSTR("kHitTestSkipTransparentNode"));
  if (v15)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFFEF | (16 * (CFEqual(*v5, v15) != 0));
  v16 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("kHitTestCategoryBitMask"));
  if (v16)
  {
    valuePtr = 0;
    CFNumberGetValue(v16, kCFNumberLongType, &valuePtr);
    *(_QWORD *)v3 = valuePtr;
  }
  v17 = CFDictionaryGetValue(theDict, CFSTR("kHitTestSkipHiddenNode"));
  if (v17)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFFDF | (32 * (CFEqual(*v5, v17) != 0));
  v18 = CFDictionaryGetValue(theDict, CFSTR("kHitTestSkipParticleEmitter"));
  if (v18)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFFBF | ((CFEqual(*v5, v18) != 0) << 6);
  v19 = CFDictionaryGetValue(theDict, CFSTR("kHitTestIgnoreChildNodes"));
  if (v19)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFFFE | (CFEqual(*v5, v19) == 0);
  v20 = CFDictionaryGetValue(theDict, CFSTR("kHitTestFirstFoundOnly"));
  if (v20)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFEFF | ((CFEqual(*v5, v20) != 0) << 8);
  v21 = CFDictionaryGetValue(theDict, CFSTR("kHitTestSortResults"));
  if (v21)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFFFB | (4 * (CFEqual(*v5, v21) != 0));
  v22 = (void *)CFDictionaryGetValue(theDict, CFSTR("kHitTestSearchMode"));
  if (v22)
  {
    v26 = objc_msgSend_integerValue(v22, v23, v24, v25);
    switch(v26)
    {
      case 2:
        v27 = *(_WORD *)(v3 + 8) & 0xFCFF | 0x100;
        goto LABEL_37;
      case 1:
        v27 = *(_WORD *)(v3 + 8) & 0xFCFF;
        goto LABEL_37;
      case 0:
        v27 = *(_WORD *)(v3 + 8) & 0xFCFF | 0x200;
LABEL_37:
        *(_WORD *)(v3 + 8) = v27;
        break;
    }
  }
  v28 = CFDictionaryGetValue(theDict, CFSTR("kHitTestBoundingBoxOnly"));
  if (v28)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFF7F | ((CFEqual(*v5, v28) != 0) << 7);
  v29 = CFDictionaryGetValue(theDict, CFSTR("kHitTestShowDebugInfo"));
  if (v29)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xFBFF | ((CFEqual(*v5, v29) != 0) << 10);
  v30 = CFDictionaryGetValue(theDict, CFSTR("kHitTestResultIgnoreLightArea"));
  if (v30)
    *(_WORD *)(v3 + 8) = *(_WORD *)(v3 + 8) & 0xF7FF | ((CFEqual(*v5, v30) & 1) << 11);
  result = CFDictionaryGetValue(theDict, CFSTR("auth"));
  *(_QWORD *)(v3 + 416) = result;
  return result;
}

void sub_1B17A8AA0(uint64_t a1, unsigned int a2, int a3, int a4, int a5, float a6, float32x4_t a7, __n128 a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  CFTypeRef v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float v26;

  v14 = sub_1B17A7CC4();
  sub_1B17A7DA0(v14, *(CFTypeRef *)(a1 + 112), v15, v16, v17, v18, v19, v20);
  v21 = *(CFTypeRef *)(v14 + 24);
  v22 = *(CFTypeRef *)(a1 + 120);
  if (v21 != v22)
  {
    if (v21)
    {
      CFRelease(*(CFTypeRef *)(v14 + 24));
      *(_QWORD *)(v14 + 24) = 0;
      v22 = *(CFTypeRef *)(a1 + 120);
    }
    if (v22)
      v22 = CFRetain(v22);
    *(_QWORD *)(v14 + 24) = v22;
  }
  v23 = *(_OWORD *)(a1 + 128);
  v24 = *(_OWORD *)(a1 + 144);
  v25 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v14 + 144) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v14 + 160) = v25;
  *(_OWORD *)(v14 + 112) = v23;
  *(_OWORD *)(v14 + 128) = v24;
  *(__n128 *)(v14 + 80) = a8;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(v14 + 40) = a2;
  *(_DWORD *)(v14 + 48) = a3;
  *(_DWORD *)(v14 + 52) = a4;
  *(_DWORD *)(v14 + 56) = a5;
  *(float32x4_t *)(v14 + 64) = a7;
  *(float32x4_t *)(v14 + 96) = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a1 + 176), *(float32x4_t *)(a1 + 160), a7, 2), *(float32x4_t *)(a1 + 144), *(float32x2_t *)a7.f32, 1), *(float32x4_t *)(a1 + 128), a7.f32[0]);
  if ((*(_WORD *)(a1 + 8) & 0x200) != 0)
  {
    v26 = a6 / *(float *)(a1 + 108);
    *(float *)(a1 + 108) = a6;
    *(float *)(a1 + 60) = v26 * *(float *)(a1 + 60);
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 312), (const void *)v14);
  CFRelease((CFTypeRef)v14);
}

void sub_1B17A8BAC(uint64_t a1, unsigned int a2, int a3, int a4, int a5, float a6, float32x4_t a7, __n128 a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  simd_float4x4 v26;

  v14 = sub_1B17A7CC4();
  sub_1B17A7DA0(v14, *(CFTypeRef *)(a1 + 112), v15, v16, v17, v18, v19, v20);
  v21 = *(_OWORD *)(a1 + 128);
  v22 = *(_OWORD *)(a1 + 144);
  v23 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v14 + 144) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v14 + 160) = v23;
  *(_OWORD *)(v14 + 112) = v21;
  *(_OWORD *)(v14 + 128) = v22;
  *(__n128 *)(v14 + 80) = a8;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(v14 + 40) = a2;
  *(_DWORD *)(v14 + 48) = a3;
  *(_DWORD *)(v14 + 52) = a4;
  *(_DWORD *)(v14 + 56) = a5;
  *(float32x4_t *)(v14 + 96) = a7;
  v26 = __invert_f4(*(simd_float4x4 *)(a1 + 128));
  *(float32x4_t *)(v14 + 64) = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v26.columns[3], (float32x4_t)v26.columns[2], a7, 2), (float32x4_t)v26.columns[1], *(float32x2_t *)a7.f32, 1), (float32x4_t)v26.columns[0], a7.f32[0]);
  if ((*(_WORD *)(a1 + 8) & 0x200) != 0)
    *(float *)(a1 + 60) = a6;
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 312), (const void *)v14);
  CFRelease((CFTypeRef)v14);
}

BOOL sub_1B17A8C80(uint64_t a1, uint64_t a2, unsigned int a3, float32x4_t a4, float32x4_t a5, __n128 a6, uint64_t a7, char a8, uint64_t a9)
{
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v15;
  float v16;
  __int16 v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  __n128 v42;
  int8x16_t v43;
  float v44;
  int8x16_t v45;
  float v46;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x2_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint32x4_t v68;
  float32x4_t v70;

  if (a3)
  {
    v11 = a5;
    v12 = a4;
    v15 = 0;
    v16 = a6.n128_f32[3];
    v17 = *(_WORD *)(a9 + 8);
    v18 = 1;
    v19 = 2;
    __asm { FMOV            V22.4S, #-1.0 }
    v25 = a3;
    v26.i64[0] = 0xBF000000BF000000;
    v26.i64[1] = 0xBF000000BF000000;
    v27.i64[0] = 0x3F0000003F000000;
    v27.i64[1] = 0x3F0000003F000000;
    v70 = _Q22;
    while (1)
    {
      v28 = *(float32x4_t *)(a1 + 16 * (v19 - 2));
      v29 = *(float32x4_t *)(a1 + 16 * (v19 - 1));
      v30 = *(float32x4_t *)(a1 + 16 * v19);
      v31 = vsubq_f32(v29, v28);
      v32 = vsubq_f32(v30, v28);
      v33 = vnegq_f32(v31);
      v34 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL), v33), v32, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), (int8x16_t)v31, 0xCuLL));
      v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
      v36 = vmulq_f32(v34, v34);
      v36.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), v36)).u64[0];
      v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 0);
      v37.i32[3] = 0;
      v38 = vrsqrteq_f32(v37);
      v39 = vmulq_f32(v38, vrsqrtsq_f32(v37, vmulq_f32(v38, v38)));
      v40 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v36.f32[0] != 0.0)), 0x1FuLL));
      v40.i32[3] = 0;
      v42 = (__n128)vbslq_s8((int8x16_t)vcltzq_s32(v40), (int8x16_t)vmulq_f32(vmulq_f32(v39, vrsqrtsq_f32(v37, vmulq_f32(v39, v39))), v35), (int8x16_t)v35);
      v41 = vmulq_f32((float32x4_t)v42, v28);
      v42.n128_f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0];
      v43 = (int8x16_t)vmulq_f32(v11, (float32x4_t)v42);
      v44 = vaddv_f32(vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
      if ((v17 & 8) == 0 || (a8 & 1) != 0)
      {
        if (v44 == 0.0)
          goto LABEL_17;
      }
      else if (v44 >= 0.0)
      {
        goto LABEL_17;
      }
      v45 = (int8x16_t)vmulq_f32(v12, (float32x4_t)v42);
      v46 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL))) / v44;
      if (v46 >= 0.0 && v46 <= v16)
      {
        v48 = vmlaq_n_f32(v12, v11, v46);
        v49 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v32, (int8x16_t)v32, 0xCuLL), (int8x16_t)v32, 8uLL), v33), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL), (int8x16_t)v31, 8uLL), v32);
        v50 = vmulq_f32(v49, v49);
        v51 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).u64[0];
        v52 = _Q22;
        if (fabsf(*(float *)v51.i32) >= 1.1755e-38)
        {
          v53 = vsubq_f32(v30, v48);
          v54 = vsubq_f32(v29, v48);
          v55 = vsubq_f32(v28, v48);
          v56 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v54, (int8x16_t)v54, 0xCuLL), (int8x16_t)v54, 8uLL);
          v57 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v53, (int8x16_t)v53, 0xCuLL), (int8x16_t)v53, 8uLL);
          v58 = vmlaq_f32(vmulq_f32(v57, vnegq_f32(v54)), v56, v53);
          v59 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v55, (int8x16_t)v55, 0xCuLL), (int8x16_t)v55, 8uLL);
          v60 = vmlaq_f32(vmulq_f32(v59, vnegq_f32(v53)), v57, v55);
          v61 = vmlaq_f32(vmulq_f32(v56, vnegq_f32(v55)), v59, v54);
          v62 = (int32x4_t)vmulq_f32(v49, v58);
          v63 = (int32x4_t)vmulq_f32(v49, v60);
          v64 = (int32x4_t)vmulq_f32(v49, v61);
          v65 = vzip2q_s32(v62, v64);
          v66 = (float32x4_t)vzip1q_s32(vzip1q_s32(v62, v64), v63);
          v67 = (float32x4_t)vtrn2q_s32(v62, v63);
          v67.i32[2] = v64.i32[1];
          v52 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(v65, vdupq_laneq_s32(v63, 2)), vaddq_f32(v66, v67)), (float32x4_t)vdupq_lane_s32(v51, 0));
        }
        v68 = (uint32x4_t)vcgeq_f32(v27, vabsq_f32(vaddq_f32(v52, v26)));
        v68.i32[3] = v68.i32[2];
        if ((vminvq_u32(v68) & 0x80000000) != 0)
        {
          sub_1B17A8AA0(a9, *(_DWORD *)(a2 + 4 * v15), 0, 1, 2, v46, v48, v42);
          v27.i64[0] = 0x3F0000003F000000;
          v27.i64[1] = 0x3F0000003F000000;
          v26.i64[0] = 0xBF000000BF000000;
          v26.i64[1] = 0xBF000000BF000000;
          _Q22 = v70;
          v12 = a4;
          v11 = a5;
          v17 = *(_WORD *)(a9 + 8);
          if ((v17 & 0x100) != 0)
            return v18;
        }
      }
LABEL_17:
      v18 = ++v15 < v25;
      v19 += 3;
      if (v25 == v15)
        return v18;
    }
  }
  return 0;
}

uint64_t sub_1B17A8F58(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  float32x4_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  float32x4_t *v70;
  float32x4_t *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t *v76;
  float32x4_t v77;
  float32x4_t v78;
  _DWORD *v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  _OWORD v83[3];
  uint64_t v84;
  _QWORD v85[10];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  float32x4_t *v101;
  uint64_t v102;
  float32x4_t v103;
  uint64_t v104;
  float32x4_t *v105;
  uint64_t v106;
  float32x4_t v107;
  uint64_t v108;

  v8 = (_DWORD *)a5;
  v9 = a4;
  v108 = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshElement");
  result = *(_QWORD *)(a1 + 208);
  if (result)
    goto LABEL_4;
  if ((*((_BYTE *)a2 + 26) & 0xFA) == 0)
  {
    v14 = *((_DWORD *)a2 + 2) + 31;
    *(_DWORD *)(a1 + 216) = v14 >> 5;
    *(_QWORD *)(a1 + 208) = malloc_type_malloc(v14 & 0xFFFFFFE0, 0x1000040E0EAB150uLL);
    v21 = v9 & 0xFF000000000000;
    v96 = 0;
    v97 = &v96;
    v98 = 0x2020000000;
    v99 = 0;
    v104 = 0;
    v105 = (float32x4_t *)&v104;
    v106 = 0x3020000000;
    v22 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v107 = v22;
    v100 = 0;
    v101 = (float32x4_t *)&v100;
    v102 = 0x3020000000;
    v23.i64[0] = 0x80000000800000;
    v23.i64[1] = 0x80000000800000;
    v103 = v23;
    v92 = 0;
    v93 = &v92;
    v94 = 0x2020000000;
    v95 = 0;
    v79 = v8;
    if (*((_BYTE *)a2 + 26) == 4)
    {
      v85[1] = 3221225472;
      v24 = a2[1];
      v86 = *a2;
      v87 = v24;
      v26 = *a2;
      v25 = a2[1];
      v88 = a2[2];
      v85[0] = MEMORY[0x1E0C809B0];
      v85[2] = sub_1B17A949C;
      v85[3] = &unk_1E63D5178;
      v91 = v21 == 0x1000000000000;
      v85[8] = a3;
      v85[9] = v9;
      v85[4] = &v104;
      v85[5] = &v100;
      v89 = *((_QWORD *)a2 + 6);
      v90 = a1;
      v85[6] = &v96;
      v85[7] = &v92;
      v83[0] = v26;
      v83[1] = v25;
      v83[2] = a2[2];
      v84 = *((_QWORD *)a2 + 6);
      sub_1B17A5198((uint64_t *)v83, (uint64_t)v85, v15, v16, v17, v18, v19, v20);
    }
    else if (*((_DWORD *)a2 + 2))
    {
      v27 = 0;
      v28 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      v80 = v28;
      do
      {
        v29 = *((unsigned __int8 *)a2 + 26);
        if (*((_BYTE *)a2 + 26))
        {
          if ((v27 & 1) != 0)
            v30 = 1;
          else
            v30 = 2;
          if ((v27 & 1) != 0)
            v31 = 2;
          else
            v31 = 1;
          v32 = v29 != 5;
          v33 = v29 == 1;
          if (v29 == 1)
            v32 = 1;
          v34 = 1;
          if (v29 == 1)
            v35 = v30;
          else
            v35 = 2;
          if (v33)
            v36 = v31;
          else
            v36 = 1;
        }
        else
        {
          v32 = 3;
          v34 = 3;
          v35 = 2;
          v36 = 1;
        }
        v37 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v38 = *((unsigned __int8 *)a2 + 27);
          v39 = *((_QWORD *)a2 + 5);
          v40 = *((_QWORD *)a2 + 6);
          switch(v38)
          {
            case 4:
              v41 = *(_DWORD *)(v37 + 4 * (v39 + v40 * v27 * v32));
              v45 = v34 * v27;
              v43 = *(_DWORD *)(v37 + 4 * (v39 + (v36 + v45) * v40));
              LODWORD(v9) = *(_DWORD *)(v37 + 4 * (v39 + (v45 + v35) * v40));
              break;
            case 2:
              v41 = *(unsigned __int16 *)(v37 + 2 * (v39 + v40 * v27 * v32));
              v46 = v34 * v27;
              v43 = *(unsigned __int16 *)(v37 + 2 * (v39 + (v36 + v46) * v40));
              LODWORD(v9) = *(unsigned __int16 *)(v37 + 2 * (v39 + (v46 + v35) * v40));
              break;
            case 1:
              v41 = *(unsigned __int8 *)(v37 + v39 + v40 * v27 * v32);
              v42 = v34 * v27;
              v43 = *(unsigned __int8 *)(v37 + v39 + (v36 + v42) * v40);
              LODWORD(v9) = *(unsigned __int8 *)(v37 + v39 + (v42 + v35) * v40);
              break;
            default:
              sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), v15, v16, v17, v18, v19, v20, *((unsigned __int8 *)a2 + 27));
              LODWORD(v9) = 0;
              v43 = 0;
              v41 = 0;
              break;
          }
        }
        else
        {
          v41 = v27 * v32;
          v44 = v34 * v27;
          v43 = v36 + v44;
          LODWORD(v9) = v44 + v35;
        }
        v47 = a3 + v41 * BYTE5(v9);
        if (v21 == 0x1000000000000)
        {
          v22.i64[0] = *(_QWORD *)v47;
          v22.i64[1] = *(unsigned int *)(v47 + 8);
          v48 = a3 + v43 * BYTE5(v9);
          v49.i64[0] = *(_QWORD *)v48;
          v49.i64[1] = *(unsigned int *)(v48 + 8);
          v50 = a3 + v9 * BYTE5(v9);
          v51.i64[0] = *(_QWORD *)v50;
          v51.i64[1] = *(unsigned int *)(v50 + 8);
        }
        else
        {
          *(double *)v52.i64 = sub_1B198D4F8(BYTE4(v9), (const float *)v47, v15, v16, v17, v18, v19, v20, v28, v23.f32[0], v22.f32[0]);
          v82 = v52;
          *(double *)v61.i64 = sub_1B198D4F8(BYTE4(v9), (const float *)(a3 + v43 * BYTE5(v9)), v53, v54, v55, v56, v57, v58, v52, v59, v60);
          v81 = v61;
          *(double *)v51.i64 = sub_1B198D4F8(BYTE4(v9), (const float *)(a3 + v9 * BYTE5(v9)), v62, v63, v64, v65, v66, v67, v61, v68, v69);
          v49 = v81;
          v22 = v82;
        }
        v70 = v105;
        v105[2] = vminnmq_f32(vminnmq_f32(vminnmq_f32(v105[2], v22), v49), v51);
        v71 = v101;
        v23 = vmaxnmq_f32(vmaxnmq_f32(v101[2], v22), v49);
        v28 = vmaxnmq_f32(v23, v51);
        v101[2] = v28;
        v72 = *((_DWORD *)v97 + 6) + 1;
        *((_DWORD *)v97 + 6) = v72;
        if (v72 > 0x1F || (v73 = *((_DWORD *)a2 + 2), v27 >= v73 - 1))
        {
          v74 = *(_QWORD *)(a1 + 208);
          v75 = *((unsigned int *)v93 + 6);
          *((_DWORD *)v93 + 6) = v75 + 1;
          v76 = (float32x4_t *)(v74 + 32 * v75);
          v77 = v70[2];
          v23 = v71[2];
          v77.i32[3] = 1.0;
          v23.i32[3] = 1.0;
          v78.i64[0] = 0x3F0000003F000000;
          v78.i64[1] = 0x3F0000003F000000;
          v22 = vmulq_f32(vaddq_f32(v77, v23), v78);
          *v76 = v22;
          v76[1] = vmulq_f32(vsubq_f32(v23, v77), v78);
          v105[2] = v80;
          v28.i64[0] = 0x80000000800000;
          v28.i64[1] = 0x80000000800000;
          v101[2] = v28;
          *((_DWORD *)v97 + 6) = 0;
          v73 = *((_DWORD *)a2 + 2);
        }
        ++v27;
      }
      while (v27 < v73);
    }
    if (*((_DWORD *)v93 + 6) != *(_DWORD *)(a1 + 216))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. error in computing triangle bbox"), v15, v16, v17, v18, v19, v20, (uint64_t)"groupIndex == meshElement->_primitiveGroupCount");
    _Block_object_dispose(&v92, 8);
    _Block_object_dispose(&v100, 8);
    _Block_object_dispose(&v104, 8);
    _Block_object_dispose(&v96, 8);
    result = *(_QWORD *)(a1 + 208);
    v8 = v79;
LABEL_4:
    *v8 = *(_DWORD *)(a1 + 216);
    return result;
  }
  return 0;
}

void sub_1B17A9458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v43 - 208), 8);
  _Block_object_dispose((const void *)(v43 - 160), 8);
  _Block_object_dispose((const void *)(v43 - 240), 8);
  _Unwind_Resume(a1);
}

float32x4_t sub_1B17A949C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t result, float32x4_t a10, float a11)
{
  int *v11;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  int v19;
  float32x4_t v20;
  __n128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;

  v11 = (int *)a3;
  if (*(_BYTE *)(a1 + 144))
  {
    if ((_DWORD)a4)
    {
      v14 = a4;
      result.i8[12] = 0;
      result.i8[13] = 0;
      result.i8[14] = 0;
      result.i8[15] = 0;
      do
      {
        v15 = *v11++;
        v16 = *(_QWORD *)(a1 + 64) + v15 * *(unsigned __int8 *)(a1 + 77);
        v17.i64[0] = *(_QWORD *)v16;
        v17.i32[2] = *(_DWORD *)(v16 + 8);
        v17.i32[3] = result.i32[3];
        *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32) = vminnmq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 32), v17);
        *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32) = vmaxnmq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 32), v17);
        result = v17;
        --v14;
      }
      while (v14);
    }
  }
  else if ((_DWORD)a4)
  {
    v18 = a4;
    do
    {
      v19 = *v11++;
      *(double *)v20.i64 = sub_1B198D4F8(*(unsigned __int8 *)(a1 + 76), (const float *)(*(_QWORD *)(a1 + 64) + v19 * *(unsigned __int8 *)(a1 + 77)), a3, a4, a5, a6, a7, a8, result, a10.f32[0], a11);
      *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32) = vminnmq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 32), v20);
      v21 = *(__n128 **)(*(_QWORD *)(a1 + 40) + 8);
      a10 = (float32x4_t)v21[2];
      result = vmaxnmq_f32(a10, v20);
      v21[2] = (__n128)result;
      --v18;
    }
    while (v18);
  }
  if (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) > 0x1Fu || *(_DWORD *)(a1 + 88) - 1 <= a2)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 208);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v24 = *(unsigned int *)(v23 + 24);
    *(_DWORD *)(v23 + 24) = v24 + 1;
    v25 = (float32x4_t *)(v22 + 32 * v24);
    v26 = *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32);
    v27 = *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32);
    v26.i32[3] = 1.0;
    v27.i32[3] = 1.0;
    v28.i64[0] = 0x3F0000003F000000;
    v28.i64[1] = 0x3F0000003F000000;
    *v25 = vmulq_f32(vaddq_f32(v26, v27), v28);
    v25[1] = vmulq_f32(vsubq_f32(v27, v26), v28);
    *(int32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 32) = vdupq_n_s32(0x7F7FFFFFu);
    result.i64[0] = 0x80000000800000;
    result.i64[1] = 0x80000000800000;
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32) = result;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
  return result;
}

BOOL sub_1B17A9648(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float32x4_t a10, int8x16_t a11)
{
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  uint64_t v59;
  float32x4_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  float32x4_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float v72;
  float v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float v95;
  float32x4_t v97;
  float32x4_t v98;
  int32x2_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  unint64_t v128;
  _BOOL4 v129;
  BOOL v130;
  float32x4_t v131;
  uint64_t v132;
  uint64_t v133;

  v129 = (*(_WORD *)(a3 + 8) & 8) != 0 && *(_BYTE *)(a3 + 272) == 0;
  v11 = a2 - a1;
  if (a2 > a1)
  {
    v124 = *(unsigned __int8 *)(a3 + 212);
    v12 = *(unsigned __int8 *)(a3 + 242);
    v132 = *(_QWORD *)(a3 + 216);
    v133 = *(unsigned __int8 *)(a3 + 243);
    v13 = *(_QWORD *)(a3 + 200);
    v14 = *(unsigned __int8 *)(a3 + 213);
    v15 = *(_QWORD *)(a3 + 264);
    v121 = *(_QWORD *)(a3 + 256);
    v122 = v15;
    v16 = *(unsigned __int8 *)(a3 + 214);
    v17 = *(unsigned __int8 *)(a3 + 273);
    v18 = a1;
    v128 = a2;
    v19 = v15 * a1;
    __asm { FMOV            V0.4S, #-1.0 }
    v120 = _Q0;
    v125 = *(float32x4_t *)(a3 + 64);
    v25 = *(float32x4_t *)(a3 + 80);
    v131 = v25;
    v130 = 1;
    v26 = *(float *)(a3 + 108);
    v123 = v12;
    while (1)
    {
      if (v17)
      {
        if (v12)
        {
          v27 = 1;
          if ((v18 & 1) != 0)
            v28 = 1;
          else
            v28 = 2;
          if ((v18 & 1) != 0)
            v29 = 2;
          else
            v29 = 1;
          v30 = v12 == 1 || v12 != 5;
          if (v12 == 1)
            v31 = v28;
          else
            v31 = 2;
          if (v12 == 1)
            v32 = v29;
          else
            v32 = 1;
        }
        else
        {
          v30 = 3;
          v27 = 3;
          v31 = 2;
          v32 = 1;
        }
        if (!v132)
        {
          v39 = v18 * v30;
          v43 = v27 * v18;
          v41 = v32 + v43;
          v44 = v43 + v31;
          goto LABEL_55;
        }
        if ((_DWORD)v133 == 4)
        {
          v45 = v121;
          v46 = v132;
          v39 = *(_DWORD *)(v132 + 4 * (v121 + v19 * v30));
          v47 = v27 * v18;
          v41 = *(_DWORD *)(v132 + 4 * (v121 + (v32 + v47) * v15));
          v48 = v47 + v31;
LABEL_52:
          v44 = *(_DWORD *)(v46 + 4 * (v45 + v48 * v15));
          goto LABEL_55;
        }
        if ((_DWORD)v133 != 2)
        {
          if ((_DWORD)v133 == 1)
          {
            v37 = v121;
            v38 = v132;
            v39 = *(unsigned __int8 *)(v132 + v121 + v19 * v30);
            v40 = v27 * v18;
            v41 = *(unsigned __int8 *)(v132 + v121 + (v32 + v40) * v15);
            v42 = v40 + v31;
LABEL_48:
            v44 = *(unsigned __int8 *)(v38 + v37 + v42 * v15);
            goto LABEL_55;
          }
LABEL_49:
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), a3, a4, a5, a6, a7, a8, v133);
          v44 = 0;
          v39 = 0;
          v41 = 0;
          goto LABEL_55;
        }
        v49 = v121;
        v50 = v132;
        v39 = *(unsigned __int16 *)(v132 + 2 * (v121 + v19 * v30));
        v51 = v27 * v18;
        v41 = *(unsigned __int16 *)(v132 + 2 * (v121 + (v32 + v51) * v15));
        v52 = v51 + v31;
      }
      else
      {
        if (v12)
        {
          v33 = 1;
          if ((v18 & 1) != 0)
            v34 = 1;
          else
            v34 = 2;
          if ((v18 & 1) != 0)
            v35 = 2;
          else
            v35 = 1;
          v36 = v12 != 5;
          if (v12 == 1)
          {
            v36 = 1;
          }
          else
          {
            v34 = 2;
            v35 = 1;
          }
        }
        else
        {
          v36 = 3;
          v33 = 3;
          v34 = 2;
          v35 = 1;
        }
        if (!v132)
        {
          v41 = v18 * v36;
          v54 = v33 * v18;
          v39 = v35 + v54;
          v44 = v54 + v34;
          goto LABEL_55;
        }
        if ((_DWORD)v133 == 4)
        {
          v45 = v121;
          v46 = v132;
          v41 = *(_DWORD *)(v132 + 4 * (v121 + v19 * v36));
          v55 = v33 * v18;
          v39 = *(_DWORD *)(v132 + 4 * (v121 + (v35 + v55) * v15));
          v48 = v55 + v34;
          goto LABEL_52;
        }
        if ((_DWORD)v133 != 2)
        {
          if ((_DWORD)v133 == 1)
          {
            v37 = v121;
            v38 = v132;
            v41 = *(unsigned __int8 *)(v132 + v121 + v19 * v36);
            v53 = v33 * v18;
            v39 = *(unsigned __int8 *)(v132 + v121 + (v35 + v53) * v15);
            v42 = v53 + v34;
            goto LABEL_48;
          }
          goto LABEL_49;
        }
        v49 = v121;
        v50 = v132;
        v41 = *(unsigned __int16 *)(v132 + 2 * (v121 + v19 * v36));
        v56 = v33 * v18;
        v39 = *(unsigned __int16 *)(v132 + 2 * (v121 + (v35 + v56) * v15));
        v52 = v56 + v34;
      }
      v44 = *(unsigned __int16 *)(v50 + 2 * (v49 + v52 * v15));
LABEL_55:
      v57 = v13 + (v41 * v14);
      if (v16 == 1)
      {
        v58.i64[0] = *(_QWORD *)v57;
        v58.i64[1] = *(unsigned int *)(v57 + 8);
        v59 = v13 + (v39 * v14);
        v60.i64[0] = *(_QWORD *)v59;
        v60.i64[1] = *(unsigned int *)(v59 + 8);
        v61 = v13 + (v44 * v14);
        v25.i64[0] = *(_QWORD *)v61;
        v25.i64[1] = *(unsigned int *)(v61 + 8);
      }
      else
      {
        v62 = v19;
        v63 = v18;
        v64 = v39;
        *(double *)v65.i64 = sub_1B198D4F8(v124, (const float *)v57, a3, a4, a5, a6, a7, a8, v25, a10.f32[0], *(float *)a11.i32);
        v127 = v65;
        *(double *)v74.i64 = sub_1B198D4F8(v124, (const float *)(v13 + (v64 * v14)), v66, v67, v68, v69, v70, v71, v65, v72, v73);
        v126 = v74;
        v12 = v123;
        v18 = v63;
        v19 = v62;
        v15 = v122;
        *(double *)v25.i64 = sub_1B198D4F8(v124, (const float *)(v13 + (v44 * v14)), v75, v76, v77, v78, v79, v80, v74, v81, v82);
        v60 = v126;
        v58 = v127;
      }
      v83 = vsubq_f32(v60, v58);
      v84 = vsubq_f32(v25, v58);
      v85 = vnegq_f32(v83);
      v86 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), (int8x16_t)v84, 0xCuLL), v85), v84, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL));
      v87 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), (int8x16_t)v86, 0xCuLL);
      v88 = vmulq_f32(v86, v86);
      v88.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), v88)).u64[0];
      v89 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 0);
      v89.i32[3] = 0;
      v90 = vrsqrteq_f32(v89);
      v91 = vmulq_f32(v90, vrsqrtsq_f32(v89, vmulq_f32(v90, v90)));
      v92 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v88.f32[0] != 0.0)), 0x1FuLL));
      v92.i32[3] = 0;
      a11 = vbslq_s8((int8x16_t)vcltzq_s32(v92), (int8x16_t)vmulq_f32(vmulq_f32(v91, vrsqrtsq_f32(v89, vmulq_f32(v91, v91))), v87), (int8x16_t)v87);
      v93 = vmulq_f32(v58, (float32x4_t)a11);
      *(float *)&a11.i32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2), vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1))).f32[0];
      a10 = vmulq_f32(v131, (float32x4_t)a11);
      a10.f32[0] = vaddv_f32(vadd_f32(*(float32x2_t *)a10.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a10, (int8x16_t)a10, 8uLL)));
      if (v129)
      {
        if (a10.f32[0] >= 0.0)
          goto LABEL_71;
      }
      else if (a10.f32[0] == 0.0)
      {
        goto LABEL_71;
      }
      v94 = (int8x16_t)vmulq_f32(v125, (float32x4_t)a11);
      v95 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v94.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL)))
          / a10.f32[0];
      if (v95 >= 0.0 && v95 <= v26)
      {
        a10 = vmlaq_n_f32(v125, v131, v95);
        v97 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v84, (int8x16_t)v84, 0xCuLL), (int8x16_t)v84, 8uLL), v85), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v83, (int8x16_t)v83, 0xCuLL), (int8x16_t)v83, 8uLL), v84);
        v98 = vmulq_f32(v97, v97);
        v99 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).u64[0];
        v100 = v120;
        if (fabsf(*(float *)v99.i32) >= 1.1755e-38)
        {
          v101 = vsubq_f32(v25, a10);
          v102 = vsubq_f32(v60, a10);
          v103 = vsubq_f32(v58, a10);
          v104 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v102, (int8x16_t)v102, 0xCuLL), (int8x16_t)v102, 8uLL);
          v105 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v101, (int8x16_t)v101, 0xCuLL), (int8x16_t)v101, 8uLL);
          v106 = vmlaq_f32(vmulq_f32(v105, vnegq_f32(v102)), v104, v101);
          v107 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v103, (int8x16_t)v103, 0xCuLL), (int8x16_t)v103, 8uLL);
          v108 = vmlaq_f32(vmulq_f32(v107, vnegq_f32(v101)), v105, v103);
          v109 = vmlaq_f32(vmulq_f32(v104, vnegq_f32(v103)), v107, v102);
          v110 = (int32x4_t)vmulq_f32(v97, v106);
          v111 = (int32x4_t)vmulq_f32(v97, v108);
          v112 = (int32x4_t)vmulq_f32(v97, v109);
          v113 = vdupq_laneq_s32(v111, 2);
          v114 = (float32x4_t)vzip1q_s32(vzip1q_s32(v110, v112), v111);
          v115 = (float32x4_t)vtrn2q_s32(v110, v111);
          v115.i32[2] = v112.i32[1];
          v100 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v110, v112), v113), vaddq_f32(v114, v115)), (float32x4_t)vdupq_lane_s32(v99, 0));
        }
        v116.i64[0] = 0xBF000000BF000000;
        v116.i64[1] = 0xBF000000BF000000;
        v117.i64[0] = 0x3F0000003F000000;
        v117.i64[1] = 0x3F0000003F000000;
        v25 = (float32x4_t)vcgeq_f32(v117, vabsq_f32(vaddq_f32(v100, v116)));
        v25.i32[3] = v25.i32[2];
        v25.i32[0] = vminvq_u32((uint32x4_t)v25);
        if (v25.i32[0] < 0)
        {
          sub_1B17A8AA0(a3, v18, 0, 1, 2, v95, a10, (__n128)a11);
          if ((*(_WORD *)(a3 + 8) & 0x100) != 0)
            return v130;
        }
      }
LABEL_71:
      v130 = ++v18 < v128;
      v19 += v15;
      if (!--v11)
        return v130;
    }
  }
  return 0;
}

uint64_t sub_1B17A9C68(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  int v10;
  BOOL v11;
  BOOL v12;
  char v13;
  __int128 v14;
  __int128 v16;
  _QWORD *v17;
  __int16 v18;
  _OWORD v19[2];
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  BOOL v29;
  char v30;
  BOOL v31;
  _QWORD v32[3];
  char v33;
  _QWORD v34[2];

  v8 = *(_QWORD *)(a3 + 200);
  v9 = *(_BYTE *)(a3 + 212);
  v10 = *(unsigned __int8 *)(a3 + 213);
  v34[0] = a1;
  v34[1] = a2 - a1;
  v11 = *(_BYTE *)(a3 + 214) == 1;
  v12 = (*(_BYTE *)(a3 + 8) & 8) != 0 && *(_BYTE *)(a3 + 272) == 0;
  v13 = *(_BYTE *)(a3 + 273);
  v14 = *(_OWORD *)(a3 + 80);
  v21 = *(_OWORD *)(a3 + 64);
  v22 = v14;
  v23 = *(_OWORD *)(a3 + 96);
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2020000000;
  v33 = 0;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1B17A9DA0;
  v20[3] = &unk_1E63D51A0;
  v28 = v13;
  v29 = v11;
  v27 = v10;
  v30 = v9;
  v31 = v12;
  v25 = v8;
  v26 = a3;
  v24 = v32;
  v16 = *(_OWORD *)(a3 + 216);
  v17 = v34;
  v18 = 1;
  v19[0] = *(_OWORD *)(a3 + 242);
  *(_OWORD *)((char *)v19 + 14) = *(_OWORD *)(a3 + 256);
  sub_1B17A5F50((uint64_t)&v16, (uint64_t)v20, a3, a4, a5, a6, a7, a8);
  _Block_object_dispose(v32, 8);
  return 0;
}

void sub_1B17A9D88(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B17A9DA0(float32x4_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9, float32x4_t a10, int8x16_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v23;
  float32x4_t v24;
  int *v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  __int32 v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float v69;
  float32x4_t v70;
  int8x16_t v71;
  float v72;
  float32x4_t v74;
  float32x4_t v75;
  int32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;

  v15 = 0;
  v16 = (a4 - 2);
  v17 = a3 + 4;
  __asm { FMOV            V20.4S, #-1.0 }
  v23.i64[0] = 0xBF000000BF000000;
  v23.i64[1] = 0xBF000000BF000000;
  v24.i64[0] = 0x3F0000003F000000;
  v24.i64[1] = 0x3F0000003F000000;
  v93 = _Q20;
  while (v16 != v15)
  {
    v25 = (int *)(a1[6].i8[12] ? v17 : a3);
    v26 = (int *)(a1[6].i8[12] ? a3 : v17);
    v27 = *(_DWORD *)(a3 + 4 * (v15 + 2));
    v28 = *v26;
    v29 = *v25;
    if (a1[6].i8[13])
    {
      v30 = a1[5].i64[1];
      v31 = a1[6].i32[2];
      v32 = v30 + (v31 * v29);
      v33.i64[0] = *(_QWORD *)v32;
      v33.i64[1] = *(unsigned int *)(v32 + 8);
      v34 = v30 + (v31 * v28);
      v35.i64[0] = *(_QWORD *)v34;
      v35.i64[1] = *(unsigned int *)(v34 + 8);
      v36 = v30 + (v31 * v27);
      v37.i64[0] = *(_QWORD *)v36;
      v37.i64[1] = *(unsigned int *)(v36 + 8);
    }
    else
    {
      *(double *)v38.i64 = sub_1B198D4F8(a1[6].u8[14], (const float *)(a1[5].i64[1] + (a1[6].i32[2] * v29)), a3, a4, (uint64_t)a5, a6, a7, a8, (float32x4_t)a9, a10.f32[0], *(float *)a11.i32);
      v95 = v38;
      *(double *)v47.i64 = sub_1B198D4F8(a1[6].u8[14], (const float *)(a1[5].i64[1] + (a1[6].i32[2] * v28)), v39, v40, v41, v42, v43, v44, v38, v45, v46);
      v94 = v47;
      *(double *)v37.i64 = sub_1B198D4F8(a1[6].u8[14], (const float *)(a1[5].i64[1] + (a1[6].i32[2] * v27)), v48, v49, v50, v51, v52, v53, v47, v54, v55);
      v35 = v94;
      v33 = v95;
      v24.i64[0] = 0x3F0000003F000000;
      v24.i64[1] = 0x3F0000003F000000;
      v23.i64[0] = 0xBF000000BF000000;
      v23.i64[1] = 0xBF000000BF000000;
      _Q20 = v93;
    }
    v56 = vsubq_f32(v35, v33);
    v57 = vsubq_f32(v37, v33);
    v58 = vnegq_f32(v56);
    v59 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL), v58), v57, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56, (int32x4_t)v56), (int8x16_t)v56, 0xCuLL));
    v60 = vmulq_f32(v59, v59);
    v60.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), v60)).u64[0];
    v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 0);
    v61.i32[3] = 0;
    v62 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL);
    v63 = vrsqrteq_f32(v61);
    v64 = vmulq_f32(v63, vrsqrtsq_f32(v61, vmulq_f32(v63, v63)));
    v65 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v60.f32[0] != 0.0)), 0x1FuLL));
    v65.i32[3] = 0;
    a11 = vbslq_s8((int8x16_t)vcltzq_s32(v65), (int8x16_t)vmulq_f32(v62, vmulq_f32(v64, vrsqrtsq_f32(v61, vmulq_f32(v64, v64)))), (int8x16_t)v62);
    v66 = vmulq_f32(v33, (float32x4_t)a11);
    *(float *)&a11.i32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0];
    v67 = a1[3];
    v68 = (int8x16_t)vmulq_f32((float32x4_t)a11, v67);
    v69 = vaddv_f32(vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
    if (a1[6].i8[15])
    {
      if (v69 >= 0.0)
        return;
    }
    else if (v69 == 0.0)
    {
      return;
    }
    v70 = a1[2];
    v71 = (int8x16_t)vmulq_f32((float32x4_t)a11, v70);
    v72 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL))) / v69;
    if (v72 < 0.0 || v72 > a1[4].f32[3])
      break;
    a10 = vmlaq_n_f32(v70, v67, v72);
    v74 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v57, (int8x16_t)v57, 0xCuLL), (int8x16_t)v57, 8uLL), v58), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v56, (int8x16_t)v56, 0xCuLL), (int8x16_t)v56, 8uLL), v57);
    v75 = vmulq_f32(v74, v74);
    v76 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1))).u64[0];
    v77 = _Q20;
    if (fabsf(*(float *)v76.i32) >= 1.1755e-38)
    {
      v78 = vsubq_f32(v37, a10);
      v79 = vsubq_f32(v35, a10);
      v80 = vsubq_f32(v33, a10);
      v81 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v79, (int8x16_t)v79, 0xCuLL), (int8x16_t)v79, 8uLL);
      v82 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v78, (int8x16_t)v78, 0xCuLL), (int8x16_t)v78, 8uLL);
      v83 = vmlaq_f32(vmulq_f32(v82, vnegq_f32(v79)), v81, v78);
      v84 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v80, (int8x16_t)v80, 0xCuLL), (int8x16_t)v80, 8uLL);
      v85 = vmlaq_f32(vmulq_f32(v84, vnegq_f32(v78)), v82, v80);
      v86 = vmlaq_f32(vmulq_f32(v81, vnegq_f32(v80)), v84, v79);
      v87 = (int32x4_t)vmulq_f32(v74, v83);
      v88 = (int32x4_t)vmulq_f32(v74, v85);
      v89 = (int32x4_t)vmulq_f32(v74, v86);
      v90 = vdupq_laneq_s32(v88, 2);
      v91 = (float32x4_t)vzip1q_s32(vzip1q_s32(v87, v89), v88);
      v92 = (float32x4_t)vtrn2q_s32(v87, v88);
      v92.i32[2] = v89.i32[1];
      v77 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v87, v89), v90), vaddq_f32(v91, v92)), (float32x4_t)vdupq_lane_s32(v76, 0));
    }
    a9 = vcgeq_f32(v24, vabsq_f32(vaddq_f32(v77, v23)));
    a9.i32[3] = a9.i32[2];
    a9.i32[0] = vminvq_u32((uint32x4_t)a9);
    v17 += 4;
    ++v15;
    if (a9.i32[0] < 0)
    {
      sub_1B17A8AA0(a1[6].i64[0], a2, 0, v15, v15 + 1, v72, a10, (__n128)a11);
      if ((*(_WORD *)(a1[6].i64[0] + 8) & 0x100) != 0)
      {
        *a5 = 1;
        *(_BYTE *)(*(_QWORD *)(a1[5].i64[0] + 8) + 24) = 1;
      }
      return;
    }
  }
}

BOOL sub_1B17AA10C(unsigned int a1, unsigned int a2, uint64_t a3, double a4, float32x4_t a5, int8x16_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float32x4_t v26;
  BOOL v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x4_t v57;
  uint64_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  float v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  float v91;
  float32x4_t v93;
  float32x4_t v94;
  int32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v115;
  int v116;
  int v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  unint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _BOOL4 v126;
  float32x4_t v127;
  uint64_t v128;
  uint64_t v129;

  v126 = (*(_WORD *)(a3 + 8) & 8) != 0 && *(_BYTE *)(a3 + 272) == 0;
  v11 = a2 - a1;
  if (a2 > a1)
  {
    v117 = *(unsigned __int8 *)(a3 + 212);
    v12 = *(_QWORD *)(a3 + 216);
    v13 = *(unsigned __int8 *)(a3 + 242);
    v129 = *(unsigned __int8 *)(a3 + 243);
    v14 = *(_QWORD *)(a3 + 200);
    v15 = *(unsigned __int8 *)(a3 + 213);
    v16 = *(_QWORD *)(a3 + 264);
    v128 = *(_QWORD *)(a3 + 256);
    v125 = *(unsigned __int8 *)(a3 + 214);
    v17 = *(unsigned __int8 *)(a3 + 273);
    v18 = a1;
    v19 = a2;
    v20 = v16 * a1;
    __asm { FMOV            V0.4S, #-1.0 }
    v115 = _Q0;
    v118 = *(float32x4_t *)(a3 + 64);
    v26 = *(float32x4_t *)(a3 + 80);
    v127 = v26;
    v27 = 1;
    v28 = *(float *)(a3 + 108);
    v123 = v16;
    v124 = a3;
    v122 = v17;
    v121 = a2;
    v116 = v13;
    while (1)
    {
      if (v17)
      {
        if (v13)
        {
          if ((v18 & 1) != 0)
            v29 = 1;
          else
            v29 = 2;
          if ((v18 & 1) != 0)
            v30 = 2;
          else
            v30 = 1;
          v31 = v13 == 1 || v13 != 5;
          v32 = 1;
          if (v13 == 1)
            v33 = v29;
          else
            v33 = 2;
          if (v13 == 1)
            v34 = v30;
          else
            v34 = 1;
          if (!v12)
          {
LABEL_46:
            v36 = v18 * v31;
            v46 = v32 * v18;
            v38 = v34 + v46;
            v45 = v46 + v33;
            goto LABEL_56;
          }
        }
        else
        {
          v31 = 3;
          v32 = 3;
          v33 = 2;
          v34 = 1;
          if (!v12)
            goto LABEL_46;
        }
        if ((_DWORD)v129 == 4)
        {
          v47 = v128;
          v36 = *(_DWORD *)(v12 + 4 * (v128 + v20 * v31));
          v48 = v32 * v18;
          v38 = *(_DWORD *)(v12 + 4 * (v128 + (v34 + v48) * v16));
          v49 = v48 + v33;
LABEL_53:
          v45 = *(_DWORD *)(v12 + 4 * (v47 + v49 * v16));
          goto LABEL_56;
        }
        if ((_DWORD)v129 != 2)
        {
          if ((_DWORD)v129 == 1)
          {
            v35 = v128;
            v36 = *(unsigned __int8 *)(v12 + v128 + v20 * v31);
            v37 = v32 * v18;
            v38 = *(unsigned __int8 *)(v12 + v128 + (v34 + v37) * v16);
            v39 = v37 + v33;
LABEL_44:
            v45 = *(unsigned __int8 *)(v12 + v35 + v39 * v16);
            goto LABEL_56;
          }
LABEL_47:
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), a3, 2, a8, a9, a10, a11, v129);
          v19 = v121;
          v17 = v122;
          v16 = v123;
          a3 = v124;
          v45 = 0;
          v36 = 0;
          v38 = 0;
          goto LABEL_56;
        }
        v50 = v128;
        v36 = *(unsigned __int16 *)(v12 + 2 * (v128 + v20 * v31));
        v51 = v32 * v18;
        v38 = *(unsigned __int16 *)(v12 + 2 * (v128 + (v34 + v51) * v16));
        v52 = v51 + v33;
      }
      else
      {
        if (v13)
        {
          if ((v18 & 1) != 0)
            v40 = 1;
          else
            v40 = 2;
          if ((v18 & 1) != 0)
            v41 = 2;
          else
            v41 = 1;
          v42 = v13 != 5;
          if (v13 == 1)
            v42 = 1;
          v43 = 1;
          if (v13 != 1)
          {
            v40 = 2;
            v41 = 1;
          }
          if (!v12)
          {
LABEL_51:
            v38 = v18 * v42;
            v53 = v43 * v18;
            v36 = v41 + v53;
            v45 = v53 + v40;
            goto LABEL_56;
          }
        }
        else
        {
          v42 = 3;
          v43 = 3;
          v40 = 2;
          v41 = 1;
          if (!v12)
            goto LABEL_51;
        }
        if ((_DWORD)v129 == 4)
        {
          v47 = v128;
          v38 = *(_DWORD *)(v12 + 4 * (v128 + v20 * v42));
          v54 = v43 * v18;
          v36 = *(_DWORD *)(v12 + 4 * (v128 + (v41 + v54) * v16));
          v49 = v54 + v40;
          goto LABEL_53;
        }
        if ((_DWORD)v129 != 2)
        {
          if ((_DWORD)v129 == 1)
          {
            v35 = v128;
            v38 = *(unsigned __int8 *)(v12 + v128 + v20 * v42);
            v44 = v43 * v18;
            v36 = *(unsigned __int8 *)(v12 + v128 + (v41 + v44) * v16);
            v39 = v44 + v40;
            goto LABEL_44;
          }
          goto LABEL_47;
        }
        v50 = v128;
        v38 = *(unsigned __int16 *)(v12 + 2 * (v128 + v20 * v42));
        v55 = v43 * v18;
        v36 = *(unsigned __int16 *)(v12 + 2 * (v128 + (v41 + v55) * v16));
        v52 = v55 + v40;
      }
      v45 = *(unsigned __int16 *)(v12 + 2 * (v50 + v52 * v16));
LABEL_56:
      if (((*(_BYTE *)(*(_QWORD *)(a3 + 304) + v36) & *(_BYTE *)(*(_QWORD *)(a3 + 304) + v38)) & *(_BYTE *)(*(_QWORD *)(a3 + 304) + v45)) == 0)
      {
        v56 = v14 + v38 * v15;
        if (v125 == 1)
        {
          v57.i64[0] = *(_QWORD *)v56;
          v57.i64[1] = *(unsigned int *)(v56 + 8);
          v58 = v14 + v36 * v15;
          v59.i64[0] = *(_QWORD *)v58;
          v59.i64[1] = *(unsigned int *)(v58 + 8);
          v60 = v14 + v45 * v15;
          v26.i64[0] = *(_QWORD *)v60;
          v26.i64[1] = *(unsigned int *)(v60 + 8);
        }
        else
        {
          *(double *)v61.i64 = sub_1B198D4F8(v117, (const float *)v56, a3, 2, a8, a9, a10, a11, v26, a5.f32[0], *(float *)a6.i32);
          v120 = v61;
          *(double *)v70.i64 = sub_1B198D4F8(v117, (const float *)(v14 + v36 * v15), v62, v63, v64, v65, v66, v67, v61, v68, v69);
          v119 = v70;
          v13 = v116;
          *(double *)v26.i64 = sub_1B198D4F8(v117, (const float *)(v14 + v45 * v15), v71, v72, v73, v74, v75, v76, v70, v77, v78);
          v59 = v119;
          v57 = v120;
          v19 = v121;
          v17 = v122;
          v16 = v123;
          a3 = v124;
        }
        v79 = vsubq_f32(v59, v57);
        v80 = vsubq_f32(v26, v57);
        v81 = vnegq_f32(v79);
        v82 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL), v81), v80, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL));
        v83 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL);
        v84 = vmulq_f32(v82, v82);
        v84.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2), v84)).u64[0];
        v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 0);
        v85.i32[3] = 0;
        v86 = vrsqrteq_f32(v85);
        v87 = vmulq_f32(v86, vrsqrtsq_f32(v85, vmulq_f32(v86, v86)));
        v88 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v84.f32[0] != 0.0)), 0x1FuLL));
        v88.i32[3] = 0;
        a6 = vbslq_s8((int8x16_t)vcltzq_s32(v88), (int8x16_t)vmulq_f32(vmulq_f32(v87, vrsqrtsq_f32(v85, vmulq_f32(v87, v87))), v83), (int8x16_t)v83);
        v89 = vmulq_f32(v57, (float32x4_t)a6);
        *(float *)&a6.i32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1))).f32[0];
        a5 = vmulq_f32(v127, (float32x4_t)a6);
        a5.f32[0] = vaddv_f32(vadd_f32(*(float32x2_t *)a5.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a5, (int8x16_t)a5, 8uLL)));
        if (v126)
        {
          if (a5.f32[0] >= 0.0)
            goto LABEL_57;
        }
        else if (a5.f32[0] == 0.0)
        {
          goto LABEL_57;
        }
        v90 = (int8x16_t)vmulq_f32(v118, (float32x4_t)a6);
        v91 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)))
            / a5.f32[0];
        if (v91 >= 0.0 && v91 <= v28)
        {
          a5 = vmlaq_n_f32(v118, v127, v91);
          v93 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v80, (int8x16_t)v80, 0xCuLL), (int8x16_t)v80, 8uLL), v81), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v79, (int8x16_t)v79, 0xCuLL), (int8x16_t)v79, 8uLL), v80);
          v94 = vmulq_f32(v93, v93);
          v95 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2), vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 1))).u64[0];
          v96 = v115;
          if (fabsf(*(float *)v95.i32) >= 1.1755e-38)
          {
            v97 = vsubq_f32(v26, a5);
            v98 = vsubq_f32(v59, a5);
            v99 = vsubq_f32(v57, a5);
            v100 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v98, (int8x16_t)v98, 0xCuLL), (int8x16_t)v98, 8uLL);
            v101 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v97, (int8x16_t)v97, 0xCuLL), (int8x16_t)v97, 8uLL);
            v102 = vmlaq_f32(vmulq_f32(v101, vnegq_f32(v98)), v100, v97);
            v103 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL), (int8x16_t)v99, 8uLL);
            v104 = vmlaq_f32(vmulq_f32(v103, vnegq_f32(v97)), v101, v99);
            v105 = vmlaq_f32(vmulq_f32(v100, vnegq_f32(v99)), v103, v98);
            v106 = (int32x4_t)vmulq_f32(v93, v102);
            v107 = (int32x4_t)vmulq_f32(v93, v104);
            v108 = (int32x4_t)vmulq_f32(v93, v105);
            v109 = vdupq_laneq_s32(v107, 2);
            v110 = (float32x4_t)vzip1q_s32(vzip1q_s32(v106, v108), v107);
            v111 = (float32x4_t)vtrn2q_s32(v106, v107);
            v111.i32[2] = v108.i32[1];
            v96 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v106, v108), v109), vaddq_f32(v110, v111)), (float32x4_t)vdupq_lane_s32(v95, 0));
          }
          v112.i64[0] = 0xBF000000BF000000;
          v112.i64[1] = 0xBF000000BF000000;
          v113.i64[0] = 0x3F0000003F000000;
          v113.i64[1] = 0x3F0000003F000000;
          v26 = (float32x4_t)vcgeq_f32(v113, vabsq_f32(vaddq_f32(v96, v112)));
          v26.i32[3] = v26.i32[2];
          v26.i32[0] = vminvq_u32((uint32x4_t)v26);
          if (v26.i32[0] < 0)
          {
            sub_1B17A8AA0(a3, v18, 0, 1, 2, v91, a5, (__n128)a6);
            v19 = v121;
            v17 = v122;
            v16 = v123;
            a3 = v124;
            if ((*(_WORD *)(v124 + 8) & 0x100) != 0)
              return v27;
          }
        }
      }
LABEL_57:
      v27 = ++v18 < v19;
      v20 += v16;
      if (!--v11)
        return v27;
    }
  }
  return 0;
}

uint64_t sub_1B17AA740(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  int v10;
  BOOL v11;
  BOOL v12;
  char v13;
  __int128 v14;
  __int128 v16;
  _QWORD *v17;
  __int16 v18;
  _OWORD v19[2];
  _QWORD v20[4];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  BOOL v29;
  char v30;
  BOOL v31;
  _QWORD v32[3];
  char v33;
  _QWORD v34[2];

  v8 = *(_QWORD *)(a3 + 200);
  v9 = *(_BYTE *)(a3 + 212);
  v10 = *(unsigned __int8 *)(a3 + 213);
  v34[0] = a1;
  v34[1] = a2 - a1;
  v11 = *(_BYTE *)(a3 + 214) == 1;
  v12 = (*(_BYTE *)(a3 + 8) & 8) != 0 && *(_BYTE *)(a3 + 272) == 0;
  v13 = *(_BYTE *)(a3 + 273);
  v14 = *(_OWORD *)(a3 + 80);
  v21 = *(_OWORD *)(a3 + 64);
  v22 = v14;
  v23 = *(_OWORD *)(a3 + 96);
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2020000000;
  v33 = 0;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1B17AA878;
  v20[3] = &unk_1E63D51A0;
  v28 = v13;
  v29 = v11;
  v25 = a3;
  v26 = v8;
  v27 = v10;
  v30 = v9;
  v31 = v12;
  v24 = v32;
  v16 = *(_OWORD *)(a3 + 216);
  v17 = v34;
  v18 = 1;
  v19[0] = *(_OWORD *)(a3 + 242);
  *(_OWORD *)((char *)v19 + 14) = *(_OWORD *)(a3 + 256);
  sub_1B17A5F50((uint64_t)&v16, (uint64_t)v20, a3, a4, a5, a6, a7, a8);
  _Block_object_dispose(v32, 8);
  return 0;
}

void sub_1B17AA860(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1B17AA878(float32x4_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, _BYTE *a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9, float32x4_t a10, int8x16_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v23;
  float32x4_t v24;
  unsigned int *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int32 v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float v69;
  float32x4_t v70;
  int8x16_t v71;
  float v72;
  float32x4_t v74;
  float32x4_t v75;
  int32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;

  v15 = 0;
  v16 = (a4 - 2);
  v17 = a3 + 4;
  __asm { FMOV            V20.4S, #-1.0 }
  v23.i64[0] = 0xBF000000BF000000;
  v23.i64[1] = 0xBF000000BF000000;
  v24.i64[0] = 0x3F0000003F000000;
  v24.i64[1] = 0x3F0000003F000000;
  v93 = _Q20;
  while (v16 != v15)
  {
    v25 = (unsigned int *)(a1[6].i8[12] ? v17 : a3);
    v26 = (unsigned int *)(a1[6].i8[12] ? a3 : v17);
    v27 = *(unsigned int *)(a3 + 4 * (v15 + 2));
    v28 = *v26;
    v29 = *v25;
    if (((*(_BYTE *)(*(_QWORD *)(a1[5].i64[1] + 304) + v28) & *(_BYTE *)(*(_QWORD *)(a1[5].i64[1] + 304)
                                                                                         + v29)) & *(_BYTE *)(*(_QWORD *)(a1[5].i64[1] + 304) + v27)) != 0)
      break;
    if (a1[6].i8[13])
    {
      v30 = a1[6].i64[0];
      v31 = a1[6].i32[2];
      v32 = v30 + (v31 * v29);
      v33.i64[0] = *(_QWORD *)v32;
      v33.i64[1] = *(unsigned int *)(v32 + 8);
      v34 = v30 + (v31 * v28);
      v35.i64[0] = *(_QWORD *)v34;
      v35.i64[1] = *(unsigned int *)(v34 + 8);
      v36 = v30 + (v31 * v27);
      v37.i64[0] = *(_QWORD *)v36;
      v37.i64[1] = *(unsigned int *)(v36 + 8);
    }
    else
    {
      *(double *)v38.i64 = sub_1B198D4F8(a1[6].u8[14], (const float *)(a1[6].i64[0] + (a1[6].i32[2] * v29)), a3, a4, (uint64_t)a5, a6, a7, a8, (float32x4_t)a9, a10.f32[0], *(float *)a11.i32);
      v95 = v38;
      *(double *)v47.i64 = sub_1B198D4F8(a1[6].u8[14], (const float *)(a1[6].i64[0] + (a1[6].i32[2] * v28)), v39, v40, v41, v42, v43, v44, v38, v45, v46);
      v94 = v47;
      *(double *)v37.i64 = sub_1B198D4F8(a1[6].u8[14], (const float *)(a1[6].i64[0] + (a1[6].i32[2] * v27)), v48, v49, v50, v51, v52, v53, v47, v54, v55);
      v35 = v94;
      v33 = v95;
      v24.i64[0] = 0x3F0000003F000000;
      v24.i64[1] = 0x3F0000003F000000;
      v23.i64[0] = 0xBF000000BF000000;
      v23.i64[1] = 0xBF000000BF000000;
      _Q20 = v93;
    }
    v56 = vsubq_f32(v35, v33);
    v57 = vsubq_f32(v37, v33);
    v58 = vnegq_f32(v56);
    v59 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL), v58), v57, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56, (int32x4_t)v56), (int8x16_t)v56, 0xCuLL));
    v60 = vmulq_f32(v59, v59);
    v60.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), v60)).u64[0];
    v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 0);
    v61.i32[3] = 0;
    v62 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL);
    v63 = vrsqrteq_f32(v61);
    v64 = vmulq_f32(v63, vrsqrtsq_f32(v61, vmulq_f32(v63, v63)));
    v65 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v60.f32[0] != 0.0)), 0x1FuLL));
    v65.i32[3] = 0;
    a11 = vbslq_s8((int8x16_t)vcltzq_s32(v65), (int8x16_t)vmulq_f32(v62, vmulq_f32(v64, vrsqrtsq_f32(v61, vmulq_f32(v64, v64)))), (int8x16_t)v62);
    v66 = vmulq_f32(v33, (float32x4_t)a11);
    *(float *)&a11.i32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0];
    v67 = a1[3];
    v68 = (int8x16_t)vmulq_f32((float32x4_t)a11, v67);
    v69 = vaddv_f32(vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
    if (a1[6].i8[15])
    {
      if (v69 >= 0.0)
        return;
    }
    else if (v69 == 0.0)
    {
      return;
    }
    v70 = a1[2];
    v71 = (int8x16_t)vmulq_f32((float32x4_t)a11, v70);
    v72 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL))) / v69;
    if (v72 < 0.0 || v72 > a1[4].f32[3])
      break;
    a10 = vmlaq_n_f32(v70, v67, v72);
    v74 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v57, (int8x16_t)v57, 0xCuLL), (int8x16_t)v57, 8uLL), v58), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v56, (int8x16_t)v56, 0xCuLL), (int8x16_t)v56, 8uLL), v57);
    v75 = vmulq_f32(v74, v74);
    v76 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1))).u64[0];
    v77 = _Q20;
    if (fabsf(*(float *)v76.i32) >= 1.1755e-38)
    {
      v78 = vsubq_f32(v37, a10);
      v79 = vsubq_f32(v35, a10);
      v80 = vsubq_f32(v33, a10);
      v81 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v79, (int8x16_t)v79, 0xCuLL), (int8x16_t)v79, 8uLL);
      v82 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v78, (int8x16_t)v78, 0xCuLL), (int8x16_t)v78, 8uLL);
      v83 = vmlaq_f32(vmulq_f32(v82, vnegq_f32(v79)), v81, v78);
      v84 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v80, (int8x16_t)v80, 0xCuLL), (int8x16_t)v80, 8uLL);
      v85 = vmlaq_f32(vmulq_f32(v84, vnegq_f32(v78)), v82, v80);
      v86 = vmlaq_f32(vmulq_f32(v81, vnegq_f32(v80)), v84, v79);
      v87 = (int32x4_t)vmulq_f32(v74, v83);
      v88 = (int32x4_t)vmulq_f32(v74, v85);
      v89 = (int32x4_t)vmulq_f32(v74, v86);
      v90 = vdupq_laneq_s32(v88, 2);
      v91 = (float32x4_t)vzip1q_s32(vzip1q_s32(v87, v89), v88);
      v92 = (float32x4_t)vtrn2q_s32(v87, v88);
      v92.i32[2] = v89.i32[1];
      v77 = vdivq_f32(vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v87, v89), v90), vaddq_f32(v91, v92)), (float32x4_t)vdupq_lane_s32(v76, 0));
    }
    a9 = vcgeq_f32(v24, vabsq_f32(vaddq_f32(v77, v23)));
    a9.i32[3] = a9.i32[2];
    a9.i32[0] = vminvq_u32((uint32x4_t)a9);
    v17 += 4;
    ++v15;
    if (a9.i32[0] < 0)
    {
      sub_1B17A8AA0(a1[5].i64[1], a2, 0, v15, v15 + 1, v72, a10, (__n128)a11);
      if ((*(_WORD *)(a1[5].i64[1] + 8) & 0x100) != 0)
      {
        *a5 = 1;
        *(_BYTE *)(*(_QWORD *)(a1[5].i64[0] + 8) + 24) = 1;
      }
      return;
    }
  }
}

BOOL sub_1B17AAC04(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, int32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  float32x4_t v28;
  float32x4_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  __n128 v45;
  float32x4_t v46;
  int8x16_t v47;
  float v48;
  float32x4_t v49;
  int8x16_t v50;
  float v51;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x2_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v74;

  v17 = *(_QWORD *)(a3 + 200);
  v18 = *(unsigned __int8 *)(a3 + 213);
  v19 = *(_QWORD *)(a3 + 216);
  if (*(_QWORD *)(a3 + 256) || *(_QWORD *)(a3 + 264) != 1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Update %s to support mesh element channels"), a3, a4, a5, a6, a7, a8, (uint64_t)"ctx->_currentIndicesContent.indicesOffset == 0 && ctx->_currentIndicesContent.indicesStride == 1");
  v20 = a2 - a1;
  if (a2 <= a1)
  {
    return 0;
  }
  else
  {
    v21 = a1;
    v22 = 1;
    __asm { FMOV            V20.4S, #-1.0 }
    v28.i64[0] = 0xBF000000BF000000;
    v28.i64[1] = 0xBF000000BF000000;
    v29.i64[0] = 0x3F0000003F000000;
    v29.i64[1] = 0x3F0000003F000000;
    v30 = 3 * a1;
    v74 = _Q20;
    do
    {
      if (((*(_BYTE *)(*(_QWORD *)(a3 + 304) + *(unsigned __int16 *)(v19 + 2 * (v30 + 1))) & *(_BYTE *)(*(_QWORD *)(a3 + 304) + *(unsigned __int16 *)(v19 + 2 * v30))) & *(_BYTE *)(*(_QWORD *)(a3 + 304) + *(unsigned __int16 *)(v19 + 2 * (v30 + 2)))) == 0)
      {
        v31 = v17 + *(unsigned __int16 *)(v19 + 2 * v30) * (unint64_t)v18;
        a12.i64[0] = *(_QWORD *)v31;
        a12.i32[2] = *(_DWORD *)(v31 + 8);
        v32 = v17 + *(unsigned __int16 *)(v19 + 2 * (v30 + 1)) * (unint64_t)v18;
        a13.i64[0] = *(_QWORD *)v32;
        a13.i32[2] = *(_DWORD *)(v32 + 8);
        v33 = v17 + *(unsigned __int16 *)(v19 + 2 * (v30 + 2)) * (unint64_t)v18;
        a14.i64[0] = *(_QWORD *)v33;
        a14.i32[2] = *(_DWORD *)(v33 + 8);
        v34 = vsubq_f32(a13, (float32x4_t)a12);
        v35 = vsubq_f32(a14, (float32x4_t)a12);
        v36 = vnegq_f32(v34);
        v37 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL), v36), v35, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL));
        v38 = vmulq_f32(v37, v37);
        v38.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), v38)).u64[0];
        v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 0);
        v39.i32[3] = 0;
        v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL);
        v41 = vrsqrteq_f32(v39);
        v42 = vmulq_f32(v41, vrsqrtsq_f32(v39, vmulq_f32(v41, v41)));
        v43 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v38.f32[0] != 0.0)), 0x1FuLL));
        v43.i32[3] = 0;
        v45 = (__n128)vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vmulq_f32(vmulq_f32(v42, vrsqrtsq_f32(v39, vmulq_f32(v42, v42))), v40), (int8x16_t)v40);
        v44 = vmulq_f32((float32x4_t)a12, (float32x4_t)v45);
        v45.n128_f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0];
        v46 = *(float32x4_t *)(a3 + 80);
        v47 = (int8x16_t)vmulq_f32(v46, (float32x4_t)v45);
        v48 = vaddv_f32(vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)));
        if (v48 < 0.0)
        {
          v49 = *(float32x4_t *)(a3 + 64);
          v50 = (int8x16_t)vmulq_f32(v49, (float32x4_t)v45);
          v51 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)))
              / v48;
          if (v51 >= 0.0 && v51 <= *(float *)(a3 + 108))
          {
            v53 = vmlaq_n_f32(v49, v46, v51);
            v54 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v35, (int8x16_t)v35, 0xCuLL), (int8x16_t)v35, 8uLL), v36), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL), v35);
            v55 = vmulq_f32(v54, v54);
            v56 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).u64[0];
            v57 = _Q20;
            if (fabsf(*(float *)v56.i32) >= 1.1755e-38)
            {
              v58 = vsubq_f32(a14, v53);
              v59 = vsubq_f32(a13, v53);
              v60 = vsubq_f32((float32x4_t)a12, v53);
              v61 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v59, (int8x16_t)v59, 0xCuLL), (int8x16_t)v59, 8uLL);
              v62 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v58, (int8x16_t)v58, 0xCuLL), (int8x16_t)v58, 8uLL);
              v63 = vmlaq_f32(vmulq_f32(v62, vnegq_f32(v59)), v61, v58);
              v64 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v60, (int8x16_t)v60, 0xCuLL), (int8x16_t)v60, 8uLL);
              v65 = vmlaq_f32(vmulq_f32(v64, vnegq_f32(v58)), v62, v60);
              v66 = vmlaq_f32(vmulq_f32(v61, vnegq_f32(v60)), v64, v59);
              v67 = (int32x4_t)vmulq_f32(v54, v63);
              a14 = vmulq_f32(v54, v65);
              v68 = (int32x4_t)vmulq_f32(v54, v66);
              v69 = vzip2q_s32(v67, v68);
              v70 = (float32x4_t)vzip1q_s32(vzip1q_s32(v67, v68), (int32x4_t)a14);
              v71 = (float32x4_t)vtrn2q_s32(v67, (int32x4_t)a14);
              v71.i32[2] = v68.i32[1];
              v72 = vaddq_f32((float32x4_t)vzip1q_s32(v69, vdupq_laneq_s32((int32x4_t)a14, 2)), vaddq_f32(v70, v71));
              a13 = (float32x4_t)vdupq_lane_s32(v56, 0);
              v57 = vdivq_f32(v72, a13);
            }
            a12 = vcgeq_f32(v29, vabsq_f32(vaddq_f32(v57, v28)));
            a12.i32[3] = a12.i32[2];
            if ((vminvq_u32((uint32x4_t)a12) & 0x80000000) != 0)
            {
              sub_1B17A8AA0(a3, v21, 0, 1, 2, v51, v53, v45);
              v29.i64[0] = 0x3F0000003F000000;
              v29.i64[1] = 0x3F0000003F000000;
              v28.i64[0] = 0xBF000000BF000000;
              v28.i64[1] = 0xBF000000BF000000;
              _Q20 = v74;
              if ((*(_WORD *)(a3 + 8) & 0x100) != 0)
                break;
            }
          }
        }
      }
      v22 = ++v21 < (unint64_t)a2;
      v30 += 3;
      --v20;
    }
    while (v20);
  }
  return v22;
}

BOOL sub_1B17AAF34(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, int32x4_t a12, float32x4_t a13, float32x4_t a14)
{
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  float32x4_t v28;
  float32x4_t v29;
  unsigned int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  __n128 v48;
  float32x4_t v49;
  int8x16_t v50;
  float v51;
  float32x4_t v52;
  int8x16_t v53;
  float v54;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x2_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v77;

  v17 = *(_QWORD *)(a3 + 200);
  v18 = *(unsigned __int8 *)(a3 + 213);
  v19 = *(_QWORD *)(a3 + 216);
  if (*(_QWORD *)(a3 + 256) || *(_QWORD *)(a3 + 264) != 1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Update %s to support mesh element channels"), a3, a4, a5, a6, a7, a8, (uint64_t)"ctx->_currentIndicesContent.indicesOffset == 0 && ctx->_currentIndicesContent.indicesStride == 1");
  v20 = a2 - a1;
  if (a2 <= a1)
  {
    return 0;
  }
  else
  {
    v21 = a1;
    v22 = 1;
    __asm { FMOV            V20.4S, #-1.0 }
    v28.i64[0] = 0xBF000000BF000000;
    v28.i64[1] = 0xBF000000BF000000;
    v29.i64[0] = 0x3F0000003F000000;
    v29.i64[1] = 0x3F0000003F000000;
    v30 = 3 * a1;
    v77 = _Q20;
    do
    {
      if (v19)
      {
        v31 = *(_WORD *)(v19 + 2 * v30);
        v32 = *(_WORD *)(v19 + 2 * (v30 + 1));
        v33 = *(_WORD *)(v19 + 2 * (v30 + 2));
      }
      else
      {
        v32 = v30 + 1;
        v33 = v30 + 2;
        v31 = v30;
      }
      v34 = v17 + v18 * (unint64_t)v31;
      a12.i64[0] = *(_QWORD *)v34;
      a12.i32[2] = *(_DWORD *)(v34 + 8);
      v35 = v17 + v18 * (unint64_t)v32;
      a13.i64[0] = *(_QWORD *)v35;
      a13.i32[2] = *(_DWORD *)(v35 + 8);
      v36 = v17 + v18 * (unint64_t)v33;
      a14.i64[0] = *(_QWORD *)v36;
      a14.i32[2] = *(_DWORD *)(v36 + 8);
      v37 = vsubq_f32(a13, (float32x4_t)a12);
      v38 = vsubq_f32(a14, (float32x4_t)a12);
      v39 = vnegq_f32(v37);
      v40 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL), v39), v38, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL));
      v41 = vmulq_f32(v40, v40);
      v41.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), v41)).u64[0];
      v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 0);
      v42.i32[3] = 0;
      v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL);
      v44 = vrsqrteq_f32(v42);
      v45 = vmulq_f32(v44, vrsqrtsq_f32(v42, vmulq_f32(v44, v44)));
      v46 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v41.f32[0] != 0.0)), 0x1FuLL));
      v46.i32[3] = 0;
      v48 = (__n128)vbslq_s8((int8x16_t)vcltzq_s32(v46), (int8x16_t)vmulq_f32(vmulq_f32(v45, vrsqrtsq_f32(v42, vmulq_f32(v45, v45))), v43), (int8x16_t)v43);
      v47 = vmulq_f32((float32x4_t)a12, (float32x4_t)v48);
      v48.n128_f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1))).f32[0];
      v49 = *(float32x4_t *)(a3 + 80);
      v50 = (int8x16_t)vmulq_f32(v49, (float32x4_t)v48);
      v51 = vaddv_f32(vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)));
      if (v51 < 0.0)
      {
        v52 = *(float32x4_t *)(a3 + 64);
        v53 = (int8x16_t)vmulq_f32(v52, (float32x4_t)v48);
        v54 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)))
            / v51;
        if (v54 >= 0.0 && v54 <= *(float *)(a3 + 108))
        {
          v56 = vmlaq_n_f32(v52, v49, v54);
          v57 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v38, (int8x16_t)v38, 0xCuLL), (int8x16_t)v38, 8uLL), v39), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v37, (int8x16_t)v37, 0xCuLL), (int8x16_t)v37, 8uLL), v38);
          v58 = vmulq_f32(v57, v57);
          v59 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).u64[0];
          v60 = _Q20;
          if (fabsf(*(float *)v59.i32) >= 1.1755e-38)
          {
            v61 = vsubq_f32(a14, v56);
            v62 = vsubq_f32(a13, v56);
            v63 = vsubq_f32((float32x4_t)a12, v56);
            v64 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v62, (int8x16_t)v62, 0xCuLL), (int8x16_t)v62, 8uLL);
            v65 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v61, (int8x16_t)v61, 0xCuLL), (int8x16_t)v61, 8uLL);
            v66 = vmlaq_f32(vmulq_f32(v65, vnegq_f32(v62)), v64, v61);
            v67 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v63, (int8x16_t)v63, 0xCuLL), (int8x16_t)v63, 8uLL);
            v68 = vmlaq_f32(vmulq_f32(v67, vnegq_f32(v61)), v65, v63);
            v69 = vmlaq_f32(vmulq_f32(v64, vnegq_f32(v63)), v67, v62);
            v70 = (int32x4_t)vmulq_f32(v57, v66);
            a14 = vmulq_f32(v57, v68);
            v71 = (int32x4_t)vmulq_f32(v57, v69);
            v72 = vzip2q_s32(v70, v71);
            v73 = (float32x4_t)vzip1q_s32(vzip1q_s32(v70, v71), (int32x4_t)a14);
            v74 = (float32x4_t)vtrn2q_s32(v70, (int32x4_t)a14);
            v74.i32[2] = v71.i32[1];
            v75 = vaddq_f32((float32x4_t)vzip1q_s32(v72, vdupq_laneq_s32((int32x4_t)a14, 2)), vaddq_f32(v73, v74));
            a13 = (float32x4_t)vdupq_lane_s32(v59, 0);
            v60 = vdivq_f32(v75, a13);
          }
          a12 = vcgeq_f32(v29, vabsq_f32(vaddq_f32(v60, v28)));
          a12.i32[3] = a12.i32[2];
          if ((vminvq_u32((uint32x4_t)a12) & 0x80000000) != 0)
          {
            sub_1B17A8AA0(a3, v21, 0, 1, 2, v54, v56, v48);
            v29.i64[0] = 0x3F0000003F000000;
            v29.i64[1] = 0x3F0000003F000000;
            v28.i64[0] = 0xBF000000BF000000;
            v28.i64[1] = 0xBF000000BF000000;
            _Q20 = v77;
            if ((*(_WORD *)(a3 + 8) & 0x100) != 0)
              break;
          }
        }
      }
      v22 = ++v21 < (unint64_t)a2;
      v30 += 3;
      --v20;
    }
    while (v20);
  }
  return v22;
}

BOOL sub_1B17AB268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  const __CFArray *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  const __CFArray *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int16x8_t v70;
  const __CFArray *v71;
  CFIndex v72;
  BOOL v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const __CFArray *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  __int128 v99;
  int v100;
  unsigned __int32 v102;
  int32x4_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD v109[3];
  uint64_t v110;
  _QWORD v111[4];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  CFIndex v129;
  uint64_t v130;
  int v131;
  unsigned __int32 v132;
  BOOL v133;
  char v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  char v138;
  _QWORD v139[3];
  int v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _QWORD v148[4];
  __int128 v149;
  _QWORD v150[4];
  int32x4_t v151;
  char v152;
  char v153;
  uint64_t v154;

  v9 = a3;
  v154 = *MEMORY[0x1E0C80C00];
  v12 = sub_1B17A08A0(a2, a2, a3, a4, a5, a6, a7, a8);
  v20 = sub_1B17A0848(a2, v13, v14, v15, v16, v17, v18, v19);
  v27 = sub_1B1875E70(v20, 0, v21, v22, v23, v24, v25, v26);
  v108 = sub_1B1875D94(v20, 0, 0, v28, v29, v30, v31, v32);
  v106 = sub_1B17ED6C4((uint64_t)v27, v33, v34, v35, v36, v37, v38, v39);
  v107 = v40;
  if (!v106)
    return 0;
  v54 = sub_1B18F0EB0(a1, v40, v41, v42, v43, v44, v45, v46);
  if (!v54)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v48, v49, v50, v51, v52, v53, (uint64_t)"boneIndicesSrc");
  v55 = sub_1B17ED6C4(v54, v47, v48, v49, v50, v51, v52, v53);
  v104 = v56;
  v105 = v55;
  if (HIWORD(v56) != 1039)
    return 0;
  v63 = *(_OWORD *)(a4 + 80);
  v145 = *(_OWORD *)(a4 + 64);
  v146 = v63;
  v147 = *(_OWORD *)(a4 + 96);
  v64 = sub_1B1874BE0(v20, v56, v57, v58, v59, v60, v61, v62);
  if ((uint64_t)v64 >= 1)
  {
    v71 = v64;
    v72 = 0;
    *(int16x4_t *)v70.i8 = vdup_n_s16(v9);
    v73 = 1;
    v103 = vdupq_n_s32(0x7F7FFFFFu);
    v102 = vmovn_s16(v70).u32[0];
    do
    {
      *(_QWORD *)(a4 + 192) = v72;
      v74 = sub_1B1874C3C(v20, v72, 0, v65, v66, v67, v68, v69);
      v144 = 0;
      v142 = 0u;
      v143 = 0u;
      v141 = 0u;
      sub_1B17A4804((uint64_t)v74, v108, v75, v76, v77, v78, v79, v80, (uint64_t)&v141);
      if ((((uint64_t)v12 > 0) & (*(unsigned __int16 *)(a4 + 8) >> 3)) == 1)
      {
        v82 = sub_1B17A08FC(a2, v72 % (uint64_t)v12, v81, v65, v66, v67, v68, v69);
        v90 = sub_1B18780F0((uint64_t)v82, v83, v84, v85, v86, v87, v88, v89);
        v98 = sub_1B1878248((uint64_t)v82, v91, v92, v93, v94, v95, v96, v97);
      }
      else
      {
        v90 = 0;
        v98 = 0;
      }
      if ((BYTE10(v142) & 0xFA) == 0)
      {
        v126 = v142;
        v127 = v143;
        v125 = v141;
        v113 = v146;
        v114 = v147;
        v112 = v145;
        v131 = v98;
        v128 = v144;
        v139[0] = 0;
        v139[1] = v139;
        v139[2] = 0x2020000000;
        v140 = 0;
        v150[0] = 0;
        v150[1] = v150;
        v150[2] = 0x3020000000;
        v151 = v103;
        v148[0] = 0;
        v148[1] = v148;
        v148[2] = 0x3020000000;
        *(_QWORD *)&v99 = 0x80000000800000;
        *((_QWORD *)&v99 + 1) = 0x80000000800000;
        v149 = v99;
        v135 = 0;
        v136 = &v135;
        v137 = 0x2020000000;
        v138 = 0;
        v111[0] = MEMORY[0x1E0C809B0];
        v111[1] = 3221225472;
        v111[2] = sub_1B17AB644;
        v111[3] = &unk_1E63D51C8;
        v119 = v105;
        v120 = v104;
        v132 = v102;
        v133 = (v107 & 0xFF000000000000) == 0x1000000000000;
        v121 = v106;
        v122 = v107;
        v115 = v150;
        v116 = v148;
        v123 = &v153;
        v124 = &v152;
        v134 = v90;
        v129 = v72;
        v130 = a4;
        v117 = v139;
        v118 = &v135;
        v109[0] = v141;
        v109[1] = v142;
        v109[2] = v143;
        v110 = v144;
        sub_1B17A5C80((uint64_t *)v109, (uint64_t)v111, v81, v65, v66, v67, v68, v69);
        v100 = *((unsigned __int8 *)v136 + 24);
        _Block_object_dispose(&v135, 8);
        _Block_object_dispose(v148, 8);
        _Block_object_dispose(v150, 8);
        _Block_object_dispose(v139, 8);
        if (v100)
          break;
      }
      v73 = ++v72 < (uint64_t)v71;
    }
    while (v71 != (const __CFArray *)v72);
  }
  else
  {
    return 0;
  }
  return v73;
}

void sub_1B17AB600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a67;

  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&STACK[0x290], 8);
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1B17AB644(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9, uint8x8_t a10, uint8x8_t a11, uint8x8_t a12, _BYTE *a13)
{
  int v13;
  int v14;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int16x4_t v23;
  int16x4_t v24;
  int8x8_t v25;
  float32x4_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  uint64_t v54;
  unsigned int v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  __int128 v59;
  float32x4_t v60;
  __n128 v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float v66;
  float32x4_t v68;
  float32x4_t v69;

  v13 = a5;
  v14 = a4;
  v17 = *(_DWORD *)(a1 + 232);
  v18 = v17 == 1;
  if (v17 == 1)
    v19 = a7;
  else
    v19 = a6;
  if (v18)
    v20 = a6;
  else
    v20 = a7;
  v21 = *(_QWORD *)(a1 + 112);
  v22 = *(unsigned __int8 *)(a1 + 125);
  a9.i32[0] = *(_DWORD *)(v21 + (v19 * v22));
  v26 = (float32x4_t)vmovl_u8(a9);
  a10.i32[0] = *(_DWORD *)(v21 + (v20 * v22));
  a11.i32[0] = *(_DWORD *)(v21 + (v22 * a8));
  v23 = (int16x4_t)vmovl_u8(a11).u64[0];
  a12.i32[0] = *(_DWORD *)(a1 + 236);
  v24 = (int16x4_t)vmovl_u8(a12).u64[0];
  *(int8x8_t *)v26.f32 = vorr_s8((int8x8_t)vceq_s16(*(int16x4_t *)v26.f32, v24), (int8x8_t)vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a10), v24));
  v25 = (int8x8_t)vceq_s16(v23, v24);
  *(int8x8_t *)v26.f32 = vorr_s8(*(int8x8_t *)v26.f32, v25);
  *(int8x8_t *)v26.f32 = vuzp1_s8(*(int8x8_t *)v26.f32, *(int8x8_t *)v26.f32);
  v26.i8[0] = vmaxv_u8(*(uint8x8_t *)v26.f32);
  if (v26.i8[0] < 0)
  {
    v27 = a8;
    if (*(_BYTE *)(a1 + 240))
    {
      v28 = *(_QWORD *)(a1 + 128);
      v29 = *(unsigned __int8 *)(a1 + 141);
      v30 = v28 + (v19 * v29);
      v31.i64[0] = *(_QWORD *)v30;
      v31.i64[1] = *(unsigned int *)(v30 + 8);
      v32 = v28 + (v20 * v29);
      v33.i64[0] = *(_QWORD *)v32;
      v33.i64[1] = *(unsigned int *)(v32 + 8);
      v34 = v28 + (v29 * a8);
      v35.i64[0] = *(_QWORD *)v34;
      v35.i64[1] = *(unsigned int *)(v34 + 8);
    }
    else
    {
      *(double *)v36.i64 = sub_1B198D4F8(*(unsigned __int8 *)(a1 + 140), (const float *)(*(_QWORD *)(a1 + 128) + v19 * *(unsigned __int8 *)(a1 + 141)), a3, a4, a5, a6, a7, a8, v26, *(float *)v25.i32, *(float *)v23.i32);
      v69 = v36;
      *(double *)v45.i64 = sub_1B198D4F8(*(unsigned __int8 *)(a1 + 140), (const float *)(*(_QWORD *)(a1 + 128) + v20 * *(unsigned __int8 *)(a1 + 141)), v37, v38, v39, v40, v41, v42, v36, v43, v44);
      v68 = v45;
      *(double *)v35.i64 = sub_1B198D4F8(*(unsigned __int8 *)(a1 + 140), (const float *)(*(_QWORD *)(a1 + 128) + *(unsigned __int8 *)(a1 + 141) * v27), v46, v47, v48, v49, v50, v51, v45, v52, v53);
      v33 = v68;
      v31 = v69;
    }
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 32) = vminnmq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)+ 32), v31);
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 32) = vminnmq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)+ 32), v33);
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 32) = vminnmq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)+ 32), v35);
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 32) = vmaxnmq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8)+ 32), v31);
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 32) = vmaxnmq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8)+ 32), v33);
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 32) = vmaxnmq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8)+ 32), v35);
    *(float32x4_t *)(*(_QWORD *)(a1 + 144)
                   + 16 * (3 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24))) = v31;
    *(float32x4_t *)(*(_QWORD *)(a1 + 144)
                   + 16 * (3 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) + 1)) = v33;
    *(float32x4_t *)(*(_QWORD *)(a1 + 144)
                   + 16 * (3 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24) + 2)) = v35;
    *(_DWORD *)(*(_QWORD *)(a1 + 152)
              + 4 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 24))++) = a2;
  }
  v54 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8);
  v55 = *(_DWORD *)(v54 + 24);
  if (v55 > 0x1F || v14 - 3 == v13 && *(_DWORD *)(a1 + 168) - 1 == a2)
  {
    *(_DWORD *)(v54 + 24) = 0;
    v56 = *(float32x4_t **)(*(_QWORD *)(a1 + 80) + 8);
    v57 = v56[2];
    v58 = *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 32);
    v56[2] = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    *(_QWORD *)&v59 = 0x80000000800000;
    *((_QWORD *)&v59 + 1) = 0x80000000800000;
    *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 32) = v59;
    v60 = *(float32x4_t *)(a1 + 32);
    v61 = *(__n128 *)(a1 + 64);
    v62 = vmulq_f32(vsubq_f32(v57, v60), (float32x4_t)v61);
    v63 = vmulq_f32(vsubq_f32(v58, v60), (float32x4_t)v61);
    v62.i32[3] = 0;
    v63.i32[3] = 0;
    v64 = vminnmq_f32(v62, v63);
    v65 = vmaxnmq_f32(v62, v63);
    v66 = fmaxf(fmaxf(v64.f32[0], v64.f32[2]), v64.f32[1]);
    if (fminf(fminf(v65.f32[0], v65.f32[2]), v65.f32[1]) >= v66
      && v66 < COERCE_FLOAT(HIDWORD(*(_OWORD *)(a1 + 64)))
      && sub_1B17A8C80(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), v55, v60, *(float32x4_t *)(a1 + 48), v61, a4, *(_BYTE *)(a1 + 241), *(_QWORD *)(a1 + 224)))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 24) = 1;
      *a13 = 1;
    }
  }
}

uint64_t sub_1B17AB970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFArray *v22;
  const __CFArray *v23;
  CFIndex Count;
  CFIndex v25;
  char v26;
  CFIndex v27;
  float32x4_t *v28;
  const void *ValueAtIndex;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float v65;
  float v66;
  uint64_t v68;
  simd_float4 v69;
  int8x16_t v70;
  float v71;
  float v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const void *v96;
  CFTypeRef v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x4_t v102;
  float32x4_t v107;
  __int16 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  simd_float4x4 v122;
  float32x4_t v123;
  _OWORD v124[5];
  simd_float4x4 v125;
  simd_float4x4 v126;

  v10 = sub_1B18E56FC(a1, *(_QWORD *)(a2 + 112), a3, a4, a5, a6, a7, a8);
  v11 = sub_1B17A0A4C(a1);
  v19 = sub_1B1868FA0(*(_QWORD *)(a2 + 112), v12, v13, v14, v15, v16, v17, v18);
  v20 = v19;
  if ((*(_WORD *)(a2 + 8) & 0x80) != 0 || v19)
  {
    v21 = sub_1B18F0604(v11);
    v22 = (const __CFArray *)sub_1B181F5A8(a1);
    if (v22)
    {
      v23 = v22;
      Count = CFArrayGetCount(v22);
      if (Count >= 1)
      {
        v25 = Count;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = (float32x4_t *)(v10 + 32 * v27);
          if ((vminvq_u32((uint32x4_t)vcgezq_f32(v28[1])) & 0x80000000) != 0)
          {
            v116 = *v28;
            v118 = v28[1];
            ValueAtIndex = CFArrayGetValueAtIndex(v23, v27);
            *(_QWORD *)(a2 + 120) = ValueAtIndex;
            v37 = sub_1B1869AC8((uint64_t)ValueAtIndex, v30, v31, v32, v33, v34, v35, v36);
            v38 = *(float32x4_t *)v37;
            v39 = *(float32x4_t *)(v37 + 16);
            v40 = *(float32x4_t *)(v37 + 32);
            v41 = *(float32x4_t *)(v37 + 48);
            v42 = vmulq_f32(v38, v38);
            v43 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1)));
            v43.f32[0] = sqrtf(v43.f32[0]);
            v44 = vmulq_f32(v39, v39);
            v44.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).u64[0];
            v44.f32[0] = sqrtf(v44.f32[0]);
            v45 = vmulq_f32(v40, v40);
            v45.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).u64[0];
            v45.f32[0] = sqrtf(v45.f32[0]);
            v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 0);
            v43.i32[1] = v44.i32[0];
            v43.i32[2] = v45.i32[0];
            v47 = (int32x4_t)vdivq_f32(*(float32x4_t *)v37, v46);
            v48 = (int32x4_t)vdivq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0));
            v49 = (int32x4_t)vdivq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0));
            v50 = vmulq_f32(v118, v43);
            v51 = *(float32x4_t *)(a2 + 16);
            v52 = *(float32x4_t *)(a2 + 32);
            v53 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v41, v40, v116, 2), v39, *(float32x2_t *)v116.f32, 1), *(float32x4_t *)v37, v116.f32[0]), v51);
            v54 = (float32x4_t)vzip1q_s32(vzip1q_s32(v47, v49), v48);
            v55 = (float32x4_t)vtrn2q_s32(v47, v48);
            v55.i32[2] = v49.i32[1];
            v56 = (float32x4_t)vzip1q_s32(vzip2q_s32(v47, v49), vdupq_laneq_s32(v48, 2));
            v57 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v55, *(float32x2_t *)v53.f32, 1), v54, v53.f32[0]), v56, v53, 2);
            v58 = vaddq_f32(v50, v57);
            v59 = vsubq_f32(v57, v50);
            v50.i32[3] = v118.i32[3];
            v122.columns[1] = (simd_float4)v47;
            v122.columns[2] = (simd_float4)v48;
            v60 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v55, *(float32x2_t *)v52.f32, 1), v54, v52.f32[0]), v56, v52, 2);
            v61 = vdivq_f32(v58, v60);
            v62 = vdivq_f32(v59, v60);
            v61.i32[3] = 0;
            v62.i32[3] = 0;
            v122.columns[3] = (simd_float4)v49;
            v123 = v50;
            v63 = (int8x16_t)vminnmq_f32(v61, v62);
            v64 = vmaxnmq_f32(v61, v62);
            v65 = fmaxf(fmaxf(*(float *)v63.i32, *(float *)&v63.i32[2]), *(float *)&v63.i32[1]);
            v66 = fminf(fminf(v64.f32[0], v64.f32[2]), v64.f32[1]);
            if (v66 >= v65 && v66 >= 0.0 && v65 < *(float *)(a2 + 60))
            {
              LODWORD(v68) = *(float *)v63.i32 < *(float *)&v63.i32[1];
              if (*(float *)v63.i32 < *(float *)&v63.i32[1])
                v63.i32[0] = v63.i32[1];
              if (*(float *)v63.i32 < *(float *)&v63.i32[2])
                v68 = 2;
              else
                v68 = v68;
              if (v65 < 0.0)
                v65 = v66;
              v69 = v122.columns[v68 + 1];
              v121 = v60;
              v60.i32[0] = *(_DWORD *)((unint64_t)&v121 | (4 * v68));
              v63.i32[0] = 1.0;
              v70.i64[0] = 0x8000000080000000;
              v70.i64[1] = 0x8000000080000000;
              v63.i32[0] = vbslq_s8(v70, v63, (int8x16_t)v60).u32[0];
              if (v60.f32[0] == 0.0)
                v71 = 0.0;
              else
                v71 = *(float *)v63.i32;
              v72 = v71;
              if ((*(_WORD *)(a2 + 8) & 0x80) != 0)
              {
                v113 = (float32x4_t)v69;
                v115 = v52;
                v117 = v65;
                v119 = v51;
                v89 = sub_1B17A7CC4();
                sub_1B17A7DA0(v89, *(CFTypeRef *)(a2 + 112), v90, v91, v92, v93, v94, v95);
                v96 = *(const void **)(v89 + 24);
                if (v96 != ValueAtIndex)
                {
                  if (v96)
                  {
                    CFRelease(v96);
                    *(_QWORD *)(v89 + 24) = 0;
                  }
                  if (ValueAtIndex)
                    v97 = CFRetain(ValueAtIndex);
                  else
                    v97 = 0;
                  *(_QWORD *)(v89 + 24) = v97;
                }
                v114 = vmulq_n_f32(v113, -v72);
                v120 = vmlaq_n_f32(v119, v115, v117);
                v109 = *(_OWORD *)(a2 + 128);
                v110 = *(_OWORD *)(a2 + 144);
                v111 = *(_OWORD *)(a2 + 176);
                *(_OWORD *)(v89 + 144) = *(_OWORD *)(a2 + 160);
                *(_OWORD *)(v89 + 160) = v111;
                *(_OWORD *)(v89 + 112) = v109;
                *(_OWORD *)(v89 + 128) = v110;
                *(float32x4_t *)(v89 + 96) = v120;
                v126 = __invert_f4(*(simd_float4x4 *)(a2 + 128));
                v126.columns[3] = (simd_float4)vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v126.columns[3], (float32x4_t)v126.columns[2], v120, 2), (float32x4_t)v126.columns[1], *(float32x2_t *)v120.f32, 1);
                v126.columns[2] = (simd_float4)vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)v126.columns[2], v114, 2), (float32x4_t)v126.columns[1], *(float32x2_t *)v114.f32, 1), (float32x4_t)v126.columns[0], v114.f32[0]);
                v126.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v126.columns[2], (float32x4_t)v126.columns[2]);
                v126.columns[1].i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v126.columns[1], 2), vadd_f32(*(float32x2_t *)v126.columns[1].f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v126.columns[1].f32, 1))).u32[0];
                v126.columns[3] = (simd_float4)vmlaq_n_f32((float32x4_t)v126.columns[3], (float32x4_t)v126.columns[0], v120.f32[0]);
                *(float32x2_t *)v126.columns[0].f32 = vrsqrte_f32((float32x2_t)v126.columns[1].u32[0]);
                *(float32x2_t *)v126.columns[0].f32 = vmul_f32(*(float32x2_t *)v126.columns[0].f32, vrsqrts_f32((float32x2_t)v126.columns[1].u32[0], vmul_f32(*(float32x2_t *)v126.columns[0].f32, *(float32x2_t *)v126.columns[0].f32)));
                *(simd_float4 *)(v89 + 64) = v126.columns[3];
                *(float32x4_t *)(v89 + 80) = vmulq_n_f32((float32x4_t)v126.columns[2], vmul_f32(*(float32x2_t *)v126.columns[0].f32, vrsqrts_f32((float32x2_t)v126.columns[1].u32[0], vmul_f32(*(float32x2_t *)v126.columns[0].f32, *(float32x2_t *)v126.columns[0].f32))).f32[0]);
                CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 312), (const void *)v89);
                CFRelease((CFTypeRef)v89);
                v108 = *(_WORD *)(a2 + 8);
                if ((v108 & 0x200) != 0)
                  *(float *)(a2 + 60) = v117;
LABEL_40:
                v26 = 1;
                if ((v108 & 0x100) != 0)
                  return v26 & 1;
                goto LABEL_41;
              }
              v73 = 0;
              v74 = (_OWORD *)(v21 + (v27 << 6));
              v75 = v74[1];
              v76 = v74[2];
              v77 = v74[3];
              v124[0] = *v74;
              v124[1] = v75;
              v124[2] = v76;
              v124[3] = v77;
              memset(&v122, 0, sizeof(v122));
              do
              {
                v122.columns[v73] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, COERCE_FLOAT(v124[v73])), v39, *(float32x2_t *)&v124[v73], 1), v40, (float32x4_t)v124[v73], 2), v41, (float32x4_t)v124[v73], 3);
                ++v73;
              }
              while (v73 != 4);
              v125 = __invert_f4(v122);
              v82 = *(float32x4_t *)(a2 + 16);
              v83 = *(float32x4_t *)(a2 + 32);
              v84 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v125.columns[3], (float32x4_t)v125.columns[2], v82, 2), (float32x4_t)v125.columns[1], *(float32x2_t *)v82.f32, 1), (float32x4_t)v125.columns[0], v82.f32[0]);
              if (COERCE_FLOAT(HIDWORD(*(_OWORD *)(a2 + 48))) >= 1.0e20)
              {
                v98 = vaddq_f32(v82, v83);
                v99 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v125.columns[3], (float32x4_t)v125.columns[2], v98, 2), (float32x4_t)v125.columns[1], *(float32x2_t *)v98.f32, 1), (float32x4_t)v125.columns[0], v98.f32[0]), v84);
                v87 = vmulq_f32(v99, v99);
                v87.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v87, 2), vadd_f32(*(float32x2_t *)v87.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.f32, 1))).u32[0];
                v100 = vrsqrte_f32((float32x2_t)v87.u32[0]);
                v101 = vmul_f32(v100, vrsqrts_f32((float32x2_t)v87.u32[0], vmul_f32(v100, v100)));
                v88 = vmulq_n_f32(v99, vmul_f32(v101, vrsqrts_f32((float32x2_t)v87.u32[0], vmul_f32(v101, v101))).f32[0]);
                v84.i32[3] = 1.0;
                v87.i32[0] = 2139095040;
              }
              else
              {
                v85 = vmlaq_laneq_f32(v82, v83, *(float32x4_t *)(a2 + 48), 3);
                v86 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v125.columns[3], (float32x4_t)v125.columns[2], v85, 2), (float32x4_t)v125.columns[1], *(float32x2_t *)v85.f32, 1), (float32x4_t)v125.columns[0], v85.f32[0]), v84);
                v87 = vmulq_f32(v86, v86);
                v84.i32[3] = 1.0;
                v87.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).u64[0];
                v87.f32[0] = sqrtf(v87.f32[0]);
                v88 = vdivq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 0));
              }
              v102 = v88;
              v88.i32[3] = 0;
              __asm { FMOV            V3.4S, #1.0 }
              v107 = vdivq_f32(_Q3, v102);
              v107.i32[3] = v87.i32[0];
              *(float32x4_t *)(a2 + 64) = v84;
              *(float32x4_t *)(a2 + 80) = v88;
              *(float32x4_t *)(a2 + 96) = v107;
              if (sub_1B17AB268(v11, v20, v27, a2, v78, v79, v80, v81))
              {
                v108 = *(_WORD *)(a2 + 8);
                goto LABEL_40;
              }
            }
          }
LABEL_41:
          if (++v27 == v25)
            return v26 & 1;
        }
      }
    }
  }
  v26 = 0;
  return v26 & 1;
}

uint64_t sub_1B17ABE8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int32x4_t v47;
  int32x4_t v48;
  float32x2x2_t v49;
  float32x2x2_t v50;
  int32x4_t v51;
  float32x4_t *v52;
  int32x4_t v53;
  float *v54;
  simd_float4x4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  float32x4_t v78;
  const __CFDictionary *v79;
  uint64_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  __n128 v94;
  float32x4_t v95;
  float32x4_t v96;
  float v97;
  int v98;
  int8x16_t v99;
  float v100;
  int8x16_t v101;
  float32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int v118;
  int8x16_t v119;
  float v120;
  int8x16_t v121;
  uint64_t v123;
  char v124;
  float32x4_t v125;
  int8x16_t v126;
  int8x16_t v127;
  float32x2_t v128;
  float32x2_t v129;
  int32x2_t v130;
  float v131;
  float32x2_t v132;
  float32x2_t v133;
  uint64_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x2_t v138;
  int32x2_t v139;
  int32x2_t v140;
  int32x2_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float v145;
  float32x4_t v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int32x4_t v156;
  float32x2_t v157;
  float32x2_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float v185;
  float v186;
  uint64_t v188;
  float32x4_t v189;
  int8x16_t v190;
  float32x4_t v191;
  int32x4_t v192;
  float32x2_t v193;
  float32x2_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  int8x16_t v198;
  float v199;
  int8x16_t v200;
  float v201;
  BOOL v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  const __CFArray *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  const __CFArray *v228;
  const void *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  BOOL v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  BOOL v246;
  CFIndex v247;
  CFIndex v248;
  const void *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  _BOOL4 v258;
  const __CFArray *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  const void *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int8x16_t v288;
  uint64_t v289;
  const __CFArray *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const __CFArray *v296;
  CFIndex v297;
  const void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  int v307;
  const __CFArray *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  float32x4_t v324;
  _BOOL4 v328;
  unsigned int (*v329)(void);
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float v345;
  uint64_t v346;
  BOOL v347;
  void *v348;
  int v350;
  const __CFArray *v351;
  uint64_t v352;
  float32x4_t v353;
  uint64_t v354;
  float32x4_t v355;
  uint64_t v356;
  float32x4_t v357;
  float32x4_t v358;
  uint64_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  __n128 v363;
  uint64_t v364;
  float32x4_t v365;
  __int128 v366[3];
  uint64_t v367;
  unsigned int v368;
  float v369;
  float32x4_t v370;
  float32x4_t v371;
  __int128 v372;
  int32x4_t v373;
  simd_float4x4 v374;
  float32x4_t v375;
  uint64_t v376;
  simd_float4x4 v377;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = (uint64_t)v2;
  v5 = v4;
  v376 = *MEMORY[0x1E0C80C00];
  v2[14] = v4;
  v2[15] = 0;
  v2[24] = 0;
  v12 = (float32x4_t *)sub_1B1869AC8(v4, (uint64_t)v2, v6, v7, v8, v9, v10, v11);
  v13 = v12[2];
  v14 = v12[3];
  v357 = v12[1];
  v360 = *v12;
  *(float32x4_t *)(v3 + 128) = *v12;
  *(float32x4_t *)(v3 + 144) = v357;
  v353 = v14;
  v355 = v13;
  *(float32x4_t *)(v3 + 160) = v13;
  *(float32x4_t *)(v3 + 176) = v14;
  v22 = sub_1B186AE38(v5, v15, v16, v17, v18, v19, v20, v21);
  if (!v22)
    goto LABEL_10;
  v30 = v22;
  sub_1B1868FA0(v5, v23, v24, v25, v26, v27, v28, v29);
  v31 = sub_1B18E4B20(v30);
  if (sub_1B18E59F8(v31))
    return sub_1B17AB970(v30, v3, v32, v33, v34, v35, v36, v37);
  if (v31)
  {
    *(_QWORD *)&v366[0] = 0;
    v45 = sub_1B18E5458(v30, v366);
    if (*(_QWORD *)&v366[0] != 3)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. there should be exactly one transposed matrix in here"), v39, v40, v41, v42, v43, v44, (uint64_t)"vectorCount == 3");
    v46 = 0;
    v47 = *(int32x4_t *)(v45 + 16);
    v48 = *(int32x4_t *)(v45 + 32);
    v49 = (float32x2x2_t)vzip1q_s32(*(int32x4_t *)v45, v48);
    v50 = (float32x2x2_t)vzip2q_s32(*(int32x4_t *)v45, v48);
    v51 = vzip1q_s32(v47, (int32x4_t)0);
    v52 = &v370;
    vst2_f32(v52->f32, v49);
    ++v52;
    v53 = vzip2q_s32(v47, (int32x4_t)xmmword_1B2244E20);
    *(int32x4_t *)v52 = vzip2q_s32((int32x4_t)v49, v51);
    v54 = (float *)&v372;
    vst2_f32(v54, v50);
    v373 = vzip2q_s32((int32x4_t)v50, v53);
    memset(&v374, 0, sizeof(v374));
    do
    {
      v374.columns[v46 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v360, COERCE_FLOAT(*(_OWORD *)((char *)&v370 + v46 * 4))), v357, *(float32x2_t *)&v370.f32[v46], 1), v355, *(float32x4_t *)((char *)&v370 + v46 * 4), 2), v353, *(float32x4_t *)((char *)&v370 + v46 * 4), 3);
      v46 += 4;
    }
    while (v46 != 16);
    v55 = v374;
  }
  else
  {
LABEL_10:
    v55.columns[1] = (simd_float4)v357;
    v55.columns[0] = (simd_float4)v360;
    v55.columns[3] = (simd_float4)v353;
    v55.columns[2] = (simd_float4)v355;
  }
  v369 = 0.0;
  v377 = __invert_f4(v55);
  v63 = *(float32x4_t *)(v3 + 16);
  v64 = *(float32x4_t *)(v3 + 32);
  v65 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v377.columns[3], (float32x4_t)v377.columns[2], v63, 2), (float32x4_t)v377.columns[1], *(float32x2_t *)v63.f32, 1), (float32x4_t)v377.columns[0], v63.f32[0]);
  if (COERCE_FLOAT(HIDWORD(*(_OWORD *)(v3 + 48))) >= 1.0e20)
  {
    v70 = vaddq_f32(v63, v64);
    v71 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v377.columns[3], (float32x4_t)v377.columns[2], v70, 2), (float32x4_t)v377.columns[1], *(float32x2_t *)v70.f32, 1), (float32x4_t)v377.columns[0], v70.f32[0]), v65);
    v68 = vmulq_f32(v71, v71);
    v68.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v68, 2), vadd_f32(*(float32x2_t *)v68.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.f32, 1))).u32[0];
    v72 = vrsqrte_f32((float32x2_t)v68.u32[0]);
    v73 = vmul_f32(v72, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v72, v72)));
    v69 = vmulq_n_f32(v71, vmul_f32(v73, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v73, v73))).f32[0]);
    v65.i32[3] = 1.0;
    v68.i32[0] = 2139095040;
  }
  else
  {
    v66 = vmlaq_laneq_f32(v63, v64, *(float32x4_t *)(v3 + 48), 3);
    v67 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v377.columns[3], (float32x4_t)v377.columns[2], v66, 2), (float32x4_t)v377.columns[1], *(float32x2_t *)v66.f32, 1), (float32x4_t)v377.columns[0], v66.f32[0]), v65);
    v65.i32[3] = 1.0;
    v68 = vmulq_f32(v67, v67);
    v68.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).u64[0];
    v68.f32[0] = sqrtf(v68.f32[0]);
    v69 = vdivq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 0));
  }
  v74 = v69;
  v69.i32[3] = 0;
  __asm { FMOV            V3.4S, #1.0 }
  v361 = _Q3;
  v78 = vdivq_f32(_Q3, v74);
  v78.i32[3] = v68.i32[0];
  *(float32x4_t *)(v3 + 64) = v65;
  *(float32x4_t *)(v3 + 80) = v69;
  *(float32x4_t *)(v3 + 96) = v78;
  if ((*(_BYTE *)(v3 + 9) & 8) == 0)
  {
    v79 = sub_1B1868FE8(v5, v56, v57, v58, v59, v60, v61, v62);
    if (v79)
    {
      v80 = (uint64_t)v79;
      if (sub_1B186064C((uint64_t)v79, v56, v57, v58, v59, v60, v61, v62) == 5)
      {
        if (sub_1B1860E14(v80, v56, v57, v58, v59, v60, v61, v62))
        {
          v81.i32[0] = *(_DWORD *)(v3 + 88);
          v82.i32[0] = 1.0;
          v83.i64[0] = 0x8000000080000000;
          v83.i64[1] = 0x8000000080000000;
          v82.i32[0] = vbslq_s8(v83, v82, v81).u32[0];
          if (*(float *)v81.i32 == 0.0)
            *(float *)v82.i32 = 0.0;
          v84 = *(float *)v82.i32;
          v85 = sub_1B1860F8C(v80, v56, v57, v58, v59, v60, v61, v62);
          v371 = 0u;
          v372 = 0u;
          v370 = 0u;
          sub_1B1860FEC(v80, v86, v87, v88, v89, v90, v91, (uint64_t)&v370);
          switch(v370.i8[0])
          {
            case 1:
              if (v84 > 0.0)
                v92 = 1;
              else
                v92 = v85;
              if (v92 == 1)
              {
                v374.columns[0] = 0u;
                v374.columns[1] = (simd_float4)xmmword_1B2244D90;
                v374.columns[2] = (simd_float4)xmmword_1B2244DB0;
                v374.columns[3].i64[0] = v371.i64[0];
                v358 = *(float32x4_t *)(v3 + 80);
                v362 = *(float32x4_t *)(v3 + 64);
                v93 = sub_1B17ACD68((uint64_t)&v374, &v369, v362, v358, *(__n128 *)(v3 + 96));
                v94.n128_u64[0] = 0;
                v94.n128_u32[3] = 0;
                v95 = v358;
                v96 = v362;
                if (v93)
                {
                  v94.n128_f32[2] = -v84;
                  v97 = v369;
                  goto LABEL_69;
                }
              }
              break;
            case 2:
              if (v84 > 0.0)
                v98 = 1;
              else
                v98 = v85;
              if (v98 == 1)
              {
                v95 = *(float32x4_t *)(v3 + 80);
                v99 = (int8x16_t)vmulq_f32(v95, (float32x4_t)xmmword_1B2245790);
                v100 = vaddv_f32(vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL)));
                if (v100 != 0.0)
                {
                  v96 = *(float32x4_t *)(v3 + 64);
                  v101 = (int8x16_t)vmulq_f32(v96, (float32x4_t)xmmword_1B2245790);
                  v97 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)))
                      / v100;
                  if (v97 >= 0.0 && v97 <= *(float *)(v3 + 108))
                  {
                    v103 = vmlaq_n_f32(v96, v95, v97);
                    v104 = (int32x4_t)vmulq_f32(v103, (float32x4_t)xmmword_1B2244DB0);
                    v105 = (int32x4_t)vmulq_f32(v103, (float32x4_t)xmmword_1B2244DD0);
                    v106 = vdiv_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v105, 2), vadd_f32(*(float32x2_t *)v105.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.i8, 1)))), *(float32x2_t *)v371.f32);
                    if (vaddv_f32(vmul_f32(v106, v106)) <= 1.0)
                    {
                      v94.n128_u64[0] = 0;
                      v94.n128_u32[3] = 0;
                      v94.n128_f32[2] = -v84;
                      v369 = v97;
                      goto LABEL_69;
                    }
                  }
                }
              }
              break;
            case 3:
              v96 = *(float32x4_t *)(v3 + 64);
              v95 = *(float32x4_t *)(v3 + 80);
              v107 = vdivq_f32(v361, v371);
              v108 = vabsq_f32(v107);
              v108.i32[3] = 0;
              v110.i64[0] = 0x8000000080000000;
              v110.i64[1] = 0x8000000080000000;
              v109 = vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v108, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v107, (int8x16_t)v110));
              v110.i8[7] = 0;
              v110.i8[11] = 0;
              v110.i8[15] = 0;
              v110.i32[0] = v109.i32[0];
              v111.i32[0] = 0;
              v111.i64[1] = 0;
              v111.i32[1] = v109.i32[1];
              v112.i64[0] = 0;
              v112.i64[1] = v109.u32[2];
              v113 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)0, v112, v96, 2), (float32x4_t)v111.u64[0], *(float32x2_t *)v96.f32, 1), v110, v96.f32[0]);
              if (COERCE_FLOAT(HIDWORD(*(_OWORD *)(v3 + 96))) >= 1.0e20)
              {
                v142 = vaddq_f32(v96, v95);
                v143 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)0, v112, v142, 2), v111, *(float32x2_t *)v142.f32, 1), v110, v142.f32[0]), v113);
                v116 = vmulq_f32(v143, v143);
                v116.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v116, 2), vadd_f32(*(float32x2_t *)v116.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 1))).u32[0];
                *(float32x2_t *)v142.f32 = vrsqrte_f32((float32x2_t)v116.u32[0]);
                *(float32x2_t *)v142.f32 = vmul_f32(*(float32x2_t *)v142.f32, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v142.f32)));
                v117 = vmulq_n_f32(v143, vmul_f32(*(float32x2_t *)v142.f32, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v142.f32))).f32[0]);
                v113.i32[3] = 1.0;
                v116.i32[0] = 2139095040;
              }
              else
              {
                v114 = vmlaq_laneq_f32(v96, v95, *(float32x4_t *)(v3 + 96), 3);
                v115 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)0, v112, v114, 2), v111, *(float32x2_t *)v114.f32, 1), v110, v114.f32[0]), v113);
                v113.i32[3] = 1.0;
                v116 = vmulq_f32(v115, v115);
                v116.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), vaddq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1))).u64[0];
                v116.f32[0] = sqrtf(v116.f32[0]);
                v117 = vdivq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 0));
              }
              v117.i32[3] = 0;
              v144 = vmulq_f32(v113, v117);
              LODWORD(v145) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).u32[0];
              v146 = vmulq_f32(v113, v113);
              v147 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v146, 2), vaddq_f32(v146, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v146.f32, 1))).f32[0]+ -1.0;
              if (v147 <= 0.0 || v145 <= 0.0)
              {
                v148 = -(float)(v147 - (float)(v145 * v145));
                if (v148 >= 0.0)
                {
                  v149 = sqrtf(v148);
                  v150 = (float)-v145 - v149;
                  v151 = v145 + v149;
                  if (v150 >= 0.0)
                    v151 = v150;
                  if (v151 <= v116.f32[0])
                  {
                    v152 = vmlaq_f32(v113, (float32x4_t)0, v117);
                    v153 = vsubq_f32(vmulq_f32(v371, v152), v96);
                    v154 = vmulq_f32(v153, v153);
                    v97 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 2), vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1))).f32[0]);
                    v369 = v97;
                    v155 = vdivq_f32(v152, v371);
                    v156 = (int32x4_t)vmulq_f32(v155, v155);
                    v156.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v156, 2), vadd_f32(*(float32x2_t *)v156.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v156.i8, 1))).u32[0];
                    v157 = vrsqrte_f32((float32x2_t)v156.u32[0]);
                    v158 = vmul_f32(v157, vrsqrts_f32((float32x2_t)v156.u32[0], vmul_f32(v157, v157)));
                    v94 = (__n128)vmulq_n_f32(v155, vmul_f32(v158, vrsqrts_f32((float32x2_t)v156.u32[0], vmul_f32(v158, v158))).f32[0]);
                    goto LABEL_69;
                  }
                }
              }
              break;
            case 4:
              if (v84 > 0.0)
                v118 = 1;
              else
                v118 = v85;
              if (v118 == 1)
              {
                v95 = *(float32x4_t *)(v3 + 80);
                v119 = (int8x16_t)vmulq_f32(v95, (float32x4_t)xmmword_1B22457A0);
                v120 = vaddv_f32(vadd_f32(*(float32x2_t *)v119.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)));
                if (v120 != 0.0)
                {
                  v96 = *(float32x4_t *)(v3 + 64);
                  v121 = (int8x16_t)vmulq_f32(v96, (float32x4_t)xmmword_1B22457A0);
                  v97 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v121.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL)))
                      / v120;
                  if (v97 >= 0.0 && v97 <= *(float *)(v3 + 108))
                  {
                    if ((_BYTE)v372)
                    {
                      v123 = 0;
                      v124 = 0;
                      v94.n128_u64[0] = 0;
                      v94.n128_u32[3] = 0;
                      v94.n128_f32[2] = -v84;
                      v125 = vmlaq_n_f32(v96, v95, v97);
                      v126 = (int8x16_t)vmulq_f32(v125, (float32x4_t)xmmword_1B2244DC0);
                      v127 = (int8x16_t)vmulq_f32(v125, (float32x4_t)xmmword_1B2244DD0);
                      v128 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v127, v127, 8uLL)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v126.i8, *(int32x2_t *)v127.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v126.i8, *(int32x2_t *)v127.i8)));
                      v129.i32[1] = v128.i32[1];
                      v129.i32[0] = -859915232;
                      v130 = (int32x2_t)vsub_f32(v129, v128);
                      v131 = -*(float *)&v130.i32[1];
                      v132 = (float32x2_t)vdup_lane_s32(v130, 0);
                      do
                      {
                        v133 = *(float32x2_t *)(*((_QWORD *)&v372 + 1) + 8 * v123);
                        if (v372 - 1 == v123)
                          v134 = 0;
                        else
                          v134 = v123 + 1;
                        v135 = *(float32x2_t *)(*((_QWORD *)&v372 + 1) + 8 * v134);
                        v136 = vsub_f32(v128, v133);
                        v137 = vsub_f32(v129, v133);
                        v138 = vsub_f32(v135, v133);
                        if (vmlas_n_f32((float)-v138.f32[1] * v136.f32[0], v136.f32[1], v138.f32[0]) < 0.0 == vmlas_n_f32((float)-v138.f32[1] * v137.f32[0], v137.f32[1], v138.f32[0]) >= 0.0)
                        {
                          v139 = (int32x2_t)vsub_f32(v135, v128);
                          v140 = (int32x2_t)vsub_f32(v133, v128);
                          v141 = vcgez_f32(vmla_f32(vmul_n_f32((float32x2_t)vzip1_s32(v140, v139), v131), (float32x2_t)vzip2_s32(v140, v139), v132));
                          v124 -= veor_s8((int8x8_t)v141, (int8x8_t)vdup_lane_s32(v141, 1)).u8[0];
                        }
                        ++v123;
                      }
                      while (v372 != v123);
                      v369 = v97;
                      if ((v124 & 1) != 0)
LABEL_69:
                        sub_1B17A8AA0(v3, 0, 0, 0, 0, v97, vmlaq_n_f32(v96, v95, v97), v94);
                    }
                    else
                    {
                      v369 = v97;
                    }
                  }
                }
              }
              break;
            default:
              break;
          }
        }
      }
    }
  }
  if ((*(_BYTE *)(v5 + 221) & 0x10) != 0)
  {
    v191 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(*(float32x4_t *)(v3 + 160), *(float32x4_t *)(v3 + 288), 2), *(float32x4_t *)(v3 + 144), *(float32x2_t *)(v3 + 288), 1), *(float32x4_t *)(v3 + 128), COERCE_FLOAT(*(_OWORD *)(v3 + 288)));
    v192 = (int32x4_t)vmulq_f32(v191, v191);
    v192.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v192, 2), vadd_f32(*(float32x2_t *)v192.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v192.i8, 1))).u32[0];
    v193 = vrsqrte_f32((float32x2_t)v192.u32[0]);
    v194 = vmul_f32(v193, vrsqrts_f32((float32x2_t)v192.u32[0], vmul_f32(v193, v193)));
    v195 = vmulq_n_f32(v191, vmul_f32(v194, vrsqrts_f32((float32x2_t)v192.u32[0], vmul_f32(v194, v194))).f32[0]);
    v196 = vmulq_f32(*(float32x4_t *)(v3 + 176), v195);
    v197 = v195;
    v197.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v196, 2), vaddq_f32(v196, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v196.f32, 1))).f32[0];
    v198 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v3 + 32), v197);
    v199 = vaddv_f32(vadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL)));
    if (v199 == 0.0)
      return 0;
    v200 = (int8x16_t)vmulq_f32(v197, *(float32x4_t *)(v3 + 16));
    v201 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v200.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v200, v200, 8uLL)))
         / v199;
    if (v201 < 0.0 || v201 > *(float *)(v3 + 60))
      return 0;
    v363 = (__n128)v195;
    v369 = v201;
  }
  else
  {
    v370 = 0u;
    v371 = 0u;
    if ((sub_1B1869150(v5, &v370) & 1) == 0)
      return 0;
    v159 = *(float32x4_t *)(v3 + 128);
    v160 = *(float32x4_t *)(v3 + 144);
    v161 = *(float32x4_t *)(v3 + 160);
    v162 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(v3 + 176), v161, v370, 2), v160, *(float32x2_t *)v370.f32, 1), v159, v370.f32[0]);
    v163 = vmulq_f32(v159, v159);
    v164 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v163, 2), vaddq_f32(v163, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v163.f32, 1)));
    v164.f32[0] = sqrtf(v164.f32[0]);
    v165 = vmulq_f32(v160, v160);
    v165.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v165, 2), vaddq_f32(v165, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v165.f32, 1))).u64[0];
    v165.f32[0] = sqrtf(v165.f32[0]);
    v166 = vmulq_f32(v161, v161);
    v166.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v166, 2), vaddq_f32(v166, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v166.f32, 1))).u64[0];
    v166.f32[0] = sqrtf(v166.f32[0]);
    v167 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v164.f32, 0);
    v164.i32[1] = v165.i32[0];
    v164.i32[2] = v166.i32[0];
    v168 = (int32x4_t)vdivq_f32(v159, v167);
    v169 = (int32x4_t)vdivq_f32(v160, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v165.f32, 0));
    v170 = (int32x4_t)vdivq_f32(v161, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v166.f32, 0));
    v171 = vmulq_f32(v371, v164);
    v172 = *(float32x4_t *)(v3 + 32);
    v173 = vsubq_f32(v162, *(float32x4_t *)(v3 + 16));
    v174 = (float32x4_t)vzip1q_s32(vzip1q_s32(v168, v170), v169);
    v175 = (float32x4_t)vtrn2q_s32(v168, v169);
    v175.i32[2] = v170.i32[1];
    v176 = (float32x4_t)vzip1q_s32(vzip2q_s32(v168, v170), vdupq_laneq_s32(v169, 2));
    v177 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v175, *(float32x2_t *)v173.f32, 1), v174, v173.f32[0]), v176, v173, 2);
    v178 = vaddq_f32(v171, v177);
    v179 = vsubq_f32(v177, v171);
    v171.i32[3] = v371.i32[3];
    v374.columns[1] = (simd_float4)v168;
    v374.columns[2] = (simd_float4)v169;
    v180 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v175, *(float32x2_t *)v172.f32, 1), v174, v172.f32[0]), v176, v172, 2);
    v181 = vdivq_f32(v178, v180);
    v182 = vdivq_f32(v179, v180);
    v181.i32[3] = 0;
    v182.i32[3] = 0;
    v374.columns[3] = (simd_float4)v170;
    v375 = v171;
    v183 = (int8x16_t)vminnmq_f32(v181, v182);
    v184 = vmaxnmq_f32(v181, v182);
    v185 = fmaxf(fmaxf(*(float *)v183.i32, *(float *)&v183.i32[2]), *(float *)&v183.i32[1]);
    v186 = fminf(fminf(v184.f32[0], v184.f32[2]), v184.f32[1]);
    if (v186 < v185)
      return 0;
    if (v186 < v369 || v185 >= *(float *)(v3 + 60))
      return 0;
    LODWORD(v188) = *(float *)v183.i32 < *(float *)&v183.i32[1];
    if (*(float *)v183.i32 < *(float *)&v183.i32[1])
      v183.i32[0] = v183.i32[1];
    if (*(float *)v183.i32 < *(float *)&v183.i32[2])
      v188 = 2;
    else
      v188 = v188;
    if (v185 < v369)
      v185 = v186;
    v369 = v185;
    v189 = (float32x4_t)v374.columns[v188 + 1];
    v365 = v180;
    v180.i32[0] = *(_DWORD *)((unint64_t)&v365 | (4 * v188));
    v183.i32[0] = 1.0;
    v190.i64[0] = 0x8000000080000000;
    v190.i64[1] = 0x8000000080000000;
    v183.i32[0] = vbslq_s8(v190, v183, (int8x16_t)v180).u32[0];
    if (v180.f32[0] == 0.0)
      *(float *)v183.i32 = 0.0;
    v363 = (__n128)vmulq_n_f32(v189, -*(float *)v183.i32);
  }
  v204 = sub_1B1868FA0(v5, v56, v57, v58, v59, v60, v61, v62);
  if (!v204)
    goto LABEL_164;
  v212 = v204;
  v213 = sub_1B17A0848(v204, v205, v206, v207, v208, v209, v210, v211);
  if (!v213)
    goto LABEL_164;
  v221 = v213;
  v222 = sub_1B1874BE0(v213, v214, v215, v216, v217, v218, v219, v220);
  if ((uint64_t)v222 < 1)
    goto LABEL_164;
  v228 = v222;
  v229 = sub_1B1874C3C(v221, 0, 0, v223, v224, v225, v226, v227);
  v237 = sub_1B17A426C((uint64_t)v229, v230, v231, v232, v233, v234, v235, v236);
  v238 = sub_1B17A44A0(v237);
  v246 = 0;
  if (!v238)
  {
    v247 = 1;
    do
    {
      v248 = v247;
      if (v228 == (const __CFArray *)v247)
        break;
      v249 = sub_1B1874C3C(v221, v247, 0, v241, v242, v243, v244, v245);
      v257 = sub_1B17A426C((uint64_t)v249, v250, v251, v252, v253, v254, v255, v256);
      v258 = sub_1B17A44A0(v257);
      v247 = v248 + 1;
    }
    while (!v258);
    v246 = v248 >= (uint64_t)v228;
  }
  if (v246 || (*(_WORD *)(v3 + 8) & 0x80) != 0 || (*(_BYTE *)(v5 + 221) & 0x10) != 0)
  {
LABEL_164:
    sub_1B17A8BAC(v3, 0, 0, 0, 0, v369, vmlaq_n_f32(*(float32x4_t *)(v3 + 16), *(float32x4_t *)(v3 + 32), v369), v363);
    return 1;
  }
  v259 = sub_1B17A08A0(v212, v239, v240, v241, v242, v243, v244, v245);
  v266 = sub_1B1875E70(v221, 0, v260, v261, v262, v263, v264, v265);
  if (!v266)
    return 0;
  v272 = (uint64_t)v266;
  v273 = sub_1B1875D94(v221, 0, 0, v267, v268, v269, v270, v271);
  v364 = sub_1B17ED6C4(v272, v274, v275, v276, v277, v278, v279, v280);
  if (!v364)
    return 0;
  v289 = v281;
  v356 = v281 & 0xFFFFF000;
  if ((v281 & 0xFFFFF000) == 0)
  {
    sub_1B17B4260(v364, v281, (uint64_t)&v374, v283, v284, v285, v286, v287, *(float32x4_t *)(v3 + 64), *(__n128 *)(v3 + 80), *(int8x16_t *)(v3 + 96), v288);
    *(_QWORD *)(v3 + 304) = &v374;
  }
  v290 = sub_1B1874BE0(v221, v281, v282, v283, v284, v285, v286, v287);
  if ((uint64_t)v290 < 1)
    return 0;
  v296 = v290;
  v297 = 0;
  v359 = v289;
  v352 = v289 & 0xFF000000000000;
  v203 = 1;
  v354 = v273;
  v351 = v259;
  while (1)
  {
    *(_QWORD *)(v3 + 192) = v297;
    v298 = sub_1B1874C3C(v221, v297, 0, v291, v292, v293, v294, v295);
    v373.i64[0] = 0;
    v371 = 0u;
    v372 = 0u;
    v370 = 0u;
    sub_1B17A4804((uint64_t)v298, v273, v299, v300, v301, v302, v303, v304, (uint64_t)&v370);
    if (sub_1B17A4568((uint64_t)v298) || !sub_1B17A44A0(v371.i8[10]))
      goto LABEL_162;
    v306 = 0;
    if ((*(_WORD *)(v3 + 8) & 8) != 0)
    {
      v307 = 0;
      if ((uint64_t)v259 >= 1)
      {
        v308 = sub_1B17A08FC(v212, v297 % (uint64_t)v259, v305, v291, v292, v293, v294, v295);
        v306 = sub_1B18780F0((uint64_t)v308, v309, v310, v311, v312, v313, v314, v315);
        v316 = (uint64_t)v308;
        v273 = v354;
        v307 = sub_1B1878248(v316, v317, v318, v319, v320, v321, v322, v323);
      }
    }
    else
    {
      v307 = 0;
    }
    *(_BYTE *)(v3 + 272) = v306;
    *(_BYTE *)(v3 + 273) = v307 == 1;
    v324 = v371;
    *(float32x4_t *)(v3 + 216) = v370;
    *(float32x4_t *)(v3 + 232) = v324;
    *(_OWORD *)(v3 + 248) = v372;
    *(_QWORD *)(v3 + 264) = v373.i64[0];
    *(_QWORD *)(v3 + 200) = v364;
    *(_QWORD *)(v3 + 208) = v359;
    v328 = v352 == 0x1000000000000 && v371.u8[10] == 0 && v371.u8[11] == 2 && v307 == 0;
    if (!v356)
    {
      v348 = sub_1B17AA10C;
      if (v371.u8[10] == 4)
        v348 = sub_1B17AA740;
      if (v328 && !((*(_WORD *)(v3 + 8) & 8) != 0 ? v306 : 1))
        v348 = sub_1B17AAC04;
      ((void (*)(_QWORD, _QWORD, uint64_t))v348)(0, v370.u32[2], v3);
      goto LABEL_162;
    }
    if (v371.u8[10] == 4)
      v329 = (unsigned int (*)(void))sub_1B17A9C68;
    else
      v329 = (unsigned int (*)(void))sub_1B17A9648;
    if (v328 && !((*(_WORD *)(v3 + 8) & 8) != 0 ? v306 : 1))
      v329 = (unsigned int (*)(void))sub_1B17AAF34;
    if (v370.i32[2] < 0x41u)
    {
      v350 = ((uint64_t (*)(_QWORD))v329)(0);
      v273 = v354;
      if (v350)
        return v203;
      goto LABEL_162;
    }
    v368 = 0;
    v366[0] = (__int128)v370;
    v366[1] = (__int128)v371;
    v366[2] = v372;
    v367 = v373.i64[0];
    v331 = sub_1B17A8F58((uint64_t)v298, v366, v364, v359, (uint64_t)&v368, v293, v294, v295);
    if (v368)
      break;
LABEL_151:
    v259 = v351;
    v273 = v354;
LABEL_162:
    v203 = ++v297 < (uint64_t)v296;
    if ((const __CFArray *)v297 == v296)
      return v203;
  }
  v332 = v331;
  v333 = 0;
  v334 = 32 * v368;
  while (1)
  {
    v335 = *(float32x4_t *)(v332 + v333);
    v336 = *(float32x4_t *)(v332 + v333 + 16);
    v337 = *(float32x4_t *)(v3 + 64);
    v338 = *(float32x4_t *)(v3 + 96);
    v339 = vsubq_f32(v335, v336);
    v340 = vaddq_f32(v335, v336);
    v341 = vmulq_f32(vsubq_f32(v339, v337), v338);
    v342 = vmulq_f32(vsubq_f32(v340, v337), v338);
    v341.i32[3] = 0;
    v342.i32[3] = 0;
    v343 = vminnmq_f32(v341, v342);
    v344 = vmaxnmq_f32(v341, v342);
    v345 = fmaxf(fmaxf(v343.f32[0], v343.f32[2]), v343.f32[1]);
    v346 = v333 + 32;
    v347 = fminf(fminf(v344.f32[0], v344.f32[2]), v344.f32[1]) >= v345
        && v345 < COERCE_FLOAT(HIDWORD(*(_OWORD *)(v3 + 96)));
    if (v347 && v329())
      return v203;
    v333 = v346;
    if (v334 == v346)
      goto LABEL_151;
  }
}

uint64_t sub_1B17ACD68(uint64_t a1, float *a2, float32x4_t a3, float32x4_t a4, __n128 a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float v10;
  int8x16_t v11;
  float v12;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  float32x2_t v20;
  float32x2_t v21;
  uint32x2_t v22;
  uint32x2_t v23;

  v5 = *(float32x4_t *)(a1 + 16);
  v6 = vmulq_f32(v5, *(float32x4_t *)a1);
  v7 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0];
  v8 = v5;
  v8.f32[3] = v7;
  v9 = (int8x16_t)vmulq_f32(a4, v8);
  v10 = vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)));
  if (v10 == 0.0)
    return 0;
  v11 = (int8x16_t)vmulq_f32(a3, v8);
  v12 = (float)-vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL))) / v10;
  if (v12 < 0.0 || v12 > a5.n128_f32[3])
    return 0;
  v14 = vmlaq_n_f32(a3, a4, v12);
  v15 = *(float32x4_t *)(a1 + 32);
  v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), vnegq_f32(v5)), v15, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
  v17 = vsubq_f32(v14, *(float32x4_t *)a1);
  v18 = (int32x4_t)vmulq_f32(v15, v17);
  v19 = (int32x4_t)vmulq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL));
  v20 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1))));
  v21 = *(float32x2_t *)(a1 + 48);
  v22 = (uint32x2_t)vcgt_f32(vneg_f32(v21), v20);
  if ((vpmax_u32(v22, v22).u32[0] & 0x80000000) != 0)
    return 0;
  v23 = (uint32x2_t)vcgt_f32(v20, v21);
  if ((vpmax_u32(v23, v23).u32[0] & 0x80000000) != 0)
    return 0;
  if (a2)
    *a2 = v12;
  return 1;
}

uint64_t sub_1B17ACE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  int v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v10 = *(uint64_t **)(a1 + 32);
  v11 = *((unsigned __int16 *)v10 + 4);
  if ((v11 & 0x1000) != 0)
  {
    if ((sub_1B186E09C(a2) & 1) != 0)
      return 1;
    v10 = *(uint64_t **)(a1 + 32);
    v11 = *((unsigned __int16 *)v10 + 4);
  }
  if ((v11 & 0x20) == 0)
    goto LABEL_7;
  if ((sub_1B1868D5C(a2, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
    return 1;
  v10 = *(uint64_t **)(a1 + 32);
  v11 = *((unsigned __int16 *)v10 + 4);
LABEL_7:
  if ((~v11 & 0x30) == 0)
  {
    if (sub_1B186A4D4(a2, a2, a3, a4, a5, a6, a7, a8) == 0.0)
      return 1;
    v10 = *(uint64_t **)(a1 + 32);
  }
  v13 = *v10;
  if ((sub_1B186CC98(a2, a2, a3, a4, a5, a6, a7, a8) & v13) != 0
    && (v14 = sub_1B186E064(a2), v15 = *(_QWORD *)(a1 + 32), ((*(unsigned __int8 *)(v15 + 10) >> v14) & 1) != 0)
    && (*(_BYTE *)(a2 + 220) & 8) != 0
    && sub_1B17ABE8C(a2, v15)
    && (*(_WORD *)(*(_QWORD *)(a1 + 32) + 8) & 0x100) != 0)
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B17ACF48(__n128 *a1, float32x4_t *a2, CFDictionaryRef theDict, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v36;
  uint64_t v37;
  const void *Value;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  CFIndex Count;
  CFIndex v48;
  CFIndex v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *ValueAtIndex;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  CFRange v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  CFIndex v68;
  CFIndex v69;
  CFIndex i;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const void *v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int32x4_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float32x4_t v122;
  _OWORD v123[3];
  uint64_t v124;
  _QWORD v125[4];
  _BYTE v126[432];
  __int128 v127;
  uint64_t *v128;
  const void *v129;
  __n128 *v130;
  _QWORD v131[2];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  int v139;
  _QWORD v140[2];
  __int128 v141;
  __int128 v142;
  _QWORD v143[5];
  _OWORD __src[28];

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)theDict, a4, a5, a6, a7, a8, (uint64_t)"world");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)theDict, a4, a5, a6, a7, a8, (uint64_t)"segment");
LABEL_3:
  memset(__src, 0, 432);
  sub_1B17A8638(__src, theDict);
  sub_1B187AD68(a1, (__n128 *)&__src[18], v11, v12, v13, v14, v15, v16);
  *((_QWORD *)&__src[19] + 1) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v24 = *a2;
  v25 = vsubq_f32(a2[1], *a2);
  if ((BYTE8(__src[0]) & 2) != 0)
  {
    v24.i32[3] = 1.0;
    v29 = vmulq_f32(v25, v25);
    v29.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u64[0];
    v29.f32[0] = sqrtf(v29.f32[0]);
    v28 = vdivq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0));
  }
  else
  {
    v29 = vmulq_f32(v25, v25);
    v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v29, 2), vadd_f32(*(float32x2_t *)v29.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.f32, 1))).u32[0];
    v26 = vrsqrte_f32((float32x2_t)v29.u32[0]);
    v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v26, v26)));
    v28 = vmulq_n_f32(v25, vmul_f32(v27, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v27, v27))).f32[0]);
    v24.i32[3] = 1.0;
    v29.i32[0] = 2139095040;
  }
  v30 = v28;
  v28.i32[3] = 0;
  __asm { FMOV            V4.4S, #1.0 }
  v122 = _Q4;
  v36 = vdivq_f32(_Q4, v30);
  v36.i32[3] = v29.i32[0];
  __src[1] = v24;
  __src[2] = v28;
  __src[3] = v36;
  v37 = sub_1B187A934((uint64_t)a1, v17, v18, v19, v20, v21, v22, v23);
  if (theDict)
    Value = CFDictionaryGetValue(theDict, CFSTR("kHitTestRootNode"));
  else
    Value = 0;
  if (!Value)
    Value = (const void *)v37;
  if ((BYTE8(__src[0]) & 1) != 0 && Value == (const void *)v37)
  {
    *(_QWORD *)&v134 = 0;
    v132 = 0u;
    v133 = 0u;
    v143[0] = MEMORY[0x1E0C809B0];
    v143[1] = 3221225472;
    v143[2] = sub_1B17AD618;
    v143[3] = &unk_1E63D5208;
    v143[4] = __src;
    sub_1B197CAD0((uint64_t)v143, (uint64_t)&v132);
    *(_QWORD *)&v132 = *(_QWORD *)&__src[0];
    BYTE12(v133) = (WORD4(__src[0]) & 0x200) != 0;
    if ((BYTE8(__src[0]) & 0x20) != 0)
      DWORD1(v133) |= 2u;
    if ((BYTE8(__src[0]) & 0x40) != 0)
      DWORD1(v133) |= 0x20u;
    DWORD2(v133) = BYTE10(__src[0]);
    v46 = sub_1B187B260((uint64_t)a1, v39, v40, v41, v42, v43, v44, v45);
    sub_1B197D60C(v46, (uint64_t)&v132);
    if ((WORD4(__src[0]) & 0x1000) != 0)
    {
      Count = CFArrayGetCount(*((CFArrayRef *)&__src[19] + 1));
      if (Count >= 1)
      {
        v48 = Count;
        v49 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)&__src[19] + 1), v49);
          if (!ValueAtIndex)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v50, v51, v52, v53, v54, v55, (uint64_t)"result");
          v57 = ValueAtIndex[2];
          if (v57 && sub_1B186E0A8(v57))
          {
            CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)&__src[19] + 1), v49);
            --v48;
          }
          else
          {
            ++v49;
          }
        }
        while (v49 < v48);
      }
    }
  }
  else if ((BYTE8(__src[0]) & 1) != 0)
  {
    *(_QWORD *)&v132 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v132 + 1) = 3221225472;
    *(_QWORD *)&v133 = sub_1B17ACE68;
    *((_QWORD *)&v133 + 1) = &unk_1E63D51E8;
    *(_QWORD *)&v134 = __src;
    sub_1B186B018((uint64_t)Value, (uint64_t)&v132);
  }
  else
  {
    sub_1B17ABE8C((uint64_t)Value, (uint64_t)__src);
  }
  v58 = CFArrayGetCount(*((CFArrayRef *)&__src[19] + 1));
  v59 = WORD4(__src[0]);
  if ((BYTE8(__src[0]) & 4) != 0)
  {
    v60.length = v58;
    if (v58 >= 2)
    {
      v60.location = 0;
      CFArraySortValues(*((CFMutableArrayRef *)&__src[19] + 1), v60, (CFComparatorFunction)sub_1B17AD678, a2);
      v59 = WORD4(__src[0]);
    }
  }
  if ((v59 & 0x400) != 0 && *(_QWORD *)&__src[26])
  {
    v142 = 0uLL;
    sub_1B179CD74((float *)&v142, 1.0, 0.0, 0.0, 1.0);
    v141 = 0uLL;
    sub_1B179CD74((float *)&v141, 0.0, 1.0, 0.0, 1.0);
    v140[1] = 0;
    v140[0] = 0;
    sub_1B179CD74((float *)v140, 0.0, 0.0, 1.0, 1.0);
    sub_1B17FA168(*(uint64_t *)&__src[26], 5.0, v61, v62, v63, v64, v65, v66, v67);
    v68 = CFArrayGetCount(*((CFArrayRef *)&__src[19] + 1));
    if (v68 >= 1)
    {
      v69 = v68;
      for (i = 0; i != v69; ++i)
      {
        v78 = (__n128 *)CFArrayGetValueAtIndex(*((CFArrayRef *)&__src[19] + 1), i);
        v136 = 0;
        v137 = &v136;
        v138 = 0x2020000000;
        v139 = 1065353216;
        v79 = v78[1].n128_i64[0];
        if (v79)
        {
          v80 = sub_1B1868FA0(v79, v71, v72, v73, v74, v75, v76, v77);
          if (v80)
          {
            v83 = sub_1B17A0848(v80, v81, v82, v73, v74, v75, v76, v77);
            v84 = v83;
            if (v83)
            {
              v85 = sub_1B1875D94(v83, 0, 0, v73, v74, v75, v76, v77);
              v92 = sub_1B1875E70(v84, 0, v86, v87, v88, v89, v90, v91);
              if (v92)
              {
                v93 = sub_1B1874C3C(v84, v78[2].n128_i64[0], 0, v73, v74, v75, v76, v77);
                if (v93)
                {
                  v135 = 0;
                  v133 = 0u;
                  v134 = 0u;
                  v132 = 0u;
                  sub_1B17A4804((uint64_t)v93, v85, v94, v73, v74, v75, v76, v77, (uint64_t)&v132);
                  v131[0] = v78[2].n128_u64[1];
                  v131[1] = 1;
                  *(_QWORD *)&v133 = v131;
                  WORD4(v133) = 1;
                  v125[0] = MEMORY[0x1E0C809B0];
                  v125[1] = 3221225472;
                  v125[2] = sub_1B17AD754;
                  v125[3] = &unk_1E63D5230;
                  v129 = v92;
                  v128 = &v136;
                  memcpy(v126, __src, sizeof(v126));
                  v130 = v78;
                  v127 = v142;
                  v123[0] = v132;
                  v123[1] = v133;
                  v123[2] = v134;
                  v124 = v135;
                  sub_1B17A5F50((uint64_t)v123, (uint64_t)v125, v95, v96, v97, v98, v99, v100);
                }
              }
            }
          }
        }
        v101 = v78[6];
        v101.n128_u32[3] = *((_DWORD *)v137 + 6);
        sub_1B17FA598(*(uint64_t *)&__src[26], 0, &v141, v73, v74, v75, v76, v77, v101);
        v102 = (float32x4_t)v78[7];
        v103 = (float32x4_t)v78[8];
        v104 = (float32x4_t)v78[9];
        v105 = (int32x4_t)vmulq_f32(v102, v102);
        v106 = (int32x4_t)vmulq_f32(v103, v103);
        v107 = (int32x4_t)vmulq_f32(v104, v104);
        v108 = vzip2q_s32(v105, v107);
        v109 = (float32x4_t)vzip1q_s32(vzip1q_s32(v105, v107), v106);
        v110 = (float32x4_t)vtrn2q_s32(v105, v106);
        v110.i32[2] = v107.i32[1];
        v111 = vaddq_f32((float32x4_t)vzip1q_s32(v108, vdupq_laneq_s32(v106, 2)), vaddq_f32(v109, v110));
        v112 = vceqzq_f32(v111);
        v112.i32[3] = 0;
        v113 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v112), (int8x16_t)v111, (int8x16_t)vdivq_f32(v122, v111));
        v114 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(vmulq_laneq_f32(v104, v113, 2), (float32x4_t)v78[5], 2), vmulq_lane_f32(v103, *(float32x2_t *)v113.f32, 1), (float32x2_t)v78[5].n128_u64[0], 1), vmulq_n_f32(v102, v113.f32[0]), COERCE_FLOAT(*(_OWORD *)&v78[5]));
        v115 = (int32x4_t)vmulq_f32(v114, v114);
        v115.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v115, 2), vadd_f32(*(float32x2_t *)v115.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.i8, 1))).u32[0];
        *(float32x2_t *)v113.f32 = vrsqrte_f32((float32x2_t)v115.u32[0]);
        *(float32x2_t *)v113.f32 = vmul_f32(*(float32x2_t *)v113.f32, vrsqrts_f32((float32x2_t)v115.u32[0], vmul_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32)));
        sub_1B17FA410(*(uint64_t *)&__src[26], 0, (float *)v140, v116, v117, v118, v119, v120, (float32x4_t)v78[6], vaddq_f32((float32x4_t)v78[6], vmulq_n_f32(v114, vmul_f32(*(float32x2_t *)v113.f32, vrsqrts_f32((float32x2_t)v115.u32[0], vmul_f32(*(float32x2_t *)v113.f32, *(float32x2_t *)v113.f32))).f32[0])));
        _Block_object_dispose(&v136, 8);
      }
    }
    sub_1B17FA1D4(*(uint64_t *)&__src[26]);
  }
  return *((_QWORD *)&__src[19] + 1);
}

void sub_1B17AD5E0(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x2B0], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17AD618(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;

  if (a3 >= 1)
  {
    v5 = result;
    for (i = 0; i < a3; ++i)
    {
      result = sub_1B17ABE8C(*(_QWORD *)(a2 + 8 * i), *(_QWORD *)(v5 + 32));
      if ((_DWORD)result && (*(_WORD *)(*(_QWORD *)(v5 + 32) + 8) & 0x100) != 0)
        break;
    }
  }
  return result;
}

uint64_t sub_1B17AD678(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"result");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"result");
LABEL_3:
  v11 = vsubq_f32(a1[6], *a3);
  v12 = vmulq_f32(v11, v11);
  v13 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)));
  v14 = vsubq_f32(a2[6], *a3);
  v15 = vmulq_f32(v14, v14);
  v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)));
  v17 = vmovn_s32(vcgtq_f32(v16, v13)).u8[0];
  v18 = vmovn_s32(vcgtq_f32(v13, v16)).u8[0];
  if ((v17 & 1) != 0)
    return -1;
  else
    return v18 & 1;
}

void sub_1B17AD754(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t *v17;
  unsigned int v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a4;
  MEMORY[0x1E0C80A78](a1, a2);
  v14 = (_OWORD *)&v31.f32[-4 * v7];
  if ((_DWORD)v9)
  {
    v15 = 0uLL;
    v16 = v7;
    v17 = &v31 - v7;
    do
    {
      v31 = v15;
      v18 = *a3++;
      *(double *)v19.i64 = sub_1B17EE400(*(_QWORD *)(a1 + 488), v18, v8, v9, v10, v11, v12, v13);
      v20 = v31;
      *v17++ = v19;
      v15 = vaddq_f32(v20, v19);
      --v16;
    }
    while (v16);
    v19.f32[0] = (float)a4;
    v21 = vdivq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 0));
    v22 = 3.4028e38;
    v23 = v7;
    v24 = &v31 - v7;
    do
    {
      v25 = *v24++;
      v26 = vsubq_f32(v25, v21);
      v27 = vmulq_f32(v26, v26);
      v22 = fminf(v22, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]));
      --v23;
    }
    while (v23);
    *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 480) + 8) + 24) = v22 * 0.5;
    do
    {
      v28 = (float32x4_t)v14[v23];
      v29 = v23 + 1;
      if (v7 - 1 == v23)
        v30 = 0;
      else
        v30 = v23 + 1;
      sub_1B17FA4D4(*(_QWORD *)(a1 + 448), (float32x4_t *)(*(_QWORD *)(a1 + 496) + 112), (float *)(a1 + 464), v9, v10, v11, v12, v13, v28, (float32x4_t)v14[v30]);
      v23 = v29;
    }
    while (v7 != v29);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 480) + 8) + 24) = 2130706431;
  }
}

uint64_t sub_1B17AD8C0(__n128 *a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, __n128 a10)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *Value;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v35;
  int32x4_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  double v42;
  float32x4_t v43;
  __n128 v44;
  float32x4_t v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_11:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"pointOfView");
    return 0;
  }
  v42 = a9;
  v44 = a10;
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  a9 = v42;
  a10 = v44;
  if (!a2)
    goto LABEL_11;
LABEL_3:
  __asm { FMOV            V3.4S, #1.0 }
  *(double *)&_Q3 = a9;
  v46 = *(unint64_t *)&a9;
  v47 = _Q3;
  v18 = sub_1B17A8484((uint64_t)&v46, 2, a2, (uint64_t)a1, (uint64_t)&v57, a6, a7, a8, a10);
  v45[0] = v57;
  v45[1] = v58;
  if (!v18)
    return 0;
  v41 = v58;
  v43 = v57;
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("kHitTestClipToZRange"));
    if (Value)
    {
      if (!CFEqual((CFTypeRef)*MEMORY[0x1E0C9AE50], Value))
      {
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v46 = 0u;
        if (sub_1B17B33F4(a2, (uint64_t)&v46, v25, v19, v20, v21, v22, v23))
        {
          if ((v46 & 1) != 0)
          {
            *(uint64_t *)((char *)v57.i64 + 4) = 0;
            v57.i32[0] = 0;
            sub_1B186B5BC(a2, (__n128 *)&v57, v27, v28, v29, v30, v31, v32);
            v35 = vsubq_f32(v41, v43);
            v36 = (int32x4_t)vmulq_f32(v35, v35);
            v36.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v36, 2), vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1))).u32[0];
            v37 = vrsqrte_f32((float32x2_t)v36.u32[0]);
            v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v37, v37)));
            v39 = vmulq_n_f32(v35, vmul_f32(v38, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v38, v38))).f32[0]);
            v40 = vmulq_f32(vsubq_f32(v43, v57), v39);
            v33 = vmlsq_lane_f32(v43, v39, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))), 0);
          }
          else
          {
            v33 = *(float32x4_t *)(sub_1B1869AC8(a2, v26, v27, v28, v29, v30, v31, v32) + 48);
          }
          v45[0] = v33;
          return sub_1B17ACF48(a1, v45, a3, v19, v20, v21, v22, v23);
        }
        return 0;
      }
    }
  }
  return sub_1B17ACF48(a1, v45, a3, v19, v20, v21, v22, v23);
}

uint64_t sub_1B17ADABC(const void *a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  simd_float4x4 v35;

  v4 = sub_1B17A7CC4();
  v12 = (__int128 *)sub_1B1869AC8((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
  v13 = v12[3];
  v15 = *v12;
  v14 = v12[1];
  *(_OWORD *)(v4 + 144) = v12[2];
  *(_OWORD *)(v4 + 160) = v13;
  *(_OWORD *)(v4 + 112) = v15;
  *(_OWORD *)(v4 + 128) = v14;
  v35 = __invert_f4(*(simd_float4x4 *)(v4 + 112));
  v31 = (float32x4_t)v35.columns[0];
  v32 = (float32x4_t)v35.columns[1];
  v30 = (float32x4_t)v35.columns[2];
  *(float32x4_t *)(v4 + 96) = a2;
  *(float32x4_t *)(v4 + 64) = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v35.columns[3], (float32x4_t)v35.columns[2], a2, 2), (float32x4_t)v35.columns[1], *(float32x2_t *)a2.f32, 1), (float32x4_t)v35.columns[0], a2.f32[0]);
  sub_1B17A7DA0(v4, a1, v16, v17, v18, v19, v20, v21);
  v22 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v30, a3, 2), v32, *(float32x2_t *)a3.f32, 1), v31, a3.f32[0]);
  v23 = vmulq_f32(a3, a3);
  v24 = vmulq_f32(v22, v22);
  v24.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).u64[0];
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 0);
  v25.i32[3] = 0;
  v26 = vrsqrteq_f32(v25);
  v27 = vmulq_f32(v26, vrsqrtsq_f32(v25, vmulq_f32(v26, v26)));
  v28 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v24.f32[0] != 0.0)), 0x1FuLL));
  v28.i32[3] = 0;
  *(int8x16_t *)(v4 + 80) = vbslq_s8((int8x16_t)vcltzq_s32(v28), (int8x16_t)vmulq_f32(v22, vmulq_n_f32(vmulq_f32(v27, vrsqrtsq_f32(v25, vmulq_f32(v27, v27))), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]))), (int8x16_t)v22);
  return v4;
}

void sub_1B17ADBE8(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFStringRef sub_1B17ADC18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  uint64_t v10;

  v9 = CFGetAllocator((CFTypeRef)a1);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
    v10 = sub_1B186B0BC(v10, v2, v3, v4, v5, v6, v7, v8);
  return CFStringCreateWithFormat(v9, 0, CFSTR("<CFXHitTestResult %@ %f,%f,%f>"), v10, *(float *)(a1 + 96), *(float *)(a1 + 100), *(float *)(a1 + 104));
}

void sub_1B17ADC84(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  v12 = sub_1B187813C(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  sub_1B1842070(v12, v10, a3, v13, v14, v15, v16, v17, a9);
}

float32_t sub_1B17ADCE8(float32x4_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  float32x4_t v12;
  float32x2_t v13;
  float v14;
  float v15;
  float32_t result;
  __n128 v17;
  __n128 v18;

  if (a1)
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v17 = a9;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"sphere");
    a9 = v17;
    if (a3)
      goto LABEL_3;
  }
  v18 = a9;
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"transformedSphere");
  a9 = v18;
LABEL_3:
  v12 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a2[3], a2[2], *a1, 2), a2[1], *(float32x2_t *)a1->f32, 1), *a2, COERCE_FLOAT(*a1));
  v12.i32[3] = *(_DWORD *)(a3 + 12);
  *(float32x4_t *)a3 = v12;
  v13 = vabs_f32((float32x2_t)a9.n128_u64[0]);
  if (v13.f32[0] < v13.f32[1])
    v13.f32[0] = v13.f32[1];
  v14 = fabsf(a9.n128_f32[2]);
  if (v13.f32[0] >= v14)
    v15 = v13.f32[0];
  else
    v15 = v14;
  result = v15 * a1->f32[3];
  v12.f32[3] = result;
  *(float32x4_t *)a3 = v12;
  return result;
}

double sub_1B17ADDC8(float *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double result;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"modelMatrix");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"normalMatrix");
LABEL_3:
  v10 = a1[9];
  v11 = a1[10];
  v13 = a1[5];
  v12 = a1[6];
  v14 = a1[8];
  v15 = a1[4];
  v16 = (float)(v13 * v11) - (float)(v12 * v10);
  v17 = *a1;
  v18 = a1[1];
  v19 = a1[2];
  v20 = (float)(v18 * v11) - (float)(v19 * v10);
  v21 = (float)(v18 * v12) - (float)(v19 * v13);
  v22 = (float)((float)(*a1 * v16) - (float)(v15 * v20)) + (float)(v14 * v21);
  if (v22 == 0.0)
  {
    v23 = xmmword_1B2244D90;
    v24 = xmmword_1B2244DD0;
    v25 = xmmword_1B2244DB0;
  }
  else
  {
    v26 = -v19;
    v27 = 1.0 / v22;
    HIDWORD(v25) = 0;
    *(float *)&v25 = v16 * v27;
    *((float *)&v25 + 1) = -(float)((float)((float)(v14 * (float)-v12) + (float)(v15 * v11)) * v27);
    HIDWORD(v23) = 0;
    *((float *)&v25 + 2) = (float)((float)(v15 * v10) - (float)(v13 * v14)) * v27;
    v28 = (float)((float)(v14 * v26) + (float)(v17 * v11)) * v27;
    v29 = (float)(v17 * v10) - (float)(v18 * v14);
    HIDWORD(v24) = 0;
    *(float *)&v24 = -(float)(v20 * v27);
    *((float *)&v24 + 1) = v28;
    *((float *)&v24 + 2) = -(float)(v29 * v27);
    *(float *)&v23 = v21 * v27;
    *((float *)&v23 + 1) = -(float)((float)((float)(v15 * v26) + (float)(v17 * v12)) * v27);
    *((float *)&v23 + 2) = (float)((float)(v18 * (float)-v15) + (float)(v17 * v13)) * v27;
  }
  *a2 = v25;
  a2[1] = v24;
  result = 0.0;
  a2[2] = v23;
  a2[3] = xmmword_1B2244E20;
  return result;
}

void sub_1B17ADF40(const void **a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = a1[1];
    if (v3)
      CFRelease(v3);
    free(a1);
  }
}

CFComparisonResult sub_1B17ADF84(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  CFComparisonResult result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1)
  {
    if (a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"couple1");
  if (!a2)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"couple2");
LABEL_4:
  if (sub_1B1877D60(*a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    v17 = (const __CFString *)sub_1B1877D60(*a1, v10, v11, v12, v13, v14, v15, v16);
  else
    v17 = &stru_1E63FD500;
  if (sub_1B1877D60(*a2, v10, v11, v12, v13, v14, v15, v16))
    v25 = (const __CFString *)sub_1B1877D60(*a2, v18, v19, v20, v21, v22, v23, v24);
  else
    v25 = &stru_1E63FD500;
  result = CFStringCompare(v17, v25, 0);
  if (result)
    return result;
  v27 = a1[1];
  v28 = a2[1];
  if (!v27)
  {
    v29 = 0;
    if (v28)
      goto LABEL_15;
LABEL_17:
    v30 = 0;
    goto LABEL_18;
  }
  v29 = sub_1B17A47FC(v27);
  if (!v28)
    goto LABEL_17;
LABEL_15:
  v30 = sub_1B17A47FC(v28);
LABEL_18:
  v31 = -1;
  if (v29 >= v30)
    v31 = 1;
  if (v29 == v30)
    return 0;
  else
    return v31;
}

void sub_1B17AE094(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFIndex v26;
  uint64_t i;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  CFIndex j;
  const void **ValueAtIndex;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  CFRange v77;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  v10 = sub_1B17A0848(a1, v3, v4, v5, v6, v7, v8, v9);
  v18 = (CFIndex)sub_1B17A08A0(a1, v11, v12, v13, v14, v15, v16, v17);
  if (v18 >= 1)
  {
    v26 = v18;
    if (sub_1B1874BE0(v10, v19, v20, v21, v22, v23, v24, v25) == (const __CFArray *)v18)
    {
      for (i = 0; i != v26; ++i)
      {
        v28 = sub_1B179E238(0x10uLL);
        *v28 = 0;
        v28[1] = 0;
        v35 = sub_1B17A08FC(a1, i, v29, v30, v31, v32, v33, v34);
        if (v35)
          v35 = CFRetain(v35);
        *v28 = v35;
        if ((uint64_t)sub_1B1874BE0(v10, v36, v37, v38, v39, v40, v41, v42) >= 1)
        {
          v48 = sub_1B1874C3C(v10, i, 0, v43, v44, v45, v46, v47);
          if (v48)
            v48 = CFRetain(v48);
          v28[1] = v48;
        }
        CFArrayAppendValue(Mutable, v28);
      }
      if (v26 >= 2)
      {
        v77.location = 0;
        v77.length = v26;
        CFArraySortValues(Mutable, v77, (CFComparatorFunction)sub_1B17ADF84, 0);
      }
      sub_1B17A1C8C(a1, v49, v50, v51, v52, v53, v54, v55);
      sub_1B1876390(v10, v56, v57, v58, v59, v60, v61, v62);
      for (j = 0; j != v26; ++j)
      {
        ValueAtIndex = (const void **)CFArrayGetValueAtIndex(Mutable, j);
        sub_1B18760C4(v10, ValueAtIndex[1], v65, v66, v67, v68, v69, v70);
        sub_1B17A1B04(a1, (void *)*ValueAtIndex, v71, v72, v73, v74, v75, v76);
        sub_1B17ADF40(ValueAtIndex);
      }
    }
  }
  CFRelease(Mutable);
}

uint64_t sub_1B17AE1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFAllocator *v38;
  const __CFDictionary *Mutable;
  const __CFArray *v40;
  CFMutableArrayRef v41;
  CFMutableDictionaryRef v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CFIndex v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  const UInt8 *v80;
  CFDataRef v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  const __CFArray *v92;
  CFIndex v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *ValueAtIndex;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t j;
  uint64_t v107;
  uint64_t v108;
  const void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const void *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  CFMutableDictionaryRef v126;
  CFMutableArrayRef v127;
  uint64_t v128;
  const __CFDictionary *cf;
  _BOOL4 v130;
  uint64_t v131;
  CFIndex Count;
  const __CFAllocator *bytesDeallocator;
  float32x4_t v134;
  CFIndex v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140[4];
  _OWORD v141[4];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[5];
  __int128 v147;
  uint64_t (*v148)(uint64_t, uint64_t);
  uint64_t (*v149)(const void *, const __CFDictionary **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v150;
  __int128 v151[4];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _QWORD v156[5];
  __int128 context;
  __int128 v158;
  __int128 v159;
  uint64_t v160;

  v8 = a4;
  v160 = *MEMORY[0x1E0C80C00];
  v158 = 0u;
  v159 = 0u;
  context = 0u;
  v149 = 0;
  v148 = 0;
  v150 = 0;
  v147 = 0u;
  memset(v146, 0, sizeof(v146));
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  *(double *)&v10 = sub_1B186BC70(a1, a2, a3, a4, a5, a6, a7, a8);
  v141[0] = v10;
  v141[1] = v11;
  v141[2] = v12;
  v141[3] = v13;
  v140[0] = xmmword_1B2244DB0;
  v140[1] = xmmword_1B2244DD0;
  v140[2] = xmmword_1B2244D90;
  v140[3] = xmmword_1B2244E20;
  sub_1B186BC48(a1, (uint64_t)v140);
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v130 = sub_1B186A28C(a1, v14, v15, v16, v17, v18, v19, v20);
  if (v130)
  {
    v28 = (__int128 *)sub_1B186A358(a1, v21, v22, v23, v24, v25, v26, v27);
    v29 = v28[3];
    v31 = *v28;
    v30 = v28[1];
    v138 = v28[2];
    v139 = v29;
    v136 = v31;
    v137 = v30;
    sub_1B186A2DC(a1, v140, v32, v33, v34, v35, v36, v37);
  }
  *(int64x2_t *)((char *)v146 + 8) = vdupq_n_s64(3uLL);
  *(_OWORD *)((char *)&v146[1] + 8) = xmmword_1B22457C0;
  *(_QWORD *)&v147 = 0;
  v142 = 0u;
  v143 = 0u;
  v144 = 0u;
  v145 = 0u;
  *((_QWORD *)&v146[2] + 1) = 4;
  *(_QWORD *)&v146[0] = 0;
  BYTE8(v147) = v8;
  v38 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  v40 = CFArrayCreateMutable(v38, 0, 0);
  v41 = CFArrayCreateMutable(v38, 0, MEMORY[0x1E0C9B378]);
  bytesDeallocator = v38;
  v42 = CFDictionaryCreateMutable(v38, 0, 0, 0);
  *(_QWORD *)&context = Mutable;
  *((_QWORD *)&context + 1) = v40;
  *(_QWORD *)&v158 = &v142;
  v127 = v41;
  *(_QWORD *)&v159 = v41;
  *((_QWORD *)&v159 + 1) = v42;
  v148 = 0;
  v149 = sub_1B17AE810;
  v150 = 0;
  v131 = a1;
  sub_1B17C49C8(a1, &v148, 0, (uint64_t)&context, v43, v44, v45, v46);
  v47 = -[VFXModel __createCFObject]_0();
  v48 = (const void *)-[VFXMesh __createCFObject]_0();
  sub_1B17A14D4(v47, (uint64_t)v48, v49, v50, v51, v52, v53, v54);
  CFRelease(v48);
  v128 = v47;
  cf = Mutable;
  *(_QWORD *)&context = v47;
  *((_QWORD *)&context + 1) = &v142;
  v126 = v42;
  *(_QWORD *)&v158 = v42;
  CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)sub_1B17AEB9C, &context);
  Count = CFArrayGetCount(v40);
  if (Count >= 1)
  {
    v61 = 0;
    v62 = MEMORY[0x1E0C809B0];
    do
    {
      v63 = *((_QWORD *)CFArrayGetValueAtIndex(v40, v61) + 1);
      v156[0] = v62;
      v156[1] = 3221225472;
      v156[2] = sub_1B17B4B98;
      v156[3] = &unk_1E63D52C0;
      v156[4] = &v142;
      sub_1B1873EE0(v63, 1, (uint64_t)v156, v64, v65, v66, v67, v68);
      if (*((_QWORD *)&v146[1] + 1) == 4 && *((_QWORD *)&v146[0] + 1) == 4)
        break;
      ++v61;
    }
    while (v61 < Count);
  }
  v69 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v134 = _Q0;
  do
  {
    if (*((uint64_t *)&v142 + v69) >= 1)
    {
      v75 = 0;
      v76 = (uint64_t *)v146 + v69 + 1;
      do
      {
        v77 = v147;
        v78 = *v76;
        if (!*v76)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. __AllocateNewSource - componentsCount is zero"), v55, v56, v57, v58, v59, v60, (uint64_t)"componentsCount!=0");
        if (v77 <= (0x7FFFFFFF / v78) && v77 * v78 <= 0x1FFFFFFF)
        {
          v80 = (const UInt8 *)malloc_type_calloc(4 * v77 * v78, 1uLL, 0x6EB2BC6BuLL);
          v81 = CFDataCreateWithBytesNoCopy(bytesDeallocator, v80, 4 * v77 * v78, bytesDeallocator);
          v85 = (const void *)sub_1B17ED204(v81, (char)v69, v77, v78, 1, v82, v83, v84);
          CFRelease(v81);
          if (v85)
          {
            if (v69 == 2)
            {
              v87 = sub_1B17EDAE0((uint64_t)v85, v86, v55, v56, v57, v58, v59, v60);
              if (v87 >= 1)
              {
                v90 = v87;
                for (i = 0; i != v90; ++i)
                  sub_1B1846D4C((uint64_t)v85, i, v88, v89, v57, v58, v59, v60, v134);
              }
            }
            sub_1B1874ECC((uint64_t)v48, v85, 0, 0, v57, v58, v59, v60);
            CFRelease(v85);
          }
        }
        ++v75;
      }
      while (v75 < *((_QWORD *)&v142 + v69));
    }
    ++v69;
  }
  while (v69 != 9);
  v92 = v40;
  if (Count >= 1)
  {
    v93 = 0;
    v94 = 0;
    v95 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v92, v93);
      v104 = ValueAtIndex[1];
      v105 = ValueAtIndex[3];
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v135 = v93;
      if (v105)
      {
        sub_1B186BDB8(v105, (uint64_t)&v152, v98, v99, v100, v101, v102, v103);
      }
      else
      {
        v152 = xmmword_1B2244DB0;
        v153 = xmmword_1B2244DD0;
        v154 = xmmword_1B2244D90;
        v155 = xmmword_1B2244E20;
      }
      for (j = 0; j != 9; ++j)
      {
        if (*((uint64_t *)&v142 + j) >= 1)
        {
          v107 = 0;
          v108 = v95;
          while (1)
          {
            v109 = sub_1B1875540((uint64_t)v48, (char)j, v107, 0, v100, v101, v102, v103);
            v114 = sub_1B1875540(v104, (char)j, v107, 1, v110, v111, v112, v113);
            if (!v114)
              goto LABEL_42;
            v95 = (uint64_t)v114;
            if ((unint64_t)(j - 2) < 3)
              break;
            if (j == 1)
            {
              memset(v151, 0, sizeof(v151));
              sub_1B17ADDC8((float *)&v152, v151, v98, v99, v100, v101, v102, v103);
              v117 = v151;
              v115 = (uint64_t)v109;
              v116 = v95;
              goto LABEL_41;
            }
            if (j)
            {
              sub_1B17C4408(0, (uint64_t)CFSTR("Warning: __MergeMeshSources unknown source type\n"), v98, v99, v100, v101, v102, v103, v125);
              goto LABEL_42;
            }
            sub_1B17B0708((uint64_t)v109, (uint64_t)v114, (uint64_t)&v152, v94, v100, v101, v102, v103, v125);
LABEL_43:
            ++v107;
            v108 = v95;
            if (v107 >= *((_QWORD *)&v142 + j))
              goto LABEL_46;
          }
          v115 = (uint64_t)v109;
          v116 = v95;
          v117 = 0;
LABEL_41:
          sub_1B17B0708(v115, v116, (uint64_t)v117, v94, v100, v101, v102, v103, v125);
LABEL_42:
          v95 = v108;
          goto LABEL_43;
        }
LABEL_46:
        ;
      }
      if (v95)
        v94 += sub_1B17EDAE0(v95, v97, v98, v99, v100, v101, v102, v103);
      v92 = v40;
      v93 = v135 + 1;
    }
    while (v135 + 1 != Count);
  }
  sub_1B17AE094(v128);
  CFRelease(cf);
  sub_1B17AEC0C(v92);
  CFRelease(v127);
  CFRelease(v126);
  CFRelease(v92);
  sub_1B186BC48(v131, (uint64_t)v141);
  if (v130)
    sub_1B186A2DC(v131, &v136, v118, v119, v120, v121, v122, v123);
  return v128;
}

uint64_t sub_1B17AE810(const void *a1, const __CFDictionary **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  __CFArray *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __CFArray *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const __CFArray *v53;
  uint64_t v54;
  __CFArray *Mutable;
  CFIndex i;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CFIndex Count;
  CFIndex v70;
  const __CFDictionary *v71;
  __CFDictionary *v72;
  const CFDictionaryValueCallBacks *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *ValueAtIndex;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  const void *v95;
  void *Value;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  _OWORD *v115;
  __int128 v116;
  __CFArray *theArray;
  const __CFAllocator *allocator;
  uint64_t v120;

  v10 = *a2;
  v11 = a2[4];
  v12 = sub_1B1868FA0((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v12)
  {
    v13 = v12;
    if ((sub_1B186CDA0((uint64_t)a1) & 1) == 0)
    {
      v21 = a2[1];
      v120 = sub_1B17A0848(v13, v14, v15, v16, v17, v18, v19, v20);
      if (v120)
      {
        if (sub_1B1875E70(v120, 1, v22, v23, v24, v25, v26, v27))
        {
          if (!a1)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v29, v30, v31, v32, v33, v34, (uint64_t)"node");
          v35 = sub_1B1868FA0((uint64_t)a1, v28, v29, v30, v31, v32, v33, v34);
          if (v35)
          {
            v43 = v35;
            v44 = sub_1B17A0848(v35, v36, v37, v38, v39, v40, v41, v42);
            if (v44)
            {
              v52 = v44;
              v53 = sub_1B1874BE0(v44, v45, v46, v47, v48, v49, v50, v51);
              if (v53)
              {
                v54 = (uint64_t)v53;
                theArray = v21;
                allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFIndex)v53, 0);
                if (v54 >= 1)
                {
                  for (i = 0; i != v54; ++i)
                  {
                    v57 = malloc_type_malloc(0x20uLL, 0x20040DC1BFBCFuLL);
                    v57[1] = v52;
                    *v57 = sub_1B1874C3C(v52, i, 1, v58, v59, v60, v61, v62);
                    v57[2] = sub_1B17A08FC(v43, i, v63, v64, v65, v66, v67, v68);
                    v57[3] = a1;
                    CFArrayAppendValue(Mutable, v57);
                  }
                }
                if (Mutable)
                {
                  Count = CFArrayGetCount(Mutable);
                  CFArrayAppendValue(v11, a1);
                  if (Count >= 1)
                  {
                    v70 = 0;
                    v71 = a2[2];
                    v72 = a2[5];
                    v73 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
                    do
                    {
                      ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(Mutable, v70);
                      if (!ValueAtIndex)
                        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v75, v76, v77, v78, v79, v80, (uint64_t)"element");
                      sub_1B186C4A8(ValueAtIndex[3], v74, v75, v76, v77, v78, v79, v80);
                      v91 = 0;
                      if (v89 >= 1.0)
                      {
                        v90 = ValueAtIndex[2];
                        if (!v90 || sub_1B1878654(v90, v82, v83, v84, v85, v86, v87, v88))
                          v91 = 1;
                      }
                      v92 = ValueAtIndex[2];
                      if (v92 && sub_1B18780F0(v92, v82, v83, v84, v85, v86, v87, v88))
                        v91 |= 2uLL;
                      v93 = sub_1B17A426C(*ValueAtIndex, v82, v83, v84, v85, v86, v87, v88);
                      if (v93 == 2)
                      {
                        v95 = (const void *)(v91 | 0x10);
                      }
                      else
                      {
                        v94 = v91 | 4;
                        if (v93)
                          v94 = v91;
                        if (v93 == 1)
                          v95 = (const void *)(v91 | 8);
                        else
                          v95 = (const void *)v94;
                      }
                      Value = (void *)CFDictionaryGetValue(v10, v95);
                      if (!Value)
                      {
                        Value = CFDictionaryCreateMutable(allocator, 0, 0, v73);
                        CFDictionarySetValue(v10, v95, Value);
                        CFRelease(Value);
                      }
                      CFDictionarySetValue(v72, ValueAtIndex, *((const void **)v71 + 18));
                      v97 = (void *)CFDictionaryGetValue((CFDictionaryRef)Value, (const void *)ValueAtIndex[2]);
                      if (!v97)
                      {
                        v97 = CFArrayCreateMutable(allocator, 0, 0);
                        CFDictionarySetValue((CFMutableDictionaryRef)Value, (const void *)ValueAtIndex[2], v97);
                        CFRelease(v97);
                      }
                      CFArrayAppendValue((CFMutableArrayRef)v97, ValueAtIndex);
                      ++v70;
                    }
                    while (Count != v70);
                    v104 = sub_1B1875E70(v120, 1, v98, v99, v100, v101, v102, v103);
                    if (v104)
                    {
                      v112 = 0;
                      *((_QWORD *)v71 + 18) += sub_1B17EDAE0((uint64_t)v104, v105, v106, v107, v108, v109, v110, v111);
                      do
                      {
                        v113 = sub_1B1875F00(v120, (char)v112);
                        if (v113 > *((_QWORD *)v71 + v112))
                          *((_QWORD *)v71 + v112) = v113;
                        ++v112;
                      }
                      while (v112 != 9);
                    }
                    v114 = malloc_type_malloc(0x20uLL, 0x20040DC1BFBCFuLL);
                    v115 = CFArrayGetValueAtIndex(Mutable, 0);
                    v116 = v115[1];
                    *v114 = *v115;
                    v114[1] = v116;
                    CFArrayAppendValue(theArray, v114);
                  }
                  CFRelease(Mutable);
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_1B17AEB9C(char a1, CFDictionaryRef theDict, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  uint64_t context;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[1];
  context = *a3;
  v6 = 0;
  if (*(uint64_t *)(v3 + 144) < 0x10000)
    v4 = 2;
  else
    v4 = 4;
  HIDWORD(v6) = v4;
  LOBYTE(v6) = a1 & 1 | (*(_BYTE *)(v3 + 152) != 0);
  v7 = a3[2];
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_1B17B4470, &context);
}

void sub_1B17AEC0C(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  void *ValueAtIndex;

  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v3 = Count;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, i);
      free(ValueAtIndex);
    }
  }
  CFArrayRemoveAllValues(a1);
}

const void *sub_1B17AEC64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const __CFString *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  size_t v78;
  _QWORD *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  CFIndex v102;
  const void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const __CFArray *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  const __CFArray *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  float32x4_t *v208;
  const __CFArray *v209;
  uint64_t v210;
  uint64_t v211;
  CFIndex v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  size_t v217;
  const __CFArray *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v213 = sub_1B1868FA0(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v213)
    return 0;
  if (sub_1B186AE38(a1, v10, v11, v12, v13, v14, v15, v16))
    return 0;
  if (sub_1B186ACAC(a1, v17, v18, v19, v20, v21, v22, v23))
    return 0;
  v33 = sub_1B17A0848(v213, v24, v25, v26, v27, v28, v29, v30);
  if (!v33)
    return 0;
  v40 = v33;
  v41 = sub_1B1875E70(v33, 1, v34, v35, v36, v37, v38, v39);
  v49 = a2;
  v50 = v41 ? sub_1B17EDAE0((uint64_t)v41, v42, v43, v44, v45, v46, v47, v48) : 0;
  if (v50 <= v49)
    return 0;
  v31 = (const void *)sub_1B186A0A0();
  v58 = sub_1B186B0BC(a1, v51, v52, v53, v54, v55, v56, v57);
  if (v58)
  {
    v65 = CFStringCreateWithFormat(0, 0, CFSTR("%@-splitContainer"), v58);
    sub_1B186C458((uint64_t)v31, v65, v66, v67, v68, v69, v70, v71);
    CFRelease(v65);
  }
  else
  {
    sub_1B186C458((uint64_t)v31, CFSTR("splitContainer"), v59, v60, v61, v62, v63, v64);
  }
  v208 = (float32x4_t *)a1;
  sub_1B186A858(a1, v31, v72, v73, v74, v75, v76, v77);
  CFRelease(v31);
  v78 = 8 * v50;
  v79 = malloc_type_malloc(v78, 0x100004000313F17uLL);
  v217 = v78;
  v80 = malloc_type_malloc(v78, 0x100004000313F17uLL);
  v218 = sub_1B17A08A0(v213, v81, v82, v83, v84, v85, v86, v87);
  v209 = sub_1B1874BE0(v40, v88, v89, v90, v91, v92, v93, v94);
  if ((uint64_t)v209 >= 1)
  {
    v100 = v49;
    v101 = 0;
    v102 = 0;
    v223 = 0;
    v224 = 0;
    v222 = 0;
    v215 = (uint64_t)v31;
    v216 = v40;
    do
    {
      v103 = sub_1B1874C3C(v40, v102, 1, v95, v96, v97, v98, v99);
      v221 = v101 + 1;
      sub_1B17AF0D4((uint64_t)v31, v101, &v224, &v222, &v223);
      v104 = v222;
      v112 = sub_1B17A426C((uint64_t)v103, v105, v106, v107, v108, v109, v110, v111);
      if (v112 == 3)
        v119 = 3;
      else
        v119 = 2 * (v112 == 2);
      sub_1B17A3B60(v104, v119, v113, v114, v115, v116, v117, v118);
      v127 = sub_1B17A42B4((uint64_t)v103, v120, v121, v122, v123, v124, v125, v126);
      sub_1B17A43C4(v104, v127, v128, v129, v130, v131, v132, v133);
      v134 = sub_1B17A47FC((uint64_t)v103);
      v142 = sub_1B17A4410((uint64_t)v103, v135, v136, v137, v138, v139, v140, v141);
      bzero(v80, v217);
      v211 = v102 / (uint64_t)v218;
      v212 = v102;
      v210 = v134;
      v219 = v104;
      if (v134 < 1)
      {
        v220 = 0;
        v146 = 0;
      }
      else
      {
        v143 = 0;
        v144 = 0;
        v220 = 0;
        v214 = v142 - 1;
        do
        {
          if (v142 < 1)
          {
            v146 = v143;
          }
          else
          {
            v145 = 0;
            v146 = v143;
            do
            {
              v147 = sub_1B17A4A74((uint64_t)v103, v144, v145, 0, v96, v97, v98, v99);
              if (!*((_QWORD *)v80 + v147))
              {
                v79[v146++] = v147;
                *((_QWORD *)v80 + v147) = v146;
                if (v146 == v100)
                {
                  if (v145 == v214)
                    v143 = v100;
                  v144 -= v145 != v214;
                  sub_1B17AF1D8(v220, v144 + 1, (uint64_t)v80, (uint64_t)v79, v143, (uint64_t)v103, v219, v224, v216);
                  v154 = sub_1B17A08FC(v213, v212 - v211 * (_QWORD)v218, v148, v149, v150, v151, v152, v153);
                  sub_1B17A1D38(v223, v154, 0, v155, v156, v157, v158, v159);
                  sub_1B17AF0D4(v215, v221, &v224, &v222, &v223);
                  v160 = v222;
                  v168 = sub_1B17A426C((uint64_t)v103, v161, v162, v163, v164, v165, v166, v167);
                  if (v168 == 3)
                    v175 = 3;
                  else
                    v175 = 2 * (v168 == 2);
                  sub_1B17A3B60(v160, v175, v169, v170, v171, v172, v173, v174);
                  v183 = sub_1B17A42B4((uint64_t)v103, v176, v177, v178, v179, v180, v181, v182);
                  v219 = v160;
                  sub_1B17A43C4(v160, v183, v184, v185, v186, v187, v188, v189);
                  bzero(v80, v217);
                  v146 = 0;
                  v220 = v144 + 1;
                  ++v221;
                  v145 = v142;
                }
              }
              ++v145;
            }
            while (v145 < v142);
          }
          ++v144;
          v143 = v146;
        }
        while (v144 < v210);
      }
      v40 = v216;
      if (v220 < v210)
      {
        sub_1B17AF1D8(v220, v210, (uint64_t)v80, (uint64_t)v79, v146, (uint64_t)v103, v219, v224, v216);
        v196 = sub_1B17A08FC(v213, v212 - v211 * (_QWORD)v218, v190, v191, v192, v193, v194, v195);
        sub_1B17A1D38(v223, v196, 0, v197, v198, v199, v200, v201);
      }
      v102 = v212 + 1;
      v31 = (const void *)v215;
      v101 = v221;
    }
    while ((const __CFArray *)(v212 + 1) != v209);
  }
  free(v80);
  free(v79);
  sub_1B186A58C(v208, 0, v202, v203, v204, v205, v206, v207);
  return v31;
}

void sub_1B17AF0D4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v10 = (float32x4_t *)sub_1B186A0A0();
  sub_1B186A858(a1, v10, v11, v12, v13, v14, v15, v16);
  v24 = sub_1B186B0BC(a1, v17, v18, v19, v20, v21, v22, v23);
  if (v24)
  {
    v25 = CFStringCreateWithFormat(0, 0, CFSTR("%@-split%d"), v24, a2);
    sub_1B186C458((uint64_t)v10, v25, v26, v27, v28, v29, v30, v31);
    CFRelease(v25);
  }
  v32 = (void *)-[VFXModel __createCFObject]_0();
  v33 = (const void *)-[VFXMesh __createCFObject]_0();
  sub_1B186A58C(v10, v32, v34, v35, v36, v37, v38, v39);
  sub_1B17A14D4((uint64_t)v32, (uint64_t)v33, v40, v41, v42, v43, v44, v45);
  v46 = (const void *)sub_1B17A39B4();
  sub_1B18760C4((uint64_t)v33, v46, v47, v48, v49, v50, v51, v52);
  CFRelease(v46);
  CFRelease(v33);
  CFRelease(v32);
  CFRelease(v10);
  *a4 = v46;
  *a3 = v33;
  *a5 = v32;
}

void sub_1B17AF1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  UInt8 *v30;
  UInt8 *v31;
  UInt8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const UInt8 *v37;
  CFDataRef v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  CFIndex v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const UInt8 *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  const UInt8 *v77;
  CFDataRef v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  CFIndex length;
  CFIndex Count;
  UInt8 *bytes;
  UInt8 *bytesa;
  CFArrayRef theArray;
  const __CFArray *theArraya;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v13 = a1;
  v14 = a2 - a1;
  v15 = a5 > 255;
  if (a5 <= 255)
    v16 = 1;
  else
    v16 = 2;
  v17 = sub_1B17A4410(a6, a2, a3, a4, a5, a6, a7, a8);
  v18 = v17;
  v105 = a5;
  v19 = a5 < 0x10000;
  if (a5 < 0x10000)
    v20 = v16;
  else
    v20 = 4;
  v21 = 2;
  if (v19)
    v21 = v15;
  length = (v17 << v21) * v14;
  bytes = (UInt8 *)malloc_type_malloc(length, 0xFF99BA0DuLL);
  theArray = (CFArrayRef)a2;
  v95 = a2 - v13;
  v28 = 0;
  if (a2 > v13)
  {
    do
    {
      if (v18 >= 1)
      {
        v29 = 0;
        v30 = &bytes[2 * v28];
        v31 = &bytes[v28];
        v106 = v28;
        v32 = &bytes[4 * v28];
        do
        {
          v33 = sub_1B17A4A74(a6, v13, v29, 0, v24, v25, v26, v27);
          v34 = *(_QWORD *)(a3 + 8 * v33);
          if (!v34)
          {
            v35 = v33;
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. inconsistency in _finalizeSplit"), v22, v23, v24, v25, v26, v27, (uint64_t)"oldIndexToNewIndex[sourceIndex]");
            v34 = *(_QWORD *)(a3 + 8 * v35);
          }
          v36 = v34 - 1;
          if (v20 == 2)
          {
            *(_WORD *)&v30[2 * v29] = v36;
          }
          else if (v20 == 1)
          {
            v31[v29] = v36;
          }
          else
          {
            *(_DWORD *)&v32[4 * v29] = v36;
          }
          ++v29;
        }
        while (v18 != v29);
        v28 = v106 + v29;
      }
      ++v13;
    }
    while ((CFArrayRef)v13 != theArray);
  }
  if (v28 != v18 * v95)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _finalizeSplit - inconsistent data length"), v22, v23, v24, v25, v26, v27, (uint64_t)"w == count * indexCountPerPrimitive");
  v37 = bytes;
  bytesa = (UInt8 *)*MEMORY[0x1E0C9AE00];
  v38 = CFDataCreateWithBytesNoCopy(0, v37, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  sub_1B17A4464(a7, v95, v38, v20);
  CFRelease(v38);
  theArraya = sub_1B1875E80(a9, 1, v39, v40, v41, v42, v43, v44);
  Count = CFArrayGetCount(theArraya);
  v45 = v105;
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArraya, i);
      v48 = sub_1B17EE4E4((uint64_t)ValueAtIndex);
      v49 = sub_1B17EE4EC((uint64_t)ValueAtIndex);
      v57 = (_QWORD *)sub_1B17EE3B4((uint64_t)ValueAtIndex, v50, v51, v52, v53, v54, v55, v56);
      v65 = sub_1B179E250(v49, v58, v59, v60, v61, v62, v63, v64) * v48;
      v66 = v65 * v45;
      v73 = (const UInt8 *)malloc_type_malloc(v65 * v45, 0x80B3CCA4uLL);
      v107 = v48;
      v74 = 0;
      if (v45 >= 1)
      {
        v75 = (uint64_t *)a4;
        do
        {
          v76 = *v75++;
          v77 = sub_1B18F39D4(v57, v76, v67, v68, v69, v70, v71, v72);
          memcpy((void *)&v73[v74], v77, v65);
          v74 += v65;
          --v45;
        }
        while (v45);
      }
      if (v74 != v66)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _createSubSource - inconsistent data length"), v67, v68, v69, v70, v71, v72, (uint64_t)"w == dataLength");
      v78 = CFDataCreateWithBytesNoCopy(0, v73, v66, (CFAllocatorRef)bytesa);
      v86 = sub_1B17ED7B4((uint64_t)ValueAtIndex, v79, v80, v81, v82, v83, v84, v85);
      v45 = v105;
      v90 = (const void *)sub_1B17ED204(v78, v86, v105, v107, v49, v87, v88, v89);
      CFRelease(v78);
      sub_1B1874ECC(a8, v90, 0, 0, v91, v92, v93, v94);
      CFRelease(v90);
    }
  }
  CFRelease(theArraya);
}

void sub_1B17AF50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14[3])(uint64_t, uint64_t);
  uint64_t v15;
  CFTypeRef cf;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v15 = a2;
  cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
  v14[0] = 0;
  v14[1] = (uint64_t (*)(uint64_t, uint64_t))sub_1B17AF5CC;
  v14[2] = 0;
  sub_1B17C49C8(a1, v14, 1, (uint64_t)&v15, v10, v11, v12, v13);
  CFRelease(cf);
}

uint64_t sub_1B17AF5CC(float32x4_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  const void *v11;
  const __CFDictionary *v12;
  const void *Value;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;

  v10 = (const void *)sub_1B1868FA0((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    v11 = v10;
    v12 = (const __CFDictionary *)a2[1];
    Value = CFDictionaryGetValue(v12, v10);
    if (Value)
    {
      v11 = (const void *)sub_1B186A758((uint64_t)Value, 1, v14, v15, v16, v17, v18, v19);
      sub_1B186A858((uint64_t)a1, v11, v20, v21, v22, v23, v24, v25);
      sub_1B186A58C(a1, 0, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      v32 = *a2;
      CFRetain(v11);
      v39 = sub_1B17AEC64((uint64_t)a1, v32, v33, v34, v35, v36, v37, v38);
      if (v39)
        CFDictionarySetValue(v12, v11, v39);
    }
    CFRelease(v11);
  }
  return 0;
}

uint64_t sub_1B17AF674(const __CFArray *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  CFIndex v21;
  CFIndex j;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!a3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), 0, a4, a5, a6, a7, a8, (uint64_t)"sourceChannels");
  v11 = -[VFXMesh __createCFObject]_0();
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v13 = Count;
    for (i = 0; i != v13; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      sub_1B1874ECC(v11, ValueAtIndex, *(unsigned __int8 *)(a3 + i), 0, v16, v17, v18, v19);
    }
  }
  v20 = CFArrayGetCount(a2);
  if (v20 >= 1)
  {
    v21 = v20;
    for (j = 0; j != v21; ++j)
    {
      v23 = CFArrayGetValueAtIndex(a2, j);
      sub_1B18760C4(v11, v23, v24, v25, v26, v27, v28, v29);
    }
  }
  return v11;
}

uint64_t sub_1B17AF75C(const __CFArray *a1)
{
  CFIndex Count;
  uint64_t v2;
  const void *ValueAtIndex;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  CFIndex v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  CFIndex v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  CFMutableDataRef Mutable;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t j;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __CFData *v120;
  CFIndex v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __CFData *v136;
  CFIndex v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const __CFAllocator *v171;
  uint64_t v172;
  const void *v173;
  const void *v174;
  CFIndex v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  __int128 v181;
  UInt8 bytes[16];
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(a1);
  if (!Count)
    return 0;
  v2 = Count;
  if (Count == 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, 0);
    return sub_1B18741B0((uint64_t)ValueAtIndex, v4, v5, v6, v7, v8, v9, v10);
  }
  v177 = -[VFXMesh __createCFObject]_0();
  v15 = (const void *)sub_1B1846AB8(0, 0, 0, 3, 1, v12, v13, v14);
  v174 = (const void *)sub_1B1846AB8(0, 1, 0, 3, 1, v16, v17, v18);
  v22 = (const void *)sub_1B1846AB8(0, 3, 0, 2, 1, v19, v20, v21);
  if (v2 >= 1)
  {
    v23 = 0;
    v24 = 0;
    v172 = v2;
    v173 = v15;
    v171 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v176 = v23;
      v25 = CFArrayGetValueAtIndex(a1, v23);
      v30 = sub_1B1875540((uint64_t)v25, 0, 0, 1, v26, v27, v28, v29);
      v35 = sub_1B1875540((uint64_t)v25, 1, 0, 1, v31, v32, v33, v34);
      v179 = (uint64_t)v25;
      v40 = sub_1B1875540((uint64_t)v25, 3, 0, 1, v36, v37, v38, v39);
      v55 = sub_1B17EDAE0((uint64_t)v30, v41, v42, v43, v44, v45, v46, v47);
      if (v55 >= 1)
      {
        for (i = 0; i != v55; ++i)
        {
          *(_DWORD *)&bytes[8] = 0;
          *(_QWORD *)bytes = 0;
          *(double *)&v57 = sub_1B17EE400((uint64_t)v30, i, v49, v50, v51, v52, v53, v54);
          *(_OWORD *)bytes = v57;
          sub_1B1846EC0((uint64_t)v15, (uint64_t)bytes, 1, v58, v59, v60, v61, v62);
          DWORD2(v181) = 0;
          *(_QWORD *)&v181 = 0;
          *(double *)&v69 = sub_1B17EE400((uint64_t)v35, i, v63, v64, v65, v66, v67, v68);
          v181 = v69;
          sub_1B1846EC0((uint64_t)v174, (uint64_t)&v181, 1, v70, v71, v72, v73, v74);
          v180 = 0.0;
          v180 = sub_1B17EE478((uint64_t)v40, i, v75, v76, v77, v78, v79, v80);
          sub_1B1847030((uint64_t)v22, (uint64_t)&v180, 1, v81, v82, v83, v84, v85);
        }
      }
      v86 = v179;
      v178 = v55 + v24;
      if ((uint64_t)sub_1B1874BE0(v179, v48, v49, v50, v51, v52, v53, v54) >= 1)
        break;
LABEL_40:
      v23 = v176 + 1;
      v24 = v178;
      v15 = v173;
      if (v176 + 1 == v172)
        goto LABEL_41;
    }
    v92 = 0;
    while (1)
    {
      v93 = sub_1B1874C3C(v86, v92, 1, v87, v88, v89, v90, v91);
      v101 = sub_1B17A426C((uint64_t)v93, v94, v95, v96, v97, v98, v99, v100);
      Mutable = CFDataCreateMutable(v171, 0);
      v103 = sub_1B17A47FC((uint64_t)v93);
      v110 = v103;
      if (v178 >= 0x10000)
        break;
      if (v103 >= 1)
      {
        for (j = 0; v110 != j; ++j)
        {
          if (v101 == 3)
          {
            *(_WORD *)bytes = 0;
            *(_WORD *)bytes = sub_1B17A4A74((uint64_t)v93, j, 0, 0, v106, v107, v108, v109) + v24;
            v120 = Mutable;
            v121 = 2;
          }
          else if (v101 == 2)
          {
            *(_WORD *)bytes = sub_1B17A4A74((uint64_t)v93, j, 0, 0, v106, v107, v108, v109) + v24;
            *(_WORD *)&bytes[2] = sub_1B17A4A74((uint64_t)v93, j, 1, 0, v122, v123, v124, v125) + v24;
            v120 = Mutable;
            v121 = 4;
          }
          else
          {
            if ((_BYTE)v101)
            {
              sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Unsupported element type in CFXMeshCreateByMergingMeshes"), v104, v105, v106, v107, v108, v109, (uint64_t)"0");
              continue;
            }
            *(_WORD *)bytes = sub_1B17A4A74((uint64_t)v93, j, 0, 0, v106, v107, v108, v109) + v24;
            *(_WORD *)&bytes[2] = sub_1B17A4A74((uint64_t)v93, j, 1, 0, v112, v113, v114, v115) + v24;
            *(_WORD *)&bytes[4] = sub_1B17A4A74((uint64_t)v93, j, 2, 0, v116, v117, v118, v119) + v24;
            v120 = Mutable;
            v121 = 6;
          }
          CFDataAppendBytes(v120, bytes, v121);
        }
      }
      v126 = 2;
LABEL_37:
      v142 = (const void *)sub_1B17A39B4();
      sub_1B17A3C5C((uint64_t)v142, v101, v110, Mutable, v126, v143, v144, v145);
      sub_1B18760C4(v177, v142, v146, v147, v148, v149, v150, v151);
      if (v142)
        CFRelease(v142);
      CFRelease(Mutable);
      ++v92;
      v86 = v179;
      if (v92 >= (uint64_t)sub_1B1874BE0(v179, v152, v153, v154, v155, v156, v157, v158))
        goto LABEL_40;
    }
    if (v103 < 1)
    {
LABEL_36:
      v126 = 4;
      goto LABEL_37;
    }
    v127 = 0;
    while (1)
    {
      if (v101 == 3)
      {
        *(_DWORD *)bytes = 0;
        *(_DWORD *)bytes = sub_1B17A4A74((uint64_t)v93, v127, 0, 0, v106, v107, v108, v109) + v24;
        v136 = Mutable;
        v137 = 4;
      }
      else if (v101 == 2)
      {
        *(_DWORD *)bytes = sub_1B17A4A74((uint64_t)v93, v127, 0, 0, v106, v107, v108, v109) + v24;
        *(_DWORD *)&bytes[4] = sub_1B17A4A74((uint64_t)v93, v127, 1, 0, v138, v139, v140, v141) + v24;
        v136 = Mutable;
        v137 = 8;
      }
      else
      {
        if ((_BYTE)v101)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Unsupported element type in CFXMeshCreateByMergingMeshes"), v104, v105, v106, v107, v108, v109, (uint64_t)"0");
          goto LABEL_35;
        }
        *(_DWORD *)bytes = sub_1B17A4A74((uint64_t)v93, v127, 0, 0, v106, v107, v108, v109) + v24;
        *(_DWORD *)&bytes[4] = sub_1B17A4A74((uint64_t)v93, v127, 1, 0, v128, v129, v130, v131) + v24;
        *(_DWORD *)&bytes[8] = sub_1B17A4A74((uint64_t)v93, v127, 2, 0, v132, v133, v134, v135) + v24;
        v136 = Mutable;
        v137 = 12;
      }
      CFDataAppendBytes(v136, bytes, v137);
LABEL_35:
      if (v110 == ++v127)
        goto LABEL_36;
    }
  }
LABEL_41:
  sub_1B17ED200((uint64_t)v15);
  sub_1B17ED200((uint64_t)v174);
  sub_1B17ED200((uint64_t)v22);
  sub_1B1874ECC(v177, v15, 0, 0, v159, v160, v161, v162);
  sub_1B1874ECC(v177, v174, 0, 0, v163, v164, v165, v166);
  sub_1B1874ECC(v177, v22, 0, 0, v167, v168, v169, v170);
  CFRelease(v15);
  CFRelease(v174);
  CFRelease(v22);
  return v177;
}

const void *sub_1B17AFD64(uint64_t a1, CFIndex a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t *v51;
  float32x2_t *v52;
  _BOOL4 v53;
  uint64_t i;
  uint64_t *v55;
  uint64_t *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x4_t *v77;
  uint64_t j;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float32x4_t v133;
  uint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float v140;
  float32x4_t v141;
  char v142;
  char v143;
  float32x4_t v144;
  int32x4_t v145;
  float32x2_t v146;
  float32x2_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float v150;
  float v151;
  float v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float v156;
  float32x4_t v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  float v166;
  float v167;
  float v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t k;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  BOOL v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  BOOL v231;
  BOOL v232;
  uint64_t v233;
  uint64_t v234;
  BOOL v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  uint64_t v244;
  uint64_t v248;
  uint64_t v249;
  const void *v250;
  const void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  float32x4_t v255;
  int v256;
  float32x4_t v257;
  float32x4_t v258;
  CFTypeRef cfb[2];
  CFTypeRef cfc[2];
  CFTypeRef cfd[2];
  CFTypeRef cf[2];
  _QWORD *cfa;
  _DWORD v264[2];
  _OWORD v265[2];
  _OWORD v266[2];
  uint64_t v267;

  v267 = *MEMORY[0x1E0C80C00];
  v14 = sub_1B17A47FC((uint64_t)a3);
  if (sub_1B17A426C((uint64_t)a3, v15, v16, v17, v18, v19, v20, v21) == 2)
    return 0;
  v256 = a7;
  v253 = (uint64_t)a3;
  v251 = (const void *)sub_1B184A124(a3, 4 * v14, v22, v23, v24, v25, v26, v27);
  v254 = sub_1B17EDAE0(a4, v29, v30, v31, v32, v33, v34, v35);
  v36 = sub_1B18498C4(a1, a2);
  v44 = sub_1B1849B4C((uint64_t)v36, v37, v38, v39, v40, v41, v42, v43);
  v51 = (float32x4_t *)malloc_type_malloc(16 * v44, 0x1000040451B5BE8uLL);
  v252 = v14;
  v250 = v36;
  if (a6)
  {
    v52 = (float32x2_t *)malloc_type_malloc(8 * v44, 0x100004000313F17uLL);
    v53 = a5 != 0;
LABEL_7:
    if (v44 >= 1)
    {
      for (i = 0; i != v44; ++i)
      {
        v55 = (uint64_t *)sub_1B1849B94((uint64_t)v36, i, v45, v46, v47, v48, v49, v50);
        v56 = v55;
        if (v53)
        {
          *(double *)&v57 = sub_1B17EE400(a5, *v55, v45, v46, v47, v48, v49, v50);
          *(_OWORD *)cfb = v57;
          *(double *)v64.i64 = sub_1B17EE400(a5, v56[1], v58, v59, v60, v61, v62, v63);
          v65.i64[0] = 0x3F0000003F000000;
          v65.i64[1] = 0x3F0000003F000000;
          v66 = vmulq_f32(vaddq_f32(*(float32x4_t *)cfb, v64), v65);
          v67 = (int32x4_t)vmulq_f32(v66, v66);
          v67.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v67, 2), vadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1))).u32[0];
          v68 = vrsqrte_f32((float32x2_t)v67.u32[0]);
          v69 = vmul_f32(v68, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v68, v68)));
          v51[i] = vmulq_n_f32(v66, vmul_f32(v69, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v69, v69))).f32[0]);
        }
        if (a6)
        {
          v70 = sub_1B17EE478(a6, *v56, v45, v46, v47, v48, v49, v50);
          v52[i] = vmul_f32(vadd_f32(*(float32x2_t *)&v70, COERCE_FLOAT32X2_T(sub_1B17EE478(a6, v56[1], v71, v72, v73, v74, v75, v76))), (float32x2_t)0x3F0000003F000000);
        }
      }
    }
    if (v53)
      sub_1B1846EC0(a5, (uint64_t)v51, v44, v46, v47, v48, v49, v50);
    if (a6)
      sub_1B1847030(a6, (uint64_t)v52, v44, v46, v47, v48, v49, v50);
    if (v52)
      free(v52);
    goto LABEL_20;
  }
  v53 = a5 != 0;
  if (a5)
  {
    v52 = 0;
    goto LABEL_7;
  }
LABEL_20:
  v77 = v51;
  if (v44 >= 1)
  {
    for (j = 0; j != v44; ++j)
    {
      v79 = (uint64_t *)sub_1B1849B94((uint64_t)v250, j, v45, v46, v47, v48, v49, v50);
      *(double *)&v86 = sub_1B17EE400(a4, *v79, v80, v81, v82, v83, v84, v85);
      *(_OWORD *)cfc = v86;
      *(double *)v93.i64 = sub_1B17EE400(a4, v79[1], v87, v88, v89, v90, v91, v92);
      v94.i64[0] = 0x3F0000003F000000;
      v94.i64[1] = 0x3F0000003F000000;
      v51[j] = vmulq_f32(vaddq_f32(*(float32x4_t *)cfc, v93), v94);
    }
    if ((v53 & v256) == 1)
    {
      v95 = 0;
      v249 = a4;
      do
      {
        v96 = (uint64_t *)sub_1B1849B94((uint64_t)v250, v95, v45, v46, v47, v48, v49, v50);
        v97 = *v96;
        v98 = v96[1];
        *(double *)v105.i64 = sub_1B17EE400(a4, *v96, v99, v100, v101, v102, v103, v104);
        v257 = v105;
        v266[0] = v105;
        *(double *)&v112 = sub_1B17EE400(a4, v98, v106, v107, v108, v109, v110, v111);
        *(_OWORD *)cfd = v112;
        v266[1] = v112;
        *(double *)&v119 = sub_1B17EE400(a5, v97, v113, v114, v115, v116, v117, v118);
        v265[0] = v119;
        *(double *)&v126 = sub_1B17EE400(a5, v98, v120, v121, v122, v123, v124, v125);
        v265[1] = v126;
        v255 = v77[v95];
        *(double *)v133.i64 = sub_1B17EE400(a5, v95 + v254, v127, v128, v129, v130, v131, v132);
        v134 = 0;
        v135 = vsubq_f32(v257, v255);
        v136 = vmulq_f32(v135, v135);
        v137 = vsubq_f32(*(float32x4_t *)cfd, v255);
        v138 = vmulq_f32(v137, v137);
        v264[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1))).f32[0]);
        v264[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 2), vaddq_f32(v138, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.f32, 1))).f32[0]);
        *(float32x4_t *)cf = v133;
        v139 = vmulq_f32(v133, v133);
        v140 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v139, 2), vaddq_f32(v139, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v139.f32, 1))).f32[0]);
        v141 = 0uLL;
        v142 = 1;
        do
        {
          v258 = v141;
          v143 = v142;
          v144 = vsubq_f32((float32x4_t)v266[v134], v255);
          v145 = (int32x4_t)vmulq_f32(v144, v144);
          v145.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v145, 2), vadd_f32(*(float32x2_t *)v145.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v145.i8, 1))).u32[0];
          v146 = vrsqrte_f32((float32x2_t)v145.u32[0]);
          v147 = vmul_f32(v146, vrsqrts_f32((float32x2_t)v145.u32[0], vmul_f32(v146, v146)));
          v148 = vmulq_n_f32(v144, vmul_f32(v147, vrsqrts_f32((float32x2_t)v145.u32[0], vmul_f32(v147, v147))).f32[0]);
          v149 = vmulq_f32(v148, v148);
          v150 = v140
               * sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 2), vaddq_f32(v149, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1))).f32[0]);
          v151 = 0.0;
          v152 = 0.0;
          if (v150 > 0.0)
          {
            v153 = vmulq_f32(v148, *(float32x4_t *)cf);
            v152 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v153, 2), vaddq_f32(v153, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v153.f32, 1))).f32[0]/ v150);
          }
          v154 = (float32x4_t)v265[v134];
          v155 = vmulq_f32(v154, v154);
          v156 = v140
               * sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v155, 2), vaddq_f32(v155, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v155.f32, 1))).f32[0]);
          if (v156 > 0.0)
          {
            v157 = vmulq_f32(*(float32x4_t *)cf, v154);
            v151 = acosf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 2), vaddq_f32(v157, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v157.f32, 1))).f32[0]/ v156);
          }
          v158 = v151 * 0.5;
          v165 = cosf(v158);
          if (v165 == 0.0)
          {
            sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshSubdivide inconsistency"), v159, v160, v161, v162, v163, v164, v248);
            v166 = 1.0;
          }
          else
          {
            v166 = v165;
          }
          v167 = *(float *)&v264[v134];
          v168 = cosf(v152 - v158);
          v142 = 0;
          v141 = vaddq_f32(v258, vmulq_n_f32(*(float32x4_t *)cf, (float)((float)(v168 * v167) / v166) * 0.5));
          v134 = 1;
        }
        while ((v143 & 1) != 0);
        v77 = v51;
        v51[v95++] = vaddq_f32(v255, v141);
        a4 = v249;
      }
      while (v95 != v44);
    }
  }
  sub_1B1846EC0(a4, (uint64_t)v77, v44, v46, v47, v48, v49, v50);
  free(v77);
  cfa = sub_1B1849C38(v253, a4, (uint64_t)v250, v169, v170, v171, v172, v173);
  if (v252 >= 1)
  {
    for (k = 0; k != v252; ++k)
    {
      v182 = (uint64_t *)sub_1B1849EDC((uint64_t)cfa, k, v175, v176, v177, v178, v179, v180);
      v184 = *v182;
      v183 = v182[1];
      v185 = v182[2];
      v192 = (uint64_t *)sub_1B1849B94((uint64_t)v250, *v182, v186, v187, v188, v189, v190, v191);
      v199 = (_QWORD *)sub_1B1849B94((uint64_t)v250, v183, v193, v194, v195, v196, v197, v198);
      v206 = (uint64_t *)sub_1B1849B94((uint64_t)v250, v185, v200, v201, v202, v203, v204, v205);
      v211 = sub_1B17A4A74(v253, k, 0, 0, v207, v208, v209, v210);
      v216 = sub_1B17A4A74(v253, k, 2, 0, v212, v213, v214, v215);
      v223 = *v192;
      if (*v192 == v211)
      {
        v224 = v192[1];
        v225 = v254;
        v226 = v184 + v254;
        v227 = v224 == v216;
        if (v224 == v216)
          v228 = v184 + v254;
        else
          v228 = -1;
        if (v227)
          v226 = -1;
        v229 = -1;
      }
      else
      {
        v230 = v192[1];
        v225 = v254;
        v231 = v230 == v211;
        if (v230 == v211)
          v226 = v184 + v254;
        else
          v226 = -1;
        if (v231)
          v229 = -1;
        else
          v229 = v184 + v254;
        v232 = v223 == v216;
        if (v223 == v216)
          v228 = v226;
        else
          v228 = -1;
        if (v232)
          v226 = -1;
      }
      if (*v199 == v211)
      {
        if (v199[1] == v216)
          v228 = v183 + v225;
        else
          v226 = v183 + v225;
      }
      else
      {
        v233 = v199[1];
        v234 = v183 + v225;
        v235 = v233 == v211;
        if (v233 == v211)
        {
          v236 = v183 + v225;
        }
        else
        {
          v229 = v183 + v225;
          v236 = v226;
        }
        if (!v235)
          v234 = v228;
        if (*v199 == v216)
          v228 = v234;
        else
          v226 = v236;
      }
      v237 = *v206;
      if (*v206 == v211)
      {
        v238 = v206[1];
        if (v238 == v216)
          v239 = v185 + v225;
        else
          v239 = v228;
        if (v238 == v216)
          v240 = v226;
        else
          v240 = v185 + v225;
      }
      else
      {
        v241 = v206[1];
        v242 = v185 + v225;
        v243 = v241 == v211;
        if (v241 == v211)
        {
          v244 = v185 + v225;
        }
        else
        {
          v229 = v185 + v225;
          v244 = v226;
        }
        if (!v243)
          v242 = v228;
        if (v237 == v216)
          v239 = v242;
        else
          v239 = v228;
        if (v237 == v216)
          v240 = v226;
        else
          v240 = v244;
      }
      if (v239 == -1 || v240 == -1 || v229 == -1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. inconsistency (2) in CFXMeshSubdivide"), v217, v218, v219, v220, v221, v222, (uint64_t)"D!=-1 && E!=-1 && F !=-1");
      sub_1B184A314((uint64_t)v251, k, v239, v240, v229, v220, v221, v222, v248);
    }
  }
  v28 = (const void *)sub_1B184A50C((uint64_t)v251, v174, v175, v176, v177, v178, v179, v180);
  CFRetain(v28);
  CFRelease(v251);
  CFRelease(v250);
  CFRelease(cfa);
  return v28;
}

uint64_t sub_1B17B04C0(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFData *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const void *v54;
  uint64_t v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v78[4];

  memset(v78, 0, sizeof(v78));
  v10 = sub_1B18741B0(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v17 = sub_1B1875E70(v10, 0, v11, v12, v13, v14, v15, v16);
  v18 = (const void *)sub_1B17EE33C((uint64_t)v17);
  v26 = (__CFData *)sub_1B18F5B98((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25);
  v34 = sub_1B17EDAE0((uint64_t)v18, v27, v28, v29, v30, v31, v32, v33);
  sub_1B17B05DC(v26, 0, v34, (uint64_t)a2, 0, v35, v36, v37);
  v43 = sub_1B1875D94(a1, 0, 0, v38, v39, v40, v41, v42);
  sub_1B1875414(v10, v18, 0, v43, v44, v45, v46, v47);
  v54 = sub_1B18760A0(v10, 0, v48, v49, v50, v51, v52, v53);
  if (v54)
  {
    v55 = (uint64_t)v54;
    v56 = (const void *)sub_1B17EE33C((uint64_t)v54);
    sub_1B17ADDC8(a2, v78, v57, v58, v59, v60, v61, v62);
    sub_1B17B0708((uint64_t)v56, v55, (uint64_t)v78, 0, v63, v64, v65, v66, *(uint64_t *)&v78[0]);
    v72 = sub_1B1875D94(a1, 1, 0, v67, v68, v69, v70, v71);
    sub_1B1875414(v10, v56, 0, v72, v73, v74, v75, v76);
    CFRelease(v56);
  }
  CFRelease(v18);
  return v10;
}

__CFData *sub_1B17B05DC(__CFData *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  __CFData *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;

  if (a3 >= 1)
  {
    v8 = a5;
    v10 = a3;
    v12 = result;
    do
    {
      result = sub_1B18F3A4C(v12, a2, a3, a4, a5, a6, a7, a8);
      v13.i32[0] = *(_DWORD *)result;
      v14 = v13;
      v14.i32[1] = *((_DWORD *)result + 1);
      v15 = v14;
      v15.i32[2] = *((_DWORD *)result + 2);
      v16 = *(float32x4_t *)a4;
      v17 = *(float32x4_t *)(a4 + 16);
      v18 = *(float32x4_t *)(a4 + 32);
      if (v8)
      {
        v19 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v18, v15, 2), v17, *(float32x2_t *)v14.f32, 1), v16, v13.f32[0]);
        v20 = vmulq_f32(v15, v15);
        v21 = vmulq_f32(v19, v19);
        v21.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u64[0];
        v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 0);
        v22.i32[3] = 0;
        v23 = vrsqrteq_f32(v22);
        v24 = vmulq_f32(v23, vrsqrtsq_f32(v22, vmulq_f32(v23, v23)));
        v25 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v21.f32[0] != 0.0)), 0x1FuLL));
        v25.i32[3] = 0;
        v26 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v25), (int8x16_t)vmulq_f32(v19, vmulq_n_f32(vmulq_f32(v24, vrsqrtsq_f32(v22, vmulq_f32(v24, v24))), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0]))), (int8x16_t)v19);
      }
      else
      {
        v26 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a4 + 48), v18, v15, 2), v17, *(float32x2_t *)v14.f32, 1), v16, v13.f32[0]);
      }
      *(_QWORD *)result = v26.i64[0];
      *((_DWORD *)result + 2) = v26.i32[2];
      ++a2;
      --v10;
    }
    while (v10);
  }
  return result;
}

void sub_1B17B0708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFData *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __CFData *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v13 = (__CFData *)sub_1B18F5B98(a1, a2, a3, a4, a5, a6, a7, a8);
  v21 = sub_1B18F5B98(a2, v14, v15, v16, v17, v18, v19, v20);
  v22 = sub_1B18F39CC(v21);
  if ((sub_1B18F3BF0(v21, (uint64_t)v13, a4, v23, v24, v25, v26, v27) & 1) != 0)
  {
    v34 = sub_1B18F3A4C(v13, 0, v28, v29, v30, v31, v32, v33);
    v35 = sub_1B18F39CC((uint64_t)v13);
    v36 = sub_1B18F385C(v21);
    sub_1B1846B84(a1, (uint64_t)v34, v35, v36);
    if (a3)
    {
      v44 = sub_1B17ED7B4(a1, v37, v38, v39, v40, v41, v42, v43) == 1;
      sub_1B17B05DC(v13, a4, v22, a3, v44, v45, v46, v47);
    }
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXSourceAccessorCopyDataToAccessor failed"), v28, v29, v30, v31, v32, v33, a9);
  }
}

uint64_t sub_1B17B0810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  uint64_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  CFIndex v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const __CFData *v83;
  const __CFData *v84;
  const UInt8 *BytePtr;
  uint64_t v86;
  const UInt8 *v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int16 *v95;
  unsigned __int8 *v96;
  __int32 v97;
  unsigned int *v98;
  float32x2_t v99;
  float32x2_t v100;
  int32x2_t v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x4_t v109;
  const __CFString *v110;
  uint64_t v111;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  float32x2_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float v126;
  CFDataRef v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t length;
  uint64_t v133;
  unsigned __int8 v134;
  unsigned int v135;
  uint64_t v136;
  const UInt8 *v137;
  const UInt8 *v138;
  CFIndex v139;
  int v140[2];
  const __CFArray *v141;
  unsigned int v142;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v10 = sub_1B1875E70(a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = sub_1B18760A0(a1, a2, v11, v12, v13, v14, v15, v16);
  v29 = sub_1B1875540(a1, 3, 0, a2, v18, v19, v20, v21);
  if (v10)
  {
    if (v17)
      goto LABEL_5;
LABEL_45:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"normalSource");
    if (v29)
      goto LABEL_6;
LABEL_46:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"uvSource");
    goto LABEL_6;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"positionSource");
  if (!v17)
    goto LABEL_45;
LABEL_5:
  if (!v29)
    goto LABEL_46;
LABEL_6:
  v30 = sub_1B17ED6C4((uint64_t)v10, v22, v23, v24, v25, v26, v27, v28);
  if (!v30 || (v38 = v31, !(_DWORD)v31))
  {
    v110 = CFSTR("Error: Cannot generate tangents without valid positions");
    goto LABEL_49;
  }
  v39 = v30;
  *(_QWORD *)v140 = a1;
  v40 = sub_1B17ED6C4((uint64_t)v29, v31, v32, v33, v34, v35, v36, v37);
  if (!v40 || (v42 = BYTE5(v41), (_DWORD)v41 != (_DWORD)v38))
  {
    v110 = CFSTR("Error: Cannot generate valid tangents without valid texture coordinates");
    goto LABEL_49;
  }
  v43 = v40;
  v44 = sub_1B17ED6C4((uint64_t)v17, v41, v32, v33, v34, v35, v36, v37);
  if (!v44 || (v47 = v46, v45 != (_DWORD)v38))
  {
    v110 = CFSTR("Error: Cannot generate valid tangents without valid normals");
    goto LABEL_49;
  }
  v48 = v44;
  v49 = (float32x4_t *)malloc_type_calloc(16 * v38, 1uLL, 0x8843F625uLL);
  v50 = (float32x4_t *)malloc_type_calloc(16 * v38, 1uLL, 0x9A07271AuLL);
  v141 = sub_1B1874BE0(a1, v51, v52, v53, v54, v55, v56, v57);
  length = 16 * v38;
  v133 = v38;
  v135 = v38;
  v136 = v48;
  v134 = v47;
  if ((uint64_t)v141 >= 1)
  {
    v64 = 0;
    LOBYTE(v38) = 0;
    v65 = BYTE5(v38);
    v66 = v42;
    v67 = *(_QWORD *)v140;
    while (1)
    {
      v68 = sub_1B1874C3C(v67, v64, 1, v58, v59, v60, v61, v62);
      if (sub_1B17A426C((uint64_t)v68, v69, v70, v71, v72, v73, v74, v75)
        && sub_1B17A426C((uint64_t)v68, v76, v77, v78, v79, v80, v81, v82) != 1)
      {
        goto LABEL_41;
      }
      v142 = 0;
      v83 = (const __CFData *)sub_1B17A4570((uint64_t)v68, &v142);
      if (v83)
      {
        v84 = v83;
        BytePtr = CFDataGetBytePtr(v83);
        if (BytePtr)
          break;
      }
LABEL_40:
      v67 = *(_QWORD *)v140;
LABEL_41:
      if ((const __CFArray *)++v64 == v141)
        goto LABEL_53;
    }
    switch(v142)
    {
      case 1u:
        v87 = 0;
        v137 = BytePtr;
        break;
      case 4u:
        v137 = 0;
        v138 = BytePtr;
        v87 = 0;
LABEL_26:
        v88 = sub_1B17A47FC((uint64_t)v68);
        v139 = 3 * v88 * v142;
        if (v139 > CFDataGetLength(v84))
        {
          free(v49);
          free(v50);
          v110 = CFSTR("Error: invalid geometry detected - skip CFXCreateTangentsWithGeometryOptimized");
LABEL_49:
          sub_1B17C4408(16, (uint64_t)v110, v32, v33, v34, v35, v36, v37, v131);
          return 0;
        }
        if (v88 < 1)
        {
          LOBYTE(v38) = 0;
        }
        else
        {
          v92 = 0;
          v93 = 0;
          v94 = 0;
          v95 = (unsigned __int16 *)(v87 + 4);
          v96 = (unsigned __int8 *)(v137 + 2);
          v97 = 0;
          v98 = (unsigned int *)(v138 + 4);
          do
          {
            if (v87)
            {
              v94 = *(v95 - 2);
              v93 = *(v95 - 1);
              v92 = *v95;
            }
            else if (v138)
            {
              v94 = *(v98 - 1);
              v93 = *v98;
              v92 = v98[1];
            }
            else if (v137)
            {
              v94 = *(v96 - 2);
              v93 = *(v96 - 1);
              v92 = *v96;
            }
            v99 = *(float32x2_t *)(v43 + v94 * v66);
            v100 = vsub_f32(*(float32x2_t *)(v43 + v93 * v66), v99);
            v101 = (int32x2_t)vsub_f32(*(float32x2_t *)(v43 + v92 * v66), v99);
            v102 = vmlas_n_f32((float)-v100.f32[1] * *(float *)v101.i32, *(float *)&v101.i32[1], v100.f32[0]);
            if (v102 == 0.0)
            {
              v101 = (int32x2_t)vadd_f32((float32x2_t)v101, (float32x2_t)0xB400000034000000);
              v100 = vadd_f32(v100, (float32x2_t)0xB4000000B4000000);
              v102 = vmlas_n_f32((float)-v100.f32[1] * *(float *)v101.i32, *(float *)&v101.i32[1], v100.f32[0]);
            }
            v103 = v39 + v94 * v65;
            v89.i64[0] = *(_QWORD *)v103;
            v89.i32[2] = *(_DWORD *)(v103 + 8);
            v104 = v39 + v93 * v65;
            v90.i64[0] = *(_QWORD *)v104;
            v90.i32[2] = *(_DWORD *)(v104 + 8);
            v105 = v39 + v92 * v65;
            v91.i64[0] = *(_QWORD *)v105;
            v91.i32[2] = *(_DWORD *)(v105 + 8);
            v90 = vsubq_f32(v90, v89);
            v89 = vsubq_f32(v91, v89);
            v106 = v102;
            v107 = vrecpe_f32((float32x2_t)LODWORD(v102));
            v108 = vmul_f32(v107, vrecps_f32((float32x2_t)LODWORD(v106), v107));
            v108.i32[0] = vmul_f32(v108, vrecps_f32((float32x2_t)LODWORD(v106), v108)).u32[0];
            v91 = vmulq_n_f32(vmlaq_lane_f32(vmulq_lane_f32(vnegq_f32(v89), v100, 1), v90, (float32x2_t)v101, 1), v108.f32[0]);
            v91.i32[3] = v97;
            v49[v94] = vaddq_f32(v49[v94], v91);
            v49[v93] = vaddq_f32(v49[v93], v91);
            v49[v92] = vaddq_f32(v49[v92], v91);
            v109 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v90, vnegq_f32((float32x4_t)vdupq_lane_s32(v101, 0))), v89, v100.f32[0]), v108.f32[0]);
            v109.i32[3] = 0;
            v50[v94] = vaddq_f32(v109, v50[v94]);
            v50[v93] = vaddq_f32(v109, v50[v93]);
            v50[v92] = vaddq_f32(v109, v50[v92]);
            v95 += 3;
            v96 += 3;
            v98 += 3;
            v97 = v91.i32[3];
            --v88;
          }
          while (v88);
          LOBYTE(v38) = 1;
        }
        goto LABEL_40;
      case 2u:
        v137 = 0;
        v87 = BytePtr;
        break;
      default:
        sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unsupported index size (%zu)"), v86, v58, v59, v60, v61, v62, v142);
        v137 = 0;
        v87 = 0;
        break;
    }
    v138 = 0;
    goto LABEL_26;
  }
  LOBYTE(v38) = 0;
LABEL_53:
  v113 = 0;
  v114 = 0;
  if (v135 <= 1)
    v115 = 1;
  else
    v115 = v135;
  v116 = 16 * v115;
  do
  {
    v117 = v136 + v114;
    v63.i64[0] = *(_QWORD *)v117;
    v118 = v63;
    v118.i32[2] = *(_DWORD *)(v117 + 8);
    v63.i32[2] = v118.i32[2];
    v119 = v49[v113 / 0x10];
    v120 = vmulq_f32(v119, v63);
    v121 = vmlsq_lane_f32(v119, v118, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 2), vaddq_f32(v120, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v120.f32, 1))), 0);
    v122 = (int32x4_t)vmulq_f32(v121, v121);
    v122.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v122, 2), vadd_f32(*(float32x2_t *)v122.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v122.i8, 1))).u32[0];
    v123 = vrsqrte_f32((float32x2_t)v122.u32[0]);
    v63 = vmulq_n_f32(v121, vmul_f32(v123, vrsqrts_f32((float32x2_t)v122.u32[0], vmul_f32(v123, v123))).f32[0]);
    v124 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), (int8x16_t)v63, 0xCuLL), vnegq_f32(v118)), v63, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL));
    v125 = vmulq_f32(v50[v113 / 0x10], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v124, v124), (int8x16_t)v124, 0xCuLL));
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 2), vaddq_f32(v125, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.f32, 1))).f32[0] < 0.0)v126 = -1.0;
    else
      v126 = 1.0;
    v63.f32[3] = v126;
    v49[v113 / 0x10] = v63;
    v114 += v134;
    v113 += 16;
  }
  while (v116 != v113);
  free(v50);
  if ((v38 & 1) == 0)
  {
    free(v49);
    return 0;
  }
  v127 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v49, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  v111 = sub_1B17ED204(v127, 4, v133, 4, 1, v128, v129, v130);
  CFRelease(v127);
  return v111;
}

uint64_t sub_1B17B0E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFArray *v38;
  size_t v39;
  UInt8 *v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CFIndex v64;
  char v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t i;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t v99;
  float v100;
  float v101;
  float32x4_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  float v110;
  float32x4_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  float v119;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float v127;
  float v128;
  float32x4_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float v136;
  float v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  float v146;
  float32x4_t v147;
  float32x2_t v148;
  unint64_t v149;
  float v150;
  float v151;
  float v152;
  float v153;
  float32x4_t v154;
  float32x4_t v155;
  float v156;
  float v157;
  float v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  float32x2_t v163;
  uint64_t v164;
  uint64_t v165;
  float32x2_t v166;
  uint64_t v167;
  unsigned __int8 v168;
  unsigned __int8 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int32x4_t v178;
  const float *v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  float32x4_t v184;
  uint64_t v185;
  __int32 *v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  int32x4_t v191;
  float32x2_t v192;
  float32x2_t v193;
  float32x4_t v194;
  float32x4_t v195;
  CFDataRef v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  CFIndex length;
  uint64_t v203;
  uint64_t v204;
  const __CFArray *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;

  v9 = a1;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v10 = sub_1B1875E70(v9, a2, a3, a4, a5, a6, a7, a8);
  v17 = sub_1B18760A0(v9, a2, v11, v12, v13, v14, v15, v16);
  v29 = sub_1B1875540(v9, 3, 0, a2, v18, v19, v20, v21);
  if (v10)
  {
    if (v17)
      goto LABEL_5;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"positionSource");
    if (v17)
      goto LABEL_5;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"normalSource");
LABEL_5:
  v203 = (uint64_t)v17;
  if (!v29)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"uvSource");
  v30 = sub_1B17EDAE0((uint64_t)v10, v22, v23, v24, v25, v26, v27, v28);
  v38 = sub_1B1874BE0(v9, v31, v32, v33, v34, v35, v36, v37);
  v204 = v30;
  v39 = 16 * v30;
  v40 = (UInt8 *)malloc_type_calloc(16 * v30, 1uLL, 0x8E80353AuLL);
  length = v39;
  v41 = malloc_type_calloc(v39, 1uLL, 0xEA77C316uLL);
  v212 = sub_1B17ED6C4((uint64_t)v10, v42, v43, v44, v45, v46, v47, v48);
  v50 = WORD2(v49);
  v211 = sub_1B17ED6C4((uint64_t)v29, v49, v51, v52, v53, v54, v55, v56);
  if ((uint64_t)v38 < 1)
  {
    v65 = 0;
  }
  else
  {
    v64 = 0;
    v65 = 0;
    v209 = HIBYTE(v50);
    v210 = v50;
    v207 = BYTE5(v57);
    v208 = BYTE4(v57);
    v205 = v38;
    v206 = v9;
    do
    {
      v66 = sub_1B1874C3C(v9, v64, 1, v59, v60, v61, v62, v63);
      if (!sub_1B17A426C((uint64_t)v66, v67, v68, v69, v70, v71, v72, v73)
        || sub_1B17A426C((uint64_t)v66, v74, v75, v76, v77, v78, v79, v80) == 1)
      {
        v213 = sub_1B17A47FC((uint64_t)v66);
        if (v213 < 1)
        {
          v65 = 0;
        }
        else
        {
          for (i = 0; i != v213; ++i)
          {
            v82 = sub_1B17A4A74((uint64_t)v66, i, 0, 0, v60, v61, v62, v63);
            v87 = sub_1B17A4A74((uint64_t)v66, i, 1, 0, v83, v84, v85, v86);
            v92 = sub_1B17A4A74((uint64_t)v66, i, 2, 0, v88, v89, v90, v91);
            *(double *)v102.i64 = sub_1B198D4F8(v210, (const float *)(v212 + v82 * v209), v93, v94, v95, v96, v97, v98, v99, v100, v101);
            v216 = v102;
            *(double *)v111.i64 = sub_1B198D4F8(v210, (const float *)(v212 + v87 * v209), v103, v104, v105, v106, v107, v108, v102, v109, v110);
            v215 = v111;
            *(double *)v120.i64 = sub_1B198D4F8(v210, (const float *)(v212 + v92 * v209), v112, v113, v114, v115, v116, v117, v111, v118, v119);
            v214 = v120;
            *(double *)v129.i64 = sub_1B198D4F8(v208, (const float *)(v211 + v82 * v207), v121, v122, v123, v124, v125, v126, v120, v127, v128);
            v218 = v129;
            *(double *)v138.i64 = sub_1B198D4F8(v208, (const float *)(v211 + v87 * v207), v130, v131, v132, v133, v134, v135, v129, v136, v137);
            v217 = v138;
            *(double *)v147.i64 = sub_1B198D4F8(v208, (const float *)(v211 + v92 * v207), v139, v140, v141, v142, v143, v144, v138, v145, v146);
            v148 = (float32x2_t)vsubq_f32(v217, v218).u64[0];
            v149 = vsubq_f32(v147, v218).u64[0];
            v150 = v148.f32[1];
            v151 = *((float *)&v149 + 1);
            v152 = -*(float *)&v149;
            v153 = vmlas_n_f32(vmuls_lane_f32(-*(float *)&v149, v148, 1), *((float *)&v149 + 1), v148.f32[0]);
            if (v153 == 0.0)
            {
              v150 = v148.f32[1] + 0.00000011921;
              v151 = *((float *)&v149 + 1) + -0.00000011921;
              v148.f32[0] = v148.f32[0] + -0.00000011921;
              v152 = -(float)(*(float *)&v149 + -0.00000011921);
              v153 = (float)(v148.f32[0] * (float)(*((float *)&v149 + 1) + -0.00000011921))
                   - (float)((float)(*(float *)&v149 + -0.00000011921) * (float)(v148.f32[1] + 0.00000011921));
            }
            v154 = vsubq_f32(v215, v216);
            v155 = vsubq_f32(v214, v216);
            v156 = 1.0 / v153;
            v157 = -v150;
            v158 = (float)((float)(v151 * v154.f32[2]) - (float)(v150 * v155.f32[2])) * v156;
            v159 = 4 * v82;
            v160 = (16 * v82) | 8;
            *(float *)&v40[v160] = v158 + *(float *)&v40[v160];
            v161 = (16 * v87) | 8;
            v162 = 4 * v87;
            *(float *)&v40[v161] = v158 + *(float *)&v40[v161];
            v163 = vmul_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v155.f32, v157), *(float32x2_t *)v154.f32, v151), v156);
            *(float32x2_t *)&v40[v159 * 4] = vadd_f32(*(float32x2_t *)&v40[16 * v82], v163);
            v164 = 4 * v92;
            *(float32x2_t *)&v40[v162 * 4] = vadd_f32(v163, *(float32x2_t *)&v40[16 * v87]);
            *(float32x2_t *)&v40[v164 * 4] = vadd_f32(v163, *(float32x2_t *)&v40[16 * v92]);
            v165 = (16 * v92) | 8;
            *(float *)&v40[v165] = v158 + *(float *)&v40[v165];
            v163.f32[0] = (float)((float)(v154.f32[2] * v152) + (float)(v148.f32[0] * v155.f32[2])) * v156;
            *(float *)((char *)v41 + v160) = v163.f32[0] + *(float *)((char *)v41 + v160);
            *(float *)((char *)v41 + v161) = v163.f32[0] + *(float *)((char *)v41 + v161);
            v166 = vmul_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)v154.f32, v152), *(float32x2_t *)v155.f32, v148.f32[0]), v156);
            *(float32x2_t *)&v41[v159] = vadd_f32(v166, *(float32x2_t *)&v41[4 * v82]);
            *(float32x2_t *)&v41[v162] = vadd_f32(v166, *(float32x2_t *)&v41[4 * v87]);
            *(float32x2_t *)&v41[v164] = vadd_f32(v166, *(float32x2_t *)&v41[4 * v92]);
            *(float *)((char *)v41 + v165) = v163.f32[0] + *(float *)((char *)v41 + v165);
          }
          v65 = 1;
          v38 = v205;
          v9 = v206;
        }
      }
      ++v64;
    }
    while ((const __CFArray *)v64 != v38);
  }
  v167 = sub_1B17ED6C4(v203, v57, v58, v59, v60, v61, v62, v63);
  if (v204 >= 1)
  {
    v179 = (const float *)v167;
    v180 = 0;
    v181 = v168;
    v182 = v169;
    v183 = v204;
    do
    {
      *(double *)v184.i64 = sub_1B198D4F8(v181, v179, v170, v171, v172, v173, v174, v175, v176, v177.f32[0], *(float *)v178.i32);
      v185 = 4 * v180;
      v186 = (__int32 *)&v40[4 * v180 + 8];
      v187.i64[0] = *(_QWORD *)&v40[v185];
      v188 = v187;
      v187.i32[2] = *v186;
      v188.i32[2] = *v186;
      v189 = vmulq_f32(v184, v187);
      v190 = vmlsq_lane_f32(v188, v184, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v189, 2), vaddq_f32(v189, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v189.f32, 1))), 0);
      v191 = (int32x4_t)vmulq_f32(v190, v190);
      v191.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v191, 2), vadd_f32(*(float32x2_t *)v191.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v191.i8, 1))).u32[0];
      v192 = vrsqrte_f32((float32x2_t)v191.u32[0]);
      v193 = vmul_f32(v192, vrsqrts_f32((float32x2_t)v191.u32[0], vmul_f32(v192, v192)));
      v194 = vmulq_n_f32(v190, vmul_f32(v193, vrsqrts_f32((float32x2_t)v191.u32[0], vmul_f32(v193, v193))).f32[0]);
      *(_QWORD *)&v40[v185] = v194.i64[0];
      *v186 = v194.i32[2];
      v194.i64[0] = *(_QWORD *)&v41[(unint64_t)v185 / 4];
      v194.i32[2] = v41[v180 + 2];
      v178 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v188, (int32x4_t)v188), (int8x16_t)v188, 0xCuLL), vnegq_f32(v184)), v188, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v184, (int32x4_t)v184), (int8x16_t)v184, 0xCuLL));
      v195 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v178, v178), (int8x16_t)v178, 0xCuLL), v194);
      v177 = vaddq_f32(v195, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v195.f32, 1));
      v176 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v195, 2), v177);
      if (v176.f32[0] < 0.0)
        v176.f32[0] = -1.0;
      else
        v176.f32[0] = 1.0;
      *(_DWORD *)&v40[4 * v180 + 12] = v176.i32[0];
      v180 += 4;
      v179 = (const float *)((char *)v179 + v182);
      --v183;
    }
    while (v183);
  }
  free(v41);
  if ((v65 & 1) != 0)
  {
    v196 = CFDataCreateWithBytesNoCopy(0, v40, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    v200 = sub_1B17ED204(v196, 4, v204, 4, 1, v197, v198, v199);
    CFRelease(v196);
    return v200;
  }
  else
  {
    free(v40);
    return 0;
  }
}

uint64_t sub_1B17B13D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v18 = sub_1B1875E70(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v18)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"positionSource");
  if (!sub_1B1874BE0(a1, v11, v12, v13, v14, v15, v16, v17))
    return 0;
  v26 = sub_1B17EDAE0((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25);
  v30 = sub_1B1846AB8(0, 1, v26, 3, 1, v27, v28, v29);
  sub_1B17B14BC(a1, (uint64_t)v18, v30, a2, a3, v31, v32, v33);
  sub_1B17ED200(v30);
  return v30;
}

void sub_1B17B14BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _DWORD *v29;
  const __CFArray *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  CFIndex i;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const __CFString *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  float *v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int v81;
  unint64_t v82;
  char *v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  unsigned int v89;
  float32x4_t v90;
  int32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD v94[3];
  uint64_t v95;
  _QWORD v96[9];
  int v97;
  __int128 __pattern4;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  float32x4x3_t v102;

  v13 = sub_1B17ED6C4(a2, a2, a3, a4, a5, a6, a7, a8);
  if ((v14 & 0xFF00000000) == 0x800000000
    && (v21 = v13,
        v22 = v14,
        v23 = sub_1B17ED6C4(a3, v14, v15, v16, v17, v18, v19, v20),
        v93 = v24,
        (v24 & 0xFF00000000) == 0x800000000))
  {
    if ((_DWORD)v22)
    {
      v28 = (char *)v23;
      if ((_DWORD)a5)
        v29 = sub_1B19999D8(a2, v24, v25, v26, v27, v18, v19, v20);
      else
        v29 = 0;
      v30 = sub_1B1874BE0(a1, v24, v25, v26, v27, v18, v19, v20);
      v38 = sub_1B17EDAE0(a3, v31, v32, v33, v34, v35, v36, v37);
      v45 = v38;
      if (BYTE5(v93) == 12)
      {
        LODWORD(__pattern4) = 0;
        memset_pattern4(v28, &__pattern4, (12 * v38));
      }
      else if ((_DWORD)v38)
      {
        v46 = 0;
        v47 = v38;
        do
        {
          v48 = &v28[v46];
          *(_QWORD *)v48 = 0;
          *((_DWORD *)v48 + 2) = 0;
          v46 += BYTE5(v93);
          --v47;
        }
        while (v47);
      }
      v92 = v45;
      if ((uint64_t)v30 >= 1)
      {
        for (i = 0; v30 != (const __CFArray *)i; ++i)
        {
          v56 = sub_1B1874C3C(a1, i, a4, v39, v40, v41, v42, v43);
          if ((_DWORD)a4)
            v57 = 0;
          else
            v57 = sub_1B1875D94(a1, 0, 0, v51, v52, v53, v54, v55);
          v101 = 0;
          v99 = 0u;
          v100 = 0u;
          __pattern4 = 0u;
          sub_1B17A4804((uint64_t)v56, v57, v50, v51, v52, v53, v54, v55, (uint64_t)&__pattern4);
          if ((BYTE10(v99) & 0xFA) != 0)
          {
            v64 = CFSTR("Warning: CFXUnifyNormalsFromGeometry can only process triangles and polygons");
          }
          else
          {
            if ((_QWORD)__pattern4)
            {
              v96[0] = MEMORY[0x1E0C809B0];
              v96[1] = 3221225472;
              v96[2] = sub_1B17B4ECC;
              v96[3] = &unk_1E63D52E0;
              v96[4] = v21;
              v96[5] = v22;
              v97 = v22 - 1;
              v96[6] = v29;
              v96[7] = v28;
              v96[8] = v93;
              v94[0] = __pattern4;
              v94[1] = v99;
              v94[2] = v100;
              v95 = v101;
              sub_1B17A5198((uint64_t *)v94, (uint64_t)v96, v58, v59, v60, v61, v62, v63);
              continue;
            }
            v64 = CFSTR("Warning: CFXUnifyNormalsFromGeometry empty indices");
          }
          sub_1B17C4408(0, (uint64_t)v64, v58, v59, v60, v61, v62, v63, v92);
        }
      }
      if (v29 && (_DWORD)v92)
      {
        v65 = 0;
        v66 = 0;
        do
        {
          v67 = v29[v66];
          if (v66 != v67)
          {
            v68 = &v28[v67 * BYTE5(v93)];
            v69 = *((_DWORD *)v68 + 2);
            v70 = *(_QWORD *)v68;
            v71 = &v28[v65];
            *(_QWORD *)v71 = v70;
            *((_DWORD *)v71 + 2) = v69;
          }
          ++v66;
          v65 += BYTE5(v93);
        }
        while (v92 != v66);
      }
      LODWORD(v72) = 0;
      if (BYTE5(v93) == 12 && v92 >= 4)
      {
        v73 = 0;
        v72 = 0;
        do
        {
          v74 = (float *)&v28[v73 & 0xFFFFFFF0];
          *(float32x4x3_t *)v44.f32 = vld3q_f32(v74);
          v77 = vaddq_f32(vmulq_f32(v76, v76), vaddq_f32(vmulq_f32(v44, v44), vmulq_f32(v75, v75)));
          v78 = vrsqrteq_f32(v77);
          v79 = vmulq_f32(v78, vrsqrtsq_f32(v77, vmulq_f32(v78, v78)));
          v80 = vmulq_f32(v79, vrsqrtsq_f32(v77, vmulq_f32(v79, v79)));
          v102.val[0] = vmulq_f32(v44, v80);
          v102.val[1] = vmulq_f32(v75, v80);
          v102.val[2] = vmulq_f32(v76, v80);
          vst3q_f32(v74, v102);
          v72 += 4;
          v73 += 48;
        }
        while (v72 < (v92 & 0xFFFFFFFC));
      }
      if (v72 < v92)
      {
        v81 = v72 * BYTE5(v93);
        v82 = v92 - (unint64_t)v72;
        do
        {
          v83 = &v28[v81];
          v44.i64[0] = *(_QWORD *)v83;
          v84 = v44;
          v84.i32[2] = *((_DWORD *)v83 + 2);
          v85 = vmulq_f32(v84, v84);
          v85.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1))).u64[0];
          v86 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 0);
          v86.i32[3] = 0;
          v87 = vrsqrteq_f32(v86);
          v88 = vmulq_f32(v87, vrsqrtsq_f32(v86, vmulq_f32(v87, v87)));
          v89 = v85.f32[0] != 0.0;
          v90 = vmulq_f32(v88, vrsqrtsq_f32(v86, vmulq_f32(v88, v88)));
          v91 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v89)), 0x1FuLL));
          v44.i32[2] = v84.i32[2];
          v91.i32[3] = 0;
          v44 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v91), (int8x16_t)vmulq_f32(v84, v90), (int8x16_t)v44);
          *(_QWORD *)v83 = v44.i64[0];
          *((_DWORD *)v83 + 2) = v44.i32[2];
          v81 += BYTE5(v93);
          --v82;
        }
        while (v82);
      }
      free(v29);
    }
  }
  else
  {
    sub_1B17B4BF8(a1, a2, a3, a4, a5, v18, v19, v20);
  }
}

uint64_t sub_1B17B18AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v18 = sub_1B1875E70(a1, a3, a3, a4, a5, a6, a7, a8);
  if (!v18)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"positionSource");
  if (!sub_1B1874BE0(a2, v11, v12, v13, v14, v15, v16, v17))
    return 0;
  v26 = sub_1B17EDAE0((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25);
  v30 = sub_1B1846AB8(0, 1, v26, 3, 1, v27, v28, v29);
  sub_1B17B14BC(a2, (uint64_t)v18, v30, a3, 0, v31, v32, v33);
  sub_1B17ED200(v30);
  return v30;
}

void sub_1B17B198C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v9 = a3;
  if (sub_1B1874BE0(a2, a2, a3, a4, a5, a6, a7, a8))
  {
    v18 = sub_1B1875E70(a1, 1, v12, v13, v14, v15, v16, v17);
    if (v18)
    {
      v26 = (uint64_t)v18;
      v27 = sub_1B17EDAE0((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25);
      if (v27)
      {
        v34 = v27;
        v35 = sub_1B1875E70(a2, 1, v28, v29, v30, v31, v32, v33);
        if (v35)
        {
          if (v34 == sub_1B17EDAE0((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42))
          {
            v52 = sub_1B18760A0(a1, 1, v43, v44, v45, v46, v47, v48);
            if (!v52 && v9)
            {
              v52 = (const void *)sub_1B1846AB8(0, 1, v34, 3, 1, v49, v50, v51);
              sub_1B187541C(a1, v52, 0, v53, v54, v55, v56, v57);
              CFRelease(v52);
            }
            if (v52)
            {
              if (sub_1B17ED1FC(v52))
              {
                sub_1B17B14BC(a2, v26, (uint64_t)v52, 1, a4, v58, v59, v60);
              }
              else
              {
                v61 = (const void *)sub_1B17EE378((uint64_t)v52);
                sub_1B187541C(a1, v61, 0, v62, v63, v64, v65, v66);
                CFRelease(v61);
                sub_1B17B14BC(a2, v26, (uint64_t)v61, 1, a4, v67, v68, v69);
                sub_1B17ED200((uint64_t)v61);
              }
            }
          }
          else
          {
            sub_1B17C4408(16, (uint64_t)CFSTR("Error: target mesh has a different number of vertices (%d != %d)"), v43, v44, v45, v46, v47, v48, v34);
          }
        }
      }
    }
  }
}

void sub_1B17B1B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  __n128 *v10;
  double v11;

  v10 = (__n128 *)sub_1B187A934(a1, a2, a3, a4, a5, a6, a7, a8);
  *(float *)&v11 = a9;
  sub_1B17B1B40(v10, 1, v11);
}

void sub_1B17B1B40(__n128 *a1, int a2, double a3)
{
  float32x4_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const __CFDictionary *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[4];
  int v50;

  if (a1)
  {
    v48 = *(_QWORD *)&a3;
    *(double *)v5.i64 = sub_1B186B9C0(a1);
    sub_1B186B9C8(a1, vmulq_n_f32(v5, *(float *)&v48));
    if (sub_1B186A28C((uint64_t)a1, v6, v7, v8, v9, v10, v11, v12))
    {
      *(double *)v20.i64 = sub_1B186BCB8((uint64_t)a1, v13, v14, v15, v16, v17, v18, v19);
      v21.i64[0] = 0x3400000034000000;
      v21.i64[1] = 0x3400000034000000;
      v22 = (uint32x4_t)vcgeq_f32(v21, vabsq_f32(v20));
      v22.i32[3] = v22.i32[2];
      if ((vminvq_u32(v22) & 0x80000000) == 0)
        sub_1B186BD10((uint64_t)a1, v13, v14, v15, v16, v17, v18, v19, (__n128)vmulq_n_f32(v20, *(float *)&v48));
    }
    v23 = sub_1B1868FA0((uint64_t)a1, v13, v14, v15, v16, v17, v18, v19);
    if (v23)
    {
      v31 = sub_1B17A0848(v23, v24, v25, v26, v27, v28, v29, v30);
      if (v31)
        sub_1B17B1CFC(v31, (float32x4_t)vdupq_lane_s32((int32x2_t)v48, 0), v24, v25, v26, v27, v28, v29, v30);
    }
    v32 = (float32x4_t *)sub_1B1868FE8((uint64_t)a1, v24, v25, v26, v27, v28, v29, v30);
    if (v32)
      sub_1B17B1C50(v32, v33, v34, v35, v36, v37, v38, v39, *(float *)&v48, v48);
    v40 = sub_1B186CFA8((uint64_t)a1, v33, v34, v35, v36, v37, v38, v39);
    if (v40)
      sub_1B17B1C98((uint64_t)v40, v41, v42, v43, v44, v45, v46, v47, *(float *)&v48);
    if (a2)
    {
      v49[0] = MEMORY[0x1E0C809B0];
      v49[1] = 3221225472;
      v49[2] = sub_1B17B1CEC;
      v49[3] = &unk_1E63D5250;
      v50 = v48;
      sub_1B1869628((uint64_t)a1, (uint64_t)v49);
    }
  }
}

void sub_1B17B1C50(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10)
{
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v12 = sub_1B1860734((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1B186077C(a1, v13, v14, v15, v16, v17, v18, v19, v12 * a9, v35);
  v27 = sub_1B1860694((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26) * a9;
  sub_1B18606DC(a1, v28, v29, v30, v31, v32, v33, v34, v27, a10);
}

float32x2_t sub_1B17B1C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t result;

  v10 = sub_1B1865DD8(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1B1865E20(a1, v10 * a9, v11, v12, v13, v14, v15, v16, v17);
  v25 = sub_1B1866E38(a1, v18, v19, v20, v21, v22, v23, v24);
  result = vmul_n_f32(*(float32x2_t *)(v25 + 4), a9);
  *(float32x2_t *)(v25 + 4) = result;
  return result;
}

uint64_t sub_1B17B1CEC(uint64_t a1, uint64_t a2)
{
  return sub_1B17B1B40(a2, 1, *(float *)(a1 + 32));
}

void sub_1B17B1CFC(uint64_t a1, float32x4_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float32x4_t v91;

  v10 = sub_1B1875E70(a1, 0, a4, a5, a6, a7, a8, a9);
  if (v10)
  {
    v17 = (uint64_t)v10;
    v18 = sub_1B1875D94(a1, 0, 0, v12, v13, v14, v15, v16);
    v19 = (const void *)sub_1B17EE378(v17);
    v27 = sub_1B17EDAE0((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26);
    if (v27 >= 1)
    {
      v34 = v27;
      for (i = 0; i != v34; ++i)
      {
        *(double *)v36.i64 = sub_1B17EE400((uint64_t)v19, i, v28, v29, v30, v31, v32, v33);
        sub_1B1846CD0((uint64_t)v19, i, v37, v38, v39, v40, v41, v42, (__n128)vmulq_f32(a2, v36));
      }
    }
    sub_1B17ED200((uint64_t)v19);
    sub_1B1875414(a1, v19, 0, v18, v43, v44, v45, v46);
    CFRelease(v19);
  }
  v47 = a2.f32[1] != a2.f32[2];
  if (a2.f32[0] != a2.f32[2])
    v47 = 0;
  v48 = a2.f32[0] == a2.f32[1] && v47;
  v49 = sub_1B18760A0(a1, 0, v11, v12, v13, v14, v15, v16);
  if (!v48)
  {
    v55 = (uint64_t)v49;
    if (v49)
    {
      v56 = sub_1B1875D94(a1, 1, 0, v50, v51, v52, v53, v54);
      v57 = (const void *)sub_1B17EE378(v55);
      v65 = sub_1B17EDAE0((uint64_t)v57, v58, v59, v60, v61, v62, v63, v64);
      if (v65 >= 1)
      {
        v72 = v65;
        v73 = 0;
        __asm { FMOV            V0.4S, #1.0 }
        v91 = vdivq_f32(_Q0, a2);
        do
        {
          *(double *)v79.i64 = sub_1B17EE400((uint64_t)v57, v73, v66, v67, v68, v69, v70, v71);
          sub_1B1846CD0((uint64_t)v57, v73++, v80, v81, v82, v83, v84, v85, (__n128)vmulq_f32(v91, v79));
        }
        while (v72 != v73);
      }
      sub_1B17ED200((uint64_t)v57);
      sub_1B1875414(a1, v57, 0, v56, v86, v87, v88, v89);
      CFRelease(v57);
    }
  }
}

BOOL sub_1B17B1EAC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFArray *v17;
  uint64_t v18;
  BOOL v19;
  const __CFArray *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = sub_1B17A08A0(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if ((uint64_t)v10 < 1)
  {
    return 0;
  }
  else
  {
    v17 = v10;
    v18 = 0;
    v19 = 1;
    while (1)
    {
      v20 = sub_1B17A08FC(a1, v18, v11, v12, v13, v14, v15, v16);
      v28 = sub_1B187813C((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27);
      if (v28)
      {
        v29 = sub_1B1840E70(v28, 6, 0, v12, v13, v14, v15, v16);
        if (v29)
        {
          if (sub_1B1841A40(v29, v30, v11, v12, v13, v14, v15, v16))
            break;
        }
      }
      v19 = ++v18 < (uint64_t)v17;
      if (v17 == (const __CFArray *)v18)
        return v19;
    }
    if (a2)
      *a2 = v18;
  }
  return v19;
}

uint64_t sub_1B17B1F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const __CFString *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  UInt8 *v86;
  const UInt8 *v87;
  CFDataRef v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const void *v92;
  uint64_t v93;

  if (sub_1B1875540(a1, 4, 0, a2, a5, a6, a7, a8))
    return 1;
  v17 = sub_1B1875E70(a1, a2, v10, v11, v12, v13, v14, v15);
  if (v17)
  {
    v24 = (uint64_t)v17;
    v25 = sub_1B1875D94(a1, 0, 0, v19, v20, v21, v22, v23);
    v37 = sub_1B18760A0(a1, a2, v26, v27, v28, v29, v30, v31);
    if (!v37)
    {
      result = sub_1B17B13D4(a1, a2, 0, v32, v33, v34, v35, v36);
      if (!result)
        return result;
      v37 = (const void *)result;
      if ((_DWORD)a2 == 1)
      {
        sub_1B187541C(a1, (const void *)result, 0, v38, v39, v40, v41, v42);
      }
      else if (!(_DWORD)a2)
      {
        sub_1B1875414(a1, (const void *)result, 0, v25, v39, v40, v41, v42);
      }
      CFRelease(v37);
    }
    v44 = sub_1B1875540(a1, 3, 0, a2, v33, v34, v35, v36);
    if (v44)
    {
      v52 = (uint64_t)v44;
      sub_1B17ED6C4(v24, v45, v46, v47, v48, v49, v50, v51);
      v54 = v53;
      sub_1B17ED6C4((uint64_t)v37, v53, v55, v56, v57, v58, v59, v60);
      v62 = v61;
      sub_1B17ED6C4(v52, v61, v63, v64, v65, v66, v67, v68);
      if ((v54 & 0xFF000000000000) == 0x1000000000000
        && HIBYTE(v54) >= 3
        && (v62 & 0xFF000000000000) == 0x1000000000000
        && HIBYTE(v62) >= 3
        && (v69 & 0xFF000000000000) == 0x1000000000000
        && v69 >> 57)
      {
        v76 = sub_1B17B0810(a1, a2, v70, v71, v72, v73, v74, v75);
      }
      else
      {
        v76 = sub_1B17B0E14(a1, a2, v70, v71, v72, v73, v74, v75);
      }
      v92 = (const void *)v76;
      if (v76)
      {
LABEL_28:
        if ((_DWORD)a2 == 1)
        {
          sub_1B187541C(a1, v92, 0, v19, v20, v21, v22, v23);
        }
        else if (!(_DWORD)a2)
        {
          sub_1B1875414(a1, v92, 0, v25, v20, v21, v22, v23);
        }
        CFRelease(v92);
        return 1;
      }
    }
    else
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Cannot generate tangents without texture coordinates"), v46, v47, v48, v49, v50, v51, v93);
      v84 = sub_1B17EDAE0(v24, v77, v78, v79, v80, v81, v82, v83);
      v85 = 16 * v84;
      v86 = (UInt8 *)malloc_type_calloc(16 * v84, 1uLL, 0x737CBC28uLL);
      v87 = v86;
      if (v84 >= 1)
        memset_pattern16(v86, &xmmword_1B2244E20, v85);
      v88 = CFDataCreateWithBytesNoCopy(0, v87, v85, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      v92 = (const void *)sub_1B17ED204(v88, 4, v84, 4, 1, v89, v90, v91);
      CFRelease(v88);
      if (v92)
        goto LABEL_28;
    }
    v43 = CFSTR("Error: error in CFXMeshCreateTangentsIfNeeded");
  }
  else
  {
    v43 = CFSTR("Error: Cannot generate tangents without positions");
  }
  sub_1B17C4408(16, (uint64_t)v43, v18, v19, v20, v21, v22, v23, v93);
  return 0;
}

uint64_t sub_1B17B21D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  v24 = 0;
  result = sub_1B17B1EAC(a1, &v24, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    result = sub_1B17A0848(a1, v11, v12, v13, v14, v15, v16, v17);
    if (result)
      return sub_1B17B1F4C(result, a2, v18, v19, v20, v21, v22, v23);
  }
  return result;
}

BOOL sub_1B17B2240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_1B1875540(a1, 0, 0, 0, a5, a6, a7, a8);
  return v8
      && (v16 = sub_1B17EE3B4((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15)) != 0
      && sub_1B18F3BAC(v16, v17, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_1B17B2278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  v9 = sub_1B18741B0(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = 0;
  do
  {
    v11 = sub_1B1875F00(a1, (char)v10);
    if (v11 >= 1)
    {
      v16 = 0;
      v17 = v11;
      do
      {
        v18 = sub_1B1875540(a1, (char)v10, v16, 0, v12, v13, v14, v15);
        if (v18)
        {
          v19 = (const void *)sub_1B17EE33C((uint64_t)v18);
          sub_1B1875414(v9, v19, v16, 255, v20, v21, v22, v23);
          CFRelease(v19);
        }
        ++v16;
      }
      while (v17 != v16);
    }
    v24 = v10++;
  }
  while (v24 < 8);
  return v9;
}

uint64_t sub_1B17B2334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  const UInt8 *v11;
  CFDataRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[10];
  _QWORD v34[4];
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;

  v44 = 0;
  v45 = &v44;
  v46 = 0x2020000000;
  v47 = 0;
  v40 = 0;
  v41 = &v40;
  v42 = 0x2020000000;
  v43 = 0;
  v9 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = sub_1B17B2548;
  v39[3] = &unk_1E63D5278;
  v39[4] = &v44;
  v39[5] = &v40;
  sub_1B1873EE0(a1, 0, (uint64_t)v39, a4, a5, a6, a7, a8);
  v10 = v45[3];
  if (v10)
  {
    v11 = (const UInt8 *)sub_1B179E238(v41[3] * v10);
    v12 = CFDataCreateWithBytesNoCopy(0, v11, v45[3] * v41[3], (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    v35 = 0;
    v36 = &v35;
    v37 = 0x2020000000;
    v38 = 0;
    v13 = -[VFXMesh __createCFObject]_0();
    v20 = (const void *)sub_1B1876264(a1, 0, v14, v15, v16, v17, v18, v19);
    sub_1B18762F4(v13, v20, v21, v22, v23, v24, v25, v26);
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x2020000000;
    v34[3] = 0;
    v33[0] = v9;
    v33[1] = 3221225472;
    v33[2] = sub_1B17B25E0;
    v33[3] = &unk_1E63D52A0;
    v33[4] = &v35;
    v33[5] = &v40;
    v33[6] = &v44;
    v33[7] = v34;
    v33[8] = v12;
    v33[9] = v13;
    sub_1B1873EE0(a1, 0, (uint64_t)v33, v27, v28, v29, v30, v31);
    CFRelease((CFTypeRef)v36[3]);
    CFRelease(v12);
    _Block_object_dispose(v34, 8);
    _Block_object_dispose(&v35, 8);
  }
  else
  {
    v13 = 0;
  }
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
  return v13;
}

void sub_1B17B24F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B17B2548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v10 = sub_1B17EE3B4(a2, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += sub_1B18F3B7C(v10, v11, v12, v13, v14, v15, v16, v17);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v26 = sub_1B17EDAE0(a2, v19, v20, v21, v22, v23, v24, v25);
  v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v18)
  {
    if (v26 != *(_QWORD *)(v33 + 24))
    {
      sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Cannot create an interleaved copy, count mismatch"), v27, v28, v29, v30, v31, v32, v34);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v33 + 24) = v26;
  }
}

uint64_t sub_1B17B25E0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;

  v10 = a3;
  v12 = sub_1B17EE3B4(a2, a2, a3, a4, a5, a6, a7, a8);
  v13 = v12;
  if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    v14 = sub_1B18F3854(v12);
    v15 = sub_1B18F385C(v13);
    v16 = (const void *)sub_1B18F38F8(v14, v15, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24));
    v17 = (const void *)sub_1B17ED34C(v16, v10);
    CFRelease(v16);
    sub_1B18F3B34((uint64_t)v16, *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24));
    sub_1B1875414(a1[9], v17, a4, a5, v18, v19, v20, v21);
    CFRelease(v17);
  }
  else
  {
    v27 = (const void *)a1[8];
    v28 = sub_1B18F3854(v12);
    v29 = sub_1B18F385C(v13);
    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = sub_1B17ED264(v10, v27, v28, v29, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24), v30);
    v16 = (const void *)sub_1B17EE3B4(*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24), v31, v32, v33, v34, v35, v36, v37);
    sub_1B1875414(a1[9], *(const void **)(*(_QWORD *)(a1[4] + 8) + 24), a4, a5, v38, v39, v40, v41);
  }
  sub_1B18F3BF0(v13, (uint64_t)v16, 0, v22, v23, v24, v25, v26);
  result = sub_1B18F3B7C(v13, v42, v43, v44, v45, v46, v47, v48);
  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) += result;
  return result;
}

void sub_1B17B277C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t j;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  const void *v61;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"geometry");
  v9 = sub_1B17A0848(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = sub_1B1875F00(v9, 1);
  if (v10 >= 1)
  {
    v15 = v10;
    for (i = 0; i != v15; ++i)
    {
      v17 = sub_1B1875540(v9, 1, i, 0, v11, v12, v13, v14);
      v23 = sub_1B1875D94(v9, 1, i, v18, v19, v20, v21, v22);
      v31 = sub_1B17EE3B4((uint64_t)v17, v24, v25, v26, v27, v28, v29, v30);
      if (sub_1B18F3854(v31) != 4)
      {
        v34 = (const void *)sub_1B17EE500((uint64_t)v17, 4, v32, v33, v11, v12, v13, v14);
        if (v34)
        {
          v35 = v34;
          sub_1B1875414(v9, v34, i, v23, v11, v12, v13, v14);
          CFRelease(v35);
        }
      }
    }
  }
  v36 = sub_1B1875F00(v9, 2);
  if (v36 >= 1)
  {
    v41 = v36;
    for (j = 0; j != v41; ++j)
    {
      v43 = sub_1B1875540(v9, 2, j, 0, v37, v38, v39, v40);
      v49 = sub_1B1875D94(v9, 2, j, v44, v45, v46, v47, v48);
      v57 = sub_1B17EE3B4((uint64_t)v43, v50, v51, v52, v53, v54, v55, v56);
      if (sub_1B18F3854(v57) != 15)
      {
        v60 = (const void *)sub_1B17EE500((uint64_t)v43, 15, v58, v59, v37, v38, v39, v40);
        if (v60)
        {
          v61 = v60;
          sub_1B1875414(v9, v60, j, v49, v37, v38, v39, v40);
          CFRelease(v61);
        }
      }
    }
  }
}

uint64_t sub_1B17B2908(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  unsigned int v28;
  int8x16_t v29;
  uint64_t v30;
  const __CFDictionary *v31;
  const __CFDictionary *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint32x4_t v68;
  unsigned int v69;
  __int128 v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  const __CFDictionary *v76;
  const __CFDictionary *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float32x4_t v90;
  int32x4_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x4_t v103;
  int32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  __int128 v113;
  __float2 v114;
  simd_float4 v115;
  simd_float4 v116;
  __float2 v117;
  float32x4_t v118;
  float32x4_t v119;
  __float2 v120;
  uint64_t v121;
  float32x4_t v122;
  uint64_t v123;
  float32x4_t cosval_low;
  float32x4_t v125;
  uint64_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  uint64_t v131;
  float32x4_t v132;
  uint64_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  char v147;
  int v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float v152;
  float32x4_t v153;
  float32x4_t v154;
  float v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  float32x4_t v165;
  float32x4_t v166;
  simd_float4 v167;
  simd_float4 v168;
  simd_float4x4 v169;
  __int128 v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  simd_float4x4 v184;
  float32x4_t v185;
  simd_float4x4 v186;
  simd_float4x4 v187;
  simd_float4x4 v188;
  simd_float4x4 v189;
  simd_float4x4 v190;
  simd_float4x4 v191;

  v8 = a2;
  *(uint64_t *)((char *)v185.i64 + 4) = 0;
  v185.i32[0] = 0;
  v182 = 0u;
  v183 = 0u;
  v10 = sub_1B187A934((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((sub_1B18694A8(v10, &v182, 0, v11, v12, v13, v14, v15) & 1) == 0)
  {
    v30 = sub_1B186A0A0();
    sub_1B18641FC();
    v77 = v76;
    sub_1B186D024(v30, v76, v78, v79, v80, v81, v82, v83);
    sub_1B193E5B0(v30, CFSTR("default camera"), v84, v85, v86, v87, v88, v89);
    CFRelease(v77);
    return v30;
  }
  v23 = vsubq_f32(v182, v183);
  v24 = vaddq_f32(v182, v183);
  v25 = vmulq_f32(vsubq_f32(v24, v23), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu));
  v26 = (int8x16_t)vsubq_f32(v23, v25);
  v27 = (int8x16_t)vaddq_f32(v24, v25);
  if (v8)
    v28 = -1;
  else
    v28 = 0;
  v29 = (int8x16_t)vdupq_n_s32(v28);
  v179 = (float32x4_t)vbslq_s8(v29, v27, (int8x16_t)v24);
  v178 = (float32x4_t)vbslq_s8(v29, v26, (int8x16_t)v23);
  *(double *)v188.columns[0].i64 = sub_1B18697A0(v10, v16, v17, v18, v19, v20, v21, v22);
  v189 = __invert_f4(v188);
  v173 = (float32x4_t)v189.columns[1];
  v174 = (float32x4_t)v189.columns[0];
  v171 = (float32x4_t)v189.columns[3];
  v172 = (float32x4_t)v189.columns[2];
  v30 = sub_1B186A0A0();
  sub_1B18641FC();
  v32 = v31;
  sub_1B186D024(v30, v31, v33, v34, v35, v36, v37, v38);
  sub_1B193E5B0(v30, CFSTR("default camera"), v39, v40, v41, v42, v43, v44);
  CFRelease(v32);
  v52 = sub_1B1866E38((uint64_t)v32, v45, v46, v47, v48, v49, v50, v51);
  sub_1B1865C90((float *)v32, 45.0, v53, v54, v55, v56, v57, v58, v59);
  v176 = vaddq_f32(v178, v179);
  sub_1B187AD68(a1, (__n128 *)&v185, v60, v61, v62, v63, v64, v65);
  v66 = v185;
  v67.i64[0] = 0x3400000034000000;
  v67.i64[1] = 0x3400000034000000;
  v68 = (uint32x4_t)vcgeq_f32(v67, vabsq_f32(v185));
  v68.i32[3] = v68.i32[2];
  v69 = vminvq_u32(v68);
  v70 = (__int128)v185;
  if ((v69 & 0x80000000) != 0)
  {
    v70 = xmmword_1B2244DD0;
    v185 = (float32x4_t)xmmword_1B2244DD0;
    v66 = (float32x4_t)xmmword_1B2244DD0;
  }
  v71.i64[0] = 0x3F0000003F000000;
  v71.i64[1] = 0x3F0000003F000000;
  v72 = vmulq_f32(v176, v71);
  v73 = vmulq_f32(vsubq_f32(v179, v178), v71);
  v74 = vmulq_f32(v73, (float32x4_t)vdupq_n_s32(0x401A827Au));
  if (*((float *)&v70 + 1) == 0.0 && *(float *)&v70 == 0.0)
  {
    if (*((float *)&v70 + 2) == 0.0)
    {
      v75 = v72;
      goto LABEL_18;
    }
    if (v74.f32[0] < v74.f32[2])
      v74.f32[0] = v74.f32[2];
    v75.i32[0] = v72.i32[0];
    v75.f32[1] = v72.f32[1] - (float)(v73.f32[1] + v74.f32[0]);
    v75.i32[2] = v72.i32[2];
  }
  else
  {
    if (v74.f32[0] < v74.f32[1])
      v74.f32[0] = v74.f32[1];
    v75.i64[0] = v72.i64[0];
    v75.f32[2] = v72.f32[2] + (float)(v73.f32[2] + v74.f32[0]);
  }
  v75.i32[3] = v72.i32[3];
LABEL_18:
  v177 = v72;
  v90 = vsubq_f32(v72, v75);
  v91 = (int32x4_t)vmulq_f32(v90, v90);
  v91.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v91, 2), vadd_f32(*(float32x2_t *)v91.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v91.i8, 1))).u32[0];
  v92 = vrsqrte_f32((float32x2_t)v91.u32[0]);
  v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v92, v92)));
  v91.i32[0] = vmul_f32(v93, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v93, v93))).u32[0];
  v94 = (int32x4_t)vmulq_f32(v66, v66);
  v94.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v94, 2), vadd_f32(*(float32x2_t *)v94.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v94.i8, 1))).u32[0];
  v95 = vmulq_n_f32(v90, *(float *)v91.i32);
  *(float32x2_t *)v91.i8 = vrsqrte_f32((float32x2_t)v94.u32[0]);
  *(float32x2_t *)v91.i8 = vmul_f32(*(float32x2_t *)v91.i8, vrsqrts_f32((float32x2_t)v94.u32[0], vmul_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v91.i8)));
  v96 = vmulq_n_f32(v66, vmul_f32(*(float32x2_t *)v91.i8, vrsqrts_f32((float32x2_t)v94.u32[0], vmul_f32(*(float32x2_t *)v91.i8, *(float32x2_t *)v91.i8))).f32[0]);
  v97 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL);
  v98 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), (int8x16_t)v96, 0xCuLL), vnegq_f32(v95)), v96, v97);
  v99 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL);
  v100 = (int32x4_t)vmulq_f32(v98, v98);
  v100.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v100, 2), *(float32x2_t *)v100.i8)).u32[0];
  v101 = vrsqrte_f32((float32x2_t)v100.u32[0]);
  v102 = vmul_f32(v101, vrsqrts_f32((float32x2_t)v100.u32[0], vmul_f32(v101, v101)));
  v103 = vmulq_n_f32(v99, vmul_f32(v102, vrsqrts_f32((float32x2_t)v100.u32[0], vmul_f32(v102, v102))).f32[0]);
  v104 = (int32x4_t)vmlaq_f32(vmulq_f32(v97, vnegq_f32(v103)), v95, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), (int8x16_t)v103, 0xCuLL));
  v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v104, v104), (int8x16_t)v104, 0xCuLL);
  v106 = vmulq_f32(v75, v103);
  v107 = vmulq_f32(v75, v95);
  v95.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 2), vaddq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v107.f32, 1))).f32[0];
  v108 = (int32x4_t)vnegq_f32(v95);
  v109 = vzip1q_s32((int32x4_t)v103, v108);
  v103.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1))).f32[0];
  v175 = v75;
  v110 = vmulq_f32(v75, v105);
  v111 = vzip1q_s32((int32x4_t)v105, (int32x4_t)0);
  v105.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 2), vaddq_f32(v110, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1))).f32[0];
  v190.columns[3] = (simd_float4)vzip2q_s32((int32x4_t)v103, v108);
  v112 = vzip2q_s32((int32x4_t)v105, (int32x4_t)xmmword_1B2244E20);
  v190.columns[0] = (simd_float4)vzip1q_s32(v109, v111);
  v190.columns[1] = (simd_float4)vzip2q_s32(v109, v111);
  v190.columns[2] = (simd_float4)vzip1q_s32((int32x4_t)v190.columns[3], v112);
  v184 = v190;
  v190.columns[3] = (simd_float4)vzip2q_s32((int32x4_t)v190.columns[3], v112);
  v191 = __invert_f4(v190);
  if (v8)
  {
    v169 = v191;
    v113 = xmmword_1B22457D0;
    if (v185.f32[1] == 0.0 && v185.f32[2] != 0.0)
      v113 = xmmword_1B22457E0;
    v170 = v113;
    v114 = __sincosf_stret(*(float *)&v113);
    v115.i32[0] = 0;
    v115.i32[1] = LODWORD(v114.__cosval);
    v115.i64[1] = LODWORD(v114.__sinval);
    v116.i32[0] = 0;
    v116.f32[1] = -v114.__sinval;
    v116.i64[1] = LODWORD(v114.__cosval);
    v167 = v116;
    v168 = v115;
    v117 = __sincosf_stret(*((float *)&v170 + 1));
    v118.i32[3] = 0;
    v118.i64[0] = LODWORD(v117.__cosval);
    v118.f32[2] = -v117.__sinval;
    v119.i64[0] = LODWORD(v117.__sinval);
    v119.i64[1] = LODWORD(v117.__cosval);
    v165 = v119;
    v166 = v118;
    v120 = __sincosf_stret(*((float *)&v170 + 2));
    v121 = 0;
    v122.i32[1] = 0;
    v122.i64[1] = 0;
    v186.columns[0] = (simd_float4)xmmword_1B2244DB0;
    v186.columns[1] = v168;
    v186.columns[2] = v167;
    memset(&v187, 0, 48);
    do
    {
      v187.columns[v121] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v166, COERCE_FLOAT(*(_OWORD *)&v186.columns[v121])), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v186.columns[v121].f32, 1), v165, (float32x4_t)v186.columns[v121], 2);
      ++v121;
    }
    while (v121 != 3);
    v123 = 0;
    cosval_low = (float32x4_t)LODWORD(v120.__cosval);
    cosval_low.i32[1] = LODWORD(v120.__sinval);
    cosval_low.i32[2] = 0;
    v122.f32[0] = -v120.__sinval;
    v125 = v122;
    v125.i32[1] = LODWORD(v120.__cosval);
    v125.i32[2] = 0;
    v186.columns[0] = v187.columns[0];
    v186.columns[1] = v187.columns[1];
    v186.columns[2] = v187.columns[2];
    memset(&v187, 0, 48);
    do
    {
      v187.columns[v123] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(cosval_low, COERCE_FLOAT(*(_OWORD *)&v186.columns[v123])), v125, *(float32x2_t *)v186.columns[v123].f32, 1), (float32x4_t)xmmword_1B2244D90, (float32x4_t)v186.columns[v123], 2);
      ++v123;
    }
    while (v123 != 3);
    v126 = 0;
    v127 = (float32x4_t)v187.columns[0];
    v128 = (float32x4_t)v187.columns[1];
    v129 = (float32x4_t)v187.columns[2];
    v127.i32[3] = 0;
    v128.i32[3] = 0;
    v129.i32[3] = 0;
    v130 = vnegq_f32(v177);
    v130.i32[3] = 1.0;
    v186.columns[0] = (simd_float4)xmmword_1B2244DB0;
    v186.columns[1] = (simd_float4)xmmword_1B2244DD0;
    v186.columns[2] = (simd_float4)xmmword_1B2244D90;
    v186.columns[3] = (simd_float4)v130;
    memset(&v187, 0, sizeof(v187));
    do
    {
      v187.columns[v126] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v127, COERCE_FLOAT(*(_OWORD *)&v186.columns[v126])), v128, *(float32x2_t *)v186.columns[v126].f32, 1), v129, (float32x4_t)v186.columns[v126], 2), (float32x4_t)xmmword_1B2244E20, (float32x4_t)v186.columns[v126], 3);
      ++v126;
    }
    while (v126 != 4);
    v131 = 0;
    v132 = v177;
    v132.i32[3] = 1.0;
    v186 = v187;
    memset(&v187, 0, sizeof(v187));
    do
    {
      v187.columns[v131] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)&v186.columns[v131])), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v186.columns[v131].f32, 1), (float32x4_t)xmmword_1B2244D90, (float32x4_t)v186.columns[v131], 2), v132, (float32x4_t)v186.columns[v131], 3);
      ++v131;
    }
    while (v131 != 4);
    v133 = 0;
    v134 = (float32x4_t)v187.columns[0];
    v135 = (float32x4_t)v187.columns[1];
    v136 = (float32x4_t)v187.columns[2];
    v137 = (float32x4_t)v187.columns[3];
    v186 = v169;
    memset(&v187, 0, sizeof(v187));
    do
    {
      v187.columns[v133] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v134, COERCE_FLOAT(*(_OWORD *)&v186.columns[v133])), v135, *(float32x2_t *)v186.columns[v133].f32, 1), v136, (float32x4_t)v186.columns[v133], 2), v137, (float32x4_t)v186.columns[v133], 3);
      ++v133;
    }
    while (v133 != 4);
    v191 = v187;
    v184.columns[0] = v187.columns[0];
  }
  v138 = 0;
  v186 = v191;
  memset(&v187, 0, sizeof(v187));
  do
  {
    v187.columns[v138] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, COERCE_FLOAT(*(_OWORD *)&v186.columns[v138])), v173, *(float32x2_t *)v186.columns[v138].f32, 1), v172, (float32x4_t)v186.columns[v138], 2), v171, (float32x4_t)v186.columns[v138], 3);
    ++v138;
  }
  while (v138 != 4);
  v184 = v187;
  sub_1B186BC48(v30, (uint64_t)&v184);
  v146 = v185.f32[0] == 0.0 && v185.f32[1] == 0.0;
  v147 = 1;
  if (!v146)
    v147 = 2;
  v180 = v178;
  v148 = *(_DWORD *)((unint64_t)&v180 & 0xFFFFFFFFFFFFFFF3 | (4 * (v147 & 3)));
  v181 = v177;
  *(_DWORD *)((unint64_t)&v181 & 0xFFFFFFFFFFFFFFF3 | (4 * (v147 & 3))) = v148;
  v149 = v181;
  v149.i32[3] = v177.i32[3];
  v150 = vsubq_f32(v175, v149);
  v151 = vmulq_f32(v150, v150);
  v152 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v151, 2), vaddq_f32(v151, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v151.f32, 1))).f32[0]);
  v153 = vsubq_f32(v175, v179);
  v154 = vmulq_f32(v153, v153);
  v155 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 2), vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1))).f32[0]);
  if (v152 != 0.0 && v155 != 0.0 && (float)(v155 / v152) < 250.0)
  {
    v156 = sqrt((float)(v155 / v152) / 250.0);
    v152 = v152 * v156;
    v155 = v155 / v156;
  }
  sub_1B186644C(v52, v155, v139, v140, v141, v142, v143, v144, v145);
  sub_1B186652C(v52, v152, v157, v158, v159, v160, v161, v162, v163);
  return v30;
}

uint64_t sub_1B17B30D0(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  unsigned __int32 v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x4_t v59;
  simd_float4x4 v61;
  _OWORD v62[11];
  __n128 v63;
  simd_float4x4 v64;
  int32x4_t v65;
  int32x4_t v66;
  __int128 v67;
  __int128 v68;

  v63 = a9;
  memset(v62, 0, sizeof(v62));
  v17 = sub_1B17B33F4(a1, (uint64_t)v62, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v17)
  {
    memset(&v61, 0, sizeof(v61));
    sub_1B186BDB8(a1, (uint64_t)&v61, v11, v12, v13, v14, v15, v16);
    v61 = __invert_f4(v61);
    v24 = sub_1B18667B4((unsigned __int8 *)v62, (uint64_t)&v63, v18, v19, v20, v21, v22, v23);
    v29 = 0;
    v30 = *(float32x4_t *)v24;
    v31 = *((float32x4_t *)v24 + 1);
    v32 = *((float32x4_t *)v24 + 2);
    v33 = *((float32x4_t *)v24 + 3);
    v64 = v61;
    v65 = 0u;
    v66 = 0u;
    v67 = 0u;
    v68 = 0u;
    do
    {
      v34 = (float32x4_t)v64.columns[v29];
      *(float32x4_t *)((char *)&v65 + v29 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30, v34.f32[0]), v31, *(float32x2_t *)v34.f32, 1), v32, v34, 2), v33, v34, 3);
      ++v29;
    }
    while (v29 != 4);
    v25.f32[0] = *(float *)&v65.i32[3] - *(float *)v65.i32;
    v25.f32[1] = *(float *)&v66.i32[3] - *(float *)v66.i32;
    v25.f32[2] = *((float *)&v67 + 3) - *(float *)&v67;
    v35 = (int32x4_t)vmulq_f32(v25, v25);
    v25.f32[3] = *((float *)&v68 + 3) - *(float *)&v68;
    v26.f32[0] = *(float *)&v65.i32[3] + *(float *)v65.i32;
    v26.f32[1] = *(float *)&v66.i32[3] + *(float *)v66.i32;
    v26.f32[2] = *((float *)&v67 + 3) + *(float *)&v67;
    v36 = (int32x4_t)vmulq_f32(v26, v26);
    v26.f32[3] = *((float *)&v68 + 3) + *(float *)&v68;
    v27.f32[0] = *(float *)&v65.i32[3] + *(float *)&v65.i32[1];
    v27.f32[1] = *(float *)&v66.i32[3] + *(float *)&v66.i32[1];
    v27.f32[2] = *((float *)&v67 + 3) + *((float *)&v67 + 1);
    v37 = v27;
    v37.f32[3] = *((float *)&v68 + 3) + *((float *)&v68 + 1);
    v38 = (int32x4_t)vmulq_f32(v27, v27);
    v28.f32[0] = *(float *)&v65.i32[3] - *(float *)&v65.i32[1];
    v28.f32[1] = *(float *)&v66.i32[3] - *(float *)&v66.i32[1];
    v28.f32[2] = *((float *)&v67 + 3) - *((float *)&v67 + 1);
    v39 = v28;
    v39.f32[3] = *((float *)&v68 + 3) - *((float *)&v68 + 1);
    v40 = (int32x4_t)vmulq_f32(v28, v28);
    v34.f32[0] = *(float *)&v65.i32[3] - *(float *)&v65.i32[2];
    v34.f32[1] = *(float *)&v66.i32[3] - *(float *)&v66.i32[2];
    v34.f32[2] = *((float *)&v67 + 3) - *((float *)&v67 + 2);
    v41 = (int32x4_t)vmulq_f32(v34, v34);
    v34.f32[3] = *((float *)&v68 + 3) - *((float *)&v68 + 2);
    v42 = (float32x4_t)vzip2q_s32(v65, v66);
    v42.i32[2] = DWORD2(v67);
    v43 = (int32x4_t)vmulq_f32(v42, v42);
    v42.i32[3] = DWORD2(v68);
    v44 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
    v45 = vrsqrte_f32((float32x2_t)v44);
    v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44, vmul_f32(v45, v45)));
    v47 = vmulq_n_f32(v25, vmul_f32(v46, vrsqrts_f32((float32x2_t)v44, vmul_f32(v46, v46))).f32[0]);
    v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v36, 2), vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1))).u32[0];
    v48 = vrsqrte_f32((float32x2_t)v46.u32[0]);
    v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48)));
    v50 = vmulq_n_f32(v26, vmul_f32(v49, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v49, v49))).f32[0]);
    v49.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1))).u32[0];
    v51 = vrsqrte_f32((float32x2_t)v49.u32[0]);
    v52 = vmul_f32(v51, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v51, v51)));
    v53 = vmulq_n_f32(v37, vmul_f32(v52, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v52, v52))).f32[0]);
    v52.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))).u32[0];
    v54 = vrsqrte_f32((float32x2_t)v52.u32[0]);
    v55 = vmul_f32(v54, vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(v54, v54)));
    v56 = vmulq_n_f32(v39, vmul_f32(v55, vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(v55, v55))).f32[0]);
    v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
    v57 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v57, v57)));
    v59 = vmulq_n_f32(v42, vmul_f32(v58, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v58, v58))).f32[0]);
    v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1))).u32[0];
    *(float32x2_t *)v41.i8 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    *(float32x2_t *)v41.i8 = vmul_f32(*(float32x2_t *)v41.i8, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8)));
    *a2 = v47;
    a2[1] = v50;
    a2[2] = v53;
    a2[3] = v56;
    a2[4] = v59;
    a2[5] = vmulq_n_f32(v34, vmul_f32(*(float32x2_t *)v41.i8, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8))).f32[0]);
  }
  return v17;
}

uint64_t sub_1B17B33F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float v28;
  double v29;
  float v30;
  double v31;
  double v32;
  int32x2_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"pointOfView");
  v10 = sub_1B186CFA8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    v18 = (_OWORD *)sub_1B1866E38((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
    v20 = v18[1];
    v19 = v18[2];
    *(_OWORD *)a2 = *v18;
    *(_OWORD *)(a2 + 16) = v20;
    *(_OWORD *)(a2 + 32) = v19;
    v21 = v18[6];
    v23 = v18[3];
    v22 = v18[4];
    *(_OWORD *)(a2 + 80) = v18[5];
    *(_OWORD *)(a2 + 96) = v21;
    *(_OWORD *)(a2 + 48) = v23;
    *(_OWORD *)(a2 + 64) = v22;
    v24 = v18[9];
    v25 = v18[10];
    v27 = v18[7];
    v26 = v18[8];
    *(_OWORD *)(a2 + 144) = v24;
    *(_OWORD *)(a2 + 160) = v25;
    *(_OWORD *)(a2 + 112) = v27;
    *(_OWORD *)(a2 + 128) = v26;
    if ((*(_BYTE *)a2 & 4) != 0)
    {
      v28 = *(float *)(a2 + 152);
      v29 = v28;
      v30 = *(float *)(a2 + 168);
      *(float *)&v24 = v30 / v28;
      v31 = v30 / (v29 + 1.0);
      v32 = (v30 + -1.0) / v29;
      if (*(float *)(a2 + 156) == 0.0)
        v31 = v32;
      *(float *)&v31 = v31;
      v33 = vcgt_f32(*(float32x2_t *)&v24, *(float32x2_t *)&v31);
      DWORD1(v24) = LODWORD(v31);
      *(int8x8_t *)(a2 + 4) = vbsl_s8((int8x8_t)vdup_lane_s32(v33, 0), (int8x8_t)vrev64_s32(*(int32x2_t *)&v24), *(int8x8_t *)&v24);
    }
    return 1;
  }
  else
  {
    result = (uint64_t)sub_1B1868FE8(a1, v11, v12, v13, v14, v15, v16, v17);
    if (result)
      return sub_1B185F8E8(result, a2, v35, v36, v37, v38, v39, v40);
  }
  return result;
}

void sub_1B17B34F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unsigned int v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float v43;
  float v44;
  float32x4_t v45;
  float v46;
  float v47;
  int8x16_t v48;
  float v49;
  float v50;
  float v51;
  float v52;
  double v53;
  float v54;
  float v55;
  float v56;
  double v57;
  float v58;
  const __CFString *v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  float32x4_t v63;
  _OWORD v64[8];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!a2 || !a4)
  {
    v59 = CFSTR("Unreachable code: CFXAdjustZRangeOfProjectionInfos - no world or no point of view");
LABEL_32:
    sub_1B17C4408(16, (uint64_t)v59, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  v11 = sub_1B187A934(a4, a2, a3, a4, a5, a6, a7, a8);
  if (!v11)
  {
    v59 = CFSTR("Unreachable code: CFXAdjustZRangeOfProjectionInfos - no root node");
    goto LABEL_32;
  }
  v62 = 0u;
  v63 = 0u;
  v61 = 0;
  if ((sub_1B18694A8(v11, &v62, (uint64_t)&v61, a4, a5, a6, a7, a8) & 1) != 0)
  {
    v19 = sub_1B1869AC8(a2, v12, v13, v14, v15, v16, v17, v18);
    if (v19)
    {
      v26 = 0;
      v27 = *(float32x4_t *)(v19 + 48);
      v28 = vmlaq_f32(vmlaq_f32(vnegq_f32(*(float32x4_t *)(v19 + 32)), (float32x4_t)0, *(float32x4_t *)(v19 + 16)), (float32x4_t)0, *(float32x4_t *)v19);
      v29 = vmulq_f32(v28, v28);
      v29.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u64[0];
      v30 = v29.f32[0] != 0.0;
      v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0);
      v31.i32[3] = 0;
      v32 = vrsqrteq_f32(v31);
      v33 = vmulq_f32(v32, vrsqrtsq_f32(v31, vmulq_f32(v32, v32)));
      v34 = vmulq_f32(v33, v33);
      v35 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v30)), 0x1FuLL));
      v35.i32[3] = 0;
      v36 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v35), (int8x16_t)vmulq_f32(v28, vmulq_f32(v33, vrsqrtsq_f32(v31, v34))), (int8x16_t)v28);
      v34.f32[0] = *(float *)&v62 - v63.f32[0];
      v37 = v34;
      v37.f32[1] = *((float *)&v62 + 1) - v63.f32[1];
      v38 = v37;
      v38.f32[2] = *((float *)&v62 + 2) - v63.f32[2];
      v37.f32[2] = *((float *)&v62 + 2) + v63.f32[2];
      v34.f32[1] = *((float *)&v62 + 1) + v63.f32[1];
      v39 = v34;
      v39.f32[2] = *((float *)&v62 + 2) - v63.f32[2];
      v64[0] = v38;
      v64[1] = v37;
      v34.f32[2] = *((float *)&v62 + 2) + v63.f32[2];
      v64[2] = v39;
      v64[3] = v34;
      v28.f32[0] = *(float *)&v62 + v63.f32[0];
      v40 = v28;
      v40.f32[1] = *((float *)&v62 + 1) - v63.f32[1];
      v41 = v40;
      v41.f32[2] = *((float *)&v62 + 2) - v63.f32[2];
      v40.f32[2] = *((float *)&v62 + 2) + v63.f32[2];
      v64[4] = v41;
      v64[5] = v40;
      v28.f32[1] = *((float *)&v62 + 1) + v63.f32[1];
      v42 = v28;
      v42.f32[2] = *((float *)&v62 + 2) - v63.f32[2];
      v28.f32[2] = *((float *)&v62 + 2) + v63.f32[2];
      v64[6] = v42;
      v64[7] = v28;
      v43 = 3.4028e38;
      v44 = -3.4028e38;
      do
      {
        v45 = vmulq_f32(vsubq_f32((float32x4_t)v64[v26], v27), v36);
        v46 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).f32[0];
        if (v46 < v43)
          v43 = v46;
        v47 = fabsf(v46);
        if (v47 >= v44)
          v44 = v47;
        ++v26;
      }
      while (v26 != 8);
      v48 = (int8x16_t)vmulq_f32(v63, v63);
      *(float *)v48.i32 = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL))));
      v49 = *(float *)v48.i32 + *(float *)v48.i32;
      v50 = fminf(v44, 1000000.0);
      v51 = v43 + v43 * -0.05;
      v52 = v50 + v50 * 0.05;
      if (v49 <= v52)
        v49 = v52;
      v53 = fmax(v49 * 0.0001, 0.001);
      if (v53 > 1.0)
        v53 = 1.0;
      v54 = v53;
      if (v54 >= v51)
        v51 = v54;
      if (v51 <= v52)
        v55 = v52;
      else
        v55 = v51;
      if (v61)
        v56 = v55 + v55;
      else
        v56 = v55;
      v57 = v56 * 0.001;
      if (v57 <= v51)
        v58 = v57;
      else
        v58 = v51;
      if (v58 > v56)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. We badly computed zFar (%f) and zNear (%f) in this world"), v20, v21, v22, v23, v24, v25, (uint64_t)"shortestPosition <= farthestPosition");
      *(float *)(a1 + 4) = v58;
      *(float *)(a1 + 8) = v56;
    }
    else
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: CFXAdjustZRangeOfProjectionInfos - no world matrix"), v20, v21, v22, v23, v24, v25, v60);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 4) = 0x447A00003DCCCCCDLL;
  }
}

float32x4_t sub_1B17B3860(uint64_t a1, float32x4_t *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t v10;
  int32x4_t v11;
  unsigned __int32 v12;
  float32x4_t v13;
  float32x4_t result;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1B186BDB8(a1, (uint64_t)&v15, (uint64_t)a3, a4, a5, a6, a7, a8);
  v10 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v17, *a2, 2), v16, *(float32x2_t *)a2->f32, 1), v15, COERCE_FLOAT(*a2));
  v11 = (int32x4_t)vmulq_f32(v10, v10);
  v12 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
  *(float32x2_t *)v11.i8 = vrsqrte_f32((float32x2_t)v12);
  *(float32x2_t *)v11.i8 = vmul_f32(*(float32x2_t *)v11.i8, vrsqrts_f32((float32x2_t)v12, vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8)));
  result = vmulq_n_f32(v10, vmul_f32(*(float32x2_t *)v11.i8, vrsqrts_f32((float32x2_t)v12, vmul_f32(*(float32x2_t *)v11.i8, *(float32x2_t *)v11.i8))).f32[0]);
  v13 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v18, (float32x4_t)0, v17), (float32x4_t)0, v16), (float32x4_t)0, v15), result);
  result.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
  *a3 = (__n128)result;
  return result;
}

__n128 sub_1B17B3920(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v16;
  __int128 v25;
  __int128 v28;
  __n128 result;
  float32x4_t v30;
  __n128 v31;

  v31.n128_u32[2] = 0;
  v31.n128_u64[0] = 0;
  sub_1B187AD68(a1, &v31, a3, a4, a5, a6, a7, a8);
  v30 = 0uLL;
  sub_1B17B3860(a2, (float32x4_t *)&v31, (__n128 *)&v30, v10, v11, v12, v13, v14);
  _Q0 = v30;
  v16 = vnegq_f32(v30);
  _S2 = vmuls_lane_f32(-2.0, v16, 2);
  _D5 = vmul_f32(*(float32x2_t *)v16.f32, (float32x2_t)0xC0000000C0000000);
  __asm { FMLS            S6, S5, V0.S[0] }
  _S7 = _D5.i32[1];
  HIDWORD(v25) = 0;
  *(_QWORD *)&v25 = __PAIR64__(COERCE_UNSIGNED_INT(vmuls_lane_f32(v16.f32[0], _D5, 1)), _S6);
  *((float *)&v25 + 2) = _S2 * v16.f32[0];
  __asm { FMLS            S16, S7, V0.S[1] }
  *(_QWORD *)&_Q6 = __PAIR64__(_S16, COERCE_UNSIGNED_INT(vmuls_lane_f32(_D5.f32[0], *(float32x2_t *)v16.f32, 1)));
  *((_QWORD *)&_Q6 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(_S2, *(float32x2_t *)v16.f32, 1));
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = _Q6;
  *(float32x2_t *)&v28 = vmul_laneq_f32(_D5, v16, 2);
  __asm { FMLS            S6, S2, V0.S[2] }
  *((_QWORD *)&v28 + 1) = _Q6;
  result.n128_u64[0] = (unint64_t)vmul_laneq_f32(_D5, v16, 3);
  result.n128_u64[1] = __PAIR64__(1.0, COERCE_UNSIGNED_INT(vmuls_lane_f32(_S2, v16, 3)));
  *(_OWORD *)(a3 + 32) = v28;
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t sub_1B17B39F8(__n128 *a1, double a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  __n128 v65;
  _OWORD v66[11];
  _OWORD v67[4];
  _OWORD v68[4];
  simd_float4x4 v69;
  simd_float4x4 v70;

  sub_1B1815C9C((uint64_t)a1);
  v65 = sub_1B1815A98(a1);
  memset(v66, 0, sizeof(v66));
  v14 = sub_1B1814768((uint64_t *)a1, v7, v8, v9, v10, v11, v12, v13);
  if (v14
    && (v21 = (uint64_t)v14, sub_1B17B33F4((uint64_t)v14, (uint64_t)v66, v15, v16, v17, v18, v19, v20)))
  {
    if (sub_1B1866768(v66, v22, v23, v24, v25, v26, v27, v28))
    {
      sub_1B1866720((uint64_t)v66, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      v44 = v65.n128_f32[2] / fmax(v65.n128_f32[3], 0.000001);
      sub_1B18662A8((unsigned __int8 *)v66, v44, v29, v30, v31, v32, v33, v34, v35);
      v69 = *(simd_float4x4 *)sub_1B1869AC8(v21, v45, v46, v47, v48, v49, v50, v51);
      v70 = __invert_f4(v69);
      v59 = 0;
      v67[0] = a3;
      v67[1] = a4;
      v67[2] = a5;
      v67[3] = a6;
      memset(v68, 0, sizeof(v68));
      do
      {
        v68[v59] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v70.columns[0], COERCE_FLOAT(v67[v59])), (float32x4_t)v70.columns[1], *(float32x2_t *)&v67[v59], 1), (float32x4_t)v70.columns[2], (float32x4_t)v67[v59], 2), (float32x4_t)v70.columns[3], (float32x4_t)v67[v59], 3);
        ++v59;
      }
      while (v59 != 4);
      v60 = sub_1B18665E0((uint64_t)v66, v52, v53, v54, v55, v56, v57, v58);
      sin(v60 / 180.0 * 3.14159265 * 0.5);
    }
    return sub_1B1869AC8(v21, v36, v37, v38, v39, v40, v41, v42);
  }
  else
  {
    sub_1B1815A5C((uint64_t)a1, 1);
    return sub_1B1815A5C((uint64_t)a1, 0);
  }
}

float sub_1B17B3CD0(uint64_t a1, int a2, float result, float a4)
{
  uint64_t i;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  BOOL v9;
  float v10;
  int v11;
  float v12;
  unsigned int v13;
  uint64_t v14;

  if (a2 >= 1)
  {
    for (i = 0; i != a2; *(_QWORD *)(a1 + 8 * i++) = v14)
    {
      if (i)
      {
        v5 = 0.5;
        v6 = 0.0;
        v7 = i;
        do
        {
          if ((v7 & 1) != 0)
            v8 = v5;
          else
            v8 = -0.0;
          v6 = v6 + v8;
          v5 = v5 * 0.5;
          v9 = v7 > 1;
          v7 >>= 1;
        }
        while (v9);
        v10 = 0.0;
        v11 = i;
        v12 = 0.33333;
        do
        {
          if (v11 != 3 * (v11 / 3))
            v10 = v10 + (float)((float)(v11 % 3) * v12);
          v12 = v12 * 0.33333;
          v13 = v11 + 2;
          v11 /= 3;
        }
        while (v13 > 4);
      }
      else
      {
        v6 = 0.0;
        v10 = 0.0;
      }
      *(float *)&v14 = (float)((float)(v6 * 2.0) + -1.0) * result;
      *((float *)&v14 + 1) = (float)((float)(v10 * 2.0) + -1.0) * a4;
    }
  }
  return result;
}

float32x4_t *sub_1B17B3DA8(float32x4_t *result, int a2, float a3, float a4, float a5)
{
  uint64_t i;
  float v6;
  float v7;
  unsigned int v8;
  float v9;
  BOOL v10;
  float v11;
  int v12;
  float v13;
  unsigned int v14;
  float32_t v15;
  float32x4_t v16;

  if (a2 >= 1)
  {
    for (i = 0; i != a2; result[i++] = v16)
    {
      if (i)
      {
        v6 = 0.5;
        v7 = 0.0;
        v8 = i;
        do
        {
          if ((v8 & 1) != 0)
            v9 = v6;
          else
            v9 = -0.0;
          v7 = v7 + v9;
          v6 = v6 * 0.5;
          v10 = v8 > 1;
          v8 >>= 1;
        }
        while (v10);
        v11 = 0.0;
        v12 = i;
        v13 = 0.33333;
        do
        {
          if (v12 != 3 * (v12 / 3))
            v11 = v11 + (float)((float)(v12 % 3) * v13);
          v13 = v13 * 0.33333;
          v14 = v12 + 2;
          v12 /= 3;
        }
        while (v14 >= 5);
        v15 = (float)((float)(v7 * 2.0) + -1.0) * a3;
        v16 = result[i];
        v16.f32[0] = v15;
        v16.f32[1] = (float)((float)(v11 * 2.0) + -1.0) * a4;
      }
      else
      {
        v16.i64[0] = 0;
        v16.i64[1] = result->i64[1];
        *result = v16;
      }
      v16.i64[1] = COERCE_UNSIGNED_INT(sqrtf(vmlas_n_f32(COERCE_FLOAT(vmulq_f32(v16, v16).i32[1]), v16.f32[0], v16.f32[0])) * a5);
    }
  }
  return result;
}

uint64_t sub_1B17B3EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  char v24;
  uint64_t v25;
  unsigned __int8 *v26;
  float32x4_t v27;
  int v28;
  char v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  float32x4_t v46;
  uint64_t v47;
  char v49;
  CFIndex v50;
  uint64_t v51;
  UInt8 *v52;
  CFDataRef v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CFIndex v61;
  int v62;
  UInt8 *v63;
  uint64_t *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1, a2);
  v13 = &v60 - 2 * v6;
  if (v6 < 1)
    return 0;
  v14 = 0;
  v15 = 0;
  v16 = v13 + 1;
  do
  {
    *(v16 - 1) = sub_1B17ED6C4(*(_QWORD *)(a1 + 8 * v15), v6, v7, v8, v9, v10, v11, v12);
    *v16 = v6;
    if (v14)
    {
      if (v14 != (_DWORD)v6)
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: Given sources must be of the same length for interval list creation"), v7, v8, v9, v10, v11, v12, v60);
        return 0;
      }
    }
    else
    {
      v14 = v6;
    }
    ++v15;
    v16 += 2;
  }
  while (a2 != v15);
  if (!v14)
    return 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v64 = v13;
  v23 = (unsigned __int8 *)v13 + 13;
  v24 = 1;
  do
  {
    if (a2 < 1)
    {
      v25 = 0;
    }
    else
    {
      v25 = 0;
      v26 = v23;
      while (1)
      {
        v27.i64[0] = COERCE_UNSIGNED_INT64(sub_1B198D4F8(*(v26 - 1), (const float *)(*(_QWORD *)(v26 - 13) + v22 * *v26), v7, v8, v9, v10, v11, v12, v17, v18.f32[0], v19)) & 0x7FFFFFFF7FFFFFFFLL;
        v27.i64[1] &= 0x7FFFFFFF7FFFFFFFuLL;
        v18.i64[0] = 0x3400000034000000;
        v18.i64[1] = 0x3400000034000000;
        v17 = (float32x4_t)vcgeq_f32(v27, v18);
        v17.i32[0] = vmaxvq_u32((uint32x4_t)v17);
        if (v17.i32[0] < 0)
          break;
        ++v25;
        v26 += 16;
        if (a2 == v25)
          goto LABEL_17;
      }
    }
    if (v25 == a2)
    {
LABEL_17:
      v24 |= v20++ > a3;
    }
    else
    {
      v20 = 0;
      v21 += v24 & 1;
      v24 = 0;
    }
    ++v22;
  }
  while (v22 != v14);
  if (!v21)
    return 0;
  if (v14 >= 0xFFFF)
    v28 = 4;
  else
    v28 = 2;
  v29 = 1;
  if (v14 >= 0xFFFF)
    v29 = 2;
  v30 = 2 * (v21 << v29);
  v63 = (UInt8 *)malloc_type_malloc(v30, 0x3EA1A8D3uLL);
  v61 = v30;
  v62 = v28;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v64 = (uint64_t *)((char *)v64 + 13);
  v43 = 1;
  do
  {
    if (a2 < 1)
    {
      v44 = 0;
    }
    else
    {
      v44 = 0;
      v45 = v64;
      while (1)
      {
        v46.i64[0] = COERCE_UNSIGNED_INT64(sub_1B198D4F8(*((unsigned __int8 *)v45 - 1), (const float *)(*(uint64_t *)((char *)v45 - 13) + v40 * *(unsigned __int8 *)v45), v31, v32, v33, v34, v35, v36, v37, v38.f32[0], v39)) & 0x7FFFFFFF7FFFFFFFLL;
        v46.i64[1] &= 0x7FFFFFFF7FFFFFFFuLL;
        v38.i64[0] = 0x3400000034000000;
        v38.i64[1] = 0x3400000034000000;
        v37 = (float32x4_t)vcgeq_f32(v46, v38);
        v37.i32[0] = vmaxvq_u32((uint32x4_t)v37);
        if (v37.i32[0] < 0)
          break;
        ++v44;
        v45 += 2;
        if (a2 == v44)
          goto LABEL_34;
      }
    }
    if (v44 == a2)
    {
LABEL_34:
      if (!(v43 & 1 | (v41 <= a3)))
      {
        if (v14 > 0xFFFE)
          *(_DWORD *)&v63[8 * v42 + 4] = v40 - v41;
        else
          *(_WORD *)&v63[4 * v42 + 2] = v40 - v41;
        ++v42;
        v43 = 1;
      }
      ++v41;
    }
    else if ((v43 & 1) != 0)
    {
      v41 = 0;
      v43 = 0;
      if (v14 > 0xFFFE)
        *(_DWORD *)&v63[8 * v42] = v40;
      else
        *(_WORD *)&v63[4 * v42] = v40;
    }
    else
    {
      v41 = 0;
      v43 = 0;
    }
    ++v40;
  }
  while (v40 != v14);
  if ((v43 & 1) != 0)
  {
    v49 = v62;
    v50 = v61;
  }
  else
  {
    v51 = (2 * v42) | 1;
    if (v14 > 0xFFFE)
      *(_DWORD *)&v63[4 * v51] = v14 - v41;
    else
      *(_WORD *)&v63[2 * v51] = v14 - v41;
    v49 = v62;
    v50 = v61;
    LODWORD(v42) = v42 + 1;
  }
  v52 = v63;
  v53 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v63, v50);
  free(v52);
  v47 = sub_1B17A39B4();
  sub_1B17A3B60(v47, 2, v54, v55, v56, v57, v58, v59);
  sub_1B17A4464(v47, v42, v53, v49);
  CFRelease(v53);
  return v47;
}

void sub_1B17B4260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, __n128 a10, int8x16_t a11, int8x16_t a12)
{
  float32x4_t v12;
  float32x4_t v13;
  _BYTE *v14;
  int8x16_t v16;
  float v17;
  float v18;
  float32_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x8_t v31;
  unsigned int v32;
  int v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v14 = (_BYTE *)a3;
  a11.i32[0] = a10.n128_i32[2];
  a12.i32[0] = 1.0;
  v16.i64[0] = 0x8000000080000000;
  v16.i64[1] = 0x8000000080000000;
  v16.i32[0] = vbslq_s8(v16, a12, a11).i32[0];
  v17 = a10.n128_f32[1] / (float)(fabsf(a10.n128_f32[2]) + 1.0);
  v18 = vmuls_lane_f32(v17, (float32x2_t)a10.n128_u64[0], 1);
  v12.f32[0] = -(float)(a10.n128_f32[0] * v17);
  v13.f32[0] = a10.n128_f32[2] + (float)(*(float *)v16.i32 * v18);
  v24.f32[0] = *(float *)v16.i32 * v12.f32[0];
  v13.f32[1] = *(float *)v16.i32 * v12.f32[0];
  v25.f32[0] = -a10.n128_f32[0];
  v13.f32[2] = -a10.n128_f32[0];
  v19 = 1.0 - v18;
  v20 = vmulq_f32(a9, v13);
  v23.f32[1] = -v13.f32[0];
  v23.f32[2] = v12.f32[0];
  v12.f32[1] = 1.0 - v18;
  v12.i32[2] = vmuls_lane_f32(-*(float *)v16.i32, (float32x2_t)a10.n128_u64[0], 1);
  v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
  v26.f32[0] = -v21;
  v22 = vmulq_f32(a9, v12);
  v22.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
  v23.f32[3] = -(float)(v17 * (float)-a10.n128_f32[0]);
  v24.f32[1] = -(float)(*(float *)v16.i32 * v12.f32[0]);
  v24.f32[2] = v19;
  v24.f32[3] = -v19;
  v25.i32[1] = a10.n128_u32[0];
  v25.i32[2] = v12.i32[2];
  v25.f32[3] = -(float)(a10.n128_f32[1] * (float)-*(float *)v16.i32);
  v26.f32[1] = v21;
  v26.f32[2] = -v22.f32[0];
  v26.i32[3] = v22.i32[0];
  v27 = a2;
  if ((a2 & 0xFF000000000000) == 0x1000000000000)
  {
    if ((_DWORD)a2)
    {
      v28 = 0;
      v29 = vnegq_f32(v26);
      do
      {
        v30 = (int8x16_t)vcgtq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v24, *(float *)(a1 + v28 + 4)), v23, *(float *)(a1 + v28)), v25, *(float *)(a1 + v28 + 8)), v29);
        v31 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), (int8x8_t)0x800000004);
        *v14++ = v30.i8[4] & 2 | (v30.i32[0] < 0) | v31.i8[0] | v31.i8[4];
        v28 += BYTE5(a2);
        --v27;
      }
      while (v27);
    }
  }
  else if ((_DWORD)a2)
  {
    v32 = 0;
    v33 = BYTE4(a2);
    v34 = BYTE5(a2);
    v35 = vnegq_f32(v26);
    v37 = v35;
    v39 = v24;
    v40 = v23;
    v38 = v25;
    do
    {
      *(double *)v36.i64 = sub_1B198D4F8(v33, (const float *)(a1 + v32), a3, a4, a5, a6, a7, a8, v35, a10.n128_f32[0], v26.f32[0]);
      v35 = (float32x4_t)vcgtq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v39, *(float32x2_t *)v36.f32, 1), v40, v36.f32[0]), v38, v36, 2), v37);
      a10.n128_u64[0] = (unint64_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), (int8x8_t)0x800000004);
      *v14++ = v35.i8[4] & 2 | (v35.i32[0] < 0) | a10.n128_u8[0] | a10.n128_u8[4];
      v32 += v34;
      --v27;
    }
    while (v27);
  }
}

void sub_1B17B4470(void *a1, CFArrayRef theArray, uint64_t a3)
{
  CFIndex Count;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *ValueAtIndex;
  uint64_t v36;
  uint64_t v37;
  CFIndex v38;
  const __CFAllocator *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  const UInt8 *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  CFDataRef v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  CFIndex v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  int Value;
  char *v82;
  _WORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  CFDataRef v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  CFIndex length;
  uint64_t v124;
  char v125;
  uint64_t bytes;
  UInt8 *bytesa;
  int v128;

  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v7 = Count;
    v8 = *(_QWORD *)CFArrayGetValueAtIndex(theArray, 0);
    v16 = sub_1B17A42B4(v8, v9, v10, v11, v12, v13, v14, v15);
    v24 = sub_1B17A426C(v8, v17, v18, v19, v20, v21, v22, v23);
    if (v24 == 2)
      v25 = 2;
    else
      v25 = 3;
    bytes = v25;
    if (*(_BYTE *)(a3 + 8))
    {
      v125 = v16;
      v128 = v24;
      if (v7 < 1)
      {
        v28 = 0;
        v26 = 0;
      }
      else
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        do
        {
          ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(theArray, v27);
          if ((void *)ValueAtIndex[2] != a1)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. different material!!!!"), v29, v30, v31, v32, v33, v34, (uint64_t)"material == elt->material");
          v36 = *ValueAtIndex;
          v37 = sub_1B17A47FC(*ValueAtIndex);
          if (v27 < v7 - 1 && v128 == 1)
          {
            if ((sub_1B17A47FC(v36) & 1) != 0)
              v28 += 3;
            else
              v28 += 2;
          }
          v26 += v37;
          ++v27;
        }
        while (v7 != v27);
      }
      v75 = v28 + 2 * v7 + v26;
      if (v128 == 1)
      {
        v76 = v75 - 2;
      }
      else
      {
        v75 = v26 * bytes;
        v76 = v26;
      }
      length = v75 * *(unsigned int *)(a3 + 12);
      v124 = v76;
      bytesa = (UInt8 *)sub_1B179E238(length);
      if (v7 >= 1)
      {
        v77 = 0;
        v78 = (uint64_t)bytesa;
        do
        {
          v79 = (uint64_t *)CFArrayGetValueAtIndex(theArray, v77);
          v80 = *v79;
          Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), v79);
          v82 = (char *)sub_1B17B48B8(v78, v80, Value, *(_DWORD *)(a3 + 12));
          v78 = (uint64_t)v82;
          if (v128 == 1 && v77 < v7 - 1)
          {
            memcpy(v82, &v82[-*(unsigned int *)(a3 + 12)], *(unsigned int *)(a3 + 12));
            v83 = (_WORD *)(v78 + *(unsigned int *)(a3 + 12));
            if ((sub_1B17A47FC(v80) & 1) != 0)
            {
              memcpy(v83, (char *)v83 - *(unsigned int *)(a3 + 12), *(unsigned int *)(a3 + 12));
              v83 = (_WORD *)((char *)v83 + *(unsigned int *)(a3 + 12));
            }
            v84 = (uint64_t *)CFArrayGetValueAtIndex(theArray, ++v77);
            v85 = *v84;
            v90 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), v84);
            v91 = *(_DWORD *)(a3 + 12);
            if (v91 == 2)
            {
              *v83 = sub_1B17A4A74(v85, 0, 0, 0, v86, v87, v88, v89) + v90;
            }
            else if (v91 == 4)
            {
              *(_DWORD *)v83 = sub_1B17A4A74(v85, 0, 0, 0, v86, v87, v88, v89) + v90;
            }
            else
            {
              *(_BYTE *)v83 = sub_1B17A4A74(v85, 0, 0, 0, v86, v87, v88, v89) + v90;
            }
            v78 = (uint64_t)v83 + *(unsigned int *)(a3 + 12);
          }
          else
          {
            ++v77;
          }
        }
        while (v77 != v7);
      }
      v92 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytesa, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      v93 = (const void *)sub_1B17A39B4();
      sub_1B17A43C4((uint64_t)v93, v125, v94, v95, v96, v97, v98, v99);
      sub_1B17A3C5C((uint64_t)v93, v128, v124, v92, *(unsigned int *)(a3 + 12), v100, v101, v102);
      CFRelease(v92);
      v110 = sub_1B17A0848(*(_QWORD *)a3, v103, v104, v105, v106, v107, v108, v109);
      sub_1B18760C4(v110, v93, v111, v112, v113, v114, v115, v116);
      CFRelease(v93);
      if (a1)
        sub_1B17A1B04(*(_QWORD *)a3, a1, v117, v118, v119, v120, v121, v122);
    }
    else if (v7 >= 1)
    {
      v38 = 0;
      v39 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        v40 = (uint64_t *)CFArrayGetValueAtIndex(theArray, v38);
        v41 = *v40;
        v42 = sub_1B17A47FC(*v40) * bytes * *(unsigned int *)(a3 + 12);
        v43 = (const UInt8 *)sub_1B179E238(v42);
        v44 = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), v40);
        sub_1B17B48B8((uint64_t)v43, v41, v44, *(_DWORD *)(a3 + 12));
        v52 = (const void *)sub_1B17A3C70(v41, v45, v46, v47, v48, v49, v50, v51);
        v53 = CFDataCreateWithBytesNoCopy(v39, v43, v42, v39);
        v54 = sub_1B17A47FC((uint64_t)v52);
        sub_1B17A4464((uint64_t)v52, v54, v53, *(_DWORD *)(a3 + 12));
        CFRelease(v53);
        v62 = sub_1B17A0848(*(_QWORD *)a3, v55, v56, v57, v58, v59, v60, v61);
        sub_1B18760C4(v62, v52, v63, v64, v65, v66, v67, v68);
        CFRelease(v52);
        if (a1)
          sub_1B17A1B04(*(_QWORD *)a3, a1, v69, v70, v71, v72, v73, v74);
        ++v38;
      }
      while (v7 != v38);
    }
    sub_1B17AEC0C(theArray);
  }
}

uint64_t sub_1B17B48B8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t k;
  uint64_t m;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t j;
  uint64_t v40;
  uint64_t n;
  uint64_t ii;
  int v44;

  v44 = 0;
  v8 = sub_1B17A47FC(a2);
  if (sub_1B17A426C(a2, v9, v10, v11, v12, v13, v14, v15) == 2)
    v16 = 2;
  else
    v16 = 3;
  sub_1B17A4570(a2, &v44);
  if (sub_1B17A426C(a2, v17, v18, v19, v20, v21, v22, v23) == 1)
  {
    if (a4 == 2)
    {
      if (v8 < -1)
      {
        v34 = 0;
      }
      else
      {
        v33 = 0;
        v34 = v8 + 2;
        do
        {
          *(_WORD *)(a1 + 2 * v33) = sub_1B17A4A74(a2, 3 * (v33 / 3), v33 % 3, 0, v24, v25, v26, v27) + a3;
          ++v33;
        }
        while (v34 != v33);
      }
      return a1 + 2 * v34;
    }
    else if (a4 == 1)
    {
      if (v8 < -1)
      {
        v29 = 0;
      }
      else
      {
        v28 = 0;
        v29 = v8 + 2;
        do
        {
          *(_BYTE *)(a1 + v28) = sub_1B17A4A74(a2, 3 * (v28 / 3), v28 % 3, 0, v24, v25, v26, v27) + a3;
          ++v28;
        }
        while (v29 != v28);
      }
      return a1 + v29;
    }
    else
    {
      if (v8 < -1)
      {
        v36 = 0;
      }
      else
      {
        v35 = 0;
        v36 = v8 + 2;
        do
        {
          *(_DWORD *)(a1 + 4 * v35) = sub_1B17A4A74(a2, 3 * (v35 / 3), v35 % 3, 0, v24, v25, v26, v27) + a3;
          ++v35;
        }
        while (v36 != v35);
      }
      return a1 + 4 * v36;
    }
  }
  else if (a4 == 1)
  {
    if (v8 < 1)
    {
      v37 = 0;
    }
    else
    {
      v37 = 0;
      for (i = 0; i != v8; ++i)
      {
        for (j = 0; j != v16; ++j)
          *(_BYTE *)(a1 + v37 + j) = sub_1B17A4A74(a2, i, j, 0, v24, v25, v26, v27) + a3;
        v37 += j;
      }
    }
    return a1 + v37;
  }
  else if (a4 == 2)
  {
    if (v8 < 1)
    {
      v30 = 0;
    }
    else
    {
      v30 = 0;
      for (k = 0; k != v8; ++k)
      {
        for (m = 0; m != v16; ++m)
          *(_WORD *)(a1 + 2 * v30 + 2 * m) = sub_1B17A4A74(a2, k, m, 0, v24, v25, v26, v27) + a3;
        v30 += m;
      }
    }
    return a1 + 2 * v30;
  }
  else
  {
    if (v8 < 1)
    {
      v40 = 0;
    }
    else
    {
      v40 = 0;
      for (n = 0; n != v8; ++n)
      {
        for (ii = 0; ii != v16; ++ii)
          *(_DWORD *)(a1 + 4 * v40 + 4 * ii) = sub_1B17A4A74(a2, n, ii, 0, v24, v25, v26, v27) + a3;
        v40 += ii;
      }
    }
    return a1 + 4 * v40;
  }
}

uint64_t sub_1B17B4B98(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if ((a3 & 0xFD) == 0)
  {
    v3 = result;
    v4 = a3;
    v5 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * a3 + 72);
    result = sub_1B17EE4E4(a2);
    if (v5 <= result)
      v6 = result;
    else
      v6 = v5;
    *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * v4 + 72) = v6;
  }
  return result;
}

void sub_1B17B4BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const __CFArray *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float v46;
  float v47;
  _DWORD *v48;
  int v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  CFIndex i;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t j;
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t v103;
  _OWORD v104[3];
  uint64_t v105;
  _QWORD v106[9];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v8 = a5;
  v13 = sub_1B1874BE0(a1, a2, a3, a4, a5, a6, a7, a8);
  v21 = sub_1B17EDAE0(a3, v14, v15, v16, v17, v18, v19, v20);
  v29 = sub_1B17ED6C4(a2, v22, v23, v24, v25, v26, v27, v28);
  v100 = v30;
  v101 = v29;
  v44 = sub_1B17ED6C4(a3, v30, v31, v32, v33, v34, v35, v36);
  v102 = v37;
  if (v8)
    v48 = sub_1B19999D8(a2, v37, v38, v39, v40, v41, v42, v43);
  else
    v48 = 0;
  v49 = BYTE4(v102);
  v50 = BYTE5(v102);
  v99 = v21;
  if (v21)
  {
    v51 = 0;
    v52 = v99;
    do
    {
      sub_1B198D91C(BYTE4(v102), v44 + v51, v38, v39, v40, v41, v42, v43, (float32x4_t)0);
      v51 += BYTE5(v102);
      --v52;
    }
    while (v52);
  }
  if ((uint64_t)v13 >= 1)
  {
    for (i = 0; (const __CFArray *)i != v13; ++i)
    {
      v60 = sub_1B1874C3C(a1, i, a4, v39, v40, v41, v42, v43);
      if ((_DWORD)a4)
        v61 = 0;
      else
        v61 = sub_1B1875D94(a1, 0, 0, v55, v56, v57, v58, v59);
      v110 = 0;
      v108 = 0u;
      v109 = 0u;
      v107 = 0u;
      sub_1B17A4804((uint64_t)v60, v61, v54, v55, v56, v57, v58, v59, (uint64_t)&v107);
      if ((BYTE10(v108) & 0xFA) != 0)
      {
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: CFXUnifyNormalsFromGeometry can only process triangles and polygons"), v62, v63, v64, v65, v66, v67, v98);
      }
      else
      {
        v106[0] = MEMORY[0x1E0C809B0];
        v106[1] = 3221225472;
        v106[2] = sub_1B17B5044;
        v106[3] = &unk_1E63D5300;
        v106[4] = v101;
        v106[5] = v100;
        v106[6] = v48;
        v106[7] = v44;
        v106[8] = v102;
        v104[0] = v107;
        v104[1] = v108;
        v104[2] = v109;
        v105 = v110;
        sub_1B17A5198((uint64_t *)v104, (uint64_t)v106, v62, v63, v64, v65, v66, v67);
      }
    }
  }
  if (v48 && v99)
  {
    v68 = 0;
    for (j = 0; j != v99; ++j)
    {
      v70 = v48[j];
      if (j != v70)
      {
        *(double *)v71.i64 = sub_1B198D4F8(BYTE4(v102), (const float *)(v44 + v70 * BYTE5(v102)), v38, v39, v40, v41, v42, v43, v45, v46, v47);
        sub_1B198D91C(BYTE4(v102), v44 + v68, v72, v73, v74, v75, v76, v77, v71);
      }
      v68 += BYTE5(v102);
    }
  }
  if (v99)
  {
    v78 = 0;
    v79 = v99;
    __asm { FMOV            V0.4S, #1.0 }
    v103 = (int8x16_t)_Q0;
    do
    {
      *(double *)v85.i64 = sub_1B198D4F8(v49, (const float *)(v44 + v78), v38, v39, v40, v41, v42, v43, _Q0, v46, v47);
      v86 = vmulq_f32(v85, v85);
      v86.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).u64[0];
      v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 0);
      v87.i32[3] = 0;
      v88 = vrsqrteq_f32(v87);
      v89 = vmulq_f32(v88, vrsqrtsq_f32(v87, vmulq_f32(v88, v88)));
      v90 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v86.f32[0] != 0.0)), 0x1FuLL));
      v90.i32[3] = 0;
      v91 = vmulq_f32(v85, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v90), (int8x16_t)vmulq_f32(v89, vrsqrtsq_f32(v87, vmulq_f32(v89, v89))), v103));
      v91.i32[3] = v85.i32[3];
      sub_1B198D91C(v49, v44 + v78, v92, v93, v94, v95, v96, v97, v91);
      v78 += v50;
      --v79;
    }
    while (v79);
  }
  free(v48);
}

void sub_1B17B4ECC(uint64_t a1, float32x4_t a2, float32x4_t a3, double a4, float32x4_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int v12;
  unsigned int *v13;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  float32x4_t v22;
  int8x16_t v23;
  unsigned int v24;
  uint64_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;

  v12 = a8;
  v13 = (unsigned int *)a7;
  if (a8 > 2
    || (sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unexpected vertex count"), a7, a8, a9, a10, a11, a12, (uint64_t)"faceVertexCount >= 3"), v12))
  {
    v15 = *(_DWORD *)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 32);
    v17 = v13[1];
    if (v15 < v17)
      v17 = *(_DWORD *)(a1 + 72);
    v18 = *(unsigned __int8 *)(a1 + 45);
    v19 = v16 + v17 * v18;
    a2.i64[0] = *(_QWORD *)v19;
    a2.i32[2] = *(_DWORD *)(v19 + 8);
    if (v15 >= *v13)
      v20 = *v13;
    else
      v20 = *(_DWORD *)(a1 + 72);
    v21 = v16 + v20 * v18;
    a3.i64[0] = *(_QWORD *)v21;
    a3.i32[2] = *(_DWORD *)(v21 + 8);
    v22 = vsubq_f32(a2, a3);
    v23 = (int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22);
    v24 = v13[2];
    if (v15 < v24)
      v24 = *(_DWORD *)(a1 + 72);
    v25 = v16 + v24 * v18;
    a5.i64[0] = *(_QWORD *)v25;
    a5.i32[2] = *(_DWORD *)(v25 + 8);
    v26 = vsubq_f32(a5, a3);
    v27 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), vnegq_f32(v22)), v26, (float32x4_t)vextq_s8(v23, (int8x16_t)v22, 0xCuLL));
    v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL);
    v29 = v28;
    v29.i32[3] = 0;
    v30 = (int8x16_t)vmulq_f32(v29, v29);
    *(float32x2_t *)v30.i8 = vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
    v31 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1)), 0);
    v32 = (int8x16_t)vceqzq_f32(v31);
    v33 = vrsqrteq_f32(v31);
    v34 = vmulq_f32(v33, vrsqrtsq_f32(v31, vmulq_f32(v33, v33)));
    v35 = (int8x16_t)vmulq_f32(v34, vrsqrtsq_f32(v31, vmulq_f32(v34, v34)));
    __asm { FMOV            V3.4S, #1.0 }
    v41 = (float32x4_t)vbslq_s8(v32, _Q3, v35);
    v42 = vmulq_f32(v28, v41);
    v43 = *(_QWORD *)(a1 + 48);
    v44 = *(_QWORD *)(a1 + 56);
    v45 = *(unsigned __int8 *)(a1 + 69);
    v46 = v12;
    do
    {
      v48 = *v13++;
      v47 = v48;
      if (v15 < v48)
        v47 = v15;
      if (v43)
        v47 = *(_DWORD *)(v43 + 4 * v47);
      v49 = v44 + v47 * v45;
      v41.i64[0] = *(_QWORD *)v49;
      v41.i32[2] = *(_DWORD *)(v49 + 8);
      v41 = vaddq_f32(v42, v41);
      *(_QWORD *)v49 = v41.i64[0];
      *(_DWORD *)(v49 + 8) = v41.i32[2];
      --v46;
    }
    while (v46);
  }
}

void sub_1B17B5044(uint64_t a1, float32x4_t a2, float a3, float a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned int v11;
  unsigned int *v12;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  const float *v58;
  float32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;

  v11 = a7;
  v12 = a6;
  *(double *)v14.i64 = sub_1B198D4F8(*(unsigned __int8 *)(a1 + 44), (const float *)(*(_QWORD *)(a1 + 32) + *a6 * *(unsigned __int8 *)(a1 + 45)), (uint64_t)a6, a7, a8, a9, a10, a11, a2, a3, a4);
  v67 = v14;
  *(double *)v23.i64 = sub_1B198D4F8(*(unsigned __int8 *)(a1 + 44), (const float *)(*(_QWORD *)(a1 + 32) + v12[1] * *(unsigned __int8 *)(a1 + 45)), v15, v16, v17, v18, v19, v20, v14, v21, v22);
  v66 = v23;
  *(double *)v38.i64 = sub_1B198D4F8(*(unsigned __int8 *)(a1 + 44), (const float *)(*(_QWORD *)(a1 + 32) + v12[2] * *(unsigned __int8 *)(a1 + 45)), v24, v25, v26, v27, v28, v29, v23, v30, v31);
  if (v11)
  {
    v39 = vsubq_f32(v66, v67);
    v40 = vsubq_f32(v38, v67);
    v41 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL), vnegq_f32(v39)), v40, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL));
    v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL);
    v42.i32[3] = 0;
    v43 = (int8x16_t)vmulq_f32(v42, v42);
    *(float32x2_t *)v43.i8 = vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
    v44 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1)), 0);
    v45 = vrsqrteq_f32(v44);
    v46 = vmulq_f32(v45, vrsqrtsq_f32(v44, vmulq_f32(v45, v45)));
    v47 = (int8x16_t)vmulq_f32(v46, vrsqrtsq_f32(v44, vmulq_f32(v46, v46)));
    __asm { FMOV            V3.4S, #1.0 }
    v53 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v44), _Q3, v47);
    v54 = vmulq_f32(v42, v53);
    v68 = v54;
    v55 = v11;
    do
    {
      v56 = *(_QWORD *)(a1 + 48);
      v57 = v12;
      if (v56)
        v57 = (_DWORD *)(v56 + 4 * *v12);
      v58 = (const float *)(*(_QWORD *)(a1 + 56) + *v57 * *(unsigned __int8 *)(a1 + 69));
      *(double *)v59.i64 = sub_1B198D4F8(*(unsigned __int8 *)(a1 + 68), v58, v32, v33, v34, v35, v36, v37, v54, v53.f32[0], *(float *)v47.i32);
      sub_1B198D91C(*(unsigned __int8 *)(a1 + 68), (uint64_t)v58, v60, v61, v62, v63, v64, v65, vaddq_f32(v68, v59));
      ++v12;
      --v55;
    }
    while (v55);
  }
}

uint64_t sub_1B17B51B8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  switch(a3)
  {
    case 2:
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, a2, a4 + 8);
    case 1:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    case 0:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t sub_1B17B51F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _BYTE *v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CFX::RG::Resource *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[10];

  v8 = &unk_1EEF65000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF655D0);
  if ((v9 & 1) == 0)
  {
    v28 = a2;
    v29 = a3;
    v27 = __cxa_guard_acquire(&qword_1EEF655D0);
    v8 = &unk_1EEF65000;
    a2 = v28;
    a3 = v29;
    if (v27)
    {
      byte_1EEF655C8 = 1;
      __cxa_guard_release(&qword_1EEF655D0);
      v8 = (_BYTE *)&unk_1EEF65000;
      a2 = v28;
      a3 = v29;
    }
  }
  if (v8[1480])
    v10 = 0x3E7754EAF0AF1D07;
  else
    v10 = 0;
  CFX::RG::Pass::Pass(a1, a2, a3, *(_QWORD *)a5, 2, v10, 0);
  *(_QWORD *)a1 = &off_1E63D05D0;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)a5;
  *(_QWORD *)a1 = &off_1E63CF1B0;
  v11 = *(_OWORD *)(a5 + 16);
  v12 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 408) = v12;
  *(_OWORD *)(a1 + 376) = v11;
  v13 = *(_OWORD *)(a5 + 64);
  v14 = *(_OWORD *)(a5 + 80);
  v15 = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 472) = v15;
  *(_OWORD *)(a1 + 424) = v13;
  *(_OWORD *)(a1 + 440) = v14;
  v16 = *(_OWORD *)(a5 + 128);
  v17 = *(_OWORD *)(a5 + 144);
  v18 = *(_OWORD *)(a5 + 176);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a5 + 160);
  *(_OWORD *)(a1 + 536) = v18;
  *(_OWORD *)(a1 + 488) = v16;
  *(_OWORD *)(a1 + 504) = v17;
  *(_OWORD *)(a1 + 552) = 0u;
  if (*(_BYTE *)(a1 + 376))
  {
    v19 = *(_DWORD *)(a1 + 544);
    if (!*(_BYTE *)(a1 + 401))
      *(_BYTE *)(a1 + 401) = 1;
    *(_BYTE *)(a1 + 400) = v19;
    v20 = *(_OWORD *)(a1 + 496);
    v30[6] = *(_OWORD *)(a1 + 480);
    v30[7] = v20;
    v21 = *(_OWORD *)(a1 + 528);
    v30[8] = *(_OWORD *)(a1 + 512);
    v30[9] = v21;
    v22 = *(_OWORD *)(a1 + 432);
    v30[2] = *(_OWORD *)(a1 + 416);
    v30[3] = v22;
    v23 = *(_OWORD *)(a1 + 464);
    v30[4] = *(_OWORD *)(a1 + 448);
    v30[5] = v23;
    v24 = *(_OWORD *)(a1 + 400);
    v30[0] = *(_OWORD *)(a1 + 384);
    v30[1] = v24;
    v25 = sub_1B17A34D0(a4, (uint64_t)"MIPMAP_OUTPUT", v30);
    *(_QWORD *)(a1 + 560) = v25;
    CFX::RG::Pass::writeTo((uint64_t *)a1, v25);
  }
  return a1;
}

void sub_1B17B5380(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17B5398(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  id Texture;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD v35[3];

  v5 = *a3;
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 560));
  if (*(_BYTE *)(a1 + 376))
  {
    v9 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 552));
    v13 = objc_msgSend_arrayLength(v9, v10, v11, v12);
    if ((unint64_t)(objc_msgSend_textureType(v9, v14, v15, v16) - 5) >= 2)
      v20 = v13;
    else
      v20 = 6 * v13;
    v21 = objc_msgSend_width(v9, v17, v18, v19);
    v25 = objc_msgSend_height(v9, v22, v23, v24);
    v29 = objc_msgSend_depth(v9, v26, v27, v28);
    if (v20)
    {
      v30 = v29;
      for (i = 0; i != v20; ++i)
      {
        memset(v35, 0, sizeof(v35));
        v34[0] = v21;
        v34[1] = v25;
        v34[2] = v30;
        memset(v33, 0, sizeof(v33));
        objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_(v5, v6, (uint64_t)v9, i, 0, v35, v34, Texture, i, 0, v33);
      }
    }
  }
  return objc_msgSend_generateMipmapsForTexture_(v5, v6, (uint64_t)Texture, v7);
}

uint64_t *sub_1B17B54B4(uint64_t a1, CFX::RG::Resource *a2)
{
  uint64_t *result;

  *(_QWORD *)(a1 + 552) = a2;
  result = CFX::RG::Pass::readFrom((uint64_t *)a1, a2);
  if (!*(_BYTE *)(a1 + 376))
  {
    *(_QWORD *)(a1 + 560) = a2;
    return CFX::RG::Pass::writeTo((uint64_t *)a1, a2);
  }
  return result;
}

void sub_1B17B5500(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17B5528(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17B569C(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_1B17B5844(uint64_t a1)
{
  sub_1B18E8AD4(*(void **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40));
}

void sub_1B17B5A7C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  if ((sub_1B18C2F24(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 20));
    objc_msgSend_removeObjectForKey_(*(void **)(*(_QWORD *)(a1 + 40) + 24), v10, *(_QWORD *)(a1 + 48), v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 20));
  }
}

void sub_1B17B5C4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C30E4(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_1B17B5CF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3148(*(void **)(a1 + 32), a2, a3, a4, *(float *)(a1 + 40));
}

void sub_1B17B5DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C2FF4(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4);
}

void sub_1B17B5E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3064(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4, *(float *)(a1 + 48));
}

void sub_1B17B6358(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFXBinding *v24;

  v5 = (_QWORD *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  v24 = objc_alloc_init(CFXBinding);
  v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(_QWORD *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(_QWORD *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(_QWORD *)(a1 + 64), v17);
  sub_1B193F4C8(v5, v24, v18, v19, v20, v21, v22, v23);

}

void sub_1B17B6484(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F704(v5, *(const __CFString **)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17B6530(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F68C(v4, v5, v6, v7, v8, v9, v10, v11);
}

id sub_1B17B66CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = (id)objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], a2, (uint64_t)&unk_1E6478AC0, a4);
  qword_1EEF655D8 = (uint64_t)result;
  return result;
}

void sub_1B17B69D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8DB8(v5, *(_QWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17B6B20(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8D1C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B6C60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8E4C(v5, *(_QWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17B7038(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8FC4(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B7350(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8FC4(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B749C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9220(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B75E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9350(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B7734(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E92BC(v5, *(_BYTE *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17B786C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8E4C(v5, *(_QWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17B7C40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8FC4(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B7D8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9220(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B7ED8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9350(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B8024(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E962C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B8170(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9938(v5, *(_BYTE *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17B82BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E96C8(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B8408(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9764(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B8554(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9800(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B86A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E989C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B8C68(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9BB0(v5, *(_BYTE *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17B8DB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9C48(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B8F00(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9CE8(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B904C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9D88(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B9198(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9E28(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B92E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9EC8(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B9430(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9F68(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B99D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8FC4(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B9B24(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9220(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B9C70(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9350(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17B9DBC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E92BC(v5, *(_BYTE *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17B9F10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (__n128 *)objc_msgSend_cfxObject(*(void **)(a1 + 48), a2, a3, a4);
  sub_1B18EA6B8(v5, *(__n128 *)(a1 + 32), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BA05C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EA750(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BA1A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EA7EC(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BA2E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (_QWORD *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EA888(v5, *(_QWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17BA9EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8FC4(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BAB38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9220(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BAC84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9350(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BADD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E962C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BB1FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EB144(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BB348(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8FC4(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BB718(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8D1C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BB864(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9220(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BB9B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9350(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BBAFC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E962C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BBC50(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (__n128 *)objc_msgSend_cfxObject(*(void **)(a1 + 48), a2, a3, a4);
  sub_1B18EA6B8(v5, *(__n128 *)(a1 + 32), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BBD9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EA750(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BBEF0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (__n128 *)objc_msgSend_cfxObject(*(void **)(a1 + 48), a2, a3, a4);
  sub_1B18EABB4(v5, *(__n128 *)(a1 + 32), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BC03C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EAC4C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BC190(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (__n128 *)objc_msgSend_cfxObject(*(void **)(a1 + 48), a2, a3, a4);
  sub_1B18EACE8(v5, *(__n128 *)(a1 + 32), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BC2DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EAD80(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BC430(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  sub_1B18EAE1C(v5, v9, v10, v11, v12, v13, v14, v15);
}

void sub_1B17BCD60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EB31C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BCEA0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (_BYTE *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EB3DC(v5, *(unsigned __int8 *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17BD214(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EB7F4(v5, *(int *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17BD360(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EB840(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BD4B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EB910(v5, *(double *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BD600(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E9800(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BD74C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E989C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BD8A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EB9AC(v5, *(double *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BD9EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EA750(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BDB38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EA7EC(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BDC8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EBA48(v5, *(double *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BDDE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (__n128 *)objc_msgSend_cfxObject(*(void **)(a1 + 48), a2, a3, a4);
  sub_1B18EABB4(v5, *(__n128 *)(a1 + 32), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BDF34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (__n128 *)objc_msgSend_cfxObject(*(void **)(a1 + 48), a2, a3, a4);
  sub_1B18EBAE4(v5, *(__n128 *)(a1 + 32), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BE088(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (__n128 *)objc_msgSend_cfxObject(*(void **)(a1 + 48), a2, a3, a4);
  sub_1B18EACE8(v5, *(__n128 *)(a1 + 32), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BE1DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EBB7C(v5, *(double *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BE328(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EBBD0(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BE474(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EBC6C(v5, *(_BYTE *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17BE5C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EBCB8(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BF2CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E8FC4(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BF420(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EBEEC(v5, *(double *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BF56C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18E96C8(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BF6B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EBF88(v5, *(_BYTE *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B17BFC48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EB31C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BFD94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EC0F4(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B17BFEE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (float *)objc_msgSend_cfxObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18EC16C(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1B17C0180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B21AB51C(a1, "HybridRenderer");
  *(_QWORD *)v4 = off_1E63D0740;
  *(_QWORD *)(v4 + 24) = a2;
  *(_BYTE *)(v4 + 32) = 1;
  *(_DWORD *)(v4 + 36) = 1065353216;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)(v4 + 56));
  *(_QWORD *)(a1 + 256) = 0x3F66666600000018;
  *(_OWORD *)(a1 + 272) = xmmword_1B2245850;
  *(_OWORD *)(a1 + 288) = xmmword_1B2245860;
  *(_OWORD *)(a1 + 304) = xmmword_1B2245870;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = 1090519040;
  *(_WORD *)(a1 + 360) = 1;
  *(_BYTE *)(a1 + 376) = 1;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)(a1 + 392));
  *(_BYTE *)(a1 + 552) = 1;
  *(_DWORD *)(a1 + 556) = 0;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)(a1 + 712));
  *(_BYTE *)(a1 + 872) = 1;
  *(_DWORD *)(a1 + 876) = 0;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)(a1 + 1048));
  *(_BYTE *)(a1 + 1208) = 1;
  *(_DWORD *)(a1 + 1212) = 0;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)(a1 + 1368));
  *(_BYTE *)(a1 + 1528) = 1;
  *(_DWORD *)(a1 + 1532) = 0;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference((CFX::RG::TextureDescriptorReference *)(a1 + 1688));
  *(_BYTE *)(a1 + 1848) = 1;
  *(_DWORD *)(a1 + 1936) = 0;
  *(_DWORD *)(a1 + 1852) = 1;
  *(_DWORD *)(a1 + 556) = 1;
  *(_DWORD *)(a1 + 876) = 0;
  *(_DWORD *)(a1 + 1212) = 0;
  *(_DWORD *)(a1 + 1532) = 1;
  *(_BYTE *)(a1 + 1208) = 0;
  *(_BYTE *)(a1 + 1528) = 0;
  return a1;
}

uint64_t sub_1B17C028C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v4, *(_WORD *)(a1 + 8), 9273, 1656467160);
  return sub_1B17A371C(a2, v4, 1);
}

uint64_t sub_1B17C0304@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v3, 53296, 9273, 1893898584);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v4, 53296, 9273, 1490954098);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v5, 53296, 9273, -287492009);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v6, 53296, 9273, 1251382574);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v7, 53296, 9273, -1170177454);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v8, 53296, 9273, -797957750);
  return sub_1B17A371C(a1, &v3, 6);
}

unint64_t sub_1B17C03F8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *a3;
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a3 + 1);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v10 = v7;
      v8 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v10);
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) >> 47));
      v6 -= 8;
    }
    while (v6);
  }
  return v3;
}

void sub_1B17C047C(uint64_t a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  CFX::RG::Resource *v6;
  CFX::RG::Resource *v7;
  CFX::RG::Resource *v8;
  CFX::RG::Resource *v9;
  uint64_t v10;
  __n128 *v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFX::RG::Resource *v24;
  CFX::RG::Resource *v25;
  uint64_t *v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CFX::RG::Resource *v35;
  uint64_t *v36;
  CFX::RG::Resource *v37;
  CFX::RG::Resource *v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t *v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t *v56;
  CFX::RG::Resource *v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  CFX::RG::Resource *v66;
  uint64_t *v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t *v76;
  CFX::CrossFrameResourceManager *v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  CFX::RG::Resource *v89;
  __int128 *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t *CopyPass;
  uint64_t v124;
  uint64_t v125;
  CFX::RG::Resource *v126;
  CFX::RG::Resource *v127;
  uint64_t *v128;
  __int16 v129;
  unint64_t v130;
  CFX::RG::Pass *v131;
  CFX::RG::Pass *v132;
  CFX::RG::Resource *v133;
  CFX::RG::Resource *v134;
  CFX::RG::Resource *v135;
  CFX::RG::Resource *v136;
  CFX::RG::Resource *v137;
  CFX::RG::Resource *v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  CFX::RG::Pass *v143;
  CFX::RG::Resource *v144;
  uint64_t *v145;
  CFX::RG::Pass *v146;
  CFX::RG::Resource *v147;
  unint64_t v148;
  _OWORD v149[10];
  _BYTE v150[160];
  _OWORD v151[10];
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  CFX::RG::Resource *v193;
  CFX::RG::Resource *v194;
  CFX::RG::Resource *v195;
  uint64_t v196;
  _BYTE v197[160];
  uint64_t v198;
  _BYTE v199[160];
  uint64_t v200;
  _BYTE v201[160];
  uint64_t v202;
  _BYTE v203[160];
  uint64_t v204;
  _BYTE v205[160];
  uint64_t v206;
  _BYTE v207[160];
  uint64_t v208;
  _BYTE v209[160];
  uint64_t v210;
  _BYTE v211[160];
  uint64_t v212;
  _BYTE v213[160];
  _OWORD __dst[21];
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  sub_1B1815FE8(*(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v212, 9273, 9273, 1656467160);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v213, v212);
  v6 = sub_1B17C1128((uint64_t)a3, (uint64_t)"HybridRenderer input color", (CFX::RG::ResourceReference *)v213);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v210, 9273, 9273, 1251382574);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v211, v210);
  v133 = sub_1B17C1128((uint64_t)a3, (uint64_t)"HybridRenderer input emission", (CFX::RG::ResourceReference *)v211);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v208, 9273, 9273, 1490954098);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v209, v208);
  v7 = sub_1B17C1128((uint64_t)a3, (uint64_t)"HybridRenderer input normals", (CFX::RG::ResourceReference *)v209);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v206, 9273, 9273, 1893898584);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v207, v206);
  v8 = sub_1B17C1128((uint64_t)a3, (uint64_t)"HybridRenderer input albedo", (CFX::RG::ResourceReference *)v207);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v204, 9273, 9273, -287492009);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v205, v204);
  v137 = sub_1B17C1128((uint64_t)a3, (uint64_t)"HybridRenderer input roughmetalTarget", (CFX::RG::ResourceReference *)v205);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v202, 9273, 9273, -1170177454);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v203, v202);
  v147 = sub_1B17C1128((uint64_t)a3, (uint64_t)"HybridRenderer input velocityTarget", (CFX::RG::ResourceReference *)v203);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v200, 9273, 9273, -797957750);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v201, v200);
  v9 = sub_1B17C1128((uint64_t)a3, (uint64_t)"HybridRenderer input depthTarget", (CFX::RG::ResourceReference *)v201);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v198, 9273, 9273, -495228831);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v199, v198);
  v135 = sub_1B17C1128((uint64_t)a3, (uint64_t)"HybridRenderer input clearCoat", (CFX::RG::ResourceReference *)v199);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v196, 9273, 9273, -965507924);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v197, v196);
  v134 = sub_1B17C1128((uint64_t)a3, (uint64_t)"HybridRenderer input subsurface", (CFX::RG::ResourceReference *)v197);
  v152 = *(_QWORD *)(a1 + 24);
  v153 = (unint64_t)v6;
  v146 = (CFX::RG::Pass *)sub_1B1823E58((CFX::RG::RenderGraphContext *)a2, &v152);
  v152 = *(_QWORD *)(a1 + 24);
  v153 = (unint64_t)v9;
  v10 = sub_1B1823E58((CFX::RG::RenderGraphContext *)a2, &v152);
  memcpy(__dst, (const void *)(a1 + 48), sizeof(__dst));
  *(_QWORD *)&__dst[0] = *(_QWORD *)(a1 + 24);
  v11 = (__n128 *)CFX::RG::Resource::textureDesc(v6);
  v12 = *v11;
  *(__n128 *)((char *)&__dst[1] + 8) = v11[1];
  *(__n128 *)((char *)__dst + 8) = v12;
  v13 = v11[2];
  v14 = v11[3];
  v15 = v11[4];
  *(__n128 *)((char *)&__dst[5] + 8) = v11[5];
  *(__n128 *)((char *)&__dst[4] + 8) = v15;
  *(__n128 *)((char *)&__dst[3] + 8) = v14;
  *(__n128 *)((char *)&__dst[2] + 8) = v13;
  v16 = v11[6];
  v17 = v11[7];
  v18 = v11[8];
  *(__n128 *)((char *)&__dst[9] + 8) = v11[9];
  *(__n128 *)((char *)&__dst[8] + 8) = v18;
  *(__n128 *)((char *)&__dst[7] + 8) = v17;
  *(__n128 *)((char *)&__dst[6] + 8) = v16;
  *((_QWORD *)&__dst[10] + 1) = v6;
  *(_QWORD *)&__dst[11] = v9;
  *((_QWORD *)&__dst[11] + 1) = v7;
  *(_QWORD *)&__dst[12] = v8;
  v143 = (CFX::RG::Pass *)sub_1B1825968(a3, a2[4], (uint64_t)__dst, v19, v20, v21, v22, v23, v16);
  v24 = sub_1B17C11F8(a1, a3, 6, v143, *(uint64_t *)&__dst[20]);
  v139 = *((_QWORD *)&__dst[12] + 1);
  v141 = __dst[17];
  v142 = __dst[14];
  v140 = __dst[18];
  v136 = v7;
  v144 = v8;
  v145 = (uint64_t *)v10;
  v138 = v9;
  if (*(_BYTE *)(a1 + 1848))
  {
    *(_QWORD *)(a1 + 1680) = *(_QWORD *)(a1 + 24);
    v25 = v7;
    v26 = (uint64_t *)a2;
    v27 = (__int128 *)CFX::RG::Resource::textureDesc(v6);
    v28 = *v27;
    *(_OWORD *)(a1 + 1704) = v27[1];
    *(_OWORD *)(a1 + 1688) = v28;
    v29 = v27[2];
    v30 = v27[3];
    v31 = v27[4];
    *(_OWORD *)(a1 + 1768) = v27[5];
    *(_OWORD *)(a1 + 1752) = v31;
    *(_OWORD *)(a1 + 1736) = v30;
    *(_OWORD *)(a1 + 1720) = v29;
    v32 = v27[6];
    v33 = v27[7];
    v34 = v27[8];
    *(_OWORD *)(a1 + 1832) = v27[9];
    *(_OWORD *)(a1 + 1816) = v34;
    *(_OWORD *)(a1 + 1800) = v33;
    *(_OWORD *)(a1 + 1784) = v32;
    *(_QWORD *)(a1 + 1856) = v9;
    *(_QWORD *)(a1 + 1872) = v25;
    *(_QWORD *)(a1 + 1864) = v8;
    v35 = v137;
    *(_QWORD *)(a1 + 1880) = v137;
    *(_QWORD *)(a1 + 1888) = sub_1B1823E4C(v10);
    *(_QWORD *)(a1 + 1896) = v147;
    v36 = sub_1B18A7010((CFX::RG::RenderGraphContext *)a2, (uint64_t *)(a1 + 1680));
    v132 = (CFX::RG::Pass *)v36;
    if (!v24)
      v24 = sub_1B17C11F8(a1, a3, 1, (CFX::RG::Pass *)v36, *(_QWORD *)(a1 + 1904));
    v37 = v136;
  }
  else
  {
    v35 = v137;
    v132 = 0;
    *(_QWORD *)(a1 + 1904) = 0;
    v37 = v7;
    v26 = (uint64_t *)a2;
  }
  v38 = v35;
  if (*(_BYTE *)(a1 + 552))
  {
    *(_QWORD *)(a1 + 384) = *(_QWORD *)(a1 + 24);
    v39 = (_OWORD *)CFX::RG::Resource::textureDesc(v6);
    v40 = v39[1];
    *(_OWORD *)(a1 + 392) = *v39;
    *(_OWORD *)(a1 + 408) = v40;
    v41 = v39[4];
    v42 = v39[5];
    v43 = v39[3];
    *(_OWORD *)(a1 + 424) = v39[2];
    *(_OWORD *)(a1 + 472) = v42;
    *(_OWORD *)(a1 + 456) = v41;
    *(_OWORD *)(a1 + 440) = v43;
    v44 = v39[8];
    v45 = v39[9];
    v46 = v39[7];
    *(_OWORD *)(a1 + 488) = v39[6];
    *(_OWORD *)(a1 + 536) = v45;
    *(_OWORD *)(a1 + 520) = v44;
    *(_OWORD *)(a1 + 504) = v46;
    *(_QWORD *)(a1 + 648) = sub_1B1823E4C((uint64_t)v146);
    *(_QWORD *)(a1 + 656) = sub_1B1823E4C((uint64_t)v145);
    *(_QWORD *)(a1 + 632) = v138;
    *(_QWORD *)(a1 + 624) = v37;
    *(_QWORD *)(a1 + 640) = v147;
    *(_QWORD *)(a1 + 560) = v139;
    *(_QWORD *)(a1 + 568) = 4;
    *(_OWORD *)(a1 + 576) = v142;
    *(_OWORD *)(a1 + 592) = v141;
    *(_OWORD *)(a1 + 608) = v140;
    v47 = (uint64_t *)sub_1B184CBA4((CFX::RG::RenderGraphContext *)v26, (uint64_t *)(a1 + 384));
    CFX::RG::Pass::dependsOn(v47, v143);
    if (!v24)
      v24 = sub_1B17C11F8(a1, a3, 2, (CFX::RG::Pass *)v47, *(_QWORD *)(a1 + 664));
  }
  else
  {
    v47 = 0;
    *(_QWORD *)(a1 + 664) = 0;
  }
  v131 = (CFX::RG::Pass *)v47;
  if (*(_BYTE *)(a1 + 1528))
  {
    *(_QWORD *)(a1 + 1360) = *(_QWORD *)(a1 + 24);
    v48 = (_OWORD *)CFX::RG::Resource::textureDesc(v6);
    v49 = v48[1];
    *(_OWORD *)(a1 + 1368) = *v48;
    *(_OWORD *)(a1 + 1384) = v49;
    v50 = v48[4];
    v51 = v48[5];
    v52 = v48[3];
    *(_OWORD *)(a1 + 1400) = v48[2];
    *(_OWORD *)(a1 + 1448) = v51;
    *(_OWORD *)(a1 + 1432) = v50;
    *(_OWORD *)(a1 + 1416) = v52;
    v53 = v48[8];
    v54 = v48[9];
    v55 = v48[7];
    *(_OWORD *)(a1 + 1464) = v48[6];
    *(_OWORD *)(a1 + 1512) = v54;
    *(_OWORD *)(a1 + 1496) = v53;
    *(_OWORD *)(a1 + 1480) = v55;
    *(_QWORD *)(a1 + 1640) = sub_1B1823E4C((uint64_t)v146);
    *(_QWORD *)(a1 + 1648) = sub_1B1823E4C((uint64_t)v145);
    *(_QWORD *)(a1 + 1624) = v138;
    *(_QWORD *)(a1 + 1608) = v37;
    *(_QWORD *)(a1 + 1616) = v8;
    *(_QWORD *)(a1 + 1632) = v147;
    *(_QWORD *)(a1 + 1600) = v134;
    *(_QWORD *)(a1 + 1536) = v139;
    *(_QWORD *)(a1 + 1544) = 4;
    *(_OWORD *)(a1 + 1552) = v142;
    *(_OWORD *)(a1 + 1568) = v141;
    *(_OWORD *)(a1 + 1584) = v140;
    v56 = (uint64_t *)sub_1B183E8A8((CFX::RG::RenderGraphContext *)v26, (uint64_t *)(a1 + 1360));
    CFX::RG::Pass::dependsOn(v56, v143);
    if (!v24)
      v24 = sub_1B17C11F8(a1, a3, 3, (CFX::RG::Pass *)v56, *(_QWORD *)(a1 + 1656));
  }
  else
  {
    *(_QWORD *)(a1 + 1656) = 0;
  }
  if (*(_BYTE *)(a1 + 872))
  {
    *(_QWORD *)(a1 + 704) = *(_QWORD *)(a1 + 24);
    v57 = v6;
    v58 = (_OWORD *)CFX::RG::Resource::textureDesc(v6);
    v59 = v58[1];
    *(_OWORD *)(a1 + 712) = *v58;
    *(_OWORD *)(a1 + 728) = v59;
    v60 = v58[4];
    v61 = v58[5];
    v62 = v58[3];
    *(_OWORD *)(a1 + 744) = v58[2];
    *(_OWORD *)(a1 + 792) = v61;
    *(_OWORD *)(a1 + 776) = v60;
    *(_OWORD *)(a1 + 760) = v62;
    v63 = v58[8];
    v64 = v58[9];
    v65 = v58[7];
    *(_OWORD *)(a1 + 808) = v58[6];
    *(_OWORD *)(a1 + 856) = v64;
    *(_OWORD *)(a1 + 840) = v63;
    *(_OWORD *)(a1 + 824) = v65;
    *(_QWORD *)(a1 + 984) = sub_1B1823E4C((uint64_t)v146);
    *(_QWORD *)(a1 + 992) = sub_1B1823E4C((uint64_t)v145);
    *(_QWORD *)(a1 + 944) = v144;
    v66 = v138;
    *(_QWORD *)(a1 + 960) = v138;
    *(_QWORD *)(a1 + 952) = v37;
    *(_QWORD *)(a1 + 968) = v147;
    *(_QWORD *)(a1 + 976) = v38;
    *(_QWORD *)(a1 + 880) = v139;
    *(_QWORD *)(a1 + 888) = 4;
    *(_OWORD *)(a1 + 896) = v142;
    *(_OWORD *)(a1 + 912) = v141;
    *(_OWORD *)(a1 + 928) = v140;
    v67 = (uint64_t *)sub_1B19B3038((CFX::RG::RenderGraphContext *)v26, (uint64_t *)(a1 + 704));
    CFX::RG::Pass::dependsOn(v67, v143);
    if (!v24)
      v24 = sub_1B17C11F8(a1, a3, 4, (CFX::RG::Pass *)v67, *(_QWORD *)(a1 + 1000));
  }
  else
  {
    v57 = v6;
    v67 = 0;
    *(_QWORD *)(a1 + 1000) = 0;
    v66 = v138;
  }
  if (*(_BYTE *)(a1 + 1208))
  {
    *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a1 + 24);
    v68 = (_OWORD *)CFX::RG::Resource::textureDesc(v57);
    v69 = v68[1];
    *(_OWORD *)(a1 + 1048) = *v68;
    *(_OWORD *)(a1 + 1064) = v69;
    v70 = v68[4];
    v71 = v68[5];
    v72 = v68[3];
    *(_OWORD *)(a1 + 1080) = v68[2];
    *(_OWORD *)(a1 + 1128) = v71;
    *(_OWORD *)(a1 + 1112) = v70;
    *(_OWORD *)(a1 + 1096) = v72;
    v73 = v68[8];
    v74 = v68[9];
    v75 = v68[7];
    *(_OWORD *)(a1 + 1144) = v68[6];
    *(_OWORD *)(a1 + 1192) = v74;
    *(_OWORD *)(a1 + 1176) = v73;
    *(_OWORD *)(a1 + 1160) = v75;
    *(_QWORD *)(a1 + 1312) = sub_1B1823E4C((uint64_t)v146);
    *(_QWORD *)(a1 + 1320) = sub_1B1823E4C((uint64_t)v145);
    *(_QWORD *)(a1 + 1280) = v144;
    *(_QWORD *)(a1 + 1296) = v66;
    *(_QWORD *)(a1 + 1288) = v135;
    *(_QWORD *)(a1 + 1304) = v147;
    *(_QWORD *)(a1 + 1216) = v139;
    *(_QWORD *)(a1 + 1224) = 4;
    *(_OWORD *)(a1 + 1232) = v142;
    *(_OWORD *)(a1 + 1248) = v141;
    *(_OWORD *)(a1 + 1264) = v140;
    v76 = (uint64_t *)sub_1B18EF6D0((CFX::RG::RenderGraphContext *)v26, (uint64_t *)(a1 + 1040));
    CFX::RG::Pass::dependsOn(v76, v143);
    if (!v24)
      v24 = sub_1B17C11F8(a1, a3, 5, (CFX::RG::Pass *)v76, *(_QWORD *)(a1 + 1328));
  }
  else
  {
    v76 = 0;
    *(_QWORD *)(a1 + 1328) = 0;
  }
  v77 = (CFX::CrossFrameResourceManager *)v26[4];
  v152 = *(_QWORD *)(a1 + 24);
  v78 = (__int128 *)CFX::RG::Resource::textureDesc(v57);
  v79 = *v78;
  v154 = v78[1];
  v153 = v79;
  v80 = v78[2];
  v81 = v78[3];
  v82 = v78[4];
  v158 = v78[5];
  v157 = v82;
  v156 = v81;
  v155 = v80;
  v83 = v78[6];
  v84 = v78[7];
  v85 = v78[8];
  v162 = v78[9];
  v161 = v85;
  v160 = v84;
  v159 = v83;
  *(_QWORD *)&v163 = v144;
  *((_QWORD *)&v163 + 1) = v133;
  v86 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)&v164 = *(_QWORD *)(a1 + 1904);
  *((_QWORD *)&v164 + 1) = v86;
  v87 = *(_QWORD *)(a1 + 1328);
  *(_QWORD *)&v165 = *(_QWORD *)(a1 + 1000);
  *((_QWORD *)&v165 + 1) = v87;
  *(_QWORD *)&v166 = v137;
  *((_QWORD *)&v166 + 1) = v136;
  *(_QWORD *)&v167 = v135;
  *((_QWORD *)&v167 + 1) = v134;
  *(_QWORD *)&v168 = *(_QWORD *)(a1 + 1656);
  *((_QWORD *)&v168 + 1) = v66;
  v88 = (uint64_t *)sub_1B191D734(a3, v77, &v152);
  CFX::RG::Pass::dependsOn(v88, v132);
  CFX::RG::Pass::dependsOn(v88, v131);
  CFX::RG::Pass::dependsOn(v88, (CFX::RG::Pass *)v67);
  CFX::RG::Pass::dependsOn(v88, (CFX::RG::Pass *)v76);
  v89 = (CFX::RG::Resource *)sub_1B191D724((uint64_t)v88);
  if (!v24)
    v24 = sub_1B17C11F8(a1, a3, 8, (CFX::RG::Pass *)v88, (uint64_t)v89);
  if (*(_BYTE *)(a1 + 32))
  {
    v152 = *(_QWORD *)(a1 + 24);
    v90 = (__int128 *)CFX::RG::Resource::textureDesc(v89);
    v91 = v90[1];
    v153 = *v90;
    v154 = v91;
    v92 = v90[4];
    v93 = v90[5];
    v94 = v90[3];
    v155 = v90[2];
    v158 = v93;
    v157 = v92;
    v156 = v94;
    v95 = v90[8];
    v96 = v90[9];
    v97 = v90[7];
    v159 = v90[6];
    v162 = v96;
    v161 = v95;
    v160 = v97;
    v98 = (__int128 *)CFX::RG::Resource::textureDesc(v66);
    v99 = v98[9];
    v101 = v98[6];
    v100 = v98[7];
    v171 = v98[8];
    v172 = v99;
    v169 = v101;
    v170 = v100;
    v102 = v98[1];
    v163 = *v98;
    v164 = v102;
    v103 = v98[4];
    v104 = v98[5];
    v105 = v98[3];
    v165 = v98[2];
    v168 = v104;
    v167 = v103;
    v166 = v105;
    v106 = (uint64_t)v147;
    v107 = (__int128 *)CFX::RG::Resource::textureDesc(v147);
    v108 = v107[1];
    v173 = *v107;
    v174 = v108;
    v109 = v107[5];
    v111 = v107[2];
    v110 = v107[3];
    v177 = v107[4];
    v178 = v109;
    v175 = v111;
    v176 = v110;
    v112 = v107[9];
    v114 = v107[6];
    v113 = v107[7];
    v181 = v107[8];
    v182 = v112;
    v179 = v114;
    v180 = v113;
    v115 = (__int128 *)CFX::RG::Resource::textureDesc(v89);
    v116 = v115[1];
    v183 = *v115;
    v184 = v116;
    v117 = v115[2];
    v118 = v115[3];
    v119 = v115[5];
    v187 = v115[4];
    v188 = v119;
    v185 = v117;
    v186 = v118;
    v120 = v115[6];
    v121 = v115[7];
    v122 = v115[9];
    v191 = v115[8];
    v192 = v122;
    v189 = v120;
    v190 = v121;
    v193 = v89;
    v194 = v66;
    v195 = v147;
    CopyPass = (uint64_t *)sub_1B182C1BC(a3, v26[4], &v152);
    CFX::RG::Pass::dependsOn(CopyPass, (CFX::RG::Pass *)v88);
    v124 = sub_1B182C1B4((uint64_t)CopyPass);
  }
  else
  {
    CFX::RG::TextureDescriptorReference::finalColor((uint64_t)v150);
    CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)v150, MTLPixelFormatRGBA16Float, (uint64_t)&v152);
    CFX::RG::TextureDescriptorReference::withSampleCount(&v152, 1, (uint64_t)v151);
    v124 = (uint64_t)sub_1B17A34D0(a3, (uint64_t)"Output copy", v151);
    v152 = (uint64_t)v89;
    LODWORD(v153) = 0;
    *((_QWORD *)&v153 + 1) = v124;
    *(_QWORD *)&v154 = 0x100000000;
    CopyPass = (uint64_t *)CFX::RG::makeCopyPass(a3, (uint64_t)"copy", &v152);
    CFX::RG::Pass::dependsOn(CopyPass, (CFX::RG::Pass *)v88);
    v106 = (uint64_t)v147;
  }
  if (!v24)
  {
    v24 = sub_1B17C11F8(a1, a3, 9, (CFX::RG::Pass *)CopyPass, v106);
    if (!v24)
    {
      v125 = sub_1B1823E4C((uint64_t)v146);
      v24 = sub_1B17C11F8(a1, a3, 7, v146, v125);
    }
  }
  CFX::RG::Pass::dependsOn(v145, (CFX::RG::Pass *)CopyPass);
  sub_1B1823E44(v145, v66);
  CFX::RG::Pass::dependsOn((uint64_t *)v146, (CFX::RG::Pass *)CopyPass);
  v126 = (CFX::RG::Resource *)sub_1B191D72C((uint64_t)v88);
  sub_1B1823E44((uint64_t *)v146, v126);
  CFX::RG::TextureDescriptorReference::finalColor((uint64_t)v149);
  v127 = sub_1B17A34D0(a3, (uint64_t)"Resource copy", v149);
  v152 = v124;
  LODWORD(v153) = 0;
  *((_QWORD *)&v153 + 1) = v127;
  *(_QWORD *)&v154 = 0x100000000;
  v128 = (uint64_t *)CFX::RG::makeCopyPass(a3, (uint64_t)"copy", &v152);
  CFX::RG::Pass::dependsOn(v128, v146);
  CFX::RG::Pass::dependsOn(v128, (CFX::RG::Pass *)v145);
  v129 = *(_WORD *)(a1 + 8);
  if (v24)
    v130 = (unint64_t)v24;
  else
    v130 = (unint64_t)v127;
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v148, v129, 27036, 1656467160);
  CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v148, v130, (uint64_t)v128);
}

CFX::RG::Resource *sub_1B17C1128(uint64_t a1, uint64_t a2, CFX::RG::ResourceReference *this)
{
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  CFX::RG::Resource *v11;
  CFX::RG::Resource *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a2;
  v15 = CFX::RG::ResourceReference::reference(this);
  v5 = CFX::RG::ResourceIdentifier::hash((CFX::RG::ResourceIdentifier *)&v15);
  v6 = (*(_DWORD *)(a1 + 284) - 1) & v5;
  v7 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 272) + 2 * v6);
  if (v7 < 2)
    goto LABEL_5;
  while ((v7 & 2) == 0 || v5 != *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v6))
  {
    ++v6;
    v8 = v7 > 3;
    v7 >>= 1;
    if (!v8)
      goto LABEL_5;
  }
  v14 = *(_QWORD *)(a1 + 264);
  if (v14)
    return *(CFX::RG::Resource **)(v14 + 24 * v6 + 8);
LABEL_5:
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  LOBYTE(v15) = 1;
  sub_1B17C12D8(v9, v10, &v16, this, (char *)&v15);
  v12 = v11;
  CFX::RG::RenderGraphBuilder::appendResource((uint64_t *)a1, v11);
  return v12;
}

CFX::RG::Resource *sub_1B17C11F8(uint64_t a1, uint64_t *a2, int a3, CFX::RG::Pass *a4, uint64_t a5)
{
  CFX::RG::Resource *v9;
  uint64_t *CopyPass;
  _BYTE v12[160];
  _OWORD v13[10];
  __int128 v14;
  CFX::RG::Resource *v15;
  uint64_t v16;
  _OWORD v17[10];

  if (*(_DWORD *)(a1 + 1936) != a3)
    return 0;
  CFX::RG::TextureDescriptorReference::finalColor((uint64_t)v12);
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)v12, MTLPixelFormatRGBA16Float, (uint64_t)v13);
  CFX::RG::TextureDescriptorReference::withSizeFactor(v13, *(float *)(a1 + 36), (float *)&v14);
  CFX::RG::TextureDescriptorReference::withSampleCount(&v14, 1, (uint64_t)v17);
  v9 = sub_1B17A34D0(a2, (uint64_t)"DebugCopy", v17);
  *(_QWORD *)&v14 = a5;
  DWORD2(v14) = 0;
  v15 = v9;
  v16 = 0x100000000;
  CopyPass = (uint64_t *)CFX::RG::makeCopyPass(a2, (uint64_t)"copy", &v14);
  CFX::RG::Pass::dependsOn(CopyPass, a4);
  return v9;
}

double sub_1B17C12D8(uint64_t a1, uint64_t a2, uint64_t *a3, _OWORD *a4, char *a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  _OWORD v16[10];
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  v8 = sub_1B179C1C0(v17, 0xE0u, 8u);
  v9 = *a3;
  v10 = a4[7];
  v16[6] = a4[6];
  v16[7] = v10;
  v11 = a4[9];
  v16[8] = a4[8];
  v16[9] = v11;
  v12 = a4[3];
  v16[2] = a4[2];
  v16[3] = v12;
  v13 = a4[5];
  v16[4] = a4[4];
  v16[5] = v13;
  v14 = a4[1];
  v16[0] = *a4;
  v16[1] = v14;
  *(_QWORD *)&result = CFX::RG::Resource::Resource(v8, v9, (uint64_t)v16, *a5).n128_u64[0];
  return result;
}

uint64_t sub_1B17C135C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v8;
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  CFX::RG::Resource *v14;
  CFX::RG::Resource *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[10];
  _OWORD v21[10];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v8 = &unk_1EEF65000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65600);
  if ((v9 & 1) == 0)
  {
    v18 = a2;
    v19 = a3;
    v17 = __cxa_guard_acquire(&qword_1EEF65600);
    v8 = (_QWORD *)&unk_1EEF65000;
    a2 = v18;
    a3 = v19;
    if (v17)
    {
      qword_1EEF655F8 = (uint64_t)sub_1B17C226C("SSAO_TRACE_PASS", 0xFu);
      __cxa_guard_release(&qword_1EEF65600);
      v8 = (_QWORD *)&unk_1EEF65000;
      a2 = v18;
      a3 = v19;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v8[191], 0);
  *(_QWORD *)a1 = &off_1E63CEA80;
  v10 = *(_OWORD *)(a5 + 24);
  v11 = *(_OWORD *)(a5 + 40);
  v12 = *(_OWORD *)(a5 + 72);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a1 + 432) = v12;
  *(_OWORD *)(a1 + 384) = v10;
  *(_OWORD *)(a1 + 400) = v11;
  *(_QWORD *)(a1 + 456) = 0;
  v13 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)(a5 + 64));
  CFX::RG::TextureDescriptorReference::withSampleCount(v13, 1, (uint64_t)v21);
  CFX::RG::TextureDescriptorReference::withSizeFactor(v21, *(float *)(a1 + 400), (float *)&v22);
  *((_QWORD *)&v23 + 1) = 25;
  LOBYTE(v24) = 1;
  v20[6] = v28;
  v20[7] = v29;
  v20[8] = v30;
  v20[9] = v31;
  v20[4] = v26;
  v20[5] = v27;
  v20[2] = v24;
  v20[3] = v25;
  v20[0] = v22;
  v20[1] = v23;
  v14 = sub_1B17A34D0(a4, (uint64_t)"SSAO-COMPUTE", v20);
  *(_QWORD *)(a1 + 456) = v14;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v14, 0x100000002, 0);
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 64));
  v15 = *(CFX::RG::Resource **)(a5 + 72);
  if (v15)
    CFX::RG::Pass::readFrom((uint64_t *)a1, v15);
  return a1;
}

void sub_1B17C14D8(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B17C14F0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  const char *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _OWORD v36[6];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[23];
  id v51;
  uint64_t v52;
  const __CFString *v53;
  const __CFString *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;

  v57 = 0;
  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * v4) >> 47) ^ (0x9DDFEA08EB382D69 * v4));
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
  v7 = 0.0;
  if (*(_BYTE *)(a1 + 384))
    v7 = 1.0;
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69
       * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ *(_QWORD *)&v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ *(_QWORD *)&v7)))) ^ ((0x9DDFEA08EB382D69 * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ *(_QWORD *)&v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ *(_QWORD *)&v7)))) >> 47));
  v9 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v8);
  *(_QWORD *)(a1 + 448) = v9;
  if (!v9)
  {
    *(_QWORD *)(a1 + 448) = sub_1B17C16B8(*(CFX::CrossFrameResourceManager **)(a2 + 32), v8);
    v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
    v21 = (void *)objc_msgSend_resourceManager(v17, v18, v19, v20);
    v22 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v22, v23, (uint64_t)&v57, 53, CFSTR("HasNormalTex"));
    objc_msgSend_setConstantValue_type_withName_(v22, v24, a1 + 384, 53, CFSTR("ScreenSpaceRadius"));
    v25 = (void *)sub_1B18FD768((uint64_t)v21);
    v29 = objc_msgSend_frameworkLibrary(v25, v26, v27, v28);
    v30 = *(_QWORD *)(a1 + 448);
    memset(v36, 0, sizeof(v36));
    v37 = 0;
    v38 = v29;
    v39 = 25;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0;
    v45 = 1;
    memset(v50, 0, sizeof(v50));
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v51 = v22;
    v52 = 0;
    v53 = CFSTR("vfx_draw_fullscreen_triangle_vertex");
    v55 = 0;
    v56 = 0;
    v54 = CFSTR("vfx_ssao_compute");
    v33 = objc_msgSend_newRenderPipelineStateWithDesc_(v21, v31, (uint64_t)v36, v32);
    v34 = *(void **)(v30 + 16);
    if (v34 != (void *)v33)
    {
      v35 = v33;
      if (v34)

      *(_QWORD *)(v30 + 16) = v35;
    }

    *(_DWORD *)(*(_QWORD *)(a1 + 448) + 24) = 0;
  }
}

_OWORD *sub_1B17C16B8(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_OWORD *)operator new();
    *v4 = 0u;
    v4[1] = 0u;
    *(_QWORD *)v4 = &off_1E63CEA60;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B17C1730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  id Texture;
  uint64_t v57;
  const CFX::RG::Resource *v58;
  id v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64x2_t v100;
  const char *v106;
  const char *v107;
  __n128 v108;
  unsigned __int8 v109[184];
  void *v110;
  uint64_t v111;
  uint64_t v112;
  simd_float4x4 v113;
  float32x2_t v114;
  float32x2_t v115;
  uint64_t v116;
  float v117;
  int v118;
  uint64_t v119;
  simd_float4x4 v120;

  v119 = *MEMORY[0x1E0C80C00];
  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  v21 = objc_msgSend_renderEncoder(v10, v11, v12, v13);
  v22 = *(_QWORD *)(a1 + 416);
  if (v22
    || (result = (uint64_t)sub_1B1814768(*(uint64_t **)(a1 + 368), v14, v15, v16, v17, v18, v19, v20), (v22 = result) != 0))
  {
    result = (uint64_t)sub_1B186CFA8(v22, v14, v15, v16, v17, v18, v19, v20);
    if (result)
    {
      v31 = sub_1B1864F3C(result, v24, v25, v26, v27, v28, v29, v30);
      sub_1B17B33F4(v22, (uint64_t)v109, v32, v33, v34, v35, v36, v37);
      v108 = sub_1B181537C(*(_QWORD *)(a1 + 368), 0, v38, v39, v40, v41, v42, v43);
      v51 = *(_QWORD *)(a1 + 448);
      v52 = *(void **)(v51 + 16);
      if (!v52)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v45, v46, v47, v48, v49, v50, (uint64_t)"_ptr != NULL");
        v52 = *(void **)(v51 + 16);
      }
      v53 = objc_msgSend_state(v52, v44, v45, v46);
      objc_msgSend_setRenderPipelineState_(*(void **)(v21 + 16), v54, v53, v55);
      Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 424));
      sub_1B179AEE4(v21, Texture, 0, v57);
      v58 = *(const CFX::RG::Resource **)(a1 + 432);
      if (v58)
      {
        v59 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v58);
        sub_1B179AEE4(v21, v59, 1, v60);
      }
      v61 = sub_1B17928F4(v10, *(CFX::CrossFrameResourceManager **)(a2 + 32));
      sub_1B179AEE4(v21, v61, 2, v62);
      if (sub_1B1814C44(*(_QWORD *)(a1 + 368), v63, v64, v65, v66, v67, v68, v69) || !v31)
      {
        v116 = *(_QWORD *)(a1 + 388);
        v91 = *(float *)(a1 + 396);
      }
      else
      {
        LODWORD(v116) = sub_1B18E8CD4(v31, v70, v71, v72, v73, v74, v75, v76);
        HIDWORD(v116) = sub_1B18E91D8(v31, v77, v78, v79, v80, v81, v82, v83);
        v91 = sub_1B18E9308(v31, v84, v85, v86, v87, v88, v89, v90);
      }
      v117 = v91;
      v120 = *(simd_float4x4 *)sub_1B18667B4(v109, (uint64_t)&v108, v71, v72, v73, v74, v75, v76);
      v113 = __invert_f4(v120);
      v118 = *(_DWORD *)(*(_QWORD *)(a1 + 448) + 24);
      v95 = objc_msgSend_width(Texture, v92, v93, v94);
      v99 = objc_msgSend_height(Texture, v96, v97, v98);
      v100.i64[0] = v95;
      v100.i64[1] = v99;
      __asm { FMOV            V1.2S, #1.0 }
      v114 = vcvt_f32_f64(vcvtq_f64_u64(vshrq_n_u64(v100, 1uLL)));
      v115 = vdiv_f32(_D1, v114);
      v110 = 0;
      v111 = 0;
      v112 = 0;
      sub_1B1868D14(*(_QWORD *)(v21 + 24), &v113, 0x70uLL, &v110);
      objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v21 + 16), v106, v111, v112, 8);
      result = sub_1B17C197C(v21, v107);
      ++*(_DWORD *)(*(_QWORD *)(a1 + 448) + 24);
    }
  }
  return result;
}

uint64_t sub_1B17C197C(uint64_t a1, const char *a2)
{
  unsigned int v2;
  void *v3;

  v2 = *(_DWORD *)a1;
  v3 = *(void **)(a1 + 16);
  if (v2 < 2)
    return objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v3, a2, 4, 0, 4);
  else
    return objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_(v3, a2, 4, 0, 4);
}

uint64_t sub_1B17C19A8(uint64_t a1, uint64_t a2, uint64_t a3, CFX::RG::RenderGraphContext *a4, __int128 *a5)
{
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  CFX::RG::Resource *v25;
  _OWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[10];
  _OWORD v34[10];
  _OWORD v35[10];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v8 = *((_QWORD *)a5 + 3);
  *(_QWORD *)&v36 = "SSAOSpatialPass";
  *((_QWORD *)&v36 + 1) = v8;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65610);
  v10 = &unk_1EEF65000;
  if ((v9 & 1) == 0)
  {
    v31 = a2;
    v32 = a3;
    v30 = __cxa_guard_acquire(&qword_1EEF65610);
    v10 = (_QWORD *)&unk_1EEF65000;
    a2 = v31;
    a3 = v32;
    if (v30)
    {
      qword_1EEF65608 = (uint64_t)sub_1B17C226C("SSAO_SPATIAL", 0xCu);
      __cxa_guard_release(&qword_1EEF65610);
      v10 = (_QWORD *)&unk_1EEF65000;
      a2 = v31;
      a3 = v32;
    }
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v36, v10[193], 0);
  *(_QWORD *)a1 = &off_1E63CED90;
  v11 = *a5;
  v12 = a5[1];
  v13 = a5[3];
  *(_OWORD *)(a1 + 408) = a5[2];
  *(_OWORD *)(a1 + 424) = v13;
  *(_OWORD *)(a1 + 376) = v11;
  *(_OWORD *)(a1 + 392) = v12;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  v21 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v14, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + 472) = v21;
  *(_QWORD *)(a1 + 480) = objc_msgSend_resourceManager(v21, v22, v23, v24);
  CFX::RG::Pass::readFrom((uint64_t *)a1, *((CFX::RG::Resource **)a5 + 5));
  v25 = (CFX::RG::Resource *)*((_QWORD *)a5 + 6);
  if (v25)
    CFX::RG::Pass::readFrom((uint64_t *)a1, v25);
  v26 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*((CFX::RG::Resource **)a5 + 5));
  CFX::RG::TextureDescriptorReference::withSampleCount(v26, 1, (uint64_t)v35);
  CFX::RG::TextureDescriptorReference::withSizeFactor(v35, *(float *)(a1 + 392), (float *)&v36);
  *((_QWORD *)&v37 + 1) = 25;
  LOBYTE(v38) = 1;
  v27 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a4);
  v34[6] = v42;
  v34[7] = v43;
  v34[8] = v44;
  v34[9] = v45;
  v34[2] = v38;
  v34[3] = v39;
  v34[4] = v40;
  v34[5] = v41;
  v34[0] = v36;
  v34[1] = v37;
  *(_QWORD *)(a1 + 456) = sub_1B17A34D0(v27, (uint64_t)"SSAO_SPATIAL_OUTPUT_TMP", v34);
  v28 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a4);
  v33[6] = v42;
  v33[7] = v43;
  v33[8] = v44;
  v33[9] = v45;
  v33[2] = v38;
  v33[3] = v39;
  v33[4] = v40;
  v33[5] = v41;
  v33[0] = v36;
  v33[1] = v37;
  *(_QWORD *)(a1 + 464) = sub_1B17A34D0(v28, (uint64_t)"SSAO_SPATIAL_OUTPUT", v33);
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 456));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 456));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 464));
  return a1;
}

void sub_1B17C1BA4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B17C1BC0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
  *(_QWORD *)(a1 + 440) = v5;
  if (!v5)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = (_QWORD *)operator new();
    *v7 = &off_1E63CED70;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = 0;
    CFX::CrossFrameResourceManager::set(v6, v4, (uint64_t)v7);
    *(_QWORD *)(a1 + 440) = v7;
    v10 = objc_msgSend_newComputePipelineStateWithFunctionName_(*(void **)(a1 + 480), v8, (uint64_t)CFSTR("vfx_ssao_blur_x"), v9);
    v13 = (void *)v7[2];
    if (v13 != (void *)v10)
    {
      v14 = v10;
      if (v13)

      v7[2] = v14;
    }
    v15 = *(_QWORD *)(a1 + 440);
    v16 = objc_msgSend_newComputePipelineStateWithFunctionName_(*(void **)(a1 + 480), v11, (uint64_t)CFSTR("vfx_ssao_blur_y"), v12);
    v17 = *(void **)(v15 + 24);
    if (v17 != (void *)v16)
    {
      v18 = v16;
      if (v17)

      *(_QWORD *)(v15 + 24) = v18;
    }
  }
}

void sub_1B17C1CB4(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id Texture;
  id v26;
  id v27;
  id v28;
  id v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x2_t v45;
  const char *v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  float v98;
  __n128 v99;
  unsigned __int8 v100[176];
  simd_float4x4 v101;
  float32x2_t v102;
  float32x2_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  simd_float4x4 v108;

  v107 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  v11 = *(const void **)(a1 + 408);
  if (v11 || (v11 = sub_1B1814768(*(uint64_t **)(a1 + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8)) != 0)
  {
    if (sub_1B186CFA8((uint64_t)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      sub_1B17B33F4((uint64_t)v11, (uint64_t)v100, v12, v13, v14, v15, v16, v17);
      v99 = sub_1B181537C(*(_QWORD *)(a1 + 368), 0, v18, v19, v20, v21, v22, v23);
      v24 = *(_QWORD *)(a1 + 440);
      if (*(_QWORD *)(v24 + 16))
      {
        if (*(_QWORD *)(v24 + 24))
        {
          Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 448));
          v26 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 416));
          v27 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 424));
          v28 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 456));
          v29 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 464));
          objc_msgSend_setTexture_atIndex_(v10, v30, (uint64_t)v26, 1);
          objc_msgSend_setTexture_atIndex_(v10, v31, (uint64_t)v27, 2);
          v104 = *(_QWORD *)(a1 + 380);
          v106 = *(_DWORD *)(a1 + 388);
          v108 = *(simd_float4x4 *)sub_1B18667B4(v100, (uint64_t)&v99, v32, v33, v34, v35, v36, v37);
          v101 = __invert_f4(v108);
          v98 = (float)(unint64_t)objc_msgSend_width(Texture, v38, v39, v40);
          v44 = objc_msgSend_height(Texture, v41, v42, v43);
          v45.f32[0] = v98;
          v45.f32[1] = (float)(unint64_t)v44;
          __asm { FMOV            V0.2S, #1.0 }
          v102 = v45;
          v103 = vdiv_f32(_D0, v45);
          v105 = *(_DWORD *)(a1 + 392);
          objc_msgSend_setBytes_length_atIndex_(v10, v51, (uint64_t)&v101, 112, 8);
          objc_msgSend_setTexture_atIndex_(v10, v52, (uint64_t)Texture, 0);
          objc_msgSend_setTexture_atIndex_(v10, v53, (uint64_t)v28, 3);
          v60 = *(_QWORD *)(a1 + 440);
          v61 = *(_QWORD *)(v60 + 16);
          if (!v61)
          {
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v54, v55, v56, v57, v58, v59, (uint64_t)"_ptr != NULL");
            v61 = *(_QWORD *)(v60 + 16);
          }
          v62 = sub_1B18FD774(v61);
          objc_msgSend_setComputePipelineState_(v10, v63, v62, v64);
          v71 = *(_QWORD *)(a1 + 440);
          v72 = *(_QWORD *)(v71 + 16);
          if (!v72)
          {
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v65, v66, v67, v68, v69, v70, (uint64_t)"_ptr != NULL");
            v72 = *(_QWORD *)(v71 + 16);
          }
          v73 = sub_1B18FD774(v72);
          objc_msgSend_dispatch_onTexture2D_(v10, v74, v73, (uint64_t)v28);
          objc_msgSend_setTexture_atIndex_(v10, v75, (uint64_t)v28, 0);
          objc_msgSend_setTexture_atIndex_(v10, v76, (uint64_t)v29, 3);
          v83 = *(_QWORD *)(a1 + 440);
          v84 = *(_QWORD *)(v83 + 24);
          if (!v84)
          {
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v77, v78, v79, v80, v81, v82, (uint64_t)"_ptr != NULL");
            v84 = *(_QWORD *)(v83 + 24);
          }
          v85 = sub_1B18FD774(v84);
          objc_msgSend_setComputePipelineState_(v10, v86, v85, v87);
          v94 = *(_QWORD *)(a1 + 440);
          v95 = *(_QWORD *)(v94 + 24);
          if (!v95)
          {
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v88, v89, v90, v91, v92, v93, (uint64_t)"_ptr != NULL");
            v95 = *(_QWORD *)(v94 + 24);
          }
          v96 = sub_1B18FD774(v95);
          objc_msgSend_dispatch_onTexture2D_(v10, v97, v96, (uint64_t)v29);
        }
      }
    }
  }
}

uint64_t sub_1B17C1FA0(uint64_t a1, uint64_t a2, uint64_t a3, CFX::RG::RenderGraphContext *a4, __int128 *a5)
{
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  CFX::RG::Resource *v25;
  _OWORD *v26;
  uint64_t *v27;
  CFX::RG::Resource *v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[10];
  _OWORD v34[10];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v8 = *((_QWORD *)a5 + 3);
  *(_QWORD *)&v35 = "SSAOUpscalePass";
  *((_QWORD *)&v35 + 1) = v8;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65620);
  v10 = &unk_1EEF65000;
  if ((v9 & 1) == 0)
  {
    v31 = a2;
    v32 = a3;
    v30 = __cxa_guard_acquire(&qword_1EEF65620);
    v10 = (_QWORD *)&unk_1EEF65000;
    a2 = v31;
    a3 = v32;
    if (v30)
    {
      qword_1EEF65618 = (uint64_t)sub_1B17C226C("SSAO_UPSCALE", 0xCu);
      __cxa_guard_release(&qword_1EEF65620);
      v10 = (_QWORD *)&unk_1EEF65000;
      a2 = v31;
      a3 = v32;
    }
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v35, v10[195], 0);
  *(_QWORD *)a1 = &off_1E63CEE00;
  v11 = *a5;
  v12 = a5[1];
  v13 = a5[3];
  *(_OWORD *)(a1 + 408) = a5[2];
  *(_OWORD *)(a1 + 424) = v13;
  *(_OWORD *)(a1 + 376) = v11;
  *(_OWORD *)(a1 + 392) = v12;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 472) = 0;
  v21 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v14, v15, v16, v17, v18, v19, v20);
  *(_QWORD *)(a1 + 464) = v21;
  *(_QWORD *)(a1 + 472) = objc_msgSend_resourceManager(v21, v22, v23, v24);
  CFX::RG::Pass::readFrom((uint64_t *)a1, *((CFX::RG::Resource **)a5 + 5));
  v25 = (CFX::RG::Resource *)*((_QWORD *)a5 + 6);
  if (v25)
    CFX::RG::Pass::readFrom((uint64_t *)a1, v25);
  v26 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*((CFX::RG::Resource **)a5 + 5));
  CFX::RG::TextureDescriptorReference::withSampleCount(v26, 1, (uint64_t)v34);
  CFX::RG::TextureDescriptorReference::withSizeFactor(v34, *(float *)(a1 + 392), (float *)&v35);
  *((_QWORD *)&v36 + 1) = 115;
  LOBYTE(v37) = 1;
  v27 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a4);
  v33[6] = v41;
  v33[7] = v42;
  v33[8] = v43;
  v33[9] = v44;
  v33[2] = v37;
  v33[3] = v38;
  v33[4] = v39;
  v33[5] = v40;
  v33[0] = v35;
  v33[1] = v36;
  v28 = sub_1B17A34D0(v27, (uint64_t)"SSAO_UPSCALE_OUTPUT", v33);
  *(_QWORD *)(a1 + 456) = v28;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v28);
  return a1;
}

void sub_1B17C2140(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17C215C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 v13;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
  *(_QWORD *)(a1 + 440) = v5;
  if (!v5)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = (_QWORD *)operator new();
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E63CEDE0;
    CFX::CrossFrameResourceManager::set(v6, v4, (uint64_t)v7);
    *(_QWORD *)(a1 + 440) = v7;
    v10 = objc_msgSend_newComputePipelineStateWithFunctionName_(*(void **)(a1 + 472), v8, (uint64_t)CFSTR("vfx_ssao_upscale"), v9);
    v11 = (void *)v7[2];
    if (v11 != (void *)v10)
    {
      v12 = v10;
      if (v11)

      v7[2] = v12;
    }
  }
  v13 = atomic_load((unsigned __int8 *)&qword_1EEF655F0);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF655F0))
  {
    qword_1EEF655E8 = (uint64_t)sub_1B17C226C("VFX-SSAO", 8u);
    __cxa_guard_release(&qword_1EEF655F0);
  }
  return CFX::GPUResourceManager::registerNamedFrameResource(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 456), qword_1EEF655E8);
}

unsigned __int8 *sub_1B17C226C(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

void sub_1B17C2334(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;
  const __CFDictionary *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id Texture;
  id v34;
  id v35;
  id v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x2_t v77;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  float v105;
  __n128 v106;
  unsigned __int8 v107[176];
  simd_float4x4 v108;
  float32x2_t v109;
  float32x2_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  simd_float4x4 v114;

  v113 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  v11 = *(const void **)(a1 + 408);
  if (v11 || (v11 = sub_1B1814768(*(uint64_t **)(a1 + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8)) != 0)
  {
    v12 = sub_1B186CFA8((uint64_t)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (v12)
    {
      v20 = sub_1B1864F3C((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
      sub_1B17B33F4((uint64_t)v11, (uint64_t)v107, v21, v22, v23, v24, v25, v26);
      v106 = sub_1B181537C(*(_QWORD *)(a1 + 368), 0, v27, v28, v29, v30, v31, v32);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 440) + 16))
      {
        Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 448));
        v34 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 416));
        v35 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 424));
        v36 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 456));
        objc_msgSend_setTexture_atIndex_(v10, v37, (uint64_t)v34, 1);
        objc_msgSend_setTexture_atIndex_(v10, v38, (uint64_t)v35, 2);
        objc_msgSend_setTexture_atIndex_(v10, v39, (uint64_t)Texture, 0);
        objc_msgSend_setTexture_atIndex_(v10, v40, (uint64_t)v36, 3);
        if (sub_1B1814C44(*(_QWORD *)(a1 + 368), v41, v42, v43, v44, v45, v46, v47) || !v20)
        {
          v111 = *(_QWORD *)(a1 + 380);
          v69 = *(float *)(a1 + 388);
        }
        else
        {
          LODWORD(v111) = sub_1B18E8CD4(v20, v48, v49, v50, v51, v52, v53, v54);
          HIDWORD(v111) = sub_1B18E91D8(v20, v55, v56, v57, v58, v59, v60, v61);
          v69 = sub_1B18E9308(v20, v62, v63, v64, v65, v66, v67, v68);
        }
        v112 = v69;
        v114 = *(simd_float4x4 *)sub_1B18667B4(v107, (uint64_t)&v106, v49, v50, v51, v52, v53, v54);
        v108 = __invert_f4(v114);
        v105 = (float)(unint64_t)objc_msgSend_width(Texture, v70, v71, v72);
        v76 = objc_msgSend_height(Texture, v73, v74, v75);
        v77.f32[0] = v105;
        v77.f32[1] = (float)(unint64_t)v76;
        __asm { FMOV            V0.2S, #1.0 }
        v109 = v77;
        v110 = vdiv_f32(_D0, v77);
        objc_msgSend_setBytes_length_atIndex_(v10, v83, (uint64_t)&v108, 112, 8);
        v90 = *(_QWORD *)(a1 + 440);
        v91 = *(_QWORD *)(v90 + 16);
        if (!v91)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v84, v85, v86, v87, v88, v89, (uint64_t)"_ptr != NULL");
          v91 = *(_QWORD *)(v90 + 16);
        }
        v92 = sub_1B18FD774(v91);
        objc_msgSend_setComputePipelineState_(v10, v93, v92, v94);
        v101 = *(_QWORD *)(a1 + 440);
        v102 = *(_QWORD *)(v101 + 16);
        if (!v102)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v95, v96, v97, v98, v99, v100, (uint64_t)"_ptr != NULL");
          v102 = *(_QWORD *)(v101 + 16);
        }
        v103 = sub_1B18FD774(v102);
        objc_msgSend_dispatch_onTexture2D_(v10, v104, v103, (uint64_t)v36);
      }
    }
  }
}

uint64_t *sub_1B17C25A0(uint64_t *a1, CFX::RG::RenderGraphContext *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  CFX::RG::Pass *v9;
  uint64_t *v10;
  CFX::RG::Resource *v11;
  uint64_t *v12;
  CFX::RG::Resource *v13;
  _QWORD v15[2];
  __int16 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v6 = *(_OWORD *)(a3 + 16);
  v17 = *(_OWORD *)a3;
  v18 = v6;
  v7 = *(_OWORD *)(a3 + 48);
  v19 = *(_OWORD *)(a3 + 32);
  v20 = v7;
  v8 = *(_QWORD *)(a3 + 24);
  v15[0] = "SSAOTracePass";
  v15[1] = v8;
  v16 = 0;
  v9 = (CFX::RG::Pass *)sub_1B17C267C(a1, a1, (uint64_t)v15);
  v10 = (uint64_t *)sub_1B17C26D0(a1, a2, (__int128 *)a3);
  CFX::RG::Pass::dependsOn(v10, v9);
  v11 = (CFX::RG::Resource *)*((_QWORD *)v9 + 57);
  CFX::RG::Pass::readFrom(v10, v11);
  v10[56] = (uint64_t)v11;
  v12 = (uint64_t *)sub_1B17C2724(a1, a2, (__int128 *)a3);
  CFX::RG::Pass::dependsOn(v12, (CFX::RG::Pass *)v10);
  v13 = (CFX::RG::Resource *)v10[58];
  CFX::RG::Pass::readFrom(v12, v13);
  v12[56] = (uint64_t)v13;
  *(_QWORD *)(a3 + 56) = v12[57];
  return v12;
}

uint64_t sub_1B17C267C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17C298C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B17C26D0(uint64_t *a1, CFX::RG::RenderGraphContext *a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17C29E8(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B17C2724(uint64_t *a1, CFX::RG::RenderGraphContext *a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17C2A44(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B17C277C(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17C27A4(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17C27D0(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B17C27F4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CEA60;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B17C282C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CEA60;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B17C2874(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CED70;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  return a1;
}

void sub_1B17C28B8(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CED70;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B17C290C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CEDE0;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B17C2944(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CEDE0;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B17C298C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1D0u, 8u);
  return sub_1B17C135C(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B17C29E8(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::RG::RenderGraphContext *a4, __int128 *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1E8u, 8u);
  return sub_1B17C19A8(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B17C2A44(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::RG::RenderGraphContext *a4, __int128 *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1E0u, 8u);
  return sub_1B17C1FA0(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B17C2AA0(uint64_t result)
{
  *(_WORD *)(result + 80) &= ~0x400u;
  return result;
}

void sub_1B17C2AB0(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  CFTypeID v7;
  const void *v8;
  const void *v9;

  sub_1B194F874(CFSTR("kCFXNotificationRendererElementWillDie"), (const void *)a1, 0, 1u);
  if ((*(_WORD *)(a1 + 80) & 7) == 4)
  {
    v2 = *(const void **)(a1 + 48);
    if (v2)
      _Block_release(v2);
  }
  else
  {
    v3 = *(const void **)(a1 + 32);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 32) = 0;
    }
    v4 = *(const void **)(a1 + 16);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v5 = *(const void **)(a1 + 24);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v6 = *(const void **)(a1 + 48);
    if (v6)
    {
      v7 = CFGetTypeID(v6);
      if (v7 == sub_1B17A3924())
      {
        v8 = *(const void **)(a1 + 48);
        if (v8)
        {
          CFRelease(v8);
          *(_QWORD *)(a1 + 48) = 0;
        }
      }
    }
    v9 = *(const void **)(a1 + 40);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
}

BOOL sub_1B17C2B78(uint64_t a1)
{
  return (*(_WORD *)(a1 + 80) & 7) == 4;
}

void sub_1B17C2B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v10;
  unsigned int v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  const __CFArray *v17;
  char v18;
  uint64_t v19;
  const __CFArray *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  float v30;
  int v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int16 v45;

  v8 = a2;
  if ((a2 & 4) != 0)
  {
    v10 = *(_QWORD *)(a1 + 8);
    if ((*(_WORD *)(a1 + 80) & 7) == 5)
    {
      v11 = 0x80000000;
    }
    else if (v10)
    {
      v11 = sub_1B186C9C0(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v11 = 0;
    }
    *(_DWORD *)(a1 + 72) = v11;
    if (v10)
    {
      if (sub_1B186CAF4(v10, a2, a3, a4, a5, a6, a7, a8))
        v12 = 16;
      else
        v12 = 0;
    }
    else
    {
      v12 = 0;
    }
    *(_WORD *)(a1 + 80) = *(_WORD *)(a1 + 80) & 0xFFEF | v12;
  }
  if ((v8 & 8) == 0)
    goto LABEL_41;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"rendererElement");
  v13 = *(_WORD *)(a1 + 80) & 7;
  if (v13 != 4)
  {
    v15 = *(_QWORD *)(a1 + 32);
    v16 = v15 == 0;
    if (v15)
    {
      v17 = sub_1B193F97C(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
      v18 = sub_1B17C2F48(v17);
      v13 = *(_WORD *)(a1 + 80) & 7;
    }
    else
    {
      v18 = 0;
    }
    if (v13 != 2 && v13 != 4)
    {
      v19 = *(_QWORD *)(a1 + 16);
      if (v19)
      {
        v20 = sub_1B193F97C(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
        v18 |= sub_1B17C2F48(v20);
        v28 = sub_1B17A0848(v19, v21, v22, v23, v24, v25, v26, v27);
        if (v28)
        {
          if (sub_1B1876080(v28))
          {
            v29 = *(_WORD *)(a1 + 80);
            if ((v29 & 8) == 0)
              goto LABEL_41;
            goto LABEL_36;
          }
        }
      }
    }
    if ((v18 & 1) == 0)
    {
      v14 = *(_QWORD *)(a1 + 8);
      if (v14)
        goto LABEL_31;
      if (v15)
      {
LABEL_33:
        v31 = sub_1B1878654(v15, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_34;
      }
    }
LABEL_38:
    v29 = *(_WORD *)(a1 + 80);
    if ((v29 & 8) == 0)
      goto LABEL_39;
    goto LABEL_41;
  }
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14)
    goto LABEL_38;
  v15 = 0;
  v16 = 1;
LABEL_31:
  sub_1B186C4A8(v14, a2, a3, a4, a5, a6, a7, a8);
  v31 = v30 >= 1.0;
  if (!v16 && v30 >= 1.0)
    goto LABEL_33;
LABEL_34:
  v29 = *(_WORD *)(a1 + 80);
  if (((v31 ^ ((v29 & 8) == 0)) & 1) == 0)
  {
    if (!v31)
    {
LABEL_36:
      v32 = 0;
LABEL_40:
      *(_WORD *)(a1 + 80) = v29 & 0xFFF7 | v32;
      sub_1B194F874(CFSTR("kCFXNotificationRendererElementWillDie"), (const void *)a1, 0, 1u);
      goto LABEL_41;
    }
LABEL_39:
    v32 = 8;
    goto LABEL_40;
  }
LABEL_41:
  if ((v8 & 0x10) != 0)
  {
    v33 = *(_WORD *)(a1 + 80);
    if ((v33 & 7) != 4)
    {
      v34 = *(_QWORD *)(a1 + 32);
      if (!v34)
      {
        v45 = v33 & 0xFFBF;
LABEL_53:
        *(_WORD *)(a1 + 80) = v45;
        return;
      }
      v35 = sub_1B1878184(v34, a2, a3, a4, a5, a6, a7, a8);
      v43 = v35;
      if (v35 && (sub_1B1841314(v35, v36, v37, v38, v39, v40, v41, v42) & 0xFFFFFFFD) != 0)
        v44 = 64;
      else
        v44 = 0;
      if (!v43)
        v44 = 0;
      *(_WORD *)(a1 + 80) = *(_WORD *)(a1 + 80) & 0xFFBF | v44;
      if (!sub_1B18784E8(*(_QWORD *)(a1 + 32), v36, v37, v38, v39, v40, v41, v42))
      {
        v45 = *(_WORD *)(a1 + 80) & 0xFFEF;
        goto LABEL_53;
      }
    }
  }
}

uint64_t sub_1B17C2DEC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1B17C2DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (!a2)
    return *(_QWORD *)(a1 + 32);
  v10 = sub_1B19ACF58(a2, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_WORD *)(a1 + 80);
  if ((v18 & 0x400) != 0)
    return *(_QWORD *)(a1 + 32);
  v19 = v10;
  if (!v10 || (v18 & 8) == 0 && sub_1B19AD21C(a2, v11, v12, v13, v14, v15, v16, v17))
    return *(_QWORD *)(a1 + 32);
  return v19;
}

uint64_t sub_1B17C2E50(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 80) >> 3) & 1;
}

uint64_t sub_1B17C2E5C(uint64_t a1)
{
  int v1;

  v1 = *(_WORD *)(a1 + 80) & 7;
  if (v1 == 2 || v1 == 4)
    return 0;
  else
    return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B17C2E80(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 80) & 7) == 4)
    return 0;
  else
    return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1B17C2EA0(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 80) & 7) == 4)
    return 0;
  else
    return *(_QWORD *)(a1 + 24);
}

const void *sub_1B17C2EC0(uint64_t a1)
{
  const void *result;
  CFTypeID v3;

  if ((*(_WORD *)(a1 + 80) & 7) == 4)
    return 0;
  result = *(const void **)(a1 + 48);
  if (!result)
    return result;
  v3 = CFGetTypeID(result);
  if (v3 != sub_1B17A3924())
    return 0;
  else
    return *(const void **)(a1 + 48);
}

uint64_t sub_1B17C2F14(uint64_t a1)
{
  uint64_t v1;

  if ((*(_WORD *)(a1 + 80) & 7) == 4)
    return 0;
  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    return 0;
  else
    return sub_1B17EE4F8(v1);
}

uint64_t sub_1B17C2F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return sub_1B1868D5C(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_1B17C2F48(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  int v5;
  const void *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
  {
    v3 = Count;
    v4 = 0;
    v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
      v5 |= sub_1B19B9728((uint64_t)ValueAtIndex, v7, v8, v9, v10, v11, v12, v13);
      ++v4;
    }
    while (v3 != v4);
  }
  else
  {
    LOWORD(v5) = 0;
  }
  return (__int16)v5;
}

uint64_t sub_1B17C2FB4(uint64_t a1, float *a2, float32x4_t *a3)
{
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t *v8;
  float v9;
  float v10;
  float v11;
  float v12;

  nullsub_16(a1);
  v7 = v6;
  v8 = (float32x4_t *)sub_1B18240EC(a1);
  v9 = a2[1];
  v10 = a2[2];
  v11 = (float)((float)(v8->f32[1] * v9) + (float)(v8->f32[0] * *a2)) + (float)(v8->f32[2] * v10);
  if (v11 == 0.0)
    return 0;
  v12 = (float)-(float)(a2[3]
                      + (float)((float)((float)(v9 * v7->f32[1]) + (float)(*a2 * v7->f32[0])) + (float)(v10 * v7->f32[2])))
      / v11;
  if (v12 < 0.0)
    return 0;
  if (a3)
    *a3 = vmlaq_n_f32(*v7, *v8, v12);
  return 1;
}

BOOL sub_1B17C3060(uint64_t a1, float *a2, float32x4_t *a3)
{
  float32x4_t *v6;
  float32x4_t *v7;
  float32x4_t *v8;
  float v9;
  float v10;
  float v11;

  nullsub_16(a1);
  v7 = v6;
  v8 = (float32x4_t *)sub_1B18240EC(a1);
  v9 = a2[1];
  v10 = a2[2];
  v11 = (float)((float)(v8->f32[1] * v9) + (float)(v8->f32[0] * *a2)) + (float)(v8->f32[2] * v10);
  if (a3 && v11 != 0.0)
    *a3 = vmlaq_n_f32(*v7, *v8, (float)-(float)(a2[3]+ (float)((float)((float)(v9 * v7->f32[1]) + (float)(*a2 * v7->f32[0]))+ (float)(v10 * v7->f32[2])))/ v11);
  return v11 != 0.0;
}

BOOL sub_1B17C3100(float32x4_t *a1, float *a2, float32x4_t *a3)
{
  int v6;
  _BOOL8 result;
  float32x4_t *v8;
  float32x4_t *v9;
  float32x4_t *v10;
  float32x4_t v11;
  float v12;
  float32x4_t v13[2];
  float32x4_t v14;

  v14.i32[2] = 0;
  v14.i64[0] = 0;
  memset(v13, 0, sizeof(v13));
  sub_1B182409C(v13, a1);
  v6 = sub_1B17C2FB4((uint64_t)v13, a2, &v14);
  result = 0;
  if (v6)
  {
    nullsub_16(a1);
    v9 = v8;
    v10 = (float32x4_t *)sub_1B18240EC((uint64_t)a1);
    v11 = vmulq_f32(vsubq_f32(v14, *v9), vsubq_f32(v14, *v10));
    v12 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0];
    result = v12 <= 0.0;
    if (a3)
    {
      if (v12 <= 0.0)
      {
        *a3 = v14;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1B17C34B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  objc_msgSend__setCFXProgram(*(void **)(a1 + 32), a2, a3, a4);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__startObservingProgram, v5, v6);
}

void sub_1B17C3740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  VFXShaderArgument *v11;

  v11 = objc_alloc_init(VFXShaderArgument);
  objc_msgSend_setName_(v11, v6, a2, v7);
  objc_msgSend_setType_(v11, v8, a3, v9);
  objc_msgSend_setValue_forKey_(*(void **)(*(_QWORD *)(a1 + 32) + 48), v10, (uint64_t)v11, a2);

}

void sub_1B17C37B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B193F8D0(*(CFTypeRef **)(a1 + 40), *(const __CFDictionary **)(a1 + 32), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B17C37BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = sub_1B187AA20(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  return sub_1B18D2BB8(v8, v9, v10, v11);
}

void sub_1B17C3AC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (void *)objc_msgSend_owner(*(void **)(a1 + 32), a2, a3, a4);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v13 = (CFTypeRef *)objc_msgSend___CFObject(v5, v6, v7, v8);
    sub_1B193FA6C(v13, *(const __CFDictionary **)(a1 + 40), v14, v15, v16, v17, v18, v19);
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: ShaderModifiers - unkwnown supporting class '%@'"), v7, v8, v9, v10, v11, v12, (uint64_t)v5);
  }
}

uint64_t sub_1B17C3BE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;

  v5 = (void *)objc_msgSend_userInfo(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
    objc_msgSend_valueForKey_(v5, v6, (uint64_t)CFSTR("parameter"), v8);
  else
    objc_msgSend__setCFXProgram(*(void **)(a1 + 40), v6, v7, v8);
  v12 = (void *)objc_msgSend_defaultCenter(MEMORY[0x1E0CB37D0], v9, v10, v11);
  v16 = (void *)objc_msgSend_owner(*(void **)(a1 + 40), v13, v14, v15);
  v20 = objc_msgSend_worldRef(v16, v17, v18, v19);
  return objc_msgSend_postNotificationName_object_(v12, v21, (uint64_t)CFSTR("kCFXWorldDidUpdateNotification"), v20);
}

void sub_1B17C3E74(uint64_t a1, void *a2, void *a3)
{
  sub_1B181E768(*(_QWORD *)(a1 + 32), a2, a3);
}

void sub_1B17C41D0(uint64_t a1, void *a2, __CFString *a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *PathComponent;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;

  if ((objc_msgSend_isEqualToString_(a2, (const char *)a2, (uint64_t)CFSTR("VFXShaderModifierEntryPointVertex"), a4) & 1) != 0)
  {
    v9 = 0;
  }
  else if ((objc_msgSend_isEqualToString_(a2, v7, (uint64_t)CFSTR("VFXShaderModifierEntryPointSurface"), v8) & 1) != 0)
  {
    v9 = 1;
  }
  else if ((objc_msgSend_isEqualToString_(a2, v7, (uint64_t)CFSTR("VFXShaderModifierEntryPointFragment"), v8) & 1) != 0)
  {
    v9 = 2;
  }
  else
  {
    if ((objc_msgSend_isEqualToString_(a2, v7, (uint64_t)CFSTR("VFXShaderModifierEntryPointLighting"), v8) & 1) == 0)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: ShaderModifiers - unkwnown entrypoint '%@'"), v10, v8, v11, v12, v13, v14, (uint64_t)a2);
      return;
    }
    v9 = 3;
  }
  v15 = objc_msgSend_rangeOfString_(a3, v7, (uint64_t)CFSTR(";"), v8);
  if (v16 != (const char *)1)
  {
    v19 = (void *)VFXGetResourceBundle(v15, v16, v17, v18);
    PathComponent = (void *)objc_msgSend_lastPathComponent(a3, v20, v21, v22);
    v27 = objc_msgSend_stringByDeletingPathExtension(PathComponent, v24, v25, v26);
    v31 = objc_msgSend_pathExtension(a3, v28, v29, v30);
    v35 = objc_msgSend_stringByDeletingLastPathComponent(a3, v32, v33, v34);
    v37 = objc_msgSend_pathForResource_ofType_inDirectory_(v19, v36, v27, v31, v35);
    if (v37)
    {
      v38 = objc_msgSend_stringWithContentsOfFile_encoding_error_(MEMORY[0x1E0CB3940], v16, v37, 4, 0);
      if (v38)
        a3 = (__CFString *)v38;
    }
  }
  v39 = objc_msgSend_length(a3, v16, v17, v18);
  v41 = (void *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_options_range_(a3, v40, (uint64_t)CFSTR("(//.*|/\\*(.|\n)*?\\*/)"), (uint64_t)&stru_1E63FD500, 1024, 0, v39);
  v45 = objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v42, v43, v44);
  v48 = (void *)objc_msgSend_stringByTrimmingCharactersInSet_(v41, v46, v45, v47);
  if (objc_msgSend_length(v48, v49, v50, v51))
  {
    v52 = (const void *)sub_1B19B9164(a3, v9, 0, 1, 0);
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v52);
    CFRelease(v52);
  }
}

uint64_t sub_1B17C439C()
{
  if (qword_1ED4CF7A8[0] != -1)
    dispatch_once(qword_1ED4CF7A8, &unk_1E63D1930);
  return qword_1ED4CF7A0;
}

os_log_t sub_1B17C43DC()
{
  os_log_t result;

  result = os_log_create("com.apple.vfx", "PointsOfInterest");
  qword_1ED4CF7A0 = (uint64_t)result;
  return result;
}

void sub_1B17C4408(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v11 = objc_alloc(MEMORY[0x1E0CB3940]);
  v13 = (void *)objc_msgSend_initWithFormat_arguments_(v11, v12, a2, (uint64_t)&a9);
  objc_msgSend_UTF8String(v13, v14, v15, v16);
  sub_1B1F1B008(a1);

}

uint64_t sub_1B17C4468(int a1)
{
  if (qword_1ED4CEDB0 != -1)
    dispatch_once(&qword_1ED4CEDB0, &unk_1E63D09F0);
  return qword_1ED4CEDB8[a1];
}

uint64_t sub_1B17C44B8()
{
  void *v0;
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t result;

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("internalSettings"), CFSTR("com.apple.vfx"));
  v3 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v1, (uint64_t)CFSTR("showsStatistics"), v2);
  qword_1ED4CEDB8[0] = objc_msgSend_BOOLValue(v3, v4, v5, v6);
  v9 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v7, (uint64_t)CFSTR("cameraControlEnabled"), v8);
  qword_1ED4CEDC0 = objc_msgSend_BOOLValue(v9, v10, v11, v12);
  v15 = (void *)objc_msgSend_valueForKey_(v0, v13, (uint64_t)CFSTR("batchMaxCount"), v14);
  qword_1ED4CEDC8 = (int)objc_msgSend_intValue(v15, v16, v17, v18);
  unk_1ED4CEDD0 = 0;
  v21 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v19, (uint64_t)CFSTR("disableLinearSpaceRendering"), v20);
  qword_1ED4CEDD8 = objc_msgSend_BOOLValue(v21, v22, v23, v24);
  v27 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v25, (uint64_t)CFSTR("disableWideGamut"), v26);
  qword_1ED4CEDE0 = objc_msgSend_BOOLValue(v27, v28, v29, v30);
  v33 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v31, (uint64_t)CFSTR("enableWideGamut"), v32);
  qword_1ED4CEDE8 = objc_msgSend_BOOLValue(v33, v34, v35, v36);
  v39 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v37, (uint64_t)CFSTR("enablePostMorphUnifyNormals"), v38);
  qword_1ED4CEDF0 = objc_msgSend_BOOLValue(v39, v40, v41, v42);
  v45 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v43, (uint64_t)CFSTR("enableStandardShadersWithFunctionConstants"), v44);
  qword_1ED4CEE00 = objc_msgSend_BOOLValue(v45, v46, v47, v48);
  v51 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v49, (uint64_t)CFSTR("forceNMOSBehavior"), v50);
  qword_1ED4CEE08 = objc_msgSend_BOOLValue(v51, v52, v53, v54);
  v57 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v55, (uint64_t)CFSTR("com.apple.vfx.forceOS2019Behavior"), v56);
  qword_1ED4CEE10 = objc_msgSend_BOOLValue(v57, v58, v59, v60);
  v63 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v61, (uint64_t)CFSTR("com.apple.vfx.forceOS2018Behavior"), v62);
  qword_1ED4CEE18 = objc_msgSend_BOOLValue(v63, v64, v65, v66);
  v69 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v67, (uint64_t)CFSTR("com.apple.vfx.forceOS2017Behavior"), v68);
  qword_1ED4CEE20 = objc_msgSend_BOOLValue(v69, v70, v71, v72);
  v75 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v73, (uint64_t)CFSTR("com.apple.vfx.forceOS2016Behavior"), v74);
  qword_1ED4CEE28 = objc_msgSend_BOOLValue(v75, v76, v77, v78);
  unk_1ED4CEE30 = 0;
  if (objc_msgSend_objectForKeyedSubscript_(v0, v79, (uint64_t)CFSTR("com.apple.vfx.useOneCommandQueuePerDevice"), v80))
  {
    v83 = (void *)objc_msgSend_objectForKeyedSubscript_(v0, v81, (uint64_t)CFSTR("com.apple.vfx.useOneCommandQueuePerDevice"), v82);
    v87 = objc_msgSend_BOOLValue(v83, v84, v85, v86);
  }
  else
  {
    v87 = 1;
  }
  qword_1ED4CEE38 = v87;

  v91 = (void *)objc_msgSend_standardUserDefaults(MEMORY[0x1E0C99EA0], v88, v89, v90);
  result = objc_msgSend_BOOLForKey_(v91, v92, (uint64_t)CFSTR("com.apple.vfx.isolateCacheMissShader"), v93);
  qword_1ED4CEDF8 = result;
  return result;
}

BOOL sub_1B17C46BC(int a1)
{
  if (qword_1ED4CEDB0 != -1)
    dispatch_once(&qword_1ED4CEDB0, &unk_1E63D09F0);
  return qword_1ED4CEDB8[a1] != 0;
}

uint64_t sub_1B17C4714(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = (void *)objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4);
  v10 = (void *)objc_msgSend_infoDictionary(v6, v7, v8, v9);
  v13 = objc_msgSend_objectForKeyedSubscript_(v10, v11, a1, v12);
  if (v13 && (v14 = (void *)v13, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    return objc_msgSend_BOOLValue(v14, v15, v16, v17);
  else
    return (uint64_t)a2;
}

uint64_t sub_1B17C4784(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t, uint64_t);
  _QWORD v10[6];

  if (!a1)
    return 0;
  if (!*a2 || (v6 = (*a2)(a1, a3)) == 0)
  {
    v7 = a2[1];
    if (!v7)
    {
      v6 = 0;
LABEL_10:
      v10[0] = MEMORY[0x1E0C809B0];
      v10[1] = 0x40000000;
      v10[2] = sub_1B17C486C;
      v10[3] = &unk_1E63D5510;
      v10[4] = a2;
      v10[5] = a3;
      if (sub_1B186AFB4(a1, (uint64_t)v10))
        v6 = 3;
      goto LABEL_12;
    }
    v6 = v7(a1, a3);
  }
  if ((unint64_t)(v6 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_10;
LABEL_12:
  v8 = (void (*)(uint64_t, uint64_t))a2[2];
  if (v8)
    v8(a1, a3);
  return v6;
}

uint64_t sub_1B17C486C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = sub_1B17C4784(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if (result == 3)
    *a3 = 1;
  return result;
}

uint64_t sub_1B17C48A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(uint64_t, uint64_t);
  _QWORD v10[6];

  if (!a1)
    return 0;
  if (*(_QWORD *)a2)
  {
    v6 = (*(uint64_t (**)(uint64_t, uint64_t))a2)(a1, a3);
    if ((unint64_t)(v6 - 4) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_7;
  }
  else
  {
    v6 = 0;
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = sub_1B17C498C;
  v10[3] = &unk_1E63D5530;
  v10[4] = a2;
  v10[5] = a3;
  sub_1B186AFB4(a1, (uint64_t)v10);
LABEL_7:
  v7 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  if (v7)
    v7(a1, a3);
  if (v6)
    return v6;
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  if (v8)
    return v8(a1, a3);
  return 0;
}

uint64_t sub_1B17C498C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = sub_1B17C48A8(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if (result == 3)
    *a3 = 1;
  return result;
}

uint64_t sub_1B17C49C8(uint64_t a1, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXNodeIterateTree : null node"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXNodeIterateTree : no callbacks"), a3, a4, a5, a6, a7, a8, (uint64_t)"callbacks");
LABEL_3:
  if (a3)
    return sub_1B17C48A8(a1, (uint64_t)a2, a4);
  else
    return sub_1B17C4784(a1, a2, a4);
}

float32_t sub_1B17C4A6C(__n128 *a1, float32x4_t a2, float32x4_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  float32x4_t v11;
  float32_t result;
  float32x4_t v13;
  float32x4_t v14;

  if (!a1)
  {
    v13 = a2;
    v14 = a3;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a5, a6, a7, a8, a9, a10, (uint64_t)"out");
    a2 = v13;
    a3 = v14;
  }
  v11 = vmulq_f32(a2, a3);
  result = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0];
  a3.f32[3] = result;
  *a1 = (__n128)a3;
  return result;
}

BOOL sub_1B17C4AD8(uint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;

  v4 = vsubq_f32(*a4, *a2);
  v5 = vsubq_f32(*a3, *a2);
  v6 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), vnegq_f32(v4)), v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL));
  v7 = vmulq_f32(v6, v6);
  v8 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), v7)).u64[0];
  *(float *)v8.i32 = sqrtf(*(float *)v8.i32);
  if (*(float *)v8.i32 == 0.0)
  {
    *(_DWORD *)(a1 + 8) = 0;
    v11 = 0.0;
    *(_QWORD *)a1 = 0;
  }
  else
  {
    v9 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), (float32x4_t)vdupq_lane_s32(v8, 0));
    *(_QWORD *)a1 = v9.i64[0];
    *(_DWORD *)(a1 + 8) = v9.i32[2];
    v10 = vmulq_f32(v9, *a4);
    v11 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  }
  *(float *)(a1 + 12) = v11;
  return *(float *)v8.i32 != 0.0;
}

BOOL sub_1B17C4B84(uint64_t a1, uint64_t a2)
{
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t *v6;

  v4 = (float32x4_t *)sub_1B1821F34(a2, 0);
  v5 = (float32x4_t *)sub_1B1821F34(a2, 1u);
  v6 = (float32x4_t *)sub_1B1821F34(a2, 2u);
  return sub_1B17C4AD8(a1, v4, v5, v6);
}

uint64_t sub_1B17C4BE8(int a1, float a2)
{
  const void *v4;
  const __CFAllocator *v5;
  CFDataRef v6;
  uint64_t v7;
  int v8;
  const CFArrayCallBacks *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  CFTypeRef cf;
  UInt8 bytes[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *values[4];

  values[3] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = (void *)sub_1B17C4E64(0, a2);
  values[1] = (void *)sub_1B17C4E64(1, a2);
  values[2] = (void *)sub_1B17C4E64(3, a2);
  v4 = (const void *)sub_1B17A39B4();
  cf = v4;
  if (a1)
  {
    if (a1 == 2)
    {
      v33 = xmmword_1B2245AF8;
      v34 = unk_1B2245B08;
      v35 = xmmword_1B2245B18;
      v29 = xmmword_1B2245AB8;
      v30 = unk_1B2245AC8;
      v31 = xmmword_1B2245AD8;
      v32 = unk_1B2245AE8;
      v25 = xmmword_1B2245A78;
      v26 = unk_1B2245A88;
      v27 = xmmword_1B2245A98;
      v28 = *(_OWORD *)asc_1B2245AA8;
      *(_OWORD *)bytes = xmmword_1B2245A38;
      v22 = unk_1B2245A48;
      v23 = xmmword_1B2245A58;
      v24 = unk_1B2245A68;
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 240);
      v7 = (uint64_t)v4;
      v8 = 60;
    }
    else
    {
      if (a1 != 3)
      {
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        goto LABEL_9;
      }
      *(_OWORD *)bytes = xmmword_1B2245B28;
      *(_QWORD *)&v22 = 0x10000F000E000DLL;
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 24);
      v7 = (uint64_t)v4;
      v8 = 12;
    }
  }
  else
  {
    v25 = xmmword_1B2245A00;
    v26 = unk_1B2245A10;
    v27 = xmmword_1B2245A20;
    *(_QWORD *)&v28 = 0x14000F000E0013;
    *(_OWORD *)bytes = xmmword_1B22459C0;
    v22 = unk_1B22459D0;
    v23 = xmmword_1B22459E0;
    v24 = unk_1B22459F0;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 120);
    v7 = (uint64_t)v4;
    v8 = 20;
  }
  sub_1B17A4464(v7, v8, v6, 2);
  CFRelease(v6);
LABEL_9:
  bytes[2] = 0;
  *(_WORD *)bytes = 0;
  v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v10 = CFArrayCreate(v5, (const void **)values, 3, MEMORY[0x1E0C9B378]);
  v11 = CFArrayCreate(v5, &cf, 1, v9);
  v17 = sub_1B17AF674(v10, v11, (uint64_t)bytes, v12, v13, v14, v15, v16);
  for (i = 0; i != 3; ++i)
    CFRelease(values[i]);
  CFRelease(cf);
  CFRelease(v10);
  CFRelease(v11);
  return v17;
}

uint64_t sub_1B17C4E64(int a1, float a2)
{
  unint64_t v2;
  float v3;
  float v4;
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  CFDataRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFDataRef v20;
  uint64_t v21;
  uint64_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int32x4_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int8x16_t v46;
  float32x4_t v47;
  const void *v48;
  uint64_t v49;
  __int128 v51;
  __int128 v52;
  _BYTE v53[160];
  __int128 v54;
  __int128 v55;
  _BYTE v56[24];
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(double *)&v2 = (float)(a2 + a2) * 2.23606798;
  v3 = *(double *)&v2 / 5.0;
  v4 = *(double *)&v2 / 10.0;
  LODWORD(v2) = 0;
  *((float *)&v2 + 1) = -v4;
  v5.i32[0] = 0;
  v6 = (float32x4_t)v2;
  v6.f32[2] = v3;
  v7 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B22458E0, v6, 2), (float32x4_t)xmmword_1B2244DD0, (float32x2_t)v2, 1), (float32x4_t)xmmword_1B22458F0);
  v8 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B22458E0, v7, 2), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v7.f32, 1), (float32x4_t)xmmword_1B2245900, v7.f32[0]);
  v9 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B22458E0, v8, 2), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v8.f32, 1), (float32x4_t)xmmword_1B2245900, v8.f32[0]);
  v10 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B22458E0, v9, 2), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v9.f32, 1), (float32x4_t)xmmword_1B2245900, v9.f32[0]);
  v5.f32[1] = v4;
  v11 = (float32x4_t)(unint64_t)v5;
  v11.f32[2] = -v3;
  v12 = vaddq_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B22458E0, v11, 2), (float32x4_t)xmmword_1B2244DD0, v5, 1), (float32x4_t)xmmword_1B22458F0);
  v13 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B22458E0, v12, 2), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v12.f32, 1), (float32x4_t)xmmword_1B2245900, v12.f32[0]);
  v14 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B22458E0, v13, 2), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v13.f32, 1), (float32x4_t)xmmword_1B2245900, v13.f32[0]);
  v15 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B22458E0, v14, 2), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v14.f32, 1), (float32x4_t)xmmword_1B2245900, v14.f32[0]);
  if (!a1)
  {
    LODWORD(v51) = 0;
    *((float *)&v51 + 1) = -a2;
    *((_QWORD *)&v51 + 1) = 0;
    *(float *)&v52 = -a2;
    *(_QWORD *)((char *)&v52 + 4) = 0;
    *((float *)&v52 + 3) = -a2;
    *(_QWORD *)v53 = 0;
    *(float *)&v53[8] = -a2;
    *(_QWORD *)&v53[12] = 0;
    *(float *)&v53[20] = -a2;
    *(_QWORD *)&v53[24] = 0;
    *(float *)&v53[32] = -v4;
    *(float *)&v53[36] = v3;
    v7.i32[3] = v8.i32[0];
    *(float32x4_t *)&v53[40] = v7;
    *(int8x16_t *)&v53[56] = vextq_s8(vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL), (int8x16_t)v9, 8uLL);
    *(int8x16_t *)&v53[72] = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v10, 0xCuLL);
    *(_DWORD *)&v53[88] = 0;
    *(float *)&v53[92] = -v4;
    *(float *)&v53[96] = v3;
    v14.i32[3] = v15.i32[0];
    *(float32x4_t *)&v53[100] = v14;
    *(_QWORD *)&v53[116] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL).u64[0];
    *(_DWORD *)&v53[124] = 0;
    v12.i32[3] = v13.i32[0];
    *(float *)&v53[128] = v4;
    *(float *)&v53[132] = -v3;
    *(float32x4_t *)&v53[136] = v12;
    *(_QWORD *)&v53[152] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL).u64[0];
    LODWORD(v54) = 0;
    *((float *)&v54 + 1) = a2;
    *((_QWORD *)&v54 + 1) = 0;
    *(_QWORD *)((char *)&v55 + 4) = 0;
    *(float *)&v55 = a2;
    *((float *)&v55 + 3) = a2;
    *(_QWORD *)v56 = 0;
    *(_QWORD *)&v56[12] = 0;
    *(float *)&v56[8] = a2;
    *(float *)&v56[20] = a2;
    v57 = 0;
    v16 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v51, 252);
    v20 = v16;
    v21 = 0;
    goto LABEL_7;
  }
  if (a1 == 1)
  {
    v23 = (int32x4_t)vmulq_f32(v10, v10);
    v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
    v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
    v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
    v26 = vmulq_n_f32(v10, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
    v27 = (int32x4_t)vmulq_f32(v6, v6);
    v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
    v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
    v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
    v27.i32[0] = vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).u32[0];
    v30 = (int32x4_t)vmulq_f32(v7, v7);
    v30.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1))).u32[0];
    v31 = (int8x16_t)vmulq_n_f32(v6, *(float *)v27.i32);
    *(float32x2_t *)v27.i8 = vrsqrte_f32((float32x2_t)v30.u32[0]);
    *(float32x2_t *)v27.i8 = vmul_f32(*(float32x2_t *)v27.i8, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8)));
    v32 = (int8x16_t)vmulq_n_f32(v7, vmul_f32(*(float32x2_t *)v27.i8, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8))).f32[0]);
    v33 = (int32x4_t)vmulq_f32(v8, v8);
    v33.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v33, 2), vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1))).u32[0];
    *(float32x2_t *)v30.i8 = vrsqrte_f32((float32x2_t)v33.u32[0]);
    *(float32x2_t *)v30.i8 = vmul_f32(*(float32x2_t *)v30.i8, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8)));
    v33.i32[0] = vmul_f32(*(float32x2_t *)v30.i8, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(*(float32x2_t *)v30.i8, *(float32x2_t *)v30.i8))).u32[0];
    v34 = (int32x4_t)vmulq_f32(v9, v9);
    v35 = (int32x4_t)vmulq_n_f32(v8, *(float *)v33.i32);
    v33.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    *(float32x2_t *)v34.i8 = vrsqrte_f32((float32x2_t)v33.u32[0]);
    *(float32x2_t *)v34.i8 = vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)));
    v36 = (int8x16_t)vmulq_n_f32(v9, vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8))).f32[0]);
    v37 = (int32x4_t)vmulq_f32(v12, v12);
    v37.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), vadd_f32(*(float32x2_t *)v37.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1))).u32[0];
    *(float32x2_t *)v34.i8 = vrsqrte_f32((float32x2_t)v37.u32[0]);
    *(float32x2_t *)v34.i8 = vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)));
    v38 = (int8x16_t)vmulq_n_f32(v12, vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8))).f32[0]);
    v39 = (int32x4_t)vmulq_f32(v13, v13);
    v39.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2), vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1))).u32[0];
    *(float32x2_t *)v34.i8 = vrsqrte_f32((float32x2_t)v39.u32[0]);
    *(float32x2_t *)v34.i8 = vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)));
    v40 = (int8x16_t)vmulq_n_f32(v13, vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8))).f32[0]);
    v41 = (int32x4_t)vmulq_f32(v14, v14);
    v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1))).u32[0];
    *(float32x2_t *)v34.i8 = vrsqrte_f32((float32x2_t)v41.u32[0]);
    *(float32x2_t *)v34.i8 = vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8)));
    v41.i32[0] = vmul_f32(*(float32x2_t *)v34.i8, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(*(float32x2_t *)v34.i8, *(float32x2_t *)v34.i8))).u32[0];
    v42 = (int32x4_t)vmulq_f32(v15, v15);
    v42.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2), vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1))).u32[0];
    v43 = (int32x4_t)vmulq_n_f32(v14, *(float *)v41.i32);
    *(float32x2_t *)v41.i8 = vrsqrte_f32((float32x2_t)v42.u32[0]);
    *(float32x2_t *)v41.i8 = vmul_f32(*(float32x2_t *)v41.i8, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8)));
    v44 = (int8x16_t)vmulq_n_f32(v15, vmul_f32(*(float32x2_t *)v41.i8, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(*(float32x2_t *)v41.i8, *(float32x2_t *)v41.i8))).f32[0]);
    v45 = (int32x4_t)vmulq_f32(v11, v11);
    v45.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1))).u32[0];
    *(float32x2_t *)v42.i8 = vrsqrte_f32((float32x2_t)v45.u32[0]);
    *(float32x2_t *)v42.i8 = vmul_f32(*(float32x2_t *)v42.i8, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8)));
    v51 = xmmword_1B2244DE0;
    v52 = xmmword_1B22459B0;
    *(_OWORD *)v53 = xmmword_1B2244DF0;
    *(_QWORD *)&v53[16] = 0xBF80000000000000;
    v26.i32[3] = v31.i32[0];
    v46 = vextq_s8(v31, v31, 0xCuLL);
    v31.i32[3] = v32.i32[0];
    *(_DWORD *)&v53[24] = 0;
    *(int8x16_t *)&v53[28] = v31;
    *(int8x16_t *)&v53[44] = vextq_s8(vextq_s8(v32, v32, 0xCuLL), (int8x16_t)v35, 8uLL);
    *(int8x16_t *)&v53[60] = vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), v36, 0xCuLL);
    v47 = vmulq_n_f32(v11, vmul_f32(*(float32x2_t *)v42.i8, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v42.i8))).f32[0]);
    *(float32x4_t *)&v53[76] = v26;
    *(int8x16_t *)&v53[92] = vextq_s8(v46, (int8x16_t)v43, 8uLL);
    *(int8x16_t *)&v53[108] = vextq_s8((int8x16_t)vuzp1q_s32(v43, v43), v44, 0xCuLL);
    v47.i32[3] = v38.i32[0];
    *(float32x4_t *)&v53[124] = v47;
    *(int8x16_t *)&v53[140] = vextq_s8(vextq_s8(v38, v38, 0xCuLL), v40, 8uLL);
    *(_DWORD *)&v53[156] = v40.i32[2];
    v54 = xmmword_1B2244DD0;
    v55 = xmmword_1B2244E40;
    *(_OWORD *)v56 = xmmword_1B2244D90;
    *(_QWORD *)&v56[16] = 0x3F80000000000000;
    v57 = 0;
    v16 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v51, 252);
    v20 = v16;
    v21 = 1;
LABEL_7:
    v22 = 3;
    goto LABEL_8;
  }
  if (a1 != 3)
    return sub_1B17EE378(0);
  v51 = xmmword_1B2245910;
  v52 = xmmword_1B2245920;
  *(_OWORD *)v53 = xmmword_1B2245930;
  *(_OWORD *)&v53[16] = xmmword_1B2245940;
  *(_OWORD *)&v53[32] = xmmword_1B2245950;
  *(_OWORD *)&v53[48] = xmmword_1B2245960;
  *(_OWORD *)&v53[64] = xmmword_1B2245970;
  *(_OWORD *)&v53[80] = xmmword_1B2245980;
  *(_OWORD *)&v53[96] = xmmword_1B2245990;
  *(_OWORD *)&v53[112] = xmmword_1B22459A0;
  *(_QWORD *)&v53[128] = 1061997773;
  v16 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)&v51, 168);
  v20 = v16;
  v21 = 3;
  v22 = 2;
LABEL_8:
  v48 = (const void *)sub_1B17ED204(v16, v21, 21, v22, 1, v17, v18, v19);
  CFRelease(v20);
  v49 = sub_1B17EE378((uint64_t)v48);
  if (v48)
    CFRelease(v48);
  return v49;
}

uint64_t sub_1B17C5490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  float32x4_t v20;
  int32x4_t v21;
  float32x2_t v22;
  float32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float v37;
  unint64_t v38;
  float32x4_t v39;

  result = sub_1B17EDAE0(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result >= 1)
  {
    v18 = result;
    for (i = 0; i != v18; ++i)
    {
      v39.i32[2] = 0;
      v39.i64[0] = 0;
      *(double *)v20.i64 = sub_1B17EE400(a1, i, v12, v13, v14, v15, v16, v17);
      v21 = (int32x4_t)vmulq_f32(v20, v20);
      v21.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2), vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
      v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
      v23 = vmul_f32(v22, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)));
      v39 = vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
      sub_1B1846EC0(a2, (uint64_t)&v39, 1, v24, v25, v26, v27, v28);
      v36 = v39.f32[1];
      v29 = asinf(v39.f32[0]) / 3.14159265 + 0.5;
      v37 = v29;
      *(float *)&v30 = 1.0 - (asinf(v36) / 3.14159265 + 0.5);
      v38 = __PAIR64__(v30, LODWORD(v37));
      result = sub_1B1847030(a3, (uint64_t)&v38, 1, v31, v32, v33, v34, v35);
    }
  }
  return result;
}

uint64_t sub_1B17C55C8(int a1, uint64_t a2, float a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const __CFAllocator *v12;
  int v13;
  const CFArrayCallBacks *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CFArrayRef v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *values;

  v5 = (const void *)sub_1B17C4BE8(0, a3);
  v6 = 6;
  if (a2 > 6)
    v6 = a2;
  v11 = vcvtpd_s64_f64(log((double)(v6 - 5)) / 1.09861229);
  if (v11 < 1)
  {
    v27 = v5;
  }
  else
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = v11 + 1;
    v14 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      v15 = sub_1B1875540((uint64_t)v5, 0, 0, 0, v7, v8, v9, v10);
      v20 = sub_1B1875540((uint64_t)v5, 1, 0, 0, v16, v17, v18, v19);
      values = 0;
      v26 = sub_1B1874C3C((uint64_t)v5, 0, 0, v21, v22, v23, v24, v25);
      values = (void *)sub_1B17AFD64((uint64_t)v5, 0, v26, (uint64_t)v15, (uint64_t)v20, 0, 1);
      v27 = (const void *)-[VFXMesh __createCFObject]_0();
      sub_1B1874ECC((uint64_t)v27, v15, 0, 0, v28, v29, v30, v31);
      sub_1B1874ECC((uint64_t)v27, v20, 0, 0, v32, v33, v34, v35);
      v36 = CFArrayCreate(v12, (const void **)&values, 1, v14);
      sub_1B18762F4((uint64_t)v27, v36, v37, v38, v39, v40, v41, v42);
      if (values)
      {
        CFRelease(values);
        values = 0;
      }
      CFRelease(v36);
      if (v5)
        CFRelease(v5);
      --v13;
      v5 = v27;
    }
    while (v13 > 1);
  }
  v43 = (const void *)sub_1B1846AB8(0, 1, 0, 3, 1, v8, v9, v10);
  v47 = (const void *)sub_1B1846AB8(0, 3, 0, 2, 1, v44, v45, v46);
  v52 = sub_1B1875540((uint64_t)v27, 0, 0, 0, v48, v49, v50, v51);
  sub_1B17C5490((uint64_t)v52, (uint64_t)v43, (uint64_t)v47, v53, v54, v55, v56, v57);
  v62 = sub_1B1875540((uint64_t)v27, 1, 0, 0, v58, v59, v60, v61);
  sub_1B18757DC((uint64_t)v27, v62, v63, v64, v65, v66, v67, v68);
  sub_1B1874ECC((uint64_t)v27, v43, 0, 0, v69, v70, v71, v72);
  sub_1B1874ECC((uint64_t)v27, v47, 0, 0, v73, v74, v75, v76);
  if (v43)
    CFRelease(v43);
  if (v47)
    CFRelease(v47);
  sub_1B18763EC((uint64_t)v27, a1, v77, v78, v79, v80, v81, v82);
  v90 = sub_1B18743C0((uint64_t)v27, v83, v84, v85, v86, v87, v88, v89);
  if (v27)
    CFRelease(v27);
  return v90;
}

void *sub_1B17C5830(CFTypeRef cf, const void *a2, void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v15)(CFTypeRef, const void *, void *, size_t, uint64_t, uint64_t);

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  CFGetTypeID(cf);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696
    && (v15 = (uint64_t (*)(CFTypeRef, const void *, void *, size_t, uint64_t, uint64_t))ClassWithTypeID[13]) != 0)
  {
    return (void *)v15(cf, a2, a3, a4, a5, a6);
  }
  else
  {
    return memcpy(a3, a2, a4);
  }
}

void *sub_1B17C58FC(CFTypeRef cf, void *a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v15)(CFTypeRef, void *, const void *, size_t, uint64_t, uint64_t);

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  CFGetTypeID(cf);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696
    && (v15 = (uint64_t (*)(CFTypeRef, void *, const void *, size_t, uint64_t, uint64_t))ClassWithTypeID[12]) != 0)
  {
    return (void *)v15(cf, a2, a3, a4, a5, a6);
  }
  else
  {
    return memcpy(a2, a3, a4);
  }
}

void *(*sub_1B17C59C8(const void *a1))(int a1, const void *a2, void *__dst, size_t __n)
{
  _QWORD *ClassWithTypeID;
  void *(*result)(int, const void *, void *, size_t);

  CFGetTypeID(a1);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID != 749405696)
    return sub_1B17C5A04;
  result = (void *(*)(int, const void *, void *, size_t))ClassWithTypeID[13];
  if (!result)
    return sub_1B17C5A04;
  return result;
}

void *sub_1B17C5A04(int a1, const void *a2, void *__dst, size_t __n)
{
  return memcpy(__dst, a2, __n);
}

void *(*sub_1B17C5A10(const void *a1))(int a1, void *__dst, void *__src, size_t __n)
{
  _QWORD *ClassWithTypeID;
  void *(*result)(int, void *, void *, size_t);

  CFGetTypeID(a1);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID != 749405696)
    return sub_1B17C5A4C;
  result = (void *(*)(int, void *, void *, size_t))ClassWithTypeID[12];
  if (!result)
    return sub_1B17C5A4C;
  return result;
}

void *sub_1B17C5A4C(int a1, void *__dst, void *__src, size_t __n)
{
  return memcpy(__dst, __src, __n);
}

uint64_t sub_1B17C5A5C(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *ClassWithTypeID;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(CFTypeRef);

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  CFGetTypeID(cf);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696)
  {
    v16 = (uint64_t (*)(CFTypeRef))ClassWithTypeID[23];
    if (v16)
      return v16(cf);
  }
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: object %@ doesn't conform to the copying protocol"), v10, v11, v12, v13, v14, v15, (uint64_t)cf);
  return 0;
}

_QWORD *sub_1B17C5AF4(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  uint64_t (*v11)(CFTypeRef, uint64_t);

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  CFGetTypeID(cf);
  result = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*result == 749405696)
  {
    v11 = (uint64_t (*)(CFTypeRef, uint64_t))result[24];
    if (v11)
      return (_QWORD *)v11(cf, a2);
  }
  return result;
}

uint64_t sub_1B17C5B7C(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v10)(CFTypeRef);

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  CFGetTypeID(cf);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696 && (v10 = (uint64_t (*)(CFTypeRef))ClassWithTypeID[25]) != 0)
    return v10(cf);
  else
    return 0;
}

_QWORD *sub_1B17C5C00(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  uint64_t (*v11)(CFTypeRef, uint64_t);

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  CFGetTypeID(cf);
  result = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*result == 749405696)
  {
    v11 = (uint64_t (*)(CFTypeRef, uint64_t))result[26];
    if (v11)
      return (_QWORD *)v11(cf, a2);
  }
  return result;
}

uint64_t sub_1B17C5C88(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v13)(CFTypeRef, uint64_t, uint64_t, uint64_t);

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  CFGetTypeID(cf);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696
    && (v13 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t, uint64_t))ClassWithTypeID[15]) != 0)
  {
    return v13(cf, a2, a3, a4);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B17C5D30(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v12)(CFTypeRef, uint64_t, uint64_t);

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  CFGetTypeID(cf);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  if (*ClassWithTypeID == 749405696
    && (v12 = (uint64_t (*)(CFTypeRef, uint64_t, uint64_t))ClassWithTypeID[16]) != 0)
  {
    return v12(cf, a2, a3);
  }
  else
  {
    return 0;
  }
}

void sub_1B17C5DD0(void *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *ClassWithTypeID;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void *, uint64_t);
  void (*v23)(void *, uint64_t);
  void (*v24)(void *, _QWORD *);
  _QWORD v25[5];

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  if (a2)
  {
    if (qword_1EEF65638 != -1)
      dispatch_once(&qword_1EEF65638, &unk_1E63D0A10);
    v10 = qword_1EEF65630;
    CFGetTypeID(cf);
    ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
    v18 = *ClassWithTypeID;
    if (*ClassWithTypeID == 749405696)
      v19 = ClassWithTypeID;
    else
      v19 = 0;
    if (*((_QWORD *)cf + 6) == a2)
    {
      v20 = *((_QWORD *)cf + 7);
      if (v20)
      {
        v21 = v20 - 1;
        *((_QWORD *)cf + 7) = v21;
        if (!v21)
        {
          if (v18 == 749405696)
          {
            v22 = (void (*)(void *, uint64_t))v19[19];
            if (v22)
              v22(cf, a2);
          }
          v23 = *(void (**)(void *, uint64_t))(v10 + 16);
          if (v23)
            v23(cf, a2);
          if (v18 == 749405696)
          {
            v24 = (void (*)(void *, _QWORD *))v19[17];
            if (v24)
            {
              v25[0] = MEMORY[0x1E0C809B0];
              v25[1] = 3221225472;
              v25[2] = sub_1B17C5F68;
              v25[3] = &unk_1E63D5550;
              v25[4] = a2;
              v24(cf, v25);
            }
          }
          sub_1B17C5F78(cf, a2, v12, v13, v14, v15, v16, v17);
          *((_QWORD *)cf + 6) = 0;
        }
      }
      else if ((byte_1EEF65628 & 1) == 0)
      {
        byte_1EEF65628 = 1;
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: invalid ref count for entity %@"), v12, v13, v14, v15, v16, v17, (uint64_t)cf);
      }
    }
  }
}

uint64_t sub_1B17C5F68(int a1, CFTypeRef cf)
{
  return sub_1B17C5DD0(cf);
}

void sub_1B17C5F78(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = sub_1B187A97C(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    v16 = v9;
    sub_1B17F37B4(v9, a1, v10, v11, v12, v13, v14, v15);
    sub_1B17F4804(v16, (uint64_t)a1);
  }
}

void sub_1B17C5FC0(uint64_t *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  _QWORD *ClassWithTypeID;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void (*v21)(uint64_t *, uint64_t);
  void (*v22)(uint64_t *, uint64_t);
  void (*v23)(uint64_t *, uint64_t);
  void (*v24)(uint64_t *, uint64_t);
  void (*v25)(uint64_t *, _QWORD *);
  void (*v26)(uint64_t *, uint64_t);
  void (*v27)(uint64_t *, uint64_t);
  void (*v28)(uint64_t *, uint64_t);
  void (*v29)(uint64_t *, uint64_t);
  _QWORD v30[5];

  if (cf)
  {
    if (!a2)
      return;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
    if (!a2)
      return;
  }
  if (qword_1EEF65638 != -1)
    dispatch_once(&qword_1EEF65638, &unk_1E63D0A10);
  v10 = (_QWORD *)qword_1EEF65630;
  CFGetTypeID(cf);
  ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID();
  v18 = *ClassWithTypeID;
  if (*ClassWithTypeID == 749405696)
    v19 = ClassWithTypeID;
  else
    v19 = 0;
  v20 = cf[6];
  if (!v20 || v20 == a2)
  {
    ++cf[7];
    if (v20)
      return;
  }
  else
  {
    if (v18 == 749405696)
    {
      v21 = (void (*)(uint64_t *, uint64_t))v19[19];
      if (v21)
        v21(cf, cf[6]);
    }
    v22 = (void (*)(uint64_t *, uint64_t))v10[2];
    if (v22)
      v22(cf, v20);
    sub_1B17C5F78(cf, v20, v12, v13, v14, v15, v16, v17);
    cf[7] = 1;
  }
  cf[6] = a2;
  v23 = (void (*)(uint64_t *, uint64_t))v10[1];
  if (v23)
    v23(cf, a2);
  if (v18 == 749405696)
  {
    v24 = (void (*)(uint64_t *, uint64_t))v19[18];
    if (v24)
      v24(cf, a2);
    v25 = (void (*)(uint64_t *, _QWORD *))v19[17];
    if (v25)
    {
      v30[0] = MEMORY[0x1E0C809B0];
      v30[1] = 3221225472;
      v30[2] = sub_1B17C61EC;
      v30[3] = &unk_1E63D5550;
      v30[4] = a2;
      v25(cf, v30);
    }
  }
  if (v20)
  {
    v26 = (void (*)(uint64_t *, uint64_t))v10[4];
    if (v26)
      v26(cf, v20);
    if (v18 == 749405696)
    {
      v27 = (void (*)(uint64_t *, uint64_t))v19[21];
      if (v27)
        v27(cf, v20);
    }
  }
  v28 = (void (*)(uint64_t *, uint64_t))v10[3];
  if (v28)
    v28(cf, a2);
  if (v18 == 749405696)
  {
    v29 = (void (*)(uint64_t *, uint64_t))v19[20];
    if (v29)
      v29(cf, a2);
  }
}

uint64_t sub_1B17C61EC(int a1, CFTypeRef cf)
{
  return sub_1B17C5FC0(cf);
}

uint64_t sub_1B17C61FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_1B17C6244(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"object");
  if ((sub_1B193EBA0(a1) & 1) == 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Must call GetWorld with an entity"), v9, v10, v11, v12, v13, v14, (uint64_t)"CFTypeIsCFXEntity(object)");
  return a1[6];
}

uint64_t sub_1B17C62B4(const void *a1, uint64_t a2)
{
  _QWORD *ClassWithTypeID;
  uint64_t (*v5)(const void *, uint64_t);

  if (a1
    && (CFGetTypeID(a1), ClassWithTypeID = (_QWORD *)_CFRuntimeGetClassWithTypeID(), *ClassWithTypeID == 749405696)
    && (v5 = (uint64_t (*)(const void *, uint64_t))ClassWithTypeID[22]) != 0)
  {
    return v5(a1, a2);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B17C6314()
{
  uint64_t result;

  sub_1B193E4C8();
  result = _CFRuntimeGetClassWithTypeID();
  qword_1EEF65630 = result + 136;
  return result;
}

_QWORD *sub_1B17C6338(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_1B21AB51C(a1, "Jittering");
  *result = off_1E63D07E8;
  result[3] = a2;
  result[4] = 0;
  return result;
}

uint64_t sub_1B17C6370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v4, *(_WORD *)(a1 + 8), 9273, 1656467160);
  return sub_1B17A371C(a2, v4, 1);
}

uint64_t sub_1B17C63E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v3, 6893, 9273, 1656467160);
  return sub_1B17A371C(a1, v3, 1);
}

unint64_t sub_1B17C6460(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(unsigned __int16 *)(a1 + 8);
  v5 = *a3;
  if ((_DWORD)v5)
  {
    v6 = (uint64_t *)*((_QWORD *)a3 + 1);
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      v13 = v8;
      v9 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v13);
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v4 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v4)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v4)))) >> 47));
      v7 -= 8;
    }
    while (v7);
  }
  v10 = sub_1B1815DA8(*(_QWORD *)(a1 + 24));
  v11 = *(_QWORD *)(a1 + 32);
  if ((v10 & 1) != 0)
    *(_QWORD *)(a1 + 32) = ++v11;
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69
         * (v4 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v4)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v4)))) >> 47));
}

void sub_1B17C6520(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFX::RG::Resource *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CFX::RG::Resource *v15;
  _OWORD *v16;
  const char *v17;
  uint64_t v18;
  CFX::CrossFrameResourceManager *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  unsigned __int8 *v24;
  __int16 v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  __int16 v31;
  uint64_t v32;
  CFX::RG::Resource *v33;
  _OWORD v34[10];
  uint64_t v35;
  _BYTE v36[160];

  if (sub_1B1815DA8(*(_QWORD *)(a1 + 24)))
  {
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v35, 9273, 9273, 1656467160);
    CFX::RG::ResourceReference::ResourceReference((uint64_t)v36, v35);
    v6 = sub_1B17C1128((uint64_t)a3, (uint64_t)"Jittering input color", (CFX::RG::ResourceReference *)v36);
    v7 = (_OWORD *)CFX::RG::Resource::constTextureDesc(v6);
    v8 = v7[1];
    v34[0] = *v7;
    v34[1] = v8;
    v9 = v7[5];
    v11 = v7[2];
    v10 = v7[3];
    v34[4] = v7[4];
    v34[5] = v9;
    v34[2] = v11;
    v34[3] = v10;
    v12 = v7[9];
    v14 = v7[6];
    v13 = v7[7];
    v34[8] = v7[8];
    v34[9] = v12;
    v34[6] = v14;
    v34[7] = v13;
    v15 = sub_1B17A34D0(a3, (uint64_t)"Jittering output color", v34);
    v16 = (_OWORD *)CFX::RG::Resource::constTextureDesc(v6);
    CFX::RG::TextureDescriptorReference::withSampleCount(v16, 1, (uint64_t)v30);
    v18 = CFX::RG::copyIfNeeded((CFX::RG *)a3, v6, 0, (CFX::RG::Pass *)v30, (const CFX::RG::TextureDescriptorReference *)"Jittering color input resolve", v17);
    v19 = *(CFX::CrossFrameResourceManager **)(a2 + 32);
    v20 = *(_QWORD *)(a1 + 24);
    v30[0] = "Jittering";
    v30[1] = v20;
    v31 = 0;
    v32 = v18;
    v33 = v15;
    v21 = sub_1B181BF34(a3, v19, (uint64_t)v30);
    if (sub_1B1815DD4(*(_QWORD *)(a1 + 24)))
    {
      v22 = *(_BYTE **)(v21 + 24);
      v23 = *v22;
      if (*v22)
      {
        v24 = v22 + 1;
        v25 = -25147;
        do
        {
          v25 = 403 * (v25 ^ v23);
          v26 = *v24++;
          v23 = v26;
        }
        while (v26);
      }
      else
      {
        v25 = -25147;
      }
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v29, *(_WORD *)(a1 + 8), v25, 1656467160);
      CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v29, (unint64_t)v15, v21);
    }
  }
  else
  {
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v28, 9273, 9273, 1656467160);
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v27, *(_WORD *)(a1 + 8), 64484, 1656467160);
    CFX::RG::RenderGraphBuilder::aliasResourceReference((uint64_t)a3, v28, v27);
  }
}

uint64_t sub_1B17C69B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  objc_msgSend_setTessellationPartitionMode_(a2, (const char *)a2, *(_BYTE *)(a1 + 40) & 3, a4);
  objc_msgSend_setTessellationFactorStepFunction_(a2, v6, ((unint64_t)*(unsigned __int8 *)(a1 + 40) >> 2) & 3, v7);
  objc_msgSend_setTessellationControlPointIndexType_(a2, v8, ((unint64_t)*(unsigned __int8 *)(a1 + 40) >> 4) & 3, v9);
  objc_msgSend_setTessellationFactorScaleEnabled_(a2, v10, (*(unsigned __int8 *)(a1 + 40) >> 6) & 1, v11);
  objc_msgSend_setTessellationFactorFormat_(a2, v12, 0, v13);
  objc_msgSend_setTessellationOutputWindingOrder_(a2, v14, 1, v15);
  v19 = objc_msgSend_maxTessellationFactor(*(void **)(a1 + 32), v16, v17, v18);
  return MEMORY[0x1E0DE7D20](a2, sel_setMaxTessellationFactor_, v19, v20);
}

uint64_t sub_1B17C7A44(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B17C7A70()
{
  uint64_t v0;

  if (qword_1ED4D0678[0] != -1)
    dispatch_once_f(qword_1ED4D0678, &qword_1ED4CF728, (dispatch_function_t)sub_1B17C7A44);
  v0 = sub_1B179CB90(qword_1ED4CF728, 0x30uLL);
  sub_1B17C8454(v0 + 16, 32);
  *(_QWORD *)(v0 + 48) = sub_1B19D13DC(0x7FFFFFFFLL);
  return v0;
}

void sub_1B17C7AE8(uint64_t a1, unsigned int a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(a1 + 56) < a2)
  {
    v4 = *(_DWORD *)(a1 + 44);
    if (v4 != -15)
    {
      v5 = 0;
      do
      {
        if ((*(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v5) & 1) != 0)
        {
          v6 = *(_QWORD *)(a1 + 24);
          sub_1B19D4F5C(*(_DWORD **)(v6 + 8 * v5), a2);
          v14 = sub_1B19D4ED4(*(_QWORD *)(v6 + 8 * v5), v7, v8, v9, v10, v11, v12, v13);
          bzero((void *)(v14 + 8 * *(unsigned int *)(a1 + 56)), 8 * (a2 - *(_DWORD *)(a1 + 56)));
          v4 = *(_DWORD *)(a1 + 44);
        }
        ++v5;
      }
      while (v5 < (v4 + 15));
    }
    *(_DWORD *)(a1 + 56) = a2;
  }
}

void sub_1B17C7B88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1 + 16;
  sub_1B17C7BCC(a1 + 16, (uint64_t)&unk_1E63D0A30);
  sub_1B17C7C5C(v2);
  sub_1B19D1718(*(_QWORD *)(a1 + 48), v3, v4, v5, v6, v7, v8, v9);
  *(_DWORD *)(a1 + 56) = 0;
}

uint64_t sub_1B17C7BCC(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_DWORD *)(result + 28);
  if (v2 != -15)
  {
    v4 = result;
    v5 = 0;
    v6 = 0;
    do
    {
      if ((*(_WORD *)(*(_QWORD *)(v4 + 16) + 2 * v6) & 1) != 0)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)v4 + 8 * v6), *(_QWORD *)(v4 + 8) + v5);
        v2 = *(_DWORD *)(v4 + 28);
      }
      ++v6;
      v5 += 8;
    }
    while (v6 < (v2 + 15));
  }
  return result;
}

void sub_1B17C7C44(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19D5054(*a3, (uint64_t)&unk_1E63D1950, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void sub_1B17C7C54(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1B195809C(*a3);
}

void sub_1B17C7C5C(uint64_t a1)
{
  sub_1B17C8404(*(CFTypeRef **)(a1 + 8), *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 28) + 15);
  memset(*(void **)a1, 255, 8 * (*(_DWORD *)(a1 + 28) + 15));
  bzero(*(void **)(a1 + 16), 2 * (*(_DWORD *)(a1 + 28) + 15));
  *(_DWORD *)(a1 + 24) = 0;
}

void sub_1B17C7CBC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  __int16 v5;
  int v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  uint64_t *v19;

  v2 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    v4 = 0;
    v5 = WORD1(a2);
    v6 = (unsigned __int16)a2;
    do
    {
      v7 = sub_1B19CEB9C(v6, (unsigned __int16)(v4 + v5));
      if (*(_DWORD *)(a1 + 44) != -15)
      {
        v15 = 0;
        v16 = v7;
        do
        {
          if ((*(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v15) & 1) != 0)
          {
            v17 = *(_QWORD *)(a1 + 24);
            if (sub_1B19D4DAC(*(_QWORD *)(v17 + 8 * v15), (uint64_t)v8, v9, v10, v11, v12, v13, v14) > v16)
            {
              v18 = (void **)sub_1B19D4E3C(*(_QWORD *)(v17 + 8 * v15), v16, v9, v10, v11, v12, v13, v14);
              v8 = *v18;
              if (*v18)
              {
                v19 = (uint64_t *)v18;
                sub_1B19D1600(*(_QWORD *)(a1 + 48), v8, v9, v10, v11, v12, v13, v14);
                sub_1B195809C(*v19);
                *v19 = 0;
              }
            }
          }
          ++v15;
        }
        while (v15 < (*(_DWORD *)(a1 + 44) + 15));
      }
      ++v4;
    }
    while (v4 != (_DWORD)v2);
  }
}

uint64_t sub_1B17C7D94(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (sub_1B17C2B78((uint64_t)a2))
    return 0;
  if (!a3
    || !sub_1B19AEE64(a3, v8, v9, v10, v11, v12, v13, v14)
    || (result = (uint64_t)sub_1B19AEEB4(0, a3, a2, v10, v11, v12, v13, v14)) == 0)
  {
    result = sub_1B17C2DF4((uint64_t)a2, a3, v9, v10, v11, v12, v13, v14);
    if (result)
    {
      if (!sub_1B18786DC(result, v16, v17, v18, v19, v20, v21, v22))
      {
        v30 = (*(_DWORD *)(a1 + 44) - 1) & a4;
        v31 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v30);
        if (v31 >= 2)
        {
          v32 = *(unsigned int *)a2;
          while ((v31 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v30) != a4)
          {
            ++v30;
            v33 = v31 >= 4;
            v31 >>= 1;
            if (!v33)
              return 0;
          }
          v34 = *(_QWORD *)(a1 + 24);
          if (v34)
          {
            v35 = v30;
            v36 = *(_QWORD *)(v34 + 8 * v30);
            if (!v36)
            {
              sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v24, v25, v26, v27, v28, v29, (uint64_t)"_ptr != NULL");
              v36 = *(_QWORD *)(v34 + 8 * v35);
            }
            if (sub_1B19D4DAC(v36, v23, v24, v25, v26, v27, v28, v29) > v32)
              return *(_QWORD *)sub_1B19D4E3C(*(_QWORD *)(v34 + 8 * v35), v32, v37, v38, v39, v40, v41, v42);
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B17C7EB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2)
    return sub_1B19D1484(*(_QWORD *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  else
    return 0;
}

void sub_1B17C7EC8(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  _QWORD *v13;

  if (*(_DWORD *)(a1 + 44) != -15)
  {
    v9 = 0;
    v10 = *a2;
    do
    {
      if ((*(_WORD *)(*(_QWORD *)(a1 + 32) + 2 * v9) & 1) != 0)
      {
        v11 = *(_QWORD *)(a1 + 24);
        if (sub_1B19D4DAC(*(_QWORD *)(v11 + 8 * v9), (uint64_t)a2, a3, a4, a5, a6, a7, a8) > v10)
        {
          v12 = (unsigned int **)sub_1B19D4E3C(*(_QWORD *)(v11 + 8 * v9), v10, a3, a4, a5, a6, a7, a8);
          a2 = *v12;
          if (*v12)
          {
            v13 = v12;
            sub_1B19D1600(*(_QWORD *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
            *v13 = 0;
          }
        }
      }
      ++v9;
    }
    while (v9 < (*(_DWORD *)(a1 + 44) + 15));
  }
}

void sub_1B17C7F58(uint64_t a1, unsigned int *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CFTypeRef cf;

  v11 = *a2;
  v12 = (_QWORD *)(a1 + 16);
  v13 = (*(_DWORD *)(a1 + 44) - 1) & a4;
  v14 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2 * v13);
  if (v14 < 2)
    goto LABEL_5;
  while ((v14 & 2) == 0 || *(_QWORD *)(*v12 + 8 * v13) != a4)
  {
    ++v13;
    v15 = v14 >= 4;
    v14 >>= 1;
    if (!v15)
      goto LABEL_5;
  }
  v33 = *(_QWORD *)(a1 + 24);
  if (!v33 || (v16 = *(_DWORD **)(v33 + 8 * v13)) == 0)
  {
LABEL_5:
    v16 = (_DWORD *)sub_1B19D4D18(8, *(_DWORD *)(a1 + 56));
    cf = v16;
    sub_1B17C80D4((uint64_t)v12, a4, &cf);
    if (cf)
      CFRelease(cf);
    sub_1B19D4F5C(v16, *(_DWORD *)(a1 + 56));
    v24 = (void *)sub_1B19D4ED4((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
    bzero(v24, 8 * *(unsigned int *)(a1 + 56));
  }
  if (v11 >= *(_DWORD *)(a1 + 56))
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXProgramHashCodeStoreRegisterProgramForRendererElement - index out of capacity (%d > %d)"), (uint64_t)a3, a4, a5, a6, a7, a8, v11);
  }
  else
  {
    v25 = (uint64_t *)sub_1B19D4E3C((uint64_t)v16, v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((const void *)*v25 != a3)
    {
      sub_1B195809C(*v25);
      if (a3)
        v32 = (void *)CFRetain(a3);
      else
        v32 = 0;
      *v25 = (uint64_t)v32;
      if (sub_1B19D14E8(*(_QWORD *)(a1 + 48), v32, v26, v27, v28, v29, v30, v31) >= 0xFFFFFFFFLL)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXProgramHashCodeStoreRegisterProgramForRendererElement - programIndex out of uint32_t. will crash soon"), v34, v35, v36, v37, v38, v39, (uint64_t)"programIndex < 0xffffffff");
    }
  }
}

uint64_t sub_1B17C80D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 28);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      v17 = *(_WORD *)(v8 + 2 * v15) | 1;
      *(_WORD *)(v8 + 2 * v15) = v17;
      if (v15 <= (int)v7 + 14)
      {
        v33 = v15;
        v28 = *(_QWORD *)a1;
        v29 = *(_QWORD *)(a1 + 8);
        LOBYTE(v22) = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v18 = v15 - 14;
          else
            v18 = 0;
          v19 = v18 - 1;
          if (v18 <= v15)
            v20 = v15;
          else
            v20 = v18;
          v21 = 1;
          while (1)
          {
            v22 = v19 + 1;
            if (v18 <= v22)
              break;
LABEL_27:
            ++v21;
            v19 = v22;
            if ((_DWORD)v22 == v20)
              goto LABEL_32;
          }
          v23 = 1 << (v19 - v18 + 2);
          v24 = v21;
          v25 = v18;
          while (1)
          {
            v26 = v25;
            v27 = *(unsigned __int16 *)(v8 + 2 * v25);
            if ((v23 & v27) != 0)
              break;
            v25 = v26 + 1;
            v23 = (unsigned __int16)v23 >> 1;
            --v24;
            if ((int)v26 + 1 > v22)
              goto LABEL_27;
          }
          if (v22 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v28 = *(_QWORD *)a1;
          v29 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v22);
          *(_QWORD *)(v29 + 8 * v15) = *(_QWORD *)(v29 + 8 * v22);
          *(_QWORD *)(v29 + 8 * v22) = 0;
          *(_WORD *)(v8 + 2 * v26) = (v27 | (1 << (v15 - v26 + 1))) ^ (1 << v24);
          v15 = v22;
          if (v22 > (int)v7 + 14)
            continue;
          break;
        }
        v17 = *(_WORD *)(v8 + 2 * v22) | 1;
        v33 = v22;
      }
      *(_QWORD *)(v29 + 8 * v33) = *a3;
      *a3 = 0;
      *(_QWORD *)(v28 + 8 * v33) = a2;
      *(_WORD *)(v8 + 2 * v33) = v17;
      result = 1;
      *(_WORD *)(v8 + 2 * v7) |= 1 << (v22 - v7 + 1);
      ++*(_DWORD *)(a1 + 24);
      return result;
    }
LABEL_33:
    sub_1B17C851C(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  v30 = *(_QWORD *)(a1 + 8);
  v31 = *a3;
  *a3 = 0;
  result = *(_QWORD *)(v30 + 8 * v10);
  *(_QWORD *)(v30 + 8 * v10) = v31;
  if (result)
  {
    CFRelease((CFTypeRef)result);
    return 0;
  }
  return result;
}

void sub_1B17C8304(uint64_t a1)
{
  const void *v2;

  sub_1B17C7B88(a1);
  sub_1B17C83B4(a1 + 16);
  v2 = *(const void **)(a1 + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
  }
}

CFStringRef sub_1B17C833C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXProgramHashCodeStore %p>"), a1);
}

CFStringRef sub_1B17C8378(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXProgramHashCodeStore %p>"), a1);
}

uint64_t sub_1B17C83B4(uint64_t a1)
{
  CFTypeRef *v2;

  v2 = *(CFTypeRef **)(a1 + 8);
  if (v2)
  {
    sub_1B17C8404(v2, *(__int16 **)(a1 + 16), *(_DWORD *)(a1 + 28) + 15);
    free(*(void **)(a1 + 8));
  }
  free(*(void **)a1);
  free(*(void **)(a1 + 16));
  return a1;
}

void sub_1B17C8404(CFTypeRef *a1, __int16 *a2, unsigned int a3)
{
  uint64_t v5;
  __int16 v6;

  if (a3)
  {
    v5 = a3;
    do
    {
      v6 = *a2++;
      if ((v6 & 1) != 0)
      {
        if (*a1)
          CFRelease(*a1);
      }
      ++a1;
      --v5;
    }
    while (v5);
  }
}

void sub_1B17C8454(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;
  void *v5;
  size_t v6;
  void *v7;
  void *v8;

  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  v5 = malloc_type_malloc((2 * (a2 + 15)), 0xD5346062uLL);
  memset(v5, 255, v4 & 0xFFFFFFFE);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = 8 * v3;
  v7 = malloc_type_malloc(8 * v3, 0xD5346062uLL);
  memset(v7, 255, v6 & 0xFFFFFFF8);
  *(_QWORD *)a1 = v7;
  v8 = malloc_type_malloc(v6 & 0xFFFFFFF8, 0xD5346062uLL);
  memset(v8, 255, v6 & 0xFFFFFFF8);
  *(_QWORD *)(a1 + 8) = v8;
  memset(*(void **)a1, 255, v6);
  bzero(*(void **)(a1 + 16), v4);
}

void sub_1B17C851C(uint64_t a1)
{
  _QWORD *v2;
  CFTypeRef *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  CFTypeRef *v7;
  _QWORD *v8;
  __int16 *v9;
  __int16 v10;

  v2 = *(_QWORD **)a1;
  v3 = *(CFTypeRef **)(a1 + 8);
  v4 = *(__int16 **)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 28);
  sub_1B17C8454(a1, 2 * v5);
  v6 = (v5 + 15);
  if (v5 != -15)
  {
    v7 = v3;
    v8 = v2;
    v9 = v4;
    do
    {
      v10 = *v9++;
      if ((v10 & 1) != 0)
      {
        sub_1B17C80D4(a1, *v8, v7);
        if (*v7)
          CFRelease(*v7);
      }
      ++v8;
      ++v7;
      --v6;
    }
    while (v6);
  }
  free(v3);
  free(v2);
  free(v4);
}

void sub_1B17C8804(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_1B17C8FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B17C8FF4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(void **)(a1 + 40), a3, a4);
}

void sub_1B17C8FF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v6;
  __int16 v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  _QWORD v11[5];

  v6 = objc_msgSend_count(a2, (const char *)a2, a3, a4);
  v7 = v6;
  if (v6)
  {
    v8 = malloc_type_malloc(16 * v6, 0x1000040451B5BE8uLL);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1B17C9850;
    v11[3] = &unk_1E63D55D8;
    v11[4] = v8;
    objc_msgSend_enumerateObjectsUsingBlock_(a2, v9, (uint64_t)v11, v10);
  }
  else
  {
    v8 = 0;
  }
  sub_1B17A461C(a1, (uint64_t)v8, v7);
}

uint64_t sub_1B17C9144(uint64_t a1)
{
  return sub_1B17A47D4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40));
}

uint64_t sub_1B17C91F4(uint64_t a1)
{
  return sub_1B17A47E4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40));
}

uint64_t sub_1B17C92A4(uint64_t a1)
{
  return sub_1B17A47F4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40));
}

uint64_t sub_1B17C9850(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  result = objc_msgSend_rangeValue(a2, (const char *)a2, a3, a4);
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * a3);
  if (result == 0x7FFFFFFFFFFFFFFFLL)
    v9 = -1;
  else
    v9 = result;
  *v8 = v9;
  v8[1] = v7;
  return result;
}

__n128 sub_1B17C9890(__n128 *a1, float32x4_t *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  int32x4_t v8;
  __float2 v14;
  __n128 result;
  float32x4_t v16;

  v3 = vmulq_f32(*a2, *a2);
  v3.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).u64[0];
  v4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 0);
  v4.i32[3] = 0;
  v5 = vrsqrteq_f32(v4);
  v6 = vmulq_f32(v5, vrsqrtsq_f32(v4, vmulq_f32(v5, v5)));
  v7 = (int8x16_t)vmulq_f32(v6, vrsqrtsq_f32(v4, vmulq_f32(v6, v6)));
  v8 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v3.f32[0] != 0.0)), 0x1FuLL));
  v8.i32[3] = 0;
  __asm { FMOV            V3.4S, #1.0 }
  v16 = vmulq_f32(*a2, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v8), v7, _Q3));
  v14 = __sincosf_stret(vmuls_lane_f32(0.5, *a2, 3));
  result = (__n128)vmulq_n_f32(v16, v14.__sinval);
  result.n128_u32[3] = LODWORD(v14.__cosval);
  *a1 = result;
  return result;
}

float32_t sub_1B17C993C(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v3;
  float v4;
  float32x2_t v5;
  float32x2_t v6;
  float v7;
  float32_t result;
  float32x4_t v9;
  float32x4_t v10;

  v3 = vmulq_f32(*a1, *a1);
  LODWORD(v4) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).u32[0];
  v5 = vrsqrte_f32((float32x2_t)LODWORD(v4));
  v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)LODWORD(v4), vmul_f32(v5, v5)));
  v10 = vmulq_n_f32(*a1, vmul_f32(v6, vrsqrts_f32((float32x2_t)LODWORD(v4), vmul_f32(v6, v6))).f32[0]);
  v7 = atan2f(sqrtf(v4), COERCE_FLOAT(HIDWORD(*(unsigned __int128 *)a1)));
  result = v7 + v7;
  v9 = v10;
  v9.f32[3] = result;
  *a2 = v9;
  return result;
}

float32x4_t sub_1B17C99BC(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t result;

  result = vaddq_f32(*a1, *a2);
  *a3 = result;
  return result;
}

float32x4_t sub_1B17C99D0(float32x4_t *a1)
{
  int8x16_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t result;

  v1 = (int8x16_t)vmulq_f32(*a1, *a1);
  *(float32x2_t *)v1.i8 = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL));
  v2 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.i8, 1)), 0);
  v3 = vrsqrteq_f32(v2);
  v4 = vmulq_f32(v3, vrsqrtsq_f32(v2, vmulq_f32(v3, v3)));
  __asm { FMOV            V3.4S, #1.0 }
  result = vmulq_f32(*a1, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v2), _Q3, (int8x16_t)vmulq_f32(v4, vrsqrtsq_f32(v2, vmulq_f32(v4, v4)))));
  *a1 = result;
  return result;
}

int32x4_t sub_1B17C9A20(float32x4_t *a1, int32x4_t *a2, float32x4_t *a3)
{
  int32x4_t result;
  int32x4_t v5;
  float32x4_t v6;

  result = *(int32x4_t *)a1;
  _S2 = HIDWORD(*(unsigned __int128 *)a2);
  v5 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*a2, *a2), *(int8x16_t *)a2, 0xCuLL), vnegq_f32(*a1)), *(float32x4_t *)a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(result, result), *(int8x16_t *)a1, 0xCuLL));
  v6 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(*a1, *(float32x4_t *)a2, 3), *(float32x4_t *)a2, *a1, 3), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v5, v5), (int8x16_t)v5, 0xCuLL));
  __asm { FMLA            S1, S2, V0.S[3] }
  v6.i32[3] = _S1;
  *a3 = v6;
  return result;
}

float32x4_t sub_1B17C9A84(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float v9;
  float v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  int32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float32x2_t v39;
  float32x2_t v40;
  float v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t result;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;

  v6 = *a1;
  v7 = *a2;
  v8 = (int8x16_t)vmulq_f32(*a1, *a2);
  v61 = *a2;
  v63 = *a1;
  v9 = 1.0;
  v10 = 1.0 - a4;
  if (vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))) >= 0.0)
  {
    v31 = vsubq_f32(v6, v7);
    v32 = (int8x16_t)vmulq_f32(v31, v31);
    v33 = vaddq_f32(v6, v7);
    v34 = (int8x16_t)vmulq_f32(v33, v33);
    v35 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)))));
    v36 = v35 + v35;
    _ZF = (float)(v35 + v35) == 0.0;
    v37 = 1.0;
    if (!_ZF)
      v37 = sinf(v36) / v36;
    v38 = v37;
    v39 = vrecpe_f32((float32x2_t)LODWORD(v37));
    v40 = vmul_f32(v39, vrecps_f32((float32x2_t)LODWORD(v38), v39));
    LODWORD(v41) = vmul_f32(v40, vrecps_f32((float32x2_t)LODWORD(v38), v40)).u32[0];
    if ((float)(v10 * v36) != 0.0)
    {
      v59 = v41;
      v40.f32[0] = sinf(v10 * v36);
      v41 = v59;
      v9 = v40.f32[0] / (float)(v10 * v36);
    }
    v40.f32[0] = v10 * (float)(v41 * v9);
    v42 = (float32x4_t)vdupq_lane_s32((int32x2_t)v40, 0);
    v43 = v36 * a4;
    v44 = 1.0;
    if (v43 != 0.0)
    {
      v56 = v42;
      v60 = v41;
      v45 = sinf(v43);
      v42 = v56;
      v41 = v60;
      v44 = v45 / v43;
    }
    v30 = vmlaq_f32(vmulq_n_f32(v61, (float)(v41 * v44) * a4), v63, v42);
  }
  else
  {
    v11 = vaddq_f32(v6, v7);
    v12 = (int8x16_t)vmulq_f32(v11, v11);
    v13 = vsubq_f32(v6, v7);
    v14 = (int8x16_t)vmulq_f32(v13, v13);
    v15 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)))));
    v16 = v15 + v15;
    _ZF = (float)(v15 + v15) == 0.0;
    v18 = 1.0;
    if (!_ZF)
      v18 = sinf(v16) / v16;
    v19 = v18;
    v20 = vrecpe_f32((float32x2_t)LODWORD(v18));
    v21 = vmul_f32(v20, vrecps_f32((float32x2_t)LODWORD(v19), v20));
    LODWORD(v22) = vmul_f32(v21, vrecps_f32((float32x2_t)LODWORD(v19), v21)).u32[0];
    if ((float)(v10 * v16) != 0.0)
    {
      v57 = v22;
      v23 = sinf(v10 * v16);
      v22 = v57;
      v9 = v23 / (float)(v10 * v16);
    }
    v24.i32[1] = v61.i32[1];
    v25 = vnegq_f32(v61);
    *(float *)v24.i32 = v10 * (float)(v22 * v9);
    v26 = (float32x4_t)vdupq_lane_s32(v24, 0);
    v27 = v16 * a4;
    v28 = 1.0;
    if (v27 != 0.0)
    {
      v58 = v22;
      v62 = v25;
      v55 = v26;
      v29 = sinf(v27);
      v26 = v55;
      v22 = v58;
      v25 = v62;
      v28 = v29 / v27;
    }
    v30 = vmlaq_f32(vmulq_n_f32(v25, (float)(v22 * v28) * a4), v63, v26);
  }
  v46 = (int8x16_t)vmulq_f32(v30, v30);
  *(float32x2_t *)v46.i8 = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
  v47 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1)), 0);
  v48 = vrsqrteq_f32(v47);
  v49 = vmulq_f32(v48, vrsqrtsq_f32(v47, vmulq_f32(v48, v48)));
  __asm { FMOV            V3.4S, #1.0 }
  result = vmulq_f32(v30, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v47), _Q3, (int8x16_t)vmulq_f32(v49, vrsqrtsq_f32(v47, vmulq_f32(v49, v49)))));
  *a3 = result;
  return result;
}

float sub_1B17C9CF0(_OWORD *a1, float32x4_t a2, float32_t a3, float32_t a4)
{
  float32x4_t v5;
  simd_float4 v6;
  float v9;
  float v10;
  __int128 v11;
  float result;
  simd_float4 x;
  simd_float4 v22;

  a2.f32[1] = a3;
  a2.f32[2] = a4;
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  v6 = (simd_float4)vmulq_f32(a2, v5);
  v6.i32[3] = 0;
  x = v6;
  v22 = _simd_cos_f4(v6);
  _Q0 = _simd_sin_f4(x);
  _Q7 = v22;
  v9 = vmuls_lane_f32(v22.f32[1], (float32x4_t)v22, 2);
  v10 = vmuls_lane_f32(_Q0.f32[1], (float32x4_t)_Q0, 2);
  *(float *)&v11 = vmlas_n_f32(-(float)(v22.f32[0] * v10), v9, _Q0.f32[0]);
  _S4 = vmuls_lane_f32(v22.f32[0], *(float32x2_t *)_Q0.f32, 1);
  __asm { FMLA            S5, S4, V7.S[2] }
  _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
  __asm { FMLA            S6, S4, V0.S[2] }
  DWORD1(v11) = _S5;
  result = vmlas_n_f32(v10 * _Q0.f32[0], v9, v22.f32[0]);
  *((_QWORD *)&v11 + 1) = __PAIR64__(LODWORD(result), _S6);
  *a1 = v11;
  return result;
}

double sub_1B17C9D94(float32x4_t a1, float32x4_t _Q1)
{
  int32x4_t v4;
  double result;

  _Q3 = (int8x16_t)vmulq_f32(a1, a1);
  *(float32x2_t *)_Q3.i8 = vadd_f32(*(float32x2_t *)_Q3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(_Q3, _Q3, 8uLL));
  _Q2 = vdivq_f32(vmulq_f32(a1, (float32x4_t)xmmword_1B2244F80), (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)_Q3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q3.i8, 1)), 0));
  _Q3.i32[0] = _Q2.i32[3];
  v4 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL), vnegq_f32(_Q1)), _Q2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL));
  *(_QWORD *)&result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(_Q1, _Q2, 3), _Q2, _Q1, 3), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL)).u64[0];
  __asm { FMLA            S2, S3, V1.S[3] }
  return result;
}

void sub_1B17C9E14(float32x4_t *a1, _OWORD *a2)
{
  int8x16_t v4;
  float v5;
  __int128 v6;
  float v7;
  float v9;
  float v15;
  double v16;
  float v17;
  int *v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float32x4_t v24;
  float v25;
  float v26;
  __int128 v27;

  _Q2 = *a1;
  v4 = (int8x16_t)vmulq_f32(_Q2, _Q2);
  v5 = vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)));
  v6 = 0uLL;
  if (v5 != 0.0)
  {
    LODWORD(v7) = HIDWORD(*(unsigned __int128 *)a1);
    LODWORD(_S9) = HIDWORD(a1->i64[0]);
    LODWORD(v9) = a1->i64[1];
    __asm { FMLA            S1, S9, V2.S[3] }
    v15 = _S1 / v5;
    v16 = (float)(_S1 / v5);
    if (v16 <= 0.4999)
    {
      if (v16 >= -0.4999)
      {
        v20 = *(float *)&v4.i32[1];
        v21 = v4.i64[1];
        v24 = *a1;
        v25 = *(float *)v4.i32;
        *(float *)&v22 = atan2f((float)((float)(_Q2.f32[0] * _Q2.f32[3]) + (float)(_Q2.f32[1] * _Q2.f32[2]))+ (float)((float)(_Q2.f32[0] * _Q2.f32[3]) + (float)(_Q2.f32[1] * _Q2.f32[2])), *(float *)&v4.i32[3]+ (float)(*(float *)&v4.i32[2] + (float)((float)-*(float *)v4.i32 - *(float *)&v4.i32[1])));
        *(_QWORD *)&v27 = v22;
        v26 = asinf(v15 + v15);
        v23 = atan2f((float)((float)(v9 * v7) + (float)(v24.f32[0] * _S9))+ (float)((float)(v9 * v7) + (float)(v24.f32[0] * _S9)), *((float *)&v21 + 1) + (float)((float)(v25 - v20) - *(float *)&v21));
        v6 = v27;
        *((float *)&v6 + 1) = v26;
        *((float *)&v6 + 2) = v23;
        goto LABEL_8;
      }
      v19 = atan2f(COERCE_FLOAT(*a1), _Q2.f32[3]);
      *(float *)&v6 = v19 + v19;
      v18 = &dword_1B2245B80;
    }
    else
    {
      v17 = atan2f(COERCE_FLOAT(*a1), _Q2.f32[3]);
      *(float *)&v6 = v17 + v17;
      v18 = &dword_1B2245B84;
    }
    DWORD1(v6) = *v18;
    DWORD2(v6) = 0;
  }
LABEL_8:
  *a2 = v6;
}

uint64_t sub_1B17C9F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  CFX::RG::Pass *v10;
  CFX::RG::Resource *v11;
  CFX::RG::Resource *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _OWORD v24[5];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[5];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int16 v40;
  __int128 v41;
  char v42;
  __int128 v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v36 = a2;
  *((_QWORD *)&v36 + 1) = a3;
  v8 = atomic_load((unsigned __int8 *)&qword_1EEF65648);
  if ((v8 & 1) == 0)
  {
    v23 = a3;
    v21 = a2;
    v22 = __cxa_guard_acquire(&qword_1EEF65648);
    a2 = v21;
    a3 = v23;
    if (v22)
    {
      qword_1EEF65640 = (uint64_t)sub_1B17CCE38("REFLECTION_PROBE_RENDER_PASS", 0x1Cu);
      __cxa_guard_release(&qword_1EEF65648);
      a2 = v21;
      a3 = v23;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, qword_1EEF65640, 0);
  *(_QWORD *)a1 = &off_1E63CFB88;
  v9 = *(_QWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a5 + 24);
  *(_WORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = v9;
  *(_BYTE *)(CFX::RG::Pass::commonRenderParameters(v10) + 277) = 6;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v31 = 0u;
  RGTextureDescriptorMakeCube(*(_DWORD *)(a1 + 392), *(_QWORD *)(a1 + 400), (uint64_t)&v31);
  *((_QWORD *)&v33 + 1) = 5;
  BYTE8(v31) = 5;
  v30[0] = v31;
  v30[1] = v32;
  v30[3] = v34;
  v30[4] = v35;
  v30[2] = v33;
  v11 = sub_1B179BD38(a4, (uint64_t)"REFLECTION_PROBE_COLOR_TARGET", (uint64_t)v30);
  *(_QWORD *)(a1 + 416) = v11;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v11, 0x100000002, 0);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  RGTextureDescriptorMakeCube(*(_DWORD *)(a1 + 392), 252, (uint64_t)&v25);
  *((_QWORD *)&v33 + 1) = 4;
  v24[2] = v27;
  v24[3] = v28;
  v24[4] = v29;
  v24[0] = v25;
  v24[1] = v26;
  v12 = sub_1B179BD38(a4, (uint64_t)"REFLECTION_PROBE_DEPTH_TARGET", (uint64_t)v24);
  *(_QWORD *)(a1 + 424) = v12;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v12, 0x200000002, -1);
  *(_QWORD *)&v37 = *(_QWORD *)(a1 + 368);
  v13 = *(_QWORD *)(a1 + 408);
  v39 = 0;
  v38 = v13;
  *(_QWORD *)&v14 = 0;
  *((float *)&v14 + 2) = (float)*(unsigned int *)(a1 + 392);
  *((float *)&v14 + 3) = *((float *)&v14 + 2);
  v41 = v14;
  v42 = 1;
  v43 = xmmword_1B2245710;
  v44 = *(_BYTE *)(a1 + 376);
  v45 = 2;
  v46 = 4;
  v47 = 1;
  v48 = 1;
  v15 = sub_1B17CA2A0(v36, *((uint64_t *)&v36 + 1), (uint64_t *)&v36, (uint64_t *)&v37, &v38);
  *(_QWORD *)&v38 = 0;
  WORD4(v38) = 32;
  BYTE10(v38) = *(_BYTE *)(a1 + 377);
  v39 = 3;
  v40 = 0;
  v16 = atomic_load((unsigned __int8 *)&qword_1EEF65648);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF65648))
  {
    qword_1EEF65640 = (uint64_t)sub_1B17CCE38("REFLECTION_PROBE_RENDER_PASS", 0x1Cu);
    __cxa_guard_release(&qword_1EEF65648);
  }
  *(_QWORD *)&v41 = qword_1EEF65640;
  v17 = *(_QWORD *)(a1 + 368);
  v37 = v36;
  v18 = sub_1B179C1C0(&v37, 0x40u, 8u);
  sub_1B182CDF0(v18, v17, (uint64_t)&v38, v15);
  *(_QWORD *)(a1 + 384) = v19;
  return a1;
}

void sub_1B17CA27C(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17CA2A0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, __int128 *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0xB0u, 0x10u);
  return sub_1B1961028(v8, *a3, a3[1], *a4, a5);
}

void sub_1B17CA2FC(uint64_t a1, uint64_t a2)
{
  __n128 *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (__n128 *)sub_1B180C828(*(_QWORD *)(a1 + 384));
  sub_1B19610E0(v3, v4, v5, v6);
  sub_1B196142C((uint64_t)v3, v7, v8, v9, v10, v11, v12, v13);
  sub_1B1961820((uint64_t)v3);
  sub_1B196184C((uint64_t)v3, v14, v15, v16, v17, v18, v19, v20);
  sub_1B1961A30((uint64_t *)v3, *(const char **)a2, *(_QWORD *)(a2 + 8), v21);
}

void sub_1B17CA348(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B182CE18(*(_QWORD *)(a1 + 384), a2, a3, a4);
}

void sub_1B17CA350(uint64_t a1, const char *a2, uint64_t a3)
{
  sub_1B182D4E8(*(_QWORD *)(a1 + 384), a2, a3, *(unsigned __int8 *)(a3 + 17) | ((unint64_t)*(unsigned __int8 *)(a3 + 17) << 8));
}

uint64_t sub_1B17CA360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int8 v8;
  _QWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  CFX::RG::Resource *v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BYTE v31[31];
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[2];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v8 = atomic_load((unsigned __int8 *)&qword_1EEF65658);
  v9 = &unk_1EEF65000;
  if ((v8 & 1) == 0)
  {
    v28 = a3;
    v26 = a2;
    v27 = __cxa_guard_acquire(&qword_1EEF65658);
    v9 = (_QWORD *)&unk_1EEF65000;
    a2 = v26;
    a3 = v28;
    if (v27)
    {
      qword_1EEF65650 = (uint64_t)sub_1B17CCE38("REFLECTION_PROBE_RADIANCE_PASS", 0x1Eu);
      __cxa_guard_release(&qword_1EEF65658);
      v9 = (_QWORD *)&unk_1EEF65000;
      a2 = v26;
      a3 = v28;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v9[202], 0);
  *(_QWORD *)a1 = &off_1E63CFE68;
  v10 = *(_OWORD *)(a5 + 24);
  v11 = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a1 + 400) = v11;
  *(_OWORD *)(a1 + 384) = v10;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  if ((_BYTE)v11)
  {
    RGTextureDescriptorMake2D(2 * *(_DWORD *)(a1 + 384), *(_DWORD *)(a1 + 384), *(_QWORD *)(a1 + 392), (uint64_t)&v35);
    v12 = v35;
    v41[0] = v36[0];
    *(_OWORD *)((char *)v41 + 15) = *(_OWORD *)((char *)v36 + 15);
    v39 = v37;
    v40 = v38;
  }
  else
  {
    RGTextureDescriptorMakeCube(*(_DWORD *)(a1 + 384), *(_QWORD *)(a1 + 392), (uint64_t)&v35);
    v12 = v35;
    v41[0] = v36[0];
    *(_OWORD *)((char *)v41 + 15) = *(_OWORD *)((char *)v36 + 15);
    v39 = v37;
    v40 = v38;
    v20 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v13, v14, v15, v16, v17, v18, v19);
    if ((objc_msgSend_features(v20, v21, v22, v23) & 0x20) != 0)
      *(_WORD *)(a1 + 376) = 257;
    *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 268) = 6;
  }
  v29 = v12;
  v30 = 5;
  *(_OWORD *)v31 = v41[0];
  *(_OWORD *)&v31[15] = *(_OWORD *)((char *)v41 + 15);
  v32 = 5;
  v33 = v39;
  v34 = v40;
  v24 = sub_1B179BD38(a4, (uint64_t)"REFLECTION_PROBE_RADIANCE_TARGET", (uint64_t)&v29);
  *(_QWORD *)(a1 + 424) = v24;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v24, 0x100000000, 0);
  *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 275) = 5;
  return a1;
}

void sub_1B17CA574(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B17CA598(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  int v26;
  const __CFString *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  const __CFString *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _OWORD v47[6];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  _BYTE v63[15];
  const __CFString *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = 0x9DDFEA08EB382D69
     * (v4 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)(a1 + 392) ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                            * (*(_QWORD *)(a1 + 392) ^ v4)));
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ *(unsigned __int8 *)(a1 + 400));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  v9 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v8);
  *(_QWORD *)(a1 + 408) = v9;
  if (!v9)
  {
    *(_QWORD *)(a1 + 408) = sub_1B17CA798(*(CFX::CrossFrameResourceManager **)(a2 + 32), v8);
    v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
    v24 = (void *)objc_msgSend_resourceManager(v17, v18, v19, v20);
    if (*(_QWORD *)(a1 + 392) == 125)
      v25 = "float";
    else
      v25 = "half";
    v26 = *(unsigned __int8 *)(a1 + 400);
    v27 = CFSTR("vfx_draw_fullscreen_cube");
    if (!*(_BYTE *)(a1 + 400))
    {
      v28 = objc_msgSend_features(v17, v21, v22, v23);
      v32 = objc_msgSend_features(v17, v29, v30, v31);
      v33 = CFSTR("vfx_draw_fullscreen_cube_no_base");
      if ((v28 & 0x400) != 0)
        v33 = CFSTR("vfx_draw_fullscreen_cube");
      if ((v32 & 0x20) != 0)
        v27 = CFSTR("vfx_draw_fullscreen_cube_layered");
      else
        v27 = v33;
      v26 = *(unsigned __int8 *)(a1 + 400);
    }
    v34 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v21, (uint64_t)CFSTR("vfx_radiance_%s_%s_frag"), v23, off_1E63D5620[v26], v25);
    v35 = (void *)sub_1B18FD768((uint64_t)v24);
    v39 = objc_msgSend_frameworkLibrary(v35, v36, v37, v38);
    v40 = *(_QWORD *)(a1 + 392);
    v41 = *(_QWORD *)(a1 + 408);
    memset(v47, 0, sizeof(v47));
    v48 = 0;
    v49 = v39;
    v50 = v40;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0;
    v61 = 3;
    v62 = 0;
    memset(v63, 0, sizeof(v63));
    v64 = v27;
    v65 = v34;
    v66 = 0;
    v67 = 0;
    v44 = objc_msgSend_newRenderPipelineStateWithDesc_(v24, v42, (uint64_t)v47, v43);
    v45 = *(void **)(v41 + 16);
    if (v45 != (void *)v44)
    {
      v46 = v44;
      if (v45)

      *(_QWORD *)(v41 + 16) = v46;
    }
  }
}

_OWORD *sub_1B17CA798(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_OWORD *)operator new();
    *v4 = 0u;
    v4[1] = 0u;
    *(_QWORD *)v4 = &off_1E63CFE48;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B17CA810(uint64_t a1, CFX::GPUResourceManager **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  id Texture;
  id v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  double v39;
  unsigned int v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  unsigned __int16 *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  float v52;
  const char *v53;
  float v54;
  uint64_t v55;
  double v56;
  double v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64x2_t v71;
  int32x2_t v72;
  float32x4_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  const char *v82;
  const char *v83;
  float32x4_t v85;
  int v86;
  float v87;
  float64x2_t v88;
  float64x2_t v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v22 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  v23 = *(_QWORD *)(a1 + 408);
  v24 = *(void **)(v23 + 16);
  if (!v24)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v16, v17, v18, v19, v20, v21, (uint64_t)"_ptr != NULL");
    v24 = *(void **)(v23 + 16);
  }
  v25 = objc_msgSend_state(v24, v15, v16, v17);
  objc_msgSend_setRenderPipelineState_(*(void **)(v22 + 16), v26, v25, v27);
  Texture = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 416));
  v29 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 424));
  v33 = objc_msgSend_mipmapLevelCount(Texture, v30, v31, v32);
  v35 = MEMORY[0x1E0C80A78](v33, v34);
  v37 = (char *)&v85 - v36;
  sub_1B17CAB60(v35, v39, v38, (const char *)&v85 - v36, v38, Texture, *(_DWORD *)(a1 + 404) == 1);
  LOBYTE(v40) = *(_BYTE *)(a3 + 16);
  v87 = (float)v40 / (float)(unint64_t)(objc_msgSend_mipmapLevelCount(v29, v41, v42, v43) - 1);
  v88 = 0uLL;
  v89.f64[0] = 0.0;
  sub_1B1868D14(*(_QWORD *)(v22 + 24), &v87, 4uLL, (void **)&v88);
  objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v22 + 16), v44, *(uint64_t *)&v88.f64[1], *(uint64_t *)&v89.f64[0], 0);
  v86 = *(_DWORD *)&v37[4 * *(unsigned __int8 *)(a3 + 16)];
  v88 = 0uLL;
  v89.f64[0] = 0.0;
  sub_1B1868D14(*(_QWORD *)(v22 + 24), &v86, 4uLL, (void **)&v88);
  objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v22 + 16), v45, *(uint64_t *)&v88.f64[1], *(uint64_t *)&v89.f64[0], 1);
  sub_1B179AEE4(v22, Texture, 0, v46);
  v47 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 424));
  if (*(_BYTE *)(a1 + 400) || *(_BYTE *)(a1 + 376) != 1)
  {
    v66 = objc_msgSend_width(v29, v48, v49, v50);
    v70 = objc_msgSend_height(v29, v67, v68, v69);
    v71.i64[0] = v66;
    v71.i64[1] = v70;
    v85 = vcvt_hight_f32_f64(0, vcvtq_f64_u64(v71));
    *(float *)v72.i32 = ldexpf(1.0, *(unsigned __int8 *)(a3 + 16));
    v73 = vdivq_f32(v85, (float32x4_t)vdupq_lane_s32(v72, 0));
    v74 = *(void **)(v22 + 16);
    v88 = vcvtq_f64_f32(*(float32x2_t *)v73.f32);
    v89 = vcvt_hight_f64_f32(v73);
    v90 = xmmword_1B2245B90;
    objc_msgSend_setViewport_(v74, v75, (uint64_t)&v88, v76);
    *(_DWORD *)v22 = 1;
  }
  else
  {
    v51 = v47[1];
    v52 = (float)*v47;
    v54 = ldexpf(1.0, *(unsigned __int8 *)(a3 + 16));
    v55 = 0;
    v56 = (float)(v52 / v54);
    v57 = (float)((float)v51 / v54);
    do
    {
      v58 = (char *)&v88 + v55;
      *(_QWORD *)v58 = 0;
      *((_QWORD *)v58 + 1) = 0;
      *((double *)v58 + 2) = v56;
      *((double *)v58 + 3) = v57;
      v55 += 48;
      *((_QWORD *)v58 + 4) = 0;
      *((_QWORD *)v58 + 5) = 0;
    }
    while (v55 != 288);
    objc_msgSend_setViewports_count_(*(void **)(v22 + 16), v53, (uint64_t)&v88, 6);
  }
  v77 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v59, v60, v61, v62, v63, v64, v65);
  if ((objc_msgSend_features(v77, v78, v79, v80) & 0x400) != 0)
  {
    if (*(_BYTE *)(a1 + 376) == 1 || !*(_BYTE *)(a3 + 17))
      return sub_1B179AF64(v22, v81);
    else
      return sub_1B17CACB0((unsigned int *)v22, (const char *)3, 0, 3, 1, *(unsigned __int8 *)(a3 + 17));
  }
  else
  {
    v88 = 0uLL;
    v89.f64[0] = 0.0;
    sub_1B1868D14(*(_QWORD *)(v22 + 24), (const void *)(a3 + 17), 1uLL, (void **)&v88);
    objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v22 + 16), v82, *(uint64_t *)&v88.f64[1], *(uint64_t *)&v89.f64[0], 0);
    return objc_msgSend_drawPrimitives_vertexStart_vertexCount_(*(void **)(v22 + 16), v83, 3, 0, 3);
  }
}

void sub_1B17CAB60(double a1, double a2, uint64_t a3, const char *a4, uint64_t a5, void *a6, int a7)
{
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64x2_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  uint32x2_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  int64x2_t v24;
  uint64x2_t v25;
  float v26;
  float v27;
  int32x2_t v28;
  int64x2_t v29;

  v7 = a5;
  LODWORD(a1) = 28.0;
  if (a7)
  {
    v9 = objc_msgSend_width(a6, a4, a5, (uint64_t)a6, a1);
    HIDWORD(a2) = 1174405120;
    *(float *)&a1 = fminf(fmaxf((float)(unint64_t)(4 * v9), 32.0), 8192.0) + -4.0;
  }
  if (v7)
  {
    v10 = 0;
    *(float *)&a2 = (float)(v7 - 1);
    v25 = (uint64x2_t)vdupq_n_s64((unint64_t)v7 - 1);
    v11 = (uint64x2_t)xmmword_1B2244C80;
    v24 = vdupq_n_s64(2uLL);
    v12 = (v7 + 1) & 0x1FFFFFFFELL;
    v13 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a1, 0);
    v14 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0);
    __asm { FMOV            V10.2S, #4.0 }
    do
    {
      v28 = vmovn_s64((int64x2_t)vcgeq_u64(v25, v11));
      v29 = (int64x2_t)v11;
      v20.i32[0] = v10;
      v20.i32[1] = v10 + 1;
      v21 = vdiv_f32(vcvt_f32_u32(v20), v14);
      v26 = v21.f32[0];
      v27 = powf(v21.f32[1], 0.25);
      v22.f32[0] = powf(v26, 0.25);
      v22.f32[1] = v27;
      v23 = vmla_f32(_D10, v13, v22);
      if ((v28.i8[0] & 1) != 0)
        *(_DWORD *)&a4[4 * v10] = v23.f32[0];
      if ((v28.i8[4] & 1) != 0)
        *(_DWORD *)&a4[4 * v10 + 4] = v23.f32[1];
      v10 += 2;
      v11 = (uint64x2_t)vaddq_s64(v29, v24);
    }
    while (v12 != v10);
  }
}

uint64_t sub_1B17CACB0(unsigned int *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v6 = *a1;
  v7 = v6 * a6;
  v8 = (void *)*((_QWORD *)a1 + 2);
  if ((unint64_t)(v6 * a5) <= 1 && v7 == 0)
    return objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v8, a2, (uint64_t)a2, a3, a4);
  if (v7)
    return objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_(v8, a2, (uint64_t)a2, a3, a4);
  return objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_(v8, a2, (uint64_t)a2, a3, a4);
}

uint64_t sub_1B17CACF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v8;
  unsigned __int8 v9;
  __int128 v10;
  CFX::RG::Resource *v11;
  char v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[5];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v8 = &unk_1EEF65000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65668);
  if ((v9 & 1) == 0)
  {
    v15 = a2;
    v16 = a3;
    v14 = __cxa_guard_acquire(&qword_1EEF65668);
    v8 = (_QWORD *)&unk_1EEF65000;
    a2 = v15;
    a3 = v16;
    if (v14)
    {
      qword_1EEF65660 = (uint64_t)sub_1B17CCE38("REFLECTION_PROBE_BOX_BLUR_PASS", 0x1Eu);
      __cxa_guard_release(&qword_1EEF65668);
      v8 = (_QWORD *)&unk_1EEF65000;
      a2 = v15;
      a3 = v16;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v8[204], 0);
  *(_QWORD *)a1 = &off_1E63CFC68;
  v10 = *(_OWORD *)(a5 + 24);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 384) = v10;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  RGTextureDescriptorMake2D(2 * *(_DWORD *)(a1 + 384), *(_DWORD *)(a1 + 384), *(_QWORD *)(a1 + 392), (uint64_t)&v18);
  *((_QWORD *)&v20 + 1) = 5;
  BYTE8(v18) = 5;
  v17[0] = v18;
  v17[1] = v19;
  v17[3] = v21;
  v17[4] = v22;
  v17[2] = v20;
  v11 = sub_1B179BD38(a4, (uint64_t)"REFLECTION_PROBE_BOX_BLUR_TARGET", (uint64_t)v17);
  *(_QWORD *)(a1 + 424) = v11;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v11, 0x100000000, 0);
  v12 = BYTE8(v18);
  *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 275) = v12;
  return a1;
}

void sub_1B17CAE48(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B17CAE5C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _OWORD v48[6];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  const __CFString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[6];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  const __CFString *v82;
  const __CFString *v83;
  uint64_t v84;
  uint64_t v85;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ *(unsigned __int16 *)(a1 + 400));
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69
       * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ *(_QWORD *)(a1 + 392))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                              * (v6 ^ *(_QWORD *)(a1 + 392))))) ^ ((0x9DDFEA08EB382D69 * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ *(_QWORD *)(a1 + 392))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ *(_QWORD *)(a1 + 392))))) >> 47));
  v8 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v7);
  *(_QWORD *)(a1 + 408) = v8;
  if (!v8)
  {
    *(_QWORD *)(a1 + 408) = sub_1B17CB084(*(CFX::CrossFrameResourceManager **)(a2 + 32), v7);
    v16 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v9, v10, v11, v12, v13, v14, v15);
    v20 = (void *)objc_msgSend_resourceManager(v16, v17, v18, v19);
    v21 = (void *)sub_1B18FD768((uint64_t)v20);
    v25 = objc_msgSend_frameworkLibrary(v21, v22, v23, v24);
    v26 = *(_QWORD *)(a1 + 392);
    v27 = (void *)sub_1B18FD768((uint64_t)v20);
    v31 = objc_msgSend_frameworkLibrary(v27, v28, v29, v30);
    v32 = *(_QWORD *)(a1 + 392);
    v35 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v33, (uint64_t)CFSTR("box_blur_frag_%d"), v34, *(unsigned __int16 *)(a1 + 400));
    v36 = *(_QWORD *)(a1 + 408);
    memset(v67, 0, sizeof(v67));
    v68 = 0;
    v69 = v25;
    v80 = 0u;
    v81 = 0u;
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v70 = v26;
    v82 = CFSTR("vfx_draw_fullscreen_triangle_vertex");
    v85 = 0;
    v83 = CFSTR("copy_frag");
    v84 = 0;
    v39 = objc_msgSend_newRenderPipelineStateWithDesc_(v20, v37, (uint64_t)v67, v38);
    v42 = *(void **)(v36 + 16);
    if (v42 != (void *)v39)
    {
      v43 = v39;
      if (v42)

      *(_QWORD *)(v36 + 16) = v43;
    }
    v44 = *(_QWORD *)(a1 + 408);
    memset(v48, 0, sizeof(v48));
    v49 = 0;
    v50 = v31;
    v51 = v32;
    v61 = 0u;
    v62 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v63 = CFSTR("vfx_draw_fullscreen_triangle_vertex");
    v64 = v35;
    v65 = 0;
    v66 = 0;
    v45 = objc_msgSend_newRenderPipelineStateWithDesc_(v20, v40, (uint64_t)v48, v41);
    v46 = *(void **)(v44 + 24);
    if (v46 != (void *)v45)
    {
      v47 = v45;
      if (v46)

      *(_QWORD *)(v44 + 24) = v47;
    }
  }
}

_QWORD *sub_1B17CB084(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    *v4 = &off_1E63CFC48;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B17CB0F8(uint64_t a1, CFX::GPUResourceManager **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id Texture;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  unsigned __int16 *v27;
  uint32x2_t v28;
  float32x4_t v29;
  int32x2_t v30;
  float32x4_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  void **v46;
  void *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  void *v53;
  float32x4_t v54;
  _OWORD v55[3];

  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  Texture = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 416));
  v20 = Texture;
  if (*(_BYTE *)(a3 + 16))
  {
    v21 = objc_msgSend_pixelFormat(Texture, v17, v18, v19);
    v25 = objc_msgSend_textureType(v20, v22, v23, v24);
    v20 = (id)objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(v20, v26, v21, v25, *(unsigned __int8 *)(a3 + 16), 1, 0, 1);
  }
  v27 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 424));
  v28.i32[0] = *v27;
  v28.i32[1] = v27[1];
  v29.i64[0] = 0;
  *(float32x2_t *)&v29.u32[2] = vcvt_f32_u32(v28);
  v54 = v29;
  *(float *)v30.i32 = ldexpf(1.0, *(unsigned __int8 *)(a3 + 16));
  v31 = vdivq_f32(v54, (float32x4_t)vdupq_lane_s32(v30, 0));
  v32 = *(void **)(v15 + 16);
  v55[0] = vcvtq_f64_f32(*(float32x2_t *)v31.f32);
  v55[1] = vcvt_hight_f64_f32(v31);
  v55[2] = xmmword_1B2245B90;
  objc_msgSend_setViewport_(v32, v33, (uint64_t)v55, v34);
  *(_DWORD *)v15 = 1;
  sub_1B179AEE4(v15, v20, 0, v35);
  v43 = *(unsigned __int8 *)(a3 + 16);
  v44 = *(_QWORD *)(a1 + 408);
  if (!v43)
  {
    v53 = *(void **)(v44 + 16);
    v46 = (void **)(v44 + 16);
    v45 = v53;
    if (v53)
      goto LABEL_6;
    goto LABEL_5;
  }
  v47 = *(void **)(v44 + 24);
  v46 = (void **)(v44 + 24);
  v45 = v47;
  if (!v47)
  {
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v37, v38, v39, v40, v41, v42, (uint64_t)"_ptr != NULL");
    v45 = *v46;
  }
LABEL_6:
  v48 = objc_msgSend_state(v45, v36, v37, v38);
  objc_msgSend_setRenderPipelineState_(*(void **)(v15 + 16), v49, v48, v50);
  return sub_1B179AF64(v15, v51);
}

uint64_t sub_1B17CB270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(CFX::RG::Pass *__hidden);
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v7 = atomic_load((unsigned __int8 *)&qword_1EEF65678);
  v8 = &unk_1EEF65000;
  if ((v7 & 1) == 0)
  {
    v29 = a2;
    v30 = a3;
    v28 = __cxa_guard_acquire(&qword_1EEF65678);
    v8 = (_QWORD *)&unk_1EEF65000;
    a2 = v29;
    a3 = v30;
    if (v28)
    {
      qword_1EEF65670 = (uint64_t)sub_1B17CCE38("REFLECTION_PROBE_CONVERT_CUBE_PASS", 0x22u);
      __cxa_guard_release(&qword_1EEF65678);
      v8 = (_QWORD *)&unk_1EEF65000;
      a2 = v29;
      a3 = v30;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v8[206], 0);
  v16 = &off_1E63D01F8;
  *(_QWORD *)a1 = &off_1E63D01F8;
  v17 = *(_QWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a5 + 24);
  *(_QWORD *)(a1 + 400) = v17;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  if (!*(_BYTE *)(a1 + 385))
  {
    v18 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v9, v10, v11, v12, v13, v14, v15);
    if ((objc_msgSend_features(v18, v19, v20, v21) & 0x20) != 0)
      *(_WORD *)(a1 + 376) = 257;
    *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 268) = 6;
    v16 = *(void (***)(CFX::RG::Pass *__hidden))a1;
  }
  v22 = *(_DWORD *)(a1 + 404);
  *(_BYTE *)(((uint64_t (*)(uint64_t))v16[4])(a1) + 275) = v22;
  v23 = *(unsigned __int8 *)(a1 + 385);
  v24 = *(_DWORD *)(a1 + 400);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v26 = 6 * v24;
  if (v23)
    v26 = v24;
  *(_BYTE *)(v25 + 276) = v26;
  return a1;
}

void sub_1B17CB3B4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B17CB3D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const __CFString *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  _OWORD v46[6];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  _BYTE v62[15];
  const __CFString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = 0x9DDFEA08EB382D69
     * (v4 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)(a1 + 392) ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                            * (*(_QWORD *)(a1 + 392) ^ v4)));
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ *(unsigned __int8 *)(a1 + 384));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ *(unsigned __int8 *)(a1 + 385));
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v10);
  *(_QWORD *)(a1 + 408) = v11;
  if (!v11)
  {
    *(_QWORD *)(a1 + 408) = sub_1B17CB5D0(*(CFX::CrossFrameResourceManager **)(a2 + 32), v10);
    v19 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
    v23 = (void *)objc_msgSend_resourceManager(v19, v20, v21, v22);
    if ((objc_msgSend_features(v19, v24, v25, v26) & 0x400) != 0)
      v30 = CFSTR("vfx_draw_fullscreen_cube");
    else
      v30 = CFSTR("vfx_draw_fullscreen_cube_no_base");
    if ((objc_msgSend_features(v19, v27, v28, v29) & 0x20) != 0)
      v30 = CFSTR("vfx_draw_fullscreen_cube_layered");
    v33 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v31, (uint64_t)CFSTR("vfx_convert_%s_from_%s_frag"), v32, off_1E63D5620[*(unsigned __int8 *)(a1 + 385)], off_1E63D5620[*(unsigned __int8 *)(a1 + 384)]);
    v34 = (void *)sub_1B18FD768((uint64_t)v23);
    v38 = objc_msgSend_frameworkLibrary(v34, v35, v36, v37);
    v39 = *(_QWORD *)(a1 + 392);
    v40 = *(_QWORD *)(a1 + 408);
    memset(v46, 0, sizeof(v46));
    v47 = 0;
    v48 = v38;
    v49 = v39;
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0;
    v60 = 3;
    memset(v62, 0, sizeof(v62));
    v61 = 0;
    v63 = v30;
    v65 = 0;
    v66 = 0;
    v64 = v33;
    v43 = objc_msgSend_newRenderPipelineStateWithDesc_(v23, v41, (uint64_t)v46, v42);
    v44 = *(void **)(v40 + 16);
    if (v44 != (void *)v43)
    {
      v45 = v43;
      if (v44)

      *(_QWORD *)(v40 + 16) = v45;
    }
  }
}

_QWORD *sub_1B17CB5D0(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63D01D8;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B17CB644(uint64_t a1, CFX::GPUResourceManager **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  id Texture;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  unsigned int v42;
  float v43;
  const char *v44;
  float v45;
  uint64_t v46;
  double v47;
  double v48;
  char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  int32x2_t v54;
  float32x4_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  const char *v60;
  const char *v61;
  float32x4_t v63;
  float64x2_t v64;
  float64x2_t v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v22 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  v23 = *(_QWORD *)(a1 + 408);
  v24 = *(void **)(v23 + 16);
  if (!v24)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v16, v17, v18, v19, v20, v21, (uint64_t)"_ptr != NULL");
    v24 = *(void **)(v23 + 16);
  }
  v25 = objc_msgSend_state(v24, v15, v16, v17);
  objc_msgSend_setRenderPipelineState_(*(void **)(v22 + 16), v26, v25, v27);
  Texture = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 416));
  v32 = Texture;
  if (*(_BYTE *)(a3 + 16))
  {
    if (*(_BYTE *)(a1 + 384))
      v33 = 1;
    else
      v33 = 6;
    v34 = objc_msgSend_pixelFormat(Texture, v29, v30, v31);
    v38 = objc_msgSend_textureType(v32, v35, v36, v37);
    v32 = (id)objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(v32, v39, v34, v38, *(unsigned __int8 *)(a3 + 16), 1, 0, v33);
  }
  sub_1B179AEE4(v22, v32, 0, v31);
  v40 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 424));
  v41 = *v40;
  v42 = v40[1];
  if (*(_BYTE *)(a1 + 385) || *(_BYTE *)(a1 + 376) != 1)
  {
    v53.i64[0] = 0;
    v53.f32[2] = (float)v41;
    v53.f32[3] = (float)v42;
    v63 = v53;
    *(float *)v54.i32 = ldexpf(1.0, *(unsigned __int8 *)(a3 + 16));
    v55 = vdivq_f32(v63, (float32x4_t)vdupq_lane_s32(v54, 0));
    v56 = *(void **)(v22 + 16);
    v64 = vcvtq_f64_f32(*(float32x2_t *)v55.f32);
    v65 = vcvt_hight_f64_f32(v55);
    v66 = xmmword_1B2245B90;
    objc_msgSend_setViewport_(v56, v57, (uint64_t)&v64, v58);
    *(_DWORD *)v22 = 1;
  }
  else
  {
    v43 = (float)v41;
    v45 = ldexpf(1.0, *(unsigned __int8 *)(a3 + 16));
    v46 = 0;
    v47 = (float)(v43 / v45);
    v48 = (float)((float)v42 / v45);
    do
    {
      v49 = (char *)&v64 + v46;
      *(_QWORD *)v49 = 0;
      *((_QWORD *)v49 + 1) = 0;
      *((double *)v49 + 2) = v47;
      *((double *)v49 + 3) = v48;
      v46 += 48;
      *((_QWORD *)v49 + 4) = 0;
      *((_QWORD *)v49 + 5) = 0;
    }
    while (v46 != 288);
    objc_msgSend_setViewports_count_(*(void **)(v22 + 16), v44, (uint64_t)&v64, 6);
  }
  if ((objc_msgSend_features(v11, v50, v51, v52) & 0x400) != 0)
  {
    if (*(_BYTE *)(a1 + 376) == 1 || !*(_BYTE *)(a3 + 17))
      return sub_1B179AF64(v22, v59);
    else
      return sub_1B17CACB0((unsigned int *)v22, (const char *)3, 0, 3, 1, *(unsigned __int8 *)(a3 + 17));
  }
  else
  {
    v64 = 0uLL;
    v65.f64[0] = 0.0;
    sub_1B1868D14(*(_QWORD *)(v22 + 24), (const void *)(a3 + 17), 1uLL, (void **)&v64);
    objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v22 + 16), v60, *(uint64_t *)&v64.f64[1], *(uint64_t *)&v65.f64[0], 0);
    return objc_msgSend_drawPrimitives_vertexStart_vertexCount_(*(void **)(v22 + 16), v61, 3, 0, 3);
  }
}

uint64_t sub_1B17CB8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  CFX::RG::Pass *v11;
  float64x2_t *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v18;
  uint64_t v19;
  float32x4_t v20;
  uint64_t v21;

  v7 = atomic_load((unsigned __int8 *)&qword_1EEF65688);
  v8 = &unk_1EEF65000;
  if ((v7 & 1) == 0)
  {
    v19 = a2;
    v21 = a3;
    v18 = __cxa_guard_acquire(&qword_1EEF65688);
    v8 = &unk_1EEF65000;
    a2 = v19;
    a3 = v21;
    if (v18)
    {
      byte_1EEF65680 = 1;
      __cxa_guard_release(&qword_1EEF65688);
      v8 = (_BYTE *)&unk_1EEF65000;
      a2 = v19;
      a3 = v21;
    }
  }
  if (v8[1664])
    v9 = 0x5303C3899FA12B45;
  else
    v9 = 0;
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v9, 0);
  *(_QWORD *)a1 = &off_1E63CEC60;
  v10 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 400) = v10;
  *(_QWORD *)(a1 + 416) = 0;
  v20 = *(float32x4_t *)(a1 + 384);
  v12 = (float64x2_t *)CFX::RG::Pass::commonRenderParameters(v11);
  *v12 = vcvtq_f64_f32(*(float32x2_t *)v20.f32);
  v12[1] = vcvt_hight_f64_f32(v20);
  v13 = *(_DWORD *)(a1 + 400);
  *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 276) = v13;
  v14 = *(_DWORD *)(a1 + 404);
  *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 277) = v14;
  v15 = *(_DWORD *)(a1 + 408);
  *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 274) = v15;
  v16 = *(_DWORD *)(a1 + 412);
  *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 275) = v16;
  return a1;
}

void sub_1B17CBA2C(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17CBA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  _BOOL4 v41;
  void *v42;
  int v43;

  v10 = sub_1B1813884(a1, a2, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B187B188(v10, v11, v12, v13, v14, v15, v16, v17);
  v26 = sub_1B1796058(v18, v19, v20, v21, v22, v23, v24, v25);
  v27 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v18) ^ ((0x9DDFEA08EB382D69 * v18) >> 47));
  v28 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), 0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47)));
  v36 = v28;
  if (v28 && *(_BYTE *)(v28 + 137))
  {
    *(_BYTE *)(v28 + 137) = 0;
    return 1;
  }
  if (v26
    || (v38 = sub_1B187B0F0(v10, 0)) != 0
    && ((v39 = v38, sub_1B1841A40(v38, (uint64_t)v29, v30, v31, v32, v33, v34, v35))
     || sub_1B1842E64(v39, (uint64_t)v29, v30, v31, v32, v33, v34, v35))
    || (result = sub_1B1814618(a1, (uint64_t)v29, v30, v31, v32, v33, v34, v35), (_DWORD)result))
  {
    if (v36)
    {
      if (*(_BYTE *)(v36 + 136))
        return 1;
      v42 = *(void **)(v36 + 48);
      if (v42)
        v41 = objc_msgSend_arrayLength(v42, v29, v30, v31) != v26 + 1;
      else
        v41 = 1;
      v43 = sub_1B187C014(v10, (uint64_t)v29, v30, v31, v32, v33, v34, v35);
      v40 = *(_DWORD *)(v36 + 16);
      if (v40)
        v40 = **(_DWORD **)(v36 + 24) != v43;
    }
    else
    {
      sub_1B187C014(v10, (uint64_t)v29, v30, v31, v32, v33, v34, v35);
      v40 = 0;
      v41 = 1;
    }
    return v41 | v40;
  }
  return result;
}

uint64_t sub_1B17CBB74(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  double Default;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  BOOL v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v107;
  CFX::RG::Resource *v108;
  uint64_t CopyPass;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  CFX::RG::Resource *isDynamic;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL4 v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  CFX::RG::Resource *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v135;
  uint64_t v136;
  CFX::RG::Resource *v137;
  uint64_t *v138;
  _BOOL4 v139;
  int v140;
  uint64_t v141;
  void *v142;
  _QWORD v143[14];
  int v144;
  BOOL v145;
  id v146[24];
  _QWORD v147[5];
  _BYTE v148[160];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _OWORD v154[5];
  _QWORD v155[5];
  _BYTE v156[160];
  id v157[24];
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[5];
  _BYTE v167[160];
  id v168[24];
  _OWORD v169[6];

  v8 = a3;
  v9 = a2;
  v11 = (void *)sub_1B1813BC4(*a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = sub_1B1813884(*v8, v12, v13, v14, v15, v16, v17, v18);
  v27 = sub_1B187B188(v19, v20, v21, v22, v23, v24, v25, v26);
  v142 = (void *)objc_msgSend_resourceManager(v11, v28, v29, v30);
  v41 = sub_1B1796058(v27, v31, v32, v33, v34, v35, v36, v37);
  if (!v41)
  {
    v68 = sub_1B187B0F0(v19, 0);
    if (!v68
      || (v73 = v68, !sub_1B1841A40(v68, (uint64_t)v38, v39, v40, v69, v70, v71, v72))
      && !sub_1B1842E64(v73, (uint64_t)v38, v39, v40, v74, v75, v76, v77))
    {
      if (!sub_1B1814618(*v8, (uint64_t)v38, v39, v40, v69, v70, v71, v72))
        return 0;
    }
  }
  v42 = v41 + 1;
  objc_msgSend_device(v11, v38, v39, v40);
  v43 = sub_1B189E974();
  objc_msgSend_device(v11, v44, v45, v46);
  v47 = sub_1B189E9B0();
  v51 = 115;
  if ((v47 & v43) != 0)
    v51 = 93;
  v141 = v51;
  if ((objc_msgSend_features(v11, v48, v49, v50) & 0x100) != 0)
    v52 = 256;
  else
    v52 = 128;
  v140 = v52;
  v53 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v27) ^ ((0x9DDFEA08EB382D69 * v27) >> 47));
  v135 = 0x9DDFEA08EB382D69 * (v53 ^ (v53 >> 47));
  v136 = v27;
  v54 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(v9 + 32), v135);
  v58 = v54;
  if (!v54 || (v59 = *(void **)(v54 + 48)) == 0 || (v60 = v58, objc_msgSend_arrayLength(v59, v55, v56, v57) != v42))
  {
    v138 = v8;
    v61 = v9;
    v60 = operator new();
    *(_QWORD *)(v60 + 16) = 0;
    *(_BYTE *)(v60 + 8) = 0;
    *(_QWORD *)(v60 + 32) = 0;
    *(_QWORD *)v60 = &off_1E63CF2C8;
    *(_QWORD *)(v60 + 24) = v60 + 32;
    *(_QWORD *)(v60 + 48) = 0;
    v62 = (void **)(v60 + 48);
    *(_QWORD *)(v60 + 40) = v60 + 48;
    *(_WORD *)(v60 + 136) = 256;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v149 = 0u;
    Default = RGTextureDescriptorMakeDefault((uint64_t)&v149);
    if (v42 < 2)
    {
      v67 = 5;
    }
    else
    {
      v67 = objc_msgSend_cubeArrayTypeIfSupported(v11, v63, v64, v65, Default);
      WORD3(v149) = v42;
    }
    *((_QWORD *)&v150 + 1) = v67;
    LOWORD(v149) = v140 << !VFXMTLTextureTypeIsCube(v67);
    WORD1(v149) = v140;
    *(_QWORD *)&v150 = v141;
    v151 = xmmword_1B2245BA0;
    BYTE8(v149) = 5;
    v79 = objc_alloc_init(MEMORY[0x1E0CC6BB0]);
    v169[2] = v151;
    v169[3] = v152;
    v169[4] = v153;
    v169[0] = v149;
    v169[1] = v150;
    RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)v169, v79);
    v82 = objc_msgSend_newTextureWithDescriptor_(v142, v80, (uint64_t)v79, v81);
    v83 = *v62;
    if (*v62 != (void *)v82)
    {
      v84 = (void *)v82;
      if (v83)

      *v62 = v84;
    }
    sub_1B17CC330(v60 + 16, v42);
    sub_1B17CC394(v60 + 32, v42);
    v85 = v149;
    *(_OWORD *)(v60 + 72) = v150;
    v86 = v152;
    *(_OWORD *)(v60 + 88) = v151;
    *(_OWORD *)(v60 + 104) = v86;
    *(_OWORD *)(v60 + 120) = v153;
    *(_OWORD *)(v60 + 56) = v85;
    v9 = v61;
    v8 = v138;
  }
  v87 = *(_QWORD *)(v60 + 48);
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v167, v60 + 56);
  v166[0] = MEMORY[0x1E0C809B0];
  v166[1] = 3221225472;
  v166[2] = sub_1B17CC454;
  v166[3] = &unk_1E63D5640;
  v166[4] = v87;
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v168, v167, v166, 0);
  v137 = sub_1B17CC3F8(a1, (uint64_t)"REFLECTION PROBE ARRAY", (__int128 *)v168);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v168);
  if (v58)
    v88 = v58 == v60;
  else
    v88 = 1;
  v139 = !v88 && *(_QWORD *)(v58 + 48) != 0;
  v96 = sub_1B187B0F0(v19, 0);
  if (v96)
    objc_msgSend_renderResourceForMaterialProperty_withEngineContext_didFallbackToDefaultTexture_isDynamic_(v142, v89, v96, *v8, 0, 0);
  v162 = 0;
  v163 = &v162;
  v164 = 0x2020000000;
  v165 = 0;
  v158 = 0;
  v159 = &v158;
  v160 = 0x2020000000;
  v161 = 0;
  v97 = sub_1B187C014(v19, (uint64_t)v89, v90, v91, v92, v93, v94, v95);
  v105 = v97;
  if (v58 != v60 || **(_DWORD **)(v60 + 24) != v97)
  {
    *((_BYTE *)v159 + 24) = 1;
    if (v139 && **(_DWORD **)(v58 + 24) == v97)
    {
      v107 = *(_QWORD *)(v58 + 48);
      if (!v107)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v99, v100, v101, v102, v103, v104, (uint64_t)"_ptr != NULL");
        v107 = *(_QWORD *)(v58 + 48);
      }
      CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v156, v58 + 56);
      v155[0] = MEMORY[0x1E0C809B0];
      v155[1] = 3221225472;
      v155[2] = sub_1B17CC45C;
      v155[3] = &unk_1E63D5640;
      v155[4] = v107;
      CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v157, v156, v155, 0);
      v108 = sub_1B17CC3F8(a1, (uint64_t)"OLD REFLECTION PROBE ARRAY", (__int128 *)v157);
      CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v157);
      *(_QWORD *)&v149 = v108;
      DWORD2(v149) = 0;
      *(_QWORD *)&v150 = v137;
      *((_QWORD *)&v150 + 1) = 0x100000000;
      CopyPass = CFX::RG::makeCopyPass(a1, (uint64_t)"Copy probe pass", &v149);
      goto LABEL_52;
    }
    if (!v96)
      goto LABEL_44;
    if (sub_1B1841A40(v96, v98, v99, v100, v101, v102, v103, v104))
    {
      isDynamic = (CFX::RG::Resource *)objc_msgSend_renderResourceForMaterialProperty_withEngineContext_didFallbackToDefaultTexture_isDynamic_(v142, v110, v96, *v8, 0, 0);
      goto LABEL_48;
    }
    if (!sub_1B1842E64(v96, (uint64_t)v110, v111, v112, v113, v114, v115, v116))
    {
LABEL_44:
      v121 = !sub_1B1814618(*v8, v98, v99, v100, v101, v102, v103, v104);
      if (v42 > 1)
        LOBYTE(v121) = 1;
      if (!v121)
      {
        v122 = (void *)objc_msgSend_resourceManager(v11, v118, v119, v120);
        isDynamic = (CFX::RG::Resource *)(id)objc_msgSend_defaultLightingEnvironmentRadianceTexture(v122, v123, v124, v125);
LABEL_48:
        v126 = isDynamic;
        if (isDynamic)
        {
          memset(v154, 0, sizeof(v154));
          RGTextureDescriptorFromMTLTexture(isDynamic, (uint64_t)v154);
          CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v148, v154);
          v147[0] = MEMORY[0x1E0C809B0];
          v147[1] = 3221225472;
          v147[2] = sub_1B17CC464;
          v147[3] = &unk_1E63D5640;
          v147[4] = v126;
          CFX::RG::ExternalResourceDesc::ExternalResourceDesc(&v149, v148, v147, 0);
          CFX::RG::ExternalResourceDesc::ExternalResourceDesc((uint64_t)v146, &v149);
          v126 = sub_1B17CC3F8(a1, (uint64_t)"ENVIRONMENT TEXTURE", (__int128 *)v146);
          CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v146);
          CFX::RG::ExternalResourceDesc::~ExternalResourceDesc((id *)&v149);
        }
        goto LABEL_51;
      }
    }
    v126 = 0;
LABEL_51:
    CopyPass = (uint64_t)sub_1B17CC46C(a1, v8, 0, v126, v140, v141, v137);
LABEL_52:
    v163[3] = CopyPass;
    **(_DWORD **)(v60 + 24) = v105;
    **(_QWORD **)(v60 + 40) = 0;
  }
  *(_QWORD *)&v149 = 0;
  *((_QWORD *)&v149 + 1) = &v149;
  *(_QWORD *)&v150 = 0x2020000000;
  BYTE8(v150) = 0;
  v143[0] = MEMORY[0x1E0C809B0];
  v143[1] = 3221225472;
  v143[2] = sub_1B17CC6A8;
  v143[3] = &unk_1E63D5690;
  v145 = v139;
  v143[8] = v58;
  v143[9] = a1;
  v143[10] = v8;
  v143[11] = v137;
  v144 = v140;
  v143[12] = v60;
  v143[13] = v141;
  v143[5] = &v162;
  v143[6] = &v158;
  v143[4] = v142;
  v143[7] = &v149;
  sub_1B179856C(v136, (uint64_t)v143);
  *(_BYTE *)(v60 + 136) = *(_BYTE *)(*((_QWORD *)&v149 + 1) + 24);
  *(_BYTE *)(v60 + 137) = *((_BYTE *)v159 + 24);
  if (v58 != v60)
    CFX::CrossFrameResourceManager::set(*(_QWORD *)(v9 + 32), v135, v60);
  v133 = *(_QWORD *)(v60 + 48);
  if (!v133)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), 0, v128, v129, v130, v131, v132, (uint64_t)"_ptr != NULL");
    v133 = *(_QWORD *)(v60 + 48);
  }
  objc_msgSend__setReflectionProbeArrayTexture_(v11, v127, v133, v128);
  v78 = v163[3];
  _Block_object_dispose(&v149, 8);
  _Block_object_dispose(&v158, 8);
  _Block_object_dispose(&v162, 8);
  return v78;
}

void sub_1B17CC2A8(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x4D8], 8);
  _Block_object_dispose(&STACK[0x4F8], 8);
  _Unwind_Resume(a1);
}

void sub_1B17CC330(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v5;
  int v6;

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != a2)
  {
    if (v2 <= a2)
    {
      v5 = *(_DWORD *)(a1 + 4);
      v6 = a2 - v5;
      if (a2 > v5)
      {
        sub_1B17CD6FC((unsigned int *)a1, v6, 0);
        v2 = *(_DWORD *)a1;
      }
      bzero((void *)(*(_QWORD *)(a1 + 8) + 4 * v2), 4 * (a2 - v2));
    }
    *(_DWORD *)a1 = a2;
  }
}

void sub_1B17CC394(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v5;
  int v6;

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 != a2)
  {
    if (v2 <= a2)
    {
      v5 = *(_DWORD *)(a1 + 4);
      v6 = a2 - v5;
      if (a2 > v5)
      {
        sub_1B17A378C((unsigned int *)a1, v6, 0);
        v2 = *(_DWORD *)a1;
      }
      bzero((void *)(*(_QWORD *)(a1 + 8) + 8 * v2), 8 * (a2 - v2));
    }
    *(_DWORD *)a1 = a2;
  }
}

CFX::RG::Resource *sub_1B17CC3F8(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFX::RG::Resource *v6;
  unsigned __int8 v8;
  uint64_t v9;

  v9 = a2;
  v4 = *a1;
  v5 = a1[1];
  v8 = 1;
  v6 = (CFX::RG::Resource *)sub_1B17CD7B4(v4, v5, &v9, a3, &v8);
  CFX::RG::RenderGraphBuilder::appendResource(a1, v6);
  return v6;
}

uint64_t sub_1B17CC454(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1B17CC45C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1B17CC464(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t *sub_1B17CC46C(uint64_t *a1, uint64_t *a2, int a3, CFX::RG::Resource *this, int a5, uint64_t a6, CFX::RG::Resource *a7)
{
  CFX::RG::Resource *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFX::RG::Pass *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v34;
  CFX::RG::Resource *v35;
  _BYTE v36[32];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;

  if (this
    && (v13 = this, v14 = CFX::RG::Resource::constTextureDesc(this), VFXMTLTextureTypeIsCube(*(_QWORD *)(v14 + 40))))
  {
    v15 = CFX::RG::Resource::constTextureDesc(v13);
    if (*(_BYTE *)(v15 + 17)
      && *(_BYTE *)(v15 + 16) == 5
      && ((v16 = CFX::RG::Resource::constTextureDesc(v13), !*(_BYTE *)(v16 + 2)) || *(_WORD *)v16 != 16))
    {
      *(_QWORD *)&v34 = v13;
      DWORD2(v34) = 0;
      v35 = a7;
      *(_DWORD *)v36 = a3;
      *(_DWORD *)&v36[4] = 1;
      return (uint64_t *)CFX::RG::makeCopyPass(a1, (uint64_t)"Copy probe pass", &v34);
    }
    else
    {
      v17 = CFX::RG::Resource::constTextureDesc(v13);
      if (*(_BYTE *)(v17 + 17) && *(unsigned __int8 *)(v17 + 16) > 4u)
      {
        v18 = 0;
      }
      else
      {
        v23 = *a2;
        *(_QWORD *)&v34 = "Generate probe mipmap pass";
        *((_QWORD *)&v34 + 1) = v23;
        LOBYTE(v35) = 1;
        v24 = (__int128 *)CFX::RG::Resource::constTextureDesc(v13);
        v25 = *v24;
        *(_OWORD *)&v36[16] = v24[1];
        *(_OWORD *)v36 = v25;
        v26 = v24[2];
        v27 = v24[3];
        v28 = v24[4];
        v40 = v24[5];
        v39 = v28;
        v38 = v27;
        v37 = v26;
        v29 = v24[6];
        v30 = v24[7];
        v31 = v24[8];
        v44 = v24[9];
        v43 = v31;
        v42 = v30;
        v41 = v29;
        v45 = 5;
        v18 = (CFX::RG::Pass *)sub_1B17CD014(a1, (uint64_t)a1, (uint64_t)&v34);
        sub_1B17B54B4((uint64_t)v18, v13);
        v13 = (CFX::RG::Resource *)*((_QWORD *)v18 + 70);
      }
      return sub_1B17CD068(a1, a2, a3, a5, a6, 1, v13, v18, (uint64_t)a7);
    }
  }
  else
  {
    v19 = CFX::RG::Resource::constTextureDesc(a7);
    if (VFXMTLTextureTypeIsCube(*(_QWORD *)(v19 + 40)))
      v20 = 6;
    else
      v20 = 1;
    v21 = *a2;
    *(_QWORD *)&v34 = "Clear texture pass";
    *((_QWORD *)&v34 + 1) = v21;
    LOWORD(v35) = 0;
    *(_OWORD *)&v36[8] = xmmword_1B2244E20;
    *(_DWORD *)&v36[24] = v20 * a3;
    *(_DWORD *)&v36[28] = v20;
    LODWORD(v37) = 0;
    DWORD1(v37) = *(unsigned __int8 *)(CFX::RG::Resource::constTextureDesc(a7) + 16);
    v22 = sub_1B17CCFC0(a1, (uint64_t)a1, (uint64_t)&v34);
    *(_QWORD *)(v22 + 416) = a7;
    CFX::RG::Pass::renderTo(v22, (uint64_t)a7, 0x100000002, 0);
  }
  return (uint64_t *)v22;
}

uint64_t sub_1B17CC6A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  const void *v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const void *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  CFX::RG::Resource *v63;
  const char *v64;
  void *isDynamic;
  uint64_t *v66;
  uint64_t v67;
  id v68[24];
  _QWORD v69[5];
  _BYTE v70[160];
  id v71[24];
  _BYTE v72[88];
  _QWORD v73[4];
  __int128 v74;
  uint64_t v75;
  const void *v76;
  __int128 v77;
  __int128 v78;
  int v79;
  unsigned int v80;

  if ((_DWORD)a2)
  {
    v8 = (uint64_t *)a4;
    v9 = (uint64_t *)a3;
    v10 = result;
    v11 = a2;
    while (1)
    {
      v12 = (const void *)*v8;
      if (sub_1B1861474(*v8, a2, a3, a4, a5, a6, a7, a8) != 1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Wrong probe type"), v14, v15, v16, v17, v18, v19, (uint64_t)"CFXLightGetProbeType(light) == kCFXLightProbeTypeRadiance");
      v27 = sub_1B1861A48((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
      if (v27 == -1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Bad index"), v21, v22, v23, v24, v25, v26, (uint64_t)"probeIndex != (uint32_t)kProbeSliceIndexInvalid");
      v28 = sub_1B1861AA4((uint64_t)v12, v20, v21, v22, v23, v24, v25, v26);
      result = sub_1B18615F0((uint64_t)v12, v29, v30, v31, v32, v33, v34, v35);
      if ((_DWORD)result == 1)
        break;
      v37 = result;
      if (!*(_BYTE *)(v10 + 116))
        goto LABEL_17;
      v73[0] = MEMORY[0x1E0C809B0];
      v73[1] = 3221225472;
      v73[2] = sub_1B17CCA5C;
      v73[3] = &unk_1E63D5668;
      v75 = *(_QWORD *)(v10 + 64);
      v76 = v12;
      v38 = *(_OWORD *)(v10 + 72);
      v79 = v28;
      v80 = v27;
      v39 = *(_OWORD *)(v10 + 88);
      v77 = v38;
      v78 = v39;
      v74 = *(_OWORD *)(v10 + 40);
      result = sub_1B17CCA5C((uint64_t)v73, a2, a3, a4, a5, a6, a7, a8);
      if ((result & 1) == 0)
      {
LABEL_17:
        if (v37 == 2)
        {
          v45 = *(_QWORD *)(v10 + 96);
          v46 = *(_DWORD *)(*(_QWORD *)(v45 + 24) + 4 * v27);
          v47 = *(const void **)(*(_QWORD *)(v45 + 40) + 8 * v27);
          if (v46 != v28 || v47 != v12)
          {
            printf("probe[%d] not up to date stamp [%d -> %d] sources [%p -> %p]\n", v27, v46, v28, v47, v12);
            v55 = sub_1B185F0C8((uint64_t)v12, 0, v49, v50, v51, v52, v53, v54);
            v63 = (CFX::RG::Resource *)v55;
            if (v55)
            {
              if (sub_1B1841A40(v55, v56, v57, v58, v59, v60, v61, v62))
              {
                isDynamic = (void *)objc_msgSend_renderResourceForMaterialProperty_withEngineContext_didFallbackToDefaultTexture_isDynamic_(*(void **)(v10 + 32), v64, (uint64_t)v63, **(_QWORD **)(v10 + 80), 0, 0);
                memset(v72, 0, 80);
                RGTextureDescriptorFromMTLTexture(isDynamic, (uint64_t)v72);
                CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v70, v72);
                v69[0] = MEMORY[0x1E0C809B0];
                v69[1] = 3221225472;
                v69[2] = sub_1B17CCD60;
                v69[3] = &unk_1E63D5640;
                v69[4] = isDynamic;
                CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v71, v70, v69, 0);
                v66 = *(uint64_t **)(v10 + 72);
                CFX::RG::ExternalResourceDesc::ExternalResourceDesc((uint64_t)v68, (__int128 *)v71);
                v63 = sub_1B17CC3F8(v66, (uint64_t)"ENVIRONMENT TEXTURE", (__int128 *)v68);
                CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v68);
                CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v71);
              }
              else
              {
                v63 = 0;
              }
            }
            result = (uint64_t)sub_1B17CC46C(*(uint64_t **)(v10 + 72), *(uint64_t **)(v10 + 80), v27, v63, *(_DWORD *)(v10 + 112), *(_QWORD *)(v10 + 104), *(CFX::RG::Resource **)(v10 + 88));
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 24) = result;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8) + 24) = 1;
            v67 = *(_QWORD *)(v10 + 96);
            *(_DWORD *)(*(_QWORD *)(v67 + 24) + 4 * v27) = v28;
            *(_QWORD *)(*(_QWORD *)(v67 + 40) + 8 * v27) = v12;
          }
          goto LABEL_28;
        }
        if (!v37)
        {
          v40 = *(_QWORD *)(v10 + 96);
          v41 = *(_DWORD *)(*(_QWORD *)(v40 + 24) + 4 * v27);
          v42 = *(const void **)(*(_QWORD *)(v40 + 40) + 8 * v27);
          if (v41 != v28 || v42 != v12)
          {
            printf("probe[%d] not up to date stamp [%d -> %d] sources [%p -> %p]\n", v27, v41, v28, v42, v12);
            v44 = *(_QWORD *)(v10 + 96);
            *(_DWORD *)(*(_QWORD *)(v44 + 24) + 4 * v27) = v28;
            *(_QWORD *)(*(_QWORD *)(v44 + 40) + 8 * v27) = v12;
            result = (uint64_t)sub_1B17CCC2C(*(uint64_t **)(v10 + 72), *(uint64_t **)(v10 + 80), v27, *v9, *(_DWORD *)(v10 + 112), *(_QWORD *)(v10 + 104), *(_QWORD *)(v10 + 88));
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 24) = result;
            v36 = *(_QWORD *)(v10 + 48);
            goto LABEL_9;
          }
        }
      }
LABEL_28:
      ++v8;
      ++v9;
      if (!--v11)
        return result;
    }
    result = (uint64_t)sub_1B17CCC2C(*(uint64_t **)(v10 + 72), *(uint64_t **)(v10 + 80), v27, *v9, *(_DWORD *)(v10 + 112), *(_QWORD *)(v10 + 104), *(_QWORD *)(v10 + 88));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8) + 24) = result;
    v36 = *(_QWORD *)(v10 + 56);
LABEL_9:
    *(_BYTE *)(*(_QWORD *)(v36 + 8) + 24) = 1;
    goto LABEL_28;
  }
  return result;
}

void sub_1B17CCA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,id a63)
{
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a14);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a63);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17CCA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  CFX::RG::Resource *v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD v26[5];
  _BYTE v27[160];
  id v28[24];
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(v9 + 40);
  v11 = *(unsigned int *)(v9 + 32);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    v13 = *(_QWORD **)(v9 + 40);
    while (*v13 != *(_QWORD *)(a1 + 56))
    {
      ++v13;
      v12 -= 8;
      if (!v12)
      {
        v13 = (_QWORD *)(v10 + 8 * v11);
        break;
      }
    }
  }
  else
  {
    v13 = *(_QWORD **)(v9 + 40);
  }
  v14 = (uint64_t)v13 - v10;
  v15 = (unint64_t)v14 >> 3;
  v16 = v11 == v14 >> 3 || (_DWORD)v15 == -1;
  if (v16 || *(_DWORD *)(*(_QWORD *)(v9 + 24) + 4 * v15) == *(_DWORD *)(a1 + 96))
    return 0;
  v18 = *(_QWORD *)(v9 + 48);
  if (!v18)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), a3, a4, a5, a6, a7, a8, (uint64_t)"_ptr != NULL");
    v18 = *(_QWORD *)(v9 + 48);
    v9 = *(_QWORD *)(a1 + 48);
  }
  v19 = *(uint64_t **)(a1 + 64);
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v27, v9 + 56);
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = sub_1B17CCC24;
  v26[3] = &unk_1E63D5640;
  v26[4] = v18;
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v28, v27, v26, 0);
  v20 = sub_1B17CC3F8(v19, (uint64_t)"OLD REFLECTION PROBE ARRAY", (__int128 *)v28);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v28);
  v21 = *(uint64_t **)(a1 + 64);
  v22 = *(_QWORD *)(a1 + 80);
  v23 = *(_DWORD *)(a1 + 100);
  *(_QWORD *)&v29 = v20;
  DWORD2(v29) = v15;
  v30 = v22;
  v17 = 1;
  v31 = v23;
  v32 = 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFX::RG::makeCopyPass(v21, (uint64_t)"Copy probe pass", &v29);
  v24 = *(_QWORD *)(a1 + 88);
  *(_DWORD *)(*(_QWORD *)(v24 + 24) + 4 * *(unsigned int *)(a1 + 100)) = *(_DWORD *)(a1 + 96);
  *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8 * *(unsigned int *)(a1 + 100)) = *(_QWORD *)(a1 + 56);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return v17;
}

void sub_1B17CCC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,id a35)
{
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17CCC24(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t *sub_1B17CCC2C(uint64_t *a1, uint64_t *a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  CFX::RG::Resource **v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD v26[2];
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  _QWORD v39[2];
  __int16 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v13 = *a2;
  v39[0] = "Reflection probe render pass";
  v39[1] = v13;
  v40 = 0;
  v41 = a5;
  v42 = a6;
  v43 = a4;
  v14 = (CFX::RG::Resource **)sub_1B17CD4B4(a1, a1, (uint64_t)v39);
  v15 = *a2;
  v26[0] = "Generate probe mipmap pass";
  v26[1] = v15;
  v27 = 0;
  v16 = (__int128 *)CFX::RG::Resource::constTextureDesc(v14[52]);
  v17 = *v16;
  v29 = v16[1];
  v28 = v17;
  v18 = v16[2];
  v19 = v16[3];
  v20 = v16[4];
  v33 = v16[5];
  v32 = v20;
  v31 = v19;
  v30 = v18;
  v21 = v16[6];
  v22 = v16[7];
  v23 = v16[8];
  v37 = v16[9];
  v36 = v23;
  v35 = v22;
  v34 = v21;
  v38 = 0;
  v24 = sub_1B17CD014(a1, (uint64_t)a1, (uint64_t)v26);
  sub_1B17B54B4(v24, v14[52]);
  CFX::RG::Pass::dependsOn((uint64_t *)v24, (CFX::RG::Pass *)v14);
  return sub_1B17CD068(a1, a2, a3, a5, a6, 0, *(CFX::RG::Resource **)(v24 + 560), (CFX::RG::Pass *)v24, a7);
}

uint64_t sub_1B17CCD60(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_1B17CCD6C(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17CCD94(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17CCDC0(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17CCDE8(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17CCE10(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B17CCE38(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

uint64_t sub_1B17CCF00(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E63CF2C8;
  v2 = *(void **)(a1 + 48);
  if (v2)

  if (*(_DWORD *)(a1 + 36))
    free(*(void **)(a1 + 40));
  if (*(_DWORD *)(a1 + 20))
    free(*(void **)(a1 + 24));
  return a1;
}

void sub_1B17CCF58(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E63CF2C8;
  v2 = *(void **)(a1 + 48);
  if (v2)

  if (*(_DWORD *)(a1 + 36))
    free(*(void **)(a1 + 40));
  if (*(_DWORD *)(a1 + 20))
    free(*(void **)(a1 + 24));
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B17CCFC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17CD20C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B17CD014(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17CD258(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t *sub_1B17CD068(uint64_t *a1, uint64_t *a2, int a3, int a4, uint64_t a5, int a6, CFX::RG::Resource *a7, CFX::RG::Pass *a8, uint64_t a9)
{
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  CFX::RG::Resource *v21;
  uint64_t v22;
  uint64_t *CopyPass;
  CFX::RG::Resource *v24;
  _QWORD v26[2];
  __int16 v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  _QWORD v38[2];
  __int16 v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  int v43;

  v17 = *a2;
  v38[0] = "Reflection probe radiance pass";
  v38[1] = v17;
  v39 = 0;
  v40 = a4;
  v41 = a5;
  v42 = a6 != 1;
  v43 = a6;
  v18 = (uint64_t *)sub_1B17CD2B4(a1, a1, (uint64_t)v38);
  v18[52] = (uint64_t)a7;
  CFX::RG::Pass::readFrom(v18, a7);
  if (a8)
    CFX::RG::Pass::dependsOn(v18, a8);
  if (a6 == 1)
  {
    *(_QWORD *)&v32 = v18[53];
    DWORD2(v32) = 0;
    v33 = a9;
    v34 = a3;
    v35 = 1;
    CopyPass = (uint64_t *)CFX::RG::makeCopyPass(a1, (uint64_t)"Copy radiance pass", &v32);
    CFX::RG::Pass::dependsOn(CopyPass, (CFX::RG::Pass *)v18);
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)&v32 = "Reflection probe box blur pass";
    *((_QWORD *)&v32 + 1) = v19;
    LOWORD(v33) = 0;
    v34 = a4;
    v36 = a5;
    v37 = 5;
    v20 = (uint64_t *)sub_1B17CD308(a1, a1, (uint64_t)&v32);
    v21 = (CFX::RG::Resource *)v18[53];
    v20[52] = (uint64_t)v21;
    CFX::RG::Pass::readFrom(v20, v21);
    v22 = *a2;
    v26[0] = "Reflection probe convert cube pass";
    v26[1] = v22;
    v27 = 0;
    v28 = 1;
    v29 = a5;
    v30 = a3;
    v31 = 5;
    CopyPass = (uint64_t *)sub_1B17CD35C(a1, (uint64_t)a1, (uint64_t)v26);
    v24 = (CFX::RG::Resource *)v20[53];
    CopyPass[52] = (uint64_t)v24;
    CFX::RG::Pass::readFrom(CopyPass, v24);
    CopyPass[53] = a9;
    CFX::RG::Pass::renderTo((uint64_t)CopyPass, a9, 0x100000000, 0);
  }
  return CopyPass;
}

uint64_t sub_1B17CD20C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v7 = sub_1B179C1C0(v10, 0x1B0u, 0x10u);
  return sub_1B17CB8F0(v7, *a3, a3[1], v8, a5);
}

uint64_t sub_1B17CD258(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x238u, 8u);
  return sub_1B17B5394(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B17CD2B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17CD3B0(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B17CD308(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17CD40C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B17CD35C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17CD468(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B17CD3B0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1B0u, 8u);
  return sub_1B17CA360(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B17CD40C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1B0u, 8u);
  return sub_1B17CACF0(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B17CD468(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v7 = sub_1B179C1C0(v10, 0x1B0u, 8u);
  return sub_1B17CB270(v7, *a3, a3[1], v8, a5);
}

uint64_t sub_1B17CD4B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17CD508(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B17CD508(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1B0u, 8u);
  return sub_1B17C9F6C(v8, *a3, a3[1], a4, a5);
}

_QWORD *sub_1B17CD564(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CFE48;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B17CD59C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CFE48;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B17CD5E4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CFC48;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  return a1;
}

void sub_1B17CD628(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CFC48;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B17CD67C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63D01D8;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B17CD6B4(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63D01D8;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

void sub_1B17CD6FC(unsigned int *a1, int a2, int a3)
{
  unsigned int *v4;
  unsigned int *v5;
  double v6;
  unsigned int v7;
  void *v8;

  v4 = (unsigned int *)*((_QWORD *)a1 + 1);
  v5 = a1 + 4;
  v6 = 1.5;
  if (a3)
    v6 = 1.0;
  v7 = (v6 * (double)(a1[1] + a2));
  v8 = malloc_type_malloc(4 * v7, 0xD5346062uLL);
  memset(v8, 255, 4 * v7);
  memcpy(v8, v4, 4 * *a1);
  *((_QWORD *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v5)
    free(v4);
}

uint64_t sub_1B17CD7B4(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  uint64_t v9;
  id v11[24];
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v8 = sub_1B179C1C0(v12, 0xE0u, 8u);
  v9 = *a3;
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc((uint64_t)v11, a4);
  CFX::RG::Resource::Resource(v8, v9, v11, *a5);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v11);
  return v8;
}

void sub_1B17CD83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a9);
  _Unwind_Resume(a1);
}

double sub_1B17CD854(uint64_t a1, __n128 *a2, _QWORD *a3, _QWORD *a4, __n128 *a5, int a6, double result)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  float32x4_t v19;
  int8x16_t v20;
  uint64_t v21;
  float32x4_t *v22;
  _DWORD *v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  if (a6)
  {
    *(double *)v15.i64 = MEMORY[0x1E0C80A78](a1, a2);
    v17 = (char *)v33 - v16;
    if (v18 >= 1)
    {
      v19 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3);
      v20.i64[0] = 0x8000000080000000;
      v20.i64[1] = 0x8000000080000000;
      v21 = v14;
      v22 = (float32x4_t *)a2;
      v23 = v17;
      do
      {
        v24 = *v22++;
        v25 = (int8x16_t)v24;
        v26 = vmulq_f32(v15, v24);
        v27 = (int8x16_t)vaddq_f32(v19, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))));
        *(float *)v25.i32 = fmaxf(fabsf(*(float *)v27.i32) - v24.f32[3], 0.0);
        *v23++ = vbslq_s8(v20, v25, v27).u32[0];
        --v21;
      }
      while (v21);
    }
    MEMORY[0x1E0C80A78](v12, v13);
    v30 = (__int16 *)((char *)v33 - v29);
    v31 = 0;
    v32 = 2 * a6;
    do
    {
      v30[v31] = v31;
      ++v31;
      v32 -= 2;
    }
    while (v32);
    v33[0] = v28;
    sub_1B17D28D8((uint64_t)v33 - v29, (__int16 *)((char *)v33 + 2 * a6 - v29), v33, 126 - 2 * __clz(a6), 1);
    sub_1B17CDA08(a3, v30, a6);
    sub_1B17CDA08(a4, v30, a6);
    sub_1B17CDAE8(a2, v30, a6);
    *(_QWORD *)&result = sub_1B17CDAE8(a5, v30, a6).n128_u64[0];
  }
  return result;
}

void *sub_1B17CDA08(_QWORD *a1, __int16 *a2, int a3)
{
  __int16 *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  size_t v12;
  size_t v13;
  void *result;
  uint64_t v15;
  _QWORD v16[2];

  v4 = a2;
  v5 = a1;
  v16[1] = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)v16 - v9;
  if (v8 >= 0x200)
    v8 = 512;
  v11 = v8 >= 8 * v7;
  v12 = v8 - 8 * v7;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  bzero(&v10[8 * v7], v13);
  result = memcpy(v10, v5, 8 * a3);
  if (a3 >= 1)
  {
    do
    {
      v15 = *v4++;
      *v5++ = *(_QWORD *)&v10[8 * v15];
      --v6;
    }
    while (v6);
  }
  return result;
}

__n128 sub_1B17CDAE8(__n128 *a1, __int16 *a2, int a3)
{
  __int16 *v4;
  __n128 *v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  uint64_t v9;
  _QWORD v10[2];

  v4 = a2;
  v5 = a1;
  v10[1] = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = &v10[-2 * v6];
  memcpy(v7, v5, 16 * a3);
  if (a3 >= 1)
  {
    do
    {
      v9 = *v4++;
      result = *(__n128 *)&v7[2 * v9];
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

double sub_1B17CDB98(uint64_t a1, float32x4_t *a2, _QWORD *a3, _QWORD *a4, int a5, double result)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x2_t v14;
  uint64_t v15;
  float *v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  uint64_t v21;
  float *v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    *(double *)v13.i64 = MEMORY[0x1E0C80A78](a1, a2);
    v16 = (float *)((char *)v44 - v15);
    if (v17 >= 1)
    {
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
      v19 = vnegq_f32(v13);
      v20 = a2 + 2;
      v21 = v12;
      v22 = v16;
      do
      {
        v23 = v20[-2];
        v24 = v20[-1];
        v25 = v20->f32[0];
        v14.i32[0] = v20->i32[1];
        v20 += 3;
        v26 = vmulq_f32(v13, v23);
        v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL);
        v28 = (int32x4_t)vmlaq_f32(vmulq_f32(v27, v19), v24, v18);
        v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL);
        v30 = vmlaq_f32(vmulq_f32(v27, vnegq_f32(v29)), v24, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL));
        v31 = vmulq_f32(v30, v30);
        v26.f32[0] = v13.f32[3]
                   + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
        v31.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), v31)).u64[0];
        v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 0);
        v32.i32[3] = 0;
        v33 = vrsqrteq_f32(v32);
        v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL);
        v35 = vmulq_f32(v33, vrsqrtsq_f32(v32, vmulq_f32(v33, v33)));
        v36 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v31.f32[0] != 0.0)), 0x1FuLL));
        v36.i32[3] = 0;
        v37 = vmulq_f32(v13, vmlsq_lane_f32(vmlaq_n_f32(v23, v24, v25), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v36), (int8x16_t)vmulq_f32(v34, vmulq_f32(v35, vrsqrtsq_f32(v32, vmulq_f32(v35, v35)))), (int8x16_t)v34), v14, 0));
        v37.f32[0] = v13.f32[3]
                   + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0];
        v24.f32[0] = v26.f32[0] * v37.f32[0];
        v38 = fminf(v26.f32[0], v37.f32[0]);
        if (v24.f32[0] < 0.0)
          v38 = 0.0;
        *v22++ = v38;
        --v21;
      }
      while (v21);
    }
    MEMORY[0x1E0C80A78](v10, v11);
    v41 = (__int16 *)((char *)v44 - v40);
    v42 = 0;
    v43 = 2 * a5;
    do
    {
      v41[v42] = v42;
      ++v42;
      v43 -= 2;
    }
    while (v43);
    v44[0] = v39;
    sub_1B17D28D8((uint64_t)v44 - v40, (__int16 *)((char *)v44 + 2 * a5 - v40), v44, 126 - 2 * __clz(a5), 1);
    sub_1B17CDA08(a3, v41, a5);
    sub_1B17CDA08(a4, v41, a5);
    *(_QWORD *)&result = sub_1B17CDDEC(a2, v41, a5).n128_u64[0];
  }
  return result;
}

__n128 sub_1B17CDDEC(_OWORD *a1, __int16 *a2, int a3)
{
  __int16 *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  __n128 result;
  int v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD v14[2];

  v4 = a2;
  v5 = a1;
  v14[1] = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v14[-2 * v7];
  memcpy(v8, v5, 48 * v9);
  if (a3 >= 1)
  {
    do
    {
      v11 = *v4++;
      v12 = &v8[6 * v11];
      v13 = *((_OWORD *)v12 + 1);
      *v5 = *(_OWORD *)v12;
      v5[1] = v13;
      result = *((__n128 *)v12 + 2);
      v5[2] = result;
      v5 += 3;
      --v6;
    }
    while (v6);
  }
  return result;
}

double sub_1B17CDEBC(_OWORD *a1, _QWORD *a2, _QWORD *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  int v13;
  float *v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    v12 = (float *)((char *)v25 - v11);
    if (v13 >= 1)
    {
      v14 = (float *)a1 + 18;
      v15 = v10;
      v16 = v12;
      do
      {
        v17 = *(v14 - 2) * *(v14 - 1);
        v18 = *v14;
        v14 += 20;
        *v16++ = (float)(v18 * v17) * 8.0;
        --v15;
      }
      while (v15);
    }
    MEMORY[0x1E0C80A78](v8, v9);
    v21 = (__int16 *)((char *)v25 - v20);
    v22 = 0;
    v23 = 2 * a4;
    do
    {
      v21[v22] = v22;
      ++v22;
      v23 -= 2;
    }
    while (v23);
    v25[0] = v19;
    sub_1B17D3618((uint64_t)v25 - v20, (__int16 *)((char *)v25 + 2 * a4 - v20), v25, 126 - 2 * __clz(a4), 1);
    sub_1B17CDA08(a2, v21, a4);
    sub_1B17CDA08(a3, v21, a4);
    *(_QWORD *)&result = sub_1B17CE02C(a1, v21, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1B17CE02C(_OWORD *a1, __int16 *a2, int a3)
{
  __int16 *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  __n128 result;
  int v11;
  _QWORD *v12;
  __int128 v13;
  _QWORD v14[2];

  v4 = a2;
  v5 = a1;
  v14[1] = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v14[-2 * v7];
  memcpy(v8, v5, 80 * v9);
  if (a3 >= 1)
  {
    do
    {
      v11 = *v4++;
      v12 = &v8[10 * v11];
      v13 = *((_OWORD *)v12 + 3);
      v5[2] = *((_OWORD *)v12 + 2);
      v5[3] = v13;
      v5[4] = *((_OWORD *)v12 + 4);
      result = *((__n128 *)v12 + 1);
      *v5 = *(_OWORD *)v12;
      v5[1] = result;
      v5 += 5;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_1B17CE100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  simd_float4 *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  const __CFDictionary *v9;
  __n128 *v10;
  float32x4_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  _BYTE *v61;
  _BYTE *v62;
  float *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  unsigned int v72;
  const CFX::RG::Resource *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t *v81;
  unsigned int v82;
  uint64_t v87;
  char *v88;
  float32x4_t *v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  simd_float4 v122;
  simd_float4 v123;
  simd_float4 v124;
  float32x4_t *v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  uint64_t v130;
  uint64_t v131;
  int32x4_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x4_t v135;
  simd_float4 v136;
  simd_float4 *v137;
  simd_float4 *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float v168;
  uint64_t v169;
  float32x4_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int32 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  __n128 *v187;
  __n128 *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __n128 v196;
  float32x4_t v197;
  float32x4_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  float32x4_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  float32x4_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  simd_float4 *v229;
  float32x4_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  uint64_t v242;
  uint64_t v243;
  _OWORD *v244;
  float v245;
  float v246;
  char v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  const void *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  const void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __n128 v287;
  __n128 v288;
  __n128 v289;
  __n128 v290;
  uint64_t v291;
  simd_float4 *v292;
  simd_float4 v293;
  simd_float4 v294;
  simd_float4 v295;
  simd_float4 v296;
  simd_float4 v297;
  simd_float4 v298;
  simd_float4 *v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  uint64_t v304;
  simd_float4 v305;
  simd_float4 v306;
  simd_float4 v307;
  simd_float4 v308;
  simd_float4 v309;
  simd_float4 v310;
  __int128 v311;
  _OWORD *v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  unsigned int v316;
  uint64_t v317;
  __int128 *v318;
  __int128 v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  float v328;
  float v329;
  float v330;
  int32x2_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  int32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  int32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  int8x16_t v352;
  int8x16_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int8x16_t v356;
  float32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  float v360;
  float v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned __int8 *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  float32x4_t *v388;
  uint64_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t *v394;
  float32x4_t *v395;
  float32x4_t *v396;
  simd_float4 v397;
  simd_float4 v398;
  simd_float4 v399;
  simd_float4 v400;
  float v402;
  int8x16_t v403;
  float32x2_t v404;
  float v405;
  float32x2_t v406;
  float32x2_t v407;
  float32x2_t v408;
  uint64_t v409;
  int32x2_t v410;
  uint64_t v411;
  const char *v412;
  float32x2_t v413;
  float32x2_t v414;
  float32x2_t v415;
  uint64_t v416;
  simd_float4 v417;
  simd_float4 v418;
  simd_float4 v419;
  simd_float4 *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int v440;
  unsigned int v441;
  void *v442;
  void *v443;
  void **v444;
  uint64_t *v445;
  uint64_t v446;
  int v447;
  __n128 *v448;
  int v449;
  _BOOL4 v450;
  float32x4_t v451;
  uint64_t v452;
  uint64_t v453;
  float32x4_t v454;
  int v455;
  float32x4_t v456;
  float32x4_t v457;
  unsigned __int8 *v458;
  float32x4_t v459;
  const void *v460;
  float32x4_t v461;
  uint64_t v462;
  double v463;
  float32x4_t v464;
  simd_float4x4 v465;
  float32x4_t v466;
  simd_float4 v467;
  simd_float4 v468;
  simd_float4 v469;
  simd_float4 v470;
  simd_float4 v471;
  simd_float4 v472;
  simd_float4 v473;
  simd_float4x4 v474;
  simd_float4 v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  int v479;
  simd_float4 *v480;
  unint64_t v481;
  float32x4_t v482;
  uint64_t v483;
  float32x4_t v484;
  float32x4_t v485;
  uint64_t v486;
  float32x4_t v487;
  unsigned int v488;
  _OWORD *v489;
  float32x4_t v490;
  uint64_t v491;
  simd_float4x4 v492[2];
  uint64_t v493;
  _QWORD v494[4];
  __int128 v495;
  __int128 v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  uint64_t *v501;
  _OWORD *v502;
  _OWORD *v503;
  _OWORD *v504;
  int v505;
  _OWORD v506[6];
  _QWORD v507[4];
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  __int128 v513;
  uint64_t *v514;
  float32x4_t *v515;
  _OWORD *v516;
  _OWORD *v517;
  int v518;
  _OWORD v519[6];
  _QWORD v520[4];
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  uint64_t *v527;
  __n128 *v528;
  _OWORD *v529;
  _OWORD *v530;
  int v531;
  _QWORD v532[7];
  uint64_t v533;
  uint64_t *v534;
  uint64_t v535;
  int v536;
  simd_float4x4 v537;
  simd_float4x4 v538;
  _DWORD v539[24];
  _BYTE v540[992];
  _BYTE v541[5120];
  _OWORD v542[128];
  _OWORD v543[128];
  uint64_t v544;
  simd_float4x4 v545;
  simd_float4x4 v546;
  simd_float4x4 v547;
  simd_float4x4 v548;
  simd_float4x4 v549;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = (simd_float4 *)v2;
  v440 = v4;
  v6 = (__int128 *)v5;
  v544 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)v7[1];
  v486 = *v7;
  v9 = (const __CFDictionary *)v7[2];
  v437 = v7[3];
  v10 = (__n128 *)v7[4];
  v11 = (float32x4_t *)v7[5];
  v489 = (_OWORD *)v7[6];
  v453 = sub_1B1813884((uint64_t)v8, v5, v4, (uint64_t)v7, v2, v12, v13, v14);
  memset(v543, 0, 512);
  memset(v542, 0, 512);
  v533 = 0;
  v534 = &v533;
  v535 = 0x2020000000;
  v536 = 0;
  v15 = MEMORY[0x1E0C809B0];
  v532[0] = MEMORY[0x1E0C809B0];
  v532[1] = 3221225472;
  v532[2] = sub_1B17CF5D4;
  v532[3] = &unk_1E63D56B8;
  v532[4] = &v533;
  v532[5] = v542;
  v532[6] = v543;
  v438 = (uint64_t)v8;
  sub_1B1794224(v9, v8, (uint64_t)v532, v16, v17, v18, v19, v20);
  v21 = *((unsigned int *)v534 + 6);
  v520[0] = v15;
  v520[1] = 3221225472;
  v520[2] = sub_1B17CF628;
  v520[3] = &unk_1E63D56E0;
  v22 = v6[3];
  v523 = v6[2];
  v524 = v22;
  v23 = v6[5];
  v525 = v6[4];
  v526 = v23;
  v24 = v6[1];
  v521 = *v6;
  v522 = v24;
  v527 = &v533;
  v25 = v21;
  v448 = v10;
  v528 = v10;
  v531 = v21;
  v529 = v542;
  v530 = v543;
  v446 = (uint64_t)v9;
  sub_1B1796794((uint64_t)v9, (uint64_t)v520);
  LODWORD(v26) = v25;
  HIDWORD(v26) = *((_DWORD *)v534 + 6) - v25;
  v3[5].i64[1] = v26;
  sub_1B1814484((uint64_t)v8, 0, v27, v28, v29, v30, v31, v32);
  v33 = v6[3];
  v519[2] = v6[2];
  v519[3] = v33;
  v34 = v6[5];
  v519[4] = v6[4];
  v519[5] = v34;
  v35 = v6[1];
  v519[0] = *v6;
  v519[1] = v35;
  sub_1B17CD854((uint64_t)v519, v10, (_QWORD *)v543 + v25, (_QWORD *)v542 + v25, (__n128 *)&v541[16 * v25 + 1024], v3[5].i16[6], *(double *)v519);
  v439 = v25;
  v36 = *((unsigned int *)v534 + 6);
  v507[0] = v15;
  v507[1] = 3221225472;
  v507[2] = sub_1B17CF70C;
  v507[3] = &unk_1E63D5708;
  v37 = v6[3];
  v510 = v6[2];
  v511 = v37;
  v38 = v6[5];
  v512 = v6[4];
  v513 = v38;
  v39 = v6[1];
  v508 = *v6;
  v509 = v39;
  v514 = &v533;
  v515 = v11;
  v518 = v36;
  v516 = v542;
  v517 = v543;
  sub_1B17968D0((uint64_t)v9, (uint64_t)v507);
  v40 = *((_DWORD *)v534 + 6) - v36;
  v3[6].i64[0] = __PAIR64__(v40, v36);
  v41 = v6[3];
  v506[2] = v6[2];
  v506[3] = v41;
  v42 = v6[5];
  v506[4] = v6[4];
  v506[5] = v42;
  v43 = v6[1];
  v506[0] = *v6;
  v506[1] = v43;
  sub_1B17CDB98((uint64_t)v506, v11, (_QWORD *)v543 + v36, (_QWORD *)v542 + v36, (__int16)v40, *(double *)v506);
  v44 = *((unsigned int *)v534 + 6);
  v494[0] = v15;
  v494[1] = 3221225472;
  v494[2] = sub_1B17CF94C;
  v494[3] = &unk_1E63D5730;
  v45 = v6[3];
  v497 = v6[2];
  v498 = v45;
  v46 = v6[5];
  v499 = v6[4];
  v500 = v46;
  v47 = v6[1];
  v495 = *v6;
  v496 = v47;
  v502 = v489;
  v501 = &v533;
  v505 = v44;
  v503 = v542;
  v504 = v543;
  v48 = (uint64_t)v9;
  sub_1B179856C((uint64_t)v9, (uint64_t)v494);
  v49 = *((_DWORD *)v534 + 6) - v44;
  v3[6].i64[1] = __PAIR64__(v49, v44);
  sub_1B17CDEBC(v489, (_QWORD *)v543 + v44, (_QWORD *)v542 + v44, (__int16)v49);
  v442 = (void *)sub_1B1813BC4((uint64_t)v8, v50, v51, v52, v53, v54, v55, v56);
  v443 = (void *)objc_msgSend_resourceManager(v442, v57, v58, v59);
  if (v440)
  {
    v60 = (_OWORD *)(v486 + 8208);
    v61 = v540;
    v62 = v541;
    v63 = (float *)v539;
    v64 = v440;
    do
    {
      v65 = v60[1];
      *(_OWORD *)v62 = *v60;
      *((_OWORD *)v62 + 1) = v65;
      v66 = v60[3];
      *((_OWORD *)v62 + 2) = v60[2];
      *((_OWORD *)v62 + 3) = v66;
      v545 = *(simd_float4x4 *)v62;
      v482 = *(float32x4_t *)v62;
      v487 = (float32x4_t)v545.columns[1];
      v490 = (float32x4_t)v545.columns[2];
      v546 = __invert_f4(*(simd_float4x4 *)v62);
      v67 = vmulq_f32(v482, v482);
      v68 = vmulq_f32(v487, v487);
      v69 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1)));
      v70 = vmulq_f32(v490, v490);
      v69.f32[0] = sqrtf(v69.f32[0]);
      v69.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).f32[0]);
      v69.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).f32[0]);
      v71 = vabsq_f32(v69);
      *v63++ = fmaxf(fmaxf(v71.f32[0], v71.f32[2]), v71.f32[1]);
      *(simd_float4x4 *)(v61 - 32) = v546;
      v61 += 64;
      v62 += 64;
      v60 += 4;
      --v64;
    }
    while (v64);
  }
  v72 = *((_DWORD *)v534 + 6);
  if (v72 <= 1)
    v72 = 1;
  v3[8].i32[2] = v72;
  sub_1B1868B34(v437, 368 * v440 * (unint64_t)v72, v492);
  v3[7] = v492[0].columns[0];
  v3[8].i64[0] = v492[0].columns[1].i64[0];
  v73 = (const CFX::RG::Resource *)sub_1B179859C(v48);
  v80 = v440;
  if (v73)
    v3[9].i64[0] = (uint64_t)sub_1B1815AE8((uint64_t)v8, v73, v74, v75, v76, v77, v78, v79);
  v81 = v534;
  if (!*((_DWORD *)v534 + 6))
    goto LABEL_110;
  v82 = 0;
  v481 = 0;
  v452 = v3[7].i64[0] + 128;
  __asm { FMOV            V0.4S, #1.0 }
  v447 = DWORD2(_Q0);
  v480 = v3;
  v491 = v3[7].i64[0];
  do
  {
    if (!v80)
      goto LABEL_109;
    v87 = 0;
    v88 = (char *)v3 + 8 * v481;
    v479 = v481 * v440;
    v444 = (void **)(v88 + 216);
    v445 = (uint64_t *)(v88 + 152);
    v441 = v82;
    v488 = v82;
    do
    {
      v89 = (float32x4_t *)*((_QWORD *)v542 + v481);
      v90 = *((_QWORD *)v543 + v481);
      v91 = v479 + v87;
      v483 = v491 + 368 * (v479 + v87);
      v92 = v480[6].i64[1];
      if (v481 < v92 || v481 >= (v92 + HIDWORD(v480[6].i64[1])))
      {
        if (v89)
        {
          v94 = sub_1B186064C((uint64_t)v89, (uint64_t)v73, v74, v75, v76, v77, v78, v79);
          sub_1B1861194(v89, v95, v96, v97, v98, v99, v100, v101, v102, v103);
          *(_QWORD *)&v105 = v104;
          DWORD2(v105) = v106;
          HIDWORD(v105) = *(_DWORD *)(v483 + 12);
          *(_OWORD *)v483 = v105;
          *(float *)(v483 + 12) = sub_1B185F6D4((uint64_t)v89, v106, v107, v108, v109, v110, v111, v112);
          v460 = (const void *)v90;
          v120 = sub_1B1869AC8(v90, v113, v114, v115, v116, v117, v118, v119);
          v121 = 0;
          v122 = *(simd_float4 *)(v120 + 16);
          v123 = *(simd_float4 *)(v120 + 32);
          v124 = *(simd_float4 *)(v120 + 48);
          v125 = (float32x4_t *)&v541[64 * v87];
          v126 = *v125;
          v127 = v125[1];
          v128 = v125[2];
          v129 = v125[3];
          v130 = v452 + 368 * v488;
          v538.columns[0] = *(simd_float4 *)v120;
          v538.columns[1] = v122;
          v538.columns[2] = v123;
          v538.columns[3] = v124;
          do
          {
            v492[0].columns[v121] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v126, COERCE_FLOAT(*(_OWORD *)&v538.columns[v121])), v127, *(float32x2_t *)v538.columns[v121].f32, 1), v128, (float32x4_t)v538.columns[v121], 2), v129, (float32x4_t)v538.columns[v121], 3);
            ++v121;
          }
          while (v121 != 4);
          v465 = v492[0];
          v131 = v491 + 368 * v91;
          v132 = (int32x4_t)vmulq_f32((float32x4_t)v492[0].columns[2], (float32x4_t)v492[0].columns[2]);
          v132.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v132, 2), vadd_f32(*(float32x2_t *)v132.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v132.i8, 1))).u32[0];
          v133 = vrsqrte_f32((float32x2_t)v132.u32[0]);
          v134 = vmul_f32(v133, vrsqrts_f32((float32x2_t)v132.u32[0], vmul_f32(v133, v133)));
          v135 = vmulq_n_f32((float32x4_t)v492[0].columns[2], vmul_f32(v134, vrsqrts_f32((float32x2_t)v132.u32[0], vmul_f32(v134, v134))).f32[0]);
          *(simd_float4 *)(v131 + 16) = v492[0].columns[3];
          *(float32x4_t *)(v131 + 32) = v135;
          v136.f32[0] = sub_1B185FA80((uint64_t)v89, 1, *(float *)&v539[v87]);
          v137 = (simd_float4 *)(v491 + 368 * v91);
          v137[4] = v136;
          v138 = v137 + 4;
          *(_BYTE *)(v491 + 368 * v91 + 352) = sub_1B185FE0C((uint64_t)v89, v139, v140, v141, v142, v143, v144, v145);
          if (v94 == 5)
          {
            switch(v89[20].i8[0])
            {
              case 0:
                v138->i32[0] = v89[21].i32[0];
                break;
              case 1:
              case 2:
                if ((v89[19].i8[0] & 1) != 0)
                  v245 = 1.0;
                else
                  v245 = 0.0;
                v138->f32[2] = v245;
                v138->i64[0] = v89[21].i64[0];
                break;
              case 3:
                *v138 = (simd_float4)v89[21];
                break;
              case 4:
                if ((v89[19].i8[0] & 1) != 0)
                  v246 = 1.0;
                else
                  v246 = 0.0;
                v138->f32[1] = v246;
                v138->i32[0] = v89[22].u8[0];
                break;
              default:
                break;
            }
            *(simd_float4x4 *)(v491 + 368 * v91 + 192) = v465;
          }
          else if (v94 == 3)
          {
            sub_1B185FB00((uint64_t)v89);
            v138[1].i64[0] = v153;
          }
          *(_BYTE *)(v491 + 368 * v91 + 52) = v94;
          v247 = sub_1B185F51C((uint64_t)v89, v146, v147, v148, v149, v150, v151, v152);
          v248 = v491 + 368 * v91;
          *(_BYTE *)(v248 + 53) = v247;
          v458 = (unsigned __int8 *)(v248 + 53);
          if (v481 <= 7)
          {
            if (sub_1B185F4D4((uint64_t)v89, (uint64_t)v73, v74, v75, v76, v77, v78, v79))
              v455 = sub_1B185F484((uint64_t)v89);
            else
              v455 = 0;
            v449 = sub_1B185F474((uint64_t)v89, v249, v250, v251, v252, v253, v254, v255);
            v450 = sub_1B186105C((uint64_t)v89);
            if (v455)
            {
              v256 = sub_1B17985A4(v446, v460);
              if ((_DWORD)v256)
              {
                v462 = sub_1B17985E4(v446, v256, v257, v258, v259, v260, v261, v262);
                v270 = (const void *)sub_1B18626CC((uint64_t)v89, v263, v264, v265, v266, v267, v268, v269);
                v278 = sub_1B1862714((uint64_t)v89, v271, v272, v273, v274, v275, v276, v277);
                v279 = memcpy((void *)(v491 + 368 * v91 + 256), v270, 16 * v278);
                v287 = *(__n128 *)(v462 + 64);
                v288 = *(__n128 *)(v462 + 80);
                v289 = *(__n128 *)(v462 + 96);
                v290 = *(__n128 *)(v462 + 112);
                if (v94 == 1)
                {
                  v291 = 0;
                  v292 = (simd_float4 *)&v539[16 * v87 + 16];
                  v293 = v292[1];
                  v294 = v292[2];
                  v295 = v292[3];
                  v538.columns[0] = *v292;
                  v538.columns[1] = v293;
                  v538.columns[2] = v294;
                  v538.columns[3] = v295;
                  do
                  {
                    v492[0].columns[v291] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v287, COERCE_FLOAT(*(_OWORD *)&v538.columns[v291])), (float32x4_t)v288, *(float32x2_t *)v538.columns[v291].f32, 1), (float32x4_t)v289, (float32x4_t)v538.columns[v291], 2), (float32x4_t)v290, (float32x4_t)v538.columns[v291], 3);
                    ++v291;
                  }
                  while (v291 != 4);
                  v296 = v492[0].columns[1];
                  v297 = v492[0].columns[2];
                  v298 = v492[0].columns[3];
                  v299 = (simd_float4 *)(v491 + 368 * v91);
                  v299[12] = v492[0].columns[0];
                  v299[13] = v296;
                  v299[14] = v297;
                  v299[15] = v298;
                  *(double *)v300.i64 = sub_1B1796A6C();
                  v304 = 0;
                  v305 = *(simd_float4 *)(v462 + 144);
                  v306 = *(simd_float4 *)(v462 + 160);
                  v307 = *(simd_float4 *)(v462 + 176);
                  v538.columns[0] = *(simd_float4 *)(v462 + 128);
                  v538.columns[1] = v305;
                  v538.columns[2] = v306;
                  v538.columns[3] = v307;
                  do
                  {
                    v492[0].columns[v304] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v300, COERCE_FLOAT(*(_OWORD *)&v538.columns[v304])), v301, *(float32x2_t *)v538.columns[v304].f32, 1), v302, (float32x4_t)v538.columns[v304], 2), v303, (float32x4_t)v538.columns[v304], 3);
                    ++v304;
                  }
                  while (v304 != 4);
                  v308 = v492[0].columns[1];
                  v309 = v492[0].columns[2];
                  v310 = v492[0].columns[3];
                  v138[1] = v492[0].columns[0];
                  v138[2] = v308;
                  v138[3] = v309;
                  v138[4] = v310;
                  v138[5].i32[0] = *(_DWORD *)(v462 + 200);
                }
                else
                {
                  *(double *)&v311 = sub_1B1796A80(v287, v288, v289, v290, *(__n128 *)(v462 + 128), *(__n128 *)(v462 + 144), *(__n128 *)(v462 + 160), *(__n128 *)(v462 + 176), (uint64_t)v279, v280, v281, v282, v283, v284, v285, v286, *(__n128 *)&v539[16 * v87 + 16], *(__n128 *)&v539[16 * v87 + 20], *(__n128 *)&v539[16 * v87 + 24],
                                       *(__n128 *)&v540[64 * v87 + 16]);
                  v312 = (_OWORD *)(v491 + 368 * v91);
                  v312[12] = v311;
                  v312[13] = v313;
                  v312[14] = v314;
                  v312[15] = v315;
                  if (v94 == 2)
                  {
                    v316 = sub_1B185F610((uint64_t)v89, (uint64_t)v256, v257, v258, v259, v260, v261, v262);
                    if (v316)
                    {
                      v317 = v316;
                      v318 = (__int128 *)(v462 + 208);
                      do
                      {
                        v319 = *(v318 - 1);
                        HIDWORD(v319) = *(_DWORD *)(v130 - 52);
                        *(_OWORD *)(v130 - 64) = v319;
                        v320 = *v318;
                        HIDWORD(v320) = *(_DWORD *)(v130 + 12);
                        *(_OWORD *)v130 = v320;
                        v130 += 16;
                        v318 += 24;
                        --v317;
                      }
                      while (v317);
                    }
                  }
                }
              }
              if (*v458 >= 2u)
              {
                v463 = sub_1B1860108((uint64_t)v89, (uint64_t)v256, v257, v258, v259, v260, v261, v262);
                v328 = sub_1B185F578((uint64_t)v89, v321, v322, v323, v324, v325, v326, v327);
                v329 = *((float *)&v463 + 1);
                if (*(float *)&v463 >= *((float *)&v463 + 1))
                  v329 = *(float *)&v463;
                *(float *)(v491 + 368 * v91 + 48) = v328 / fmaxf(v329, 1.0);
              }
              v330 = sub_1B1862618((uint64_t)v89, (uint64_t)v256, v257, v258, v259, v260, v261, v262);
              if (v330 != 0.0)
                *(float *)(v483 + 12) = v330;
            }
            if (v450)
            {
              *(float *)v331.i32 = (float)(180.0
                                         / sub_1B185F878((uint64_t)v89, (uint64_t)v73, v74, v75, v76, v77, v78, v79))
                                 * 0.5;
              *(int32x2_t *)v138[1].f32 = vdup_lane_s32(v331, 0);
              v548 = __invert_f4(v465);
              v548.columns[3] = (simd_float4)vmulq_f32((float32x4_t)v548.columns[0], (float32x4_t)v548.columns[0]);
              v339 = (int32x4_t)vmulq_f32((float32x4_t)v548.columns[1], (float32x4_t)v548.columns[1]);
              v340 = (int32x4_t)vmulq_f32((float32x4_t)v548.columns[2], (float32x4_t)v548.columns[2]);
              v341 = vzip2q_s32((int32x4_t)v548.columns[3], v340);
              v342 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v548.columns[3], v340), v339);
              v548.columns[3] = (simd_float4)vtrn2q_s32((int32x4_t)v548.columns[3], v339);
              v548.columns[3].i32[2] = v340.i32[1];
              v343 = vaddq_f32((float32x4_t)vzip1q_s32(v341, vdupq_laneq_s32(v339, 2)), vaddq_f32(v342, (float32x4_t)v548.columns[3]));
              v548.columns[3].i64[0] = 0x80000000800000;
              v548.columns[3].i64[1] = 0x80000000800000;
              v344 = vcgeq_f32((float32x4_t)v548.columns[3], v343);
              v343.i32[3] = 0;
              v345 = vrsqrteq_f32(v343);
              v346 = vmulq_f32(v345, vrsqrtsq_f32(v343, vmulq_f32(v345, v345)));
              v347 = v344;
              v347.i32[3] = 0;
              v348 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v347), (int8x16_t)v343, (int8x16_t)vmulq_f32(v346, vrsqrtsq_f32(v343, vmulq_f32(v346, v346))));
              v349 = vmulq_n_f32((float32x4_t)v548.columns[0], v348.f32[0]);
              v350 = vmulq_lane_f32((float32x4_t)v548.columns[1], *(float32x2_t *)v348.f32, 1);
              v351 = vmulq_laneq_f32((float32x4_t)v548.columns[2], v348, 2);
              v352 = (int8x16_t)vuzp1q_s32((int32x4_t)v351, (int32x4_t)v351);
              v353 = (int8x16_t)vuzp1q_s32((int32x4_t)v350, (int32x4_t)v350);
              v354 = (int32x4_t)v349;
              if (v344.i32[0])
              {
                v355 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v352, (int8x16_t)v351, 0xCuLL), vnegq_f32(v350)), v351, (float32x4_t)vextq_s8(v353, (int8x16_t)v350, 0xCuLL));
                v354 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v355, v355), (int8x16_t)v355, 0xCuLL);
              }
              v356 = (int8x16_t)vuzp1q_s32((int32x4_t)v349, (int32x4_t)v349);
              v357 = v350;
              if (v344.i32[1])
              {
                v358 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v356, (int8x16_t)v349, 0xCuLL), vnegq_f32(v351)), v349, (float32x4_t)vextq_s8(v352, (int8x16_t)v351, 0xCuLL));
                v357 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v358, v358), (int8x16_t)v358, 0xCuLL);
              }
              if (v344.i32[2])
              {
                v359 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v353, (int8x16_t)v350, 0xCuLL), vnegq_f32(v349)), v350, (float32x4_t)vextq_s8(v356, (int8x16_t)v349, 0xCuLL));
                v351 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v359, v359), (int8x16_t)v359, 0xCuLL);
              }
              v360 = (float)(*(float *)v354.i32 + v357.f32[1]) + v351.f32[2];
              if (v360 > 0.0)
              {
                v361 = sqrtf(v360 + 1.0);
                v362 = (float32x4_t)vzip2q_s32((int32x4_t)v357, vuzp1q_s32((int32x4_t)v357, (int32x4_t)v351));
                v362.i32[2] = v354.i32[1];
                v363 = (float32x4_t)vtrn2q_s32((int32x4_t)v351, vzip2q_s32((int32x4_t)v351, v354));
                v363.i32[2] = v357.i32[0];
                v365 = vsubq_f32(v362, v363);
                v362.f32[3] = v361;
                v363.f32[3] = v361;
                v364 = vmulq_f32(v362, v363);
                v365.i32[3] = v364.i32[3];
                goto LABEL_84;
              }
              if (*(float *)v354.i32 >= v357.f32[1] && *(float *)v354.i32 >= v351.f32[2])
              {
                v405 = sqrtf((float)((float)(*(float *)v354.i32 + 1.0) - v357.f32[1]) - v351.f32[2]);
                v406 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v357.f32, 0);
                v407 = vadd_f32(*(float32x2_t *)v354.i8, v406);
                v406.f32[0] = v405;
                v366.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v354.u32[1], LODWORD(v405)), v406).u32[0];
                v366.i32[1] = v407.i32[1];
                v408 = (float32x2_t)vzip2q_s32(v354, (int32x4_t)v357).u64[0];
                LODWORD(v409) = vadd_f32(v408, *(float32x2_t *)v351.f32).u32[0];
                v410 = (int32x2_t)vsub_f32(v408, *(float32x2_t *)v351.f32);
                HIDWORD(v409) = v410.i32[1];
                v366.i64[1] = v409;
                *(float *)v410.i32 = 0.5 / v405;
                goto LABEL_100;
              }
              if (v357.f32[1] <= v351.f32[2])
              {
                v361 = sqrtf((float)((float)(v351.f32[2] + 1.0) - *(float *)v354.i32) - v357.f32[1]);
                v413 = (float32x2_t)vzip2q_s32(v354, (int32x4_t)v357).u64[0];
                v414 = (float32x2_t)__PAIR64__(v354.u32[1], LODWORD(v361));
                v415 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v357.f32, 0);
                *(float32x2_t *)v364.f32 = vsub_f32(*(float32x2_t *)v354.i8, v415);
                v415.f32[0] = v361;
                v415.i32[0] = vmul_f32(v414, v415).u32[0];
                v415.i32[1] = v364.i32[1];
                *(float32x2_t *)v365.f32 = vadd_f32(v413, *(float32x2_t *)v351.f32);
                *(float32x2_t *)&v365.u32[2] = v415;
LABEL_84:
                v364.f32[0] = 0.5 / v361;
                v366 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v364.f32, 0);
              }
              else
              {
                v402 = sqrtf((float)((float)(v357.f32[1] + 1.0) - *(float *)v354.i32) - v351.f32[2]);
                v403 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v354.i8, 1), v357);
                *(int32x2_t *)v357.f32 = vdup_laneq_s32((int32x4_t)v357, 2);
                v404 = vadd_f32(*(float32x2_t *)v357.f32, *(float32x2_t *)v351.f32);
                v357.f32[0] = v402;
                v357.i32[0] = vmul_f32(*(float32x2_t *)v357.f32, (float32x2_t)__PAIR64__(v351.u32[1], LODWORD(v402))).u32[0];
                v357.i32[1] = v404.i32[1];
                v410 = (int32x2_t)vsubq_f32(v351, (float32x4_t)vdupq_laneq_s32(v354, 2)).u64[0];
                v366 = (float32x4_t)vextq_s8(vextq_s8(v403, v403, 4uLL), (int8x16_t)v357, 0xCuLL);
                v366.i32[3] = v410.i32[0];
                *(float *)v410.i32 = 0.5 / v402;
LABEL_100:
                v365 = (float32x4_t)vdupq_lane_s32(v410, 0);
              }
              v138[2] = (simd_float4)vmulq_f32(v365, v366);
              v411 = sub_1B185F808((uint64_t)v89, v332, v333, v334, v335, v336, v337, v338);
              *v445 = objc_msgSend_iesTextureForProfile_renderContext_(v443, v412, v411, (uint64_t)v442);
              *v444 = 0;
              goto LABEL_102;
            }
            if (v449 && (v455 & 1) == 0)
            {
              v493 = 0;
              *v445 = sub_1B1815B58(v438, v89[17].i64[0], &v493, v75, v76, v77, v78, v79);
              *v444 = sub_1B18FD03C((uint64_t)v443, v493);
              sub_1B185F8E8((uint64_t)v89, (uint64_t)v492, v367, v368, v369, v370, v371, v372);
              v379 = sub_1B18667B4((unsigned __int8 *)v492, 0, v373, v374, v375, v376, v377, v378);
              v459 = *(float32x4_t *)v379;
              v464 = *((float32x4_t *)v379 + 1);
              v456 = *((float32x4_t *)v379 + 2);
              v451 = *((float32x4_t *)v379 + 3);
              v549 = __invert_f4(v465);
              v380 = 0;
              v537 = v549;
              do
              {
                v538.columns[v380] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v459, COERCE_FLOAT(*(_OWORD *)&v537.columns[v380])), v464, *(float32x2_t *)v537.columns[v380].f32, 1), v456, (float32x4_t)v537.columns[v380], 2), v451, (float32x4_t)v537.columns[v380], 3);
                ++v380;
              }
              while (v380 != 4);
              v471 = v538.columns[1];
              v473 = v538.columns[0];
              v467 = v538.columns[3];
              v469 = v538.columns[2];
              if (sub_1B1842B54(v89[17].i64[0]))
              {
                v388 = (float32x4_t *)sub_1B1842B0C(v89[17].i64[0], v381, v382, v383, v384, v385, v386, v387);
                v389 = 0;
                v390 = *v388;
                v391 = v388[1];
                v392 = v388[2];
                v393 = v388[3];
                v537.columns[0] = v473;
                v537.columns[1] = v471;
                v537.columns[2] = v469;
                v537.columns[3] = v467;
                v394 = (float32x4_t *)&unk_1B2244000;
                v395 = (float32x4_t *)&unk_1B2244000;
                v396 = (float32x4_t *)&unk_1B2244000;
                do
                {
                  v538.columns[v389] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v390, COERCE_FLOAT(*(_OWORD *)&v537.columns[v389])), v391, *(float32x2_t *)v537.columns[v389].f32, 1), v392, (float32x4_t)v537.columns[v389], 2), v393, (float32x4_t)v537.columns[v389], 3);
                  ++v389;
                }
                while (v389 != 4);
                v397 = v538.columns[0];
                v398 = v538.columns[1];
                v399 = v538.columns[2];
                v400 = v538.columns[3];
              }
              else
              {
                v394 = (float32x4_t *)&unk_1B2244000;
                v395 = (float32x4_t *)&unk_1B2244000;
                v396 = (float32x4_t *)&unk_1B2244000;
                v398 = v471;
                v397 = v473;
                v400 = v467;
                v399 = v469;
              }
              v416 = 0;
              v537.columns[0] = v397;
              v537.columns[1] = v398;
              v537.columns[2] = v399;
              v537.columns[3] = v400;
              do
              {
                v538.columns[v416] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v394[215], COERCE_FLOAT(*(_OWORD *)&v537.columns[v416])), v395[216], *(float32x2_t *)v537.columns[v416].f32, 1), v396[217], (float32x4_t)v537.columns[v416], 2), (float32x4_t)xmmword_1B2244DA0, (float32x4_t)v537.columns[v416], 3);
                ++v416;
              }
              while (v416 != 4);
              v417 = v538.columns[1];
              v418 = v538.columns[2];
              v419 = v538.columns[3];
              v420 = (simd_float4 *)(v491 + 368 * v91);
              v420[12] = v538.columns[0];
              v420[13] = v417;
              v420[14] = v418;
              v420[15] = v419;
              *(float *)(v483 + 12) = sub_1B1841E14(v89[17].i64[0], v381, v382, v383, v384, v385, v386, v387);
            }
          }
        }
        else
        {
          *(_OWORD *)v483 = *(_OWORD *)&v541[16 * v481 + 1024];
          v170 = (float32x4_t)v448[(v481 - v439)];
          v169 = v491 + 368 * v91;
          *(float32x4_t *)(v169 + 16) = vaddq_f32(*(float32x4_t *)&v541[64 * v87 + 48], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)&v541[64 * v87], v170.f32[0]), *(float32x4_t *)&v541[64 * v87 + 16], *(float32x2_t *)v170.f32, 1), *(float32x4_t *)&v541[64 * v87 + 32], v170, 2));
          v170.i32[0] = v170.i32[3];
          if (v170.f32[3] <= 0.01)
            v170.f32[0] = INFINITY;
          DWORD2(v171) = v447;
          *(float *)&v171 = -1.0 / v170.f32[3];
          *((float *)&v171 + 1) = (float)((float)(-1.0 / v170.f32[3]) * -0.0) + 1.0;
          *((float *)&v171 + 3) = 1.0 / (float)(v170.f32[0] * v170.f32[0]);
          *(_OWORD *)(v169 + 64) = v171;
        }
      }
      else
      {
        *(_BYTE *)(v491 + 368 * v91 + 52) = 4;
        if (v89)
        {
          if (sub_1B186064C((uint64_t)v89, (uint64_t)v73, v74, v75, v76, v77, v78, v79) != 4)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Wrong light type"), v154, v155, v156, v157, v158, v159, (uint64_t)"CFXLightGetType(light) == kCFXLightTypeProbe");
          v160 = sub_1B185F0C8((uint64_t)v89, 0, v154, v155, v156, v157, v158, v159);
          if (v160)
            v168 = sub_1B1841E14(v160, v161, v162, v163, v164, v165, v166, v167);
          else
            v168 = 1.0;
          *(float *)v483 = v168 * sub_1B185FF60((uint64_t)v89, v161, v162, v163, v164, v165, v166, v167);
          v179 = sub_1B1861A48((uint64_t)v89, v172, v173, v174, v175, v176, v177, v178);
          v187 = (__n128 *)(v491 + 368 * v91);
          v187[8].n128_u32[0] = v179;
          if ((v179 & 0x80000000) != 0)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Slice index should have been attributed already"), v181, v182, v183, v184, v185, v186, (uint64_t)"outData->parameters.probe.index >= 0");
          v187[4] = sub_1B1861998((__n128 *)v89, v180, v181, v182, v183, v184, v185, v186);
          v188 = v187 + 4;
          v196 = sub_1B18618E0((__n128 *)v89, v189, v190, v191, v192, v193, v194, v195);
          v197.i64[0] = 0x3F0000003F000000;
          v197.i64[1] = 0x3F0000003F000000;
          v484 = vmulq_f32((float32x4_t)v196, v197);
          v198 = v484;
          v198.f32[3] = fmaxf(fmaxf(v484.f32[0], v484.f32[2]), v484.f32[1]) * 0.1;
          v188[1] = (__n128)v198;
          v188[4].n128_u32[1] = sub_1B18616A4((uint64_t)v89, v199, v200, v201, v202, v203, v204, v205);
          v213 = vmulq_f32(v484, (float32x4_t)sub_1B1861764((__n128 *)v89, v206, v207, v208, v209, v210, v211, v212));
          v188[2].n128_u32[2] = v213.u32[2];
          v188[2].n128_u64[0] = v213.i64[0];
          v221 = vmulq_f32(v484, (float32x4_t)sub_1B1861818((__n128 *)v89, v214, v215, v216, v217, v218, v219, v220));
          v188[3].n128_u32[2] = v221.u32[2];
          v188[3].n128_u64[0] = v221.i64[0];
          v229 = (simd_float4 *)sub_1B1869AC8(v90, v222, v223, v224, v225, v226, v227, v228);
          v472 = v229[1];
          v475 = *v229;
          v468 = v229[3];
          v470 = v229[2];
          *(simd_float4 *)(v491 + 368 * v91 + 16) = v468;
          v230 = (float32x4_t *)&v541[64 * v87];
          v485 = *v230;
          v477 = v230[2];
          v478 = v230[1];
          v476 = v230[3];
          *(double *)v238.i64 = sub_1B187BC38(v453, v231, v232, v233, v234, v235, v236, v237);
          v454 = v240;
          v457 = v239;
          v461 = v241;
          v466 = v238;
          v242 = 0;
          v538.columns[0] = v475;
          v538.columns[1] = v472;
          v538.columns[2] = v470;
          v538.columns[3] = v468;
          do
          {
            v492[0].columns[v242] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v485, COERCE_FLOAT(*(_OWORD *)&v538.columns[v242])), v478, *(float32x2_t *)v538.columns[v242].f32, 1), v477, (float32x4_t)v538.columns[v242], 2), v476, (float32x4_t)v538.columns[v242], 3);
            ++v242;
          }
          while (v242 != 4);
          v547 = __invert_f4(v492[0]);
          v243 = 0;
          v538 = v547;
          do
          {
            v492[0].columns[v243] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v466, COERCE_FLOAT(*(_OWORD *)&v538.columns[v243])), v461, *(float32x2_t *)v538.columns[v243].f32, 1), v457, (float32x4_t)v538.columns[v243], 2), v454, (float32x4_t)v538.columns[v243], 3);
            ++v243;
          }
          while (v243 != 4);
          v474 = v492[0];
        }
        v244 = (_OWORD *)(v491 + 368 * v91);
        v244[12] = v474.columns[0];
        v244[13] = v474.columns[1];
        v244[14] = v474.columns[2];
        v244[15] = v474.columns[3];
      }
LABEL_102:
      ++v87;
      ++v488;
    }
    while (v87 != v440);
    v81 = v534;
    v3 = v480;
    v80 = v440;
    v82 = v441;
LABEL_109:
    v82 += v80;
    ++v481;
  }
  while (v481 < *((unsigned int *)v81 + 6));
LABEL_110:
  v421 = v439;
  if (!(_DWORD)v439)
    goto LABEL_123;
  v422 = 0;
  v423 = (uint64_t *)v542;
  v424 = v439;
  do
  {
    v425 = *v423;
    if (sub_1B186064C(*v423, (uint64_t)v73, v74, v75, v76, v77, v78, v79) == 5
      && *(_BYTE *)(v425 + 320) == 4)
    {
      v422 += 8 * *(unsigned __int8 *)(v425 + 352);
    }
    ++v423;
    --v424;
  }
  while (v424);
  if (v422)
  {
    memset(v492, 0, 24);
    sub_1B1868B34(v437, v422, v492);
    v433 = &v3[18].i64[1];
    v434 = (uint64_t *)v542;
    do
    {
      v435 = *v434;
      if (sub_1B186064C(*v434, v426, v427, v428, v429, v430, v431, v432) == 5
        && *(_BYTE *)(v435 + 320) == 4)
      {
        memcpy((void *)(v492[0].columns[0].i64[0] + *v433), *(const void **)(v435 + 360), 8 * *(unsigned __int8 *)(v435 + 352));
      }
      ++v434;
      ++v433;
      --v421;
    }
    while (v421);
    v436 = v492[0].columns[1].i64[0];
    v3[17].i64[1] = v492[0].columns[0].i64[1];
    v3[18].i64[0] = v436;
  }
  else
  {
LABEL_123:
    v3[17].i64[1] = 0;
  }
  _Block_object_dispose(&v533, 8);
}

void sub_1B17CF518(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x5A0], 8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B17CF5D4(_QWORD *result, unsigned int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v4 = a2;
    do
    {
      v5 = *(unsigned int *)(*(_QWORD *)(result[4] + 8) + 24);
      if (v5 > 0xFF)
        break;
      v6 = *a4++;
      *(_QWORD *)(result[5] + 8 * v5) = v6;
      v7 = *a3++;
      v8 = result[6];
      v9 = *(_QWORD *)(result[4] + 8);
      v10 = *(unsigned int *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v10 + 1;
      *(_QWORD *)(v8 + 8 * v10) = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1B17CF628(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v6;
  float32x4_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float32x4_t v11;
  float32x4_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[6];

  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v6 = 0;
      v7 = *(float32x4_t *)(a5 + 16 * i);
      v8 = *(_OWORD *)(result + 80);
      v18[2] = *(_OWORD *)(result + 64);
      v18[3] = v8;
      v9 = *(_OWORD *)(result + 112);
      v18[4] = *(_OWORD *)(result + 96);
      v18[5] = v9;
      v10 = *(_OWORD *)(result + 48);
      v18[0] = *(_OWORD *)(result + 32);
      v18[1] = v10;
      while (1)
      {
        v11 = (float32x4_t)v18[v6];
        v12 = vmulq_f32(v7, v11);
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)))).f32[0] < (float)-v7.f32[3])break;
        if (++v6 == 6)
        {
          v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 128) + 8) + 24);
          if (v13 > 0xFF)
            return result;
          *(float32x4_t *)(*(_QWORD *)(result + 136) + 16 * (v13 - *(_DWORD *)(result + 160))) = v7;
          *(_QWORD *)(*(_QWORD *)(result + 144)
                    + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(result + 128) + 8) + 24)) = *(_QWORD *)(a4 + 8 * i);
          v14 = *(_QWORD *)(a3 + 8 * i);
          v15 = *(_QWORD *)(result + 152);
          v16 = *(_QWORD *)(*(_QWORD *)(result + 128) + 8);
          v17 = *(unsigned int *)(v16 + 24);
          *(_DWORD *)(v16 + 24) = v17 + 1;
          *(_QWORD *)(v15 + 8 * v17) = v14;
          break;
        }
      }
    }
  }
  return result;
}

void sub_1B17CF70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x2_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[6];

  if ((_DWORD)a2)
  {
    v12 = 0;
    v13 = (_OWORD *)(a1 + 32);
    v14 = a2;
    do
    {
      if ((sub_1B185F4D4(*(_QWORD *)(a4 + 8 * v12), a2, a3, a4, a5, a6, a7, a8) & 1) == 0
        && (sub_1B185F474(*(_QWORD *)(a4 + 8 * v12), a2, a3, a4, a5, a6, a7, a8) & 1) == 0
        && sub_1B185FC40(*(_QWORD *)(a4 + 8 * v12), a2, a3, a4, a5, a6, a7, a8) > 0.0)
      {
        v15 = 0;
        v16 = a5 + 48 * v12;
        v17 = *(float32x4_t *)v16;
        v18 = *(float32x4_t *)(v16 + 16);
        v19 = *(int32x2_t *)(v16 + 32);
        v20 = *(_QWORD *)(v16 + 40);
        v21 = v13[3];
        v48[2] = v13[2];
        v48[3] = v21;
        v22 = v13[5];
        v48[4] = v13[4];
        v48[5] = v22;
        v23 = v13[1];
        v48[0] = *v13;
        v48[1] = v23;
        v24 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL);
        v25 = vmlaq_n_f32(v17, v18, *(float *)v19.i32);
        v26 = (float32x4_t)vdupq_lane_s32(v19, 1);
        while (1)
        {
          v27 = (float32x4_t)v48[v15];
          v28 = vmulq_f32(v17, v27);
          v29 = v27.f32[3];
          v30 = v27.f32[3]
              + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0];
          v31 = (int32x4_t)vmlaq_f32(vmulq_f32(v24, vnegq_f32(v27)), v18, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL));
          v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL);
          v33 = vmlaq_f32(vmulq_f32(v24, vnegq_f32(v32)), v18, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL));
          v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL);
          v35 = vmulq_f32(v33, v33);
          v35.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), v35)).u64[0];
          v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0);
          v36.i32[3] = 0;
          v37 = vrsqrteq_f32(v36);
          v38 = vmulq_f32(v37, vrsqrtsq_f32(v36, vmulq_f32(v37, v37)));
          v39 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v35.f32[0] != 0.0)), 0x1FuLL));
          v39.i32[3] = 0;
          v40 = vmulq_f32(v27, vmlsq_f32(v25, v26, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v39), (int8x16_t)vmulq_f32(vmulq_f32(v38, vrsqrtsq_f32(v36, vmulq_f32(v38, v38))), v34), (int8x16_t)v34)));
          v41 = v29
              + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0];
          if ((float)(v30 * v41) >= 0.0 && fminf(v30, v41) < 0.0)
            break;
          if (++v15 == 6)
          {
            v42 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24);
            if (v42 > 0xFF)
              return;
            v43 = *(_QWORD *)(a1 + 136) + 48 * (v42 - *(_DWORD *)(a1 + 160));
            *(float32x4_t *)v43 = v17;
            *(float32x4_t *)(v43 + 16) = v18;
            *(int32x2_t *)(v43 + 32) = v19;
            *(_QWORD *)(v43 + 40) = v20;
            *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24)) = *(_QWORD *)(a4 + 8 * v12);
            v44 = *(_QWORD *)(a3 + 8 * v12);
            v45 = *(_QWORD *)(a1 + 152);
            v46 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
            v47 = *(unsigned int *)(v46 + 24);
            *(_DWORD *)(v46 + 24) = v47 + 1;
            *(_QWORD *)(v45 + 8 * v47) = v44;
            break;
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
}

void sub_1B17CF94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  float32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v51[6];

  if ((_DWORD)a2)
  {
    v11 = 0;
    v12 = (_OWORD *)(a1 + 32);
    v13 = a2;
    do
    {
      if (sub_1B1861474(*(_QWORD *)(a4 + 8 * v11), a2, a3, a4, a5, a6, a7, a8) != 1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Wrong probe type"), v15, v16, v17, v18, v19, v20, (uint64_t)"CFXLightGetProbeType(lights[i]) == kCFXLightProbeTypeRadiance");
      if (sub_1B185FEC0(*(_QWORD *)(a4 + 8 * v11), v14, v15, v16, v17, v18, v19, v20) > 0.0)
      {
        v21 = sub_1B185F0C8(*(_QWORD *)(a4 + 8 * v11), 0, a3, a4, a5, a6, a7, a8);
        if (!v21 || sub_1B1841E14(v21, a2, a3, a4, a5, a6, a7, a8) > 0.0)
        {
          v23 = 0;
          v24 = (float32x4_t *)(a5 + 80 * v11);
          v25 = *v24;
          v26 = v24[1];
          v27 = v24[2];
          v28 = v24[3];
          v29 = v24[4];
          *(float *)v22.i32 = fmaxf(fmaxf(v29.f32[0], COERCE_FLOAT(v24[4].i64[1])), COERCE_FLOAT(HIDWORD(v24[4].i64[0])))* 0.1;
          v30 = vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(v22, 0));
          v30.i32[3] = v29.i32[3];
          v31 = v12[3];
          v51[2] = v12[2];
          v51[3] = v31;
          v32 = v12[5];
          v51[4] = v12[4];
          v51[5] = v32;
          v33 = v12[1];
          v51[0] = *v12;
          v51[1] = v33;
          while (1)
          {
            v34 = (float32x4_t)v51[v23];
            v35 = (int32x4_t)vmulq_f32(v26, v34);
            v36 = (int32x4_t)vmulq_f32(v27, v34);
            v37 = (int32x4_t)vmulq_f32(v28, v34);
            v38 = (int32x4_t)vmulq_f32(v25, v34);
            v39 = vzip1q_s32(v35, v37);
            v40 = vzip2q_s32(v35, v37);
            v41 = vzip1q_s32(v36, v38);
            v42 = vzip2q_s32(v36, v38);
            v43 = vaddq_f32((float32x4_t)vzip2q_s32(v40, v42), vaddq_f32((float32x4_t)vzip1q_s32(v40, v42), vaddq_f32((float32x4_t)vzip1q_s32(v39, v41), (float32x4_t)vzip2q_s32(v39, v41))));
            v44 = vabsq_f32(vmulq_f32(v30, v43));
            if (v43.f32[3] <= (float)-vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1), v44)).f32[0])break;
            if (++v23 == 6)
            {
              v45 = (float32x4_t *)(*(_QWORD *)(a1 + 136)
                                  + 80
                                  * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24)
                                                 - *(_DWORD *)(a1 + 160)));
              *v45 = v25;
              v45[1] = v26;
              v45[2] = v27;
              v45[3] = v28;
              v45[4] = v30;
              *(_QWORD *)(*(_QWORD *)(a1 + 144)
                        + 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24)) = *(_QWORD *)(a4 + 8 * v11);
              v46 = *(_QWORD *)(a3 + 8 * v11);
              v47 = *(_QWORD *)(a1 + 152);
              v48 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8);
              v49 = *(unsigned int *)(v48 + 24);
              *(_DWORD *)(v48 + 24) = v49 + 1;
              *(_QWORD *)(v47 + 8 * v49) = v46;
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 24) > 0xFFu)
                return;
              break;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
}

float32x4_t sub_1B17CFB60(float32x4_t *a1, unsigned int a2, unsigned int a3, unsigned __int32 a4, float32x4_t *a5, uint32x4_t a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t result;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  a6.i64[0] = __PAIR64__(a3, a2);
  a6.i32[2] = a4;
  v6 = a1[1];
  v7 = vmulq_f32(v6, vcvtq_f32_u32(a6));
  result = vaddq_f32(v6, v7);
  v9 = vmlaq_laneq_f32(a1[35], vsubq_f32(a1[39], a1[35]), v7, 2);
  v10 = vmlaq_laneq_f32(a1[36], vsubq_f32(a1[40], a1[36]), v7, 2);
  v11 = vsubq_f32(vmlaq_laneq_f32(a1[33], vsubq_f32(a1[37], a1[33]), v7, 2), v9);
  v12 = vmlaq_lane_f32(v9, v11, *(float32x2_t *)v7.f32, 1);
  v13 = vsubq_f32(vmlaq_laneq_f32(a1[34], vsubq_f32(a1[38], a1[34]), v7, 2), v10);
  v14 = vmlaq_lane_f32(v9, v11, *(float32x2_t *)result.f32, 1);
  v15 = vsubq_f32(vmlaq_lane_f32(v10, v13, *(float32x2_t *)v7.f32, 1), v12);
  *a5 = vmlaq_n_f32(v12, v15, v7.f32[0]);
  a5[1] = vmlaq_n_f32(v12, v15, result.f32[0]);
  v16 = vsubq_f32(vmlaq_lane_f32(v10, v13, *(float32x2_t *)result.f32, 1), v14);
  a5[2] = vmlaq_n_f32(v14, v16, v7.f32[0]);
  a5[3] = vmlaq_n_f32(v14, v16, result.f32[0]);
  v17 = vmlaq_laneq_f32(a1[35], vsubq_f32(a1[39], a1[35]), result, 2);
  v18 = vmlaq_laneq_f32(a1[36], vsubq_f32(a1[40], a1[36]), result, 2);
  v19 = vsubq_f32(vmlaq_laneq_f32(a1[33], vsubq_f32(a1[37], a1[33]), result, 2), v17);
  v20 = vmlaq_lane_f32(v17, v19, *(float32x2_t *)v7.f32, 1);
  v21 = vsubq_f32(vmlaq_laneq_f32(a1[34], vsubq_f32(a1[38], a1[34]), result, 2), v18);
  v22 = vmlaq_lane_f32(v17, v19, *(float32x2_t *)result.f32, 1);
  v23 = vsubq_f32(vmlaq_lane_f32(v18, v21, *(float32x2_t *)v7.f32, 1), v20);
  a5[4] = vmlaq_n_f32(v20, v23, v7.f32[0]);
  a5[5] = vmlaq_n_f32(v20, v23, result.f32[0]);
  v24 = vsubq_f32(vmlaq_lane_f32(v18, v21, *(float32x2_t *)result.f32, 1), v22);
  a5[6] = vmlaq_n_f32(v22, v24, v7.f32[0]);
  a5[7] = vmlaq_n_f32(v22, v24, result.f32[0]);
  return result;
}

uint64_t sub_1B17CFC70(uint64_t a1, void *__src, size_t __n)
{
  int v3;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  size_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v3 = __n;
  v6 = __n;
  v7 = *(_DWORD *)(a1 + 512);
  v8 = v7 + __n;
  v9 = *(unsigned int *)(a1 + 516);
  v10 = v7;
  if (v8 >= v9)
  {
    if ((_DWORD)v9)
      v11 = *(_DWORD *)(a1 + 516);
    else
      v11 = 4096;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v8);
    *(_QWORD *)(a1 + 504) = CStackAllocatorReallocate(*(_QWORD *)(a1 + 2784), *(_QWORD *)(a1 + 504), v9, v12, 16);
    *(_QWORD *)(a1 + 656) = CStackAllocatorReallocate(*(_QWORD *)(a1 + 2784), *(_QWORD *)(a1 + 656), 4 * *(unsigned int *)(a1 + 516), 4 * v12, 16);
    *(_DWORD *)(a1 + 516) = v12;
    v10 = *(_DWORD *)(a1 + 512);
  }
  memcpy((void *)(*(_QWORD *)(a1 + 504) + v10), __src, v6);
  v19 = *(unsigned int *)(a1 + 512);
  if (v19 < v8)
  {
    v20 = v7 + v3 - v19;
    do
    {
      v21 = *(_QWORD *)(a1 + 504);
      v22 = *(unsigned __int8 *)(v21 + v19);
      v23 = a1 + 4 * v22;
      v24 = *(_DWORD *)(v23 + 664);
      if (v24)
      {
        if (*(unsigned __int8 *)(v21 + (v24 - 1)) != (_DWORD)v22)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. first light was not of the same index"), v13, v14, v15, v16, v17, v18, (uint64_t)"ctx.packedIndices.data[fl - 1] == li");
        v25 = a1 + 4 * v22;
        v26 = *(_DWORD *)(v25 + 1688);
        if (!v26)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. end index should be set already"), v13, v14, v15, v16, v17, v18, (uint64_t)"pl != 0");
        v27 = (v26 - 1);
        if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 504) + v27) != (_DWORD)v22)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. previous light was not of the same index"), v13, v14, v15, v16, v17, v18, (uint64_t)"ctx.packedIndices.data[pl - 1] == li");
        v28 = *(_QWORD *)(a1 + 656);
        *(_DWORD *)(v28 + 4 * v27) = v19 + 1;
        *(_DWORD *)(v28 + 4 * v19) = 0;
        *(_DWORD *)(v25 + 1688) = v19 + 1;
        if (*(_DWORD *)(v28 + 4 * v19) > v8)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. nextIndex out of range"), v13, v14, v15, v16, v17, v18, (uint64_t)"ctx.nextIndex[i] <= newIndicesCount");
      }
      else
      {
        *(_DWORD *)(v23 + 664) = v19 + 1;
        *(_DWORD *)(a1 + 4 * v22 + 1688) = v19 + 1;
        *(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * v19) = 0;
      }
      ++v19;
      --v20;
    }
    while (v20);
    LODWORD(v19) = *(_DWORD *)(a1 + 512);
  }
  *(_DWORD *)(a1 + 512) = v8;
  return (unsigned __int16)v19;
}

uint64_t sub_1B17CFE74(uint64_t a1, unsigned __int8 *__src, size_t __n, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;

  v11 = *(_DWORD *)(a1 + 4 * *__src + 664);
  if (!v11)
    return sub_1B17CFC70(a1, __src, __n);
  v12 = *(_DWORD *)(a1 + 512);
  v13 = __n - 1;
  while (1)
  {
    v14 = v11 - 1;
    if (__n < 2)
    {
      v18 = 1;
    }
    else
    {
      v15 = 0;
      v16 = v12 - v11;
      if (v12 < v11)
        v16 = 0;
      v17 = v16 + 1 - 1;
      while (v17 != v15 && *(unsigned __int8 *)(*(_QWORD *)(a1 + 504) + v11 + v15) == __src[v15 + 1])
      {
        if (v13 == ++v15)
          return (unsigned __int16)v14;
      }
      v18 = v15 + 1;
    }
    if (v18 == (_DWORD)__n)
      break;
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * v14);
    if (v11 > v12)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. nextIndex out of range"), __n, a4, a5, a6, a7, a8, (uint64_t)"ctx.nextIndex[i] <= indicesCount");
      v11 = *(_DWORD *)(*(_QWORD *)(a1 + 656) + 4 * v14);
    }
    if (!v11)
      return sub_1B17CFC70(a1, __src, __n);
  }
  return (unsigned __int16)v14;
}

uint64_t sub_1B17CFFB4(uint64_t a1, char **a2, void *__src, size_t __n)
{
  unsigned int v4;
  size_t v7;
  int v8;
  unsigned int v9;
  char *v10;
  int v11;
  unsigned int v12;
  uint64_t result;

  v4 = __n;
  v8 = *((_DWORD *)a2 + 2);
  v7 = *((unsigned int *)a2 + 3);
  v9 = v8 + __n;
  if (v8 + (int)__n >= v7)
  {
    if ((_DWORD)v7)
      v11 = *((_DWORD *)a2 + 3);
    else
      v11 = 4096;
    do
    {
      v12 = v11;
      v11 *= 2;
    }
    while (v12 < v9);
    v10 = (char *)CStackAllocatorReallocate(a1, (unint64_t)*a2, v7, v12, 16);
    *a2 = v10;
    *((_DWORD *)a2 + 3) = v12;
    v8 = *((_DWORD *)a2 + 2);
  }
  else
  {
    v10 = *a2;
  }
  memcpy(&v10[v8], __src, v4);
  result = *((unsigned __int16 *)a2 + 4);
  *((_DWORD *)a2 + 2) = v9;
  return result;
}

_DWORD *sub_1B17D0050(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  _DWORD *result;
  uint64_t i;
  uint64_t v16;
  int v17;
  _DWORD v18[256];
  _DWORD v19[256];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  bzero(v19, 0x400uLL);
  v7 = 0;
  if ((_DWORD)v6)
  {
    v8 = v6;
    v9 = a2;
    do
    {
      v11 = *v9++;
      v10 = v11;
      if (v11)
        ++v7;
      ++v19[v10];
      --v8;
    }
    while (v8);
  }
  bzero(v18, 0x400uLL);
  v12 = 0;
  v13 = 0;
  do
  {
    v13 += v19[v12];
    v18[++v12] = v13;
  }
  while (v12 != 255);
  result = CStackAllocatorAllocate(a1, 4 * v7);
  if ((_DWORD)v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v16 = a2[i];
      if ((_DWORD)v16)
      {
        v17 = v18[v16];
        v18[v16] = v17 + 1;
        result[(v6 + ~v17)] = i;
      }
    }
  }
  *a3 = v7;
  return result;
}

uint64_t sub_1B17D0180(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;

  v6 = *(_DWORD *)a1 * *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = (v6 * v7);
  v28 = v6 * v7;
  v9 = (unsigned int *)CStackAllocatorAllocate(*(_QWORD *)(a1 + 2784), 4 * v8);
  v10 = v9;
  if ((_DWORD)v8)
  {
    v11 = 0;
    do
    {
      if (a3 == 8)
        v12 = HIBYTE(*(unsigned __int16 *)(a2 + 2 * v11 + 2))
            + *(_WORD *)(a2 + 2 * v11 + 2)
            + *(unsigned __int8 *)(a2 + 2 * v11 + 4);
      else
        v12 = HIBYTE(*(unsigned __int16 *)(a2 + v11 + 2)) + *(_WORD *)(a2 + v11 + 2);
      v9[v11 / 4] = v12;
      v11 += 4;
    }
    while (4 * v8 != v11);
  }
  result = (uint64_t)sub_1B17D0050(*(_QWORD *)(a1 + 2784), v9, (unsigned int *)&v28);
  v20 = v28;
  if (v28)
  {
    v21 = (unsigned int *)result;
    do
    {
      v23 = *v21++;
      v22 = v23;
      v24 = v10[v23];
      if (!(_DWORD)v24)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Should be non empty"), v14, v15, v16, v17, v18, v19, (uint64_t)"count > 0");
      v25 = *(_QWORD *)(a1 + 488);
      if (a3 == 8)
      {
        v26 = 8 * v22;
        v27 = (unsigned __int8 *)(v25 + (unsigned __int16)*(_QWORD *)(a2 + 8 * v22));
      }
      else
      {
        v26 = 4 * v22;
        v27 = (unsigned __int8 *)(v25 + *(unsigned __int16 *)(a2 + 4 * v22));
      }
      result = sub_1B17CFE74(a1, v27, v24, v15, v16, v17, v18, v19);
      *(_WORD *)(a2 + v26) = result;
      --v20;
    }
    while (v20);
  }
  return result;
}

float32x4_t *sub_1B17D02CC(float32x4_t *result, unsigned int a2)
{
  __int32 *v2;
  __int32 v3;
  float32x4_t *v4;
  int v5;
  const float *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int32 v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float v48;
  BOOL v49;
  char *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58[4];
  float32x4_t v59[4];

  v2 = &result->i32[a2 & 3];
  v3 = *v2;
  if (*v2)
  {
    v4 = result;
    v5 = 0;
    v6 = (const float *)(v2 + 4);
    v7 = vld1q_dup_f32(v6);
    v52 = v7;
    v53 = result[((2 * a2) | 1) + 2];
    v8 = 0uLL;
    v51 = vsubq_f32(vnegq_f32(result[2 * a2 + 2]), v53);
    v9 = vmlaq_f32(v53, (float32x4_t)0, v51);
    v10 = (int32x4_t)vmulq_f32(v9, v9);
    v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
    *(float32x2_t *)v7.f32 = vrsqrte_f32((float32x2_t)v10.u32[0]);
    *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
    v11 = (int32x4_t)vmulq_n_f32(v9, vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32))).f32[0]);
    v12 = (uint64_t *)&result[171] + a2;
    v13 = result[9].i64[0] + 32;
    do
    {
      v14 = *v12;
      v15 = v4[173].i32[2];
      v56 = (float32x4_t)v11;
      v57 = vaddq_f32(v52, v8);
      v16 = vmlaq_f32(v53, v51, v57);
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
      v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      v55 = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
      v59[0] = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 0);
      v59[1] = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 1);
      v59[2] = (float32x4_t)vdupq_laneq_s32(v11, 2);
      v59[3] = (float32x4_t)vdupq_laneq_s32(v11, 3);
      v54 = vnegq_f32(v55);
      v20 = (char *)(v14 + 4 * (v15 * v5));
      v58[0] = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
      v58[1] = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1);
      v58[2] = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2);
      v58[3] = (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3);
      bzero(v20, (4 * v15));
      sub_1B17DDB08((float32x4_t *)v4[9].i64[1], v4[10].i32[0], v59, v58, v4[10].i64[1]);
      memcpy(&v20[4 * v4[169].i64[1]], (const void *)v4[10].i64[1], v4[11].u32[0]);
      sub_1B17DD7B4((float32x4_t *)v4[11].i64[1], v4[12].i32[0], v59, v58, v4[12].i64[1]);
      result = (float32x4_t *)memcpy(&v20[4 * v4[170].i64[0]], (const void *)v4[12].i64[1], v4[13].u32[0]);
      v21 = v4[170].u32[3];
      if ((int)v21 >= 1)
      {
        v22 = 0;
        v23 = (float32x4_t *)v13;
        do
        {
          v24 = v23[-2];
          v25 = v23[-1];
          v26 = v23[1];
          v27 = v23[2];
          v28 = (int32x4_t)vmulq_f32(v56, v25);
          v29 = (int32x4_t)vmulq_f32(v56, *v23);
          v30 = (int32x4_t)vmulq_f32(v56, v26);
          v31 = (int32x4_t)vmulq_f32(v56, v24);
          v32 = vzip1q_s32(v28, v30);
          v33 = vzip2q_s32(v28, v30);
          v34 = vzip1q_s32(v29, v31);
          v35 = vzip2q_s32(v29, v31);
          v36 = vaddq_f32((float32x4_t)vzip2q_s32(v33, v35), vaddq_f32((float32x4_t)vzip1q_s32(v33, v35), vaddq_f32((float32x4_t)vzip1q_s32(v32, v34), (float32x4_t)vzip2q_s32(v32, v34))));
          v37 = vabsq_f32(vmulq_f32(v27, v36));
          v49 = v36.f32[3] > (float)-vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1), v37)).f32[0];
          v38 = (int32x4_t)vmulq_f32(v25, v54);
          v39 = (int32x4_t)vmulq_f32(*v23, v54);
          v40 = (int32x4_t)vmulq_f32(v26, v54);
          v41 = (int32x4_t)vmulq_f32(v24, v54);
          v42 = vzip1q_s32(v38, v40);
          v43 = vzip2q_s32(v38, v40);
          v44 = vzip1q_s32(v39, v41);
          v45 = vzip2q_s32(v39, v41);
          v46 = vaddq_f32((float32x4_t)vzip2q_s32(v43, v45), vaddq_f32((float32x4_t)vzip1q_s32(v43, v45), vaddq_f32((float32x4_t)vzip1q_s32(v42, v44), (float32x4_t)vzip2q_s32(v42, v44))));
          v47 = vabsq_f32(vmulq_f32(v27, v46));
          v48 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1), v47)).f32[0];
          v49 = v49 && v46.f32[3] > v48;
          if (v49)
          {
            v50 = &v20[4 * v4[170].i64[1]];
            v50[v22 >> 3] |= 1 << (v22 & 7);
          }
          ++v22;
          v23 += 5;
        }
        while (v21 != v22);
      }
      ++v5;
      v11 = (int32x4_t)v55;
      v8 = v57;
    }
    while (v5 != v3);
  }
  return result;
}

double sub_1B17D05DC(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = xmmword_1B2245BC0;
  *(_QWORD *)(a1 + 16) = 0x4000000040;
  *(_QWORD *)&result = 0x40000000400;
  *(_OWORD *)(a1 + 32) = xmmword_1B2245BD0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

id *sub_1B17D0608(id *a1)
{
  uint64_t i;
  id *v3;
  id v4;
  id v5;

  for (i = 0; i != 7; ++i)
  {
    v3 = &a1[i];
    v4 = a1[i + 9];
    if (v4)
    {
      CFRelease(v4);
      v3[9] = 0;
    }
    v5 = v3[16];
    if (v5)
    {
      CFRelease(v5);
      v3[16] = 0;
    }
  }
  return a1;
}

uint64_t sub_1B17D0680(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint32x4_t *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  float v36;
  float32x4_t v37;
  uint32x2_t v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  double v47;
  __int128 v48;
  __int32 v49;
  int v50;
  char v51;
  size_t v52;
  float32x4_t v53;
  uint64_t v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  unsigned int v58;
  double v59;
  double v60;
  double v61;
  __n128 v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  float32x4_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v73;
  size_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int *v81;
  int *v82;
  int *v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  int v91;
  _DWORD *v92;
  int *v93;
  int *v94;
  int *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float v109;
  float32x4_t v110;
  unsigned int v111;
  _BYTE *v112;
  _DWORD *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  float v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  int v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x2_t v135;
  uint64_t v136;
  uint32x4_t v137;
  uint64_t v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  int v142;
  float v143;
  float32x4_t v144;
  float32x4_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  _BYTE *v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  int v154;
  float32x4_t *v155;
  float v156;
  float32x4_t v157;
  float32x4_t v158;
  float v159;
  float32x4_t v160;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  uint64_t v168;
  unsigned int v169;
  __int16 v170;
  _WORD *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  int v179;
  void **v180;
  unsigned int *v181;
  float *v182;
  __int8 v183;
  unsigned int v184;
  float32x4_t v185;
  float32x4_t v186;
  __int8 v187;
  __int32 v188;
  unsigned __int32 v189;
  uint64_t v190;
  int v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  unsigned int v204;
  int v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  _DWORD *v209;
  uint64_t v210;
  _DWORD *v211;
  float32x4_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  float32x4_t v218;
  char v219;
  float32x4_t v220;
  uint64_t v221;
  float32x4_t v222;
  double v223;
  float32x4_t v224;
  float v225;
  float32x4_t v226;
  __int128 v227;
  uint64_t v228;
  _OWORD v229[5];
  _QWORD v230[4];
  int64x2_t v231;
  _OWORD v232[5];
  _OWORD v233[6];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _OWORD *v238;
  int32x4_t *v239;
  _OWORD *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  _OWORD v247[8];
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  int32x4_t *v264;
  int32x4_t *v265;
  _OWORD *v266;
  void *Aligned;
  unsigned int v268;
  void *v269;
  unsigned int v270;
  void *v271;
  unsigned int v272;
  void *v273;
  unsigned int v274;
  _BYTE v275[256];
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  char *v280[3];
  unsigned int v281;
  float32x4_t v282[136];
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD v286[2];
  uint64_t v287;
  _DWORD *v288;
  int *v289;
  unsigned int v290;
  int v291[2];
  _OWORD v292[1280];
  int32x4_t v293[768];
  _OWORD v294[256];
  uint64_t v295;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v223 = v2;
  v14 = (uint32x4_t *)v13;
  v16 = v15;
  v295 = *MEMORY[0x1E0C80C00];
  *((_OWORD *)v15 + 21) = 0u;
  *((_OWORD *)v15 + 22) = 0u;
  *((_OWORD *)v15 + 19) = 0u;
  *((_OWORD *)v15 + 20) = 0u;
  *((_OWORD *)v15 + 17) = 0u;
  *((_OWORD *)v15 + 18) = 0u;
  *((_OWORD *)v15 + 15) = 0u;
  *((_OWORD *)v15 + 16) = 0u;
  *((_OWORD *)v15 + 13) = 0u;
  *((_OWORD *)v15 + 14) = 0u;
  *((_OWORD *)v15 + 11) = 0u;
  *((_OWORD *)v15 + 12) = 0u;
  *((_OWORD *)v15 + 9) = 0u;
  *((_OWORD *)v15 + 10) = 0u;
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  *((_OWORD *)v15 + 5) = 0u;
  *((_OWORD *)v15 + 6) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  *(_OWORD *)v15 = 0u;
  v17 = *(_QWORD *)(v9 + 12648);
  v18 = *(_OWORD *)(v9 + 5696);
  v243 = *(_OWORD *)(v9 + 5680);
  v244 = v18;
  v19 = *(_OWORD *)(v9 + 5728);
  v245 = *(_OWORD *)(v9 + 5712);
  v246 = v19;
  v20 = *(_OWORD *)(v9 + 5664);
  v241 = *(_OWORD *)(v9 + 5648);
  v242 = v20;
  v234 = v9;
  v235 = v17;
  v236 = v7;
  v237 = v3;
  v238 = v294;
  v239 = v293;
  v240 = v292;
  v21 = *(_OWORD *)(v9 + 5664);
  v233[0] = *(_OWORD *)(v9 + 5648);
  v233[1] = v21;
  v22 = *(_OWORD *)(v9 + 5680);
  v23 = *(_OWORD *)(v9 + 5696);
  v24 = *(_OWORD *)(v9 + 5728);
  v233[4] = *(_OWORD *)(v9 + 5712);
  v233[5] = v24;
  v233[2] = v22;
  v233[3] = v23;
  sub_1B17CE100(v13, (uint64_t)v233);
  result = sub_1B1796048(v8);
  if ((_DWORD)result)
  {
    v181 = (unsigned int *)sub_1B1814AC0(v17, v26, v27, v28, v29, v30, v31, v32);
    CStackAllocatorPushFrame(v181);
    v34 = vcvtq_f32_u32(*v14);
    v35 = v14[1].i64[0];
    if ((_DWORD)v35)
    {
      v36 = (float)v35 * v12;
      v16[20] = v36;
      v38.i32[1] = HIDWORD(v223);
      v37.f32[0] = (float)LODWORD(v223) / v36;
      v37.i32[1] = v34.i32[1];
      v37.i64[1] = v34.i64[1];
      v38.i32[0] = (float)(v36 * ceilf(v37.f32[0]));
      v34 = v37;
    }
    else
    {
      v38 = *(uint32x2_t *)&v223;
    }
    if (HIDWORD(v35))
    {
      v39 = (float)HIDWORD(v35) * v12;
      v40.i32[0] = v34.i32[0];
      v40.f32[1] = (float)v38.u32[1] / v39;
      v16[21] = v39;
      v40.i64[1] = v34.i64[1];
      v38.i32[1] = (float)(v39 * ceilf(v40.f32[1]));
      v34 = v40;
    }
    v180 = v6;
    *(uint32x2_t *)v33.f32 = vcvt_u32_f32(vrndp_f32(*(float32x2_t *)v34.f32));
    v41 = v33;
    v41.i32[2] = v34.f32[2];
    v224 = v41;
    __asm { FMOV            V1.4S, #1.0 }
    v220 = vdivq_f32(_Q1, v34);
    _Q1.f32[0] = *(double *)(v10 + 12656);
    v47 = *(double *)(v10 + 12664);
    *(float *)&v47 = v47;
    *(float32x2_t *)&v48 = vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)v33.f32), vcvt_f32_u32(v38));
    *(float *)&v47 = _Q1.f32[0] - *(float *)&v47;
    _Q1.f32[0] = vmuls_lane_f32(_Q1.f32[0], v34, 2);
    v34.i32[0] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u32[0];
    v34.i32[1] = _Q1.i32[0];
    *((float32x2_t *)&v48 + 1) = vdiv_f32(*(float32x2_t *)v34.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v47, 0));
    *((float32x4_t *)v16 + 3) = v220;
    *((_OWORD *)v16 + 4) = v48;
    v184 = v34.f32[2];
    v188 = v33.i32[1];
    v218 = v33;
    v49 = v33.i32[0];
    v191 = *((_DWORD *)v16 + 27);
    if (v191)
      v50 = 8;
    else
      v50 = 4;
    v179 = v50;
    if (v191)
      v51 = 3;
    else
      v51 = 2;
    v52 = (v33.i32[1] * v34.f32[2] * v33.i32[0]) << v51;
    sub_1B1868B34(v4, v52, &v256);
    *(float32x4_t *)v16 = v256;
    *((_QWORD *)v16 + 2) = v257.i64[0];
    v190 = *(_QWORD *)v16;
    bzero(*(void **)v16, v52);
    bzero(&v266, 0xA60uLL);
    v53 = v224;
    v256 = v224;
    v257 = v220;
    v260 = v243;
    v261 = v244;
    v262 = v245;
    v263 = v246;
    v258 = v241;
    v259 = v242;
    v264 = (int32x4_t *)v294;
    v265 = v293;
    v266 = v292;
    *(_QWORD *)v291 = v181;
    v54 = *((_QWORD *)v16 + 11);
    v221 = v54;
    v55 = HIDWORD(v54);
    v268 = (HIDWORD(v54) + 3) >> 2;
    if ((HIDWORD(v54) + 3) >= 4)
    {
      Aligned = CStackAllocatorAllocateAligned((uint64_t)v181, (unint64_t)((HIDWORD(v54) + 3) >> 2) << 6, 16, 2);
      sub_1B17DDA40((uint64_t)Aligned, v264, v55);
      v270 = (v268 + 1) >> 1;
      v56 = CStackAllocatorAllocateAligned((uint64_t)v181, v270, 16, 2);
      v53 = v224;
      v269 = v56;
    }
    v182 = v16;
    v57 = *((_QWORD *)v16 + 12);
    v217 = v57;
    v58 = HIDWORD(v57);
    v272 = (HIDWORD(v57) + 3) >> 2;
    if ((HIDWORD(v57) + 3) >= 4)
    {
      v271 = CStackAllocatorAllocateAligned((uint64_t)v181, (unint64_t)((HIDWORD(v57) + 3) >> 2) << 7, 16, 2);
      sub_1B17DD684((uint64_t)v271, v293, v58, v59, v60, v61, v62);
      v274 = (v272 + 1) >> 1;
      v63 = CStackAllocatorAllocateAligned((uint64_t)v181, v274, 16, 2);
      v53 = v224;
      v273 = v63;
    }
    v64 = 0;
    HIDWORD(v65) = HIDWORD(v217);
    LODWORD(v65) = (v55 + 31) >> 5;
    HIDWORD(v66) = HIDWORD(v221);
    LODWORD(v66) = 0;
    v283 = v66;
    v284 = v65;
    v67 = *((_QWORD *)v16 + 13);
    v216 = v67;
    LODWORD(v67) = ((v58 + 31) >> 5) + ((v55 + 31) >> 5);
    v285 = v67;
    v290 = v67 + ((HIDWORD(v67) + 31) >> 5);
    v68 = 4 * v290;
    do
    {
      v226 = v53;
      v286[v64] = CStackAllocatorAllocateZero((uint64_t)v181, (*(_DWORD *)((unint64_t)&v226 & 0xFFFFFFFFFFFFFFF3 | (4 * (v64 & 3))) * v68));
      v288 = CStackAllocatorAllocate((uint64_t)v181, v68);
      v289 = (int *)CStackAllocatorAllocate((uint64_t)v181, v68);
      sub_1B17D02CC(&v256, v64);
      v53 = v224;
      ++v64;
    }
    while (v64 != 3);
    sub_1B17D14B4((uint64_t)&v241, v282);
    if (v184)
    {
      v189 = 0;
      v69.i64[1] = v218.i64[1];
      *(int32x2_t *)v69.f32 = vceqz_s32(*(int32x2_t *)v218.f32);
      v215 = *((_QWORD *)v16 + 14);
      v219 = v221;
      v183 = v69.i8[4];
      v187 = v69.i8[0];
      v205 = v49;
      do
      {
        if (v290)
        {
          if (*(_DWORD *)(v287 + 4 * v290 * v189))
            goto LABEL_27;
          v70 = 1;
          do
          {
            v71 = v70;
            if (v290 == v70)
              break;
          }
          while (!*(_DWORD *)(v287 + 4 * v290 * v189 + 4 * v70++));
          if (v71 < v290)
          {
LABEL_27:
            v69 = sub_1B17CFB60(&v256, 0, 0, v189, &v248, (uint32x4_t)v69);
            if ((v183 & 1) == 0)
            {
              v204 = 0;
              v200 = v248;
              v201 = v249;
              v198 = v253;
              v199 = vsubq_f32(v249, v248);
              v195 = v250;
              v196 = vsubq_f32(v253, v252);
              v192 = v255;
              v197 = v252;
              v193 = v254;
              v194 = v251;
              v69 = vsubq_f32(v254, v252);
              v185 = v69;
              v186 = vsubq_f32(v250, v248);
              do
              {
                v79 = v290;
                if (v290)
                {
                  v80 = 0;
                  v81 = v289;
                  v82 = (int *)(v287 + 4 * v189 * v290);
                  v83 = (int *)(v286[1] + 4 * v290 * v204);
                  do
                  {
                    v85 = *v83++;
                    v84 = v85;
                    v86 = *v82++;
                    v87 = v86 & v84;
                    *v81++ = v87;
                    v80 |= v87;
                    --v79;
                  }
                  while (v79);
                  if (v80 && (v187 & 1) == 0)
                  {
                    v88 = 0;
                    v69 = vmulq_n_f32(v185, (float)v204);
                    v202 = v69;
                    v203 = vmulq_n_f32(v186, (float)v204);
                    v89 = (v204 + v189 * v188) * v49;
                    do
                    {
                      v90 = v290;
                      if (v290)
                      {
                        v91 = 0;
                        v92 = v288;
                        v93 = v289;
                        v94 = (int *)(v286[0] + 4 * v290 * v88);
                        v95 = v288;
                        do
                        {
                          v97 = *v93++;
                          v96 = v97;
                          v98 = *v94++;
                          v99 = v98 & v96;
                          *v95++ = v99;
                          v91 |= v99;
                          --v90;
                        }
                        while (v90);
                        if (v91)
                        {
                          v206 = v89;
                          v207 = v88;
                          v100 = vmlaq_n_f32(v203, v199, (float)v88);
                          v101 = vmlaq_n_f32(v202, v196, (float)v88);
                          v102 = vaddq_f32(v200, v100);
                          v247[0] = v102;
                          v247[1] = vaddq_f32(v201, v100);
                          v247[2] = vaddq_f32(v195, v100);
                          v247[3] = vaddq_f32(v100, v194);
                          v247[4] = vaddq_f32(v197, v101);
                          v247[5] = vaddq_f32(v198, v101);
                          v247[6] = vaddq_f32(v193, v101);
                          v247[7] = vaddq_f32(v101, v192);
                          v102.i32[3] = 0;
                          v103 = 1;
                          v104 = v102;
                          do
                          {
                            v105 = (float32x4_t)v247[v103];
                            v105.i32[3] = 0;
                            v102 = vminnmq_f32(v102, v105);
                            v104 = vmaxnmq_f32(v104, v105);
                            ++v103;
                          }
                          while (v103 != 8);
                          v106.i64[0] = 0x3F0000003F000000;
                          v106.i64[1] = 0x3F0000003F000000;
                          v110 = vmulq_f32(vaddq_f32(v104, v102), v106);
                          v107 = vmulq_f32(vsubq_f32(v104, v102), v106);
                          v108 = vmulq_f32(v107, v107);
                          v109 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1))).f32[0]);
                          v225 = v109;
                          v110.f32[3] = v109;
                          v279 = 0;
                          v111 = HIDWORD(v285);
                          v222 = v110;
                          if ((HIDWORD(v285) + 31) >= 0x20)
                          {
                            v116 = 0;
                            v208 = (HIDWORD(v285) + 31) >> 5;
                            v209 = &v92[v285];
                            v117 = v109 * v109;
                            v212 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 3);
                            while (1)
                            {
                              v118 = v209[v116];
                              if (v118)
                                break;
LABEL_53:
                              if (++v116 == v208)
                                goto LABEL_42;
                            }
                            v119 = 32 * v116;
                            while (1)
                            {
                              v120 = __clz(__rbit32(v118));
                              v121 = v120 | v119;
                              if ((v120 | v119) >= v111)
                              {
                                sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. range overflow"), v73, v74, v75, v76, v77, v78, (uint64_t)"i < lightRange.y");
                                v110 = v222;
                              }
                              v122 = (float32x4_t *)&v292[5 * v121];
                              v123 = v122[4];
                              v124 = vsubq_f32(v110, *v122);
                              v125 = (int32x4_t)vmulq_f32(v122[1], v124);
                              v126 = (int32x4_t)vmulq_f32(v124, v122[2]);
                              v127 = (int32x4_t)vmulq_f32(v124, v122[3]);
                              v128 = vzip1q_s32(v125, v127);
                              v129 = vzip2q_s32(v125, v127);
                              v130 = (float32x4_t)vtrn2q_s32(v125, v126);
                              v130.i32[2] = v127.i32[1];
                              v131 = vabsq_f32(vaddq_f32((float32x4_t)vzip1q_s32(v129, vdupq_laneq_s32(v126, 2)), vaddq_f32((float32x4_t)vzip1q_s32(v128, v126), v130)));
                              v132 = vsubq_f32(v131, v123);
                              v132.i32[3] = 0;
                              v133 = vmaxnmq_f32(v132, (float32x4_t)0);
                              v134 = vmulq_f32(v133, v133);
                              v135 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), vaddq_f32(v134, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1))).u64[0];
                              if (*(float *)v135.i32 <= v117)
                              {
                                v136 = v279++;
                                v275[v136] = v121 + v216;
                                if (*(float *)(v215 + 368 * (v121 + v216)) >= 1.0)
                                {
                                  *(float *)v135.i32 = fmaxf(fmaxf(v123.f32[0], v123.f32[2]), v123.f32[1]) * 0.090909;
                                  v137 = (uint32x4_t)vcgeq_f32(vsubq_f32(vsubq_f32(v123, (float32x4_t)vdupq_lane_s32(v135, 0)), v131), v212);
                                  v137.i32[3] = v137.i32[2];
                                  if ((vminvq_u32(v137) & 0x80000000) != 0)
                                    break;
                                }
                              }
                              v118 &= ~(1 << v120);
                              if (!v118)
                                goto LABEL_53;
                            }
                          }
LABEL_42:
                          v112 = &v275[v279];
                          v277 = 0;
                          v113 = v288;
                          v114 = HIDWORD(v283);
                          if ((HIDWORD(v283) + 31) >= 0x20)
                          {
                            v138 = 0;
                            v210 = (HIDWORD(v283) + 31) >> 5;
                            v213 = (char *)&v288[v283];
                            do
                            {
                              v139 = *(_DWORD *)&v213[4 * v138];
                              if (v139)
                              {
                                v140 = 32 * v138;
                                do
                                {
                                  v141 = __clz(__rbit32(v139));
                                  v142 = v141 | v140;
                                  if ((v141 | v140) >= v114)
                                  {
                                    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. range overflow"), v73, v74, v75, v76, v77, v78, (uint64_t)"i < lightRange.y");
                                    v110 = v222;
                                  }
                                  v143 = v225 + COERCE_FLOAT(HIDWORD(v294[v142]));
                                  v144 = vsubq_f32((float32x4_t)v294[v142], v110);
                                  v145 = vmulq_f32(v144, v144);
                                  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v145, 2), vaddq_f32(v145, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v145.f32, 1))).f32[0] <= (float)(v143 * v143))
                                  {
                                    v146 = v277++;
                                    v112[v146] = v142 + v219;
                                  }
                                  v139 &= ~(1 << v141);
                                }
                                while (v139);
                              }
                              ++v138;
                            }
                            while (v138 != v210);
                            v115 = v277;
                            v113 = v288;
                            v49 = v205;
                          }
                          else
                          {
                            v115 = 0;
                            v49 = v205;
                          }
                          v278 = 0;
                          v147 = HIDWORD(v284);
                          if ((HIDWORD(v284) + 31) >= 0x20)
                          {
                            v149 = 0;
                            v150 = &v112[v115];
                            v211 = &v113[v284];
                            v214 = (HIDWORD(v284) + 31) >> 5;
                            do
                            {
                              v151 = v211[v149];
                              if (v151)
                              {
                                v152 = 32 * v149;
                                do
                                {
                                  v153 = __clz(__rbit32(v151));
                                  v154 = v153 | v152;
                                  if ((v153 | v152) >= v147)
                                  {
                                    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. range overflow"), v73, v74, v75, v76, v77, v78, (uint64_t)"i < lightRange.y");
                                    v110 = v222;
                                  }
                                  v155 = (float32x4_t *)&v293[3 * v154];
                                  v156 = v155[2].f32[0];
                                  v157 = vsubq_f32(v110, *v155);
                                  v158 = vmulq_f32(v157, v157);
                                  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v158, 2), vaddq_f32(v158, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v158.f32, 1))).f32[0] <= (float)((float)(v225 + v156) * (float)(v225 + v156)))
                                  {
                                    v159 = v155[2].f32[2];
                                    v160 = vmulq_f32(v157, v155[1]);
                                    LODWORD(_S3) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v160, 2), vaddq_f32(v160, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v160.f32, 1))).u32[0];
                                    __asm { FMLS            S1, S3, V3.S[0] }
                                    v163 = sqrtf(_S1);
                                    v164 = v155[2].f32[3] * v159;
                                    v165 = vmlas_n_f32(-(float)(v159 * v163), v164, _S3);
                                    if (v165 >= 0.0
                                      || (v166 = (float)(v159 * _S3) + (float)(v164 * v163),
                                          v167 = fminf(fmaxf(v166, 0.0), v156),
                                          (float)((float)(v165 * v165)
                                                + (float)((float)(v166 - v167) * (float)(v166 - v167))) <= (float)(v225 * v225)))
                                    {
                                      v168 = v278++;
                                      v150[v168] = v154 + v217;
                                    }
                                  }
                                  v151 &= ~(1 << v153);
                                }
                                while (v151);
                              }
                              ++v149;
                            }
                            while (v149 != v214);
                            v148 = v278;
                            v115 = v277;
                            v49 = v205;
                          }
                          else
                          {
                            v148 = 0;
                          }
                          v88 = v207;
                          v89 = v206;
                          v169 = v148 + v115;
                          v74 = v279 + v169;
                          v276 = v279 + v169;
                          if (v279 + v169)
                          {
                            v170 = sub_1B17CFFB4(*(uint64_t *)v291, v280, v275, v74);
                            v69.i32[3] = 0;
                            v69.i16[0] = v170;
                            v69.i16[1] = v277 | (unsigned __int16)((_WORD)v278 << 8);
                            *(uint64_t *)((char *)v69.i64 + 4) = v279;
                          }
                          else
                          {
                            v69 = 0uLL;
                          }
                          if (v191)
                          {
                            *(_QWORD *)(v190 + 8 * v206) = v69.i64[0];
                          }
                          else
                          {
                            v69 = (float32x4_t)vmovl_u16(*(uint16x4_t *)v69.f32);
                            v171 = (_WORD *)(v190 + 4 * v206);
                            v171[1] = v69.i16[2];
                            *v171 = v69.i16[0];
                          }
                        }
                      }
                      ++v88;
                      ++v89;
                    }
                    while (v88 != v49);
                  }
                }
                ++v204;
              }
              while (v204 != v188);
            }
          }
        }
        ++v189;
      }
      while (v189 != v184);
    }
    sub_1B17D0180((uint64_t)&v256, v190, v179);
    v172 = v281;
    if (v281 <= 1)
      v173 = 1;
    else
      v173 = v281;
    v174 = (v173 - 1) | ((unint64_t)(v173 - 1) >> 1) | (((v173 - 1) | ((unint64_t)(v173 - 1) >> 1)) >> 2);
    v175 = v174 | (v174 >> 4) | ((v174 | (v174 >> 4)) >> 8);
    v252 = 0u;
    v251 = 0u;
    v250 = 0u;
    v249 = 0u;
    v248 = 0u;
    RGTextureDescriptorMake1D((WORD1(v175) | v175) + 1, 13, (uint64_t)&v248);
    v250.i64[0] = 0;
    v250.i64[1] = 1;
    v232[0] = v248;
    v232[1] = v249;
    v232[3] = v251;
    v232[4] = v252;
    v232[2] = v250;
    v176 = (void *)sub_1B18CFFEC((uint64_t)v180, (unsigned __int16 *)v232, 0, 1);
    *((_QWORD *)v182 + 4) = v176;
    if ((_DWORD)v172)
    {
      memset(v230, 0, 24);
      v230[3] = v172;
      v231 = vdupq_n_s64(1uLL);
      objc_msgSend_replaceRegion_mipmapLevel_withBytes_bytesPerRow_(v176, v177, (uint64_t)v230, 0, v280[2], v281);
    }
    v252 = 0u;
    if (v191)
      v178 = 113;
    else
      v178 = 63;
    v251 = 0uLL;
    v250 = 0uLL;
    v249 = 0uLL;
    v248 = 0uLL;
    RGTextureDescriptorMake3D(v49, v188, v184, v178, (uint64_t)&v248);
    v250.i64[1] = 1;
    v229[0] = v248;
    v229[1] = v249;
    v229[3] = v251;
    v229[4] = v252;
    v229[2] = v250;
    v227 = *(_OWORD *)v182;
    v228 = *((_QWORD *)v182 + 2);
    *((_QWORD *)v182 + 3) = sub_1B18D03D4(v180, (unsigned __int16 *)v229, &v227, 1);
    return CStackAllocatorPopFrame((uint64_t)v181);
  }
  return result;
}

float32x4_t sub_1B17D14B4(uint64_t a1, float32x4_t *a2)
{
  float32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x2_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  int32x2_t v22;
  float32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x2_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  int32x2_t v52;
  float32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t result;
  int32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x2_t v70;
  float32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  int32x2_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int32x2_t v100;
  float32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  float32x4_t v113;
  int32x2_t v114;
  float32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;

  v2 = *(float32x4_t *)(a1 + 80);
  v4 = *(int32x4_t *)(a1 + 16);
  v3 = *(int32x4_t *)(a1 + 32);
  v5 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), (int8x16_t)v3, 8uLL);
  v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL);
  v7 = vmulq_f32(v2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL), vnegq_f32(v6)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL), v5));
  v8 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u64[0];
  if (*(float *)v8.i32 != 0.0)
  {
    v9 = *(float32x4_t *)(a1 + 80);
    v9.f32[0] = -v2.f32[3];
    v10 = *(int32x4_t *)(a1 + 32);
    *(float *)v10.i32 = -*(float *)&v3.i32[3];
    v11 = *(int32x4_t *)(a1 + 16);
    *(float *)v11.i32 = -*(float *)&v4.i32[3];
    v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v11, (int8x16_t)v11, 0xCuLL), (int8x16_t)v11, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v11, v11), (int8x16_t)v11, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v10, (int8x16_t)v10, 0xCuLL), (int8x16_t)v10, 8uLL));
    v13 = *(float32x4_t *)(a1 + 80);
    v13.f32[1] = -v2.f32[3];
    v14 = *(int32x4_t *)(a1 + 32);
    *(float *)&v14.i32[1] = -*(float *)&v3.i32[3];
    v15 = *(int32x4_t *)(a1 + 16);
    *(float *)&v15.i32[1] = -*(float *)&v4.i32[3];
    v16 = (int32x4_t)vmulq_f32(v9, v12);
    v17 = (int32x4_t)vmulq_f32(v13, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL), (int8x16_t)v15, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), (int8x16_t)v14, 8uLL)));
    *(float32x2_t *)v13.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v16.i8, *(int32x2_t *)v17.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v16.i8, *(int32x2_t *)v17.i8));
    v18 = (float32x4_t)vzip2q_s32(v16, v17);
    *(float32x2_t *)v18.f32 = vadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v13.f32);
    v2.f32[2] = -v2.f32[3];
    *(float *)&v3.i32[2] = -*(float *)&v3.i32[3];
    *(float *)&v4.i32[2] = -*(float *)&v4.i32[3];
    v19 = vmulq_f32(v2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v4, (int8x16_t)v4, 0xCuLL), (int8x16_t)v4, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), (int8x16_t)v3, 8uLL)));
    v18.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).u32[0];
    *a2 = vdivq_f32(v18, (float32x4_t)vdupq_lane_s32(v8, 0));
    v2 = *(float32x4_t *)(a1 + 80);
    v3 = *(int32x4_t *)(a1 + 32);
    v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL);
    v5 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), (int8x16_t)v3, 8uLL);
  }
  v20 = *(int32x4_t *)a1;
  v21 = vmulq_f32(v2, vmlaq_f32(vmulq_f32(v5, vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), *(int8x16_t *)a1, 0xCuLL))), v6, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), *(int8x16_t *)a1, 8uLL)));
  v22 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u64[0];
  if (*(float *)v22.i32 != 0.0)
  {
    v23 = v2;
    v23.f32[0] = -v2.f32[3];
    v24 = *(int32x4_t *)a1;
    *(float *)v24.i32 = -*(float *)&v20.i32[3];
    v25 = v3;
    *(float *)v25.i32 = -*(float *)&v3.i32[3];
    v26 = (int32x4_t)vmulq_f32(v23, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v25, (int8x16_t)v25, 0xCuLL), (int8x16_t)v25, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v24, (int8x16_t)v24, 0xCuLL), (int8x16_t)v24, 8uLL)));
    v27 = v2;
    v27.f32[1] = -v2.f32[3];
    v28 = *(int32x4_t *)a1;
    *(float *)&v28.i32[1] = -*(float *)&v20.i32[3];
    v29 = v3;
    *(float *)&v29.i32[1] = -*(float *)&v3.i32[3];
    v30 = (int32x4_t)vmulq_f32(v27, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v29, (int8x16_t)v29, 0xCuLL), (int8x16_t)v29, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL), (int8x16_t)v28, 8uLL)));
    *(float32x2_t *)v28.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v30.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v30.i8));
    v31 = (float32x4_t)vzip2q_s32(v26, v30);
    *(float32x2_t *)v31.f32 = vadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v28.i8);
    v2.f32[2] = -v2.f32[3];
    *(float *)&v20.i32[2] = -*(float *)&v20.i32[3];
    *(float *)&v3.i32[2] = -*(float *)&v3.i32[3];
    v32 = vmulq_f32(v2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v3, (int8x16_t)v3, 0xCuLL), (int8x16_t)v3, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v20, (int8x16_t)v20, 0xCuLL), (int8x16_t)v20, 8uLL)));
    v31.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).u32[0];
    a2[1] = vdivq_f32(v31, (float32x4_t)vdupq_lane_s32(v22, 0));
    v2 = *(float32x4_t *)(a1 + 80);
  }
  v33 = *(int32x4_t *)(a1 + 16);
  v34 = *(int32x4_t *)(a1 + 48);
  v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
  v36 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL);
  v37 = vmulq_f32(v2, vmlaq_f32(vmulq_f32(v36, vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL))), v35, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL), (int8x16_t)v33, 8uLL)));
  v38 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).u64[0];
  if (*(float *)v38.i32 != 0.0)
  {
    v39 = v2;
    v39.f32[0] = -v2.f32[3];
    v40 = *(int32x4_t *)(a1 + 16);
    *(float *)v40.i32 = -*(float *)&v33.i32[3];
    v41 = *(int32x4_t *)(a1 + 48);
    *(float *)v41.i32 = -*(float *)&v34.i32[3];
    v42 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL), (int8x16_t)v41, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), (int8x16_t)v40, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL), (int8x16_t)v40, 8uLL));
    v43 = v2;
    v43.f32[1] = -v2.f32[3];
    v44 = *(int32x4_t *)(a1 + 16);
    *(float *)&v44.i32[1] = -*(float *)&v33.i32[3];
    v45 = *(int32x4_t *)(a1 + 48);
    *(float *)&v45.i32[1] = -*(float *)&v34.i32[3];
    v46 = (int32x4_t)vmulq_f32(v39, v42);
    v47 = (int32x4_t)vmulq_f32(v43, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL), (int8x16_t)v45, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v44, (int8x16_t)v44, 0xCuLL), (int8x16_t)v44, 8uLL)));
    *(float32x2_t *)v43.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v47.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v47.i8));
    v48 = (float32x4_t)vzip2q_s32(v46, v47);
    *(float32x2_t *)v48.f32 = vadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v43.f32);
    v2.f32[2] = -v2.f32[3];
    *(float *)&v33.i32[2] = -*(float *)&v33.i32[3];
    *(float *)&v34.i32[2] = -*(float *)&v34.i32[3];
    v49 = vmulq_f32(v2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v33, (int8x16_t)v33, 0xCuLL), (int8x16_t)v33, 8uLL)));
    v48.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).u32[0];
    a2[2] = vdivq_f32(v48, (float32x4_t)vdupq_lane_s32(v38, 0));
    v2 = *(float32x4_t *)(a1 + 80);
    v34 = *(int32x4_t *)(a1 + 48);
    v36 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL);
    v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
  }
  v50 = *(int32x4_t *)a1;
  v51 = vmulq_f32(v2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v50, (int8x16_t)v50, 0xCuLL), *(int8x16_t *)a1, 8uLL), vnegq_f32(v35)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), *(int8x16_t *)a1, 0xCuLL), v36));
  v52 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).u64[0];
  if (*(float *)v52.i32 != 0.0)
  {
    v53 = v2;
    v53.f32[0] = -v2.f32[3];
    v54 = v34;
    *(float *)v54.i32 = -*(float *)&v34.i32[3];
    v55 = *(int32x4_t *)a1;
    *(float *)v55.i32 = -*(float *)&v50.i32[3];
    v56 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v55, (int8x16_t)v55, 0xCuLL), (int8x16_t)v55, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v54, v54), (int8x16_t)v54, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v55, v55), (int8x16_t)v55, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v54, (int8x16_t)v54, 0xCuLL), (int8x16_t)v54, 8uLL));
    v57 = v2;
    v57.f32[1] = -v2.f32[3];
    v58 = v34;
    *(float *)&v58.i32[1] = -*(float *)&v34.i32[3];
    v59 = *(int32x4_t *)a1;
    *(float *)&v59.i32[1] = -*(float *)&v50.i32[3];
    v60 = (int32x4_t)vmulq_f32(v53, v56);
    v61 = (int32x4_t)vmulq_f32(v57, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v59, (int8x16_t)v59, 0xCuLL), (int8x16_t)v59, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v58, v58), (int8x16_t)v58, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v59, v59), (int8x16_t)v59, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v58, (int8x16_t)v58, 0xCuLL), (int8x16_t)v58, 8uLL)));
    *(float32x2_t *)v57.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v61.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v61.i8));
    v62 = (float32x4_t)vzip2q_s32(v60, v61);
    *(float32x2_t *)v62.f32 = vadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v57.f32);
    v2.f32[2] = -v2.f32[3];
    *(float *)&v34.i32[2] = -*(float *)&v34.i32[3];
    *(float *)&v50.i32[2] = -*(float *)&v50.i32[3];
    v63 = vmulq_f32(v2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v50, (int8x16_t)v50, 0xCuLL), (int8x16_t)v50, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), (int8x16_t)v50, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL), (int8x16_t)v34, 8uLL)));
    v62.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).u32[0];
    a2[3] = vdivq_f32(v62, (float32x4_t)vdupq_lane_s32(v52, 0));
  }
  result = *(float32x4_t *)(a1 + 64);
  v66 = *(int32x4_t *)(a1 + 16);
  v65 = *(int32x4_t *)(a1 + 32);
  v67 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v65, (int8x16_t)v65, 0xCuLL), (int8x16_t)v65, 8uLL);
  v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v65, v65), (int8x16_t)v65, 0xCuLL);
  v69 = vmulq_f32(result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v66, (int8x16_t)v66, 0xCuLL), (int8x16_t)v66, 8uLL), vnegq_f32(v68)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v66, v66), (int8x16_t)v66, 0xCuLL), v67));
  v70 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).u64[0];
  if (*(float *)v70.i32 != 0.0)
  {
    v71 = *(float32x4_t *)(a1 + 64);
    v71.f32[0] = -result.f32[3];
    v72 = *(int32x4_t *)(a1 + 32);
    *(float *)v72.i32 = -*(float *)&v65.i32[3];
    v73 = *(int32x4_t *)(a1 + 16);
    *(float *)v73.i32 = -*(float *)&v66.i32[3];
    v74 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v73, (int8x16_t)v73, 0xCuLL), (int8x16_t)v73, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v72, v72), (int8x16_t)v72, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v73, v73), (int8x16_t)v73, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v72, (int8x16_t)v72, 0xCuLL), (int8x16_t)v72, 8uLL));
    v75 = *(float32x4_t *)(a1 + 64);
    v75.f32[1] = -result.f32[3];
    v76 = *(int32x4_t *)(a1 + 32);
    *(float *)&v76.i32[1] = -*(float *)&v65.i32[3];
    v77 = *(int32x4_t *)(a1 + 16);
    *(float *)&v77.i32[1] = -*(float *)&v66.i32[3];
    v78 = (int32x4_t)vmulq_f32(v71, v74);
    v79 = (int32x4_t)vmulq_f32(v75, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v77, (int8x16_t)v77, 0xCuLL), (int8x16_t)v77, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v76, v76), (int8x16_t)v76, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v77, v77), (int8x16_t)v77, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v76, (int8x16_t)v76, 0xCuLL), (int8x16_t)v76, 8uLL)));
    *(float32x2_t *)v75.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v78.i8, *(int32x2_t *)v79.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v78.i8, *(int32x2_t *)v79.i8));
    v80 = (float32x4_t)vzip2q_s32(v78, v79);
    *(float32x2_t *)v80.f32 = vadd_f32(*(float32x2_t *)v80.f32, *(float32x2_t *)v75.f32);
    result.f32[2] = -result.f32[3];
    *(float *)&v65.i32[2] = -*(float *)&v65.i32[3];
    *(float *)&v66.i32[2] = -*(float *)&v66.i32[3];
    v81 = vmulq_f32(result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v66, (int8x16_t)v66, 0xCuLL), (int8x16_t)v66, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v65, v65), (int8x16_t)v65, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v66, v66), (int8x16_t)v66, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v65, (int8x16_t)v65, 0xCuLL), (int8x16_t)v65, 8uLL)));
    v80.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).u32[0];
    a2[4] = vdivq_f32(v80, (float32x4_t)vdupq_lane_s32(v70, 0));
    result = *(float32x4_t *)(a1 + 64);
    v65 = *(int32x4_t *)(a1 + 32);
    v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v65, v65), (int8x16_t)v65, 0xCuLL);
    v67 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v65, (int8x16_t)v65, 0xCuLL), (int8x16_t)v65, 8uLL);
  }
  v82 = *(int32x4_t *)a1;
  v83 = vmulq_f32(result, vmlaq_f32(vmulq_f32(v67, vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v82, v82), *(int8x16_t *)a1, 0xCuLL))), v68, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v82, (int8x16_t)v82, 0xCuLL), *(int8x16_t *)a1, 8uLL)));
  v84 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).u64[0];
  if (*(float *)v84.i32 != 0.0)
  {
    v85 = result;
    v85.f32[0] = -result.f32[3];
    v86 = *(int32x4_t *)a1;
    *(float *)v86.i32 = -*(float *)&v82.i32[3];
    v87 = v65;
    *(float *)v87.i32 = -*(float *)&v65.i32[3];
    v88 = (int32x4_t)vmulq_f32(v85, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v87, (int8x16_t)v87, 0xCuLL), (int8x16_t)v87, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v86, v86), (int8x16_t)v86, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v87, v87), (int8x16_t)v87, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v86, (int8x16_t)v86, 0xCuLL), (int8x16_t)v86, 8uLL)));
    v89 = result;
    v89.f32[1] = -result.f32[3];
    v90 = *(int32x4_t *)a1;
    *(float *)&v90.i32[1] = -*(float *)&v82.i32[3];
    v91 = v65;
    *(float *)&v91.i32[1] = -*(float *)&v65.i32[3];
    v92 = (int32x4_t)vmulq_f32(v89, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v91, (int8x16_t)v91, 0xCuLL), (int8x16_t)v91, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v91, v91), (int8x16_t)v91, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v90, (int8x16_t)v90, 0xCuLL), (int8x16_t)v90, 8uLL)));
    *(float32x2_t *)v90.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v88.i8, *(int32x2_t *)v92.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v88.i8, *(int32x2_t *)v92.i8));
    v93 = (float32x4_t)vzip2q_s32(v88, v92);
    *(float32x2_t *)v93.f32 = vadd_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v90.i8);
    result.f32[2] = -result.f32[3];
    *(float *)&v82.i32[2] = -*(float *)&v82.i32[3];
    *(float *)&v65.i32[2] = -*(float *)&v65.i32[3];
    v94 = vmulq_f32(result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v65, (int8x16_t)v65, 0xCuLL), (int8x16_t)v65, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v82, v82), (int8x16_t)v82, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v65, v65), (int8x16_t)v65, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v82, (int8x16_t)v82, 0xCuLL), (int8x16_t)v82, 8uLL)));
    v93.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2), vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 1))).u32[0];
    a2[5] = vdivq_f32(v93, (float32x4_t)vdupq_lane_s32(v84, 0));
    result = *(float32x4_t *)(a1 + 64);
  }
  v95 = *(int32x4_t *)(a1 + 16);
  v96 = *(int32x4_t *)(a1 + 48);
  v97 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v96, v96), (int8x16_t)v96, 0xCuLL);
  v98 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v96, (int8x16_t)v96, 0xCuLL), (int8x16_t)v96, 8uLL);
  v99 = vmulq_f32(result, vmlaq_f32(vmulq_f32(v98, vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v95, v95), (int8x16_t)v95, 0xCuLL))), v97, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v95, (int8x16_t)v95, 0xCuLL), (int8x16_t)v95, 8uLL)));
  v100 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))).u64[0];
  if (*(float *)v100.i32 != 0.0)
  {
    v101 = result;
    v101.f32[0] = -result.f32[3];
    v102 = *(int32x4_t *)(a1 + 16);
    *(float *)v102.i32 = -*(float *)&v95.i32[3];
    v103 = *(int32x4_t *)(a1 + 48);
    *(float *)v103.i32 = -*(float *)&v96.i32[3];
    v104 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v103, (int8x16_t)v103, 0xCuLL), (int8x16_t)v103, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v102, v102), (int8x16_t)v102, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v103, v103), (int8x16_t)v103, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v102, (int8x16_t)v102, 0xCuLL), (int8x16_t)v102, 8uLL));
    v105 = result;
    v105.f32[1] = -result.f32[3];
    v106 = *(int32x4_t *)(a1 + 16);
    *(float *)&v106.i32[1] = -*(float *)&v95.i32[3];
    v107 = *(int32x4_t *)(a1 + 48);
    *(float *)&v107.i32[1] = -*(float *)&v96.i32[3];
    v108 = (int32x4_t)vmulq_f32(v101, v104);
    v109 = (int32x4_t)vmulq_f32(v105, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v107, (int8x16_t)v107, 0xCuLL), (int8x16_t)v107, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v106, v106), (int8x16_t)v106, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v107, v107), (int8x16_t)v107, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v106, (int8x16_t)v106, 0xCuLL), (int8x16_t)v106, 8uLL)));
    *(float32x2_t *)v105.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v108.i8, *(int32x2_t *)v109.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v108.i8, *(int32x2_t *)v109.i8));
    v110 = (float32x4_t)vzip2q_s32(v108, v109);
    *(float32x2_t *)v110.f32 = vadd_f32(*(float32x2_t *)v110.f32, *(float32x2_t *)v105.f32);
    result.f32[2] = -result.f32[3];
    *(float *)&v95.i32[2] = -*(float *)&v95.i32[3];
    *(float *)&v96.i32[2] = -*(float *)&v96.i32[3];
    v111 = vmulq_f32(result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v96, (int8x16_t)v96, 0xCuLL), (int8x16_t)v96, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v95, v95), (int8x16_t)v95, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v96, v96), (int8x16_t)v96, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v95, (int8x16_t)v95, 0xCuLL), (int8x16_t)v95, 8uLL)));
    v110.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 2), vaddq_f32(v111, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 1))).u32[0];
    a2[6] = vdivq_f32(v110, (float32x4_t)vdupq_lane_s32(v100, 0));
    v96 = *(int32x4_t *)(a1 + 48);
    result = *(float32x4_t *)(a1 + 64);
    v98 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v96, (int8x16_t)v96, 0xCuLL), (int8x16_t)v96, 8uLL);
    v97 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v96, v96), (int8x16_t)v96, 0xCuLL);
  }
  v112 = *(int32x4_t *)a1;
  v113 = vmulq_f32(result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v112, (int8x16_t)v112, 0xCuLL), *(int8x16_t *)a1, 8uLL), vnegq_f32(v97)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v112, v112), *(int8x16_t *)a1, 0xCuLL), v98));
  v114 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2), vaddq_f32(v113, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1))).u64[0];
  if (*(float *)v114.i32 != 0.0)
  {
    v115 = result;
    v115.f32[0] = -result.f32[3];
    v116 = v96;
    *(float *)v116.i32 = -*(float *)&v96.i32[3];
    v117 = *(int32x4_t *)a1;
    *(float *)v117.i32 = -*(float *)&v112.i32[3];
    v118 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v117, (int8x16_t)v117, 0xCuLL), (int8x16_t)v117, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v116, v116), (int8x16_t)v116, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v117, v117), (int8x16_t)v117, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v116, (int8x16_t)v116, 0xCuLL), (int8x16_t)v116, 8uLL));
    v119 = result;
    v119.f32[1] = -result.f32[3];
    v120 = v96;
    *(float *)&v120.i32[1] = -*(float *)&v96.i32[3];
    v121 = *(int32x4_t *)a1;
    *(float *)&v121.i32[1] = -*(float *)&v112.i32[3];
    v122 = (int32x4_t)vmulq_f32(v115, v118);
    v123 = (int32x4_t)vmulq_f32(v119, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v121, (int8x16_t)v121, 0xCuLL), (int8x16_t)v121, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v120, v120), (int8x16_t)v120, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v121, v121), (int8x16_t)v121, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v120, (int8x16_t)v120, 0xCuLL), (int8x16_t)v120, 8uLL)));
    *(float32x2_t *)v119.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v122.i8, *(int32x2_t *)v123.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v122.i8, *(int32x2_t *)v123.i8));
    v124 = (float32x4_t)vzip2q_s32(v122, v123);
    *(float32x2_t *)v124.f32 = vadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v119.f32);
    result.f32[2] = -result.f32[3];
    *(float *)&v96.i32[2] = -*(float *)&v96.i32[3];
    *(float *)&v112.i32[2] = -*(float *)&v112.i32[3];
    v125 = vmulq_f32(result, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v112, (int8x16_t)v112, 0xCuLL), (int8x16_t)v112, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v96, v96), (int8x16_t)v96, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v112, v112), (int8x16_t)v112, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v96, (int8x16_t)v96, 0xCuLL), (int8x16_t)v96, 8uLL)));
    v124.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 2), vaddq_f32(v125, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.f32, 1))).u32[0];
    result = vdivq_f32(v124, (float32x4_t)vdupq_lane_s32(v114, 0));
    a2[7] = result;
  }
  return result;
}

void sub_1B17D200C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFString *v49;
  __int16 v50;
  VFXMTLMesh *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const __CFArray *v74;
  const void *ValueAtIndex;
  VFXMTLMeshElement *v76;
  const char *v77;
  uint64_t v78;
  const char *v79;
  const void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float32x4_t v88;
  unsigned int v89;
  unsigned __int32 v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v102;
  unsigned int v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  void *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  const char *v182;
  const char *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  const char *v195;
  uint64_t v196;
  const char *v197;
  float32x4_t v198;
  uint64_t v199;
  uint64_t *v200;
  unsigned int v201;
  __int16 v202;
  __int16 v203;
  uint64_t v204;
  void *v205;
  void *v206;
  int v207;
  int v208;
  int v209;
  unsigned int v210;
  uint64_t *v211;
  _BYTE v212[328];
  _BYTE v213[328];
  _BYTE __dst[328];
  uint64_t v215;
  __int128 v216;
  __int128 v217;
  VFXMTLMesh *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  __int128 v222;
  __int128 v223;
  int v224;
  float32x4_t v225[8];
  float32x4_t __src[33];
  float32x4_t v227[142];
  _OWORD v228[9];
  uint64_t v229;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v204 = v8;
  v10 = v9;
  v229 = *MEMORY[0x1E0C80C00];
  v211 = (uint64_t *)sub_1B1814484(v6, 0, v6, v4, v2, v11, v12, v13);
  if (!v211 || !*(_QWORD *)(v3 + 24))
    return;
  v199 = v5;
  v200 = (uint64_t *)v7;
  v206 = (void *)sub_1B1813BC4(v7, v14, v15, v16, v17, v18, v19, v20);
  v205 = (void *)objc_msgSend_resourceManager(v206, v21, v22, v23);
  v27 = objc_msgSend_width(*(void **)(v3 + 24), v24, v25, v26);
  v31 = objc_msgSend_height(*(void **)(v3 + 24), v28, v29, v30);
  v35 = objc_msgSend_depth(*(void **)(v3 + 24), v32, v33, v34);
  v43 = 0;
  v198 = *(float32x4_t *)(v3 + 48);
  v201 = v35;
  v44 = (uint64_t *)(v3 + 88);
  v210 = v31;
  do
  {
    v45 = v44;
    if ((_DWORD)v43 != 1)
    {
      if ((_DWORD)v43 != 3)
        goto LABEL_23;
      v45 = (uint64_t *)(v3 + 96);
    }
    v46 = *v45;
    v208 = (__int16)WORD2(*v45);
    if (v208 >= 1)
    {
      v47 = v10 + 8 * v43;
      if (*(_QWORD *)(v47 + 128))
        goto LABEL_14;
      if ((_DWORD)v43 == 3)
      {
        v202 = *v45;
        v48 = sub_1B18E30F4(0, 12, 1, 0.0, 1.0, 1.0);
      }
      else
      {
        if ((_DWORD)v43 != 1)
          goto LABEL_14;
        v202 = *v45;
        v48 = sub_1B18E2808(0, 12, 1, 1.0, 1.0);
      }
      *(_QWORD *)(v47 + 128) = v48;
      LOWORD(v46) = v202;
LABEL_14:
      if (!*(_QWORD *)(v47 + 72))
      {
        if ((_DWORD)v43 == 1)
        {
          v203 = v46;
          v49 = CFSTR("debug_omni_vert");
          goto LABEL_19;
        }
        if ((_DWORD)v43 == 3)
        {
          v203 = v46;
          v49 = CFSTR("debug_spot_vert");
LABEL_19:
          *(_QWORD *)(v47 + 72) = sub_1B181DE74(v49, CFSTR("debug_light_frag"));
          LOWORD(v46) = v203;
        }
      }
      v50 = v46;
      v51 = sub_1B18FB1C0((uint64_t)v205, *(_QWORD *)(v47 + 128), 1);
      v52 = *(_QWORD *)(v47 + 72);
      v53 = sub_1B18A7BA0();
      v216 = 0u;
      v217 = 0u;
      v215 = v52;
      v218 = v51;
      v219 = v53;
      v220 = 0;
      v221 = 16777231;
      v222 = 0u;
      v223 = 0u;
      v224 = 0;
      v57 = objc_msgSend_currentRenderPassDescriptor(v206, v54, v55, v56);
      v59 = (void *)objc_msgSend_renderResourceForProgramDesc_renderPassDescriptor_(v205, v58, (uint64_t)&v215, v57);
      v63 = objc_msgSend_state(v59, v60, v61, v62);
      objc_msgSend_setRenderPipelineState_(*(void **)(v204 + 16), v64, v63, v65);
      objc_msgSend__setWorldBufferAtVertexIndex_fragmentIndex_(v206, v66, 0, -1);
      objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v204 + 16), v67, *(_QWORD *)(v3 + 120), *(_QWORD *)(v3 + 128) + 368 * v50, 1);
      v74 = (const __CFArray *)sub_1B1876264(*(_QWORD *)(v47 + 128), 1, v68, v69, v70, v71, v72, v73);
      v31 = v210;
      v44 = (uint64_t *)(v3 + 88);
      if (v74)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v74, 0);
        if (ValueAtIndex)
        {
          v76 = sub_1B18FAA70((uint64_t)v205, (uint64_t)ValueAtIndex);
          objc_msgSend__setMeshBuffers_(v206, v77, (uint64_t)v51, v78);
          v31 = v210;
          objc_msgSend__drawMeshElement_instanceCount_(v206, v79, (uint64_t)v76, (unsigned __int16)v208);
        }
      }
    }
LABEL_23:
    ++v43;
  }
  while (v43 != 7);
  v80 = (const void *)sub_1B181493C((uint64_t)v200, v36, v37, v38, v39, v40, v41, v42);
  if (!v80 || v80 == sub_1B1814768(v200, (uint64_t)v81, v82, v83, v84, v85, v86, v87))
  {
    v111 = *(void **)(v10 + 48);
    if (!v111
      || (v112 = objc_msgSend_currentRenderPassDescriptor(v206, v81, v82, v83),
          (objc_msgSend_matchesRenderPassDescriptor_(v111, v113, v112, v114) & 1) == 0))
    {
      v118 = (void *)sub_1B18FD768((uint64_t)v205);
      v122 = objc_msgSend_frameworkLibrary(v118, v119, v120, v121);
      memset(&__src[7], 0, 216);
      memset(__src, 0, 104);
      __src[6].i64[1] = v122;
      __src[12].i64[1] = sub_1B18A7BA0();
      __src[18].i64[1] = (uint64_t)CFSTR("vfx_draw_fullscreen_quad_vertex");
      __src[19].i64[0] = (uint64_t)CFSTR("debug_cluster_frag");
      v126 = (void *)objc_msgSend_currentRenderPassDescriptor(v206, v123, v124, v125);
      sub_1B1954D58((uint64_t)&__src[7], v126, v127, v128);

      memcpy(__dst, __src, sizeof(__dst));
      *(_QWORD *)(v10 + 48) = objc_msgSend_newRenderPipelineStateWithDesc_(v205, v129, (uint64_t)__dst, v130);
    }
    v131 = *(void **)(v10 + 56);
    if (!v131
      || (v132 = objc_msgSend_currentRenderPassDescriptor(v206, v115, v116, v117),
          (objc_msgSend_matchesRenderPassDescriptor_(v131, v133, v132, v134) & 1) == 0))
    {
      v135 = (void *)sub_1B18FD768((uint64_t)v205);
      v139 = objc_msgSend_frameworkLibrary(v135, v136, v137, v138);
      memset(&__src[7], 0, 216);
      memset(__src, 0, 104);
      __src[6].i64[1] = v139;
      __src[12].i64[1] = sub_1B18A7BA0();
      __src[18].i64[1] = (uint64_t)CFSTR("vfx_draw_fullscreen_quad_VR_pos_vertex");
      __src[19].i64[0] = (uint64_t)CFSTR("debug_light_indices_8_buffer_frag");
      v143 = (void *)objc_msgSend_currentRenderPassDescriptor(v206, v140, v141, v142);
      sub_1B1954D58((uint64_t)&__src[7], v143, v144, v145);

      memcpy(v213, __src, sizeof(v213));
      *(_QWORD *)(v10 + 56) = objc_msgSend_newRenderPipelineStateWithDesc_(v205, v146, (uint64_t)v213, v147);
    }
    v148 = sub_1B18FD640((uint64_t)v205);
    objc_msgSend_setDepthStencilState_(*(void **)(v204 + 16), v149, v148, v150);
    v154 = *(void **)(v10 + 64);
    if (!v154
      || (v155 = objc_msgSend_currentRenderPassDescriptor(v206, v151, v152, v153),
          (objc_msgSend_matchesRenderPassDescriptor_(v154, v156, v155, v157) & 1) == 0))
    {
      v161 = (void *)sub_1B18FD768((uint64_t)v205);
      v165 = objc_msgSend_frameworkLibrary(v161, v162, v163, v164);
      memset(&__src[7], 0, 216);
      memset(__src, 0, 104);
      __src[6].i64[1] = v165;
      __src[12].i64[1] = sub_1B18A7BA0();
      __src[18].i64[1] = (uint64_t)CFSTR("vfx_draw_fullscreen_quad_VR_pos_vertex");
      __src[19].i64[0] = (uint64_t)CFSTR("debug_cluster_slices_frag");
      v169 = (void *)objc_msgSend_currentRenderPassDescriptor(v206, v166, v167, v168);
      sub_1B1954D58((uint64_t)&__src[7], v169, v170, v171);

      memcpy(v212, __src, sizeof(v212));
      *(_QWORD *)(v10 + 64) = objc_msgSend_newRenderPipelineStateWithDesc_(v205, v172, (uint64_t)v212, v173);
    }
    if (objc_msgSend_state(*(void **)(v10 + 48), v158, v159, v160, *(_OWORD *)&v198, v199))
    {
      v177 = objc_msgSend_state(*(void **)(v10 + 48), v174, v175, v176);
      objc_msgSend_setRenderPipelineState_(*(void **)(v204 + 16), v178, v177, v179);
      sub_1B179AEE4(v204, *(void **)(v3 + 24), 0, v180);
      objc_msgSend__setWorldBufferAtVertexIndex_fragmentIndex_(v206, v181, -1, 0);
      memset(__src, 0, 24);
      sub_1B1868D14(*(_QWORD *)(v204 + 24), (const void *)(v3 + 80), 8uLL, (void **)__src);
      objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v204 + 16), v182, __src[0].i64[1], __src[1].i64[0], 1);
      objc_msgSend_drawPrimitives_vertexStart_vertexCount_(*(void **)(v204 + 16), v183, 4, 0, 4);
    }
    if (objc_msgSend_state(*(void **)(v10 + 64), v174, v175, v176))
    {
      v187 = objc_msgSend_state(*(void **)(v10 + 64), v184, v185, v186);
      objc_msgSend_setRenderPipelineState_(*(void **)(v204 + 16), v188, v187, v189);
      v193 = objc_msgSend_depth(*(void **)(v3 + 24), v190, v191, v192);
      LODWORD(v194) = 0.5;
      *((float *)&v194 + 1) = 0.5 / (float)(unint64_t)v193;
      DWORD2(v194) = 0;
      *((float *)&v194 + 3) = 1.0 - *((float *)&v194 + 1);
      v228[0] = v194;
      memset(__src, 0, 24);
      sub_1B1868D14(*(_QWORD *)(v204 + 24), v228, 0x10uLL, (void **)__src);
      objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v204 + 16), v195, __src[0].i64[1], __src[1].i64[0], 0);
      sub_1B179AEE4(v204, *(void **)(v3 + 24), 0, v196);
      objc_msgSend_drawPrimitives_vertexStart_vertexCount_(*(void **)(v204 + 16), v197, 4, 0, 4);
    }
  }
  else
  {
    v228[6] = xmmword_1B2245C70;
    v228[7] = *(_OWORD *)"fff?333?";
    v228[8] = xmmword_1B2245C90;
    v228[2] = xmmword_1B2245C30;
    v228[3] = unk_1B2245C40;
    v228[4] = xmmword_1B2245C50;
    v228[5] = unk_1B2245C60;
    v228[0] = *(_OWORD *)"333?333?333?";
    v228[1] = unk_1B2245C20;
    sub_1B17D14B4(v199, v227);
    v88 = v198;
    __src[1] = v198;
    v89 = v201;
    if (v201)
    {
      v209 = 0;
      v90 = 0;
      v91 = *(_DWORD *)(v3 + 108);
      v92 = *(_QWORD *)v3;
      v207 = v31 * v27;
      do
      {
        v93 = v89;
        v94 = *(_DWORD *)(v10 + 40);
        if ((v94 == v90 || v94 >= v93) && v31 != 0)
        {
          v97 = 0;
          v98 = v209;
          do
          {
            v99 = *(_DWORD *)(v10 + 36);
            if ((v99 == v97 || v99 >= v31) && v27 != 0)
            {
              v102 = 0;
              do
              {
                v103 = *(_DWORD *)(v10 + 32);
                if (v103 >= v27 || v102 == v103)
                {
                  v105 = v98 + v102;
                  v88 = sub_1B17CFB60(__src, v102, v97, v90, v225, (uint32x4_t)v88);
                  if (v91)
                    v88.i64[0] = *(_QWORD *)(v92 + 8 * v105);
                  else
                    v88 = (float32x4_t)*(unsigned int *)(v92 + 4 * v105);
                  v110 = v88.u8[3];
                  if (v88.u8[2] > ((unsigned __int16)(v88.i16[1] & 0xFF00) >> 8))
                    v110 = v88.u8[2];
                  if (v110 >= 8)
                    v110 = 8;
                  if (v110)
                    sub_1B17FBFC0(v211, (uint64_t)v225, 0, (float *)&v228[v110], v106, v107, v108, v109);
                }
                ++v102;
              }
              while (v27 != v102);
            }
            ++v97;
            v98 += v27;
            v31 = v210;
          }
          while (v97 != v210);
        }
        ++v90;
        v209 += v207;
        v89 = v201;
      }
      while (v90 != v201);
    }
  }
}

uint64_t sub_1B17D28D8(uint64_t result, __int16 *a2, uint64_t *a3, uint64_t a4, char a5)
{
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 *v15;
  __int16 v16;
  __int16 *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (__int16 *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(float *)(*a3 + 4 * v20) > *(float *)(*a3 + 4 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return sub_1B17D2D30(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return sub_1B17D3148(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return sub_1B17D3208(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 47)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1B17D2C2C(v9, a2, a3);
          else
            return (uint64_t)sub_1B17D2CC0(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x101)
          {
            sub_1B17D2D30(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1B17D2D30(v9, &v9[v13 >> 1], a2 - 1, a3);
            sub_1B17D2D30(v9 + 1, v15 - 1, a2 - 2, a3);
            sub_1B17D2D30(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            sub_1B17D2D30(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(*a3 + 4 * *(v9 - 1)) <= *(float *)(*a3 + 4 * *v9))
          {
            result = (uint64_t)sub_1B17D2DEC(v9, a2, a3);
            v9 = (__int16 *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1B17D2EC8(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1B17D2FA8(v9, v17, a3);
          v9 = v17 + 1;
          result = sub_1B17D2FA8(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_1B17D28D8(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1B17D32F4(v9, a2, a2, a3);
        return result;
    }
  }
}

__int16 *sub_1B17D2C2C(__int16 *result, __int16 *a2, uint64_t *a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  _WORD *v13;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *a3;
      v6 = result;
      do
      {
        v7 = v6[1];
        v8 = *v6;
        v6 = v3;
        v9 = *(float *)(v5 + 4 * v7);
        if (v9 > *(float *)(v5 + 4 * v8))
        {
          v10 = v7;
          v11 = v8;
          v12 = v4;
          while (1)
          {
            *(__int16 *)((char *)result + v12 + 2) = v11;
            if (!v12)
              break;
            v11 = *(__int16 *)((char *)result + v12 - 2);
            v12 -= 2;
            if (v9 <= *(float *)(v5 + 4 * v11))
            {
              v13 = (__int16 *)((char *)result + v12 + 2);
              goto LABEL_10;
            }
          }
          v13 = result;
LABEL_10:
          *v13 = v10;
        }
        v3 = v6 + 1;
        v4 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

__int16 *sub_1B17D2CC0(__int16 *result, __int16 *a2, uint64_t *a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  __int16 v8;
  __int16 v9;
  __int16 *v10;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      do
      {
        v5 = result[1];
        v6 = *result;
        result = v3;
        v7 = *(float *)(v4 + 4 * v5);
        if (v7 > *(float *)(v4 + 4 * v6))
        {
          v8 = v5;
          v9 = v6;
          v10 = result;
          do
          {
            *v10 = v9;
            v9 = *(v10 - 2);
            --v10;
          }
          while (v7 > *(float *)(v4 + 4 * v9));
          *v10 = v8;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1B17D2D30(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  __int16 v8;
  __int16 v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a4;
  v6 = *(float *)(*a4 + 4 * *a2);
  v7 = *(float *)(*a4 + 4 * v4);
  v8 = *a2;
  v9 = *a3;
  v10 = *(float *)(*a4 + 4 * *a3);
  if (v6 > v7)
  {
    if (v10 > v6)
    {
      *a1 = v9;
      *a3 = v4;
      return 1;
    }
    *a1 = v8;
    *a2 = v4;
    v13 = *a3;
    if (*(float *)(v5 + 4 * v13) <= v7)
      return 1;
    *a2 = v13;
    *a3 = v4;
    return 2;
  }
  if (v10 > v6)
  {
    *a2 = v9;
    *a3 = v8;
    v11 = *a2;
    v12 = *a1;
    if (*(float *)(v5 + 4 * v11) <= *(float *)(v5 + 4 * v12))
      return 1;
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

__int16 *sub_1B17D2DEC(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  __int16 *v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *a3;
  v5 = *(float *)(*a3 + 4 * v3);
  if (v5 <= *(float *)(*a3 + 4 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 <= *(float *)(v4 + 4 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 <= *(float *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 > *(float *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 <= *(float *)(v4 + 4 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 > *(float *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

__int16 *sub_1B17D2EC8(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 *v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = 0;
  v4 = *a1;
  v5 = *a3;
  v6 = *(float *)(*a3 + 4 * *a1);
  do
    v7 = a1[++v3];
  while (*(float *)(v5 + 4 * v7) > v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(float *)(v5 + 4 * v11) <= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(float *)(v5 + 4 * v10) <= v6);
  }
  if (v8 < a2)
  {
    v12 = v7;
    v13 = *a2;
    v14 = v8;
    v15 = a2;
    do
    {
      *v14 = v13;
      *v15 = v12;
      do
      {
        v16 = v14[1];
        ++v14;
        v12 = v16;
      }
      while (*(float *)(v5 + 4 * v16) > v6);
      do
      {
        v17 = *--v15;
        v13 = v17;
      }
      while (*(float *)(v5 + 4 * v17) <= v6);
    }
    while (v14 < v15);
    v9 = v14 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL sub_1B17D2FA8(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  __int16 *v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) > *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1B17D2D30(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1B17D3148(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1B17D3208(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_1B17D2D30(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 6;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *(float *)(v13 + 4 * v15);
    if (v16 > *(float *)(v13 + 4 * *v10))
    {
      v17 = *v10;
      v18 = v14;
      while (1)
      {
        *(__int16 *)((char *)a1 + v18) = v17;
        v19 = v18 - 2;
        if (v18 == 2)
          break;
        v20 = *(__int16 *)((char *)a1 + v18 - 4);
        v17 = v20;
        v21 = *(float *)(v13 + 4 * v20);
        v18 = v19;
        if (v16 <= v21)
        {
          v22 = (__int16 *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *v22 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 2;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t sub_1B17D3148(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1B17D2D30(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) > *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(float *)(v13 + 4 * v14) > *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(float *)(v13 + 4 * v16) > *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1B17D3208(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, __int16 *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_1B17D3148(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = *a6;
  if (*(float *)(*a6 + 4 * v13) > *(float *)(*a6 + 4 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    v16 = *a4;
    v17 = *a3;
    if (*(float *)(v15 + 4 * v16) > *(float *)(v15 + 4 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      if (*(float *)(v15 + 4 * v18) > *(float *)(v15 + 4 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        if (*(float *)(v15 + 4 * v20) > *(float *)(v15 + 4 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

__int16 *sub_1B17D32F4(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 v19;
  __int16 *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 3)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_1B17D3450((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*(float *)(*a4 + 4 * v15) > *(float *)(*a4 + 4 * v16))
        {
          *v14 = v16;
          *a1 = v15;
          sub_1B17D3450((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 3)
    {
      v17 = (unint64_t)v8 >> 1;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = sub_1B17D3538(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          sub_1B17D35AC((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1B17D3450(uint64_t result, uint64_t *a2, uint64_t a3, __int16 *a4)
{
  char *v4;
  int64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  __int16 v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (char *)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 1)
    {
      v6 = (uint64_t)(v4 + 1);
      v7 = (__int16 *)(result + 2 * (_QWORD)(v4 + 1));
      v8 = (uint64_t)(v4 + 2);
      v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *a4;
      v11 = *(float *)(v9 + 4 * v10);
      if (*(float *)(v9 + 4 * *v7) <= v11)
      {
        v12 = *v7;
        do
        {
          v13 = v7;
          *a4 = v12;
          if (v5 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (__int16 *)(result + 2 * v6);
          v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 4 * *v7) > *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v15;
          }
          v12 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 4 * *v7) <= v11);
        *v13 = v10;
      }
    }
  }
  return result;
}

__int16 *sub_1B17D3538(__int16 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    v8 = 2 * v3 + 2;
    result = (__int16 *)((char *)result + v8);
    v3 = (2 * v3) | 1;
    if (v8 < a3 && *(float *)(v6 + 4 * *result) > *(float *)(v6 + 4 * result[1]))
    {
      ++result;
      v3 = v8;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_1B17D35AC(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  __int16 *v5;
  uint64_t v6;
  _WORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _WORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (__int16 *)(result + 2 * v4);
    v6 = *v5;
    v9 = *(__int16 *)(a2 - 2);
    v7 = (_WORD *)(a2 - 2);
    v8 = v9;
    v10 = *a3;
    v11 = *(float *)(*a3 + 4 * v9);
    if (*(float *)(*a3 + 4 * v6) > v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (__int16 *)(result + 2 * v4);
        LOWORD(v6) = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 4 * *v5) > v11);
      *v12 = v8;
    }
  }
  return result;
}

uint64_t sub_1B17D3618(uint64_t result, __int16 *a2, uint64_t *a3, uint64_t a4, char a5)
{
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int16 *v15;
  __int16 v16;
  __int16 *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (__int16 *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(float *)(*a3 + 4 * v20) < *(float *)(*a3 + 4 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return sub_1B17D3A70(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return sub_1B17D3E88(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return sub_1B17D3F48(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 47)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1B17D396C(v9, a2, a3);
          else
            return (uint64_t)sub_1B17D3A00(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x101)
          {
            sub_1B17D3A70(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1B17D3A70(v9, &v9[v13 >> 1], a2 - 1, a3);
            sub_1B17D3A70(v9 + 1, v15 - 1, a2 - 2, a3);
            sub_1B17D3A70(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            sub_1B17D3A70(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(*a3 + 4 * *(v9 - 1)) >= *(float *)(*a3 + 4 * *v9))
          {
            result = (uint64_t)sub_1B17D3B2C(v9, a2, a3);
            v9 = (__int16 *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1B17D3C08(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1B17D3CE8(v9, v17, a3);
          v9 = v17 + 1;
          result = sub_1B17D3CE8(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_1B17D3618(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1B17D4034(v9, a2, a2, a3);
        return result;
    }
  }
}

__int16 *sub_1B17D396C(__int16 *result, __int16 *a2, uint64_t *a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  _WORD *v13;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *a3;
      v6 = result;
      do
      {
        v7 = v6[1];
        v8 = *v6;
        v6 = v3;
        v9 = *(float *)(v5 + 4 * v7);
        if (v9 < *(float *)(v5 + 4 * v8))
        {
          v10 = v7;
          v11 = v8;
          v12 = v4;
          while (1)
          {
            *(__int16 *)((char *)result + v12 + 2) = v11;
            if (!v12)
              break;
            v11 = *(__int16 *)((char *)result + v12 - 2);
            v12 -= 2;
            if (v9 >= *(float *)(v5 + 4 * v11))
            {
              v13 = (__int16 *)((char *)result + v12 + 2);
              goto LABEL_10;
            }
          }
          v13 = result;
LABEL_10:
          *v13 = v10;
        }
        v3 = v6 + 1;
        v4 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

__int16 *sub_1B17D3A00(__int16 *result, __int16 *a2, uint64_t *a3)
{
  __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  __int16 v8;
  __int16 v9;
  __int16 *v10;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      do
      {
        v5 = result[1];
        v6 = *result;
        result = v3;
        v7 = *(float *)(v4 + 4 * v5);
        if (v7 < *(float *)(v4 + 4 * v6))
        {
          v8 = v5;
          v9 = v6;
          v10 = result;
          do
          {
            *v10 = v9;
            v9 = *(v10 - 2);
            --v10;
          }
          while (v7 < *(float *)(v4 + 4 * v9));
          *v10 = v8;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1B17D3A70(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  __int16 v8;
  __int16 v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a4;
  v6 = *(float *)(*a4 + 4 * *a2);
  v7 = *(float *)(*a4 + 4 * v4);
  v8 = *a2;
  v9 = *a3;
  v10 = *(float *)(*a4 + 4 * *a3);
  if (v6 < v7)
  {
    if (v10 < v6)
    {
      *a1 = v9;
      *a3 = v4;
      return 1;
    }
    *a1 = v8;
    *a2 = v4;
    v13 = *a3;
    if (*(float *)(v5 + 4 * v13) >= v7)
      return 1;
    *a2 = v13;
    *a3 = v4;
    return 2;
  }
  if (v10 < v6)
  {
    *a2 = v9;
    *a3 = v8;
    v11 = *a2;
    v12 = *a1;
    if (*(float *)(v5 + 4 * v11) >= *(float *)(v5 + 4 * v12))
      return 1;
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

__int16 *sub_1B17D3B2C(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  __int16 *v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *a3;
  v5 = *(float *)(*a3 + 4 * v3);
  if (v5 >= *(float *)(*a3 + 4 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 >= *(float *)(v4 + 4 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 >= *(float *)(v4 + 4 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 < *(float *)(v4 + 4 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 >= *(float *)(v4 + 4 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 < *(float *)(v4 + 4 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

__int16 *sub_1B17D3C08(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  __int16 *v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = 0;
  v4 = *a1;
  v5 = *a3;
  v6 = *(float *)(*a3 + 4 * *a1);
  do
    v7 = a1[++v3];
  while (*(float *)(v5 + 4 * v7) < v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(float *)(v5 + 4 * v11) >= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(float *)(v5 + 4 * v10) >= v6);
  }
  if (v8 < a2)
  {
    v12 = v7;
    v13 = *a2;
    v14 = v8;
    v15 = a2;
    do
    {
      *v14 = v13;
      *v15 = v12;
      do
      {
        v16 = v14[1];
        ++v14;
        v12 = v16;
      }
      while (*(float *)(v5 + 4 * v16) < v6);
      do
      {
        v17 = *--v15;
        v13 = v17;
      }
      while (*(float *)(v5 + 4 * v17) >= v6);
    }
    while (v14 < v15);
    v9 = v14 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL sub_1B17D3CE8(__int16 *a1, __int16 *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  __int16 *v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*a3 + 4 * v8) < *(float *)(*a3 + 4 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1B17D3A70(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1B17D3E88(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1B17D3F48(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_1B17D3A70(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 6;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *(float *)(v13 + 4 * v15);
    if (v16 < *(float *)(v13 + 4 * *v10))
    {
      v17 = *v10;
      v18 = v14;
      while (1)
      {
        *(__int16 *)((char *)a1 + v18) = v17;
        v19 = v18 - 2;
        if (v18 == 2)
          break;
        v20 = *(__int16 *)((char *)a1 + v18 - 4);
        v17 = v20;
        v21 = *(float *)(v13 + 4 * v20);
        v18 = v19;
        if (v16 >= v21)
        {
          v22 = (__int16 *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      *v22 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 2;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t sub_1B17D3E88(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1B17D3A70(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *a5;
  if (*(float *)(*a5 + 4 * v11) < *(float *)(*a5 + 4 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(float *)(v13 + 4 * v14) < *(float *)(v13 + 4 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(float *)(v13 + 4 * v16) < *(float *)(v13 + 4 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1B17D3F48(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, __int16 *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = sub_1B17D3E88(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = *a6;
  if (*(float *)(*a6 + 4 * v13) < *(float *)(*a6 + 4 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    v16 = *a4;
    v17 = *a3;
    if (*(float *)(v15 + 4 * v16) < *(float *)(v15 + 4 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      if (*(float *)(v15 + 4 * v18) < *(float *)(v15 + 4 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        if (*(float *)(v15 + 4 * v20) < *(float *)(v15 + 4 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

__int16 *sub_1B17D4034(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  __int16 v19;
  __int16 *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 3)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_1B17D4190((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*(float *)(*a4 + 4 * v15) < *(float *)(*a4 + 4 * v16))
        {
          *v14 = v16;
          *a1 = v15;
          sub_1B17D4190((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 3)
    {
      v17 = (unint64_t)v8 >> 1;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = sub_1B17D4278(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          sub_1B17D42EC((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1B17D4190(uint64_t result, uint64_t *a2, uint64_t a3, __int16 *a4)
{
  char *v4;
  int64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  __int16 v12;
  __int16 *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (char *)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 1)
    {
      v6 = (uint64_t)(v4 + 1);
      v7 = (__int16 *)(result + 2 * (_QWORD)(v4 + 1));
      v8 = (uint64_t)(v4 + 2);
      v9 = *a2;
      if (v8 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *a4;
      v11 = *(float *)(v9 + 4 * v10);
      if (*(float *)(v9 + 4 * *v7) >= v11)
      {
        v12 = *v7;
        do
        {
          v13 = v7;
          *a4 = v12;
          if (v5 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (__int16 *)(result + 2 * v6);
          v15 = v14 + 2;
          if (v15 < a3 && *(float *)(v9 + 4 * *v7) < *(float *)(v9 + 4 * v7[1]))
          {
            ++v7;
            v6 = v15;
          }
          v12 = *v7;
          a4 = v13;
        }
        while (*(float *)(v9 + 4 * *v7) >= v11);
        *v13 = v10;
      }
    }
  }
  return result;
}

__int16 *sub_1B17D4278(__int16 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    v8 = 2 * v3 + 2;
    result = (__int16 *)((char *)result + v8);
    v3 = (2 * v3) | 1;
    if (v8 < a3 && *(float *)(v6 + 4 * *result) < *(float *)(v6 + 4 * result[1]))
    {
      ++result;
      v3 = v8;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_1B17D42EC(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  __int16 *v5;
  uint64_t v6;
  _WORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _WORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (__int16 *)(result + 2 * v4);
    v6 = *v5;
    v9 = *(__int16 *)(a2 - 2);
    v7 = (_WORD *)(a2 - 2);
    v8 = v9;
    v10 = *a3;
    v11 = *(float *)(*a3 + 4 * v9);
    if (*(float *)(*a3 + 4 * v6) < v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (__int16 *)(result + 2 * v4);
        LOWORD(v6) = *v5;
        v7 = v12;
      }
      while (*(float *)(v10 + 4 * *v5) < v11);
      *v12 = v8;
    }
  }
  return result;
}

void sub_1B17D4358(_OWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  __int128 v11;
  float v12;
  float v13;

  if (!a1)
  {
    v12 = a9;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"out");
    a9 = v12;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v13 = a9;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"center");
    a9 = v13;
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v11 = *a2;
  *((float *)&v11 + 3) = a9;
  *a1 = v11;
}

float32x4_t *sub_1B17D43E4(float32x4_t *result, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float v4;
  float32x4_t v5;
  float32x4_t v6;
  float v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;

  v3 = *a2;
  LODWORD(v4) = HIDWORD(*(unsigned __int128 *)a2);
  if (v4 < 0.0)
  {
    v5 = *a3;
LABEL_5:
    *result = v5;
    return result;
  }
  v6 = *a3;
  LODWORD(v7) = HIDWORD(*(unsigned __int128 *)a3);
  if (v7 < 0.0)
  {
    v5 = *a2;
    goto LABEL_5;
  }
  v8 = vsubq_f32(v3, v6);
  v9 = vmulq_f32(v8, v8);
  v10 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
  if ((float)(v4 + v10) >= v7)
  {
    if ((float)(v7 + v10) > v4)
    {
      v3 = vmlaq_n_f32(v3, v8, (float)(v4 - (float)((float)((float)(v4 + v7) + v10) * 0.5)) / v10);
      v3.f32[3] = (float)((float)(v4 + v7) + v10) * 0.5;
    }
    v6 = v3;
  }
  *result = v6;
  return result;
}

float sub_1B17D4478(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float result;

  v3 = a2[1];
  v4 = a2[2];
  v5 = vmulq_f32(*a2, *a2);
  v6 = vmulq_f32(v3, v3);
  v7 = vmulq_f32(v4, v4);
  v8 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a2[3], v4, *a1, 2), v3, *(float32x2_t *)a1->f32, 1), *a2, COERCE_FLOAT(*a1));
  result = vmuls_lane_f32(fmaxf(fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0])), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1))).f32[0])), *a1, 3);
  v8.f32[3] = result;
  *a3 = v8;
  return result;
}

_QWORD *sub_1B17D44F0(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_1B21AB51C(a1, "Authoring");
  *result = off_1E63D07B0;
  result[3] = a2;
  return result;
}

uint64_t sub_1B17D4528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v4, *(_WORD *)(a1 + 8), 9273, 1656467160);
  return sub_1B17A371C(a2, v4, 1);
}

uint64_t sub_1B17D45A0@<X0>(uint64_t a1@<X8>)
{
  CFX::RG::ResourceIdentifier *v2;
  uint64_t v4[3];

  v4[2] = *MEMORY[0x1E0C80C00];
  v2 = (CFX::RG::ResourceIdentifier *)CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v4, 6893, 9273, 1656467160);
  v4[1] = CFX::RG::ResourceIdentifier::finalColor(v2);
  return sub_1B17A371C(a1, v4, 2);
}

unint64_t sub_1B17D4620(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _BOOL4 v45;
  _BOOL4 v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v60;

  v9 = *(unsigned __int16 *)(a1 + 8);
  v10 = *a3;
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)*((_QWORD *)a3 + 1);
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      v60 = v13;
      v14 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v60);
      v9 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v9 ^ ((0x9DDFEA08EB382D69 * (v14 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (v14 ^ v9)))) ^ ((0x9DDFEA08EB382D69 * (v9 ^ ((0x9DDFEA08EB382D69 * (v14 ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (v14 ^ v9)))) >> 47));
      v12 -= 8;
    }
    while (v12);
  }
  v15 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 24), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v23 = (void *)sub_1B1814A78(*(_QWORD *)(a1 + 24), v16, v17, v18, v19, v20, v21, v22);
  v24 = sub_1B1815DA8(*(_QWORD *)(a1 + 24));
  v25 = sub_1B1815DD4(*(_QWORD *)(a1 + 24));
  v29 = objc_msgSend_showsAuthoringEnvironment(v15, v26, v27, v28);
  v33 = objc_msgSend_showsStatistics(v23, v30, v31, v32);
  v37 = objc_msgSend_showsDebugUI(v23, v34, v35, v36);
  v44 = (void *)sub_1B1814484(*(_QWORD *)(a1 + 24), 0, v38, v39, v40, v41, v42, v43);
  v45 = sub_1B17FF114(v44);
  v46 = sub_1B19B643C(*(_QWORD *)(a1 + 24), v44);
  v47 = sub_1B1814458(*(_QWORD *)(a1 + 24));
  v48 = 2;
  if (!v24)
    v48 = 0;
  v49 = 4;
  if (!v25)
    v49 = 0;
  v50 = v49 | v48;
  v51 = 8;
  if (!v29)
    v51 = 0;
  v52 = v50 | v51;
  v53 = 16;
  if (!v33)
    v53 = 0;
  v54 = 32;
  if (!v37)
    v54 = 0;
  v55 = v52 | v53 | v54;
  v56 = 64;
  if (!v45)
    v56 = 0;
  v57 = 128;
  if (!v46)
    v57 = 0;
  v58 = 0x9DDFEA08EB382D69 * ((v55 | v56 | v57 | (v47 >> 11) & 0x100) ^ v9);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v9 ^ (v58 >> 47) ^ v58)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v58 >> 47) ^ v58)) >> 47));
}

void sub_1B17D47D4(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t *a3)
{
  CFX::RG::Resource *v6;
  uint64_t PublishedResource;
  uint64_t v8;
  BOOL v9;
  _OWORD *v10;
  CFX::RG::Resource *v11;
  CFX::RG::Resource *v12;
  _OWORD *v13;
  const char *v14;
  CFX::RG::RenderGraphBuilder *v15;
  uint64_t v16;
  CFX::RG::Resource *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _OWORD *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  int v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char *v67;
  CFX::RG::RenderGraphBuilder *v68;
  const char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  CFX::RG::Pass *v80;
  _BYTE *v81;
  char v82;
  unsigned __int8 *v83;
  __int16 v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  const char *v89;
  uint64_t v90;
  __int16 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _QWORD v102[4];
  BOOL v103;
  uint64_t v104;
  _BYTE v105[160];
  _OWORD v106[10];
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[168];

  if (!sub_1B1815DA8(*(_QWORD *)(a1 + 24)) || sub_1B1815DD4(*(_QWORD *)(a1 + 24)))
  {
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v108, 9273, 9273, 1656467160);
    CFX::RG::ResourceReference::ResourceReference((uint64_t)v109, v108);
    v6 = sub_1B17C1128((uint64_t)a3, (uint64_t)"Authoring input color", (CFX::RG::ResourceReference *)v109);
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v107, 9273, 9273, -797957750);
    PublishedResource = CFX::RG::RenderGraphBuilder::findPublishedResource((uint64_t)a3, v107);
    v9 = (PublishedResource | v8) == 0;
    if (PublishedResource | v8)
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v104, 9273, 9273, -797957750);
      CFX::RG::ResourceReference::ResourceReference((uint64_t)v105, v104);
      v11 = sub_1B17C1128((uint64_t)a3, (uint64_t)"Authoring input depth", (CFX::RG::ResourceReference *)v105);
    }
    else
    {
      v10 = (_OWORD *)CFX::RG::Resource::constTextureDesc(v6);
      CFX::RG::TextureDescriptorReference::withSampleCount(v10, 1, (uint64_t)&v89);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v89, MTLPixelFormatDepth32Float, (uint64_t)v106);
      v11 = sub_1B17A34D0(a3, (uint64_t)"Authoring input depth", v106);
    }
    v12 = v11;
    v13 = (_OWORD *)CFX::RG::Resource::constTextureDesc(v6);
    CFX::RG::TextureDescriptorReference::withSampleCount(v13, 1, (uint64_t)&v89);
    v15 = CFX::RG::copyIfNeeded_r((CFX::RG *)a3, v6, 0, (CFX::RG::Pass *)&v89, (const CFX::RG::TextureDescriptorReference *)"Authoring color input resolve", v14);
    v17 = (CFX::RG::Resource *)v16;
    v24 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 24), v16, v18, v19, v20, v21, v22, v23);
    if (objc_msgSend_showsAuthoringEnvironment(v24, v25, v26, v27))
    {
      if (v9)
      {
        v35 = 0;
      }
      else
      {
        v38 = (_OWORD *)CFX::RG::Resource::constTextureDesc(v12);
        CFX::RG::TextureDescriptorReference::withSampleCount(v38, 1, (uint64_t)&v89);
        v12 = CFX::RG::copyIfNeeded_r((CFX::RG *)a3, v12, 0, (CFX::RG::Pass *)&v89, (const CFX::RG::TextureDescriptorReference *)"Authoring depth input resolve", v39);
      }
      v102[0] = v15;
      v102[1] = v17;
      v102[2] = v12;
      v102[3] = v35;
      v103 = v9;
      v40 = *(_QWORD *)(a1 + 24);
      v89 = "Authoring";
      v90 = v40;
      v91 = 0;
      v37 = sub_1B19B78BC(a2, a3, (uint64_t)&v89, (uint64_t)v102, v31, v32, v33, v34);
      v15 = (CFX::RG::RenderGraphBuilder *)v37[52];
      v47 = (void *)sub_1B1814484(*(_QWORD *)(a1 + 24), 0, v41, v42, v43, v44, v45, v46);
      if ((sub_1B1814458(*(_QWORD *)(a1 + 24)) & 0x80000) != 0 && sub_1B17FF114(v47))
      {
        v48 = *(_QWORD *)(a1 + 24);
        v89 = "Manipulator";
        v90 = v48;
        v91 = 0;
        v49 = (__int128 *)CFX::RG::Resource::constTextureDesc(v12);
        v50 = v49[1];
        v92 = *v49;
        v93 = v50;
        v51 = v49[4];
        v52 = v49[5];
        v53 = v49[3];
        v94 = v49[2];
        v97 = v52;
        v96 = v51;
        v95 = v53;
        v54 = v49[8];
        v55 = v49[9];
        v56 = v49[7];
        v98 = v49[6];
        v101 = v55;
        v100 = v54;
        v99 = v56;
        v36 = (uint64_t *)sub_1B1982C60(a3, (uint64_t)&v89, (uint64_t)v15);
        CFX::RG::Pass::dependsOn(v36, (CFX::RG::Pass *)v37);
        v12 = (CFX::RG::Resource *)v36[50];
      }
      else
      {
        v36 = v37;
      }
      v17 = (CFX::RG::Resource *)v36;
    }
    else
    {
      v36 = 0;
      v37 = 0;
    }
    v57 = (void *)sub_1B1814A78(*(_QWORD *)(a1 + 24), v28, v29, v30, v31, v32, v33, v34);
    if (!v57)
      goto LABEL_25;
    v61 = v57;
    v62 = objc_msgSend_showsStatistics(v57, v58, v59, v60);
    v66 = objc_msgSend_showsDebugUI(v61, v63, v64, v65);
    if (!sub_1B1815DD4(*(_QWORD *)(a1 + 24)) || !(v62 | v66))
      goto LABEL_25;
    CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v89);
    v68 = CFX::RG::copyIfNeeded_r((CFX::RG *)a3, v15, v17, (CFX::RG::Pass *)&v89, (const CFX::RG::TextureDescriptorReference *)"Overlay color input copy", v67);
    v70 = (uint64_t *)v69;
    v71 = *(_QWORD *)(a1 + 24);
    v89 = "Overlay";
    v90 = v71;
    v91 = 0;
    LOBYTE(v92) = objc_msgSend_showsStatistics(v61, v69, v72, v73);
    BYTE1(v92) = objc_msgSend_showsDebugUI(v61, v74, v75, v76);
    v77 = v36 == v70 ? (uint64_t)v12 : 0;
    v78 = (uint64_t *)sub_1B198CB78(a3, (uint64_t)&v89, (uint64_t)v68, v77);
    if (v78)
    {
      v79 = v78;
      if (v70)
        v80 = (CFX::RG::Pass *)v70;
      else
        v80 = (CFX::RG::Pass *)v37;
      CFX::RG::Pass::dependsOn(v78, v80);
      v17 = (CFX::RG::Resource *)v79;
      v15 = v68;
    }
    else
    {
LABEL_25:
      if (!v17)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v87, 9273, 9273, 1656467160);
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v86, *(_WORD *)(a1 + 8), 64484, 1656467160);
        CFX::RG::RenderGraphBuilder::aliasResourceReference((uint64_t)a3, v87, v86);
        return;
      }
    }
    v81 = (_BYTE *)*((_QWORD *)v17 + 3);
    v82 = *v81;
    if (*v81)
    {
      v83 = v81 + 1;
      v84 = -25147;
      do
      {
        v84 = 403 * (v84 ^ v82);
        v85 = *v83++;
        v82 = v85;
      }
      while (v85);
    }
    else
    {
      v84 = -25147;
    }
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v88, *(_WORD *)(a1 + 8), v84, 1656467160);
    CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v88, (unint64_t)v15, (uint64_t)v17);
  }
}

uint64_t sub_1B17D4C18(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B17D4C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v6;
  int v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (qword_1EEF65698 != -1)
    dispatch_once_f(&qword_1EEF65698, &qword_1EEF65690, (dispatch_function_t)sub_1B17D4C18);
  v4 = sub_1B179CB90(qword_1EEF65690, 0x28uLL);
  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = a2;
  *(_QWORD *)v7 = 0x1000000006;
  v6 = 4;
  if (sysctl(v7, 2u, (void *)(v4 + 32), &v6, 0, 0) < 0)
    *(_DWORD *)(v4 + 32) = 64;
  return v4;
}

void sub_1B17D4D2C(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  void *v5;

  v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  v5 = *(void **)(a1 + 16);
  v4 = (_QWORD *)(a1 + 16);
  v3 = v5;
  if (v5)
  {
    free(v3);
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_1B17D4D6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  if (*(_DWORD *)(a1 + 24))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      sub_1B17D4D2C(*(_QWORD *)(a1 + 16) + v2);
      ++v3;
      v2 += 40;
    }
    while (v3 < *(unsigned int *)(a1 + 24));
  }
  free(*(void **)(a1 + 16));
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
}

_DWORD *sub_1B17D4DD0(_DWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = (result[6] - 1);
  result[6] = v2;
  if ((_DWORD)v2 != (_DWORD)a2)
    return memmove((void *)(*((_QWORD *)result + 2) + 8 * a2), (const void *)(*((_QWORD *)result + 2) + 8 * a2 + 8), 8 * (v2 - a2));
  return result;
}

void sub_1B17D4E00(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  void *v25;
  unsigned int v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;

  v8 = WORD1(a2);
  v29 = a2;
  if (!HIDWORD(a2))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. cannot remove null span"), a3, a4, a5, a6, a7, a8, (uint64_t)"span.count > 0");
  v28 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v28)
  {
    v15 = 0;
    v12 = 0;
LABEL_21:
    v24 = *(_DWORD *)(a1 + 28);
    if (v24 < *(_DWORD *)(a1 + 24) + 1)
    {
      v25 = *(void **)(a1 + 16);
      if (v25)
      {
        v26 = 2 * v24;
        *(_DWORD *)(a1 + 28) = v26;
        if (!v26)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"page->freeCapacity");
          v25 = *(void **)(a1 + 16);
          v26 = *(_DWORD *)(a1 + 28);
        }
        v27 = malloc_type_realloc(v25, 8 * v26, 0x100004000313F17uLL);
      }
      else
      {
        *(_DWORD *)(a1 + 28) = 8;
        v27 = malloc_type_malloc(0x40uLL, 0x100004000313F17uLL);
      }
      *(_QWORD *)(a1 + 16) = v27;
    }
    if (HIDWORD(v29) > *(_DWORD *)(a1 + 32))
      *(_DWORD *)(a1 + 32) = HIDWORD(v29);
    if (v15)
      memmove((void *)(*(_QWORD *)(a1 + 16) + 8 * v12 + 8), (const void *)(*(_QWORD *)(a1 + 16) + 8 * v12), 8 * (v28 - v12));
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v12) = v29;
    ++*(_DWORD *)(a1 + 24);
    return;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v8;
  v14 = (uint64_t *)&v29;
  v15 = 1;
  while (1)
  {
    v16 = (unsigned int *)(*(_QWORD *)(a1 + 16) + v10);
    v17 = *((unsigned __int16 *)v16 + 1);
    v18 = v16[1];
    v19 = *((unsigned __int16 *)v14 + 1);
    v20 = *((_DWORD *)v14 + 1);
    v21 = v16;
    if (v18 + v17 == v19 || (v21 = (unsigned int *)v14, v20 + v19 == v17))
    {
      v22 = *v21;
      if (v11 == 1)
      {
        sub_1B17D4DD0((_DWORD *)a1, v12);
        v16 = (unsigned int *)v14;
      }
      v23 = v20 + v18;
      *(_QWORD *)v16 = v22 | (v23 << 32);
      if (v23 + WORD1(v22) > *(_DWORD *)(a1 + 8))
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. page overflow"), a3, a4, a5, a6, a7, a8, (uint64_t)"(freeSpan->start.index + freeSpan->count) <= page->capacity");
        LODWORD(v23) = v16[1];
      }
      if (v23 > *(_DWORD *)(a1 + 32))
        *(_DWORD *)(a1 + 32) = v23;
      if (++v11 == 2)
        return;
      v17 = *((unsigned __int16 *)v16 + 1);
      v13 = WORD1(v29);
      v14 = (uint64_t *)v16;
    }
    if (v17 > v13)
      break;
    v15 = ++v12 < v28;
    v10 += 8;
    if (v28 == v12)
    {
      v12 = v28;
      break;
    }
  }
  if (!v11)
    goto LABEL_21;
}

unint64_t sub_1B17D5058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v8 = a2;
  if (*(_DWORD *)(a1 + 32) < a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong page selected for span size %d"), a3, a4, a5, a6, a7, a8, (uint64_t)"spanSize <= page->freeMaxSpan");
  v10 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = 4;
    while (1)
    {
      v14 = *(_DWORD *)(v12 + v13);
      if (v14 >= v8)
        break;
      ++v11;
      v13 += 8;
      if (v10 == v11)
        goto LABEL_7;
    }
    v16 = *(unsigned __int16 *)(v12 + v13 - 4);
    v15 = *(unsigned __int16 *)(v12 + v13 - 2);
    if (v15 + v8 > *(_DWORD *)(a1 + 8))
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. page overflow"), a3, a4, a5, a6, a7, a8, (uint64_t)"span.start.index + span.count <= page->capacity");
      v12 = *(_QWORD *)(a1 + 16);
    }
    v18 = *(_DWORD *)(v12 + v13) - v8;
    if (v18)
    {
      v19 = (_DWORD *)(v12 + v13);
      *((_WORD *)v19 - 1) += v8;
      *v19 = v18;
    }
    else
    {
      sub_1B17D4DD0((_DWORD *)a1, v11);
    }
    if (*(_DWORD *)(a1 + 32) == v14)
    {
      v20 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = (unsigned int *)(*(_QWORD *)(a1 + 16) + 4);
        do
        {
          v24 = *v22;
          v22 += 2;
          v23 = v24;
          if (v24 > v21)
            v21 = v23;
          --v20;
        }
        while (v20);
        *(_DWORD *)(a1 + 32) = v21;
      }
      else
      {
        *(_DWORD *)(a1 + 32) = 0;
      }
    }
  }
  else
  {
LABEL_7:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"0");
    v8 = 0;
    v15 = 0xFFFF;
    v16 = 0xFFFF;
  }
  return (v8 << 32) | ((unint64_t)v15 << 16) | v16;
}

void sub_1B17D51E8(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v7 = a4;
  v8 = *(_QWORD *)(a1 + 40) * a4;
  v9 = malloc_type_malloc(v8, 0xCFF4C382uLL);
  *(_QWORD *)a2 = v9;
  bzero(v9, v8);
  *(_DWORD *)(a2 + 8) = a4;
  *(_DWORD *)(a2 + 12) = a3;
  sub_1B17D4E00(a2, (unsigned __int16)a3 | (unint64_t)(v7 << 32), v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1B17D5260(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  void *v5;
  uint64_t v6;

  v4 = *(_DWORD *)(a1 + 24);
  if (v4)
  {
    *(_DWORD *)(a1 + 24) = v4 + 1;
    v5 = malloc_type_realloc(*(void **)(a1 + 16), 40 * (v4 + 1), 0x10A00408EF24B1CuLL);
    *(_QWORD *)(a1 + 16) = v5;
  }
  else
  {
    v5 = malloc_type_malloc(0x28uLL, 0x10A00408EF24B1CuLL);
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = 1;
  }
  ++*(_DWORD *)(a1 + 28);
  v6 = (uint64_t)v5 + 40 * v4;
  sub_1B17D51E8(a1, v6, v4, a2);
  return v6;
}

unint64_t sub_1B17D5310(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;

  v11 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = v11;
    while (!*(_QWORD *)v12 || *(_DWORD *)(v12 + 32) < a2)
    {
      v12 += 40;
      if (!--v13)
      {
        v14 = 0;
        v12 = 0;
        v15 = 40 * v11;
        do
        {
          v16 = *(_QWORD *)(a1 + 16);
          v17 = (_QWORD *)(v16 + v14);
          a4 = *(unsigned int *)(v16 + v14 + 32);
          if (a4 >= a2)
          {
            if (!*v17)
              sub_1B17D51E8(a1, (uint64_t)v17, *(_DWORD *)(v16 + v14 + 12), a4);
            v12 = (uint64_t)v17;
          }
          v14 += 40;
        }
        while (v15 != v14);
        if (v12)
          break;
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (*(_QWORD *)(a1 + 48) >= (uint64_t)a2)
      v18 = *(_QWORD *)(a1 + 48);
    else
      v18 = a2;
    if (v18 > 0x10000)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: RendererElementStore does not support span of more than %d"), (uint64_t)a3, a4, a5, a6, a7, a8, 0x10000);
      return 0xFFFFFFFFLL;
    }
    v12 = sub_1B17D5260(a1, v18);
  }
  if (a3)
    *a3 = v12;
  *(_DWORD *)(a1 + 36) += a2;
  return sub_1B17D5058(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void sub_1B17D5438(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = (unsigned __int16)a2;
  v12 = v10 + 40 * (unsigned __int16)a2;
  if (*(_DWORD *)(v12 + 12) != (unsigned __int16)a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. pages are broken..."), a3, a4, a5, a6, a7, a8, (uint64_t)"page->pageIndex == span.start.page");
  sub_1B17D4E00(v12, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 40 * v11 + 32) == *(_DWORD *)(v10 + 40 * v11 + 8) && *(_DWORD *)(a1 + 28) >= 2u)
  {
    sub_1B17D4D2C(v12);
    --*(_DWORD *)(a1 + 28);
  }
}

unint64_t sub_1B17D54EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B17D5310(a1, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t sub_1B17D54F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_1B17D5500(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 48));
}

uint64_t sub_1B17D5510(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"allocator");
  if ((unsigned __int16)a2 >= *(_DWORD *)(a1 + 24))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. handle is broken..."), a3, a4, a5, a6, a7, a8, (uint64_t)"handle.page < allocator->_pageCount");
  v11 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v11 + 40 * (unsigned __int16)a2 + 12) != (unsigned __int16)a2
    || *(_DWORD *)(v11 + 40 * (unsigned __int16)a2 + 8) <= HIWORD(a2))
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. re is broken..."), a3, a4, a5, a6, a7, a8, (uint64_t)"(page->pageIndex == handle.page) && (handle.index < page->capacity)");
  }
  return *(_QWORD *)(v11 + 40 * (unsigned __int16)a2) + *(_QWORD *)(a1 + 40) * (a3 + HIWORD(a2));
}

uint64_t sub_1B17D5600(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = *(unsigned int *)(result + 24);
  if ((_DWORD)v14)
  {
    v3 = result;
    for (i = 0; i != v14; ++i)
    {
      v5 = *(_QWORD *)(v3 + 16);
      v6 = v5 + 40 * i;
      if (*(_DWORD *)(v6 + 24))
      {
        v7 = v5 + 40 * i;
        v8 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 16) + 2);
        v9 = *(_DWORD *)(v7 + 8);
        if (v9)
          goto LABEL_7;
      }
      else
      {
        v9 = *(_DWORD *)(v5 + 40 * i + 8);
        v8 = v9;
        if (v9)
        {
LABEL_7:
          v10 = 0;
          v11 = 0;
          v12 = (unsigned int *)(v5 + 40 * i + 8);
          v13 = (_QWORD *)(v5 + 40 * i + 16);
          do
          {
            if (v11 == v8)
            {
              v11 = v8 + *(_DWORD *)(*v13 + 8 * v10++ + 4) - 1;
              if (v10 >= *(_DWORD *)(v6 + 24))
                v8 = v9;
              else
                v8 = *(unsigned __int16 *)(*v13 + 8 * v10 + 2);
            }
            else
            {
              result = (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)v6 + *(_QWORD *)(v3 + 40) * v11);
            }
            ++v11;
            v9 = *v12;
          }
          while (v11 < *v12);
        }
      }
    }
  }
  return result;
}

CFStringRef sub_1B17D573C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXSpanAllocator %p>"), a1);
}

CFStringRef sub_1B17D5778(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXSpanAllocator %p>"), a1);
}

void sub_1B17D6020(uint64_t a1, const char *a2, uint64_t a3, void *a4, int a5)
{
  int v8;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  char hasPrefix;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int hasSuffix;
  const char *v28;
  uint64_t v29;

  v8 = (int)a2;
  if ((objc_msgSend_hasPrefix_(a4, a2, (uint64_t)CFSTR("texture"), (uint64_t)a4) & 1) != 0
    || (objc_msgSend_hasPrefix_(a4, v10, (uint64_t)CFSTR("depth"), v11) & 1) != 0)
  {
    v12 = 176;
    if (v8)
      v12 = 184;
    v13 = *(void **)(a1 + v12);
    if (objc_msgSend_hasSuffix_(a4, v10, (uint64_t)CFSTR(">"), v11))
      objc_msgSend_appendFormat_(v13, v14, (uint64_t)CFSTR(", %@ %@\n"), v15, a4, a3);
    else
      objc_msgSend_appendFormat_(v13, v14, (uint64_t)CFSTR(", %@<float> %@\n"), v15, a4, a3);
    v18 = 1;
  }
  else
  {
    hasPrefix = objc_msgSend_hasPrefix_(a4, v10, (uint64_t)CFSTR("sampler"), v11);
    v25 = 176;
    if (v8)
      v25 = 184;
    v26 = *(void **)(a1 + v25);
    if ((hasPrefix & 1) != 0)
    {
      objc_msgSend_appendFormat_(v26, v23, (uint64_t)CFSTR(", %@ %@\n"), v24, a4, a3);
      v18 = 2;
    }
    else
    {
      if (objc_msgSend_hasSuffix_(a4, v23, (uint64_t)CFSTR("*"), v24))
        objc_msgSend_appendFormat_(v26, v28, (uint64_t)CFSTR(", device %@ %@\n"), v29, a4, a3);
      else
        objc_msgSend_appendFormat_(v26, v28, (uint64_t)CFSTR(", constant %@& %@\n"), v29, a4, a3);
      v18 = 0;
    }
  }
  if (a5 == 3)
  {
    objc_msgSend_appendFormat_(*(void **)(a1 + 168), v16, (uint64_t)CFSTR("_lightingContribution.%@=%@;\n"), v17, a3, a3);
    if (v18 != 1)
    {
      v21 = *(void **)(a1 + 160);
LABEL_17:
      objc_msgSend_appendFormat_(v21, v19, (uint64_t)CFSTR("%@ %@;\n"), v20, a4, a3);
      return;
    }
    hasSuffix = objc_msgSend_hasSuffix_(a4, v19, (uint64_t)CFSTR(">"), v20);
    v21 = *(void **)(a1 + 160);
    if (hasSuffix)
      goto LABEL_17;
    objc_msgSend_appendFormat_(v21, v19, (uint64_t)CFSTR("%@<float> %@;\n"), v20, a4, a3);
  }
}

uint64_t sub_1B17D61EC(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;

  if (a3 >= 1)
  {
    v8 = a3;
    v9 = (uint64_t *)a2;
    v10 = (void *)result;
    do
    {
      v11 = *v9;
      if (!*v9)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"modifier");
      result = sub_1B19B9404(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (result)
        result = objc_msgSend_addEntriesFromDictionary_(v10, a2, result, a4);
      ++v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1B17D627C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  const char *v19;
  uint64_t v20;
  BOOL v21;
  _QWORD v22[5];
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a3 >= 1)
  {
    v25 = v11;
    v26 = v10;
    v27 = v8;
    v28 = v9;
    v12 = a3;
    v13 = (uint64_t *)a2;
    v14 = result;
    v15 = MEMORY[0x1E0C809B0];
    do
    {
      v16 = *v13;
      if (!*v13)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"modifier");
      result = sub_1B19B93BC(v16, a2, a3, a4, a5, a6, a7, a8);
      if (result)
      {
        v17 = (void *)result;
        v18 = sub_1B19B97B8(*v13, a2, a3, a4, a5, a6, a7, a8);
        v21 = v18 && (v18 != 3 || *(_BYTE *)(v14 + 203));
        v22[0] = v15;
        v22[1] = 3221225472;
        v22[2] = sub_1B17D6388;
        v22[3] = &unk_1E63D5750;
        v22[4] = v14;
        v24 = v21;
        v23 = v18;
        result = objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v17, v19, (uint64_t)v22, v20);
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

void sub_1B17D6388(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1B17D6020(*(_QWORD *)(a1 + 32), (const char *)*(unsigned __int8 *)(a1 + 44), a2, a3, *(_DWORD *)(a1 + 40));
}

uint64_t sub_1B17D63A4(void **a1, int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  const char *v18;

  v6 = sub_1B1956D7C(a3);
  result = sub_1B1956ED0(a3);
  if ((v6 & 0x20) != 0 && a2)
  {
    v8 = result;
    v9 = 0x2000010000;
    if ((v6 & 0x80) == 0)
      v9 = 0x2000000000;
    a1[26] = (void *)sub_1B195A52C(result & 0xFFFFFEFF | (((v6 >> 6) & 1) << 8) | v9, (const char *)((v6 >> 8) & 0x7FFFF), a1[1]);
    a1[27] = (void *)sub_1B195A3A4(v8);
    v10 = (void *)MEMORY[0x1E0CB3940];
    v11 = sub_1B195A2D8();
    v12 = sub_1B19B83D4(CFSTR("CFX-OpenSubdiv-Utils.h"));
    v13 = sub_1B19B83D4(CFSTR("CFX-OpenSubdiv-Utils.metal"));
    a1[28] = (void *)objc_msgSend_stringWithFormat_(v10, v14, (uint64_t)CFSTR("%@%@%@"), v15, v11, v12, v13);
    a1[26] = (void *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1[26], v16, (uint64_t)CFSTR("#line"), (uint64_t)CFSTR("// #line"));
    a1[27] = (void *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1[27], v17, (uint64_t)CFSTR("#line"), (uint64_t)CFSTR("// #line"));
    result = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(a1[28], v18, (uint64_t)CFSTR("#line"), (uint64_t)CFSTR("// #line"));
    a1[28] = (void *)result;
  }
  else
  {
    a1[26] = &stru_1E63FD500;
    a1[27] = &stru_1E63FD500;
    a1[28] = &stru_1E63FD500;
  }
  return result;
}

uint64_t sub_1B17D8B40(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  const char *v66;
  uint64_t v67;
  unsigned __int8 v68;
  unsigned int v69;
  void *v70;

  v8 = sub_1B181A798(a3, 0);
  v9 = sub_1B181A798(a3, 1);
  result = sub_1B181A798(a3, 5);
  v13 = result;
  *(_BYTE *)(a1 + 24) = 0;
  if (a4)
  {
    result = sub_1B1956DBC(*(_QWORD *)a1, a2);
    if ((_DWORD)result)
    {
      v14 = *(void **)(a1 + 8);
      if (a3 == 6)
        objc_msgSend_setObject_forKeyedSubscript_(v14, v11, (uint64_t)&unk_1E6478388, v9);
      else
        objc_msgSend_setObject_forKeyedSubscript_(v14, v11, (uint64_t)&stru_1E63FD500, v9);
      if (sub_1B1956DAC(*(_QWORD *)a1, a2))
      {
        if (sub_1B1956DCC(*(_QWORD *)a1, a2) == 4)
          v15 = 7;
        else
          v15 = 6;
        v16 = sub_1B181A798(a3, v15);
        objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 8), v17, (uint64_t)&stru_1E63FD500, v16);
        *(_BYTE *)(a1 + 24) = 1;
        objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 8), v18, (uint64_t)&stru_1E63FD500, v13);
        result = sub_1B1956DA0(*(_QWORD *)a1, a2);
        v19 = result;
        if ((result & 0x1000) != 0)
        {
          v20 = sub_1B181A798(a3, 3);
          result = objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 8), v21, (uint64_t)&stru_1E63FD500, v20);
        }
        v22 = (v19 >> 13) & 0xF;
        if ((_DWORD)v22 && (_DWORD)v22 != 15)
        {
          v23 = sub_1B181A798(a3, 4);
          v26 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v24, (uint64_t)CFSTR("%d"), v25, v22);
          result = objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 8), v27, v26, v23);
        }
      }
      else
      {
        v28 = sub_1B181A798(a3, 2);
        result = objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 8), v29, (uint64_t)&stru_1E63FD500, v28);
      }
    }
  }
  v30 = *(void **)(a1 + 16);
  if (v30)
  {
    v31 = sub_1B181A798(a3, 1);
    objc_msgSend_addObject_(v30, v32, v31, v33);
    v34 = *(void **)(a1 + 16);
    v35 = sub_1B181A798(a3, 2);
    objc_msgSend_addObject_(v34, v36, v35, v37);
    v38 = *(void **)(a1 + 16);
    v39 = sub_1B181A798(a3, 3);
    objc_msgSend_addObject_(v38, v40, v39, v41);
    v42 = *(void **)(a1 + 16);
    v43 = sub_1B181A798(a3, 4);
    objc_msgSend_addObject_(v42, v44, v43, v45);
    v46 = *(void **)(a1 + 16);
    v47 = sub_1B181A798(a3, 5);
    objc_msgSend_addObject_(v46, v48, v47, v49);
    v50 = *(void **)(a1 + 16);
    v51 = sub_1B181A798(a3, 6);
    objc_msgSend_addObject_(v50, v52, v51, v53);
    v54 = *(void **)(a1 + 16);
    v55 = sub_1B181A798(a3, 7);
    result = objc_msgSend_addObject_(v54, v56, v55, v57);
  }
  if (a3 != 3)
  {
    result = objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 8), v11, v13, v12);
    if (result)
    {
      result = sub_1B1956DA0(*(_QWORD *)a1, a2);
      v64 = (result >> 17) & 0xF;
      if ((_DWORD)v64 != 15)
      {
        if (a3 == 16)
        {
          v65 = sub_1B1956EDC(*(_QWORD *)a1, v64, v58, v59, v60, v61, v62, v63);
          v68 = v65;
          v69 = HIBYTE(v65);
          v70 = *(void **)(a1 + 112);
          if (v69 <= 0xFE)
            return objc_msgSend_appendFormat_(v70, v66, (uint64_t)CFSTR("float2 _%@Texcoord = (vfx_commonprofile.textureTransforms[%d] * float4(_geometry.texcoords[%d], 0., 1.)).xy;\n"),
                     v67,
                     v8,
                     (*(_DWORD *)(a1 + 128) - 1),
                     v68);
          else
            return objc_msgSend_appendFormat_(v70, v66, (uint64_t)CFSTR("float2 _%@Texcoord = _geometry.texcoords[%d].xy;\n"),
                     v67,
                     v8,
                     v68);
        }
        else
        {
          return objc_msgSend_appendFormat_(*(void **)(a1 + 120), (const char *)v64, (uint64_t)CFSTR("    _surface.%@Texcoord = in.texcoord%d;\n"),
                   v59,
                   v8,
                   v64);
        }
      }
    }
  }
  return result;
}

void sub_1B17D9270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t sub_1B17D92BC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  const char *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;

  result = objc_msgSend_rangeValue(a2, (const char *)a2, a3, a4);
  v9 = v7;
  if (result >= *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56))
  {
    if (result >= *(_QWORD *)(a1 + 56))
      return result;
    v15 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v7, a3, v8);
    result = objc_msgSend_length(v15, v16, v17, v18);
    v14 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  }
  else
  {
    v10 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v7, a3, v8);
    result = objc_msgSend_length(v10, v11, v12, v13);
    v14 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 32);
  }
  *v14 += result - (_QWORD)v9;
  return result;
}

uint64_t sub_1B17D9904(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_appendFormat_(*(void **)(*(_QWORD *)(a1 + 32) + 192), a2, (uint64_t)CFSTR("%@ %@;\n"),
           a4,
           a3,
           a2);
}

void *sub_1B17D9934(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFDictionary *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *result;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];

  v8 = a2;
  v10 = *a3;
  if (sub_1B19B97B8(*a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8) != (_DWORD)a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong entry point"), v12, v13, v14, v15, v16, v17, (uint64_t)"CFXShaderModifierGetEntryPoint(shaderModifier) == entryPoint");
  v18 = sub_1B19B932C(v10, v11, v12, v13, v14, v15, v16, v17);
  if (v18)
    objc_msgSend_appendString_(*(void **)(a1 + 32), v19, v18, v21);
  v26 = sub_1B19B944C(v10, (uint64_t)v19, v20, v21, v22, v23, v24, v25);
  if (v26)
    *(_QWORD *)(a1 + 8 * v8 + 48) = v26;
  else
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Invalid shader modifier : no code provided"), v28, v29, v30, v31, v32, v33, v45);
  v34 = (const __CFDictionary *)sub_1B19B9494(v10, v27, v28, v29, v30, v31, v32, v33);
  if (v34)
    CFDictionaryApplyFunction(v34, (CFDictionaryApplierFunction)sub_1B17D9AE8, *(void **)(a1 + 8));
  result = (void *)sub_1B19B9374(v10, v35, v36, v37, v38, v39, v40, v41);
  if (result)
  {
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 3221225472;
    v46[2] = sub_1B17D9AF8;
    v46[3] = &unk_1E63D57F8;
    v46[4] = a1;
    return (void *)objc_msgSend_enumerateKeysAndObjectsUsingBlock_(result, v43, (uint64_t)v46, v44);
  }
  return result;
}

uint64_t sub_1B17D9A34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 16), a2, (uint64_t)a2, a4);
}

uint64_t sub_1B17D9A44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  result = sub_1B17D9A84(a2, (const char *)a2, a3, a4);
  if (result)
    return objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 16), v6, result, v7);
  return result;
}

uint64_t sub_1B17D9A84(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;

  if (!objc_msgSend_hasPrefix_(a1, a2, (uint64_t)CFSTR("vfx_node."), a4))
    return 0;
  v8 = objc_msgSend_length(CFSTR("vfx_node."), v5, v6, v7);
  v11 = (void *)objc_msgSend_substringFromIndex_(a1, v9, v8, v10);
  v15 = objc_msgSend_uppercaseString(v11, v12, v13, v14);
  return objc_msgSend_stringByAppendingString_(CFSTR("USE_"), v16, v15, v17);
}

uint64_t sub_1B17D9AE8(uint64_t a1, const char *a2, void *a3)
{
  return objc_msgSend_setObject_forKeyedSubscript_(a3, a2, (uint64_t)a2, a1);
}

uint64_t sub_1B17D9AF8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v6;

  result = sub_1B17D9A84(a2, (const char *)a2, a3, a4);
  if (result)
    return objc_msgSend_setObject_forKeyedSubscript_(*(void **)(*(_QWORD *)(a1 + 32) + 8), v6, (uint64_t)&stru_1E63FD500, result);
  return result;
}

void sub_1B17DA6F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B17DA70C(v1 - 224);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17DA70C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B17DA75C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = (_QWORD *)objc_msgSend_nodeRef(a2, (const char *)a2, a3, a4);
  result = sub_1B17C6244(v5, v6, v7, v8, v9, v10, v11, v12);
  if (result == *(_QWORD *)(a1 + 40))
    return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_addedNode_, v5, v14);
  return result;
}

void sub_1B17DA8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B17DA70C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17DA99C(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  id *v6;
  const char *v7;
  uint64_t v8;

  objc_msgSend_setIsAuthoring_(a1, a2, 1, a4);
  v6 = sub_1B193E758((id *)a2);
  objc_msgSend_setAuthoringTargetNode_(a1, v7, (uint64_t)v6, v8);
  return sub_1B186E070((uint64_t)a2, 1);
}

void sub_1B17DAB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1B17DA70C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B17DB30C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B17DB358(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B17DBD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_1B17DA70C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1B17DBDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v9 = (void *)sub_1B18613C0(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  v13 = objc_msgSend_length(v9, v10, v11, v12);
  v21 = sub_1B17A00F0(v13, v14, v15, v16, v17, v18, v19, v20);
  v25 = objc_msgSend_bytes(v9, v22, v23, v24);
  if ((_DWORD)v21 == 3)
  {
    v33 = v25;
    v34 = objc_msgSend_length(v9, v26, v27, v28);
    MEMORY[0x1E0DE7D20](a2, sel_writeBytes_length_, v33, v34);
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: SH order unsupported : %d"), v27, v28, v29, v30, v31, v32, v21);
  }
}

void sub_1B17DC870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_1B17DA70C((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17DC884(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *Material;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;

  result = objc_msgSend_isAuthoring(a2, (const char *)a2, a3, a4);
  if ((_DWORD)result)
  {
    v14 = sub_1B1868D5C(*(_QWORD *)(a1 + 40), v7, v8, v9, v10, v11, v12, v13);
    v18 = 296;
    if (v14)
      v18 = 280;
    v19 = 264;
    if (!*(_BYTE *)(a1 + 48))
      v19 = v18;
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v19);
    v21 = (void *)objc_msgSend_model(a2, v15, v16, v17);
    Material = (void *)objc_msgSend_firstMaterial(v21, v22, v23, v24);
    v29 = (void *)objc_msgSend_diffuse(Material, v26, v27, v28);
    return objc_msgSend_setColor_(v29, v30, v20, v31);
  }
  return result;
}

void sub_1B17DD298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17DD2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a3, sel_updateLightNode_withSourceNode_, a2, a1);
}

uint64_t sub_1B17DD2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a3, sel_updateCameraNode_withSourceNode_, a2, a1);
}

uint64_t sub_1B17DD2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a3, sel_updateEffectNode_withSourceNode_, a2, a1);
}

uint64_t sub_1B17DD308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a3, sel_updateFieldNode_withSourceNode_, a2, a1);
}

uint64_t sub_1B17DD318(uint64_t a1, char *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v7 = objc_msgSend_pointOfView(*(void **)(a1 + 32), a2, a3, (uint64_t)a4);
  result = objc_msgSend_node(a2, v8, v9, v10);
  if (v7 == result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_1B17DD5D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  VFXAuthoringEnvironment2 *v5;
  const char *v6;
  uint64_t v7;

  v4 = objc_msgSend_worldWithWorldRef_(VFXWorld, a2, a1, a4);
  v5 = [VFXAuthoringEnvironment2 alloc];
  return objc_msgSend_initWithWorld_(v5, v6, v4, v7);
}

uint64_t sub_1B17DD610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel_addedNode_, a2, a4);
}

uint64_t sub_1B17DD618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel_removedNode_, a2, a4);
}

uint64_t sub_1B17DD620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel_updateWithRenderer_, a2, a4);
}

uint64_t sub_1B17DD684(uint64_t result, int32x4_t *a2, unsigned int a3, double a4, double a5, double a6, __n128 a7)
{
  unint64_t v7;
  int32x4_t *v8;
  uint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  __int32 v12;
  int32x4_t v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  int32x2_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  int32x4_t v22;
  float32x2x2_t v23;
  int32x4_t v24;
  __int128 v25;
  float32x2x2_t v26;
  float *v27;
  float *v28;
  int32x4_t v29;
  float *v30;
  float *v31;
  float32x2x2_t v32;
  float32x2x2_t v33;

  if (a3 + 3 >= 4)
  {
    v7 = 0;
    v8 = a2 + 6;
    v9 = result + 64;
    v10 = vdupq_n_s32(0x7F800000u);
    do
    {
      v11 = 0uLL;
      a7.n128_u32[0] = 0;
      v12 = 0;
      v13 = v10;
      v14 = 0uLL;
      if (v7 < a3)
      {
        v13 = v8[-6];
        v14 = v8[-5];
        a7.n128_u32[0] = v8[-4].u32[0];
        v12 = v8[-4].i32[1];
      }
      v15 = 0;
      v16 = v10;
      v17 = 0;
      if (v7 + 1 < a3)
      {
        v16 = v8[-3];
        v11 = v8[-2];
        v17 = *(int32x2_t *)v8[-1].i8;
      }
      v18 = 0uLL;
      v19 = 0uLL;
      v20 = v10;
      if (v7 + 2 < a3)
      {
        v20 = *v8;
        v19 = v8[1];
        v15 = v8[2].i64[0];
      }
      v21 = 0;
      v22 = v10;
      if (v7 + 3 < a3)
      {
        v22 = v8[3];
        v18 = v8[4];
        v21 = v8[5].i64[0];
      }
      v23 = (float32x2x2_t)vzip1q_s32(v13, v20);
      v33.val[0] = (float32x2_t)vzip2q_s32(v13, v20).u64[0];
      v24 = vzip1q_s32(v16, v22);
      v33.val[1] = (float32x2_t)vzip2q_s32(v16, v22).u64[0];
      *(_QWORD *)&v25 = __PAIR64__(v17.u32[1], v12);
      *((_QWORD *)&v25 + 1) = __PAIR64__(HIDWORD(v21), HIDWORD(v15));
      v26 = (float32x2x2_t)vzip1q_s32(v14, v19);
      a7.n128_u64[0] = (unint64_t)vzip1_s32((int32x2_t)a7.n128_u64[0], v17);
      a7.n128_u64[1] = __PAIR64__(v21, v15);
      v27 = (float *)(v9 - 64);
      vst2_f32(v27, v23);
      v28 = (float *)(v9 - 32);
      vst2_f32(v28, v33);
      v32.val[0] = (float32x2_t)vzip2q_s32(v14, v19).u64[0];
      v29 = vzip1q_s32(v11, v18);
      v32.val[1] = (float32x2_t)vzip2q_s32(v11, v18).u64[0];
      v30 = (float *)(v9 - 16);
      vst2_f32(v30, v26);
      *(int32x4_t *)(v9 - 48) = vzip2q_s32((int32x4_t)v23, v24);
      *(int32x4_t *)v9 = vzip2q_s32((int32x4_t)v26, v29);
      v31 = (float *)(v9 + 16);
      vst2_f32(v31, v32);
      *(__n128 *)(v9 + 32) = a7;
      *(_OWORD *)(v9 + 48) = v25;
      v7 += 4;
      v8 += 12;
      v9 += 128;
    }
    while (((a3 + 3) & 0xFFFFFFFC) != v7);
  }
  return result;
}

float32x4_t *sub_1B17DD7B4(float32x4_t *result, int a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  unsigned __int8 v57;
  uint64_t v58;

  if (a2)
  {
    v5 = 0;
    v6 = *a3;
    v7 = a3[1];
    v8 = a3[2];
    v9 = a3[3];
    v10 = *a4;
    v11 = a4[1];
    v12 = a4[2];
    v13 = a4[3];
    v14 = vnegq_f32(v8);
    v15 = vnegq_f32(*a3);
    v16 = vnegq_f32(v7);
    v17 = vnegq_f32(v12);
    v18 = vnegq_f32(*a4);
    v19 = vnegq_f32(v11);
    v20 = result + 4;
    do
    {
      v21 = v20[-4];
      v22 = v20[-3];
      v23 = v20[-2];
      v24 = v20[2];
      v25 = vnegq_f32(v24);
      v26 = vaddq_f32(v9, vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v22), v21, v6), v23, v8));
      v27 = vaddq_f32(v13, vmlaq_f32(vmlaq_f32(vmulq_f32(v11, v22), v21, v10), v23, v12));
      if ((vminvq_u32((uint32x4_t)vornq_s8(vmvnq_s8((int8x16_t)vcgeq_f32(v26, v25)), (int8x16_t)vcgeq_f32(v27, v25))) & 0x80000000) != 0)
      {
        if ((v5 & 1) == 0)
          *(_BYTE *)(a5 + (v5 >> 1)) = 0;
      }
      else
      {
        v28 = v20[3];
        v29 = v20[1];
        v30 = v20[-1];
        v31 = vmlaq_f32(vmulq_f32(*v20, v14), v29, v7);
        v32 = vmlaq_f32(vmulq_f32(v29, v15), v30, v8);
        v33 = vmlaq_f32(vmulq_f32(v30, v16), *v20, v6);
        v34 = vmlaq_f32(vmulq_f32(*v20, vnegq_f32(v33)), v29, v32);
        v35 = vmlaq_f32(vmulq_f32(v29, vnegq_f32(v31)), v30, v33);
        v36 = vmlaq_f32(vmulq_f32(v30, vnegq_f32(v32)), *v20, v31);
        v37 = vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v35), v34, v34), v36, v36);
        v38 = vrsqrteq_f32(v37);
        v39 = vmulq_f32(v38, vrsqrtsq_f32(v37, vmulq_f32(v38, v38)));
        v40 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v39, vrsqrtsq_f32(v37, vmulq_f32(v39, v39))), (int8x16_t)vceqzq_f32(v37));
        v41 = vmlaq_f32(v21, v24, v30);
        v42 = vmlaq_f32(v22, v24, *v20);
        v43 = vmlaq_f32(v23, v24, v29);
        v44 = vaddq_f32(v9, vmlaq_f32(vmlaq_f32(vmulq_f32(v7, vmlaq_f32(v42, v28, vmulq_f32(v40, vnegq_f32(v35)))), vmlaq_f32(v41, v28, vmulq_f32(v40, vnegq_f32(v34))), v6), vmlaq_f32(v43, v28, vmulq_f32(v40, vnegq_f32(v36))), v8));
        v45 = vmlaq_f32(vmulq_f32(*v20, v17), v29, v11);
        v46 = vmlaq_f32(vmulq_f32(v29, v18), v30, v12);
        v47 = vmlaq_f32(vmulq_f32(v30, v19), *v20, v10);
        v48 = vmlaq_f32(vmulq_f32(*v20, vnegq_f32(v47)), v29, v46);
        v49 = vmlaq_f32(vmulq_f32(v29, vnegq_f32(v45)), v30, v47);
        v50 = vmlaq_f32(vmulq_f32(v30, vnegq_f32(v46)), *v20, v45);
        v51 = vmlaq_f32(vmlaq_f32(vmulq_f32(v49, v49), v48, v48), v50, v50);
        v52 = vrsqrteq_f32(v51);
        v53 = vmulq_f32(v52, vrsqrtsq_f32(v51, vmulq_f32(v52, v52)));
        v54 = (float32x4_t)vbicq_s8((int8x16_t)vmulq_f32(v53, vrsqrtsq_f32(v51, vmulq_f32(v53, v53))), (int8x16_t)vceqzq_f32(v51));
        v55 = vaddq_f32(v13, vmlaq_f32(vmlaq_f32(vmulq_f32(v11, vmlaq_f32(v42, v28, vmulq_f32(v54, vnegq_f32(v49)))), vmlaq_f32(v41, v28, vmulq_f32(v54, vnegq_f32(v48))), v10), vmlaq_f32(v43, v28, vmulq_f32(v54, vnegq_f32(v50))), v12));
        v56 = vandq_s8(vandq_s8(vorrq_s8((int8x16_t)vcltzq_f32(vmulq_f32(v26, v44)), (int8x16_t)vcgezq_f32(vminnmq_f32(v26, v44))), vorrq_s8((int8x16_t)vcltzq_f32(vmulq_f32(v27, v55)), (int8x16_t)vcgezq_f32(vminnmq_f32(v27, v55)))), (int8x16_t)xmmword_1B2245E50);
        *(int8x8_t *)v56.i8 = vorr_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL));
        v57 = vadd_s32(*(int32x2_t *)v56.i8, vdup_lane_s32(*(int32x2_t *)v56.i8, 1)).u8[0];
        v58 = v5 >> 1;
        if ((v5 & 1) != 0)
          v57 = *(_BYTE *)(a5 + v58) | (16 * v57);
        *(_BYTE *)(a5 + v58) = v57;
      }
      ++v5;
      v20 += 8;
    }
    while (a2 != v5);
  }
  return result;
}

uint64_t sub_1B17DDA40(uint64_t result, int32x4_t *a2, unsigned int a3)
{
  unint64_t v3;
  float *v4;
  int32x4_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x2x2_t v10;
  int32x4_t v11;
  __int128 v12;
  float *v13;
  float *v14;
  _OWORD *v15;
  float32x2x2_t v16;

  if (a3 + 3 >= 4)
  {
    v3 = 0;
    v4 = (float *)(result + 32);
    v5 = a2 + 2;
    do
    {
      v6 = (int32x4_t)xmmword_1B2245E60;
      if (v3 < a3)
        v6 = v5[-2];
      v7 = (int32x4_t)xmmword_1B2245E60;
      if (v3 + 1 < a3)
        v7 = v5[-1];
      v8 = (int32x4_t)xmmword_1B2245E60;
      if (v3 + 2 < a3)
        v8 = *v5;
      v9 = (int32x4_t)xmmword_1B2245E60;
      if (v3 + 3 < a3)
        v9 = v5[1];
      v10 = (float32x2x2_t)vzip1q_s32(v6, v8);
      v16.val[0] = (float32x2_t)vzip2q_s32(v6, v8).u64[0];
      v11 = vzip1q_s32(v7, v9);
      *(_QWORD *)&v12 = vuzp2q_s32(vuzp2q_s32(v6, v7), v6).u64[0];
      *((_QWORD *)&v12 + 1) = __PAIR64__(v9.u32[3], v8.u32[3]);
      v16.val[1] = (float32x2_t)vzip2q_s32(v7, v9).u64[0];
      v13 = v4 - 8;
      vst2_f32(v13, v10);
      *((int32x4_t *)v4 - 1) = vzip2q_s32((int32x4_t)v10, v11);
      v14 = v4 + 16;
      vst2_f32(v4, v16);
      v15 = v4 + 4;
      *v15 = v12;
      v3 += 4;
      v5 += 4;
      v4 = v14;
    }
    while (((a3 + 3) & 0xFFFFFFFC) != v3);
  }
  return result;
}

float32x4_t *sub_1B17DDB08(float32x4_t *result, int a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  int8x16_t v16;
  unsigned __int8 v17;
  uint64_t v18;

  if (a2)
  {
    v5 = 0;
    v6 = *a3;
    v7 = a3[1];
    v8 = a3[2];
    v9 = a3[3];
    v10 = *a4;
    v11 = a4[1];
    v12 = a4[2];
    v13 = a4[3];
    v14 = result + 2;
    do
    {
      v15 = vnegq_f32(v14[1]);
      v16 = vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v9, vmlaq_f32(vmlaq_f32(vmulq_f32(v7, v14[-1]), v14[-2], v6), *v14, v8)), v15), (int8x16_t)vcgeq_f32(vaddq_f32(v13, vmlaq_f32(vmlaq_f32(vmulq_f32(v11, v14[-1]), v14[-2], v10), *v14, v12)), v15)), (int8x16_t)xmmword_1B2245E50);
      *(int8x8_t *)v16.i8 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
      v17 = vadd_s32(*(int32x2_t *)v16.i8, vdup_lane_s32(*(int32x2_t *)v16.i8, 1)).u8[0];
      v18 = v5 >> 1;
      if ((v5 & 1) != 0)
        v17 = *(_BYTE *)(a5 + v18) | (16 * v17);
      *(_BYTE *)(a5 + v18) = v17;
      ++v5;
      v14 += 4;
    }
    while (a2 != v5);
  }
  return result;
}

uint64_t *sub_1B17DDBA8(CFX::RG *a1, CFX::RG::RenderGraphContext *a2, CFX::RG::Resource *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v14;
  uint64_t v15;
  CFX::RG::RenderGraphBuilder *v16;
  CFX::RG::Resource *v17;
  _OWORD *v18;
  const char *v19;
  CFX::RG::RenderGraphBuilder *v20;
  uint64_t *v21;
  uint64_t *v22;
  CFX::RG::Resource *v23;
  CFX::RG::Resource *v24;
  _OWORD *v25;
  CFX::RG::Resource *v26;
  const CFX::RG::Resource *v27;
  const char *v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  __int128 v39;
  __int128 v40;
  const CFX::RG::Resource *v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  const CFX::RG::Resource *v49;
  CFX::RG::Resource *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  CFX::RG::Resource *v64;
  const CFX::RG::Resource **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CFX::RG::Resource *v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  __int128 *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  CFX::RG::Resource *v88;
  CFX::RG::Resource *v89;
  const CFX::RG::Resource *v90;
  CFX::RG::Resource *v91;
  uint64_t v92;
  CFX::RG::Resource **v93;
  int v94;
  __int128 *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  const CFX::RG::Resource *v99;
  CFX::RG::Resource *v100;
  CFX::RG::Resource *v101;
  _OWORD *v102;
  const char *v103;
  CFX::RG::Resource *v104;
  __int16 v106;
  uint64_t v107;
  uint64_t *v108;
  __int16 v109;
  const CFX::RG::Resource **v110;
  CFX::RG::RenderGraphContext *v111;
  CFX::RG::Resource *v112;
  const CFX::RG::Resource *v113;
  _BYTE v114[44];
  __int128 v115;
  _OWORD v116[6];
  void *v117;
  CFX::RG::Resource *v118;
  uint64_t v119;
  uint64_t v120[2];
  __int128 v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _OWORD v132[2];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v14 = sub_1B186CFA8(*(_QWORD *)(a4 + 16), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v14)
    return 0;
  v15 = (uint64_t)v14;
  v110 = (const CFX::RG::Resource **)a6;
  v16 = *(CFX::RG::RenderGraphBuilder **)a5;
  v17 = *(CFX::RG::Resource **)(a5 + 48);
  v18 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)a5);
  CFX::RG::TextureDescriptorReference::withSampleCount(v18, 1, (uint64_t)&v112);
  v20 = CFX::RG::copyIfNeeded_r(a1, v16, v17, (CFX::RG::Pass *)&v112, (const CFX::RG::TextureDescriptorReference *)"PostProcess color input resolve", v19);
  v22 = v21;
  v23 = *(CFX::RG::Resource **)(a5 + 8);
  v24 = *(CFX::RG::Resource **)(a5 + 48);
  v25 = (_OWORD *)CFX::RG::Resource::constTextureDesc(v23);
  CFX::RG::TextureDescriptorReference::withSampleCount(v25, 1, (uint64_t)&v112);
  v26 = v24;
  v27 = v20;
  v107 = CFX::RG::copyIfNeeded(a1, v23, v26, (CFX::RG::Pass *)&v112, (const CFX::RG::TextureDescriptorReference *)"PostProcess depth input resolve", v28);
  v111 = a2;
  v29 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, v20);
  v37 = *v29;
  v38 = v29[1];
  v39 = *(_OWORD *)(v29 + 10);
  v40 = *(_OWORD *)(v29 + 26);
  v131 = *(_OWORD *)(v29 + 18);
  v132[0] = v40;
  *(_OWORD *)((char *)v132 + 12) = *((_OWORD *)v29 + 4);
  v129 = *(_OWORD *)(v29 + 2);
  v130 = v39;
  *(float *)&v39 = (float)v37;
  v109 = v38;
  *((float *)&v39 + 1) = (float)v38;
  *(_QWORD *)(a4 + 8) = v39;
  if (*(_BYTE *)(a4 + 2))
  {
    v41 = *(const CFX::RG::Resource **)(a4 + 16);
    v112 = a3;
    v113 = v41;
    v42 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)v114 = *(_OWORD *)a5;
    *(_OWORD *)&v114[16] = v42;
    *(_QWORD *)&v114[32] = *(_QWORD *)(a5 + 32);
    *(_DWORD *)&v114[40] = 2;
    *(_QWORD *)((char *)&v115 + 4) = 0;
    v22 = sub_1B1818FCC((uint64_t *)a1, (uint64_t *)&v112, 0);
    v27 = *(const CFX::RG::Resource **)((char *)&v115 + 4);
  }
  if (*(_BYTE *)(a4 + 5))
  {
    v44 = sub_1B186443C(v15, v30, v31, v32, v33, v34, v35, v36);
    v112 = a3;
    v113 = v27;
    *(_QWORD *)v114 = *(_QWORD *)(a5 + 40);
    *(_QWORD *)&v114[8] = v44;
    v22 = sub_1B17F04B4((uint64_t *)a1, (uint64_t *)&v112);
    v27 = (const CFX::RG::Resource *)v22[52];
  }
  if (*(_BYTE *)(a4 + 6))
  {
    v45 = (__int128 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(v111, v27);
    v124 = *v45;
    v46 = v45[4];
    v48 = v45[1];
    v47 = v45[2];
    v127 = v45[3];
    v128 = v46;
    v125 = v48;
    v126 = v47;
    v49 = *(const CFX::RG::Resource **)(a4 + 16);
    v50 = a3;
    v112 = a3;
    v113 = v49;
    CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v114, &v124);
    v117 = v27;
    v118 = 0;
    v22 = sub_1B180C5C4(a1, v111, &v112, (CFX::RG::Resource *)v22);
    v27 = (const CFX::RG::Resource *)v22[70];
  }
  else
  {
    v50 = a3;
  }
  v121 = *(_OWORD *)a4;
  v122 = *(_QWORD *)(a4 + 16);
  sub_1B18A8638(&v123, v50, &v121);
  if (sub_1B18A863C(&v123))
  {
    v106 = v37;
    v120[0] = (uint64_t)v50;
    v120[1] = (uint64_t)v27;
    v43 = (uint64_t *)sub_1B18A9400((uint64_t *)a1, v120, (__int128 *)a4, &v123);
    if (*(_BYTE *)(a4 + 3))
    {
      v112 = v50;
      v113 = v20;
      v58 = *(_QWORD *)(a4 + 16);
      *(_QWORD *)v114 = v107;
      *(_QWORD *)&v114[8] = v58;
      *(_OWORD *)&v114[16] = (unint64_t)sub_1B186433C(v15, v51, v52, v53, v54, v55, v56, v57);
      v63 = sub_1B190E9F0((uint64_t *)a1, (uint64_t)&v112, (CFX::RG::Resource *)v22, 0, v59, v60, v61, v62);
      v64 = (CFX::RG::Resource *)v63[72];
      sub_1B18A93E8(v43, v64);
    }
    else
    {
      v64 = 0;
      v63 = 0;
    }
    if (*(_BYTE *)(a4 + 4))
    {
      v73 = sub_1B1864A3C(v15, v51, v52, v53, v54, v55, v56, v57);
      v74 = a3;
      if (!v73)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v67, v68, v69, v70, v71, v72, (uint64_t)"lensBlur");
      v75 = sub_1B18E8CD4(v73, v66, v67, v68, v69, v70, v71, v72);
      v83 = sub_1B18EB394(v73, v76, v77, v78, v79, v80, v81, v82);
      v84 = (__int128 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(v111, v27);
      v124 = *v84;
      v85 = v84[4];
      v87 = v84[1];
      v86 = v84[2];
      v127 = v84[3];
      v128 = v85;
      v125 = v87;
      v126 = v86;
      if (v64)
        v88 = v64;
      else
        v88 = v27;
      v112 = a3;
      v113 = v88;
      *(float *)v114 = v75;
      *(_QWORD *)&v114[8] = v83;
      CFX::RG::TextureDescriptorReference::TextureDescriptorReference(&v114[16], &v124);
      v119 = 0;
      if (v63)
        v89 = (CFX::RG::Resource *)v63;
      else
        v89 = (CFX::RG::Resource *)v22;
      v63 = sub_1B19CD10C(a1, v111, (uint64_t *)&v112, v89);
      v64 = (CFX::RG::Resource *)v63[62];
      v108 = v63;
    }
    else
    {
      v108 = 0;
      v74 = a3;
    }
    if (*(_BYTE *)(a4 + 1))
    {
      *(_OWORD *)&v114[28] = v130;
      v115 = v131;
      v116[0] = v132[0];
      *(_OWORD *)((char *)v116 + 12) = *(_OWORD *)((char *)v132 + 12);
      v90 = *(const CFX::RG::Resource **)(a4 + 16);
      v112 = v74;
      v113 = v90;
      if (v64)
        v91 = v64;
      else
        v91 = v27;
      *(_QWORD *)v114 = v91;
      *(_WORD *)&v114[8] = v106;
      *(_WORD *)&v114[10] = v109;
      if (v63)
        v92 = (uint64_t)v63;
      else
        v92 = (uint64_t)v22;
      *(_OWORD *)&v114[12] = v129;
      v93 = (CFX::RG::Resource **)sub_1B179B930((uint64_t *)a1, (uint64_t)v111, (uint64_t)&v112, v92, v54, v55, v56, v57);
    }
    else
    {
      v93 = 0;
    }
    v94 = *(unsigned __int8 *)(a4 + 7);
    if (*(_BYTE *)(a4 + 7))
    {
      v95 = (__int128 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(v111, v27);
      v124 = *v95;
      v96 = v95[4];
      v98 = v95[1];
      v97 = v95[2];
      v127 = v95[3];
      v128 = v96;
      v125 = v98;
      v126 = v97;
      v99 = *(const CFX::RG::Resource **)(a4 + 16);
      v112 = v74;
      v113 = v99;
      CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v114, &v124);
      if (v64)
        v100 = v64;
      else
        v100 = v27;
      v117 = v93;
      v118 = v100;
      v119 = 0;
      if (v63)
        v101 = (CFX::RG::Resource *)v63;
      else
        v101 = (CFX::RG::Resource *)v22;
      v22 = sub_1B1817100(a1, v111, &v112, v101);
      v27 = (const CFX::RG::Resource *)v22[60];
      CFX::RG::Pass::dependsOn(v43, (CFX::RG::Pass *)v22);
      if (*(_BYTE *)(a4 + 1))
        CFX::RG::Pass::dependsOn(v22, (CFX::RG::Pass *)v93);
      v94 = *(unsigned __int8 *)(a4 + 7);
      v65 = v110;
    }
    else
    {
      v65 = v110;
    }
    if (*(_BYTE *)(a4 + 1) && !v94)
    {
      sub_1B18A93F0(v43, v93[93]);
      CFX::RG::Pass::dependsOn(v43, (CFX::RG::Pass *)v93);
      v94 = *(unsigned __int8 *)(a4 + 7);
    }
    if (v108 && *(_BYTE *)(a4 + 4) && !v94)
      sub_1B18A93F8(v43, (CFX::RG::Resource *)v108[62]);
    v102 = (_OWORD *)CFX::RG::Resource::textureDesc(v27);
    CFX::RG::TextureDescriptorReference::withSampleCount(v102, 1, (uint64_t)&v112);
    v104 = (CFX::RG::Resource *)CFX::RG::copyIfNeeded(a1, v27, (CFX::RG::Resource *)v22, (CFX::RG::Pass *)&v112, 0, v103);
    sub_1B18A93E0(v43, v104);
    v27 = (const CFX::RG::Resource *)v43[59];
  }
  else
  {
    v43 = v22;
    v65 = v110;
  }
  *v65 = v27;
  return v43;
}

_QWORD *sub_1B17DE158(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_1B21AB51C(a1, "PostProcess");
  *result = off_1E63CE308;
  result[3] = a2;
  return result;
}

uint64_t sub_1B17DE190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v4, *(_WORD *)(a1 + 8), 9273, 1656467160);
  return sub_1B17A371C(a2, v4, 1);
}

void sub_1B17DE208(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _BYTE v4[24];

  sub_1B18A8498(v4, *(_QWORD *)(a1 + 24), 0);
  *a2 = 0;
  a2[1] = a2 + 2;
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v3, 9273, 9273, 1656467160);
  sub_1B17A3844((uint64_t)a2, &v3);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v3, 9273, 9273, -797957750);
  sub_1B17A3844((uint64_t)a2, &v3);
  if (v4[5])
  {
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v3, 9273, 9273, -1170177454);
    sub_1B17A3844((uint64_t)a2, &v3);
  }
  if (v4[2])
  {
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v3, 9273, 9273, 1490954098);
    sub_1B17A3844((uint64_t)a2, &v3);
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v3, 9273, 9273, -691122579);
    sub_1B17A3844((uint64_t)a2, &v3);
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v3, 9273, 9273, 839732700);
    sub_1B17A3844((uint64_t)a2, &v3);
  }
}

void sub_1B17DE32C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 4))
    free(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B17DE35C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *a3;
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a3 + 1);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v10 = v7;
      v8 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v10);
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) >> 47));
      v6 -= 8;
    }
    while (v6);
  }
  return v3;
}

void sub_1B17DE3E0(uint64_t a1, CFX::RG::RenderGraphContext *a2, CFX::RG *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  unsigned __int8 *v25;
  __int16 v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v31[160];
  uint64_t v32;
  _BYTE v33[160];
  uint64_t v34;
  _BYTE v35[160];
  uint64_t v36;
  _BYTE v37[160];
  _BYTE v38[24];
  uint64_t v39;
  _BYTE v40[160];
  uint64_t v41;
  _BYTE v42[160];
  _QWORD v43[2];
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v11 = sub_1B1814768(*(uint64_t **)(a1 + 24), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v11 && sub_1B186CFA8((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18))
  {
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v41, 9273, 9273, 1656467160);
    CFX::RG::ResourceReference::ResourceReference((uint64_t)v42, v41);
    v43[0] = sub_1B17C1128((uint64_t)a3, (uint64_t)"Post process input color", (CFX::RG::ResourceReference *)v42);
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v39, 9273, 9273, -797957750);
    CFX::RG::ResourceReference::ResourceReference((uint64_t)v40, v39);
    v43[1] = sub_1B17C1128((uint64_t)a3, (uint64_t)"Post process input depth", (CFX::RG::ResourceReference *)v40);
    sub_1B18A8498(v38, *(_QWORD *)(a1 + 24), 0);
    if (v38[2])
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v36, 9273, 9273, 1490954098);
      CFX::RG::ResourceReference::ResourceReference((uint64_t)v37, v36);
      *(_QWORD *)&v44 = sub_1B17C1128((uint64_t)a3, (uint64_t)"Post process input normal", (CFX::RG::ResourceReference *)v37);
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v34, 9273, 9273, 839732700);
      CFX::RG::ResourceReference::ResourceReference((uint64_t)v35, v34);
      *((_QWORD *)&v44 + 1) = sub_1B17C1128((uint64_t)a3, (uint64_t)"Post process input radiance", (CFX::RG::ResourceReference *)v35);
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v32, 9273, 9273, -691122579);
      CFX::RG::ResourceReference::ResourceReference((uint64_t)v33, v32);
      *(_QWORD *)&v45 = sub_1B17C1128((uint64_t)a3, (uint64_t)"Post process input reflectance roughness", (CFX::RG::ResourceReference *)v33);
    }
    if (v38[5])
    {
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v30, 9273, 9273, -1170177454);
      CFX::RG::ResourceReference::ResourceReference((uint64_t)v31, v30);
      *((_QWORD *)&v45 + 1) = sub_1B17C1128((uint64_t)a3, (uint64_t)"Post process input velocity", (CFX::RG::ResourceReference *)v31);
    }
    v29 = 0;
    v21 = sub_1B17DDBA8(a3, a2, *(CFX::RG::Resource **)(a1 + 24), (uint64_t)v38, (uint64_t)v43, (uint64_t)&v29, v19, v20);
    if (v21)
    {
      v22 = (uint64_t)v21;
      v23 = (_BYTE *)v21[3];
      v24 = *v23;
      if (*v23)
      {
        v25 = v23 + 1;
        v26 = -25147;
        do
        {
          v26 = 403 * (v26 ^ v24);
          v27 = *v25++;
          v24 = v27;
        }
        while (v27);
      }
      else
      {
        v26 = -25147;
      }
      CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v28, *(_WORD *)(a1 + 8), v26, 1656467160);
      CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v28, v29, v22);
    }
  }
}

double sub_1B17DE64C(uint64_t a1, float32x4_t a2)
{
  int8x16_t v6;
  int32x2_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v12;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
    return 0.0;
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1));
  v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + v7.i32[0]);
  v9 = (v8 >> 10) & 0x1F;
  if (v9 == 31)
    v10 = 2139095040;
  else
    v10 = (v8 >> 10) & 0x1F;
  if (v9)
    _ZF = v9 == 31;
  else
    _ZF = 1;
  if (_ZF)
    v12 = v10;
  else
    v12 = (v9 << 23) + 939524096;
  v7.i32[0] = v12 | (v8 << 16) & 0x80000000 | (v8 >> 7) & 7 | (8 * (v8 & 0x3FF)) & 0x1FFF | ((v8 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(v7, 0).u64[0];
  return result;
}

double sub_1B17DE6F8(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
    return 0.0;
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  *(_QWORD *)&result = vld1q_dup_f32(v8).u64[0];
  return result;
}

double sub_1B17DE75C(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  int8x16_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
    return 0.0;
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v7.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 64)
                        + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v9 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v7.i8), v8);
  v10 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v7.i8, 0xDuLL);
  v11 = (int32x4_t)vorrq_s8(vandq_s8(v10, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v9, vandq_s8(v10, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v9.i64[0] = 0x3800000038000000;
  v9.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v11, v9).u64[0];
  return result;
}

double sub_1B17DE7F4(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  __int128 v8;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
  {
    *(_QWORD *)&v8 = 0;
  }
  else
  {
    v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
    *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
    v8 = *(_OWORD *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  }
  return *(double *)&v8;
}

double sub_1B17DE854(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
    return 0.0;
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1));
  v7.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 64) + v7.i32[0]);
  *(float *)v7.i32 = (float)v7.u32[0] * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)v7.i8, 0).u64[0];
  return result;
}

double sub_1B17DE8C8(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  int32x2_t v8;
  int32x4_t v9;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
    return 0.0;
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = vdup_lane_s32(*(int32x2_t *)v7.i8, 1);
  v7.i32[0] = vadd_s32(*(int32x2_t *)v7.i8, v8).u32[0];
  v7.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 64) + v7.i32[0]);
  *(float *)v8.i32 = (float)v7.u32[0] * 0.0039216;
  v9 = vcgeq_f32((float32x4_t)vdupq_lane_s32(v8, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v9.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v9), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)v8.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)v8.i32), *(float *)v8.i32 * *(float *)v8.i32), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)v8.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)v8.i32),
                                        *(float *)v8.i32 * *(float *)v8.i32),
                                      (float)(*(float *)v8.i32 * *(float *)v8.i32)
                                    * (float)(*(float *)v8.i32 * *(float *)v8.i32)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)v8.i32)).u64[0];
  return result;
}

double sub_1B17DE9F0(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
    return 0.0;
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17DEA7C(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
    return 0.0;
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10));
  v12 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v13 = vmulq_f32(v12, v12);
  v14 = vmulq_f32(v13, v13);
  v15 = vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v11), v13, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v11));
  v16 = vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v11), v13, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v11));
  v17 = vcgeq_f32(v12, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v17.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v17), (int8x16_t)vmlaq_f32(v16, v14, v15), (int8x16_t)vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17DEBAC(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
    return 0.0;
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v11, v11, 0xCuLL).u64[0];
  return result;
}

double sub_1B17DEC40(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(a2, _Q1), (int8x16_t)vcltzq_f32(a2))) & 0x80000000) != 0)
    return 0.0;
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, a2)), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10));
  v12 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v13 = vmulq_f32(v12, v12);
  v14 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v11), v13, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v11)), vmulq_f32(v13, v13), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v11), v13, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v11)));
  v15 = vcgeq_f32(v12, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v15.i32[3] = 0;
  v16 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v15), v14, (int8x16_t)vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v16.i32[3] = v12.i32[3];
  v17 = (int8x16_t)vrev64q_s32(v16);
  *(_QWORD *)&result = vextq_s8(v17, v17, 0xCuLL).u64[0];
  return result;
}

double sub_1B17DED78(uint64_t a1, float32x4_t a2)
{
  int8x16_t v6;
  int32x2_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v12;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1));
  v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + v7.i32[0]);
  v9 = (v8 >> 10) & 0x1F;
  if (v9 == 31)
    v10 = 2139095040;
  else
    v10 = (v8 >> 10) & 0x1F;
  if (v9)
    _ZF = v9 == 31;
  else
    _ZF = 1;
  if (_ZF)
    v12 = v10;
  else
    v12 = (v9 << 23) + 939524096;
  v7.i32[0] = v12 | (v8 << 16) & 0x80000000 | (v8 >> 7) & 7 | (8 * (v8 & 0x3FF)) & 0x1FFF | ((v8 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(v7, 0).u64[0];
  return result;
}

double sub_1B17DEE10(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  *(_QWORD *)&result = vld1q_dup_f32(v8).u64[0];
  return result;
}

double sub_1B17DEE60(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  int8x16_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v7.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 64)
                        + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v9 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v7.i8), v8);
  v10 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v7.i8, 0xDuLL);
  v11 = (int32x4_t)vorrq_s8(vandq_s8(v10, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v9, vandq_s8(v10, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v9.i64[0] = 0x3800000038000000;
  v9.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v11, v9).u64[0];
  return result;
}

__n128 sub_1B17DEEE4(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  return *(__n128 *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
}

double sub_1B17DEF30(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1));
  v7.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 64) + v7.i32[0]);
  *(float *)v7.i32 = (float)v7.u32[0] * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)v7.i8, 0).u64[0];
  return result;
}

double sub_1B17DEF90(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  int32x4_t v8;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  *(int32x2_t *)_Q1.f32 = vdup_lane_s32(*(int32x2_t *)v7.i8, 1);
  v7.i32[0] = vadd_s32(*(int32x2_t *)v7.i8, *(int32x2_t *)_Q1.f32).u32[0];
  v7.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 64) + v7.i32[0]);
  _Q1.f32[0] = (float)v7.u32[0] * 0.0039216;
  v8 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v8.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v8), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), _Q1.f32[0]), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), _Q1.f32[0]), _Q1.f32[0] * _Q1.f32[0]), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), _Q1.f32[0]), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          _Q1.f32[0]),
                                        _Q1.f32[0] * _Q1.f32[0]),
                                      (float)(_Q1.f32[0] * _Q1.f32[0]) * (float)(_Q1.f32[0] * _Q1.f32[0])),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), _Q1.f32[0])).u64[0];
  return result;
}

double sub_1B17DF0A4(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  uint32x4_t v9;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  _Q1.i64[0] = 0xFF000000FFLL;
  _Q1.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)_Q1)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17DF11C(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  uint32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  _Q1.i64[0] = 0xFF000000FFLL;
  _Q1.i64[1] = 0xFF000000FFLL;
  v10 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)_Q1));
  v11 = vmulq_f32(v10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v12 = vmulq_f32(v11, v11);
  v13 = vcgeq_f32(v11, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v13.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v13), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v10), v12, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v10)), vmulq_f32(v12, v12), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v10), v12,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v10))), (int8x16_t)vmulq_f32(v10, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17DF238(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  _Q1.i64[0] = 0xFF000000FFLL;
  _Q1.i64[1] = 0xFF000000FFLL;
  v10 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)_Q1)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v10, v10, 0xCuLL).u64[0];
  return result;
}

double sub_1B17DF2B8(uint64_t a1, float32x4_t a2)
{
  int8x16_t v7;
  const float *v8;
  uint32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  double result;

  a2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v7 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(a2, (float32x4_t)0), _Q1))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  _Q1.i64[0] = 0xFF000000FFLL;
  _Q1.i64[1] = 0xFF000000FFLL;
  v10 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)_Q1));
  v11 = vmulq_f32(v10, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v12 = vmulq_f32(v11, v11);
  v13 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v10), v12, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v10)), vmulq_f32(v12, v12), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v10), v12, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v10)));
  v14 = vcgeq_f32(v11, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v14.i32[3] = 0;
  v15 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v14), v13, (int8x16_t)vmulq_f32(v10, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v15.i32[3] = v11.i32[3];
  v16 = (int8x16_t)vrev64q_s32(v15);
  *(_QWORD *)&result = vextq_s8(v16, v16, 0xCuLL).u64[0];
  return result;
}

double sub_1B17DF3DC(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;
  int32x2_t v3;
  unsigned int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  double result;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v3 = vadd_s32(*(int32x2_t *)v2.i8, vdup_lane_s32(*(int32x2_t *)v2.i8, 1));
  v4 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + v3.i32[0]);
  v5 = (v4 >> 10) & 0x1F;
  if (v5 == 31)
    v6 = 2139095040;
  else
    v6 = (v4 >> 10) & 0x1F;
  if (v5)
    v7 = v5 == 31;
  else
    v7 = 1;
  if (v7)
    v8 = v6;
  else
    v8 = (v5 << 23) + 939524096;
  v3.i32[0] = v8 | (v4 << 16) & 0x80000000 | (v4 >> 7) & 7 | (8 * (v4 & 0x3FF)) & 0x1FFF | ((v4 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(v3, 0).u64[0];
  return result;
}

double sub_1B17DF478(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;
  const float *v3;
  double result;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v3 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v2.i8, vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).i32[0]);
  *(_QWORD *)&result = vld1q_dup_f32(v3).u64[0];
  return result;
}

double sub_1B17DF4CC(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;
  int8x16_t v3;
  int32x4_t v4;
  int8x16_t v5;
  int32x4_t v6;
  double result;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v2.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 64)
                        + vadd_s32(*(int32x2_t *)v2.i8, vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).i32[0]);
  v3.i64[0] = 0x8000000080000000;
  v3.i64[1] = 0x8000000080000000;
  v4 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v2.i8), v3);
  v5 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v2.i8, 0xDuLL);
  v6 = (int32x4_t)vorrq_s8(vandq_s8(v5, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v4, vandq_s8(v5, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v4.i64[0] = 0x3800000038000000;
  v4.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v6, v4).u64[0];
  return result;
}

__n128 sub_1B17DF554(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  return *(__n128 *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v2.i8, vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).i32[0]);
}

double sub_1B17DF5A4(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;
  double result;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, vdup_lane_s32(*(int32x2_t *)v2.i8, 1));
  v2.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 64) + v2.i32[0]);
  *(float *)v2.i32 = (float)v2.u32[0] * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)v2.i8, 0).u64[0];
  return result;
}

double sub_1B17DF608(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;
  int32x2_t v3;
  int32x4_t v4;
  double result;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v3 = vdup_lane_s32(*(int32x2_t *)v2.i8, 1);
  v2.i32[0] = vadd_s32(*(int32x2_t *)v2.i8, v3).u32[0];
  v2.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 64) + v2.i32[0]);
  *(float *)v3.i32 = (float)v2.u32[0] * 0.0039216;
  v4 = vcgeq_f32((float32x4_t)vdupq_lane_s32(v3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v4.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v4), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)v3.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)v3.i32), *(float *)v3.i32 * *(float *)v3.i32), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)v3.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)v3.i32),
                                        *(float *)v3.i32 * *(float *)v3.i32),
                                      (float)(*(float *)v3.i32 * *(float *)v3.i32)
                                    * (float)(*(float *)v3.i32 * *(float *)v3.i32)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)v3.i32)).u64[0];
  return result;
}

double sub_1B17DF720(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  double result;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v3 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v2.i8, vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).i32[0]);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17DF79C(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  double result;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v3 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v2.i8, vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).i32[0]);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v9.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v9), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6))), (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17DF8BC(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  double result;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v3 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v2.i8, vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).i32[0]);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v6, v6, 0xCuLL).u64[0];
  return result;
}

double sub_1B17DF940(uint64_t a1, float32x4_t a2)
{
  int8x16_t v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  double result;

  a2.i32[3] = 0;
  v2 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(a2, vrndmq_f32(a2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v2.i8 = vadd_s32(*(int32x2_t *)v2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v3 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v2.i8, vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).i32[0]);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6)));
  v10 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v10.i32[3] = 0;
  v11 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v10), v9, (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v11.i32[3] = v7.i32[3];
  v12 = (int8x16_t)vrev64q_s32(v11);
  *(_QWORD *)&result = vextq_s8(v12, v12, 0xCuLL).u64[0];
  return result;
}

double sub_1B17DFA68(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int32x2_t v7;
  unsigned int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  double result;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1));
  v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 64) + v7.i32[0]);
  v9 = (v8 >> 10) & 0x1F;
  if (v9 == 31)
    v10 = 2139095040;
  else
    v10 = (v8 >> 10) & 0x1F;
  if (v9)
    v11 = v9 == 31;
  else
    v11 = 1;
  if (v11)
    v12 = v10;
  else
    v12 = (v9 << 23) + 939524096;
  v7.i32[0] = v12 | (v8 << 16) & 0x80000000 | (v8 >> 7) & 7 | (8 * (v8 & 0x3FF)) & 0x1FFF | ((v8 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(v7, 0).u64[0];
  return result;
}

double sub_1B17DFB18(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  const float *v7;
  double result;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1)).i32[0]);
  *(_QWORD *)&result = vld1q_dup_f32(v7).u64[0];
  return result;
}

double sub_1B17DFB80(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int32x4_t v9;
  double result;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v6.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 64)
                        + vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1)).i32[0]);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v7 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v6.i8), (int8x16_t)v4);
  v8 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v6.i8, 0xDuLL);
  v9 = (int32x4_t)vorrq_s8(vandq_s8(v8, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v7, vandq_s8(v8, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v7.i64[0] = 0x3800000038000000;
  v7.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v9, v7).u64[0];
  return result;
}

__n128 sub_1B17DFC1C(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  return *(__n128 *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1)).i32[0]);
}

double sub_1B17DFC80(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  double result;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1));
  v6.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 64) + v6.i32[0]);
  *(float *)v6.i32 = (float)v6.u32[0] * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)v6.i8, 0).u64[0];
  return result;
}

double sub_1B17DFCF8(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  double result;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  *(int32x2_t *)v2.f32 = vdup_lane_s32(*(int32x2_t *)v6.i8, 1);
  v6.i32[0] = vadd_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v2.f32).u32[0];
  v6.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 64) + v6.i32[0]);
  v2.f32[0] = (float)v6.u32[0] * 0.0039216;
  v7 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v7.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v7), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v2.f32[0]), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v2.f32[0]), v2.f32[0] * v2.f32[0]), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v2.f32[0]), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          v2.f32[0]),
                                        v2.f32[0] * v2.f32[0]),
                                      (float)(v2.f32[0] * v2.f32[0]) * (float)(v2.f32[0] * v2.f32[0])),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), v2.f32[0])).u64[0];
  return result;
}

double sub_1B17DFE24(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  const float *v7;
  uint32x4_t v8;
  double result;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1)).i32[0]);
  v8 = (uint32x4_t)vld1q_dup_f32(v7);
  v2.i64[0] = 0xFF000000FFLL;
  v2.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v8, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v2)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17DFEB4(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  const float *v7;
  uint32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  double result;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1)).i32[0]);
  v8 = (uint32x4_t)vld1q_dup_f32(v7);
  v2.i64[0] = 0xFF000000FFLL;
  v2.i64[1] = 0xFF000000FFLL;
  v9 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v8, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v2));
  v10 = vmulq_f32(v9, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v11 = vmulq_f32(v10, v10);
  v12 = vcgeq_f32(v10, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v12.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v12), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v9), v11, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v9)), vmulq_f32(v11, v11), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v9), v11,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v9))), (int8x16_t)vmulq_f32(v9, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17DFFE8(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  const float *v7;
  uint32x4_t v8;
  int8x16_t v9;
  double result;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1)).i32[0]);
  v8 = (uint32x4_t)vld1q_dup_f32(v7);
  v2.i64[0] = 0xFF000000FFLL;
  v2.i64[1] = 0xFF000000FFLL;
  v9 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v8, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v2)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v9, v9, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E0080(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  const float *v7;
  uint32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  double result;

  a2.i32[3] = 0;
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4 = vmlaq_f32(v3, v3, a2);
  v5 = vabdq_f32(v2, vminnmq_f32(vsubq_f32(v4, vrndmq_f32(v4)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v6 = (int8x16_t)vmulq_s32(*(int32x4_t *)(a1 + 32), vminq_s32(vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v5, v5))), *(int32x4_t *)(a1 + 16)));
  *(int32x2_t *)v6.i8 = vadd_s32(*(int32x2_t *)v6.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = (const float *)(*(_QWORD *)(a1 + 64) + vadd_s32(*(int32x2_t *)v6.i8, vdup_lane_s32(*(int32x2_t *)v6.i8, 1)).i32[0]);
  v8 = (uint32x4_t)vld1q_dup_f32(v7);
  v2.i64[0] = 0xFF000000FFLL;
  v2.i64[1] = 0xFF000000FFLL;
  v9 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v8, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v2));
  v10 = vmulq_f32(v9, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v11 = vmulq_f32(v10, v10);
  v12 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v9), v11, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v9)), vmulq_f32(v11, v11), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v9), v11, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v9)));
  v13 = vcgeq_f32(v10, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v13.i32[3] = 0;
  v14 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v13), v12, (int8x16_t)vmulq_f32(v9, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v14.i32[3] = v10.i32[3];
  v15 = (int8x16_t)vrev64q_s32(v14);
  *(_QWORD *)&result = vextq_s8(v15, v15, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E01BC(uint64_t a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  int v28;
  int v29;
  int v31;
  unsigned __int16 *v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  unsigned __int16 *v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  unsigned __int16 *v44;
  unsigned int v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  BOOL v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  double result;

  v10 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v10.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v10, _Q1), (int8x16_t)vcltzq_f32(v10))) & 0x80000000) != 0)
    return 0.0;
  v15 = *(int32x4_t *)(a1 + 16);
  v16 = vmulq_f32(*(float32x4_t *)a1, v10);
  v17 = (float32x4_t)vminq_s32(vcvtq_s32_f32(v16), v15);
  v18 = *(float32x4_t *)(a1 + 32);
  v21 = (float32x4_t)vmulq_s32((int32x4_t)v18, (int32x4_t)v17);
  v19 = (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL);
  *(int32x2_t *)v21.f32 = vadd_s32(*(int32x2_t *)v21.f32, *(int32x2_t *)v19.f32);
  *(int32x2_t *)v19.f32 = vdup_lane_s32(*(int32x2_t *)v21.f32, 1);
  v20 = *(_QWORD *)(a1 + 64);
  *(int32x2_t *)v21.f32 = vadd_s32(*(int32x2_t *)v21.f32, *(int32x2_t *)v19.f32);
  v22 = (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_s32(v15, (int32x4_t)v17));
  v23 = v21.i32[0] + (uint64_t)v22.i32[0];
  v24 = v21.i32[0] + (uint64_t)v22.i32[1];
  v25 = (int)v24 + (uint64_t)v22.i32[0];
  v26 = (unsigned __int16 *)(v20 + v21.i32[0]);
  v27 = *v26;
  v28 = (v27 >> 10) & 0x1F;
  if (v28 == 31)
    v29 = 2139095040;
  else
    v29 = (v27 >> 10) & 0x1F;
  if (v28)
    _ZF = v28 == 31;
  else
    _ZF = 1;
  if (_ZF)
    v31 = v29;
  else
    v31 = (v28 << 23) + 939524096;
  v21.i32[0] = v31 | (v27 << 16) & 0x80000000 | (v27 >> 7) & 7 | (8 * (v27 & 0x3FF)) & 0x1FFF | ((v27 & 0x3FF) << 13);
  v32 = (unsigned __int16 *)(v20 + v23);
  v33 = *v32;
  v34 = (v33 >> 10) & 0x1F;
  if (v34 == 31)
    v35 = 2139095040;
  else
    v35 = (v33 >> 10) & 0x1F;
  if (v34)
    v36 = v34 == 31;
  else
    v36 = 1;
  if (v36)
    v37 = v35;
  else
    v37 = (v34 << 23) + 939524096;
  v22.i32[0] = v37 | (v33 << 16) & 0x80000000 | (v33 >> 7) & 7 | (8 * (v33 & 0x3FF)) & 0x1FFF | ((v33 & 0x3FF) << 13);
  v38 = (unsigned __int16 *)(v20 + v24);
  v39 = *v38;
  v40 = (v39 >> 10) & 0x1F;
  if (v40 == 31)
    v41 = 2139095040;
  else
    v41 = (v39 >> 10) & 0x1F;
  if (v40)
    v42 = v40 == 31;
  else
    v42 = 1;
  if (v42)
    v43 = v41;
  else
    v43 = (v40 << 23) + 939524096;
  v17.i32[0] = v43 | (v39 << 16) & 0x80000000 | (v39 >> 7) & 7 | (8 * (v39 & 0x3FF)) & 0x1FFF | ((v39 & 0x3FF) << 13);
  v44 = (unsigned __int16 *)(v20 + v25);
  v45 = *v44;
  v46 = (v45 >> 10) & 0x1F;
  if (v46 == 31)
    v47 = 2139095040;
  else
    v47 = (v45 >> 10) & 0x1F;
  if (v46)
    v48 = v46 == 31;
  else
    v48 = 1;
  if (v48)
    v49 = v47;
  else
    v49 = (v46 << 23) + 939524096;
  v18.i32[0] = v49 | (v45 << 16) & 0x80000000 | (v45 >> 7) & 7 | (8 * (v45 & 0x3FF)) & 0x1FFF | ((v45 & 0x3FF) << 13);
  v50 = *(unsigned __int16 *)((char *)v26 + v22.i32[2]);
  v51 = (v50 >> 10) & 0x1F;
  if (v51 == 31)
    v52 = 2139095040;
  else
    v52 = (v50 >> 10) & 0x1F;
  if (v51)
    v53 = v51 == 31;
  else
    v53 = 1;
  if (v53)
    v54 = v52;
  else
    v54 = (v51 << 23) + 939524096;
  v19.i32[0] = v54 | (v50 << 16) & 0x80000000 | (v50 >> 7) & 7 | (8 * (v50 & 0x3FF)) & 0x1FFF | ((v50 & 0x3FF) << 13);
  v55 = *(unsigned __int16 *)((char *)v32 + v22.i32[2]);
  v56 = (v55 >> 10) & 0x1F;
  if (v56 == 31)
    v57 = 2139095040;
  else
    v57 = (v55 >> 10) & 0x1F;
  if (v56)
    v58 = v56 == 31;
  else
    v58 = 1;
  if (v58)
    v59 = v57;
  else
    v59 = (v56 << 23) + 939524096;
  a8.i32[0] = v59 | (v55 << 16) & 0x80000000 | (v55 >> 7) & 7 | (8 * (v55 & 0x3FF)) & 0x1FFF | ((v55 & 0x3FF) << 13);
  v60 = *(unsigned __int16 *)((char *)v38 + v22.i32[2]);
  v61 = (v60 >> 10) & 0x1F;
  if (v61 == 31)
    v62 = 2139095040;
  else
    v62 = (v60 >> 10) & 0x1F;
  if (v61)
    v63 = v61 == 31;
  else
    v63 = 1;
  if (v63)
    v64 = v62;
  else
    v64 = (v61 << 23) + 939524096;
  a9.i32[0] = v64 | (v60 << 16) & 0x80000000 | (v60 >> 7) & 7 | (8 * (v60 & 0x3FF)) & 0x1FFF | ((v60 & 0x3FF) << 13);
  v65 = *(unsigned __int16 *)((char *)v44 + v22.i32[2]);
  v66 = (v65 >> 10) & 0x1F;
  if (v66 == 31)
    v67 = 2139095040;
  else
    v67 = (v65 >> 10) & 0x1F;
  if (v66)
    v68 = v66 == 31;
  else
    v68 = 1;
  if (!v68)
    v67 = (v66 << 23) + 939524096;
  v9.i32[0] = v67 | (v65 << 16) & 0x80000000 | (v65 >> 7) & 7 | (8 * (v65 & 0x3FF)) & 0x1FFF | ((v65 & 0x3FF) << 13);
  v69 = vsubq_f32(v16, vrndq_f32(v16));
  v70 = vmlaq_f32(v21, v69, vsubq_f32(v22, v21));
  v71 = vmlaq_f32(v19, v69, vsubq_f32(a8, v19));
  v72 = vsubq_f32(v9, a9);
  v73 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1);
  v74 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 0), v73, vmlaq_f32(vsubq_f32(v17, v70), v69, vsubq_f32(v18, v17)).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v74, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 0), v74), v73, vmlaq_f32(vsubq_f32(a9, v71), v69, v72).f32[0]), v69, 2).u64[0];
  return result;
}

double sub_1B17E04D0(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int32 *v26;
  float *v27;
  __int32 *v28;
  float *v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  double result;

  v9 = vsubq_f32(a2, a1[5]);
  v9.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v9, _Q1), (int8x16_t)vcltzq_f32(v9))) & 0x80000000) != 0)
    return 0.0;
  v15 = a1[1];
  v16 = vmulq_f32(*a1, v9);
  v17 = vminq_s32(vcvtq_s32_f32(v16), (int32x4_t)v15);
  v18 = a1[2];
  v19 = (float32x4_t)vmulq_s32((int32x4_t)v18, v17);
  v20 = (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL);
  *(int32x2_t *)v19.f32 = vadd_s32(*(int32x2_t *)v19.f32, *(int32x2_t *)v20.f32);
  *(int32x2_t *)v20.f32 = vdup_lane_s32(*(int32x2_t *)v19.f32, 1);
  v21 = a1[4].i64[0];
  *(int32x2_t *)v19.f32 = vadd_s32(*(int32x2_t *)v19.f32, *(int32x2_t *)v20.f32);
  v22 = (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_s32((int32x4_t)v15, v17));
  v23 = v19.i32[0] + (uint64_t)v22.i32[0];
  v24 = v19.i32[0] + (uint64_t)v22.i32[1];
  v25 = (int)v24 + (uint64_t)v22.i32[0];
  v26 = (__int32 *)(v21 + v19.i32[0]);
  v22.i32[0] = *v26;
  v27 = (float *)(v21 + v23);
  v28 = (__int32 *)(v21 + v24);
  v18.i32[0] = *v28;
  v29 = (float *)(v21 + v25);
  v20.i32[0] = *(__int32 *)((char *)v26 + v22.i32[2]);
  a8.f32[0] = *(float *)((char *)v27 + v22.i32[2]);
  a9.i32[0] = *(__int32 *)((char *)v28 + v22.i32[2]);
  v30 = *(float *)((char *)v29 + v22.i32[2]);
  v31 = vsubq_f32(v16, vrndq_f32(v16));
  v16.f32[0] = *v27 - *(float *)v26;
  v32 = vmlaq_f32(v22, v31, v16);
  v15.f32[0] = a8.f32[0] - v20.f32[0];
  v33 = vmlaq_f32(v20, v31, v15);
  v19.f32[0] = *v29 - *(float *)v28;
  a8.f32[0] = v30 - a9.f32[0];
  v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1);
  v35 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 0), v34, vmlaq_f32(vsubq_f32(v18, v32), v31, v19).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v35, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0), v35), v34, vmlaq_f32(vsubq_f32(a9, v33), v31, a8).f32[0]), v31, 2).u64[0];
  return result;
}

double sub_1B17E05D8(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  int8x16_t v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint16x4_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  uint16x4_t *v25;
  int8x16_t v26;
  float32x4_t v27;
  uint16x4_t *v28;
  int8x16_t v29;
  float32x4_t v30;
  uint16x4_t *v31;
  int8x16_t v32;
  float32x4_t v33;
  int16x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v2, _Q1), (int8x16_t)vcltzq_f32(v2))) & 0x80000000) != 0)
    return 0.0;
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, v2);
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = vmulq_s32(v11, v10);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL));
  v13 = *(_QWORD *)(a1 + 64);
  v12.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v14 = vandq_s8((int8x16_t)v11, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v16 = v12.i32[0] + (uint64_t)v14.i32[0];
  v17 = v12.i32[0] + (uint64_t)v14.i32[1];
  v18 = (int)v17 + (uint64_t)v14.i32[0];
  v19 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v20 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v21 = (uint16x4_t *)(v13 + v12.i32[0]);
  v22.i64[0] = 0x8000000080000000;
  v22.i64[1] = 0x8000000080000000;
  v23 = (int8x16_t)vshll_n_u16(*v21, 0xDuLL);
  v12.i64[0] = 0x3800000038000000;
  v12.i64[1] = 0x3800000038000000;
  v24 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v23, v20), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v21), v22), vandq_s8(v23, v19))), v12);
  v25 = (uint16x4_t *)(v13 + v16);
  v26 = (int8x16_t)vshll_n_u16(*v25, 0xDuLL);
  v27 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v26, v20), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v25), v22), vandq_s8(v26, v19))), v12);
  v28 = (uint16x4_t *)(v13 + v17);
  v29 = (int8x16_t)vshll_n_u16(*v28, 0xDuLL);
  v30 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v29, v20), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v28), v22), vandq_s8(v29, v19))), v12);
  v31 = (uint16x4_t *)(v13 + v18);
  v32 = (int8x16_t)vshll_n_u16(*v31, 0xDuLL);
  v33 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v32, v20), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v31), v22), vandq_s8(v32, v19))), v12);
  v34 = *(int16x4_t *)((char *)v21 + v15);
  v35 = vandq_s8((int8x16_t)vmovl_s16(v34), v22);
  v36 = (int8x16_t)vshll_n_u16((uint16x4_t)v34, 0xDuLL);
  v37 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v36, v20), vorrq_s8(v35, vandq_s8(v36, v19))), v12);
  *(uint16x4_t *)v35.i8 = *(uint16x4_t *)((char *)v25 + v15);
  v38 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v35.i8), v22);
  v39 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v35.i8, 0xDuLL);
  v40 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v39, v20), vorrq_s8(v38, vandq_s8(v39, v19))), v12);
  *(uint16x4_t *)v38.i8 = *(uint16x4_t *)((char *)v28 + v15);
  v41 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v38.i8), v22);
  v42 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v38.i8, 0xDuLL);
  v43 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v42, v20), vorrq_s8(v41, vandq_s8(v42, v19))), v12);
  *(uint16x4_t *)v41.i8 = *(uint16x4_t *)((char *)v31 + v15);
  v44 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v41.i8), v22);
  v45 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v41.i8, 0xDuLL);
  v46 = vsubq_f32(v9, vrndq_f32(v9));
  v47 = vmlaq_n_f32(v24, vsubq_f32(v27, v24), v46.f32[0]);
  v48 = vmlaq_n_f32(v37, vsubq_f32(v40, v37), v46.f32[0]);
  v49 = vmlaq_lane_f32(v47, vmlaq_n_f32(vsubq_f32(v30, v47), vsubq_f32(v33, v30), v46.f32[0]), *(float32x2_t *)v46.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v49, vmlaq_lane_f32(vsubq_f32(v48, v49), vmlaq_n_f32(vsubq_f32(v43, v48), vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v45, v20), vorrq_s8(v44, vandq_s8(v45, v19))), v12), v43), v46.f32[0]), *(float32x2_t *)v46.f32, 1), v46, 2).u64[0];
  return result;
}

double sub_1B17E07EC(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v2, _Q1), (int8x16_t)vcltzq_f32(v2))) & 0x80000000) != 0)
    return 0.0;
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, v2);
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = (int8x16_t)vmulq_s32(v11, v10);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v13 = *(_QWORD *)(a1 + 64);
  v12.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v14 = vandq_s8((int8x16_t)v11, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v12.i32[0] + (uint64_t)v14.i32[1];
  v16 = (int)v15 + (uint64_t)v14.i32[0];
  v17 = (float32x4_t *)(v13 + v12.i32[0]);
  v18 = (float32x4_t *)(v13 + v12.i32[0] + (uint64_t)v14.i32[0]);
  v19 = (float32x4_t *)(v13 + v15);
  v20 = (float32x4_t *)(v13 + v16);
  v21 = *(float32x4_t *)((char *)v17 + v14.i32[2]);
  v22 = *(float32x4_t *)((char *)v18 + v14.i32[2]);
  v23 = *(float32x4_t *)((char *)v19 + v14.i32[2]);
  v24 = *(float32x4_t *)((char *)v20 + v14.i32[2]);
  v25 = vsubq_f32(v9, vrndq_f32(v9));
  v26 = vmlaq_n_f32(*v17, vsubq_f32(*v18, *v17), v25.f32[0]);
  v27 = vmlaq_n_f32(v21, vsubq_f32(v22, v21), v25.f32[0]);
  v28 = vmlaq_lane_f32(v26, vmlaq_n_f32(vsubq_f32(*v19, v26), vsubq_f32(*v20, *v19), v25.f32[0]), *(float32x2_t *)v25.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v28, vmlaq_lane_f32(vsubq_f32(v27, v28), vmlaq_n_f32(vsubq_f32(v23, v27), vsubq_f32(v24, v23), v25.f32[0]), *(float32x2_t *)v25.f32, 1), v25, 2).u64[0];
  return result;
}

double sub_1B17E08E8(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float a9)
{
  float32x4_t v9;
  unsigned int v10;
  float32x4_t v11;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  __int8 *v27;
  __int8 *v28;
  __int8 *v29;
  __int8 *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  double result;

  v11 = vsubq_f32(a2, a1[5]);
  v11.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v11, _Q1), (int8x16_t)vcltzq_f32(v11))) & 0x80000000) != 0)
    return 0.0;
  v17 = a1[1];
  v18 = vmulq_f32(*a1, v11);
  v19 = vminq_s32(vcvtq_s32_f32(v18), (int32x4_t)v17);
  v20 = a1[4].i64[0];
  v21 = a1[2];
  v22 = (float32x4_t)vmulq_s32((int32x4_t)v21, v19);
  v23 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  *(int32x2_t *)v23.f32 = vdup_lane_s32(*(int32x2_t *)v22.f32, 1);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  v24 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_s32((int32x4_t)v17, v19));
  v25 = v22.i32[0] + (uint64_t)v24.i32[1];
  v26 = (int)v25 + (uint64_t)v24.i32[0];
  v27 = (__int8 *)(v20 + v22.i32[0]);
  v17.i8[0] = *v27;
  v17.f32[0] = (float)v17.u32[0] * 0.0039216;
  v28 = (__int8 *)(v20 + v22.i32[0] + (uint64_t)v24.i32[0]);
  v21.i8[0] = *v28;
  v29 = (__int8 *)(v20 + v25);
  v22.i8[0] = *v29;
  v22.f32[0] = (float)v22.u32[0] * 0.0039216;
  v30 = (__int8 *)(v20 + v26);
  v23.i8[0] = *v30;
  a8.i8[0] = v27[v24.i32[2]];
  a8.f32[0] = (float)a8.u32[0] * 0.0039216;
  LOBYTE(a9) = v28[v24.i32[2]];
  v9.i8[0] = v29[v24.i32[2]];
  LOBYTE(v10) = v30[v24.i32[2]];
  v9.f32[0] = (float)v9.u32[0] * 0.0039216;
  v31 = vsubq_f32(v18, vrndq_f32(v18));
  v18.f32[0] = -(float)(v17.f32[0] - (float)((float)v21.u32[0] * 0.0039216));
  v32 = vmlaq_f32(v17, v31, v18);
  v21.f32[0] = -(float)(a8.f32[0] - (float)((float)LODWORD(a9) * 0.0039216));
  v33 = vmlaq_f32(a8, v31, v21);
  v23.f32[0] = -(float)(v22.f32[0] - (float)((float)v23.u32[0] * 0.0039216));
  v24.f32[0] = -(float)(v9.f32[0] - (float)((float)v10 * 0.0039216));
  v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1);
  v35 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 0), v34, vmlaq_f32(vsubq_f32(v22, v32), v31, v23).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v35, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0), v35), v34, vmlaq_f32(vsubq_f32(v9, v33), v31, v24).f32[0]), v31, 2).u64[0];
  return result;
}

double sub_1B17E0A28(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  unsigned int v10;
  float32x4_t v11;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int8 *v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  double result;

  v11 = vsubq_f32(a2, a1[5]);
  v11.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v11, _Q1), (int8x16_t)vcltzq_f32(v11))) & 0x80000000) != 0)
    return 0.0;
  v17 = a1[1];
  v18 = vmulq_f32(*a1, v11);
  v19 = vminq_s32(vcvtq_s32_f32(v18), (int32x4_t)v17);
  v20 = a1[4].i64[0];
  v21 = a1[2];
  v22 = (float32x4_t)vmulq_s32((int32x4_t)v21, v19);
  v23 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  *(int32x2_t *)v23.f32 = vdup_lane_s32(*(int32x2_t *)v22.f32, 1);
  v24 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_s32((int32x4_t)v17, v19));
  *(int32x2_t *)v17.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  v25 = v17.i32[0] + (uint64_t)v24.i32[0];
  v26 = v17.i32[0] + (uint64_t)v24.i32[1];
  v27 = (int)v26 + (uint64_t)v24.i32[0];
  v28 = (__int8 *)(v20 + v17.i32[0]);
  v24.i8[0] = *v28;
  v24.f32[0] = (float)v24.u32[0];
  v17.f32[0] = v24.f32[0] * 0.0039216;
  v29 = (__int8 *)(v20 + v25);
  v24.i8[0] = *v29;
  v30 = (__int8 *)(v20 + v26);
  v22.i8[0] = *v30;
  v22.f32[0] = (float)v22.u32[0] * 0.0039216;
  v31 = (__int8 *)(v20 + v27);
  v23.i8[0] = *v31;
  a8.i8[0] = v28[v24.i32[2]];
  a9.i8[0] = v29[v24.i32[2]];
  a8.f32[0] = (float)a8.u32[0] * 0.0039216;
  v9.i8[0] = v30[v24.i32[2]];
  v9.f32[0] = (float)v9.u32[0] * 0.0039216;
  LOBYTE(v10) = v31[v24.i32[2]];
  v32 = vsubq_f32(v18, vrndq_f32(v18));
  v24.f32[0] = -(float)(v17.f32[0] - (float)((float)v24.u32[0] * 0.0039216));
  v33 = vmlaq_f32(v17, v32, v24);
  v23.f32[0] = -(float)(v22.f32[0] - (float)((float)v23.u32[0] * 0.0039216));
  a9.f32[0] = -(float)(a8.f32[0] - (float)((float)a9.u32[0] * 0.0039216));
  v34 = vmlaq_f32(a8, v32, a9);
  v21.f32[0] = -(float)(v9.f32[0] - (float)((float)v10 * 0.0039216));
  v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1);
  v36 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0), v35, vmlaq_f32(vsubq_f32(v22, v33), v32, v23).f32[0]);
  v37 = vmlaq_laneq_f32(v36, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0), v36), v35, vmlaq_f32(vsubq_f32(v9, v34), v32, v21).f32[0]), v32, 2);
  v38 = vmulq_f32(v37, v37);
  v39 = vcgeq_f32(v37, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v39.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v39), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v37), v38, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v37)), vmulq_f32(v38, v38), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v37), v38,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v37))), (int8x16_t)vmulq_f32(v37, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E0C1C(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  const float *v20;
  uint32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  const float *v24;
  const float *v25;
  uint32x4_t v26;
  const float *v27;
  const float *v28;
  uint32x4_t v29;
  float32x4_t v30;
  const float *v31;
  const float *v32;
  uint32x4_t v33;
  uint32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v2, _Q1), (int8x16_t)vcltzq_f32(v2))) & 0x80000000) != 0)
    return 0.0;
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, v2);
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(int32x4_t *)(a1 + 32);
  v13 = (int8x16_t)vmulq_s32(v12, v10);
  *(int32x2_t *)v13.i8 = vadd_s32(*(int32x2_t *)v13.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  v13.i32[0] = vadd_s32(*(int32x2_t *)v13.i8, vdup_lane_s32(*(int32x2_t *)v13.i8, 1)).u32[0];
  v14 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v16 = v13.i32[0] + (uint64_t)v14.i32[0];
  v17 = v13.i32[0] + (uint64_t)v14.i32[1];
  v18 = (int)v17 + (uint64_t)v14.i32[0];
  v19 = (const float *)(v11 + v13.i32[0]);
  v21 = (uint32x4_t)vld1q_dup_f32(v19);
  v20 = (const float *)((char *)v19 + v15);
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v23 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v24 = (const float *)(v11 + v16);
  v26 = (uint32x4_t)vld1q_dup_f32(v24);
  v25 = (const float *)((char *)v24 + v15);
  v27 = (const float *)(v11 + v17);
  v29 = (uint32x4_t)vld1q_dup_f32(v27);
  v28 = (const float *)((char *)v27 + v15);
  v30 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v31 = (const float *)(v11 + v18);
  v33 = (uint32x4_t)vld1q_dup_f32(v31);
  v32 = (const float *)((char *)v31 + v15);
  v34 = (uint32x4_t)vld1q_dup_f32(v20);
  v35 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v36 = (uint32x4_t)vld1q_dup_f32(v25);
  v37 = (uint32x4_t)vld1q_dup_f32(v28);
  v38 = (uint32x4_t)vld1q_dup_f32(v32);
  v39 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v40 = vsubq_f32(v9, vrndq_f32(v9));
  v41 = vmlaq_n_f32(v23, vmlaq_f32(vnegq_f32(v23), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]);
  v42 = vmlaq_n_f32(v35, vmlaq_f32(vnegq_f32(v35), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v36, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]);
  v43 = vmlaq_lane_f32(v41, vmlaq_n_f32(vsubq_f32(v30, v41), vmlaq_f32(vnegq_f32(v30), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]), *(float32x2_t *)v40.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v43, vmlaq_lane_f32(vsubq_f32(v42, v43), vmlaq_n_f32(vsubq_f32(v39, v42), vmlaq_f32(vnegq_f32(v39), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v38, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]), *(float32x2_t *)v40.f32, 1), v40, 2).u64[0];
  return result;
}

double sub_1B17E0DB0(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  const float *v20;
  uint32x4_t v21;
  float32x4_t v22;
  const float *v23;
  const float *v24;
  uint32x4_t v25;
  float32x4_t v26;
  const float *v27;
  const float *v28;
  uint32x4_t v29;
  float32x4_t v30;
  const float *v31;
  const float *v32;
  uint32x4_t v33;
  uint32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  uint32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v2, _Q1), (int8x16_t)vcltzq_f32(v2))) & 0x80000000) != 0)
    return 0.0;
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, v2);
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = (int8x16_t)vmulq_s32(v11, v10);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v12.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v13 = *(_QWORD *)(a1 + 64);
  v14 = vandq_s8((int8x16_t)v11, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v16 = v12.i32[0] + (uint64_t)v14.i32[0];
  v17 = v12.i32[0] + (uint64_t)v14.i32[1];
  v18 = (int)v17 + (uint64_t)v14.i32[0];
  v19 = (const float *)(v13 + v12.i32[0]);
  v21 = (uint32x4_t)vld1q_dup_f32(v19);
  v20 = (const float *)((char *)v19 + v15);
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v23 = (const float *)(v13 + v16);
  v25 = (uint32x4_t)vld1q_dup_f32(v23);
  v24 = (const float *)((char *)v23 + v15);
  v26 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v22);
  v27 = (const float *)(v13 + v17);
  v29 = (uint32x4_t)vld1q_dup_f32(v27);
  v28 = (const float *)((char *)v27 + v15);
  v30 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v22);
  v31 = (const float *)(v13 + v18);
  v33 = (uint32x4_t)vld1q_dup_f32(v31);
  v32 = (const float *)((char *)v31 + v15);
  v34 = (uint32x4_t)vld1q_dup_f32(v20);
  v35 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v22);
  v36 = (uint32x4_t)vld1q_dup_f32(v24);
  v37 = (uint32x4_t)vld1q_dup_f32(v28);
  v38 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v22);
  v39 = (uint32x4_t)vld1q_dup_f32(v32);
  v40 = vsubq_f32(v9, vrndq_f32(v9));
  v41 = vmlaq_n_f32(v26, vmlaq_f32(vnegq_f32(v26), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v40.f32[0]);
  v42 = vmlaq_n_f32(v35, vmlaq_f32(vnegq_f32(v35), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v36, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v40.f32[0]);
  v43 = vmlaq_lane_f32(v41, vmlaq_n_f32(vsubq_f32(v30, v41), vmlaq_f32(vnegq_f32(v30), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v40.f32[0]), *(float32x2_t *)v40.f32, 1);
  v44 = vmlaq_laneq_f32(v43, vmlaq_lane_f32(vsubq_f32(v42, v43), vmlaq_n_f32(vsubq_f32(v38, v42), vmlaq_f32(vnegq_f32(v38), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v39, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v40.f32[0]), *(float32x2_t *)v40.f32, 1), v40, 2);
  v45 = vmulq_f32(v44, v44);
  v46 = vcgeq_f32(v44, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v46.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v46), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v44), v45, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v44)), vmulq_f32(v45, v45), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v44), v45,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v44))), (int8x16_t)vmulq_f32(v44, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E0FF8(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  __int32 v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  const float *v20;
  uint32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  const float *v25;
  const float *v26;
  uint32x4_t v27;
  const float *v28;
  const float *v29;
  uint32x4_t v30;
  const float *v31;
  const float *v32;
  uint32x4_t v33;
  float32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  float32x4_t v39;
  uint32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v2, _Q1), (int8x16_t)vcltzq_f32(v2))) & 0x80000000) != 0)
    return 0.0;
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, v2);
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = (int8x16_t)vmulq_s32(v11, v10);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v13 = *(_QWORD *)(a1 + 64);
  v12.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v14 = vandq_s8((int8x16_t)v11, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v16 = v14.i32[0];
  v17 = v12.i32[0] + (uint64_t)v14.i32[0];
  v18 = v12.i32[0] + (uint64_t)v14.i32[1];
  v19 = (const float *)(v13 + v12.i32[0]);
  v21 = (uint32x4_t)vld1q_dup_f32(v19);
  v20 = (const float *)((char *)v19 + v15);
  v22 = (int)v18 + (uint64_t)v16;
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  v23 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v24 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v23);
  v25 = (const float *)(v13 + v17);
  v27 = (uint32x4_t)vld1q_dup_f32(v25);
  v26 = (const float *)((char *)v25 + v15);
  v28 = (const float *)(v13 + v18);
  v30 = (uint32x4_t)vld1q_dup_f32(v28);
  v29 = (const float *)((char *)v28 + v15);
  v31 = (const float *)(v13 + v22);
  v33 = (uint32x4_t)vld1q_dup_f32(v31);
  v32 = (const float *)((char *)v31 + v15);
  v34 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v23);
  v35 = (uint32x4_t)vld1q_dup_f32(v20);
  v36 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v23);
  v37 = (uint32x4_t)vld1q_dup_f32(v26);
  v38 = (uint32x4_t)vld1q_dup_f32(v29);
  v39 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v38, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v23);
  v40 = (uint32x4_t)vld1q_dup_f32(v32);
  v41 = vsubq_f32(v9, vrndq_f32(v9));
  v42 = vmlaq_n_f32(v24, vmlaq_f32(vnegq_f32(v24), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v41.f32[0]);
  v43 = vmlaq_n_f32(v36, vmlaq_f32(vnegq_f32(v36), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v41.f32[0]);
  v44 = vmlaq_lane_f32(v42, vmlaq_n_f32(vsubq_f32(v34, v42), vmlaq_f32(vnegq_f32(v34), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v41.f32[0]), *(float32x2_t *)v41.f32, 1);
  v45 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_laneq_f32(v44, vmlaq_lane_f32(vsubq_f32(v43, v44), vmlaq_n_f32(vsubq_f32(v39, v43), vmlaq_f32(vnegq_f32(v39), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v40, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v41.f32[0]), *(float32x2_t *)v41.f32, 1), v41, 2));
  *(_QWORD *)&result = vextq_s8(v45, v45, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E1194(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  const float *v20;
  uint32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  const float *v24;
  const float *v25;
  uint32x4_t v26;
  const float *v27;
  const float *v28;
  uint32x4_t v29;
  const float *v30;
  const float *v31;
  uint32x4_t v32;
  float32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  uint32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int8x16_t v48;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vcgeq_f32(v2, _Q1), (int8x16_t)vcltzq_f32(v2))) & 0x80000000) != 0)
    return 0.0;
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, v2);
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(int32x4_t *)(a1 + 32);
  v13 = (int8x16_t)vmulq_s32(v12, v10);
  *(int32x2_t *)v13.i8 = vadd_s32(*(int32x2_t *)v13.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  v13.i32[0] = vadd_s32(*(int32x2_t *)v13.i8, vdup_lane_s32(*(int32x2_t *)v13.i8, 1)).u32[0];
  v14 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v16 = v13.i32[0] + (uint64_t)v14.i32[0];
  v17 = v13.i32[0] + (uint64_t)v14.i32[1];
  v18 = (int)v17 + (uint64_t)v14.i32[0];
  v19 = (const float *)(v11 + v13.i32[0]);
  v21 = (uint32x4_t)vld1q_dup_f32(v19);
  v20 = (const float *)((char *)v19 + v15);
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v23 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v24 = (const float *)(v11 + v16);
  v26 = (uint32x4_t)vld1q_dup_f32(v24);
  v25 = (const float *)((char *)v24 + v15);
  v27 = (const float *)(v11 + v17);
  v29 = (uint32x4_t)vld1q_dup_f32(v27);
  v28 = (const float *)((char *)v27 + v15);
  v30 = (const float *)(v11 + v18);
  v32 = (uint32x4_t)vld1q_dup_f32(v30);
  v31 = (const float *)((char *)v30 + v15);
  v33 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v34 = (uint32x4_t)vld1q_dup_f32(v20);
  v35 = (uint32x4_t)vld1q_dup_f32(v25);
  v36 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v37 = (uint32x4_t)vld1q_dup_f32(v28);
  v38 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v39 = (uint32x4_t)vld1q_dup_f32(v31);
  v40 = vsubq_f32(v9, vrndq_f32(v9));
  v41 = vmlaq_n_f32(v23, vmlaq_f32(vnegq_f32(v23), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]);
  v42 = vmlaq_n_f32(v36, vmlaq_f32(vnegq_f32(v36), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]);
  v43 = vmlaq_lane_f32(v41, vmlaq_n_f32(vsubq_f32(v33, v41), vmlaq_f32(vnegq_f32(v33), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]), *(float32x2_t *)v40.f32, 1);
  v44 = vmlaq_laneq_f32(v43, vmlaq_lane_f32(vsubq_f32(v42, v43), vmlaq_n_f32(vsubq_f32(v38, v42), vmlaq_f32(vnegq_f32(v38), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v39, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]), *(float32x2_t *)v40.f32, 1), v40, 2);
  v45 = vmulq_f32(v44, v44);
  v46 = vcgeq_f32(v44, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v46.i32[3] = 0;
  v47 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v46), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v44), v45, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v44)), vmulq_f32(v45, v45), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v44), v45,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v44))), (int8x16_t)vmulq_f32(v44, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v47.i32[3] = v44.i32[3];
  v48 = (int8x16_t)vrev64q_s32(v47);
  *(_QWORD *)&result = vextq_s8(v48, v48, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E13E4(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  unsigned int v26;
  int v27;
  int v28;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  unsigned __int16 *v43;
  unsigned int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  int v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  int v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  int v62;
  int v63;
  BOOL v64;
  int v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  double result;

  v9 = vsubq_f32(a2, a1[5]);
  v9.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v14 = a1[1];
  v15 = vmulq_f32(*a1, vminnmq_f32(vmaxnmq_f32(v9, (float32x4_t)0), _Q1));
  v16 = vminq_s32(vcvtq_s32_f32(v15), (int32x4_t)v14);
  v17 = a1[4].i64[0];
  v18 = a1[2];
  v20 = (float32x4_t)vmulq_s32((int32x4_t)v18, v16);
  v19 = (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL);
  *(int32x2_t *)v20.f32 = vadd_s32(*(int32x2_t *)v20.f32, *(int32x2_t *)v19.f32);
  *(int32x2_t *)v19.f32 = vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
  *(int32x2_t *)v20.f32 = vadd_s32(*(int32x2_t *)v20.f32, *(int32x2_t *)v19.f32);
  v21 = (float32x4_t)vandq_s8((int8x16_t)v18, (int8x16_t)vcgtq_s32((int32x4_t)v14, v16));
  v22 = v20.i32[0] + (uint64_t)v21.i32[0];
  v23 = v20.i32[0] + (uint64_t)v21.i32[1];
  v24 = (int)v23 + (uint64_t)v21.i32[0];
  v25 = (unsigned __int16 *)(v17 + v20.i32[0]);
  v26 = *v25;
  v27 = (v26 >> 10) & 0x1F;
  if (v27 == 31)
    v28 = 2139095040;
  else
    v28 = (v26 >> 10) & 0x1F;
  if (v27)
    _ZF = v27 == 31;
  else
    _ZF = 1;
  if (_ZF)
    v30 = v28;
  else
    v30 = (v27 << 23) + 939524096;
  v31 = v17 + v22;
  v32 = *(unsigned __int16 *)(v17 + v22);
  v33 = (v32 >> 10) & 0x1F;
  if (v33 == 31)
    v34 = 2139095040;
  else
    v34 = (v32 >> 10) & 0x1F;
  if (v33)
    v35 = v33 == 31;
  else
    v35 = 1;
  if (v35)
    v36 = v34;
  else
    v36 = (v33 << 23) + 939524096;
  v37 = v17 + v23;
  v38 = *(unsigned __int16 *)(v17 + v23);
  v39 = (v38 >> 10) & 0x1F;
  if (v39 == 31)
    v40 = 2139095040;
  else
    v40 = (v38 >> 10) & 0x1F;
  if (v39)
    v41 = v39 == 31;
  else
    v41 = 1;
  if (v41)
    v42 = v40;
  else
    v42 = (v39 << 23) + 939524096;
  v43 = (unsigned __int16 *)(v17 + v24);
  v44 = *v43;
  v45 = (v44 >> 10) & 0x1F;
  if (v45 == 31)
    v46 = 2139095040;
  else
    v46 = (v44 >> 10) & 0x1F;
  if (v45)
    v47 = v45 == 31;
  else
    v47 = 1;
  if (v47)
    v48 = v46;
  else
    v48 = (v45 << 23) + 939524096;
  v49 = *(unsigned __int16 *)((char *)v25 + v21.i32[2]);
  v50 = (v49 >> 10) & 0x1F;
  if (v50 == 31)
    v51 = 2139095040;
  else
    v51 = (v49 >> 10) & 0x1F;
  if (v50)
    v52 = v50 == 31;
  else
    v52 = 1;
  if (!v52)
    v51 = (v50 << 23) + 939524096;
  v53 = *(unsigned __int16 *)(v31 + v21.i32[2]);
  v54 = (v53 >> 10) & 0x1F;
  if (v54 == 31)
    v55 = 2139095040;
  else
    v55 = (v53 >> 10) & 0x1F;
  if (v54)
    v56 = v54 == 31;
  else
    v56 = 1;
  if (!v56)
    v55 = (v54 << 23) + 939524096;
  v57 = *(unsigned __int16 *)(v37 + v21.i32[2]);
  v58 = (v57 >> 10) & 0x1F;
  if (v58 == 31)
    v59 = 2139095040;
  else
    v59 = (v57 >> 10) & 0x1F;
  if (v58)
    v60 = v58 == 31;
  else
    v60 = 1;
  if (!v60)
    v59 = (v58 << 23) + 939524096;
  v61 = *(unsigned __int16 *)((char *)v43 + v21.i32[2]);
  v62 = (v61 >> 10) & 0x1F;
  if (v62 == 31)
    v63 = 2139095040;
  else
    v63 = (v61 >> 10) & 0x1F;
  if (v62)
    v64 = v62 == 31;
  else
    v64 = 1;
  if (v64)
    v65 = v63;
  else
    v65 = (v62 << 23) + 939524096;
  v21.i32[0] = v59 | (v57 << 16) & 0x80000000 | (v57 >> 7) & 7 | (8 * (v57 & 0x3FF)) & 0x1FFF | ((v57 & 0x3FF) << 13);
  v14.i32[0] = v55 | (v53 << 16) & 0x80000000 | (v53 >> 7) & 7 | (8 * (v53 & 0x3FF)) & 0x1FFF | ((v53 & 0x3FF) << 13);
  v18.i32[0] = v51 | (v49 << 16) & 0x80000000 | (v49 >> 7) & 7 | (8 * (v49 & 0x3FF)) & 0x1FFF | ((v49 & 0x3FF) << 13);
  v20.i32[0] = v48 | (v44 << 16) & 0x80000000 | (v44 >> 7) & 7 | (8 * (v44 & 0x3FF)) & 0x1FFF | ((v44 & 0x3FF) << 13);
  v19.i32[0] = v42 | (v38 << 16) & 0x80000000 | (v38 >> 7) & 7 | (8 * (v38 & 0x3FF)) & 0x1FFF | ((v38 & 0x3FF) << 13);
  a8.i32[0] = v36 | (v32 << 16) & 0x80000000 | (v32 >> 7) & 7 | (8 * (v32 & 0x3FF)) & 0x1FFF | ((v32 & 0x3FF) << 13);
  a9.i32[0] = v30 | (v26 << 16) & 0x80000000 | (v26 >> 7) & 7 | (8 * (v26 & 0x3FF)) & 0x1FFF | ((v26 & 0x3FF) << 13);
  v66 = vsubq_f32(v15, vrndq_f32(v15));
  v67 = vmlaq_f32(a9, v66, vsubq_f32(a8, a9));
  a8.i32[0] = v65 | (v61 << 16) & 0x80000000 | (v61 >> 7) & 7 | (8 * (v61 & 0x3FF)) & 0x1FFF | ((v61 & 0x3FF) << 13);
  v68 = vmlaq_f32(v18, v66, vsubq_f32(v14, v18));
  v69 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1);
  v70 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 0), v69, vmlaq_f32(vsubq_f32(v19, v67), v66, vsubq_f32(v20, v19)).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v70, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 0), v70), v69, vmlaq_f32(vsubq_f32(v21, v68), v66, vsubq_f32(a8, v21)).f32[0]), v66, 2).u64[0];
  return result;
}

double sub_1B17E16EC(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int32 *v26;
  float *v27;
  __int32 *v28;
  float *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  double result;

  v9 = vsubq_f32(a2, a1[5]);
  v9.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v15 = a1[1];
  v16 = vmulq_f32(*a1, vminnmq_f32(vmaxnmq_f32(v9, (float32x4_t)0), _Q1));
  v17 = vminq_s32(vcvtq_s32_f32(v16), (int32x4_t)v15);
  v18 = a1[4].i64[0];
  v19 = a1[2];
  v20 = (float32x4_t)vmulq_s32((int32x4_t)v19, v17);
  v21 = (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL);
  *(int32x2_t *)v20.f32 = vadd_s32(*(int32x2_t *)v20.f32, *(int32x2_t *)v21.f32);
  *(int32x2_t *)v21.f32 = vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
  v22 = (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_s32((int32x4_t)v15, v17));
  *(int32x2_t *)v15.f32 = vadd_s32(*(int32x2_t *)v20.f32, *(int32x2_t *)v21.f32);
  v23 = v15.i32[0] + (uint64_t)v22.i32[0];
  v24 = v15.i32[0] + (uint64_t)v22.i32[1];
  v25 = (int)v24 + (uint64_t)v22.i32[0];
  v26 = (__int32 *)(v18 + v15.i32[0]);
  v22.i32[0] = *v26;
  v27 = (float *)(v18 + v23);
  v28 = (__int32 *)(v18 + v24);
  v19.i32[0] = *v28;
  v29 = (float *)(v18 + v25);
  v20.i32[0] = *(__int32 *)((char *)v26 + v22.i32[2]);
  v21.f32[0] = *(float *)((char *)v27 + v22.i32[2]);
  a8.i32[0] = *(__int32 *)((char *)v28 + v22.i32[2]);
  a9.f32[0] = *(float *)((char *)v29 + v22.i32[2]);
  v30 = vsubq_f32(v16, vrndq_f32(v16));
  v16.f32[0] = *v27 - *(float *)v26;
  v31 = vmlaq_f32(v22, v30, v16);
  v15.f32[0] = *v29 - *(float *)v28;
  v21.f32[0] = v21.f32[0] - v20.f32[0];
  v32 = vmlaq_f32(v20, v30, v21);
  a9.f32[0] = a9.f32[0] - a8.f32[0];
  v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1);
  v34 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 0), v33, vmlaq_f32(vsubq_f32(v19, v31), v30, v15).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v34, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 0), v34), v33, vmlaq_f32(vsubq_f32(a8, v32), v30, a9).f32[0]), v30, 2).u64[0];
  return result;
}

double sub_1B17E17E0(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint16x4_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  uint16x4_t *v25;
  int8x16_t v26;
  float32x4_t v27;
  uint16x4_t *v28;
  int8x16_t v29;
  float32x4_t v30;
  uint16x4_t *v31;
  int8x16_t v32;
  float32x4_t v33;
  int16x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(v2, (float32x4_t)0), _Q1));
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(int32x4_t *)(a1 + 32);
  v13 = (int8x16_t)vmulq_s32(v12, v10);
  *(int32x2_t *)v13.i8 = vadd_s32(*(int32x2_t *)v13.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  v14 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v8.i32[0] = vadd_s32(*(int32x2_t *)v13.i8, vdup_lane_s32(*(int32x2_t *)v13.i8, 1)).u32[0];
  v16 = v8.i32[0] + (uint64_t)v14.i32[0];
  v17 = v8.i32[0] + (uint64_t)v14.i32[1];
  v18 = (int)v17 + (uint64_t)v14.i32[0];
  v19 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v20 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v21 = (uint16x4_t *)(v11 + v8.i32[0]);
  v22.i64[0] = 0x8000000080000000;
  v22.i64[1] = 0x8000000080000000;
  v23 = (int8x16_t)vshll_n_u16(*v21, 0xDuLL);
  v8.i64[0] = 0x3800000038000000;
  v8.i64[1] = 0x3800000038000000;
  v24 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v23, v20), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v21), v22), vandq_s8(v23, v19))), v8);
  v25 = (uint16x4_t *)(v11 + v16);
  v26 = (int8x16_t)vshll_n_u16(*v25, 0xDuLL);
  v27 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v26, v20), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v25), v22), vandq_s8(v26, v19))), v8);
  v28 = (uint16x4_t *)(v11 + v17);
  v29 = (int8x16_t)vshll_n_u16(*v28, 0xDuLL);
  v30 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v29, v20), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v28), v22), vandq_s8(v29, v19))), v8);
  v31 = (uint16x4_t *)(v11 + v18);
  v32 = (int8x16_t)vshll_n_u16(*v31, 0xDuLL);
  v33 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v32, v20), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v31), v22), vandq_s8(v32, v19))), v8);
  v34 = *(int16x4_t *)((char *)v21 + v15);
  v35 = vandq_s8((int8x16_t)vmovl_s16(v34), v22);
  v36 = (int8x16_t)vshll_n_u16((uint16x4_t)v34, 0xDuLL);
  v37 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v36, v20), vorrq_s8(v35, vandq_s8(v36, v19))), v8);
  *(uint16x4_t *)v35.i8 = *(uint16x4_t *)((char *)v25 + v15);
  v38 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v35.i8), v22);
  v39 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v35.i8, 0xDuLL);
  v40 = (int32x4_t)vorrq_s8(vandq_s8(v39, v20), vorrq_s8(v38, vandq_s8(v39, v19)));
  *(uint16x4_t *)v38.i8 = *(uint16x4_t *)((char *)v28 + v15);
  v41 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v38.i8), v22);
  v42 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v38.i8, 0xDuLL);
  v43 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v42, v20), vorrq_s8(v41, vandq_s8(v42, v19))), v8);
  *(uint16x4_t *)v41.i8 = *(uint16x4_t *)((char *)v31 + v15);
  v44 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v41.i8), v22);
  v45 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v41.i8, 0xDuLL);
  v46 = vsubq_f32(v9, vrndq_f32(v9));
  v47 = vmlaq_n_f32(v24, vsubq_f32(v27, v24), v46.f32[0]);
  v48 = vmlaq_n_f32(v37, vsubq_f32((float32x4_t)vaddq_s32(v40, v8), v37), v46.f32[0]);
  v49 = vmlaq_lane_f32(v47, vmlaq_n_f32(vsubq_f32(v30, v47), vsubq_f32(v33, v30), v46.f32[0]), *(float32x2_t *)v46.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v49, vmlaq_lane_f32(vsubq_f32(v48, v49), vmlaq_n_f32(vsubq_f32(v43, v48), vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v45, v20), vorrq_s8(v44, vandq_s8(v45, v19))), v8), v43), v46.f32[0]), *(float32x2_t *)v46.f32, 1), v46, 2).u64[0];
  return result;
}

double sub_1B17E19E0(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(v2, (float32x4_t)0), _Q1));
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(int32x4_t *)(a1 + 32);
  v13 = (int8x16_t)vmulq_s32(v12, v10);
  *(int32x2_t *)v13.i8 = vadd_s32(*(int32x2_t *)v13.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  v14 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v8.i32[0] = vadd_s32(*(int32x2_t *)v13.i8, vdup_lane_s32(*(int32x2_t *)v13.i8, 1)).u32[0];
  v16 = v8.i32[0] + (uint64_t)v14.i32[1];
  v17 = (int)v16 + (uint64_t)v14.i32[0];
  v18 = (float32x4_t *)(v11 + v8.i32[0]);
  v19 = (float32x4_t *)(v11 + v8.i32[0] + (uint64_t)v14.i32[0]);
  v20 = (float32x4_t *)(v11 + v16);
  v21 = (float32x4_t *)(v11 + v17);
  v22 = *(float32x4_t *)((char *)v18 + v14.i32[2]);
  v23 = *(float32x4_t *)((char *)v20 + v14.i32[2]);
  v24 = *(float32x4_t *)((char *)v21 + v14.i32[2]);
  v25 = vsubq_f32(v9, vrndq_f32(v9));
  v26 = vmlaq_n_f32(*v18, vsubq_f32(*v19, *v18), v25.f32[0]);
  v27 = vmlaq_n_f32(v22, vsubq_f32(*(float32x4_t *)((char *)v19 + v15), v22), v25.f32[0]);
  v28 = vmlaq_lane_f32(v26, vmlaq_n_f32(vsubq_f32(*v20, v26), vsubq_f32(*v21, *v20), v25.f32[0]), *(float32x2_t *)v25.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v28, vmlaq_lane_f32(vsubq_f32(v27, v28), vmlaq_n_f32(vsubq_f32(v23, v27), vsubq_f32(v24, v23), v25.f32[0]), *(float32x2_t *)v25.f32, 1), v25, 2).u64[0];
  return result;
}

double sub_1B17E1AC8(uint64_t a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  unsigned int v10;
  float32x4_t v11;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  __int8 *v27;
  __int8 *v28;
  __int8 *v29;
  __int8 *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  double result;

  v11 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v11.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v17 = *(float32x4_t *)(a1 + 16);
  v18 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(v11, (float32x4_t)0), _Q1));
  v19 = vminq_s32(vcvtq_s32_f32(v18), (int32x4_t)v17);
  v20 = *(_QWORD *)(a1 + 64);
  v21 = *(int32x4_t *)(a1 + 32);
  v22 = (float32x4_t)vmulq_s32(v21, v19);
  v23 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  *(int32x2_t *)v23.f32 = vdup_lane_s32(*(int32x2_t *)v22.f32, 1);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  v24 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_s32((int32x4_t)v17, v19));
  v25 = v22.i32[0] + (uint64_t)v24.i32[1];
  v26 = (int)v25 + (uint64_t)v24.i32[0];
  v27 = (__int8 *)(v20 + v22.i32[0]);
  v17.i8[0] = *v27;
  v17.f32[0] = (float)v17.u32[0] * 0.0039216;
  v28 = (__int8 *)(v20 + v22.i32[0] + (uint64_t)v24.i32[0]);
  v21.i8[0] = *v28;
  v29 = (__int8 *)(v20 + v25);
  v22.i8[0] = *v29;
  v22.f32[0] = (float)v22.u32[0] * 0.0039216;
  v30 = (__int8 *)(v20 + v26);
  v23.i8[0] = *v30;
  a8.i8[0] = v27[v24.i32[2]];
  a8.f32[0] = (float)a8.u32[0] * 0.0039216;
  a9.i8[0] = v28[v24.i32[2]];
  v9.i8[0] = v29[v24.i32[2]];
  v9.f32[0] = (float)v9.u32[0] * 0.0039216;
  LOBYTE(v10) = v30[v24.i32[2]];
  v31 = vsubq_f32(v18, vrndq_f32(v18));
  v18.f32[0] = -(float)(v17.f32[0] - (float)((float)v21.u32[0] * 0.0039216));
  v32 = vmlaq_f32(v17, v31, v18);
  v23.f32[0] = -(float)(v22.f32[0] - (float)((float)v23.u32[0] * 0.0039216));
  a9.f32[0] = -(float)(a8.f32[0] - (float)((float)a9.u32[0] * 0.0039216));
  v33 = vmlaq_f32(a8, v31, a9);
  v24.f32[0] = -(float)(v9.f32[0] - (float)((float)v10 * 0.0039216));
  v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1);
  v35 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 0), v34, vmlaq_f32(vsubq_f32(v22, v32), v31, v23).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v35, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0), v35), v34, vmlaq_f32(vsubq_f32(v9, v33), v31, v24).f32[0]), v31, 2).u64[0];
  return result;
}

double sub_1B17E1BF4(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  float32x4_t v9;
  unsigned int v10;
  float32x4_t v11;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int8 *v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  double result;

  v11 = vsubq_f32(a2, a1[5]);
  v11.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v17 = a1[1];
  v18 = vmulq_f32(*a1, vminnmq_f32(vmaxnmq_f32(v11, (float32x4_t)0), _Q1));
  v19 = vminq_s32(vcvtq_s32_f32(v18), (int32x4_t)v17);
  v20 = a1[4].i64[0];
  v21 = a1[2];
  v22 = (float32x4_t)vmulq_s32((int32x4_t)v21, v19);
  v23 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  *(int32x2_t *)v23.f32 = vdup_lane_s32(*(int32x2_t *)v22.f32, 1);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  v24 = (float32x4_t)vandq_s8((int8x16_t)v21, (int8x16_t)vcgtq_s32((int32x4_t)v17, v19));
  v25 = v22.i32[0] + (uint64_t)v24.i32[0];
  v26 = v22.i32[0] + (uint64_t)v24.i32[1];
  v27 = (int)v26 + (uint64_t)v24.i32[0];
  v28 = (__int8 *)(v20 + v22.i32[0]);
  v24.i8[0] = *v28;
  v24.f32[0] = (float)v24.u32[0];
  v21.f32[0] = v24.f32[0] * 0.0039216;
  v29 = (__int8 *)(v20 + v25);
  v24.i8[0] = *v29;
  v30 = (__int8 *)(v20 + v26);
  v22.i8[0] = *v30;
  v22.f32[0] = (float)v22.u32[0] * 0.0039216;
  v31 = (__int8 *)(v20 + v27);
  v23.i8[0] = *v31;
  a8.i8[0] = v28[v24.i32[2]];
  a8.f32[0] = (float)a8.u32[0] * 0.0039216;
  a9.i8[0] = v29[v24.i32[2]];
  v9.i8[0] = v30[v24.i32[2]];
  LOBYTE(v10) = v31[v24.i32[2]];
  v9.f32[0] = (float)v9.u32[0] * 0.0039216;
  v32 = vsubq_f32(v18, vrndq_f32(v18));
  v24.f32[0] = -(float)(v21.f32[0] - (float)((float)v24.u32[0] * 0.0039216));
  v33 = vmlaq_f32(v21, v32, v24);
  a9.f32[0] = -(float)(a8.f32[0] - (float)((float)a9.u32[0] * 0.0039216));
  v34 = vmlaq_f32(a8, v32, a9);
  v23.f32[0] = -(float)(v22.f32[0] - (float)((float)v23.u32[0] * 0.0039216));
  v17.f32[0] = -(float)(v9.f32[0] - (float)((float)v10 * 0.0039216));
  v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1);
  v36 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0), v35, vmlaq_f32(vsubq_f32(v22, v33), v32, v23).f32[0]);
  v37 = vmlaq_laneq_f32(v36, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0), v36), v35, vmlaq_f32(vsubq_f32(v9, v34), v32, v17).f32[0]), v32, 2);
  v38 = vmulq_f32(v37, v37);
  v39 = vcgeq_f32(v37, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v39.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v39), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v37), v38, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v37)), vmulq_f32(v38, v38), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v37), v38,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v37))), (int8x16_t)vmulq_f32(v37, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E1DD4(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  const float *v20;
  uint32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  const float *v24;
  const float *v25;
  uint32x4_t v26;
  const float *v27;
  const float *v28;
  uint32x4_t v29;
  const float *v30;
  const float *v31;
  uint32x4_t v32;
  float32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  uint32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(v2, (float32x4_t)0), _Q1));
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(int32x4_t *)(a1 + 32);
  v13 = (int8x16_t)vmulq_s32(v12, v10);
  *(int32x2_t *)v13.i8 = vadd_s32(*(int32x2_t *)v13.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  v13.i32[0] = vadd_s32(*(int32x2_t *)v13.i8, vdup_lane_s32(*(int32x2_t *)v13.i8, 1)).u32[0];
  v14 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v16 = v13.i32[0] + (uint64_t)v14.i32[0];
  v17 = v13.i32[0] + (uint64_t)v14.i32[1];
  v18 = (int)v17 + (uint64_t)v14.i32[0];
  v19 = (const float *)(v11 + v13.i32[0]);
  v21 = (uint32x4_t)vld1q_dup_f32(v19);
  v20 = (const float *)((char *)v19 + v15);
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v23 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v24 = (const float *)(v11 + v16);
  v26 = (uint32x4_t)vld1q_dup_f32(v24);
  v25 = (const float *)((char *)v24 + v15);
  v27 = (const float *)(v11 + v17);
  v29 = (uint32x4_t)vld1q_dup_f32(v27);
  v28 = (const float *)((char *)v27 + v15);
  v30 = (const float *)(v11 + v18);
  v32 = (uint32x4_t)vld1q_dup_f32(v30);
  v31 = (const float *)((char *)v30 + v15);
  v33 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v34 = (uint32x4_t)vld1q_dup_f32(v20);
  v35 = (uint32x4_t)vld1q_dup_f32(v25);
  v36 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v37 = (uint32x4_t)vld1q_dup_f32(v28);
  v38 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v39 = (uint32x4_t)vld1q_dup_f32(v31);
  v40 = vsubq_f32(v9, vrndq_f32(v9));
  v41 = vmlaq_n_f32(v23, vmlaq_f32(vnegq_f32(v23), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]);
  v42 = vmlaq_n_f32(v36, vmlaq_f32(vnegq_f32(v36), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]);
  v43 = vmlaq_lane_f32(v41, vmlaq_n_f32(vsubq_f32(v33, v41), vmlaq_f32(vnegq_f32(v33), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]), *(float32x2_t *)v40.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v43, vmlaq_lane_f32(vsubq_f32(v42, v43), vmlaq_n_f32(vsubq_f32(v38, v42), vmlaq_f32(vnegq_f32(v38), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v39, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]), *(float32x2_t *)v40.f32, 1), v40, 2).u64[0];
  return result;
}

double sub_1B17E1F54(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  const float *v20;
  uint32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  const float *v24;
  const float *v25;
  uint32x4_t v26;
  const float *v27;
  const float *v28;
  uint32x4_t v29;
  float32x4_t v30;
  const float *v31;
  const float *v32;
  uint32x4_t v33;
  uint32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(v2, (float32x4_t)0), _Q1));
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(int32x4_t *)(a1 + 32);
  v13 = (int8x16_t)vmulq_s32(v12, v10);
  *(int32x2_t *)v13.i8 = vadd_s32(*(int32x2_t *)v13.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  v13.i32[0] = vadd_s32(*(int32x2_t *)v13.i8, vdup_lane_s32(*(int32x2_t *)v13.i8, 1)).u32[0];
  v14 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v16 = v13.i32[0] + (uint64_t)v14.i32[0];
  v17 = v13.i32[0] + (uint64_t)v14.i32[1];
  v18 = (int)v17 + (uint64_t)v14.i32[0];
  v19 = (const float *)(v11 + v13.i32[0]);
  v21 = (uint32x4_t)vld1q_dup_f32(v19);
  v20 = (const float *)((char *)v19 + v15);
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v23 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v24 = (const float *)(v11 + v16);
  v26 = (uint32x4_t)vld1q_dup_f32(v24);
  v25 = (const float *)((char *)v24 + v15);
  v27 = (const float *)(v11 + v17);
  v29 = (uint32x4_t)vld1q_dup_f32(v27);
  v28 = (const float *)((char *)v27 + v15);
  v30 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v31 = (const float *)(v11 + v18);
  v33 = (uint32x4_t)vld1q_dup_f32(v31);
  v32 = (const float *)((char *)v31 + v15);
  v34 = (uint32x4_t)vld1q_dup_f32(v20);
  v35 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v36 = (uint32x4_t)vld1q_dup_f32(v25);
  v37 = (uint32x4_t)vld1q_dup_f32(v28);
  v38 = (uint32x4_t)vld1q_dup_f32(v32);
  v39 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v22);
  v40 = vsubq_f32(v9, vrndq_f32(v9));
  v41 = vmlaq_n_f32(v23, vmlaq_f32(vnegq_f32(v23), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]);
  v42 = vmlaq_n_f32(v35, vmlaq_f32(vnegq_f32(v35), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v36, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]);
  v43 = vmlaq_lane_f32(v41, vmlaq_n_f32(vsubq_f32(v30, v41), vmlaq_f32(vnegq_f32(v30), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]), *(float32x2_t *)v40.f32, 1);
  v44 = vmlaq_laneq_f32(v43, vmlaq_lane_f32(vsubq_f32(v42, v43), vmlaq_n_f32(vsubq_f32(v39, v42), vmlaq_f32(vnegq_f32(v39), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v38, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v40.f32[0]), *(float32x2_t *)v40.f32, 1), v40, 2);
  v45 = vmulq_f32(v44, v44);
  v46 = vcgeq_f32(v44, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v46.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v46), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v44), v45, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v44)), vmulq_f32(v45, v45), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v44), v45,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v44))), (int8x16_t)vmulq_f32(v44, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E2188(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  __int32 v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  const float *v20;
  uint32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  const float *v25;
  const float *v26;
  uint32x4_t v27;
  const float *v28;
  const float *v29;
  uint32x4_t v30;
  float32x4_t v31;
  const float *v32;
  const float *v33;
  uint32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  float32x4_t v39;
  uint32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(v2, (float32x4_t)0), _Q1));
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(int32x4_t *)(a1 + 32);
  v13 = (int8x16_t)vmulq_s32(v12, v10);
  *(int32x2_t *)v13.i8 = vadd_s32(*(int32x2_t *)v13.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  v13.i32[0] = vadd_s32(*(int32x2_t *)v13.i8, vdup_lane_s32(*(int32x2_t *)v13.i8, 1)).u32[0];
  v14 = vandq_s8((int8x16_t)v12, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v16 = v14.i32[0];
  v17 = v13.i32[0] + (uint64_t)v14.i32[0];
  v18 = v13.i32[0] + (uint64_t)v14.i32[1];
  v19 = (const float *)(v11 + v13.i32[0]);
  v21 = (uint32x4_t)vld1q_dup_f32(v19);
  v20 = (const float *)((char *)v19 + v15);
  v22 = (int)v18 + (uint64_t)v16;
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v23 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v24 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v23);
  v25 = (const float *)(v11 + v17);
  v27 = (uint32x4_t)vld1q_dup_f32(v25);
  v26 = (const float *)((char *)v25 + v15);
  v28 = (const float *)(v11 + v18);
  v30 = (uint32x4_t)vld1q_dup_f32(v28);
  v29 = (const float *)((char *)v28 + v15);
  v31 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v23);
  v32 = (const float *)(v11 + v22);
  v34 = (uint32x4_t)vld1q_dup_f32(v32);
  v33 = (const float *)((char *)v32 + v15);
  v35 = (uint32x4_t)vld1q_dup_f32(v20);
  v36 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v23);
  v37 = (uint32x4_t)vld1q_dup_f32(v26);
  v38 = (uint32x4_t)vld1q_dup_f32(v29);
  v39 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v38, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12)), v23);
  v40 = (uint32x4_t)vld1q_dup_f32(v33);
  v41 = vsubq_f32(v9, vrndq_f32(v9));
  v42 = vmlaq_n_f32(v24, vmlaq_f32(vnegq_f32(v24), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v41.f32[0]);
  v43 = vmlaq_n_f32(v36, vmlaq_f32(vnegq_f32(v36), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v41.f32[0]);
  v44 = vmlaq_lane_f32(v42, vmlaq_n_f32(vsubq_f32(v31, v42), vmlaq_f32(vnegq_f32(v31), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v41.f32[0]), *(float32x2_t *)v41.f32, 1);
  v45 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_laneq_f32(v44, vmlaq_lane_f32(vsubq_f32(v43, v44), vmlaq_n_f32(vsubq_f32(v39, v43), vmlaq_f32(vnegq_f32(v39), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v40, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v12))), v41.f32[0]), *(float32x2_t *)v41.f32, 1), v41, 2));
  *(_QWORD *)&result = vextq_s8(v45, v45, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E2310(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  __int32 v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  const float *v20;
  uint32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  const float *v25;
  const float *v26;
  uint32x4_t v27;
  const float *v28;
  const float *v29;
  uint32x4_t v30;
  const float *v31;
  const float *v32;
  uint32x4_t v33;
  float32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  float32x4_t v39;
  uint32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int8x16_t v49;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  __asm { FMOV            V1.4S, #1.0 }
  v8 = *(int32x4_t *)(a1 + 16);
  v9 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vmaxnmq_f32(v2, (float32x4_t)0), _Q1));
  v10 = vminq_s32(vcvtq_s32_f32(v9), v8);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = (int8x16_t)vmulq_s32(v11, v10);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v13 = *(_QWORD *)(a1 + 64);
  v12.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v14 = vandq_s8((int8x16_t)v11, (int8x16_t)vcgtq_s32(v8, v10));
  v15 = v14.i32[2];
  v16 = v14.i32[0];
  v17 = v12.i32[0] + (uint64_t)v14.i32[0];
  v18 = v12.i32[0] + (uint64_t)v14.i32[1];
  v19 = (const float *)(v13 + v12.i32[0]);
  v21 = (uint32x4_t)vld1q_dup_f32(v19);
  v20 = (const float *)((char *)v19 + v15);
  v22 = (int)v18 + (uint64_t)v16;
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  v23 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v24 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v23);
  v25 = (const float *)(v13 + v17);
  v27 = (uint32x4_t)vld1q_dup_f32(v25);
  v26 = (const float *)((char *)v25 + v15);
  v28 = (const float *)(v13 + v18);
  v30 = (uint32x4_t)vld1q_dup_f32(v28);
  v29 = (const float *)((char *)v28 + v15);
  v31 = (const float *)(v13 + v22);
  v33 = (uint32x4_t)vld1q_dup_f32(v31);
  v32 = (const float *)((char *)v31 + v15);
  v34 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v23);
  v35 = (uint32x4_t)vld1q_dup_f32(v20);
  v36 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v23);
  v37 = (uint32x4_t)vld1q_dup_f32(v26);
  v38 = (uint32x4_t)vld1q_dup_f32(v29);
  v39 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v38, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11)), v23);
  v40 = (uint32x4_t)vld1q_dup_f32(v32);
  v41 = vsubq_f32(v9, vrndq_f32(v9));
  v42 = vmlaq_n_f32(v24, vmlaq_f32(vnegq_f32(v24), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v41.f32[0]);
  v43 = vmlaq_n_f32(v36, vmlaq_f32(vnegq_f32(v36), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v41.f32[0]);
  v44 = vmlaq_lane_f32(v42, vmlaq_n_f32(vsubq_f32(v34, v42), vmlaq_f32(vnegq_f32(v34), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v41.f32[0]), *(float32x2_t *)v41.f32, 1);
  v45 = vmlaq_laneq_f32(v44, vmlaq_lane_f32(vsubq_f32(v43, v44), vmlaq_n_f32(vsubq_f32(v39, v43), vmlaq_f32(vnegq_f32(v39), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v40, (uint32x4_t)xmmword_1B2245E80), (int8x16_t)v11))), v41.f32[0]), *(float32x2_t *)v41.f32, 1), v41, 2);
  v46 = vmulq_f32(v45, v45);
  v47 = vcgeq_f32(v45, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v47.i32[3] = 0;
  v48 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v47), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v45), v46, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v45)), vmulq_f32(v46, v46), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v45), v46,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v45))), (int8x16_t)vmulq_f32(v45, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v48.i32[3] = v45.i32[3];
  v49 = (int8x16_t)vrev64q_s32(v48);
  *(_QWORD *)&result = vextq_s8(v49, v49, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E254C(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  BOOL v38;
  int v39;
  unsigned __int16 *v40;
  unsigned int v41;
  int v42;
  int v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  int v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  int v59;
  int v60;
  BOOL v61;
  int v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  double result;

  v9 = vsubq_f32(a2, a1[5]);
  v9.i32[3] = 0;
  v10 = a1[1];
  v11 = vmulq_f32(*a1, vminnmq_f32(vsubq_f32(v9, vrndmq_f32(v9)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v12 = vminq_s32(vcvtq_s32_f32(v11), (int32x4_t)v10);
  v13 = a1[4].i64[0];
  v15 = a1[2];
  v14 = a1[3];
  v17 = (float32x4_t)vmulq_s32((int32x4_t)v15, v12);
  v16 = (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL);
  *(int32x2_t *)v17.f32 = vadd_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v16.f32);
  *(int32x2_t *)v16.f32 = vdup_lane_s32(*(int32x2_t *)v17.f32, 1);
  *(int32x2_t *)v17.f32 = vadd_s32(*(int32x2_t *)v17.f32, *(int32x2_t *)v16.f32);
  v18 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v10, v12), (int8x16_t)v15, (int8x16_t)v14);
  v19 = v17.i32[0] + (uint64_t)v18.i32[0];
  v20 = v17.i32[0] + (uint64_t)v18.i32[1];
  v21 = (int)v20 + (uint64_t)v18.i32[0];
  v22 = (unsigned __int16 *)(v13 + v17.i32[0]);
  v23 = *v22;
  v24 = (v23 >> 10) & 0x1F;
  if (v24 == 31)
    v25 = 2139095040;
  else
    v25 = (v23 >> 10) & 0x1F;
  if (v24)
    v26 = v24 == 31;
  else
    v26 = 1;
  if (v26)
    v27 = v25;
  else
    v27 = (v24 << 23) + 939524096;
  v28 = v13 + v19;
  v29 = *(unsigned __int16 *)(v13 + v19);
  v30 = (v29 >> 10) & 0x1F;
  if (v30 == 31)
    v31 = 2139095040;
  else
    v31 = (v29 >> 10) & 0x1F;
  if (v30)
    v32 = v30 == 31;
  else
    v32 = 1;
  if (v32)
    v33 = v31;
  else
    v33 = (v30 << 23) + 939524096;
  v34 = v13 + v20;
  v35 = *(unsigned __int16 *)(v13 + v20);
  v36 = (v35 >> 10) & 0x1F;
  if (v36 == 31)
    v37 = 2139095040;
  else
    v37 = (v35 >> 10) & 0x1F;
  if (v36)
    v38 = v36 == 31;
  else
    v38 = 1;
  if (v38)
    v39 = v37;
  else
    v39 = (v36 << 23) + 939524096;
  v40 = (unsigned __int16 *)(v13 + v21);
  v41 = *v40;
  v42 = (v41 >> 10) & 0x1F;
  if (v42 == 31)
    v43 = 2139095040;
  else
    v43 = (v41 >> 10) & 0x1F;
  if (v42)
    v44 = v42 == 31;
  else
    v44 = 1;
  if (v44)
    v45 = v43;
  else
    v45 = (v42 << 23) + 939524096;
  v46 = *(unsigned __int16 *)((char *)v22 + v18.i32[2]);
  v47 = (v46 >> 10) & 0x1F;
  if (v47 == 31)
    v48 = 2139095040;
  else
    v48 = (v46 >> 10) & 0x1F;
  if (v47)
    v49 = v47 == 31;
  else
    v49 = 1;
  if (!v49)
    v48 = (v47 << 23) + 939524096;
  v50 = *(unsigned __int16 *)(v28 + v18.i32[2]);
  v51 = (v50 >> 10) & 0x1F;
  if (v51 == 31)
    v52 = 2139095040;
  else
    v52 = (v50 >> 10) & 0x1F;
  if (v51)
    v53 = v51 == 31;
  else
    v53 = 1;
  if (!v53)
    v52 = (v51 << 23) + 939524096;
  v54 = *(unsigned __int16 *)(v34 + v18.i32[2]);
  v55 = (v54 >> 10) & 0x1F;
  if (v55 == 31)
    v56 = 2139095040;
  else
    v56 = (v54 >> 10) & 0x1F;
  if (v55)
    v57 = v55 == 31;
  else
    v57 = 1;
  if (!v57)
    v56 = (v55 << 23) + 939524096;
  v58 = *(unsigned __int16 *)((char *)v40 + v18.i32[2]);
  v59 = (v58 >> 10) & 0x1F;
  if (v59 == 31)
    v60 = 2139095040;
  else
    v60 = (v58 >> 10) & 0x1F;
  if (v59)
    v61 = v59 == 31;
  else
    v61 = 1;
  if (v61)
    v62 = v60;
  else
    v62 = (v59 << 23) + 939524096;
  v18.i32[0] = v56 | (v54 << 16) & 0x80000000 | (v54 >> 7) & 7 | (8 * (v54 & 0x3FF)) & 0x1FFF | ((v54 & 0x3FF) << 13);
  v10.i32[0] = v52 | (v50 << 16) & 0x80000000 | (v50 >> 7) & 7 | (8 * (v50 & 0x3FF)) & 0x1FFF | ((v50 & 0x3FF) << 13);
  v14.i32[0] = v48 | (v46 << 16) & 0x80000000 | (v46 >> 7) & 7 | (8 * (v46 & 0x3FF)) & 0x1FFF | ((v46 & 0x3FF) << 13);
  v15.i32[0] = v45 | (v41 << 16) & 0x80000000 | (v41 >> 7) & 7 | (8 * (v41 & 0x3FF)) & 0x1FFF | ((v41 & 0x3FF) << 13);
  v17.i32[0] = v39 | (v35 << 16) & 0x80000000 | (v35 >> 7) & 7 | (8 * (v35 & 0x3FF)) & 0x1FFF | ((v35 & 0x3FF) << 13);
  v16.i32[0] = v33 | (v29 << 16) & 0x80000000 | (v29 >> 7) & 7 | (8 * (v29 & 0x3FF)) & 0x1FFF | ((v29 & 0x3FF) << 13);
  a9.i32[0] = v27 | (v23 << 16) & 0x80000000 | (v23 >> 7) & 7 | (8 * (v23 & 0x3FF)) & 0x1FFF | ((v23 & 0x3FF) << 13);
  v63 = vsubq_f32(v11, vrndq_f32(v11));
  v64 = vmlaq_f32(a9, v63, vsubq_f32(v16, a9));
  v16.i32[0] = v62 | (v58 << 16) & 0x80000000 | (v58 >> 7) & 7 | (8 * (v58 & 0x3FF)) & 0x1FFF | ((v58 & 0x3FF) << 13);
  v65 = vmlaq_f32(v14, v63, vsubq_f32(v10, v14));
  v66 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1);
  v67 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 0), v66, vmlaq_f32(vsubq_f32(v17, v64), v63, vsubq_f32(v15, v17)).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v67, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 0), v67), v66, vmlaq_f32(vsubq_f32(v18, v65), v63, vsubq_f32(v16, v18)).f32[0]), v63, 2).u64[0];
  return result;
}

double sub_1B17E2858(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int32 *v22;
  float *v23;
  __int32 *v24;
  float *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  double result;

  v9 = vsubq_f32(a2, a1[5]);
  v9.i32[3] = 0;
  v10 = a1[1];
  v11 = vmulq_f32(*a1, vminnmq_f32(vsubq_f32(v9, vrndmq_f32(v9)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v12 = vminq_s32(vcvtq_s32_f32(v11), (int32x4_t)v10);
  v13 = a1[4].i64[0];
  v15 = a1[2];
  v14 = a1[3];
  v16 = (float32x4_t)vmulq_s32((int32x4_t)v15, v12);
  v17 = (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL);
  *(int32x2_t *)v16.f32 = vadd_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.f32);
  *(int32x2_t *)v17.f32 = vdup_lane_s32(*(int32x2_t *)v16.f32, 1);
  v18 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v10, v12), (int8x16_t)v15, (int8x16_t)v14);
  *(int32x2_t *)v10.f32 = vadd_s32(*(int32x2_t *)v16.f32, *(int32x2_t *)v17.f32);
  v19 = v10.i32[0] + (uint64_t)v18.i32[0];
  v20 = v10.i32[0] + (uint64_t)v18.i32[1];
  v21 = (int)v20 + (uint64_t)v18.i32[0];
  v22 = (__int32 *)(v13 + v10.i32[0]);
  v18.i32[0] = *v22;
  v23 = (float *)(v13 + v19);
  v24 = (__int32 *)(v13 + v20);
  v14.i32[0] = *v24;
  v25 = (float *)(v13 + v21);
  v15.i32[0] = *(__int32 *)((char *)v22 + v18.i32[2]);
  v16.f32[0] = *(float *)((char *)v23 + v18.i32[2]);
  v17.i32[0] = *(__int32 *)((char *)v24 + v18.i32[2]);
  a9.f32[0] = *(float *)((char *)v25 + v18.i32[2]);
  v26 = vsubq_f32(v11, vrndq_f32(v11));
  v11.f32[0] = *v23 - *(float *)v22;
  v27 = vmlaq_f32(v18, v26, v11);
  v10.f32[0] = *v25 - *(float *)v24;
  v16.f32[0] = v16.f32[0] - v15.f32[0];
  v28 = vmlaq_f32(v15, v26, v16);
  a9.f32[0] = a9.f32[0] - v17.f32[0];
  v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1);
  v30 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0), v29, vmlaq_f32(vsubq_f32(v14, v27), v26, v10).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v30, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0), v30), v29, vmlaq_f32(vsubq_f32(v17, v28), v26, a9).f32[0]), v26, 2).u64[0];
  return result;
}

double sub_1B17E2950(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  uint64_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  __int32 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint16x4_t *v16;
  int8x16_t v17;
  float32x4_t v18;
  uint16x4_t *v19;
  int8x16_t v20;
  float32x4_t v21;
  uint16x4_t *v22;
  int8x16_t v23;
  float32x4_t v24;
  uint16x4_t *v25;
  int8x16_t v26;
  float32x4_t v27;
  int16x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3 = *(int32x4_t *)(a1 + 16);
  v4 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(v2, vrndmq_f32(v2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v5 = vminq_s32(vcvtq_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(int32x4_t *)(a1 + 32);
  v8 = (int8x16_t)vmulq_s32(v7, v5);
  *(int32x2_t *)v8.i8 = vadd_s32(*(int32x2_t *)v8.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  v9 = vbslq_s8((int8x16_t)vcgtq_s32(v3, v5), (int8x16_t)v7, *(int8x16_t *)(a1 + 48));
  v10 = v9.i32[2];
  v3.i32[0] = vadd_s32(*(int32x2_t *)v8.i8, vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
  v11 = v3.i32[0] + (uint64_t)v9.i32[0];
  v12 = v3.i32[0] + (uint64_t)v9.i32[1];
  v13 = (int)v12 + (uint64_t)v9.i32[0];
  v14 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v15 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v16 = (uint16x4_t *)(v6 + v3.i32[0]);
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  v17 = (int8x16_t)vshll_n_u16(*v16, 0xDuLL);
  v3.i64[0] = 0x3800000038000000;
  v3.i64[1] = 0x3800000038000000;
  v18 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v17, v15), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v16), v8), vandq_s8(v17, v14))), v3);
  v19 = (uint16x4_t *)(v6 + v11);
  v20 = (int8x16_t)vshll_n_u16(*v19, 0xDuLL);
  v21 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v20, v15), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v19), v8), vandq_s8(v20, v14))), v3);
  v22 = (uint16x4_t *)(v6 + v12);
  v23 = (int8x16_t)vshll_n_u16(*v22, 0xDuLL);
  v24 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v23, v15), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v22), v8), vandq_s8(v23, v14))), v3);
  v25 = (uint16x4_t *)(v6 + v13);
  v26 = (int8x16_t)vshll_n_u16(*v25, 0xDuLL);
  v27 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v26, v15), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v25), v8), vandq_s8(v26, v14))), v3);
  v28 = *(int16x4_t *)((char *)v16 + v10);
  v29 = vandq_s8((int8x16_t)vmovl_s16(v28), v8);
  v30 = (int8x16_t)vshll_n_u16((uint16x4_t)v28, 0xDuLL);
  v31 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v30, v15), vorrq_s8(v29, vandq_s8(v30, v14))), v3);
  *(uint16x4_t *)v29.i8 = *(uint16x4_t *)((char *)v19 + v10);
  v32 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8), v8);
  v33 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v29.i8, 0xDuLL);
  v34 = (int32x4_t)vorrq_s8(vandq_s8(v33, v15), vorrq_s8(v32, vandq_s8(v33, v14)));
  *(uint16x4_t *)v32.i8 = *(uint16x4_t *)((char *)v22 + v10);
  v35 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v32.i8), v8);
  v36 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v32.i8, 0xDuLL);
  v37 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v36, v15), vorrq_s8(v35, vandq_s8(v36, v14))), v3);
  *(uint16x4_t *)v35.i8 = *(uint16x4_t *)((char *)v25 + v10);
  v38 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v35.i8), v8);
  v39 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v35.i8, 0xDuLL);
  v40 = vsubq_f32(v4, vrndq_f32(v4));
  v41 = vmlaq_n_f32(v18, vsubq_f32(v21, v18), v40.f32[0]);
  v42 = vmlaq_n_f32(v31, vsubq_f32((float32x4_t)vaddq_s32(v34, v3), v31), v40.f32[0]);
  v43 = vmlaq_lane_f32(v41, vmlaq_n_f32(vsubq_f32(v24, v41), vsubq_f32(v27, v24), v40.f32[0]), *(float32x2_t *)v40.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v43, vmlaq_lane_f32(vsubq_f32(v42, v43), vmlaq_n_f32(vsubq_f32(v37, v42), vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v39, v15), vorrq_s8(v38, vandq_s8(v39, v14))), v3), v37), v40.f32[0]), *(float32x2_t *)v40.f32, 1), v40, 2).u64[0];
  return result;
}

double sub_1B17E2B54(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  uint64_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  __int32 v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3 = *(int32x4_t *)(a1 + 16);
  v4 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(v2, vrndmq_f32(v2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v5 = vminq_s32(vcvtq_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(int32x4_t *)(a1 + 32);
  v8 = (int8x16_t)vmulq_s32(v7, v5);
  *(int32x2_t *)v8.i8 = vadd_s32(*(int32x2_t *)v8.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  v9 = vbslq_s8((int8x16_t)vcgtq_s32(v3, v5), (int8x16_t)v7, *(int8x16_t *)(a1 + 48));
  v10 = v9.i32[2];
  v3.i32[0] = vadd_s32(*(int32x2_t *)v8.i8, vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
  v11 = v3.i32[0] + (uint64_t)v9.i32[1];
  v12 = (int)v11 + (uint64_t)v9.i32[0];
  v13 = (float32x4_t *)(v6 + v3.i32[0]);
  v14 = (float32x4_t *)(v6 + v3.i32[0] + (uint64_t)v9.i32[0]);
  v15 = (float32x4_t *)(v6 + v11);
  v16 = (float32x4_t *)(v6 + v12);
  v17 = *(float32x4_t *)((char *)v13 + v9.i32[2]);
  v18 = *(float32x4_t *)((char *)v15 + v9.i32[2]);
  v19 = *(float32x4_t *)((char *)v16 + v9.i32[2]);
  v20 = vsubq_f32(v4, vrndq_f32(v4));
  v21 = vmlaq_n_f32(*v13, vsubq_f32(*v14, *v13), v20.f32[0]);
  v22 = vmlaq_n_f32(v17, vsubq_f32(*(float32x4_t *)((char *)v14 + v10), v17), v20.f32[0]);
  v23 = vmlaq_lane_f32(v21, vmlaq_n_f32(vsubq_f32(*v15, v21), vsubq_f32(*v16, *v15), v20.f32[0]), *(float32x2_t *)v20.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v23, vmlaq_lane_f32(vsubq_f32(v22, v23), vmlaq_n_f32(vsubq_f32(v18, v22), vsubq_f32(v19, v18), v20.f32[0]), *(float32x2_t *)v20.f32, 1), v20, 2).u64[0];
  return result;
}

double sub_1B17E2C40(uint64_t a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  float32x4_t v9;
  unsigned int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  uint64_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  __int8 *v23;
  __int8 *v24;
  __int8 *v25;
  __int8 *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  double result;

  v11 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v11.i32[3] = 0;
  v12 = *(float32x4_t *)(a1 + 16);
  v13 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(v11, vrndmq_f32(v11)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v14 = vminq_s32(vcvtq_s32_f32(v13), (int32x4_t)v12);
  v15 = *(_QWORD *)(a1 + 64);
  v17 = *(float32x4_t *)(a1 + 32);
  v16 = *(int8x16_t *)(a1 + 48);
  v18 = (float32x4_t)vmulq_s32((int32x4_t)v17, v14);
  v19 = (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL);
  *(int32x2_t *)v18.f32 = vadd_s32(*(int32x2_t *)v18.f32, *(int32x2_t *)v19.f32);
  *(int32x2_t *)v19.f32 = vdup_lane_s32(*(int32x2_t *)v18.f32, 1);
  *(int32x2_t *)v18.f32 = vadd_s32(*(int32x2_t *)v18.f32, *(int32x2_t *)v19.f32);
  v20 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v12, v14), (int8x16_t)v17, v16);
  v21 = v18.i32[0] + (uint64_t)v20.i32[1];
  v22 = (int)v21 + (uint64_t)v20.i32[0];
  v23 = (__int8 *)(v15 + v18.i32[0]);
  v12.i8[0] = *v23;
  v12.f32[0] = (float)v12.u32[0] * 0.0039216;
  v24 = (__int8 *)(v15 + v18.i32[0] + (uint64_t)v20.i32[0]);
  v16.i8[0] = *v24;
  v25 = (__int8 *)(v15 + v21);
  v17.i8[0] = *v25;
  v17.f32[0] = (float)v17.u32[0] * 0.0039216;
  v26 = (__int8 *)(v15 + v22);
  v18.i8[0] = *v26;
  v19.i8[0] = v23[v20.i32[2]];
  v19.f32[0] = (float)v19.u32[0] * 0.0039216;
  a9.i8[0] = v24[v20.i32[2]];
  v9.i8[0] = v25[v20.i32[2]];
  v9.f32[0] = (float)v9.u32[0] * 0.0039216;
  LOBYTE(v10) = v26[v20.i32[2]];
  v27 = vsubq_f32(v13, vrndq_f32(v13));
  v13.f32[0] = -(float)(v12.f32[0] - (float)((float)v16.u32[0] * 0.0039216));
  v28 = vmlaq_f32(v12, v27, v13);
  v18.f32[0] = -(float)(v17.f32[0] - (float)((float)v18.u32[0] * 0.0039216));
  a9.f32[0] = -(float)(v19.f32[0] - (float)((float)a9.u32[0] * 0.0039216));
  v29 = vmlaq_f32(v19, v27, a9);
  v20.f32[0] = -(float)(v9.f32[0] - (float)((float)v10 * 0.0039216));
  v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1);
  v31 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0), v30, vmlaq_f32(vsubq_f32(v17, v28), v27, v18).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v31, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0), v31), v30, vmlaq_f32(vsubq_f32(v9, v29), v27, v20).f32[0]), v27, 2).u64[0];
  return result;
}

double sub_1B17E2D70(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  float32x4_t v9;
  unsigned int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int8 *v24;
  __int8 *v25;
  __int8 *v26;
  __int8 *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  double result;

  v11 = vsubq_f32(a2, a1[5]);
  v11.i32[3] = 0;
  v12 = a1[1];
  v13 = vmulq_f32(*a1, vminnmq_f32(vsubq_f32(v11, vrndmq_f32(v11)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v14 = vminq_s32(vcvtq_s32_f32(v13), (int32x4_t)v12);
  v15 = a1[4].i64[0];
  v17 = a1[2];
  v16 = a1[3];
  v18 = (float32x4_t)vmulq_s32((int32x4_t)v17, v14);
  v19 = (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL);
  *(int32x2_t *)v18.f32 = vadd_s32(*(int32x2_t *)v18.f32, *(int32x2_t *)v19.f32);
  *(int32x2_t *)v19.f32 = vdup_lane_s32(*(int32x2_t *)v18.f32, 1);
  *(int32x2_t *)v18.f32 = vadd_s32(*(int32x2_t *)v18.f32, *(int32x2_t *)v19.f32);
  v20 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v12, v14), (int8x16_t)v17, (int8x16_t)v16);
  v21 = v18.i32[0] + (uint64_t)v20.i32[0];
  v22 = v18.i32[0] + (uint64_t)v20.i32[1];
  v23 = (int)v22 + (uint64_t)v20.i32[0];
  v24 = (__int8 *)(v15 + v18.i32[0]);
  v20.i8[0] = *v24;
  v20.f32[0] = (float)v20.u32[0];
  v16.f32[0] = v20.f32[0] * 0.0039216;
  v25 = (__int8 *)(v15 + v21);
  v20.i8[0] = *v25;
  v26 = (__int8 *)(v15 + v22);
  v17.i8[0] = *v26;
  v17.f32[0] = (float)v17.u32[0] * 0.0039216;
  v27 = (__int8 *)(v15 + v23);
  v18.i8[0] = *v27;
  v19.i8[0] = v24[v20.i32[2]];
  v19.f32[0] = (float)v19.u32[0] * 0.0039216;
  a9.i8[0] = v25[v20.i32[2]];
  v9.i8[0] = v26[v20.i32[2]];
  LOBYTE(v10) = v27[v20.i32[2]];
  v9.f32[0] = (float)v9.u32[0] * 0.0039216;
  v28 = vsubq_f32(v13, vrndq_f32(v13));
  v20.f32[0] = -(float)(v16.f32[0] - (float)((float)v20.u32[0] * 0.0039216));
  v29 = vmlaq_f32(v16, v28, v20);
  a9.f32[0] = -(float)(v19.f32[0] - (float)((float)a9.u32[0] * 0.0039216));
  v30 = vmlaq_f32(v19, v28, a9);
  v18.f32[0] = -(float)(v17.f32[0] - (float)((float)v18.u32[0] * 0.0039216));
  v12.f32[0] = -(float)(v9.f32[0] - (float)((float)v10 * 0.0039216));
  v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1);
  v32 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0), v31, vmlaq_f32(vsubq_f32(v17, v29), v28, v18).f32[0]);
  v33 = vmlaq_laneq_f32(v32, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 0), v32), v31, vmlaq_f32(vsubq_f32(v9, v30), v28, v12).f32[0]), v28, 2);
  v34 = vmulq_f32(v33, v33);
  v35 = vcgeq_f32(v33, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v35.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v35), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v33), v34, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v33)), vmulq_f32(v34, v34), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v33), v34,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v33))), (int8x16_t)vmulq_f32(v33, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E2F54(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  uint64_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const float *v14;
  const float *v15;
  uint32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  const float *v20;
  const float *v21;
  uint32x4_t v22;
  const float *v23;
  const float *v24;
  uint32x4_t v25;
  const float *v26;
  const float *v27;
  uint32x4_t v28;
  float32x4_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  float32x4_t v32;
  uint32x4_t v33;
  float32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3 = *(int32x4_t *)(a1 + 16);
  v4 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(v2, vrndmq_f32(v2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v5 = vminq_s32(vcvtq_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(int32x4_t *)(a1 + 32);
  v8 = (int8x16_t)vmulq_s32(v7, v5);
  *(int32x2_t *)v8.i8 = vadd_s32(*(int32x2_t *)v8.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  v8.i32[0] = vadd_s32(*(int32x2_t *)v8.i8, vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
  v9 = vbslq_s8((int8x16_t)vcgtq_s32(v3, v5), (int8x16_t)v7, *(int8x16_t *)(a1 + 48));
  v10 = v9.i32[2];
  v11 = v8.i32[0] + (uint64_t)v9.i32[0];
  v12 = v8.i32[0] + (uint64_t)v9.i32[1];
  v13 = (int)v12 + (uint64_t)v9.i32[0];
  v14 = (const float *)(v6 + v8.i32[0]);
  v16 = (uint32x4_t)vld1q_dup_f32(v14);
  v15 = (const float *)((char *)v14 + v10);
  v17.i64[0] = 0xFF000000FFLL;
  v17.i64[1] = 0xFF000000FFLL;
  v18 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v19 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v20 = (const float *)(v6 + v11);
  v22 = (uint32x4_t)vld1q_dup_f32(v20);
  v21 = (const float *)((char *)v20 + v10);
  v23 = (const float *)(v6 + v12);
  v25 = (uint32x4_t)vld1q_dup_f32(v23);
  v24 = (const float *)((char *)v23 + v10);
  v26 = (const float *)(v6 + v13);
  v28 = (uint32x4_t)vld1q_dup_f32(v26);
  v27 = (const float *)((char *)v26 + v10);
  v29 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v30 = (uint32x4_t)vld1q_dup_f32(v15);
  v31 = (uint32x4_t)vld1q_dup_f32(v21);
  v32 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v33 = (uint32x4_t)vld1q_dup_f32(v24);
  v34 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v35 = (uint32x4_t)vld1q_dup_f32(v27);
  v36 = vsubq_f32(v4, vrndq_f32(v4));
  v37 = vmlaq_n_f32(v19, vmlaq_f32(vnegq_f32(v19), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v22, (uint32x4_t)xmmword_1B2245E80), v17))), v36.f32[0]);
  v38 = vmlaq_n_f32(v32, vmlaq_f32(vnegq_f32(v32), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v31, (uint32x4_t)xmmword_1B2245E80), v17))), v36.f32[0]);
  v39 = vmlaq_lane_f32(v37, vmlaq_n_f32(vsubq_f32(v29, v37), vmlaq_f32(vnegq_f32(v29), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1B2245E80), v17))), v36.f32[0]), *(float32x2_t *)v36.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v39, vmlaq_lane_f32(vsubq_f32(v38, v39), vmlaq_n_f32(vsubq_f32(v34, v38), vmlaq_f32(vnegq_f32(v34), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1B2245E80), v17))), v36.f32[0]), *(float32x2_t *)v36.f32, 1), v36, 2).u64[0];
  return result;
}

double sub_1B17E30D8(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  uint64_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const float *v14;
  const float *v15;
  uint32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  const float *v20;
  const float *v21;
  uint32x4_t v22;
  const float *v23;
  const float *v24;
  uint32x4_t v25;
  float32x4_t v26;
  const float *v27;
  const float *v28;
  uint32x4_t v29;
  uint32x4_t v30;
  float32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3 = *(int32x4_t *)(a1 + 16);
  v4 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(v2, vrndmq_f32(v2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v5 = vminq_s32(vcvtq_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(int32x4_t *)(a1 + 32);
  v8 = (int8x16_t)vmulq_s32(v7, v5);
  *(int32x2_t *)v8.i8 = vadd_s32(*(int32x2_t *)v8.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  v8.i32[0] = vadd_s32(*(int32x2_t *)v8.i8, vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
  v9 = vbslq_s8((int8x16_t)vcgtq_s32(v3, v5), (int8x16_t)v7, *(int8x16_t *)(a1 + 48));
  v10 = v9.i32[2];
  v11 = v8.i32[0] + (uint64_t)v9.i32[0];
  v12 = v8.i32[0] + (uint64_t)v9.i32[1];
  v13 = (int)v12 + (uint64_t)v9.i32[0];
  v14 = (const float *)(v6 + v8.i32[0]);
  v16 = (uint32x4_t)vld1q_dup_f32(v14);
  v15 = (const float *)((char *)v14 + v10);
  v17.i64[0] = 0xFF000000FFLL;
  v17.i64[1] = 0xFF000000FFLL;
  v18 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v19 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v20 = (const float *)(v6 + v11);
  v22 = (uint32x4_t)vld1q_dup_f32(v20);
  v21 = (const float *)((char *)v20 + v10);
  v23 = (const float *)(v6 + v12);
  v25 = (uint32x4_t)vld1q_dup_f32(v23);
  v24 = (const float *)((char *)v23 + v10);
  v26 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v27 = (const float *)(v6 + v13);
  v29 = (uint32x4_t)vld1q_dup_f32(v27);
  v28 = (const float *)((char *)v27 + v10);
  v30 = (uint32x4_t)vld1q_dup_f32(v15);
  v31 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v32 = (uint32x4_t)vld1q_dup_f32(v21);
  v33 = (uint32x4_t)vld1q_dup_f32(v24);
  v34 = (uint32x4_t)vld1q_dup_f32(v28);
  v35 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v36 = vsubq_f32(v4, vrndq_f32(v4));
  v37 = vmlaq_n_f32(v19, vmlaq_f32(vnegq_f32(v19), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v22, (uint32x4_t)xmmword_1B2245E80), v17))), v36.f32[0]);
  v38 = vmlaq_n_f32(v31, vmlaq_f32(vnegq_f32(v31), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_1B2245E80), v17))), v36.f32[0]);
  v39 = vmlaq_lane_f32(v37, vmlaq_n_f32(vsubq_f32(v26, v37), vmlaq_f32(vnegq_f32(v26), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), v17))), v36.f32[0]), *(float32x2_t *)v36.f32, 1);
  v40 = vmlaq_laneq_f32(v39, vmlaq_lane_f32(vsubq_f32(v38, v39), vmlaq_n_f32(vsubq_f32(v35, v38), vmlaq_f32(vnegq_f32(v35), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), v17))), v36.f32[0]), *(float32x2_t *)v36.f32, 1), v36, 2);
  v41 = vmulq_f32(v40, v40);
  v42 = vcgeq_f32(v40, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v42.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v42), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v40), v41, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v40)), vmulq_f32(v41, v41), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v40), v41,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v40))), (int8x16_t)vmulq_f32(v40, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E3310(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  uint64_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  uint64_t v10;
  __int32 v11;
  uint64_t v12;
  uint64_t v13;
  const float *v14;
  const float *v15;
  uint32x4_t v16;
  uint64_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  const float *v21;
  const float *v22;
  uint32x4_t v23;
  const float *v24;
  const float *v25;
  uint32x4_t v26;
  float32x4_t v27;
  const float *v28;
  const float *v29;
  uint32x4_t v30;
  uint32x4_t v31;
  float32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3 = *(int32x4_t *)(a1 + 16);
  v4 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(v2, vrndmq_f32(v2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v5 = vminq_s32(vcvtq_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(int32x4_t *)(a1 + 32);
  v8 = (int8x16_t)vmulq_s32(v7, v5);
  *(int32x2_t *)v8.i8 = vadd_s32(*(int32x2_t *)v8.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  v8.i32[0] = vadd_s32(*(int32x2_t *)v8.i8, vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
  v9 = vbslq_s8((int8x16_t)vcgtq_s32(v3, v5), (int8x16_t)v7, *(int8x16_t *)(a1 + 48));
  v10 = v9.i32[2];
  v11 = v9.i32[0];
  v12 = v8.i32[0] + (uint64_t)v9.i32[0];
  v13 = v8.i32[0] + (uint64_t)v9.i32[1];
  v14 = (const float *)(v6 + v8.i32[0]);
  v16 = (uint32x4_t)vld1q_dup_f32(v14);
  v15 = (const float *)((char *)v14 + v10);
  v17 = (int)v13 + (uint64_t)v11;
  v18.i64[0] = 0xFF000000FFLL;
  v18.i64[1] = 0xFF000000FFLL;
  v19 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v20 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v21 = (const float *)(v6 + v12);
  v23 = (uint32x4_t)vld1q_dup_f32(v21);
  v22 = (const float *)((char *)v21 + v10);
  v24 = (const float *)(v6 + v13);
  v26 = (uint32x4_t)vld1q_dup_f32(v24);
  v25 = (const float *)((char *)v24 + v10);
  v27 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v28 = (const float *)(v6 + v17);
  v30 = (uint32x4_t)vld1q_dup_f32(v28);
  v29 = (const float *)((char *)v28 + v10);
  v31 = (uint32x4_t)vld1q_dup_f32(v15);
  v32 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v31, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v33 = (uint32x4_t)vld1q_dup_f32(v22);
  v34 = (uint32x4_t)vld1q_dup_f32(v25);
  v35 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v36 = (uint32x4_t)vld1q_dup_f32(v29);
  v37 = vsubq_f32(v4, vrndq_f32(v4));
  v38 = vmlaq_n_f32(v20, vmlaq_f32(vnegq_f32(v20), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v23, (uint32x4_t)xmmword_1B2245E80), v18))), v37.f32[0]);
  v39 = vmlaq_n_f32(v32, vmlaq_f32(vnegq_f32(v32), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), v18))), v37.f32[0]);
  v40 = vmlaq_lane_f32(v38, vmlaq_n_f32(vsubq_f32(v27, v38), vmlaq_f32(vnegq_f32(v27), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), v18))), v37.f32[0]), *(float32x2_t *)v37.f32, 1);
  v41 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_laneq_f32(v40, vmlaq_lane_f32(vsubq_f32(v39, v40), vmlaq_n_f32(vsubq_f32(v35, v39), vmlaq_f32(vnegq_f32(v35), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v36, (uint32x4_t)xmmword_1B2245E80), v18))), v37.f32[0]), *(float32x2_t *)v37.f32, 1), v37, 2));
  *(_QWORD *)&result = vextq_s8(v41, v41, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E349C(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  uint64_t v8;
  int8x16_t v9;
  uint64_t v10;
  __int32 v11;
  uint64_t v12;
  uint64_t v13;
  const float *v14;
  const float *v15;
  uint32x4_t v16;
  uint64_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  const float *v21;
  const float *v22;
  uint32x4_t v23;
  const float *v24;
  const float *v25;
  uint32x4_t v26;
  const float *v27;
  const float *v28;
  uint32x4_t v29;
  float32x4_t v30;
  uint32x4_t v31;
  float32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3 = *(int32x4_t *)(a1 + 16);
  v4 = vmulq_f32(*(float32x4_t *)a1, vminnmq_f32(vsubq_f32(v2, vrndmq_f32(v2)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v5 = vminq_s32(vcvtq_s32_f32(v4), v3);
  v6 = *(int32x4_t *)(a1 + 32);
  v7 = (int8x16_t)vmulq_s32(v6, v5);
  *(int32x2_t *)v7.i8 = vadd_s32(*(int32x2_t *)v7.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8 = *(_QWORD *)(a1 + 64);
  v7.i32[0] = vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).u32[0];
  v9 = vbslq_s8((int8x16_t)vcgtq_s32(v3, v5), (int8x16_t)v6, *(int8x16_t *)(a1 + 48));
  v10 = v9.i32[2];
  v11 = v9.i32[0];
  v12 = v7.i32[0] + (uint64_t)v9.i32[0];
  v13 = v7.i32[0] + (uint64_t)v9.i32[1];
  v14 = (const float *)(v8 + v7.i32[0]);
  v16 = (uint32x4_t)vld1q_dup_f32(v14);
  v15 = (const float *)((char *)v14 + v10);
  v17 = (int)v13 + (uint64_t)v11;
  v18.i64[0] = 0xFF000000FFLL;
  v18.i64[1] = 0xFF000000FFLL;
  v19 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v20 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v21 = (const float *)(v8 + v12);
  v23 = (uint32x4_t)vld1q_dup_f32(v21);
  v22 = (const float *)((char *)v21 + v10);
  v24 = (const float *)(v8 + v13);
  v26 = (uint32x4_t)vld1q_dup_f32(v24);
  v25 = (const float *)((char *)v24 + v10);
  v27 = (const float *)(v8 + v17);
  v29 = (uint32x4_t)vld1q_dup_f32(v27);
  v28 = (const float *)((char *)v27 + v10);
  v30 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v31 = (uint32x4_t)vld1q_dup_f32(v15);
  v32 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v31, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v33 = (uint32x4_t)vld1q_dup_f32(v22);
  v34 = (uint32x4_t)vld1q_dup_f32(v25);
  v35 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v36 = (uint32x4_t)vld1q_dup_f32(v28);
  v37 = vsubq_f32(v4, vrndq_f32(v4));
  v38 = vmlaq_n_f32(v20, vmlaq_f32(vnegq_f32(v20), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v23, (uint32x4_t)xmmword_1B2245E80), v18))), v37.f32[0]);
  v39 = vmlaq_n_f32(v32, vmlaq_f32(vnegq_f32(v32), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), v18))), v37.f32[0]);
  v40 = vmlaq_lane_f32(v38, vmlaq_n_f32(vsubq_f32(v30, v38), vmlaq_f32(vnegq_f32(v30), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), v18))), v37.f32[0]), *(float32x2_t *)v37.f32, 1);
  v41 = vmlaq_laneq_f32(v40, vmlaq_lane_f32(vsubq_f32(v39, v40), vmlaq_n_f32(vsubq_f32(v35, v39), vmlaq_f32(vnegq_f32(v35), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v36, (uint32x4_t)xmmword_1B2245E80), v18))), v37.f32[0]), *(float32x2_t *)v37.f32, 1), v37, 2);
  v42 = vmulq_f32(v41, v41);
  v43 = vcgeq_f32(v41, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v43.i32[3] = 0;
  v44 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v41), v42, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v41)), vmulq_f32(v42, v42), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v41), v42,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v41))), (int8x16_t)vmulq_f32(v41, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v44.i32[3] = v41.i32[3];
  v45 = (int8x16_t)vrev64q_s32(v44);
  *(_QWORD *)&result = vextq_s8(v45, v45, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E36DC(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  unsigned __int16 *v44;
  unsigned int v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  int v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  int v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  int v63;
  int v64;
  BOOL v65;
  int v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  double result;

  v9 = vsubq_f32(a2, a1[5]);
  v9.i32[3] = 0;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vmlaq_f32(v11, v11, v9);
  v13 = vabdq_f32(v10, vminnmq_f32(vsubq_f32(v12, vrndmq_f32(v12)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v14 = a1[1];
  v15 = vmulq_f32(*a1, vaddq_f32(v13, v13));
  v16 = vminq_s32(vcvtq_s32_f32(v15), (int32x4_t)v14);
  v17 = a1[4].i64[0];
  v19 = a1[2];
  v18 = a1[3];
  v21 = (float32x4_t)vmulq_s32((int32x4_t)v19, v16);
  v20 = (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL);
  *(int32x2_t *)v21.f32 = vadd_s32(*(int32x2_t *)v21.f32, *(int32x2_t *)v20.f32);
  *(int32x2_t *)v20.f32 = vdup_lane_s32(*(int32x2_t *)v21.f32, 1);
  *(int32x2_t *)v21.f32 = vadd_s32(*(int32x2_t *)v21.f32, *(int32x2_t *)v20.f32);
  v22 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v14, v16), (int8x16_t)v19, (int8x16_t)v18);
  v23 = v21.i32[0] + (uint64_t)v22.i32[0];
  v24 = v21.i32[0] + (uint64_t)v22.i32[1];
  v25 = (int)v24 + (uint64_t)v22.i32[0];
  v26 = (unsigned __int16 *)(v17 + v21.i32[0]);
  v27 = *v26;
  v28 = (v27 >> 10) & 0x1F;
  if (v28 == 31)
    v29 = 2139095040;
  else
    v29 = (v27 >> 10) & 0x1F;
  if (v28)
    v30 = v28 == 31;
  else
    v30 = 1;
  if (v30)
    v31 = v29;
  else
    v31 = (v28 << 23) + 939524096;
  v32 = v17 + v23;
  v33 = *(unsigned __int16 *)(v17 + v23);
  v34 = (v33 >> 10) & 0x1F;
  if (v34 == 31)
    v35 = 2139095040;
  else
    v35 = (v33 >> 10) & 0x1F;
  if (v34)
    v36 = v34 == 31;
  else
    v36 = 1;
  if (v36)
    v37 = v35;
  else
    v37 = (v34 << 23) + 939524096;
  v38 = v17 + v24;
  v39 = *(unsigned __int16 *)(v17 + v24);
  v40 = (v39 >> 10) & 0x1F;
  if (v40 == 31)
    v41 = 2139095040;
  else
    v41 = (v39 >> 10) & 0x1F;
  if (v40)
    v42 = v40 == 31;
  else
    v42 = 1;
  if (v42)
    v43 = v41;
  else
    v43 = (v40 << 23) + 939524096;
  v44 = (unsigned __int16 *)(v17 + v25);
  v45 = *v44;
  v46 = (v45 >> 10) & 0x1F;
  if (v46 == 31)
    v47 = 2139095040;
  else
    v47 = (v45 >> 10) & 0x1F;
  if (v46)
    v48 = v46 == 31;
  else
    v48 = 1;
  if (v48)
    v49 = v47;
  else
    v49 = (v46 << 23) + 939524096;
  v50 = *(unsigned __int16 *)((char *)v26 + v22.i32[2]);
  v51 = (v50 >> 10) & 0x1F;
  if (v51 == 31)
    v52 = 2139095040;
  else
    v52 = (v50 >> 10) & 0x1F;
  if (v51)
    v53 = v51 == 31;
  else
    v53 = 1;
  if (!v53)
    v52 = (v51 << 23) + 939524096;
  v54 = *(unsigned __int16 *)(v32 + v22.i32[2]);
  v55 = (v54 >> 10) & 0x1F;
  if (v55 == 31)
    v56 = 2139095040;
  else
    v56 = (v54 >> 10) & 0x1F;
  if (v55)
    v57 = v55 == 31;
  else
    v57 = 1;
  if (!v57)
    v56 = (v55 << 23) + 939524096;
  v58 = *(unsigned __int16 *)(v38 + v22.i32[2]);
  v59 = (v58 >> 10) & 0x1F;
  if (v59 == 31)
    v60 = 2139095040;
  else
    v60 = (v58 >> 10) & 0x1F;
  if (v59)
    v61 = v59 == 31;
  else
    v61 = 1;
  if (!v61)
    v60 = (v59 << 23) + 939524096;
  v62 = *(unsigned __int16 *)((char *)v44 + v22.i32[2]);
  v63 = (v62 >> 10) & 0x1F;
  if (v63 == 31)
    v64 = 2139095040;
  else
    v64 = (v62 >> 10) & 0x1F;
  if (v63)
    v65 = v63 == 31;
  else
    v65 = 1;
  if (v65)
    v66 = v64;
  else
    v66 = (v63 << 23) + 939524096;
  v22.i32[0] = v60 | (v58 << 16) & 0x80000000 | (v58 >> 7) & 7 | (8 * (v58 & 0x3FF)) & 0x1FFF | ((v58 & 0x3FF) << 13);
  v14.i32[0] = v56 | (v54 << 16) & 0x80000000 | (v54 >> 7) & 7 | (8 * (v54 & 0x3FF)) & 0x1FFF | ((v54 & 0x3FF) << 13);
  v18.i32[0] = v52 | (v50 << 16) & 0x80000000 | (v50 >> 7) & 7 | (8 * (v50 & 0x3FF)) & 0x1FFF | ((v50 & 0x3FF) << 13);
  v19.i32[0] = v49 | (v45 << 16) & 0x80000000 | (v45 >> 7) & 7 | (8 * (v45 & 0x3FF)) & 0x1FFF | ((v45 & 0x3FF) << 13);
  v21.i32[0] = v43 | (v39 << 16) & 0x80000000 | (v39 >> 7) & 7 | (8 * (v39 & 0x3FF)) & 0x1FFF | ((v39 & 0x3FF) << 13);
  v20.i32[0] = v37 | (v33 << 16) & 0x80000000 | (v33 >> 7) & 7 | (8 * (v33 & 0x3FF)) & 0x1FFF | ((v33 & 0x3FF) << 13);
  a9.i32[0] = v31 | (v27 << 16) & 0x80000000 | (v27 >> 7) & 7 | (8 * (v27 & 0x3FF)) & 0x1FFF | ((v27 & 0x3FF) << 13);
  v67 = vsubq_f32(v15, vrndq_f32(v15));
  v68 = vmlaq_f32(a9, v67, vsubq_f32(v20, a9));
  v20.i32[0] = v66 | (v62 << 16) & 0x80000000 | (v62 >> 7) & 7 | (8 * (v62 & 0x3FF)) & 0x1FFF | ((v62 & 0x3FF) << 13);
  v69 = vmlaq_f32(v18, v67, vsubq_f32(v14, v18));
  v70 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1);
  v71 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 0), v70, vmlaq_f32(vsubq_f32(v21, v68), v67, vsubq_f32(v19, v21)).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v71, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 0), v71), v70, vmlaq_f32(vsubq_f32(v22, v69), v67, vsubq_f32(v20, v22)).f32[0]), v67, 2).u64[0];
  return result;
}

double sub_1B17E39FC(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int32 *v26;
  float *v27;
  __int32 *v28;
  float *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  double result;

  v9 = vsubq_f32(a2, a1[5]);
  v9.i32[3] = 0;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v12 = vmlaq_f32(v11, v11, v9);
  v13 = vabdq_f32(v10, vminnmq_f32(vsubq_f32(v12, vrndmq_f32(v12)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v14 = a1[1];
  v15 = vmulq_f32(*a1, vaddq_f32(v13, v13));
  v16 = vminq_s32(vcvtq_s32_f32(v15), (int32x4_t)v14);
  v17 = a1[4].i64[0];
  v19 = a1[2];
  v18 = a1[3];
  v20 = (float32x4_t)vmulq_s32((int32x4_t)v19, v16);
  v21 = (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL);
  *(int32x2_t *)v20.f32 = vadd_s32(*(int32x2_t *)v20.f32, *(int32x2_t *)v21.f32);
  *(int32x2_t *)v21.f32 = vdup_lane_s32(*(int32x2_t *)v20.f32, 1);
  v22 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v14, v16), (int8x16_t)v19, (int8x16_t)v18);
  *(int32x2_t *)v14.f32 = vadd_s32(*(int32x2_t *)v20.f32, *(int32x2_t *)v21.f32);
  v23 = v14.i32[0] + (uint64_t)v22.i32[0];
  v24 = v14.i32[0] + (uint64_t)v22.i32[1];
  v25 = (int)v24 + (uint64_t)v22.i32[0];
  v26 = (__int32 *)(v17 + v14.i32[0]);
  v22.i32[0] = *v26;
  v27 = (float *)(v17 + v23);
  v28 = (__int32 *)(v17 + v24);
  v18.i32[0] = *v28;
  v29 = (float *)(v17 + v25);
  v19.i32[0] = *(__int32 *)((char *)v26 + v22.i32[2]);
  v20.f32[0] = *(float *)((char *)v27 + v22.i32[2]);
  v21.i32[0] = *(__int32 *)((char *)v28 + v22.i32[2]);
  a9.f32[0] = *(float *)((char *)v29 + v22.i32[2]);
  v30 = vsubq_f32(v15, vrndq_f32(v15));
  v15.f32[0] = *v27 - *(float *)v26;
  v31 = vmlaq_f32(v22, v30, v15);
  v14.f32[0] = *v29 - *(float *)v28;
  v20.f32[0] = v20.f32[0] - v19.f32[0];
  v32 = vmlaq_f32(v19, v30, v20);
  a9.f32[0] = a9.f32[0] - v21.f32[0];
  v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1);
  v34 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 0), v33, vmlaq_f32(vsubq_f32(v18, v31), v30, v14).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v34, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 0), v34), v33, vmlaq_f32(vsubq_f32(v21, v32), v30, a9).f32[0]), v30, 2).u64[0];
  return result;
}

double sub_1B17E3B08(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  __int32 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint16x4_t *v20;
  int8x16_t v21;
  float32x4_t v22;
  uint16x4_t *v23;
  int8x16_t v24;
  float32x4_t v25;
  uint16x4_t *v26;
  int8x16_t v27;
  float32x4_t v28;
  uint16x4_t *v29;
  int8x16_t v30;
  float32x4_t v31;
  int16x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vmlaq_f32(v4, v4, v2);
  v6 = vabdq_f32(v3, vminnmq_f32(vsubq_f32(v5, vrndmq_f32(v5)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v7 = *(int32x4_t *)(a1 + 16);
  v8 = vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v6, v6));
  v9 = vminq_s32(vcvtq_s32_f32(v8), v7);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = (int8x16_t)vmulq_s32(v11, v9);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v13 = vbslq_s8((int8x16_t)vcgtq_s32(v7, v9), (int8x16_t)v11, *(int8x16_t *)(a1 + 48));
  v14 = v13.i32[2];
  v7.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v15 = v7.i32[0] + (uint64_t)v13.i32[0];
  v16 = v7.i32[0] + (uint64_t)v13.i32[1];
  v17 = (int)v16 + (uint64_t)v13.i32[0];
  v18 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v19 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v20 = (uint16x4_t *)(v10 + v7.i32[0]);
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  v21 = (int8x16_t)vshll_n_u16(*v20, 0xDuLL);
  v7.i64[0] = 0x3800000038000000;
  v7.i64[1] = 0x3800000038000000;
  v22 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v21, v19), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v20), v12), vandq_s8(v21, v18))), v7);
  v23 = (uint16x4_t *)(v10 + v15);
  v24 = (int8x16_t)vshll_n_u16(*v23, 0xDuLL);
  v25 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v24, v19), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v23), v12), vandq_s8(v24, v18))), v7);
  v26 = (uint16x4_t *)(v10 + v16);
  v27 = (int8x16_t)vshll_n_u16(*v26, 0xDuLL);
  v28 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v27, v19), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v26), v12), vandq_s8(v27, v18))), v7);
  v29 = (uint16x4_t *)(v10 + v17);
  v30 = (int8x16_t)vshll_n_u16(*v29, 0xDuLL);
  v31 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v30, v19), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16((int16x4_t)*v29), v12), vandq_s8(v30, v18))), v7);
  v32 = *(int16x4_t *)((char *)v20 + v14);
  v33 = vandq_s8((int8x16_t)vmovl_s16(v32), v12);
  v34 = (int8x16_t)vshll_n_u16((uint16x4_t)v32, 0xDuLL);
  v35 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v34, v19), vorrq_s8(v33, vandq_s8(v34, v18))), v7);
  *(uint16x4_t *)v33.i8 = *(uint16x4_t *)((char *)v23 + v14);
  v36 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v33.i8), v12);
  v37 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v33.i8, 0xDuLL);
  v38 = (int32x4_t)vorrq_s8(vandq_s8(v37, v19), vorrq_s8(v36, vandq_s8(v37, v18)));
  *(uint16x4_t *)v36.i8 = *(uint16x4_t *)((char *)v26 + v14);
  v39 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v36.i8), v12);
  v40 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v36.i8, 0xDuLL);
  v41 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v40, v19), vorrq_s8(v39, vandq_s8(v40, v18))), v7);
  *(uint16x4_t *)v39.i8 = *(uint16x4_t *)((char *)v29 + v14);
  v42 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v39.i8), v12);
  v43 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v39.i8, 0xDuLL);
  v44 = vsubq_f32(v8, vrndq_f32(v8));
  v45 = vmlaq_n_f32(v22, vsubq_f32(v25, v22), v44.f32[0]);
  v46 = vmlaq_n_f32(v35, vsubq_f32((float32x4_t)vaddq_s32(v38, v7), v35), v44.f32[0]);
  v47 = vmlaq_lane_f32(v45, vmlaq_n_f32(vsubq_f32(v28, v45), vsubq_f32(v31, v28), v44.f32[0]), *(float32x2_t *)v44.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v47, vmlaq_lane_f32(vsubq_f32(v46, v47), vmlaq_n_f32(vsubq_f32(v41, v46), vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v43, v19), vorrq_s8(v42, vandq_s8(v43, v18))), v7), v41), v44.f32[0]), *(float32x2_t *)v44.f32, 1), v44, 2).u64[0];
  return result;
}

double sub_1B17E3D20(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  __int32 v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  float32x4_t *v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vmlaq_f32(v4, v4, v2);
  v6 = vabdq_f32(v3, vminnmq_f32(vsubq_f32(v5, vrndmq_f32(v5)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v7 = *(int32x4_t *)(a1 + 16);
  v8 = vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v6, v6));
  v9 = vminq_s32(vcvtq_s32_f32(v8), v7);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = (int8x16_t)vmulq_s32(v11, v9);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v13 = vbslq_s8((int8x16_t)vcgtq_s32(v7, v9), (int8x16_t)v11, *(int8x16_t *)(a1 + 48));
  v14 = v13.i32[2];
  v7.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v15 = v7.i32[0] + (uint64_t)v13.i32[1];
  v16 = (int)v15 + (uint64_t)v13.i32[0];
  v17 = (float32x4_t *)(v10 + v7.i32[0]);
  v18 = (float32x4_t *)(v10 + v7.i32[0] + (uint64_t)v13.i32[0]);
  v19 = (float32x4_t *)(v10 + v15);
  v20 = (float32x4_t *)(v10 + v16);
  v21 = *(float32x4_t *)((char *)v17 + v13.i32[2]);
  v22 = *(float32x4_t *)((char *)v19 + v13.i32[2]);
  v23 = *(float32x4_t *)((char *)v20 + v13.i32[2]);
  v24 = vsubq_f32(v8, vrndq_f32(v8));
  v25 = vmlaq_n_f32(*v17, vsubq_f32(*v18, *v17), v24.f32[0]);
  v26 = vmlaq_n_f32(v21, vsubq_f32(*(float32x4_t *)((char *)v18 + v14), v21), v24.f32[0]);
  v27 = vmlaq_lane_f32(v25, vmlaq_n_f32(vsubq_f32(*v19, v25), vsubq_f32(*v20, *v19), v24.f32[0]), *(float32x2_t *)v24.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v27, vmlaq_lane_f32(vsubq_f32(v26, v27), vmlaq_n_f32(vsubq_f32(v22, v26), vsubq_f32(v23, v22), v24.f32[0]), *(float32x2_t *)v24.f32, 1), v24, 2).u64[0];
  return result;
}

double sub_1B17E3E20(uint64_t a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  float32x4_t v9;
  unsigned int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  __int8 *v27;
  __int8 *v28;
  __int8 *v29;
  __int8 *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  double result;

  v11 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v11.i32[3] = 0;
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  v14 = vmlaq_f32(v13, v13, v11);
  v15 = vabdq_f32(v12, vminnmq_f32(vsubq_f32(v14, vrndmq_f32(v14)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v16 = *(float32x4_t *)(a1 + 16);
  v17 = vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v15, v15));
  v18 = vminq_s32(vcvtq_s32_f32(v17), (int32x4_t)v16);
  v19 = *(_QWORD *)(a1 + 64);
  v21 = *(float32x4_t *)(a1 + 32);
  v20 = *(int8x16_t *)(a1 + 48);
  v22 = (float32x4_t)vmulq_s32((int32x4_t)v21, v18);
  v23 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  *(int32x2_t *)v23.f32 = vdup_lane_s32(*(int32x2_t *)v22.f32, 1);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  v24 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v16, v18), (int8x16_t)v21, v20);
  v25 = v22.i32[0] + (uint64_t)v24.i32[1];
  v26 = (int)v25 + (uint64_t)v24.i32[0];
  v27 = (__int8 *)(v19 + v22.i32[0]);
  v16.i8[0] = *v27;
  v16.f32[0] = (float)v16.u32[0] * 0.0039216;
  v28 = (__int8 *)(v19 + v22.i32[0] + (uint64_t)v24.i32[0]);
  v20.i8[0] = *v28;
  v29 = (__int8 *)(v19 + v25);
  v21.i8[0] = *v29;
  v21.f32[0] = (float)v21.u32[0] * 0.0039216;
  v30 = (__int8 *)(v19 + v26);
  v22.i8[0] = *v30;
  v23.i8[0] = v27[v24.i32[2]];
  v23.f32[0] = (float)v23.u32[0] * 0.0039216;
  a9.i8[0] = v28[v24.i32[2]];
  v9.i8[0] = v29[v24.i32[2]];
  v9.f32[0] = (float)v9.u32[0] * 0.0039216;
  LOBYTE(v10) = v30[v24.i32[2]];
  v31 = vsubq_f32(v17, vrndq_f32(v17));
  v17.f32[0] = -(float)(v16.f32[0] - (float)((float)v20.u32[0] * 0.0039216));
  v32 = vmlaq_f32(v16, v31, v17);
  v22.f32[0] = -(float)(v21.f32[0] - (float)((float)v22.u32[0] * 0.0039216));
  a9.f32[0] = -(float)(v23.f32[0] - (float)((float)a9.u32[0] * 0.0039216));
  v33 = vmlaq_f32(v23, v31, a9);
  v24.f32[0] = -(float)(v9.f32[0] - (float)((float)v10 * 0.0039216));
  v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1);
  v35 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 0), v34, vmlaq_f32(vsubq_f32(v21, v32), v31, v22).f32[0]);
  *(_QWORD *)&result = vmlaq_laneq_f32(v35, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0), v35), v34, vmlaq_f32(vsubq_f32(v9, v33), v31, v24).f32[0]), v31, 2).u64[0];
  return result;
}

double sub_1B17E3F64(float32x4_t *a1, float32x4_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float32x4_t a9)
{
  float32x4_t v9;
  unsigned int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int8 *v28;
  __int8 *v29;
  __int8 *v30;
  __int8 *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  double result;

  v11 = vsubq_f32(a2, a1[5]);
  v11.i32[3] = 0;
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  v14 = vmlaq_f32(v13, v13, v11);
  v15 = vabdq_f32(v12, vminnmq_f32(vsubq_f32(v14, vrndmq_f32(v14)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v16 = a1[1];
  v17 = vmulq_f32(*a1, vaddq_f32(v15, v15));
  v18 = vminq_s32(vcvtq_s32_f32(v17), (int32x4_t)v16);
  v19 = a1[4].i64[0];
  v21 = a1[2];
  v20 = a1[3];
  v22 = (float32x4_t)vmulq_s32((int32x4_t)v21, v18);
  v23 = (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  *(int32x2_t *)v23.f32 = vdup_lane_s32(*(int32x2_t *)v22.f32, 1);
  *(int32x2_t *)v22.f32 = vadd_s32(*(int32x2_t *)v22.f32, *(int32x2_t *)v23.f32);
  v24 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_s32((int32x4_t)v16, v18), (int8x16_t)v21, (int8x16_t)v20);
  v25 = v22.i32[0] + (uint64_t)v24.i32[0];
  v26 = v22.i32[0] + (uint64_t)v24.i32[1];
  v27 = (int)v26 + (uint64_t)v24.i32[0];
  v28 = (__int8 *)(v19 + v22.i32[0]);
  v24.i8[0] = *v28;
  v24.f32[0] = (float)v24.u32[0];
  v20.f32[0] = v24.f32[0] * 0.0039216;
  v29 = (__int8 *)(v19 + v25);
  v24.i8[0] = *v29;
  v30 = (__int8 *)(v19 + v26);
  v21.i8[0] = *v30;
  v21.f32[0] = (float)v21.u32[0] * 0.0039216;
  v31 = (__int8 *)(v19 + v27);
  v22.i8[0] = *v31;
  v23.i8[0] = v28[v24.i32[2]];
  v23.f32[0] = (float)v23.u32[0] * 0.0039216;
  a9.i8[0] = v29[v24.i32[2]];
  v9.i8[0] = v30[v24.i32[2]];
  LOBYTE(v10) = v31[v24.i32[2]];
  v9.f32[0] = (float)v9.u32[0] * 0.0039216;
  v32 = vsubq_f32(v17, vrndq_f32(v17));
  v24.f32[0] = -(float)(v20.f32[0] - (float)((float)v24.u32[0] * 0.0039216));
  v33 = vmlaq_f32(v20, v32, v24);
  a9.f32[0] = -(float)(v23.f32[0] - (float)((float)a9.u32[0] * 0.0039216));
  v34 = vmlaq_f32(v23, v32, a9);
  v22.f32[0] = -(float)(v21.f32[0] - (float)((float)v22.u32[0] * 0.0039216));
  v16.f32[0] = -(float)(v9.f32[0] - (float)((float)v10 * 0.0039216));
  v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1);
  v36 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0), v35, vmlaq_f32(vsubq_f32(v21, v33), v32, v22).f32[0]);
  v37 = vmlaq_laneq_f32(v36, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0), v36), v35, vmlaq_f32(vsubq_f32(v9, v34), v32, v16).f32[0]), v32, 2);
  v38 = vmulq_f32(v37, v37);
  v39 = vcgeq_f32(v37, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v39.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v39), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v37), v38, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v37)), vmulq_f32(v38, v38), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v37), v38,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v37))), (int8x16_t)vmulq_f32(v37, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E415C(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const float *v18;
  const float *v19;
  uint32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  const float *v24;
  const float *v25;
  uint32x4_t v26;
  const float *v27;
  const float *v28;
  uint32x4_t v29;
  const float *v30;
  const float *v31;
  uint32x4_t v32;
  float32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  float32x4_t v38;
  uint32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vmlaq_f32(v4, v4, v2);
  v6 = vabdq_f32(v3, vminnmq_f32(vsubq_f32(v5, vrndmq_f32(v5)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v7 = *(int32x4_t *)(a1 + 16);
  v8 = vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v6, v6));
  v9 = vminq_s32(vcvtq_s32_f32(v8), v7);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = (int8x16_t)vmulq_s32(v11, v9);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v12.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v13 = vbslq_s8((int8x16_t)vcgtq_s32(v7, v9), (int8x16_t)v11, *(int8x16_t *)(a1 + 48));
  v14 = v13.i32[2];
  v15 = v12.i32[0] + (uint64_t)v13.i32[0];
  v16 = v12.i32[0] + (uint64_t)v13.i32[1];
  v17 = (int)v16 + (uint64_t)v13.i32[0];
  v18 = (const float *)(v10 + v12.i32[0]);
  v20 = (uint32x4_t)vld1q_dup_f32(v18);
  v19 = (const float *)((char *)v18 + v14);
  v21.i64[0] = 0xFF000000FFLL;
  v21.i64[1] = 0xFF000000FFLL;
  v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v23 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v20, (uint32x4_t)xmmword_1B2245E80), v21)), v22);
  v24 = (const float *)(v10 + v15);
  v26 = (uint32x4_t)vld1q_dup_f32(v24);
  v25 = (const float *)((char *)v24 + v14);
  v27 = (const float *)(v10 + v16);
  v29 = (uint32x4_t)vld1q_dup_f32(v27);
  v28 = (const float *)((char *)v27 + v14);
  v30 = (const float *)(v10 + v17);
  v32 = (uint32x4_t)vld1q_dup_f32(v30);
  v31 = (const float *)((char *)v30 + v14);
  v33 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), v21)), v22);
  v34 = (uint32x4_t)vld1q_dup_f32(v19);
  v35 = (uint32x4_t)vld1q_dup_f32(v25);
  v36 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), v21)), v22);
  v37 = (uint32x4_t)vld1q_dup_f32(v28);
  v38 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), v21)), v22);
  v39 = (uint32x4_t)vld1q_dup_f32(v31);
  v40 = vsubq_f32(v8, vrndq_f32(v8));
  v41 = vmlaq_n_f32(v23, vmlaq_f32(vnegq_f32(v23), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v21))), v40.f32[0]);
  v42 = vmlaq_n_f32(v36, vmlaq_f32(vnegq_f32(v36), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1B2245E80), v21))), v40.f32[0]);
  v43 = vmlaq_lane_f32(v41, vmlaq_n_f32(vsubq_f32(v33, v41), vmlaq_f32(vnegq_f32(v33), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_1B2245E80), v21))), v40.f32[0]), *(float32x2_t *)v40.f32, 1);
  *(_QWORD *)&result = vmlaq_laneq_f32(v43, vmlaq_lane_f32(vsubq_f32(v42, v43), vmlaq_n_f32(vsubq_f32(v38, v42), vmlaq_f32(vnegq_f32(v38), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v39, (uint32x4_t)xmmword_1B2245E80), v21))), v40.f32[0]), *(float32x2_t *)v40.f32, 1), v40, 2).u64[0];
  return result;
}

double sub_1B17E42F4(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const float *v18;
  const float *v19;
  uint32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  const float *v24;
  const float *v25;
  uint32x4_t v26;
  const float *v27;
  const float *v28;
  uint32x4_t v29;
  float32x4_t v30;
  const float *v31;
  const float *v32;
  uint32x4_t v33;
  uint32x4_t v34;
  float32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vmlaq_f32(v4, v4, v2);
  v6 = vabdq_f32(v3, vminnmq_f32(vsubq_f32(v5, vrndmq_f32(v5)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v7 = *(int32x4_t *)(a1 + 16);
  v8 = vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v6, v6));
  v9 = vminq_s32(vcvtq_s32_f32(v8), v7);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = (int8x16_t)vmulq_s32(v11, v9);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v12.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v13 = vbslq_s8((int8x16_t)vcgtq_s32(v7, v9), (int8x16_t)v11, *(int8x16_t *)(a1 + 48));
  v14 = v13.i32[2];
  v15 = v12.i32[0] + (uint64_t)v13.i32[0];
  v16 = v12.i32[0] + (uint64_t)v13.i32[1];
  v17 = (int)v16 + (uint64_t)v13.i32[0];
  v18 = (const float *)(v10 + v12.i32[0]);
  v20 = (uint32x4_t)vld1q_dup_f32(v18);
  v19 = (const float *)((char *)v18 + v14);
  v21.i64[0] = 0xFF000000FFLL;
  v21.i64[1] = 0xFF000000FFLL;
  v22 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v23 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v20, (uint32x4_t)xmmword_1B2245E80), v21)), v22);
  v24 = (const float *)(v10 + v15);
  v26 = (uint32x4_t)vld1q_dup_f32(v24);
  v25 = (const float *)((char *)v24 + v14);
  v27 = (const float *)(v10 + v16);
  v29 = (uint32x4_t)vld1q_dup_f32(v27);
  v28 = (const float *)((char *)v27 + v14);
  v30 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), v21)), v22);
  v31 = (const float *)(v10 + v17);
  v33 = (uint32x4_t)vld1q_dup_f32(v31);
  v32 = (const float *)((char *)v31 + v14);
  v34 = (uint32x4_t)vld1q_dup_f32(v19);
  v35 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), v21)), v22);
  v36 = (uint32x4_t)vld1q_dup_f32(v25);
  v37 = (uint32x4_t)vld1q_dup_f32(v28);
  v38 = (uint32x4_t)vld1q_dup_f32(v32);
  v39 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), v21)), v22);
  v40 = vsubq_f32(v8, vrndq_f32(v8));
  v41 = vmlaq_n_f32(v23, vmlaq_f32(vnegq_f32(v23), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v21))), v40.f32[0]);
  v42 = vmlaq_n_f32(v35, vmlaq_f32(vnegq_f32(v35), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v36, (uint32x4_t)xmmword_1B2245E80), v21))), v40.f32[0]);
  v43 = vmlaq_lane_f32(v41, vmlaq_n_f32(vsubq_f32(v30, v41), vmlaq_f32(vnegq_f32(v30), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), v21))), v40.f32[0]), *(float32x2_t *)v40.f32, 1);
  v44 = vmlaq_laneq_f32(v43, vmlaq_lane_f32(vsubq_f32(v42, v43), vmlaq_n_f32(vsubq_f32(v39, v42), vmlaq_f32(vnegq_f32(v39), v22, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v38, (uint32x4_t)xmmword_1B2245E80), v21))), v40.f32[0]), *(float32x2_t *)v40.f32, 1), v40, 2);
  v45 = vmulq_f32(v44, v44);
  v46 = vcgeq_f32(v44, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v46.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v46), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v44), v45, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v44)), vmulq_f32(v45, v45), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v44), v45,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v44))), (int8x16_t)vmulq_f32(v44, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E4540(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  const float *v18;
  const float *v19;
  uint32x4_t v20;
  uint64_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  const float *v25;
  const float *v26;
  uint32x4_t v27;
  const float *v28;
  const float *v29;
  uint32x4_t v30;
  float32x4_t v31;
  const float *v32;
  const float *v33;
  uint32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  float32x4_t v39;
  uint32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vmlaq_f32(v4, v4, v2);
  v6 = vabdq_f32(v3, vminnmq_f32(vsubq_f32(v5, vrndmq_f32(v5)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v7 = *(int32x4_t *)(a1 + 16);
  v8 = vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v6, v6));
  v9 = vminq_s32(vcvtq_s32_f32(v8), v7);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(int32x4_t *)(a1 + 32);
  v12 = (int8x16_t)vmulq_s32(v11, v9);
  *(int32x2_t *)v12.i8 = vadd_s32(*(int32x2_t *)v12.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v12.i32[0] = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v13 = vbslq_s8((int8x16_t)vcgtq_s32(v7, v9), (int8x16_t)v11, *(int8x16_t *)(a1 + 48));
  v14 = v13.i32[2];
  v15 = v13.i32[0];
  v16 = v12.i32[0] + (uint64_t)v13.i32[0];
  v17 = v12.i32[0] + (uint64_t)v13.i32[1];
  v18 = (const float *)(v10 + v12.i32[0]);
  v20 = (uint32x4_t)vld1q_dup_f32(v18);
  v19 = (const float *)((char *)v18 + v14);
  v21 = (int)v17 + (uint64_t)v15;
  v22.i64[0] = 0xFF000000FFLL;
  v22.i64[1] = 0xFF000000FFLL;
  v23 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v24 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v20, (uint32x4_t)xmmword_1B2245E80), v22)), v23);
  v25 = (const float *)(v10 + v16);
  v27 = (uint32x4_t)vld1q_dup_f32(v25);
  v26 = (const float *)((char *)v25 + v14);
  v28 = (const float *)(v10 + v17);
  v30 = (uint32x4_t)vld1q_dup_f32(v28);
  v29 = (const float *)((char *)v28 + v14);
  v31 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), v22)), v23);
  v32 = (const float *)(v10 + v21);
  v34 = (uint32x4_t)vld1q_dup_f32(v32);
  v33 = (const float *)((char *)v32 + v14);
  v35 = (uint32x4_t)vld1q_dup_f32(v19);
  v36 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1B2245E80), v22)), v23);
  v37 = (uint32x4_t)vld1q_dup_f32(v26);
  v38 = (uint32x4_t)vld1q_dup_f32(v29);
  v39 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v38, (uint32x4_t)xmmword_1B2245E80), v22)), v23);
  v40 = (uint32x4_t)vld1q_dup_f32(v33);
  v41 = vsubq_f32(v8, vrndq_f32(v8));
  v42 = vmlaq_n_f32(v24, vmlaq_f32(vnegq_f32(v24), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v22))), v41.f32[0]);
  v43 = vmlaq_n_f32(v36, vmlaq_f32(vnegq_f32(v36), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), v22))), v41.f32[0]);
  v44 = vmlaq_lane_f32(v42, vmlaq_n_f32(vsubq_f32(v31, v42), vmlaq_f32(vnegq_f32(v31), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1B2245E80), v22))), v41.f32[0]), *(float32x2_t *)v41.f32, 1);
  v45 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_laneq_f32(v44, vmlaq_lane_f32(vsubq_f32(v43, v44), vmlaq_n_f32(vsubq_f32(v39, v43), vmlaq_f32(vnegq_f32(v39), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v40, (uint32x4_t)xmmword_1B2245E80), v22))), v41.f32[0]), *(float32x2_t *)v41.f32, 1), v41, 2));
  *(_QWORD *)&result = vextq_s8(v45, v45, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E46E0(uint64_t a1, float32x4_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  uint64_t v12;
  int8x16_t v13;
  uint64_t v14;
  __int32 v15;
  uint64_t v16;
  uint64_t v17;
  const float *v18;
  const float *v19;
  uint32x4_t v20;
  uint64_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  const float *v25;
  const float *v26;
  uint32x4_t v27;
  const float *v28;
  const float *v29;
  uint32x4_t v30;
  const float *v31;
  const float *v32;
  uint32x4_t v33;
  float32x4_t v34;
  uint32x4_t v35;
  float32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  float32x4_t v39;
  uint32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int8x16_t v49;
  double result;

  v2 = vsubq_f32(a2, *(float32x4_t *)(a1 + 80));
  v2.i32[3] = 0;
  v3.i64[0] = 0x3F0000003F000000;
  v3.i64[1] = 0x3F0000003F000000;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  v5 = vmlaq_f32(v4, v4, v2);
  v6 = vabdq_f32(v3, vminnmq_f32(vsubq_f32(v5, vrndmq_f32(v5)), (float32x4_t)vdupq_n_s32(0x3F7FFFFFu)));
  v7 = *(int32x4_t *)(a1 + 16);
  v8 = vmulq_f32(*(float32x4_t *)a1, vaddq_f32(v6, v6));
  v9 = vminq_s32(vcvtq_s32_f32(v8), v7);
  v10 = *(int32x4_t *)(a1 + 32);
  v11 = (int8x16_t)vmulq_s32(v10, v9);
  *(int32x2_t *)v11.i8 = vadd_s32(*(int32x2_t *)v11.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  v12 = *(_QWORD *)(a1 + 64);
  v11.i32[0] = vadd_s32(*(int32x2_t *)v11.i8, vdup_lane_s32(*(int32x2_t *)v11.i8, 1)).u32[0];
  v13 = vbslq_s8((int8x16_t)vcgtq_s32(v7, v9), (int8x16_t)v10, *(int8x16_t *)(a1 + 48));
  v14 = v13.i32[2];
  v15 = v13.i32[0];
  v16 = v11.i32[0] + (uint64_t)v13.i32[0];
  v17 = v11.i32[0] + (uint64_t)v13.i32[1];
  v18 = (const float *)(v12 + v11.i32[0]);
  v20 = (uint32x4_t)vld1q_dup_f32(v18);
  v19 = (const float *)((char *)v18 + v14);
  v21 = (int)v17 + (uint64_t)v15;
  v22.i64[0] = 0xFF000000FFLL;
  v22.i64[1] = 0xFF000000FFLL;
  v23 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v24 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v20, (uint32x4_t)xmmword_1B2245E80), v22)), v23);
  v25 = (const float *)(v12 + v16);
  v27 = (uint32x4_t)vld1q_dup_f32(v25);
  v26 = (const float *)((char *)v25 + v14);
  v28 = (const float *)(v12 + v17);
  v30 = (uint32x4_t)vld1q_dup_f32(v28);
  v29 = (const float *)((char *)v28 + v14);
  v31 = (const float *)(v12 + v21);
  v33 = (uint32x4_t)vld1q_dup_f32(v31);
  v32 = (const float *)((char *)v31 + v14);
  v34 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), v22)), v23);
  v35 = (uint32x4_t)vld1q_dup_f32(v19);
  v36 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1B2245E80), v22)), v23);
  v37 = (uint32x4_t)vld1q_dup_f32(v26);
  v38 = (uint32x4_t)vld1q_dup_f32(v29);
  v39 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v38, (uint32x4_t)xmmword_1B2245E80), v22)), v23);
  v40 = (uint32x4_t)vld1q_dup_f32(v32);
  v41 = vsubq_f32(v8, vrndq_f32(v8));
  v42 = vmlaq_n_f32(v24, vmlaq_f32(vnegq_f32(v24), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v22))), v41.f32[0]);
  v43 = vmlaq_n_f32(v36, vmlaq_f32(vnegq_f32(v36), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v37, (uint32x4_t)xmmword_1B2245E80), v22))), v41.f32[0]);
  v44 = vmlaq_lane_f32(v42, vmlaq_n_f32(vsubq_f32(v34, v42), vmlaq_f32(vnegq_f32(v34), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1B2245E80), v22))), v41.f32[0]), *(float32x2_t *)v41.f32, 1);
  v45 = vmlaq_laneq_f32(v44, vmlaq_lane_f32(vsubq_f32(v43, v44), vmlaq_n_f32(vsubq_f32(v39, v43), vmlaq_f32(vnegq_f32(v39), v23, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v40, (uint32x4_t)xmmword_1B2245E80), v22))), v41.f32[0]), *(float32x2_t *)v41.f32, 1), v41, 2);
  v46 = vmulq_f32(v45, v45);
  v47 = vcgeq_f32(v45, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v47.i32[3] = 0;
  v48 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v47), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v45), v46, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v45)), vmulq_f32(v46, v46), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v45), v46,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v45))), (int8x16_t)vmulq_f32(v45, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v48.i32[3] = v45.i32[3];
  v49 = (int8x16_t)vrev64q_s32(v48);
  *(_QWORD *)&result = vextq_s8(v49, v49, 0xCuLL).u64[0];
  return result;
}

float32x4_t vfx_sampler3d_make@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, int32x4_t a6@<Q0>)
{
  uint64_t v6;
  unsigned int v7;
  int32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  unsigned __int32 v12;
  unsigned __int32 v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t result;

  v6 = a2 - 1;
  if (v6 > 9)
    v7 = 2;
  else
    v7 = dword_1B2245ED0[v6];
  v8 = a6;
  v8.i32[3] = 0;
  v9 = vcvtq_f32_s32(v8);
  v10.i64[0] = -1;
  v10.i64[1] = -1;
  *(float32x4_t *)a5 = v9;
  *(int32x4_t *)(a5 + 16) = vaddq_s32(v8, v10);
  v11 = vdupq_n_s32(v7);
  v10.i32[0] = 1;
  v10.i32[1] = a6.i32[0];
  v10.i64[1] = (a6.i32[0] * a6.i32[1]);
  v12 = a6.i32[0] - a6.i32[0] * a6.i32[1];
  v13 = a6.i32[0] * a6.i32[1] - a6.i32[0] * a6.i32[1] * a6.i32[2];
  a6.i8[12] = 0;
  a6.i8[13] = 0;
  a6.i8[14] = 0;
  a6.i8[15] = 0;
  a6.i32[0] = 1 - a6.i32[0];
  a6.i32[1] = v12;
  a6.i32[2] = v13;
  v14 = (uint64_t)*(&off_1E63D5E50[40 * a4] + 10 * a3 + a2);
  *(int32x4_t *)(a5 + 32) = vmulq_s32(v11, v10);
  *(int32x4_t *)(a5 + 48) = vmulq_s32(v11, a6);
  *(_QWORD *)(a5 + 64) = a1;
  *(_QWORD *)(a5 + 72) = v14;
  v15.i64[0] = 0x3F0000003F000000;
  v15.i64[1] = 0x3F0000003F000000;
  result = vdivq_f32(v15, v9);
  *(float32x4_t *)(a5 + 80) = result;
  return result;
}

double sub_1B17E49F4(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v6;
  int32x2_t v7;
  int32x2_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v13;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v6 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v6, v6).u32[0] & 0x80000000) != 0)
    return 0.0;
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
  v8 = vadd_s32(v7, vdup_lane_s32(v7, 1));
  v9 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + v8.i32[0]);
  v10 = (v9 >> 10) & 0x1F;
  if (v10 == 31)
    v11 = 2139095040;
  else
    v11 = (v9 >> 10) & 0x1F;
  if (v10)
    _ZF = v10 == 31;
  else
    _ZF = 1;
  if (_ZF)
    v13 = v11;
  else
    v13 = (v10 << 23) + 939524096;
  v8.i32[0] = v13 | (v9 << 16) & 0x80000000 | (v9 >> 7) & 7 | (8 * (v9 & 0x3FF)) & 0x1FFF | ((v9 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(v8, 0).u64[0];
  return result;
}

double sub_1B17E4A94(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v7;
  int32x2_t v8;
  const float *v9;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0)
    return 0.0;
  v8 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
  v9 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v8, vdup_lane_s32(v8, 1)).i32[0]);
  *(_QWORD *)&result = vld1q_dup_f32(v9).u64[0];
  return result;
}

double sub_1B17E4AEC(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v7;
  int32x2_t v8;
  int16x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int8x16_t v12;
  int32x4_t v13;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0)
    return 0.0;
  v8 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
  v9 = *(int16x4_t *)(*(_QWORD *)(a1 + 32) + vadd_s32(v8, vdup_lane_s32(v8, 1)).i32[0]);
  v10.i64[0] = 0x8000000080000000;
  v10.i64[1] = 0x8000000080000000;
  v11 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v9), v10);
  v12 = (int8x16_t)vshll_n_u16((uint16x4_t)v9, 0xDuLL);
  v13 = (int32x4_t)vorrq_s8(vandq_s8(v12, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v11, vandq_s8(v12, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v11.i64[0] = 0x3800000038000000;
  v11.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v13, v11).u64[0];
  return result;
}

double sub_1B17E4B78(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v7;
  int32x2_t v8;
  __int128 v9;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0)
  {
    *(_QWORD *)&v9 = 0;
  }
  else
  {
    v8 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
    v9 = *(_OWORD *)(*(_QWORD *)(a1 + 32) + vadd_s32(v8, vdup_lane_s32(v8, 1)).i32[0]);
  }
  return *(double *)&v9;
}

double sub_1B17E4BCC(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0)
    return 0.0;
  v8 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
  v9 = vadd_s32(v8, vdup_lane_s32(v8, 1));
  v9.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v9.i32[0]);
  *(float *)v9.i32 = (float)v9.u32[0] * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(v9, 0).u64[0];
  return result;
}

double sub_1B17E4C34(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x4_t v10;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0)
    return 0.0;
  v8 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
  v9 = vdup_lane_s32(v8, 1);
  v8.i32[0] = vadd_s32(v8, v9).u32[0];
  v8.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v8.i32[0]);
  *(float *)v9.i32 = (float)v8.u32[0] * 0.0039216;
  v10 = vcgeq_f32((float32x4_t)vdupq_lane_s32(v9, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v10.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v10), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)v9.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)v9.i32), *(float *)v9.i32 * *(float *)v9.i32), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)v9.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)v9.i32),
                                        *(float *)v9.i32 * *(float *)v9.i32),
                                      (float)(*(float *)v9.i32 * *(float *)v9.i32)
                                    * (float)(*(float *)v9.i32 * *(float *)v9.i32)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)v9.i32)).u64[0];
  return result;
}

double sub_1B17E4D50(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v7;
  int32x2_t v8;
  const float *v9;
  uint32x4_t v10;
  int8x16_t v11;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0)
    return 0.0;
  v8 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
  v9 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v8, vdup_lane_s32(v8, 1)).i32[0]);
  v10 = (uint32x4_t)vld1q_dup_f32(v9);
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B2245E80), v11)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17E4DD0(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v7;
  int32x2_t v8;
  const float *v9;
  uint32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0)
    return 0.0;
  v8 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
  v9 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v8, vdup_lane_s32(v8, 1)).i32[0]);
  v10 = (uint32x4_t)vld1q_dup_f32(v9);
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  v12 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B2245E80), v11));
  v13 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v14 = vmulq_f32(v13, v13);
  v15 = vmulq_f32(v14, v14);
  v16 = vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v12), v14, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v12));
  v17 = vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v12), v14, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v12));
  v18 = vcgeq_f32(v13, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v18.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v18), (int8x16_t)vmlaq_f32(v17, v15, v16), (int8x16_t)vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17E4EF4(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v7;
  int32x2_t v8;
  const float *v9;
  uint32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0)
    return 0.0;
  v8 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
  v9 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v8, vdup_lane_s32(v8, 1)).i32[0]);
  v10 = (uint32x4_t)vld1q_dup_f32(v9);
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  v12 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B2245E80), v11)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v12, v12, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E4F7C(uint64_t a1, float32x2_t a2)
{
  uint32x2_t v7;
  int32x2_t v8;
  const float *v9;
  uint32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(a2, _D1), (int8x8_t)vcltz_f32(a2));
  if ((vpmax_u32(v7, v7).u32[0] & 0x80000000) != 0)
    return 0.0;
  v8 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, a2)), *(int32x2_t *)(a1 + 8)));
  v9 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v8, vdup_lane_s32(v8, 1)).i32[0]);
  v10 = (uint32x4_t)vld1q_dup_f32(v9);
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  v12 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B2245E80), v11));
  v13 = vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v14 = vmulq_f32(v13, v13);
  v15 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v12), v14, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v12)), vmulq_f32(v14, v14), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v12), v14, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v12)));
  v16 = vcgeq_f32(v13, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v16.i32[3] = 0;
  v17 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v16), v15, (int8x16_t)vmulq_f32(v12, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v17.i32[3] = v13.i32[3];
  v18 = (int8x16_t)vrev64q_s32(v17);
  *(_QWORD *)&result = vextq_s8(v18, v18, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E50A8(uint64_t a1, float32x2_t a2)
{
  int32x2_t v6;
  int32x2_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v12;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v6 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  v7 = vadd_s32(v6, vdup_lane_s32(v6, 1));
  v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + v7.i32[0]);
  v9 = (v8 >> 10) & 0x1F;
  if (v9 == 31)
    v10 = 2139095040;
  else
    v10 = (v8 >> 10) & 0x1F;
  if (v9)
    _ZF = v9 == 31;
  else
    _ZF = 1;
  if (_ZF)
    v12 = v10;
  else
    v12 = (v9 << 23) + 939524096;
  v7.i32[0] = v12 | (v8 << 16) & 0x80000000 | (v8 >> 7) & 7 | (8 * (v8 & 0x3FF)) & 0x1FFF | ((v8 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(v7, 0).u64[0];
  return result;
}

double sub_1B17E5134(uint64_t a1, float32x2_t a2)
{
  int32x2_t v7;
  const float *v8;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  v8 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v7, vdup_lane_s32(v7, 1)).i32[0]);
  *(_QWORD *)&result = vld1q_dup_f32(v8).u64[0];
  return result;
}

double sub_1B17E5178(uint64_t a1, float32x2_t a2)
{
  int32x2_t v7;
  int16x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  v8 = *(int16x4_t *)(*(_QWORD *)(a1 + 32) + vadd_s32(v7, vdup_lane_s32(v7, 1)).i32[0]);
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v10 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v8), v9);
  v11 = (int8x16_t)vshll_n_u16((uint16x4_t)v8, 0xDuLL);
  v12 = (int32x4_t)vorrq_s8(vandq_s8(v11, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v10, vandq_s8(v11, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v10.i64[0] = 0x3800000038000000;
  v10.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v12, v10).u64[0];
  return result;
}

__n128 sub_1B17E51F0(uint64_t a1, float32x2_t a2)
{
  int32x2_t v7;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  return *(__n128 *)(*(_QWORD *)(a1 + 32) + vadd_s32(v7, vdup_lane_s32(v7, 1)).i32[0]);
}

double sub_1B17E5230(uint64_t a1, float32x2_t a2)
{
  int32x2_t v7;
  int32x2_t v8;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  v8 = vadd_s32(v7, vdup_lane_s32(v7, 1));
  v8.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v8.i32[0]);
  *(float *)v8.i32 = (float)v8.u32[0] * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(v8, 0).u64[0];
  return result;
}

double sub_1B17E5284(uint64_t a1, float32x2_t a2)
{
  int32x2_t v7;
  int32x2_t v8;
  int32x4_t v9;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  v8 = vdup_lane_s32(v7, 1);
  v7.i32[0] = vadd_s32(v7, v8).u32[0];
  v7.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v7.i32[0]);
  *(float *)v8.i32 = (float)v7.u32[0] * 0.0039216;
  v9 = vcgeq_f32((float32x4_t)vdupq_lane_s32(v8, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v9.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v9), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)v8.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)v8.i32), *(float *)v8.i32 * *(float *)v8.i32), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)v8.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)v8.i32),
                                        *(float *)v8.i32 * *(float *)v8.i32),
                                      (float)(*(float *)v8.i32 * *(float *)v8.i32)
                                    * (float)(*(float *)v8.i32 * *(float *)v8.i32)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)v8.i32)).u64[0];
  return result;
}

double sub_1B17E538C(uint64_t a1, float32x2_t a2)
{
  int32x2_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  v8 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v7, vdup_lane_s32(v7, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17E53F8(uint64_t a1, float32x2_t a2)
{
  int32x2_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  v8 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v7, vdup_lane_s32(v7, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10));
  v12 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v13 = vmulq_f32(v12, v12);
  v14 = vcgeq_f32(v12, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v14.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v14), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v11), v13, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v11)), vmulq_f32(v13, v13), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v11), v13,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v11))), (int8x16_t)vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17E5508(uint64_t a1, float32x2_t a2)
{
  int32x2_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  int8x16_t v11;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  v8 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v7, vdup_lane_s32(v7, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v11, v11, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E557C(uint64_t a1, float32x2_t a2)
{
  int32x2_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vmaxnm_f32(a2, 0), _D1))), *(int32x2_t *)(a1 + 8)));
  v8 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v7, vdup_lane_s32(v7, 1)).i32[0]);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10));
  v12 = vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v13 = vmulq_f32(v12, v12);
  v14 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v11), v13, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v11)), vmulq_f32(v13, v13), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v11), v13, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v11)));
  v15 = vcgeq_f32(v12, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v15.i32[3] = 0;
  v16 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v15), v14, (int8x16_t)vmulq_f32(v11, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v16.i32[3] = v12.i32[3];
  v17 = (int8x16_t)vrev64q_s32(v16);
  *(_QWORD *)&result = vextq_s8(v17, v17, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E5694(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;
  int32x2_t v3;
  unsigned int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  double result;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  v3 = vadd_s32(v2, vdup_lane_s32(v2, 1));
  v4 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + v3.i32[0]);
  v5 = (v4 >> 10) & 0x1F;
  if (v5 == 31)
    v6 = 2139095040;
  else
    v6 = (v4 >> 10) & 0x1F;
  if (v5)
    v7 = v5 == 31;
  else
    v7 = 1;
  if (v7)
    v8 = v6;
  else
    v8 = (v5 << 23) + 939524096;
  v3.i32[0] = v8 | (v4 << 16) & 0x80000000 | (v4 >> 7) & 7 | (8 * (v4 & 0x3FF)) & 0x1FFF | ((v4 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(v3, 0).u64[0];
  return result;
}

double sub_1B17E5724(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;
  const float *v3;
  double result;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  v3 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v2, vdup_lane_s32(v2, 1)).i32[0]);
  *(_QWORD *)&result = vld1q_dup_f32(v3).u64[0];
  return result;
}

double sub_1B17E576C(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;
  int16x4_t v3;
  int8x16_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  double result;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  v3 = *(int16x4_t *)(*(_QWORD *)(a1 + 32) + vadd_s32(v2, vdup_lane_s32(v2, 1)).i32[0]);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v5 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v3), v4);
  v6 = (int8x16_t)vshll_n_u16((uint16x4_t)v3, 0xDuLL);
  v7 = (int32x4_t)vorrq_s8(vandq_s8(v6, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v5, vandq_s8(v6, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v5.i64[0] = 0x3800000038000000;
  v5.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v7, v5).u64[0];
  return result;
}

__n128 sub_1B17E57E8(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  return *(__n128 *)(*(_QWORD *)(a1 + 32) + vadd_s32(v2, vdup_lane_s32(v2, 1)).i32[0]);
}

double sub_1B17E582C(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;
  int32x2_t v3;
  double result;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  v3 = vadd_s32(v2, vdup_lane_s32(v2, 1));
  v3.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v3.i32[0]);
  *(float *)v3.i32 = (float)v3.u32[0] * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(v3, 0).u64[0];
  return result;
}

double sub_1B17E5884(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;
  int32x2_t v3;
  int32x4_t v4;
  double result;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  v3 = vdup_lane_s32(v2, 1);
  v2.i32[0] = vadd_s32(v2, v3).u32[0];
  v2.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v2.i32[0]);
  *(float *)v3.i32 = (float)v2.u32[0] * 0.0039216;
  v4 = vcgeq_f32((float32x4_t)vdupq_lane_s32(v3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v4.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v4), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)v3.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)v3.i32), *(float *)v3.i32 * *(float *)v3.i32), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)v3.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)v3.i32),
                                        *(float *)v3.i32 * *(float *)v3.i32),
                                      (float)(*(float *)v3.i32 * *(float *)v3.i32)
                                    * (float)(*(float *)v3.i32 * *(float *)v3.i32)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)v3.i32)).u64[0];
  return result;
}

double sub_1B17E5990(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  double result;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  v3 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v2, vdup_lane_s32(v2, 1)).i32[0]);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17E5A00(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  double result;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  v3 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v2, vdup_lane_s32(v2, 1)).i32[0]);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v9.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v9), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6))), (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17E5B14(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  double result;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  v3 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v2, vdup_lane_s32(v2, 1)).i32[0]);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v6, v6, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E5B8C(uint64_t a1, float32x2_t a2)
{
  int32x2_t v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  double result;

  v2 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(a2, vrndm_f32(a2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)))), *(int32x2_t *)(a1 + 8)));
  v3 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v2, vdup_lane_s32(v2, 1)).i32[0]);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6)));
  v10 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v10.i32[3] = 0;
  v11 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v10), v9, (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v11.i32[3] = v7.i32[3];
  v12 = (int8x16_t)vrev64q_s32(v11);
  *(_QWORD *)&result = vextq_s8(v12, v12, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E5CA8(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  int32x2_t v5;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  v5 = vadd_s32(v4, vdup_lane_s32(v4, 1));
  v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + v5.i32[0]);
  v7 = (v6 >> 10) & 0x1F;
  if (v7 == 31)
    v8 = 2139095040;
  else
    v8 = (v6 >> 10) & 0x1F;
  if (v7)
    v9 = v7 == 31;
  else
    v9 = 1;
  if (v9)
    v10 = v8;
  else
    v10 = (v7 << 23) + 939524096;
  v5.i32[0] = v10 | (v6 << 16) & 0x80000000 | (v6 >> 7) & 7 | (8 * (v6 & 0x3FF)) & 0x1FFF | ((v6 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(v5, 0).u64[0];
  return result;
}

double sub_1B17E5D4C(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  const float *v5;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  v5 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v4, vdup_lane_s32(v4, 1)).i32[0]);
  *(_QWORD *)&result = vld1q_dup_f32(v5).u64[0];
  return result;
}

double sub_1B17E5DA8(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  int16x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int32x4_t v9;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  v5 = *(int16x4_t *)(*(_QWORD *)(a1 + 32) + vadd_s32(v4, vdup_lane_s32(v4, 1)).i32[0]);
  v6.i64[0] = 0x8000000080000000;
  v6.i64[1] = 0x8000000080000000;
  v7 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v5), v6);
  v8 = (int8x16_t)vshll_n_u16((uint16x4_t)v5, 0xDuLL);
  v9 = (int32x4_t)vorrq_s8(vandq_s8(v8, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v7, vandq_s8(v8, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v7.i64[0] = 0x3800000038000000;
  v7.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v9, v7).u64[0];
  return result;
}

__n128 sub_1B17E5E38(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  return *(__n128 *)(*(_QWORD *)(a1 + 32) + vadd_s32(v4, vdup_lane_s32(v4, 1)).i32[0]);
}

double sub_1B17E5E90(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  int32x2_t v5;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  v5 = vadd_s32(v4, vdup_lane_s32(v4, 1));
  v5.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v5.i32[0]);
  *(float *)v5.i32 = (float)v5.u32[0] * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(v5, 0).u64[0];
  return result;
}

double sub_1B17E5EFC(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  int32x2_t v5;
  int32x4_t v6;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  v5 = vdup_lane_s32(v4, 1);
  v4.i32[0] = vadd_s32(v4, v5).u32[0];
  v4.i8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 32) + v4.i32[0]);
  *(float *)v5.i32 = (float)v4.u32[0] * 0.0039216;
  v6 = vcgeq_f32((float32x4_t)vdupq_lane_s32(v5, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v6.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v6), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)v5.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)v5.i32), *(float *)v5.i32 * *(float *)v5.i32), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)v5.i32), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)v5.i32),
                                        *(float *)v5.i32 * *(float *)v5.i32),
                                      (float)(*(float *)v5.i32 * *(float *)v5.i32)
                                    * (float)(*(float *)v5.i32 * *(float *)v5.i32)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)v5.i32)).u64[0];
  return result;
}

double sub_1B17E601C(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  const float *v5;
  uint32x4_t v6;
  int8x16_t v7;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  v5 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v4, vdup_lane_s32(v4, 1)).i32[0]);
  v6 = (uint32x4_t)vld1q_dup_f32(v5);
  v7.i64[0] = 0xFF000000FFLL;
  v7.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B2245E80), v7)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17E60A0(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  const float *v5;
  uint32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  v5 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v4, vdup_lane_s32(v4, 1)).i32[0]);
  v6 = (uint32x4_t)vld1q_dup_f32(v5);
  v7.i64[0] = 0xFF000000FFLL;
  v7.i64[1] = 0xFF000000FFLL;
  v8 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B2245E80), v7));
  v9 = vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v10 = vmulq_f32(v9, v9);
  v11 = vcgeq_f32(v9, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v11.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v11), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v8), v10, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v8)), vmulq_f32(v10, v10), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v8), v10,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v8))), (int8x16_t)vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17E61C8(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  const float *v5;
  uint32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  v5 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v4, vdup_lane_s32(v4, 1)).i32[0]);
  v6 = (uint32x4_t)vld1q_dup_f32(v5);
  v7.i64[0] = 0xFF000000FFLL;
  v7.i64[1] = 0xFF000000FFLL;
  v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B2245E80), v7)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v8, v8, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E6254(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  const float *v5;
  uint32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, a2);
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = vmul_s32(*(int32x2_t *)(a1 + 16), vmin_s32(vcvt_s32_f32(vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3))), *(int32x2_t *)(a1 + 8)));
  v5 = (const float *)(*(_QWORD *)(a1 + 32) + vadd_s32(v4, vdup_lane_s32(v4, 1)).i32[0]);
  v6 = (uint32x4_t)vld1q_dup_f32(v5);
  v7.i64[0] = 0xFF000000FFLL;
  v7.i64[1] = 0xFF000000FFLL;
  v8 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B2245E80), v7));
  v9 = vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v10 = vmulq_f32(v9, v9);
  v11 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v8), v10, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v8)), vmulq_f32(v10, v10), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v8), v10, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v8)));
  v12 = vcgeq_f32(v9, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v12.i32[3] = 0;
  v13 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v12), v11, (int8x16_t)vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v13.i32[3] = v9.i32[3];
  v14 = (int8x16_t)vrev64q_s32(v13);
  *(_QWORD *)&result = vextq_s8(v14, v14, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E6384(float32x2_t *a1, float32x2_t a2, double a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, float32x4_t a8)
{
  float32x2_t v8;
  uint32x2_t v13;
  int32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  float32x4_t v39;
  unsigned int v40;
  int v41;
  int v42;
  BOOL v43;
  float32x2_t v44;
  float32x4_t v45;
  float32x4_t v46;
  double result;

  v8 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v13 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v8, _D1), (int8x8_t)vcltz_f32(v8));
  if ((vpmax_u32(v13, v13).u32[0] & 0x80000000) != 0)
    return 0.0;
  v14 = (int32x2_t)a1[1];
  v15 = vmul_f32(*a1, v8);
  v16 = vmin_s32(vcvt_s32_f32(v15), v14);
  v17 = a1[4];
  *(float32x2_t *)a5.f32 = a1[2];
  *(int8x8_t *)a6.f32 = vand_s8(*(int8x8_t *)a5.f32, (int8x8_t)vcgt_s32(v14, v16));
  v18 = vmul_s32(*(int32x2_t *)a5.f32, v16);
  *(int32x2_t *)a4.f32 = vdup_lane_s32(v18, 1);
  v19 = vadd_s32(v18, *(int32x2_t *)a4.f32).i32[0];
  v20 = *(unsigned __int16 *)(*(_QWORD *)&v17 + v19);
  v21 = (v20 >> 10) & 0x1F;
  if (v21 == 31)
    v22 = 2139095040;
  else
    v22 = (v20 >> 10) & 0x1F;
  if (v21)
    _ZF = v21 == 31;
  else
    _ZF = 1;
  if (_ZF)
    v24 = v22;
  else
    v24 = (v21 << 23) + 939524096;
  a4.i32[0] = v24 | (v20 << 16) & 0x80000000 | (v20 >> 7) & 7 | (8 * (v20 & 0x3FF)) & 0x1FFF | ((v20 & 0x3FF) << 13);
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0);
  v26 = v19 + a6.i32[0];
  v27 = v19 + a6.i32[1];
  v28 = (int)v27 + (uint64_t)a6.i32[0];
  v29 = *(unsigned __int16 *)(*(_QWORD *)&v17 + v26);
  v30 = (v29 >> 10) & 0x1F;
  if (v30 == 31)
    v31 = 2139095040;
  else
    v31 = (v29 >> 10) & 0x1F;
  if (v30)
    v32 = v30 == 31;
  else
    v32 = 1;
  if (v32)
    v33 = v31;
  else
    v33 = (v30 << 23) + 939524096;
  a5.i32[0] = v33 | (v29 << 16) & 0x80000000 | (v29 >> 7) & 7 | (8 * (v29 & 0x3FF)) & 0x1FFF | ((v29 & 0x3FF) << 13);
  v34 = *(unsigned __int16 *)(*(_QWORD *)&v17 + v27);
  v35 = (v34 >> 10) & 0x1F;
  if (v35 == 31)
    v36 = 2139095040;
  else
    v36 = (v34 >> 10) & 0x1F;
  if (v35)
    v37 = v35 == 31;
  else
    v37 = 1;
  if (v37)
    v38 = v36;
  else
    v38 = (v35 << 23) + 939524096;
  a6.i32[0] = v38 | (v34 << 16) & 0x80000000 | (v34 >> 7) & 7 | (8 * (v34 & 0x3FF)) & 0x1FFF | ((v34 & 0x3FF) << 13);
  v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.f32, 0);
  v40 = *(unsigned __int16 *)(*(_QWORD *)&v17 + v28);
  v41 = (v40 >> 10) & 0x1F;
  if (v41 == 31)
    v42 = 2139095040;
  else
    v42 = (v40 >> 10) & 0x1F;
  if (v41)
    v43 = v41 == 31;
  else
    v43 = 1;
  if (!v43)
    v42 = (v41 << 23) + 939524096;
  a8.i32[0] = v42 | (v40 << 16) & 0x80000000 | (v40 >> 7) & 7 | (8 * (v40 & 0x3FF)) & 0x1FFF | ((v40 & 0x3FF) << 13);
  v44 = vsub_f32(v15, vrnd_f32(v15));
  v45 = (float32x4_t)vdupq_lane_s32((int32x2_t)v44, 0);
  v46 = vmlaq_n_f32(v25, v45, vsubq_f32(a5, a4).f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v46, vmlaq_n_f32(vsubq_f32(v39, v46), v45, vsubq_f32(a8, a6).f32[0]), v44, 1).u64[0];
  return result;
}

double sub_1B17E6544(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  uint32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  int8x8_t v14;
  int32x2_t v15;
  int32x2_t v16;
  uint64_t v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  double result;

  v2 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v8 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v2, _D1), (int8x8_t)vcltz_f32(v2));
  if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) != 0)
    return 0.0;
  v9 = (int32x2_t)a1[1];
  v10 = vmul_f32(*a1, v2);
  v11 = vmin_s32(vcvt_s32_f32(v10), v9);
  v12 = a1[4];
  v13 = (int32x2_t)a1[2];
  v14 = (int8x8_t)vcgt_s32(v9, v11);
  v15 = vmul_s32(v13, v11);
  v16 = vdup_lane_s32(v15, 1);
  v17 = vadd_s32(v15, v16).i32[0];
  v16.i32[0] = *(_DWORD *)(*(_QWORD *)&v12 + v17);
  v18 = (int32x2_t)vand_s8((int8x8_t)v13, v14);
  v19 = v17 + v18.i32[0];
  v20 = v17 + v18.i32[1];
  v13.i32[0] = *(_DWORD *)(*(_QWORD *)&v12 + v20);
  v21 = *(float *)(*(_QWORD *)&v12 + (int)v20 + (uint64_t)v18.i32[0]);
  v22 = vsub_f32(v10, vrnd_f32(v10));
  *(float *)v18.i32 = *(float *)(*(_QWORD *)&v12 + v19) - *(float *)v16.i32;
  v23 = (float32x4_t)vdupq_lane_s32(v18, 0);
  v24 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v16, 0), v23, v22.f32[0]);
  v23.f32[0] = v21 - *(float *)v13.i32;
  *(_QWORD *)&result = vmlaq_lane_f32(v24, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(v13, 0), v24), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 0), v22.f32[0]), v22, 1).u64[0];
  return result;
}

double sub_1B17E6600(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  uint32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  int8x8_t v14;
  int32x2_t v15;
  uint64_t v16;
  int16x4_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int16x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x4_t v38;
  double result;

  v2 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v8 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v2, _D1), (int8x8_t)vcltz_f32(v2));
  if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) != 0)
    return 0.0;
  v9 = (int32x2_t)a1[1];
  v10 = vmul_f32(*a1, v2);
  v11 = vmin_s32(vcvt_s32_f32(v10), v9);
  v12 = a1[4];
  v13 = (int32x2_t)a1[2];
  v14 = vand_s8((int8x8_t)v13, (int8x8_t)vcgt_s32(v9, v11));
  v15 = vmul_s32(v13, v11);
  v16 = vadd_s32(v15, vdup_lane_s32(v15, 1)).i32[0];
  v17 = *(int16x4_t *)(*(_QWORD *)&v12 + v16);
  v18.i64[0] = 0x8000000080000000;
  v18.i64[1] = 0x8000000080000000;
  v19 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v17), v18);
  v20 = (int8x16_t)vshll_n_u16((uint16x4_t)v17, 0xDuLL);
  v21 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v22 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v23 = (int32x4_t)vorrq_s8(vandq_s8(v20, v22), vorrq_s8((int8x16_t)v19, vandq_s8(v20, v21)));
  v19.i64[0] = 0x3800000038000000;
  v19.i64[1] = 0x3800000038000000;
  v24 = (float32x4_t)vaddq_s32(v23, v19);
  v25 = v16 + v14.i32[0];
  v26 = v16 + v14.i32[1];
  v27 = (int)v26 + (uint64_t)v14.i32[0];
  v28 = *(int16x4_t *)(*(_QWORD *)&v12 + v25);
  v29 = vandq_s8((int8x16_t)vmovl_s16(v28), v18);
  v30 = (int8x16_t)vshll_n_u16((uint16x4_t)v28, 0xDuLL);
  v31 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v30, v22), vorrq_s8(v29, vandq_s8(v30, v21))), v19);
  v29.i64[0] = *(_QWORD *)(*(_QWORD *)&v12 + v26);
  v32 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v29.i8), v18);
  v33 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v29.i8, 0xDuLL);
  v34 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v33, v22), vorrq_s8(v32, vandq_s8(v33, v21))), v19);
  v32.i64[0] = *(_QWORD *)(*(_QWORD *)&v12 + v27);
  v35 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v32.i8), v18);
  v36 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v32.i8, 0xDuLL);
  v37 = vsub_f32(v10, vrnd_f32(v10));
  v38 = vmlaq_n_f32(v24, vsubq_f32(v31, v24), v37.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v38, vmlaq_n_f32(vsubq_f32(v34, v38), vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v36, v22), vorrq_s8(v35, vandq_s8(v36, v21))), v19), v34), v37.f32[0]), v37, 1).u64[0];
  return result;
}

double sub_1B17E6744(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  uint32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  int8x8_t v14;
  int32x2_t v15;
  uint64_t v16;
  float32x2_t v17;
  float32x4_t v18;
  double result;

  v2 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v8 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v2, _D1), (int8x8_t)vcltz_f32(v2));
  if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) != 0)
    return 0.0;
  v9 = (int32x2_t)a1[1];
  v10 = vmul_f32(*a1, v2);
  v11 = vmin_s32(vcvt_s32_f32(v10), v9);
  v12 = a1[4];
  v13 = (int32x2_t)a1[2];
  v14 = vand_s8((int8x8_t)v13, (int8x8_t)vcgt_s32(v9, v11));
  v15 = vmul_s32(v13, v11);
  v16 = vadd_s32(v15, vdup_lane_s32(v15, 1)).i32[0];
  v17 = vsub_f32(v10, vrnd_f32(v10));
  v18 = vmlaq_n_f32(*(float32x4_t *)(*(_QWORD *)&v12 + v16), vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v12 + v16 + v14.i32[0]), *(float32x4_t *)(*(_QWORD *)&v12 + v16)), v17.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v18, vmlaq_n_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v12 + v16 + v14.i32[1]), v18), vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v12 + (int)v16 + v14.i32[1] + (uint64_t)v14.i32[0]), *(float32x4_t *)(*(_QWORD *)&v12 + v16 + v14.i32[1])), v17.f32[0]), v17, 1).u64[0];
  return result;
}

double sub_1B17E67F0(float32x2_t *a1, float32x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  float32x2_t v9;
  uint32x2_t v15;
  int32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  float32x2_t v19;
  int32x2_t v20;
  int8x8_t v21;
  int32x2_t v22;
  int32x2_t v23;
  uint64_t v24;
  int32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  double result;

  v9 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v15 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v9, _D1), (int8x8_t)vcltz_f32(v9));
  if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) != 0)
    return 0.0;
  v16 = (int32x2_t)a1[1];
  v17 = vmul_f32(*a1, v9);
  v18 = vmin_s32(vcvt_s32_f32(v17), v16);
  v19 = a1[4];
  v20 = (int32x2_t)a1[2];
  v21 = (int8x8_t)vcgt_s32(v16, v18);
  v22 = vmul_s32(v20, v18);
  v23 = vdup_lane_s32(v22, 1);
  v22.i32[0] = vadd_s32(v22, v23).u32[0];
  v24 = v22.i32[0];
  v25 = (int32x2_t)vand_s8((int8x8_t)v20, v21);
  v22.i8[0] = *(_BYTE *)(*(_QWORD *)&v19 + v22.i32[0]);
  *(float *)v23.i32 = (float)v22.u32[0] * 0.0039216;
  v26 = v24 + v25.i32[0];
  v27 = v24 + v25.i32[1];
  v28 = (int)v27 + (uint64_t)v25.i32[0];
  v25.i8[0] = *(_BYTE *)(*(_QWORD *)&v19 + v26);
  LOBYTE(a7) = *(_BYTE *)(*(_QWORD *)&v19 + v27);
  *(float *)&a7 = (float)LODWORD(a7) * 0.0039216;
  LOBYTE(a9) = *(_BYTE *)(*(_QWORD *)&v19 + v28);
  v29 = vsub_f32(v17, vrnd_f32(v17));
  *(float *)v25.i32 = -(float)(*(float *)v23.i32 - (float)((float)v25.u32[0] * 0.0039216));
  v30 = (float32x4_t)vdupq_lane_s32(v25, 0);
  v31 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v23, 0), v30, v29.f32[0]);
  v30.f32[0] = -(float)(*(float *)&a7 - (float)((float)LODWORD(a9) * 0.0039216));
  *(_QWORD *)&result = vmlaq_lane_f32(v31, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0), v31), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 0), v29.f32[0]), v29, 1).u64[0];
  return result;
}

double sub_1B17E68CC(float32x2_t *a1, float32x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  float32x2_t v9;
  uint32x2_t v15;
  int32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  float32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  double result;

  v9 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v15 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v9, _D1), (int8x8_t)vcltz_f32(v9));
  if ((vpmax_u32(v15, v15).u32[0] & 0x80000000) != 0)
    return 0.0;
  v16 = (int32x2_t)a1[1];
  v17 = vmul_f32(*a1, v9);
  v18 = vmin_s32(vcvt_s32_f32(v17), v16);
  v19 = a1[4];
  v20 = (int32x2_t)a1[2];
  v21 = (int32x2_t)vand_s8((int8x8_t)v20, (int8x8_t)vcgt_s32(v16, v18));
  v22 = vmul_s32(v20, v18);
  v22.i32[0] = vadd_s32(v22, vdup_lane_s32(v22, 1)).u32[0];
  v23 = v22.i32[0];
  v22.i8[0] = *(_BYTE *)(*(_QWORD *)&v19 + v22.i32[0]);
  *(float *)&a6 = (float)v22.u32[0] * 0.0039216;
  v24 = v23 + v21.i32[0];
  v25 = v23 + v21.i32[1];
  v26 = (int)v25 + (uint64_t)v21.i32[0];
  v21.i8[0] = *(_BYTE *)(*(_QWORD *)&v19 + v24);
  LOBYTE(a7) = *(_BYTE *)(*(_QWORD *)&v19 + v25);
  *(float *)&a7 = (float)LODWORD(a7) * 0.0039216;
  LOBYTE(a9) = *(_BYTE *)(*(_QWORD *)&v19 + v26);
  v27 = vsub_f32(v17, vrnd_f32(v17));
  *(float *)v21.i32 = -(float)(*(float *)&a6 - (float)((float)v21.u32[0] * 0.0039216));
  v28 = (float32x4_t)vdupq_lane_s32(v21, 0);
  v29 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0), v28, v27.f32[0]);
  v28.f32[0] = -(float)(*(float *)&a7 - (float)((float)LODWORD(a9) * 0.0039216));
  v30 = vmlaq_lane_f32(v29, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0), v29), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0), v27.f32[0]), v27, 1);
  v31 = vmulq_f32(v30, v30);
  v32 = vcgeq_f32(v30, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v32.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v32), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v30), v31, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v30)), vmulq_f32(v31, v31), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v30), v31,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v30))), (int8x16_t)vmulq_f32(v30, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E6A5C(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  uint32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  int8x8_t v14;
  int32x2_t v15;
  int8x8_t v16;
  uint64_t v17;
  const float *v18;
  uint32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const float *v26;
  uint32x4_t v27;
  const float *v28;
  uint32x4_t v29;
  float32x4_t v30;
  const float *v31;
  uint32x4_t v32;
  float32x2_t v33;
  float32x4_t v34;
  double result;

  v2 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v8 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v2, _D1), (int8x8_t)vcltz_f32(v2));
  if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) != 0)
    return 0.0;
  v9 = (int32x2_t)a1[1];
  v10 = vmul_f32(*a1, v2);
  v11 = vmin_s32(vcvt_s32_f32(v10), v9);
  v12 = a1[4];
  v13 = (int32x2_t)a1[2];
  v14 = (int8x8_t)vcgt_s32(v9, v11);
  v15 = vmul_s32(v13, v11);
  v16 = vand_s8((int8x8_t)v13, v14);
  v17 = vadd_s32(v15, vdup_lane_s32(v15, 1)).i32[0];
  v18 = (const float *)(*(_QWORD *)&v12 + v17);
  v19 = (uint32x4_t)vld1q_dup_f32(v18);
  v20.i64[0] = 0xFF000000FFLL;
  v20.i64[1] = 0xFF000000FFLL;
  v21 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v22 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v19, (uint32x4_t)xmmword_1B2245E80), v20)), v21);
  v23 = v17 + v16.i32[0];
  v24 = v17 + v16.i32[1];
  v25 = (int)v24 + (uint64_t)v16.i32[0];
  v26 = (const float *)(*(_QWORD *)&v12 + v23);
  v27 = (uint32x4_t)vld1q_dup_f32(v26);
  v28 = (const float *)(*(_QWORD *)&v12 + v24);
  v29 = (uint32x4_t)vld1q_dup_f32(v28);
  v30 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), v20)), v21);
  v31 = (const float *)(*(_QWORD *)&v12 + v25);
  v32 = (uint32x4_t)vld1q_dup_f32(v31);
  v33 = vsub_f32(v10, vrnd_f32(v10));
  v34 = vmlaq_n_f32(v22, vmlaq_f32(vnegq_f32(v22), v21, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v20))), v33.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v34, vmlaq_n_f32(vsubq_f32(v30, v34), vmlaq_f32(vnegq_f32(v30), v21, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_1B2245E80), v20))), v33.f32[0]), v33, 1).u64[0];
  return result;
}

double sub_1B17E6B70(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  uint32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  int8x8_t v14;
  int32x2_t v15;
  uint64_t v16;
  const float *v17;
  uint32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const float *v25;
  uint32x4_t v26;
  const float *v27;
  uint32x4_t v28;
  float32x4_t v29;
  const float *v30;
  uint32x4_t v31;
  float32x2_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  double result;

  v2 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v8 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v2, _D1), (int8x8_t)vcltz_f32(v2));
  if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) != 0)
    return 0.0;
  v9 = (int32x2_t)a1[1];
  v10 = vmul_f32(*a1, v2);
  v11 = vmin_s32(vcvt_s32_f32(v10), v9);
  v12 = a1[4];
  v13 = (int32x2_t)a1[2];
  v14 = vand_s8((int8x8_t)v13, (int8x8_t)vcgt_s32(v9, v11));
  v15 = vmul_s32(v13, v11);
  v16 = vadd_s32(v15, vdup_lane_s32(v15, 1)).i32[0];
  v17 = (const float *)(*(_QWORD *)&v12 + v16);
  v18 = (uint32x4_t)vld1q_dup_f32(v17);
  v19.i64[0] = 0xFF000000FFLL;
  v19.i64[1] = 0xFF000000FFLL;
  v20 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v21 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v18, (uint32x4_t)xmmword_1B2245E80), v19)), v20);
  v22 = v16 + v14.i32[0];
  v23 = v16 + v14.i32[1];
  v24 = (int)v23 + (uint64_t)v14.i32[0];
  v25 = (const float *)(*(_QWORD *)&v12 + v22);
  v26 = (uint32x4_t)vld1q_dup_f32(v25);
  v27 = (const float *)(*(_QWORD *)&v12 + v23);
  v28 = (uint32x4_t)vld1q_dup_f32(v27);
  v29 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1B2245E80), v19)), v20);
  v30 = (const float *)(*(_QWORD *)&v12 + v24);
  v31 = (uint32x4_t)vld1q_dup_f32(v30);
  v32 = vsub_f32(v10, vrnd_f32(v10));
  v33 = vmlaq_n_f32(v21, vmlaq_f32(vnegq_f32(v21), v20, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v19))), v32.f32[0]);
  v34 = vmlaq_lane_f32(v33, vmlaq_n_f32(vsubq_f32(v29, v33), vmlaq_f32(vnegq_f32(v29), v20, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v31, (uint32x4_t)xmmword_1B2245E80), v19))), v32.f32[0]), v32, 1);
  v35 = vmulq_f32(v34, v34);
  v36 = vcgeq_f32(v34, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v36.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v36), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v34), v35, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v34)), vmulq_f32(v35, v35), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v34), v35,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v34))), (int8x16_t)vmulq_f32(v34, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E6D38(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  uint32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  int8x8_t v14;
  int32x2_t v15;
  uint64_t v16;
  const float *v17;
  uint32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const float *v25;
  uint32x4_t v26;
  const float *v27;
  uint32x4_t v28;
  float32x4_t v29;
  const float *v30;
  uint32x4_t v31;
  float32x2_t v32;
  float32x4_t v33;
  int8x16_t v34;
  double result;

  v2 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v8 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v2, _D1), (int8x8_t)vcltz_f32(v2));
  if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) != 0)
    return 0.0;
  v9 = (int32x2_t)a1[1];
  v10 = vmul_f32(*a1, v2);
  v11 = vmin_s32(vcvt_s32_f32(v10), v9);
  v12 = a1[4];
  v13 = (int32x2_t)a1[2];
  v14 = vand_s8((int8x8_t)v13, (int8x8_t)vcgt_s32(v9, v11));
  v15 = vmul_s32(v13, v11);
  v16 = vadd_s32(v15, vdup_lane_s32(v15, 1)).i32[0];
  v17 = (const float *)(*(_QWORD *)&v12 + v16);
  v18 = (uint32x4_t)vld1q_dup_f32(v17);
  v19.i64[0] = 0xFF000000FFLL;
  v19.i64[1] = 0xFF000000FFLL;
  v20 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v21 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v18, (uint32x4_t)xmmword_1B2245E80), v19)), v20);
  v22 = v16 + v14.i32[0];
  v23 = v16 + v14.i32[1];
  v24 = (int)v23 + (uint64_t)v14.i32[0];
  v25 = (const float *)(*(_QWORD *)&v12 + v22);
  v26 = (uint32x4_t)vld1q_dup_f32(v25);
  v27 = (const float *)(*(_QWORD *)&v12 + v23);
  v28 = (uint32x4_t)vld1q_dup_f32(v27);
  v29 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1B2245E80), v19)), v20);
  v30 = (const float *)(*(_QWORD *)&v12 + v24);
  v31 = (uint32x4_t)vld1q_dup_f32(v30);
  v32 = vsub_f32(v10, vrnd_f32(v10));
  v33 = vmlaq_n_f32(v21, vmlaq_f32(vnegq_f32(v21), v20, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v19))), v32.f32[0]);
  v34 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_lane_f32(v33, vmlaq_n_f32(vsubq_f32(v29, v33), vmlaq_f32(vnegq_f32(v29), v20, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v31, (uint32x4_t)xmmword_1B2245E80), v19))), v32.f32[0]), v32, 1));
  *(_QWORD *)&result = vextq_s8(v34, v34, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E6E54(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2;
  uint32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  int8x8_t v14;
  int32x2_t v15;
  uint64_t v16;
  const float *v17;
  uint32x4_t v18;
  int8x8_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const float *v26;
  uint32x4_t v27;
  const float *v28;
  uint32x4_t v29;
  float32x4_t v30;
  const float *v31;
  uint32x4_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  double result;

  v2 = vsub_f32(a2, a1[6]);
  __asm { FMOV            V1.2S, #1.0 }
  v8 = (uint32x2_t)vorr_s8((int8x8_t)vcge_f32(v2, _D1), (int8x8_t)vcltz_f32(v2));
  if ((vpmax_u32(v8, v8).u32[0] & 0x80000000) != 0)
    return 0.0;
  v9 = (int32x2_t)a1[1];
  v10 = vmul_f32(*a1, v2);
  v11 = vmin_s32(vcvt_s32_f32(v10), v9);
  v12 = a1[4];
  v13 = (int32x2_t)a1[2];
  v14 = (int8x8_t)vcgt_s32(v9, v11);
  v15 = vmul_s32(v13, v11);
  v16 = vadd_s32(v15, vdup_lane_s32(v15, 1)).i32[0];
  v17 = (const float *)(*(_QWORD *)&v12 + v16);
  v18 = (uint32x4_t)vld1q_dup_f32(v17);
  v19 = vand_s8((int8x8_t)v13, v14);
  v20.i64[0] = 0xFF000000FFLL;
  v20.i64[1] = 0xFF000000FFLL;
  v21 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v22 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v18, (uint32x4_t)xmmword_1B2245E80), v20)), v21);
  v23 = v16 + v19.i32[0];
  v24 = v16 + v19.i32[1];
  v25 = (int)v24 + (uint64_t)v19.i32[0];
  v26 = (const float *)(*(_QWORD *)&v12 + v23);
  v27 = (uint32x4_t)vld1q_dup_f32(v26);
  v28 = (const float *)(*(_QWORD *)&v12 + v24);
  v29 = (uint32x4_t)vld1q_dup_f32(v28);
  v30 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), v20)), v21);
  v31 = (const float *)(*(_QWORD *)&v12 + v25);
  v32 = (uint32x4_t)vld1q_dup_f32(v31);
  v33 = vsub_f32(v10, vrnd_f32(v10));
  v34 = vmlaq_n_f32(v22, vmlaq_f32(vnegq_f32(v22), v21, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v20))), v33.f32[0]);
  v35 = vmlaq_lane_f32(v34, vmlaq_n_f32(vsubq_f32(v30, v34), vmlaq_f32(vnegq_f32(v30), v21, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v32, (uint32x4_t)xmmword_1B2245E80), v20))), v33.f32[0]), v33, 1);
  v36 = vmulq_f32(v35, v35);
  v37 = vcgeq_f32(v35, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v37.i32[3] = 0;
  v38 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v37), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v35), v36, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v35)), vmulq_f32(v36, v36), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v35), v36,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v35))), (int8x16_t)vmulq_f32(v35, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v38.i32[3] = v35.i32[3];
  v39 = (int8x16_t)vrev64q_s32(v38);
  *(_QWORD *)&result = vextq_s8(v39, v39, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E7024(float32x2_t *a1, float32x2_t a2, double a3, float32x4_t a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  int32x2_t v12;
  float32x2_t v13;
  int32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  signed __int32 v18;
  unsigned int v19;
  int v20;
  int v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  BOOL v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  BOOL v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v12 = (int32x2_t)a1[1];
  v13 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v14 = vmin_s32(vcvt_s32_f32(v13), v12);
  v15 = a1[4];
  v16 = (int32x2_t)a1[2];
  *(int8x8_t *)a4.f32 = vand_s8((int8x8_t)v16, (int8x8_t)vcgt_s32(v12, v14));
  v17 = vmul_s32(v16, v14);
  v18 = vadd_s32(v17, vdup_lane_s32(v17, 1)).u32[0];
  v19 = *(unsigned __int16 *)(*(_QWORD *)&v15 + v18);
  v20 = (v19 >> 10) & 0x1F;
  if (v20 == 31)
    v21 = 2139095040;
  else
    v21 = (v19 >> 10) & 0x1F;
  if (v20)
    _ZF = v20 == 31;
  else
    _ZF = 1;
  if (_ZF)
    v23 = v21;
  else
    v23 = (v20 << 23) + 939524096;
  v24 = v18 + (uint64_t)a4.i32[1];
  v25 = (int)v24 + (uint64_t)a4.i32[0];
  v26 = *(unsigned __int16 *)(*(_QWORD *)&v15 + v18 + (uint64_t)a4.i32[0]);
  v27 = (v26 >> 10) & 0x1F;
  if (v27 == 31)
    v28 = 2139095040;
  else
    v28 = (v26 >> 10) & 0x1F;
  if (v27)
    v29 = v27 == 31;
  else
    v29 = 1;
  if (v29)
    v30 = v28;
  else
    v30 = (v27 << 23) + 939524096;
  v31 = *(unsigned __int16 *)(*(_QWORD *)&v15 + v24);
  v32 = (v31 >> 10) & 0x1F;
  if (v32 == 31)
    v33 = 2139095040;
  else
    v33 = (v31 >> 10) & 0x1F;
  if (v32)
    v34 = v32 == 31;
  else
    v34 = 1;
  if (v34)
    v35 = v33;
  else
    v35 = (v32 << 23) + 939524096;
  v36 = *(unsigned __int16 *)(*(_QWORD *)&v15 + v25);
  v37 = (v36 >> 10) & 0x1F;
  if (v37 == 31)
    v38 = 2139095040;
  else
    v38 = (v36 >> 10) & 0x1F;
  if (v37)
    v39 = v37 == 31;
  else
    v39 = 1;
  if (!v39)
    v38 = (v37 << 23) + 939524096;
  a4.i32[0] = v35 | (v31 << 16) & 0x80000000 | (v31 >> 7) & 7 | (8 * (v31 & 0x3FF)) & 0x1FFF | ((v31 & 0x3FF) << 13);
  a6.i32[0] = v30 | (v26 << 16) & 0x80000000 | (v26 >> 7) & 7 | (8 * (v26 & 0x3FF)) & 0x1FFF | ((v26 & 0x3FF) << 13);
  a7.i32[0] = v23 | (v19 << 16) & 0x80000000 | (v19 >> 7) & 7 | (8 * (v19 & 0x3FF)) & 0x1FFF | ((v19 & 0x3FF) << 13);
  a8.i32[0] = v38 | (v36 << 16) & 0x80000000 | (v36 >> 7) & 7 | (8 * (v36 & 0x3FF)) & 0x1FFF | ((v36 & 0x3FF) << 13);
  v40 = vsub_f32(v13, vrnd_f32(v13));
  v41 = (float32x4_t)vdupq_lane_s32((int32x2_t)v40, 0);
  v42 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), v41, vsubq_f32(a6, a7).f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v42, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), v42), v41, vsubq_f32(a8, a4).f32[0]), v40, 1).u64[0];
  return result;
}

double sub_1B17E71D0(float32x2_t *a1, float32x2_t a2, double a3, double a4, double a5, double a6)
{
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  float32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v11 = (int32x2_t)a1[1];
  v12 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v13 = vmin_s32(vcvt_s32_f32(v12), v11);
  v14 = a1[4];
  v15 = (int32x2_t)a1[2];
  v16 = (int32x2_t)vand_s8((int8x8_t)v15, (int8x8_t)vcgt_s32(v11, v13));
  v17 = vmul_s32(v15, v13);
  v18 = vdup_lane_s32(v17, 1);
  v19 = vadd_s32(v17, v18).i32[0];
  v18.i32[0] = *(_DWORD *)(*(_QWORD *)&v14 + v19);
  v20 = v19 + v16.i32[0];
  v21 = v19 + v16.i32[1];
  LODWORD(a6) = *(_DWORD *)(*(_QWORD *)&v14 + v21);
  v22 = *(float *)(*(_QWORD *)&v14 + (int)v21 + (uint64_t)v16.i32[0]);
  v23 = vsub_f32(v12, vrnd_f32(v12));
  *(float *)v16.i32 = *(float *)(*(_QWORD *)&v14 + v20) - *(float *)v18.i32;
  v24 = (float32x4_t)vdupq_lane_s32(v16, 0);
  v25 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v18, 0), v24, v23.f32[0]);
  v24.f32[0] = v22 - *(float *)&a6;
  *(_QWORD *)&result = vmlaq_lane_f32(v25, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0), v25), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 0), v23.f32[0]), v23, 1).u64[0];
  return result;
}

double sub_1B17E7278(float32x2_t *a1, float32x2_t a2)
{
  int32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int32x2_t v13;
  uint64_t v14;
  int8x8_t v15;
  int16x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int32x4_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int16x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x2_t v37;
  float32x4_t v38;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (int32x2_t)a1[1];
  v8 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v9 = vmin_s32(vcvt_s32_f32(v8), v7);
  v10 = a1[4];
  v11 = (int32x2_t)a1[2];
  v12 = (int8x8_t)vcgt_s32(v7, v9);
  v13 = vmul_s32(v11, v9);
  v14 = vadd_s32(v13, vdup_lane_s32(v13, 1)).i32[0];
  v15 = vand_s8((int8x8_t)v11, v12);
  v16 = *(int16x4_t *)(*(_QWORD *)&v10 + v14);
  v17.i64[0] = 0x8000000080000000;
  v17.i64[1] = 0x8000000080000000;
  v18 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v16), v17);
  v19 = (int8x16_t)vshll_n_u16((uint16x4_t)v16, 0xDuLL);
  v20 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v21 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v22 = (int32x4_t)vorrq_s8(vandq_s8(v19, v21), vorrq_s8((int8x16_t)v18, vandq_s8(v19, v20)));
  v18.i64[0] = 0x3800000038000000;
  v18.i64[1] = 0x3800000038000000;
  v23 = (float32x4_t)vaddq_s32(v22, v18);
  v24 = v14 + v15.i32[0];
  v25 = v14 + v15.i32[1];
  v26 = (int)v25 + (uint64_t)v15.i32[0];
  v27 = *(int16x4_t *)(*(_QWORD *)&v10 + v24);
  v28 = vandq_s8((int8x16_t)vmovl_s16(v27), v17);
  v29 = (int8x16_t)vshll_n_u16((uint16x4_t)v27, 0xDuLL);
  v30 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v29, v21), vorrq_s8(v28, vandq_s8(v29, v20))), v18);
  v28.i64[0] = *(_QWORD *)(*(_QWORD *)&v10 + v25);
  v31 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v28.i8), v17);
  v32 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v28.i8, 0xDuLL);
  v33 = (int32x4_t)vorrq_s8(vandq_s8(v32, v21), vorrq_s8(v31, vandq_s8(v32, v20)));
  v31.i64[0] = *(_QWORD *)(*(_QWORD *)&v10 + v26);
  v34 = (float32x4_t)vaddq_s32(v33, v18);
  v35 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v31.i8), v17);
  v36 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v31.i8, 0xDuLL);
  v37 = vsub_f32(v8, vrnd_f32(v8));
  v38 = vmlaq_n_f32(v23, vsubq_f32(v30, v23), v37.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v38, vmlaq_n_f32(vsubq_f32(v34, v38), vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v36, v21), vorrq_s8(v35, vandq_s8(v36, v20))), v18), v34), v37.f32[0]), v37, 1).u64[0];
  return result;
}

double sub_1B17E73A8(float32x2_t *a1, float32x2_t a2)
{
  int32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int32x2_t v13;
  uint64_t v14;
  float32x2_t v15;
  float32x4_t v16;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (int32x2_t)a1[1];
  v8 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v9 = vmin_s32(vcvt_s32_f32(v8), v7);
  v10 = a1[4];
  v11 = (int32x2_t)a1[2];
  v12 = vand_s8((int8x8_t)v11, (int8x8_t)vcgt_s32(v7, v9));
  v13 = vmul_s32(v11, v9);
  v14 = vadd_s32(v13, vdup_lane_s32(v13, 1)).i32[0];
  v15 = vsub_f32(v8, vrnd_f32(v8));
  v16 = vmlaq_n_f32(*(float32x4_t *)(*(_QWORD *)&v10 + v14), vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v10 + v14 + v12.i32[0]), *(float32x4_t *)(*(_QWORD *)&v10 + v14)), v15.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v16, vmlaq_n_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v10 + v14 + v12.i32[1]), v16), vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v10 + (int)v14 + v12.i32[1] + (uint64_t)v12.i32[0]), *(float32x4_t *)(*(_QWORD *)&v10 + v14 + v12.i32[1])), v15.f32[0]), v15, 1).u64[0];
  return result;
}

double sub_1B17E7440(float32x2_t *a1, float32x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  int32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x8_t v19;
  int32x2_t v20;
  int32x2_t v21;
  uint64_t v22;
  int32x2_t v23;
  __int32 v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v14 = (int32x2_t)a1[1];
  v15 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v16 = vmin_s32(vcvt_s32_f32(v15), v14);
  v17 = a1[4];
  v18 = (int32x2_t)a1[2];
  v19 = (int8x8_t)vcgt_s32(v14, v16);
  v20 = vmul_s32(v18, v16);
  v21 = vdup_lane_s32(v20, 1);
  v20.i32[0] = vadd_s32(v20, v21).u32[0];
  v22 = v20.i32[0];
  v23 = (int32x2_t)vand_s8((int8x8_t)v18, v19);
  v20.i8[0] = *(_BYTE *)(*(_QWORD *)&v17 + v20.i32[0]);
  *(float *)v21.i32 = (float)v20.u32[0] * 0.0039216;
  v24 = v23.i32[0];
  v25 = v22 + v23.i32[0];
  v26 = v22 + v23.i32[1];
  v23.i8[0] = *(_BYTE *)(*(_QWORD *)&v17 + v25);
  LOBYTE(a7) = *(_BYTE *)(*(_QWORD *)&v17 + v26);
  *(float *)&a7 = (float)LODWORD(a7) * 0.0039216;
  LOBYTE(a9) = *(_BYTE *)(*(_QWORD *)&v17 + (int)v26 + (uint64_t)v24);
  v27 = vsub_f32(v15, vrnd_f32(v15));
  *(float *)v23.i32 = -(float)(*(float *)v21.i32 - (float)((float)v23.u32[0] * 0.0039216));
  v28 = (float32x4_t)vdupq_lane_s32(v23, 0);
  v29 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v21, 0), v28, v27.f32[0]);
  v28.f32[0] = -(float)(*(float *)&a7 - (float)((float)LODWORD(a9) * 0.0039216));
  *(_QWORD *)&result = vmlaq_lane_f32(v29, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0), v29), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0), v27.f32[0]), v27, 1).u64[0];
  return result;
}

double sub_1B17E7508(float32x2_t *a1, float32x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  int32x2_t v14;
  float32x2_t v15;
  int32x2_t v16;
  float32x2_t v17;
  int32x2_t v18;
  int8x8_t v19;
  int32x2_t v20;
  int32x2_t v21;
  uint64_t v22;
  int32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v14 = (int32x2_t)a1[1];
  v15 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v16 = vmin_s32(vcvt_s32_f32(v15), v14);
  v17 = a1[4];
  v18 = (int32x2_t)a1[2];
  v19 = (int8x8_t)vcgt_s32(v14, v16);
  v20 = vmul_s32(v18, v16);
  v21 = vdup_lane_s32(v20, 1);
  v20.i32[0] = vadd_s32(v20, v21).u32[0];
  v22 = v20.i32[0];
  v23 = (int32x2_t)vand_s8((int8x8_t)v18, v19);
  v20.i8[0] = *(_BYTE *)(*(_QWORD *)&v17 + v20.i32[0]);
  *(float *)v21.i32 = (float)v20.u32[0] * 0.0039216;
  v24 = v22 + v23.i32[0];
  v25 = v22 + v23.i32[1];
  v26 = (int)v25 + (uint64_t)v23.i32[0];
  v23.i8[0] = *(_BYTE *)(*(_QWORD *)&v17 + v24);
  LOBYTE(a7) = *(_BYTE *)(*(_QWORD *)&v17 + v25);
  *(float *)&a7 = (float)LODWORD(a7) * 0.0039216;
  LOBYTE(a9) = *(_BYTE *)(*(_QWORD *)&v17 + v26);
  v27 = vsub_f32(v15, vrnd_f32(v15));
  *(float *)v23.i32 = -(float)(*(float *)v21.i32 - (float)((float)v23.u32[0] * 0.0039216));
  v28 = (float32x4_t)vdupq_lane_s32(v23, 0);
  v29 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v21, 0), v28, v27.f32[0]);
  v28.f32[0] = -(float)(*(float *)&a7 - (float)((float)LODWORD(a9) * 0.0039216));
  v30 = vmlaq_lane_f32(v29, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0), v29), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0), v27.f32[0]), v27, 1);
  v31 = vmulq_f32(v30, v30);
  v32 = vcgeq_f32(v30, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v32.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v32), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v30), v31, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v30)), vmulq_f32(v31, v31), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v30), v31,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v30))), (int8x16_t)vmulq_f32(v30, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E7684(float32x2_t *a1, float32x2_t a2)
{
  int32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int32x2_t v13;
  uint64_t v14;
  const float *v15;
  uint32x4_t v16;
  int8x8_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  uint32x4_t v25;
  const float *v26;
  uint32x4_t v27;
  float32x4_t v28;
  const float *v29;
  uint32x4_t v30;
  float32x2_t v31;
  float32x4_t v32;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (int32x2_t)a1[1];
  v8 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v9 = vmin_s32(vcvt_s32_f32(v8), v7);
  v10 = a1[4];
  v11 = (int32x2_t)a1[2];
  v12 = (int8x8_t)vcgt_s32(v7, v9);
  v13 = vmul_s32(v11, v9);
  v14 = vadd_s32(v13, vdup_lane_s32(v13, 1)).i32[0];
  v15 = (const float *)(*(_QWORD *)&v10 + v14);
  v16 = (uint32x4_t)vld1q_dup_f32(v15);
  v17 = vand_s8((int8x8_t)v11, v12);
  v18.i64[0] = 0xFF000000FFLL;
  v18.i64[1] = 0xFF000000FFLL;
  v19 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v20 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v21 = v14 + v17.i32[0];
  v22 = v14 + v17.i32[1];
  v23 = (int)v22 + (uint64_t)v17.i32[0];
  v24 = (const float *)(*(_QWORD *)&v10 + v21);
  v25 = (uint32x4_t)vld1q_dup_f32(v24);
  v26 = (const float *)(*(_QWORD *)&v10 + v22);
  v27 = (uint32x4_t)vld1q_dup_f32(v26);
  v28 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v29 = (const float *)(*(_QWORD *)&v10 + v23);
  v30 = (uint32x4_t)vld1q_dup_f32(v29);
  v31 = vsub_f32(v8, vrnd_f32(v8));
  v32 = vmlaq_n_f32(v20, vmlaq_f32(vnegq_f32(v20), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)xmmword_1B2245E80), v18))), v31.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v32, vmlaq_n_f32(vsubq_f32(v28, v32), vmlaq_f32(vnegq_f32(v28), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), v18))), v31.f32[0]), v31, 1).u64[0];
  return result;
}

double sub_1B17E7784(float32x2_t *a1, float32x2_t a2)
{
  int32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int32x2_t v13;
  int8x8_t v14;
  uint64_t v15;
  const float *v16;
  uint32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  uint32x4_t v25;
  const float *v26;
  uint32x4_t v27;
  float32x4_t v28;
  const float *v29;
  uint32x4_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (int32x2_t)a1[1];
  v8 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v9 = vmin_s32(vcvt_s32_f32(v8), v7);
  v10 = a1[4];
  v11 = (int32x2_t)a1[2];
  v12 = (int8x8_t)vcgt_s32(v7, v9);
  v13 = vmul_s32(v11, v9);
  v14 = vand_s8((int8x8_t)v11, v12);
  v15 = vadd_s32(v13, vdup_lane_s32(v13, 1)).i32[0];
  v16 = (const float *)(*(_QWORD *)&v10 + v15);
  v17 = (uint32x4_t)vld1q_dup_f32(v16);
  v18.i64[0] = 0xFF000000FFLL;
  v18.i64[1] = 0xFF000000FFLL;
  v19 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v20 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v21 = v15 + v14.i32[0];
  v22 = v15 + v14.i32[1];
  v23 = (int)v22 + (uint64_t)v14.i32[0];
  v24 = (const float *)(*(_QWORD *)&v10 + v21);
  v25 = (uint32x4_t)vld1q_dup_f32(v24);
  v26 = (const float *)(*(_QWORD *)&v10 + v22);
  v27 = (uint32x4_t)vld1q_dup_f32(v26);
  v28 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v29 = (const float *)(*(_QWORD *)&v10 + v23);
  v30 = (uint32x4_t)vld1q_dup_f32(v29);
  v31 = vsub_f32(v8, vrnd_f32(v8));
  v32 = vmlaq_n_f32(v20, vmlaq_f32(vnegq_f32(v20), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)xmmword_1B2245E80), v18))), v31.f32[0]);
  v33 = vmlaq_lane_f32(v32, vmlaq_n_f32(vsubq_f32(v28, v32), vmlaq_f32(vnegq_f32(v28), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v30, (uint32x4_t)xmmword_1B2245E80), v18))), v31.f32[0]), v31, 1);
  v34 = vmulq_f32(v33, v33);
  v35 = vcgeq_f32(v33, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v35.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v35), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v33), v34, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v33)), vmulq_f32(v34, v34), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v33), v34,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v33))), (int8x16_t)vmulq_f32(v33, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E7938(float32x2_t *a1, float32x2_t a2)
{
  int32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int32x2_t v13;
  uint64_t v14;
  int8x8_t v15;
  const float *v16;
  uint32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  __int32 v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  uint32x4_t v25;
  uint64_t v26;
  const float *v27;
  uint32x4_t v28;
  float32x4_t v29;
  const float *v30;
  uint32x4_t v31;
  float32x2_t v32;
  float32x4_t v33;
  int8x16_t v34;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (int32x2_t)a1[1];
  v8 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v9 = vmin_s32(vcvt_s32_f32(v8), v7);
  v10 = a1[4];
  v11 = (int32x2_t)a1[2];
  v12 = (int8x8_t)vcgt_s32(v7, v9);
  v13 = vmul_s32(v11, v9);
  v14 = vadd_s32(v13, vdup_lane_s32(v13, 1)).i32[0];
  v15 = vand_s8((int8x8_t)v11, v12);
  v16 = (const float *)(*(_QWORD *)&v10 + v14);
  v17 = (uint32x4_t)vld1q_dup_f32(v16);
  v18.i64[0] = 0xFF000000FFLL;
  v18.i64[1] = 0xFF000000FFLL;
  v19 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v20 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v21 = v15.i32[0];
  v22 = v14 + v15.i32[0];
  v23 = v14 + v15.i32[1];
  v24 = (const float *)(*(_QWORD *)&v10 + v22);
  v25 = (uint32x4_t)vld1q_dup_f32(v24);
  v26 = (int)v23 + (uint64_t)v21;
  v27 = (const float *)(*(_QWORD *)&v10 + v23);
  v28 = (uint32x4_t)vld1q_dup_f32(v27);
  v29 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1B2245E80), v18)), v19);
  v30 = (const float *)(*(_QWORD *)&v10 + v26);
  v31 = (uint32x4_t)vld1q_dup_f32(v30);
  v32 = vsub_f32(v8, vrnd_f32(v8));
  v33 = vmlaq_n_f32(v20, vmlaq_f32(vnegq_f32(v20), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)xmmword_1B2245E80), v18))), v32.f32[0]);
  v34 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_lane_f32(v33, vmlaq_n_f32(vsubq_f32(v29, v33), vmlaq_f32(vnegq_f32(v29), v19, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v31, (uint32x4_t)xmmword_1B2245E80), v18))), v32.f32[0]), v32, 1));
  *(_QWORD *)&result = vextq_s8(v34, v34, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E7A40(float32x2_t *a1, float32x2_t a2)
{
  int32x2_t v7;
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  int8x8_t v12;
  int32x2_t v13;
  uint64_t v14;
  const float *v15;
  uint32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const float *v23;
  uint32x4_t v24;
  const float *v25;
  uint32x4_t v26;
  float32x4_t v27;
  const float *v28;
  uint32x4_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  double result;

  __asm { FMOV            V1.2S, #1.0 }
  v7 = (int32x2_t)a1[1];
  v8 = vmul_f32(*a1, vminnm_f32(vmaxnm_f32(vsub_f32(a2, a1[6]), 0), _D1));
  v9 = vmin_s32(vcvt_s32_f32(v8), v7);
  v10 = a1[4];
  v11 = (int32x2_t)a1[2];
  v12 = vand_s8((int8x8_t)v11, (int8x8_t)vcgt_s32(v7, v9));
  v13 = vmul_s32(v11, v9);
  v14 = vadd_s32(v13, vdup_lane_s32(v13, 1)).i32[0];
  v15 = (const float *)(*(_QWORD *)&v10 + v14);
  v16 = (uint32x4_t)vld1q_dup_f32(v15);
  v17.i64[0] = 0xFF000000FFLL;
  v17.i64[1] = 0xFF000000FFLL;
  v18 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v19 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v20 = v14 + v12.i32[0];
  v21 = v14 + v12.i32[1];
  v22 = (int)v21 + (uint64_t)v12.i32[0];
  v23 = (const float *)(*(_QWORD *)&v10 + v20);
  v24 = (uint32x4_t)vld1q_dup_f32(v23);
  v25 = (const float *)(*(_QWORD *)&v10 + v21);
  v26 = (uint32x4_t)vld1q_dup_f32(v25);
  v27 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v17)), v18);
  v28 = (const float *)(*(_QWORD *)&v10 + v22);
  v29 = (uint32x4_t)vld1q_dup_f32(v28);
  v30 = vsub_f32(v8, vrnd_f32(v8));
  v31 = vmlaq_n_f32(v19, vmlaq_f32(vnegq_f32(v19), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v24, (uint32x4_t)xmmword_1B2245E80), v17))), v30.f32[0]);
  v32 = vmlaq_lane_f32(v31, vmlaq_n_f32(vsubq_f32(v27, v31), vmlaq_f32(vnegq_f32(v27), v18, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v29, (uint32x4_t)xmmword_1B2245E80), v17))), v30.f32[0]), v30, 1);
  v33 = vmulq_f32(v32, v32);
  v34 = vcgeq_f32(v32, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v34.i32[3] = 0;
  v35 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v34), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v32), v33, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v32)), vmulq_f32(v33, v33), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v32), v33,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v32))), (int8x16_t)vmulq_f32(v32, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v35.i32[3] = v32.i32[3];
  v36 = (int8x16_t)vrev64q_s32(v35);
  *(_QWORD *)&result = vextq_s8(v36, v36, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E7BFC(uint64_t a1, float32x2_t a2, double a3, float32x4_t a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  float32x2_t v8;
  int32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  uint64_t v12;
  int32x2_t v13;
  signed __int32 v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  BOOL v35;
  float32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  double result;

  v8 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v9 = *(int32x2_t *)(a1 + 8);
  v10 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v8, vrndm_f32(v8)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v11 = vmin_s32(vcvt_s32_f32(v10), v9);
  v12 = *(_QWORD *)(a1 + 32);
  a6.i64[0] = *(_QWORD *)(a1 + 16);
  *(int8x8_t *)a4.f32 = vbsl_s8((int8x8_t)vcgt_s32(v9, v11), *(int8x8_t *)a6.f32, *(int8x8_t *)(a1 + 24));
  v13 = vmul_s32(*(int32x2_t *)a6.f32, v11);
  v14 = vadd_s32(v13, vdup_lane_s32(v13, 1)).u32[0];
  v15 = *(unsigned __int16 *)(v12 + v14);
  v16 = (v15 >> 10) & 0x1F;
  if (v16 == 31)
    v17 = 2139095040;
  else
    v17 = (v15 >> 10) & 0x1F;
  if (v16)
    v18 = v16 == 31;
  else
    v18 = 1;
  if (v18)
    v19 = v17;
  else
    v19 = (v16 << 23) + 939524096;
  v20 = v14 + (uint64_t)a4.i32[1];
  v21 = (int)v20 + (uint64_t)a4.i32[0];
  v22 = *(unsigned __int16 *)(v12 + v14 + (uint64_t)a4.i32[0]);
  v23 = (v22 >> 10) & 0x1F;
  if (v23 == 31)
    v24 = 2139095040;
  else
    v24 = (v22 >> 10) & 0x1F;
  if (v23)
    v25 = v23 == 31;
  else
    v25 = 1;
  if (v25)
    v26 = v24;
  else
    v26 = (v23 << 23) + 939524096;
  v27 = *(unsigned __int16 *)(v12 + v20);
  v28 = (v27 >> 10) & 0x1F;
  if (v28 == 31)
    v29 = 2139095040;
  else
    v29 = (v27 >> 10) & 0x1F;
  if (v28)
    v30 = v28 == 31;
  else
    v30 = 1;
  if (v30)
    v31 = v29;
  else
    v31 = (v28 << 23) + 939524096;
  v32 = *(unsigned __int16 *)(v12 + v21);
  v33 = (v32 >> 10) & 0x1F;
  if (v33 == 31)
    v34 = 2139095040;
  else
    v34 = (v32 >> 10) & 0x1F;
  if (v33)
    v35 = v33 == 31;
  else
    v35 = 1;
  if (!v35)
    v34 = (v33 << 23) + 939524096;
  a4.i32[0] = v31 | (v27 << 16) & 0x80000000 | (v27 >> 7) & 7 | (8 * (v27 & 0x3FF)) & 0x1FFF | ((v27 & 0x3FF) << 13);
  a6.i32[0] = v26 | (v22 << 16) & 0x80000000 | (v22 >> 7) & 7 | (8 * (v22 & 0x3FF)) & 0x1FFF | ((v22 & 0x3FF) << 13);
  a7.i32[0] = v19 | (v15 << 16) & 0x80000000 | (v15 >> 7) & 7 | (8 * (v15 & 0x3FF)) & 0x1FFF | ((v15 & 0x3FF) << 13);
  a8.i32[0] = v34 | (v32 << 16) & 0x80000000 | (v32 >> 7) & 7 | (8 * (v32 & 0x3FF)) & 0x1FFF | ((v32 & 0x3FF) << 13);
  v36 = vsub_f32(v10, vrnd_f32(v10));
  v37 = (float32x4_t)vdupq_lane_s32((int32x2_t)v36, 0);
  v38 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), v37, vsubq_f32(a6, a7).f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v38, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), v38), v37, vsubq_f32(a8, a4).f32[0]), v36, 1).u64[0];
  return result;
}

double sub_1B17E7DAC(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  int32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  uint64_t v6;
  int32x2_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  double result;

  v2 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v3 = *(int32x2_t *)(a1 + 8);
  v4 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v5 = vmin_s32(vcvt_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t *)(a1 + 16);
  v8 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v3, v5), (int8x8_t)v7, *(int8x8_t *)(a1 + 24));
  v9 = vmul_s32(v7, v5);
  v10 = vdup_lane_s32(v9, 1);
  v11 = vadd_s32(v9, v10).i32[0];
  v10.i32[0] = *(_DWORD *)(v6 + v11);
  v12 = v11 + v8.i32[0];
  v13 = v11 + v8.i32[1];
  v7.i32[0] = *(_DWORD *)(v6 + v13);
  v14 = *(float *)(v6 + (int)v13 + (uint64_t)v8.i32[0]);
  v15 = vsub_f32(v4, vrnd_f32(v4));
  *(float *)v8.i32 = *(float *)(v6 + v12) - *(float *)v10.i32;
  v16 = (float32x4_t)vdupq_lane_s32(v8, 0);
  v17 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v10, 0), v16, v15.f32[0]);
  v16.f32[0] = v14 - *(float *)v7.i32;
  *(_QWORD *)&result = vmlaq_lane_f32(v17, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(v7, 0), v17), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 0), v15.f32[0]), v15, 1).u64[0];
  return result;
}

double sub_1B17E7E58(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  int32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  uint64_t v6;
  int32x2_t v7;
  int8x8_t v8;
  int32x2_t v9;
  uint64_t v10;
  int8x8_t v11;
  int16x4_t v12;
  int8x16_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int16x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x2_t v33;
  float32x4_t v34;
  double result;

  v2 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v3 = *(int32x2_t *)(a1 + 8);
  v4 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v5 = vmin_s32(vcvt_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t *)(a1 + 16);
  v8 = (int8x8_t)vcgt_s32(v3, v5);
  v9 = vmul_s32(v7, v5);
  v10 = vadd_s32(v9, vdup_lane_s32(v9, 1)).i32[0];
  v11 = vbsl_s8(v8, (int8x8_t)v7, *(int8x8_t *)(a1 + 24));
  v12 = *(int16x4_t *)(v6 + v10);
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  v14 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v12), v13);
  v15 = (int8x16_t)vshll_n_u16((uint16x4_t)v12, 0xDuLL);
  v16 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v17 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v18 = (int32x4_t)vorrq_s8(vandq_s8(v15, v17), vorrq_s8((int8x16_t)v14, vandq_s8(v15, v16)));
  v14.i64[0] = 0x3800000038000000;
  v14.i64[1] = 0x3800000038000000;
  v19 = (float32x4_t)vaddq_s32(v18, v14);
  v20 = v10 + v11.i32[0];
  v21 = v10 + v11.i32[1];
  v22 = (int)v21 + (uint64_t)v11.i32[0];
  v23 = *(int16x4_t *)(v6 + v20);
  v24 = vandq_s8((int8x16_t)vmovl_s16(v23), v13);
  v25 = (int8x16_t)vshll_n_u16((uint16x4_t)v23, 0xDuLL);
  v26 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v25, v17), vorrq_s8(v24, vandq_s8(v25, v16))), v14);
  v24.i64[0] = *(_QWORD *)(v6 + v21);
  v27 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v24.i8), v13);
  v28 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v24.i8, 0xDuLL);
  v29 = (int32x4_t)vorrq_s8(vandq_s8(v28, v17), vorrq_s8(v27, vandq_s8(v28, v16)));
  v27.i64[0] = *(_QWORD *)(v6 + v22);
  v30 = (float32x4_t)vaddq_s32(v29, v14);
  v31 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v27.i8), v13);
  v32 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v27.i8, 0xDuLL);
  v33 = vsub_f32(v4, vrnd_f32(v4));
  v34 = vmlaq_n_f32(v19, vsubq_f32(v26, v19), v33.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v34, vmlaq_n_f32(vsubq_f32(v30, v34), vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v32, v17), vorrq_s8(v31, vandq_s8(v32, v16))), v14), v30), v33.f32[0]), v33, 1).u64[0];
  return result;
}

double sub_1B17E7F8C(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  int32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  uint64_t v6;
  int32x2_t v7;
  int8x8_t v8;
  int32x2_t v9;
  uint64_t v10;
  float32x2_t v11;
  float32x4_t v12;
  double result;

  v2 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v3 = *(int32x2_t *)(a1 + 8);
  v4 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v5 = vmin_s32(vcvt_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t *)(a1 + 16);
  v8 = vbsl_s8((int8x8_t)vcgt_s32(v3, v5), (int8x8_t)v7, *(int8x8_t *)(a1 + 24));
  v9 = vmul_s32(v7, v5);
  v10 = vadd_s32(v9, vdup_lane_s32(v9, 1)).i32[0];
  v11 = vsub_f32(v4, vrnd_f32(v4));
  v12 = vmlaq_n_f32(*(float32x4_t *)(v6 + v10), vsubq_f32(*(float32x4_t *)(v6 + v10 + v8.i32[0]), *(float32x4_t *)(v6 + v10)), v11.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v12, vmlaq_n_f32(vsubq_f32(*(float32x4_t *)(v6 + v10 + v8.i32[1]), v12), vsubq_f32(*(float32x4_t *)(v6 + (int)v10 + v8.i32[1] + (uint64_t)v8.i32[0]), *(float32x4_t *)(v6 + v10 + v8.i32[1])), v11.f32[0]), v11, 1).u64[0];
  return result;
}

double sub_1B17E8028(uint64_t a1, float32x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  float32x2_t v9;
  int32x2_t v10;
  float32x2_t v11;
  int32x2_t v12;
  uint64_t v13;
  int32x2_t v14;
  int8x8_t v15;
  int32x2_t v16;
  int32x2_t v17;
  uint64_t v18;
  int32x2_t v19;
  __int32 v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  double result;

  v9 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v10 = *(int32x2_t *)(a1 + 8);
  v11 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v9, vrndm_f32(v9)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v12 = vmin_s32(vcvt_s32_f32(v11), v10);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(int32x2_t *)(a1 + 16);
  v15 = (int8x8_t)vcgt_s32(v10, v12);
  v16 = vmul_s32(v14, v12);
  v17 = vdup_lane_s32(v16, 1);
  v16.i32[0] = vadd_s32(v16, v17).u32[0];
  v18 = v16.i32[0];
  v19 = (int32x2_t)vbsl_s8(v15, (int8x8_t)v14, *(int8x8_t *)(a1 + 24));
  v16.i8[0] = *(_BYTE *)(v13 + v16.i32[0]);
  *(float *)v14.i32 = (float)v16.u32[0] * 0.0039216;
  v20 = v19.i32[0];
  v21 = v18 + v19.i32[0];
  v22 = v18 + v19.i32[1];
  v19.i8[0] = *(_BYTE *)(v13 + v21);
  v17.i8[0] = *(_BYTE *)(v13 + v22);
  *(float *)v17.i32 = (float)v17.u32[0] * 0.0039216;
  LOBYTE(a9) = *(_BYTE *)(v13 + (int)v22 + (uint64_t)v20);
  v23 = vsub_f32(v11, vrnd_f32(v11));
  *(float *)v19.i32 = -(float)(*(float *)v14.i32 - (float)((float)v19.u32[0] * 0.0039216));
  v24 = (float32x4_t)vdupq_lane_s32(v19, 0);
  v25 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v14, 0), v24, v23.f32[0]);
  v24.f32[0] = -(float)(*(float *)v17.i32 - (float)((float)LODWORD(a9) * 0.0039216));
  *(_QWORD *)&result = vmlaq_lane_f32(v25, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(v17, 0), v25), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 0), v23.f32[0]), v23, 1).u64[0];
  return result;
}

double sub_1B17E80F4(uint64_t a1, float32x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  float32x2_t v9;
  int32x2_t v10;
  float32x2_t v11;
  int32x2_t v12;
  uint64_t v13;
  int32x2_t v14;
  int8x8_t v15;
  int32x2_t v16;
  int32x2_t v17;
  uint64_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  double result;

  v9 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v10 = *(int32x2_t *)(a1 + 8);
  v11 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v9, vrndm_f32(v9)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v12 = vmin_s32(vcvt_s32_f32(v11), v10);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(int32x2_t *)(a1 + 16);
  v15 = (int8x8_t)vcgt_s32(v10, v12);
  v16 = vmul_s32(v14, v12);
  v17 = vdup_lane_s32(v16, 1);
  v16.i32[0] = vadd_s32(v16, v17).u32[0];
  v18 = v16.i32[0];
  v19 = (int32x2_t)vbsl_s8(v15, (int8x8_t)v14, *(int8x8_t *)(a1 + 24));
  v16.i8[0] = *(_BYTE *)(v13 + v16.i32[0]);
  *(float *)v14.i32 = (float)v16.u32[0] * 0.0039216;
  v20 = v18 + v19.i32[0];
  v21 = v18 + v19.i32[1];
  v22 = (int)v21 + (uint64_t)v19.i32[0];
  v19.i8[0] = *(_BYTE *)(v13 + v20);
  v17.i8[0] = *(_BYTE *)(v13 + v21);
  *(float *)v17.i32 = (float)v17.u32[0] * 0.0039216;
  LOBYTE(a9) = *(_BYTE *)(v13 + v22);
  v23 = vsub_f32(v11, vrnd_f32(v11));
  *(float *)v19.i32 = -(float)(*(float *)v14.i32 - (float)((float)v19.u32[0] * 0.0039216));
  v24 = (float32x4_t)vdupq_lane_s32(v19, 0);
  v25 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v14, 0), v24, v23.f32[0]);
  v24.f32[0] = -(float)(*(float *)v17.i32 - (float)((float)LODWORD(a9) * 0.0039216));
  v26 = vmlaq_lane_f32(v25, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(v17, 0), v25), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 0), v23.f32[0]), v23, 1);
  v27 = vmulq_f32(v26, v26);
  v28 = vcgeq_f32(v26, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v28.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v28), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v26), v27, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v26)), vmulq_f32(v27, v27), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v26), v27,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v26))), (int8x16_t)vmulq_f32(v26, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E8274(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  int32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  uint64_t v6;
  int32x2_t v7;
  int8x8_t v8;
  int32x2_t v9;
  uint64_t v10;
  const float *v11;
  uint32x4_t v12;
  int8x8_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const float *v20;
  uint32x4_t v21;
  const float *v22;
  uint32x4_t v23;
  float32x4_t v24;
  const float *v25;
  uint32x4_t v26;
  float32x2_t v27;
  float32x4_t v28;
  double result;

  v2 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v3 = *(int32x2_t *)(a1 + 8);
  v4 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v5 = vmin_s32(vcvt_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t *)(a1 + 16);
  v8 = (int8x8_t)vcgt_s32(v3, v5);
  v9 = vmul_s32(v7, v5);
  v10 = vadd_s32(v9, vdup_lane_s32(v9, 1)).i32[0];
  v11 = (const float *)(v6 + v10);
  v12 = (uint32x4_t)vld1q_dup_f32(v11);
  v13 = vbsl_s8(v8, (int8x8_t)v7, *(int8x8_t *)(a1 + 24));
  v14.i64[0] = 0xFF000000FFLL;
  v14.i64[1] = 0xFF000000FFLL;
  v15 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v16 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1B2245E80), v14)), v15);
  v17 = v10 + v13.i32[0];
  v18 = v10 + v13.i32[1];
  v19 = (int)v18 + (uint64_t)v13.i32[0];
  v20 = (const float *)(v6 + v17);
  v21 = (uint32x4_t)vld1q_dup_f32(v20);
  v22 = (const float *)(v6 + v18);
  v23 = (uint32x4_t)vld1q_dup_f32(v22);
  v24 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v23, (uint32x4_t)xmmword_1B2245E80), v14)), v15);
  v25 = (const float *)(v6 + v19);
  v26 = (uint32x4_t)vld1q_dup_f32(v25);
  v27 = vsub_f32(v4, vrnd_f32(v4));
  v28 = vmlaq_n_f32(v16, vmlaq_f32(vnegq_f32(v16), v15, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), v14))), v27.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v28, vmlaq_n_f32(vsubq_f32(v24, v28), vmlaq_f32(vnegq_f32(v24), v15, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v14))), v27.f32[0]), v27, 1).u64[0];
  return result;
}

double sub_1B17E8378(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  int32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  uint64_t v6;
  int32x2_t v7;
  int8x8_t v8;
  int32x2_t v9;
  int8x8_t v10;
  uint64_t v11;
  const float *v12;
  uint32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const float *v20;
  uint32x4_t v21;
  const float *v22;
  uint32x4_t v23;
  float32x4_t v24;
  const float *v25;
  uint32x4_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  double result;

  v2 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v3 = *(int32x2_t *)(a1 + 8);
  v4 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v5 = vmin_s32(vcvt_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t *)(a1 + 16);
  v8 = (int8x8_t)vcgt_s32(v3, v5);
  v9 = vmul_s32(v7, v5);
  v10 = vbsl_s8(v8, (int8x8_t)v7, *(int8x8_t *)(a1 + 24));
  v11 = vadd_s32(v9, vdup_lane_s32(v9, 1)).i32[0];
  v12 = (const float *)(v6 + v11);
  v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14.i64[0] = 0xFF000000FFLL;
  v14.i64[1] = 0xFF000000FFLL;
  v15 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v16 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_1B2245E80), v14)), v15);
  v17 = v11 + v10.i32[0];
  v18 = v11 + v10.i32[1];
  v19 = (int)v18 + (uint64_t)v10.i32[0];
  v20 = (const float *)(v6 + v17);
  v21 = (uint32x4_t)vld1q_dup_f32(v20);
  v22 = (const float *)(v6 + v18);
  v23 = (uint32x4_t)vld1q_dup_f32(v22);
  v24 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v23, (uint32x4_t)xmmword_1B2245E80), v14)), v15);
  v25 = (const float *)(v6 + v19);
  v26 = (uint32x4_t)vld1q_dup_f32(v25);
  v27 = vsub_f32(v4, vrnd_f32(v4));
  v28 = vmlaq_n_f32(v16, vmlaq_f32(vnegq_f32(v16), v15, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), v14))), v27.f32[0]);
  v29 = vmlaq_lane_f32(v28, vmlaq_n_f32(vsubq_f32(v24, v28), vmlaq_f32(vnegq_f32(v24), v15, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v14))), v27.f32[0]), v27, 1);
  v30 = vmulq_f32(v29, v29);
  v31 = vcgeq_f32(v29, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v31.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v31), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v29), v30, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v29)), vmulq_f32(v30, v30), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v29), v30,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v29))), (int8x16_t)vmulq_f32(v29, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E8530(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  int32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  uint64_t v6;
  int32x2_t v7;
  int8x8_t v8;
  int32x2_t v9;
  uint64_t v10;
  int8x8_t v11;
  const float *v12;
  uint32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  __int32 v17;
  uint64_t v18;
  uint64_t v19;
  const float *v20;
  uint32x4_t v21;
  uint64_t v22;
  const float *v23;
  uint32x4_t v24;
  float32x4_t v25;
  const float *v26;
  uint32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  int8x16_t v30;
  double result;

  v2 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v3 = *(int32x2_t *)(a1 + 8);
  v4 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v5 = vmin_s32(vcvt_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t *)(a1 + 16);
  v8 = (int8x8_t)vcgt_s32(v3, v5);
  v9 = vmul_s32(v7, v5);
  v10 = vadd_s32(v9, vdup_lane_s32(v9, 1)).i32[0];
  v11 = vbsl_s8(v8, (int8x8_t)v7, *(int8x8_t *)(a1 + 24));
  v12 = (const float *)(v6 + v10);
  v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14.i64[0] = 0xFF000000FFLL;
  v14.i64[1] = 0xFF000000FFLL;
  v15 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v16 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_1B2245E80), v14)), v15);
  v17 = v11.i32[0];
  v18 = v10 + v11.i32[0];
  v19 = v10 + v11.i32[1];
  v20 = (const float *)(v6 + v18);
  v21 = (uint32x4_t)vld1q_dup_f32(v20);
  v22 = (int)v19 + (uint64_t)v17;
  v23 = (const float *)(v6 + v19);
  v24 = (uint32x4_t)vld1q_dup_f32(v23);
  v25 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v24, (uint32x4_t)xmmword_1B2245E80), v14)), v15);
  v26 = (const float *)(v6 + v22);
  v27 = (uint32x4_t)vld1q_dup_f32(v26);
  v28 = vsub_f32(v4, vrnd_f32(v4));
  v29 = vmlaq_n_f32(v16, vmlaq_f32(vnegq_f32(v16), v15, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), v14))), v28.f32[0]);
  v30 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_lane_f32(v29, vmlaq_n_f32(vsubq_f32(v25, v29), vmlaq_f32(vnegq_f32(v25), v15, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v14))), v28.f32[0]), v28, 1));
  *(_QWORD *)&result = vextq_s8(v30, v30, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E863C(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  int32x2_t v3;
  float32x2_t v4;
  int32x2_t v5;
  uint64_t v6;
  int32x2_t v7;
  int8x8_t v8;
  int32x2_t v9;
  uint64_t v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  uint32x4_t v20;
  const float *v21;
  uint32x4_t v22;
  float32x4_t v23;
  const float *v24;
  uint32x4_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  double result;

  v2 = vsub_f32(a2, *(float32x2_t *)(a1 + 48));
  v3 = *(int32x2_t *)(a1 + 8);
  v4 = vmul_f32(*(float32x2_t *)a1, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v5 = vmin_s32(vcvt_s32_f32(v4), v3);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(int32x2_t *)(a1 + 16);
  v8 = vbsl_s8((int8x8_t)vcgt_s32(v3, v5), (int8x8_t)v7, *(int8x8_t *)(a1 + 24));
  v9 = vmul_s32(v7, v5);
  v10 = vadd_s32(v9, vdup_lane_s32(v9, 1)).i32[0];
  v11 = (const float *)(v6 + v10);
  v12 = (uint32x4_t)vld1q_dup_f32(v11);
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  v14 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v15 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1B2245E80), v13)), v14);
  v16 = v10 + v8.i32[0];
  v17 = v10 + v8.i32[1];
  v18 = (int)v17 + (uint64_t)v8.i32[0];
  v19 = (const float *)(v6 + v16);
  v20 = (uint32x4_t)vld1q_dup_f32(v19);
  v21 = (const float *)(v6 + v17);
  v22 = (uint32x4_t)vld1q_dup_f32(v21);
  v23 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v22, (uint32x4_t)xmmword_1B2245E80), v13)), v14);
  v24 = (const float *)(v6 + v18);
  v25 = (uint32x4_t)vld1q_dup_f32(v24);
  v26 = vsub_f32(v4, vrnd_f32(v4));
  v27 = vmlaq_n_f32(v15, vmlaq_f32(vnegq_f32(v15), v14, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v20, (uint32x4_t)xmmword_1B2245E80), v13))), v26.f32[0]);
  v28 = vmlaq_lane_f32(v27, vmlaq_n_f32(vsubq_f32(v23, v27), vmlaq_f32(vnegq_f32(v23), v14, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)xmmword_1B2245E80), v13))), v26.f32[0]), v26, 1);
  v29 = vmulq_f32(v28, v28);
  v30 = vcgeq_f32(v28, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v30.i32[3] = 0;
  v31 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v30), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v28), v29, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v28)), vmulq_f32(v29, v29), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v28), v29,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v28))), (int8x16_t)vmulq_f32(v28, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v31.i32[3] = v28.i32[3];
  v32 = (int8x16_t)vrev64q_s32(v31);
  *(_QWORD *)&result = vextq_s8(v32, v32, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E87FC(uint64_t a1, float32x2_t a2, double a3, float32x4_t a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  float32x2_t v8;
  float32x2_t v9;
  int32x2_t v10;
  float32x2_t v11;
  int32x2_t v12;
  uint64_t v13;
  int32x2_t v14;
  signed __int32 v15;
  unsigned int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  BOOL v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  double result;

  v8 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v9 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v8, vrndm_f32(v8)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v10 = *(int32x2_t *)(a1 + 8);
  v11 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v9, v9));
  v12 = vmin_s32(vcvt_s32_f32(v11), v10);
  v13 = *(_QWORD *)(a1 + 32);
  a6.i64[0] = *(_QWORD *)(a1 + 16);
  *(int8x8_t *)a4.f32 = vbsl_s8((int8x8_t)vcgt_s32(v10, v12), *(int8x8_t *)a6.f32, *(int8x8_t *)(a1 + 24));
  v14 = vmul_s32(*(int32x2_t *)a6.f32, v12);
  v15 = vadd_s32(v14, vdup_lane_s32(v14, 1)).u32[0];
  v16 = *(unsigned __int16 *)(v13 + v15);
  v17 = (v16 >> 10) & 0x1F;
  if (v17 == 31)
    v18 = 2139095040;
  else
    v18 = (v16 >> 10) & 0x1F;
  if (v17)
    v19 = v17 == 31;
  else
    v19 = 1;
  if (v19)
    v20 = v18;
  else
    v20 = (v17 << 23) + 939524096;
  v21 = v15 + (uint64_t)a4.i32[1];
  v22 = (int)v21 + (uint64_t)a4.i32[0];
  v23 = *(unsigned __int16 *)(v13 + v15 + (uint64_t)a4.i32[0]);
  v24 = (v23 >> 10) & 0x1F;
  if (v24 == 31)
    v25 = 2139095040;
  else
    v25 = (v23 >> 10) & 0x1F;
  if (v24)
    v26 = v24 == 31;
  else
    v26 = 1;
  if (v26)
    v27 = v25;
  else
    v27 = (v24 << 23) + 939524096;
  v28 = *(unsigned __int16 *)(v13 + v21);
  v29 = (v28 >> 10) & 0x1F;
  if (v29 == 31)
    v30 = 2139095040;
  else
    v30 = (v28 >> 10) & 0x1F;
  if (v29)
    v31 = v29 == 31;
  else
    v31 = 1;
  if (v31)
    v32 = v30;
  else
    v32 = (v29 << 23) + 939524096;
  v33 = *(unsigned __int16 *)(v13 + v22);
  v34 = (v33 >> 10) & 0x1F;
  if (v34 == 31)
    v35 = 2139095040;
  else
    v35 = (v33 >> 10) & 0x1F;
  if (v34)
    v36 = v34 == 31;
  else
    v36 = 1;
  if (!v36)
    v35 = (v34 << 23) + 939524096;
  a4.i32[0] = v32 | (v28 << 16) & 0x80000000 | (v28 >> 7) & 7 | (8 * (v28 & 0x3FF)) & 0x1FFF | ((v28 & 0x3FF) << 13);
  a6.i32[0] = v27 | (v23 << 16) & 0x80000000 | (v23 >> 7) & 7 | (8 * (v23 & 0x3FF)) & 0x1FFF | ((v23 & 0x3FF) << 13);
  a7.i32[0] = v20 | (v16 << 16) & 0x80000000 | (v16 >> 7) & 7 | (8 * (v16 & 0x3FF)) & 0x1FFF | ((v16 & 0x3FF) << 13);
  a8.i32[0] = v35 | (v33 << 16) & 0x80000000 | (v33 >> 7) & 7 | (8 * (v33 & 0x3FF)) & 0x1FFF | ((v33 & 0x3FF) << 13);
  v37 = vsub_f32(v11, vrnd_f32(v11));
  v38 = (float32x4_t)vdupq_lane_s32((int32x2_t)v37, 0);
  v39 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0), v38, vsubq_f32(a6, a7).f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v39, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.f32, 0), v39), v38, vsubq_f32(a8, a4).f32[0]), v37, 1).u64[0];
  return result;
}

double sub_1B17E89C0(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float32x2_t v16;
  float32x4_t v17;
  float32x4_t v18;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = *(int32x2_t *)(a1 + 8);
  v5 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3));
  v6 = vmin_s32(vcvt_s32_f32(v5), v4);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(int32x2_t *)(a1 + 16);
  v9 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_s32(v4, v6), (int8x8_t)v8, *(int8x8_t *)(a1 + 24));
  v10 = vmul_s32(v8, v6);
  v11 = vdup_lane_s32(v10, 1);
  v12 = vadd_s32(v10, v11).i32[0];
  v11.i32[0] = *(_DWORD *)(v7 + v12);
  v13 = v12 + v9.i32[0];
  v14 = v12 + v9.i32[1];
  v8.i32[0] = *(_DWORD *)(v7 + v14);
  v15 = *(float *)(v7 + (int)v14 + (uint64_t)v9.i32[0]);
  v16 = vsub_f32(v5, vrnd_f32(v5));
  *(float *)v9.i32 = *(float *)(v7 + v13) - *(float *)v11.i32;
  v17 = (float32x4_t)vdupq_lane_s32(v9, 0);
  v18 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v11, 0), v17, v16.f32[0]);
  v17.f32[0] = v15 - *(float *)v8.i32;
  *(_QWORD *)&result = vmlaq_lane_f32(v18, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(v8, 0), v18), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0), v16.f32[0]), v16, 1).u64[0];
  return result;
}

double sub_1B17E8A80(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  uint64_t v11;
  int8x8_t v12;
  int16x4_t v13;
  int8x16_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int16x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x2_t v34;
  float32x4_t v35;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = *(int32x2_t *)(a1 + 8);
  v5 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3));
  v6 = vmin_s32(vcvt_s32_f32(v5), v4);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(int32x2_t *)(a1 + 16);
  v9 = (int8x8_t)vcgt_s32(v4, v6);
  v10 = vmul_s32(v8, v6);
  v11 = vadd_s32(v10, vdup_lane_s32(v10, 1)).i32[0];
  v12 = vbsl_s8(v9, (int8x8_t)v8, *(int8x8_t *)(a1 + 24));
  v13 = *(int16x4_t *)(v7 + v11);
  v14.i64[0] = 0x8000000080000000;
  v14.i64[1] = 0x8000000080000000;
  v15 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v13), v14);
  v16 = (int8x16_t)vshll_n_u16((uint16x4_t)v13, 0xDuLL);
  v17 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v18 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v19 = (int32x4_t)vorrq_s8(vandq_s8(v16, v18), vorrq_s8((int8x16_t)v15, vandq_s8(v16, v17)));
  v15.i64[0] = 0x3800000038000000;
  v15.i64[1] = 0x3800000038000000;
  v20 = (float32x4_t)vaddq_s32(v19, v15);
  v21 = v11 + v12.i32[0];
  v22 = v11 + v12.i32[1];
  v23 = (int)v22 + (uint64_t)v12.i32[0];
  v24 = *(int16x4_t *)(v7 + v21);
  v25 = vandq_s8((int8x16_t)vmovl_s16(v24), v14);
  v26 = (int8x16_t)vshll_n_u16((uint16x4_t)v24, 0xDuLL);
  v27 = (float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v26, v18), vorrq_s8(v25, vandq_s8(v26, v17))), v15);
  v25.i64[0] = *(_QWORD *)(v7 + v22);
  v28 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v25.i8), v14);
  v29 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v25.i8, 0xDuLL);
  v30 = (int32x4_t)vorrq_s8(vandq_s8(v29, v18), vorrq_s8(v28, vandq_s8(v29, v17)));
  v28.i64[0] = *(_QWORD *)(v7 + v23);
  v31 = (float32x4_t)vaddq_s32(v30, v15);
  v32 = vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v28.i8), v14);
  v33 = (int8x16_t)vshll_n_u16(*(uint16x4_t *)v28.i8, 0xDuLL);
  v34 = vsub_f32(v5, vrnd_f32(v5));
  v35 = vmlaq_n_f32(v20, vsubq_f32(v27, v20), v34.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v35, vmlaq_n_f32(vsubq_f32(v31, v35), vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v33, v18), vorrq_s8(v32, vandq_s8(v33, v17))), v15), v31), v34.f32[0]), v34, 1).u64[0];
  return result;
}

double sub_1B17E8BC8(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  uint64_t v11;
  float32x2_t v12;
  float32x4_t v13;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = *(int32x2_t *)(a1 + 8);
  v5 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3));
  v6 = vmin_s32(vcvt_s32_f32(v5), v4);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(int32x2_t *)(a1 + 16);
  v9 = vbsl_s8((int8x8_t)vcgt_s32(v4, v6), (int8x8_t)v8, *(int8x8_t *)(a1 + 24));
  v10 = vmul_s32(v8, v6);
  v11 = vadd_s32(v10, vdup_lane_s32(v10, 1)).i32[0];
  v12 = vsub_f32(v5, vrnd_f32(v5));
  v13 = vmlaq_n_f32(*(float32x4_t *)(v7 + v11), vsubq_f32(*(float32x4_t *)(v7 + v11 + v9.i32[0]), *(float32x4_t *)(v7 + v11)), v12.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v13, vmlaq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + v11 + v9.i32[1]), v13), vsubq_f32(*(float32x4_t *)(v7 + (int)v11 + v9.i32[1] + (uint64_t)v9.i32[0]), *(float32x4_t *)(v7 + v11 + v9.i32[1])), v12.f32[0]), v12, 1).u64[0];
  return result;
}

double sub_1B17E8C78(uint64_t a1, float32x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  float32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  uint64_t v14;
  int32x2_t v15;
  int8x8_t v16;
  int32x2_t v17;
  int32x2_t v18;
  uint64_t v19;
  int32x2_t v20;
  __int32 v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  double result;

  v9 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v10 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v9, vrndm_f32(v9)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v11 = *(int32x2_t *)(a1 + 8);
  v12 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v10, v10));
  v13 = vmin_s32(vcvt_s32_f32(v12), v11);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(int32x2_t *)(a1 + 16);
  v16 = (int8x8_t)vcgt_s32(v11, v13);
  v17 = vmul_s32(v15, v13);
  v18 = vdup_lane_s32(v17, 1);
  v17.i32[0] = vadd_s32(v17, v18).u32[0];
  v19 = v17.i32[0];
  v20 = (int32x2_t)vbsl_s8(v16, (int8x8_t)v15, *(int8x8_t *)(a1 + 24));
  v17.i8[0] = *(_BYTE *)(v14 + v17.i32[0]);
  *(float *)v15.i32 = (float)v17.u32[0] * 0.0039216;
  v21 = v20.i32[0];
  v22 = v19 + v20.i32[0];
  v23 = v19 + v20.i32[1];
  v20.i8[0] = *(_BYTE *)(v14 + v22);
  v18.i8[0] = *(_BYTE *)(v14 + v23);
  *(float *)v18.i32 = (float)v18.u32[0] * 0.0039216;
  LOBYTE(a9) = *(_BYTE *)(v14 + (int)v23 + (uint64_t)v21);
  v24 = vsub_f32(v12, vrnd_f32(v12));
  *(float *)v20.i32 = -(float)(*(float *)v15.i32 - (float)((float)v20.u32[0] * 0.0039216));
  v25 = (float32x4_t)vdupq_lane_s32(v20, 0);
  v26 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v15, 0), v25, v24.f32[0]);
  v25.f32[0] = -(float)(*(float *)v18.i32 - (float)((float)LODWORD(a9) * 0.0039216));
  *(_QWORD *)&result = vmlaq_lane_f32(v26, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(v18, 0), v26), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0), v24.f32[0]), v24, 1).u64[0];
  return result;
}

double sub_1B17E8D58(uint64_t a1, float32x2_t a2, double a3, double a4, double a5, double a6, double a7, double a8, float a9)
{
  float32x2_t v9;
  float32x2_t v10;
  int32x2_t v11;
  float32x2_t v12;
  int32x2_t v13;
  uint64_t v14;
  int32x2_t v15;
  int8x8_t v16;
  int32x2_t v17;
  int32x2_t v18;
  uint64_t v19;
  int32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  double result;

  v9 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v10 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v9, vrndm_f32(v9)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v11 = *(int32x2_t *)(a1 + 8);
  v12 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v10, v10));
  v13 = vmin_s32(vcvt_s32_f32(v12), v11);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(int32x2_t *)(a1 + 16);
  v16 = (int8x8_t)vcgt_s32(v11, v13);
  v17 = vmul_s32(v15, v13);
  v18 = vdup_lane_s32(v17, 1);
  v17.i32[0] = vadd_s32(v17, v18).u32[0];
  v19 = v17.i32[0];
  v20 = (int32x2_t)vbsl_s8(v16, (int8x8_t)v15, *(int8x8_t *)(a1 + 24));
  v17.i8[0] = *(_BYTE *)(v14 + v17.i32[0]);
  *(float *)v15.i32 = (float)v17.u32[0] * 0.0039216;
  v21 = v19 + v20.i32[0];
  v22 = v19 + v20.i32[1];
  v23 = (int)v22 + (uint64_t)v20.i32[0];
  v20.i8[0] = *(_BYTE *)(v14 + v21);
  v18.i8[0] = *(_BYTE *)(v14 + v22);
  *(float *)v18.i32 = (float)v18.u32[0] * 0.0039216;
  LOBYTE(a9) = *(_BYTE *)(v14 + v23);
  v24 = vsub_f32(v12, vrnd_f32(v12));
  *(float *)v20.i32 = -(float)(*(float *)v15.i32 - (float)((float)v20.u32[0] * 0.0039216));
  v25 = (float32x4_t)vdupq_lane_s32(v20, 0);
  v26 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v15, 0), v25, v24.f32[0]);
  v25.f32[0] = -(float)(*(float *)v18.i32 - (float)((float)LODWORD(a9) * 0.0039216));
  v27 = vmlaq_lane_f32(v26, vmlaq_n_f32(vsubq_f32((float32x4_t)vdupq_lane_s32(v18, 0), v26), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0), v24.f32[0]), v24, 1);
  v28 = vmulq_f32(v27, v27);
  v29 = vcgeq_f32(v27, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v29.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v29), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v27), v28, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v27)), vmulq_f32(v28, v28), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v27), v28,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v27))), (int8x16_t)vmulq_f32(v27, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E8EEC(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  uint64_t v11;
  const float *v12;
  uint32x4_t v13;
  int8x8_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const float *v21;
  uint32x4_t v22;
  const float *v23;
  uint32x4_t v24;
  float32x4_t v25;
  const float *v26;
  uint32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = *(int32x2_t *)(a1 + 8);
  v5 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3));
  v6 = vmin_s32(vcvt_s32_f32(v5), v4);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(int32x2_t *)(a1 + 16);
  v9 = (int8x8_t)vcgt_s32(v4, v6);
  v10 = vmul_s32(v8, v6);
  v11 = vadd_s32(v10, vdup_lane_s32(v10, 1)).i32[0];
  v12 = (const float *)(v7 + v11);
  v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14 = vbsl_s8(v9, (int8x8_t)v8, *(int8x8_t *)(a1 + 24));
  v15.i64[0] = 0xFF000000FFLL;
  v15.i64[1] = 0xFF000000FFLL;
  v16 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v17 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_1B2245E80), v15)), v16);
  v18 = v11 + v14.i32[0];
  v19 = v11 + v14.i32[1];
  v20 = (int)v19 + (uint64_t)v14.i32[0];
  v21 = (const float *)(v7 + v18);
  v22 = (uint32x4_t)vld1q_dup_f32(v21);
  v23 = (const float *)(v7 + v19);
  v24 = (uint32x4_t)vld1q_dup_f32(v23);
  v25 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v24, (uint32x4_t)xmmword_1B2245E80), v15)), v16);
  v26 = (const float *)(v7 + v20);
  v27 = (uint32x4_t)vld1q_dup_f32(v26);
  v28 = vsub_f32(v5, vrnd_f32(v5));
  v29 = vmlaq_n_f32(v17, vmlaq_f32(vnegq_f32(v17), v16, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v22, (uint32x4_t)xmmword_1B2245E80), v15))), v28.f32[0]);
  *(_QWORD *)&result = vmlaq_lane_f32(v29, vmlaq_n_f32(vsubq_f32(v25, v29), vmlaq_f32(vnegq_f32(v25), v16, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v15))), v28.f32[0]), v28, 1).u64[0];
  return result;
}

double sub_1B17E9004(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int8x8_t v11;
  uint64_t v12;
  const float *v13;
  uint32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const float *v21;
  uint32x4_t v22;
  const float *v23;
  uint32x4_t v24;
  float32x4_t v25;
  const float *v26;
  uint32x4_t v27;
  float32x2_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = *(int32x2_t *)(a1 + 8);
  v5 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3));
  v6 = vmin_s32(vcvt_s32_f32(v5), v4);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(int32x2_t *)(a1 + 16);
  v9 = (int8x8_t)vcgt_s32(v4, v6);
  v10 = vmul_s32(v8, v6);
  v11 = vbsl_s8(v9, (int8x8_t)v8, *(int8x8_t *)(a1 + 24));
  v12 = vadd_s32(v10, vdup_lane_s32(v10, 1)).i32[0];
  v13 = (const float *)(v7 + v12);
  v14 = (uint32x4_t)vld1q_dup_f32(v13);
  v15.i64[0] = 0xFF000000FFLL;
  v15.i64[1] = 0xFF000000FFLL;
  v16 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v17 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_1B2245E80), v15)), v16);
  v18 = v12 + v11.i32[0];
  v19 = v12 + v11.i32[1];
  v20 = (int)v19 + (uint64_t)v11.i32[0];
  v21 = (const float *)(v7 + v18);
  v22 = (uint32x4_t)vld1q_dup_f32(v21);
  v23 = (const float *)(v7 + v19);
  v24 = (uint32x4_t)vld1q_dup_f32(v23);
  v25 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v24, (uint32x4_t)xmmword_1B2245E80), v15)), v16);
  v26 = (const float *)(v7 + v20);
  v27 = (uint32x4_t)vld1q_dup_f32(v26);
  v28 = vsub_f32(v5, vrnd_f32(v5));
  v29 = vmlaq_n_f32(v17, vmlaq_f32(vnegq_f32(v17), v16, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v22, (uint32x4_t)xmmword_1B2245E80), v15))), v28.f32[0]);
  v30 = vmlaq_lane_f32(v29, vmlaq_n_f32(vsubq_f32(v25, v29), vmlaq_f32(vnegq_f32(v25), v16, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v15))), v28.f32[0]), v28, 1);
  v31 = vmulq_f32(v30, v30);
  v32 = vcgeq_f32(v30, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v32.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v32), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v30), v31, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v30)), vmulq_f32(v31, v31), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v30), v31,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v30))), (int8x16_t)vmulq_f32(v30, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17E91D0(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  uint64_t v11;
  int8x8_t v12;
  const float *v13;
  uint32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int32 v18;
  uint64_t v19;
  uint64_t v20;
  const float *v21;
  uint32x4_t v22;
  uint64_t v23;
  const float *v24;
  uint32x4_t v25;
  float32x4_t v26;
  const float *v27;
  uint32x4_t v28;
  float32x2_t v29;
  float32x4_t v30;
  int8x16_t v31;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = *(int32x2_t *)(a1 + 8);
  v5 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3));
  v6 = vmin_s32(vcvt_s32_f32(v5), v4);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(int32x2_t *)(a1 + 16);
  v9 = (int8x8_t)vcgt_s32(v4, v6);
  v10 = vmul_s32(v8, v6);
  v11 = vadd_s32(v10, vdup_lane_s32(v10, 1)).i32[0];
  v12 = vbsl_s8(v9, (int8x8_t)v8, *(int8x8_t *)(a1 + 24));
  v13 = (const float *)(v7 + v11);
  v14 = (uint32x4_t)vld1q_dup_f32(v13);
  v15.i64[0] = 0xFF000000FFLL;
  v15.i64[1] = 0xFF000000FFLL;
  v16 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v17 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_1B2245E80), v15)), v16);
  v18 = v12.i32[0];
  v19 = v11 + v12.i32[0];
  v20 = v11 + v12.i32[1];
  v21 = (const float *)(v7 + v19);
  v22 = (uint32x4_t)vld1q_dup_f32(v21);
  v23 = (int)v20 + (uint64_t)v18;
  v24 = (const float *)(v7 + v20);
  v25 = (uint32x4_t)vld1q_dup_f32(v24);
  v26 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v25, (uint32x4_t)xmmword_1B2245E80), v15)), v16);
  v27 = (const float *)(v7 + v23);
  v28 = (uint32x4_t)vld1q_dup_f32(v27);
  v29 = vsub_f32(v5, vrnd_f32(v5));
  v30 = vmlaq_n_f32(v17, vmlaq_f32(vnegq_f32(v17), v16, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v22, (uint32x4_t)xmmword_1B2245E80), v15))), v29.f32[0]);
  v31 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_lane_f32(v30, vmlaq_n_f32(vsubq_f32(v26, v30), vmlaq_f32(vnegq_f32(v26), v16, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v28, (uint32x4_t)xmmword_1B2245E80), v15))), v29.f32[0]), v29, 1));
  *(_QWORD *)&result = vextq_s8(v31, v31, 0xCuLL).u64[0];
  return result;
}

double sub_1B17E92F0(uint64_t a1, float32x2_t a2)
{
  float32x2_t v2;
  float32x2_t v3;
  int32x2_t v4;
  float32x2_t v5;
  int32x2_t v6;
  uint64_t v7;
  int32x2_t v8;
  int8x8_t v9;
  int32x2_t v10;
  uint64_t v11;
  const float *v12;
  uint32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const float *v20;
  uint32x4_t v21;
  const float *v22;
  uint32x4_t v23;
  float32x4_t v24;
  const float *v25;
  uint32x4_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  double result;

  v2 = vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)0x3F0000003F000000, vsub_f32(a2, *(float32x2_t *)(a1 + 48)));
  v3 = vabd_f32((float32x2_t)0x3F0000003F000000, vminnm_f32(vsub_f32(v2, vrndm_f32(v2)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu)));
  v4 = *(int32x2_t *)(a1 + 8);
  v5 = vmul_f32(*(float32x2_t *)a1, vadd_f32(v3, v3));
  v6 = vmin_s32(vcvt_s32_f32(v5), v4);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(int32x2_t *)(a1 + 16);
  v9 = vbsl_s8((int8x8_t)vcgt_s32(v4, v6), (int8x8_t)v8, *(int8x8_t *)(a1 + 24));
  v10 = vmul_s32(v8, v6);
  v11 = vadd_s32(v10, vdup_lane_s32(v10, 1)).i32[0];
  v12 = (const float *)(v7 + v11);
  v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14.i64[0] = 0xFF000000FFLL;
  v14.i64[1] = 0xFF000000FFLL;
  v15 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v16 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_1B2245E80), v14)), v15);
  v17 = v11 + v9.i32[0];
  v18 = v11 + v9.i32[1];
  v19 = (int)v18 + (uint64_t)v9.i32[0];
  v20 = (const float *)(v7 + v17);
  v21 = (uint32x4_t)vld1q_dup_f32(v20);
  v22 = (const float *)(v7 + v18);
  v23 = (uint32x4_t)vld1q_dup_f32(v22);
  v24 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v23, (uint32x4_t)xmmword_1B2245E80), v14)), v15);
  v25 = (const float *)(v7 + v19);
  v26 = (uint32x4_t)vld1q_dup_f32(v25);
  v27 = vsub_f32(v5, vrnd_f32(v5));
  v28 = vmlaq_n_f32(v16, vmlaq_f32(vnegq_f32(v16), v15, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)xmmword_1B2245E80), v14))), v27.f32[0]);
  v29 = vmlaq_lane_f32(v28, vmlaq_n_f32(vsubq_f32(v24, v28), vmlaq_f32(vnegq_f32(v24), v15, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2245E80), v14))), v27.f32[0]), v27, 1);
  v30 = vmulq_f32(v29, v29);
  v31 = vcgeq_f32(v29, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v31.i32[3] = 0;
  v32 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v31), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v29), v30, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v29)), vmulq_f32(v30, v30), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v29), v30,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v29))), (int8x16_t)vmulq_f32(v29, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v32.i32[3] = v29.i32[3];
  v33 = (int8x16_t)vrev64q_s32(v32);
  *(_QWORD *)&result = vextq_s8(v33, v33, 0xCuLL).u64[0];
  return result;
}

float32x2_t vfx_sampler2d_make@<D0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, int32x2_t a6@<D0>)
{
  uint64_t v6;
  unsigned int v7;
  float32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t v13;
  uint64_t v14;
  float32x2_t result;

  v6 = a2 - 1;
  if (v6 > 9)
    v7 = 2;
  else
    v7 = dword_1B2245ED0[v6];
  v8 = vcvt_f32_s32(a6);
  *(float32x2_t *)a5 = v8;
  *(int32x2_t *)(a5 + 8) = vadd_s32(a6, (int32x2_t)-1);
  v9 = vzip1_s32((int32x2_t)0x100000001, a6);
  v10.i32[0] = 1;
  v10.i32[1] = 1 - a6.i32[1];
  v11.i32[0] = vsub_s32((int32x2_t)0x100000001, a6).u32[0];
  v12 = vmul_n_s32(v10, a6.i32[0]);
  v13 = vdup_n_s32(v7);
  v11.i32[1] = v12.i32[1];
  v14 = (uint64_t)*(&off_1E63D60D0[40 * a4] + 10 * a3 + a2);
  *(int32x2_t *)(a5 + 16) = vmul_s32(v13, v9);
  *(int32x2_t *)(a5 + 24) = vmul_s32(v13, v11);
  *(_QWORD *)(a5 + 32) = a1;
  *(_QWORD *)(a5 + 40) = v14;
  result = vdiv_f32((float32x2_t)0x3F0000003F000000, v8);
  *(float32x2_t *)(a5 + 48) = result;
  return result;
}

int32x2_t sub_1B17E9564(uint64_t a1, float a2)
{
  int32x2_t result;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;

  *(double *)&result = 0.0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    v4 = (int)(float)(*(float *)a1 * a2);
    if (v4 >= *(_DWORD *)(a1 + 4))
      v4 = *(_DWORD *)(a1 + 4);
    v5 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
    v6 = (v5 >> 10) & 0x1F;
    if (v6 == 31)
      v7 = 2139095040;
    else
      v7 = (v5 >> 10) & 0x1F;
    if (v6)
      v8 = v6 == 31;
    else
      v8 = 1;
    if (v8)
      v9 = v7;
    else
      v9 = (v6 << 23) + 939524096;
    result.i32[0] = v9 | (v5 << 16) & 0x80000000 | (v5 >> 7) & 7 | (8 * (v5 & 0x3FF)) & 0x1FFF | ((v5 & 0x3FF) << 13);
    return (int32x2_t)vdupq_lane_s32(result, 0).u64[0];
  }
  return result;
}

double sub_1B17E95F8(uint64_t a1, float a2)
{
  double result;
  int v4;
  const float *v5;

  result = 0.0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    v4 = (int)(float)(*(float *)a1 * a2);
    if (v4 >= *(_DWORD *)(a1 + 4))
      v4 = *(_DWORD *)(a1 + 4);
    v5 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
    *(_QWORD *)&result = vld1q_dup_f32(v5).u64[0];
  }
  return result;
}

double sub_1B17E9640(uint64_t a1, float a2)
{
  double result;
  int v4;
  int16x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  int8x16_t v8;
  int32x4_t v9;

  result = 0.0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    v4 = (int)(float)(*(float *)a1 * a2);
    if (v4 >= *(_DWORD *)(a1 + 4))
      v4 = *(_DWORD *)(a1 + 4);
    v5 = *(int16x4_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
    v6.i64[0] = 0x8000000080000000;
    v6.i64[1] = 0x8000000080000000;
    v7 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v5), v6);
    v8 = (int8x16_t)vshll_n_u16((uint16x4_t)v5, 0xDuLL);
    v9 = (int32x4_t)vorrq_s8(vandq_s8(v8, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v7, vandq_s8(v8, (int8x16_t)vdupq_n_s32(0x7FE000u))));
    v7.i64[0] = 0x3800000038000000;
    v7.i64[1] = 0x3800000038000000;
    *(_QWORD *)&result = vaddq_s32(v9, v7).u64[0];
  }
  return result;
}

__n128 sub_1B17E96C0(uint64_t a1, float a2)
{
  __n128 result;
  int v4;

  result.n128_u64[0] = 0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    v4 = (int)(float)(*(float *)a1 * a2);
    if (v4 >= *(_DWORD *)(a1 + 4))
      v4 = *(_DWORD *)(a1 + 4);
    return *(__n128 *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
  }
  return result;
}

__n64 sub_1B17E9708(uint64_t a1, float a2)
{
  __n64 result;
  int v4;

  result.n64_u64[0] = 0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    result.n64_f32[0] = *(float *)a1 * a2;
    v4 = (int)result.n64_f32[0];
    if ((int)result.n64_f32[0] >= *(_DWORD *)(a1 + 4))
      v4 = *(_DWORD *)(a1 + 4);
    result.n64_u8[0] = *(_BYTE *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
    result.n64_f32[0] = (float)result.n64_u32[0] * 0.0039216;
    return (__n64)vdupq_lane_s32((int32x2_t)result.n64_u64[0], 0).u64[0];
  }
  return result;
}

double sub_1B17E9764(uint64_t a1, float a2, double a3)
{
  double result;
  float v5;
  int v6;
  int32x4_t v7;

  result = 0.0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    v5 = *(float *)a1 * a2;
    v6 = (int)v5;
    if ((int)v5 >= *(_DWORD *)(a1 + 4))
      v6 = *(_DWORD *)(a1 + 4);
    LOBYTE(v5) = *(_BYTE *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v6);
    *(float *)&a3 = (float)LODWORD(v5) * 0.0039216;
    v7 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
    v7.i32[3] = 0;
    *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v7), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)&a3), *(float *)&a3 * *(float *)&a3), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                            (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                            *(float *)&a3),
                                          *(float *)&a3 * *(float *)&a3),
                                        (float)(*(float *)&a3 * *(float *)&a3) * (float)(*(float *)&a3 * *(float *)&a3)),
                           (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)&a3)).u64[0];
  }
  return result;
}

double sub_1B17E9874(uint64_t a1, float a2)
{
  double result;
  int v4;
  const float *v5;
  uint32x4_t v6;
  int8x16_t v7;

  result = 0.0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    v4 = (int)(float)(*(float *)a1 * a2);
    if (v4 >= *(_DWORD *)(a1 + 4))
      v4 = *(_DWORD *)(a1 + 4);
    v5 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
    v6 = (uint32x4_t)vld1q_dup_f32(v5);
    v7.i64[0] = 0xFF000000FFLL;
    v7.i64[1] = 0xFF000000FFLL;
    *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B2245E80), v7)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  }
  return result;
}

double sub_1B17E98E4(uint64_t a1, float a2)
{
  double result;
  int v4;
  const float *v5;
  uint32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;

  result = 0.0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    v4 = (int)(float)(*(float *)a1 * a2);
    if (v4 >= *(_DWORD *)(a1 + 4))
      v4 = *(_DWORD *)(a1 + 4);
    v5 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
    v6 = (uint32x4_t)vld1q_dup_f32(v5);
    v7.i64[0] = 0xFF000000FFLL;
    v7.i64[1] = 0xFF000000FFLL;
    v8 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B2245E80), v7));
    v9 = vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v10 = vmulq_f32(v9, v9);
    v11 = vmulq_f32(v10, v10);
    v12 = vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v8), v10, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v8));
    v13 = vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v8), v10, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v8));
    v14 = vcgeq_f32(v9, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
    v14.i32[3] = 0;
    *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v14), (int8x16_t)vmlaq_f32(v13, v11, v12), (int8x16_t)vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  }
  return result;
}

double sub_1B17E99F8(uint64_t a1, float a2)
{
  double result;
  int v4;
  const float *v5;
  uint32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;

  result = 0.0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    v4 = (int)(float)(*(float *)a1 * a2);
    if (v4 >= *(_DWORD *)(a1 + 4))
      v4 = *(_DWORD *)(a1 + 4);
    v5 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
    v6 = (uint32x4_t)vld1q_dup_f32(v5);
    v7.i64[0] = 0xFF000000FFLL;
    v7.i64[1] = 0xFF000000FFLL;
    v8 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B2245E80), v7)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
    *(_QWORD *)&result = vextq_s8(v8, v8, 0xCuLL).u64[0];
  }
  return result;
}

double sub_1B17E9A70(uint64_t a1, float a2)
{
  double result;
  int v4;
  const float *v5;
  uint32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;

  result = 0.0;
  if (a2 < 1.0 && a2 >= 0.0)
  {
    v4 = (int)(float)(*(float *)a1 * a2);
    if (v4 >= *(_DWORD *)(a1 + 4))
      v4 = *(_DWORD *)(a1 + 4);
    v5 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
    v6 = (uint32x4_t)vld1q_dup_f32(v5);
    v7.i64[0] = 0xFF000000FFLL;
    v7.i64[1] = 0xFF000000FFLL;
    v8 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v6, (uint32x4_t)xmmword_1B2245E80), v7));
    v9 = vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x3B808081u));
    v10 = vmulq_f32(v9, v9);
    v11 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v8), v10, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v8)), vmulq_f32(v10, v10), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v8), v10, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v8)));
    v12 = vcgeq_f32(v9, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
    v12.i32[3] = 0;
    v13 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v12), v11, (int8x16_t)vmulq_f32(v8, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
    v13.i32[3] = v9.i32[3];
    v14 = (int8x16_t)vrev64q_s32(v13);
    *(_QWORD *)&result = vextq_s8(v14, v14, 0xCuLL).u64[0];
  }
  return result;
}

double sub_1B17E9B8C(uint64_t a1, double a2)
{
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(fmaxf(*(float *)&a2, 0.0), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (v3 >> 10) & 0x1F;
  if (v4 == 31)
    v5 = 2139095040;
  else
    v5 = (v3 >> 10) & 0x1F;
  if (v4)
    v6 = v4 == 31;
  else
    v6 = 1;
  if (v6)
    v7 = v5;
  else
    v7 = (v4 << 23) + 939524096;
  LODWORD(a2) = v7 | (v3 << 16) & 0x80000000 | (v3 >> 7) & 7 | (8 * (v3 & 0x3FF)) & 0x1FFF | ((v3 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17E9C14(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(fmaxf(a2, 0.0), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  *(_QWORD *)&result = vld1q_dup_f32(v3).u64[0];
  return result;
}

double sub_1B17E9C50(uint64_t a1, float a2)
{
  int v2;
  int16x4_t v3;
  int8x16_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(fmaxf(a2, 0.0), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = *(int16x4_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v5 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v3), v4);
  v6 = (int8x16_t)vshll_n_u16((uint16x4_t)v3, 0xDuLL);
  v7 = (int32x4_t)vorrq_s8(vandq_s8(v6, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v5, vandq_s8(v6, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v5.i64[0] = 0x3800000038000000;
  v5.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v7, v5).u64[0];
  return result;
}

__n128 sub_1B17E9CC4(uint64_t a1, float a2)
{
  int v2;

  v2 = (int)(float)(*(float *)a1 * fminf(fmaxf(a2, 0.0), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  return *(__n128 *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
}

double sub_1B17E9D00(uint64_t a1, double a2)
{
  int v2;
  double result;

  *(float *)&a2 = *(float *)a1 * fminf(fmaxf(*(float *)&a2, 0.0), 1.0);
  v2 = (int)*(float *)&a2;
  if ((int)*(float *)&a2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  *(float *)&a2 = (float)LODWORD(a2) * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17E9D50(uint64_t a1, float a2, double a3)
{
  float v3;
  int v4;
  int32x4_t v5;
  double result;

  v3 = *(float *)a1 * fminf(fmaxf(a2, 0.0), 1.0);
  v4 = (int)v3;
  if ((int)v3 >= *(_DWORD *)(a1 + 4))
    v4 = *(_DWORD *)(a1 + 4);
  LOBYTE(v3) = *(_BYTE *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
  *(float *)&a3 = (float)LODWORD(v3) * 0.0039216;
  v5 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v5.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v5), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)&a3), *(float *)&a3 * *(float *)&a3), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)&a3),
                                        *(float *)&a3 * *(float *)&a3),
                                      (float)(*(float *)&a3 * *(float *)&a3) * (float)(*(float *)&a3 * *(float *)&a3)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)&a3)).u64[0];
  return result;
}

double sub_1B17E9E54(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(fmaxf(a2, 0.0), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17E9EB8(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(fmaxf(a2, 0.0), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v9.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v9), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6))), (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17E9FC0(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(fmaxf(a2, 0.0), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v6, v6, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EA02C(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(fmaxf(a2, 0.0), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6)));
  v10 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v10.i32[3] = 0;
  v11 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v10), v9, (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v11.i32[3] = v7.i32[3];
  v12 = (int8x16_t)vrev64q_s32(v11);
  *(_QWORD *)&result = vextq_s8(v12, v12, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EA13C(uint64_t a1, double a2)
{
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(*(float *)&a2 - floorf(*(float *)&a2), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (v3 >> 10) & 0x1F;
  if (v4 == 31)
    v5 = 2139095040;
  else
    v5 = (v3 >> 10) & 0x1F;
  if (v4)
    v6 = v4 == 31;
  else
    v6 = 1;
  if (v6)
    v7 = v5;
  else
    v7 = (v4 << 23) + 939524096;
  LODWORD(a2) = v7 | (v3 << 16) & 0x80000000 | (v3 >> 7) & 7 | (8 * (v3 & 0x3FF)) & 0x1FFF | ((v3 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17EA1C8(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(a2 - floorf(a2), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  *(_QWORD *)&result = vld1q_dup_f32(v3).u64[0];
  return result;
}

double sub_1B17EA208(uint64_t a1, float a2)
{
  int v2;
  int16x4_t v3;
  int8x16_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(a2 - floorf(a2), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = *(int16x4_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v5 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v3), v4);
  v6 = (int8x16_t)vshll_n_u16((uint16x4_t)v3, 0xDuLL);
  v7 = (int32x4_t)vorrq_s8(vandq_s8(v6, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v5, vandq_s8(v6, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v5.i64[0] = 0x3800000038000000;
  v5.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v7, v5).u64[0];
  return result;
}

__n128 sub_1B17EA280(uint64_t a1, float a2)
{
  int v2;

  v2 = (int)(float)(*(float *)a1 * fminf(a2 - floorf(a2), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  return *(__n128 *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
}

double sub_1B17EA2C0(uint64_t a1, double a2)
{
  int v2;
  double result;

  *(float *)&a2 = *(float *)a1 * fminf(*(float *)&a2 - floorf(*(float *)&a2), 1.0);
  v2 = (int)*(float *)&a2;
  if ((int)*(float *)&a2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  *(float *)&a2 = (float)LODWORD(a2) * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17EA314(uint64_t a1, float a2, double a3)
{
  float v3;
  int v4;
  int32x4_t v5;
  double result;

  v3 = *(float *)a1 * fminf(a2 - floorf(a2), 1.0);
  v4 = (int)v3;
  if ((int)v3 >= *(_DWORD *)(a1 + 4))
    v4 = *(_DWORD *)(a1 + 4);
  LOBYTE(v3) = *(_BYTE *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
  *(float *)&a3 = (float)LODWORD(v3) * 0.0039216;
  v5 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v5.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v5), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)&a3), *(float *)&a3 * *(float *)&a3), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)&a3),
                                        *(float *)&a3 * *(float *)&a3),
                                      (float)(*(float *)&a3 * *(float *)&a3) * (float)(*(float *)&a3 * *(float *)&a3)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)&a3)).u64[0];
  return result;
}

double sub_1B17EA41C(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(a2 - floorf(a2), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17EA484(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(a2 - floorf(a2), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v9.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v9), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6))), (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17EA590(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(a2 - floorf(a2), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v6, v6, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EA600(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  double result;

  v2 = (int)(float)(*(float *)a1 * fminf(a2 - floorf(a2), 1.0));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6)));
  v10 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v10.i32[3] = 0;
  v11 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v10), v9, (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v11.i32[3] = v7.i32[3];
  v12 = (int8x16_t)vrev64q_s32(v11);
  *(_QWORD *)&result = vextq_s8(v12, v12, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EA714(uint64_t a1, double a2)
{
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  double result;

  v2 = (int)(float)(vabds_f32(0.5, fminf((float)((float)(*(float *)&a2 * 0.5) + 0.5) - floorf((float)(*(float *)&a2 * 0.5) + 0.5), 1.0))* (float)(*(float *)a1 + *(float *)a1));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (v3 >> 10) & 0x1F;
  if (v4 == 31)
    v5 = 2139095040;
  else
    v5 = (v3 >> 10) & 0x1F;
  if (v4)
    v6 = v4 == 31;
  else
    v6 = 1;
  if (v6)
    v7 = v5;
  else
    v7 = (v4 << 23) + 939524096;
  LODWORD(a2) = v7 | (v3 << 16) & 0x80000000 | (v3 >> 7) & 7 | (8 * (v3 & 0x3FF)) & 0x1FFF | ((v3 & 0x3FF) << 13);
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17EA7B0(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  double result;

  v2 = (int)(float)(vabds_f32(0.5, fminf((float)((float)(a2 * 0.5) + 0.5) - floorf((float)(a2 * 0.5) + 0.5), 1.0))
                  * (float)(*(float *)a1 + *(float *)a1));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  *(_QWORD *)&result = vld1q_dup_f32(v3).u64[0];
  return result;
}

double sub_1B17EA800(uint64_t a1, float a2)
{
  int v2;
  int16x4_t v3;
  int8x16_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int32x4_t v7;
  double result;

  v2 = (int)(float)(vabds_f32(0.5, fminf((float)((float)(a2 * 0.5) + 0.5) - floorf((float)(a2 * 0.5) + 0.5), 1.0))
                  * (float)(*(float *)a1 + *(float *)a1));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = *(int16x4_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  v5 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v3), v4);
  v6 = (int8x16_t)vshll_n_u16((uint16x4_t)v3, 0xDuLL);
  v7 = (int32x4_t)vorrq_s8(vandq_s8(v6, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8((int8x16_t)v5, vandq_s8(v6, (int8x16_t)vdupq_n_s32(0x7FE000u))));
  v5.i64[0] = 0x3800000038000000;
  v5.i64[1] = 0x3800000038000000;
  *(_QWORD *)&result = vaddq_s32(v7, v5).u64[0];
  return result;
}

__n128 sub_1B17EA888(uint64_t a1, float a2)
{
  int v2;

  v2 = (int)(float)(vabds_f32(0.5, fminf((float)((float)(a2 * 0.5) + 0.5) - floorf((float)(a2 * 0.5) + 0.5), 1.0))
                  * (float)(*(float *)a1 + *(float *)a1));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  return *(__n128 *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
}

double sub_1B17EA8D8(uint64_t a1, double a2)
{
  int v2;
  double result;

  *(float *)&a2 = vabds_f32(0.5, fminf((float)((float)(*(float *)&a2 * 0.5) + 0.5) - floorf((float)(*(float *)&a2 * 0.5) + 0.5), 1.0))* (float)(*(float *)a1 + *(float *)a1);
  v2 = (int)*(float *)&a2;
  if ((int)*(float *)&a2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  *(float *)&a2 = (float)LODWORD(a2) * 0.0039216;
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17EA93C(uint64_t a1, float a2, double a3)
{
  float v3;
  int v4;
  int32x4_t v5;
  double result;

  v3 = vabds_f32(0.5, fminf((float)((float)(a2 * 0.5) + 0.5) - floorf((float)(a2 * 0.5) + 0.5), 1.0))
     * (float)(*(float *)a1 + *(float *)a1);
  v4 = (int)v3;
  if ((int)v3 >= *(_DWORD *)(a1 + 4))
    v4 = *(_DWORD *)(a1 + 4);
  LOBYTE(v3) = *(_BYTE *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4);
  *(float *)&a3 = (float)LODWORD(v3) * 0.0039216;
  v5 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v5.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v5), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)&a3), *(float *)&a3 * *(float *)&a3), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)&a3),
                                        *(float *)&a3 * *(float *)&a3),
                                      (float)(*(float *)&a3 * *(float *)&a3) * (float)(*(float *)&a3 * *(float *)&a3)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)&a3)).u64[0];
  return result;
}

double sub_1B17EAA54(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  double result;

  v2 = (int)(float)(vabds_f32(0.5, fminf((float)((float)(a2 * 0.5) + 0.5) - floorf((float)(a2 * 0.5) + 0.5), 1.0))
                  * (float)(*(float *)a1 + *(float *)a1));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  *(_QWORD *)&result = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_1B17EAACC(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  double result;

  v2 = (int)(float)(vabds_f32(0.5, fminf((float)((float)(a2 * 0.5) + 0.5) - floorf((float)(a2 * 0.5) + 0.5), 1.0))
                  * (float)(*(float *)a1 + *(float *)a1));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v9.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v9), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6))), (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u))).u64[0];
  return result;
}

double sub_1B17EABE8(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  double result;

  v2 = (int)(float)(vabds_f32(0.5, fminf((float)((float)(a2 * 0.5) + 0.5) - floorf((float)(a2 * 0.5) + 0.5), 1.0))
                  * (float)(*(float *)a1 + *(float *)a1));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = (int8x16_t)vrev64q_s32((int32x4_t)vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5)), (float32x4_t)vdupq_n_s32(0x3B808081u)));
  *(_QWORD *)&result = vextq_s8(v6, v6, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EAC68(uint64_t a1, float a2)
{
  int v2;
  const float *v3;
  uint32x4_t v4;
  int8x16_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int8x16_t v12;
  double result;

  v2 = (int)(float)(vabds_f32(0.5, fminf((float)((float)(a2 * 0.5) + 0.5) - floorf((float)(a2 * 0.5) + 0.5), 1.0))
                  * (float)(*(float *)a1 + *(float *)a1));
  if (v2 >= *(_DWORD *)(a1 + 4))
    v2 = *(_DWORD *)(a1 + 4);
  v3 = (const float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v2);
  v4 = (uint32x4_t)vld1q_dup_f32(v3);
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v4, (uint32x4_t)xmmword_1B2245E80), v5));
  v7 = vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3B808081u));
  v8 = vmulq_f32(v7, v7);
  v9 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)xmmword_1B2245EC0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)xmmword_1B2245EB0, v6)), vmulq_f32(v8, v8), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)xmmword_1B2245EA0, v6), v8, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)xmmword_1B2245E90, v6)));
  v10 = vcgeq_f32(v7, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v10.i32[3] = 0;
  v11 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v10), v9, (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x399F22B4u)));
  v11.i32[3] = v7.i32[3];
  v12 = (int8x16_t)vrev64q_s32(v11);
  *(_QWORD *)&result = vextq_s8(v12, v12, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EAD8C(uint64_t a1, float a2, float32x4_t a3, float32x4_t a4)
{
  float v4;
  float32x4_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;

  v4 = a2 - *(float *)(a1 + 32);
  v5 = 0uLL;
  if (v4 < 1.0 && v4 >= 0.0)
  {
    v5.f32[0] = *(float *)a1 * v4;
    v6 = *(_DWORD *)(a1 + 4);
    v7 = *(_DWORD *)(a1 + 8);
    if ((int)v5.f32[0] >= v6)
      v8 = *(_DWORD *)(a1 + 4);
    else
      v8 = (int)v5.f32[0];
    v9 = *(_QWORD *)(a1 + 16);
    if (v6 <= (int)v5.f32[0])
      v10 = 0;
    else
      v10 = *(_DWORD *)(a1 + 8);
    v11 = v7 * v8;
    v12 = *(unsigned __int16 *)(v9 + v7 * v8);
    v13 = (v12 >> 10) & 0x1F;
    if (v13 == 31)
      v14 = 2139095040;
    else
      v14 = (v12 >> 10) & 0x1F;
    if (v13)
      v15 = v13 == 31;
    else
      v15 = 1;
    if (v15)
      v16 = v14;
    else
      v16 = (v13 << 23) + 939524096;
    a3.i32[0] = v16 | (v12 << 16) & 0x80000000 | (v12 >> 7) & 7 | (8 * (v12 & 0x3FF)) & 0x1FFF | ((v12 & 0x3FF) << 13);
    v17 = *(unsigned __int16 *)(v9 + v11 + v10);
    v18 = (v17 >> 10) & 0x1F;
    if (v18 == 31)
      v19 = 2139095040;
    else
      v19 = (v17 >> 10) & 0x1F;
    if (v18)
      v20 = v18 == 31;
    else
      v20 = 1;
    if (v20)
      v21 = v19;
    else
      v21 = (v18 << 23) + 939524096;
    a4.i32[0] = v21 | (v17 << 16) & 0x80000000 | (v17 >> 7) & 7 | (8 * (v17 & 0x3FF)) & 0x1FFF | ((v17 & 0x3FF) << 13);
    v5.f32[0] = v5.f32[0] - truncf(v5.f32[0]);
    v5.i64[0] = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmlaq_f32(a3, v5, vsubq_f32(a4, a3)), 0).u64[0];
  }
  return *(double *)v5.i64;
}

double sub_1B17EAE80(uint64_t a1, float a2)
{
  float v2;
  double result;
  int v4;
  int v5;
  int v6;

  v2 = a2 - *(float *)(a1 + 32);
  result = 0.0;
  if (v2 < 1.0 && v2 >= 0.0)
  {
    *(float *)&result = *(float *)a1 * v2;
    v4 = *(_DWORD *)(a1 + 4);
    if ((int)*(float *)&result >= v4)
      v5 = *(_DWORD *)(a1 + 4);
    else
      v5 = (int)*(float *)&result;
    if (v4 <= (int)*(float *)&result)
      v6 = 0;
    else
      v6 = *(_DWORD *)(a1 + 8);
    *(float *)&result = *(float *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v5)
                      + (float)((float)(*(float *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v5 + v6)
                                      - *(float *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v5))
                              * (float)(*(float *)&result - truncf(*(float *)&result)));
    *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&result, 0).u64[0];
  }
  return result;
}

double sub_1B17EAEEC(uint64_t a1, float a2)
{
  float v2;
  double result;
  float v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int16x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int32x4_t v16;
  float32x4_t v17;
  int16x4_t v18;
  int8x16_t v19;
  int8x16_t v20;

  v2 = a2 - *(float *)(a1 + 32);
  result = 0.0;
  if (v2 < 1.0 && v2 >= 0.0)
  {
    v4 = *(float *)a1 * v2;
    v5 = *(_DWORD *)(a1 + 4);
    v6 = *(_DWORD *)(a1 + 8);
    if ((int)v4 >= v5)
      v7 = *(_DWORD *)(a1 + 4);
    else
      v7 = (int)v4;
    v8 = *(_QWORD *)(a1 + 16);
    if (v5 <= (int)v4)
      v9 = 0;
    else
      v9 = *(_DWORD *)(a1 + 8);
    v10 = *(int16x4_t *)(v8 + v6 * v7);
    v11.i64[0] = 0x8000000080000000;
    v11.i64[1] = 0x8000000080000000;
    v12 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v10), v11);
    v13 = (int8x16_t)vshll_n_u16((uint16x4_t)v10, 0xDuLL);
    v14 = (int8x16_t)vdupq_n_s32(0x7FE000u);
    v15 = (int8x16_t)vdupq_n_s32(0xF800000u);
    v16 = (int32x4_t)vorrq_s8(vandq_s8(v13, v15), vorrq_s8((int8x16_t)v12, vandq_s8(v13, v14)));
    v12.i64[0] = 0x3800000038000000;
    v12.i64[1] = 0x3800000038000000;
    v17 = (float32x4_t)vaddq_s32(v16, v12);
    v18 = *(int16x4_t *)(v8 + v6 * v7 + v9);
    v19 = vandq_s8((int8x16_t)vmovl_s16(v18), v11);
    v20 = (int8x16_t)vshll_n_u16((uint16x4_t)v18, 0xDuLL);
    *(_QWORD *)&result = vmlaq_n_f32(v17, vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v20, v15), vorrq_s8(v19, vandq_s8(v20, v14))), v12), v17), v4 - truncf(v4)).u64[0];
  }
  return result;
}

double sub_1B17EAFAC(uint64_t a1, float a2)
{
  float v2;
  double result;
  float v4;
  int v5;
  int v6;
  int v7;

  v2 = a2 - *(float *)(a1 + 32);
  result = 0.0;
  if (v2 < 1.0 && v2 >= 0.0)
  {
    v4 = *(float *)a1 * v2;
    v5 = *(_DWORD *)(a1 + 4);
    if ((int)v4 >= v5)
      v6 = *(_DWORD *)(a1 + 4);
    else
      v6 = (int)v4;
    if (v5 <= (int)v4)
      v7 = 0;
    else
      v7 = *(_DWORD *)(a1 + 8);
    *(_QWORD *)&result = vmlaq_n_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v6), vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v6 + v7), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v6)), v4 - truncf(v4)).u64[0];
  }
  return result;
}

double sub_1B17EB014(uint64_t a1, float a2, double a3, double a4, float a5)
{
  float v5;
  double result;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;

  v5 = a2 - *(float *)(a1 + 32);
  result = 0.0;
  if (v5 < 1.0 && v5 >= 0.0)
  {
    *(float *)&result = *(float *)a1 * v5;
    v7 = *(_DWORD *)(a1 + 4);
    v8 = *(_DWORD *)(a1 + 8);
    if ((int)*(float *)&result >= v7)
      v9 = *(_DWORD *)(a1 + 4);
    else
      v9 = (int)*(float *)&result;
    v10 = *(_QWORD *)(a1 + 16);
    if (v7 <= (int)*(float *)&result)
      v11 = 0;
    else
      v11 = *(_DWORD *)(a1 + 8);
    LOBYTE(v5) = *(_BYTE *)(v10 + v8 * v9);
    LOBYTE(a5) = *(_BYTE *)(v10 + v8 * v9 + v11);
    *(float *)&result = (float)((float)LODWORD(v5) * 0.0039216)
                      + (float)((float)-(float)((float)((float)LODWORD(v5) * 0.0039216)
                                              - (float)((float)LODWORD(a5) * 0.0039216))
                              * (float)(*(float *)&result - truncf(*(float *)&result)));
    *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&result, 0).u64[0];
  }
  return result;
}

double sub_1B17EB094(uint64_t a1, float a2, double a3, double a4, float a5)
{
  double result;
  float v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int32x4_t v12;

  *(float *)&a3 = a2 - *(float *)(a1 + 32);
  result = 0.0;
  if (*(float *)&a3 < 1.0 && *(float *)&a3 >= 0.0)
  {
    v6 = *(float *)a1 * *(float *)&a3;
    v7 = *(_DWORD *)(a1 + 4);
    v8 = *(_DWORD *)(a1 + 8);
    if ((int)v6 >= v7)
      v9 = *(_DWORD *)(a1 + 4);
    else
      v9 = (int)v6;
    v10 = *(_QWORD *)(a1 + 16);
    if (v7 <= (int)v6)
      v11 = 0;
    else
      v11 = *(_DWORD *)(a1 + 8);
    LOBYTE(a3) = *(_BYTE *)(v10 + v8 * v9);
    LOBYTE(a5) = *(_BYTE *)(v10 + v8 * v9 + v11);
    *(float *)&a3 = (float)((float)LODWORD(a3) * 0.0039216)
                  + (float)((float)-(float)((float)((float)LODWORD(a3) * 0.0039216)
                                          - (float)((float)LODWORD(a5) * 0.0039216))
                          * (float)(v6 - truncf(v6)));
    v12 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
    v12.i32[3] = 0;
    *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v12), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)&a3), *(float *)&a3 * *(float *)&a3), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                            (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                            *(float *)&a3),
                                          *(float *)&a3 * *(float *)&a3),
                                        (float)(*(float *)&a3 * *(float *)&a3) * (float)(*(float *)&a3 * *(float *)&a3)),
                           (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)&a3)).u64[0];
  }
  return result;
}

double sub_1B17EB1C8(uint64_t a1, float a2)
{
  float v2;
  double result;
  float v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  const float *v16;
  uint32x4_t v17;

  v2 = a2 - *(float *)(a1 + 32);
  result = 0.0;
  if (v2 < 1.0 && v2 >= 0.0)
  {
    v4 = *(float *)a1 * v2;
    v5 = *(_DWORD *)(a1 + 4);
    v6 = *(_DWORD *)(a1 + 8);
    if ((int)v4 >= v5)
      v7 = *(_DWORD *)(a1 + 4);
    else
      v7 = (int)v4;
    v8 = *(_QWORD *)(a1 + 16);
    if (v5 <= (int)v4)
      v9 = 0;
    else
      v9 = *(_DWORD *)(a1 + 8);
    v10 = v6 * v7;
    v11 = (const float *)(v8 + v6 * v7);
    v12 = (uint32x4_t)vld1q_dup_f32(v11);
    v13.i64[0] = 0xFF000000FFLL;
    v13.i64[1] = 0xFF000000FFLL;
    v14 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v15 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1B2245E80), v13)), v14);
    v16 = (const float *)(v8 + v10 + v9);
    v17 = (uint32x4_t)vld1q_dup_f32(v16);
    *(_QWORD *)&result = vmlaq_n_f32(v15, vmlaq_f32(vnegq_f32(v15), v14, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B2245E80), v13))), v4 - truncf(v4)).u64[0];
  }
  return result;
}

double sub_1B17EB270(uint64_t a1, float a2)
{
  float v2;
  double result;
  float v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  const float *v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;

  v2 = a2 - *(float *)(a1 + 32);
  result = 0.0;
  if (v2 < 1.0 && v2 >= 0.0)
  {
    v4 = *(float *)a1 * v2;
    v5 = *(_DWORD *)(a1 + 4);
    v6 = *(_DWORD *)(a1 + 8);
    if ((int)v4 >= v5)
      v7 = *(_DWORD *)(a1 + 4);
    else
      v7 = (int)v4;
    v8 = *(_QWORD *)(a1 + 16);
    if (v5 <= (int)v4)
      v9 = 0;
    else
      v9 = *(_DWORD *)(a1 + 8);
    v10 = v6 * v7;
    v11 = (const float *)(v8 + v6 * v7);
    v12 = (uint32x4_t)vld1q_dup_f32(v11);
    v13.i64[0] = 0xFF000000FFLL;
    v13.i64[1] = 0xFF000000FFLL;
    v14 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v15 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1B2245E80), v13)), v14);
    v16 = (const float *)(v8 + v10 + v9);
    v17 = (uint32x4_t)vld1q_dup_f32(v16);
    v18 = vmlaq_n_f32(v15, vmlaq_f32(vnegq_f32(v15), v14, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B2245E80), v13))), v4 - truncf(v4));
    v19 = vmulq_f32(v18, v18);
    v20 = vcgeq_f32(v18, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
    v20.i32[3] = 0;
    *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v20), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v18), v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v18)), vmulq_f32(v19, v19), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v18), v19,
                                          vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v18))), (int8x16_t)vmulq_f32(v18, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  }
  return result;
}

double sub_1B17EB3CC(uint64_t a1, float a2)
{
  float v2;
  double result;
  float v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  const float *v16;
  uint32x4_t v17;
  int8x16_t v18;

  v2 = a2 - *(float *)(a1 + 32);
  result = 0.0;
  if (v2 < 1.0 && v2 >= 0.0)
  {
    v4 = *(float *)a1 * v2;
    v5 = *(_DWORD *)(a1 + 4);
    v6 = *(_DWORD *)(a1 + 8);
    if ((int)v4 >= v5)
      v7 = *(_DWORD *)(a1 + 4);
    else
      v7 = (int)v4;
    v8 = *(_QWORD *)(a1 + 16);
    if (v5 <= (int)v4)
      v9 = 0;
    else
      v9 = *(_DWORD *)(a1 + 8);
    v10 = v6 * v7;
    v11 = (const float *)(v8 + v6 * v7);
    v12 = (uint32x4_t)vld1q_dup_f32(v11);
    v13.i64[0] = 0xFF000000FFLL;
    v13.i64[1] = 0xFF000000FFLL;
    v14 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v15 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1B2245E80), v13)), v14);
    v16 = (const float *)(v8 + v10 + v9);
    v17 = (uint32x4_t)vld1q_dup_f32(v16);
    v18 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_n_f32(v15, vmlaq_f32(vnegq_f32(v15), v14, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B2245E80), v13))), v4 - truncf(v4)));
    *(_QWORD *)&result = vextq_s8(v18, v18, 0xCuLL).u64[0];
  }
  return result;
}

double sub_1B17EB47C(uint64_t a1, float a2)
{
  float v2;
  double result;
  float v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  const float *v10;
  uint32x4_t v11;
  int v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  const float *v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;

  v2 = a2 - *(float *)(a1 + 32);
  result = 0.0;
  if (v2 < 1.0 && v2 >= 0.0)
  {
    v4 = *(float *)a1 * v2;
    v5 = *(_DWORD *)(a1 + 4);
    v6 = *(_DWORD *)(a1 + 8);
    if ((int)v4 >= v5)
      v7 = *(_DWORD *)(a1 + 4);
    else
      v7 = (int)v4;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = v5 <= (int)v4;
    v10 = (const float *)(v8 + v6 * v7);
    v11 = (uint32x4_t)vld1q_dup_f32(v10);
    if (v9)
      v12 = 0;
    else
      v12 = *(_DWORD *)(a1 + 8);
    v13.i64[0] = 0xFF000000FFLL;
    v13.i64[1] = 0xFF000000FFLL;
    v14 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v15 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v11, (uint32x4_t)xmmword_1B2245E80), v13)), v14);
    v16 = (const float *)(v8 + v6 * v7 + v12);
    v17 = (uint32x4_t)vld1q_dup_f32(v16);
    v18 = vmlaq_n_f32(v15, vmlaq_f32(vnegq_f32(v15), v14, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B2245E80), v13))), v4 - truncf(v4));
    v19 = vmulq_f32(v18, v18);
    v20 = vcgeq_f32(v18, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
    v20.i32[3] = 0;
    v21 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v20), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v18), v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v18)), vmulq_f32(v19, v19), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v18), v19,
                                      vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v18))), (int8x16_t)vmulq_f32(v18, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
    v21.i32[3] = v18.i32[3];
    v22 = (int8x16_t)vrev64q_s32(v21);
    *(_QWORD *)&result = vextq_s8(v22, v22, 0xCuLL).u64[0];
  }
  return result;
}

double sub_1B17EB5E0(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;

  a2.f32[0] = fminf(fmaxf(a2.f32[0] - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)(a1 + 8);
  if ((int)a2.f32[0] >= v4)
    v6 = *(_DWORD *)(a1 + 4);
  else
    v6 = (int)a2.f32[0];
  v7 = *(_QWORD *)(a1 + 16);
  if (v4 <= (int)a2.f32[0])
    v8 = 0;
  else
    v8 = *(_DWORD *)(a1 + 8);
  v9 = v5 * v6;
  v10 = *(unsigned __int16 *)(v7 + v5 * v6);
  v11 = (v10 >> 10) & 0x1F;
  if (v11 == 31)
    v12 = 2139095040;
  else
    v12 = (v10 >> 10) & 0x1F;
  if (v11)
    v13 = v11 == 31;
  else
    v13 = 1;
  if (v13)
    v14 = v12;
  else
    v14 = (v11 << 23) + 939524096;
  v15 = *(unsigned __int16 *)(v7 + v9 + v8);
  v16 = (v15 >> 10) & 0x1F;
  if (v16 == 31)
    v17 = 2139095040;
  else
    v17 = (v15 >> 10) & 0x1F;
  if (v16)
    v18 = v16 == 31;
  else
    v18 = 1;
  if (v18)
    v19 = v17;
  else
    v19 = (v16 << 23) + 939524096;
  a3.i32[0] = v14 | (v10 << 16) & 0x80000000 | (v10 >> 7) & 7 | (8 * (v10 & 0x3FF)) & 0x1FFF | ((v10 & 0x3FF) << 13);
  a4.i32[0] = v19 | (v15 << 16) & 0x80000000 | (v15 >> 7) & 7 | (8 * (v15 & 0x3FF)) & 0x1FFF | ((v15 & 0x3FF) << 13);
  a2.f32[0] = a2.f32[0] - truncf(a2.f32[0]);
  a2.i64[0] = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmlaq_f32(a3, a2, vsubq_f32(a4, a3)), 0).u64[0];
  return *(double *)a2.i64;
}

double sub_1B17EB6CC(uint64_t a1, double a2)
{
  int v2;
  int v3;
  int v4;
  double result;

  *(float *)&a2 = fminf(fmaxf(*(float *)&a2 - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v2 = (int)*(float *)&a2;
  v3 = *(_DWORD *)(a1 + 4);
  if (v3 <= (int)*(float *)&a2)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + 8);
  if (v2 >= v3)
    v2 = *(_DWORD *)(a1 + 4);
  *(float *)&a2 = *(float *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v2)
                + (float)((float)(*(float *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v2 + v4)
                                - *(float *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v2))
                        * (float)(*(float *)&a2 - truncf(*(float *)&a2)));
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17EB730(uint64_t a1, float a2)
{
  float v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int16x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x4_t v14;
  float32x4_t v15;
  int16x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  double result;

  v2 = fminf(fmaxf(a2 - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v3 = (int)v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 4);
  if (v5 <= (int)v2)
    v6 = 0;
  else
    v6 = *(_DWORD *)(a1 + 8);
  if (v3 >= v5)
    v3 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)(a1 + 8) * v3;
  v8 = *(int16x4_t *)(v4 + v7);
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v10 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v8), v9);
  v11 = (int8x16_t)vshll_n_u16((uint16x4_t)v8, 0xDuLL);
  v12 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v13 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v14 = (int32x4_t)vorrq_s8(vandq_s8(v11, v13), vorrq_s8((int8x16_t)v10, vandq_s8(v11, v12)));
  v10.i64[0] = 0x3800000038000000;
  v10.i64[1] = 0x3800000038000000;
  v15 = (float32x4_t)vaddq_s32(v14, v10);
  v16 = *(int16x4_t *)(v4 + v7 + v6);
  v17 = vandq_s8((int8x16_t)vmovl_s16(v16), v9);
  v18 = (int8x16_t)vshll_n_u16((uint16x4_t)v16, 0xDuLL);
  *(_QWORD *)&result = vmlaq_n_f32(v15, vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v18, v13), vorrq_s8(v17, vandq_s8(v18, v12))), v10), v15), v2 - truncf(v2)).u64[0];
  return result;
}

double sub_1B17EB7E8(uint64_t a1, float a2)
{
  float v2;
  int v3;
  int v4;
  int v5;
  double result;

  v2 = fminf(fmaxf(a2 - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v3 = (int)v2;
  v4 = *(_DWORD *)(a1 + 4);
  if (v4 <= (int)v2)
    v5 = 0;
  else
    v5 = *(_DWORD *)(a1 + 8);
  if (v3 >= v4)
    v3 = *(_DWORD *)(a1 + 4);
  *(_QWORD *)&result = vmlaq_n_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v3), vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v3 + v5), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(_DWORD *)(a1 + 8) * v3)), v2 - truncf(v2)).u64[0];
  return result;
}

double sub_1B17EB848(uint64_t a1, double a2, double a3, double a4, float a5)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  double result;

  v5 = *(_DWORD *)a1;
  *(float *)&a2 = fminf(fmaxf(*(float *)&a2 - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v6 = (int)*(float *)&a2;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 4);
  if (v8 <= (int)*(float *)&a2)
    v9 = 0;
  else
    v9 = *(_DWORD *)(a1 + 8);
  if (v6 >= v8)
    v6 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8) * v6;
  LOBYTE(v5) = *(_BYTE *)(v7 + v10);
  LOBYTE(a5) = *(_BYTE *)(v7 + v10 + v9);
  *(float *)&a2 = (float)((float)v5 * 0.0039216)
                + (float)((float)-(float)((float)((float)v5 * 0.0039216) - (float)((float)LODWORD(a5) * 0.0039216))
                        * (float)(*(float *)&a2 - truncf(*(float *)&a2)));
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17EB8C0(uint64_t a1, float a2, double a3, double a4, float a5)
{
  float v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int32x4_t v11;
  double result;

  LODWORD(a3) = *(_DWORD *)a1;
  v5 = fminf(fmaxf(a2 - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v6 = (int)v5;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_DWORD *)(a1 + 4);
  if (v8 <= (int)v5)
    v9 = 0;
  else
    v9 = *(_DWORD *)(a1 + 8);
  if (v6 >= v8)
    v6 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8) * v6;
  LOBYTE(a3) = *(_BYTE *)(v7 + v10);
  LOBYTE(a5) = *(_BYTE *)(v7 + v10 + v9);
  *(float *)&a3 = (float)((float)LODWORD(a3) * 0.0039216)
                + (float)((float)-(float)((float)((float)LODWORD(a3) * 0.0039216)
                                        - (float)((float)LODWORD(a5) * 0.0039216))
                        * (float)(v5 - truncf(v5)));
  v11 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v11.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v11), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)&a3), *(float *)&a3 * *(float *)&a3), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)&a3),
                                        *(float *)&a3 * *(float *)&a3),
                                      (float)(*(float *)&a3 * *(float *)&a3) * (float)(*(float *)&a3 * *(float *)&a3)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)&a3)).u64[0];
  return result;
}

double sub_1B17EB9EC(uint64_t a1, float a2)
{
  float v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  const float *v13;
  uint32x4_t v14;
  double result;

  v2 = fminf(fmaxf(a2 - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v3 = (int)v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 4);
  if (v5 <= (int)v2)
    v6 = 0;
  else
    v6 = *(_DWORD *)(a1 + 8);
  if (v3 >= v5)
    v3 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)(a1 + 8) * v3;
  v8 = (const float *)(v4 + v7);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v12 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10)), v11);
  v13 = (const float *)(v4 + v7 + v6);
  v14 = (uint32x4_t)vld1q_dup_f32(v13);
  *(_QWORD *)&result = vmlaq_n_f32(v12, vmlaq_f32(vnegq_f32(v12), v11, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_1B2245E80), v10))), v2 - truncf(v2)).u64[0];
  return result;
}

double sub_1B17EBA8C(uint64_t a1, float a2)
{
  float v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  const float *v13;
  uint32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  double result;

  v2 = fminf(fmaxf(a2 - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v3 = (int)v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 4);
  if (v5 <= (int)v2)
    v6 = 0;
  else
    v6 = *(_DWORD *)(a1 + 8);
  if (v3 >= v5)
    v3 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)(a1 + 8) * v3;
  v8 = (const float *)(v4 + v7);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v12 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10)), v11);
  v13 = (const float *)(v4 + v7 + v6);
  v14 = (uint32x4_t)vld1q_dup_f32(v13);
  v15 = vmlaq_n_f32(v12, vmlaq_f32(vnegq_f32(v12), v11, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_1B2245E80), v10))), v2 - truncf(v2));
  v16 = vmulq_f32(v15, v15);
  v17 = vcgeq_f32(v15, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v17.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v17), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v15), v16, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v15)), vmulq_f32(v16, v16), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v15), v16,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v15))), (int8x16_t)vmulq_f32(v15, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17EBBE0(uint64_t a1, float a2)
{
  float v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  const float *v12;
  uint32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  double result;

  v2 = fminf(fmaxf(a2 - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v3 = (int)v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 4);
  if (v5 <= (int)v2)
    v6 = 0;
  else
    v6 = *(_DWORD *)(a1 + 8);
  if (v3 >= v5)
    v3 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)(a1 + 8) * v3;
  v8 = (const float *)(v4 + v7);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v12 = (const float *)(v4 + v7 + v6);
  v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10)), v11);
  v15 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_n_f32(v14, vmlaq_f32(vnegq_f32(v14), v11, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_1B2245E80), v10))), v2 - truncf(v2)));
  *(_QWORD *)&result = vextq_s8(v15, v15, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EBC88(uint64_t a1, float a2)
{
  float v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  const float *v13;
  uint32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  double result;

  v2 = fminf(fmaxf(a2 - *(float *)(a1 + 32), 0.0), 1.0) * *(float *)a1;
  v3 = (int)v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 4);
  if (v5 <= (int)v2)
    v6 = 0;
  else
    v6 = *(_DWORD *)(a1 + 8);
  if (v3 >= v5)
    v3 = *(_DWORD *)(a1 + 4);
  v7 = *(_DWORD *)(a1 + 8) * v3;
  v8 = (const float *)(v4 + v7);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v12 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10)), v11);
  v13 = (const float *)(v4 + v7 + v6);
  v14 = (uint32x4_t)vld1q_dup_f32(v13);
  v15 = vmlaq_n_f32(v12, vmlaq_f32(vnegq_f32(v12), v11, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_1B2245E80), v10))), v2 - truncf(v2));
  v16 = vmulq_f32(v15, v15);
  v17 = vcgeq_f32(v15, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v17.i32[3] = 0;
  v18 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v17), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v15), v16, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v15)), vmulq_f32(v16, v16), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v15), v16,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v15))), (int8x16_t)vmulq_f32(v15, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v18.i32[3] = v15.i32[3];
  v19 = (int8x16_t)vrev64q_s32(v18);
  *(_QWORD *)&result = vextq_s8(v19, v19, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EBDE4(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  BOOL v18;
  int v19;

  a2.f32[0] = fminf((float)(a2.f32[0] - *(float *)(a1 + 32)) - floorf(a2.f32[0] - *(float *)(a1 + 32)), 1.0)
            * *(float *)a1;
  v4 = *(_DWORD *)(a1 + 4);
  if ((int)a2.f32[0] >= v4)
    v5 = *(_DWORD *)(a1 + 4);
  else
    v5 = (int)a2.f32[0];
  v6 = 12;
  if (v4 > (int)a2.f32[0])
    v6 = 8;
  v7 = *(int *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(int *)(a1 + 8) * (uint64_t)v5;
  v10 = *(unsigned __int16 *)(v8 + v9);
  v11 = (v10 >> 10) & 0x1F;
  if (v11 == 31)
    v12 = 2139095040;
  else
    v12 = (v10 >> 10) & 0x1F;
  if (v11)
    v13 = v11 == 31;
  else
    v13 = 1;
  if (v13)
    v14 = v12;
  else
    v14 = (v11 << 23) + 939524096;
  v15 = *(unsigned __int16 *)(v8 + v7 + (int)v9);
  v16 = (v15 >> 10) & 0x1F;
  if (v16 == 31)
    v17 = 2139095040;
  else
    v17 = (v15 >> 10) & 0x1F;
  if (v16)
    v18 = v16 == 31;
  else
    v18 = 1;
  if (v18)
    v19 = v17;
  else
    v19 = (v16 << 23) + 939524096;
  a3.i32[0] = v14 | (v10 << 16) & 0x80000000 | (v10 >> 7) & 7 | (8 * (v10 & 0x3FF)) & 0x1FFF | ((v10 & 0x3FF) << 13);
  a4.i32[0] = v19 | (v15 << 16) & 0x80000000 | (v15 >> 7) & 7 | (8 * (v15 & 0x3FF)) & 0x1FFF | ((v15 & 0x3FF) << 13);
  a2.f32[0] = a2.f32[0] - truncf(a2.f32[0]);
  a2.i64[0] = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmlaq_f32(a3, a2, vsubq_f32(a4, a3)), 0).u64[0];
  return *(double *)a2.i64;
}

double sub_1B17EBEE4(uint64_t a1, double a2)
{
  int v2;
  int v3;
  uint64_t v4;
  double result;

  *(float *)&a2 = fminf((float)(*(float *)&a2 - *(float *)(a1 + 32)) - floorf(*(float *)&a2 - *(float *)(a1 + 32)), 1.0)
                * *(float *)a1;
  v2 = *(_DWORD *)(a1 + 4);
  if ((int)*(float *)&a2 >= v2)
    v3 = *(_DWORD *)(a1 + 4);
  else
    v3 = (int)*(float *)&a2;
  v4 = 12;
  if (v2 > (int)*(float *)&a2)
    v4 = 8;
  *(float *)&a2 = *(float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v3)
                + (float)((float)(*(float *)(*(_QWORD *)(a1 + 16)
                                           + *(int *)(a1 + v4)
                                           + (uint64_t)(*(_DWORD *)(a1 + 8) * v3))
                                - *(float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v3))
                        * (float)(*(float *)&a2 - truncf(*(float *)&a2)));
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17EBF5C(uint64_t a1, float a2)
{
  float v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int16x4_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int32x4_t v14;
  float32x4_t v15;
  int16x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  double result;

  v2 = fminf((float)(a2 - *(float *)(a1 + 32)) - floorf(a2 - *(float *)(a1 + 32)), 1.0) * *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  if ((int)v2 >= v3)
    v4 = *(_DWORD *)(a1 + 4);
  else
    v4 = (int)v2;
  v5 = 12;
  if (v3 > (int)v2)
    v5 = 8;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(int *)(a1 + 8) * (uint64_t)v4;
  v8 = *(int16x4_t *)(v6 + v7);
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v10 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v8), v9);
  v11 = (int8x16_t)vshll_n_u16((uint16x4_t)v8, 0xDuLL);
  v12 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v13 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v14 = (int32x4_t)vorrq_s8(vandq_s8(v11, v13), vorrq_s8((int8x16_t)v10, vandq_s8(v11, v12)));
  v10.i64[0] = 0x3800000038000000;
  v10.i64[1] = 0x3800000038000000;
  v15 = (float32x4_t)vaddq_s32(v14, v10);
  v16 = *(int16x4_t *)(v6 + *(int *)(a1 + v5) + (uint64_t)(int)v7);
  v17 = vandq_s8((int8x16_t)vmovl_s16(v16), v9);
  v18 = (int8x16_t)vshll_n_u16((uint16x4_t)v16, 0xDuLL);
  *(_QWORD *)&result = vmlaq_n_f32(v15, vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v18, v13), vorrq_s8(v17, vandq_s8(v18, v12))), v10), v15), v2 - truncf(v2)).u64[0];
  return result;
}

double sub_1B17EC028(uint64_t a1, float a2)
{
  float v2;
  int v3;
  int v4;
  uint64_t v5;
  double result;

  v2 = fminf((float)(a2 - *(float *)(a1 + 32)) - floorf(a2 - *(float *)(a1 + 32)), 1.0) * *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  if ((int)v2 >= v3)
    v4 = *(_DWORD *)(a1 + 4);
  else
    v4 = (int)v2;
  v5 = 12;
  if (v3 > (int)v2)
    v5 = 8;
  *(_QWORD *)&result = vmlaq_n_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4), vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16)+ *(int *)(a1 + v5)+ (uint64_t)(*(_DWORD *)(a1 + 8) * v4)), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v4)), v2 - truncf(v2)).u64[0];
  return result;
}

double sub_1B17EC09C(uint64_t a1, double a2, double a3, double a4, float a5)
{
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;

  v5 = *(_DWORD *)a1;
  *(float *)&a2 = fminf((float)(*(float *)&a2 - *(float *)(a1 + 32)) - floorf(*(float *)&a2 - *(float *)(a1 + 32)), 1.0)
                * *(float *)a1;
  v6 = *(_DWORD *)(a1 + 4);
  if ((int)*(float *)&a2 >= v6)
    v7 = *(_DWORD *)(a1 + 4);
  else
    v7 = (int)*(float *)&a2;
  v8 = 12;
  if (v6 > (int)*(float *)&a2)
    v8 = 8;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(int *)(a1 + 8) * (uint64_t)v7;
  LOBYTE(v5) = *(_BYTE *)(v9 + v10);
  LOBYTE(a5) = *(_BYTE *)(v9 + *(int *)(a1 + v8) + (uint64_t)(int)v10);
  *(float *)&a2 = (float)((float)v5 * 0.0039216)
                + (float)((float)-(float)((float)((float)v5 * 0.0039216) - (float)((float)LODWORD(a5) * 0.0039216))
                        * (float)(*(float *)&a2 - truncf(*(float *)&a2)));
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17EC128(uint64_t a1, float a2, double a3, double a4, float a5)
{
  float v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;
  double result;

  LODWORD(a3) = *(_DWORD *)a1;
  v5 = fminf((float)(a2 - *(float *)(a1 + 32)) - floorf(a2 - *(float *)(a1 + 32)), 1.0) * *(float *)a1;
  v6 = *(_DWORD *)(a1 + 4);
  if ((int)v5 >= v6)
    v7 = *(_DWORD *)(a1 + 4);
  else
    v7 = (int)v5;
  v8 = 12;
  if (v6 > (int)v5)
    v8 = 8;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(int *)(a1 + 8) * (uint64_t)v7;
  LOBYTE(a3) = *(_BYTE *)(v9 + v10);
  LOBYTE(a5) = *(_BYTE *)(v9 + *(int *)(a1 + v8) + (uint64_t)(int)v10);
  *(float *)&a3 = (float)((float)LODWORD(a3) * 0.0039216)
                + (float)((float)-(float)((float)((float)LODWORD(a3) * 0.0039216)
                                        - (float)((float)LODWORD(a5) * 0.0039216))
                        * (float)(v5 - truncf(v5)));
  v11 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v11.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v11), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)&a3), *(float *)&a3 * *(float *)&a3), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)&a3),
                                        *(float *)&a3 * *(float *)&a3),
                                      (float)(*(float *)&a3 * *(float *)&a3) * (float)(*(float *)&a3 * *(float *)&a3)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)&a3)).u64[0];
  return result;
}

double sub_1B17EC268(uint64_t a1, float a2)
{
  float v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  const float *v8;
  uint32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  const float *v13;
  uint32x4_t v14;
  double result;

  v2 = fminf((float)(a2 - *(float *)(a1 + 32)) - floorf(a2 - *(float *)(a1 + 32)), 1.0) * *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  if ((int)v2 >= v3)
    v5 = *(_DWORD *)(a1 + 4);
  else
    v5 = (int)v2;
  v6 = 12;
  if (v3 > (int)v2)
    v6 = 8;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (const float *)(v7 + v4 * (uint64_t)v5);
  v9 = (uint32x4_t)vld1q_dup_f32(v8);
  v10.i64[0] = 0xFF000000FFLL;
  v10.i64[1] = 0xFF000000FFLL;
  v11 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v12 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v9, (uint32x4_t)xmmword_1B2245E80), v10)), v11);
  v13 = (const float *)(v7 + *(int *)(a1 + v6) + (uint64_t)(v4 * v5));
  v14 = (uint32x4_t)vld1q_dup_f32(v13);
  *(_QWORD *)&result = vmlaq_n_f32(v12, vmlaq_f32(vnegq_f32(v12), v11, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_1B2245E80), v10))), v2 - truncf(v2)).u64[0];
  return result;
}

double sub_1B17EC31C(uint64_t a1, float a2)
{
  float v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const float *v9;
  uint32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  const float *v14;
  uint32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  double result;

  v2 = fminf((float)(a2 - *(float *)(a1 + 32)) - floorf(a2 - *(float *)(a1 + 32)), 1.0) * *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  if ((int)v2 >= v3)
    v5 = *(_DWORD *)(a1 + 4);
  else
    v5 = (int)v2;
  v6 = 12;
  if (v3 > (int)v2)
    v6 = 8;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v4 * v5;
  v9 = (const float *)(v7 + v4 * (uint64_t)v5);
  v10 = (uint32x4_t)vld1q_dup_f32(v9);
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  v12 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v13 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B2245E80), v11)), v12);
  v14 = (const float *)(v7 + *(int *)(a1 + v6) + (uint64_t)v8);
  v15 = (uint32x4_t)vld1q_dup_f32(v14);
  v16 = vmlaq_n_f32(v13, vmlaq_f32(vnegq_f32(v13), v12, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_1B2245E80), v11))), v2 - truncf(v2));
  v17 = vmulq_f32(v16, v16);
  v18 = vcgeq_f32(v16, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v18.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v18), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v16), v17, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v16)), vmulq_f32(v17, v17), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v16), v17,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v16))), (int8x16_t)vmulq_f32(v16, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17EC484(uint64_t a1, float a2)
{
  float v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const float *v9;
  uint32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  const float *v13;
  uint32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  double result;

  v2 = fminf((float)(a2 - *(float *)(a1 + 32)) - floorf(a2 - *(float *)(a1 + 32)), 1.0) * *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  if ((int)v2 >= v3)
    v5 = *(_DWORD *)(a1 + 4);
  else
    v5 = (int)v2;
  v6 = 12;
  if (v3 > (int)v2)
    v6 = 8;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v4 * v5;
  v9 = (const float *)(v7 + v4 * (uint64_t)v5);
  v10 = (uint32x4_t)vld1q_dup_f32(v9);
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  v12 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v13 = (const float *)(v7 + *(int *)(a1 + v6) + (uint64_t)v8);
  v14 = (uint32x4_t)vld1q_dup_f32(v13);
  v15 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B2245E80), v11)), v12);
  v16 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_n_f32(v15, vmlaq_f32(vnegq_f32(v15), v12, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_1B2245E80), v11))), v2 - truncf(v2)));
  *(_QWORD *)&result = vextq_s8(v16, v16, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EC540(uint64_t a1, float a2)
{
  float v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const float *v9;
  uint32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  const float *v14;
  uint32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  double result;

  v2 = fminf((float)(a2 - *(float *)(a1 + 32)) - floorf(a2 - *(float *)(a1 + 32)), 1.0) * *(float *)a1;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a1 + 8);
  if ((int)v2 >= v3)
    v5 = *(_DWORD *)(a1 + 4);
  else
    v5 = (int)v2;
  v6 = 12;
  if (v3 > (int)v2)
    v6 = 8;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = v4 * v5;
  v9 = (const float *)(v7 + v4 * (uint64_t)v5);
  v10 = (uint32x4_t)vld1q_dup_f32(v9);
  v11.i64[0] = 0xFF000000FFLL;
  v11.i64[1] = 0xFF000000FFLL;
  v12 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v13 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B2245E80), v11)), v12);
  v14 = (const float *)(v7 + *(int *)(a1 + v6) + (uint64_t)v8);
  v15 = (uint32x4_t)vld1q_dup_f32(v14);
  v16 = vmlaq_n_f32(v13, vmlaq_f32(vnegq_f32(v13), v12, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v15, (uint32x4_t)xmmword_1B2245E80), v11))), v2 - truncf(v2));
  v17 = vmulq_f32(v16, v16);
  v18 = vcgeq_f32(v16, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v18.i32[3] = 0;
  v19 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v18), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v16), v17, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v16)), vmulq_f32(v17, v17), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v16), v17,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v16))), (int8x16_t)vmulq_f32(v16, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v19.i32[3] = v16.i32[3];
  v20 = (int8x16_t)vrev64q_s32(v19);
  *(_QWORD *)&result = vextq_s8(v20, v20, 0xCuLL).u64[0];
  return result;
}

double sub_1B17EC6B0(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float v4;
  float v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;

  v4 = (float)((float)(a2.f32[0] - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v5 = vabds_f32(0.5, fminf(v4 - floorf(v4), 1.0));
  a2.f32[0] = *(float *)a1 * (float)(v5 + v5);
  v6 = *(_DWORD *)(a1 + 4);
  if ((int)a2.f32[0] >= v6)
    v7 = *(_DWORD *)(a1 + 4);
  else
    v7 = (int)a2.f32[0];
  v8 = 12;
  if (v6 > (int)a2.f32[0])
    v8 = 8;
  v9 = *(int *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(int *)(a1 + 8) * (uint64_t)v7;
  v12 = *(unsigned __int16 *)(v10 + v11);
  v13 = (v12 >> 10) & 0x1F;
  if (v13 == 31)
    v14 = 2139095040;
  else
    v14 = (v12 >> 10) & 0x1F;
  if (v13)
    v15 = v13 == 31;
  else
    v15 = 1;
  if (v15)
    v16 = v14;
  else
    v16 = (v13 << 23) + 939524096;
  v17 = *(unsigned __int16 *)(v10 + v9 + (int)v11);
  v18 = (v17 >> 10) & 0x1F;
  if (v18 == 31)
    v19 = 2139095040;
  else
    v19 = (v17 >> 10) & 0x1F;
  if (v18)
    v20 = v18 == 31;
  else
    v20 = 1;
  if (v20)
    v21 = v19;
  else
    v21 = (v18 << 23) + 939524096;
  a3.i32[0] = v16 | (v12 << 16) & 0x80000000 | (v12 >> 7) & 7 | (8 * (v12 & 0x3FF)) & 0x1FFF | ((v12 & 0x3FF) << 13);
  a4.i32[0] = v21 | (v17 << 16) & 0x80000000 | (v17 >> 7) & 7 | (8 * (v17 & 0x3FF)) & 0x1FFF | ((v17 & 0x3FF) << 13);
  a2.f32[0] = a2.f32[0] - truncf(a2.f32[0]);
  a2.i64[0] = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmlaq_f32(a3, a2, vsubq_f32(a4, a3)), 0).u64[0];
  return *(double *)a2.i64;
}

double sub_1B17EC7C0(uint64_t a1, double a2)
{
  float v2;
  float v3;
  int v4;
  int v5;
  uint64_t v6;
  double result;

  v2 = (float)((float)(*(float *)&a2 - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v3 = vabds_f32(0.5, fminf(v2 - floorf(v2), 1.0));
  *(float *)&a2 = *(float *)a1 * (float)(v3 + v3);
  v4 = *(_DWORD *)(a1 + 4);
  if ((int)*(float *)&a2 >= v4)
    v5 = *(_DWORD *)(a1 + 4);
  else
    v5 = (int)*(float *)&a2;
  v6 = 12;
  if (v4 > (int)*(float *)&a2)
    v6 = 8;
  *(float *)&a2 = *(float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v5)
                + (float)((float)(*(float *)&a2 - truncf(*(float *)&a2))
                        * (float)(*(float *)(*(_QWORD *)(a1 + 16)
                                           + *(int *)(a1 + v6)
                                           + (uint64_t)(*(_DWORD *)(a1 + 8) * v5))
                                - *(float *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v5)));
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17EC848(uint64_t a1, float a2)
{
  float v2;
  float v3;
  float v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int32x4_t v16;
  float32x4_t v17;
  int16x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  double result;

  v2 = (float)((float)(a2 - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v3 = vabds_f32(0.5, fminf(v2 - floorf(v2), 1.0));
  v4 = *(float *)a1 * (float)(v3 + v3);
  v5 = *(_DWORD *)(a1 + 4);
  if ((int)v4 >= v5)
    v6 = *(_DWORD *)(a1 + 4);
  else
    v6 = (int)v4;
  v7 = 12;
  if (v5 > (int)v4)
    v7 = 8;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(int *)(a1 + 8) * (uint64_t)v6;
  v10 = *(int16x4_t *)(v8 + v9);
  v11.i64[0] = 0x8000000080000000;
  v11.i64[1] = 0x8000000080000000;
  v12 = (int32x4_t)vandq_s8((int8x16_t)vmovl_s16(v10), v11);
  v13 = (int8x16_t)vshll_n_u16((uint16x4_t)v10, 0xDuLL);
  v14 = (int8x16_t)vdupq_n_s32(0x7FE000u);
  v15 = (int8x16_t)vdupq_n_s32(0xF800000u);
  v16 = (int32x4_t)vorrq_s8(vandq_s8(v13, v15), vorrq_s8((int8x16_t)v12, vandq_s8(v13, v14)));
  v12.i64[0] = 0x3800000038000000;
  v12.i64[1] = 0x3800000038000000;
  v17 = (float32x4_t)vaddq_s32(v16, v12);
  v18 = *(int16x4_t *)(v8 + *(int *)(a1 + v7) + (uint64_t)(int)v9);
  v19 = vandq_s8((int8x16_t)vmovl_s16(v18), v11);
  v20 = (int8x16_t)vshll_n_u16((uint16x4_t)v18, 0xDuLL);
  *(_QWORD *)&result = vmlaq_n_f32(v17, vsubq_f32((float32x4_t)vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v20, v15), vorrq_s8(v19, vandq_s8(v20, v14))), v12), v17), v4 - truncf(v4)).u64[0];
  return result;
}

double sub_1B17EC924(uint64_t a1, float a2)
{
  float v2;
  float v3;
  float v4;
  int v5;
  int v6;
  uint64_t v7;
  double result;

  v2 = (float)((float)(a2 - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v3 = vabds_f32(0.5, fminf(v2 - floorf(v2), 1.0));
  v4 = *(float *)a1 * (float)(v3 + v3);
  v5 = *(_DWORD *)(a1 + 4);
  if ((int)v4 >= v5)
    v6 = *(_DWORD *)(a1 + 4);
  else
    v6 = (int)v4;
  v7 = 12;
  if (v5 > (int)v4)
    v7 = 8;
  *(_QWORD *)&result = vmlaq_n_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v6), vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 16)+ *(int *)(a1 + v7)+ (uint64_t)(*(_DWORD *)(a1 + 8) * v6)), *(float32x4_t *)(*(_QWORD *)(a1 + 16) + *(int *)(a1 + 8) * (uint64_t)v6)), v4 - truncf(v4)).u64[0];
  return result;
}

double sub_1B17EC9A8(uint64_t a1, double a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v5 = (float)((float)(*(float *)&a2 - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v6 = vabds_f32(0.5, fminf(v5 - floorf(v5), 1.0));
  v7 = *(_DWORD *)a1;
  *(float *)&a2 = *(float *)a1 * (float)(v6 + v6);
  v8 = *(_DWORD *)(a1 + 4);
  if ((int)*(float *)&a2 >= v8)
    v9 = *(_DWORD *)(a1 + 4);
  else
    v9 = (int)*(float *)&a2;
  v10 = 12;
  if (v8 > (int)*(float *)&a2)
    v10 = 8;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(int *)(a1 + 8) * (uint64_t)v9;
  LOBYTE(v7) = *(_BYTE *)(v11 + v12);
  LOBYTE(a5) = *(_BYTE *)(v11 + *(int *)(a1 + v10) + (uint64_t)(int)v12);
  *(float *)&a2 = (float)((float)v7 * 0.0039216)
                + (float)((float)(*(float *)&a2 - truncf(*(float *)&a2))
                        * (float)-(float)((float)((float)v7 * 0.0039216) - (float)((float)LODWORD(a5) * 0.0039216)));
  *(_QWORD *)&result = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u64[0];
  return result;
}

double sub_1B17ECA44(uint64_t a1, float a2, double a3, double a4, float a5)
{
  float v5;
  float v6;
  float v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  double result;

  v5 = (float)((float)(a2 - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v6 = vabds_f32(0.5, fminf(v5 - floorf(v5), 1.0));
  LODWORD(a3) = *(_DWORD *)a1;
  v7 = *(float *)a1 * (float)(v6 + v6);
  v8 = *(_DWORD *)(a1 + 4);
  if ((int)v7 >= v8)
    v9 = *(_DWORD *)(a1 + 4);
  else
    v9 = (int)v7;
  v10 = 12;
  if (v8 > (int)v7)
    v10 = 8;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(int *)(a1 + 8) * (uint64_t)v9;
  LOBYTE(a3) = *(_BYTE *)(v11 + v12);
  LOBYTE(a5) = *(_BYTE *)(v11 + *(int *)(a1 + v10) + (uint64_t)(int)v12);
  *(float *)&a3 = (float)((float)LODWORD(a3) * 0.0039216)
                + (float)((float)(v7 - truncf(v7))
                        * (float)-(float)((float)((float)LODWORD(a3) * 0.0039216)
                                        - (float)((float)LODWORD(a5) * 0.0039216)));
  v13 = vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0), (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v13.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v13), (int8x16_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), *(float *)&a3), *(float *)&a3 * *(float *)&a3), vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), *(float *)&a3), vmlaq_n_f32((float32x4_t)vdupq_n_s32(0xBF12862E),
                                          (float32x4_t)vdupq_n_s32(0x3E1C096Eu),
                                          *(float *)&a3),
                                        *(float *)&a3 * *(float *)&a3),
                                      (float)(*(float *)&a3 * *(float *)&a3) * (float)(*(float *)&a3 * *(float *)&a3)),
                         (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_n_s32(0x3D9E8391u), *(float *)&a3)).u64[0];
  return result;
}

double sub_1B17ECB94(uint64_t a1, float a2)
{
  float v2;
  float v3;
  float v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const float *v10;
  uint32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  const float *v15;
  uint32x4_t v16;
  double result;

  v2 = (float)((float)(a2 - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v3 = vabds_f32(0.5, fminf(v2 - floorf(v2), 1.0));
  v4 = *(float *)a1 * (float)(v3 + v3);
  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)(a1 + 8);
  if ((int)v4 >= v5)
    v7 = *(_DWORD *)(a1 + 4);
  else
    v7 = (int)v4;
  v8 = 12;
  if (v5 > (int)v4)
    v8 = 8;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (const float *)(v9 + v6 * (uint64_t)v7);
  v11 = (uint32x4_t)vld1q_dup_f32(v10);
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  v13 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v14 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v11, (uint32x4_t)xmmword_1B2245E80), v12)), v13);
  v15 = (const float *)(v9 + *(int *)(a1 + v8) + (uint64_t)(v6 * v7));
  v16 = (uint32x4_t)vld1q_dup_f32(v15);
  *(_QWORD *)&result = vmlaq_n_f32(v14, vmlaq_f32(vnegq_f32(v14), v13, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1B2245E80), v12))), v4 - truncf(v4)).u64[0];
  return result;
}

double sub_1B17ECC58(uint64_t a1, float a2)
{
  float v2;
  float v3;
  float v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  const float *v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  double result;

  v2 = (float)((float)(a2 - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v3 = vabds_f32(0.5, fminf(v2 - floorf(v2), 1.0));
  v4 = *(float *)a1 * (float)(v3 + v3);
  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)(a1 + 8);
  if ((int)v4 >= v5)
    v7 = *(_DWORD *)(a1 + 4);
  else
    v7 = (int)v4;
  v8 = 12;
  if (v5 > (int)v4)
    v8 = 8;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v6 * v7;
  v11 = (const float *)(v9 + v6 * (uint64_t)v7);
  v12 = (uint32x4_t)vld1q_dup_f32(v11);
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  v14 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v15 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1B2245E80), v13)), v14);
  v16 = (const float *)(v9 + *(int *)(a1 + v8) + (uint64_t)v10);
  v17 = (uint32x4_t)vld1q_dup_f32(v16);
  v18 = vmlaq_n_f32(v15, vmlaq_f32(vnegq_f32(v15), v14, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B2245E80), v13))), v4 - truncf(v4));
  v19 = vmulq_f32(v18, v18);
  v20 = vcgeq_f32(v18, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v20.i32[3] = 0;
  *(_QWORD *)&result = vbslq_s8((int8x16_t)vcltzq_s32(v20), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v18), v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v18)), vmulq_f32(v19, v19), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v18), v19,
                                        vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v18))), (int8x16_t)vmulq_f32(v18, (float32x4_t)vdupq_n_s32(0x3D9E8391u))).u64[0];
  return result;
}

double sub_1B17ECDD0(uint64_t a1, float a2)
{
  float v2;
  float v3;
  float v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  const float *v15;
  uint32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  double result;

  v2 = (float)((float)(a2 - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v3 = vabds_f32(0.5, fminf(v2 - floorf(v2), 1.0));
  v4 = *(float *)a1 * (float)(v3 + v3);
  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)(a1 + 8);
  if ((int)v4 >= v5)
    v7 = *(_DWORD *)(a1 + 4);
  else
    v7 = (int)v4;
  v8 = 12;
  if (v5 > (int)v4)
    v8 = 8;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v6 * v7;
  v11 = (const float *)(v9 + v6 * (uint64_t)v7);
  v12 = (uint32x4_t)vld1q_dup_f32(v11);
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  v14 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v15 = (const float *)(v9 + *(int *)(a1 + v8) + (uint64_t)v10);
  v16 = (uint32x4_t)vld1q_dup_f32(v15);
  v17 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1B2245E80), v13)), v14);
  v18 = (int8x16_t)vrev64q_s32((int32x4_t)vmlaq_n_f32(v17, vmlaq_f32(vnegq_f32(v17), v14, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v16, (uint32x4_t)xmmword_1B2245E80), v13))), v4 - truncf(v4)));
  *(_QWORD *)&result = vextq_s8(v18, v18, 0xCuLL).u64[0];
  return result;
}

double sub_1B17ECE9C(uint64_t a1, float a2)
{
  float v2;
  float v3;
  float v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const float *v11;
  uint32x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  const float *v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  double result;

  v2 = (float)((float)(a2 - *(float *)(a1 + 32)) * 0.5) + 0.5;
  v3 = vabds_f32(0.5, fminf(v2 - floorf(v2), 1.0));
  v4 = *(float *)a1 * (float)(v3 + v3);
  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)(a1 + 8);
  if ((int)v4 >= v5)
    v7 = *(_DWORD *)(a1 + 4);
  else
    v7 = (int)v4;
  v8 = 12;
  if (v5 > (int)v4)
    v8 = 8;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v6 * v7;
  v11 = (const float *)(v9 + v6 * (uint64_t)v7);
  v12 = (uint32x4_t)vld1q_dup_f32(v11);
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  v14 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v15 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v12, (uint32x4_t)xmmword_1B2245E80), v13)), v14);
  v16 = (const float *)(v9 + *(int *)(a1 + v8) + (uint64_t)v10);
  v17 = (uint32x4_t)vld1q_dup_f32(v16);
  v18 = vmlaq_n_f32(v15, vmlaq_f32(vnegq_f32(v15), v14, vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1B2245E80), v13))), v4 - truncf(v4));
  v19 = vmulq_f32(v18, v18);
  v20 = vcgeq_f32(v18, (float32x4_t)vdupq_n_s32(0x3D25AEE6u));
  v20.i32[3] = 0;
  v21 = (int32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v20), (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0x3A5DBC4Du), (float32x4_t)vdupq_n_s32(0x3D11FA77u), v18), v19, vmlaq_f32((float32x4_t)vdupq_n_s32(0x3EF653C9u), (float32x4_t)vdupq_n_s32(0x3F622C5Fu), v18)), vmulq_f32(v19, v19), vmlaq_f32(vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF66EEDE), (float32x4_t)vdupq_n_s32(0x3F6BC556u), v18), v19,
                                    vmlaq_f32((float32x4_t)vdupq_n_s32(0xBF12862E), (float32x4_t)vdupq_n_s32(0x3E1C096Eu), v18))), (int8x16_t)vmulq_f32(v18, (float32x4_t)vdupq_n_s32(0x3D9E8391u)));
  v21.i32[3] = v18.i32[3];
  v22 = (int8x16_t)vrev64q_s32(v21);
  *(_QWORD *)&result = vextq_s8(v22, v22, 0xCuLL).u64[0];
  return result;
}

float vfx_sampler1d_make@<S0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  float result;

  v6 = a3 - 1;
  if (v6 > 9)
    v7 = 2;
  else
    v7 = dword_1B2245ED0[v6];
  *(float *)a6 = (float)a2;
  *(_DWORD *)(a6 + 4) = a2 - 1;
  *(_DWORD *)(a6 + 8) = v7;
  v8 = (uint64_t)*(&off_1E63D6350[40 * a5] + 10 * a4 + a3);
  *(_DWORD *)(a6 + 12) = v7 - v7 * a2;
  *(_QWORD *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = v8;
  result = 0.5 / (float)a2;
  *(float *)(a6 + 32) = result;
  return result;
}

const __CFString *sub_1B17ED08C(int a1)
{
  const __CFString **v1;
  const __CFString *result;

  switch(a1)
  {
    case 0:
      v1 = (const __CFString **)&off_1E63D5928;
      goto LABEL_10;
    case 1:
      v1 = (const __CFString **)&off_1E63D5930;
      goto LABEL_10;
    case 2:
      v1 = (const __CFString **)&off_1E63D5938;
      goto LABEL_10;
    case 3:
      v1 = (const __CFString **)&off_1E63D5940;
      goto LABEL_10;
    case 4:
      v1 = (const __CFString **)&off_1E63D5948;
      goto LABEL_10;
    case 5:
      v1 = (const __CFString **)&off_1E63D5950;
      goto LABEL_10;
    case 6:
      v1 = (const __CFString **)&off_1E63D5958;
LABEL_10:
      result = *v1;
      break;
    case 7:
      result = CFSTR("vertexCrease");
      break;
    case 8:
      result = CFSTR("edgeCrease");
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1B17ED128()
{
  if (qword_1ED4CED60 != -1)
    dispatch_once(&qword_1ED4CED60, &unk_1E63D0A50);
  return qword_1ED4CED68;
}

void sub_1B17ED168()
{
  if (!qword_1ED4CED68)
  {
    qword_1ED4CED68 = sub_1B179CB60(&qword_1ED4CED68);
    qword_1ED4BE808 = (uint64_t)sub_1B17EF0F0;
  }
}

uint64_t sub_1B17ED1B8()
{
  if (qword_1ED4CED60 != -1)
    dispatch_once(&qword_1ED4CED60, &unk_1E63D0A50);
  return sub_1B179CB90(qword_1ED4CED68, 0x58uLL);
}

uint64_t sub_1B17ED204(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v11;
  uint64_t v13;
  uint64_t v14;

  v11 = a2;
  v13 = sub_1B179E250(a5, a2, a3, a4, a5, a6, a7, a8) * a4;
  return sub_1B17ED264(v11, a1, a5, a4, a3, v13, 0, v14);
}

uint64_t sub_1B17ED264(__int16 a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  const void *v15;
  uint64_t v16;

  v12 = a3;
  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"data");
  if (a4 >= 5)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. No more than 4 components for mesh source value types"), a3, a4, a5, a6, a7, a8, (uint64_t)"componentCount <= 4");
  v15 = (const void *)sub_1B18F38F8(v12, a4, a5, a6, a7);
  v16 = sub_1B17ED34C(v15, a1);
  *(_QWORD *)(v16 + 72) = CFRetain(a2);
  sub_1B18F3B34((uint64_t)v15, v16);
  if (v15)
    CFRelease(v15);
  return v16;
}

uint64_t sub_1B17ED34C(const void *a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = sub_1B17ED1B8();
  if (!v10)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v4, v5, v6, v7, v8, v9, (uint64_t)"meshSource");
  sub_1B18F543C(v10, a1, v4, v5, v6, v7, v8, v9);
  *(_WORD *)(v10 + 96) = a2;
  return v10;
}

uint64_t sub_1B17ED3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const UInt8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFDataRef v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  float *v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CFDataRef v52;
  const UInt8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  float v78;
  float32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  CFDataRef v89;
  uint64_t v90;
  float32x4_t v91;

  v9 = sub_1B17ED6C4(a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = v10;
  v18 = sub_1B17ED6C4(a2, v10, v12, v13, v14, v15, v16, v17);
  v26 = v19;
  if ((_DWORD)v11 != (_DWORD)v19)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Morph: target vertex count do not match base vertex count (%d != %d)"), v20, v21, v22, v23, v24, v25, v19);
    return 0;
  }
  v27 = v18;
  if (v9)
  {
    if (v18)
      goto LABEL_4;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v20, v21, v22, v23, v24, v25, (uint64_t)"bse.ptr");
    if (v27)
      goto LABEL_4;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v20, v21, v22, v23, v24, v25, (uint64_t)"tgt.ptr");
LABEL_4:
  if ((v26 & 0xFF000000000000) == 0x1000000000000 && (v11 & 0xFF000000000000) == 0x1000000000000)
  {
    if (HIBYTE(v26) >= 3)
      v28 = 3;
    else
      v28 = HIBYTE(v26);
    v29 = (const UInt8 *)malloc_type_malloc((4 * v28) * (unint64_t)v11, 0x87A03909uLL);
    v37 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v29, (4 * v28) * (unint64_t)v11, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if ((_DWORD)v11)
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      do
      {
        if ((_DWORD)v28)
        {
          v41 = (float *)(v27 + v39);
          v42 = v28;
          v43 = (float *)v29;
          v44 = (float *)(v9 + v38);
          do
          {
            v45 = *v41++;
            v46 = v45;
            v47 = *v44++;
            *v43++ = v46 - v47;
            --v42;
          }
          while (v42);
        }
        ++v40;
        v39 += BYTE5(v26);
        v38 += BYTE5(v11);
        v29 += 4 * v28;
      }
      while (v40 != v11);
    }
    if (!a2)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v31, v32, v33, v34, v35, v36, (uint64_t)"meshSource");
    v48 = *(char *)(a2 + 96);
    v49 = sub_1B179E250(1, v30, v31, v32, v33, v34, v35, v36);
    v51 = sub_1B17ED264(v48, v37, 1, v28, v11, v49 * v28, 0, v50);
    v52 = v37;
  }
  else
  {
    v90 = sub_1B179E250(BYTE4(v11), v19, v20, v21, v22, v23, v24, v25);
    v54 = (const UInt8 *)malloc_type_malloc(v90 * v11, 0xDD971EDBuLL);
    v89 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v54, v90 * v11, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if ((_DWORD)v11)
    {
      v65 = v27;
      v66 = v9;
      v67 = 0;
      v68 = 0;
      v69 = v11;
      do
      {
        *(double *)v70.i64 = sub_1B198D4F8(BYTE4(v11), (const float *)(v66 + v67), v56, v57, v58, v59, v60, v61, v62, v63, v64);
        v91 = v70;
        *(double *)v79.i64 = sub_1B198D4F8(BYTE4(v26), (const float *)(v65 + v68), v71, v72, v73, v74, v75, v76, v70, v77, v78);
        sub_1B198D91C(BYTE4(v11), (uint64_t)v54, v80, v81, v82, v83, v84, v85, vsubq_f32(v79, v91));
        v68 += BYTE5(v26);
        v67 += BYTE5(v11);
        v54 += v90;
        --v69;
      }
      while (v69);
    }
    if (!a2)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v56, v57, v58, v59, v60, v61, (uint64_t)"meshSource");
    v86 = *(char *)(a2 + 96);
    v87 = sub_1B179E250(BYTE4(v11), v55, v56, v57, v58, v59, v60, v61);
    v51 = sub_1B17ED264(v86, v89, BYTE4(v11), 1, v11, v87, 0, v88);
    v52 = v89;
  }
  CFRelease(v52);
  return v51;
}

uint64_t sub_1B17ED6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v9 = (_QWORD *)sub_1B18F5B98(a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = sub_1B18F3970((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16);
  v18 = 0;
  v19 = sub_1B18F39CC((uint64_t)v9);
  if (v17 && v19)
  {
    if (sub_1B18F5BEC(a1))
      v26 = sub_1B18F3AB8(v9, 0, v20, v21, v22, v23, v24, v25);
    else
      v26 = (uint64_t)sub_1B18F39D4(v9, 0, v20, v21, v22, v23, v24, v25);
    v18 = v26;
  }
  sub_1B18F3B74((uint64_t)v9);
  v27 = sub_1B18F3854((uint64_t)v9);
  v28 = sub_1B18F385C((uint64_t)v9);
  if (v27 != sub_1B179E600(v27, v29, v30, v31, v32, v33, v34, v35))
    sub_1B179E64C(v27, v36, v37, v38, v39, v40, v41, v42);
  sub_1B179E720(v27, v28, v37, v38, v39, v40, v41, v42);
  return v18;
}

uint64_t sub_1B17ED7B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  return *(char *)(a1 + 96);
}

uint64_t sub_1B17ED7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const UInt8 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CFDataRef v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  float *v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  CFDataRef v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const UInt8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float32x4_t v64;
  float v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  float v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  CFDataRef v90;
  uint64_t v91;
  float32x4_t v92;

  v16 = sub_1B17ED6C4(a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = v9;
  if (!v16)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"bse.ptr");
  v25 = sub_1B17ED6C4(a2, v9, v10, v11, v12, v13, v14, v15);
  v26 = v18;
  if (!v25)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v19, v20, v21, v22, v23, v24, (uint64_t)"dlt.ptr");
  if ((_DWORD)v17 != (_DWORD)v26)
    return 0;
  if ((v26 & 0xFF000000000000) == 0x1000000000000 && (v17 & 0xFF000000000000) == 0x1000000000000)
  {
    if (HIBYTE(v26) >= 3)
      v27 = 3;
    else
      v27 = HIBYTE(v26);
    v28 = (const UInt8 *)malloc_type_malloc((4 * v27) * (unint64_t)v17, 0x5738255BuLL);
    v36 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v28, (4 * v27) * (unint64_t)v17, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if ((_DWORD)v17)
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      do
      {
        if ((_DWORD)v27)
        {
          v40 = (float *)(v16 + v38);
          v41 = v27;
          v42 = (float *)v28;
          v43 = (float *)(v25 + v37);
          do
          {
            v44 = *v40++;
            v45 = v44;
            v46 = *v43++;
            *v42++ = v45 + v46;
            --v41;
          }
          while (v41);
        }
        ++v39;
        v38 += BYTE5(v17);
        v37 += BYTE5(v26);
        v28 += 4 * v27;
      }
      while (v39 != v17);
    }
    if (!a2)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v30, v31, v32, v33, v34, v35, (uint64_t)"meshSource");
    v47 = *(char *)(a2 + 96);
    v48 = sub_1B179E250(1, v29, v30, v31, v32, v33, v34, v35) * v27;
    v50 = v47;
    v51 = v36;
    v52 = 1;
    v53 = v27;
    v54 = v17;
  }
  else
  {
    v91 = sub_1B179E250(BYTE4(v17), v18, v19, v20, v21, v22, v23, v24);
    v56 = (const UInt8 *)malloc_type_malloc(v91 * v17, 0x78407D6BuLL);
    v90 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v56, v91 * v17, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
    if ((_DWORD)v17)
    {
      v67 = v25;
      v68 = v16;
      v69 = 0;
      v70 = 0;
      v71 = v17;
      do
      {
        *(double *)v72.i64 = sub_1B198D4F8(BYTE4(v17), (const float *)(v68 + v69), v58, v59, v60, v61, v62, v63, v64, v65, v66);
        v92 = v72;
        *(double *)v81.i64 = sub_1B198D4F8(BYTE4(v26), (const float *)(v67 + v70), v73, v74, v75, v76, v77, v78, v72, v79, v80);
        sub_1B198D91C(BYTE4(v17), (uint64_t)v56, v82, v83, v84, v85, v86, v87, vaddq_f32(v92, v81));
        v70 += BYTE5(v26);
        v69 += BYTE5(v17);
        v56 += v91;
        --v71;
      }
      while (v71);
    }
    if (!a2)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v58, v59, v60, v61, v62, v63, (uint64_t)"meshSource");
    v88 = *(char *)(a2 + 96);
    v48 = sub_1B179E250(BYTE4(v17), v57, v58, v59, v60, v61, v62, v63);
    v50 = v88;
    v36 = v90;
    v51 = v90;
    v52 = BYTE4(v17);
    v53 = 1;
    v54 = v17;
  }
  v55 = sub_1B17ED264(v50, v51, v52, v53, v54, v48, 0, v49);
  CFRelease(v36);
  return v55;
}

uint64_t sub_1B17EDAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  return sub_1B18F39CC(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1B17EDB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CFIndex v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const UInt8 *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CFDataRef v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"baseSource");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"intervalList");
LABEL_3:
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v71 = 0u;
  sub_1B17A4804(a2, a3, a3, a4, a5, a6, a7, a8, (uint64_t)&v71);
  v18 = DWORD2(v71);
  if (DWORD2(v71))
  {
    v19 = 0;
    v20 = 0;
    v21 = 1;
    do
    {
      switch(BYTE11(v72))
      {
        case 4u:
          v22 = *(_DWORD *)(v71 + 4 * (*((_QWORD *)&v73 + 1) + v74 * (v21 - 1)));
          v23 = *(_DWORD *)(v71 + 4 * (*((_QWORD *)&v73 + 1) + v74 * v21));
          break;
        case 2u:
          v22 = *(unsigned __int16 *)(v71 + 2 * (*((_QWORD *)&v73 + 1) + v74 * (v21 - 1)));
          v23 = *(unsigned __int16 *)(v71 + 2 * (*((_QWORD *)&v73 + 1) + v74 * v21));
          break;
        case 1u:
          v22 = *(unsigned __int8 *)(v71 + *((_QWORD *)&v73 + 1) + v74 * (v21 - 1));
          v23 = *(unsigned __int8 *)(v71 + *((_QWORD *)&v73 + 1) + v74 * v21);
          break;
        default:
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), v12, v13, v14, v15, v16, v17, BYTE11(v72));
          v23 = 0;
          v22 = 0;
          v18 = DWORD2(v71);
          break;
      }
      v20 += (v23 - v22);
      ++v19;
      v21 += 2;
    }
    while (v19 < v18);
  }
  else
  {
    v20 = 0;
  }
  v24 = sub_1B17ED6C4(a1, v11, v12, v13, v14, v15, v16, v17);
  v26 = v25;
  v27 = BYTE5(v25);
  if (BYTE5(v25) != sub_1B179E250(BYTE4(v25), v25, v28, v29, v30, v31, v32, v33))
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: MeshSource packing only supports non interleaved float sources"), v34, v35, v36, v37, v38, v39, v69);
    return 0;
  }
  v40 = v27 * v20;
  if (!(v27 * v20))
    return 0;
  v70 = a1;
  v47 = (const UInt8 *)malloc_type_malloc(v27 * v20, 0xACEA9B4BuLL);
  if (DWORD2(v71))
  {
    v48 = 0;
    v49 = 0;
    v50 = 1;
    do
    {
      switch(BYTE11(v72))
      {
        case 4u:
          v51 = *(_DWORD *)(v71 + 4 * (*((_QWORD *)&v73 + 1) + v74 * (v50 - 1)));
          v52 = *(_DWORD *)(v71 + 4 * (*((_QWORD *)&v73 + 1) + v74 * v50));
          break;
        case 2u:
          v51 = *(unsigned __int16 *)(v71 + 2 * (*((_QWORD *)&v73 + 1) + v74 * (v50 - 1)));
          v52 = *(unsigned __int16 *)(v71 + 2 * (*((_QWORD *)&v73 + 1) + v74 * v50));
          break;
        case 1u:
          v51 = *(unsigned __int8 *)(v71 + *((_QWORD *)&v73 + 1) + v74 * (v50 - 1));
          v52 = *(unsigned __int8 *)(v71 + *((_QWORD *)&v73 + 1) + v74 * v50);
          break;
        default:
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), v41, v42, v43, v44, v45, v46, BYTE11(v72));
          v52 = 0;
          v51 = 0;
          break;
      }
      v53 = (v52 - v51) * BYTE5(v26);
      memcpy((void *)&v47[v49], (const void *)(v24 + v51 * BYTE5(v26)), v53);
      v49 += v53;
      ++v48;
      v50 += 2;
    }
    while (v48 < DWORD2(v71));
  }
  v61 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v47, v40, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v70)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v55, v56, v57, v58, v59, v60, (uint64_t)"meshSource");
  v62 = *(char *)(v70 + 96);
  v63 = HIBYTE(v26);
  v64 = BYTE6(v26);
  v65 = sub_1B179E250(v64, v54, v55, v56, v57, v58, v59, v60);
  v67 = sub_1B17ED264(v62, v61, v64, v63, v20, v65 * v63, 0, v66);
  CFRelease(v61);
  return v67;
}

double sub_1B17EDE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  const float *v21;
  int v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v27;

  v8 = sub_1B17ED6C4(a1, a2, a3, a4, a5, a6, a7, a8);
  v20 = v19;
  if (v19)
  {
    v21 = (const float *)v8;
    v22 = v9;
    v23 = v10;
    v24 = 0uLL;
    do
    {
      v27 = v24;
      v25.i64[0] = COERCE_UNSIGNED_INT64(sub_1B198D4F8(v22, v21, v11, v12, v13, v14, v15, v16, v24, v17.f32[0], v18)) & 0x7FFFFFFF7FFFFFFFLL;
      v25.i64[1] &= 0x7FFFFFFF7FFFFFFFuLL;
      v17 = vmaxnmq_f32(v27, v25);
      v24 = v17;
      v21 = (const float *)((char *)v21 + v23);
      --v20;
    }
    while (v20);
  }
  else
  {
    v24.i64[0] = 0;
  }
  return *(double *)v24.i64;
}

uint64_t sub_1B17EDED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  const float *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;

  result = sub_1B17ED6C4(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    if (v9)
    {
      v21 = (const float *)result;
      v22 = v10;
      v23 = v11;
      v24 = v9 - 1;
      do
      {
        *(double *)v18.i64 = sub_1B198D4F8(v22, v21, v12, v13, v14, v15, v16, v17, v18, v19, v20);
        v18.i32[0] = v18.i32[3];
        result = v18.f32[3] < 1.0;
        v25 = v18.f32[3] < 1.0 || v24-- == 0;
        v21 = (const float *)((char *)v21 + v23);
      }
      while (!v25);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B17EDF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  const UInt8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  UInt8 *v43;
  unsigned int v44;
  UInt8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  UInt8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CFDataRef v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  CFIndex v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, v65);
  v12 = sub_1B17ED6C4(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v12)
    return 0;
  v20 = (char *)v12;
  v21 = v13;
  v70 = a1;
  v75 = 0;
  v73 = 0u;
  v74 = 0u;
  v72 = 0u;
  sub_1B17A4804(a2, a4, v14, v15, v16, v17, v18, v19, (uint64_t)&v72);
  if (BYTE10(v73) != 2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Provided mesh element is not an interval list"), v23, v24, v25, v26, v27, v28, (uint64_t)"ind.type == kCFXMeshElementTypeLinesArray");
  v29 = sub_1B179E250(BYTE4(v21), v22, v23, v24, v25, v26, v27, v28);
  v71 = a3;
  v67 = v29 * a3;
  v30 = (const UInt8 *)malloc_type_malloc(v29 * a3, 0x66AA28E1uLL);
  v68 = &v66;
  MEMORY[0x1E0C80A78](v30, v31);
  bzero((char *)&v66 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v29);
  v69 = v21;
  if (DWORD2(v72))
  {
    v38 = 0;
    v39 = 0;
    do
    {
      switch(BYTE11(v73))
      {
        case 4u:
          v40 = *(_DWORD *)(v72 + 4 * (*((_QWORD *)&v74 + 1) + v75 * 2 * v38));
          v41 = *(_DWORD *)(v72 + 4 * (*((_QWORD *)&v74 + 1) + v75 * ((2 * v38) | 1)));
          break;
        case 2u:
          v40 = *(unsigned __int16 *)(v72 + 2 * (*((_QWORD *)&v74 + 1) + v75 * 2 * v38));
          v41 = *(unsigned __int16 *)(v72 + 2 * (*((_QWORD *)&v74 + 1) + v75 * ((2 * v38) | 1)));
          break;
        case 1u:
          v40 = *(unsigned __int8 *)(v72 + *((_QWORD *)&v74 + 1) + v75 * 2 * v38);
          v41 = *(unsigned __int8 *)(v72 + *((_QWORD *)&v74 + 1) + v75 * ((2 * v38) | 1));
          break;
        default:
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), v32, v33, v34, v35, v36, v37, BYTE11(v73));
          v41 = 0;
          v40 = 0;
          break;
      }
      v42 = v40 - v39;
      if (v40 > v39)
      {
        v43 = (UInt8 *)&v30[v29 * v39];
        do
        {
          memcpy(v43, (char *)&v66 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v29);
          v43 += v29;
          --v42;
        }
        while (v42);
      }
      v44 = v41 - v40;
      if (v41 > v40)
      {
        v45 = (UInt8 *)&v30[v29 * v40];
        do
        {
          memcpy(v45, v20, v29);
          v20 += BYTE5(v21);
          v45 += v29;
          --v44;
        }
        while (v44);
      }
      ++v38;
      v39 = v41;
    }
    while (v38 < DWORD2(v72));
  }
  else
  {
    v41 = 0;
  }
  v47 = v71;
  if (v71 > v41)
  {
    v48 = v71 - v41;
    v49 = (UInt8 *)&v30[v29 * v41];
    do
    {
      memcpy(v49, (char *)&v66 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0), v29);
      v49 += v29;
      --v48;
    }
    while (v48);
  }
  v57 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v30, v67, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  v58 = v70;
  if (!v70)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v51, v52, v53, v54, v55, v56, (uint64_t)"meshSource");
  v59 = *(char *)(v58 + 96);
  v60 = HIBYTE(v69);
  v61 = BYTE6(v69);
  v62 = sub_1B179E250(BYTE6(v69), v50, v51, v52, v53, v54, v55, v56);
  v46 = sub_1B17ED264(v59, v57, v61, v60, v47, v62 * v60, 0, v63);
  CFRelease(v57);
  return v46;
}

uint64_t sub_1B17EE2C0(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;

  v2 = sub_1B17ED1B8();
  v3 = (const void *)sub_1B18F3B3C(*(_QWORD *)(a1 + 64));
  sub_1B18F543C(v2, v3, v4, v5, v6, v7, v8, v9);
  sub_1B18F3B34((uint64_t)v3, v2);
  CFRelease(v3);
  v15 = *(const void **)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  if (v16)
    sub_1B18F5624(v2, (uint64_t)v15, v16, v10, v11, v12, v13, v14);
  else
    sub_1B18F5564(v2, v15, 0, v10, v11, v12, v13, v14);
  *(_WORD *)(v2 + 96) = *(_WORD *)(a1 + 96);
  return v2;
}

uint64_t sub_1B17EE33C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_1B17ED1B8();
  sub_1B18F567C(a1, v2, v3, v4, v5, v6, v7, v8);
  *(_WORD *)(v2 + 96) = *(_WORD *)(a1 + 96);
  return v2;
}

uint64_t sub_1B17EE378(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_1B17ED1B8();
  sub_1B18F5950(a1, v2, v3, v4, v5, v6, v7, v8);
  *(_WORD *)(v2 + 96) = *(_WORD *)(a1 + 96);
  return v2;
}

uint64_t sub_1B17EE3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  return sub_1B18F3B74(*(_QWORD *)(a1 + 64));
}

double sub_1B17EE400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  const UInt8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const float *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float v28;
  float v29;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  v10 = *(_QWORD **)(a1 + 64);
  v11 = sub_1B18F39D4(v10, a2, a3, a4, a5, a6, a7, a8);
  if (!v11)
    return 0.0;
  v19 = (const float *)v11;
  v20 = sub_1B18F3960((uint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
  return sub_1B198D4F8(v20, v19, v21, v22, v23, v24, v25, v26, v27, v28, v29);
}

double sub_1B17EE478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  const float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float v27;
  float v28;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  v10 = *(_QWORD **)(a1 + 64);
  v11 = (const float *)sub_1B18F39D4(v10, a2, a3, a4, a5, a6, a7, a8);
  v19 = sub_1B18F3960((uint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
  return sub_1B198D4F8(v19, v11, v20, v21, v22, v23, v24, v25, v26, v27, v28);
}

uint64_t sub_1B17EE4E4(uint64_t a1)
{
  return sub_1B18F385C(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1B17EE4EC(uint64_t a1)
{
  return sub_1B18F3854(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1B17EE4F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80);
}

uint64_t sub_1B17EE500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFDataRef v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const UInt8 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  float v73;
  float v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  __int16 v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;

  v9 = a1;
  v10 = (_QWORD *)sub_1B18F5B98(a1, a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B18F3854((uint64_t)v10) != 1)
  {
    v19 = CFSTR("Error: Conversion from other types than float is not supported");
    goto LABEL_5;
  }
  if (sub_1B18F3BAC((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17))
  {
    v19 = CFSTR("Error: Conversion of an interleaved source is not supported, please convert your sources before interleaving");
LABEL_5:
    sub_1B17C4408(16, (uint64_t)v19, v12, v13, v14, v15, v16, v17, v81);
    return 0;
  }
  v21 = sub_1B179E250(a2, v18, v12, v13, v14, v15, v16, v17);
  v22 = sub_1B18F385C((uint64_t)v10);
  v23 = v22 * v21;
  if (((v22 * v21) & 3) != 0)
    v24 = -((_DWORD)v22 * (_DWORD)v21) & 3;
  else
    v24 = 0;
  v25 = v24 + v23;
  v26 = (v24 + v23) * sub_1B18F39CC((uint64_t)v10);
  v27 = (char *)sub_1B179E238(v26);
  bzero(v27, v26);
  v34 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v27, v26, 0);
  if (!v9)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v28, v29, v30, v31, v32, v33, (uint64_t)"meshSource");
  v35 = *(char *)(v9 + 96);
  v36 = sub_1B18F385C((uint64_t)v10);
  v37 = sub_1B18F39CC((uint64_t)v10);
  v82 = sub_1B17ED264(v35, v34, a2, v36, v37, v25, 0, v38);
  v46 = sub_1B18F5B98(v82, v39, v40, v41, v42, v43, v44, v45);
  sub_1B18F3E60(v46, v24);
  if (sub_1B17EDAE0(v9, v47, v48, v49, v50, v51, v52, v53) >= 1)
  {
    v60 = 0;
    while (1)
    {
      v61 = v25;
      v62 = v9;
      v63 = sub_1B18F39D4(v10, v60, v54, v55, v56, v57, v58, v59);
      if (sub_1B18F385C((uint64_t)v10) >= 1)
        break;
LABEL_34:
      ++v60;
      v9 = v62;
      v25 = v61;
      v27 += v61;
      if (v60 >= sub_1B17EDAE0(v62, v64, v65, v66, v67, v68, v69, v70))
        goto LABEL_35;
    }
    v71 = 0;
    while (1)
    {
      if ((int)a2 > 13)
      {
        if ((_DWORD)a2 == 14)
        {
          v75 = HIWORD(*(_DWORD *)v63) & 0x8000;
          v76 = (*(_DWORD *)v63 >> 23);
          v77 = v76 - 112;
          v78 = v76 - 113;
          v79 = v75 | 0x7BFF;
          if (v76 == 255)
            v79 = v75 | ((*(_DWORD *)v63 & 0x7FFFFF) != 0) | 0x7C00;
          if (v76 >= 0x71)
            v80 = v79;
          else
            v80 = HIWORD(*(_DWORD *)v63) & 0x8000;
          v72 = HIWORD(*(_DWORD *)v63) & 0x8000 | (*(_DWORD *)v63 >> 13) & 0x3FF | (v77 << 10);
          if (v78 > 0x1D)
            LOWORD(v72) = v80;
LABEL_31:
          *(_WORD *)&v27[2 * v71] = v72;
          goto LABEL_33;
        }
        if ((_DWORD)a2 != 15)
        {
LABEL_32:
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshSourceCreateCopyWithComponentsBaseType: unsupported type"), v65, v66, v67, v68, v69, v70, v81);
          goto LABEL_33;
        }
        v73 = *(float *)v63;
        v74 = 255.0;
      }
      else
      {
        if ((_DWORD)a2 != 4)
        {
          if ((_DWORD)a2 != 13)
            goto LABEL_32;
          v72 = (int)(float)(*(float *)v63 * 32767.0);
          goto LABEL_31;
        }
        v73 = *(float *)v63;
        v74 = 127.0;
      }
      v27[v71] = (int)(float)(v73 * v74);
LABEL_33:
      ++v71;
      v63 += 4;
      if (sub_1B18F385C((uint64_t)v10) <= v71)
        goto LABEL_34;
    }
  }
LABEL_35:
  CFRelease(v34);
  return v82;
}

uint64_t sub_1B17EE7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __CFData *Mutable;
  const __CFString *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const UInt8 *v69;
  const UInt8 *BytePtr;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v8 = a3;
  v11 = sub_1B17ED6C4(a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = v12;
  v20 = sub_1B179E720(BYTE6(v12), HIBYTE(v12), v14, v15, v16, v17, v18, v19);
  if ((_DWORD)v20 == (_DWORD)a2)
  {
    if (!v8)
      return sub_1B17EE2C0(a1);
    v28 = sub_1B17ED1B8();
    sub_1B18F5950(a1, v28, v29, v30, v31, v32, v33, v34);
    *(_WORD *)(v28 + 96) = *(_WORD *)(a1 + 96);
  }
  else
  {
    v35 = v20;
    v36 = sub_1B179E250(a2, v21, v22, v23, v24, v25, v26, v27);
    v43 = v36;
    if ((v36 & 3) != 0)
      v44 = -(int)v36 & 3;
    else
      v44 = 0;
    if ((sub_1B198D378(a2, v35, v37, v38, v39, v40, v41, v42) & 1) != 0)
    {
      v52 = v44 + v43;
      if (v8)
      {
        Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v52 * v13);
        CFDataSetLength(Mutable, v52 * v13);
      }
      else
      {
        v69 = (const UInt8 *)malloc_type_calloc(v52 * v13, 1uLL, 0x74359840uLL);
        Mutable = CFDataCreateWithBytesNoCopy(0, v69, v52 * v13, 0);
      }
      BytePtr = CFDataGetBytePtr(Mutable);
      sub_1B198D3D0((uint64_t)BytePtr, (unsigned __int16)(v44 + v43) | ((unsigned __int16)a2 << 16) | ((unint64_t)v13 << 32), v11, (v13 >> 16) & 0xFF0000 | BYTE5(v13) | ((unint64_t)v13 << 32), v71, v72, v73, v74);
      if (!a1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v75, v76, v77, v78, v79, v80, (uint64_t)"meshSource");
      v28 = sub_1B17ED264(*(char *)(a1 + 96), Mutable, a2, 1, v13, v52, 0, v80);
      CFRelease(Mutable);
      if (v8)
        sub_1B18F5C08(v28);
      v88 = sub_1B18F5B98(v28, v81, v82, v83, v84, v85, v86, v87);
      sub_1B18F3E60(v88, v44);
    }
    else
    {
      v55 = sub_1B179E5A0(v35, v45, v46, v47, v48, v49, v50, v51);
      sub_1B179E5A0(a2, v56, v57, v58, v59, v60, v61, v62);
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Conversion from %@ to %@ to is not supported"), v63, v64, v65, v66, v67, v68, (uint64_t)v55);
      return 0;
    }
  }
  return v28;
}

size_t sub_1B17EE9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  const __CFString *v20;
  FILE **v21;
  FILE *v22;
  const char *CStringPtr;
  uint64_t v24;
  uint64_t v25;
  FILE *v26;
  FILE *v27;
  FILE *v28;

  result = sub_1B17ED6C4(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v18 = result;
    v19 = v11;
    if (!a1)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"meshSource");
    v20 = sub_1B17ED08C(*(char *)(a1 + 96));
    v21 = (FILE **)MEMORY[0x1E0C80C20];
    v22 = (FILE *)*MEMORY[0x1E0C80C20];
    CStringPtr = CFStringGetCStringPtr(v20, 0x600u);
    result = fprintf(v22, "%s\n", CStringPtr);
    v24 = v19 >= a2 ? a2 : v19;
    if (v24 >= 1)
    {
      v25 = 0;
      while (1)
      {
        if (BYTE4(v19) <= 0x17u)
        {
          switch(BYTE4(v19))
          {
            case 7u:
              v28 = *v21;
              goto LABEL_26;
            case 8u:
              v27 = *v21;
LABEL_27:
              result = fprintf(v27, "%4d : %+.2f %+.2f %+.2f\n");
              goto LABEL_29;
            case 9u:
              v26 = *v21;
LABEL_28:
              result = fprintf(v26, "%4d : %+.2f %+.2f %+.2f %+.2f\n");
              goto LABEL_29;
          }
          goto LABEL_25;
        }
        if (BYTE4(v19) > 0x2Au)
          break;
        if (BYTE4(v19) != 24)
        {
          if (BYTE4(v19) == 42)
          {
            v28 = *v21;
LABEL_26:
            result = fprintf(v28, "%4d : %+.2f %+.2f\n");
            goto LABEL_29;
          }
          goto LABEL_25;
        }
        result = fprintf(*v21, "%4d : %3d %3d %3d %3d\n");
LABEL_29:
        ++v25;
        v18 += BYTE5(v19);
        if (v24 == v25)
          return result;
      }
      if (BYTE4(v19) == 43)
      {
        v27 = *v21;
        goto LABEL_27;
      }
      if (BYTE4(v19) == 44)
      {
        v26 = *v21;
        goto LABEL_28;
      }
LABEL_25:
      result = fwrite("type debugging not implemented\n", 0x1FuLL, 1uLL, *v21);
      goto LABEL_29;
    }
  }
  return result;
}

uint64_t sub_1B17EEEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  return *(unsigned __int8 *)(a1 + 99);
}

void sub_1B17EEEF8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  *(_BYTE *)(a1 + 99) = a2;
}

id sub_1B17EEF48(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFNumberRef v16;
  __CFNotificationCenter *LocalCenter;
  void *valuePtr;

  if (sub_1B18F5C18(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    valuePtr = sub_1B18F5A34(a1, v9, v10, v11, v12, v13, v14, v15);
    v16 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCFXNotificationMeshSourceWillDie"), v16, 0, 1u);
    CFRelease(v16);
  }
  return sub_1B18F524C((uint64_t)a1, (uint64_t)v9, v10, v11, v12, v13, v14, v15);
}

__CFString *sub_1B17EEFC8(uint64_t a1)
{
  __CFString *Mutable;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const __CFString *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const __CFString *v47;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = sub_1B18F3854(*(_QWORD *)(a1 + 64));
  v4 = sub_1B18F385C(*(_QWORD *)(a1 + 64));
  v12 = sub_1B17EDAE0(a1, v5, v6, v7, v8, v9, v10, v11);
  v20 = sub_1B18F5AAC(a1, v13, v14, v15, v16, v17, v18, v19);
  v28 = sub_1B18F5BE0(a1);
  v29 = *(_QWORD *)(a1 + 64);
  if (v20)
    v30 = sub_1B18F5AAC(a1, (uint64_t)v21, v22, v23, v24, v25, v26, v27);
  else
    v30 = (uint64_t)sub_1B18F5A34((_QWORD *)a1, v21, v22, v23, v24, v25, v26, v27);
  v37 = v30;
  v38 = sub_1B179E720(v3, v4, v31, v32, v33, v34, v35, v36);
  v39 = sub_1B17ED08C(*(char *)(a1 + 96));
  v47 = sub_1B179E5A0(v38, v40, v41, v42, v43, v44, v45, v46);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXMeshSource %p(%@) data:(%p) mut:%d count:%ld type:%@ divisor:%d mtl:%d offset:%d stride:%d"), a1, v39, v37, v28, v12, v47, *(unsigned __int8 *)(a1 + 98), v20 != 0, *(_QWORD *)(v29 + 48), *(_QWORD *)(v29 + 40));
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

__CFArray *sub_1B17EF0F0(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  __CFDictionary *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  uint64_t v16;
  int v17;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 64;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v6 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v3, CFSTR("name"), CFSTR("accessor"));
  CFDictionarySetValue(v3, CFSTR("type"), v4);
  CFDictionarySetValue(v3, CFSTR("address"), v6);
  CFDictionarySetValue(v3, CFSTR("semantic"), v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 72;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v10 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v7, CFSTR("name"), CFSTR("data"));
  CFDictionarySetValue(v7, CFSTR("type"), v8);
  CFDictionarySetValue(v7, CFSTR("address"), v10);
  CFDictionarySetValue(v7, CFSTR("semantic"), v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  v11 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 0;
  valuePtr = 2;
  v16 = a1 + 96;
  v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v14 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v11, CFSTR("name"), CFSTR("semantic"));
  CFDictionarySetValue(v11, CFSTR("type"), v12);
  CFDictionarySetValue(v11, CFSTR("address"), v14);
  CFDictionarySetValue(v11, CFSTR("semantic"), v13);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v13);
  CFRelease(v11);
  CFRelease(v14);
  CFRelease(v12);
  return Mutable;
}

uint64_t sub_1B17EF774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__updateVFXCoreTime_, a3, a4);
}

uint64_t sub_1B17EF7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v8;
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CFX::RG::Resource *v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[10];

  v8 = &unk_1EEF65000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF656A8);
  if ((v9 & 1) == 0)
  {
    v18 = a2;
    v19 = a3;
    v17 = __cxa_guard_acquire(&qword_1EEF656A8);
    v8 = (_QWORD *)&unk_1EEF65000;
    a2 = v18;
    a3 = v19;
    if (v17)
    {
      qword_1EEF656A0 = (uint64_t)sub_1B17F0934("MOTION_BLUR_FINAL_BLUR", 0x16u);
      __cxa_guard_release(&qword_1EEF656A8);
      v8 = (_QWORD *)&unk_1EEF65000;
      a2 = v18;
      a3 = v19;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v8[212], 0);
  *(_QWORD *)a1 = &off_1E63CECD0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  v10 = *(_OWORD *)(a5 + 136);
  v20[6] = *(_OWORD *)(a5 + 120);
  v20[7] = v10;
  v11 = *(_OWORD *)(a5 + 168);
  v20[8] = *(_OWORD *)(a5 + 152);
  v20[9] = v11;
  v12 = *(_OWORD *)(a5 + 72);
  v20[2] = *(_OWORD *)(a5 + 56);
  v20[3] = v12;
  v13 = *(_OWORD *)(a5 + 104);
  v20[4] = *(_OWORD *)(a5 + 88);
  v20[5] = v13;
  v14 = *(_OWORD *)(a5 + 40);
  v20[0] = *(_OWORD *)(a5 + 24);
  v20[1] = v14;
  v15 = sub_1B17A34D0(a4, (uint64_t)"MB-Color", v20);
  *(_QWORD *)(a1 + 416) = v15;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v15, 0x100000000, 0);
  return a1;
}

void sub_1B17EF8D0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B17EF8E4(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[6];
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  const __CFString *v63;
  __int128 v64;
  uint64_t v65;

  prof_beginFlame((uint64_t)"Final Blur", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/MotionBlurPass.mm", 32);
  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 416));
  v6 = *(unsigned __int8 *)(v5 + 9);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v4)));
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v6)))) ^ ((0x9DDFEA08EB382D69 * (v9 ^ ((0x9DDFEA08EB382D69 * (v9 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v9 ^ v6)))) >> 47));
  v11 = CFX::CrossFrameResourceManager::get(a2[4], v10);
  *(_QWORD *)(a1 + 384) = v11;
  if (!v11)
  {
    *(_QWORD *)(a1 + 384) = sub_1B17EFAFC(a2[4], v10);
    v19 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
    v23 = (void *)objc_msgSend_resourceManager(v19, v20, v21, v22);
    v24 = *(_QWORD *)(a1 + 384);
    memset(v48, 0, sizeof(v48));
    v49 = 0;
    v51 = 0u;
    v52 = 0u;
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0;
    v64 = 0u;
    v65 = 0;
    v25 = (void *)sub_1B18FD768((uint64_t)v23);
    v50 = objc_msgSend_frameworkLibrary(v25, v26, v27, v28);
    *(_QWORD *)&v51 = v7;
    LOBYTE(v56) = v6;
    v63 = CFSTR("vfx_draw_fullscreen_triangle_VR_pos_uv_uvNorm_vertex");
    *(_QWORD *)&v64 = CFSTR("vfx_motionblur_blur");
    v31 = objc_msgSend_newRenderPipelineStateWithDesc_(v23, v29, (uint64_t)v48, v30);
    v32 = *(void **)(v24 + 16);
    if (v32 != (void *)v31)
    {
      if (v32)

      *(_QWORD *)(v24 + 16) = v31;
    }
    v33 = *(_QWORD *)(a1 + 384);
    v34 = (void *)sub_1B18FD768((uint64_t)v23);
    *((_QWORD *)&v43 + 1) = objc_msgSend_frameworkLibrary(v34, v35, v36, v37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v44 = v7;
    LOBYTE(v45) = v6;
    *((_QWORD *)&v46 + 1) = CFSTR("vfx_draw_fullscreen_triangle_VR_pos_uv_uvNorm_vertex");
    *(_QWORD *)&v47 = CFSTR("vfx_motionblur_blur_resize");
    v40 = objc_msgSend_newRenderPipelineStateWithDesc_(v23, v38, (uint64_t)&v42, v39);
    v41 = *(void **)(v33 + 24);
    if (v41 != (void *)v40)
    {
      if (v41)

      *(_QWORD *)(v33 + 24) = v40;
    }
  }
  prof_endFlame();
}

void sub_1B17EFADC(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B17EFAFC(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)v4 = &off_1E63CECB0;
    *(_QWORD *)(v4 + 16) = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, v4);
  }
  return v4;
}

void sub_1B17EFB7C(uint64_t a1, CFX::GPUResourceManager **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  void *v27;
  void **v28;
  void *v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  id Texture;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  __int128 v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  prof_beginFlame((uint64_t)"Final Blur", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/MotionBlurPass.mm", 67);
  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v4, v5, v6, v7, v8, v9, v10);
  v15 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  v16 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 392));
  v24 = *v16;
  v25 = v16[1];
  v26 = *(_QWORD *)(a1 + 384);
  if (*(unsigned __int16 *)(v26 + 32) == v24 && *(unsigned __int16 *)(v26 + 34) == v25)
  {
    v29 = *(void **)(v26 + 16);
    v28 = (void **)(v26 + 16);
    v27 = v29;
    if (!v29)
      goto LABEL_6;
  }
  else
  {
    v30 = *(void **)(v26 + 24);
    v28 = (void **)(v26 + 24);
    v27 = v30;
    if (!v30)
    {
LABEL_6:
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v18, v19, v20, v21, v22, v23, (uint64_t)"_ptr != NULL");
      v27 = *v28;
    }
  }
  v31 = objc_msgSend_state(v27, v17, v18, v19);
  objc_msgSend_setRenderPipelineState_(*(void **)(v15 + 16), v32, v31, v33);
  Texture = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 392));
  v35 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 400));
  v36 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 408));
  sub_1B179AEE4(v15, v35, 0, v37);
  sub_1B179AEE4(v15, v36, 1, v38);
  sub_1B179AEE4(v15, Texture, 2, v39);
  v43 = xmmword_1B2244EC0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  sub_1B1868D14(*(_QWORD *)(v15 + 24), &v43, 0x10uLL, &v44);
  objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v15 + 16), v40, v45, v46, 0);
  sub_1B179AF64(v15, v41);
  v42 = *(_QWORD *)(a1 + 384);
  *(_WORD *)(v42 + 32) = v24;
  *(_WORD *)(v42 + 34) = v25;
  prof_endFlame();
}

void sub_1B17EFD24(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B17EFD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v7 = atomic_load((unsigned __int8 *)&qword_1EEF656B8);
  v8 = &unk_1EEF65000;
  if ((v7 & 1) == 0)
  {
    v11 = a2;
    v12 = a3;
    v10 = __cxa_guard_acquire(&qword_1EEF656B8);
    v8 = &unk_1EEF65000;
    a2 = v11;
    a3 = v12;
    if (v10)
    {
      byte_1EEF656B0 = 1;
      __cxa_guard_release(&qword_1EEF656B8);
      v8 = (_BYTE *)&unk_1EEF65000;
      a2 = v11;
      a3 = v12;
    }
  }
  if (v8[1712])
    v9 = 0xF4EC03A93B2E1651;
  else
    v9 = 0;
  sub_1B18F7354(a1, a2, a3, (uint64_t *)a5, v9, 0);
  *(_QWORD *)a1 = &off_1E63CF080;
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a5 + 16);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
}

void sub_1B17EFE0C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  prof_beginFlame((uint64_t)"Neighbor max", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/MotionBlurPass.mm", 130);
  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
  a1[48] = v5;
  if (!v5)
  {
    a1[48] = (uint64_t)sub_1B17EFF00(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
    v13 = (void *)sub_1B1813BC4(a1[46], v6, v7, v8, v9, v10, v11, v12);
    v17 = (void *)objc_msgSend_resourceManager(v13, v14, v15, v16);
    v18 = a1[48];
    v23 = objc_msgSend_newComputePipelineStateWithFunctionName_(v17, v19, (uint64_t)CFSTR("vfx_motionblur_neighbormax_x"), v20);
    v24 = *(void **)(v18 + 16);
    if (v24 != (void *)v23)
    {
      if (v24)

      *(_QWORD *)(v18 + 16) = v23;
    }
    v25 = a1[48];
    v26 = objc_msgSend_newComputePipelineStateWithFunctionName_(v17, v21, (uint64_t)CFSTR("vfx_motionblur_neighbormax_y"), v22);
    v27 = *(void **)(v25 + 24);
    if (v27 != (void *)v26)
    {
      if (v27)

      *(_QWORD *)(v25 + 24) = v26;
    }
  }
  prof_endFlame();
}

void sub_1B17EFEE8(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

_QWORD *sub_1B17EFF00(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    *v4 = &off_1E63CF060;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B17EFF74(uint64_t a1, uint64_t a2, void **a3)
{
  id Texture;
  id v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;

  prof_beginFlame((uint64_t)"Neighbor max", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/MotionBlurPass.mm", 147);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 392));
  v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400));
  objc_msgSend_setTexture_atIndex_(*a3, v8, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(*a3, v9, (uint64_t)v7, 1);
  v16 = *(unsigned __int8 *)(a1 + 376);
  v17 = *(_QWORD *)(a1 + 384);
  if (v16)
  {
    v20 = *(_QWORD *)(v17 + 24);
    v19 = (uint64_t *)(v17 + 24);
    v18 = v20;
    if (!v20)
      goto LABEL_5;
  }
  else
  {
    v21 = *(_QWORD *)(v17 + 16);
    v19 = (uint64_t *)(v17 + 16);
    v18 = v21;
    if (!v21)
    {
LABEL_5:
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v10, v11, v12, v13, v14, v15, (uint64_t)"_ptr != NULL");
      v18 = *v19;
    }
  }
  v22 = sub_1B18FD774(v18);
  objc_msgSend_setComputePipelineState_(*a3, v23, v22, v24);
  objc_msgSend_dispatchOnTexture2DWithoutOptimizedThreadGroupPerGrid_(*a3, v25, (uint64_t)v7, v26);
  prof_endFlame();
}

void sub_1B17F0078(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B17F0090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _BYTE *v8;
  unsigned __int8 v9;
  uint64_t v10;
  CFX::RG::ResourceIdentifier *v11;
  uint64_t v12;
  CFX::RG::Resource *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[10];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v8 = &unk_1EEF65000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF656C8);
  if ((v9 & 1) == 0)
  {
    v16 = a2;
    v17 = a3;
    v15 = __cxa_guard_acquire(&qword_1EEF656C8);
    v8 = &unk_1EEF65000;
    a2 = v16;
    a3 = v17;
    if (v15)
    {
      byte_1EEF656C0 = 1;
      __cxa_guard_release(&qword_1EEF656C8);
      v8 = (_BYTE *)&unk_1EEF65000;
      a2 = v16;
      a3 = v17;
    }
  }
  if (v8[1728])
    v10 = 0xE171746C2A666EDCLL;
  else
    v10 = 0;
  sub_1B18F7354(a1, a2, a3, (uint64_t *)a5, v10, 0);
  *(_QWORD *)a1 = &off_1E63CEA10;
  *(_DWORD *)(a1 + 376) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(a1 + 400) = 0;
  v12 = CFX::RG::ResourceIdentifier::finalColor(v11);
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(&v19, v12, *(float *)(a5 + 16));
  if (!BYTE1(v20))
    BYTE1(v20) = 1;
  LOBYTE(v20) = 6;
  *((_QWORD *)&v20 + 1) = 115;
  LOBYTE(v21) = 1;
  v18[6] = v25;
  v18[7] = v26;
  v18[8] = v27;
  v18[9] = v28;
  v18[4] = v23;
  v18[5] = v24;
  v18[2] = v21;
  v18[3] = v22;
  v18[0] = v19;
  v18[1] = v20;
  v13 = sub_1B17A34D0(a4, (uint64_t)"MB-TileMax", v18);
  *(_QWORD *)(a1 + 392) = v13;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v13);
  return a1;
}

void sub_1B17F01E4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B17F01F8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  prof_beginFlame((uint64_t)"Motion blur tile max", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/MotionBlurPass.mm", 191);
  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
  a1[48] = v5;
  if (!v5)
  {
    a1[48] = (uint64_t)sub_1B17F02B8(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
    v13 = (void *)sub_1B1813BC4(a1[46], v6, v7, v8, v9, v10, v11, v12);
    v17 = (void *)objc_msgSend_resourceManager(v13, v14, v15, v16);
    v18 = a1[48];
    v21 = objc_msgSend_newComputePipelineStateWithFunctionName_(v17, v19, (uint64_t)CFSTR("vfx_motionblur_tilemax"), v20);
    v22 = *(void **)(v18 + 16);
    if (v22 != (void *)v21)
    {
      if (v22)

      *(_QWORD *)(v18 + 16) = v21;
    }
  }
  prof_endFlame();
}

void sub_1B17F02A0(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

_QWORD *sub_1B17F02B8(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CE9F0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B17F032C(uint64_t a1, uint64_t a2, void **a3)
{
  id Texture;
  id v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;

  prof_beginFlame((uint64_t)"Motion blur tile max", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/MotionBlurPass.mm", 207);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400));
  v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 392));
  objc_msgSend_setTexture_atIndex_(*a3, v8, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(*a3, v9, (uint64_t)v7, 1);
  v16 = *(_QWORD *)(a1 + 384);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v10, v11, v12, v13, v14, v15, (uint64_t)"_ptr != NULL");
    v17 = *(_QWORD *)(v16 + 16);
  }
  v18 = sub_1B18FD774(v17);
  objc_msgSend_setComputePipelineState_(*a3, v19, v18, v20);
  objc_msgSend_dispatchOnTexture2D_(*a3, v21, (uint64_t)v7, v22);
  v26 = 1;
  v27 = (uint64_t)v7;
  while (v26 < objc_msgSend_mipmapLevelCount(v7, v23, v24, v25))
  {
    v31 = objc_msgSend_pixelFormat(v7, v28, v29, v30);
    v35 = objc_msgSend_textureType(v7, v32, v33, v34);
    v37 = (void *)objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(v7, v36, v31, v35, v26, 1, 0, 1);
    objc_msgSend_setTexture_atIndex_(*a3, v38, v27, 0);
    objc_msgSend_setTexture_atIndex_(*a3, v39, (uint64_t)v37, 1);
    objc_msgSend_dispatchOnTexture2D_(*a3, v40, (uint64_t)v7, v41);

    ++v26;
    v27 = (uint64_t)v37;
  }
  prof_endFlame();
}

void sub_1B17F0494(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t *sub_1B17F04B4(uint64_t *a1, uint64_t *a2)
{
  _OWORD *v4;
  CFX::RG::Resource *v5;
  _OWORD *v6;
  CFX::RG::Resource *v7;
  uint64_t v8;
  uint64_t *v9;
  _OWORD *v10;
  CFX::RG::Resource *v11;
  uint64_t v12;
  uint64_t *v13;
  CFX::RG::Resource *v14;
  uint64_t v15;
  uint64_t *v16;
  CFX::RG::Resource *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t *v27;
  const char *v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[10];
  _QWORD v44[3];
  _OWORD v45[10];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  CFX::RG::Resource *v57;
  uint64_t v58;
  _OWORD v59[10];
  __int128 v60;
  CFX::RG::Resource *v61;
  uint64_t v62;
  _OWORD v63[11];

  v4 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a2[2]);
  CFX::RG::TextureDescriptorReference::withSampleCount(v4, 1, (uint64_t)v63);
  v5 = sub_1B17A34D0(a1, (uint64_t)"VELOCITY COPY", v63);
  *(_QWORD *)&v60 = a2[2];
  DWORD2(v60) = 0;
  v61 = v5;
  v62 = 0x100000000;
  CFX::RG::makeCopyPass(a1, (uint64_t)"Copy velocity input", &v60);
  v6 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a2[1]);
  CFX::RG::TextureDescriptorReference::withSampleCount(v6, 1, (uint64_t)v59);
  v7 = sub_1B17A34D0(a1, (uint64_t)"COLOR COPY", v59);
  *(_QWORD *)&v56 = a2[1];
  DWORD2(v56) = 0;
  v57 = v7;
  v58 = 0x100000000;
  CFX::RG::makeCopyPass(a1, (uint64_t)"Copy color input", &v56);
  v8 = *a2;
  v29 = "MOTION_BLUR_TILE_MAX_BLUR";
  v30 = v8;
  v31 = 1056964608;
  v9 = (uint64_t *)sub_1B17F07C0(a1, a1, (uint64_t)&v29);
  v9[50] = (uint64_t)v5;
  CFX::RG::Pass::readFrom(v9, v5);
  v10 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a2[1]);
  CFX::RG::TextureDescriptorReference::withSampleCount(v10, 1, (uint64_t)&v46);
  LODWORD(v55) = 1015021568;
  *((_QWORD *)&v47 + 1) = 115;
  LOBYTE(v48) = 1;
  v45[6] = v52;
  v45[7] = v53;
  v45[4] = v50;
  v45[5] = v51;
  v45[8] = v54;
  v45[9] = v55;
  v45[2] = v48;
  v45[3] = v49;
  v45[0] = v46;
  v45[1] = v47;
  v11 = sub_1B17A34D0(a1, (uint64_t)"MB-TileMaxN-X", v45);
  v12 = *a2;
  v44[0] = "MOTION_BLUR_NEIGHBOR_MAX";
  v44[1] = v12;
  v44[2] = 0;
  v13 = (uint64_t *)sub_1B17F0814(a1, (uint64_t)a1, (uint64_t)v44);
  v14 = (CFX::RG::Resource *)v9[49];
  v13[49] = (uint64_t)v14;
  CFX::RG::Pass::readFrom(v13, v14);
  v13[50] = (uint64_t)v11;
  CFX::RG::Pass::writeTo(v13, v11);
  v15 = *a2;
  v29 = "MOTION_BLUR_NEIGHBOR_MAX";
  v30 = v15;
  LOBYTE(v31) = 1;
  v16 = (uint64_t *)sub_1B17F0814(a1, (uint64_t)a1, (uint64_t)&v29);
  v16[49] = (uint64_t)v11;
  CFX::RG::Pass::readFrom(v16, v11);
  v43[6] = v52;
  v43[7] = v53;
  v43[8] = v54;
  v43[9] = v55;
  v43[2] = v48;
  v43[3] = v49;
  v43[4] = v50;
  v43[5] = v51;
  v43[0] = v46;
  v43[1] = v47;
  v17 = sub_1B17A34D0(a1, (uint64_t)"MB-TileMaxN-XY", v43);
  v16[50] = (uint64_t)v17;
  CFX::RG::Pass::writeTo(v16, v17);
  v18 = *a2;
  v29 = "MOTION_BLUR_FINAL_BLUR";
  v30 = v18;
  LOWORD(v31) = 0;
  v19 = (__int128 *)CFX::RG::Resource::constTextureDesc(v7);
  v20 = *v19;
  v33 = v19[1];
  v32 = v20;
  v21 = v19[2];
  v22 = v19[3];
  v23 = v19[4];
  v37 = v19[5];
  v36 = v23;
  v35 = v22;
  v34 = v21;
  v24 = v19[6];
  v25 = v19[7];
  v26 = v19[8];
  v41 = v19[9];
  v40 = v26;
  v39 = v25;
  v38 = v24;
  v42 = a2[3];
  v27 = (uint64_t *)sub_1B17F0868(a1, a1, (uint64_t)&v29);
  v27[49] = (uint64_t)v7;
  CFX::RG::Pass::readFrom(v27, v7);
  v27[50] = (uint64_t)v5;
  CFX::RG::Pass::readFrom(v27, v5);
  v27[51] = (uint64_t)v17;
  CFX::RG::Pass::readFrom(v27, v17);
  return v27;
}

uint64_t sub_1B17F07C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17F0BAC(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B17F0814(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[2];

  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  sub_1B17F0C08(v8[0], v5, v8, a2, a3);
  v8[0] = v6;
  sub_1B179C734(a1 + 18, v8);
  return v8[0];
}

uint64_t sub_1B17F0868(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B17F0C54(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B17F08C0(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17F08E8(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B17F0910(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B17F0934(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

_QWORD *sub_1B17F09FC(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CECB0;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  return a1;
}

void sub_1B17F0A40(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CECB0;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B17F0A94(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CF060;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  return a1;
}

void sub_1B17F0AD8(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CF060;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B17F0B2C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CE9F0;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B17F0B64(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CE9F0;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B17F0BAC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x198u, 8u);
  return sub_1B17F0090(v8, *a3, a3[1], a4, a5);
}

void sub_1B17F0C08(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a1;
  v9[1] = a2;
  v7 = sub_1B179C1C0(v9, 0x198u, 8u);
  sub_1B17EFD50(v7, *a3, a3[1], v8, a5);
}

uint64_t sub_1B17F0C54(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A8u, 8u);
  return sub_1B17EF7A4(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B17F0CB0()
{
  if (qword_1ED4CEAB8 != -1)
    dispatch_once(&qword_1ED4CEAB8, &unk_1E63D0A70);
  return qword_1ED4CEAC0;
}

double sub_1B17F0CF0()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  if (!qword_1ED4CEAC0)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEAC0);
    qword_1ED4CEAC0 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C326C(CFSTR("speed"), 0x54u, 1, 0, 0, 0, v2, v3);
    sub_1B19C326C(CFSTR("blendFactor"), 0x50u, 1, 0, 0, 0, v4, v5);
    sub_1B19C3258();
    *(_QWORD *)&result = 0x1B17F16CCLL;
    xmmword_1ED4BDA78 = xmmword_1E63D2DE8;
  }
  return result;
}

uint64_t sub_1B17F0DA4(const void *a1)
{
  uint64_t v2;
  const void *v3;
  CFTypeRef v4;

  if (qword_1ED4CEAB8 != -1)
    dispatch_once(&qword_1ED4CEAB8, &unk_1E63D0A70);
  v2 = sub_1B179CB90(qword_1ED4CEAC0, 0x50uLL);
  if (v2)
  {
    *(_QWORD *)(v2 + 72) = CFArrayCreateMutable(0, 1, MEMORY[0x1E0C9B378]);
    v3 = *(const void **)(v2 + 64);
    if (v3 != a1)
    {
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(v2 + 64) = 0;
      }
      if (a1)
        v4 = CFRetain(a1);
      else
        v4 = 0;
      *(_QWORD *)(v2 + 64) = v4;
    }
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v2 + 80) = _D0;
    *(_BYTE *)(v2 + 88) = 0;
  }
  return v2;
}

CFTypeRef sub_1B17F0E58(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  result = *(CFTypeRef *)(a1 + 64);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

uint64_t sub_1B17F0ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  return *(_QWORD *)(a1 + 64);
}

void sub_1B17F0F18(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v10;
  CFIndex FirstIndexOfValue;
  CFIndex v12;
  CFRange v13;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
LABEL_3:
  v10 = *(const __CFArray **)(a1 + 72);
  v13.length = CFArrayGetCount(v10);
  v13.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v10, v13, a2);
  if (FirstIndexOfValue != -1)
  {
    v12 = FirstIndexOfValue;
    sub_1B1807C4C((uint64_t)a2, 0);
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 72), v12);
  }
}

double sub_1B17F0FE4(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 72), value);
  sub_1B1807C4C((uint64_t)value, a1);
  v16 = sub_1B1807C44((uint64_t)value);
  if (!v16)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"animationManager");
  if (!*(_BYTE *)(a1 + 88))
    sub_1B17F35AC(v16, (uint64_t)value, v10, v11, v12, v13, v14, v15);
  result = *(double *)(a1 + 80);
  *((double *)value + 6) = result;
  return result;
}

void sub_1B17F1094(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFIndex Count;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animationPlayer");
  if (*(float *)(a1 + 84) != a2)
  {
    *(float *)(a1 + 84) = a2;
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
    if (Count >= 1)
    {
      v12 = Count;
      for (i = 0; i != v12; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
        sub_1B1808758((uint64_t)ValueAtIndex, v15, v16, v17, v18, v19, v20, v21, a2);
      }
    }
  }
}

float sub_1B17F1134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  return *(float *)(a1 + 84);
}

void sub_1B17F117C(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFIndex Count;
  CFIndex v12;
  CFIndex i;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animationPlayer");
  if (*(float *)(a1 + 80) != a2)
  {
    *(float *)(a1 + 80) = a2;
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
    if (Count >= 1)
    {
      v12 = Count;
      for (i = 0; i != v12; ++i)
        *((float *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i) + 12) = a2;
    }
  }
}

float sub_1B17F1218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  return *(float *)(a1 + 80);
}

void sub_1B17F1260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  if (*(unsigned __int8 *)(a1 + 88) != (_DWORD)a2)
  {
    *(_BYTE *)(a1 + 88) = a2;
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
    if (Count >= 1)
    {
      v11 = Count;
      for (i = 0; i != v11; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
        v14 = sub_1B1807C44((uint64_t)ValueAtIndex);
        if (v14)
        {
          v15 = v14;
          sub_1B197A8F4();
          sub_1B17F3FE0(v15, (uint64_t)ValueAtIndex, a2, 0, v16, v17, v18, v19, v20);
        }
      }
    }
  }
}

uint64_t sub_1B17F1320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  return *(unsigned __int8 *)(a1 + 88);
}

CFIndex sub_1B17F1368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex result;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  *(_BYTE *)(a1 + 88) = 0;
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (result >= 1)
  {
    v10 = result;
    for (i = 0; i != v10; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      result = sub_1B1807C44((uint64_t)ValueAtIndex);
      if (result)
        result = sub_1B17F35AC(result, (uint64_t)ValueAtIndex, v13, v14, v15, v16, v17, v18);
    }
  }
  return result;
}

CFIndex sub_1B17F13FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex result;
  CFIndex v10;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  *(_BYTE *)(a1 + 88) = 1;
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (result >= 1)
  {
    v10 = result;
    for (i = 0; i != v10; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      result = sub_1B1807C44((uint64_t)ValueAtIndex);
      if (result)
        result = sub_1B17F3EB4(result, (uint64_t)ValueAtIndex, v13, v14, v15, v16, v17, v18, 0.0);
    }
  }
  return result;
}

CFIndex sub_1B17F1498(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFIndex result;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animationPlayer");
  *(_BYTE *)(a1 + 88) = 1;
  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (result >= 1)
  {
    v12 = result;
    for (i = 0; i != v12; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      result = sub_1B1807C44((uint64_t)ValueAtIndex);
      if (result)
        result = sub_1B17F3EB4(result, (uint64_t)ValueAtIndex, v15, v16, v17, v18, v19, v20, a2);
    }
  }
  return result;
}

void sub_1B17F1540(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  *(_BYTE *)(a1 + 89) = a2;
}

uint64_t sub_1B17F158C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationPlayer");
  return *(unsigned __int8 *)(a1 + 89);
}

void sub_1B17F15D8(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v6;
  const void *v7;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (Count >= 1)
  {
    v3 = Count;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      sub_1B1807C4C((uint64_t)ValueAtIndex, 0);
    }
  }
  v6 = *(const void **)(a1 + 64);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 72) = 0;
  }
}

CFStringRef sub_1B17F1654(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAnimationPlayer %p>"), a1);
}

CFStringRef sub_1B17F1690(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAnimationPlayer %p>"), a1);
}

void sub_1B17F16CC(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 + 84 == a2)
  {
    sub_1B17F1094(a1, *a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else if (a1 + 80 == a2)
  {
    sub_1B17F117C(a1, *a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B17F16F8()
{
  if (!qword_1EEF656D0)
    qword_1EEF656D0 = sub_1B179CB60(&qword_1EEF656D0);
}

uint64_t sub_1B17F1738()
{
  uint64_t v0;

  if (qword_1EEF656D8 != -1)
    dispatch_once(&qword_1EEF656D8, &unk_1E63D0A90);
  v0 = sub_1B179CB90(qword_1EEF656D0, 0xA0uLL);
  if (v0)
  {
    *(_QWORD *)(v0 + 24) = sub_1B19D4D18(256, 64);
    *(_QWORD *)(v0 + 32) = CFDictionaryCreateMutable(0, 0, 0, 0);
    *(_QWORD *)(v0 + 48) = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(v0 + 56) = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    *(_QWORD *)(v0 + 80) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(v0 + 112) = sub_1B19D19C8(40, 64);
    *(_DWORD *)(v0 + 64) = 0;
  }
  return v0;
}

uint64_t sub_1B17F181C(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  CFTypeID v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_17:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
    if (a3)
      goto LABEL_4;
    goto LABEL_18;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  if (!a2)
    goto LABEL_17;
LABEL_3:
  if (a3)
    goto LABEL_4;
LABEL_18:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"target");
LABEL_4:
  v11 = sub_1B1807A58(a2, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = sub_1B185DD34((CFTypeRef)v11, (uint64_t)a3, v12, v13, v14, v15, v16, v17);
  if ((_DWORD)v24)
  {
    sub_1B180882C(a2, a3);
    if (sub_1B185DA14((_BYTE *)v11))
      v25 = 4096;
    else
      v25 = 0;
    *(_DWORD *)(a2 + 121) = *(_DWORD *)(a2 + 121) & 0xFFFFEFFF | v25;
    if ((*(_BYTE *)(v11 + 84) & 4) != 0 && *(float *)(v11 + 76) > 1.0)
    {
      *(_QWORD *)(a2 + 112) = malloc_type_calloc(0x20uLL, 1uLL, 0x66A809F2uLL);
      v33 = sub_1B19C4770((uint64_t)a3, v26, v27, v28, v29, v30, v31, v32);
      *(_QWORD *)(*(_QWORD *)(a2 + 112) + 24) = sub_1B191E290(v33, 1, v34, v35, v36, v37, v38, v39);
      v46 = sub_1B191E290(v33, 1, v40, v41, v42, v43, v44, v45);
      *(_QWORD *)(*(_QWORD *)(a2 + 112) + 16) = v46;
      v54 = (void *)sub_1B191E41C(v46, v47, v48, v49, v50, v51, v52, v53);
      sub_1B19C465C((uint64_t)a3, v54, v55, v56, v57, v58, v59, v60);
      sub_1B185CFB8(v11);
    }
    v61 = CFGetTypeID((CFTypeRef)a2);
    if (v61 == sub_1B1808DA8())
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _CFXAnimationManagerAddAnimationNode - cluster not expected"), v63, v64, v65, v66, v67, v68, (uint64_t)"CFGetTypeID(animationNode) != CFXAnimationClusterNodeGetTypeID()");
    v69 = (void *)sub_1B19C4614((uint64_t)a3, v62, v63, v64, v65, v66, v67, v68);
    sub_1B17F19FC(a1, (_QWORD *)a2, v69, a3, v70, v71, v72, v73);
  }
  else
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: fail to setup the animation - won't be added to the animation stack"), v18, v19, v20, v21, v22, v23, v75);
  }
  return v24;
}

void sub_1B17F19FC(uint64_t a1, _QWORD *a2, void *key, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CFTypeID v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (a2)
      goto LABEL_3;
LABEL_14:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"animationNode");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_14;
LABEL_3:
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
  if (Value
    && (v19 = (uint64_t)Value - 1,
        (v20 = sub_1B19D4E3C(*(_QWORD *)(a1 + 24), (uint64_t)Value - 1, v13, v14, v15, v16, v17, v18)) != 0))
  {
    v28 = (_QWORD *)v20;
  }
  else
  {
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), key))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationManagerNewStackWithKey key already exist"), v30, v31, v32, v33, v34, v35, (uint64_t)"CFDictionaryContainsKey(manager->_targetAddressToStackIndex, (void*)key) == false");
    v19 = sub_1B19D4DAC(*(_QWORD *)(a1 + 24), v29, v30, v31, v32, v33, v34, v35);
    v28 = sub_1B19D4FB0(*(_QWORD *)(a1 + 24), 0);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), key, (const void *)(v19 + 1));
    sub_1B1805BD0(v28, v36, v37, v38, v39, v40, v41, v42);
    v28[5] = key;
    sub_1B1805DC0((uint64_t)v28, a4, v43, v44, v45, v46, v47, v48);
    v49 = sub_1B1808DA8();
    v50 = CFGetTypeID(a2);
    *((_BYTE *)v28 + 48) = v49 == v50;
    if (v49 != v50)
    {
      v51 = sub_1B1805E68((uint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
      v59 = v51;
      if (*(_BYTE *)(v51 + 37))
      {
        *((_BYTE *)v28 + 128) = 1;
        if (!*(_BYTE *)(a2[3] + 34))
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unexpected semantic"), v53, v54, v55, v56, v57, v58, (uint64_t)"animationNode->_target->_semantic != kCFXTypeSemanticNone");
        *(_WORD *)(v59 + 32) = 10;
        *(_BYTE *)(v59 + 36) = sub_1B179E250(10, v52, v53, v54, v55, v56, v57, v58);
        *(_WORD *)(v59 + 34) = 8;
        v60 = 10;
        v61 = 8;
      }
      else
      {
        *((_BYTE *)v28 + 128) = 0;
        v62 = sub_1B19C4770(v51, v52, v53, v54, v55, v56, v57, v58);
        v61 = sub_1B19C46E0(v59, v63, v64, v65, v66, v67, v68, v69);
        v60 = v62;
      }
      v28[31] = sub_1B17FFEC0(v60, v61, 0, 0);
      v77 = sub_1B19C4770(v59, v70, v71, v72, v73, v74, v75, v76);
      *((_BYTE *)v28 + 242) = sub_1B179E250(v77, v78, v79, v80, v81, v82, v83, v84);
      v91 = *(_QWORD *)(a1 + 16);
      if (!v91)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v85, v86, v87, v88, v89, v90, (uint64_t)"modelValueStorage");
      v28[4] = sub_1B19C4990(v91, (const void *)v59, v85, v86, v87, v88, v89, v90);
    }
  }
  ++*(_DWORD *)(a1 + 160);
  v92 = sub_1B1807A58((uint64_t)a2, v21, v22, v23, v24, v25, v26, v27);
  if (sub_1B185DC40(v92, v93, v94, v95, v96, v97, v98, v99))
    ++*(_DWORD *)(a1 + 168);
  a2[19] = v19;
  a2[20] = key;
  sub_1B1805EB0((uint64_t)v28, a2, a1, v100, v101, v102, v103, v104);
}

void sub_1B17F1C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  CFIndex v10;
  const __CFArray *Copy;
  CFIndex v12;
  const __CFDictionary *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  int v31;
  void (*v32)(const __CFDictionary *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(const __CFDictionary *, _QWORD, uint64_t, _QWORD);
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  if (*(_BYTE *)(a1 + 90))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _CFXAnimationManagerAppendCallback triggered while animation manager is muted"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager->_mute == false");
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
  if (Count >= 1)
  {
    v10 = Count;
    Copy = CFArrayCreateCopy(0, *(CFArrayRef *)(a1 + 80));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 80));
    v12 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Copy, v12);
      v21 = sub_1B1807A58((uint64_t)ValueAtIndex, v14, v15, v16, v17, v18, v19, v20);
      v29 = (_QWORD *)v21;
      v30 = *(_DWORD *)((char *)ValueAtIndex + 121);
      *(_DWORD *)((char *)ValueAtIndex + 121) = v30 & 0xFFFE1FFF;
      if ((v30 & 0x22000) == 0x2000)
      {
        *(_DWORD *)((char *)ValueAtIndex + 121) = v30 & 0xFFFC1FFF | 0x20000;
        (*(void (**)(const __CFDictionary *))(v21 + 144))(ValueAtIndex);
      }
      if ((v30 & 0x8000) != 0)
      {
        v31 = *(_DWORD *)((char *)ValueAtIndex + 121);
        if ((v31 & 0x80000) == 0)
        {
          *(_DWORD *)((char *)ValueAtIndex + 121) = v31 | 0x80000;
          v32 = (void (*)(const __CFDictionary *))*((_QWORD *)ValueAtIndex + 26);
          if (v32)
            v32(ValueAtIndex);
          if (sub_1B185D9C8((uint64_t)v29, v22, v23, v24, v25, v26, v27, v28) && !v29[19])
          {
            if (!a1)
              sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"manager");
            v33 = *(_QWORD *)(a1 + 16);
            if (v33)
            {
              v34 = *((_QWORD *)ValueAtIndex + 19);
              if (v34 != -1)
              {
                v35 = sub_1B19D4E3C(*(_QWORD *)(a1 + 24), v34, v23, v24, v25, v26, v27, v28);
                sub_1B19C4B08(v33, *(_QWORD *)(v35 + 32), v36, v37, v38, v39, v40, v41);
              }
            }
          }
        }
      }
      if ((v30 & 0x4000) == 0)
        goto LABEL_32;
      v42 = *(_DWORD *)((char *)ValueAtIndex + 121);
      if ((v42 & 0x40000) != 0)
        goto LABEL_32;
      *(_DWORD *)((char *)ValueAtIndex + 121) = v42 | 0x40000;
      CFRetain(v29);
      v50 = (uint64_t (*)(const __CFDictionary *, _QWORD, uint64_t, _QWORD))v29[19];
      if (v50 && (v50(ValueAtIndex, (v42 >> 10) & 1, a1, *((_QWORD *)ValueAtIndex + 17)) & 1) != 0
        || *((double *)ValueAtIndex + 11) == 0.0
        && !sub_1B18086F4((uint64_t)ValueAtIndex, v43, v44, v45, v46, v47, v48, v49))
      {
        goto LABEL_31;
      }
      v51 = (void *)sub_1B1807AA0((uint64_t)ValueAtIndex, v43, v44, v45, v46, v47, v48, v49);
      if ((sub_1B185DC40((uint64_t)v29, v52, v53, v54, v55, v56, v57, v58) & 1) == 0
        && v51
        && sub_1B17F1F38(a1, v51, *((const void **)ValueAtIndex + 17), v59, v60, v61, v62, v63) == ValueAtIndex)
      {
        break;
      }
      sub_1B17F200C(a1, (char *)ValueAtIndex, 8, v59, v60, v61, v62, v63);
      CFRelease(v29);
LABEL_35:
      if (v10 == ++v12)
      {
        CFRelease(Copy);
        return;
      }
    }
    sub_1B17F3940(a1, v51, *((void **)ValueAtIndex + 17), 0, v60, v61, v62, v63);
LABEL_31:
    CFRelease(v29);
LABEL_32:
    if ((v30 & 0x10000) != 0)
    {
      v64 = *(_DWORD *)((char *)ValueAtIndex + 121);
      if ((v64 & 0x100000) == 0)
      {
        *(_DWORD *)((char *)ValueAtIndex + 121) = v64 | 0x100000;
        sub_1B17F20E0(a1, ValueAtIndex, v23, v24, v25, v26, v27, v28);
      }
    }
    goto LABEL_35;
  }
}

uint64_t sub_1B17F1EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  return *(_QWORD *)(a1 + 16);
}

const __CFDictionary *sub_1B17F1F38(uint64_t a1, void *key, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *result;

  if (a1)
  {
    if (key)
      goto LABEL_3;
LABEL_7:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"rootObject");
    if (a3)
      goto LABEL_4;
    goto LABEL_8;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  if (!key)
    goto LABEL_7;
LABEL_3:
  if (a3)
    goto LABEL_4;
LABEL_8:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"key");
LABEL_4:
  result = (const __CFDictionary *)sub_1B17F30D4(a1, key, 0, a4, a5, a6, a7, a8);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, a3);
  return result;
}

void sub_1B17F2004(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B17F3940(a1, a2, a3, 0, a5, a6, a7, a8);
}

void sub_1B17F200C(uint64_t a1, char *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v11;

  v8 = a3;
  if (a1)
  {
    if (value)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (value)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
LABEL_3:
  if (*(_BYTE *)(a1 + 90))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _CFXAnimationManagerAppendCallback triggered while animation manager is muted"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager->_mute == false");
  v11 = *(_DWORD *)(value + 121);
  *(_DWORD *)(value + 121) = v11 | ((v8 & 0xF) << 13);
  if ((v11 & 0x1E000) == 0)
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), value);
}

void sub_1B17F20E0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const void *Value;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  __int128 *v94;
  __int128 *v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t j;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
LABEL_3:
  v10 = a2[19];
  if (v10 != -1)
  {
    v11 = sub_1B19D4E3C(*(_QWORD *)(a1 + 24), v10, a3, a4, a5, a6, a7, a8);
    v19 = sub_1B1807A58((uint64_t)a2, v12, v13, v14, v15, v16, v17, v18);
    --*(_DWORD *)(a1 + 160);
    if (sub_1B185DC40(v19, v20, v21, v22, v23, v24, v25, v26))
    {
      v33 = *(_DWORD *)(a1 + 168);
      if (v33)
        *(_DWORD *)(a1 + 168) = v33 - 1;
      else
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: implicit animation count overflow"), v27, v28, v29, v30, v31, v32, v119);
    }
    sub_1B1806304(v11, a2, v27, v28, v29, v30, v31, v32);
    if (*(_BYTE *)(v11 + 48))
      sub_1B1805C20(v11, (uint64_t)a2, *(_QWORD *)(a1 + 16), (*(_WORD *)(v19 + 84) & 0x10) == 0, v37, v38, v39, v40);
    if (sub_1B18063C8(v11, v34, v35, v36, v37, v38, v39, v40))
    {
      v41 = (const void *)a2[20];
      v42 = *(_QWORD *)(a1 + 16);
      if (v42 && !*(_BYTE *)(v11 + 48))
      {
        sub_1B19C4CB8(*(_QWORD *)(a1 + 16), *(_QWORD *)(v11 + 32), a3, a4, a5, a6, a7, a8);
        sub_1B19C4D8C(v42, *(_QWORD *)(v11 + 32), v43, v44, v45, v46, v47, v48);
      }
      if (*(_BYTE *)(v11 + 241))
      {
        v49 = *(_DWORD *)(a1 + 164);
        *(_DWORD *)(a1 + 164) = v49 - 1;
        if (v49 <= 0)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationManagerUpdateConstantCount"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager->_constantStackCount >= 0");
      }
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 32), v41) != 1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationManagerNewStackWithKey key doesn't exist"), v50, v51, v52, v53, v54, v55, (uint64_t)"CFDictionaryContainsKey(manager->_targetAddressToStackIndex, (void*)key) == true");
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v41);
      if (!Value)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v56, v57, v58, v59, v60, v61, (uint64_t)"removedIndex");
      v63 = (uint64_t)Value - 1;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), v41);
      if (!sub_1B19D4DAC(*(_QWORD *)(a1 + 24), v64, v65, v66, v67, v68, v69, v70))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v71, v72, v73, v74, v75, v76, (uint64_t)"lastIndex");
      v77 = sub_1B19D4E3C(*(_QWORD *)(a1 + 24), v63, v71, v72, v73, v74, v75, v76);
      sub_1B1805D10(v77, *(_QWORD *)(a1 + 16), v78, v79, v80, v81, v82, v83);
      v84 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(a1 + 40) = v84 + 1;
      if (v84 >= 511)
      {
        v91 = sub_1B19D4DAC(*(_QWORD *)(a1 + 24), v10, a3, a4, a5, a6, a7, a8);
        if (v91 < 1)
        {
          v92 = 0;
        }
        else
        {
          v92 = 0;
          for (i = 0; i != v91; ++i)
          {
            v94 = (__int128 *)sub_1B19D4E3C(*(_QWORD *)(a1 + 24), i, v85, v86, v87, v88, v89, v90);
            if (*(_BYTE *)v94)
            {
              if (v92)
              {
                v95 = v94;
                v96 = sub_1B19D4E3C(*(_QWORD *)(a1 + 24), i - v92, v85, v86, v87, v88, v89, v90);
                v97 = v95[3];
                v99 = *v95;
                v98 = v95[1];
                *(_OWORD *)(v96 + 32) = v95[2];
                *(_OWORD *)(v96 + 48) = v97;
                *(_OWORD *)v96 = v99;
                *(_OWORD *)(v96 + 16) = v98;
                v100 = v95[7];
                v102 = v95[4];
                v101 = v95[5];
                *(_OWORD *)(v96 + 96) = v95[6];
                *(_OWORD *)(v96 + 112) = v100;
                *(_OWORD *)(v96 + 64) = v102;
                *(_OWORD *)(v96 + 80) = v101;
                v103 = v95[11];
                v105 = v95[8];
                v104 = v95[9];
                *(_OWORD *)(v96 + 160) = v95[10];
                *(_OWORD *)(v96 + 176) = v103;
                *(_OWORD *)(v96 + 128) = v105;
                *(_OWORD *)(v96 + 144) = v104;
                v106 = v95[15];
                v108 = v95[12];
                v107 = v95[13];
                *(_OWORD *)(v96 + 224) = v95[14];
                *(_OWORD *)(v96 + 240) = v106;
                *(_OWORD *)(v96 + 192) = v108;
                *(_OWORD *)(v96 + 208) = v107;
                v95[14] = 0u;
                v95[15] = 0u;
                v95[12] = 0u;
                v95[13] = 0u;
                v95[10] = 0u;
                v95[11] = 0u;
                v95[8] = 0u;
                v95[9] = 0u;
                v95[6] = 0u;
                v95[7] = 0u;
                v95[4] = 0u;
                v95[5] = 0u;
                v95[2] = 0u;
                v95[3] = 0u;
                *v95 = 0u;
                v95[1] = 0u;
                *(_BYTE *)v95 = 0;
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), *(const void **)(v96 + 40), (const void *)(i - v92 + 1));
                for (j = *(_QWORD *)(v96 + 8); j; j = *(_QWORD *)(j + 176))
                  *(_QWORD *)(j + 152) = i - v92;
              }
            }
            else
            {
              ++v92;
            }
          }
        }
        v110 = v91 - v92;
        sub_1B19D4F5C(*(_DWORD **)(a1 + 24), v110);
        if (v110 <= 64)
          v111 = 64;
        else
          v111 = v110;
        sub_1B19D4F1C(*(_QWORD *)(a1 + 24), v111);
        *(_DWORD *)(a1 + 40) = 0;
      }
    }
  }
  if (!sub_1B1807DFC((uint64_t)a2, v10, a3, a4, a5, a6, a7, a8))
  {
    v112 = sub_1B1807C54((uint64_t)a2);
    if (v112)
      sub_1B17F0F18(v112, a2, v113, v114, v115, v116, v117, v118);
    sub_1B1807C3C((uint64_t)a2, 0);
    CFSetRemoveValue(*(CFMutableSetRef *)(a1 + 56), a2);
  }
}

uint64_t sub_1B17F2490(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  id *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  id *v21;
  id *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  char **v36;

  v8 = a4;
  v12 = (id *)sub_1B1807AA0(a3, a2, a3, a4, a5, a6, a7, a8);
  v20 = v12;
  if (v12)
  {
    if (sub_1B193EBA0(v12))
      v20 = sub_1B193E758(v20);
    else
      v20 = 0;
  }
  v21 = (id *)sub_1B1807A58(a3, v13, v14, v15, v16, v17, v18, v19);
  v22 = sub_1B193E758(v21);
  v30 = sub_1B19D1A44(a1[14], v23, v24, v25, v26, v27, v28, v29);
  result = objc_msgSend_userAnimation(v22, v31, v32, v33);
  *((_QWORD *)v30 + 1) = result;
  *((_QWORD *)v30 + 2) = v20;
  v30[24] = v8;
  *(_QWORD *)v30 = a2;
  *((_QWORD *)v30 + 4) = 0;
  v35 = a1[13];
  if (v35)
    v36 = (char **)(v35 + 32);
  else
    v36 = (char **)(a1 + 12);
  *v36 = v30;
  a1[13] = v30;
  return result;
}

void sub_1B17F2548(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animationManager");
  *(double *)(a1 + 136) = a2;
}

double sub_1B17F259C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  return *(double *)(a1 + 144);
}

void sub_1B17F25E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  v10 = *(_DWORD *)(a1 + 164) + a2;
  *(_DWORD *)(a1 + 164) = v10;
  if (v10 < 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationManagerUpdateConstantCount"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager->_constantStackCount >= 0");
}

void sub_1B17F2658(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a5, a6, a7, a8, a9, a10, (uint64_t)"manager");
  *(_BYTE *)(a1 + 88) = 1;
  *(double *)(a1 + 136) = a3;
  *(double *)(a1 + 144) = a2;
  v13 = *(_QWORD *)(a1 + 24);
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = sub_1B17F275C;
  v30[3] = &unk_1E63D6610;
  v30[4] = a1;
  sub_1B19D5054(v13, (uint64_t)v30, a5, a6, a7, a8, a9, a10);
  CFSetApplyFunction(*(CFSetRef *)(a1 + 56), (CFSetApplierFunction)sub_1B17F2EA0, (void *)a1);
  *(_BYTE *)(a1 + 88) = 0;
  v21 = *(_QWORD **)(a1 + 96);
  if (v21)
  {
    do
    {
      v22 = (_QWORD *)v21[4];
      (*(void (**)(void))(*v21 + 16))();
      v21[4] = 0;
      sub_1B19D1BD4(*(_QWORD *)(a1 + 112), (unint64_t)v21, v23, v24, v25, v26, v27, v28, v29);
      *(_QWORD *)(a1 + 96) = v22;
      v21 = v22;
    }
    while (v22);
  }
  *(_QWORD *)(a1 + 104) = 0;
  sub_1B17F1C60(a1, v14, v15, v16, v17, v18, v19, v20);
}

void sub_1B17F275C(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3->n128_u8[0])
    sub_1B17F2774(*(_QWORD *)(a1 + 32), a3, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void sub_1B17F2774(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 *v77;
  __n128 *v78;
  BOOL v79;
  __n128 v81;
  __n128 v82;
  __n128 v83;
  __n128 v84;
  int v85;
  uint64_t v86;
  __n128 *v87;
  char v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  __n128 v93;
  __n128 v94;
  __n128 v95;
  __n128 v96;
  __n128 *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __n128 *v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  _BOOL4 v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  __n128 *v145;
  float v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;

  v8 = a2;
  v9 = a1;
  v156 = *MEMORY[0x1E0C80C00];
  if (a2[3].n128_u8[0])
  {
    v10 = a2->n128_i64[1];
    if (!v10)
    {
      v12 = 1;
LABEL_36:
      if (v8[15].n128_u8[1] != v12)
      {
        v8[15].n128_u8[1] = v12;
        if (v12)
          v85 = 1;
        else
          v85 = -1;
        sub_1B17F25E4(v9, v85, a3, a4, a5, a6, a7, a8);
      }
      return;
    }
    v11 = 0;
    v12 = 1;
    while (1)
    {
      if ((*(_WORD *)(v10 + 121) & 0x804) != 0)
      {
        v13 = 1;
      }
      else
      {
        v14 = *(_QWORD *)(v10 + 16);
        v13 = !sub_1B17F4A34(v9, v10, a3, a4, a5, a6, a7, a8);
        if ((*(_BYTE *)(v10 + 121) & 0x20) != 0)
        {
          v16 = sub_1B180851C(v10, v15, a3, a4, a5, a6, a7, a8, *(float *)(v10 + 60));
          *(float *)(v10 + 56) = v16;
          if (v16 != 0.0)
          {
            v28 = *(_QWORD *)(v14 + 168);
            v147 = *(float *)(v10 + 72) * *(float *)(v14 + 72);
            v144 = *(unsigned int *)(v28 + 20);
            v29 = sub_1B17F4DC4(*(float **)(v28 + 56), *(_DWORD *)(v28 + 16), &v147, 0, a5, a6, a7, a8);
            if (v29 + 1 < *(_DWORD *)(v28 + 16) - 1)
              v30 = v29 + 1;
            else
              v30 = *(_DWORD *)(v28 + 16) - 1;
            v31 = *(_QWORD *)(v28 + 56);
            v32 = *(float *)(v31 + 4 * v29);
            v33 = *(float *)(v31 + 4 * v30) - v32;
            v141 = v13;
            v142 = v12;
            if (v33 == 0.0)
              v34 = 0.0;
            else
              v34 = (float)(v147 - v32) / v33;
            v147 = v34;
            v35 = *(_QWORD *)(v28 + 64);
            v36 = *(_DWORD *)(v28 + 24);
            v154 = 0u;
            v155 = 0u;
            v152 = 0u;
            v153 = 0u;
            v37 = v144;
            if ((_DWORD)v144)
            {
              v38 = 0;
              v39 = v35 + v36 * v30;
              v40 = v35 + v36 * v29;
              v143 = v28;
              do
              {
                v41 = *(int *)(*(_QWORD *)(v10 + 224) + 4 * v38);
                v42 = *(unsigned __int8 *)(*(_QWORD *)(v28 + 40) + v38);
                if ((_DWORD)v41 != -1)
                {
                  v49 = sub_1B19D4E3C(v8[3].n128_i64[1], v41, a3, a4, a5, a6, a7, a8);
                  if (!*(_QWORD *)v49)
                    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v43, v44, v45, v46, v47, v48, (uint64_t)"stackItem->_modelValueItem");
                  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, __int128 *, double))(*(_QWORD *)(v28 + 48) + 8 * v38))(v40, v39, 0, 0, 0, 0, &v152, v147);
                  if (*(float *)(v10 + 56) < 1.0)
                  {
                    v150 = 0u;
                    v151 = 0u;
                    v148 = 0u;
                    v149 = 0u;
                    v56 = *(_QWORD *)v49;
                    sub_1B19C5140(*(_QWORD *)(v9 + 16), *(_QWORD *)v49, v50, v51, v52, v53, v54, v55);
                    v57 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(v56 + 136);
                    v65 = v9;
                    v66 = sub_1B19C45CC(*(_QWORD *)(v56 + 24), v58, v59, v60, v61, v62, v63, v64);
                    v67 = *(_QWORD *)(v56 + 24);
                    v8 = a2;
                    v75 = sub_1B19C4614(v67, v68, v69, v70, v71, v72, v73, v74);
                    v76 = v66;
                    v9 = v65;
                    v37 = v144;
                    v57(v76, v75, &v148, v42, *(char *)(v49 + 8), *(unsigned __int8 *)(v49 + 9));
                    v28 = v143;
                    (*(void (**)(__int128 *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD, __int128 *, double))(v49 + 16))(&v148, &v152, 0, 0, 0, 0, &v152, *(float *)(v10 + 56));
                  }
                  sub_1B19C5254(*(_QWORD *)(v9 + 16), *(uint64_t **)v49, *(char *)(v49 + 8), *(unsigned __int8 *)(v49 + 9), (uint64_t)&v152, v42, v54, v55);
                }
                v39 += (v42 + 15) & 0xF0;
                v40 += (v42 + 15) & 0xF0;
                ++v38;
              }
              while (v37 != v38);
            }
            v11 = 1;
            v13 = v141;
            v12 = v142;
            goto LABEL_15;
          }
        }
      }
      if (!v11)
      {
        v17 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 168) + 20);
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = 4 * v17;
          do
          {
            v20 = *(int *)(*(_QWORD *)(v10 + 224) + v18);
            if ((_DWORD)v20 != -1)
            {
              v21 = (uint64_t *)sub_1B19D4E3C(v8[3].n128_i64[1], v20, a3, a4, a5, a6, a7, a8);
              sub_1B19C4CB8(*(_QWORD *)(v9 + 16), *v21, v22, v23, v24, v25, v26, v27);
            }
            v18 += 4;
          }
          while (v19 != v18);
        }
        v11 = 0;
      }
LABEL_15:
      v12 &= v13;
      v10 = *(_QWORD *)(v10 + 176);
      if (!v10)
        goto LABEL_36;
    }
  }
  a2[15].n128_u8[0] = 0;
  v77 = a2 + 4;
  v78 = (__n128 *)a2[2].n128_u64[0];
  v79 = a2[8].n128_u8[0] != 0;
  if (a2[8].n128_u8[0])
  {
    v81 = v78[3];
    a2[9] = v78[2];
    a2[10] = v81;
    v82 = v78[4];
    v83 = v78[5];
    v84 = v78[7];
    a2[13] = v78[6];
    a2[14] = v84;
    a2[11] = v82;
    a2[12] = v83;
  }
  else
  {
    memcpy(&a2[4], &v78[2], v78[8].n128_i16[1]);
  }
  v86 = v8->n128_i64[1];
  if (!v86)
  {
    LOBYTE(v89) = 1;
LABEL_80:
    sub_1B19C4CB8(*(_QWORD *)(a1 + 16), (uint64_t)v78, a3, a4, a5, a6, a7, a8);
    goto LABEL_81;
  }
  v87 = v8;
  v88 = 0;
  v145 = v87 + 9;
  v89 = 1;
  do
  {
    if ((*(_WORD *)(v86 + 121) & 0x804) == 0)
    {
      v89 &= !sub_1B17F4A34(a1, v86, a3, a4, a5, a6, a7, a8);
      if ((*(_BYTE *)(v86 + 121) & 0x20) != 0)
      {
        v92 = sub_1B180851C(v86, v90, a3, a4, a5, a6, a7, a8, *(float *)(v86 + 60));
        *(float *)(v86 + 56) = v92;
        if (v92 != 0.0)
        {
          v93.n128_u32[1] = 0;
          v93.n128_u64[1] = 0;
          v154 = 0u;
          v155 = 0u;
          v152 = 0u;
          v153 = 0u;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v93.n128_u32[0] = *(_DWORD *)(v86 + 56);
          if (v93.n128_f32[0] >= 1.0)
          {
            v97 = a2;
          }
          else
          {
            if (v79)
            {
              a2[4] = sub_1B1822148(v145, v91, a3, a4, a5, a6, a7, a8);
              a2[5] = v94;
              a2[6] = v95;
              a2[7] = v96;
            }
            v97 = a2;
            __memcpy_chk();
            v79 = 0;
          }
          if (v97[8].n128_u8[0]
            && ((*(_WORD *)(*(_QWORD *)(v86 + 16) + 84) & 2) != 0 || (*(_BYTE *)(v86 + 122) & 0x10) != 0))
          {
            sub_1B1822EC8((uint64_t)v145, v77, *(unsigned __int8 *)(*(_QWORD *)(v86 + 24) + 36), *(char *)(*(_QWORD *)(v86 + 24) + 34), *(unsigned __int8 *)(*(_QWORD *)(v86 + 24) + 35), a6, a7, a8, v140);
          }
          if (!a1)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
          if ((*(_BYTE *)(v86 + 121) & 0x20) != 0)
          {
            v99 = sub_1B1807A58(v86, v91, a3, a4, a5, a6, a7, a8);
            v106 = v99;
            v107 = *(_QWORD *)(v86 + 112);
            if (v107 && *(_DWORD *)v107)
            {
              sub_1B191E4F4(*(_QWORD *)(v107 + 24), v77, v100, v101, v102, v103, v104, v105);
              sub_1B191E41C(*(_QWORD *)(*(_QWORD *)(v86 + 112) + 24), v108, v109, v110, v111, v112, v113, v114);
              v98 = sub_1B185CFB8(v106);
              sub_1B191EA10(*(_QWORD *)(*(_QWORD *)(v86 + 112) + 8), *(_QWORD *)(*(_QWORD *)(v86 + 112) + 24), *(_QWORD *)(*(_QWORD *)(v86 + 112) + 24), v115, v116, v117, v118, v119, v140);
              sub_1B191E598(*(_QWORD *)(*(_QWORD *)(v86 + 112) + 24), v77, v120, v121, v122, v123, v124, v125);
            }
            else
            {
              v98 = sub_1B185CFB8(v99);
            }
          }
          else
          {
            v98 = 0;
          }
          v88 |= v98;
          if ((v88 & 1) != 0)
          {
            v126 = a2;
            if (a2[8].n128_u8[0])
            {
              a2[15].n128_u8[0] |= *(_BYTE *)(v86 + 120);
              sub_1B1823564(v145, (__int128 *)v77, *(unsigned __int8 *)(*(_QWORD *)(v86 + 24) + 36), *(char *)(*(_QWORD *)(v86 + 24) + 34), *(unsigned __int8 *)(*(_QWORD *)(v86 + 24) + 35), a6, a7, a8, v93, v140);
              if (*(float *)(v86 + 56) >= 1.0)
              {
                v79 = 1;
                goto LABEL_74;
              }
            }
            else
            {
              if (*(float *)(v86 + 56) >= 1.0)
                goto LABEL_74;
              v126 = a2;
              if (!v79)
                goto LABEL_71;
            }
            v126[4] = sub_1B1822148(v145, v91, a3, a4, a5, a6, a7, a8);
            v126[5] = v127;
            v126[6] = v128;
            v126[7] = v129;
LABEL_71:
            __memcpy_chk();
            ((void (*)(__int128 *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD, __n128 *, double))v126[15].n128_u64[1])(&v152, &v148, 0, 0, 0, 0, v77, *(float *)(v86 + 56));
            if (v126[8].n128_u8[0])
              sub_1B1823564(v145, (__int128 *)v77, *(unsigned __int8 *)(v126[1].n128_u64[1] + 36), *(char *)(v126[1].n128_u64[1] + 34), *(unsigned __int8 *)(v126[1].n128_u64[1] + 35), a6, a7, a8, v130, v140);
            v79 = 0;
          }
        }
      }
    }
LABEL_74:
    v86 = *(_QWORD *)(v86 + 176);
  }
  while (v86);
  v78 = (__n128 *)a2[2].n128_u64[0];
  if ((v88 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_80;
  }
  v131 = *(_QWORD *)(a1 + 16);
  v8 = a2;
  if (a2[8].n128_u8[0])
    sub_1B19C52E0(v131, (uint64_t *)a2[2].n128_u64[0], v145, a2[15].n128_i8[0], a5, a6, a7, a8);
  else
    sub_1B19C5254(v131, (uint64_t *)a2[2].n128_u64[0], 0, 0, (uint64_t)v77, a2[15].n128_u8[2], a7, a8);
LABEL_81:
  if (v8[15].n128_u8[1] != (v89 & 1))
  {
    v8[15].n128_u8[1] = v89 & 1;
    v138 = *(_DWORD *)(a1 + 164);
    v139 = (v89 & 1) != 0 ? v138 + 1 : v138 - 1;
    *(_DWORD *)(a1 + 164) = v139;
    if (v139 < 0)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationManagerUpdateConstantCount"), v132, v133, v134, v135, v136, v137, (uint64_t)"manager->_constantStackCount >= 0");
  }
}

uint64_t sub_1B17F2EA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_QWORD *)(result + 152) == -1)
    return sub_1B17F4A34(a2, result, a3, a4, a5, a6, a7, a8);
  return result;
}

void sub_1B17F2EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  const void *Value;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (a2)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"target");
    *(_BYTE *)(a1 + 88) = 1;
    v10 = (_BYTE *)(a1 + 88);
    *(_BYTE *)(a1 + 90) = 1;
    v11 = (_BYTE *)(a1 + 90);
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"target");
    goto LABEL_6;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  *(_BYTE *)(a1 + 88) = 1;
  v10 = (_BYTE *)(a1 + 88);
  *(_BYTE *)(a1 + 90) = 1;
  v11 = (_BYTE *)(a1 + 90);
LABEL_6:
  v18 = (const void *)sub_1B19C4614(a2, a2, a3, a4, a5, a6, a7, a8);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v18);
  if (Value)
  {
    v26 = (__n128 *)sub_1B19D4E3C(*(_QWORD *)(a1 + 24), (uint64_t)Value - 1, v20, v21, v22, v23, v24, v25);
    if (v26)
    {
      *(_QWORD *)(v26[2].n128_u64[0] + 152) = 0;
      sub_1B17F2774(a1, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  *v10 = 0;
  *v11 = 0;
}

BOOL sub_1B17F2FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationManager");
  v9 = *(_QWORD *)(a1 + 24);
  return !v9 || sub_1B19D4DAC(v9, a2, a3, a4, a5, a6, a7, a8) <= *(int *)(a1 + 40);
}

BOOL sub_1B17F3028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = a2;
  if (a1)
  {
    if ((_DWORD)a2)
    {
LABEL_3:
      v10 = *(_DWORD *)(a1 + 168) <= 0;
      return !v10;
    }
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationManager");
    if (v8)
      goto LABEL_3;
  }
  v11 = *(_QWORD *)(a1 + 24);
  if (v11)
    v12 = sub_1B19D4DAC(v11, a2, a3, a4, a5, a6, a7, a8) - *(int *)(a1 + 40);
  else
    v12 = 0;
  v13 = *(int *)(a1 + 164);
  if (v12 < v13)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationManagerNeedsRedraw - inconsistant constant count"), a3, a4, a5, a6, a7, a8, (uint64_t)"stackCount >= animationManager->_constantStackCount");
    v13 = *(int *)(a1 + 164);
  }
  v10 = v12 <= v13;
  return !v10;
}

const void *sub_1B17F30D4(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const void *Value;
  BOOL v12;

  v8 = a3;
  if (a1)
  {
    if (key)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (key)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"root");
LABEL_3:
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), key);
  if (Value)
    v12 = 1;
  else
    v12 = v8 == 0;
  if (!v12)
  {
    Value = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 48), key, Value);
    CFRelease(Value);
  }
  return Value;
}

void sub_1B17F31A8(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v12;
  const void *v13;
  CFTypeID v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __CFDictionary *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const void *v83;

  v12 = (const void *)sub_1B17F0ED0(a2, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v12)
  {
    v13 = v12;
    v14 = CFGetTypeID(v12);
    if (sub_1B18FF324() == v14)
    {
      if (a1)
      {
        if (a3)
          goto LABEL_5;
      }
      else
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v15, v16, v17, v18, v19, v20, (uint64_t)"manager");
        if (a3)
        {
LABEL_5:
          if (a4)
          {
LABEL_6:
            sub_1B17F3940(a1, a3, a4, 0, v17, v18, v19, v20);
            v25 = sub_1B1808A48(a1, v13, a3, a4, v21, v22, v23, v24);
            if (!v25)
              return;
            v32 = (_QWORD *)v25;
            sub_1B1807AE8(v25, (uint64_t)a3, v26, v27, v28, v29, v30, v31);
            sub_1B1807C3C((uint64_t)v32, a1);
            CFSetAddValue(*(CFMutableSetRef *)(a1 + 56), v32);
LABEL_14:
            v59 = (__CFDictionary *)sub_1B17F30D4(a1, a3, 1, v33, v34, v35, v36, v37);
            CFDictionarySetValue(v59, a4, v32);
            sub_1B197B7A0((uint64_t)v32);
            CFRelease(v32);
LABEL_15:
            sub_1B17F0FE4(a2, v32, v60, v61, v62, v63, v64, v65);
            if ((sub_1B17F1320(a2, v66, v67, v68, v69, v70, v71, v72) & 1) == 0)
              sub_1B17F35AC(a1, (uint64_t)v32, v73, v74, v75, v76, v77, v78);
            return;
          }
LABEL_22:
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v15, v16, v17, v18, v19, v20, (uint64_t)"key");
          goto LABEL_6;
        }
      }
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v15, v16, v17, v18, v19, v20, (uint64_t)"root");
      if (a4)
        goto LABEL_6;
      goto LABEL_22;
    }
    if (sub_1B190B104() == v14)
    {
      if (a1)
      {
        if (a3)
          goto LABEL_11;
      }
      else
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v38, v39, v40, v41, v42, v43, (uint64_t)"manager");
        if (a3)
        {
LABEL_11:
          if (a4)
          {
LABEL_12:
            sub_1B17F3940(a1, a3, a4, 0, v40, v41, v42, v43);
            v48 = sub_1B1808BF0(a1, v13, (uint64_t)a3, a4, v44, v45, v46, v47);
            if (!v48)
              return;
            v32 = (_QWORD *)v48;
            sub_1B1807AE8(v48, (uint64_t)a3, v49, v50, v51, v52, v53, v54);
            sub_1B1807C3C((uint64_t)v32, a1);
            sub_1B17F19FC(a1, v32, a3, 0, v55, v56, v57, v58);
            goto LABEL_14;
          }
LABEL_25:
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v38, v39, v40, v41, v42, v43, (uint64_t)"key");
          goto LABEL_12;
        }
      }
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v38, v39, v40, v41, v42, v43, (uint64_t)"root");
      if (a4)
        goto LABEL_12;
      goto LABEL_25;
    }
    v79 = sub_1B185CFC0((uint64_t)v13, a3, v38, v39, v40, v41, v42, v43);
    if (v79)
    {
      v83 = v79;
      v32 = sub_1B17F343C(a1, v13, v79, a3, a4, v80, v81, v82);
      CFRelease(v83);
      if (v32)
        goto LABEL_15;
    }
  }
}

const void *sub_1B17F343C(uint64_t a1, const void *a2, const void *a3, void *key, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __CFDictionary *v30;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)key, (uint64_t)a5, a6, a7, a8, (uint64_t)"manager");
    if (a2)
    {
LABEL_3:
      if (a3)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)key, (uint64_t)a5, a6, a7, a8, (uint64_t)"animation");
  if (a3)
  {
LABEL_4:
    if (key)
      goto LABEL_5;
LABEL_12:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)key, (uint64_t)a5, a6, a7, a8, (uint64_t)"root");
    if (a5)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_11:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)key, (uint64_t)a5, a6, a7, a8, (uint64_t)"target");
  if (!key)
    goto LABEL_12;
LABEL_5:
  if (a5)
    goto LABEL_6;
LABEL_13:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)key, (uint64_t)a5, a6, a7, a8, (uint64_t)"key");
LABEL_6:
  sub_1B17F3940(a1, key, a5, 0, (uint64_t)a5, a6, a7, a8);
  v17 = sub_1B1808CDC(a1, a2, a3, a5, v13, v14, v15, v16);
  v24 = (const void *)v17;
  if (v17)
  {
    sub_1B1807AE8(v17, (uint64_t)key, v18, v19, v20, v21, v22, v23);
    sub_1B1807C3C((uint64_t)v24, a1);
    v30 = (__CFDictionary *)sub_1B17F30D4(a1, key, 1, v25, v26, v27, v28, v29);
    CFDictionarySetValue(v30, a5, v24);
    sub_1B197B7A0((uint64_t)v24);
    CFRelease(v24);
  }
  return v24;
}

uint64_t sub_1B17F35AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  CFIndex i;
  const __CFArray *v76;

  if (a2)
  {
    if (a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (!a1)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
LABEL_4:
  v10 = *(_DWORD *)(a2 + 121);
  *(_DWORD *)(a2 + 121) = v10 & 0xFFFBFFFF;
  sub_1B18088D8(a2, 0, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B1807A58(a2, v11, v12, v13, v14, v15, v16, v17);
  if (sub_1B185DC40(v18, v19, v20, v21, v22, v23, v24, v25))
  {
    sub_1B197A8F4();
    v34 = v33;
    v35 = 0;
  }
  else
  {
    v36 = sub_1B1807C5C(a2);
    if (v36 && (sub_1B17F158C(v36, v26, v27, v28, v29, v30, v31, v32) & 1) != 0)
    {
      v35 = 0;
      v34 = 0.0;
    }
    else
    {
      if (!a1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v27, v28, v29, v30, v31, v32, (uint64_t)"manager");
      v34 = *(double *)(a1 + 144);
      v35 = 1;
    }
  }
  v44 = v34 + sub_1B18089AC(v18, v26, v27, v28, v29, v30, v31, v32);
  if ((v10 & 0x200000) == 0 || *(double *)(a2 + 128) == 0.0)
  {
    sub_1B1807B34(a2, v44, v37, v38, v39, v40, v41, v42, v43);
    if (v35)
      sub_1B1807B88(a2, v59, v53, v54, v55, v56, v57, v58);
  }
  else
  {
    v45 = sub_1B18089AC(a2, v37, v38, v39, v40, v41, v42, v43);
    sub_1B1807BD8(a2, v44 - v45, v46, v47, v48, v49, v50, v51, v52);
    *(_QWORD *)(a2 + 128) = 0;
  }
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 121) &= 0xFFFFFFF3;
  *(_DWORD *)(a2 + 72) = -1082130432;
  v60 = *(_QWORD *)(a2 + 152);
  if (v60 != -1)
  {
    v61 = sub_1B19D4E3C(*(_QWORD *)(a1 + 24), v60, v53, v54, v55, v56, v57, v58);
    sub_1B1806264(v61, 0, a1, v62, v63, v64, v65, v66);
  }
  result = (uint64_t)sub_1B1807EDC(a2, v60, v53, v54, v55, v56, v57, v58);
  if (result >= 1)
  {
    v74 = result;
    for (i = 0; i != v74; ++i)
    {
      v76 = sub_1B1807F38(a2, i, v68, v69, v70, v71, v72, v73);
      result = sub_1B17F35AC(a1, v76);
    }
  }
  return result;
}

const void *sub_1B17F377C(uint64_t a1, const void *a2, const void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B17F343C(a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
    return (const void *)sub_1B17F35AC(a1, (uint64_t)result, v10, v11, v12, v13, v14, v15);
  return result;
}

void sub_1B17F37B4(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  const __CFDictionary *Copy;
  _QWORD v13[7];

  if (a1)
  {
    if (key)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (key)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"rootObject");
LABEL_3:
  v10 = (const __CFDictionary *)sub_1B17F30D4(a1, key, 0, a4, a5, a6, a7, a8);
  if (v10)
  {
    v11 = v10;
    CFRetain(v10);
    Copy = CFDictionaryCreateCopy(0, v11);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1B17F38B4;
    v13[3] = &unk_1E63D6630;
    v13[4] = a1;
    v13[5] = key;
    v13[6] = v11;
    sub_1B17A04DC(Copy, (uint64_t)v13);
    CFRelease(Copy);
    CFRelease(v11);
  }
}

void sub_1B17F38B4(uint64_t a1, void *key)
{
  sub_1B17F38C8(*(_QWORD *)(a1 + 32), *(const void **)(a1 + 40), key, *(CFDictionaryRef *)(a1 + 48));
}

void sub_1B17F38C8(uint64_t a1, const void *a2, void *key, CFDictionaryRef theDict)
{
  const void *Value;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  Value = CFDictionaryGetValue(theDict, key);
  sub_1B17F4C3C(a1, (uint64_t)Value, v9, v10, v11, v12, v13, v14);
  CFDictionaryRemoveValue(theDict, key);
  if (!CFDictionaryGetCount(theDict))
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), a2);
}

void sub_1B17F3940(uint64_t a1, void *key, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const void *Value;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1)
  {
    if (key)
      goto LABEL_3;
LABEL_9:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"root");
    if (a3)
      goto LABEL_4;
    goto LABEL_10;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  if (!key)
    goto LABEL_9;
LABEL_3:
  if (a3)
    goto LABEL_4;
LABEL_10:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"key");
LABEL_4:
  v11 = (const __CFDictionary *)sub_1B17F30D4(a1, key, 0, a4, a5, a6, a7, a8);
  if (v11)
  {
    v12 = v11;
    CFRetain(v11);
    Value = CFDictionaryGetValue(v12, a3);
    if (Value)
    {
      v14 = Value;
      CFRetain(Value);
      sub_1B1807AE8((uint64_t)v14, 0, v15, v16, v17, v18, v19, v20);
      sub_1B17F38C8(a1, key, a3, v12);
      CFRelease(v14);
    }
    CFRelease(v12);
  }
}

void sub_1B17F3A60(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  _QWORD v14[6];

  if (a9 == 0.0)
  {
    sub_1B17F37B4(a1, key, a3, a4, a5, a6, a7, a8);
    return;
  }
  if (a1)
  {
    if (key)
      goto LABEL_5;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (key)
      goto LABEL_5;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"rootObject");
LABEL_5:
  v12 = (const __CFDictionary *)sub_1B17F30D4(a1, key, 0, a4, a5, a6, a7, a8);
  if (v12)
  {
    v13 = v12;
    CFRetain(v12);
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1B17F3B74;
    v14[3] = &unk_1E63D6650;
    v14[4] = a1;
    *(double *)&v14[5] = a9;
    sub_1B17A04DC(v13, (uint64_t)v14);
    CFRelease(v13);
  }
}

uint64_t sub_1B17F3B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  double v22;

  v10 = *(_QWORD *)(a1 + 32);
  if (sub_1B185DC40(*(_QWORD *)(a3 + 16), a2, a3, a4, a5, a6, a7, a8))
    v18 = 136;
  else
    v18 = 144;
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(v10 + v18);
  v19 = *(_QWORD *)(a1 + 32);
  result = sub_1B185DC40(*(_QWORD *)(a3 + 16), v11, v12, v13, v14, v15, v16, v17);
  if ((_DWORD)result)
    v21 = 136;
  else
    v21 = 144;
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(v19 + v21);
  v22 = *(double *)(a1 + 40);
  if (v22 < 0.0001)
    v22 = 0.0001;
  *(double *)(a3 + 104) = v22;
  return result;
}

void sub_1B17F3BFC(uint64_t a1, void *key, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  double *Value;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;

  if (a9 == 0.0)
  {
    sub_1B17F3940(a1, key, a3, 0, a5, a6, a7, a8);
    return;
  }
  if (a1)
  {
    if (key)
      goto LABEL_5;
LABEL_19:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"root");
    if (a3)
      goto LABEL_6;
    goto LABEL_20;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  if (!key)
    goto LABEL_19;
LABEL_5:
  if (a3)
    goto LABEL_6;
LABEL_20:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"key");
LABEL_6:
  v13 = (const __CFDictionary *)sub_1B17F30D4(a1, key, 0, a4, a5, a6, a7, a8);
  if (v13)
  {
    v14 = v13;
    CFRetain(v13);
    Value = (double *)CFDictionaryGetValue(v14, a3);
    if (Value)
    {
      v23 = Value;
      if (sub_1B185DC40(*((_QWORD *)Value + 2), v16, v17, v18, v19, v20, v21, v22))
        v31 = 136;
      else
        v31 = 144;
      v23[11] = *(double *)(a1 + v31);
      if (sub_1B185DC40(*((_QWORD *)v23 + 2), v24, v25, v26, v27, v28, v29, v30))
        v32 = 136;
      else
        v32 = 144;
      v33 = 0.0001;
      if (a9 >= 0.0001)
        v33 = a9;
      v23[12] = *(double *)(a1 + v32);
      v23[13] = v33;
    }
    CFRelease(v14);
  }
}

void sub_1B17F3D7C(uint64_t a1, void *key, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (key)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"root");
    goto LABEL_3;
  }
  if (!key)
    goto LABEL_5;
LABEL_3:
  sub_1B17F3940(a1, key, a3, 0, a5, a6, a7, a8);
}

const __CFDictionary *sub_1B17F3E08(uint64_t a1, void *key, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (key)
      goto LABEL_3;
LABEL_6:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"rootObject");
    if (a3)
      return sub_1B17F1F38(a1, key, a3, a4, a5, a6, a7, a8);
LABEL_7:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"key");
    return sub_1B17F1F38(a1, key, a3, a4, a5, a6, a7, a8);
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  if (!key)
    goto LABEL_6;
LABEL_3:
  if (!a3)
    goto LABEL_7;
  return sub_1B17F1F38(a1, key, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B17F3EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex i;
  const __CFArray *v23;

  if (a2)
  {
    if (a1)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a1)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
LABEL_3:
  v12 = *(_DWORD *)(a2 + 121);
  if (a9 == 0.0)
  {
    *(_DWORD *)(a2 + 121) = v12 & 0xFFFFFFDB | 4;
  }
  else
  {
    *(_DWORD *)(a2 + 121) = v12 | 8;
    if (sub_1B185DC40(*(_QWORD *)(a2 + 16), a2, a3, a4, a5, a6, a7, a8))
    {
      sub_1B197A8F4();
    }
    else
    {
      if (!a1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
      v13 = *(_QWORD *)(a1 + 144);
    }
    *(_QWORD *)(a2 + 96) = v13;
    *(double *)(a2 + 104) = a9;
  }
  *(_QWORD *)(a2 + 128) = 0;
  result = (uint64_t)sub_1B1807EDC(a2, a2, a3, a4, a5, a6, a7, a8);
  if (result >= 1)
  {
    v21 = result;
    for (i = 0; i != v21; ++i)
    {
      v23 = sub_1B1807F38(a2, i, v15, v16, v17, v18, v19, v20);
      result = sub_1B17F3EB4(a1, v23, a9);
    }
  }
  return result;
}

uint64_t sub_1B17F3FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CFIndex i;
  const __CFArray *v75;

  if (a2)
  {
    if (a1)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a1)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
LABEL_3:
  if ((_DWORD)a4)
  {
    result = sub_1B18089A0(a2);
    if ((_DWORD)result == (_DWORD)a3)
      return result;
    v15 = sub_1B180887C(a2);
    sub_1B180893C(a2, a3, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    result = sub_1B180888C(a2, a2, a3, a4, a5, a6, a7, a8);
    if ((_DWORD)result == (_DWORD)a3)
      return result;
    v15 = sub_1B180887C(a2);
    sub_1B18088D8(a2, a3, v22, v23, v24, v25, v26, v27);
  }
  if (sub_1B180887C(a2))
    v35 = 1;
  else
    v35 = (*(_DWORD *)(a2 + 121) >> 2) & 1;
  if (v35 != v15)
  {
    v36 = sub_1B1807A58(a2, v28, v29, v30, v31, v32, v33, v34);
    v44 = a9;
    if ((sub_1B185DC40(v36, v37, v38, v39, v40, v41, v42, v43) & 1) == 0)
      v44 = *(double *)(a1 + 144);
    if (sub_1B180887C(a2))
    {
      sub_1B18089F4(a2, v44, v45, v46, v47, v48, v49, v50, v51);
    }
    else
    {
      v52 = *(_QWORD *)(a2 + 152);
      if (v52 != -1)
      {
        v53 = sub_1B19D4E3C(*(_QWORD *)(a1 + 24), v52, v46, v47, v48, v49, v50, v51);
        sub_1B1806264(v53, 0, a1, v54, v55, v56, v57, v58);
      }
      if ((*(_BYTE *)(a2 + 121) & 4) != 0)
      {
        sub_1B1807B34(a2, v44, v52, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        v59 = sub_1B18089AC(a2, v52, v46, v47, v48, v49, v50, v51);
        sub_1B1807BD8(a2, v44 - v59, v60, v61, v62, v63, v64, v65, v66);
      }
      *(_DWORD *)(a2 + 121) &= ~4u;
    }
  }
  result = (uint64_t)sub_1B1807EDC(a2, v28, v29, v30, v31, v32, v33, v34);
  if (result >= 1)
  {
    v73 = result;
    for (i = 0; i != v73; ++i)
    {
      v75 = sub_1B1807F38(a2, i, v67, v68, v69, v70, v71, v72);
      result = sub_1B17F3FE0(a1, v75, a3, a4, a9);
    }
  }
  return result;
}

const __CFDictionary *sub_1B17F41C0(uint64_t a1, void *key, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  const __CFDictionary *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1)
  {
    if (key)
      goto LABEL_3;
LABEL_9:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"root");
    if (a3)
      goto LABEL_4;
    goto LABEL_10;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  if (!key)
    goto LABEL_9;
LABEL_3:
  if (a3)
    goto LABEL_4;
LABEL_10:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"key");
LABEL_4:
  result = (const __CFDictionary *)sub_1B17F30D4(a1, key, 0, a4, a5, a6, a7, a8);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a3);
    if (result)
      return (const __CFDictionary *)sub_1B17F3FE0(a1, (uint64_t)result, a4, a5, v16, v17, v18, v19, a9);
  }
  return result;
}

CFTypeRef sub_1B17F42CC(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (a1)
  {
    if (cf)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (cf)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
LABEL_3:
  result = *(CFTypeRef *)(a1 + 16);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

void sub_1B17F43D0(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const char *v3;
  uint64_t v4;
  void *v5;

  v2 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v5 = *(void **)(a1 + 72);
  if (v5)
    objc_msgSend_enumerateObjectsUsingBlock_(v5, v3, (uint64_t)&unk_1E63D6690, v4);
  os_unfair_lock_unlock(v2);
}

void *sub_1B17F4410(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v63[4];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  memset(v63, 0, sizeof(v63));
  v16 = (_OWORD *)sub_1B19C4614(a2[2], (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v17 = a2[4];
  if (v17)
  {
    v18 = sub_1B19C4614(a2[3], v9, v10, v11, v12, v13, v14, v15);
    (*(void (**)(uint64_t, _OWORD *, uint64_t, _OWORD *))(v17 + 16))(v17, v16, v18, v63);
    v16 = v63;
  }
  v19 = (const void *)sub_1B19C45CC(a2[3], v9, v10, v11, v12, v13, v14, v15);
  v27 = (void *)sub_1B19C4614(a2[3], v20, v21, v22, v23, v24, v25, v26);
  v35 = sub_1B19C4770(a2[3], v28, v29, v30, v31, v32, v33, v34);
  v43 = sub_1B179E250(v35, v36, v37, v38, v39, v40, v41, v42);
  v51 = sub_1B19C46E0(a2[3], v44, v45, v46, v47, v48, v49, v50);
  v59 = sub_1B19C4728(a2[3], v52, v53, v54, v55, v56, v57, v58);
  return sub_1B17C58FC(v19, v27, v16, v43, v51, v59, v60, v61);
}

uint64_t sub_1B17F450C(uint64_t a1, _QWORD *a2, const __CFString *a3, _QWORD *a4, const __CFString *a5, void *a6)
{
  _QWORD *v10;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFXModelTarget *v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __CFXModelTarget *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  CFXAnimationBinding *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __CFXModelTarget *v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  __CFArray *v73;
  uint64_t v74;

  v10 = a2;
  v12 = sub_1B19C1A30(a2, a3, 0);
  if (!v12)
  {
LABEL_9:
    if (sub_1B193EBA0(v10))
      v74 = sub_1B193E568((uint64_t)v10, v49, v50, v51, v52, v53, v54, v55);
    else
      v74 = (uint64_t)v10;
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Binding: Unable to resolve destination keypath: %@(%@)"), v50, v51, v52, v53, v54, v55, v74);
    return 0;
  }
  v20 = (__CFXModelTarget *)v12;
  if (!sub_1B19C4614((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19))
  {
    CFRelease(v20);
    goto LABEL_9;
  }
  v21 = sub_1B19C1A30(a4, a5, 0);
  if (!v21)
  {
    v56 = v20;
LABEL_15:
    CFRelease(v56);
    return 0;
  }
  v29 = (__CFXModelTarget *)v21;
  if (!sub_1B19C4614((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28))
  {
    CFRelease(v20);
    v56 = v29;
    goto LABEL_15;
  }
  v37 = sub_1B19C4770((uint64_t)v20, v30, v31, v32, v33, v34, v35, v36);
  if (v37 != sub_1B19C4770((uint64_t)v29, v38, v39, v40, v41, v42, v43, v44))
  {
    CFRelease(v20);
    CFRelease(v29);
    if (sub_1B193EBA0(v10) && sub_1B193EBA0(a4))
    {
      v10 = (_QWORD *)sub_1B193E568((uint64_t)v10, v64, v58, v59, v60, v61, v62, v63);
      sub_1B193E568((uint64_t)a4, v65, v66, v67, v68, v69, v70, v71);
    }
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Binding: Trying to bind two incompatible keypaths: %@(%@) -> %@(%@)"), v58, v59, v60, v61, v62, v63, (uint64_t)v10);
    return 0;
  }
  sub_1B17F4708(a1, v10, a3);
  v47 = objc_alloc_init(CFXAnimationBinding);
  v47->_source = v29;
  v47->_destination = v20;
  if (v10)
    v48 = (void *)CFRetain(v10);
  else
    v48 = 0;
  v47->_owner = v48;
  v72 = (const void *)objc_msgSend_objectForKeyedSubscript_(a6, v45, (uint64_t)CFSTR("VFXBindingValueTransformerKey"), v46);
  if (v72)
    v47->_valueTransformer = _Block_copy(v72);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v73 = *(__CFArray **)(a1 + 72);
  if (!v73)
  {
    v73 = (__CFArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    *(_QWORD *)(a1 + 72) = v73;
  }
  CFArrayAppendValue(v73, v47);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));

  return 1;
}

void sub_1B17F4708(uint64_t a1, _QWORD *a2, const __CFString *a3)
{
  os_unfair_lock_s *v6;
  void *v7;
  const __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  _QWORD v22[6];

  v6 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    v8 = sub_1B19C1A30(a2, a3, 0);
    v16 = sub_1B19C4614((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = sub_1B17F47BC;
    v22[3] = &unk_1E63D66B0;
    v22[4] = a2;
    v22[5] = v16;
    v19 = objc_msgSend_indexesOfObjectsPassingTest_(v7, v17, (uint64_t)v22, v18);
    objc_msgSend_removeObjectsAtIndexes_(v7, v20, v19, v21);
    CFRelease(v8);
  }
  os_unfair_lock_unlock(v6);
}

BOOL sub_1B17F47BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(_QWORD *)(a2 + 8) == *(_QWORD *)(a1 + 32)
      && sub_1B19C4614(*(_QWORD *)(a2 + 24), a2, a3, a4, a5, a6, a7, a8) == *(_QWORD *)(a1 + 40);
}

void sub_1B17F4804(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  _QWORD v11[5];

  v4 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v7 = *(void **)(a1 + 72);
  if (v7)
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = sub_1B17F4894;
    v11[3] = &unk_1E63D66D0;
    v11[4] = a2;
    v8 = objc_msgSend_indexesOfObjectsPassingTest_(v7, v5, (uint64_t)v11, v6);
    objc_msgSend_removeObjectsAtIndexes_(v7, v9, v8, v10);
  }
  os_unfair_lock_unlock(v4);
}

BOOL sub_1B17F4894(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8) == *(_QWORD *)(a1 + 32);
}

void sub_1B17F48AC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  _QWORD v20[5];

  v9 = a1[3];
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = sub_1B17F4A24;
  v20[3] = &unk_1E63D6610;
  v20[4] = a1;
  sub_1B19D5054(v9, (uint64_t)v20, a3, a4, a5, a6, a7, a8);
  v10 = (const void *)a1[3];
  if (v10)
  {
    CFRelease(v10);
    a1[3] = 0;
  }
  v11 = (const void *)a1[4];
  if (v11)
  {
    CFRelease(v11);
    a1[4] = 0;
  }
  v12 = (const void *)a1[10];
  if (v12)
  {
    CFRelease(v12);
    a1[10] = 0;
  }
  v13 = (const void *)a1[6];
  if (v13)
  {
    CFRelease(v13);
    a1[6] = 0;
  }
  v14 = (const void *)a1[7];
  if (v14)
  {
    CFRelease(v14);
    a1[7] = 0;
  }
  v15 = (const void *)a1[2];
  if (v15)
  {
    CFRelease(v15);
    a1[2] = 0;
  }
  v16 = (const void *)a1[14];
  if (v16)
  {
    CFRelease(v16);
    a1[14] = 0;
  }
  v17 = (const void *)a1[15];
  if (v17)
  {
    CFRelease(v17);
    a1[15] = 0;
  }
  v18 = (const void *)a1[16];
  if (v18)
  {
    CFRelease(v18);
    a1[16] = 0;
  }
  v19 = (const void *)a1[9];
  if (v19)
  {
    CFRelease(v19);
    a1[9] = 0;
  }
}

CFStringRef sub_1B17F49AC(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAnimationManager %p>"), a1);
}

CFStringRef sub_1B17F49E8(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAnimationManager %p>"), a1);
}

void sub_1B17F4A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1805D10(a3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), a3, a4, a5, a6, a7, a8);
}

BOOL sub_1B17F4A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unsigned int v36;
  int v37;
  _BOOL4 v38;
  float v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  float v44;
  float v45;
  uint64_t v46;
  int v47;
  _BOOL8 result;
  uint64_t v49;
  BOOL v50;
  __int16 v51;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (a2)
      goto LABEL_3;
LABEL_27:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_27;
LABEL_3:
  v10 = *(_QWORD *)(a2 + 16);
  if (sub_1B180887C(a2) || (*(_BYTE *)(a2 + 121) & 4) != 0)
    return 0;
  v18 = sub_1B185DC40(v10, v11, v12, v13, v14, v15, v16, v17);
  v26 = 144;
  if (v18)
    v26 = 136;
  v27 = *(double *)(a1 + v26);
  v28 = *(_DWORD *)(a2 + 121);
  if ((v28 & 2) != 0)
  {
    *(_DWORD *)(a2 + 121) = v28 & 0xFFFFFFFD;
    *(double *)(a2 + 80) = v27 + sub_1B18089AC(v10, v19, v20, v21, v22, v23, v24, v25);
    v28 = *(_DWORD *)(a2 + 121);
  }
  v51 = 0;
  v50 = 0;
  v35 = sub_1B1808070(a2, (BOOL *)&v51 + 1, &v51, &v50, v22, v23, v24, v25, v27);
  v36 = *(_DWORD *)(a2 + 121);
  v37 = HIBYTE(v51);
  v38 = v50;
  *(_DWORD *)(a2 + 121) = v36 & 0xFFFFFFCF | (16 * HIBYTE(v51)) | (32 * v50);
  if (v36 & 0x20 | v38)
  {
    v39 = *(float *)(v10 + 72);
    v40 = v39;
    v41 = v39 == 0.0;
    v42 = 1.0;
    if (!v41)
      v42 = v40;
    v43 = v35 / v42;
    v44 = *(float *)(a2 + 72);
    v45 = v43;
    *(float *)(a2 + 72) = v45;
    v46 = *(_QWORD *)(v10 + 96);
    if (v46)
      sub_1B19CE5B8((_QWORD *)a1, v46, (v36 >> 4) & 1, v37 != 0, a2, v32, v33, v34, v44, v43);
  }
  if (!*(_BYTE *)(a1 + 90))
  {
    v47 = *(_DWORD *)(a2 + 121);
    if ((v47 & 1) == 0)
    {
      *(_DWORD *)(a2 + 121) = v47 | 1;
      if (*(_QWORD *)(v10 + 144))
        sub_1B17F200C(a1, (char *)a2, 1, v30, v31, v32, v33, v34);
    }
    if ((_BYTE)v51)
    {
      *(_DWORD *)(a2 + 121) |= 0x400u;
      sub_1B17F4C18(a1, a2, v29, v30, v31, v32, v33, v34);
    }
  }
  result = 1;
  if ((v28 & 0x100) != 0 && (_BYTE)v51)
  {
    v49 = *(_QWORD *)(a2 + 40);
    if (v49)
      return (*(_BYTE *)(v49 + 122) & 1) == 0;
    return 0;
  }
  return result;
}

void sub_1B17F4C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  if (!*(_BYTE *)(a1 + 90))
  {
    v8 = *(_DWORD *)(a2 + 121);
    if ((v8 & 0x40) == 0)
    {
      *(_DWORD *)(a2 + 121) = v8 | 0x40;
      sub_1B17F200C(a1, (char *)a2, 6, a4, a5, a6, a7, a8);
    }
  }
}

void sub_1B17F4C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFArray *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const __CFArray *v43;
  CFIndex i;
  const __CFArray *v45;

  if (a2)
  {
    if (a1)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a1)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
LABEL_3:
  CFRetain((CFTypeRef)a2);
  if (*(_BYTE *)(a1 + 88))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Inconsistency in _CFXAnimationManagerRemoveAnimationNode: triggered while applying animations"), v10, v11, v12, v13, v14, v15, (uint64_t)"manager->_applying == false");
  sub_1B17F4C18(a1, a2, v10, v11, v12, v13, v14, v15);
  if (*(_BYTE *)(a1 + 88))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationManagerRemoveAnimationNode removing an animation while applying"), v16, v17, v18, v19, v20, v21, (uint64_t)"manager->_applying==false");
  sub_1B17F20E0(a1, (_QWORD *)a2, v16, v17, v18, v19, v20, v21);
  *(_DWORD *)(a2 + 121) |= 0x800u;
  sub_1B1807AE8(a2, 0, v22, v23, v24, v25, v26, v27);
  v35 = *(_QWORD *)(a2 + 192);
  if (v35)
    sub_1B17F0F18(v35, (const void *)a2, v29, v30, v31, v32, v33, v34);
  v36 = sub_1B1807EDC(a2, v28, v29, v30, v31, v32, v33, v34);
  if ((uint64_t)v36 >= 1)
  {
    v43 = v36;
    for (i = 0; (const __CFArray *)i != v43; ++i)
    {
      v45 = sub_1B1807F38(a2, i, v37, v38, v39, v40, v41, v42);
      sub_1B17F4C3C(a1, v45);
    }
  }
  CFRelease((CFTypeRef)a2);
}

void sub_1B17F4D84()
{
  if (!qword_1EEF656E0)
    qword_1EEF656E0 = sub_1B179CB60(&qword_1EEF656E0);
}

uint64_t sub_1B17F4DC4(float *a1, int a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  float v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v10 = a2 - 1;
  v11 = *a3;
  if (a2 - 1 >= 1)
  {
    v12 = 0;
    do
    {
      v13 = v10 + v12;
      if (v10 + (int)v12 < 0 != __OFADD__(v10, (_DWORD)v12))
        v14 = v13 + 1;
      else
        v14 = v10 + v12;
      if (v13 <= -2)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _CFXPreviousKeyIndexForTime - unexpected integer division"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"middle >= 0");
      v15 = v14 >> 1;
      if (a1[v14 >> 1] >= v11)
      {
        v10 = v15 - 1;
      }
      else
      {
        if ((_DWORD)v12 == v15)
        {
          if (a1[v10] <= v11)
            return v10;
          else
            return v12;
        }
        v12 = (v14 >> 1);
      }
    }
    while (v10 > (int)v12);
    if ((_DWORD)v12)
      return v12;
  }
  v12 = 0;
  if (*a1 > v11)
    *a3 = *a1;
  return v12;
}

uint64_t sub_1B17F4EA8()
{
  if (qword_1EEF656E8 != -1)
    dispatch_once(&qword_1EEF656E8, &unk_1E63D0AB0);
  return sub_1B179CB90(qword_1EEF656E0, 0x58uLL);
}

uint64_t sub_1B17F4EEC(unsigned int a1, unsigned int a2, char a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  v16 = sub_1B17F4EA8();
  if (v16)
  {
    if (!a1)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"keyCount");
    *(_QWORD *)(v16 + 40) = sub_1B179E238(4 * a1);
    *(_DWORD *)(v16 + 24) = a1;
    v24 = sub_1B179E250(a2, v17, v18, v19, v20, v21, v22, v23);
    *(_BYTE *)(v16 + 30) = v24;
    *(_WORD *)(v16 + 28) = a2;
    *(_BYTE *)(v16 + 99) = a3;
    *(_QWORD *)(v16 + 48) = sub_1B179E238(v24 * a1);
    if (a4)
    {
      *(_QWORD *)(v16 + 56) = sub_1B179E238(4 * a1);
      *(_QWORD *)(v16 + 64) = sub_1B179E238(4 * a1);
      *(_QWORD *)(v16 + 72) = sub_1B179E238(4 * a1);
    }
    *(_BYTE *)(v16 + 98) = a4 & a5;
    if (a5)
    {
      v32 = sub_1B179E64C(a2, v25, v26, v27, v28, v29, v30, v31);
      *(_BYTE *)(v16 + 97) = v32;
      *(_QWORD *)(v16 + 80) = sub_1B179E238(v32 * 8 * a1);
      *(_QWORD *)(v16 + 88) = sub_1B179E238(8 * a1 * *(unsigned __int8 *)(v16 + 97));
    }
    *(_QWORD *)(v16 + 32) = sub_1B17FFEC0(*(__int16 *)(v16 + 28), *(char *)(v16 + 99), 0, *(char *)(v16 + 31));
  }
  return v16;
}

BOOL sub_1B17F5020(uint64_t a1, unsigned int a2, void *__src, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10, float a11, float a12)
{
  unsigned int v21;
  float v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)__src, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"controller");
  v21 = *(_DWORD *)(a1 + 24);
  if (v21 <= a2)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXKeyframeControllerRef - index out of bounds"), (uint64_t)__src, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v31);
  }
  else
  {
    v22 = a9;
    v23 = *(_QWORD *)(a1 + 48);
    *(float *)(*(_QWORD *)(a1 + 40) + 4 * a2) = v22;
    v24 = *(double *)(a1 + 16);
    if (v24 <= a9)
      v24 = a9;
    *(double *)(a1 + 16) = v24;
    memcpy((void *)(v23 + *(unsigned __int8 *)(a1 + 30) * a2), __src, *(unsigned __int8 *)(a1 + 30));
    v25 = *(_QWORD *)(a1 + 56);
    if (v25)
      *(float *)(v25 + 4 * a2) = a10;
    v26 = *(_QWORD *)(a1 + 64);
    if (v26)
      *(float *)(v26 + 4 * a2) = a11;
    v27 = *(_QWORD *)(a1 + 72);
    if (v27)
      *(float *)(v27 + 4 * a2) = a12;
    if (a4)
    {
      v28 = *(_QWORD *)(a1 + 80);
      if (v28)
      {
        *(_BYTE *)(a1 + 98) = 0;
        memcpy((void *)(v28 + 8 * *(unsigned __int8 *)(a1 + 97) * a2), a4, 8 * *(unsigned __int8 *)(a1 + 97));
      }
    }
    if (a5)
    {
      v29 = *(_QWORD *)(a1 + 88);
      if (v29)
      {
        *(_BYTE *)(a1 + 98) = 0;
        memcpy((void *)(v29 + 8 * *(unsigned __int8 *)(a1 + 97) * a2), a5, 8 * *(unsigned __int8 *)(a1 + 97));
      }
    }
  }
  return v21 > a2;
}

double sub_1B17F519C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  return *(double *)(a1 + 16);
}

uint64_t sub_1B17F51E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v14;
  int v15;
  float v16;
  unsigned int v17;
  __n128 v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  float v27;
  float v28;
  float v29;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  if (!*(_QWORD *)(a1 + 48))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller->_values");
  if (!*(_QWORD *)(a1 + 32))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller->_evaluate");
  v14 = *(_DWORD *)(a1 + 24);
  if (!v14)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXKeyframeControllerEvaluateAtTime animation has no key"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller->_keyCount > 0");
    v14 = *(_DWORD *)(a1 + 24);
  }
  v15 = *(unsigned __int8 *)(a1 + 31);
  v16 = a9;
  v29 = v16;
  v17 = sub_1B17F4DC4(*(float **)(a1 + 40), v14, &v29, a4, a5, a6, a7, a8);
  v19 = v17;
  if (v17 + 1 < *(_DWORD *)(a1 + 24) - 1)
    v20 = v17 + 1;
  else
    v20 = *(_DWORD *)(a1 + 24) - 1;
  v21 = *(_QWORD *)(a1 + 48);
  v22 = *(unsigned __int8 *)(a1 + 30);
  v23 = v21 + v17 * v22;
  v24 = v21 + v20 * v22;
  if (v15 != 1 && *(_WORD *)(a1 + 28) != 3)
  {
    v26 = *(_QWORD *)(a1 + 40);
    v27 = *(float *)(v26 + 4 * v19);
    v28 = *(float *)(v26 + 4 * v20) - v27;
    if (v28 == 0.0)
    {
      v18.n128_u64[0] = 0;
      if (v15)
        goto LABEL_20;
    }
    else
    {
      v18.n128_f64[0] = (float)((float)(v29 - v27) / v28);
      if (v15)
      {
LABEL_20:
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(a1 + 32))(v23, v24, (char)v15, *(_QWORD *)(a1 + 88) + 8 * v19 * *(unsigned __int8 *)(a1 + 97), *(_QWORD *)(a1 + 80) + 8 * v20 * *(unsigned __int8 *)(a1 + 97), a3, a4, v18);
        return 1;
      }
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, __n128))(a1 + 32))(v23, v24, 0, 0, 0, a3, a4, v18);
    return 1;
  }
  if (a2)
    v23 = v21 + v20 * v22;
  v18.n128_f64[0] = v29;
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, __n128))(a1 + 32))(v23, v23, (char)v15, 0, 0, a3, a4, v18);
  return 1;
}

uint64_t sub_1B17F53B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1B17F53FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  return *(__int16 *)(a1 + 28);
}

double sub_1B17F5444(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  double result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  v10 = *(_QWORD *)(a1 + 40);
  result = 0.0;
  if (v10)
  {
    if (*(_DWORD *)(a1 + 24) > a2)
      return *(float *)(v10 + 4 * a2);
  }
  return result;
}

uint64_t sub_1B17F54AC(uint64_t a1, int a2, void *__dst, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)__dst, a4, a5, a6, a7, a8, (uint64_t)"controller");
  v11 = *(_QWORD *)(a1 + 48);
  if (!v11)
    return 0;
  memcpy(__dst, (const void *)(v11 + *(unsigned __int8 *)(a1 + 30) * a2), *(unsigned __int8 *)(a1 + 30));
  return *(unsigned __int8 *)(a1 + 30);
}

void sub_1B17F5528(uint64_t a1, float32x4_t a2, float32x4_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  _DWORD *v31;
  uint64_t v32;
  double v33;
  float v34;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a5, a6, a7, a8, a9, a10, (uint64_t)"controller");
  if (!*(_QWORD *)(a1 + 48))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a5, a6, a7, a8, a9, a10, (uint64_t)"controller->_values");
  v11 = *(unsigned int *)(a1 + 24);
  if (v11 >= 2)
  {
    if (!*(_QWORD *)(a1 + 40))
      *(_QWORD *)(a1 + 40) = sub_1B179E238(4 * v11);
    v12 = (v11 - 1);
    v13 = *(float32x4_t **)(a1 + 48);
    v14 = *(__int16 *)(a1 + 28);
    v15 = 0.0;
    v16 = 1;
    do
    {
      v17 = v13;
      v18 = *(_QWORD *)(a1 + 48);
      v19 = v16 * *(unsigned __int8 *)(a1 + 30);
      v13 = (float32x4_t *)(v18 + v19);
      switch((int)v14)
      {
        case 1:
          a2.f32[0] = vabds_f32(v17->f32[0], v13->f32[0]);
          goto LABEL_15;
        case 2:
          v20 = v17->f32[0];
          v21 = v13->f32[0];
          goto LABEL_25;
        case 3:
        case 15:
          LODWORD(v20) = v17->u8[0];
          LODWORD(v21) = v13->u8[0];
          goto LABEL_25;
        case 4:
          LODWORD(v20) = v17->i8[0];
          LODWORD(v21) = v13->i8[0];
          goto LABEL_25;
        case 6:
          *(double *)a2.i64 = vabdd_f64(*(double *)v17->i64, *(double *)v13->i64);
          break;
        case 7:
        case 17:
          v22 = vsub_f32(*(float32x2_t *)v17->f32, *(float32x2_t *)v13->f32);
          *(float32x2_t *)a2.f32 = vmul_f32(v22, v22);
          goto LABEL_14;
        case 8:
        case 18:
          a2.i64[0] = v17->i64[0];
          a2.i32[2] = v17->i32[2];
          a3.i64[0] = v13->i64[0];
          a3.i32[2] = v13->i32[2];
          v23 = vsubq_f32(a2, a3);
          v24 = vmulq_f32(v23, v23);
          a3 = vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1));
          a2 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), a3);
          a2.f32[0] = sqrtf(a2.f32[0]);
          goto LABEL_15;
        case 9:
        case 19:
          v25 = vsubq_f32(*v17, *v13);
          a2 = vmulq_f32(v25, v25);
          a3 = (float32x4_t)vextq_s8((int8x16_t)a2, (int8x16_t)a2, 8uLL);
          *(float32x2_t *)a2.f32 = vadd_f32(*(float32x2_t *)a2.f32, *(float32x2_t *)a3.f32);
LABEL_14:
          a2.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)a2.f32));
          goto LABEL_15;
        case 10:
          v26 = vsubq_f32(*v17, *v13);
          v27 = vsubq_f32(v17[1], v13[1]);
          v28 = vsubq_f32(v17[2], v13[2]);
          v29 = vsubq_f32(v17[3], v13[3]);
          a2 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v26, v26), v27, v27), v28, v28), v29, v29);
          a3 = (float32x4_t)vextq_s8((int8x16_t)a2, (int8x16_t)a2, 8uLL);
          a2.f32[0] = vaddv_f32(vadd_f32(*(float32x2_t *)a2.f32, *(float32x2_t *)a3.f32));
          goto LABEL_15;
        case 12:
          a2.f32[0] = sub_1B179CE5C(v17->f32, (float *)(v18 + v19));
LABEL_15:
          *(double *)a2.i64 = a2.f32[0];
          break;
        case 13:
          LODWORD(v20) = v17->i16[0];
          LODWORD(v21) = v13->i16[0];
          goto LABEL_25;
        case 16:
          LODWORD(v20) = v17->u16[0];
          LODWORD(v21) = v13->u16[0];
LABEL_25:
          *(double *)a2.i64 = fabs((double)(LODWORD(v20) - LODWORD(v21)));
          break;
        default:
          sub_1B17C4408(0, (uint64_t)CFSTR("Warning: _CFXKeyDistance - can't compute key distance for type %d"), a5, a6, a7, a8, a9, a10, v14);
          a2.i64[0] = 0;
          break;
      }
      v15 = v15 + *(double *)a2.i64;
      v30 = v15;
      v31 = *(_DWORD **)(a1 + 40);
      *(float *)&v31[v16++] = v30;
      v32 = v16 - v12;
    }
    while (v16 - v12 != 1);
    *v31 = 0;
    do
    {
      if (v15 == 0.0)
        v33 = (float)((float)v32 / (float)v11) + -1.0;
      else
        v33 = *(float *)&v31[v32] / v15;
      v34 = v33;
      *(float *)&v31[v32++] = v34;
    }
    while (v11 != v32);
    *(double *)(a1 + 16) = *(float *)&v31[v12];
  }
}

void sub_1B17F57E0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  *(_BYTE *)(a1 + 96) = a2;
}

uint64_t sub_1B17F582C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  return *(char *)(a1 + 96);
}

uint64_t (*sub_1B17F5874(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8))()
{
  uint64_t (*result)();

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  *(_BYTE *)(a1 + 31) = a2;
  result = sub_1B17FFEC0(*(__int16 *)(a1 + 28), *(char *)(a1 + 99), 0, a2);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1B17F58D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  return *(char *)(a1 + 31);
}

void sub_1B17F5920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  const __CFString *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  int v66;
  char *v67;
  float *v68;
  void *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[4];
  _OWORD v77[4];
  _OWORD v78[4];
  _OWORD __dst[4];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  v10 = *(unsigned __int8 *)(a1 + 31);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v10 == 2)
    {
LABEL_5:
      v11 = CFSTR("Warning: can't simplify keyframes because of cubic interpolation");
LABEL_14:
      sub_1B17C4408(0, (uint64_t)v11, a3, a4, a5, a6, a7, a8, a9);
      return;
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 88))
      v12 = v10 == 2;
    else
      v12 = 0;
    if (v12)
      goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 64))
  {
    v11 = CFSTR("Warning: can't simplify keyframes because of tcb values");
    goto LABEL_14;
  }
  v13 = *(unsigned int *)(a1 + 24);
  if (v13 >= 3)
  {
    memset(__dst, 0, sizeof(__dst));
    memset(v78, 0, sizeof(v78));
    memset(v77, 0, sizeof(v77));
    memset(v76, 0, sizeof(v76));
    v19 = (const void *)sub_1B185BCB0();
    v20 = 0;
    v21 = 0;
    v22 = *(unsigned __int16 *)(a1 + 28);
    v24 = v10 == 1 || v22 == 3;
    v75 = v13;
    v25 = (v13 - 1) - 1;
    v26 = (char)v10;
    v27 = (__int16)v22;
    do
    {
      sub_1B17F54AC(a1, v20 + 1, __dst, v14, v15, v16, v17, v18);
      sub_1B17F54AC(a1, v21, v77, v28, v29, v30, v31, v32);
      if (v24)
      {
        v38.n128_u64[0] = 0;
        (*(void (**)(_OWORD *, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD, _OWORD *, __n128))(a1 + 32))(v77, v77, v26, 0, 0, 0, v78, v38);
      }
      else
      {
        sub_1B17F54AC(a1, v20 + 2, v76, v33, v34, v35, v36, v37);
        v50 = sub_1B17F5444(a1, (int)v20 + 1, v44, v45, v46, v47, v48, v49);
        v57 = sub_1B17F5444(a1, v21, v51, v52, v53, v54, v55, v56);
        v64.n128_f64[0] = (v50 - v57) / (sub_1B17F5444(a1, (int)v20 + 2, v58, v59, v60, v61, v62, v63) - v57);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD, _OWORD *, __n128))(a1 + 32))(v77, v76, v26, 0, 0, 0, v78, v64);
      }
      if (sub_1B17F5C5C((float *)__dst, (float *)v78, v27, v39, v40, v41, v42, v43))
        v21 = v20 + 1;
      else
        sub_1B185CBE8((uint64_t)v19, v20 + 1);
      ++v20;
    }
    while (v25 != v20);
    v65 = sub_1B185BCD4((uint64_t)v19);
    if (v65 >= 1)
    {
      v66 = v75 - v65;
      v68 = *(float **)(a1 + 40);
      v67 = *(char **)(a1 + 48);
      *(_DWORD *)(a1 + 24) = v75 - v65;
      *(_QWORD *)(a1 + 40) = sub_1B179E238(4 * (v75 - v65));
      v69 = sub_1B179E238(v66 * *(unsigned __int8 *)(a1 + 30));
      v70 = 0;
      v71 = 0;
      *(_QWORD *)(a1 + 48) = v69;
      do
      {
        if ((sub_1B185C12C((uint64_t)v19, v70) & 1) == 0)
          sub_1B17F5020(a1, v71++, &v67[v70 * *(unsigned __int8 *)(a1 + 30)], 0, 0, v72, v73, v74, v68[v70], 0.0, 0.0, 0.0);
        ++v70;
      }
      while (v75 != v70);
      if (v68)
        free(v68);
      if (v67)
        free(v67);
    }
    CFRelease(v19);
  }
}

BOOL sub_1B17F5C5C(float *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  double v22;

  switch((int)a3)
  {
    case 1:
    case 12:
      v17 = sub_1B179E250(a3, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (v17 < 4)
        return 0;
      if (vabds_f32(*a1, *a2) > 0.000001)
        return 1;
      v13 = v17 >> 2;
      v18 = 1;
      do
      {
        v15 = v18;
        if (v13 == v18)
          break;
        v19 = vabds_f32(a1[v18], a2[v18]);
        ++v18;
      }
      while (v19 <= 0.000001);
      return v15 < v13;
    case 2:
    case 3:
    case 4:
    case 5:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      v10 = sub_1B179E250(a3, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      return memcmp(a1, a2, v10) != 0;
    case 6:
      v20 = sub_1B179E250(a3, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (v20 < 8)
        return 0;
      if (vabdd_f64(*(double *)a1, *(double *)a2) > 0.000001)
        return 1;
      v13 = v20 >> 3;
      v21 = 1;
      do
      {
        v15 = v21;
        if (v13 == v21)
          break;
        v22 = vabdd_f64(*(double *)&a1[2 * v21], *(double *)&a2[2 * v21]);
        ++v21;
      }
      while (v22 <= 0.000001);
      return v15 < v13;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      v12 = sub_1B179E250(a3, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (v12 < 4)
        return 0;
      if (vabds_f32(*a1, *a2) > 0.000001)
        return 1;
      v13 = v12 >> 2;
      v14 = 1;
      do
      {
        v15 = v14;
        if (v13 == v14)
          break;
        v16 = vabds_f32(a1[v14], a2[v14]);
        ++v14;
      }
      while (v16 <= 0.000001);
      return v15 < v13;
    default:
      return 1;
  }
}

void sub_1B17F5E04(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v29[4];
  _OWORD __dst[4];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1B17F5920(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8, v28);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"controller");
  if (a2)
    *a2 = 0;
  if ((!*(_QWORD *)(a1 + 80) && !*(_QWORD *)(a1 + 88) || *(_BYTE *)(a1 + 31) != 2)
    && !*(_QWORD *)(a1 + 56)
    && !*(_QWORD *)(a1 + 72)
    && !*(_QWORD *)(a1 + 64)
    && *(_DWORD *)(a1 + 24) == 2)
  {
    memset(__dst, 0, sizeof(__dst));
    memset(v29, 0, sizeof(v29));
    v16 = *(_WORD *)(a1 + 28);
    if (sub_1B17F54AC(a1, 0, __dst, v11, v12, v13, v14, v15))
    {
      if (sub_1B17F54AC(a1, 1, v29, v17, v18, v19, v20, v21))
      {
        v27 = sub_1B17F5C5C((float *)__dst, (float *)v29, v16, v22, v23, v24, v25, v26);
        if (a2)
        {
          if (!v27)
            *a2 = 1;
        }
      }
    }
  }
}

uint64_t sub_1B17F5F2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97);
}

BOOL sub_1B17F5F34(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) && *(_QWORD *)(a1 + 72) != 0;
}

float sub_1B17F5F54(uint64_t a1, unsigned int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 56) + 4 * a2);
}

float sub_1B17F5F60(uint64_t a1, unsigned int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 64) + 4 * a2);
}

float sub_1B17F5F6C(uint64_t a1, unsigned int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 72) + 4 * a2);
}

BOOL sub_1B17F5F78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 80) && *(_QWORD *)(a1 + 88) != 0;
}

uint64_t sub_1B17F5F98(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 88) + 8 * *(unsigned __int8 *)(a1 + 97) * a2;
}

uint64_t sub_1B17F5FAC(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 80) + 8 * *(unsigned __int8 *)(a1 + 97) * a2;
}

void sub_1B17F5FC4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)a1[5];
  if (v2)
    free(v2);
  v3 = (void *)a1[6];
  if (v3)
    free(v3);
  v4 = (void *)a1[7];
  if (v4)
    free(v4);
  v5 = (void *)a1[8];
  if (v5)
    free(v5);
  v6 = (void *)a1[9];
  if (v6)
    free(v6);
  v7 = (void *)a1[10];
  if (v7)
    free(v7);
  v8 = (void *)a1[11];
  if (v8)
    free(v8);
}

CFStringRef sub_1B17F603C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXKeyframeController %p>"), a1);
}

CFStringRef sub_1B17F6078(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXKeyframeController %p>"), a1);
}

char *sub_1B17F65F8(char *result, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int a5, float a6)
{
  char *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;

  v9 = result;
  v10 = *a4;
  if (*a4 != a5 || *(float *)(a2 + 4 * (a5 - 1)) > a6)
  {
    v11 = 0;
    if (v10)
    {
      v12 = *a4;
      do
      {
        v13 = v11 + (v12 >> 1);
        v14 = v12 >> 1;
        v12 += ~(v12 >> 1);
        if (*(float *)(a2 + 4 * v13) <= a6)
          v11 = v13 + 1;
        else
          v12 = v14;
      }
      while (v12);
    }
    if (v10 + 1 < a5)
      v15 = v10 + 1;
    else
      v15 = a5;
    *a4 = v15;
    v16 = v11;
    v17 = v15 + ~v11;
    if (v17)
    {
      memmove(&result[8 * v11 + 8], &result[8 * v11], 8 * (v15 + ~v11));
      result = (char *)memmove((void *)(a2 + 4 * v16 + 4), (const void *)(a2 + 4 * v16), 4 * v17);
    }
    *(_QWORD *)&v9[8 * v16] = a3;
    *(float *)(a2 + 4 * v16) = a6;
  }
  return result;
}

double vfx_uniform_grid_create()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_OWORD *)(v0 + 168) = 0u;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  return result;
}

uint64_t vfx_uniform_grid_destroy(uint64_t result)
{
  if (result)
  {
    sub_1B17F75C0(result);
    JUMPOUT(0x1B5E22E18);
  }
  return result;
}

void vfx_uniform_grid_fill2d(_QWORD *a1, unint64_t *a2, unsigned int a3, float a4, float32x4_t a5, double a6)
{
  uint64_t v9;
  unint64_t *v10;
  float32x4_t v11;
  unint64_t v12;

  *(float *)&a6 = a4;
  a5.i64[0] = *a2;
  if (a3 < 2)
  {
    v11 = a5;
  }
  else
  {
    v9 = a3 - 1;
    v10 = a2 + 1;
    v11 = a5;
    do
    {
      v12 = *v10++;
      v11.i32[3] = 0;
      v11 = vminnmq_f32(v11, (float32x4_t)v12);
      a5.i32[3] = 0;
      a5 = vmaxnmq_f32(a5, (float32x4_t)v12);
      --v9;
    }
    while (v9);
  }
  sub_1B17F6E4C((uint64_t)a1, v11, a5, a6);
  sub_1B17F67F0(a1, a2, a3);
  sub_1B17F685C((uint64_t)a1);
}

double sub_1B17F67F0(_QWORD *a1, unint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;

  sub_1B17F7E8C((uint64_t)a1, a2, a3);
  v6 = a1[15];
  v7 = 0;
  v8 = a1[16] - 1;
  if (a1[16] != 1)
  {
    v9 = (int *)a1[15];
    v10 = a1[16] - 1;
    do
    {
      v11 = *v9;
      *v9++ = v7;
      v7 += v11;
      --v10;
    }
    while (v10);
  }
  *(_DWORD *)(v6 + 4 * v8) = v7;
  return sub_1B17F7F48(a1, (uint64_t)a2, a3);
}

void sub_1B17F685C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x4_t v6;
  int32x4_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int32x4_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  unsigned __int32 v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  uint64_t v28;
  const float *v29;
  float32x4_t v30;
  const float *v31;
  float32x4_t v32;
  const float *v33;
  float32x4_t v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  unsigned int i;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int **v49;
  unint64_t v50;
  _QWORD *v51;
  unsigned int *v52;
  unsigned int *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int **v63;
  unint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int32x4_t v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  _QWORD *v86;
  _QWORD v87[16];

  v87[14] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240);
  v86 = (_QWORD *)(a1 + 288);
  v74 = (v2 >> 2);
  sub_1B17F749C((_QWORD *)(a1 + 288), v74);
  v4 = *(_QWORD *)(a1 + 288);
  v3 = *(_QWORD *)(a1 + 296);
  while (v4 != v3)
  {
    *(_QWORD *)(v4 + 8) = *(_QWORD *)v4;
    sub_1B17F7530((void **)v4, 0x32uLL);
    v4 += 24;
  }
  if ((v2 & 0x3FFFFFFFCLL) == 0)
    return;
  v5 = 0;
  v6.i64[0] = -1;
  v6.i64[1] = -1;
  v77 = vaddq_s32(*(int32x4_t *)a1, v6);
  v7.i32[3] = 8;
  do
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 240) + 4 * v5);
    v11 = (int *)(*(_QWORD *)(a1 + 264) + 8 * v10);
    v12 = *v11;
    v13 = *(_DWORD *)(a1 + 40);
    v14 = *v11 / v13;
    v15 = *v11 % v13;
    v7.i32[0] = v15 % *(_DWORD *)a1;
    v7.i32[1] = v15 / *(_DWORD *)a1;
    v7.i32[2] = v14;
    v16 = v11[1] + 1;
    v17 = -1;
    v18 = -1;
    do
    {
      v19 = vaddq_s32((int32x4_t)xmmword_1B2245F40[v8], v7);
      v20 = (uint32x4_t)vorrq_s8((int8x16_t)vcltzq_s32(v19), (int8x16_t)vcgtq_s32(v19, v77));
      v20.i32[3] = v20.i32[2];
      if ((vmaxvq_u32(v20) & 0x80000000) == 0)
      {
        v21 = vmulq_s32(*(int32x4_t *)(a1 + 32), v19);
        v22 = vaddq_s32(vaddq_s32(v21, vdupq_lane_s32(*(int32x2_t *)v21.i8, 1)), vdupq_laneq_s32(v21, 2)).u32[0];
        v23 = *(_QWORD *)(a1 + 120);
        v24 = *(_DWORD *)(v23 + 4 * v22);
        v25 = *(_DWORD *)(v23 + 4 * (v22 + 1));
        if (v24 != v25)
        {
          if (v12 == v22)
          {
            v24 += v16;
          }
          else if (v17 == v24)
          {
            v26 = v9 - 1;
LABEL_14:
            v27 = (int *)&v87[v26];
            *v27 = v18;
            v27[1] = v25;
            v17 = v25;
            goto LABEL_15;
          }
          v26 = v9++;
          v18 = v24;
          goto LABEL_14;
        }
      }
LABEL_15:
      ++v8;
    }
    while (v8 != 14);
    v75 = v5;
    if (v9)
    {
      v28 = 0;
      v29 = (const float *)(*(_QWORD *)(a1 + 168) + 4 * v5);
      v30 = vld1q_dup_f32(v29);
      v31 = (const float *)(*(_QWORD *)(a1 + 192) + 4 * v5);
      v32 = vld1q_dup_f32(v31);
      v81 = v32;
      v82 = v30;
      v33 = (const float *)(*(_QWORD *)(a1 + 216) + 4 * v5);
      v34 = vld1q_dup_f32(v33);
      v32.f32[0] = *(float *)(a1 + 112) * *(float *)(a1 + 112);
      v7 = vdupq_lane_s32(*(int32x2_t *)v32.f32, 0);
      v79 = (float32x4_t)v7;
      v80 = v34;
      v76 = v9;
      do
      {
        v78 = v28;
        v35 = &v87[v28];
        v36 = v35[1];
        v37 = *v35 & 0xFFFFFFFC;
        if (v37 < v36)
        {
          v83 = v35[1];
          v84 = (0xF0u >> (4 - (v36 & 3))) & 0xF;
          v38 = ~(-1 << (*v35 & 3));
          do
          {
            v85 = v37 + 4;
            v39 = v84;
            if ((int)(v37 + 4 - v36) <= 0)
              v39 = 0;
            v40 = 4 * v37;
            v41 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 168) + v40), v82);
            v42 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 192) + v40), v81);
            v43 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 216) + v40), v80);
            v7 = (int32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)vsubq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v42, v42), v41, v41), v43, v43), v79)), (int8x16_t)xmmword_1B2245E50);
            *(int8x8_t *)v7.i8 = vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL));
            for (i = vadd_s32(*(int32x2_t *)v7.i8, vdup_lane_s32(*(int32x2_t *)v7.i8, 1)).u32[0] & ~(v39 | v38);
                  i;
                  *v63 = v65)
            {
              v45 = __clz(__rbit32(i));
              v46 = *(_DWORD *)(*(_QWORD *)(a1 + 240) + 4 * (v45 + v37));
              v47 = *(_QWORD *)(a1 + 288) + 24 * v10;
              v49 = (unsigned int **)(v47 + 8);
              v48 = *(unsigned int **)(v47 + 8);
              v51 = (_QWORD *)(v47 + 16);
              v50 = *(_QWORD *)(v47 + 16);
              if ((unint64_t)v48 >= v50)
              {
                v53 = *(unsigned int **)v47;
                v54 = ((uint64_t)v48 - *(_QWORD *)v47) >> 2;
                v55 = v54 + 1;
                if ((unint64_t)(v54 + 1) >> 62)
                  goto LABEL_60;
                v56 = v50 - (_QWORD)v53;
                if (v56 >> 1 > v55)
                  v55 = v56 >> 1;
                if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
                  v57 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v57 = v55;
                if (v57)
                {
                  v58 = (char *)sub_1B17F7E58((uint64_t)v51, v57);
                  v48 = *v49;
                  v53 = *(unsigned int **)v47;
                }
                else
                {
                  v58 = 0;
                }
                v59 = &v58[4 * v54];
                *(_DWORD *)v59 = v46;
                v52 = (unsigned int *)(v59 + 4);
                while (v48 != v53)
                {
                  v60 = *--v48;
                  *((_DWORD *)v59 - 1) = v60;
                  v59 -= 4;
                }
                *(_QWORD *)v47 = v59;
                *v49 = v52;
                *v51 = &v58[4 * v57];
                if (v53)
                  operator delete(v53);
              }
              else
              {
                *v48 = v46;
                v52 = v48 + 1;
              }
              *v49 = v52;
              v61 = *v86 + 24 * v46;
              v63 = (unsigned int **)(v61 + 8);
              v62 = *(unsigned int **)(v61 + 8);
              v64 = *(_QWORD *)(v61 + 16);
              if ((unint64_t)v62 >= v64)
              {
                v66 = *(unsigned int **)v61;
                v67 = ((uint64_t)v62 - *(_QWORD *)v61) >> 2;
                v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 62)
LABEL_60:
                  abort();
                v69 = v64 - (_QWORD)v66;
                if (v69 >> 1 > v68)
                  v68 = v69 >> 1;
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
                  v70 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v70 = v68;
                if (v70)
                {
                  v71 = (char *)sub_1B17F7E58(v61 + 16, v70);
                  v62 = *v63;
                  v66 = *(unsigned int **)v61;
                }
                else
                {
                  v71 = 0;
                }
                v72 = &v71[4 * v67];
                *(_DWORD *)v72 = v10;
                v65 = (unsigned int *)(v72 + 4);
                while (v62 != v66)
                {
                  v73 = *--v62;
                  *((_DWORD *)v72 - 1) = v73;
                  v72 -= 4;
                }
                *(_QWORD *)v61 = v72;
                *v63 = v65;
                *(_QWORD *)(v61 + 16) = &v71[4 * v70];
                if (v66)
                  operator delete(v66);
              }
              else
              {
                *v62 = v10;
                v65 = v62 + 1;
              }
              i &= ~(1 << v45);
            }
            v38 = 0;
            v37 += 4;
            v36 = v83;
          }
          while (v85 < v83);
        }
        v28 = v78 + 1;
      }
      while (v78 + 1 != v76);
    }
    v5 = v75 + 1;
  }
  while (v75 + 1 != v74);
}

void vfx_uniform_grid_fill3d(_QWORD *a1, float32x4_t *a2, unsigned int a3, float a4, double a5, double a6)
{
  float32x4_t v9;
  uint64_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  *(float *)&a6 = a4;
  v9 = *a2;
  if (a3 < 2)
  {
    v12 = *a2;
  }
  else
  {
    v10 = a3 - 1;
    v11 = a2 + 1;
    v12 = *a2;
    do
    {
      v13 = *v11++;
      v14 = v13;
      v12.i32[3] = 0;
      v14.i32[3] = 0;
      v12 = vminnmq_f32(v12, v14);
      v9.i32[3] = 0;
      v9 = vmaxnmq_f32(v9, v14);
      --v10;
    }
    while (v10);
  }
  sub_1B17F6E4C((uint64_t)a1, v12, v9, a6);
  sub_1B17F6DDC(a1, a2, a3);
  sub_1B17F685C((uint64_t)a1);
}

double sub_1B17F6DDC(_QWORD *a1, float32x4_t *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  double result;

  sub_1B17F83C8((uint64_t)a1, a2, a3);
  v6 = a1[15];
  v7 = 0;
  v8 = a1[16] - 1;
  if (a1[16] != 1)
  {
    v9 = (int *)a1[15];
    v10 = a1[16] - 1;
    do
    {
      v11 = *v9;
      *v9++ = v7;
      v7 += v11;
      --v10;
    }
    while (v10);
  }
  *(_DWORD *)(v6 + 4 * v8) = v7;
  *(_QWORD *)&result = sub_1B17F847C(a1, (uint64_t)a2, a3).n128_u64[0];
  return result;
}

void sub_1B17F6E4C(uint64_t a1, float32x4_t a2, float32x4_t a3, double a4)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  unint64_t v18;
  float32x4_t v19;

  v5 = vmulq_f32(vsubq_f32(a3, a2), (float32x4_t)vdupq_n_s32(0x3C23D70Au));
  v6 = vsubq_f32(a2, v5);
  v7 = vaddq_f32(a3, v5);
  v8 = vsubq_f32(v7, v6);
  *(float *)&a4 = fmaxf(*(float *)&a4, fmaxf(fmaxf(v8.f32[0], v8.f32[2]), v8.f32[1]) * 0.0039062);
  v9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  *(_DWORD *)(a1 + 112) = LODWORD(a4);
  *(float32x4_t *)(a1 + 64) = v7;
  *(float32x4_t *)(a1 + 80) = v9;
  __asm { FMOV            V1.4S, #1.0 }
  *(float32x4_t *)(a1 + 96) = vdivq_f32(_Q1, v9);
  v19 = v9;
  v15 = vcvtq_s32_f32(vdivq_f32(v8, v9));
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  v17 = vaddq_s32(v15, v16);
  *(int32x4_t *)a1 = v17;
  *(int32x4_t *)(a1 + 16) = v15;
  v16.i32[1] = v17.i32[0];
  v16.i32[2] = v17.i32[0] * v17.i32[1];
  *(int32x4_t *)(a1 + 32) = v16;
  *(float32x4_t *)(a1 + 48) = v6;
  v18 = v17.i32[0] * v17.i32[1] * v17.i32[2] + 1;
  *(_QWORD *)(a1 + 128) = v18;
  if (*(_QWORD *)(a1 + 136) >= v18)
  {
    bzero(*(void **)(a1 + 120), 4 * v18);
  }
  else
  {
    *(_QWORD *)(a1 + 136) = v18;
    free(*(void **)(a1 + 120));
    *(_QWORD *)(a1 + 120) = malloc_type_calloc(*(_QWORD *)(a1 + 128), 4uLL, 0x100004052888210uLL);
  }
  *(float32x4_t *)(a1 + 64) = vmlaq_f32(*(float32x4_t *)(a1 + 48), vcvtq_f32_s32(*(int32x4_t *)a1), v19);
  sub_1B17F76F8(a1 + 144, 0);
}

char *vfx_uniform_grid_add_points(uint64_t a1, char *__src, unsigned int a3)
{
  return sub_1B17F7858(a1 + 144, *(_QWORD *)(a1 + 152), __src, &__src[16 * a3], a3);
}

double vfx_uniform_grid_finalize(uint64_t a1)
{
  return sub_1B17F6DDC((_QWORD *)a1, *(float32x4_t **)(a1 + 144), (*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 4);
}

uint64_t sub_1B17F6FA8(uint64_t a1, uint64_t a2, int a3)
{
  float32x4_t v5;
  int32x4_t v6;
  float v7;
  int32x4_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  float v15;
  uint64_t result;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  BOOL v31;
  __int32 v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  __int32 v41;
  __int32 v42;
  __int32 v43;
  __int32 v44;
  __int32 v45;
  __int32 v46;
  __int32 v47;
  __int32 v48;
  int32x4_t v49;
  _BYTE v50[4];
  __int32 v51;
  _BYTE *v52;
  float32x4_t v53;
  int v54;
  __int32 v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  __int32 v59;
  unsigned int v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v60 = 0;
  *(double *)v5.i64 = MEMORY[0x1E0C80A78](a1, a2);
  v55 = v8.i32[1];
  v59 = v8.i32[3];
  v53 = v5;
  v54 = v9;
  v56 = v10;
  v57 = &v50[-v11];
  v58 = v12;
  LOBYTE(v59) = v13;
  v15 = *(float *)(v14 + 112);
  if (v15 * 0.5 <= v7)
  {
    if (v7 >= v15)
    {
      sub_1B17F7AEC((char *)a1, 0, (*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 2, &v60, (uint64_t)&v53);
      return v60;
    }
    else
    {
      result = 0;
      v34.i64[0] = -1;
      v34.i64[1] = -1;
      v35 = vaddq_s32(v6, v34);
      v35.i32[3] = 0;
      v36 = vmaxq_s32(v35, v8);
      v37 = vaddq_s32(*(int32x4_t *)a1, v34);
      v38.i64[0] = 0x100000001;
      v38.i64[1] = 0x100000001;
      v39 = vaddq_s32(v6, v38);
      v37.i32[3] = 0;
      v39.i32[3] = 0;
      v40 = vminq_s32(v37, v39);
      v41 = v36.i32[2];
      v42 = v40.i32[2];
      if (v36.i32[2] <= v40.i32[2])
      {
        result = 0;
        v43 = v36.i32[1];
        v44 = v40.i32[1];
        v45 = v36.i32[0];
        v46 = v40.i32[0];
        v47 = v40.i32[0] + 1;
        v51 = v36.i32[1];
        v52 = v50;
        while (v43 > v44)
        {
LABEL_19:
          v31 = v41++ == v42;
          v43 = v51;
          if (v31)
            return result;
        }
        while (1)
        {
          v48 = v45;
          if (v45 <= v46)
            break;
LABEL_26:
          v31 = v43++ == v44;
          if (v31)
            goto LABEL_19;
        }
        while (1)
        {
          v36.i64[0] = __PAIR64__(v43, v48);
          v36.i32[2] = v41;
          v49 = vmulq_s32(*(int32x4_t *)(a1 + 32), v36);
          v49.i32[0] = vaddq_s32(vaddq_s32(v49, vdupq_lane_s32(*(int32x2_t *)v49.i8, 1)), vdupq_laneq_s32(v49, 2)).u32[0];
          sub_1B17F7AEC((char *)a1, *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v49.u32[0]), *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * (v49.i32[0] + 1)), &v60, (uint64_t)&v53);
          result = v60;
          if (a3)
          {
            if (v60 == a3)
              break;
          }
          if (v47 == ++v48)
            goto LABEL_26;
        }
      }
    }
  }
  else
  {
    result = 0;
    v17.i64[0] = 0x3F0000003F000000;
    v17.i64[1] = 0x3F0000003F000000;
    v18 = vmlaq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a1 + 80), vaddq_f32(vcvtq_f32_s32(v6), v17));
    v17.i64[0] = -1;
    v17.i64[1] = -1;
    v19 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v18, v5), (int8x16_t)v6, (int8x16_t)vaddq_s32(v6, (int32x4_t)v17));
    v19.i32[3] = 0;
    v20 = vmaxq_s32(v19, v8);
    v21 = vaddq_s32(*(int32x4_t *)a1, (int32x4_t)v17);
    v17.i64[0] = 0x100000001;
    v17.i64[1] = 0x100000001;
    v22 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v5, v18), (int8x16_t)v6, (int8x16_t)vaddq_s32(v6, (int32x4_t)v17));
    v21.i32[3] = 0;
    v22.i32[3] = 0;
    v23 = vminq_s32(v21, v22);
    v24 = v20.i32[2];
    v25 = v23.i32[2];
    if (v20.i32[2] <= v23.i32[2])
    {
      result = 0;
      v26 = v20.i32[1];
      v27 = v23.i32[1];
      v28 = v20.i32[0];
      v29 = v23.i32[0];
      v30 = v23.i32[0] + 1;
      v51 = v20.i32[1];
      v52 = v50;
      while (v26 > v27)
      {
LABEL_5:
        v31 = v24++ == v25;
        v26 = v51;
        if (v31)
          return result;
      }
      while (1)
      {
        v32 = v28;
        if (v28 <= v29)
          break;
LABEL_12:
        v31 = v26++ == v27;
        if (v31)
          goto LABEL_5;
      }
      while (1)
      {
        v23.i64[0] = __PAIR64__(v26, v32);
        v23.i32[2] = v24;
        v33 = vmulq_s32(*(int32x4_t *)(a1 + 32), v23);
        v33.i32[0] = vaddq_s32(vaddq_s32(v33, vdupq_lane_s32(*(int32x2_t *)v33.i8, 1)), vdupq_laneq_s32(v33, 2)).u32[0];
        sub_1B17F7AEC((char *)a1, *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * v33.u32[0]), *(_DWORD *)(*(_QWORD *)(a1 + 120) + 4 * (v33.i32[0] + 1)), &v60, (uint64_t)&v53);
        result = v60;
        if (a3)
        {
          if (v60 == a3)
            break;
        }
        if (v30 == ++v32)
          goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t vfx_uniform_grid_apply(uint64_t result, unsigned int a2, uint64_t a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*(_QWORD *)(result + 288) + 24 * a2);
  if (((v3[1] - *v3) >> 2))
    return (*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
  return result;
}

uint64_t vfx_uniform_grid_find(uint64_t a1, unsigned int a2, void *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 288) + 24 * a2;
  v5 = (*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 2;
  if (a3)
  {
    bzero(a3, 4 * a4);
    if ((_DWORD)v5)
    {
      if (v5 >= a4)
        v5 = a4;
      else
        v5 = v5;
      memcpy(a3, *(const void **)v4, 4 * v5);
    }
  }
  return v5;
}

uint64_t vfx_uniform_grid_get_count(uint64_t a1, unsigned int a2)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 288) + 24 * a2 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 288) + 24 * a2)) >> 2;
}

__n128 vfx_uniform_grid_get_aabb(uint64_t a1, _OWORD *a2, __n128 *a3)
{
  __n128 result;

  *a2 = *(_OWORD *)(a1 + 48);
  result = *(__n128 *)(a1 + 64);
  *a3 = result;
  return result;
}

float32x4_t *vfx_uniform_grid_for_each_cell(float32x4_t *result, uint64_t a2, double a3, int32x4_t a4)
{
  uint64_t v4;
  float32x4_t *v6;
  uint64_t i;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int32 v11;
  unsigned int v12;
  signed int v13;
  float32x4_t v14;
  __n128 v15;

  v4 = (result->i32[0] * result->i32[1] * result->i32[2]);
  if ((_DWORD)v4)
  {
    v6 = result;
    for (i = 0; i != v4; ++i)
    {
      v8 = *(_DWORD *)(v6[7].i64[1] + 4 * i);
      v9 = *(_DWORD *)(v6[7].i64[1] + 4 * i + 4);
      v10 = (v9 - v8);
      if (v9 != v8)
      {
        v11 = v6[2].u32[2];
        v12 = i / v11;
        v13 = i % v11;
        a4.i32[0] = v13 % v6->i32[0];
        a4.i32[1] = v13 / v6->i32[0];
        a4.i32[2] = v12;
        v14 = v6[5];
        v15 = (__n128)vmlaq_f32(v6[3], v14, vcvtq_f32_s32(a4));
        result = (float32x4_t *)(*(uint64_t (**)(uint64_t, uint64_t, __n128, float32x4_t))(a2 + 16))(a2, v10, v15, vaddq_f32(v14, (float32x4_t)v15));
      }
    }
  }
  return result;
}

void sub_1B17F749C(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1B17F7BCC(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1B17F7530(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B17F7E58(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1B17F75C0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v9;

  free(*(void **)(a1 + 120));
  *(_QWORD *)(a1 + 120) = 0;
  v9 = (void **)(a1 + 288);
  sub_1B17F7664(&v9);
  v2 = *(void **)(a1 + 264);
  if (v2)
  {
    *(_QWORD *)(a1 + 272) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 240);
  if (v3)
  {
    *(_QWORD *)(a1 + 248) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 216);
  if (v4)
  {
    *(_QWORD *)(a1 + 224) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 192);
  if (v5)
  {
    *(_QWORD *)(a1 + 200) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 168);
  if (v6)
  {
    *(_QWORD *)(a1 + 176) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 144);
  if (v7)
  {
    *(_QWORD *)(a1 + 152) = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_1B17F7664(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1B17F76A4((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1B17F76A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_1B17F76F8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_1B17F7728((void **)a1, a2 - v2);
  }
}

void sub_1B17F7728(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      abort();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_1B17F7824(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *sub_1B17F7824(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_1B179C4A8();
  return operator new(16 * a2);
}

char *sub_1B17F7858(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 4);
    if (v14 >> 60)
      abort();
    v15 = (__dst - (uint64_t)v13) >> 4;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 3 > v14)
      v14 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)sub_1B17F7824(v9, v17);
    else
      v18 = 0;
    v28 = &v18[16 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[16 * v17];
    v29 = 16 * a5;
    v30 = &v28[16 * a5];
    do
    {
      v31 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    v35 = v30;
    v5 = sub_1B17F7A28((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 4;
  if (v20 >= a5)
  {
    v21 = &__src[16 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[16 * a5];
    v25 = &v23[-16 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-16 * ((v23 - v24) >> 4)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[16 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[16 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

char *sub_1B17F7A28(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int128 v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_OWORD *)v8 - 1);
      v8 -= 16;
      *((_OWORD *)v7 - 1) = v9;
      v7 -= 16;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

char *sub_1B17F7AEC(char *result, unsigned int a2, unsigned int a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v5;
  char *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v5 = a3 - a2;
  if (a3 > a2)
  {
    v8 = result;
    v9 = 4 * a2;
    do
    {
      v10 = *(float *)(*((_QWORD *)v8 + 21) + v9) - *(float *)a5;
      v11 = *(float *)(*((_QWORD *)v8 + 24) + v9) - *(float *)(a5 + 4);
      v12 = *(float *)(*((_QWORD *)v8 + 27) + v9) - *(float *)(a5 + 8);
      v13 = (float)((float)(v11 * v11) + (float)(v10 * v10)) + (float)(v12 * v12);
      if (v13 < *(float *)(a5 + 16))
      {
        v14 = *(_DWORD *)(a5 + 40);
        if (!v14)
        {
          v16 = *a4 + 1;
LABEL_10:
          *a4 = v16;
          goto LABEL_11;
        }
        v15 = *(unsigned int *)(*((_QWORD *)v8 + 30) + v9);
        if (!*(_BYTE *)(a5 + 44))
        {
          v17 = *a4;
          if (v17 >= v14)
            return result;
          *(_QWORD *)(*(_QWORD *)(a5 + 24) + 8 * v17) = v15;
          v16 = v17 + 1;
          goto LABEL_10;
        }
        result = sub_1B17F65F8(*(char **)(a5 + 24), *(_QWORD *)(a5 + 32), v15, a4, v14, v13);
      }
LABEL_11:
      v9 += 4;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1B17F7BCC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1B17F7D88(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1B17F7D18(a1, &v15);
    sub_1B17F7DCC((uint64_t)&v15);
  }
}

_QWORD *sub_1B17F7D18(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1B17F7D88(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1B179C4A8();
  return operator new(24 * a2);
}

uint64_t sub_1B17F7DCC(uint64_t a1)
{
  sub_1B17F7E00(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B17F7E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void *sub_1B17F7E58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_1B179C4A8();
  return operator new(4 * a2);
}

void sub_1B17F7E8C(uint64_t a1, unint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int v14;

  v6 = a3;
  sub_1B17F8000(a1 + 264, a3);
  if (a3)
  {
    v7 = *(_QWORD *)(a1 + 120);
    v8 = (_DWORD *)(*(_QWORD *)(a1 + 264) + 4);
    do
    {
      v9 = *a2++;
      v10 = *(int32x4_t *)(a1 + 16);
      v10.i32[3] = 0;
      v11 = vcvtq_s32_f32(vmulq_f32(*(float32x4_t *)(a1 + 96), vsubq_f32((float32x4_t)v9, *(float32x4_t *)(a1 + 48))));
      v11.i32[3] = 0;
      v12 = vminq_s32(v10, v11);
      v12.i32[3] = 0;
      v13 = vmulq_s32(*(int32x4_t *)(a1 + 32), vmaxq_s32(v12, (int32x4_t)0));
      v13.i32[0] = vaddq_s32(vaddq_s32(v13, vdupq_lane_s32(*(int32x2_t *)v13.i8, 1)), vdupq_laneq_s32(v13, 2)).u32[0];
      v14 = *(_DWORD *)(v7 + 4 * v13.u32[0]);
      *(_DWORD *)(v7 + 4 * v13.u32[0]) = v14 + 1;
      *(v8 - 1) = v13.i32[0];
      *v8 = v14;
      v8 += 2;
      --v6;
    }
    while (v6);
  }
}

double sub_1B17F7F48(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;

  v6 = a3;
  sub_1B17F8160((uint64_t)(a1 + 21), a3);
  sub_1B17F8160((uint64_t)(a1 + 24), v6);
  sub_1B17F8160((uint64_t)(a1 + 27), v6);
  sub_1B17F8190((uint64_t)(a1 + 30), v6);
  if (a3)
  {
    v8 = 0;
    v9 = a1[15];
    v10 = a1[21];
    v11 = a1[24];
    v12 = a1[27];
    v13 = a1[30];
    v14 = (_DWORD *)(a1[33] + 4);
    do
    {
      v15 = *v14 + *(_DWORD *)(v9 + 4 * *(v14 - 1));
      result = *(double *)(a2 + 8 * v8);
      *(_DWORD *)(v10 + 4 * v15) = LODWORD(result);
      *(_DWORD *)(v11 + 4 * v15) = HIDWORD(result);
      *(_DWORD *)(v12 + 4 * v15) = 0;
      *(_DWORD *)(v13 + 4 * v15) = v8++;
      v14 += 2;
    }
    while (v6 != v8);
  }
  return result;
}

void sub_1B17F8000(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1B17F8030((void **)a1, a2 - v2);
  }
}

void sub_1B17F8030(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_1B17F812C(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *sub_1B17F812C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_1B179C4A8();
  return operator new(8 * a2);
}

void sub_1B17F8160(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1B17F81C0((char **)a1, a2 - v2);
  }
}

void sub_1B17F8190(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_1B17F82C4((char **)a1, a2 - v2);
  }
}

void sub_1B17F81C0(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      abort();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1B17F7E58(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_1B17F82C4(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      abort();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1B17F7E58(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_1B17F83C8(uint64_t a1, float32x4_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  float32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int v14;

  v6 = a3;
  sub_1B17F8000(a1 + 264, a3);
  if (a3)
  {
    v7 = *(_QWORD *)(a1 + 120);
    v8 = (_DWORD *)(*(_QWORD *)(a1 + 264) + 4);
    do
    {
      v9 = *a2++;
      v10 = *(int32x4_t *)(a1 + 16);
      v10.i32[3] = 0;
      v11 = vcvtq_s32_f32(vmulq_f32(vsubq_f32(v9, *(float32x4_t *)(a1 + 48)), *(float32x4_t *)(a1 + 96)));
      v11.i32[3] = 0;
      v12 = vminq_s32(v10, v11);
      v12.i32[3] = 0;
      v13 = vmulq_s32(*(int32x4_t *)(a1 + 32), vmaxq_s32(v12, (int32x4_t)0));
      v13.i32[0] = vaddq_s32(vaddq_s32(v13, vdupq_lane_s32(*(int32x2_t *)v13.i8, 1)), vdupq_laneq_s32(v13, 2)).u32[0];
      v14 = *(_DWORD *)(v7 + 4 * v13.u32[0]);
      *(_DWORD *)(v7 + 4 * v13.u32[0]) = v14 + 1;
      *(v8 - 1) = v13.i32[0];
      *v8 = v14;
      v8 += 2;
      --v6;
    }
    while (v6);
  }
}

__n128 sub_1B17F847C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;

  v6 = a3;
  sub_1B17F8160((uint64_t)(a1 + 21), a3);
  sub_1B17F8160((uint64_t)(a1 + 24), v6);
  sub_1B17F8160((uint64_t)(a1 + 27), v6);
  sub_1B17F8190((uint64_t)(a1 + 30), v6);
  if (a3)
  {
    v8 = 0;
    v9 = a1[15];
    v10 = a1[21];
    v11 = a1[24];
    v12 = a1[27];
    v13 = a1[30];
    v14 = (_DWORD *)(a1[33] + 4);
    do
    {
      result = *(__n128 *)(a2 + 16 * v8);
      v15 = *v14 + *(_DWORD *)(v9 + 4 * *(v14 - 1));
      *(_DWORD *)(v10 + 4 * v15) = result.n128_u32[0];
      *(_DWORD *)(v11 + 4 * v15) = result.n128_u32[1];
      *(_DWORD *)(v12 + 4 * v15) = result.n128_u32[2];
      *(_DWORD *)(v13 + 4 * v15) = v8++;
      v14 += 2;
    }
    while (v6 != v8);
  }
  return result;
}

void sub_1B17F86A4(uint64_t a1, unint64_t a2, __int128 *a3, __int128 *a4)
{
  uint64_t v8;
  __int128 *v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;

  v8 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(a1 + 64))
    *(_QWORD *)(a1 + 64) = sub_1B181DE74(CFSTR("ManipulatorWireframe_vert"), CFSTR("ManipulatorWireframe_frag"));
  v31 = 0uLL;
  if (a3)
  {
    v31 = *a3;
    if (a4)
      goto LABEL_5;
LABEL_11:
    v29 = (__n128)xmmword_1B2246340;
    v30 = (__n128)unk_1B2246350;
    v27 = (__n128)xmmword_1B2246320;
    v28 = (__n128)unk_1B2246330;
    goto LABEL_12;
  }
  sub_1B179CD74((float *)&v31, 1.0, 1.0, 1.0, 1.0);
  if (!a4)
    goto LABEL_11;
LABEL_5:
  v9 = (__int128 *)sub_1B1815A5C(v8, 1);
  v10 = (float32x4_t *)sub_1B1815A5C(v8, 0);
  v11 = 0;
  v12 = *v10;
  v13 = v10[1];
  v14 = v10[2];
  v15 = v10[3];
  v16 = v9[1];
  v17 = v9[2];
  v18 = v9[3];
  v32 = *v9;
  v33 = v16;
  v34 = v17;
  v35 = v18;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v36 + v11) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(__int128 *)((char *)&v32 + v11))), v13, *(float32x2_t *)((char *)&v32 + v11), 1), v14, *(float32x4_t *)((char *)&v32 + v11), 2), v15, *(float32x4_t *)((char *)&v32 + v11), 3);
    v11 += 16;
  }
  while (v11 != 64);
  v19 = 0;
  v20 = v36;
  v21 = v37;
  v22 = v38;
  v23 = v39;
  v24 = a4[1];
  v25 = a4[2];
  v26 = a4[3];
  v32 = *a4;
  v33 = v24;
  v34 = v25;
  v35 = v26;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v36 + v19) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(__int128 *)((char *)&v32 + v19))), v21, *(float32x2_t *)((char *)&v32 + v19), 1), v22, *(float32x4_t *)((char *)&v32 + v19), 2), v23, *(float32x4_t *)((char *)&v32 + v19), 3);
    v19 += 16;
  }
  while (v19 != 64);
  v27 = (__n128)v36;
  v28 = (__n128)v37;
  v29 = (__n128)v38;
  v30 = (__n128)v39;
LABEL_12:
  sub_1B181D5C0(*(void ***)(a1 + 65864), a2, v31, *((unint64_t *)&v31 + 1), v27, v28, v29, v30);
}

uint64_t sub_1B17F8830(uint64_t a1)
{
  VFXAuthoringEnvironment *v2;
  uint64_t v3;

  v2 = [VFXAuthoringEnvironment alloc];
  return MEMORY[0x1E0DE7D20](v2, sel__initWithEngineContext_, a1, v3);
}

void sub_1B17F8B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v10;
  __int16 *v11;
  unsigned int v12;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v43;
  _BOOL4 v44;
  _BOOL4 v46;
  uint64_t v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t VolatileMeshElementOfType_primitiveCount_bytesPerIndex;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _DWORD *v125;
  _DWORD *v126;
  _DWORD *v127;
  uint64_t v128;
  int *v129;
  _DWORD *v130;
  int v131;
  uint64_t v132;
  _DWORD *v133;
  _DWORD *v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  _WORD *v138;
  uint64_t v139;
  __int16 v140;
  void *v141;

  v10 = a5;
  v11 = (__int16 *)a4;
  v12 = a3;
  if ((*(_DWORD *)(a6 + 12) + a3) > *(_DWORD *)(a6 + 20)
    || (*(_DWORD *)(a6 + 8) + a5) > *(_DWORD *)(a6 + 24))
  {
    if (!(_DWORD)a7)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Cannot append manipulator vertex data because we encountered an overflow and we are not allowed to flush"), a3, a4, a5, a6, a7, a8, a9);
      return;
    }
    if (*(_DWORD *)(a6 + 8))
      sub_1B17F90F0(a1, a6, a3, a4, a5, a6, a7, a8);
  }
  if (!*(_QWORD *)(a6 + 56))
  {
    if (*(_BYTE *)(a6 + 53))
    {
      v15 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
      if (objc_msgSend_count(*(void **)(a6 + 128), v16, v17, v18))
      {
        v22 = (const void *)objc_msgSend_anyObject(*(void **)(a6 + 128), v19, v20, v21);
        objc_msgSend_addObject_(*(void **)(a6 + 120), v23, (uint64_t)v22, v24);
        objc_msgSend_removeObject_(*(void **)(a6 + 128), v25, (uint64_t)v22, v26);
      }
      else
      {
        v22 = (const void *)sub_1B1874190();
        objc_msgSend_addObject_(*(void **)(a6 + 120), v34, (uint64_t)v22, v35);
        CFRelease(v22);
        v43 = a1 + 72 == a6 || a1 + 224 == a6 || a1 + 1136 == a6;
        v44 = 1;
        v141 = v15;
        if (a1 + 376 != a6 && a1 + 528 != a6 && a1 + 832 != a6)
          v44 = a1 + 680 == a6 || a1 + 984 == a6;
        v46 = v43;
        if (v43)
          v47 = 2;
        else
          v47 = 3;
        v48 = (const void *)sub_1B1847180(0, v47, 1, v36, v37, v38, v39, v40);
        sub_1B1874ECC((uint64_t)v22, v48, 0, 0, v49, v50, v51, v52);
        if (v48)
          CFRelease(v48);
        v53 = v46;
        if (v44 || v46 || a1 + 1288 == a6)
        {
          v54 = (const void *)sub_1B1847180(2, 4, 20, v29, v30, v31, v32, v33);
          sub_1B1874ECC((uint64_t)v22, v54, 0, 0, v55, v56, v57, v58);
          if (v54)
            CFRelease(v54);
        }
        v15 = v141;
        if (v53)
        {
          v59 = (const void *)sub_1B1847180(3, 2, 1, v29, v30, v31, v32, v33);
          sub_1B1874ECC((uint64_t)v22, v59, 0, 0, v60, v61, v62, v63);
          if (v59)
            CFRelease(v59);
        }
        *(_QWORD *)(a6 + 20) = 0x200000002000;
      }
      if (*(_BYTE *)(a6 + 48) == 1)
      {
        VolatileMeshElementOfType_primitiveCount_bytesPerIndex = objc_msgSend_createVolatileMeshElementOfType_primitiveCount_bytesPerIndex_(v15, v27, 2, 4096, 2);
      }
      else if (*(_BYTE *)(a6 + 48))
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Only GL_LINES and kCFXManipulatorDrawModeTriangles are supported"), v28, v29, v30, v31, v32, v33, (uint64_t)"0");
        VolatileMeshElementOfType_primitiveCount_bytesPerIndex = objc_msgSend_createVolatileMeshElementOfType_primitiveCount_bytesPerIndex_(v15, v72, 0, 0x2000, 2);
      }
      else
      {
        VolatileMeshElementOfType_primitiveCount_bytesPerIndex = objc_msgSend_createVolatileMeshElementOfType_primitiveCount_bytesPerIndex_(v15, v27, 0, 2730, 2);
      }
      *(_QWORD *)(a6 + 56) = v22;
      *(_QWORD *)(a6 + 64) = VolatileMeshElementOfType_primitiveCount_bytesPerIndex;
      if (v15)
        objc_msgSend_mapVolatileMesh_verticesCount_(v15, v65, (uint64_t)v22, 0x2000);
      if (*(_DWORD *)(a6 + 12))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. basevertex should be 0 here."), v66, v67, v68, v69, v70, v71, (uint64_t)"glInfo->baseVertex == 0");
      v73 = sub_1B1875540(*(_QWORD *)(a6 + 56), 0, 0, 1, v68, v69, v70, v71);
      v81 = (_QWORD *)sub_1B17EE3B4((uint64_t)v73, v74, v75, v76, v77, v78, v79, v80);
      *(_QWORD *)(a6 + 72) = sub_1B18F3B74((uint64_t)v81);
      *(_QWORD *)(a6 + 96) = sub_1B18F3AB8(v81, 0, v82, v83, v84, v85, v86, v87);
      v92 = (uint64_t)sub_1B1875540(*(_QWORD *)(a6 + 56), 3, 0, 1, v88, v89, v90, v91);
      if (v92)
      {
        v100 = (_QWORD *)sub_1B17EE3B4(v92, v93, v94, v95, v96, v97, v98, v99);
        *(_QWORD *)(a6 + 88) = sub_1B18F3B74((uint64_t)v100);
        v92 = sub_1B18F3AB8(v100, 0, v101, v102, v103, v104, v105, v106);
      }
      else
      {
        *(_QWORD *)(a6 + 88) = 0;
      }
      *(_QWORD *)(a6 + 112) = v92;
      v107 = (uint64_t)sub_1B1875540(*(_QWORD *)(a6 + 56), 2, 0, 1, v96, v97, v98, v99);
      if (v107)
      {
        v108 = (_QWORD *)sub_1B17EE3B4(v107, a2, a3, a4, a5, a6, a7, a8);
        *(_QWORD *)(a6 + 80) = sub_1B18F3B74((uint64_t)v108);
        v107 = sub_1B18F3AB8(v108, 0, v109, v110, v111, v112, v113, v114);
      }
      else
      {
        *(_QWORD *)(a6 + 80) = 0;
      }
      *(_QWORD *)(a6 + 104) = v107;
      if (*(_DWORD *)(a6 + 8))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Base index should be reset at this point\n"), a3, a4, a5, a6, a7, a8, (uint64_t)"glInfo->baseIndex == 0");
    }
    if (!*(_QWORD *)(a6 + 56))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. A mesh should have been allocated by now"), a3, a4, a5, a6, a7, a8, (uint64_t)"glInfo->mesh != NULL");
  }
  v115 = *(_QWORD *)(a6 + 72);
  v116 = *(_QWORD *)(a6 + 96);
  v118 = *(unsigned int *)(a6 + 12);
  v117 = *(_DWORD *)(a6 + 16);
  v119 = v115 * v118;
  if (v117 == 12)
  {
    if (v12)
    {
      v128 = v12;
      v129 = (int *)(a2 + 8);
      v130 = (_DWORD *)(v119 + v116 + 8);
      do
      {
        *(v130 - 2) = *(v129 - 2);
        *(v130 - 1) = *(v129 - 1);
        v131 = *v129;
        v129 += 3;
        *v130 = v131;
        v130 = (_DWORD *)((char *)v130 + v115);
        --v128;
      }
      while (v128);
    }
  }
  else
  {
    v120 = *(_QWORD *)(a6 + 80);
    v121 = (_DWORD *)(*(_QWORD *)(a6 + 104) + v120 * v118);
    if (v117 == 16)
    {
      if (v12)
      {
        v132 = v12;
        v133 = (_DWORD *)(a2 + 8);
        v134 = (_DWORD *)(v119 + v116 + 8);
        do
        {
          *(v134 - 2) = *(v133 - 2);
          *(v134 - 1) = *(v133 - 1);
          *v134 = *v133;
          *v121 = v133[1];
          v133 += 4;
          v134 = (_DWORD *)((char *)v134 + v115);
          v121 = (_DWORD *)((char *)v121 + v120);
          --v132;
        }
        while (v132);
      }
    }
    else if (v117 == 20 && v12)
    {
      v122 = *(_QWORD *)(a6 + 88);
      v123 = v122 * v118;
      v124 = v12;
      v125 = (_DWORD *)(v119 + v116 + 4);
      v126 = (_DWORD *)(a2 + 8);
      v127 = (_DWORD *)(v123 + *(_QWORD *)(a6 + 112) + 4);
      do
      {
        *(v125 - 1) = *(v126 - 2);
        *v125 = *(v126 - 1);
        *v121 = v126[2];
        *(v127 - 1) = *v126;
        v125 = (_DWORD *)((char *)v125 + v115);
        *v127 = v126[1];
        v121 = (_DWORD *)((char *)v121 + v120);
        v126 += 5;
        v127 = (_DWORD *)((char *)v127 + v122);
        --v124;
      }
      while (v124);
    }
  }
  v135 = sub_1B17A5108(*(_QWORD *)(a6 + 64), a2, a3, a4, a5, a6, a7, a8);
  v136 = *(unsigned int *)(a6 + 8);
  if (v135)
  {
    v137 = *(_DWORD *)(a6 + 12);
    if (v10)
    {
      v138 = (_WORD *)(v135 + 2 * v136);
      v139 = v10;
      do
      {
        v140 = *v11++;
        *v138++ = v140 + v137;
        --v139;
      }
      while (v139);
    }
  }
  else
  {
    v137 = *(_DWORD *)(a6 + 12);
  }
  *(_DWORD *)(a6 + 8) = v136 + v10;
  *(_DWORD *)(a6 + 12) = v137 + v12;
}

void sub_1B17F90F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unsigned int v20;
  __n128 *v21;
  void *v22;
  float v23;
  float v24;
  __n128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  double v29;
  __int128 *v30;
  float32x4_t *v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  __int128 v46;
  double v47;
  __int128 v48;
  double v49;
  __int128 v50;
  double v51;
  __int128 v52;
  double v53;
  _OWORD v54[4];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    v18 = v10;
    v19 = *(_QWORD *)(a2 + 56);
    if (v19)
      objc_msgSend_unmapVolatileMesh_modifiedVerticesCount_(v10, v11, v19, *(unsigned int *)(a2 + 12));
    v12 = *(_QWORD *)(a2 + 64);
    if (v12)
      objc_msgSend_unmapVolatileMeshElement_(v18, v11, v12, v13);
  }
  if (!*(_QWORD *)(a2 + 56))
    goto LABEL_29;
  if (*(_BYTE *)(a2 + 53))
  {
    if (!*(_DWORD *)(a2 + 12))
      goto LABEL_29;
    if (*(_BYTE *)(a2 + 48) == 1)
    {
      v20 = *(_DWORD *)(a2 + 8) >> 1;
      goto LABEL_13;
    }
    if (!*(_BYTE *)(a2 + 48))
    {
      v20 = *(_DWORD *)(a2 + 8) / 3u;
LABEL_13:
      sub_1B17A45A8(*(_QWORD *)(a2 + 64), 0, v20);
    }
  }
  v21 = *(__n128 **)(a1 + 8);
  v22 = (void *)sub_1B1813BC4((uint64_t)v21, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
  v23 = sub_1B1815C9C((uint64_t)v21);
  if (*(_BYTE *)(a2 + 49))
  {
    v24 = v23;
    v25 = sub_1B1815A98(v21);
    v26 = vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, v24 * (float)(2.0 / v25.n128_f32[2])).u64[0];
    v27 = vmulq_n_f32((float32x4_t)xmmword_1B2244DD0, v24 * (float)(2.0 / v25.n128_f32[3])).u64[0];
    *(double *)&v28 = -0.00781250557;
    v29 = 0.0;
    if (!v22)
      goto LABEL_29;
  }
  else
  {
    v30 = (__int128 *)sub_1B1815A5C((uint64_t)v21, 1);
    v50 = v30[1];
    v52 = *v30;
    v46 = v30[3];
    v48 = v30[2];
    v31 = (float32x4_t *)sub_1B1815A5C((uint64_t)v21, 0);
    v32 = 0;
    v33 = *v31;
    v34 = v31[1];
    v35 = v31[2];
    v36 = v31[3];
    v54[0] = v52;
    v54[1] = v50;
    v54[2] = v48;
    v54[3] = v46;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    do
    {
      *(__int128 *)((char *)&v55 + v32 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, COERCE_FLOAT(v54[v32])), v34, *(float32x2_t *)&v54[v32], 1), v35, (float32x4_t)v54[v32], 2), v36, (float32x4_t)v54[v32], 3);
      ++v32;
    }
    while (v32 != 4);
    v26 = *(unint64_t *)&v55;
    v27 = *(unint64_t *)&v56;
    v29 = *(double *)&v57;
    v28 = *(unint64_t *)&v58;
    if (!v22)
      goto LABEL_29;
  }
  v37 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v38 = 1568;
    if (!*(_BYTE *)(a2 + 52))
      v38 = 1584;
    v39 = 1576;
    if (!*(_BYTE *)(a2 + 52))
      v39 = 1592;
    if (*(_BYTE *)(a2 + 51))
      v40 = v38;
    else
      v40 = v39;
    v41 = *(_QWORD *)(a1 + v40);
    v42 = *(_QWORD *)(a2 + 56);
    v43 = *(_QWORD *)(a2 + 64);
    v47 = *(double *)&v26;
    v49 = *(double *)&v27;
    v51 = v29;
    v53 = *(double *)&v28;
    v44 = sub_1B18A7BA0();
    objc_msgSend_renderMesh_meshElement_withProgram_engineContext_transform_color_rasterizerStates_blendState_texture_depthBias_(v22, v45, v42, v43, v37, v21, 0, v41, v47, v49, v51, v53, v44, *(_QWORD *)(a2 + 32), 0);
  }
LABEL_29:
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
}

uint64_t sub_1B17F9364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const void *v11;

  v10 = a1 + 65816;
  if (*(_BYTE *)(a1 + 65816) || sub_1B17FF114((void *)a1) || *(_BYTE *)(v10 + 32))
  {
    v11 = (const void *)sub_1B1813884(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v11, 0, 1u);
  }
  return MEMORY[0x1E0DE7D20](a1, sel_worldDidChange_, a2, a4);
}

uint64_t sub_1B17F93E0(_DWORD *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  objc_sync_enter(a1);
  a1[16468] = 0;
  objc_msgSend_update(a1, v2, v3, v4);
  return objc_sync_exit(a1);
}

void sub_1B17F9418(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B17F942C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v9 = (uint64_t)(a1 + 9);
  sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 9), a3, a4, a5, a6, a7, a8);
  sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 28), v10, v11, v12, v13, v14, v15);
  sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 47), v16, v17, v18, v19, v20, v21);
  sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 66), v22, v23, v24, v25, v26, v27);
  sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 85), v28, v29, v30, v31, v32, v33);
  sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 104), v34, v35, v36, v37, v38, v39);
  sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 123), v40, v41, v42, v43, v44, v45);
  sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 142), v46, v47, v48, v49, v50, v51);
  sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 161), v52, v53, v54, v55, v56, v57);
  sub_1B17F955C(a1, v9);
  sub_1B17F955C(a1, (uint64_t)(a1 + 28));
  sub_1B17F955C(a1, (uint64_t)(a1 + 47));
  sub_1B17F955C(a1, (uint64_t)(a1 + 66));
  sub_1B17F955C(a1, (uint64_t)(a1 + 85));
  sub_1B17F955C(a1, (uint64_t)(a1 + 104));
  sub_1B17F955C(a1, (uint64_t)(a1 + 123));
  sub_1B17F955C(a1, (uint64_t)(a1 + 142));
  return sub_1B17F955C(a1, (uint64_t)(a1 + 161));
}

_QWORD *sub_1B17F955C(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 53))
  {
    v3 = result[1];
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v4 = *(void **)(a2 + 120);
    v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, (const char *)a2, (uint64_t)&v38, (uint64_t)v43, 16);
    if (v5)
    {
      v8 = v5;
      v9 = *(_QWORD *)v39;
      do
      {
        for (i = 0; i != v8; ++i)
        {
          if (*(_QWORD *)v39 != v9)
            objc_enumerationMutation(v4);
          objc_msgSend_addObject_(*(void **)(a2 + 128), v6, *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * i), v7);
        }
        v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v38, (uint64_t)v43, 16);
      }
      while (v8);
    }
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v11 = *(void **)(a2 + 136);
    v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v6, (uint64_t)&v34, (uint64_t)v42, 16);
    if (v12)
    {
      v16 = v12;
      v17 = *(_QWORD *)v35;
      do
      {
        for (j = 0; j != v16; ++j)
        {
          if (*(_QWORD *)v35 != v17)
            objc_enumerationMutation(v11);
          objc_msgSend_addObject_(*(void **)(a2 + 144), v13, *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * j), v15);
        }
        v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v11, v13, (uint64_t)&v34, (uint64_t)v42, 16);
      }
      while (v16);
    }
    objc_msgSend_removeAllObjects(*(void **)(a2 + 120), v13, v14, v15);
    objc_msgSend_removeAllObjects(*(void **)(a2 + 136), v19, v20, v21);
    result = (_QWORD *)sub_1B1813BC4(v3, v22, v23, v24, v25, v26, v27, v28);
    if (result)
    {
      v31 = result;
      v32 = *(_QWORD *)(a2 + 56);
      if (v32)
        result = (_QWORD *)objc_msgSend_unmapVolatileMesh_modifiedVerticesCount_(result, v29, v32, *(unsigned int *)(a2 + 12));
      v33 = *(_QWORD *)(a2 + 64);
      if (v33)
        result = (_QWORD *)objc_msgSend_unmapVolatileMeshElement_(v31, v29, v33, v30);
    }
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  return result;
}

void sub_1B17F9728(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float *v12;
  float32x4_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;

  if ((sub_1B1814458(a1[1]) & 0x8000) != 0)
  {
    sub_1B17F9850(a1, (uint64_t)(a1 + 47), v2, v3, v4, v5, v6, v7);
    v11 = 0;
LABEL_6:
    v12 = (float *)&xmmword_1B22461E0;
    for (i = (float32x4_t)xmmword_1B2244DB0; ; i = v20)
    {
      while (1)
      {
        v20 = i;
        sub_1B17F9ADC((uint64_t)a1, 0, v12, v12, (uint64_t)(a1 + 47), (float32x4_t)0, i, v8, v9, v10);
        if (!++v11)
          goto LABEL_6;
        if (v11 != 1)
          break;
        v12 = (float *)&unk_1B22461F0;
        i = (float32x4_t)xmmword_1B2244DD0;
      }
      if (v11 == 2)
        break;
      v12 = 0;
    }
    sub_1B17F9ADC((uint64_t)a1, 0, flt_1B2246200, flt_1B2246200, (uint64_t)(a1 + 47), (float32x4_t)0, (float32x4_t)xmmword_1B2244DF0, v8, v9, v10);
    sub_1B17F90F0((uint64_t)a1, (uint64_t)(a1 + 85), v14, v15, v16, v17, v18, v19);
  }
}

void sub_1B17F9850(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10;
  uint64_t *v11;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  _BOOL4 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  int v32;
  uint64_t v33;

  if (!*(_QWORD *)a2)
  {
    v10 = a1 + 9 == (uint64_t *)a2 || a1 + 28 == (uint64_t *)a2;
    v11 = a1 + 47;
    v13 = v10 || a1 + 142 == (uint64_t *)a2;
    v14 = a1 + 66;
    v15 = a1 + 104;
    v16 = a1 + 123;
    v17 = a1 + 85;
    v22 = v11 == (uint64_t *)a2
       || v14 == (uint64_t *)a2
       || v15 == (uint64_t *)a2
       || v17 == (uint64_t *)a2
       || v16 == (uint64_t *)a2;
    if (!*(_QWORD *)(a2 + 120))
      *(_QWORD *)(a2 + 120) = (id)objc_msgSend_set(MEMORY[0x1E0C99E20], (const char *)a2, a3, a4);
    if (!*(_QWORD *)(a2 + 128))
      *(_QWORD *)(a2 + 128) = (id)objc_msgSend_set(MEMORY[0x1E0C99E20], (const char *)a2, a3, a4);
    if (!*(_QWORD *)(a2 + 136))
      *(_QWORD *)(a2 + 136) = (id)objc_msgSend_set(MEMORY[0x1E0C99E20], (const char *)a2, a3, a4);
    if (!*(_QWORD *)(a2 + 144))
      *(_QWORD *)(a2 + 144) = (id)objc_msgSend_set(MEMORY[0x1E0C99E20], (const char *)a2, a3, a4);
    v23 = a1 + 161;
    if (!sub_1B1813BC4(a1[1], a2, a3, a4, a5, a6, a7, a8))
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. There should be at lease a valid CFXRendererContext or a valid VFXRenderer"), v24, v25, v26, v27, v28, v29, (uint64_t)"0");
      goto LABEL_50;
    }
    if (v13)
    {
      v30 = (_QWORD *)a1[6];
      if (!v30)
      {
        v30 = sub_1B181DE74(CFSTR("ManipulatorColorAndTexture_vert"), CFSTR("ManipulatorColorAndTexture_frag"));
        a1[6] = (uint64_t)v30;
      }
      v31 = 20;
    }
    else if (v22)
    {
      v30 = (_QWORD *)a1[5];
      if (!v30)
      {
        v30 = sub_1B181DE74(CFSTR("ManipulatorColorOnly_vert"), CFSTR("ManipulatorColorOnly_frag"));
        a1[5] = (uint64_t)v30;
      }
      v31 = 16;
    }
    else
    {
      if (v23 != (uint64_t *)a2)
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unknown use of manipulators"), v24, v25, v26, v27, v28, v29, v33);
        goto LABEL_50;
      }
      v30 = (_QWORD *)a1[7];
      if (!v30)
      {
        v30 = sub_1B181DE74(CFSTR("ManipulatorLightProbe_vert"), CFSTR("ManipulatorLightProbe_frag"));
        a1[7] = (uint64_t)v30;
      }
      v31 = 12;
    }
    *(_DWORD *)(a2 + 16) = v31;
    *(_QWORD *)a2 = v30;
LABEL_50:
    if (v11 == (uint64_t *)a2)
    {
      *(_WORD *)(a2 + 48) = 1;
    }
    else
    {
      if (v14 == (uint64_t *)a2)
      {
        *(_WORD *)(a2 + 48) = 1;
        *(_WORD *)(a2 + 51) = 0;
        goto LABEL_60;
      }
      if (v15 == (uint64_t *)a2)
      {
        v32 = 257;
        goto LABEL_62;
      }
      if (v16 == (uint64_t *)a2)
      {
LABEL_56:
        v32 = 256;
LABEL_62:
        *(_DWORD *)(a2 + 48) = v32;
        *(_WORD *)(a2 + 52) = 256;
        goto LABEL_63;
      }
      if (v17 != (uint64_t *)a2)
      {
        if (v13)
          goto LABEL_56;
        if (v23 != (uint64_t *)a2)
        {
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unknown use of manipulators"), v24, v25, v26, v27, v28, v29, v33);
LABEL_63:
          if (!*(_QWORD *)a2)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. No program for the auth env!"), v24, v25, v26, v27, v28, v29, (uint64_t)"glInfo->weakProgram != nil");
          return;
        }
      }
      *(_WORD *)(a2 + 48) = 0;
    }
    *(_WORD *)(a2 + 51) = 1;
LABEL_60:
    *(_BYTE *)(a2 + 53) = 1;
    goto LABEL_63;
  }
}

void sub_1B17F9ADC(uint64_t a1, float32x4_t *a2, float *a3, float *a4, uint64_t a5, float32x4_t a6, float32x4_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  float32x4_t v10;
  float32x4_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  float v18;
  float v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int32 v22;
  int v23;
  unint64_t v24;
  unsigned __int32 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v10 = a2[1];
    v11 = a2[2];
    a7 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a2[3], v11, a7, 2), v10, *(float32x2_t *)a7.f32, 1), *a2, a7.f32[0]);
    a6 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a2[3], v11, a6, 2), v10, *(float32x2_t *)a6.f32, 1), *a2, a6.f32[0]);
  }
  v21 = a6.i64[0];
  v22 = a6.u32[2];
  v12 = (int)(float)(a3[3] * 255.0);
  v13 = (int)(float)(fminf(fmaxf(a3[2], 0.0), 1.0) * 255.0);
  v14 = (int)(float)(fminf(fmaxf(a3[1], 0.0), 1.0) * 255.0);
  v15 = (int)(float)(fminf(fmaxf(*a3, 0.0), 1.0) * 255.0);
  v16 = (int)(float)(a4[3] * 255.0);
  v17 = (int)(float)(fminf(fmaxf(a4[2], 0.0), 1.0) * 255.0);
  v18 = *a4;
  v19 = fminf(fmaxf(a4[1], 0.0), 1.0) * 255.0;
  v25 = a7.u32[2];
  v24 = a7.i64[0];
  v23 = (v12 << 24) | (v13 << 16) | (v14 << 8) | v15;
  v26 = (v16 << 24) | (v17 << 16) | ((int)v19 << 8) | (int)(float)(fminf(fmaxf(v18, 0.0), 1.0) * 255.0);
  HIDWORD(v20) = 0x10000;
  sub_1B17F8B98(a1, (uint64_t)&v21, 2, (uint64_t)&v20 + 4, 2, a5, 1, a10, v20);
}

void sub_1B17F9C48(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  _OWORD *v26;
  float32x4_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  float32x4_t v43;
  int32x2_t v44;
  __n128 v45;
  float v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int32x4_t v76;
  float32x4_t v77;
  int32x2_t v78;
  float32x4_t v79;
  _OWORD v80[4];
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;

  if (*(_BYTE *)(a1 + 65848))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      if ((sub_1B1814458(v2) & 0x20000) != 0)
      {
        if (*(_BYTE *)(a1 + 24))
        {
          v6 = *(void **)(a1 + 16);
          v7 = (void *)objc_msgSend_defaultCameraController(v6, v3, v4, v5);
          if (objc_msgSend_isTargetFromHitTest(v7, v8, v9, v10))
          {
            v14 = (void *)objc_msgSend_defaultCameraController(v6, v11, v12, v13);
            if ((unint64_t)(objc_msgSend_interactionMode(v14, v15, v16, v17) - 1) <= 3)
            {
              v21 = (void *)objc_msgSend_defaultCameraController(v6, v18, v19, v20);
              objc_msgSend_simdTarget(v21, v22, v23, v24);
              v77 = v25;
              v26 = (_OWORD *)sub_1B1815A5C(*(_QWORD *)(a1 + 8), 1);
              v27 = (float32x4_t *)sub_1B1815A5C(*(_QWORD *)(a1 + 8), 0);
              v35 = 0;
              v36 = *v27;
              v37 = v27[1];
              v38 = v27[2];
              v39 = v27[3];
              v40 = v26[1];
              v41 = v26[2];
              v42 = v26[3];
              v80[0] = *v26;
              v80[1] = v40;
              v80[2] = v41;
              v80[3] = v42;
              v81 = 0u;
              v82 = 0u;
              v83 = 0u;
              v84 = 0u;
              do
              {
                *(float32x4_t *)((char *)&v81 + v35 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v36, COERCE_FLOAT(v80[v35])), v37, *(float32x2_t *)&v80[v35], 1), v38, (float32x4_t)v80[v35], 2), v39, (float32x4_t)v80[v35], 3);
                ++v35;
              }
              while (v35 != 4);
              v43 = vaddq_f32(v84, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, v77.f32[0]), v82, *(float32x2_t *)v77.f32, 1), v83, v77, 2));
              if (v43.f32[3] > 0.001)
              {
                v76 = (int32x4_t)v43;
                sub_1B1813BC4(*(_QWORD *)(a1 + 8), v28, v29, v30, v31, v32, v33, v34);
                *(float *)v44.i32 = sub_1B1815C9C(*(_QWORD *)(a1 + 8));
                v78 = v44;
                v45 = sub_1B1815A98((__n128 *)*(_QWORD *)(a1 + 8));
                __asm
                {
                  FMOV            V2.2D, #1.0
                  FMOV            V1.2D, #0.5
                }
                v45.n128_u64[0] = (unint64_t)vdiv_f32(vrndm_f32(vcvt_f32_f64(vmulq_f64(vmulq_f64(vaddq_f64(vcvtq_f64_f32(vdiv_f32(*(float32x2_t *)v76.i8, (float32x2_t)vdup_laneq_s32(v76, 3))), _Q2), vcvt_hight_f64_f32((float32x4_t)v45)), _Q1))), (float32x2_t)vdup_lane_s32(v78, 0));
                v52 = v45.n128_f32[0] + -5.0;
                v53 = v45.n128_f32[0] + 5.0;
                v45.n128_u64[1] = v45.n128_u64[0];
                v79 = vaddq_f32((float32x4_t)v45, (float32x4_t)xmmword_1B2246030);
                v54 = v45.n128_f32[1] + -1.0;
                v55 = v45.n128_f32[1] + 1.0;
                sub_1B17F9850((uint64_t *)a1, a1 + 984, v56, v57, v58, v59, v60, v61);
                sub_1B17F9F44(a1, 0x3F8000003F800000, 0x3F8000003F800000, 0, a1 + 984, 1, v62, v63, v79.f32[0], v79.f32[1], v79.f32[2], v79.f32[3]);
                sub_1B17F9F44(a1, 0x3F8000003F800000, 0x3F8000003F800000, 0, a1 + 984, 1, v64, v65, v52, v54, v53, v55);
                sub_1B17F9F44(a1, 0, 0x3F80000000000000, 0, a1 + 984, 1, v66, v67, v79.f32[0] + 0.5, v79.f32[1] + 0.5, v79.f32[2] + -0.5, v79.f32[3] + -0.5);
                sub_1B17F9F44(a1, 0, 0x3F80000000000000, 0, a1 + 984, 1, v68, v69, v52 + 0.5, v54 + 0.5, v53 + -0.5, v55 + -0.5);
                sub_1B17F90F0(a1, a1 + 984, v70, v71, v72, v73, v74, v75);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1B17F9F44(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, float a11, float a12)
{
  uint64_t v21;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  float v28;
  int v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  int v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v21 = *(_QWORD *)(a5 + 32);
  if (a4)
  {
    if (!v21)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. __appendRect2D: uv but not texture"), a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"glInfo->textureImage != nil");
    v26 = a9;
    v27 = a10;
    v23 = a4[1];
    v28 = *a4;
    *(float *)&v29 = v23;
    v30 = ((int)(float)(*((float *)&a3 + 1) * 255.0) << 24) | ((int)(float)(fminf(fmaxf(*(float *)&a3, 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(*((float *)&a2 + 1), 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*(float *)&a2, 0.0), 1.0) * 255.0);
    v31 = a11;
    v32 = a10;
    v24 = a4[3];
    v33 = a4[2];
    v34 = v23;
    v35 = *(float *)&v30;
    v36 = a11;
    v37 = a12;
    v38 = v33;
    v39 = v24;
    v40 = v30;
    v41 = a9;
    v42 = a12;
    v43 = v28;
    v44 = v24;
    v45 = v30;
  }
  else
  {
    if (v21)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. __appendRect2D: no uv but texture"), a3, 0, a5, a6, a7, a8, (uint64_t)"glInfo->textureImage == nil");
    v26 = a9;
    v27 = a10;
    v28 = 0.0;
    v29 = ((int)(float)(*((float *)&a3 + 1) * 255.0) << 24) | ((int)(float)(fminf(fmaxf(*(float *)&a3, 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(*((float *)&a2 + 1), 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*(float *)&a2, 0.0), 1.0) * 255.0);
    *(float *)&v30 = a11;
    v31 = a10;
    v32 = 0.0;
    v33 = *(float *)&v29;
    v34 = a11;
    v35 = a12;
    v36 = 0.0;
    v37 = *(float *)&v29;
    v38 = a9;
    v39 = a12;
    v40 = 0;
    v41 = *(float *)&v29;
  }
  sub_1B17F8B98(a1, (uint64_t)&v26, 4, (uint64_t)&unk_1B2246290, 6, a5, a6, a8, v25);
}

double sub_1B17FA168(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double result;

  if (*(double *)(a1 + 1752) != 0.0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Can not nest two Timed record"), a4, a5, a6, a7, a8, a9, (uint64_t)"authoringEnvironment->_timedRecordingExpirationTime == 0");
  result = sub_1B1815800(*(_QWORD *)(a1 + 8)) + a2;
  *(double *)(a1 + 1752) = result;
  return result;
}

uint64_t sub_1B17FA1D4(uint64_t result)
{
  *(_QWORD *)(result + 1752) = 0;
  return result;
}

void sub_1B17FA1DC(uint64_t a1, int a2, void *__src, uint64_t __n, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v8 = (unsigned int *)(a1 + 65760);
  v9 = (__n + 31) & 0xFFFFFFF0;
  v10 = *(unsigned int *)(a1 + 65764);
  v11 = v10 + v9;
  if ((v10 + v9) >> 9 >= 0x7D)
  {
    if (v11 == 64000)
    {
      v12 = 64000 - v10;
      v13 = *(_QWORD *)(a1 + 1752);
      v14 = a1 + v10;
      *(_DWORD *)(v14 + 1760) = -1;
      *(_DWORD *)(v14 + 1764) = v12;
      *(_QWORD *)(v14 + 1768) = v13;
    }
    LODWORD(v10) = 0;
    *(_DWORD *)(a1 + 65764) = 0;
    v11 = (__n + 31) & 0xFFFFFFF0;
  }
  if (v10 < *v8 && v11 > *v8)
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: ring buffer is full [%d/%d]"), (uint64_t)__src, __n, a5, a6, a7, a8, *v8);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 1752);
    v17 = a1 + 1760 + v10;
    *(_DWORD *)v17 = a2;
    *(_DWORD *)(v17 + 4) = v9;
    *(_QWORD *)(v17 + 8) = v16;
    memcpy((void *)(a1 + 1760 + *(unsigned int *)(a1 + 65764) + 16), __src, __n);
    v8[1] = v11;
  }
}

void sub_1B17FA2B0(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;

  v11 = a3;
  v12 = a2;
  if (a2 == (_DWORD)a3)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. start != end"), a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"start != end");
LABEL_4:
    v13 = v11;
    goto LABEL_5;
  }
  if (a2 >> 4 > 0xF9E)
    goto LABEL_4;
  v17 = a1 + 1760;
  v13 = a3;
  v18 = a2;
  do
  {
    v19 = v17 + v18;
    v20 = *(_DWORD *)(v19 + 4);
    if (!v20)
      break;
    if (*(double *)(v19 + 8) <= a9)
    {
      v18 += v20;
    }
    else
    {
      v21 = *(_DWORD *)v19;
      if (*(_DWORD *)v19 == 3)
      {
        sub_1B17FA598(a1, (__int128 *)(v19 + 32), (__int128 *)(v19 + 96), (uint64_t)a4, (uint64_t)a5, a6, a7, a8, *(__n128 *)(v19 + 16));
      }
      else if (v21 == 1)
      {
        sub_1B17FA4D4(a1, 0, (float *)(v19 + 48), (uint64_t)a4, (uint64_t)a5, a6, a7, a8, *(float32x4_t *)(v19 + 16), *(float32x4_t *)(v19 + 32));
      }
      else if (!v21)
      {
        sub_1B17FA410(a1, 0, (float *)(v19 + 48), (uint64_t)a4, (uint64_t)a5, a6, a7, a8, *(float32x4_t *)(v19 + 16), *(float32x4_t *)(v19 + 32));
      }
      if (v13 >= v18)
        v13 = v18;
      v18 += *(_DWORD *)(v19 + 4);
      if (v12 <= v18)
        v12 = v18;
    }
  }
  while (v18 != v11 && v18 >> 4 < 0xF9F);
LABEL_5:
  *a4 = v13;
  if (v13 <= v12)
    v14 = v12;
  else
    v14 = v13;
  *a5 = v14;
}

void sub_1B17FA410(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  double v20;
  float32x4_t v21;
  float32x4_t __src;
  float32x4_t v25;
  __int128 v26;

  if (*(double *)(a1 + 1752) > 0.0)
  {
    __src = a9;
    v25 = a10;
    v26 = *(_OWORD *)a3;
    if (a2)
    {
      v13 = *(float32x4_t *)(a2 + 16);
      v14 = *(float32x4_t *)(a2 + 32);
      v15 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a2 + 48), v14, a10, 2), v13, *(float32x2_t *)a10.f32, 1), *(float32x4_t *)a2, a10.f32[0]);
      __src = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a2 + 48), v14, a9, 2), v13, *(float32x2_t *)a9.f32, 1), *(float32x4_t *)a2, a9.f32[0]);
      v25 = v15;
    }
    sub_1B17FA1DC(a1, 0, &__src, 48, a5, a6, a7, a8);
  }
  sub_1B17F9850((uint64_t *)a1, a1 + 376, (uint64_t)a3, a4, a5, a6, a7, a8);
  sub_1B17FAEA8(a1, a2, a3, a3, a1 + 376, a9, a10, v19, v20, v21, v16, v17, v18);
}

void sub_1B17FA4D4(uint64_t a1, float32x4_t *a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t __src;
  float32x4_t v22;
  __int128 v23;

  if (*(double *)(a1 + 1752) > 0.0)
  {
    __src = a9;
    v22 = a10;
    v23 = *(_OWORD *)a3;
    if (a2)
    {
      v13 = a2[1];
      v14 = a2[2];
      v15 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a2[3], v14, a10, 2), v13, *(float32x2_t *)a10.f32, 1), *a2, a10.f32[0]);
      __src = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a2[3], v14, a9, 2), v13, *(float32x2_t *)a9.f32, 1), *a2, a9.f32[0]);
      v22 = v15;
    }
    sub_1B17FA1DC(a1, 1, &__src, 48, a5, a6, a7, a8);
  }
  sub_1B17F9850((uint64_t *)a1, a1 + 376, (uint64_t)a3, a4, a5, a6, a7, a8);
  sub_1B17F9ADC(a1, a2, a3, a3, a1 + 376, a9, a10, v16, v17, v18);
}

__n128 sub_1B17FA598(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __int128 v12;
  __int128 v13;
  __n128 result;
  __n128 __src;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (*(double *)(a1 + 1752) > 0.0)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    __src = a9;
    if (a2)
    {
      v12 = a2[1];
      v16 = *a2;
      v17 = v12;
      v13 = a2[3];
      v18 = a2[2];
      v19 = v13;
    }
    else
    {
      v16 = xmmword_1B2244DB0;
      v17 = xmmword_1B2244DD0;
      v18 = xmmword_1B2244D90;
      v19 = xmmword_1B2244E20;
    }
    v20 = *a3;
    sub_1B17FA1DC(a1, 3, &__src, 96, a5, a6, a7, a8);
  }
  sub_1B17F9850((uint64_t *)a1, a1 + 376, (uint64_t)a3, a4, a5, a6, a7, a8);
  sub_1B17FF7DC(a1, (float32x4_t *)a2, (uint64_t)a3, a1 + 376);
  return result;
}

void sub_1B17FA670(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v14;

  v9 = (_DWORD *)(a1 + 65760);
  v10 = *(_DWORD *)(a1 + 65760);
  v11 = *(unsigned int *)(a1 + 65764);
  if (v10 != (_DWORD)v11)
  {
    v14 = 0;
    if (v10 < v11)
    {
      sub_1B17FA2B0(a1, v10, v11, (unsigned int *)&v14 + 1, (unsigned int *)&v14, a7, a8, a9, a2);
      *v9 = HIDWORD(v14);
LABEL_8:
      v9[1] = v14;
      return;
    }
    if (v10 >> 9 <= 0x7C)
    {
      sub_1B17FA2B0(a1, v10, 64000, (unsigned int *)&v14 + 1, (unsigned int *)&v14, a7, a8, a9, a2);
      *v9 = HIDWORD(v14);
      v11 = v9[1];
    }
    if ((_DWORD)v11)
    {
      sub_1B17FA2B0(a1, 0, v11, (unsigned int *)&v14 + 1, (unsigned int *)&v14, a7, a8, a9, a2);
      goto LABEL_8;
    }
  }
}

void sub_1B17FA734(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t Index;
  const char *v48;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t j;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int32x4_t v104;
  float32x4_t v105;
  int8x16_t v106;
  float32x4_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  float32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int32x4_t v145;
  float32x4_t v146;
  int8x16_t v147;
  float32x4_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  __int128 v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  __int32 v172;
  float32x4_t v173;
  float32x4_t v174;
  __int32 v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180[4];
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  uint64_t v189;

  v189 = *MEMORY[0x1E0C80C00];
  sub_1B17F9728((uint64_t *)a1);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    if ((sub_1B1814458(v7) & 1) != 0)
    {
      v10 = sub_1B1813884(*(_QWORD *)(a1 + 8), v8, v9, v2, v3, v4, v5, v6);
      if (v10)
      {
        v12 = (void *)objc_msgSend_worldWithWorldRef_(VFXWorld, v11, v10, v2);
        v16 = (void *)objc_msgSend_physicsWorld(v12, v13, v14, v15);
        if (v16)
        {
          v17 = v16;
          v18 = v16;
          objc_msgSend__drawDebugInAuthoringEnvironment_(v17, v19, a1, v20);

        }
      }
    }
  }
  sub_1B181D5C4(*(uint64_t ***)(a1 + 65864), *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 64), v2, v3, v4, v5, v6);
  v24 = (void *)objc_msgSend_manipulator((void *)a1, v21, v22, v23);
  if (objc_msgSend_isDragging(v24, v25, v26, v27))
  {
    objc_msgSend_lockSnapGuides(v24, v28, v29, v30);
    sub_1B17F9850((uint64_t *)a1, a1 + 376, v31, v32, v33, v34, v35, v36);
    objc_msgSend_transform(v24, v37, v38, v39);
    v172 = v40.i32[1];
    v173 = v40;
    v175 = v40.i32[2];
    v180[0] = (float32x4_t)xmmword_1B2244DB0;
    v180[1] = (float32x4_t)xmmword_1B2244DD0;
    v180[2] = (float32x4_t)xmmword_1B2244D90;
    v180[3] = (float32x4_t)xmmword_1B2244E20;
    v43 = (void *)objc_msgSend_snapGuideIndexesOnAxis_(v24, v41, 1, v42);
    Index = objc_msgSend_firstIndex(v43, v44, v45, v46);
    if (Index != 0x7FFFFFFFFFFFFFFFLL)
    {
      for (i = Index; i != 0x7FFFFFFFFFFFFFFFLL; i = objc_msgSend_indexGreaterThanIndex_(v43, v76, i, v77))
      {
        v51 = objc_msgSend_snapInfoAtIndex_axis_(v24, v48, i, 1, *(_OWORD *)&v165);
        v178 = 0u;
        v179 = 0u;
        v59 = sub_1B1869AC8(*(_QWORD *)(v51 + 8), v52, v53, v54, v55, v56, v57, v58);
        v167 = *(_OWORD *)(v59 + 48);
        sub_1B1869150(*(_QWORD *)(v51 + 8), &v178);
        v60.f32[0] = *(float *)v51 - *(float *)(v51 + 16);
        v61 = v60;
        *(uint64_t *)((char *)v61.i64 + 4) = *(_QWORD *)((char *)&v167 + 4);
        v60.i32[1] = v172;
        v62 = v60;
        v62.i32[2] = DWORD2(v167);
        v60.i32[2] = v175;
        v165 = v62;
        v168 = v60;
        sub_1B17F9ADC(a1, v180, flt_1B2246210, flt_1B2246210, a1 + 376, v61, v62, v63, v64, v65);
        sub_1B17F9ADC(a1, v180, flt_1B2246210, flt_1B2246210, a1 + 376, v165, v168, v66, v67, v68);
        v69 = (int32x4_t)vaddq_f32(v179, v179);
        v70 = (float32x4_t)vdupq_laneq_s32(v69, 3);
        v70.i32[0] = v69.i32[0];
        v181 = vsubq_f32(v178, v179);
        v182 = vaddq_f32(v181, v70);
        v183 = vaddq_f32(v181, (float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)vuzp2q_s32(v69, v69), 0xCuLL));
        v184 = vaddq_f32(v70, v183);
        v71 = (int8x16_t)vzip2q_s32(v69, v69);
        v72 = (float32x4_t)vextq_s8(v71, v71, 8uLL);
        v185 = vaddq_f32(v181, v72);
        v186 = vaddq_f32(v72, v182);
        v187 = vaddq_f32(v72, v183);
        v188 = vaddq_f32(v72, v184);
        sub_1B17FC018(a1, (uint64_t)&v181, (float32x4_t *)v59, flt_1B2246210, a1 + 376, v73, v74, v75);
      }
    }
    v78 = (void *)objc_msgSend_snapGuideIndexesOnAxis_(v24, v48, 2, v49, *(_OWORD *)&v165);
    v82 = objc_msgSend_firstIndex(v78, v79, v80, v81);
    if (v82 != 0x7FFFFFFFFFFFFFFFLL)
    {
      for (j = v82; j != 0x7FFFFFFFFFFFFFFFLL; j = objc_msgSend_indexGreaterThanIndex_(v78, v111, j, v112))
      {
        v86 = objc_msgSend_snapInfoAtIndex_axis_(v24, v83, j, 2, *(_OWORD *)&v166);
        v178 = 0u;
        v179 = 0u;
        v94 = sub_1B1869AC8(*(_QWORD *)(v86 + 8), v87, v88, v89, v90, v91, v92, v93);
        v169 = *(float32x4_t *)(v94 + 48);
        sub_1B1869150(*(_QWORD *)(v86 + 8), &v178);
        v95 = v169;
        v95.f32[1] = *(float *)v86 - *(float *)(v86 + 16);
        v95.i32[2] = v169.i32[2];
        v96 = v173;
        v96.f32[1] = v95.f32[1];
        v97 = v96;
        v97.i32[2] = v169.i32[2];
        v96.i32[2] = v175;
        v166 = v97;
        v170 = v96;
        sub_1B17F9ADC(a1, v180, flt_1B2246210, flt_1B2246210, a1 + 376, v95, v97, v98, v99, v100);
        sub_1B17F9ADC(a1, v180, flt_1B2246210, flt_1B2246210, a1 + 376, v166, v170, v101, v102, v103);
        v104 = (int32x4_t)vaddq_f32(v179, v179);
        v105 = (float32x4_t)vdupq_laneq_s32(v104, 3);
        v105.i32[0] = v104.i32[0];
        v181 = vsubq_f32(v178, v179);
        v182 = vaddq_f32(v181, v105);
        v183 = vaddq_f32(v181, (float32x4_t)vextq_s8((int8x16_t)v104, (int8x16_t)vuzp2q_s32(v104, v104), 0xCuLL));
        v184 = vaddq_f32(v105, v183);
        v106 = (int8x16_t)vzip2q_s32(v104, v104);
        v107 = (float32x4_t)vextq_s8(v106, v106, 8uLL);
        v185 = vaddq_f32(v181, v107);
        v186 = vaddq_f32(v107, v182);
        v187 = vaddq_f32(v107, v183);
        v188 = vaddq_f32(v107, v184);
        sub_1B17FC018(a1, (uint64_t)&v181, (float32x4_t *)v94, flt_1B2246210, a1 + 376, v108, v109, v110);
      }
    }
    v113 = (void *)objc_msgSend_snapGuideIndexesOnAxis_(v24, v83, 4, v84, *(_OWORD *)&v166);
    v117 = objc_msgSend_firstIndex(v113, v114, v115, v116);
    if (v117 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v125 = v117;
      v126 = v173;
      v126.i32[1] = v172;
      v174 = v126;
      do
      {
        v127 = objc_msgSend_snapInfoAtIndex_axis_(v24, v118, v125, 4);
        v178 = 0u;
        v179 = 0u;
        v135 = sub_1B1869AC8(*(_QWORD *)(v127 + 8), v128, v129, v130, v131, v132, v133, v134);
        v176 = *(float32x4_t *)(v135 + 48);
        sub_1B1869150(*(_QWORD *)(v127 + 8), &v178);
        v136 = v176;
        v137 = v176;
        v137.f32[2] = *(float *)v127 - *(float *)(v127 + 16);
        v136.i32[1] = v172;
        v136.f32[2] = v137.f32[2];
        v177 = v136;
        v138 = v174;
        v138.f32[2] = v137.f32[2];
        v171 = v138;
        sub_1B17F9ADC(a1, v180, flt_1B2246210, flt_1B2246210, a1 + 376, v137, v136, v139, v140, v141);
        sub_1B17F9ADC(a1, v180, flt_1B2246210, flt_1B2246210, a1 + 376, v177, v171, v142, v143, v144);
        v145 = (int32x4_t)vaddq_f32(v179, v179);
        v146 = (float32x4_t)vdupq_laneq_s32(v145, 3);
        v146.i32[0] = v145.i32[0];
        v181 = vsubq_f32(v178, v179);
        v182 = vaddq_f32(v181, v146);
        v183 = vaddq_f32(v181, (float32x4_t)vextq_s8((int8x16_t)v145, (int8x16_t)vuzp2q_s32(v145, v145), 0xCuLL));
        v184 = vaddq_f32(v146, v183);
        v147 = (int8x16_t)vzip2q_s32(v145, v145);
        v148 = (float32x4_t)vextq_s8(v147, v147, 8uLL);
        v185 = vaddq_f32(v181, v148);
        v186 = vaddq_f32(v148, v182);
        v187 = vaddq_f32(v148, v183);
        v188 = vaddq_f32(v148, v184);
        sub_1B17FC018(a1, (uint64_t)&v181, (float32x4_t *)v135, flt_1B2246210, a1 + 376, v149, v150, v151);
        v125 = objc_msgSend_indexGreaterThanIndex_(v113, v152, v125, v153);
      }
      while (v125 != 0x7FFFFFFFFFFFFFFFLL);
    }
    sub_1B17F90F0(a1, a1 + 376, v119, v120, v121, v122, v123, v124);
    objc_msgSend_unlockSnapGuides(v24, v154, v155, v156);
  }
  v157 = sub_1B1815800(*(_QWORD *)(a1 + 8));
  sub_1B17FA670(a1, v157, v158, v159, v160, v161, v162, v163, v164);
}

void sub_1B17FACB8(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x4_t v34;
  __n128 v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;

  if (*(_BYTE *)(a1 + 65816))
  {
    a2.n128_u64[0] = (unint64_t)vadd_f32(vrndx_f32(*(float32x2_t *)(a1 + 65800)), (float32x2_t)0x3F0000003F000000);
    v35 = a2;
    a2.n128_u64[0] = (unint64_t)vadd_f32(vrndx_f32(*(float32x2_t *)(a1 + 65808)), (float32x2_t)0x3F0000003F000000);
    v41 = a2;
    sub_1B17F9850((uint64_t *)a1, a1 + 984, a4, a5, a6, a7, a8, a9);
    sub_1B17F9F44(a1, 0x3CCCCCCD3CCCCCCDLL, 0x3D4CCCCD3CCCCCCDLL, 0, a1 + 984, 1, v10, v11, v35.n128_f32[0], v35.n128_f32[1], v41.n128_f32[0], v41.n128_f32[1]);
    sub_1B17F9850((uint64_t *)a1, a1 + 832, v12, v13, v14, v15, v16, v17);
    v18 = (float32x4_t)v35;
    v18.i32[2] = 0;
    v39 = v18;
    v18.i32[1] = v35.n128_i32[1];
    v34 = v18;
    v19 = (float32x4_t)v41;
    v19.i32[2] = 0;
    v37 = v19;
    v19.i32[1] = v35.n128_i32[1];
    v36 = v19;
    sub_1B17F9ADC(a1, 0, (float *)&xmmword_1B2246280, (float *)&xmmword_1B2246280, a1 + 832, v18, v19, v20, v21, v22);
    v23 = v37;
    v23.i32[1] = v41.n128_i32[1];
    v38 = v23;
    sub_1B17F9ADC(a1, 0, (float *)&xmmword_1B2246280, (float *)&xmmword_1B2246280, a1 + 832, v36, v23, v24, v25, v26);
    v27 = v39;
    v27.i32[1] = v41.n128_i32[1];
    v40 = v27;
    sub_1B17F9ADC(a1, 0, (float *)&xmmword_1B2246280, (float *)&xmmword_1B2246280, a1 + 832, v38, v27, v28, v29, v30);
    sub_1B17F9ADC(a1, 0, (float *)&xmmword_1B2246280, (float *)&xmmword_1B2246280, a1 + 832, v40, v34, v31, v32, v33);
  }
  sub_1B17F9C48(a1);
}

void sub_1B17FAE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  sub_1B17F90F0(a1, a1 + 1288, a3, a4, a5, a6, a7, a8);
  sub_1B17F90F0(a1, a1 + 1136, v9, v10, v11, v12, v13, v14);
  sub_1B17F90F0(a1, a1 + 376, v15, v16, v17, v18, v19, v20);
  sub_1B17F90F0(a1, a1 + 528, v21, v22, v23, v24, v25, v26);
  sub_1B17F90F0(a1, a1 + 680, v27, v28, v29, v30, v31, v32);
  sub_1B17F90F0(a1, a1 + 984, v33, v34, v35, v36, v37, v38);
  sub_1B17F90F0(a1, a1 + 832, v39, v40, v41, v42, v43, v44);
}

void sub_1B17FAEA8(uint64_t a1, uint64_t a2, float *a3, float *a4, uint64_t a5, float32x4_t a6, float32x4_t a7, int8x16_t a8, double a9, float32x4_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int32 v23;
  int v24;
  unint64_t v25;
  unsigned __int32 v26;
  int v27;
  uint64_t v28;
  __int32 v29;
  uint64_t v30;
  __int32 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    a8 = *(int8x16_t *)a2;
    v13 = *(float32x4_t *)(a2 + 16);
    a10 = *(float32x4_t *)(a2 + 32);
    a7 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a2 + 48), a10, a7, 2), v13, *(float32x2_t *)a7.f32, 1), *(float32x4_t *)a2, a7.f32[0]);
    a6 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a2 + 48), a10, a6, 2), v13, *(float32x2_t *)a6.f32, 1), *(float32x4_t *)a2, a6.f32[0]);
  }
  v14 = vsubq_f32(a7, a6);
  a10.i32[0] = v14.i32[2];
  a8.i32[0] = 1.0;
  v15.i64[0] = 0x8000000080000000;
  v15.i64[1] = 0x8000000080000000;
  v15.i32[0] = vbslq_s8(v15, a8, (int8x16_t)a10).i32[0];
  v16 = v14.f32[1] / (float)(fabsf(v14.f32[2]) + 1.0);
  a10.f32[0] = v14.f32[2] + (float)(*(float *)v15.i32 * vmuls_lane_f32(v16, *(float32x2_t *)v14.f32, 1));
  a10.f32[1] = *(float *)v15.i32 * (float)-(float)(v14.f32[0] * v16);
  a10.f32[2] = -v14.f32[0];
  v17 = vmulq_f32(a10, (float32x4_t)vdupq_n_s32(0x3E4CCCCDu));
  v18 = vaddq_f32(a7, vmulq_f32(v14, (float32x4_t)vdupq_n_s32(0xBE99999A)));
  v19 = vaddq_f32(v18, v17);
  v20 = vsubq_f32(v18, v17);
  v22 = a6.i64[0];
  v23 = a6.u32[2];
  v26 = a7.u32[2];
  v25 = a7.i64[0];
  v29 = v19.i32[2];
  v28 = v19.i64[0];
  v30 = v20.i64[0];
  v31 = v20.i32[2];
  v24 = ((int)(float)(a3[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(a3[2], 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(a3[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*a3, 0.0), 1.0) * 255.0);
  v27 = ((int)(float)(a4[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(a4[2], 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(a4[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*a4, 0.0), 1.0) * 255.0);
  sub_1B17F8B98(a1, (uint64_t)&v22, 4, (uint64_t)&unk_1B224629C, 6, a5, 1, a13, v21);
}

void sub_1B17FB090(uint64_t *a1, float32x4_t *a2, float *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = (uint64_t)(a1 + 47);
  sub_1B17F9850(a1, (uint64_t)(a1 + 47), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  sub_1B17F9ADC((uint64_t)a1, a2, a3, a4, v14, a9, a10, v15, v16, v17);
}

__n128 sub_1B17FB0F8(uint64_t a1, float32x4_t *a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 result;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(double *)(a1 + 1752) > 0.0)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v12 = a2[1];
    v25 = *a2;
    v26 = v12;
    if (a3)
    {
      v13 = *(float32x4_t *)(a3 + 16);
      v27 = *(float32x4_t *)a3;
      v28 = v13;
      v14 = *(float32x4_t *)(a3 + 48);
      v29 = *(float32x4_t *)(a3 + 32);
      v30 = v14;
    }
    else
    {
      v27 = (float32x4_t)xmmword_1B2244DB0;
      v28 = (float32x4_t)xmmword_1B2244DD0;
      v29 = (float32x4_t)xmmword_1B2244D90;
      v30 = (float32x4_t)xmmword_1B2244E20;
    }
    v31 = *(float32x4_t *)a4;
    sub_1B17FA1DC(a1, 4, &v25, 112, a5, a6, a7, a8);
  }
  sub_1B17F9850((uint64_t *)a1, a1 + 376, a3, (uint64_t)a4, a5, a6, a7, a8);
  v15 = a2[1];
  v16 = vsubq_f32(*a2, v15);
  v17 = (int32x4_t)vaddq_f32(v15, v15);
  v18 = (float32x4_t)vdupq_laneq_s32(v17, 3);
  v18.i32[0] = v17.i32[0];
  v25 = v16;
  v26 = vaddq_f32(v16, v18);
  v27 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)vuzp2q_s32(v17, v17), 0xCuLL));
  v28 = vaddq_f32(v18, v27);
  v19 = (int8x16_t)vzip2q_s32(v17, v17);
  v20 = (float32x4_t)vextq_s8(v19, v19, 8uLL);
  v29 = vaddq_f32(v16, v20);
  v30 = vaddq_f32(v20, v26);
  v31 = vaddq_f32(v20, v27);
  v32 = vaddq_f32(v20, v28);
  sub_1B17FC018(a1, (uint64_t)&v25, (float32x4_t *)a3, a4, a1 + 376, v21, v22, v23);
  return result;
}

void sub_1B17FB25C(uint64_t *a1, uint64_t a2, float32x4_t *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x2_t v53;
  float32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x2_t v72;
  float32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x2_t v91;
  float32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int32x2_t v108;
  float32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int32x2_t v124;
  float32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int32x2_t v140;
  float32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int32x2_t v156;
  float32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int32x2_t v172;
  float32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  int8x16_t v189;
  float32x4_t v190;
  float32x4_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  int8x16_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  uint64_t v242;

  v242 = *MEMORY[0x1E0C80C00];
  v12 = (uint64_t)(a1 + 47);
  sub_1B17F9850(a1, (uint64_t)(a1 + 47), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (a3)
  {
    v16 = 0;
    v17 = *a3;
    v18 = a3[1];
    v20 = a3[2];
    v19 = a3[3];
    v21 = *(float32x4_t *)(a2 + 48);
    v236 = *(float32x4_t *)(a2 + 32);
    v237 = v21;
    v22 = *(float32x4_t *)(a2 + 80);
    v238 = *(float32x4_t *)(a2 + 64);
    v239 = v22;
    v23 = *(float32x4_t *)(a2 + 16);
    v234 = *(float32x4_t *)a2;
    v235 = v23;
    v24 = (int32x4_t)vmulq_f32(v17, v17);
    v25 = (int32x4_t)vmulq_f32(v18, v18);
    v26 = (int32x4_t)vmulq_f32(v20, v20);
    v27 = vzip2q_s32(v24, v26);
    v28 = (float32x4_t)vzip1q_s32(vzip1q_s32(v24, v26), v25);
    v29 = (float32x4_t)vtrn2q_s32(v24, v25);
    v29.i32[2] = v26.i32[1];
    v30 = vaddq_f32((float32x4_t)vzip1q_s32(v27, vdupq_laneq_s32(v25, 2)), vaddq_f32(v28, v29));
    __asm { FMOV            V5.4S, #1.0 }
    v36 = vceqzq_f32(v30);
    v36.i32[3] = 0;
    v37 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v36), (int8x16_t)v30, (int8x16_t)vdivq_f32(_Q5, v30));
    v38 = vmulq_n_f32(v17, v37.f32[0]);
    v39 = vmulq_lane_f32(v18, *(float32x2_t *)v37.f32, 1);
    v40 = vmulq_laneq_f32(v20, v37, 2);
    do
    {
      *(float32x4_t *)((char *)&v234 + v16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38, COERCE_FLOAT(*(_OWORD *)((char *)&v234 + v16))), v39, *(float32x2_t *)&v234.f32[v16 / 4], 1), v40, *(float32x4_t *)((char *)&v234 + v16), 2), v19, *(float32x4_t *)((char *)&v234 + v16), 3);
      v16 += 16;
    }
    while (v16 != 96);
    v41 = v234;
    v42 = v235;
    v44 = (int32x4_t)v236;
    v43 = v237;
    v45 = v238;
    v46 = v239;
  }
  else
  {
    v41 = *(float32x4_t *)a2;
    v42 = *(float32x4_t *)(a2 + 16);
    v44 = *(int32x4_t *)(a2 + 32);
    v43 = *(float32x4_t *)(a2 + 48);
    v45 = *(float32x4_t *)(a2 + 64);
    v46 = *(float32x4_t *)(a2 + 80);
  }
  v47 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v44, (int8x16_t)v44, 0xCuLL), (int8x16_t)v44, 8uLL);
  v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), (int8x16_t)v42, 0xCuLL);
  v49 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL);
  v50 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v42, (int8x16_t)v42, 0xCuLL), (int8x16_t)v42, 8uLL);
  v51 = vmlaq_f32(vmulq_f32(v50, vnegq_f32(v49)), v48, v47);
  v52 = vmulq_f32(v46, v51);
  v53 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).u64[0];
  if (*(float *)v53.i32 != 0.0)
  {
    v54 = v46;
    v54.f32[0] = -v46.f32[3];
    v55 = v44;
    *(float *)v55.i32 = -*(float *)&v44.i32[3];
    v56 = (int32x4_t)v42;
    *(float *)v56.i32 = -v42.f32[3];
    v57 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v56, (int8x16_t)v56, 0xCuLL), (int8x16_t)v56, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v55, v55), (int8x16_t)v55, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v56, v56), (int8x16_t)v56, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v55, (int8x16_t)v55, 0xCuLL), (int8x16_t)v55, 8uLL));
    v58 = v46;
    v58.f32[1] = -v46.f32[3];
    v59 = v44;
    *(float *)&v59.i32[1] = -*(float *)&v44.i32[3];
    v60 = (int32x4_t)vmulq_f32(v54, v57);
    v61 = (int32x4_t)v42;
    *(float *)&v61.i32[1] = -v42.f32[3];
    v62 = (int32x4_t)vmulq_f32(v58, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v61, (int8x16_t)v61, 0xCuLL), (int8x16_t)v61, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v59, v59), (int8x16_t)v59, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v61, v61), (int8x16_t)v61, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v59, (int8x16_t)v59, 0xCuLL), (int8x16_t)v59, 8uLL)));
    *(float32x2_t *)v58.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v62.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v62.i8));
    v63 = (float32x4_t)vzip2q_s32(v60, v62);
    *(float32x2_t *)v63.f32 = vadd_f32(*(float32x2_t *)v63.f32, *(float32x2_t *)v58.f32);
    v64 = v46;
    v64.f32[2] = -v46.f32[3];
    v65 = v44;
    *(float *)&v65.i32[2] = -*(float *)&v44.i32[3];
    v66 = (int32x4_t)v42;
    *(float *)&v66.i32[2] = -v42.f32[3];
    v67 = vmulq_f32(v64, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v66, (int8x16_t)v66, 0xCuLL), (int8x16_t)v66, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v65, v65), (int8x16_t)v65, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v66, v66), (int8x16_t)v66, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v65, (int8x16_t)v65, 0xCuLL), (int8x16_t)v65, 8uLL)));
    v63.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).u32[0];
    v234 = vdivq_f32(v63, (float32x4_t)vdupq_lane_s32(v53, 0));
  }
  v68 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL), (int8x16_t)v41, 8uLL);
  v69 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL);
  v70 = vmlaq_f32(vmulq_f32(v47, vnegq_f32(v69)), v49, v68);
  v71 = vmulq_f32(v46, v70);
  v72 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).u64[0];
  if (*(float *)v72.i32 != 0.0)
  {
    v73 = v46;
    v73.f32[0] = -v46.f32[3];
    v74 = (int32x4_t)v41;
    *(float *)v74.i32 = -v41.f32[3];
    v75 = v44;
    *(float *)v75.i32 = -*(float *)&v44.i32[3];
    v76 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v75, (int8x16_t)v75, 0xCuLL), (int8x16_t)v75, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v74, v74), (int8x16_t)v74, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v75, v75), (int8x16_t)v75, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v74, (int8x16_t)v74, 0xCuLL), (int8x16_t)v74, 8uLL));
    v77 = v46;
    v77.f32[1] = -v46.f32[3];
    v78 = (int32x4_t)v41;
    *(float *)&v78.i32[1] = -v41.f32[3];
    v79 = (int32x4_t)vmulq_f32(v73, v76);
    v80 = v44;
    *(float *)&v80.i32[1] = -*(float *)&v44.i32[3];
    v81 = (int32x4_t)vmulq_f32(v77, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v80, (int8x16_t)v80, 0xCuLL), (int8x16_t)v80, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v78, v78), (int8x16_t)v78, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v80, v80), (int8x16_t)v80, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v78, (int8x16_t)v78, 0xCuLL), (int8x16_t)v78, 8uLL)));
    *(float32x2_t *)v77.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v79.i8, *(int32x2_t *)v81.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v79.i8, *(int32x2_t *)v81.i8));
    v82 = (float32x4_t)vzip2q_s32(v79, v81);
    *(float32x2_t *)v82.f32 = vadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v77.f32);
    v83 = v46;
    v83.f32[2] = -v46.f32[3];
    v84 = (int32x4_t)v41;
    *(float *)&v84.i32[2] = -v41.f32[3];
    v85 = v44;
    *(float *)&v85.i32[2] = -*(float *)&v44.i32[3];
    v86 = vmulq_f32(v83, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v85, (int8x16_t)v85, 0xCuLL), (int8x16_t)v85, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v84, v84), (int8x16_t)v84, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v85, v85), (int8x16_t)v85, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v84, (int8x16_t)v84, 0xCuLL), (int8x16_t)v84, 8uLL)));
    v82.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))).u32[0];
    v235 = vdivq_f32(v82, (float32x4_t)vdupq_lane_s32(v72, 0));
  }
  v87 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL);
  v88 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL), (int8x16_t)v43, 8uLL);
  v89 = vmlaq_f32(vmulq_f32(v88, vnegq_f32(v48)), v87, v50);
  v90 = vmulq_f32(v46, v89);
  v91 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 2), vaddq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.f32, 1))).u64[0];
  if (*(float *)v91.i32 != 0.0)
  {
    v92 = v46;
    v92.f32[0] = -v46.f32[3];
    v93 = (int32x4_t)v42;
    *(float *)v93.i32 = -v42.f32[3];
    v94 = (int32x4_t)v43;
    *(float *)v94.i32 = -v43.f32[3];
    v95 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v94, (int8x16_t)v94, 0xCuLL), (int8x16_t)v94, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v93, v93), (int8x16_t)v93, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v94, v94), (int8x16_t)v94, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v93, (int8x16_t)v93, 0xCuLL), (int8x16_t)v93, 8uLL));
    v96 = v46;
    v96.f32[1] = -v46.f32[3];
    v97 = (int32x4_t)v42;
    *(float *)&v97.i32[1] = -v42.f32[3];
    v98 = (int32x4_t)vmulq_f32(v92, v95);
    v99 = (int32x4_t)v43;
    *(float *)&v99.i32[1] = -v43.f32[3];
    v100 = (int32x4_t)vmulq_f32(v96, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL), (int8x16_t)v99, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v97, v97), (int8x16_t)v97, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v99, v99), (int8x16_t)v99, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v97, (int8x16_t)v97, 0xCuLL), (int8x16_t)v97, 8uLL)));
    *(float32x2_t *)v96.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v100.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v100.i8));
    v101 = (float32x4_t)vzip2q_s32(v98, v100);
    *(float32x2_t *)v101.f32 = vadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v96.f32);
    v102 = v46;
    v102.f32[2] = -v46.f32[3];
    v103 = (int32x4_t)v42;
    *(float *)&v103.i32[2] = -v42.f32[3];
    v104 = (int32x4_t)v43;
    *(float *)&v104.i32[2] = -v43.f32[3];
    v105 = vmulq_f32(v102, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v104, (int8x16_t)v104, 0xCuLL), (int8x16_t)v104, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v103, v103), (int8x16_t)v103, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v104, v104), (int8x16_t)v104, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v103, (int8x16_t)v103, 0xCuLL), (int8x16_t)v103, 8uLL)));
    v101.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), vaddq_f32(v105, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1))).u32[0];
    v236 = vdivq_f32(v101, (float32x4_t)vdupq_lane_s32(v91, 0));
  }
  v106 = vmlaq_f32(vmulq_f32(v68, vnegq_f32(v87)), v69, v88);
  v107 = vmulq_f32(v46, v106);
  v108 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 2), vaddq_f32(v107, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v107.f32, 1))).u64[0];
  if (*(float *)v108.i32 != 0.0)
  {
    v109 = v46;
    v109.f32[0] = -v46.f32[3];
    v110 = (int32x4_t)v43;
    *(float *)v110.i32 = -v43.f32[3];
    v111 = (int32x4_t)v41;
    *(float *)v111.i32 = -v41.f32[3];
    v112 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v111, (int8x16_t)v111, 0xCuLL), (int8x16_t)v111, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v110, v110), (int8x16_t)v110, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v111, v111), (int8x16_t)v111, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v110, (int8x16_t)v110, 0xCuLL), (int8x16_t)v110, 8uLL));
    v113 = v46;
    v113.f32[1] = -v46.f32[3];
    v114 = (int32x4_t)v43;
    *(float *)&v114.i32[1] = -v43.f32[3];
    v115 = (int32x4_t)vmulq_f32(v109, v112);
    v116 = (int32x4_t)v41;
    *(float *)&v116.i32[1] = -v41.f32[3];
    v117 = (int32x4_t)vmulq_f32(v113, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v116, (int8x16_t)v116, 0xCuLL), (int8x16_t)v116, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v114, v114), (int8x16_t)v114, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v116, v116), (int8x16_t)v116, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v114, (int8x16_t)v114, 0xCuLL), (int8x16_t)v114, 8uLL)));
    *(float32x2_t *)v113.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v115.i8, *(int32x2_t *)v117.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v115.i8, *(int32x2_t *)v117.i8));
    v118 = (float32x4_t)vzip2q_s32(v115, v117);
    *(float32x2_t *)v118.f32 = vadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v113.f32);
    v119 = v46;
    v119.f32[2] = -v46.f32[3];
    v120 = (int32x4_t)v43;
    *(float *)&v120.i32[2] = -v43.f32[3];
    v121 = (int32x4_t)v41;
    *(float *)&v121.i32[2] = -v41.f32[3];
    v122 = vmulq_f32(v119, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v121, (int8x16_t)v121, 0xCuLL), (int8x16_t)v121, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v120, v120), (int8x16_t)v120, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v121, v121), (int8x16_t)v121, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v120, (int8x16_t)v120, 0xCuLL), (int8x16_t)v120, 8uLL)));
    v118.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 2), vaddq_f32(v122, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.f32, 1))).u32[0];
    v237 = vdivq_f32(v118, (float32x4_t)vdupq_lane_s32(v108, 0));
  }
  v123 = vmulq_f32(v45, v51);
  v124 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 2), vaddq_f32(v123, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v123.f32, 1))).u64[0];
  if (*(float *)v124.i32 != 0.0)
  {
    v125 = v45;
    v125.f32[0] = -v45.f32[3];
    v126 = v44;
    *(float *)v126.i32 = -*(float *)&v44.i32[3];
    v127 = (int32x4_t)v42;
    *(float *)v127.i32 = -v42.f32[3];
    v128 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v127, (int8x16_t)v127, 0xCuLL), (int8x16_t)v127, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v126, v126), (int8x16_t)v126, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v127, v127), (int8x16_t)v127, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v126, (int8x16_t)v126, 0xCuLL), (int8x16_t)v126, 8uLL));
    v129 = v45;
    v129.f32[1] = -v45.f32[3];
    v130 = v44;
    *(float *)&v130.i32[1] = -*(float *)&v44.i32[3];
    v131 = (int32x4_t)vmulq_f32(v125, v128);
    v132 = (int32x4_t)v42;
    *(float *)&v132.i32[1] = -v42.f32[3];
    v133 = (int32x4_t)vmulq_f32(v129, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v132, (int8x16_t)v132, 0xCuLL), (int8x16_t)v132, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v130, v130), (int8x16_t)v130, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v132, v132), (int8x16_t)v132, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v130, (int8x16_t)v130, 0xCuLL), (int8x16_t)v130, 8uLL)));
    *(float32x2_t *)v129.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v131.i8, *(int32x2_t *)v133.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v131.i8, *(int32x2_t *)v133.i8));
    v134 = (float32x4_t)vzip2q_s32(v131, v133);
    *(float32x2_t *)v134.f32 = vadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v129.f32);
    v135 = v45;
    v135.f32[2] = -v45.f32[3];
    v136 = v44;
    *(float *)&v136.i32[2] = -*(float *)&v44.i32[3];
    v137 = (int32x4_t)v42;
    *(float *)&v137.i32[2] = -v42.f32[3];
    v138 = vmulq_f32(v135, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v137, (int8x16_t)v137, 0xCuLL), (int8x16_t)v137, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v136, v136), (int8x16_t)v136, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v137, v137), (int8x16_t)v137, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v136, (int8x16_t)v136, 0xCuLL), (int8x16_t)v136, 8uLL)));
    v134.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 2), vaddq_f32(v138, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.f32, 1))).u32[0];
    v238 = vdivq_f32(v134, (float32x4_t)vdupq_lane_s32(v124, 0));
  }
  v139 = vmulq_f32(v45, v70);
  v140 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v139, 2), vaddq_f32(v139, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v139.f32, 1))).u64[0];
  if (*(float *)v140.i32 != 0.0)
  {
    v141 = v45;
    v141.f32[0] = -v45.f32[3];
    v142 = (int32x4_t)v41;
    *(float *)v142.i32 = -v41.f32[3];
    v143 = v44;
    *(float *)v143.i32 = -*(float *)&v44.i32[3];
    v144 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v143, (int8x16_t)v143, 0xCuLL), (int8x16_t)v143, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v142, v142), (int8x16_t)v142, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v143, v143), (int8x16_t)v143, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v142, (int8x16_t)v142, 0xCuLL), (int8x16_t)v142, 8uLL));
    v145 = v45;
    v145.f32[1] = -v45.f32[3];
    v146 = (int32x4_t)v41;
    *(float *)&v146.i32[1] = -v41.f32[3];
    v147 = (int32x4_t)vmulq_f32(v141, v144);
    v148 = v44;
    *(float *)&v148.i32[1] = -*(float *)&v44.i32[3];
    v149 = (int32x4_t)vmulq_f32(v145, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v148, (int8x16_t)v148, 0xCuLL), (int8x16_t)v148, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v146, v146), (int8x16_t)v146, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v148, v148), (int8x16_t)v148, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v146, (int8x16_t)v146, 0xCuLL), (int8x16_t)v146, 8uLL)));
    *(float32x2_t *)v145.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v147.i8, *(int32x2_t *)v149.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v147.i8, *(int32x2_t *)v149.i8));
    v150 = (float32x4_t)vzip2q_s32(v147, v149);
    *(float32x2_t *)v150.f32 = vadd_f32(*(float32x2_t *)v150.f32, *(float32x2_t *)v145.f32);
    v151 = v45;
    v151.f32[2] = -v45.f32[3];
    v152 = (int32x4_t)v41;
    *(float *)&v152.i32[2] = -v41.f32[3];
    v153 = v44;
    *(float *)&v153.i32[2] = -*(float *)&v44.i32[3];
    v154 = vmulq_f32(v151, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v153, (int8x16_t)v153, 0xCuLL), (int8x16_t)v153, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v152, v152), (int8x16_t)v152, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v153, v153), (int8x16_t)v153, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v152, (int8x16_t)v152, 0xCuLL), (int8x16_t)v152, 8uLL)));
    v150.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 2), vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1))).u32[0];
    v239 = vdivq_f32(v150, (float32x4_t)vdupq_lane_s32(v140, 0));
  }
  v155 = vmulq_f32(v45, v89);
  v156 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v155, 2), vaddq_f32(v155, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v155.f32, 1))).u64[0];
  if (*(float *)v156.i32 != 0.0)
  {
    v157 = v45;
    v157.f32[0] = -v45.f32[3];
    v158 = (int32x4_t)v42;
    *(float *)v158.i32 = -v42.f32[3];
    v159 = (int32x4_t)v43;
    *(float *)v159.i32 = -v43.f32[3];
    v160 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v159, (int8x16_t)v159, 0xCuLL), (int8x16_t)v159, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v158, v158), (int8x16_t)v158, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v159, v159), (int8x16_t)v159, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v158, (int8x16_t)v158, 0xCuLL), (int8x16_t)v158, 8uLL));
    v161 = v45;
    v161.f32[1] = -v45.f32[3];
    v162 = (int32x4_t)v42;
    *(float *)&v162.i32[1] = -v42.f32[3];
    v163 = (int32x4_t)vmulq_f32(v157, v160);
    v164 = (int32x4_t)v43;
    *(float *)&v164.i32[1] = -v43.f32[3];
    v165 = (int32x4_t)vmulq_f32(v161, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v164, (int8x16_t)v164, 0xCuLL), (int8x16_t)v164, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v162, v162), (int8x16_t)v162, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v164, v164), (int8x16_t)v164, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v162, (int8x16_t)v162, 0xCuLL), (int8x16_t)v162, 8uLL)));
    *(float32x2_t *)v161.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v163.i8, *(int32x2_t *)v165.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v163.i8, *(int32x2_t *)v165.i8));
    v166 = (float32x4_t)vzip2q_s32(v163, v165);
    *(float32x2_t *)v166.f32 = vadd_f32(*(float32x2_t *)v166.f32, *(float32x2_t *)v161.f32);
    v167 = v45;
    v167.f32[2] = -v45.f32[3];
    v168 = (int32x4_t)v42;
    *(float *)&v168.i32[2] = -v42.f32[3];
    v169 = (int32x4_t)v43;
    *(float *)&v169.i32[2] = -v43.f32[3];
    v170 = vmulq_f32(v167, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v169, (int8x16_t)v169, 0xCuLL), (int8x16_t)v169, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v168, v168), (int8x16_t)v168, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v169, v169), (int8x16_t)v169, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v168, (int8x16_t)v168, 0xCuLL), (int8x16_t)v168, 8uLL)));
    v166.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v170, 2), vaddq_f32(v170, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v170.f32, 1))).u32[0];
    v240 = vdivq_f32(v166, (float32x4_t)vdupq_lane_s32(v156, 0));
  }
  v222 = (float32x4_t)v44;
  v171 = vmulq_f32(v45, v106);
  v172 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v171, 2), vaddq_f32(v171, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v171.f32, 1))).u64[0];
  if (*(float *)v172.i32 != 0.0)
  {
    v173 = v45;
    v173.f32[0] = -v45.f32[3];
    v174 = (int32x4_t)v43;
    *(float *)v174.i32 = -v43.f32[3];
    v175 = (int32x4_t)v41;
    *(float *)v175.i32 = -v41.f32[3];
    v176 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v175, (int8x16_t)v175, 0xCuLL), (int8x16_t)v175, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v174, v174), (int8x16_t)v174, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v175, v175), (int8x16_t)v175, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v174, (int8x16_t)v174, 0xCuLL), (int8x16_t)v174, 8uLL));
    v177 = v45;
    v177.f32[1] = -v45.f32[3];
    v178 = (int32x4_t)v43;
    *(float *)&v178.i32[1] = -v43.f32[3];
    v179 = (int32x4_t)vmulq_f32(v173, v176);
    v180 = (int32x4_t)v41;
    *(float *)&v180.i32[1] = -v41.f32[3];
    v181 = (int32x4_t)vmulq_f32(v177, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v180, (int8x16_t)v180, 0xCuLL), (int8x16_t)v180, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v178, v178), (int8x16_t)v178, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v180, v180), (int8x16_t)v180, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v178, (int8x16_t)v178, 0xCuLL), (int8x16_t)v178, 8uLL)));
    *(float32x2_t *)v177.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v179.i8, *(int32x2_t *)v181.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v179.i8, *(int32x2_t *)v181.i8));
    v182 = (float32x4_t)vzip2q_s32(v179, v181);
    *(float32x2_t *)v182.f32 = vadd_f32(*(float32x2_t *)v182.f32, *(float32x2_t *)v177.f32);
    v183 = v45;
    v183.f32[2] = -v45.f32[3];
    v184 = (int32x4_t)v43;
    *(float *)&v184.i32[2] = -v43.f32[3];
    v185 = (int32x4_t)v41;
    *(float *)&v185.i32[2] = -v41.f32[3];
    v186 = vmulq_f32(v183, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v185, (int8x16_t)v185, 0xCuLL), (int8x16_t)v185, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v184, v184), (int8x16_t)v184, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v185, v185), (int8x16_t)v185, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v184, (int8x16_t)v184, 0xCuLL), (int8x16_t)v184, 8uLL)));
    v182.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v186, 2), vaddq_f32(v186, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 1))).u32[0];
    v241 = vdivq_f32(v182, (float32x4_t)vdupq_lane_s32(v172, 0));
  }
  sub_1B17FC018((uint64_t)a1, (uint64_t)&v234, 0, a4, v12, v13, v14, v15);
  v227 = v237;
  v229 = v234;
  v224 = v241;
  v225 = v238;
  v187 = vsubq_f32(v234, v241);
  v188 = vmulq_f32(v187, v187);
  *(float *)v189.i32 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v188, 2), vaddq_f32(v188, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v188.f32, 1))).f32[0])* 0.05;
  v233 = v189;
  v190.i64[0] = 0x3F0000003F000000;
  v190.i64[1] = 0x3F0000003F000000;
  v191 = vmulq_f32(vaddq_f32(v234, v237), v190);
  v223 = vmulq_f32(vaddq_f32(v241, v238), v190);
  sub_1B17FAEA8((uint64_t)a1, 0, a4, a4, v12, v191, vmlaq_n_f32(v191, v46, *(float *)v189.i32), (int8x16_t)v46, *(double *)v189.i64, v237, v192, v193, v194);
  sub_1B17FAEA8((uint64_t)a1, 0, a4, a4, v12, v223, vmlaq_n_f32(v223, v45, *(float *)v233.i32), (int8x16_t)v45, *(double *)v223.i64, v198, v195, v196, v197);
  v199.i64[0] = 0x3F0000003F000000;
  v199.i64[1] = 0x3F0000003F000000;
  v232 = vmulq_f32(vaddq_f32(v236, v240), v199);
  v200 = vmulq_f32(vaddq_f32(v224, v227), v199);
  v201 = vmulq_f32(vaddq_f32(v229, v225), v199);
  v226 = vmulq_f32(vaddq_f32(v235, v239), v199);
  v228 = v201;
  v202 = vmulq_f32(vaddq_f32(v201, v232), v199);
  v230 = vmulq_f32(vaddq_f32(v200, v226), v199);
  v231 = v200;
  sub_1B17FAEA8((uint64_t)a1, 0, a4, a4, v12, v202, vmlaq_n_f32(v202, v42, *(float *)v233.i32), (int8x16_t)v42, *(double *)v233.i64, v201, v203, v204, v205);
  sub_1B17FAEA8((uint64_t)a1, 0, a4, a4, v12, v230, vmlaq_n_f32(v230, v41, *(float *)v233.i32), v233, *(double *)v230.i64, v209, v206, v207, v208);
  v210.i64[0] = 0x3F0000003F000000;
  v210.i64[1] = 0x3F0000003F000000;
  v211 = vmulq_f32(vaddq_f32(v231, v232), v210);
  sub_1B17FAEA8((uint64_t)a1, 0, a4, a4, v12, v211, vmlaq_n_f32(v211, v43, *(float *)v233.i32), (int8x16_t)v43, *(double *)v233.i64, v215, v212, v213, v214);
  v216.i64[0] = 0x3F0000003F000000;
  v216.i64[1] = 0x3F0000003F000000;
  v217 = vmulq_f32(vaddq_f32(v228, v226), v216);
  sub_1B17FAEA8((uint64_t)a1, 0, a4, a4, v12, v217, vmlaq_n_f32(v217, v222, *(float *)v233.i32), (int8x16_t)v222, *(double *)v233.i64, v221, v218, v219, v220);
}

void sub_1B17FBFC0(uint64_t *a1, uint64_t a2, float32x4_t *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v12 = (uint64_t)(a1 + 47);
  sub_1B17F9850(a1, (uint64_t)(a1 + 47), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  sub_1B17FC018((uint64_t)a1, a2, a3, a4, v12, v13, v14, v15);
}

void sub_1B17FC018(uint64_t a1, uint64_t a2, float32x4_t *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  uint64_t j;
  _BYTE *v10;
  int v11;
  int v12;
  uint64_t k;
  uint64_t v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    for (i = 0; i != 128; i += 16)
      *(float32x4_t *)(a2 + i) = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a3[3], a3[2], *(float32x4_t *)(a2 + i), 2), a3[1], *(float32x2_t *)(a2 + i), 1), *a3, COERCE_FLOAT(*(_OWORD *)(a2 + i)));
  }
  for (j = 0; j != 128; j += 16)
  {
    v10 = &v15[j];
    v11 = *(_DWORD *)(a2 + j + 8);
    *(_QWORD *)v10 = *(_QWORD *)(a2 + j);
    *((_DWORD *)v10 + 2) = v11;
  }
  v12 = ((int)(float)(a4[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(a4[2], 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(a4[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*a4, 0.0), 1.0) * 255.0);
  for (k = 12; k != 140; k += 16)
    *(_DWORD *)&v15[k] = v12;
  sub_1B17F8B98(a1, (uint64_t)v15, 8, (uint64_t)&unk_1B22462A8, 24, a5, 1, a8, v14);
}

void sub_1B17FC150(uint64_t *a1, uint64_t a2, float32x4_t *a3, float *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;

  v12 = (uint64_t)(a1 + 47);
  sub_1B17F9850(a1, (uint64_t)(a1 + 47), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (sub_1B19E0C48(a2))
  {
    v13 = sub_1B181FEE0(a2);
    v14 = sub_1B18F3B74(a2);
    v15 = sub_1B19E0C58(a2);
    if (v15 >= 1)
    {
      v19 = v15;
      v20 = (int *)(v14 + 4);
      do
      {
        sub_1B17F9ADC((uint64_t)a1, a3, a4, a4, v12, *(float32x4_t *)(v13 + 16 * *(v20 - 1)), *(float32x4_t *)(v13 + 16 * *v20), v16, v17, v18);
        v20 += 2;
        --v19;
      }
      while (v19);
    }
  }
}

void sub_1B17FC208(uint64_t a1, float32x4_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD v59[2];
  float32x4_t v60[2];

  v11 = sub_1B1814458(*(_QWORD *)(a1 + 8));
  if ((v11 & 0x80) != 0)
  {
    v12 = sub_1B186AE38((uint64_t)a2, v4, v5, v6, v7, v8, v9, v10);
    if (v12)
    {
      v13 = v12;
      v14 = (__n128 *)sub_1B1869AC8((uint64_t)a2, v4, v5, v6, v7, v8, v9, v10);
      LODWORD(v15) = 12.5;
      sub_1B17B39F8(*(__n128 **)(a1 + 8), v15, *v14, v14[1], v14[2], v14[3]);
      sub_1B18E575C(v13, a1, (uint64_t)a2, v16, v17, v18, v19, v20, v21);
    }
  }
  if ((v11 & 0x100) != 0)
    sub_1B17FC364(a1, (uint64_t)a2, v5, v6, v7, v8, v9, v10);
  if ((v11 & 2) != 0)
  {
    v22 = sub_1B186AE38((uint64_t)a2, v4, v5, v6, v7, v8, v9, v10);
    if (v22)
      sub_1B18E5930(v22, a1, (uint64_t)a2, v25, v26, v27, v28, v29);
    v30 = sub_1B1869380((uint64_t)a2, v23, v24, v25, v26, v27, v28, v29);
    memset(v60, 0, sizeof(v60));
    if (sub_1B18699E8(a2, 1, v60, v31, v32, v33, v34, v35))
    {
      v36 = sub_1B1869AC8((uint64_t)a2, v4, v5, v6, v7, v8, v9, v10);
      v59[0] = 0;
      v59[1] = 0;
      v37 = 0.0;
      if (!v30)
        v37 = 1.0;
      sub_1B179CD74((float *)v59, 1.0, v37, 0.9, 1.0);
      sub_1B17FB0F8(a1, v60, v36, (float *)v59, v38, v39, v40, v41);
    }
  }
  if ((v11 & 0x100) != 0)
  {
    v42 = (__int128 *)sub_1B1869AC8((uint64_t)a2, v4, v5, v6, v7, v8, v9, v10);
    v50 = sub_1B1868FA0((uint64_t)a2, v43, v44, v45, v46, v47, v48, v49);
    if (v50)
    {
      v58 = sub_1B17A0848(v50, v51, v52, v53, v54, v55, v56, v57);
      if (v58)
        sub_1B17F86A4(a1, v58, 0, v42);
    }
  }
}

void sub_1B17FC364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  double v29;
  unsigned __int32 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const __CFArray *v65;
  uint64_t v66;
  const __CFArray *v67;
  CFIndex i;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t j;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const UInt8 *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  float v121;
  __n128 v122;
  unsigned __int32 v123;
  __n128 v124;
  _OWORD v125[3];
  uint64_t v126;
  _QWORD v127[11];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;

  v10 = sub_1B1868FA0(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    v18 = v10;
    v19 = sub_1B17A0848(v10, v11, v12, v13, v14, v15, v16, v17);
    if (v19)
    {
      v27 = v19;
      v28 = (__n128 *)sub_1B1869AC8(a2, v20, v21, v22, v23, v24, v25, v26);
      LODWORD(v29) = 6.25;
      sub_1B17B39F8(*(__n128 **)(a1 + 8), v29, *v28, v28[1], v28[2], v28[3]);
      v123 = v30;
      v36 = sub_1B1875D94(v27, 0, 0, v31, v32, v33, v34, v35);
      v41 = sub_1B1875540(v27, 0, 0, 0, v37, v38, v39, v40);
      v42 = sub_1B181E7E0(v18);
      v43 = sub_1B17A4568(v18);
      if (v42)
      {
        v48 = v43;
        if (v43)
        {
          if (sub_1B17A47BC(v43) != 1)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Found crease element with more than 1 channel"), v50, v51, v52, v53, v54, v55, (uint64_t)"CFXMeshElementGetIndicesChannelCount(creaseElement) == 1");
          v56 = sub_1B17EE3B4(v42, v49, v50, v51, v52, v53, v54, v55);
          v57 = sub_1B17A47FC(v48);
          v65 = sub_1B1874BE0(v27, v58, v59, v60, v61, v62, v63, v64);
          if ((uint64_t)v65 >= 1)
          {
            v67 = v65;
            for (i = 0; (const __CFArray *)i != v67; ++i)
            {
              v69 = sub_1B1874C3C(v27, i, 0, v66, v44, v45, v46, v47);
              v131 = 0;
              v129 = 0u;
              v130 = 0u;
              v128 = 0u;
              sub_1B17A4804((uint64_t)v69, v36, v70, v71, v72, v73, v74, v75, (uint64_t)&v128);
              v127[0] = MEMORY[0x1E0C809B0];
              v127[1] = 3221225472;
              v127[2] = sub_1B17FC5F4;
              v127[3] = &unk_1E63D6710;
              v127[4] = v57;
              v127[5] = v48;
              v127[6] = 0;
              v127[7] = v56;
              v127[8] = v41;
              v127[9] = a1;
              v127[10] = v28;
              v125[0] = v128;
              v125[1] = v129;
              v125[2] = v130;
              v126 = v131;
              sub_1B17A5198((uint64_t *)v125, (uint64_t)v127, v76, v77, v78, v79, v80, v81);
            }
          }
        }
      }
      v82 = sub_1B1875540(v27, 7, 0, 0, v44, v45, v46, v47);
      if (v82)
      {
        v90 = (_QWORD *)sub_1B17EE3B4((uint64_t)v82, v83, v84, v85, v86, v87, v88, v89);
        v98 = sub_1B17EDAE0((uint64_t)v41, v91, v92, v93, v94, v95, v96, v97);
        if (v98 >= 1)
        {
          v105 = v98;
          for (j = 0; j != v105; ++j)
          {
            v107.n128_f64[0] = sub_1B17EE400((uint64_t)v41, j, v99, v100, v101, v102, v103, v104);
            v124 = v107;
            v114 = sub_1B18F39D4(v90, j, v108, v109, v110, v111, v112, v113);
            v120 = *(float *)v114 * 0.5;
            if (v120 > 1.0)
              v120 = 1.0;
            v121 = 2.0 - (float)(*(float *)v114 * 0.5);
            if (v121 > 1.0)
              v121 = 1.0;
            *(_QWORD *)&v128 = LODWORD(v120) | ((unint64_t)LODWORD(v121) << 32);
            *((_QWORD *)&v128 + 1) = 0x3F80000000000000;
            v122 = v124;
            v122.n128_u32[3] = v123;
            sub_1B17FA598(a1, (__int128 *)v28, &v128, v115, v116, v117, v118, v119, v122);
          }
        }
      }
    }
  }
}

void sub_1B17FC5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  float32x4_t v41;
  _QWORD v42[2];

  if ((_DWORD)a4)
  {
    v10 = 0;
    v11 = a4;
    do
    {
      v12 = *(unsigned int *)(a3 + 4 * v10++);
      v13 = v10;
      if (v10 == v11)
        v13 = 0;
      v14 = *(unsigned int *)(a3 + 4 * v13);
      v15 = 0.0;
      if (*(uint64_t *)(a1 + 32) >= 1)
      {
        v16 = 0;
        while (1)
        {
          v17 = sub_1B17A4A74(*(_QWORD *)(a1 + 40), v16, 0, *(_QWORD *)(a1 + 48), a5, a6, a7, a8);
          v22 = sub_1B17A4A74(*(_QWORD *)(a1 + 40), v16, 1, *(_QWORD *)(a1 + 48), v18, v19, v20, v21);
          if ((_DWORD)v12 == v17 && (_DWORD)v14 == v22)
            break;
          if ((_DWORD)v12 == v22 && (_DWORD)v14 == v17)
            break;
          if (++v16 >= *(_QWORD *)(a1 + 32))
            goto LABEL_18;
        }
        v15 = *(float *)sub_1B18F39D4(*(_QWORD **)(a1 + 56), v16, a3, a4, a5, a6, a7, a8);
      }
LABEL_18:
      *(double *)v25.i64 = sub_1B17EE400(*(_QWORD *)(a1 + 64), v12, a3, a4, a5, a6, a7, a8);
      v41 = v25;
      *(double *)v37.i64 = sub_1B17EE400(*(_QWORD *)(a1 + 64), v14, v26, v27, v28, v29, v30, v31);
      v38 = v37;
      v39 = v15 * 0.5;
      if ((float)(v15 * 0.5) > 1.0)
        v39 = 1.0;
      v40 = 2.0 - (float)(v15 * 0.5);
      if (v40 > 1.0)
        v40 = 1.0;
      v42[0] = LODWORD(v39) | ((unint64_t)LODWORD(v40) << 32);
      v42[1] = 0x3F80000000000000;
      sub_1B17FA4D4(*(_QWORD *)(a1 + 72), *(float32x4_t **)(a1 + 80), (float *)v42, v32, v33, v34, v35, v36, v41, v38);
    }
    while (v10 != v11);
  }
}

void sub_1B17FC754(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;

  v13 = 47;
  if ((_DWORD)a6)
    v13 = 66;
  v14 = (uint64_t)&a1[v13];
  sub_1B17F9850(a1, (uint64_t)&a1[v13], a3, a4, a5, a6, a7, a8);
  sub_1B17FC7DC((uint64_t)a1, a2, a3, a4, a5, v14);
}

void sub_1B17FC7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  float *v12;
  float32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  _OWORD *v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  uint64_t v30;
  int8x16_t v31;
  float v32;
  float v33;
  int v34;
  int v35;
  __float2 v36;
  __float2 v37;
  __float2 v38;
  float32x4_t v39;
  float32x4_t v40;
  _OWORD *v41;
  __int32 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  float32x4_t *i;
  __int16 v49;
  __int16 v50;
  __int16 *v51;
  int j;
  __int16 v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 *)(a6 + 48);
  if (*(_BYTE *)(a6 + 48))
    v9 = 51;
  else
    v9 = 52;
  *(double *)v13.i64 = MEMORY[0x1E0C80A78](a1, a2);
  v17 = (_OWORD *)&v54.f32[-4 * v9];
  v19 = *v18;
  v20 = vmlaq_n_f32(*v10, *v18, v13.f32[0]);
  if (v11)
  {
    v13 = *v11;
    v15 = v11[1];
    v21 = v11[2];
    v22 = vmulq_f32(v19, v19);
    v23 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v21, v19, 2), v15, *(float32x2_t *)v19.f32, 1), *v11, v19.f32[0]);
    v24 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]);
    v25 = vmulq_f32(v23, v23);
    v25.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u64[0];
    v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
    v26.i32[3] = 0;
    v27 = vrsqrteq_f32(v26);
    v28 = vmulq_f32(v27, vrsqrtsq_f32(v26, vmulq_f32(v27, v27)));
    v29 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v25.f32[0] != 0.0)), 0x1FuLL));
    v29.i32[3] = 0;
    v19 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v29), (int8x16_t)vmulq_f32(v23, vmulq_n_f32(vmulq_f32(v28, vrsqrtsq_f32(v26, vmulq_f32(v28, v28))), v24)), (int8x16_t)v23);
    v16 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v11[3], v21, v20, 2), v15, *(float32x2_t *)v20.f32, 1), *v11, v20.f32[0]);
    v20 = v16;
    v54 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v11[3], v21, *v10, 2), v15, *(float32x2_t *)v10->f32, 1), *v11, COERCE_FLOAT(*v10));
  }
  else
  {
    v54 = *v10;
  }
  v30 = 0;
  v13.i32[0] = v19.i32[2];
  v15.i32[0] = 1.0;
  v31.i64[0] = 0x8000000080000000;
  v31.i64[1] = 0x8000000080000000;
  v31.i32[0] = vbslq_s8(v31, (int8x16_t)v15, (int8x16_t)v13).i32[0];
  v16.f32[0] = v19.f32[1] / (float)(fabsf(v19.f32[2]) + 1.0);
  v32 = vmuls_lane_f32(v16.f32[0], *(float32x2_t *)v19.f32, 1);
  v16.f32[0] = -(float)(v19.f32[0] * v16.f32[0]);
  v13.f32[0] = v19.f32[2] + (float)(*(float *)v31.i32 * v32);
  v13.f32[1] = *(float *)v31.i32 * v16.f32[0];
  v13.f32[2] = -v19.f32[0];
  v33 = 0.0;
  v34 = ((int)(float)(v12[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(v12[2], 0.0), 1.0) * 255.0) << 16);
  v16.f32[1] = 1.0 - v32;
  v16.i32[2] = vmuls_lane_f32(-*(float *)v31.i32, *(float32x2_t *)v19.f32, 1);
  v55 = vmulq_n_f32(v16, v14);
  v56 = vmulq_n_f32(v13, v14);
  v35 = v34 | ((int)(float)(fminf(fmaxf(v12[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*v12, 0.0), 1.0)
                                                                                       * 255.0);
  v57 = v20;
  do
  {
    v38 = __sincosf_stret(v33);
    v39 = v57;
    v40 = vmlaq_n_f32(vmlaq_n_f32(v57, v56, v38.__cosval), v55, v38.__sinval);
    v41 = &v17[v30];
    *(_QWORD *)v41 = v40.i64[0];
    DWORD2(v17[v30]) = v40.i32[2];
    *((_DWORD *)v41 + 3) = v35;
    v33 = v33 + 0.12566;
    ++v30;
  }
  while (v30 != 50);
  v42 = v54.i32[2];
  *((_QWORD *)v17 + 100) = v54.i64[0];
  *((_DWORD *)v17 + 202) = v42;
  *((_DWORD *)v17 + 203) = v35;
  if (!v8)
  {
    *((_QWORD *)v17 + 102) = v39.i64[0];
    *((_DWORD *)v17 + 206) = v39.i32[2];
    *((_DWORD *)v17 + 207) = v35;
  }
  ((void (*)(_QWORD, _QWORD))MEMORY[0x1E0C80A78])(v36, v37);
  v46 = (char *)&v54 - v45;
  v47 = -49;
  for (i = (float32x4_t *)((char *)&v54 - v45); ; i = (float32x4_t *)v51)
  {
    v49 = v47 + 49;
    v50 = v47;
    if (v47 >= 0xFFFFFFCF)
      v50 = v47 + 50;
    if (!v8)
      break;
    v51 = &i->i16[2];
    i->i16[0] = v49;
    i->i16[1] = v50;
    if (!v47)
    {
      *(_OWORD *)v51 = xmmword_1B2246040;
      goto LABEL_24;
    }
LABEL_18:
    ++v47;
  }
  v51 = &i->i16[3];
  i->i16[2] = v50;
  i->i16[0] = 51;
  i->i16[1] = v49;
  if (v47)
    goto LABEL_18;
  for (j = 1; j != 51; ++j)
  {
    *v51 = 50;
    v51[1] = j - 1;
    if (j == 50)
      v53 = 0;
    else
      v53 = j;
    v51[2] = v53;
    v51 += 3;
  }
LABEL_24:
  sub_1B17F8B98(a1, (uint64_t)(&v54 - v9), v9, (uint64_t)v46, v43, a6, 1, v44, v54.i64[0]);
}

void sub_1B17FCB54(uint64_t *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, float a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v35;
  __int32 v36;
  int v37;
  uint64_t v38;
  __int32 v39;
  int v40;
  uint64_t v41;
  __int32 v42;
  int v43;
  uint64_t v44;
  __int32 v45;
  int v46;
  uint64_t v47;
  __int32 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v16 = 47;
  if ((_DWORD)a6)
    v16 = 66;
  v17 = (uint64_t)&a1[v16];
  sub_1B17F9850(a1, (uint64_t)&a1[v16], (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
  v19.i32[0] = 1.0;
  v20.i64[0] = 0x8000000080000000;
  v20.i64[1] = 0x8000000080000000;
  v22 = a3->f32[1];
  v21.i32[0] = a3->i32[2];
  v20.i32[0] = vbslq_s8(v20, v19, v21).i32[0];
  v23 = v22 / (float)(fabsf(*(float *)v21.i32) + 1.0);
  v24.f32[0] = -(float)(a3->f32[0] * v23);
  v25.f32[0] = *(float *)v21.i32 + (float)(*(float *)v20.i32 * (float)(v22 * v23));
  v25.f32[1] = *(float *)v20.i32 * v24.f32[0];
  v25.f32[2] = -a3->f32[0];
  v24.f32[1] = 1.0 - (float)(v22 * v23);
  v24.f32[2] = -(float)(*(float *)v20.i32 * v22);
  v26 = vmulq_n_f32(*a3, *(float *)&a9);
  v27 = vmlaq_n_f32(v26, vaddq_f32(v24, v25), a10 * 0.5);
  v28 = vmlaq_n_f32(v26, vsubq_f32(v25, v24), a10 * 0.5);
  v29 = vmlaq_n_f32(v26, vsubq_f32(vnegq_f32(v25), v24), a10 * 0.5);
  v30 = vmlaq_n_f32(v26, vsubq_f32(v24, v25), a10 * 0.5);
  v31 = *a2;
  if (a4)
  {
    v32 = *(float32x4_t *)(a4 + 16);
    v33 = *(float32x4_t *)(a4 + 32);
    v30 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a4 + 48), v33, v30, 2), v32, *(float32x2_t *)v30.f32, 1), *(float32x4_t *)a4, v30.f32[0]);
    v29 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a4 + 48), v33, v29, 2), v32, *(float32x2_t *)v29.f32, 1), *(float32x4_t *)a4, v29.f32[0]);
    v28 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a4 + 48), v33, v28, 2), v32, *(float32x2_t *)v28.f32, 1), *(float32x4_t *)a4, v28.f32[0]);
    v27 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a4 + 48), v33, v27, 2), v32, *(float32x2_t *)v27.f32, 1), *(float32x4_t *)a4, v27.f32[0]);
    v31 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a4 + 48), v33, v31, 2), v32, *(float32x2_t *)v31.f32, 1), *(float32x4_t *)a4, v31.f32[0]);
  }
  v35 = v31.i64[0];
  v36 = v31.i32[2];
  v38 = v27.i64[0];
  v39 = v27.i32[2];
  v41 = v28.i64[0];
  v42 = v28.i32[2];
  v44 = v29.i64[0];
  v45 = v29.i32[2];
  v47 = v30.i64[0];
  v48 = v30.i32[2];
  v49 = ((int)(float)(a5[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(a5[2], 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(a5[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*a5, 0.0), 1.0) * 255.0);
  v46 = v49;
  v43 = v49;
  v40 = v49;
  v37 = v49;
  sub_1B17F8B98((uint64_t)a1, (uint64_t)&v35, 5, (uint64_t)&unk_1B22462D8, 16, v17, 1, v18, *(uint64_t *)&a9);
}

void sub_1B17FCDC4(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;
  uint64_t *v16;
  double v17;

  v13 = a1 + 1136;
  sub_1B17F9850((uint64_t *)a1, a1 + 1136, a3, a4, a5, a6, a7, a8);
  sub_1B17FCE9C(a1, a1 + 1440, (uint64_t (*)(void))sub_1B17FD344, 0, 0);
  v14 = *(CFTypeRef *)(a1 + 1168);
  v15 = *(CFTypeRef *)(a1 + 1440);
  if (v14 != v15)
  {
    if (v14)
    {
      CFRelease(*(CFTypeRef *)(a1 + 1168));
      *(_QWORD *)(a1 + 1168) = 0;
      v15 = *(CFTypeRef *)(a1 + 1440);
    }
    if (v15)
      v15 = CFRetain(v15);
    *(_QWORD *)(a1 + 1168) = v15;
  }
  if (a3)
    v16 = (uint64_t *)a3;
  else
    v16 = (uint64_t *)&xmmword_1B2246280;
  v17 = a9;
  sub_1B17FFBC8(a1, &v17, v16, a2, v13, a1 + 1440, 1u, 1);
}

void sub_1B17FCE9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  float v9;
  int v10;
  void *v11;
  const __CTFont *v12;
  CFIndex Length;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 GlyphsForCharacters;
  uint64_t v19;
  CGSize *v20;
  float *v21;
  int v22;
  CFIndex v23;
  double width;
  float v25;
  double v26;
  double Descent;
  double Ascent;
  double v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  double v36;
  double *v37;
  CFIndex v38;
  float v39;
  double v40;
  double v41;
  float v42;
  double v43;
  float v44;
  size_t v45;
  CGColorSpace *v46;
  CGContextRef v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CGContext *v54;
  CGColorSpace *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  CGImage *Image;
  __int128 v61;
  double v62[3];
  uint64_t v63;
  CGFloat components[2];
  __int128 v65;
  uint64_t v66;
  CFRange v67;
  CGRect BoundingBox;
  CGRect v69;

  v66 = *MEMORY[0x1E0C80C00];
  v9 = sub_1B1815C9C(*(_QWORD *)(a1 + 8));
  v10 = v9 > 1.0;
  if (*(_QWORD *)a2)
  {
    if (*(unsigned __int8 *)(a2 + 24) == v10)
      return;
    CFRelease(*(CFTypeRef *)a2);
    *(_QWORD *)a2 = 0;
  }
  v63 = 0;
  v61 = *MEMORY[0x1E0C9D820];
  *(_OWORD *)v62 = v61;
  if (a4)
  {
    v11 = *(void **)(a2 + 56);
    if (v11)
      free(v11);
    (*(void (**)(uint64_t, uint64_t *, double *, uint64_t))(a4 + 16))(a4, &v63, v62, a2 + 56);
    if (!v63)
    {
      *(_QWORD *)(a2 + 56) = 0;
      *(_OWORD *)v62 = v61;
    }
  }
  v12 = (const __CTFont *)a3();
  MEMORY[0x1E0C80A78](Length, v14);
  v15 = (2 * Length + 15) & 0xFFFFFFFFFFFFFFF0;
  v67.location = 0;
  v67.length = Length;
    v67,
    (UniChar *)((char *)&v62[-2] - v15));
  MEMORY[0x1E0C80A78](v16, v17);
  GlyphsForCharacters = CTFontGetGlyphsForCharacters(v12, (const UniChar *)((char *)&v62[-2] - v15), (CGGlyph *)((char *)&v62[-2] - v15), Length);
  MEMORY[0x1E0C80A78](GlyphsForCharacters, v19);
  v20 = (CGSize *)&v62[-2 * Length - 2];
  CTFontGetAdvancesForGlyphs(v12, kCTFontOrientationHorizontal, (const CGGlyph *)((char *)&v62[-2] - v15), v20, Length);
  *(_QWORD *)(a2 + 40) = malloc_type_realloc(*(void **)(a2 + 40), 4 * Length, 0x100004052888210uLL);
  *(_WORD *)(a2 + 36) = 0;
  BoundingBox = CTFontGetBoundingBox(v12);
  *(_WORD *)(a2 + 48) = vcvtpd_s64_f64(BoundingBox.size.height);
  if (Length >= 1)
  {
    v21 = *(float **)(a2 + 40);
    LOWORD(v22) = *(_WORD *)(a2 + 36);
    v23 = Length;
    do
    {
      width = v20->width;
      ++v20;
      v25 = width;
      *v21++ = v25;
      v26 = ceil(width);
      if (v26 <= (double)(__int16)v22)
        v26 = (double)(__int16)v22;
      v22 = (int)v26;
      --v23;
    }
    while (v23);
    *(_WORD *)(a2 + 36) = v22;
  }
  Descent = CTFontGetDescent(v12);
  Ascent = CTFontGetAscent(v12);
  v29 = Ascent + CTFontGetDescent(v12);
  v30 = v29 + CTFontGetLeading(v12);
  *(float *)(a2 + 32) = v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v33 = *(__int16 *)(a2 + 36);
  if (Length > 0)
  {
    v34 = 0;
    v35 = Descent;
    v36 = v35;
    v37 = &v62[-2 * Length - 1];
    v38 = Length;
    do
    {
      *(v37 - 1) = (double)v34;
      *v37 = v36;
      v37 += 2;
      v34 += v33;
      --v38;
    }
    while (v38);
  }
  v39 = ceil(v62[0]) + (float)((float)(int)v33 + (float)(Length * v33));
  v40 = (double)*(__int16 *)(a2 + 48);
  v41 = ceil(v62[1]);
  if (v41 > v40)
    v40 = v41;
  v42 = v40;
  v43 = v42;
  *(double *)(a2 + 8) = v39;
  *(double *)(a2 + 16) = v42;
  *(_BYTE *)(a2 + 24) = v10;
  v44 = v9 * v42;
  v45 = vcvtms_u32_f32(v9 * v42);
  v46 = (CGColorSpace *)sub_1B179D1E8();
  v47 = CGBitmapContextCreate(0, vcvtms_u32_f32(v9 * v39), v45, 8uLL, vcvts_n_u32_f32(floorf(v9 * v39), 2uLL), v46, 0x4001u);
  if (v47)
  {
    v54 = v47;
    v55 = (CGColorSpace *)sub_1B179D1E8();
    CGContextSetFillColorSpace(v54, v55);
    *(_OWORD *)components = xmmword_1B22462F8;
    v65 = unk_1B2246308;
    CGContextSetFillColor(v54, components);
    CGContextTranslateCTM(v54, 0.0, floorf(v44));
    CGContextScaleCTM(v54, v9, (float)-v9);
    CTFontDrawGlyphs(v12, (const CGGlyph *)((char *)&v62[-2] - v15), (const CGPoint *)&v62[-2 * Length - 2], Length, v54);
    v56 = *(__int16 *)(a2 + 36);
    v69.origin.x = (float)(v39 - (float)v56);
    v69.size.width = (double)v56;
    v69.size.height = (double)*(__int16 *)(a2 + 48);
    v69.origin.y = 0.0;
    CGContextFillRect(v54, v69);
    if (a5)
    {
      v57 = v63;
      if (v63)
      {
        v58 = Length * *(__int16 *)(a2 + 36);
        if (v63 >= 1)
        {
          v59 = *(float **)(a2 + 56);
          do
          {
            *v59 = *v59 + (float)v58;
            v59 += 4;
            --v57;
          }
          while (v57);
        }
        CGContextTranslateCTM(v54, (double)v58, 0.0);
        UIGraphicsPushContext(v54);
        (*(void (**)(uint64_t, double, double))(a5 + 16))(a5, v39, v43);
        UIGraphicsPopContext();
      }
    }
    Image = CGBitmapContextCreateImage(v54);
    *(_QWORD *)a2 = sub_1B1809F34(Image);
    CFRelease(Image);
    CFRelease(v54);
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Unable to create context"), v48, v49, v50, v51, v52, v53, v61);
  }
}

uint64_t sub_1B17FD344(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_monospacedSystemFontOfSize_weight_(MEMORY[0x1E0DC37E8], a2, a3, a4, 11.0, *MEMORY[0x1E0DC4B90]);
}

void sub_1B17FD360(uint64_t a1, uint64_t *a2, const __CFString *a3, float64x2_t a4, float64_t a5, float a6)
{
  double v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  const char *v16;
  uint64_t v17;
  float32x2_t v18;
  const __CFString *v19;
  float32x2_t v20;
  float32x2_t v21;
  __int128 v22;
  float32x2_t v23;

  a4.f64[1] = a5;
  v20 = vcvt_f32_f64(vaddq_f64(a4, (float64x2_t)xmmword_1B2246050));
  v10 = nullsub_16(a1);
  v22 = xmmword_1B2246100;
  sub_1B17F9F44(a1, *a2, a2[1], (float *)&v22, a1 + 72, 1, v11, v12, *(float *)&v10, v13, v14, v15);
  v23 = v20;
  sub_1B17FFBC8(a1, &v23, (uint64_t *)&xmmword_1B2246280, a3, a1 + 72, a1 + 1440, 1u, 1);
  if (a6 > 0.000001)
  {
    v18.i32[1] = v20.i32[1];
    v18.f32[0] = v20.f32[0] + 90.0;
    v21 = v18;
    v19 = (const __CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v16, (uint64_t)CFSTR("%2.1fms"), v17, (float)(a6 * 1000.0));
    v23 = v21;
    sub_1B17FFBC8(a1, &v23, (uint64_t *)&xmmword_1B2246280, v19, a1 + 72, a1 + 1440, 1u, 1);
  }
}

void sub_1B17FD4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  float v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  CFTypeRef v26;
  const void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  const void *v30;
  float v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  float v40;
  float v41;
  float v42;
  double v43;
  double v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float64x2_t v54;
  double v55;
  float v56;
  const char *v57;
  uint64_t v58;
  float v59;
  double v60;
  float64x2_t v61;
  float v62;
  double v63;
  float v64;
  float64x2_t v65;
  float v66;
  double v67;
  float v68;
  float64x2_t v69;
  float v70;
  float v71;
  double v72;
  float v73;
  float64x2_t v74;
  float v75;
  double v76;
  float v77;
  float64x2_t v78;
  float v79;
  double v80;
  float64x2_t v81;
  float v82;
  double v83;
  float v84;
  float64x2_t v85;
  float v86;
  double v87;
  float v88;
  double v89;
  const __CFString *v90;
  __CFString *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const __CFString *v95;
  unint64_t v96;
  int8x8_t v97;
  int8x8_t v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float32x2_t v108;
  const __CFString *v109;
  uint64_t *v110;
  float v111;
  float v112;
  double v113;
  unsigned int v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  float *v125;
  float v126;
  float v127;
  float v128;
  double v129;
  double v130;
  float v131;
  float v132;
  double v133;
  double v134;
  float v135;
  float v136;
  uint64_t v137;
  uint64_t v138;
  float v139;
  uint64_t v140;
  uint64_t v141;
  float v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  double v146;
  float v147;
  double v148;
  float v149;
  double v150;
  double v151;
  float v152;
  float v153;
  float v154;
  uint64_t v155;
  uint64_t v156;
  float v157;
  double v158;
  float v159;
  float v160;
  double v161;
  float v162;
  uint64_t v163;
  uint64_t v164;
  float v165;
  double v166;
  float v167;
  float v168;
  uint64_t v169;
  const __CFString *v170;
  const __CFString *v171;
  uint64_t v172;
  const __CFString *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  float v189;
  double v190;
  float v191;
  float v192;
  float32x2_t v193;
  float v194;
  float v195;
  float v196;
  float v197;
  float v198;
  float v199;
  float v200;
  __n128 v201;
  double v202;
  float32x2_t v203;
  __n128 v204;
  __int128 v205;
  __int128 v206;
  _QWORD v207[5];
  _QWORD v208[5];
  _QWORD v209[6];
  _QWORD v210[2];

  v9 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
  v201 = sub_1B1815A98((__n128 *)*(_QWORD *)(a1 + 8));
  v10 = sub_1B1815C9C(*(_QWORD *)(a1 + 8));
  objc_msgSend_pushDebugGroup_(v9, v11, (uint64_t)CFSTR("VFX - Draw Statistics"), v12);
  v204 = sub_1B1815AC8((__n128 *)*(_QWORD *)(a1 + 8));
  sub_1B17F9850((uint64_t *)a1, a1 + 72, v13, v14, v15, v16, v17, v18);
  sub_1B17F9850((uint64_t *)a1, a1 + 224, v19, v20, v21, v22, v23, v24);
  v209[0] = 0;
  v209[1] = v209;
  v209[2] = 0x3052000000;
  v209[3] = sub_1B17FE52C;
  v209[4] = sub_1B17FE53C;
  v209[5] = 0;
  v207[4] = v209;
  v208[0] = MEMORY[0x1E0C809B0];
  v208[1] = 3221225472;
  v208[2] = sub_1B17FE548;
  v208[3] = &unk_1E63D6738;
  v208[4] = v209;
  v207[0] = MEMORY[0x1E0C809B0];
  v207[1] = 3221225472;
  v207[2] = sub_1B17FE728;
  v207[3] = &unk_1E63D6760;
  sub_1B17FCE9C(a1, a1 + 1504, (uint64_t (*)(void))sub_1B17FE850, (uint64_t)v208, (uint64_t)v207);
  sub_1B17FCE9C(a1, a1 + 1440, (uint64_t (*)(void))sub_1B17FD344, 0, 0);
  v25 = *(CFTypeRef *)(a1 + 104);
  v26 = *(CFTypeRef *)(a1 + 1440);
  if (v25 != v26)
  {
    if (v25)
    {
      CFRelease(*(CFTypeRef *)(a1 + 104));
      *(_QWORD *)(a1 + 104) = 0;
      v26 = *(CFTypeRef *)(a1 + 1440);
    }
    if (v26)
      v26 = CFRetain(v26);
    *(_QWORD *)(a1 + 104) = v26;
  }
  v27 = *(const void **)(a1 + 112);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v28 = *(CFTypeRef *)(a1 + 256);
  v29 = *(CFTypeRef *)(a1 + 1504);
  if (v28 != v29)
  {
    if (v28)
    {
      CFRelease(*(CFTypeRef *)(a1 + 256));
      *(_QWORD *)(a1 + 256) = 0;
      v29 = *(CFTypeRef *)(a1 + 1504);
    }
    if (v29)
      v29 = CFRetain(v29);
    *(_QWORD *)(a1 + 256) = v29;
  }
  v30 = *(const void **)(a1 + 264);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(a1 + 264) = 0;
  }
  if (*(_BYTE *)(a1 + 65881))
    v31 = (float)(*(float *)(a1 + 1472) * 7.0) + 14.0;
  else
    v31 = 0.0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v37 = objc_msgSend_preferredFramesPerSecond(*(void **)(a1 + 16), v32, v33, v34);
    if (v37)
      v38 = v37;
    else
      v38 = 60;
  }
  else
  {
    v38 = 60;
  }
  v39 = *(unsigned __int8 *)(a1 + 65881);
  v40 = v204.n128_f32[1] + v31;
  v41 = v201.n128_f32[2] / v10;
  if (*(_BYTE *)(a1 + 65881))
  {
    v206 = xmmword_1B2246100;
    if (v41 < 400.0)
      v42 = 225.0;
    else
      v42 = 280.0;
    v43 = *(double *)(a1 + 66064);
    v44 = *(double *)(a1 + 66152);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v50 = objc_msgSend_preferredFramesPerSecond(*(void **)(a1 + 16), v45, v46, v47);
      if (v50)
        v38 = v50;
      else
        v38 = 60;
    }
    v51 = v43 - v44;
    if ((float)(1.0 / (float)v38) <= v51)
      v52 = v43 - v44;
    else
      v52 = 1.0 / (float)v38;
    sub_1B17F9F44(a1, 0x3E19999A3E19999ALL, 0x3F4000003E19999ALL, (float *)&v206, a1 + 72, 1, v48, v49, 0.0, 0.0, v41, v40);
    v197 = v31;
    v199 = v42;
    v195 = v204.n128_f32[1] + v31;
    v53 = v41;
    v193 = vadd_f32((float32x2_t)v204.n128_u64[0], (float32x2_t)vdup_n_s32(0x425C0000u));
    v54 = vcvtq_f64_f32(v193);
    v205 = xmmword_1B22460E0;
    v55 = v54.f64[1];
    v56 = 0.0;
    v202 = v54.f64[0];
    sub_1B17FE86C(a1, (float *)&v205, a1 + 72, v54.f64[0], v54.f64[1], 0.0, 6.2832);
    v59 = v204.n128_f32[0] + 110.0;
    v60 = *(double *)(a1 + 66096);
    if (v60 >= 0.0)
    {
      v56 = v60 * 6.28318531 / v52 + 0.0;
      v205 = xmmword_1B2246060;
      sub_1B17FE86C(a1, (float *)&v205, a1 + 72, v202, v55, 0.0, v56);
      v62 = v60;
      if (v53 < 400.0)
        v62 = 0.0;
      v61.f64[0] = v59;
      sub_1B17FD360(a1, (uint64_t *)&v205, CFSTR("Animations"), v61, (float)(v204.n128_f32[1] + 80.0), v62);
    }
    v63 = *(double *)(a1 + 66080);
    if (v63 >= 0.0)
    {
      v64 = v63 * 6.28318531 / v52 + v56;
      v205 = xmmword_1B2246070;
      sub_1B17FE86C(a1, (float *)&v205, a1 + 72, v202, v55, v56, v64);
      v66 = v63;
      if (v53 < 400.0)
        v66 = 0.0;
      v65.f64[0] = v59;
      sub_1B17FD360(a1, (uint64_t *)&v205, CFSTR("Physics"), v65, (float)(v204.n128_f32[1] + 60.0), v66);
    }
    else
    {
      v64 = v56;
    }
    v67 = *(double *)(a1 + 66072);
    if (v67 >= 0.0)
    {
      v68 = v67 * 6.28318531 / v52 + v64;
      v205 = xmmword_1B2246080;
      sub_1B17FE86C(a1, (float *)&v205, a1 + 72, v202, v55, v64, v68);
      v70 = v67;
      if (v53 < 400.0)
        v70 = 0.0;
      v69.f64[0] = v59;
      sub_1B17FD360(a1, (uint64_t *)&v205, CFSTR("Constraints"), v69, (float)(v204.n128_f32[1] + 40.0), v70);
    }
    else
    {
      v68 = v64;
    }
    v71 = v199 + v204.n128_f32[0];
    v72 = *(double *)(a1 + 66136);
    if (v72 >= 0.0)
    {
      v73 = v72 * 6.28318531 / v52 + v68;
      v205 = xmmword_1B2246090;
      sub_1B17FE86C(a1, (float *)&v205, a1 + 72, v202, v55, v68, v73);
      v75 = v72;
      if (v53 < 400.0)
        v75 = 0.0;
      v74.f64[0] = v71;
      sub_1B17FD360(a1, (uint64_t *)&v205, CFSTR("Delegate"), v74, (float)(v204.n128_f32[1] + 80.0), v75);
    }
    else
    {
      v73 = v68;
    }
    v76 = *(double *)(a1 + 66120);
    if (v76 >= 0.0)
    {
      v77 = v76 * 6.28318531 / v52 + v73;
      v205 = xmmword_1B22460A0;
      sub_1B17FE86C(a1, (float *)&v205, a1 + 72, v202, v55, v73, v77);
      v79 = v76;
      if (v53 < 400.0)
        v79 = 0.0;
      v78.f64[0] = v71;
      sub_1B17FD360(a1, (uint64_t *)&v205, CFSTR("Rendering"), v78, (float)(v204.n128_f32[1] + 60.0), v79);
    }
    else
    {
      v77 = v73;
    }
    v80 = *(double *)(a1 + 66168);
    if (v80 >= 0.0)
    {
      v81.f64[1] = 0.00781250185;
      v205 = xmmword_1B22460B0;
      v82 = v80;
      if (v53 < 400.0)
        v82 = 0.0;
      v81.f64[0] = v71;
      sub_1B17FD360(a1, (uint64_t *)&v205, CFSTR("GPU"), v81, (float)(v204.n128_f32[1] + 40.0), v82);
    }
    v83 = *(double *)(a1 + 66128);
    if (v83 >= 0.0)
    {
      v84 = v83 * 6.28318531 / v52 + v77;
      v205 = xmmword_1B22460C0;
      sub_1B17FE86C(a1, (float *)&v205, a1 + 72, v202, v55, v77, v84);
      v86 = v83;
      if (v53 < 400.0)
        v86 = 0.0;
      v85.f64[0] = v71;
      sub_1B17FD360(a1, (uint64_t *)&v205, CFSTR("2D"), v85, (float)(v204.n128_f32[1] + 20.0), v86);
    }
    v87 = *(double *)(a1 + 66064) - fmax(*(double *)(a1 + 66152), 0.0);
    if (v87 < 0.0 || v87 >= 100.0)
    {
      v91 = (__CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v57, (uint64_t)CFSTR("--- ms"), v58);
      v41 = v53;
      v40 = v195;
      v31 = v197;
    }
    else
    {
      v88 = v87;
      v89 = v88;
      if (v87 >= 0.1)
        v90 = CFSTR("%2.1f s");
      else
        v90 = CFSTR("%2.1f ms");
      if (v87 >= 0.1)
        v91 = (__CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v57, (uint64_t)v90, v58, *(_QWORD *)&v89);
      else
        v91 = (__CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v57, (uint64_t)v90, v58, v89 * 1000.0);
      v41 = v53;
      v40 = v195;
      v31 = v197;
    }
    v95 = v91;
    v96 = objc_msgSend_length(v91, v92, v93, v94);
    v97 = (int8x8_t)vadd_f32(v193, (float32x2_t)0xC0C00000C1C80000);
    v98.i32[1] = v97.i32[1];
    *(float *)v98.i32 = *(float *)v97.i32 + 5.0;
    v210[0] = vbsl_s8((int8x8_t)vcgtd_u64(7uLL, v96), v98, v97);
    sub_1B17FFBC8(a1, v210, (uint64_t *)&xmmword_1B2246280, v95, a1 + 224, a1 + 1504, 1u, 1);
    v39 = *(unsigned __int8 *)(a1 + 65881);
  }
  v99 = *(float *)(a1 + 1472) + 6.0;
  if (v39)
    v100 = v40;
  else
    v100 = 0.0;
  if (v39)
    v101 = v40;
  else
    v101 = v204.n128_f32[1];
  v102 = v101 + v99;
  v206 = xmmword_1B2246100;
  sub_1B17F9F44(a1, 0, 0x3F40000000000000, (float *)&v206, a1 + 224, 1, v35, v36, 0.0, v100, v41, v101 + v99);
  *(_QWORD *)&v205 = 0;
  sub_1B17FFBC8(0, &v205, 0, CFSTR("$1$"), 0, a1 + 1504, 0, 0);
  __asm { FMOV            V1.2S, #7.0 }
  _D1.f32[1] = v31 + 3.0;
  v108 = vadd_f32((float32x2_t)v204.n128_u64[0], _D1);
  v200 = *(float *)&v205;
  v203 = v108;
  if (*(_BYTE *)(a1 + 65881))
    v109 = CFSTR("$1$");
  else
    v109 = CFSTR("$0$");
  if (*(_QWORD *)(a1 + 65896))
    v110 = (uint64_t *)&xmmword_1B2246280;
  else
    v110 = (uint64_t *)&unk_1B22460F0;
  *(float32x2_t *)&v205 = v108;
  sub_1B17FFBC8(a1, &v205, v110, v109, a1 + 224, a1 + 1504, 1u, 1);
  v111 = *(float *)(a1 + 65888);
  if ((float)(*(float *)(a1 + 65884) / (float)v38) <= 1.0)
    v112 = *(float *)(a1 + 65884) / (float)v38;
  else
    v112 = 1.0;
  if (v111 * 60.0 <= 1.0)
    v113 = v111 * 60.0;
  else
    v113 = 1.0;
  *(float *)&v114 = v112 * 0.33;
  v115 = sub_1B179CE94(v114 | 0x3F80000000000000, 1065353216);
  v119 = v115;
  v120 = v116;
  v190 = v113;
  v189 = v41;
  v121 = ceilf(v203.f32[0] + (float)(v200 + 5.0));
  v122 = 0x3F8000003F000000;
  v123 = 0x3F0000003F000000;
  v124 = (float)(v102 - v99) + (float)(v99 + -10.0) * 0.5;
  v125 = *(float **)(a1 + 1560);
  v126 = v125[8];
  *(_QWORD *)&v205 = 0;
  DWORD2(v205) = 0;
  v127 = v125[10];
  v128 = v125[11] / *(double *)(a1 + 1520);
  *((float *)&v205 + 3) = v128;
  v191 = v126;
  v129 = v126;
  v130 = *(double *)(a1 + 1512);
  v131 = v126 / v130;
  *(float *)&v205 = v131;
  v198 = v127;
  if (v112 >= 0.083333)
  {
    v133 = v127;
    v132 = v121;
    v137 = v115;
    v138 = v120;
  }
  else
  {
    v132 = v121 + (float)(v112 * 60.0);
    v133 = v127;
    v134 = v129 + (float)(v112 / 0.083333) * (v127 * 0.5);
    v135 = v134 / v130;
    *((float *)&v205 + 2) = v135;
    sub_1B17F9F44(a1, v115, v116, (float *)&v205, a1 + 224, 1, v117, v118, v121, v124, v132, v124 + 10.0);
    v130 = *(double *)(a1 + 1512);
    v136 = v134 / v130;
    *(float *)&v205 = v136;
    v137 = 0x3F0000003F000000;
    v138 = 0x3F8000003F000000;
  }
  v139 = (v129 + v133 * 0.5) / v130;
  *((float *)&v205 + 2) = v139;
  v194 = v121 + 5.0;
  sub_1B17F9F44(a1, v137, v138, (float *)&v205, a1 + 224, 1, v117, v118, v132, v124, v121 + 5.0, v124 + 10.0);
  LODWORD(v205) = 1065351538;
  DWORD2(v205) = 1065353216;
  if (v112 <= 0.083333 || v112 >= 0.91667)
  {
    if (v112 >= 0.91667)
    {
      v122 = v120;
      v123 = v119;
    }
    v142 = v121 + 5.0;
  }
  else
  {
    v142 = (float)(v121 + (float)(v112 * 60.0)) + -5.0;
    sub_1B17F9F44(a1, v119, v120, (float *)&v205, a1 + 224, 1, v140, v141, v194, v124, v142, v124 + 10.0);
  }
  v196 = v121 + 60.0;
  v192 = (float)(v121 + 60.0) + -5.0;
  sub_1B17F9F44(a1, v123, v122, (float *)&v205, a1 + 224, 1, v140, v141, v142, v124, v192, v124 + 10.0);
  if (v112 <= 0.91667)
  {
    v152 = v198;
    v150 = *(double *)(a1 + 1512);
    v151 = (v129 + v198 * 0.5) / v150;
    v145 = (float)(v121 + 60.0) + -5.0;
  }
  else
  {
    v145 = v121 + (float)(v112 * 60.0);
    v146 = *(double *)(a1 + 1512);
    v147 = (v129 + v198 * 0.5) / v146;
    v148 = v129 + ((float)(v112 + -0.91667) / 0.0833333135 + 1.0) * v198 * 0.5;
    v149 = v148 / v146;
    *(float *)&v205 = v147;
    *((float *)&v205 + 2) = v149;
    sub_1B17F9F44(a1, v119, v120, (float *)&v205, a1 + 224, 1, v143, v144, v192, v124, v145, v124 + 10.0);
    v150 = *(double *)(a1 + 1512);
    v151 = v148 / v150;
    v152 = v198;
  }
  v153 = v151;
  v154 = (float)(v191 + v152) / v150;
  *(float *)&v205 = v153;
  *((float *)&v205 + 2) = v154;
  sub_1B17F9F44(a1, 0x3F0000003F000000, 0x3F8000003F000000, (float *)&v205, a1 + 224, 1, v143, v144, v145, v124, v196, v124 + 10.0);
  v157 = v190;
  v158 = *(double *)(a1 + 1512);
  v159 = v129 / v158;
  *((float *)&v205 + 3) = *((float *)&v205 + 3) * 0.25;
  *(float *)&v205 = v159;
  if (v157 >= 0.083333)
  {
    v161 = v129 + v198 * 0.5;
    v160 = v121 + 5.0;
  }
  else
  {
    v160 = v121 + (float)(v157 * 60.0);
    v161 = v129 + (float)(v157 / 0.083333) * (v198 * 0.5);
  }
  v162 = v161 / v158;
  *((float *)&v205 + 2) = v162;
  sub_1B17F9F44(a1, 0x3F00000000000000, 0x3F8000003F800000, (float *)&v205, a1 + 224, 1, v155, v156, v121, v124, v160, v124 + 2.5);
  if (v157 <= 0.083333 || v157 >= 0.91667)
  {
    v165 = v121 + 60.0;
    if (v157 <= 0.91667)
      goto LABEL_117;
  }
  else
  {
    v165 = v121 + (float)(v157 * 60.0);
  }
  LODWORD(v205) = 1065351538;
  DWORD2(v205) = 1065353216;
  sub_1B17F9F44(a1, 0x3F00000000000000, 0x3F8000003F800000, (float *)&v205, a1 + 224, 1, v163, v164, v194, v124, v165 + -5.0, v124 + 2.5);
LABEL_117:
  if (v157 > 0.91667)
  {
    v166 = *(double *)(a1 + 1512);
    v167 = (v129 + v198 * 0.5) / v166;
    v168 = (v129 + ((float)(v157 + -0.91667) / 0.0833333135 + 1.0) * v198 * 0.5) / v166;
    *(float *)&v205 = v167;
    *((float *)&v205 + 2) = v168;
    sub_1B17F9F44(a1, 0x3F00000000000000, 0x3F8000003F800000, (float *)&v205, a1 + 224, 1, v163, v164, v192, v124, v121 + (float)(v157 * 60.0), v124 + 2.5);
  }
  HIDWORD(v169) = v203.i32[1];
  *(float *)&v169 = v196 + 7.0;
  v170 = *(const __CFString **)(a1 + 65904);
  v210[0] = v169;
  sub_1B17FFBC8(a1, v210, (uint64_t *)&xmmword_1B2246280, v170, a1 + 224, a1 + 1504, 1u, 1);
  v171 = *(const __CFString **)(a1 + 65912);
  v210[0] = 0;
  sub_1B17FFBC8(0, v210, 0, v171, 0, a1 + 1504, 0, 0);
  HIDWORD(v172) = v203.i32[1];
  *(float *)&v172 = ceilf((float)(v189 + -7.0) - *(float *)v210) - v204.n128_f32[2];
  v173 = *(const __CFString **)(a1 + 65912);
  v210[0] = v172;
  sub_1B17FFBC8(a1, v210, (uint64_t *)&xmmword_1B2246280, v173, a1 + 224, a1 + 1504, 1u, 1);
  sub_1B17F90F0(a1, a1 + 224, v174, v175, v176, v177, v178, v179);
  sub_1B17F90F0(a1, a1 + 72, v180, v181, v182, v183, v184, v185);
  *(_BYTE *)(a1 + 65880) = 1;
  if (v9)
    objc_msgSend_popDebugGroup(v9, v186, v187, v188);
  _Block_object_dispose(v209, 8);
}

void sub_1B17FE4E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1B17FE52C(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1B17FE53C(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1B17FE548(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  char *v7;
  float v8;
  float v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t result;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  _QWORD v24[2];
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  *a2 = 7;
  v7 = (char *)malloc_type_malloc(0x70uLL, 0x1000040451B5BE8uLL);
  *a4 = (uint64_t)v7;
  *(_DWORD *)v7 = 0;
  *(_OWORD *)(v7 + 4) = xmmword_1B22460D0;
  *((_DWORD *)v7 + 7) = 1098907648;
  *(_QWORD *)(v7 + 20) = 0x4180000000000000;
  v8 = (float)(*((float *)v7 + 4) + *((float *)v7 + 6)) + 1.0;
  *((float *)v7 + 8) = v8;
  *(_QWORD *)(v7 + 36) = 0x4120000000000000;
  *((_DWORD *)v7 + 11) = 1092616192;
  v9 = v8 + 10.0;
  v13 = objc_msgSend_monospacedSystemFontOfSize_weight_(MEMORY[0x1E0DC37E8], v10, v11, v12, 11.0, *MEMORY[0x1E0DC4B90]);
  v14 = *MEMORY[0x1E0DC32A8];
  v24[0] = *MEMORY[0x1E0DC32A0];
  v24[1] = v14;
  v25[0] = v13;
  v25[1] = objc_msgSend_whiteColor(MEMORY[0x1E0DC3658], v15, v16, v17);
  result = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v18, (uint64_t)v25, (uint64_t)v24, 2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  v20 = *a4;
  *(float *)(v20 + 48) = v9 + 1.0;
  *(_QWORD *)(v20 + 52) = 0x40D3EC00BF800000;
  *(_DWORD *)(v20 + 60) = 1095761920;
  v21 = (float)(v9 + 1.0) + 6.6226;
  *(float *)(v20 + 64) = v21;
  *(_QWORD *)(v20 + 68) = 0x40D99800BF800000;
  *(_DWORD *)(v20 + 76) = 1095761920;
  v22 = v21 + 6.7998;
  *(float *)(v20 + 80) = v22;
  *(_QWORD *)(v20 + 84) = 0x40D99800C0400000;
  *(_DWORD *)(v20 + 92) = 1095761920;
  v23 = v22 + 6.7998;
  *(float *)(v20 + 96) = v23;
  *(_QWORD *)(v20 + 100) = 0x40D3EC00BF800000;
  *(_DWORD *)(v20 + 108) = 1095761920;
  *(double *)a3 = (float)((float)(v23 + 6.6226) + 32.0);
  *(_QWORD *)(a3 + 8) = 0x4030000000000000;
  return result;
}

void sub_1B17FE728(uint64_t a1, double a2, double a3)
{
  id v5;
  const char *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  CGContext *CurrentContext;
  id v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;

  v5 = objc_alloc(MEMORY[0x1E0CB3498]);
  v7 = (void *)objc_msgSend_initWithString_attributes_(v5, v6, (uint64_t)CFSTR("+"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  objc_msgSend_drawAtPoint_(v7, v8, v9, v10, 0.0, 0.0);

  v11 = objc_alloc(MEMORY[0x1E0CB3498]);
  v13 = (void *)objc_msgSend_initWithString_attributes_(v11, v12, (uint64_t)CFSTR("-"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  objc_msgSend_drawAtPoint_(v13, v14, v15, v16, 16.0, 0.0);

  v20 = (void *)objc_msgSend_bezierPathWithOvalInRect_(MEMORY[0x1E0DC3508], v17, v18, v19, 33.0, 0.0, 10.0, 10.0);
  objc_msgSend_fill(v20, v21, v22, v23);
  CurrentContext = UIGraphicsGetCurrentContext();
  CGContextScaleCTM(CurrentContext, 1.0, -1.0);
  CGContextTranslateCTM(CurrentContext, 0.0, 4.0 - a3);
  v25 = objc_alloc(MEMORY[0x1E0CB3498]);
  v30 = (id)objc_msgSend_initWithString_attributes_(v25, v26, (uint64_t)CFSTR("◆▲.✸"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
  objc_msgSend_drawAtPoint_(v30, v27, v28, v29, 44.0, 0.0);

}

uint64_t sub_1B17FE850(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_monospacedSystemFontOfSize_weight_(MEMORY[0x1E0DC37E8], a2, a3, a4, 11.0, *MEMORY[0x1E0DC4B70]);
}

void sub_1B17FE86C(uint64_t a1, float *a2, uint64_t a3, double a4, double a5, float a6, float a7)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  char *v16;
  uint64_t v17;
  _WORD *v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  int v22;
  float v23;
  float v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  int32x2_t v29;
  __float2 v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  int v41;

  v10 = a2[2];
  v11 = a2[3];
  v12 = *a2;
  v13 = a2[1];
  v14 = a7 - a6;
  v15 = (int)fmax((float)(a7 - a6) / 6.28318531 * 100.0, 1.0);
  v41 = 2 * v15 + 2;
  v16 = (char *)malloc_type_malloc(20 * v41, 0x1000040A86A77D5uLL);
  v40 = (6 * v15);
  v18 = malloc_type_malloc(12 * v15, 0x1000040BDFB0063uLL);
  if ((v15 & 0x80000000) == 0)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = ((int)(float)(v11 * 255.0) << 24) | ((int)(float)(fminf(fmaxf(v10, 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(v13, 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(v12, 0.0), 1.0) * 255.0);
    v23 = v14 / (float)v15;
    v24 = 1.57079633 - a6;
    v25 = v15 + 1;
    v26 = 6 * v15;
    v27 = 6 * v25;
    v28 = (float *)(v16 + 20);
    v29 = vdup_n_s32(0x3F7FBE77u);
    __asm { FMOV            V14.2S, #1.0 }
    do
    {
      v35 = __sincosf_stret(v24 - (float)((float)v20 * v23));
      v36 = a4 + (float)(v35.__cosval * 40.0);
      v37 = a5 + (float)(v35.__sinval * 40.0);
      v38 = a4 + (float)(v35.__cosval * 30.0);
      *(v28 - 5) = v36;
      *(v28 - 4) = v37;
      *((_DWORD *)v28 - 1) = v22;
      *(_QWORD *)(v28 - 3) = _D14;
      v39 = a5 + (float)(v35.__sinval * 30.0);
      *v28 = v38;
      v28[1] = v39;
      *((_DWORD *)v28 + 4) = v22;
      *((int32x2_t *)v28 + 1) = v29;
      if (v26 != v21)
      {
        v18[v21] = v19;
        v18[(v21 + 1)] = v19 + 2;
        v18[(v21 + 2)] = v19 + 1;
        v18[(v21 + 3)] = v19 + 1;
        v18[(v21 + 4)] = v19 + 2;
        v18[(v21 + 5)] = v19 + 3;
      }
      v21 += 6;
      ++v20;
      v19 += 2;
      v28 += 10;
    }
    while (v27 != v21);
  }
  sub_1B17F8B98(a1, (uint64_t)v16, v41, (uint64_t)v18, v40, a3, 1, v17, v40);
  free(v18);
  free(v16);
}

char *sub_1B17FEAFC(char *result, const void *a2, unsigned int a3)
{
  if (a3 <= 9)
    return (char *)memcpy(result + 65928, a2, 4 * a3);
  return result;
}

void sub_1B17FEB18(uint64_t a1, double *__src, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  float v16;
  float v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  const __CFAllocator *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a1)
  {
    v6 = a1 + 65768;
    v7 = *(const void **)(a1 + 65920);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v6 + 152) = 0;
    }
    v8 = *(const void **)(v6 + 144);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v6 + 144) = 0;
    }
    v9 = *(const void **)(v6 + 136);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(v6 + 136) = 0;
    }
    if (*((_DWORD *)__src + 4))
    {
      memcpy((void *)(a1 + 65968), __src, 0x358uLL);
      if (a3)
      {
        v10 = *(_OWORD *)(a3 + 216);
        v11 = *(_OWORD *)(a3 + 248);
        *(_OWORD *)(a1 + 66200) = *(_OWORD *)(a3 + 232);
        *(_OWORD *)(a1 + 66216) = v11;
        *(_OWORD *)(a1 + 66184) = v10;
        v12 = *(_OWORD *)(a3 + 264);
        v13 = *(_OWORD *)(a3 + 280);
        v14 = *(_OWORD *)(a3 + 296);
        *(_QWORD *)(a1 + 66280) = *(_QWORD *)(a3 + 312);
        *(_OWORD *)(a1 + 66248) = v13;
        *(_OWORD *)(a1 + 66264) = v14;
        *(_OWORD *)(a1 + 66232) = v12;
      }
      v15 = __src[41];
      v16 = 0.0;
      if (v15 != 0.0)
        v16 = 1.0 / v15;
      v17 = __src[23];
      *(float *)(v6 + 116) = v16;
      *(float *)(v6 + 120) = v17;
      v18 = sub_1B17FECEC(*((unsigned int *)__src + 2));
      v19 = sub_1B17FECEC(*((unsigned int *)__src + 1));
      v20 = sub_1B17FECEC(*(unsigned int *)__src);
      if (*(_DWORD *)(v6 + 160))
      {
        v21 = 1;
      }
      else
      {
        v22 = 0;
        do
        {
          v23 = v22;
          if (v22 == 8)
            break;
        }
        while (!*(_DWORD *)(a1 + 65932 + 4 * v22++));
        v21 = v23 < 8;
      }
      *(_BYTE *)v6 = *(_BYTE *)v6 & 0xFE | v21;
      v25 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      *(_QWORD *)(v6 + 144) = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("$3$%@ $4$%@"), v18, v19);
      CFRelease(v18);
      CFRelease(v19);
      CFRelease(v20);
      sub_1B1813BC4(*(_QWORD *)(a1 + 8), v26, v27, v28, v29, v30, v31, v32);
      LODWORD(v33) = llroundf(*(float *)(v6 + 116));
      *(_QWORD *)(v6 + 136) = CFStringCreateWithFormat(v25, 0, CFSTR("%dfps"), v33);
    }
  }
}

const __CFString *sub_1B17FECEC(unint64_t a1)
{
  double v2;
  float v3;
  float v4;
  float v5;

  if (!a1)
    return CFSTR("0");
  if (a1 <= 0x3E7)
    return CFStringCreateWithFormat(0, 0, CFSTR("%zu"), a1);
  v2 = (double)a1;
  v3 = (double)a1 / 1000.0;
  if (v3 < 1000.0)
    return CFStringCreateWithFormat(0, 0, CFSTR("%.3gK"), v3);
  v4 = v2 / 1000000.0;
  if (v4 < 1000.0)
    return CFStringCreateWithFormat(0, 0, CFSTR("%.3gM"), v4);
  v5 = v2 / 1000000000.0;
  return CFStringCreateWithFormat(0, 0, CFSTR("%.3gG"), v5);
}

uint64_t sub_1B17FEDE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  const __CFDictionary *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v10 = (void *)result;
    v11 = sub_1B187B140(a2, a2, a3, a4, a5, a6, a7, a8);
    v19 = sub_1B187AA20(a2, v12, v13, v14, v15, v16, v17, v18);
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    result = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v20, (uint64_t)&v30, (uint64_t)v34, 16);
    if (result)
    {
      v24 = result;
      v25 = *(_QWORD *)v31;
      do
      {
        v26 = 0;
        do
        {
          if (*(_QWORD *)v31 != v25)
            objc_enumerationMutation(v10);
          v27 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * v26);
          if (objc_msgSend_forceField(v27, v21, v22, v23))
          {
            v28 = (const void *)objc_msgSend_nodeRef(v27, v21, v22, v23);
            v29 = sub_1B1821CA0(v11, v28);
            if (v29)
              sub_1B18D2B9C(v19, (uint64_t)v29, a3);
          }
          ++v26;
        }
        while (v24 != v26);
        result = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v21, (uint64_t)&v30, (uint64_t)v34, 16);
        v24 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1B17FF09C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17FF0B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  v4 = a2;
  if (objc_msgSend_isAuthoring(a2, (const char *)a2, a3, a4)
    && objc_msgSend_authoringTargetNode(v4, v6, v7, v8))
  {
    v4 = (void *)objc_msgSend_authoringTargetNode(v4, v6, v10, v8);
  }
  LODWORD(v9) = 0;
  v11 = objc_msgSend_nodeManipulatorItemWithNode_screenSize_(VFXNodeManipulableItem, v6, (uint64_t)v4, v8, v9);
  return objc_msgSend_addObject_(*(void **)(a1 + 32), v12, v11, v13);
}

BOOL sub_1B17FF114(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;

  objc_sync_enter(a1);
  v5 = (void *)objc_msgSend_selectedNodes(a1, v2, v3, v4);
  v9 = objc_msgSend_count(v5, v6, v7, v8) != 0;
  objc_sync_exit(a1);
  return v9;
}

void sub_1B17FF154(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17FF168(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  _QWORD v13[5];

  v5 = objc_msgSend_array(MEMORY[0x1E0C99DE8], a2, a3, a4);
  objc_sync_enter(a1);
  v9 = (void *)objc_msgSend_selectedNodes(a1, v6, v7, v8);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1B17FF204;
  v13[3] = &unk_1E63D6788;
  v13[4] = v5;
  objc_msgSend_enumerateObjectsUsingBlock_(v9, v10, (uint64_t)v13, v11);
  objc_sync_exit(a1);
  return v5;
}

void sub_1B17FF1F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B17FF204(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  v4 = a2;
  v6 = objc_msgSend_authoringTargetNode(a2, (const char *)a2, a3, a4);
  v10 = *(void **)(a1 + 32);
  if (v6)
    v4 = (void *)objc_msgSend_authoringTargetNode(v4, v7, v8, v9);
  v11 = objc_msgSend_nodeRef(v4, v7, v8, v9);
  return objc_msgSend_addObject_(v10, v12, v11, v13);
}

void sub_1B17FF6A8(_QWORD *a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  sub_1B17F955C(a1, a2);
  v3 = *(const void **)(a2 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a2 + 32) = 0;
  }
  v4 = *(const void **)(a2 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a2 + 40) = 0;
  }

}

void sub_1B17FF7DC(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  float *v12;
  int v13;
  _BYTE *v14;
  float v15;
  uint64_t v16;
  __float2 v17;
  uint64_t v18;
  float v19;
  __float2 v20;
  float32x4_t v21;
  _BYTE *v22;
  float32x4_t v23;
  int v24;
  double v25;
  float v26;
  __float2 v27;
  uint64_t v28;
  float v29;
  __float2 v30;
  __float2 v31;
  float32x4_t v32;
  _BYTE *v33;
  float32x4_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  _BYTE *v40;
  float32x4_t v41;
  int v42;
  unsigned int v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  char *v47;
  uint64_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  __int16 *v52;
  int32x4_t v53;
  int32x4_t v54;
  _WORD *v55;
  int i;
  int v57;
  unsigned int v58;
  _WORD *v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  _BYTE v66[2304];
  uint64_t v67;
  int16x8x2_t v68;

  v62 = a1;
  v67 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a4 + 48);
  if (*(_BYTE *)(a4 + 48))
    v7 = 288;
  else
    v7 = 432;
  *(double *)v8.i64 = MEMORY[0x1E0C80A78](a1, a2);
  v10 = (char *)&v61 - v9;
  v11 = 0;
  v13 = ((int)(float)(v12[3] * 255.0) << 24) | ((int)(float)(fminf(fmaxf(v12[2], 0.0), 1.0) * 255.0) << 16) | ((int)(float)(fminf(fmaxf(v12[1], 0.0), 1.0) * 255.0) << 8) | (int)(float)(fminf(fmaxf(*v12, 0.0), 1.0) * 255.0);
  v65 = (float32x4_t)v8;
  v64 = (float32x4_t)vdupq_laneq_s32(v8, 3);
  v14 = v66;
  do
  {
    v15 = (double)++v11 * 3.14159265 * 0.25;
    v17 = __sincosf_stret(v15);
    *(float *)&v16 = v17.__cosval;
    v63 = v16;
    v18 = 0;
    v19 = 0.0;
    do
    {
      v20 = __sincosf_stret(v19);
      v21.f32[0] = v17.__sinval * v20.__cosval;
      v21.i32[1] = v63;
      v21.f32[2] = v17.__sinval * v20.__sinval;
      v22 = &v14[v18];
      v23 = vmlaq_f32(v65, v21, v64);
      *(_QWORD *)v22 = v23.i64[0];
      *(_DWORD *)&v14[v18 + 8] = v23.i32[2];
      *((_DWORD *)v22 + 3) = v13;
      v19 = v19 + 0.2618;
      v18 += 16;
    }
    while (v18 != 384);
    v14 += 384;
  }
  while (v11 != 3);
  v24 = 0;
  v25 = 0.0;
  do
  {
    v26 = v25 * 3.14159265 / 3.0;
    v27 = __sincosf_stret(v26);
    v28 = 0;
    v29 = 0.0;
    do
    {
      v31 = __sincosf_stret(v29);
      v32.f32[0] = v27.__cosval * v31.__cosval;
      v32.i32[1] = LODWORD(v31.__sinval);
      v32.f32[2] = v27.__sinval * v31.__cosval;
      v33 = &v14[v28];
      v34 = vmlaq_f32(v65, v32, v64);
      *(_QWORD *)v33 = v34.i64[0];
      *(_DWORD *)&v14[v28 + 8] = v34.i32[2];
      *((_DWORD *)v33 + 3) = v13;
      v29 = v29 + 0.2618;
      v28 += 16;
    }
    while (v28 != 384);
    v14 += 384;
    v25 = v25 + 1.0;
    ++v24;
  }
  while (v24 != 3);
  if (a2)
  {
    v35 = 0;
    v36 = *a2;
    v37 = a2[1];
    v38 = a2[2];
    v39 = a2[3];
    do
    {
      v40 = &v66[v35];
      v41 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v39, v38, *(float *)&v66[v35 + 8]), v37, *(float *)&v66[v35 + 4]), v36, *(float *)&v66[v35]);
      *(_QWORD *)v40 = v41.i64[0];
      *((_DWORD *)v40 + 2) = v41.i32[2];
      v35 += 16;
    }
    while (v35 != 2304);
  }
  v42 = 0;
  v43 = 0;
  if (v6)
  {
    v44.i64[0] = 0x100000001;
    v44.i64[1] = 0x100000001;
    v45.i64[0] = 0x1800000018;
    v45.i64[1] = 0x1800000018;
    v46.i64[0] = 0x800000008;
    v46.i64[1] = 0x800000008;
    v47 = v10;
    do
    {
      v48 = 0;
      v49 = vdupq_n_s32(v43);
      v50 = (int32x4_t)xmmword_1B2240BB0;
      v51 = (int32x4_t)xmmword_1B2240BA0;
      do
      {
        v52 = (__int16 *)&v47[v48];
        v68.val[0] = vuzp1q_s16((int16x8_t)vaddq_s32(v50, v49), (int16x8_t)vaddq_s32(v51, v49));
        v53 = vaddq_s32(v51, v44);
        v54 = vaddq_s32(v50, v44);
        v68.val[1] = vuzp1q_s16((int16x8_t)vaddq_s32((int32x4_t)vbicq_s8((int8x16_t)v54, (int8x16_t)vceqq_s32(v54, v45)), v49), (int16x8_t)vaddq_s32((int32x4_t)vbicq_s8((int8x16_t)v53, (int8x16_t)vceqq_s32(v53, v45)), v49));
        vst2q_s16(v52, v68);
        v50 = vaddq_s32(v50, v46);
        v51 = vaddq_s32(v51, v46);
        v48 += 32;
      }
      while (v48 != 96);
      v43 += 24;
      ++v42;
      v47 += 96;
    }
    while (v42 != 6);
  }
  else
  {
    v55 = v10;
    do
    {
      for (i = 24; i != 48; ++i)
      {
        *v55 = v43 + i - 24;
        v57 = i - 23;
        if (i == 47)
          v57 = 0;
        v58 = v57 + v43;
        v55[1] = v58;
        v59 = v55 + 3;
        v55[2] = i + v43 - 144 * ((v43 + i) / 0x90);
        if (v43 + i - 24 > 0x8F || v58 > 0x8F)
          ++v43;
        v55 += 3;
      }
      v43 += 24;
      ++v42;
      v55 = v59;
    }
    while (v42 != 6);
  }
  sub_1B17F8B98(v62, (uint64_t)v66, 144, (uint64_t)v10, v7, a4, 1, *(_QWORD *)&v30, v61);
}

void sub_1B17FFBC8(uint64_t a1, _QWORD *a2, uint64_t *a3, CFStringRef theString, uint64_t a5, uint64_t a6, unsigned int a7, int a8)
{
  uint64_t Length;
  uint64_t v17;
  uint64_t v18;
  UniChar *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  UniChar *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  float64x2_t v33;
  uint64_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float v37;
  float v38;
  uint64_t v39;
  float v40;
  float v41;
  int v42;
  float64x2_t v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[12];
  unsigned int v48;
  __int128 v49;
  _BYTE *v50;
  float32x4_t v51;
  uint64_t v52;
  CFRange v53;

  v52 = *MEMORY[0x1E0C80C00];
  if (theString)
  {
    Length = CFStringGetLength(theString);
    v50 = v47;
    MEMORY[0x1E0C80A78](Length, v17);
    v19 = (UniChar *)&v47[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
    v53.location = 0;
    v53.length = Length;
    CFStringGetCharacters(theString, v53, v19);
    if (Length >= 1)
    {
      v23 = 1;
      v24 = v19;
      v25 = Length;
      do
      {
        v26 = *v24++;
        if (v26 == 10)
          ++v23;
        --v25;
      }
      while (v25);
      *(_QWORD *)&v22 = *a2;
      v48 = a7;
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = *((float *)&v22 + 1) + (float)((float)(v23 - 1) * *(float *)(a6 + 32));
      while (1)
      {
        v32 = *v19++;
        v31 = v32;
        if (v32 == 32)
        {
          *(float *)&v22 = *(float *)&v22 + **(float **)(a6 + 40);
        }
        else if ((_DWORD)v31 == 10)
        {
          *(_QWORD *)&v22 = *a2;
          v30 = v30 - *(float *)(a6 + 32);
        }
        else if ((v29 & 1) != 0)
        {
          if ((_DWORD)v31 == 36)
          {
            v33 = *(float64x2_t *)(a6 + 8);
            if ((v28 & 1) == 0)
              goto LABEL_21;
            v51 = 0uLL;
            v34 = *(_QWORD *)(a6 + 56) + 16 * v27;
            v51 = *(float32x4_t *)v34;
            v35 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v51.f32), v33));
            v36 = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)&v51.u32[2])), v33));
            *(float32x2_t *)v51.f32 = v35;
            *(float32x2_t *)&v51.u32[2] = v36;
            v37 = *(float *)(v34 + 8);
            if ((a8 & 1) != 0)
            {
              v38 = *(float *)&v22 + v37;
              sub_1B17F9F44(a1, *a3, a3[1], v51.f32, a5, v48, v20, v21, roundf(*(float *)&v22), roundf(v30), roundf(*(float *)&v22 + v37), roundf(v30 + *(float *)(v34 + 12)));
              *(float *)&v22 = v38;
            }
            else
            {
              *(float *)&v22 = *(float *)&v22 + v37;
            }
            v29 = 0;
          }
          else
          {
            v27 = v31 + 10 * v27 - 48;
            v29 = 1;
          }
          v28 = 1;
        }
        else
        {
          if ((_DWORD)v31 != 36)
          {
            v33 = *(float64x2_t *)(a6 + 8);
LABEL_21:
            v39 = v31 - 32;
            v40 = (float)(v39 * *(__int16 *)(a6 + 36));
            v41 = (float)*(__int16 *)(a6 + 36);
            v42 = *(__int16 *)(a6 + 48);
            v43.f64[0] = (float)(v41 + v40);
            v43.f64[1] = (double)v42;
            v51 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64((float64x2_t)COERCE_UNSIGNED_INT64(v40), v33)), vdivq_f64(v43, v33));
            v44 = *(float *)(*(_QWORD *)(a6 + 40) + 4 * v39);
            if (a8)
            {
              v45 = *a3;
              v46 = a3[1];
              v49 = v22;
              sub_1B17F9F44(a1, v45, v46, v51.f32, a5, v48, v20, v21, roundf(*(float *)&v22), roundf(v30), roundf(*(float *)&v22 + v41), roundf(v30 + (float)v42));
              v22 = v49;
            }
            v29 = 0;
            *(float *)&v22 = *(float *)&v22 + v44;
            goto LABEL_27;
          }
          v28 = 0;
          v27 = 0;
          v29 = 1;
        }
LABEL_27:
        if (!--Length)
          goto LABEL_30;
      }
    }
    *(_QWORD *)&v22 = *a2;
LABEL_30:
    *(_DWORD *)a2 = v22;
  }
}

uint64_t (*sub_1B17FFEC0(int a1, int a2, int a3, unsigned int a4))()
{
  int v4;
  uint64_t (*result)();
  uint64_t (**v6)();

  v4 = a1 - 1;
  result = (uint64_t (*)())sub_1B1801E24;
  switch(v4)
  {
    case 0:
      if (a4 < 3)
      {
        v6 = off_1E63D67A8;
        goto LABEL_36;
      }
      result = (uint64_t (*)())sub_1B1800178;
      break;
    case 1:
      if (a4 < 3)
      {
        v6 = off_1E63D67D8;
        goto LABEL_36;
      }
      result = (uint64_t (*)())sub_1B18003FC;
      break;
    case 2:
      return result;
    case 3:
    case 14:
      if (a4 < 3)
      {
        v6 = off_1E63D68B0;
        goto LABEL_36;
      }
      result = (uint64_t (*)())sub_1B1801F38;
      break;
    case 5:
      if (a4 < 3)
      {
        v6 = off_1E63D67C0;
        goto LABEL_36;
      }
      result = (uint64_t (*)())sub_1B18002BC;
      break;
    case 6:
    case 16:
      if (a4 < 3)
      {
        v6 = off_1E63D6868;
        goto LABEL_36;
      }
      result = (uint64_t (*)())sub_1B1800B18;
      break;
    case 7:
    case 17:
      if (a4 < 3)
      {
        v6 = off_1E63D6850;
        goto LABEL_36;
      }
      result = (uint64_t (*)())sub_1B1800978;
      break;
    case 8:
    case 18:
      if (a2 == 3)
      {
        if (a4 < 3)
        {
          v6 = off_1E63D6808;
          goto LABEL_36;
        }
        result = (uint64_t (*)())sub_1B1800654;
      }
      else if (a2 == 4)
      {
        if (a4 < 3)
        {
          v6 = off_1E63D67F0;
          goto LABEL_36;
        }
        result = (uint64_t (*)())sub_1B18004F4;
      }
      else
      {
        if (a4 < 3)
        {
          v6 = off_1E63D6820;
          goto LABEL_36;
        }
        result = (uint64_t (*)())sub_1B18006F4;
      }
      break;
    case 9:
      if (a3)
      {
        if (a4 < 3)
        {
          v6 = off_1E63D6880;
          goto LABEL_36;
        }
        result = (uint64_t (*)())sub_1B1800D5C;
      }
      else
      {
        if (a4 < 3)
        {
          v6 = off_1E63D6898;
          goto LABEL_36;
        }
        result = (uint64_t (*)())sub_1B1801E04;
      }
      break;
    case 11:
      if (a4 >= 3)
      {
        result = (uint64_t (*)())sub_1B18007C4;
      }
      else
      {
        v6 = off_1E63D6838;
LABEL_36:
        result = v6[a4];
      }
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

float sub_1B1800088(float *a1, float *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float *a8)
{
  double v8;
  float result;

  v8 = *a1 + (float)(*a2 - *a1) * a3;
  if (a7)
    v8 = v8 + *a8;
  result = v8;
  *a8 = result;
  return result;
}

float *sub_1B18000BC(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float *a7)
{
  float v7;

  v7 = *result;
  if (a6)
    v7 = v7 + *a7;
  *a7 = v7;
  return result;
}

void sub_1B18000D4(float *a1, float *a2, double a3, uint64_t a4, _QWORD *a5, _QWORD *a6, int a7, float *a8)
{
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v10 = *a1;
  v11 = *a2;
  v12 = *a1 + COERCE_FLOAT(HIDWORD(*a5));
  v13 = *a2 + COERCE_FLOAT(HIDWORD(*a6));
  v14 = a3;
  v15 = sub_1B1801FC4(v14, COERCE_FLOAT(*a5), COERCE_FLOAT(*a6));
  v16 = (float)((float)((float)(v12 * (float)(v15 * (float)((float)((float)(1.0 - v15) * (float)(1.0 - v15)) * 3.0)))
                      + (float)((float)((float)(1.0 - v15) * (float)((float)(1.0 - v15) * (float)(1.0 - v15))) * v10))
              + (float)((float)(v15 * (float)(v15 * v15)) * v11))
      + (float)((float)((float)(v15 * v15) * (float)((float)(1.0 - v15) * 3.0)) * v13);
  if (a7)
    v16 = v16 + *a8;
  *a8 = v16;
}

void sub_1B1800178(float *a1, float *a2, int a3, _QWORD *a4, _QWORD *a5, int a6, float *a7, double a8)
{
  float v8;
  double v9;

  if (!a3)
  {
    v9 = *a1 + (float)(*a2 - *a1) * a8;
    if (a6)
      v9 = v9 + *a7;
    v8 = v9;
    goto LABEL_8;
  }
  if (a3 == 1)
  {
    v8 = *a1;
    if (a6)
      v8 = v8 + *a7;
LABEL_8:
    *a7 = v8;
    return;
  }
  sub_1B18000D4(a1, a2, a8, 0, a4, a5, a6, a7);
}

double *sub_1B18001D4(double *result, double *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, double *a8)
{
  double v8;

  v8 = *result + (*a2 - *result) * a3;
  if (a7)
    v8 = *a8 + v8;
  *a8 = v8;
  return result;
}

double *sub_1B18001F8(double *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, double *a7)
{
  double v7;

  v7 = *result;
  if (a6)
    v7 = v7 + *a7;
  *a7 = v7;
  return result;
}

void sub_1B1800210(double a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, int a7, double *a8)
{
  float v10;
  float v11;
  double v19;
  int v20;

  v10 = a1;
  v20 = HIDWORD(*a6);
  v11 = sub_1B1801FC4(v10, COERCE_FLOAT(*a5), COERCE_FLOAT(*a6));
  _S1 = (float)(v11 * v11) * (float)((float)(1.0 - v11) * 3.0);
  _V2.S[1] = v20;
  __asm { FMLA            S0, S1, V2.S[1] }
  v19 = _S0;
  if (a7)
    v19 = *a8 + v19;
  *a8 = v19;
}

void sub_1B18002BC(double *a1, double *a2, int a3, _QWORD *a4, _QWORD *a5, int a6, double *a7, double a8)
{
  double v8;

  if (!a3)
  {
    v8 = *a1 + (*a2 - *a1) * a8;
    if (!a6)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (a3 == 1)
  {
    v8 = *a1;
    if (!a6)
    {
LABEL_5:
      *a7 = v8;
      return;
    }
LABEL_4:
    v8 = v8 + *a7;
    goto LABEL_5;
  }
  sub_1B1800210(a8, (uint64_t)a1, (uint64_t)a2, 0, a4, a5, a6, a7);
}

int *sub_1B1800300(int *result, _DWORD *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int *a8)
{
  double v8;

  v8 = (double)*result + (double)(*a2 - *result) * a3;
  if (a7)
    v8 = v8 + (double)*a8;
  *a8 = (int)v8;
  return result;
}

int *sub_1B1800334(int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, _DWORD *a7)
{
  int v7;

  v7 = *result;
  if (a6)
    v7 += *a7;
  *a7 = v7;
  return result;
}

void sub_1B180034C(double a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, int a7, int *a8)
{
  float v10;
  float v11;
  int v19;

  v10 = a1;
  v19 = HIDWORD(*a6);
  v11 = sub_1B1801FC4(v10, COERCE_FLOAT(*a5), COERCE_FLOAT(*a6));
  _S1 = (float)(v11 * v11) * (float)((float)(1.0 - v11) * 3.0);
  _V2.S[1] = v19;
  __asm { FMLA            S0, S1, V2.S[1] }
  if (a7)
    _S0 = _S0 + (float)*a8;
  *a8 = (int)_S0;
}

void sub_1B18003FC(int *a1, uint64_t a2, unsigned int a3, _QWORD *a4, _QWORD *a5, int a6, int *a7, double a8)
{
  int v8;

  if (a3 > 1)
  {
    sub_1B180034C(a8, (uint64_t)a1, a2, 0, a4, a5, a6, a7);
  }
  else
  {
    v8 = *a1;
    if (a6)
      v8 += *a7;
    *a7 = v8;
  }
}

float32x4_t *sub_1B1800428(float32x4_t *result, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float32x4_t v8;
  float32x4_t v9;
  uint32x4_t v10;
  unsigned int v11;
  float32x4_t v12;
  uint32x4_t v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;

  v8 = *result;
  v9.i64[0] = 0x3400000034000000;
  v9.i64[1] = 0x3400000034000000;
  v10 = (uint32x4_t)vcgeq_f32(v9, vabsq_f32(*result));
  v10.i32[3] = v10.i32[2];
  v11 = vminvq_u32(v10);
  v12 = *a2;
  if ((v11 & 0x80000000) != 0)
  {
    v8 = *a2;
    v8.i32[3] = 0;
    v16 = v8;
    result = &v16;
  }
  v13 = (uint32x4_t)vcgeq_f32(v9, vabsq_f32(v12));
  v13.i32[3] = v13.i32[2];
  if ((vminvq_u32(v13) & 0x80000000) != 0)
  {
    v8.i32[3] = 0;
    v16 = v8;
    v12 = v8;
  }
  v14 = a3;
  v15 = vmlaq_n_f32(*result, vsubq_f32(v12, *result), v14);
  if (a7)
    v15 = vaddq_f32(*a8, v15);
  *a8 = v15;
  return result;
}

float32x4_t *sub_1B18004AC(float32x4_t *result, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7)
{
  float32x4_t v7;
  float32x4_t v8;
  uint32x4_t v9;
  float32x4_t v10;

  v7 = *result;
  v8.i64[0] = 0x3400000034000000;
  v8.i64[1] = 0x3400000034000000;
  v9 = (uint32x4_t)vcgeq_f32(v8, vabsq_f32(*result));
  v9.i32[3] = v9.i32[2];
  if ((vminvq_u32(v9) & 0x80000000) != 0)
  {
    v7 = *a2;
    v7.i32[3] = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v10 = *result;
    goto LABEL_6;
  }
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v10 = vaddq_f32(v7, *a7);
LABEL_6:
  *a7 = v10;
  return result;
}

float32x4_t *sub_1B18004F4(float32x4_t *result, float32x4_t *a2, int a3, double a4, int32x4_t a5, double a6, int32x4_t a7, uint64_t a8, uint64_t a9, int a10, float32x4_t *a11)
{
  float32x4_t v11;
  float32x4_t v12;
  uint32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  uint32x4_t v20;
  float32x4_t *v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;

  if (a3 == 1)
  {
    v11 = *result;
    v12.i64[0] = 0x3400000034000000;
    v12.i64[1] = 0x3400000034000000;
    v13 = (uint32x4_t)vcgeq_f32(v12, vabsq_f32(*result));
    v13.i32[3] = v13.i32[2];
    if ((vminvq_u32(v13) & 0x80000000) != 0)
    {
      v11 = *a2;
      v11.i32[3] = 0;
      if (a10)
        goto LABEL_4;
    }
    else if (a10)
    {
LABEL_4:
      v14 = vaddq_f32(v11, *a11);
LABEL_14:
      *a11 = v14;
      return result;
    }
    v14 = *result;
    goto LABEL_14;
  }
  a5.i32[0] = 0;
  v15.i64[0] = 0x3400000034000000;
  v15.i64[1] = 0x3400000034000000;
  v16 = (uint32x4_t)vcgeq_f32(v15, vabsq_f32(*result));
  v16.i32[3] = v16.i32[2];
  a7.i32[0] = vminvq_u32(v16);
  v17 = *a2;
  v18 = *(int8x16_t *)a2;
  v18.i32[3] = 0;
  v19 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s32(a5, a7), 0), v18, *(int8x16_t *)result);
  v20 = (uint32x4_t)vcgeq_f32(v15, vabsq_f32(*a2));
  v20.i32[3] = v20.i32[2];
  if ((vminvq_u32(v20) & 0x80000000) != 0)
  {
    v21 = &v24;
    if (a7.i32[0] >= 0)
      v21 = result;
    v17 = v19;
    v17.i32[3] = 0;
    v24 = v17;
    v19 = *v21;
  }
  v22 = a4;
  v23 = vmlaq_n_f32(v19, vsubq_f32(v17, v19), v22);
  if (a10)
    v23 = vaddq_f32(v23, *a11);
  *a11 = v23;
  return result;
}

double sub_1B18005D8(float32x4_t *a1, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v9;
  double result;
  float v11;
  float32x4_t v12;

  if (a7)
  {
    v12 = 0uLL;
    v9 = a3;
    sub_1B17C9A84(a1, a2, &v12, v9);
    *(_QWORD *)&result = sub_1B17C99BC(&v12, a8, a8).u64[0];
  }
  else
  {
    v11 = a3;
    *(_QWORD *)&result = sub_1B17C9A84(a1, a2, a8, v11).u64[0];
  }
  return result;
}

float32x4_t sub_1B1800638(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7)
{
  float32x4_t result;

  if (a6)
  {
    result.i64[0] = sub_1B17C99BC(a1, a7, a7).u64[0];
  }
  else
  {
    result = *a1;
    *a7 = *a1;
  }
  return result;
}

float32x4_t sub_1B1800654(float32x4_t *a1, float32x4_t *a2, int a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7, double a8)
{
  float32x4_t result;

  if (a3 == 1)
  {
    if (a6)
    {
      result.i64[0] = sub_1B17C99BC(a1, a7, a7).u64[0];
    }
    else
    {
      result = *a1;
      *a7 = *a1;
    }
  }
  else
  {
    *(double *)result.i64 = sub_1B18005D8(a1, a2, a8, 0, a4, a5, a6, a7);
  }
  return result;
}

float32x4_t *sub_1B1800680(float32x4_t *result, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v8;
  float32x4_t v9;

  v8 = a3;
  v9 = vmlaq_n_f32(*result, vsubq_f32(*a2, *result), v8);
  if (a7)
    v9 = vaddq_f32(*a8, v9);
  *a8 = v9;
  return result;
}

float32x4_t sub_1B18006A8(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7)
{
  float32x4_t result;

  if (a6)
  {
    result = vaddq_f32(*a1, *a7);
    *a7 = result;
  }
  else
  {
    result = *a1;
    *a7 = *a1;
  }
  return result;
}

float32x4_t *sub_1B18006CC(float32x4_t *result, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v8;
  float32x4_t v9;

  v8 = a3;
  v9 = vmlaq_n_f32(*result, vsubq_f32(*a2, *result), v8);
  if (a7)
    v9 = vaddq_f32(*a8, v9);
  *a8 = v9;
  return result;
}

float32x4_t *sub_1B18006F4(float32x4_t *result, float32x4_t *a2, int a3, double a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float32x4_t v8;
  float v9;
  float32x4_t v10;

  if (a3 == 1)
  {
    if (a7)
      v8 = vaddq_f32(*result, *a8);
    else
      v8 = *result;
    *a8 = v8;
  }
  else
  {
    v9 = a4;
    v10 = vmlaq_n_f32(*result, vsubq_f32(*a2, *result), v9);
    if (a7)
      v10 = vaddq_f32(v10, *a8);
    *a8 = v10;
  }
  return result;
}

float sub_1B1800748(float *a1, float *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float *a8)
{
  float v9;
  float v11;
  _QWORD v12[2];

  if (a7)
  {
    v12[0] = 0;
    v12[1] = 0;
    v9 = a3;
    sub_1B179CD80(a1, a2, (float *)v12, v9);
    return sub_1B179CDD4((float *)v12, a8, a8);
  }
  else
  {
    v11 = a3;
    return sub_1B179CD80(a1, a2, a8, v11);
  }
}

__n128 sub_1B18007A8(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float *a7)
{
  __n128 result;

  if (a6)
  {
    result.n128_f32[0] = sub_1B179CDD4(a1, a7, a7);
  }
  else
  {
    result = *(__n128 *)a1;
    *(_OWORD *)a7 = *(_OWORD *)a1;
  }
  return result;
}

__n128 sub_1B18007C4(float *a1, float *a2, int a3, uint64_t a4, uint64_t a5, int a6, float *a7, double a8)
{
  __n128 result;

  if (a3 == 1)
  {
    if (a6)
    {
      result.n128_f32[0] = sub_1B179CDD4(a1, a7, a7);
    }
    else
    {
      result = *(__n128 *)a1;
      *(_OWORD *)a7 = *(_OWORD *)a1;
    }
  }
  else
  {
    result.n128_f32[0] = sub_1B1800748(a1, a2, a8, 0, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_1B18007F0(uint64_t result, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  float v10;
  float32x4_t v11;

  a4.i64[0] = *(_QWORD *)result;
  a4.i32[2] = *(_DWORD *)(result + 8);
  a5.i64[0] = *(_QWORD *)a2;
  a5.i32[2] = *(_DWORD *)(a2 + 8);
  v10 = *(double *)a3.i64;
  v11 = vmlaq_n_f32(a4, vsubq_f32(a5, a4), v10);
  if (a9)
  {
    a3.i64[0] = *(_QWORD *)a10;
    a3.i32[2] = *(_DWORD *)(a10 + 8);
    v11 = vaddq_f32(v11, a3);
  }
  *(_QWORD *)a10 = v11.i64[0];
  *(_DWORD *)(a10 + 8) = v11.i32[2];
  return result;
}

float *sub_1B1800838(float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float *a7)
{
  float v7;
  uint64_t v8;

  if (a6)
  {
    v7 = a7[1];
    *a7 = *result + *a7;
    a7[1] = result[1] + v7;
    a7[2] = result[2] + a7[2];
  }
  else
  {
    v8 = *(_QWORD *)result;
    a7[2] = result[2];
    *(_QWORD *)a7 = v8;
  }
  return result;
}

void sub_1B1800880(uint64_t a1, uint64_t a2, double a3, float32x4_t a4, uint64_t a5, int32x2_t *a6, int32x2_t *a7, int a8, uint64_t a9)
{
  float v13;
  float v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x2_t v19;
  int32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;

  a4.i64[0] = *(_QWORD *)a1;
  a4.i32[2] = *(_DWORD *)(a1 + 8);
  v22 = a4;
  a4.i64[0] = *(_QWORD *)a2;
  a4.i32[2] = *(_DWORD *)(a2 + 8);
  v21 = a4;
  v13 = a3;
  v19 = *a6;
  v20 = *a7;
  v14 = sub_1B1801FC4(v13, COERCE_FLOAT(*a6), COERCE_FLOAT(*a7));
  *(int32x2_t *)v16.f32 = vzip2_s32(v19, a6[1]);
  *(int32x2_t *)&v16.u32[2] = vdup_lane_s32(a6[2], 1);
  *(int32x2_t *)v17.f32 = vzip2_s32(v20, a7[1]);
  *(int32x2_t *)&v17.u32[2] = vdup_lane_s32(a7[2], 1);
  v18 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v16, v14 * (float)((float)((float)(1.0 - v14) * (float)(1.0 - v14)) * 3.0)), v22, (float)(1.0 - v14) * (float)((float)(1.0 - v14) * (float)(1.0 - v14))), v21, v14 * (float)(v14 * v14)), v17, (float)(v14 * v14) * (float)((float)(1.0 - v14) * 3.0));
  if (a8)
  {
    v15.i64[0] = *(_QWORD *)a9;
    v15.i32[2] = *(_DWORD *)(a9 + 8);
    v18 = vaddq_f32(v18, v15);
  }
  *(_QWORD *)a9 = v18.i64[0];
  *(_DWORD *)(a9 + 8) = v18.i32[2];
}

void sub_1B1800978(float *a1, uint64_t a2, int a3, int32x2_t *a4, int32x2_t *a5, int a6, float *a7, float32x4_t a8, float32x4_t a9, float32x4_t a10)
{
  float v10;
  float v11;
  float32x4_t v12;
  uint64_t v13;

  if (a3)
  {
    if (a3 == 1)
    {
      if (a6)
      {
        v10 = a7[1];
        *a7 = *a1 + *a7;
        a7[1] = a1[1] + v10;
        a7[2] = a1[2] + a7[2];
      }
      else
      {
        v13 = *(_QWORD *)a1;
        a7[2] = a1[2];
        *(_QWORD *)a7 = v13;
      }
    }
    else
    {
      sub_1B1800880((uint64_t)a1, a2, *(double *)a8.i64, a9, 0, a4, a5, a6, (uint64_t)a7);
    }
  }
  else
  {
    a9.i64[0] = *(_QWORD *)a1;
    a9.f32[2] = a1[2];
    a10.i64[0] = *(_QWORD *)a2;
    a10.i32[2] = *(_DWORD *)(a2 + 8);
    v11 = *(double *)a8.i64;
    v12 = vmlaq_n_f32(a9, vsubq_f32(a10, a9), v11);
    if (a6)
    {
      a8.i64[0] = *(_QWORD *)a7;
      a8.f32[2] = a7[2];
      v12 = vaddq_f32(v12, a8);
    }
    *(_QWORD *)a7 = v12.i64[0];
    a7[2] = v12.f32[2];
  }
}

float32x2_t *sub_1B1800A1C(float32x2_t *result, float32x2_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x2_t *a8)
{
  float v8;
  float32x2_t v9;

  v8 = a3;
  v9 = vmla_n_f32(*result, vsub_f32(*a2, *result), v8);
  if (a7)
    v9 = vadd_f32(v9, *a8);
  *a8 = v9;
  return result;
}

float32x2_t *sub_1B1800A44(float32x2_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x2_t *a7)
{
  float32x2_t v7;

  v7 = *result;
  if (a6)
    v7 = vadd_f32(v7, *a7);
  *a7 = v7;
  return result;
}

void sub_1B1800A5C(float32x2_t *a1, float32x2_t *a2, double a3, uint64_t a4, int32x2_t *a5, int32x2_t *a6, int a7, float32x2_t *a8)
{
  float32x2_t v12;
  float32x2_t v13;
  float v14;
  float v15;
  float v16;
  float32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;

  v12 = *a1;
  v13 = *a2;
  v14 = a3;
  v18 = *a5;
  v19 = *a6;
  v15 = sub_1B1801FC4(v14, COERCE_FLOAT(*a5), COERCE_FLOAT(*a6));
  v16 = 1.0 - v15;
  v17 = vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip2_s32(v18, a5[1]), v15 * (float)((float)(v16 * v16) * 3.0)), v12, v16 * (float)(v16 * v16)), v13, v15 * (float)(v15 * v15)), (float32x2_t)vzip2_s32(v19, a6[1]), (float)(v15 * v15) * (float)((float)(1.0 - v15) * 3.0));
  if (a7)
    v17 = vadd_f32(v17, *a8);
  *a8 = v17;
}

void sub_1B1800B18(float32x2_t *a1, float32x2_t *a2, int a3, int32x2_t *a4, int32x2_t *a5, int a6, float32x2_t *a7, double a8)
{
  float32x2_t v8;
  float v9;
  float32x2_t v10;

  if (a3)
  {
    if (a3 == 1)
    {
      v8 = *a1;
      if (a6)
        v8 = vadd_f32(v8, *a7);
      *a7 = v8;
    }
    else
    {
      sub_1B1800A5C(a1, a2, a8, 0, a4, a5, a6, a7);
    }
  }
  else
  {
    v9 = a8;
    v10 = vmla_n_f32(*a1, vsub_f32(*a2, *a1), v9);
    if (a6)
      v10 = vadd_f32(v10, *a7);
    *a7 = v10;
  }
}

float32x4_t *sub_1B1800B6C(float32x4_t *result, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  _OWORD v21[4];
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v8 = a3;
  v9 = vmlaq_n_f32(vmulq_n_f32(*a2, v8), *result, 1.0 - v8);
  v10 = vmlaq_n_f32(vmulq_n_f32(a2[1], v8), result[1], 1.0 - v8);
  v11 = vmlaq_n_f32(vmulq_n_f32(a2[2], v8), result[2], 1.0 - v8);
  v12 = vmlaq_n_f32(vmulq_n_f32(a2[3], v8), result[3], 1.0 - v8);
  if (a7)
  {
    v13 = 0;
    v14 = *a8;
    v15 = a8[1];
    v16 = a8[2];
    v17 = a8[3];
    v21[0] = v9;
    v21[1] = v10;
    v21[2] = v11;
    v21[3] = v12;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v22 + v13 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(v21[v13])), v15, *(float32x2_t *)&v21[v13], 1), v16, (float32x4_t)v21[v13], 2), v17, (float32x4_t)v21[v13], 3);
      ++v13;
    }
    while (v13 != 4);
    v18 = v23;
    v19 = v24;
    v20 = v25;
    *a8 = v22;
    a8[1] = v18;
    a8[2] = v19;
    a8[3] = v20;
  }
  else
  {
    *a8 = v9;
    a8[1] = v10;
    a8[2] = v11;
    a8[3] = v12;
  }
  return result;
}

float32x4_t sub_1B1800C20(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7)
{
  uint64_t v7;
  float32x4_t result;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  _OWORD v20[4];
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  if (a6)
  {
    v7 = 0;
    result = *a7;
    v9 = a7[1];
    v10 = a7[2];
    v11 = a7[3];
    v12 = a1[1];
    v13 = a1[2];
    v14 = a1[3];
    v20[0] = *a1;
    v20[1] = v12;
    v20[2] = v13;
    v20[3] = v14;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v21 + v7 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(result, COERCE_FLOAT(v20[v7])), v9, *(float32x2_t *)&v20[v7], 1), v10, (float32x4_t)v20[v7], 2), v11, (float32x4_t)v20[v7], 3);
      ++v7;
    }
    while (v7 != 4);
    result.i64[0] = v21.i64[0];
    v15 = v22;
    v16 = v23;
    v17 = v24;
    *a7 = v21;
    a7[1] = v15;
    a7[2] = v16;
    a7[3] = v17;
  }
  else
  {
    result = *a1;
    v18 = a1[1];
    v19 = a1[3];
    a7[2] = a1[2];
    a7[3] = v19;
    *a7 = result;
    a7[1] = v18;
  }
  return result;
}

float32x4_t *sub_1B1800CA8(float32x4_t *result, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  _OWORD v21[4];
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v8 = a3;
  v9 = vmlaq_n_f32(vmulq_n_f32(*a2, v8), *result, 1.0 - v8);
  v10 = vmlaq_n_f32(vmulq_n_f32(a2[1], v8), result[1], 1.0 - v8);
  v11 = vmlaq_n_f32(vmulq_n_f32(a2[2], v8), result[2], 1.0 - v8);
  v12 = vmlaq_n_f32(vmulq_n_f32(a2[3], v8), result[3], 1.0 - v8);
  if (a7)
  {
    v13 = 0;
    v14 = *a8;
    v15 = a8[1];
    v16 = a8[2];
    v17 = a8[3];
    v21[0] = v9;
    v21[1] = v10;
    v21[2] = v11;
    v21[3] = v12;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v22 + v13 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(v21[v13])), v15, *(float32x2_t *)&v21[v13], 1), v16, (float32x4_t)v21[v13], 2), v17, (float32x4_t)v21[v13], 3);
      ++v13;
    }
    while (v13 != 4);
    v18 = v23;
    v19 = v24;
    v20 = v25;
    *a8 = v22;
    a8[1] = v18;
    a8[2] = v19;
    a8[3] = v20;
  }
  else
  {
    *a8 = v9;
    a8[1] = v10;
    a8[2] = v11;
    a8[3] = v12;
  }
  return result;
}

void sub_1B1800D5C(float32x4_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7, double a8)
{
  if ((_DWORD)a3)
  {
    if ((_DWORD)a3 == 1)
      sub_1B1800C20(a1, (uint64_t)a2, 0, a4, a5, a6, a7);
    else
      sub_1B1800CA8(a1, a2, a8, 0, a4, a5, a6, a7);
  }
  else
  {
    sub_1B1800B6C(a1, a2, a8, a3, a4, a5, a6, a7);
  }
}

void sub_1B1800D7C(_OWORD *a1, _OWORD *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __n128 v13;
  int v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float v21;
  float v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float v27;
  float v28;
  float v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float v34;
  float v35;
  int32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float32x4_t v43;
  int v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float v51;
  float v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x2_t v61;
  float32x2_t v62;
  float v63;
  float v64;
  int32x2_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float32x4_t v72;
  float v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int8x16_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  float32x4_t v85;
  float v86;
  float v87;
  float v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x4_t v121;
  int8x16_t v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float32x2_t v127;
  float32x2_t v128;
  float v129;
  float32x4_t v130;
  float v131;
  float v132;
  float v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  __n128 v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  __n128 v175;
  float32x4_t v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179[4];
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;

  v9 = a3;
  v178 = v9;
  v10 = *(float32x4_t *)a1;
  v11 = *((float32x4_t *)a1 + 1);
  v12 = *((float32x4_t *)a1 + 2);
  v13 = *((__n128 *)a1 + 3);
  v154 = *((float32x4_t *)a2 + 1);
  v155 = *(float32x4_t *)a2;
  v152 = *((__n128 *)a2 + 3);
  v153 = *((float32x4_t *)a2 + 2);
  v170 = *(float32x4_t *)a1;
  v175 = v13;
  v156 = v12;
  v161 = v11;
  if (a7)
  {
    v180 = 0uLL;
    v179[0] = 0uLL;
    v187.i32[2] = 0;
    v187.i64[0] = 0;
    v186.i32[2] = 0;
    v186.i64[0] = 0;
    v185.i32[2] = 0;
    v185.i64[0] = 0;
    v184.i32[2] = 0;
    v184.i64[0] = 0;
    v14 = sub_1B1802048(&v180, (__n128 *)&v187, &v185, v10, v11, v12, v13);
    v15 = sub_1B1802048(v179, (__n128 *)&v186, &v184, v155, v154, v153, v152);
    if (v14)
    {
      v16 = v170;
      v17 = (float32x4_t)v175;
      v18 = v156;
      v19 = v161;
      if (v15)
      {
        v20 = (int8x16_t)vmulq_f32(v180, v179[0]);
        v171 = v179[0];
        v176 = v180;
        v21 = 1.0;
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL))) >= 0.0)
        {
          v73 = 1.0 - v178;
          v74 = vsubq_f32(v180, v179[0]);
          v75 = (int8x16_t)vmulq_f32(v74, v74);
          v76 = vaddq_f32(v180, v179[0]);
          v77 = (int8x16_t)vmulq_f32(v76, v76);
          v78 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)))));
          v79 = v78 + v78;
          _ZF = (float)(v78 + v78) == 0.0;
          v80 = 1.0;
          if (!_ZF)
            v80 = sinf(v79) / v79;
          v81 = v80;
          v82 = vrecpe_f32((float32x2_t)LODWORD(v80));
          v83 = vmul_f32(v82, vrecps_f32((float32x2_t)LODWORD(v81), v82));
          LODWORD(v84) = vmul_f32(v83, vrecps_f32((float32x2_t)LODWORD(v81), v83)).u32[0];
          if ((float)(v73 * v79) != 0.0)
          {
            v166 = v84;
            v83.f32[0] = sinf(v73 * v79);
            v84 = v166;
            v21 = v83.f32[0] / (float)(v73 * v79);
          }
          v83.f32[0] = v73 * (float)(v84 * v21);
          v85 = (float32x4_t)vdupq_lane_s32((int32x2_t)v83, 0);
          v39 = v178;
          v86 = v79 * v178;
          v87 = 1.0;
          if (v86 != 0.0)
          {
            v159 = v85;
            v167 = v84;
            v88 = sinf(v86);
            v85 = v159;
            v84 = v167;
            v39 = v178;
            v87 = v88 / v86;
          }
          v43 = vmlaq_f32(vmulq_n_f32(v171, (float)(v84 * v87) * v39), v176, v85);
        }
        else
        {
          v22 = 1.0 - v178;
          v23 = vaddq_f32(v180, v179[0]);
          v24 = (int8x16_t)vmulq_f32(v23, v23);
          v25 = vsubq_f32(v180, v179[0]);
          v26 = (int8x16_t)vmulq_f32(v25, v25);
          v27 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)))));
          v28 = v27 + v27;
          _ZF = (float)(v27 + v27) == 0.0;
          v30 = 1.0;
          if (!_ZF)
            v30 = sinf(v28) / v28;
          v31 = v30;
          v32 = vrecpe_f32((float32x2_t)LODWORD(v30));
          v33 = vmul_f32(v32, vrecps_f32((float32x2_t)LODWORD(v31), v32));
          LODWORD(v34) = vmul_f32(v33, vrecps_f32((float32x2_t)LODWORD(v31), v33)).u32[0];
          if ((float)(v22 * v28) != 0.0)
          {
            v162 = v34;
            v35 = sinf(v22 * v28);
            v34 = v162;
            v21 = v35 / (float)(v22 * v28);
          }
          v36.i32[1] = v171.i32[1];
          v37 = vnegq_f32(v171);
          *(float *)v36.i32 = v22 * (float)(v34 * v21);
          v38 = (float32x4_t)vdupq_lane_s32(v36, 0);
          v39 = v178;
          v40 = v28 * v178;
          v41 = 1.0;
          if (v40 != 0.0)
          {
            v163 = v34;
            v172 = v37;
            v157 = v38;
            v42 = sinf(v40);
            v38 = v157;
            v34 = v163;
            v37 = v172;
            v39 = v178;
            v41 = v42 / v40;
          }
          v43 = vmlaq_f32(vmulq_n_f32(v37, (float)(v34 * v41) * v39), v176, v38);
        }
        v89 = (int8x16_t)vmulq_f32(v43, v43);
        *(float32x2_t *)v89.i8 = vadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL));
        v90 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1)), 0);
        v91 = vrsqrteq_f32(v90);
        v92 = vmulq_f32(v91, vrsqrtsq_f32(v90, vmulq_f32(v91, v91)));
        __asm { FMOV            V3.4S, #1.0 }
        v97 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v90), _Q3, (int8x16_t)vmulq_f32(v92, vrsqrtsq_f32(v90, vmulq_f32(v92, v92))));
        v17 = vmlaq_n_f32(v187, vsubq_f32(v186, v187), v39);
        v98 = vmlaq_n_f32(v185, vsubq_f32(v184, v185), v39);
        v17.i32[3] = 1.0;
        v99 = vabsq_f32(v98);
        v99.i32[3] = 0;
        v100 = vmulq_f32(v43, v97);
        v101 = vmaxnmq_f32(v99, (float32x4_t)xmmword_1B2245780);
        v99.i64[0] = 0x8000000080000000;
        v99.i64[1] = 0x8000000080000000;
        v102 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v98, (int8x16_t)v99), (int8x16_t)(*(_OWORD *)&v101 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v103 = vmulq_f32(v100, v100);
        v104 = vmulq_laneq_f32(v100, v100, 3);
        v105 = vmulq_lane_f32(v100, *(float32x2_t *)v100.f32, 1).f32[0];
        v106 = vaddq_f32(v102, v102);
        v103.f32[0] = 0.5 - v103.f32[0];
        *(float32x2_t *)v100.f32 = vmul_laneq_f32(*(float32x2_t *)v100.f32, v100, 2);
        v107.i32[3] = 0;
        v107.f32[0] = (float)(0.5 - v103.f32[1]) - v103.f32[2];
        v107.f32[1] = v105 + v104.f32[2];
        v108.i32[3] = 0;
        v107.f32[2] = v100.f32[0] - v104.f32[1];
        v16 = vmulq_n_f32(v107, v106.f32[0]);
        v108.f32[0] = v105 - v104.f32[2];
        v108.f32[1] = v103.f32[0] - v103.f32[2];
        v108.f32[2] = v100.f32[1] + v104.f32[0];
        v19 = vmulq_lane_f32(v108, *(float32x2_t *)v106.f32, 1);
        *(int32x2_t *)v104.f32 = vrev64_s32(*(int32x2_t *)v104.f32);
        v109.i32[0] = vadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v104.f32).u32[0];
        v109.i32[1] = vsub_f32(*(float32x2_t *)&v100, *(float32x2_t *)&v104).i32[1];
        v109.f32[2] = v103.f32[0] - v103.f32[1];
        v109.i32[3] = 0;
        v18 = vmulq_laneq_f32(v109, v106, 2);
      }
    }
    else
    {
      v16 = v170;
      v17 = (float32x4_t)v175;
      v18 = v156;
      v19 = v161;
    }
    v110 = 0;
    v111 = *a8;
    v112 = a8[1];
    v113 = a8[2];
    v114 = a8[3];
    v179[0] = v16;
    v179[1] = v19;
    v179[2] = v18;
    v179[3] = v17;
    v180 = 0u;
    v181 = 0u;
    v182 = 0u;
    v183 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v180 + v110 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v111, COERCE_FLOAT(*(_OWORD *)&v179[v110])), v112, *(float32x2_t *)v179[v110].f32, 1), v113, v179[v110], 2), v114, v179[v110], 3);
      ++v110;
    }
    while (v110 != 4);
    v115 = v181;
    v116 = v182;
    v117 = v183;
    *a8 = v180;
    a8[1] = v115;
    a8[2] = v116;
    a8[3] = v117;
  }
  else
  {
    v180 = 0uLL;
    v179[0] = 0uLL;
    v187.i32[2] = 0;
    v187.i64[0] = 0;
    v186.i32[2] = 0;
    v186.i64[0] = 0;
    v185.i32[2] = 0;
    v185.i64[0] = 0;
    v184.i32[2] = 0;
    v184.i64[0] = 0;
    v44 = sub_1B1802048(&v180, (__n128 *)&v187, &v185, v10, v11, v12, v13);
    v45 = sub_1B1802048(v179, (__n128 *)&v186, &v184, v155, v154, v153, v152);
    if (v44)
    {
      v46 = v170;
      v47 = (float32x4_t)v175;
      v48 = v156;
      v49 = v161;
      if (v45)
      {
        v50 = (int8x16_t)vmulq_f32(v180, v179[0]);
        v173 = v179[0];
        v177 = v180;
        v51 = 1.0;
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL))) >= 0.0)
        {
          v118 = 1.0 - v178;
          v119 = vsubq_f32(v180, v179[0]);
          v120 = (int8x16_t)vmulq_f32(v119, v119);
          v121 = vaddq_f32(v180, v179[0]);
          v122 = (int8x16_t)vmulq_f32(v121, v121);
          v123 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v120.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v122.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)))));
          v124 = v123 + v123;
          _ZF = (float)(v123 + v123) == 0.0;
          v125 = 1.0;
          if (!_ZF)
            v125 = sinf(v124) / v124;
          v126 = v125;
          v127 = vrecpe_f32((float32x2_t)LODWORD(v125));
          v128 = vmul_f32(v127, vrecps_f32((float32x2_t)LODWORD(v126), v127));
          LODWORD(v129) = vmul_f32(v128, vrecps_f32((float32x2_t)LODWORD(v126), v128)).u32[0];
          if ((float)(v118 * v124) != 0.0)
          {
            v168 = v129;
            v128.f32[0] = sinf(v118 * v124);
            v129 = v168;
            v51 = v128.f32[0] / (float)(v118 * v124);
          }
          v128.f32[0] = v118 * (float)(v129 * v51);
          v130 = (float32x4_t)vdupq_lane_s32((int32x2_t)v128, 0);
          v68 = v178;
          v131 = v124 * v178;
          v132 = 1.0;
          if (v131 != 0.0)
          {
            v160 = v130;
            v169 = v129;
            v133 = sinf(v131);
            v130 = v160;
            v129 = v169;
            v68 = v178;
            v132 = v133 / v131;
          }
          v72 = vmlaq_f32(vmulq_n_f32(v173, (float)(v129 * v132) * v68), v177, v130);
        }
        else
        {
          v52 = 1.0 - v178;
          v53 = vaddq_f32(v180, v179[0]);
          v54 = (int8x16_t)vmulq_f32(v53, v53);
          v55 = vsubq_f32(v180, v179[0]);
          v56 = (int8x16_t)vmulq_f32(v55, v55);
          v57 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v56.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)))));
          v58 = v57 + v57;
          _ZF = (float)(v57 + v57) == 0.0;
          v59 = 1.0;
          if (!_ZF)
            v59 = sinf(v58) / v58;
          v60 = v59;
          v61 = vrecpe_f32((float32x2_t)LODWORD(v59));
          v62 = vmul_f32(v61, vrecps_f32((float32x2_t)LODWORD(v60), v61));
          LODWORD(v63) = vmul_f32(v62, vrecps_f32((float32x2_t)LODWORD(v60), v62)).u32[0];
          if ((float)(v52 * v58) != 0.0)
          {
            v164 = v63;
            v64 = sinf(v52 * v58);
            v63 = v164;
            v51 = v64 / (float)(v52 * v58);
          }
          v65.i32[1] = v173.i32[1];
          v66 = vnegq_f32(v173);
          *(float *)v65.i32 = v52 * (float)(v63 * v51);
          v67 = (float32x4_t)vdupq_lane_s32(v65, 0);
          v68 = v178;
          v69 = v58 * v178;
          v70 = 1.0;
          if (v69 != 0.0)
          {
            v165 = v63;
            v174 = v66;
            v158 = v67;
            v71 = sinf(v69);
            v67 = v158;
            v63 = v165;
            v66 = v174;
            v68 = v178;
            v70 = v71 / v69;
          }
          v72 = vmlaq_f32(vmulq_n_f32(v66, (float)(v63 * v70) * v68), v177, v67);
        }
        v134 = (int8x16_t)vmulq_f32(v72, v72);
        *(float32x2_t *)v134.i8 = vadd_f32(*(float32x2_t *)v134.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL));
        v135 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v134.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v134.i8, 1)), 0);
        v136 = vrsqrteq_f32(v135);
        v137 = vmulq_f32(v136, vrsqrtsq_f32(v135, vmulq_f32(v136, v136)));
        __asm { FMOV            V3.4S, #1.0 }
        v139 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v135), _Q3, (int8x16_t)vmulq_f32(v137, vrsqrtsq_f32(v135, vmulq_f32(v137, v137))));
        v47 = vmlaq_n_f32(v187, vsubq_f32(v186, v187), v68);
        v140 = vmlaq_n_f32(v185, vsubq_f32(v184, v185), v68);
        v47.i32[3] = 1.0;
        v141 = vabsq_f32(v140);
        v141.i32[3] = 0;
        v142 = vmulq_f32(v72, v139);
        v143 = vmaxnmq_f32(v141, (float32x4_t)xmmword_1B2245780);
        v141.i64[0] = 0x8000000080000000;
        v141.i64[1] = 0x8000000080000000;
        v144 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v140, (int8x16_t)v141), (int8x16_t)(*(_OWORD *)&v143 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v145 = vmulq_f32(v142, v142);
        v146 = vmulq_laneq_f32(v142, v142, 3);
        v147 = vmulq_lane_f32(v142, *(float32x2_t *)v142.f32, 1).f32[0];
        v148 = vaddq_f32(v144, v144);
        v145.f32[0] = 0.5 - v145.f32[0];
        *(float32x2_t *)v142.f32 = vmul_laneq_f32(*(float32x2_t *)v142.f32, v142, 2);
        v149.i32[3] = 0;
        v149.f32[0] = (float)(0.5 - v145.f32[1]) - v145.f32[2];
        v149.f32[1] = v147 + v146.f32[2];
        v150.i32[3] = 0;
        v149.f32[2] = v142.f32[0] - v146.f32[1];
        v46 = vmulq_n_f32(v149, v148.f32[0]);
        v150.f32[0] = v147 - v146.f32[2];
        v150.f32[1] = v145.f32[0] - v145.f32[2];
        v150.f32[2] = v142.f32[1] + v146.f32[0];
        v49 = vmulq_lane_f32(v150, *(float32x2_t *)v148.f32, 1);
        *(int32x2_t *)v146.f32 = vrev64_s32(*(int32x2_t *)v146.f32);
        v151.i32[0] = vadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v146.f32).u32[0];
        v151.i32[1] = vsub_f32(*(float32x2_t *)&v142, *(float32x2_t *)&v146).i32[1];
        v151.f32[2] = v145.f32[0] - v145.f32[1];
        v151.i32[3] = 0;
        v48 = vmulq_laneq_f32(v151, v148, 2);
      }
    }
    else
    {
      v46 = v170;
      v47 = (float32x4_t)v175;
      v48 = v156;
      v49 = v161;
    }
    *a8 = v46;
    a8[1] = v49;
    a8[2] = v48;
    a8[3] = v47;
  }
}

float32x4_t sub_1B180157C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7)
{
  uint64_t v7;
  float32x4_t result;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  _OWORD v20[4];
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  if (a6)
  {
    v7 = 0;
    result = *a7;
    v9 = a7[1];
    v10 = a7[2];
    v11 = a7[3];
    v12 = a1[1];
    v13 = a1[2];
    v14 = a1[3];
    v20[0] = *a1;
    v20[1] = v12;
    v20[2] = v13;
    v20[3] = v14;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v21 + v7 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(result, COERCE_FLOAT(v20[v7])), v9, *(float32x2_t *)&v20[v7], 1), v10, (float32x4_t)v20[v7], 2), v11, (float32x4_t)v20[v7], 3);
      ++v7;
    }
    while (v7 != 4);
    result.i64[0] = v21.i64[0];
    v15 = v22;
    v16 = v23;
    v17 = v24;
    *a7 = v21;
    a7[1] = v15;
    a7[2] = v16;
    a7[3] = v17;
  }
  else
  {
    result = *a1;
    v18 = a1[1];
    v19 = a1[3];
    a7[2] = a1[2];
    a7[3] = v19;
    *a7 = result;
    a7[1] = v18;
  }
  return result;
}

void sub_1B1801604(_OWORD *a1, _OWORD *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8)
{
  float v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __n128 v13;
  int v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float v21;
  float v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float v27;
  float v28;
  float v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float v34;
  float v35;
  int32x2_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float32x4_t v43;
  int v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float v51;
  float v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x2_t v61;
  float32x2_t v62;
  float v63;
  float v64;
  int32x2_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float32x4_t v72;
  float v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  int8x16_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float32x2_t v82;
  float32x2_t v83;
  float v84;
  float32x4_t v85;
  float v86;
  float v87;
  float v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x4_t v121;
  int8x16_t v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float32x2_t v127;
  float32x2_t v128;
  float v129;
  float32x4_t v130;
  float v131;
  float v132;
  float v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  __n128 v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  __n128 v175;
  float32x4_t v176;
  float32x4_t v177;
  float v178;
  float32x4_t v179[4];
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;

  v9 = a3;
  v178 = v9;
  v10 = *(float32x4_t *)a1;
  v11 = *((float32x4_t *)a1 + 1);
  v12 = *((float32x4_t *)a1 + 2);
  v13 = *((__n128 *)a1 + 3);
  v154 = *((float32x4_t *)a2 + 1);
  v155 = *(float32x4_t *)a2;
  v152 = *((__n128 *)a2 + 3);
  v153 = *((float32x4_t *)a2 + 2);
  v170 = *(float32x4_t *)a1;
  v175 = v13;
  v156 = v12;
  v161 = v11;
  if (a7)
  {
    v180 = 0uLL;
    v179[0] = 0uLL;
    v187.i32[2] = 0;
    v187.i64[0] = 0;
    v186.i32[2] = 0;
    v186.i64[0] = 0;
    v185.i32[2] = 0;
    v185.i64[0] = 0;
    v184.i32[2] = 0;
    v184.i64[0] = 0;
    v14 = sub_1B1802048(&v180, (__n128 *)&v187, &v185, v10, v11, v12, v13);
    v15 = sub_1B1802048(v179, (__n128 *)&v186, &v184, v155, v154, v153, v152);
    if (v14)
    {
      v16 = v170;
      v17 = (float32x4_t)v175;
      v18 = v156;
      v19 = v161;
      if (v15)
      {
        v20 = (int8x16_t)vmulq_f32(v180, v179[0]);
        v171 = v179[0];
        v176 = v180;
        v21 = 1.0;
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL))) >= 0.0)
        {
          v73 = 1.0 - v178;
          v74 = vsubq_f32(v180, v179[0]);
          v75 = (int8x16_t)vmulq_f32(v74, v74);
          v76 = vaddq_f32(v180, v179[0]);
          v77 = (int8x16_t)vmulq_f32(v76, v76);
          v78 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL)))));
          v79 = v78 + v78;
          _ZF = (float)(v78 + v78) == 0.0;
          v80 = 1.0;
          if (!_ZF)
            v80 = sinf(v79) / v79;
          v81 = v80;
          v82 = vrecpe_f32((float32x2_t)LODWORD(v80));
          v83 = vmul_f32(v82, vrecps_f32((float32x2_t)LODWORD(v81), v82));
          LODWORD(v84) = vmul_f32(v83, vrecps_f32((float32x2_t)LODWORD(v81), v83)).u32[0];
          if ((float)(v73 * v79) != 0.0)
          {
            v166 = v84;
            v83.f32[0] = sinf(v73 * v79);
            v84 = v166;
            v21 = v83.f32[0] / (float)(v73 * v79);
          }
          v83.f32[0] = v73 * (float)(v84 * v21);
          v85 = (float32x4_t)vdupq_lane_s32((int32x2_t)v83, 0);
          v39 = v178;
          v86 = v79 * v178;
          v87 = 1.0;
          if (v86 != 0.0)
          {
            v159 = v85;
            v167 = v84;
            v88 = sinf(v86);
            v85 = v159;
            v84 = v167;
            v39 = v178;
            v87 = v88 / v86;
          }
          v43 = vmlaq_f32(vmulq_n_f32(v171, (float)(v84 * v87) * v39), v176, v85);
        }
        else
        {
          v22 = 1.0 - v178;
          v23 = vaddq_f32(v180, v179[0]);
          v24 = (int8x16_t)vmulq_f32(v23, v23);
          v25 = vsubq_f32(v180, v179[0]);
          v26 = (int8x16_t)vmulq_f32(v25, v25);
          v27 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)))));
          v28 = v27 + v27;
          _ZF = (float)(v27 + v27) == 0.0;
          v30 = 1.0;
          if (!_ZF)
            v30 = sinf(v28) / v28;
          v31 = v30;
          v32 = vrecpe_f32((float32x2_t)LODWORD(v30));
          v33 = vmul_f32(v32, vrecps_f32((float32x2_t)LODWORD(v31), v32));
          LODWORD(v34) = vmul_f32(v33, vrecps_f32((float32x2_t)LODWORD(v31), v33)).u32[0];
          if ((float)(v22 * v28) != 0.0)
          {
            v162 = v34;
            v35 = sinf(v22 * v28);
            v34 = v162;
            v21 = v35 / (float)(v22 * v28);
          }
          v36.i32[1] = v171.i32[1];
          v37 = vnegq_f32(v171);
          *(float *)v36.i32 = v22 * (float)(v34 * v21);
          v38 = (float32x4_t)vdupq_lane_s32(v36, 0);
          v39 = v178;
          v40 = v28 * v178;
          v41 = 1.0;
          if (v40 != 0.0)
          {
            v163 = v34;
            v172 = v37;
            v157 = v38;
            v42 = sinf(v40);
            v38 = v157;
            v34 = v163;
            v37 = v172;
            v39 = v178;
            v41 = v42 / v40;
          }
          v43 = vmlaq_f32(vmulq_n_f32(v37, (float)(v34 * v41) * v39), v176, v38);
        }
        v89 = (int8x16_t)vmulq_f32(v43, v43);
        *(float32x2_t *)v89.i8 = vadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL));
        v90 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v89.i8, 1)), 0);
        v91 = vrsqrteq_f32(v90);
        v92 = vmulq_f32(v91, vrsqrtsq_f32(v90, vmulq_f32(v91, v91)));
        __asm { FMOV            V3.4S, #1.0 }
        v97 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v90), _Q3, (int8x16_t)vmulq_f32(v92, vrsqrtsq_f32(v90, vmulq_f32(v92, v92))));
        v17 = vmlaq_n_f32(v187, vsubq_f32(v186, v187), v39);
        v98 = vmlaq_n_f32(v185, vsubq_f32(v184, v185), v39);
        v17.i32[3] = 1.0;
        v99 = vabsq_f32(v98);
        v99.i32[3] = 0;
        v100 = vmulq_f32(v43, v97);
        v101 = vmaxnmq_f32(v99, (float32x4_t)xmmword_1B2245780);
        v99.i64[0] = 0x8000000080000000;
        v99.i64[1] = 0x8000000080000000;
        v102 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v98, (int8x16_t)v99), (int8x16_t)(*(_OWORD *)&v101 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v103 = vmulq_f32(v100, v100);
        v104 = vmulq_laneq_f32(v100, v100, 3);
        v105 = vmulq_lane_f32(v100, *(float32x2_t *)v100.f32, 1).f32[0];
        v106 = vaddq_f32(v102, v102);
        v103.f32[0] = 0.5 - v103.f32[0];
        *(float32x2_t *)v100.f32 = vmul_laneq_f32(*(float32x2_t *)v100.f32, v100, 2);
        v107.i32[3] = 0;
        v107.f32[0] = (float)(0.5 - v103.f32[1]) - v103.f32[2];
        v107.f32[1] = v105 + v104.f32[2];
        v108.i32[3] = 0;
        v107.f32[2] = v100.f32[0] - v104.f32[1];
        v16 = vmulq_n_f32(v107, v106.f32[0]);
        v108.f32[0] = v105 - v104.f32[2];
        v108.f32[1] = v103.f32[0] - v103.f32[2];
        v108.f32[2] = v100.f32[1] + v104.f32[0];
        v19 = vmulq_lane_f32(v108, *(float32x2_t *)v106.f32, 1);
        *(int32x2_t *)v104.f32 = vrev64_s32(*(int32x2_t *)v104.f32);
        v109.i32[0] = vadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v104.f32).u32[0];
        v109.i32[1] = vsub_f32(*(float32x2_t *)&v100, *(float32x2_t *)&v104).i32[1];
        v109.f32[2] = v103.f32[0] - v103.f32[1];
        v109.i32[3] = 0;
        v18 = vmulq_laneq_f32(v109, v106, 2);
      }
    }
    else
    {
      v16 = v170;
      v17 = (float32x4_t)v175;
      v18 = v156;
      v19 = v161;
    }
    v110 = 0;
    v111 = *a8;
    v112 = a8[1];
    v113 = a8[2];
    v114 = a8[3];
    v179[0] = v16;
    v179[1] = v19;
    v179[2] = v18;
    v179[3] = v17;
    v180 = 0u;
    v181 = 0u;
    v182 = 0u;
    v183 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v180 + v110 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v111, COERCE_FLOAT(*(_OWORD *)&v179[v110])), v112, *(float32x2_t *)v179[v110].f32, 1), v113, v179[v110], 2), v114, v179[v110], 3);
      ++v110;
    }
    while (v110 != 4);
    v115 = v181;
    v116 = v182;
    v117 = v183;
    *a8 = v180;
    a8[1] = v115;
    a8[2] = v116;
    a8[3] = v117;
  }
  else
  {
    v180 = 0uLL;
    v179[0] = 0uLL;
    v187.i32[2] = 0;
    v187.i64[0] = 0;
    v186.i32[2] = 0;
    v186.i64[0] = 0;
    v185.i32[2] = 0;
    v185.i64[0] = 0;
    v184.i32[2] = 0;
    v184.i64[0] = 0;
    v44 = sub_1B1802048(&v180, (__n128 *)&v187, &v185, v10, v11, v12, v13);
    v45 = sub_1B1802048(v179, (__n128 *)&v186, &v184, v155, v154, v153, v152);
    if (v44)
    {
      v46 = v170;
      v47 = (float32x4_t)v175;
      v48 = v156;
      v49 = v161;
      if (v45)
      {
        v50 = (int8x16_t)vmulq_f32(v180, v179[0]);
        v173 = v179[0];
        v177 = v180;
        v51 = 1.0;
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL))) >= 0.0)
        {
          v118 = 1.0 - v178;
          v119 = vsubq_f32(v180, v179[0]);
          v120 = (int8x16_t)vmulq_f32(v119, v119);
          v121 = vaddq_f32(v180, v179[0]);
          v122 = (int8x16_t)vmulq_f32(v121, v121);
          v123 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v120.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v122.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v122, v122, 8uLL)))));
          v124 = v123 + v123;
          _ZF = (float)(v123 + v123) == 0.0;
          v125 = 1.0;
          if (!_ZF)
            v125 = sinf(v124) / v124;
          v126 = v125;
          v127 = vrecpe_f32((float32x2_t)LODWORD(v125));
          v128 = vmul_f32(v127, vrecps_f32((float32x2_t)LODWORD(v126), v127));
          LODWORD(v129) = vmul_f32(v128, vrecps_f32((float32x2_t)LODWORD(v126), v128)).u32[0];
          if ((float)(v118 * v124) != 0.0)
          {
            v168 = v129;
            v128.f32[0] = sinf(v118 * v124);
            v129 = v168;
            v51 = v128.f32[0] / (float)(v118 * v124);
          }
          v128.f32[0] = v118 * (float)(v129 * v51);
          v130 = (float32x4_t)vdupq_lane_s32((int32x2_t)v128, 0);
          v68 = v178;
          v131 = v124 * v178;
          v132 = 1.0;
          if (v131 != 0.0)
          {
            v160 = v130;
            v169 = v129;
            v133 = sinf(v131);
            v130 = v160;
            v129 = v169;
            v68 = v178;
            v132 = v133 / v131;
          }
          v72 = vmlaq_f32(vmulq_n_f32(v173, (float)(v129 * v132) * v68), v177, v130);
        }
        else
        {
          v52 = 1.0 - v178;
          v53 = vaddq_f32(v180, v179[0]);
          v54 = (int8x16_t)vmulq_f32(v53, v53);
          v55 = vsubq_f32(v180, v179[0]);
          v56 = (int8x16_t)vmulq_f32(v55, v55);
          v57 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v56.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)))));
          v58 = v57 + v57;
          _ZF = (float)(v57 + v57) == 0.0;
          v59 = 1.0;
          if (!_ZF)
            v59 = sinf(v58) / v58;
          v60 = v59;
          v61 = vrecpe_f32((float32x2_t)LODWORD(v59));
          v62 = vmul_f32(v61, vrecps_f32((float32x2_t)LODWORD(v60), v61));
          LODWORD(v63) = vmul_f32(v62, vrecps_f32((float32x2_t)LODWORD(v60), v62)).u32[0];
          if ((float)(v52 * v58) != 0.0)
          {
            v164 = v63;
            v64 = sinf(v52 * v58);
            v63 = v164;
            v51 = v64 / (float)(v52 * v58);
          }
          v65.i32[1] = v173.i32[1];
          v66 = vnegq_f32(v173);
          *(float *)v65.i32 = v52 * (float)(v63 * v51);
          v67 = (float32x4_t)vdupq_lane_s32(v65, 0);
          v68 = v178;
          v69 = v58 * v178;
          v70 = 1.0;
          if (v69 != 0.0)
          {
            v165 = v63;
            v174 = v66;
            v158 = v67;
            v71 = sinf(v69);
            v67 = v158;
            v63 = v165;
            v66 = v174;
            v68 = v178;
            v70 = v71 / v69;
          }
          v72 = vmlaq_f32(vmulq_n_f32(v66, (float)(v63 * v70) * v68), v177, v67);
        }
        v134 = (int8x16_t)vmulq_f32(v72, v72);
        *(float32x2_t *)v134.i8 = vadd_f32(*(float32x2_t *)v134.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL));
        v135 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v134.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v134.i8, 1)), 0);
        v136 = vrsqrteq_f32(v135);
        v137 = vmulq_f32(v136, vrsqrtsq_f32(v135, vmulq_f32(v136, v136)));
        __asm { FMOV            V3.4S, #1.0 }
        v139 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v135), _Q3, (int8x16_t)vmulq_f32(v137, vrsqrtsq_f32(v135, vmulq_f32(v137, v137))));
        v47 = vmlaq_n_f32(v187, vsubq_f32(v186, v187), v68);
        v140 = vmlaq_n_f32(v185, vsubq_f32(v184, v185), v68);
        v47.i32[3] = 1.0;
        v141 = vabsq_f32(v140);
        v141.i32[3] = 0;
        v142 = vmulq_f32(v72, v139);
        v143 = vmaxnmq_f32(v141, (float32x4_t)xmmword_1B2245780);
        v141.i64[0] = 0x8000000080000000;
        v141.i64[1] = 0x8000000080000000;
        v144 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v140, (int8x16_t)v141), (int8x16_t)(*(_OWORD *)&v143 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v145 = vmulq_f32(v142, v142);
        v146 = vmulq_laneq_f32(v142, v142, 3);
        v147 = vmulq_lane_f32(v142, *(float32x2_t *)v142.f32, 1).f32[0];
        v148 = vaddq_f32(v144, v144);
        v145.f32[0] = 0.5 - v145.f32[0];
        *(float32x2_t *)v142.f32 = vmul_laneq_f32(*(float32x2_t *)v142.f32, v142, 2);
        v149.i32[3] = 0;
        v149.f32[0] = (float)(0.5 - v145.f32[1]) - v145.f32[2];
        v149.f32[1] = v147 + v146.f32[2];
        v150.i32[3] = 0;
        v149.f32[2] = v142.f32[0] - v146.f32[1];
        v46 = vmulq_n_f32(v149, v148.f32[0]);
        v150.f32[0] = v147 - v146.f32[2];
        v150.f32[1] = v145.f32[0] - v145.f32[2];
        v150.f32[2] = v142.f32[1] + v146.f32[0];
        v49 = vmulq_lane_f32(v150, *(float32x2_t *)v148.f32, 1);
        *(int32x2_t *)v146.f32 = vrev64_s32(*(int32x2_t *)v146.f32);
        v151.i32[0] = vadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v146.f32).u32[0];
        v151.i32[1] = vsub_f32(*(float32x2_t *)&v142, *(float32x2_t *)&v146).i32[1];
        v151.f32[2] = v145.f32[0] - v145.f32[1];
        v151.i32[3] = 0;
        v48 = vmulq_laneq_f32(v151, v148, 2);
      }
    }
    else
    {
      v46 = v170;
      v47 = (float32x4_t)v175;
      v48 = v156;
      v49 = v161;
    }
    *a8 = v46;
    a8[1] = v49;
    a8[2] = v48;
    a8[3] = v47;
  }
}

void sub_1B1801E04(float32x4_t *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float32x4_t *a7, double a8)
{
  if ((_DWORD)a3)
  {
    if ((_DWORD)a3 == 1)
      sub_1B180157C(a1, (uint64_t)a2, 0, a4, a5, a6, a7);
    else
      sub_1B1801604(a1, a2, a8, 0, a4, a5, a6, a7);
  }
  else
  {
    sub_1B1800D7C(a1, a2, a8, a3, a4, a5, a6, a7);
  }
}

_BYTE *sub_1B1801E24(_BYTE *result, _BYTE *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  if (a3 < 1.0)
    a2 = result;
  *a8 = *a2;
  return result;
}

unsigned __int8 *sub_1B1801E3C(unsigned __int8 *result, unsigned __int8 *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, _BYTE *a8)
{
  unsigned int v8;
  double v9;
  double v10;

  v8 = *result;
  v9 = (double)v8;
  v10 = (double)v8 + (double)(int)(*a2 - v8) * a3;
  if (a7)
  {
    LOBYTE(v9) = *a8;
    v10 = v10 + (double)*(unint64_t *)&v9;
  }
  *a8 = (int)v10;
  return result;
}

char *sub_1B1801E70(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, _BYTE *a7)
{
  char v7;

  v7 = *result;
  if (a6)
    v7 += *a7;
  *a7 = v7;
  return result;
}

void sub_1B1801E88(double a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, int a7, _BYTE *a8)
{
  float v10;
  float v11;
  int v19;

  v10 = a1;
  v19 = HIDWORD(*a6);
  v11 = sub_1B1801FC4(v10, COERCE_FLOAT(*a5), COERCE_FLOAT(*a6));
  _S1 = (float)(v11 * v11) * (float)((float)(1.0 - v11) * 3.0);
  _V2.S[1] = v19;
  __asm { FMLA            S0, S1, V2.S[1] }
  if (a7)
  {
    LOBYTE(_S1) = *a8;
    _S0 = _S0 + (float)LODWORD(_S1);
  }
  *a8 = (int)_S0;
}

void sub_1B1801F38(_BYTE *a1, unsigned __int8 *a2, int a3, _QWORD *a4, _QWORD *a5, int a6, _BYTE *a7, double a8)
{
  int v8;
  unsigned int v9;
  double v10;
  double v11;

  if (!a3)
  {
    v9 = *a1;
    v10 = (double)v9;
    v11 = (double)v9 + (double)(int)(*a2 - v9) * a8;
    if (a6)
    {
      LOBYTE(v10) = *a7;
      v11 = v11 + (double)*(unint64_t *)&v10;
    }
    v8 = (int)v11;
    goto LABEL_8;
  }
  if (a3 == 1)
  {
    LOBYTE(v8) = *a1;
    if (a6)
      LOBYTE(v8) = *a7 + v8;
LABEL_8:
    *a7 = v8;
    return;
  }
  sub_1B1801E88(a8, (uint64_t)a1, (uint64_t)a2, 0, a4, a5, a6, a7);
}

uint64_t sub_1B1801F94(double (*a1)(float32x4_t *a1, float32x4_t *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, float32x4_t *a8))
{
  if (a1 == sub_1B18005D8 || (char *)a1 == (char *)sub_1B1800654 || (char *)a1 == (char *)sub_1B1800638)
    return 3;
  else
    return 0;
}

float sub_1B1801FC4(float a1, float a2, float a3)
{
  float v3;
  float v4;
  int v5;
  float v6;
  float v7;
  float v8;

  v3 = a3 + 1.0;
  v4 = 0.0;
  v5 = 20;
  v6 = 0.5;
  v7 = 1.0;
  do
  {
    v8 = (float)((float)(v6 * (float)(v6 * v6))
               + (float)(a2 * (float)(v6 * (float)((float)((float)(1.0 - v6) * (float)(1.0 - v6)) * 3.0))))
       + (float)(v3 * (float)((float)(v6 * v6) * (float)((float)(1.0 - v6) * 3.0)));
    if (vabds_f32(v8, a1) < 0.00001)
      break;
    if (v8 >= a1)
      v7 = v6;
    else
      v4 = v6;
    v6 = (float)(v4 + v7) * 0.5;
    --v5;
  }
  while (v5);
  return v6;
}

uint64_t sub_1B1802048(float32x4_t *a1, __n128 *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, __n128 a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  _BOOL8 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v50;
  int8x16_t v51;
  float v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  uint64_t v56;
  int32x2_t v57;
  float32x4_t v58;
  float32x2_t v59;
  float32x2_t v60;

  if (a3)
  {
    v7 = vmulq_f32(a4, a4);
    v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)));
    v8.f32[0] = sqrtf(v8.f32[0]);
    v9 = vmulq_f32(a5, a5);
    v10 = vmulq_f32(a6, a6);
    v8.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
    v8.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
    *a3 = v8;
  }
  if (a2)
    *a2 = a7;
  if (a1)
  {
    if (a3)
    {
      v11 = *a3;
    }
    else
    {
      v13 = vmulq_f32(a4, a4);
      v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)));
      v14 = vmulq_f32(a5, a5);
      v11.f32[0] = sqrtf(v11.f32[0]);
      v15 = vmulq_f32(a6, a6);
      v11.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
      v11.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]);
    }
    v16 = (uint32x4_t)vceqzq_f32(v11);
    v16.i32[3] = v16.i32[2];
    v16.i32[0] = vmaxvq_u32(v16);
    v12 = v16.i32[0] >= 0;
    if (v16.i32[0] < 0)
    {
      v48 = (float32x4_t)xmmword_1B2244E20;
LABEL_31:
      *a1 = v48;
      return v12;
    }
    v17 = vdivq_f32(a4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0));
    v18 = vdivq_f32(a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1));
    v19 = vdivq_f32(a6, (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2));
    v20 = (int32x4_t)vmulq_f32(v17, v17);
    v21 = (int32x4_t)vmulq_f32(v18, v18);
    v22 = (int32x4_t)vmulq_f32(v19, v19);
    v23 = vzip2q_s32(v20, v22);
    v24 = (float32x4_t)vzip1q_s32(vzip1q_s32(v20, v22), v21);
    v25 = (float32x4_t)vtrn2q_s32(v20, v21);
    v25.i32[2] = v22.i32[1];
    v26 = vaddq_f32((float32x4_t)vzip1q_s32(v23, vdupq_laneq_s32(v21, 2)), vaddq_f32(v24, v25));
    v25.i64[0] = 0x80000000800000;
    v25.i64[1] = 0x80000000800000;
    v27 = vcgeq_f32(v25, v26);
    v26.i32[3] = 0;
    v28 = vrsqrteq_f32(v26);
    v29 = vmulq_f32(v28, vrsqrtsq_f32(v26, vmulq_f32(v28, v28)));
    v30 = v27;
    v30.i32[3] = 0;
    v31 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v30), (int8x16_t)v26, (int8x16_t)vmulq_f32(v29, vrsqrtsq_f32(v26, vmulq_f32(v29, v29))));
    v32 = vmulq_n_f32(v17, v31.f32[0]);
    v33 = vmulq_lane_f32(v18, *(float32x2_t *)v31.f32, 1);
    v34 = vmulq_laneq_f32(v19, v31, 2);
    v35 = (int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34);
    v36 = (int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33);
    v37 = (int32x4_t)v32;
    if (v27.i32[0])
    {
      v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v35, (int8x16_t)v34, 0xCuLL), vnegq_f32(v33)), v34, (float32x4_t)vextq_s8(v36, (int8x16_t)v33, 0xCuLL));
      v37 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
    }
    v39 = (int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32);
    v40 = v33;
    if (v27.i32[1])
    {
      v41 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v39, (int8x16_t)v32, 0xCuLL), vnegq_f32(v34)), v32, (float32x4_t)vextq_s8(v35, (int8x16_t)v34, 0xCuLL));
      v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL);
    }
    if (v27.i32[2])
    {
      v27 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v36, (int8x16_t)v33, 0xCuLL), vnegq_f32(v32)), v33, (float32x4_t)vextq_s8(v39, (int8x16_t)v32, 0xCuLL));
      v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL);
    }
    v42 = (float)(*(float *)v37.i32 + v40.f32[1]) + v34.f32[2];
    if (v42 > 0.0)
    {
      v43 = (float32x4_t)vzip2q_s32((int32x4_t)v40, vuzp1q_s32((int32x4_t)v40, (int32x4_t)v34));
      v43.i32[2] = v37.i32[1];
      v44 = sqrtf(v42 + 1.0);
      v45 = (float32x4_t)vtrn2q_s32((int32x4_t)v34, vzip2q_s32((int32x4_t)v34, v37));
      v45.i32[2] = v40.i32[0];
      v47 = vsubq_f32(v43, v45);
      v43.f32[3] = v44;
      v45.f32[3] = v44;
      v46 = vmulq_f32(v43, v45);
      v47.i32[3] = v46.i32[3];
LABEL_29:
      v46.f32[0] = 0.5 / v44;
      v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 0);
      goto LABEL_30;
    }
    if (*(float *)v37.i32 < v40.f32[1] || *(float *)v37.i32 < v34.f32[2])
    {
      if (v40.f32[1] <= v34.f32[2])
      {
        v44 = sqrtf((float)((float)(v34.f32[2] + 1.0) - *(float *)v37.i32) - v40.f32[1]);
        *(float32x2_t *)v47.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v37, (int32x4_t)v40), *(float32x2_t *)v34.f32);
        v59 = (float32x2_t)__PAIR64__(v37.u32[1], LODWORD(v44));
        v60 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 0);
        *(float32x2_t *)v46.f32 = vsub_f32(*(float32x2_t *)v37.i8, v60);
        v60.f32[0] = v44;
        v60.i32[0] = vmul_f32(v59, v60).u32[0];
        v60.i32[1] = v46.i32[1];
        *(float32x2_t *)&v47.u32[2] = v60;
        goto LABEL_29;
      }
      v52 = sqrtf((float)((float)(v40.f32[1] + 1.0) - *(float *)v37.i32) - v34.f32[2]);
      *(int32x2_t *)v27.i8 = vdup_laneq_s32((int32x4_t)v40, 2);
      v50 = (int8x16_t)v27;
      *(float *)v50.i32 = v52;
      v50.i32[0] = vmul_f32(*(float32x2_t *)v50.i8, (float32x2_t)__PAIR64__(v34.u32[1], LODWORD(v52))).u32[0];
      v50.i32[1] = vadd_f32(*(float32x2_t *)&v27, *(float32x2_t *)&v34).i32[1];
      v51 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.i8, 1), v40);
      v57 = (int32x2_t)vsubq_f32(v34, (float32x4_t)vdupq_laneq_s32(v37, 2)).u64[0];
      v58 = (float32x4_t)vextq_s8(vextq_s8(v51, v51, 4uLL), v50, 0xCuLL);
      v58.i32[3] = v57.i32[0];
    }
    else
    {
      v52 = sqrtf((float)((float)(*(float *)v37.i32 + 1.0) - v40.f32[1]) - v34.f32[2]);
      v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 0);
      v54 = vadd_f32(*(float32x2_t *)v37.i8, v53);
      v53.f32[0] = v52;
      v58.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v37.u32[1], LODWORD(v52)), v53).u32[0];
      v58.i32[1] = v54.i32[1];
      v55 = (float32x2_t)vzip2q_s32(v37, (int32x4_t)v40).u64[0];
      LODWORD(v56) = vadd_f32(v55, *(float32x2_t *)v34.f32).u32[0];
      v57 = (int32x2_t)vsub_f32(v55, *(float32x2_t *)v34.f32);
      HIDWORD(v56) = v57.i32[1];
      v58.i64[1] = v56;
    }
    *(float *)v57.i32 = 0.5 / v52;
    v47 = (float32x4_t)vdupq_lane_s32(v57, 0);
LABEL_30:
    v48 = vmulq_f32(v47, v58);
    goto LABEL_31;
  }
  return 1;
}

double sub_1B18023AC(float *a1, double a2, float a3)
{
  double v4;
  float v5;
  double v6;
  double v7;
  __double2 v8;
  double v9;

  v4 = a3 * a2;
  v5 = a1[6];
  if (v5 >= 1.0)
  {
    v6 = a1[8] + a1[10] * v4;
    v9 = exp(-(v4 * a1[7]));
  }
  else
  {
    v6 = exp(-(v4 * v5) * a1[7]);
    v7 = a1[8];
    v8 = __sincos_stret(v4 * a1[9]);
    v9 = v8.__sinval * a1[10] + v7 * v8.__cosval;
  }
  return 1.0 - v6 * v9;
}

double sub_1B1802460(float *a1, double a2)
{
  float v2;
  double v3;
  double v4;
  double v5;
  int v6;
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v2 = a1[1];
  v3 = *a1 * 3.0;
  v4 = -(v3 - (float)(a1[2] - *a1) * 3.0);
  v5 = 1.0 - v3 - v4;
  v6 = 8;
  v7 = a2;
  do
  {
    v8 = v7 * (v3 + (v5 * v7 - (v3 - (float)(a1[2] - *a1) * 3.0)) * v7);
    if (vabdd_f64(v8, a2) < 0.001)
      goto LABEL_13;
    v9 = v3 + (v4 + v4 + v5 * 3.0 * v7) * v7;
    if (fabs(v9) < 0.000001)
      break;
    v7 = v7 - (v8 - a2) / v9;
    --v6;
  }
  while (v6);
  v10 = 0.0;
  if (a2 >= 0.0)
  {
    v10 = 1.0;
    v11 = 1.0;
    if (a2 <= 1.0)
    {
      v12 = 0.0;
      v7 = a2;
      do
      {
        v13 = v7 * (v3 + (v5 * v7 - (v3 - (float)(a1[2] - *a1) * 3.0)) * v7);
        if (vabdd_f64(v13, a2) < 0.001)
          break;
        if (v13 >= a2)
          v11 = v7;
        else
          v12 = v7;
        v7 = v12 + (v11 - v12) * 0.5;
      }
      while (v12 < v11);
LABEL_13:
      v10 = v7;
    }
  }
  v14 = v2 * 3.0;
  v15 = -(v14 - (float)(a1[3] - v2) * 3.0);
  return (v14 + (v15 + (1.0 - v14 - v15) * v10) * v10) * v10;
}

double sub_1B1802584(uint64_t a1, double a2)
{
  return sub_1B1802460((float *)(a1 + 24), a2);
}

void sub_1B180258C()
{
  if (!qword_1ED4CEEA8)
    qword_1ED4CEEA8 = sub_1B179CB60(&qword_1ED4CEEA8);
}

__n128 sub_1B18025CC(__CFString *a1)
{
  uint64_t v2;
  __n128 result;
  __int128 *v4;

  if (qword_1ED4CEEA0 != -1)
    dispatch_once(&qword_1ED4CEEA0, &unk_1E63D0AD0);
  v2 = sub_1B179CB90(qword_1ED4CEEA8, 0x20uLL);
  *(_QWORD *)(v2 + 16) = sub_1B1802584;
  if (CFSTR("default") == a1)
  {
    v4 = &xmmword_1B2246374;
  }
  else if (CFSTR("easeIn") == a1)
  {
    v4 = &xmmword_1B2246394;
  }
  else if (CFSTR("easeOut") == a1)
  {
    v4 = &xmmword_1B22463A4;
  }
  else
  {
    if (CFSTR("easeInEaseOut") != a1)
    {
      *(_QWORD *)(v2 + 16) = nullsub_21;
      return result;
    }
    v4 = &xmmword_1B22463B4;
  }
  result = (__n128)*v4;
  *(_OWORD *)(v2 + 24) = *v4;
  return result;
}

uint64_t sub_1B18026C0(float a1, float a2, float a3, float a4)
{
  uint64_t result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  if (qword_1ED4CEEA0 != -1)
    dispatch_once(&qword_1ED4CEEA0, &unk_1E63D0AD0);
  result = sub_1B179CB90(qword_1ED4CEEA8, 0x20uLL);
  v9 = sqrtf(a2 / a1);
  v10 = sqrtf(a1 * a2);
  v11 = a3 / (float)(v10 + v10);
  if (v11 >= 1.0)
  {
    v13 = v9 - a4;
    v12 = 0.0;
  }
  else
  {
    v12 = v9 * sqrtf(1.0 - (float)(v11 * v11));
    v13 = (float)-(float)(a4 - (float)(v11 * v9)) / v12;
  }
  *(float *)(result + 24) = v11;
  *(float *)(result + 28) = v9;
  *(_DWORD *)(result + 32) = 1065353216;
  *(float *)(result + 36) = v12;
  *(float *)(result + 40) = v13;
  *(_QWORD *)(result + 16) = sub_1B18023AC;
  return result;
}

void sub_1B1802788()
{
  uint64_t v0;

  if (!qword_1ED4CEE98)
  {
    sub_1B18025CC(CFSTR("default"));
    qword_1ED4CEE98 = v0;
  }
}

uint64_t sub_1B18027C0(float a1, float a2, float a3, float a4)
{
  uint64_t result;

  if (qword_1ED4CEEA0 != -1)
    dispatch_once(&qword_1ED4CEEA0, &unk_1E63D0AD0);
  result = sub_1B179CB90(qword_1ED4CEEA8, 0x20uLL);
  *(float *)(result + 24) = a1;
  *(float *)(result + 28) = a2;
  *(float *)(result + 32) = a3;
  *(float *)(result + 36) = a4;
  *(_QWORD *)(result + 16) = sub_1B1802584;
  return result;
}

uint64_t sub_1B180283C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"timingFunc");
  return a1 + 24;
}

BOOL sub_1B1802884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"timingFunc");
  return *(_QWORD *)(a1 + 16) == (_QWORD)nullsub_21;
}

uint64_t sub_1B18028DC(uint64_t a1, double a2, float a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a5, a6, a7, a8, a9, a10, (uint64_t)"timingFunc");
  return (*(uint64_t (**)(uint64_t, double, float))(a1 + 16))(a1, a2, a3);
}

CFStringRef sub_1B1802948(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTimingFunction>"));
}

CFStringRef sub_1B1802968(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTimingFunction>"));
}

uint64_t sub_1B180540C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t v39;

  if ((sub_1B1868D5C(a2, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
    return 1;
  if (!sub_1B18695D0(a2, v10, v11, v12, v13, v14, v15, v16))
  {
    v25 = (const void *)sub_1B1868FA0(a2, v18, v19, v20, v21, v22, v23, v24);
    if (v25)
    {
      if (sub_1B17C5D30(v25, 0, (uint64_t)&v39, v26, v27, v28, v29, v30))
      {
        v38 = (float32x4_t *)sub_1B1869AC8(a2, v31, v32, v33, v34, v35, v36, v37);
        sub_1B17D4478(&v39, v38, &v39);
        sub_1B17D43E4(*(float32x4_t **)(a1 + 32), *(float32x4_t **)(a1 + 32), &v39);
      }
    }
  }
  return 0;
}

void sub_1B1805B90(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1B1805B90(a1, *a2);
    sub_1B1805B90(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_1B1805BD0(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationStackInit called twice"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationStack->_valid == false");
  *a1 = 1;
}

void sub_1B1805C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;

  v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 168) + 20);
  if ((_DWORD)v8)
  {
    v9 = a4;
    v13 = 0;
    v14 = *(_QWORD *)(a2 + 224);
    v15 = 4 * v8;
    do
    {
      v16 = *(int *)(v14 + v13);
      if ((_DWORD)v16 != -1)
      {
        v17 = (uint64_t *)sub_1B19D4E3C(*(_QWORD *)(a1 + 56), v16, a3, a4, a5, a6, a7, a8);
        v18 = *v17;
        if (*v17
          || (sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stackItem->_modelValueItem"), (v18 = *v17) != 0))
        {
          v19 = *(unsigned __int16 *)(v18 + 16);
          if (v9)
            sub_1B19C4C28(a3, v18, a3, a4, a5, a6, a7, a8);
          else
            sub_1B19C4D8C(a3, v18, a3, a4, a5, a6, a7, a8);
          if (v19 == 1)
            *v17 = 0;
        }
        v14 = *(_QWORD *)(a2 + 224);
        *(_DWORD *)(v14 + v13) = -1;
      }
      v13 += 4;
    }
    while (v15 != v13);
  }
}

void sub_1B1805D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *i;
  uint64_t v11;
  _BOOL8 v12;
  const void *v13;
  const void *v14;
  const void *v15;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
    for (i = *(_QWORD **)(a1 + 8); i; i = (_QWORD *)i[22])
    {
      if (*(_BYTE *)(a1 + 48))
      {
        v11 = i[2];
        if (v11)
          v12 = (*(_WORD *)(v11 + 84) & 0x10) == 0;
        else
          v12 = 1;
        sub_1B1805C20(a1, (uint64_t)i, a2, v12, a5, a6, a7, a8);
      }
      i[19] = -1;
    }
    v13 = *(const void **)(a1 + 56);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v14 = *(const void **)(a1 + 8);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(a1 + 8) = 0;
    }
    v15 = *(const void **)(a1 + 24);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
}

void sub_1B1805DC0(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v8;
  CFTypeRef v10;
  CFTypeRef v11;

  v8 = cf;
  if (a1)
  {
    if (!cf)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationStack");
  if (v8)
LABEL_3:
    v8 = (CFTypeRef)sub_1B19C4540((uint64_t)v8);
LABEL_4:
  v10 = *(CFTypeRef *)(a1 + 24);
  if (v10 != v8)
  {
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (v8)
      v11 = CFRetain(v8);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 24) = v11;
  }
  if (v8)
    CFRelease(v8);
}

uint64_t sub_1B1805E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationStack");
  return *(_QWORD *)(a1 + 24);
}

void sub_1B1805EB0(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v9;
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t v13;
  unsigned int v14;
  CFTypeID v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;

  v9 = cf;
  if (a1)
  {
    if (cf)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationStack");
  if (!v9)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
LABEL_4:
  if (!*(_BYTE *)a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationStack invalid"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationStack->_valid == true");
  if (*(_QWORD *)(a1 + 8))
  {
    if (v9)
      v11 = CFRetain(v9);
    else
      v11 = 0;
    v13 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(v13 + 176) = v11;
    *((_QWORD *)v9 + 21) = v13;
  }
  else
  {
    if (v9)
      v12 = CFRetain(v9);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 8) = v12;
  }
  *(_QWORD *)(a1 + 16) = v9;
  sub_1B1806264(a1, 0, a3, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a1 + 128))
  {
    v14 = *(char *)(*((_QWORD *)v9 + 3) + 34) - 3;
    if (v14 <= 5)
      *((_BYTE *)v9 + 120) = 0x70401020202uLL >> (8 * v14);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v15 = CFGetTypeID(v9);
    if (v15 != sub_1B1808DA8())
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unexpected animation node class"), v17, v18, v19, v20, v21, v22, (uint64_t)"CFGetTypeID(animationNode) == CFXAnimationClusterNodeGetTypeID()");
    v110 = sub_1B17F1EF0(a3, v16, v17, v18, v19, v20, v21, v22);
    if (!v110)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"modelValueStorage");
    v29 = *((_QWORD *)v9 + 2);
    v30 = *(unsigned int *)(*(_QWORD *)(v29 + 168) + 20);
    if (!*(_QWORD *)(a1 + 56))
      *(_QWORD *)(a1 + 56) = sub_1B19D4D18(24, *(_DWORD *)(*(_QWORD *)(v29 + 168) + 20));
    *((_QWORD *)v9 + 28) = malloc_type_malloc(4 * v30, 0x100004052888210uLL);
    v38 = sub_1B19D4DAC(*(_QWORD *)(a1 + 56), v31, v32, v33, v34, v35, v36, v37);
    v111 = (_QWORD *)sub_1B1807AA0((uint64_t)v9, v39, v40, v41, v42, v43, v44, v45);
    if ((_DWORD)v30)
    {
      v46 = 0;
      v107 = v9;
      v108 = v30;
      v109 = v29;
      do
      {
        v47 = (__int16 *)sub_1B19C18E0(v111, *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(v29 + 168) + 72) + 8 * v46), 0);
        if (!sub_1B19C4614((uint64_t)v47, v48, v49, v50, v51, v52, v53, v54))
        {
          *(_DWORD *)(*((_QWORD *)v9 + 28) + 4 * v46) = -1;
          if (!v47)
            goto LABEL_51;
          goto LABEL_50;
        }
        v67 = sub_1B19C4990(v110, v47, v55, v56, v57, v58, v59, v60);
        if (v38 < 1)
          goto LABEL_46;
        v68 = 0;
        v69 = -1;
        v70 = -1;
        do
        {
          v71 = sub_1B19D4E3C(*(_QWORD *)(a1 + 56), v68, v61, v62, v63, v64, v65, v66);
          if (*(_QWORD *)v71)
          {
            if (v67 == *(_QWORD *)v71)
            {
              v73 = v71;
              v74 = *(unsigned __int8 *)(v71 + 8);
              if (v74 == sub_1B19C46E0((uint64_t)v47, v72, v61, v62, v63, v64, v65, v66))
              {
                v75 = *(unsigned __int8 *)(v73 + 9);
                if (v75 == sub_1B19C4728((uint64_t)v47, v72, v61, v62, v63, v64, v65, v66))
                {
                  v70 = v68;
                  v68 = v38;
                }
              }
            }
          }
          else
          {
            v69 = v68;
          }
          ++v68;
        }
        while (v68 < v38);
        if (v70 != -1)
        {
          v9 = v107;
          *(_DWORD *)(v107[28] + 4 * v46) = v70;
          goto LABEL_48;
        }
        v9 = v107;
        if (v69 == -1)
        {
LABEL_46:
          sub_1B19D4FB0(*(_QWORD *)(a1 + 56), 0);
          v76 = v38 + 1;
        }
        else
        {
          v76 = v38;
          v38 = v69;
        }
        *(_DWORD *)(*((_QWORD *)v9 + 28) + 4 * v46) = v38;
        v77 = sub_1B19D4E3C(*(_QWORD *)(a1 + 56), v38, v61, v62, v63, v64, v65, v66);
        *(_QWORD *)v77 = v67;
        *(_BYTE *)(v77 + 8) = sub_1B19C46E0((uint64_t)v47, v78, v79, v80, v81, v82, v83, v84);
        *(_BYTE *)(v77 + 9) = sub_1B19C4728((uint64_t)v47, v85, v86, v87, v88, v89, v90, v91);
        v99 = sub_1B19C4770((uint64_t)v47, v92, v93, v94, v95, v96, v97, v98);
        *(_QWORD *)(v77 + 16) = sub_1B17FFEC0(v99, *(char *)(v77 + 8), 0, 0);
        v38 = v76;
LABEL_48:
        v30 = v108;
        v29 = v109;
        v100 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v109 + 168) + 40) + v46);
        if (sub_1B179E250(v47[16], v72, v61, v62, v63, v64, v65, v66) != v100)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unexpected size"), v101, v102, v103, v104, v105, v106, (uint64_t)"animationCluster->_keyframes->_valueSize[index] == CFXSizeOfBaseType(target->_baseType)");
LABEL_50:
        CFRelease(v47);
LABEL_51:
        ++v46;
      }
      while (v46 != v30);
    }
  }
}

void sub_1B1806264(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;

  if (a1)
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
    if (a3)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
LABEL_3:
  if (*(unsigned __int8 *)(a1 + 241) != a2)
  {
    if (a2)
      v11 = 1;
    else
      v11 = -1;
    sub_1B17F25E4(a3, v11, a3, a4, a5, a6, a7, a8);
    *(_BYTE *)(a1 + 241) = a2;
  }
}

void sub_1B1806304(uint64_t a1, _QWORD *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    if (cf)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationStack");
    if (cf)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
LABEL_3:
  v10 = cf + 21;
  v11 = cf[21];
  cf[19] = -1;
  if (v11)
    *(_QWORD *)(v11 + 176) = cf[22];
  v12 = cf[22];
  if (v12)
    *(_QWORD *)(v12 + 168) = v11;
  if (*(_QWORD **)(a1 + 8) == cf)
    *(_QWORD *)(a1 + 8) = v12;
  if (*(_QWORD **)(a1 + 16) == cf)
    *(_QWORD *)(a1 + 16) = *v10;
  *v10 = 0;
  cf[22] = 0;
  CFRelease(cf);
}

BOOL sub_1B18063C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  return *(_QWORD *)(a1 + 8) == 0;
}

id sub_1B1806418(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  compression_stream_operation v4;
  compression_algorithm v5;
  id v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  compression_status v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  compression_stream v25;

  v4 = a4;
  v5 = a3;
  if (!objc_msgSend_length(a1, a2, a3, a4))
    return 0;
  memset(&v25, 0, sizeof(v25));
  if (v4)
  {
    v7 = 0;
    if (v4 != COMPRESSION_STREAM_DECODE)
      return v7;
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  if (compression_stream_init(&v25, v4, v5) == COMPRESSION_STATUS_ERROR)
    return 0;
  v25.src_ptr = (const uint8_t *)objc_msgSend_bytes(a1, v9, v10, v11, *(_OWORD *)&v25.dst_ptr, *(_OWORD *)&v25.src_ptr, v25.state);
  v25.src_size = objc_msgSend_length(a1, v12, v13, v14);
  v15 = (unint64_t)malloc_type_malloc(0x1000uLL, 0x9A46FD1uLL);
  v25.dst_ptr = (uint8_t *)v15;
  v25.dst_size = 4096;
  v7 = (id)objc_opt_new();
  while (1)
  {
    v16 = compression_stream_process(&v25, v8);
    if (v16)
      break;
    if (!v25.dst_size)
    {
      objc_msgSend_appendBytes_length_(v7, v17, v15, 4096);
      v25.dst_ptr = (uint8_t *)v15;
      v25.dst_size = 4096;
    }
  }
  if (v16 == COMPRESSION_STATUS_ERROR)
  {
    free((void *)v15);
    return 0;
  }
  if (v16 == COMPRESSION_STATUS_END && v25.dst_ptr > (uint8_t *)v15)
    objc_msgSend_appendBytes_length_(v7, v17, v15, (uint64_t)&v25.dst_ptr[-v15]);
  compression_stream_destroy(&v25);
  free((void *)v15);
  v21 = objc_msgSend_length(v7, v18, v19, v20);
  objc_msgSend_setLength_(v7, v22, v21, v23);
  return v7;
}

uint64_t sub_1B1806574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a1, sel__operateOnDataUsingCompressionAlgorithm_operation_, a3, 0);
}

uint64_t sub_1B180657C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a1, sel__operateOnDataUsingCompressionAlgorithm_operation_, a3, 1);
}

id sub_1B1806584(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int8 v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int16 *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  unsigned __int16 v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _WORD *v51;
  _WORD *v52;
  unsigned __int16 v53;
  unsigned int v54;

  v9 = (void *)objc_msgSend_mutableCopy(a1, a2, a3, a4);
  switch(a3)
  {
    case 4:
      v25 = (unsigned int *)objc_msgSend_bytes(a1, v6, v7, v8);
      v29 = (_DWORD *)objc_msgSend_bytes(v9, v26, v27, v28);
      *v29 = *v25;
      v30 = *v25;
      v34 = objc_msgSend_length(a1, v31, v32, v33);
      if (v34 >= 8)
      {
        v35 = (v34 >> 2) - 1;
        v36 = v29 + 1;
        v37 = v25 + 1;
        do
        {
          *v36++ = v30 - *v37;
          v39 = *v37++;
          v38 = v39;
          if (v39 > v30)
            v30 = v38;
          --v35;
        }
        while (v35);
      }
      break;
    case 2:
      v40 = (unsigned __int16 *)objc_msgSend_bytes(a1, v6, v7, v8);
      v44 = (_WORD *)objc_msgSend_bytes(v9, v41, v42, v43);
      *v44 = *v40;
      v45 = *v40;
      v49 = objc_msgSend_length(a1, v46, v47, v48);
      if (v49 >= 4)
      {
        v50 = (v49 >> 1) - 1;
        v51 = v44 + 1;
        v52 = v40 + 1;
        do
        {
          *v51++ = v45 - *v52;
          v54 = (unsigned __int16)*v52++;
          v53 = v54;
          if (v54 > v45)
            v45 = v53;
          --v50;
        }
        while (v50);
      }
      break;
    case 1:
      v10 = (unsigned __int8 *)objc_msgSend_bytes(a1, v6, v7, v8);
      v14 = (_BYTE *)objc_msgSend_bytes(v9, v11, v12, v13);
      *v14 = *v10;
      v15 = *v10;
      v19 = objc_msgSend_length(a1, v16, v17, v18);
      if (v19 >= 2)
      {
        v20 = v19 - 1;
        v21 = v14 + 1;
        v22 = v10 + 1;
        do
        {
          *v21++ = v15 - *v22;
          v24 = *v22++;
          v23 = v24;
          if (v24 > v15)
            v15 = v23;
          --v20;
        }
        while (v20);
      }
      break;
  }
  return v9;
}

id sub_1B1806710(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int8 v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  char *v22;
  char v23;
  unsigned int v24;
  unsigned int *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  int *v37;
  int v38;
  unsigned int v39;
  unsigned __int16 *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  unsigned __int16 v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _WORD *v51;
  __int16 *v52;
  __int16 v53;
  unsigned int v54;

  v9 = (void *)objc_msgSend_mutableCopy(a1, a2, a3, a4);
  switch(a3)
  {
    case 4:
      v25 = (unsigned int *)objc_msgSend_bytes(a1, v6, v7, v8);
      v29 = (_DWORD *)objc_msgSend_bytes(v9, v26, v27, v28);
      *v29 = *v25;
      v30 = *v25;
      v34 = objc_msgSend_length(a1, v31, v32, v33);
      if (v34 >= 8)
      {
        v35 = (v34 >> 2) - 1;
        v36 = v29 + 1;
        v37 = (int *)(v25 + 1);
        do
        {
          v38 = *v37++;
          v39 = v30 - v38;
          *v36++ = v30 - v38;
          if (v30 - v38 > v30)
            v30 = v39;
          --v35;
        }
        while (v35);
      }
      break;
    case 2:
      v40 = (unsigned __int16 *)objc_msgSend_bytes(a1, v6, v7, v8);
      v44 = (_WORD *)objc_msgSend_bytes(v9, v41, v42, v43);
      *v44 = *v40;
      v45 = *v40;
      v49 = objc_msgSend_length(a1, v46, v47, v48);
      if (v49 >= 4)
      {
        v50 = (v49 >> 1) - 1;
        v51 = v44 + 1;
        v52 = (__int16 *)(v40 + 1);
        do
        {
          v53 = *v52++;
          v54 = (unsigned __int16)(v45 - v53);
          *v51++ = v45 - v53;
          if (v54 > v45)
            v45 = v54;
          --v50;
        }
        while (v50);
      }
      break;
    case 1:
      v10 = (unsigned __int8 *)objc_msgSend_bytes(a1, v6, v7, v8);
      v14 = (_BYTE *)objc_msgSend_bytes(v9, v11, v12, v13);
      *v14 = *v10;
      v15 = *v10;
      v19 = objc_msgSend_length(a1, v16, v17, v18);
      if (v19 >= 2)
      {
        v20 = v19 - 1;
        v21 = v14 + 1;
        v22 = (char *)(v10 + 1);
        do
        {
          v23 = *v22++;
          v24 = (v15 - v23);
          *v21++ = v15 - v23;
          if (v24 > v15)
            v15 = v24;
          --v20;
        }
        while (v20);
      }
      break;
  }
  return v9;
}

id sub_1B1806898(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _DWORD *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  _WORD *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  _WORD *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _WORD *v44;
  _WORD *v45;

  v9 = (void *)objc_msgSend_mutableCopy(a1, a2, a3, a4);
  switch(a3)
  {
    case 4:
      v22 = (_DWORD *)objc_msgSend_bytes(a1, v6, v7, v8);
      v26 = (_DWORD *)objc_msgSend_bytes(v9, v23, v24, v25);
      *v26 = *v22;
      v30 = objc_msgSend_length(a1, v27, v28, v29);
      if (v30 >= 8)
      {
        v31 = (v30 >> 2) - 1;
        v32 = v26 + 1;
        v33 = v22 + 1;
        do
        {
          *v32++ = *v33 - *(v33 - 1);
          ++v33;
          --v31;
        }
        while (v31);
      }
      break;
    case 2:
      v34 = (_WORD *)objc_msgSend_bytes(a1, v6, v7, v8);
      v38 = (_WORD *)objc_msgSend_bytes(v9, v35, v36, v37);
      *v38 = *v34;
      v42 = objc_msgSend_length(a1, v39, v40, v41);
      if (v42 >= 4)
      {
        v43 = (v42 >> 1) - 1;
        v44 = v38 + 1;
        v45 = v34 + 1;
        do
        {
          *v44++ = *v45 - *(v45 - 1);
          ++v45;
          --v43;
        }
        while (v43);
      }
      break;
    case 1:
      v10 = (_BYTE *)objc_msgSend_bytes(a1, v6, v7, v8);
      v14 = (_BYTE *)objc_msgSend_bytes(v9, v11, v12, v13);
      *v14 = *v10;
      v18 = objc_msgSend_length(a1, v15, v16, v17);
      if (v18 >= 2)
      {
        v19 = v18 - 1;
        v20 = v14 + 1;
        v21 = v10 + 1;
        do
        {
          *v20++ = *v21 - *(v21 - 1);
          ++v21;
          --v19;
        }
        while (v19);
      }
      break;
  }
  return v9;
}

id sub_1B18069F8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _BYTE *v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  int *v38;
  int v39;
  _WORD *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  _WORD *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  _WORD *v50;
  int v51;
  uint64_t v52;
  unsigned __int16 *v53;
  int v54;

  v9 = (void *)objc_msgSend_mutableCopy(a1, a2, a3, a4);
  switch(a3)
  {
    case 4:
      v25 = (int *)objc_msgSend_bytes(a1, v6, v7, v8);
      v29 = (int *)objc_msgSend_bytes(v9, v26, v27, v28);
      *v29 = *v25;
      v33 = objc_msgSend_length(a1, v30, v31, v32);
      if (v33 >= 8)
      {
        v36 = *v29;
        v35 = v29 + 1;
        v34 = v36;
        v37 = (v33 >> 2) - 1;
        v38 = v25 + 1;
        do
        {
          v39 = *v38++;
          v34 += v39;
          *v35++ = v34;
          --v37;
        }
        while (v37);
      }
      break;
    case 2:
      v40 = (_WORD *)objc_msgSend_bytes(a1, v6, v7, v8);
      v44 = (_WORD *)objc_msgSend_bytes(v9, v41, v42, v43);
      *v44 = *v40;
      v48 = objc_msgSend_length(a1, v45, v46, v47);
      if (v48 >= 4)
      {
        v51 = (unsigned __int16)*v44;
        v50 = v44 + 1;
        v49 = v51;
        v52 = (v48 >> 1) - 1;
        v53 = v40 + 1;
        do
        {
          v54 = *v53++;
          v49 += v54;
          *v50++ = v49;
          --v52;
        }
        while (v52);
      }
      break;
    case 1:
      v10 = (_BYTE *)objc_msgSend_bytes(a1, v6, v7, v8);
      v14 = (_BYTE *)objc_msgSend_bytes(v9, v11, v12, v13);
      *v14 = *v10;
      v18 = objc_msgSend_length(a1, v15, v16, v17);
      if (v18 >= 2)
      {
        v21 = *v14;
        v20 = v14 + 1;
        v19 = v21;
        v22 = v18 - 1;
        v23 = v10 + 1;
        do
        {
          v24 = *v23++;
          v19 += v24;
          *v20++ = v19;
          --v22;
        }
        while (v22);
      }
      break;
  }
  return v9;
}

uint64_t sub_1B1806B44(void *a1, const char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  const char *v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int16 *v19;
  int v20;
  int v21;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned __int16 *v27;
  int v28;
  int v29;
  int v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v6 = objc_msgSend_bytes(a1, a2, a3, a4);
  v10 = objc_msgSend_length(a1, v7, v8, v9);
  v11 = v10 / a3;
  v12 = malloc_type_malloc(v10 / a3 * a3, 0xCD1B45FBuLL);
  v14 = v12;
  v15 = v12;
  if (v10 >= a3)
  {
    v16 = 0;
    v15 = v12;
    do
    {
      v17 = v16 + 3;
      if (v16 + 3 >= v11)
      {
        v18 = v16 * a3;
      }
      else
      {
        v18 = v16 * a3;
        v19 = (unsigned __int16 *)(v6 + v16 * a3);
        switch(a3)
        {
          case 4uLL:
            v20 = *(_DWORD *)v19;
            v13 = (const char *)*((unsigned int *)v19 + 1);
            HIDWORD(v48) = *(_DWORD *)v19;
            LODWORD(v49) = (_DWORD)v13;
            v21 = *((_DWORD *)v19 + 2);
            break;
          case 2uLL:
            v20 = *v19;
            v13 = (const char *)v19[1];
            HIDWORD(v48) = v20;
            LODWORD(v49) = (_DWORD)v13;
            v21 = v19[2];
            break;
          case 1uLL:
            v20 = *(unsigned __int8 *)v19;
            v13 = (const char *)*((unsigned __int8 *)v19 + 1);
            HIDWORD(v48) = v20;
            LODWORD(v49) = (_DWORD)v13;
            v21 = *((unsigned __int8 *)v19 + 2);
            break;
          default:
            goto LABEL_19;
        }
        HIDWORD(v49) = v21;
        if (v20 != (_DWORD)v13 && (_DWORD)v13 != v21 && v21 != v20)
        {
          v27 = (unsigned __int16 *)(v6 + v17 * a3);
          if (a3 == 4)
          {
            v47 = *(_QWORD *)v27;
            v29 = *((_DWORD *)v27 + 2);
          }
          else if (a3 == 2)
          {
            v30 = v27[1];
            LODWORD(v47) = *v27;
            HIDWORD(v47) = v30;
            v29 = v27[2];
          }
          else
          {
            v28 = *((unsigned __int8 *)v27 + 1);
            LODWORD(v47) = *(unsigned __int8 *)v27;
            HIDWORD(v47) = v28;
            v29 = *((unsigned __int8 *)v27 + 2);
          }
          v31 = 0;
          LODWORD(v48) = v29;
          v32 = 1;
LABEL_30:
          v33 = 0;
          v34 = v31;
          v13 = (const char *)*((unsigned int *)&v48 + ++v31);
          if (v31 == 3)
            v35 = 0;
          else
            v35 = v34 + 1;
          v36 = *((_DWORD *)&v48 + v35 + 1);
          while (1)
          {
            if (*((_DWORD *)&v47 + v33) == v36)
            {
              v37 = v33 > 1 ? -2 : 1;
              if (*((_DWORD *)&v47 + (v37 + v33)) == (_DWORD)v13)
                break;
            }
            if (++v33 == 3)
            {
              v32 = v34 < 2;
              if (v31 != 3)
                goto LABEL_30;
              goto LABEL_19;
            }
          }
          v38 = v34 + 2;
          v39 = v34 - 1;
          if (v38 >= 3)
            v38 = v39;
          v40 = *((_DWORD *)&v48 + (int)v38 + 1);
          v41 = v33 + 2;
          v42 = v33 - 1;
          if (v41 < 3)
            v42 = v41;
          v43 = *((_DWORD *)&v47 + v42);
          if (v13 >= v36)
          {
            if (a3 == 4)
            {
              *(_DWORD *)v15 = v36;
              *((_DWORD *)v15 + 1) = (_DWORD)v13;
              *((_DWORD *)v15 + 2) = v43;
              *((_DWORD *)v15 + 3) = v40;
              if (!v32)
                goto LABEL_60;
            }
            else if (a3 == 2)
            {
              *(_WORD *)v15 = v36;
              *((_WORD *)v15 + 1) = (_WORD)v13;
              *((_WORD *)v15 + 2) = v43;
              *((_WORD *)v15 + 3) = v40;
              if (!v32)
                goto LABEL_63;
            }
            else
            {
              *v15 = v36;
              v15[1] = (char)v13;
              v15[2] = v43;
              v15[3] = v40;
              if (!v32)
                goto LABEL_22;
            }
          }
          else if (a3 == 4)
          {
            *(_DWORD *)v15 = (_DWORD)v13;
            *((_DWORD *)v15 + 1) = v36;
            *((_DWORD *)v15 + 2) = v40;
            *((_DWORD *)v15 + 3) = v43;
            if (!v32)
              goto LABEL_60;
          }
          else if (a3 == 2)
          {
            *(_WORD *)v15 = (_WORD)v13;
            *((_WORD *)v15 + 1) = v36;
            *((_WORD *)v15 + 2) = v40;
            *((_WORD *)v15 + 3) = v43;
            if (!v32)
              goto LABEL_63;
          }
          else
          {
            *v15 = (char)v13;
            v15[1] = v36;
            v15[2] = v40;
            v15[3] = v43;
            if (!v32)
              goto LABEL_22;
          }
          v17 = v16 + 6;
          v44 = 4 * a3;
          goto LABEL_83;
        }
      }
LABEL_19:
      v19 = (unsigned __int16 *)(v6 + v18);
      switch(a3)
      {
        case 4uLL:
LABEL_60:
          v24 = *(_DWORD *)v19;
          v25 = *((_DWORD *)v19 + 1);
          v26 = *((_DWORD *)v19 + 2);
          break;
        case 2uLL:
LABEL_63:
          v24 = *v19;
          v25 = v19[1];
          v26 = v19[2];
          break;
        case 1uLL:
LABEL_22:
          v24 = *(unsigned __int8 *)v19;
          v25 = *((unsigned __int8 *)v19 + 1);
          v26 = *((unsigned __int8 *)v19 + 2);
          break;
        default:
          v26 = 0;
          v24 = 0;
          v25 = 0;
LABEL_69:
          switch(a3)
          {
            case 4uLL:
              *(_DWORD *)v15 = v24;
              *((_DWORD *)v15 + 1) = v25;
              v44 = 12;
              *((_DWORD *)v15 + 2) = v26;
              break;
            case 2uLL:
              *(_WORD *)v15 = v24;
              *((_WORD *)v15 + 1) = v25;
              v44 = 6;
              *((_WORD *)v15 + 2) = v26;
              break;
            case 1uLL:
              *v15 = v24;
              v15[1] = v25;
              v44 = 3;
              v15[2] = v26;
              break;
            default:
              v44 = 3 * a3;
              break;
          }
          goto LABEL_83;
      }
      if (v24 >= v25)
        goto LABEL_69;
      if (v25 >= v26)
      {
        if (a3 == 4)
        {
          *(_DWORD *)v15 = v25;
          *((_DWORD *)v15 + 1) = v26;
          v44 = 12;
          *((_DWORD *)v15 + 2) = v24;
        }
        else if (a3 == 2)
        {
          *(_WORD *)v15 = v25;
          *((_WORD *)v15 + 1) = v26;
          v44 = 6;
          *((_WORD *)v15 + 2) = v24;
        }
        else
        {
          *v15 = v25;
          v15[1] = v26;
          v44 = 3;
          v15[2] = v24;
        }
      }
      else if (a3 == 4)
      {
        *(_DWORD *)v15 = v26;
        *((_DWORD *)v15 + 1) = v24;
        v44 = 12;
        *((_DWORD *)v15 + 2) = v25;
      }
      else if (a3 == 2)
      {
        *(_WORD *)v15 = v26;
        *((_WORD *)v15 + 1) = v24;
        v44 = 6;
        *((_WORD *)v15 + 2) = v25;
      }
      else
      {
        *v15 = v26;
        v15[1] = v24;
        v44 = 3;
        v15[2] = v25;
      }
LABEL_83:
      v15 += v44;
      v16 = v17;
    }
    while (v17 < v11);
  }
  v45 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v13, (uint64_t)v14, v15 - v14, v47, v48, v49);
  free(v14);
  return v45;
}

uint64_t sub_1B1806FB8(void *a1, const char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  const char *v12;
  void *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  __int16 v21;
  unsigned __int8 v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  __int16 v27;
  uint64_t v28;

  v6 = objc_msgSend_bytes(a1, a2, a3, a4);
  v10 = objc_msgSend_length(a1, v7, v8, v9);
  v11 = (char *)malloc_type_malloc((((3 * (v10 / a3)) >> 1) & 0x3FFFFFFFFFFFFFFFLL) * a3, 0x9FD4C66uLL);
  v13 = v11;
  v14 = v11;
  if (v10 >= a3)
  {
    v15 = 0;
    v16 = 3 * a3;
    v14 = v11;
    do
    {
      v17 = (unsigned __int8 *)(v6 + v15 * a3);
      switch(a3)
      {
        case 1uLL:
          v18 = *v17;
          v20 = v17[1];
          v22 = v17[2];
          *v14 = v18;
          v14[1] = v20;
          v14[2] = v22;
          break;
        case 2uLL:
          v18 = *(unsigned __int16 *)v17;
          v20 = *((unsigned __int16 *)v17 + 1);
          v21 = *((_WORD *)v17 + 2);
          *(_WORD *)v14 = v18;
          *((_WORD *)v14 + 1) = v20;
          *((_WORD *)v14 + 2) = v21;
          break;
        case 4uLL:
          v18 = *(_DWORD *)v17;
          v19 = *(_QWORD *)(v17 + 4);
          *(_DWORD *)v14 = *(_DWORD *)v17;
          *(_QWORD *)(v14 + 4) = v19;
          v20 = v19;
          break;
        default:
          v23 = v15 + 3;
LABEL_17:
          v14 += v16;
          goto LABEL_18;
      }
      v23 = v15 + 3;
      v14 += v16;
      if (v18 < v20)
      {
        v24 = v23 * a3;
        if (a3 == 4)
        {
          v26 = *(_DWORD *)(v6 + v24);
          *(_DWORD *)v14 = v18;
          *((_DWORD *)v14 + 1) = v26;
          *((_DWORD *)v14 + 2) = v20;
        }
        else if (a3 == 2)
        {
          v27 = *(_WORD *)(v6 + v24);
          *(_WORD *)v14 = v18;
          *((_WORD *)v14 + 1) = v27;
          *((_WORD *)v14 + 2) = v20;
        }
        else
        {
          v25 = *(_BYTE *)(v6 + v24);
          *v14 = v18;
          v14[1] = v25;
          v14[2] = v20;
        }
        v23 = v15 + 4;
        goto LABEL_17;
      }
LABEL_18:
      v15 = v23;
    }
    while (v23 < v10 / a3);
  }
  v28 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v12, (uint64_t)v11, v14 - v11);
  free(v13);
  return v28;
}

uint64_t sub_1B180713C()
{
  if (qword_1ED4CED00 != -1)
    dispatch_once(&qword_1ED4CED00, &unk_1E63D0AF0);
  return qword_1ED4CED08;
}

void sub_1B180717C()
{
  if (!qword_1ED4CED08)
    qword_1ED4CED08 = sub_1B179CB60(&qword_1ED4CED08);
}

uint64_t sub_1B18071BC()
{
  uint64_t v0;

  if (qword_1ED4CED00 != -1)
    dispatch_once(&qword_1ED4CED00, &unk_1E63D0AF0);
  v0 = sub_1B179CB90(qword_1ED4CED08, 0xA0uLL);
  sub_1B185CF98(v0);
  return v0;
}

void sub_1B1807218(uint64_t a1, uint64_t cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v8;
  CFTypeRef v10;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = (CFTypeRef)cf;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  v10 = *(CFTypeRef *)(a1 + 168);
  if (v10 != v8)
  {
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 168) = 0;
    }
    if (v8)
      v8 = CFRetain(v8);
    *(_QWORD *)(a1 + 168) = v8;
  }
  if (*(float *)(a1 + 72) == 0.0 && v8 != 0)
  {
    v12 = sub_1B17F519C((uint64_t)v8, cf, a3, a4, a5, a6, a7, a8);
    sub_1B185D0C4(a1, v12, v13, v14, v15, v16, v17, v18, v19);
  }
}

uint64_t sub_1B18072BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(_QWORD *)(a1 + 168);
}

uint64_t sub_1B1807304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v10;
  uint64_t result;
  float v14;
  float v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v10 = a2;
  if (a1)
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"anim");
    if (a3)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"outputAddress");
LABEL_3:
  result = *(_QWORD *)(a1 + 168);
  if (result)
  {
    v14 = sub_1B17F519C(result, a2, a3, a4, a5, a6, a7, a8);
    v15 = v14 * a9;
    v16 = *(_QWORD *)(a1 + 168);
    v17 = v15;
    v25 = sub_1B185D508(a1, v18, v19, v20, v21, v22, v23, v24);
    return sub_1B17F51E4(v16, v10, v25, a3, v26, v27, v28, v29, v17);
  }
  return result;
}

uint64_t sub_1B18073E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  float v69;
  double v70;
  float v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  double v88;
  double v89;
  unsigned int v90;
  int v92;
  unsigned int v93;
  unsigned int v94;
  _OWORD __dst[4];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"animation");
  }
  v15 = *(_QWORD *)(a1 + 168);
  if (v15)
  {
    if (sub_1B17F582C(*(_QWORD *)(a1 + 168), a2, a3, a4, a5, a6, a7, a8) == 1
      || sub_1B17F519C(v15, v16, v17, v18, v19, v20, v21, v22) == 0.0)
    {
      *(double *)v23.i64 = sub_1B185D118(a1, v16, v17, v18, v19, v20, v21, v22);
      sub_1B17F5528(v15, v23, v31, v24, v25, v26, v27, v28, v29, v30);
    }
    v32 = sub_1B17F53B4(v15, v16, v17, v18, v19, v20, v21, v22);
    if (*(_BYTE *)(v15 + 98))
    {
      v33 = v32;
      v92 = sub_1B17F5F2C(v15);
      memset(__dst, 0, sizeof(__dst));
      if (v33)
      {
        v40 = 0;
        do
        {
          v41 = v40;
          v48 = sub_1B17F5444(v15, v40++, v34, v35, v36, v37, v38, v39);
          if (v40 >= v33)
          {
            v55 = v48 + v48 - sub_1B17F5444(v15, v41 - 1, v42, v43, v44, v45, v46, v47);
            if (!v41)
            {
LABEL_14:
              v56 = v48 - (sub_1B17F5444(v15, v40, v49, v50, v51, v52, v53, v54) - v48);
              goto LABEL_15;
            }
          }
          else
          {
            v55 = sub_1B17F5444(v15, v40, v42, v43, v44, v45, v46, v47);
            if (!v41)
              goto LABEL_14;
          }
          v56 = sub_1B17F5444(v15, v41 - 1, v49, v50, v51, v52, v53, v54);
LABEL_15:
          v57 = sub_1B17F5F54(v15, v41);
          v58 = sub_1B17F5F60(v15, v41);
          v59 = sub_1B17F5F6C(v15, v41);
          v60 = sub_1B17F5F98(v15, v41);
          v61 = sub_1B17F5FAC(v15, v41);
          if (v92)
          {
            v62 = v61;
            v63 = 0;
            v64 = v48 - v56;
            v65 = v55 - v48;
            v66 = v55 - v48 + v48 - v56;
            v67 = (v55 - v48) / v66;
            v68 = (v48 - v56) / v66;
            v69 = (float)(1.0 - v57) * (float)(v58 + 1.0);
            v70 = v67 * (float)(v69 * (float)(v59 + 1.0));
            v71 = (float)(1.0 - v57) * (float)(1.0 - v58);
            v72 = v67 * (float)(v71 * (float)(1.0 - v59));
            v73 = v68 * (float)(v71 * (float)(v59 + 1.0));
            v74 = v68 * (float)(v69 * (float)(1.0 - v59));
            *(float *)&v68 = v65 * v72 + v70 * v64;
            *(float *)&v64 = v65 * v74 + v73 * v64;
            v93 = LODWORD(v64);
            v94 = LODWORD(v68);
            do
            {
              sub_1B17F54AC(v15, v41, __dst, v35, v36, v37, v38, v39);
              v80 = *((float *)__dst + v63);
              if (v40 >= v33)
              {
                sub_1B17F54AC(v15, v41 - 1, __dst, v75, v76, v77, v78, v79);
                v86 = v80 + (float)(v80 - *((float *)__dst + v63));
              }
              else
              {
                sub_1B17F54AC(v15, v40, __dst, v75, v76, v77, v78, v79);
                v86 = *((float *)__dst + v63);
              }
              if (v41)
              {
                sub_1B17F54AC(v15, v41 - 1, __dst, v81, v82, v83, v84, v85);
                v87 = *((float *)__dst + v63);
              }
              else
              {
                sub_1B17F54AC(v15, v40, __dst, v81, v82, v83, v84, v85);
                v87 = v80 - (float)(*((float *)__dst + v63) - v80);
              }
              v88 = (float)(v80 - v87);
              v89 = (float)(v86 - v80);
              *(float *)&v90 = v72 * v89 + v70 * v88;
              *(_QWORD *)(v60 + 8 * v63) = __PAIR64__(v90, v94);
              *(float *)&v88 = v74 * v89 + v73 * v88;
              *(_QWORD *)(v62 + 8 * v63++) = __PAIR64__(LODWORD(v88), v93);
            }
            while (v92 != v63);
          }
        }
        while (v40 != v33);
      }
    }
  }
  else
  {
    sub_1B17F53B4(0, a2, a3, a4, a5, a6, a7, a8);
  }
  return 1;
}

void sub_1B1807754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_6:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"dest");
    if (a1)
      goto LABEL_4;
LABEL_7:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
    goto LABEL_4;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  if (!a1)
    goto LABEL_7;
LABEL_4:
  sub_1B1807218(a2, *(_QWORD *)(a1 + 168), a3, a4, a5, a6, a7, a8);
}

id sub_1B18077F4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  v9 = (const void *)a1[21];
  if (v9)
  {
    CFRelease(v9);
    a1[21] = 0;
  }
  return sub_1B185CF48(a1, a2, a3, a4, a5, a6, a7, a8);
}

CFStringRef sub_1B1807824(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXKeyframedAnimation %p>"), a1);
}

CFStringRef sub_1B1807860(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXKeyframedAnimation %p>"), a1);
}

double sub_1B180789C()
{
  double result;

  if (!qword_1EEF656F0)
  {
    qword_1EEF656F0 = sub_1B179CB60(&qword_1EEF656F0);
    *(_QWORD *)&result = 0x1B1809004;
    xmmword_1ED4ADA50 = xmmword_1E63D2DD8;
  }
  return result;
}

uint64_t sub_1B18078F0(const void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1EEF656F8 != -1)
    dispatch_once(&qword_1EEF656F8, &unk_1E63D0B10);
  v2 = sub_1B179CB90(qword_1EEF656F0, 0xD0uLL);
  v9 = v2;
  if (v2)
    sub_1B180795C(v2, a1, v3, v4, v5, v6, v7, v8);
  return v9;
}

float sub_1B180795C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  double v24;
  float result;

  *(_DWORD *)(a1 + 60) = 2139095039;
  *(_DWORD *)(a1 + 72) = -1082130432;
  v10 = *(_DWORD *)(a1 + 121);
  *(_QWORD *)(a1 + 152) = -1;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 48) = _D0;
  *(_DWORD *)(a1 + 121) = v10 | 0x24;
  sub_1B18079E0(a1, a2, a3, a4, a5, a6, a7, a8);
  v23 = sub_1B185D118((uint64_t)a2, v16, v17, v18, v19, v20, v21, v22);
  if (v23 == 0.0)
  {
    v24 = +[VFXTransaction animationDuration]_0();
    if (v24 == 0.0)
      v24 = 0.25;
  }
  else
  {
    v24 = v23;
  }
  result = v24;
  *(float *)(a1 + 76) = result;
  return result;
}

CFTypeRef sub_1B18079E0(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
  result = *(CFTypeRef *)(a1 + 16);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1B1807A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B1807AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(_QWORD *)(a1 + 144);
}

void sub_1B1807AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  *(_QWORD *)(a1 + 144) = a2;
}

void sub_1B1807B34(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animationNode");
  *(double *)(a1 + 80) = a2;
}

void sub_1B1807B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
  *(_DWORD *)(a1 + 121) |= 2u;
}

void sub_1B1807BD8(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animationNode");
  if ((*(_BYTE *)(a1 + 121) & 1) != 0)
    *(double *)(a1 + 80) = *(double *)(a1 + 80) + a2;
}

uint64_t sub_1B1807C3C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 184) = a2;
  return result;
}

uint64_t sub_1B1807C44(uint64_t a1)
{
  return *(_QWORD *)(a1 + 184);
}

uint64_t sub_1B1807C4C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 192) = a2;
  return result;
}

uint64_t sub_1B1807C54(uint64_t a1)
{
  return *(_QWORD *)(a1 + 192);
}

uint64_t sub_1B1807C5C(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return 0;
  while (1)
  {
    v1 = *(_QWORD *)(a1 + 192);
    if (v1)
      break;
    a1 = *(_QWORD *)(a1 + 40);
    if (!a1)
      return 0;
  }
  return v1;
}

CFTypeRef sub_1B1807C7C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  result = *(CFTypeRef *)(a1 + 136);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 136) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 136) = result;
  }
  return result;
}

uint64_t sub_1B1807CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return a1 + 208;
}

CFTypeRef sub_1B1807D3C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  result = *(CFTypeRef *)(a1 + 200);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 200) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 200) = result;
  }
  return result;
}

uint64_t sub_1B1807DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(_QWORD *)(a1 + 200);
}

uint64_t sub_1B1807DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
  return *(_QWORD *)(a1 + 40);
}

void sub_1B1807E44(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFArray *Mutable;

  if (a1)
  {
    if (value)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
    if (value)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"child");
LABEL_3:
  Mutable = *(__CFArray **)(a1 + 32);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 32) = Mutable;
  }
  CFArrayAppendValue(Mutable, value);
  *((_QWORD *)value + 5) = a1;
}

const __CFArray *sub_1B1807EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
  result = *(const __CFArray **)(a1 + 32);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const __CFArray *sub_1B1807F38(uint64_t a1, CFIndex idx, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
  result = *(const __CFArray **)(a1 + 32);
  if (result)
    return (const __CFArray *)CFArrayGetValueAtIndex(result, idx);
  return result;
}

void sub_1B1807F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;

  v8 = a2;
  v10 = *(_QWORD *)(a1 + 112);
  if (!v10)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node->_cumulativeCache");
    v10 = *(_QWORD *)(a1 + 112);
  }
  v11 = *(_DWORD *)v10;
  if (*(_DWORD *)v10 != v8)
  {
    v12 = *(_QWORD *)(v10 + 8);
    if (!v12)
    {
      v13 = sub_1B191E464(*(_QWORD *)(v10 + 16), a2, a3, a4, a5, a6, a7, a8);
      v12 = sub_1B191E290(v13, 1, v14, v15, v16, v17, v18, v19);
      v20 = *(_QWORD *)(a1 + 112);
      *(_QWORD *)(v20 + 8) = v12;
      v11 = *(_DWORD *)v20;
    }
    if (v11 - 1 >= v8)
    {
      v21 = (void *)sub_1B191E41C(v12, a2, a3, a4, a5, a6, a7, a8);
      sub_1B191E598(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 16), v21, v22, v23, v24, v25, v26, v27);
      v11 = 1;
    }
    v28 = v8 - v11;
    if (v8 > v11)
    {
      do
      {
        sub_1B191EA10(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 112) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8), a4, a5, a6, a7, a8, v29);
        --v28;
      }
      while (v28);
    }
    **(_DWORD **)(a1 + 112) = v8;
  }
}

double sub_1B1808070(uint64_t a1, BOOL *a2, _BYTE *a3, BOOL *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  float v14;
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  double v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  double v40;
  uint64_t v41;
  int v42;
  double v43;
  char v44;
  float v45;
  _BOOL4 v46;
  __int16 v47;
  float v48;
  double v49;
  double v50;
  int v51;
  double v52;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  _BOOL4 v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  double v69;
  float v70;
  unsigned int v71;
  float v72;
  int v73;
  unsigned __int8 v75;
  __int16 v76;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"animationNode");
  if ((*(_BYTE *)(a1 + 123) & 0x60) != 0)
    a9 = *(double *)(a1 + 128);
  if (a9 != *(float *)(a1 + 60))
  {
    v14 = a9;
    *(float *)(a1 + 60) = v14;
    v76 = 0;
    v75 = 1;
    v15 = *(_QWORD *)(a1 + 40);
    if (v15)
    {
      sub_1B1808070(v15, (char *)&v76 + 1, &v76, &v75, a9);
      v17 = v75;
      if (!v75)
      {
        v41 = 0;
        v42 = 0;
        v40 = 0.0;
        v43 = 0.0;
        goto LABEL_98;
      }
      a9 = v16;
    }
    v18 = *(_QWORD *)(a1 + 16);
    v26 = sub_1B185D118(v18, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(a1 + 40))
      v27 = sub_1B18089AC(v18, v19, v20, v21, v22, v23, v24, v25);
    else
      v27 = *(double *)(a1 + 80);
    v28 = *(float *)(a1 + 52);
    v29 = v28 * sub_1B185D78C(v18, v19, v20, v21, v22, v23, v24, v25);
    v38 = sub_1B185D6F0(v18, v30, v31, v32, v33, v34, v35, v36);
    if (v26 > 0.0)
      v39 = v26;
    else
      v39 = 1.0;
    if (v29 < 0.0)
      HIBYTE(v76) ^= 1u;
    v40 = a9 - v27;
    if (v26 == 0.0)
    {
      v41 = 0;
      v42 = 0;
      v43 = 0.0;
    }
    else
    {
      if (v29 == 0.0)
        v43 = *(float *)(a1 + 64);
      else
        v43 = v40 * fabsf(v29) / v39;
      v40 = v43;
      if (v43 < 0.0)
      {
        v44 = sub_1B185DC8C(v18, v37, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v40 = 0.0;
        if ((v44 & 2) == 0)
        {
          v41 = 0;
          v42 = 0;
          v17 = 0;
          goto LABEL_98;
        }
      }
      v45 = *(float *)(v18 + 76);
      v46 = v45 == 3.4028e38 || v45 == INFINITY;
      v47 = *(_WORD *)(v18 + 84);
      if ((v47 & 1) != 0 || (v41 = 0, v48 = 1.0, v45 != 0.0) && v45 != 1.0)
      {
        if (v45 == 0.0)
          v48 = 1.0;
        else
          v48 = *(float *)(v18 + 76);
        if (v46)
        {
          v49 = v43 * 0.5;
          if ((v47 & 1) == 0)
            v49 = v43;
          v41 = (int)v49;
        }
        else
        {
          if ((v47 & 1) != 0)
            v48 = v48 + v48;
          v50 = v43 * 0.5;
          if ((v47 & 1) == 0)
            v50 = v43;
          v41 = (int)v50;
          v43 = v43 / v48;
        }
      }
      v51 = !v46;
      if (v43 < 1.0)
        v51 = 0;
      if ((_BYTE)v76)
        v42 = 1;
      else
        v42 = v51;
      v52 = *(double *)(a1 + 88);
      if (v52 != 0.0 && v52 + *(double *)(a1 + 104) < a9)
        v42 = 1;
      if (v43 > 1.0 && v42 != 0)
      {
        if (((v47 & 0x10) == 0 || (*(_BYTE *)(a1 + 121) & 0x40) != 0 || *(_QWORD *)(a1 + 40))
          && (sub_1B185DC8C(v18, v37, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) & 1) == 0)
        {
          v17 = 0;
          v42 = 1;
          v40 = 0.0;
          goto LABEL_98;
        }
        v40 = v48;
        v43 = 1.0;
        if (v46)
          v40 = 1.0;
      }
      v54 = v39;
      v55 = v38 / v54;
      if (v29 < 0.0)
        v55 = -(v38 / v54);
      if (v38 == 0.0)
        v56 = v40;
      else
        v56 = v55 + v40;
      if (v38 == 0.0)
        v57 = 0.0;
      else
        v57 = v55;
      if (v56 <= 1.0)
      {
        v58 = v56;
        if (v56 < 0.0)
          v58 = fmod(v56, 1.0) + 1.0;
      }
      else
      {
        v58 = fmod(v56, 1.0);
      }
      if ((*(_WORD *)(v18 + 84) & 1) != 0)
      {
        if (v43 < 1.0 || v46)
        {
          v60 = v56 < 0.0;
          v61 = (double)(int)v56;
          v62 = 1.0 - v56;
        }
        else
        {
          v63 = v57 + v48;
          v60 = v63 > 0.0;
          v62 = (double)(int)v63;
          v61 = 1.0 - v63;
        }
        v64 = v60 ? v62 : v61;
        if (v29 < 0.0 == (((int)v64 & 1) == 0))
        {
          HIBYTE(v76) ^= 1u;
          v58 = 1.0 - v58;
        }
      }
      if (v29 >= 0.0)
        v65 = v58;
      else
        v65 = 1.0 - v58;
      v66 = sub_1B185D3AC(v18, v37, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (v66)
      {
        if (v65 >= 0.0 && v65 <= 1.0)
        {
          sub_1B18028DC(v66, v65, v26, v67, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          v65 = v69;
        }
      }
      v40 = v65 * v54;
    }
    v17 = 128;
LABEL_98:
    v70 = v43;
    v71 = *(_DWORD *)(a1 + 121) & 0xFFFFFC7F | (HIBYTE(v76) << 9);
    v72 = v40;
    *(float *)(a1 + 64) = v70;
    *(float *)(a1 + 68) = v72;
    if (v42)
    {
      if (*(_QWORD *)(a1 + 40))
        v73 = v76 << 8;
      else
        v73 = 256;
    }
    else
    {
      v73 = 0;
    }
    *(_DWORD *)(a1 + 121) = v71 | v17 | v73;
    if (*(_QWORD *)(a1 + 112))
      sub_1B1807F9C(a1, v41, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  if (a2)
    *a2 = (*(_DWORD *)(a1 + 121) & 0x200) != 0;
  if (a3)
    *a3 = *(_BYTE *)(a1 + 122) & 1;
  if (a4)
    *a4 = (*(_DWORD *)(a1 + 121) & 0x80) != 0;
  return *(float *)(a1 + 68);
}

float sub_1B180851C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  double v27;
  double v28;
  float v29;
  int v30;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
  if (*(_QWORD *)(a1 + 40))
    sub_1B180851C(a9);
  else
    v11 = 1.0;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v11 * (float)(*(float *)(v12 + 104) * *(float *)(a1 + 48));
  if (*(float *)(v12 + 108) != 0.0 || *(float *)(v12 + 112) != 0.0)
  {
    v14 = *(float *)(a1 + 64);
    if (v14 < 0.0)
      v14 = 0.0;
    v15 = fminf(v14, 1.0);
    v16 = *(float *)(v12 + 76);
    if (v16 == INFINITY || v16 == 3.4028e38)
      v18 = sub_1B185D118(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
    else
      v18 = sub_1B185D160(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
    v19 = *(float *)(v12 + 108);
    v20 = v15 * v18;
    if (v19 != 0.0 && v20 < v19)
      v13 = v20 / v19 * v13;
    v22 = *(float *)(v12 + 112);
    if (v22 != 0.0)
    {
      v23 = *(float *)(v12 + 76);
      v24 = v23 == INFINITY || v23 == 3.4028e38;
      if (!v24 && (*(_WORD *)(v12 + 84) & 0x28) != 0x20)
      {
        v25 = (float)(1.0 - v15) * v18;
        if (v25 >= 0.0 && v25 < v22)
          v13 = v25 / v22 * v13;
      }
    }
  }
  v27 = *(double *)(a1 + 104);
  if (v27 != 0.0)
  {
    v28 = 1.0 - (a9 - *(double *)(a1 + 96)) / v27;
    if (v28 <= 0.0)
      v28 = 0.0;
    v29 = v28;
    v13 = v13 * v29;
    if (v29 == 0.0)
    {
      v30 = *(_DWORD *)(a1 + 121);
      if ((v30 & 8) != 0)
        *(_DWORD *)(a1 + 121) = v30 & 0xFFFFFFD3 | 4;
    }
  }
  return v13;
}

uint64_t sub_1B18086F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  do
  {
    if (!a1)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animationNode");
    result = sub_1B185D554(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
    if (!(_DWORD)result)
      break;
    a1 = *(_QWORD *)(a1 + 40);
  }
  while (a1);
  return result;
}

void sub_1B1808758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  float v10;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  float v24;
  double v25;
  uint64_t v26;

  v10 = *(float *)(a1 + 52);
  if (v10 != a9)
  {
    if ((*(_BYTE *)(a1 + 121) & 1) != 0)
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(float *)(v12 + 80);
      v14 = v10 * v13;
      if ((sub_1B185DC40(v12, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
      {
        sub_1B197A8F4();
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 184);
        if (v23)
        {
          v22 = sub_1B17F259C(v23, v15, v16, v17, v18, v19, v20, v21);
        }
        else
        {
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXAnimationNodeChangeSpeed - can't ensure animation continuity since animation manager is dead"), v16, v17, v18, v19, v20, v21, v26);
          v22 = 0.0;
        }
      }
      v24 = v13 * a9;
      if (v14 == 0.0)
        v25 = (float)(*(float *)(a1 + 64) * *(float *)(a1 + 76));
      else
        v25 = (v22 - *(double *)(a1 + 80)) * v14;
      if (v24 != 0.0)
        *(double *)(a1 + 80) = -(v25 / v24 - v22);
    }
    *(float *)(a1 + 52) = a9;
  }
}

CFTypeRef sub_1B180882C(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 24);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 24) = result;
  }
  return result;
}

BOOL sub_1B180887C(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 123) & 0x60) != 0;
}

uint64_t sub_1B180888C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return (*(unsigned __int8 *)(a1 + 123) >> 5) & 1;
}

void sub_1B18088D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if (a2)
    v10 = 0x200000;
  else
    v10 = 0;
  *(_DWORD *)(a1 + 121) = *(_DWORD *)(a1 + 121) & 0xFFDFFFFF | v10;
}

void sub_1B180893C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if (a2)
    v10 = 0x400000;
  else
    v10 = 0;
  *(_DWORD *)(a1 + 121) = *(_DWORD *)(a1 + 121) & 0xFFBFFFFF | v10;
}

uint64_t sub_1B18089A0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 123) >> 6) & 1;
}

double sub_1B18089AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(double *)(a1 + 128);
}

void sub_1B18089F4(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animation");
  *(double *)(a1 + 128) = a2;
}

uint64_t sub_1B1808A48(uint64_t a1, const void *a2, _QWORD *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (a2)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"animationGroup");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v12 = sub_1B1808AE8(a1, a2, a3);
  sub_1B1807C7C(v12, a4, v13, v14, v15, v16, v17, v18);
  return v12;
}

uint64_t sub_1B1808AE8(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFIndex v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFIndex v21;
  CFIndex i;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  const void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = sub_1B18078F0(a2);
  v14 = sub_1B18FF4FC((uint64_t)a2, v7, v8, v9, v10, v11, v12, v13);
  if (v14 >= 1)
  {
    v21 = v14;
    for (i = 0; v21 != i; ++i)
    {
      v23 = sub_1B18FF544((uint64_t)a2, i, v15, v16, v17, v18, v19, v20);
      if (sub_1B185D098(v23))
      {
        v30 = (void *)sub_1B1808AE8(a1, v23, a3);
        if (v30)
        {
          v31 = v30;
          sub_1B1807E44(v6, v30, v15, v16, v17, v18, v19, v20);
LABEL_10:
          CFRelease(v31);
        }
      }
      else
      {
        v32 = sub_1B185CFC0((uint64_t)v23, a3, v24, v25, v26, v27, v28, v29);
        v31 = v32;
        if (v23)
        {
          v33 = (void *)sub_1B18078F0(v23);
          sub_1B1807E44(v6, v33, v34, v35, v36, v37, v38, v39);
          CFRelease(v33);
          if (v31)
          {
            sub_1B17F181C(a1, (uint64_t)v33, v31, v16, v17, v18, v19, v20);
            goto LABEL_10;
          }
        }
        else if (v32)
        {
          goto LABEL_10;
        }
      }
    }
  }
  return v6;
}

uint64_t sub_1B1808BF0(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (a2)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"animationCluster");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v10 = sub_1B1808C78(a2);
  sub_1B1807C7C(v10, a4, v11, v12, v13, v14, v15, v16);
  return v10;
}

uint64_t sub_1B1808C78(const void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_1EEF65708 != -1)
    dispatch_once(&qword_1EEF65708, &unk_1E63D6968);
  v2 = sub_1B179CB90(qword_1EEF65700, 0xD8uLL);
  sub_1B180795C(v2, a1, v3, v4, v5, v6, v7, v8);
  return v2;
}

uint64_t sub_1B1808CDC(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_6:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"animation");
    if (a3)
      goto LABEL_4;
LABEL_7:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"target");
    goto LABEL_4;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"manager");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  if (!a3)
    goto LABEL_7;
LABEL_4:
  v12 = sub_1B18078F0(a2);
  sub_1B1807C7C(v12, a4, v13, v14, v15, v16, v17, v18);
  sub_1B17F181C(a1, v12, a3, v19, v20, v21, v22, v23);
  return v12;
}

uint64_t sub_1B1808DA8()
{
  if (qword_1EEF65708 != -1)
    dispatch_once(&qword_1EEF65708, &unk_1E63D6968);
  return qword_1EEF65700;
}

double sub_1B1808DE8()
{
  double result;

  if (!qword_1EEF65700)
  {
    qword_1EEF65700 = sub_1B179CB60(&qword_1EEF65700);
    *(_QWORD *)&result = 0x1B18090C8;
    xmmword_1ED4AD7C8 = xmmword_1E63D2DC8;
  }
  return result;
}

void sub_1B1808E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  void (*v13)(uint64_t);
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  CFTypeRef *v18;
  const void *v19;

  v9 = *(const __CFArray **)(a1 + 32);
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      v11 = Count;
      for (i = 0; i != v11; ++i)
        *((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i) + 5) = 0;
    }
    CFRelease(*(CFTypeRef *)(a1 + 32));
  }
  if (*(_QWORD *)(a1 + 200))
  {
    v13 = *(void (**)(uint64_t))(a1 + 216);
    if (!v13 || (v13(a1), *(_QWORD *)(a1 + 200)))
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Completion item will be released without having handled a completion or interruption event. This can lead to an inconsistent state."), a3, a4, a5, a6, a7, a8, (uint64_t)"node->_completionItem == NULL");
      v14 = *(const void **)(a1 + 200);
      if (v14)
      {
        CFRelease(v14);
        *(_QWORD *)(a1 + 200) = 0;
      }
    }
  }
  v15 = *(const void **)(a1 + 16);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v16 = *(const void **)(a1 + 136);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v17 = *(const void **)(a1 + 24);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v18 = *(CFTypeRef **)(a1 + 112);
  if (v18)
  {
    if (v18[1])
    {
      CFRelease(v18[1]);
      v18 = *(CFTypeRef **)(a1 + 112);
      v18[1] = 0;
    }
    if (v18[3])
    {
      CFRelease(v18[3]);
      v18 = *(CFTypeRef **)(a1 + 112);
      v18[3] = 0;
    }
    if (v18[2])
    {
      CFRelease(v18[2]);
      v18 = *(CFTypeRef **)(a1 + 112);
      v18[2] = 0;
    }
  }
  free(v18);
  v19 = *(const void **)(a1 + 176);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 176) = 0;
  }
}

CFStringRef sub_1B1808F8C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAnimationNode %p>"), a1);
}

CFStringRef sub_1B1808FC8(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAnimationNode %p>"), a1);
}

void sub_1B1809004(uint64_t a1, void *__dst, float *__src, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((void *)(a1 + 52) == __dst)
    sub_1B1808758(a1, (uint64_t)__dst, (uint64_t)__src, __n, a5, a6, a7, a8, *__src);
  else
    memcpy(__dst, __src, __n);
}

void sub_1B180902C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1808E40(a1, a2, a3, a4, a5, a6, a7, a8);
  free(*(void **)(a1 + 224));
}

CFStringRef sub_1B1809050(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAnimationClusterNode %p>"), a1);
}

CFStringRef sub_1B180908C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAnimationClusterNode %p>"), a1);
}

void sub_1B18090C8(uint64_t a1, void *__dst, float *__src, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((void *)(a1 + 52) == __dst)
    sub_1B1808758(a1, (uint64_t)__dst, (uint64_t)__src, __n, a5, a6, a7, a8, *__src);
  else
    memcpy(__dst, __src, __n);
}

__CFString *sub_1B18090EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFURL *v9;
  const __CFString *v10;
  const __CFString *v11;
  __CFString *MutableCopy;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  if (*(_DWORD *)(a1 + 96) != 1)
    return 0;
  v9 = *(const __CFURL **)(a1 + 88);
  if (!v9)
    return 0;
  v10 = CFURLCopyPathExtension(v9);
  if (!v10)
    return 0;
  v11 = v10;
  MutableCopy = CFStringCreateMutableCopy(0, 0, v10);
  CFStringLowercase(MutableCopy, 0);
  CFRelease(v11);
  return MutableCopy;
}

uint64_t sub_1B1809180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  if (*(_DWORD *)(a1 + 96) == 1)
    return *(_QWORD *)(a1 + 88);
  else
    return 0;
}

uint64_t sub_1B18091DC()
{
  if (qword_1ED4CECD8 != -1)
    dispatch_once(&qword_1ED4CECD8, &unk_1E63D0B30);
  return qword_1ED4CECE0;
}

void sub_1B180921C()
{
  if (!qword_1ED4CECE0)
  {
    qword_1ED4CECE0 = sub_1B179CB60(&qword_1ED4CECE0);
    qword_1ED4BE220 = (uint64_t)sub_1B180B9B0;
  }
}

uint64_t sub_1B180926C()
{
  uint64_t result;

  if (qword_1ED4CECD8 != -1)
    dispatch_once(&qword_1ED4CECD8, &unk_1E63D0B30);
  result = sub_1B179CB90(qword_1ED4CECE0, 0x70uLL);
  *(_BYTE *)(result + 116) &= 0xFCu;
  *(_DWORD *)(result + 120) = 1;
  return result;
}

uint64_t sub_1B18092C8(const void *a1)
{
  uint64_t v2;

  v2 = sub_1B180926C();
  if (v2)
  {
    *(_QWORD *)(v2 + 88) = CFRetain(a1);
    *(_DWORD *)(v2 + 96) = 1;
  }
  return v2;
}

uint64_t sub_1B1809308(const void *a1)
{
  uint64_t v2;

  v2 = sub_1B180926C();
  if (v2)
  {
    *(_QWORD *)(v2 + 88) = CFRetain(a1);
    *(_DWORD *)(v2 + 96) = 2;
  }
  return v2;
}

uint64_t sub_1B1809348(uint64_t a1, int a2, char a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFMutableArrayRef Mutable;
  uint64_t v15;

  pthread_mutex_lock(&stru_1EEF54F18);
  if (*(_QWORD *)(a1 + 72))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. image has already compression infos"), v8, v9, v10, v11, v12, v13, (uint64_t)"image->_textureRawData == NULL");
  *(_QWORD *)(a1 + 72) = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040E4F71BD7uLL);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(v15 + 32) = Mutable;
  *(_DWORD *)v15 = a2;
  *(_BYTE *)(a1 + 80) &= ~2u;
  *(double *)(a1 + 104) = a4;
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a1 + 116) & 0xFE | a3 | 0xC;
  return pthread_mutex_unlock(&stru_1EEF54F18);
}

uint64_t sub_1B1809424(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  pthread_mutex_lock(&stru_1EEF54F18);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v2, v3, v4, v5, v6, v7, (uint64_t)"image");
  if ((*(_BYTE *)(a1 + 80) & 2) != 0)
    *(_BYTE *)(a1 + 116) &= ~8u;
  sub_1B18097E8(a1);
  v8 = *(_QWORD *)(a1 + 72);
  pthread_mutex_unlock(&stru_1EEF54F18);
  return v8;
}

CFURLRef sub_1B18094A4(CFStringRef filePath)
{
  CFURLRef result;
  CFURLRef v2;
  uint64_t v3;

  result = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], filePath, kCFURLPOSIXPathStyle, 0);
  if (result)
  {
    v2 = result;
    v3 = sub_1B18092C8(result);
    CFRelease(v2);
    return (CFURLRef)v3;
  }
  return result;
}

uint64_t sub_1B18094F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  double v12;
  float v13;
  float v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v33;
  CGImage *v34;
  CGColorSpace *ColorSpace;
  CGContext *v36;
  double v37;
  uint64_t j;
  CGImage *v39;
  uint64_t k;
  CGImageRef v41;
  CGImageRef image[2];
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  CGRect v46;

  v9 = 0;
  v45 = *MEMORY[0x1E0C80C00];
  do
  {
    if (!a1[v9])
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Cannot build cubemap from array of images because image at index %d is NULL"), a3, a4, a5, a6, a7, a8, v9);
      return 0;
    }
    ++v9;
  }
  while (v9 != 6);
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = sub_1B18097E8(a1[v10], a2, a3, a4, a5, a6, a7, a8);
    if (*(float *)&v12 != *((float *)&v12 + 1))
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Cannot build cubemap from array of images because image at index %d is not square: %fx%f"), a3, a4, a5, a6, a7, a8, v10);
      return 0;
    }
    v13 = floorf(*(float *)&v12);
    if (v10)
    {
      v14 = floorf(*((float *)&v12 + 1));
      if (v13 != (float)v11 || v14 != (float)v11)
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: Cannot build cubemap from array of images because image at index %d (%fx%f) does not have the expected size (%zux%zu)"), a3, a4, a5, a6, a7, a8, v10);
        return 0;
      }
    }
    else
    {
      v11 = (unint64_t)v13;
    }
    ++v10;
  }
  while (v10 != 6);
  v16 = 0;
  v17 = 0;
  while (1)
  {
    v18 = sub_1B1809424(a1[v16]);
    if (!v18)
      break;
    if (v16 * 8)
    {
      if (!sub_1B1809C00(v17, v18))
        break;
    }
    else
    {
      v17 = v18;
    }
    if (++v16 == 6)
    {
      v26 = (int *)sub_1B1809424(*a1);
      v27 = sub_1B180926C();
      *(float *)&v28 = (float)v11;
      *((float *)&v28 + 1) = (float)(6 * v11);
      sub_1B1809348(v27, *v26, 0, v28);
      *(_BYTE *)(v27 + 116) |= 0x38u;
      *(_DWORD *)(v27 + 120) = 5;
      v29 = sub_1B1809424(v27);
      sub_1B1809C78(v29, (uint64_t)v26);
      for (i = 0; i != 6; ++i)
      {
        v31 = sub_1B1809424(a1[i]);
        CFArrayAppendValue(*(CFMutableArrayRef *)(v29 + 32), *(const void **)(v31 + 32));
      }
      return v27;
    }
  }
  v33 = 0;
  v43 = 0u;
  v44 = 0u;
  *(_OWORD *)image = 0u;
  do
  {
    v34 = sub_1B1809CAC(a1[v33], v19, v20, v21, v22, v23, v24, v25);
    if (!v34)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Cannot build cubemap from array of images because conversion to CGImageRef of image at index %d failed"), v20, v21, v22, v23, v24, v25, v33);
      v27 = 0;
      goto LABEL_35;
    }
    image[v33++] = v34;
  }
  while (v33 != 6);
  ColorSpace = CGImageGetColorSpace(image[0]);
  v36 = CGBitmapContextCreate(0, v11, 6 * v11, 8uLL, 4 * v11, ColorSpace, 0x4001u);
  v37 = (double)v11;
  for (j = 5; j != -1; --j)
  {
    v46.origin.x = 0.0;
    v46.origin.y = 0.0;
    v46.size.width = v37;
    v46.size.height = v37;
    CGContextDrawImage(v36, v46, image[j]);
    CGContextTranslateCTM(v36, 0.0, v37);
  }
  v39 = CGBitmapContextCreateImage(v36);
  v27 = sub_1B1809F34(v39);
  *(_DWORD *)(v27 + 120) = 5;
  CGImageRelease(v39);
  CGContextRelease(v36);
LABEL_35:
  for (k = 0; k != 6; ++k)
  {
    v41 = image[k];
    if (v41)
    {
      CFRelease(v41);
      image[k] = 0;
    }
  }
  return v27;
}

double sub_1B18097E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  CFTypeRef v36;
  CGContext *v37;
  size_t Height;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const __CFData *v48;
  CGImageSourceRef v49;
  const __CFURL *v50;
  CGImageSource *v51;
  __CFDictionary *Mutable;
  const __CFDictionary *v53;
  uint64_t v54;
  const __CFNumber *Value;
  const __CFNumber *v56;
  const __CFNumber *v57;
  const __CFNumber *v58;
  _BOOL4 v59;
  const __CFNumber *v60;
  const __CFNumber *v61;
  const __CFNumber *v62;
  const __CFNumber *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  CGImage *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  CGImage *v76;
  char v77;
  float Width;
  uint64_t v80;
  uint64_t v81;
  uint64_t valuePtr;

  if ((*(_BYTE *)(a1 + 116) & 8) == 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    if (sub_1B1961BE8(a1, a2, a3, a4, a5, a6, a7, a8))
    {
      if (sub_1B179FEA0() && (sub_1B1961DF4(a1) & 1) != 0)
        goto LABEL_62;
      if ((sub_1B18D7EFC(a1, v16, v17, v18, v19, v20, v21, v22) & 1) == 0)
      {
LABEL_9:
        if ((sub_1B179FEA0() & 1) == 0 && *(_DWORD *)(a1 + 96) == 1)
        {
          v30 = *(void **)(a1 + 88);
          if (v30)
          {
            v31 = (void *)objc_msgSend_URLByDeletingPathExtension(v30, v23, v24, v25);
            v34 = (const void *)objc_msgSend_URLByAppendingPathExtension_(v31, v32, (uint64_t)CFSTR("pvrtc"), v33);
            if (sub_1B198F028((const __CFURL *)v34))
            {
              v35 = *(const void **)(a1 + 88);
              if (v35 != v34)
              {
                if (v35)
                {
                  CFRelease(v35);
                  *(_QWORD *)(a1 + 88) = 0;
                }
                if (v34)
                  v36 = CFRetain(v34);
                else
                  v36 = 0;
                *(_QWORD *)(a1 + 88) = v36;
              }
            }
          }
        }
LABEL_20:
        if (sub_1B19DC360(a1, (uint64_t)v23, v24, v25, v26, v27, v28, v29) && (sub_1B19DC3E0(a1) & 1) != 0)
          goto LABEL_62;
        pthread_mutex_lock(&stru_1EEF54F18);
        v37 = *(CGContext **)(a1 + 64);
        if (v37)
        {
          Width = (float)CGBitmapContextGetWidth(v37);
          Height = CGBitmapContextGetHeight(*(CGContextRef *)(a1 + 64));
          *(float *)&v39 = Width;
          *((float *)&v39 + 1) = (float)Height;
          *(_QWORD *)(a1 + 104) = v39;
          pthread_mutex_unlock(&stru_1EEF54F18);
          goto LABEL_62;
        }
        pthread_mutex_unlock(&stru_1EEF54F18);
        v47 = *(_DWORD *)(a1 + 96);
        if (v47 == 1)
        {
          v50 = *(const __CFURL **)(a1 + 88);
          if (v50)
          {
            v49 = sub_1B19AA638(v50);
            goto LABEL_30;
          }
        }
        else if (v47 == 2)
        {
          v48 = *(const __CFData **)(a1 + 88);
          if (v48)
          {
            v49 = CGImageSourceCreateWithData(v48, 0);
LABEL_30:
            v51 = v49;
            if (v49)
            {
              Mutable = CFDictionaryCreateMutable(0, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CBD240], (const void *)*MEMORY[0x1E0C9AE40]);
              v53 = CGImageSourceCopyPropertiesAtIndex(v51, 0, Mutable);
              CFRelease(Mutable);
              v54 = 0;
              if (v53)
              {
                Value = (const __CFNumber *)CFDictionaryGetValue(v53, (const void *)*MEMORY[0x1E0CBD048]);
                v56 = (const __CFNumber *)CFDictionaryGetValue(v53, (const void *)*MEMORY[0x1E0CBD040]);
                v57 = (const __CFNumber *)CFDictionaryGetValue(v53, (const void *)*MEMORY[0x1E0CBCFF0]);
                if (Value && v56)
                {
                  v58 = v57;
                  valuePtr = 0;
                  CFNumberGetValue(Value, kCFNumberFloatType, (char *)&valuePtr + 4);
                  CFNumberGetValue(v56, kCFNumberFloatType, &valuePtr);
                  if (v58)
                  {
                    HIDWORD(v81) = 0;
                    CFNumberGetValue(v58, kCFNumberIntType, (char *)&v81 + 4);
                    v59 = SHIDWORD(v81) > 4;
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v60 = (const __CFNumber *)CFDictionaryGetValue(v53, (const void *)*MEMORY[0x1E0CBC9F8]);
                  if (v60)
                  {
                    v61 = v60;
                    v62 = (const __CFNumber *)CFDictionaryGetValue(v53, (const void *)*MEMORY[0x1E0CBCA00]);
                    if (v62)
                    {
                      v63 = v62;
                      v81 = 0;
                      CFNumberGetValue(v61, kCFNumberFloatType, (char *)&v81 + 4);
                      CFNumberGetValue(v63, kCFNumberFloatType, &v81);
                      if (*((float *)&v81 + 1) != *(float *)&v81 && *(float *)&v81 > 0.01)
                      {
                        v64 = *(float *)&v81 / *((float *)&v81 + 1);
                        if (*(float *)&v81 <= *((float *)&v81 + 1))
                          v64 = 1.0;
                        if (*((float *)&v81 + 1) <= *(float *)&v81)
                          v65 = 1.0;
                        else
                          v65 = *((float *)&v81 + 1) / *(float *)&v81;
                        if (v59)
                          v66 = v64;
                        else
                          v66 = v65;
                        if (!v59)
                          v65 = v64;
                        *(float *)&valuePtr = v65 * *(float *)&valuePtr;
                        *((float *)&valuePtr + 1) = v66 * *((float *)&valuePtr + 1);
                      }
                    }
                  }
                  v67 = *(float *)&valuePtr;
                  if (v59)
                    *(float *)&v68 = *(float *)&valuePtr;
                  else
                    *(float *)&v68 = *((float *)&valuePtr + 1);
                  if (v59)
                    v67 = *((float *)&valuePtr + 1);
                  *((float *)&v68 + 1) = v67;
                  v80 = v68;
                  CFRelease(v53);
                  v54 = v80;
                }
                else
                {
                  CFRelease(v53);
                  v54 = 0;
                }
              }
              *(_QWORD *)(a1 + 104) = v54;
              CFRelease(v51);
              if (COERCE_FLOAT(*(_QWORD *)(a1 + 104)) > 0.0)
                goto LABEL_62;
            }
          }
        }
        v69 = sub_1B1809CAC(a1, v40, v41, v42, v43, v44, v45, v46);
        if (!v69)
        {
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: Failed to load %@"), v70, v71, v72, v73, v74, v75, a1);
          v77 = 16 * ((*(_DWORD *)(a1 + 120) - 3) < 5);
          goto LABEL_63;
        }
        v76 = v69;
        *(float *)(a1 + 104) = (float)CGImageGetWidth(v69);
        *(float *)(a1 + 108) = (float)CGImageGetHeight(v76);
        CFRelease(v76);
LABEL_62:
        v77 = 16;
LABEL_63:
        *(_BYTE *)(a1 + 116) = *(_BYTE *)(a1 + 116) & 0xCF | v77 | 0x28;
        return *(double *)(a1 + 104);
      }
    }
    else if (!sub_1B18D7EFC(a1, v9, v10, v11, v12, v13, v14, v15))
    {
      goto LABEL_20;
    }
    if ((sub_1B18D7F60(a1) & 1) != 0)
      goto LABEL_62;
    goto LABEL_9;
  }
  return *(double *)(a1 + 104);
}

BOOL sub_1B1809C00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFIndex Count;

  if (a1 == a2 || (v3 = 0, a1) && a2)
  {
    if (*(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4) && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
      return Count == CFArrayGetCount(*(CFArrayRef *)(a2 + 32));
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

double sub_1B1809C78(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 11) = *(_WORD *)(a2 + 11);
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

CGImageRef sub_1B1809CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CGContext *v16;
  void *ImageAtIndex;
  int v18;
  const __CFURL *v19;
  const __CFData *v20;
  const __CFData *v21;
  CGImageSource *v22;
  const char *v23;
  const __CFDictionary *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CGImageSource *v33;
  const __CFDictionary *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CGImageSourceRef v41;
  uint64_t v42;
  uint64_t v43;
  CGImage *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];

  v49[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  if (*(_DWORD *)(a1 + 96) == 3)
    return CGImageRetain(*(CGImageRef *)(a1 + 88));
  pthread_mutex_lock(&stru_1EEF54F18);
  v16 = *(CGContext **)(a1 + 64);
  if (v16)
    goto LABEL_6;
  v18 = *(_DWORD *)(a1 + 96);
  if (v18 == 2)
  {
    v25 = *(_QWORD *)(a1 + 88);
    if (v25)
    {
      v33 = CGImageSourceCreateWithData(*(CFDataRef *)(a1 + 88), 0);
      if (v33)
      {
LABEL_16:
        v46 = *MEMORY[0x1E0CBD238];
        v47 = MEMORY[0x1E0C9AAB0];
        v34 = (const __CFDictionary *)objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v26, (uint64_t)&v47, (uint64_t)&v46, 1);
        ImageAtIndex = CGImageSourceCreateImageAtIndex(v33, 0, v34);
        if (!ImageAtIndex)
        {
          CGImageSourceGetStatusAtIndex(v33, 0);
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: Failed to create image from image source %@ (status: %d)"), v35, v36, v37, v38, v39, v40, (uint64_t)v33);
        }
        CFRelease(v33);
        goto LABEL_26;
      }
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Failed to create image source from data %@"), v27, v28, v29, v30, v31, v32, v25);
    }
    goto LABEL_23;
  }
  if (v18 == 1)
  {
    v19 = *(const __CFURL **)(a1 + 88);
    if (v19)
    {
      v45 = 0;
      v20 = (const __CFData *)sub_1B180A3F0(a1, &v45, v10, v11, v12, v13, v14, v15);
      if (v20)
      {
        v21 = v20;
        v22 = CGImageSourceCreateWithData(v20, 0);
        CFRelease(v21);
        if (v22)
        {
          v48 = *MEMORY[0x1E0CBD238];
          v49[0] = MEMORY[0x1E0C9AAB0];
          v24 = (const __CFDictionary *)objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v23, (uint64_t)v49, (uint64_t)&v48, 1);
          ImageAtIndex = CGImageSourceCreateImageAtIndex(v22, 0, v24);
          CFRelease(v22);
          goto LABEL_7;
        }
      }
      if (v45)
      {
LABEL_28:
        ImageAtIndex = 0;
        goto LABEL_7;
      }
      v41 = sub_1B19AA638(v19);
      if (v41)
      {
        v33 = v41;
        goto LABEL_16;
      }
      v44 = (CGImage *)sub_1B18BE264(v19, v26, v42, v43);
      if (v44)
      {
        ImageAtIndex = v44;
        CGImageRetain(v44);
        goto LABEL_7;
      }
    }
LABEL_23:
    v18 = *(_DWORD *)(a1 + 96);
  }
  if (v18 != 4)
    goto LABEL_27;
  ImageAtIndex = (void *)sub_1B18B7594(*(void **)(a1 + 88));
LABEL_26:
  if (ImageAtIndex)
    goto LABEL_7;
LABEL_27:
  v16 = *(CGContext **)(a1 + 64);
  if (!v16)
    goto LABEL_28;
LABEL_6:
  ImageAtIndex = CGBitmapContextCreateImage(v16);
LABEL_7:
  pthread_mutex_unlock(&stru_1EEF54F18);
  return (CGImageRef)ImageAtIndex;
}

uint64_t sub_1B1809F34(CGImage *a1)
{
  uint64_t v2;

  v2 = sub_1B180926C();
  if (v2)
  {
    *(_QWORD *)(v2 + 88) = CGImageRetain(a1);
    *(_DWORD *)(v2 + 96) = 3;
  }
  return v2;
}

_DWORD *sub_1B1809F74(_DWORD *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  int v9;
  uint64_t v11;

  v8 = cf;
  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  v9 = v8[30];
  if ((v9 - 3) >= 5)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Cannot build column cubemap from non-cubemap image"), a3, a4, a5, a6, a7, a8, v11);
    return 0;
  }
  if (v9 != 5)
    return 0;
  CFRetain(v8);
  return v8;
}

BOOL sub_1B1809FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  return (*(_DWORD *)(a1 + 120) - 3) < 5;
}

uint64_t sub_1B180A048(const void *a1)
{
  uint64_t v2;

  v2 = sub_1B180926C();
  if (v2)
  {
    *(_QWORD *)(v2 + 88) = CFRetain(a1);
    *(_DWORD *)(v2 + 96) = 4;
  }
  return v2;
}

CFURLRef sub_1B180A088(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __CFString *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  char isOpaque;
  float64x2_t v22;
  CFURLRef result;
  CFURLRef v24;
  const char *v25;
  uint64_t v26;
  CFURLRef v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  _BOOL8 v35;
  _BOOL4 v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  float64_t v47;
  float64_t v48;

  v4 = (__CFString *)a1;
  v5 = VFXGetResourceBundle(a1, a2, a3, a4);
  v8 = (void *)objc_msgSend_defaultUICatalogForBundle_(MEMORY[0x1E0D1A6A8], v6, v5, v7);
  v11 = (void *)objc_msgSend_namedTextureWithName_scaleFactor_(v8, v9, (uint64_t)v4, v10, 1.0);
  if (!v11)
    goto LABEL_3;
  v15 = v11;
  objc_msgSend_size(v11, v12, v13, v14);
  v47 = v17;
  v48 = v16;
  isOpaque = objc_msgSend_isOpaque(v15, v18, v19, v20);
  v22.f64[0] = v48;
  v22.f64[1] = v47;
  result = (CFURLRef)sub_1B180A1BC(v4, isOpaque, COERCE_DOUBLE(vcvt_f32_f64(v22)));
  if (!result)
  {
LABEL_3:
    v24 = sub_1B179FC08(v4, v12, v13, v14);
    if (v24)
    {
      v27 = v24;
      v28 = sub_1B18092C8(v24);
      CFRelease(v27);
      return (CFURLRef)v28;
    }
    else
    {
      v29 = (void *)objc_msgSend_valueForKey_(VFXTransaction, v25, (uint64_t)CFSTR("VFXWorldDecodingCurrentEnclosingFolder"), v26);
      if (v29
        && (v32 = (void *)objc_msgSend_URLByAppendingPathComponent_(v29, v30, (uint64_t)v4, v31),
            objc_msgSend_checkResourceIsReachableAndReturnError_(v32, v33, 0, v34)))
      {
        return (CFURLRef)sub_1B18092C8(v32);
      }
      else
      {
        if (objc_msgSend_characterAtIndex_(v4, v30, 0, v31) != 47)
        {
          v35 = VFXHasSpecialResourceBundle();
          v36 = v35;
          v40 = (void *)VFXGetResourceBundle(v35, v37, v38, v39);
          if (v36)
            v44 = (void *)objc_msgSend_bundlePath(v40, v41, v42, v43);
          else
            v44 = (void *)objc_msgSend_resourcePath(v40, v41, v42, v43);
          v4 = (__CFString *)objc_msgSend_stringByAppendingPathComponent_(v44, v45, (uint64_t)v4, v46);
        }
        return sub_1B18094A4(v4);
      }
    }
  }
  return result;
}

uint64_t sub_1B180A1BC(const void *a1, char a2, double a3)
{
  uint64_t v6;
  char v7;

  v6 = sub_1B180926C();
  if (v6)
  {
    *(_QWORD *)(v6 + 88) = CFRetain(a1);
    *(_DWORD *)(v6 + 96) = 5;
    v7 = *(_BYTE *)(v6 + 116);
    *(double *)(v6 + 104) = a3;
    *(_BYTE *)(v6 + 116) = v7 & 0xFE | a2 ^ 1 | 0x1C;
  }
  return v6;
}

CGContext *sub_1B180A230(CGImage *a1)
{
  unint64_t Width;
  unint64_t Height;
  __int16 BitmapInfo;
  CGColorSpace *ColorSpace;
  CGColorSpace *v6;
  CGColorSpaceRef BaseColorSpace;
  _BOOL4 IsWideGamutRGB;
  _BOOL4 v9;
  int v10;
  size_t v11;
  CGColorSpace *v12;
  uint32_t v13;
  size_t v14;
  uint64_t v15;
  CGContext *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CGContext *v23;
  CGRect v25;

  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  BitmapInfo = CGImageGetBitmapInfo(a1);
  ColorSpace = CGImageGetColorSpace(a1);
  if (ColorSpace)
  {
    v6 = ColorSpace;
    BaseColorSpace = CGColorSpaceGetBaseColorSpace(ColorSpace);
    if (BaseColorSpace)
      v6 = BaseColorSpace;
    IsWideGamutRGB = CGColorSpaceIsWideGamutRGB(v6);
    if ((BitmapInfo & 0x100) == 0 && (sub_1B179FFA4() & IsWideGamutRGB) != 1)
    {
      v9 = CGColorSpaceGetNumberOfComponents(v6) == 1;
      goto LABEL_9;
    }
LABEL_12:
    v14 = 8 * Width;
    v13 = 4353;
    v11 = 16;
    v15 = sub_1B179D228();
    goto LABEL_17;
  }
  if ((BitmapInfo & 0x100) != 0)
    goto LABEL_12;
  sub_1B179FFA4();
  v9 = 1;
LABEL_9:
  v10 = BitmapInfo & 0x1F;
  if ((BitmapInfo & 0x1F) == 0 && v9)
  {
    v11 = 8;
    v12 = (CGColorSpace *)sub_1B179D8F0();
    v13 = 0;
    v14 = Width;
    goto LABEL_18;
  }
  v14 = 4 * Width;
  if (v10)
    v13 = 16385;
  else
    v13 = 16389;
  v11 = 8;
  v15 = sub_1B179D1A8();
LABEL_17:
  v12 = (CGColorSpace *)v15;
LABEL_18:
  v16 = CGBitmapContextCreate(0, Width, Height, v11, v14, v12, v13);
  v23 = v16;
  if (v16)
  {
    v25.size.width = (double)Width;
    v25.size.height = (double)Height;
    v25.origin.x = 0.0;
    v25.origin.y = 0.0;
    CGContextDrawImage(v16, v25, a1);
  }
  else
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Failed to create bitmap context for CG image %@"), v17, v18, v19, v20, v21, v22, (uint64_t)a1);
  }
  return v23;
}

BOOL sub_1B180A390(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) == 5;
}

uint64_t sub_1B180A3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 96) != 5)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Can't get name for non catalog texture"), a3, a4, a5, a6, a7, a8, (uint64_t)"image->_sourceType == kCFXImageSourceTypeCatalogTexture");
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_1B180A3F0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *Items;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  void *v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _BYTE v87[128];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  if (*(_DWORD *)(a1 + 96) == 1)
  {
    v10 = *(void **)(a1 + 88);
    v11 = (void *)objc_msgSend_query(v10, a2, a3, a4);
  }
  else
  {
    v10 = 0;
    v11 = (void *)objc_msgSend_query(0, a2, a3, a4);
  }
  v15 = objc_msgSend_length(v11, v12, v13, v14);
  if (a2)
    *a2 = v15 != 0;
  if (!v15)
    return 0;
  v19 = (void *)objc_msgSend_path(v10, v16, v17, v18);
  v23 = objc_msgSend_stringByStandardizingPath(v19, v20, v21, v22);
  v25 = (void *)objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(MEMORY[0x1E0CB3998], v24, (uint64_t)v10, 0);
  Items = (void *)objc_msgSend_queryItems(v25, v26, v27, v28);
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v31 = objc_msgSend_countByEnumeratingWithState_objects_count_(Items, v30, (uint64_t)&v83, (uint64_t)v87, 16);
  if (!v31)
    goto LABEL_23;
  v39 = v31;
  v40 = 0;
  v41 = 0;
  v42 = *(_QWORD *)v84;
  do
  {
    for (i = 0; i != v39; ++i)
    {
      if (*(_QWORD *)v84 != v42)
        objc_enumerationMutation(Items);
      v44 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * i);
      v45 = (void *)objc_msgSend_name(v44, v32, v33, v34);
      if (objc_msgSend_isEqualToString_(v45, v46, (uint64_t)CFSTR("offset"), v47))
      {
        v51 = (void *)objc_msgSend_value(v44, v48, v49, v50);
        v40 = (int)objc_msgSend_intValue(v51, v52, v53, v54);
      }
      else
      {
        v55 = (void *)objc_msgSend_name(v44, v48, v49, v50);
        if (objc_msgSend_isEqualToString_(v55, v56, (uint64_t)CFSTR("size"), v57))
        {
          v58 = (void *)objc_msgSend_value(v44, v32, v33, v34);
          v41 = (int)objc_msgSend_intValue(v58, v59, v60, v61);
        }
      }
    }
    v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(Items, v32, (uint64_t)&v83, (uint64_t)v87, 16);
  }
  while (v39);
  if (v41 < 1)
  {
LABEL_23:
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: failed to resolve image inside %@"), v33, v34, v35, v36, v37, v38, v23);
    return 0;
  }
  v62 = objc_alloc(NSClassFromString(CFSTR("MDLMemoryMappedData")));
  v65 = objc_msgSend_fileURLWithPath_(MEMORY[0x1E0C99E98], v63, v23, v64);
  v67 = (void *)objc_msgSend_initWithURL_offset_length_(v62, v66, v65, v40, v41);
  v71 = (void *)objc_msgSend_dataNoCopy(v67, v68, v69, v70);
  v75 = objc_msgSend_copy(v71, v72, v73, v74);

  if (!v75)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: failed to map image data for image inside %@"), v76, v77, v78, v79, v80, v81, v23);
    goto LABEL_23;
  }
  return v75;
}

uint64_t sub_1B180A64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  if (*(_DWORD *)(a1 + 96) == 2)
    return *(_QWORD *)(a1 + 88);
  else
    return 0;
}

uint64_t sub_1B180A6A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4;

  v4 = *(_DWORD *)(a1 + 96);
  if (v4 == 5)
    return *(_QWORD *)(a1 + 88);
  if (v4 == 1)
    return objc_msgSend_lastPathComponent(*(void **)(a1 + 88), a2, a3, a4);
  return 0;
}

uint64_t sub_1B180A6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v9;
  os_signpost_id_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CGImage *v27;
  CGContext *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CGColorSpaceRef ColorSpace;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  uint8_t buf[4];
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  pthread_mutex_lock(&stru_1EEF54F18);
  if (!*(_QWORD *)(a1 + 64) && *(_DWORD *)(a1 + 96) != 5 && (*(_BYTE *)(a1 + 80) & 2) == 0 && !sub_1B1809424(a1))
  {
    v9 = sub_1B17C439C();
    v10 = os_signpost_id_generate(v9);
    v11 = sub_1B17C439C();
    if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v19 = v11;
      if (os_signpost_enabled(v11))
      {
        if (*(_DWORD *)(a1 + 96) == 1)
          v20 = *(_QWORD *)(a1 + 88);
        else
          v20 = 0;
        *(_DWORD *)buf = 138412290;
        v53 = v20;
        _os_signpost_emit_with_name_impl(&dword_1B178D000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v10, "LoadImage (CG)", "url=%@", buf, 0xCu);
      }
    }
    v27 = sub_1B1809CAC(a1, v12, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(a1 + 64))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXImageCacheBitmap context is not null when it should be"), v21, v22, v23, v24, v25, v26, (uint64_t)"image->_bitmapContext==NULL");
    if (v27)
    {
      v28 = sub_1B180A230(v27);
      *(_QWORD *)(a1 + 64) = v28;
      if (v28)
      {
        ColorSpace = CGBitmapContextGetColorSpace(v28);
        if (ColorSpace != (CGColorSpaceRef)sub_1B179D228()
          && ColorSpace != (CGColorSpaceRef)sub_1B179D958()
          && ColorSpace != (CGColorSpaceRef)sub_1B179D1E8()
          && (*(_BYTE *)(a1 + 116) & 2) == 0)
        {
          sub_1B180A994(v27, a1, v36, v37, v38, v39, v40, v41);
          if (sub_1B180AC1C(a1, v42, v43, v44, v45, v46, v47, v48))
          {
            CACurrentMediaTime();
            sub_1B180AD30(*(CGContext **)(a1 + 64));
          }
        }
      }
      else
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: failed to create a CGBitmapContext from a CGImage for %@"), v29, v30, v31, v32, v33, v34, a1);
      }
      CGImageRelease(v27);
    }
    v49 = sub_1B17C439C();
    if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v50 = v49;
      if (os_signpost_enabled(v49))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1B178D000, v50, OS_SIGNPOST_INTERVAL_END, v10, "LoadImage (CG)", "", buf, 2u);
      }
    }
  }
  return pthread_mutex_unlock(&stru_1EEF54F18);
}

BOOL sub_1B180A91C(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 80) & 2) != 0 || sub_1B1809424(a1) != 0;
}

uint64_t sub_1B180A948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  return (*(unsigned __int8 *)(a1 + 116) >> 1) & 1;
}

void sub_1B180A994(CGImageRef image, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGContext *v10;
  CGImageAlphaInfo AlphaInfo;
  unsigned int v12;
  BOOL v14;
  unsigned __int16 *Data;
  unsigned __int16 *v16;
  unsigned int Width;
  unsigned int Height;
  size_t BitsPerComponent;
  size_t v20;
  size_t BytesPerRow;
  int v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  if ((*(_BYTE *)(a2 + 116) & 4) == 0)
  {
    v10 = *(CGContext **)(a2 + 64);
    if (v10)
    {
      AlphaInfo = CGImageGetAlphaInfo(image);
      v12 = AlphaInfo - 1;
      v14 = AlphaInfo == kCGImageAlphaOnly || v12 < 4;
      if (v12 > 3)
        goto LABEL_53;
      Data = (unsigned __int16 *)CGBitmapContextGetData(v10);
      if (!Data)
        goto LABEL_52;
      v16 = Data;
      Width = CGBitmapContextGetWidth(v10);
      Height = CGBitmapContextGetHeight(v10);
      BitsPerComponent = CGBitmapContextGetBitsPerComponent(v10);
      v20 = (CGBitmapContextGetBitsPerPixel(v10) / BitsPerComponent * BitsPerComponent) >> 3;
      BytesPerRow = CGBitmapContextGetBytesPerRow(v10);
      if (v20 == 4)
      {
        if (CGImageGetBitmapInfo(image) == 0x2000)
          v22 = 0;
        else
          v22 = 3;
        if (Height)
        {
          v23 = 0;
          v24 = 0;
          v25 = 1;
          while (!Width)
          {
LABEL_23:
            v14 = 0;
            ++v24;
            v23 += BytesPerRow;
            v25 = v24 < Height;
            if (v24 == Height)
              goto LABEL_53;
          }
          v26 = v23 + v22;
          v27 = Width;
          while (*((unsigned __int8 *)v16 + v26) >= 0xFEu)
          {
            v26 += 4;
            if (!--v27)
              goto LABEL_23;
          }
          v14 = v25;
          goto LABEL_53;
        }
        goto LABEL_52;
      }
      if ((CGBitmapContextGetBitmapInfo(v10) & 0x100) != 0)
      {
        if (v20 == 8)
        {
          if (Height)
          {
            v32 = 0;
            while (1)
            {
              v33 = Width;
              v34 = v16;
              if (Width)
                break;
LABEL_50:
              v14 = 0;
              ++v32;
              v16 = (unsigned __int16 *)((char *)v16 + BytesPerRow);
              if (v32 == Height)
                goto LABEL_53;
            }
            while (1)
            {
              v36 = *v34;
              v34 += 4;
              v35 = v36;
              v37 = (v36 >> 10) & 0x1F;
              v38 = v37 == 31 ? 2139095040 : v37;
              v39 = !v37 || v37 == 31;
              v40 = v39 ? v38 : (v37 << 23) + 939524096;
              if (COERCE_FLOAT(v40 | (v35 << 16) & 0x80000000 | (v35 >> 7) & 7 | (8 * (v35 & 0x3FF)) & 0x1FFF | ((v35 & 0x3FF) << 13)) < 0.999)
                goto LABEL_55;
              if (!--v33)
                goto LABEL_50;
            }
          }
        }
        else if (v20 == 16 && Height)
        {
          v28 = 0;
          v29 = (float *)(v16 + 6);
          while (1)
          {
            v30 = Width;
            v31 = v29;
            if (Width)
              break;
LABEL_33:
            v14 = 0;
            ++v28;
            v29 = (float *)((char *)v29 + BytesPerRow);
            if (v28 == Height)
              goto LABEL_53;
          }
          while (*v31 >= 0.999)
          {
            v31 += 4;
            if (!--v30)
              goto LABEL_33;
          }
LABEL_55:
          v14 = 1;
          goto LABEL_53;
        }
      }
LABEL_52:
      v14 = 0;
LABEL_53:
      *(_BYTE *)(a2 + 116) = *(_BYTE *)(a2 + 116) & 0xFE | v14 | 4;
    }
  }
}

uint64_t sub_1B180AC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  const void *v17;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"image");
  }
  if ((*(_DWORD *)(a1 + 120) - 3) < 5)
    return 0;
  v16 = *(_BYTE *)(a1 + 116);
  if (*(_DWORD *)(a1 + 96) != 5 && (*(_BYTE *)(a1 + 116) & 4) == 0)
  {
    pthread_mutex_lock(&stru_1EEF54F18);
    if ((*(_BYTE *)(a1 + 80) & 2) != 0 || sub_1B1809424(a1))
    {
      if ((*(_BYTE *)(a1 + 116) & 4) == 0)
        *(_BYTE *)(a1 + 116) = *(_BYTE *)(a1 + 116) & 0xFE | *(_BYTE *)(*(_QWORD *)(a1 + 72) + 6) & 1 | 4;
    }
    else
    {
      pthread_mutex_unlock(&stru_1EEF54F18);
      pthread_mutex_lock(&stru_1EEF54F18);
      v17 = (const void *)sub_1B180ADA4(a1, 1);
      if (v17)
        CFRelease(v17);
    }
    pthread_mutex_unlock(&stru_1EEF54F18);
    v16 = *(_BYTE *)(a1 + 116);
  }
  return v16 & 1;
}

void sub_1B180AD30(CGContext *a1)
{
  size_t BitsPerComponent;

  CGBitmapContextGetWidth(a1);
  CGBitmapContextGetHeight(a1);
  if (CGBitmapContextGetData(a1))
  {
    BitsPerComponent = CGBitmapContextGetBitsPerComponent(a1);
    if (((CGBitmapContextGetBitsPerPixel(a1) / BitsPerComponent * BitsPerComponent) & 0xFFFFFFFFFFFFFFF8) == 0x20)
    {
      CGBitmapContextGetBytesPerRow(a1);
      CGBitmapContext_fixIncorrectPremultiply(a1);
    }
  }
}

CFTypeRef sub_1B180ADA4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  BOOL v18;
  CFTypeRef v19;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  pthread_mutex_lock(&stru_1EEF54F18);
  v17 = *(const void **)(a1 + 64);
  if (v17)
    v18 = 1;
  else
    v18 = a2 == 0;
  if (!v18)
  {
    sub_1B180A6D4(a1, v10, v11, v12, v13, v14, v15, v16);
    v17 = *(const void **)(a1 + 64);
  }
  if (v17)
    v19 = CFRetain(v17);
  else
    v19 = 0;
  pthread_mutex_unlock(&stru_1EEF54F18);
  return v19;
}

void sub_1B180AE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  if (*(_DWORD *)(a1 + 96))
  {
    pthread_mutex_lock(&stru_1EEF54F18);
    v9 = *(const void **)(a1 + 64);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 64) = 0;
      *(_BYTE *)(a1 + 80) |= 1u;
    }
    pthread_mutex_unlock(&stru_1EEF54F18);
    pthread_mutex_lock(&stru_1EEF54F18);
    if (*(_QWORD *)(a1 + 72))
    {
      sub_1B180AEF8(a1);
      *(_BYTE *)(a1 + 80) |= 2u;
    }
    pthread_mutex_unlock(&stru_1EEF54F18);
  }
}

void sub_1B180AEF8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    CFRelease(*(CFTypeRef *)(v1 + 32));
    free(*(void **)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
  }
}

BOOL sub_1B180AF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;

  v8 = sub_1B18097E8(a1, a2, a3, a4, a5, a6, a7, a8);
  return (unint64_t)*(float *)&v8 == 2 * (unint64_t)*((float *)&v8 + 1);
}

int32x2_t sub_1B180AF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t result;
  float v10;

  *(double *)&result = sub_1B18097E8(a1, a2, a3, a4, a5, a6, a7, a8);
  switch(*(_DWORD *)(a1 + 120))
  {
    case 2:
    case 4:
      return vdup_lane_s32(result, 1);
    case 5:
      goto LABEL_6;
    case 6:
      v10 = *(float *)&result.i32[1] / 3.0;
      goto LABEL_5;
    case 7:
      v10 = *(float *)&result.i32[1] * 0.25;
LABEL_5:
      *(float *)result.i32 = ceilf(v10);
LABEL_6:
      result = vdup_lane_s32(result, 0);
      break;
    default:
      return result;
  }
  return result;
}

