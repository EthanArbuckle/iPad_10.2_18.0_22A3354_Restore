uint64_t sub_1B2115998(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  if (a4 >> 1 != 0xFFFFFFFF || a6 >> 17 || HIDWORD(a14))
    return sub_1B1FAEA08(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  return result;
}

uint64_t sub_1B21159E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1B2228110();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

double sub_1B2115A5C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(sub_1B2228110() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1B2102004(v1 + v4, v1 + v5, *(_QWORD *)(v1 + ((v5 + 65) & 0xFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_1B2115AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B2115B28(uint64_t a1)
{
  uint64_t v2;

  sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B2115B84()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1B2115BC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF635E8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for TextureShaderAsset, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)&off_1E6396640);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF635E8);
  }
}

uint64_t sub_1B2115C30()
{
  uint64_t v0;

  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 24);
  return swift_deallocObject();
}

void sub_1B2115C5C(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void sub_1B2115C68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF635F0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for TextureShaderAsset, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E6396640);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF635F0);
  }
}

void sub_1B2115CCC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF63600)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF63600);
  }
}

uint64_t sub_1B2115D34()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B2115D58()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

id sub_1B2115D8C(void *a1)
{
  uint64_t v1;

  return sub_1B2105A04(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1B2115D9C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1B2115DD0()
{
  uint64_t *v0;

  sub_1B2105ACC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B2115DDC()
{
  return sub_1B2102A2C();
}

uint64_t sub_1B2115DE4()
{
  return sub_1B2102B80();
}

uint64_t sub_1B2115DEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B2115E10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B2115E34()
{
  uint64_t v0;

  return sub_1B2107714(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1B2115E3C()
{
  unint64_t result;

  result = qword_1EEF63618;
  if (!qword_1EEF63618)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD964, &type metadata for TextureRenderTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63618);
  }
  return result;
}

unint64_t sub_1B2115E80()
{
  unint64_t result;

  result = qword_1EEF63628;
  if (!qword_1EEF63628)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD914, &type metadata for TextureFileData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63628);
  }
  return result;
}

unint64_t sub_1B2115EC4()
{
  unint64_t result;

  result = qword_1EEF63630;
  if (!qword_1EEF63630)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EEF63630);
  }
  return result;
}

unint64_t sub_1B2115F08()
{
  unint64_t result;

  result = qword_1EEF63640;
  if (!qword_1EEF63640)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1EEF63640);
  }
  return result;
}

unint64_t sub_1B2115F4C()
{
  unint64_t result;

  result = qword_1EEF63650;
  if (!qword_1EEF63650)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD8C4, &type metadata for TextureArrayFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63650);
  }
  return result;
}

uint64_t sub_1B2115F90(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = *a1;
  if (!result)
  {
    v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
    sub_1B1791524(255, &qword_1EEF596A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v11 = v10;
    v12 = sub_1B19E52CC(a2, v9, a3);
    result = MEMORY[0x1B5E23E74](a4, v11, &v12);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B2116028()
{
  unint64_t result;

  result = qword_1EEF63680;
  if (!qword_1EEF63680)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD874, &type metadata for TextureLoadingOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63680);
  }
  return result;
}

unint64_t sub_1B211606C()
{
  unint64_t result;

  result = qword_1EEF63688;
  if (!qword_1EEF63688)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD84C, &type metadata for TextureOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF63688);
  }
  return result;
}

unint64_t sub_1B21160B0()
{
  unint64_t result;

  result = qword_1EEF63698;
  if (!qword_1EEF63698)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD824, &type metadata for TextureOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF63698);
  }
  return result;
}

unint64_t sub_1B21160F4()
{
  unint64_t result;

  result = qword_1ED4B9D38;
  if (!qword_1ED4B9D38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD774, &type metadata for TextureRequireAnimationRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D38);
  }
  return result;
}

unint64_t sub_1B2116138()
{
  unint64_t result;

  result = qword_1ED4B9D60;
  if (!qword_1ED4B9D60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD74C, &type metadata for TextureRequireAnimationRepresentation.Kind);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D60);
  }
  return result;
}

unint64_t sub_1B211617C()
{
  unint64_t result;

  result = qword_1EEF636B8;
  if (!qword_1EEF636B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD724, &type metadata for TextureRequireAnimationRepresentation.Kind);
    atomic_store(result, (unint64_t *)&qword_1EEF636B8);
  }
  return result;
}

unint64_t sub_1B21161C0()
{
  unint64_t result;

  result = qword_1EEF636D0;
  if (!qword_1EEF636D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD6D4, &type metadata for TextureShaderAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF636D0);
  }
  return result;
}

unint64_t sub_1B2116204()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEF636E0;
  if (!qword_1EEF636E0)
  {
    sub_1B21162C0(255, &qword_1EEF636D8);
    v2 = v1;
    v3 = sub_1B211627C();
    v4[0] = MEMORY[0x1E0DEB448];
    v4[1] = v3;
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0D8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEF636E0);
  }
  return result;
}

unint64_t sub_1B211627C()
{
  unint64_t result;

  result = qword_1EEF636E8;
  if (!qword_1EEF636E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD6AC, &type metadata for TextureShaderAsset.Parameter);
    atomic_store(result, (unint64_t *)&qword_1EEF636E8);
  }
  return result;
}

void sub_1B21162C0(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1B22285A8();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t sub_1B2116310()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEF636F8;
  if (!qword_1EEF636F8)
  {
    sub_1B21162C0(255, &qword_1EEF636F0);
    v2 = v1;
    v3 = sub_1B1A08878();
    v4[0] = MEMORY[0x1E0DEB448];
    v4[1] = v3;
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0D8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEF636F8);
  }
  return result;
}

unint64_t sub_1B2116388()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEF63708;
  if (!qword_1EEF63708)
  {
    sub_1B21162C0(255, (unint64_t *)&qword_1EEF63550);
    v2 = v1;
    v3 = sub_1B1F84A3C();
    v4[0] = MEMORY[0x1E0DEB448];
    v4[1] = v3;
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0D8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEF63708);
  }
  return result;
}

unint64_t sub_1B2116400()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEF63720;
  if (!qword_1EEF63720)
  {
    sub_1B21162C0(255, (unint64_t *)&qword_1EEF63550);
    v2 = v1;
    v3 = sub_1B1F84C70();
    v4[0] = MEMORY[0x1E0DEB420];
    v4[1] = v3;
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0B8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEF63720);
  }
  return result;
}

unint64_t sub_1B2116478()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  result = qword_1EEF63738;
  if (!qword_1EEF63738)
  {
    sub_1B21162C0(255, &qword_1EEF636F0);
    v2 = v1;
    v3 = sub_1B1A0895C();
    v4[0] = MEMORY[0x1E0DEB420];
    v4[1] = v3;
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEA0B8], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EEF63738);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnmanagedFileAsset()
{
  return &type metadata for UnmanagedFileAsset;
}

ValueMetadata *type metadata accessor for TextureSource()
{
  return &type metadata for TextureSource;
}

ValueMetadata *type metadata accessor for TextureDescriptorCoder()
{
  return &type metadata for TextureDescriptorCoder;
}

uint64_t getEnumTagSinglePayload for TextureShaderAsset.Parameter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureShaderAsset.Parameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureShaderAsset.Parameter()
{
  return &type metadata for TextureShaderAsset.Parameter;
}

ValueMetadata *type metadata accessor for TextureShaderAsset.CodingKeys()
{
  return &type metadata for TextureShaderAsset.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureRequireAnimationRepresentation.CodingKeys()
{
  return &type metadata for TextureRequireAnimationRepresentation.CodingKeys;
}

ValueMetadata *type metadata accessor for VirtualFileAsset()
{
  return &type metadata for VirtualFileAsset;
}

ValueMetadata *type metadata accessor for TextureLoadingOptions.CodingKeys()
{
  return &type metadata for TextureLoadingOptions.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureArrayFileAsset.CodingKeys()
{
  return &type metadata for TextureArrayFileAsset.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureFileData.CodingKeys()
{
  return &type metadata for TextureFileData.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureRenderTarget.CodingKeys()
{
  return &type metadata for TextureRenderTarget.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureError()
{
  return &type metadata for TextureError;
}

ValueMetadata *type metadata accessor for FileWatcher()
{
  return &type metadata for FileWatcher;
}

ValueMetadata *type metadata accessor for TextureGPURepresentationDoNotUpload()
{
  return &type metadata for TextureGPURepresentationDoNotUpload;
}

ValueMetadata *_s19PostTypeCodingErrorOMa()
{
  return &_s19PostTypeCodingErrorON;
}

ValueMetadata *_s10CodingKeysOMa_0()
{
  return &_s10CodingKeysON_0;
}

ValueMetadata *type metadata accessor for LoadPolicyMode()
{
  return &type metadata for LoadPolicyMode;
}

uint64_t _s3VFX18TextureShaderAssetV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B21166E8 + 4 * byte_1B22BB848[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B211671C + 4 * byte_1B22BB843[v4]))();
}

uint64_t sub_1B211671C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2116724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B211672CLL);
  return result;
}

uint64_t sub_1B2116738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2116740);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B2116744(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211674C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureLoadPolicy.CodingKeys()
{
  return &type metadata for TextureLoadPolicy.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureRequireNonSRGB()
{
  return &type metadata for TextureRequireNonSRGB;
}

ValueMetadata *type metadata accessor for TextureRequireCubemap()
{
  return &type metadata for TextureRequireCubemap;
}

ValueMetadata *type metadata accessor for TextureRequireMipmapGeneration()
{
  return &type metadata for TextureRequireMipmapGeneration;
}

ValueMetadata *type metadata accessor for TextureRequirePremultiplyWithLinearAlpha()
{
  return &type metadata for TextureRequirePremultiplyWithLinearAlpha;
}

uint64_t getEnumTagSinglePayload for TextureOptions.SizeModification(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 127);
  v3 = (*(_BYTE *)(a1 + 16) & 0x7E | (*(unsigned __int8 *)(a1 + 16) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TextureOptions.SizeModification(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 127;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t sub_1B211684C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 7;
}

uint64_t sub_1B2116858(uint64_t result)
{
  *(_BYTE *)(result + 16) &= ~0x80u;
  return result;
}

uint64_t sub_1B2116868(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for TextureOptions.SizeModification()
{
  return &type metadata for TextureOptions.SizeModification;
}

ValueMetadata *type metadata accessor for TextureRequireUnpremultiply()
{
  return &type metadata for TextureRequireUnpremultiply;
}

ValueMetadata *type metadata accessor for TextureLoadRequestGPU()
{
  return &type metadata for TextureLoadRequestGPU;
}

ValueMetadata *type metadata accessor for TextureFallback()
{
  return &type metadata for TextureFallback;
}

ValueMetadata *type metadata accessor for TextureLoadRequestCPU()
{
  return &type metadata for TextureLoadRequestCPU;
}

ValueMetadata *type metadata accessor for TextureRequireSizeLimit()
{
  return &type metadata for TextureRequireSizeLimit;
}

uint64_t getEnumTagSinglePayload for MipmapGeneration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TextureRequireMipmap(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for TextureRequireMipmap()
{
  return &type metadata for TextureRequireMipmap;
}

uint64_t _s3VFX15TextureFallbackOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B2116988 + 4 * byte_1B22BB852[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B21169BC + 4 * byte_1B22BB84D[v4]))();
}

uint64_t sub_1B21169BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21169C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B21169CCLL);
  return result;
}

uint64_t sub_1B21169D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B21169E0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B21169E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21169EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RenderGraphTextureTarget()
{
  return &type metadata for RenderGraphTextureTarget;
}

uint64_t getEnumTagSinglePayload for TextureRequireMask(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && a1[8])
    return (*(_DWORD *)a1 + 252);
  v3 = *a1;
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureRequireMask(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureRequireMask()
{
  return &type metadata for TextureRequireMask;
}

ValueMetadata *type metadata accessor for TextureRequireIOSurface()
{
  return &type metadata for TextureRequireIOSurface;
}

uint64_t getEnumTagSinglePayload for TextureLoadPolicy(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 3);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureLoadPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)(result + 3) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureLoadPolicy()
{
  return &type metadata for TextureLoadPolicy;
}

ValueMetadata *type metadata accessor for TextureCPURuntime.Slice()
{
  return &type metadata for TextureCPURuntime.Slice;
}

uint64_t storeEnumTagSinglePayload for MipmapGeneration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1B2116B90(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B2116BAC(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MipmapGeneration()
{
  return &type metadata for MipmapGeneration;
}

uint64_t _s3VFX14TextureOptionsVwet_0(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 58))
    return (*(_DWORD *)a1 + 253);
  if (*(unsigned __int8 *)(a1 + 57) <= 3u)
    v3 = 3;
  else
    v3 = *(unsigned __int8 *)(a1 + 57);
  v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 57) < 3u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t _s3VFX14TextureOptionsVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_BYTE *)(result + 57) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureOptions()
{
  return &type metadata for TextureOptions;
}

ValueMetadata *type metadata accessor for TextureRequireAnimationRepresentation.Kind()
{
  return &type metadata for TextureRequireAnimationRepresentation.Kind;
}

ValueMetadata *type metadata accessor for Asset()
{
  return &type metadata for Asset;
}

unint64_t sub_1B2116CB8()
{
  unint64_t result;

  result = qword_1EEF63748;
  if (!qword_1EEF63748)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BC7CC, &type metadata for TextureRequireAnimationRepresentation.Kind);
    atomic_store(result, (unint64_t *)&qword_1EEF63748);
  }
  return result;
}

unint64_t sub_1B2116D00()
{
  unint64_t result;

  result = qword_1EEF63750;
  if (!qword_1EEF63750)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BC7F4, &type metadata for TextureOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF63750);
  }
  return result;
}

uint64_t sub_1B2116D44()
{
  return sub_1B1B4DEE4(&qword_1EEF63758, &qword_1EEF63760, (uint64_t)&type metadata for TextureFallback);
}

unint64_t sub_1B2116D74()
{
  unint64_t result;

  result = qword_1EEF63768;
  if (!qword_1EEF63768)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCA9C, &type metadata for TextureFallback);
    atomic_store(result, (unint64_t *)&qword_1EEF63768);
  }
  return result;
}

unint64_t sub_1B2116DBC()
{
  unint64_t result;

  result = qword_1EEF63770;
  if (!qword_1EEF63770)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCB3C, &type metadata for TextureOptions.SizeModification);
    atomic_store(result, (unint64_t *)&qword_1EEF63770);
  }
  return result;
}

unint64_t sub_1B2116E04()
{
  unint64_t result;

  result = qword_1EEF63778;
  if (!qword_1EEF63778)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCD8C, &type metadata for TextureLoadPolicy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63778);
  }
  return result;
}

uint64_t sub_1B2116E48()
{
  return sub_1B1B4DEE4(&qword_1EEF63780, &qword_1EEF63788, (uint64_t)&type metadata for LoadPolicyMode);
}

unint64_t sub_1B2116E78()
{
  unint64_t result;

  result = qword_1EEF63790;
  if (!qword_1EEF63790)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCE64, &type metadata for LoadPolicyMode);
    atomic_store(result, (unint64_t *)&qword_1EEF63790);
  }
  return result;
}

unint64_t sub_1B2116EC0()
{
  unint64_t result;

  result = qword_1EEF63798;
  if (!qword_1EEF63798)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCF54, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1EEF63798);
  }
  return result;
}

unint64_t sub_1B2116F0C()
{
  unint64_t result;

  result = qword_1EEF637A0;
  if (!qword_1EEF637A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD124, &type metadata for TextureFileData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637A0);
  }
  return result;
}

unint64_t sub_1B2116F54()
{
  unint64_t result;

  result = qword_1EEF637A8;
  if (!qword_1EEF637A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD214, &type metadata for TextureArrayFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637A8);
  }
  return result;
}

unint64_t sub_1B2116F9C()
{
  unint64_t result;

  result = qword_1EEF637B0;
  if (!qword_1EEF637B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD2CC, &type metadata for TextureLoadingOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637B0);
  }
  return result;
}

unint64_t sub_1B2116FE4()
{
  unint64_t result;

  result = qword_1EEF637B8;
  if (!qword_1EEF637B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD3CC, &type metadata for TextureRequireAnimationRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637B8);
  }
  return result;
}

unint64_t sub_1B211702C()
{
  unint64_t result;

  result = qword_1EEF637C0;
  if (!qword_1EEF637C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD4BC, &type metadata for TextureShaderAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637C0);
  }
  return result;
}

unint64_t sub_1B2117074()
{
  unint64_t result;

  result = qword_1EEF637C8;
  if (!qword_1EEF637C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD3F4, &type metadata for TextureShaderAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637C8);
  }
  return result;
}

unint64_t sub_1B21170BC()
{
  unint64_t result;

  result = qword_1EEF637D0;
  if (!qword_1EEF637D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD41C, &type metadata for TextureShaderAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637D0);
  }
  return result;
}

unint64_t sub_1B2117104()
{
  unint64_t result;

  result = qword_1ED4B9D48;
  if (!qword_1ED4B9D48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD304, &type metadata for TextureRequireAnimationRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D48);
  }
  return result;
}

unint64_t sub_1B211714C()
{
  unint64_t result;

  result = qword_1ED4B9D40;
  if (!qword_1ED4B9D40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD32C, &type metadata for TextureRequireAnimationRepresentation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D40);
  }
  return result;
}

unint64_t sub_1B2117194()
{
  unint64_t result;

  result = qword_1EEF637D8;
  if (!qword_1EEF637D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD23C, &type metadata for TextureLoadingOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637D8);
  }
  return result;
}

unint64_t sub_1B21171DC()
{
  unint64_t result;

  result = qword_1EEF637E0;
  if (!qword_1EEF637E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD264, &type metadata for TextureLoadingOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637E0);
  }
  return result;
}

unint64_t sub_1B2117224()
{
  unint64_t result;

  result = qword_1EEF637E8;
  if (!qword_1EEF637E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD14C, &type metadata for TextureArrayFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637E8);
  }
  return result;
}

unint64_t sub_1B211726C()
{
  unint64_t result;

  result = qword_1EEF637F0;
  if (!qword_1EEF637F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD174, &type metadata for TextureArrayFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637F0);
  }
  return result;
}

unint64_t sub_1B21172B4()
{
  unint64_t result;

  result = qword_1EEF637F8;
  if (!qword_1EEF637F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD094, &type metadata for TextureFileData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF637F8);
  }
  return result;
}

unint64_t sub_1B21172FC()
{
  unint64_t result;

  result = qword_1EEF63800;
  if (!qword_1EEF63800)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD0BC, &type metadata for TextureFileData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63800);
  }
  return result;
}

unint64_t sub_1B2117344()
{
  unint64_t result;

  result = qword_1EEF63808;
  if (!qword_1EEF63808)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD044, &type metadata for TextureRenderTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63808);
  }
  return result;
}

unint64_t sub_1B211738C()
{
  unint64_t result;

  result = qword_1EEF63810;
  if (!qword_1EEF63810)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD06C, &type metadata for TextureRenderTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63810);
  }
  return result;
}

unint64_t sub_1B21173D4()
{
  unint64_t result;

  result = qword_1ED4B8D28;
  if (!qword_1ED4B8D28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCE8C, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D28);
  }
  return result;
}

unint64_t sub_1B211741C()
{
  unint64_t result;

  result = qword_1ED4B8D20;
  if (!qword_1ED4B8D20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCEB4, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D20);
  }
  return result;
}

unint64_t sub_1B2117464()
{
  unint64_t result;

  result = qword_1ED4B9188;
  if (!qword_1ED4B9188)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCCC4, &type metadata for TextureLoadPolicy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9188);
  }
  return result;
}

unint64_t sub_1B21174AC()
{
  unint64_t result;

  result = qword_1ED4B9180;
  if (!qword_1ED4B9180)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCCEC, &type metadata for TextureLoadPolicy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9180);
  }
  return result;
}

unint64_t sub_1B21174F0()
{
  unint64_t result;

  result = qword_1ED4B8A88;
  if (!qword_1ED4B8A88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCDEC, &type metadata for LoadPolicyMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B8A88);
  }
  return result;
}

unint64_t sub_1B2117534()
{
  unint64_t result;

  result = qword_1ED4B8D40;
  if (!qword_1ED4B8D40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BCA24, &type metadata for TextureFallback);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D40);
  }
  return result;
}

unint64_t sub_1B2117578()
{
  unint64_t result;

  result = qword_1EEF63820;
  if (!qword_1EEF63820)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE884, &type metadata for TextureOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63820);
  }
  return result;
}

unint64_t sub_1B21175BC()
{
  unint64_t result;

  result = qword_1EEF63828;
  if (!qword_1EEF63828)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE85C, &type metadata for TextureOptions.StorageOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF63828);
  }
  return result;
}

unint64_t sub_1B2117600()
{
  unint64_t result;

  result = qword_1EEF63838;
  if (!qword_1EEF63838)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE834, &type metadata for TextureOptions.StorageOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF63838);
  }
  return result;
}

unint64_t sub_1B2117644()
{
  unint64_t result;

  result = qword_1ED4B9D50;
  if (!qword_1ED4B9D50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BC754, &type metadata for TextureRequireAnimationRepresentation.Kind);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D50);
  }
  return result;
}

unint64_t sub_1B2117688()
{
  unint64_t result;

  result = qword_1EEF63850;
  if (!qword_1EEF63850)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE7E4, &type metadata for TextureDescriptorCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63850);
  }
  return result;
}

unint64_t sub_1B21176CC()
{
  unint64_t result;

  result = qword_1EEF63860;
  if (!qword_1EEF63860)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE794, &type metadata for TextureDescriptorCoder.CodingKeys_pre2019);
    atomic_store(result, (unint64_t *)&qword_1EEF63860);
  }
  return result;
}

unint64_t sub_1B2117710()
{
  unint64_t result;

  result = qword_1EEF638C0;
  if (!qword_1EEF638C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE744, &type metadata for TextureSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF638C0);
  }
  return result;
}

unint64_t sub_1B2117754()
{
  unint64_t result;

  result = qword_1EEF638D0;
  if (!qword_1EEF638D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE6F4, &type metadata for TextureGPURepresentationDoNotUpload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF638D0);
  }
  return result;
}

unint64_t sub_1B2117798()
{
  unint64_t result;

  result = qword_1EEF638E0;
  if (!qword_1EEF638E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE6A4, &type metadata for TextureRequireSizeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF638E0);
  }
  return result;
}

unint64_t sub_1B21177DC()
{
  unint64_t result;

  result = qword_1EEF638F8;
  if (!qword_1EEF638F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE654, &type metadata for TextureRequireMipmap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF638F8);
  }
  return result;
}

unint64_t sub_1B2117820()
{
  unint64_t result;

  result = qword_1EEF63908;
  if (!qword_1EEF63908)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE604, &type metadata for RenderGraphTextureTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63908);
  }
  return result;
}

unint64_t sub_1B2117864()
{
  unint64_t result;

  result = qword_1EEF63920;
  if (!qword_1EEF63920)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE5B4, &type metadata for TextureRequireMask.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63920);
  }
  return result;
}

uint64_t _s10CodingKeysOwst_3(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B21178F4 + 4 * byte_1B22BB85C[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B2117928 + 4 * byte_1B22BB857[v4]))();
}

uint64_t sub_1B2117928(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2117930(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2117938);
  return result;
}

uint64_t sub_1B2117944(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B211794CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B2117950(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2117958(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureRequireMask.CodingKeys()
{
  return &type metadata for TextureRequireMask.CodingKeys;
}

ValueMetadata *type metadata accessor for RenderGraphTextureTarget.CodingKeys()
{
  return &type metadata for RenderGraphTextureTarget.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureRequireMipmap.CodingKeys()
{
  return &type metadata for TextureRequireMipmap.CodingKeys;
}

uint64_t _s3VFX37TextureRequireAnimationRepresentationV4KindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B21179E0 + 4 * byte_1B22BB866[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B2117A14 + 4 * byte_1B22BB861[v4]))();
}

uint64_t sub_1B2117A14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2117A1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2117A24);
  return result;
}

uint64_t sub_1B2117A30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2117A38);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B2117A3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2117A44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureRequireSizeLimit.CodingKeys()
{
  return &type metadata for TextureRequireSizeLimit.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureGPURepresentationDoNotUpload.CodingKeys()
{
  return &type metadata for TextureGPURepresentationDoNotUpload.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureSource.CodingKeys()
{
  return &type metadata for TextureSource.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for TextureDescriptorCoder.CodingKeys_pre2019(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1B2117ACC + 4 * byte_1B22BB870[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1B2117B00 + 4 * byte_1B22BB86B[v4]))();
}

uint64_t sub_1B2117B00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2117B08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2117B10);
  return result;
}

uint64_t sub_1B2117B1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2117B24);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1B2117B28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2117B30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureDescriptorCoder.CodingKeys_pre2019()
{
  return &type metadata for TextureDescriptorCoder.CodingKeys_pre2019;
}

uint64_t storeEnumTagSinglePayload for TextureDescriptorCoder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1B2117B98 + 4 * byte_1B22BB87A[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1B2117BCC + 4 * byte_1B22BB875[v4]))();
}

uint64_t sub_1B2117BCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2117BD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2117BDCLL);
  return result;
}

uint64_t sub_1B2117BE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2117BF0);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1B2117BF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2117BFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureDescriptorCoder.CodingKeys()
{
  return &type metadata for TextureDescriptorCoder.CodingKeys;
}

uint64_t _s3VFX21TextureLoadingOptionsV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B2117C58 + 4 * byte_1B22BB87F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B2117C78 + 4 * byte_1B22BB884[v4]))();
}

_BYTE *sub_1B2117C58(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B2117C78(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2117C80(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2117C88(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2117C90(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2117C98(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TextureOptions.CodingKeys()
{
  return &type metadata for TextureOptions.CodingKeys;
}

ValueMetadata *type metadata accessor for TextureOptions.StorageOptions()
{
  return &type metadata for TextureOptions.StorageOptions;
}

unint64_t sub_1B2117CC8()
{
  unint64_t result;

  result = qword_1EEF63940;
  if (!qword_1EEF63940)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDD64, &type metadata for TextureOptions.StorageOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF63940);
  }
  return result;
}

unint64_t sub_1B2117D10()
{
  unint64_t result;

  result = qword_1EEF63948;
  if (!qword_1EEF63948)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDD34, &type metadata for TextureOptions.StorageOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF63948);
  }
  return result;
}

unint64_t sub_1B2117D58()
{
  unint64_t result;

  result = qword_1EEF63950;
  if (!qword_1EEF63950)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDD8C, &type metadata for TextureOptions.StorageOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF63950);
  }
  return result;
}

unint64_t sub_1B2117DA0()
{
  unint64_t result;

  result = qword_1EEF63958;
  if (!qword_1EEF63958)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDDC4, &type metadata for TextureOptions.StorageOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF63958);
  }
  return result;
}

unint64_t sub_1B2117DE8()
{
  unint64_t result;

  result = qword_1EEF63960;
  if (!qword_1EEF63960)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDFF4, &type metadata for TextureOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63960);
  }
  return result;
}

unint64_t sub_1B2117E30()
{
  unint64_t result;

  result = qword_1EEF63968;
  if (!qword_1EEF63968)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE0E4, &type metadata for TextureDescriptorCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63968);
  }
  return result;
}

unint64_t sub_1B2117E78()
{
  unint64_t result;

  result = qword_1EEF63970;
  if (!qword_1EEF63970)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE1D4, &type metadata for TextureDescriptorCoder.CodingKeys_pre2019);
    atomic_store(result, (unint64_t *)&qword_1EEF63970);
  }
  return result;
}

unint64_t sub_1B2117EC0()
{
  unint64_t result;

  result = qword_1EEF63978;
  if (!qword_1EEF63978)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE32C, &type metadata for TextureRequireSizeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63978);
  }
  return result;
}

unint64_t sub_1B2117F08()
{
  unint64_t result;

  result = qword_1EEF63980;
  if (!qword_1EEF63980)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE41C, &type metadata for TextureRequireMipmap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63980);
  }
  return result;
}

unint64_t sub_1B2117F50()
{
  unint64_t result;

  result = qword_1EEF63988;
  if (!qword_1EEF63988)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE4D4, &type metadata for RenderGraphTextureTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63988);
  }
  return result;
}

unint64_t sub_1B2117F98()
{
  unint64_t result;

  result = qword_1EEF63990;
  if (!qword_1EEF63990)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE58C, &type metadata for TextureRequireMask.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63990);
  }
  return result;
}

unint64_t sub_1B2117FE0()
{
  unint64_t result;

  result = qword_1EEF63998;
  if (!qword_1EEF63998)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE4FC, &type metadata for TextureRequireMask.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63998);
  }
  return result;
}

unint64_t sub_1B2118028()
{
  unint64_t result;

  result = qword_1EEF639A0;
  if (!qword_1EEF639A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE524, &type metadata for TextureRequireMask.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639A0);
  }
  return result;
}

unint64_t sub_1B2118070()
{
  unint64_t result;

  result = qword_1EEF639A8;
  if (!qword_1EEF639A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE444, &type metadata for RenderGraphTextureTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639A8);
  }
  return result;
}

unint64_t sub_1B21180B8()
{
  unint64_t result;

  result = qword_1EEF639B0;
  if (!qword_1EEF639B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE46C, &type metadata for RenderGraphTextureTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639B0);
  }
  return result;
}

unint64_t sub_1B2118100()
{
  unint64_t result;

  result = qword_1EEF639B8;
  if (!qword_1EEF639B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE354, &type metadata for TextureRequireMipmap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639B8);
  }
  return result;
}

unint64_t sub_1B2118148()
{
  unint64_t result;

  result = qword_1EEF639C0;
  if (!qword_1EEF639C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE37C, &type metadata for TextureRequireMipmap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639C0);
  }
  return result;
}

unint64_t sub_1B2118190()
{
  unint64_t result;

  result = qword_1EEF639C8;
  if (!qword_1EEF639C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE29C, &type metadata for TextureRequireSizeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639C8);
  }
  return result;
}

unint64_t sub_1B21181D8()
{
  unint64_t result;

  result = qword_1EEF639D0;
  if (!qword_1EEF639D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE2C4, &type metadata for TextureRequireSizeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639D0);
  }
  return result;
}

unint64_t sub_1B2118220()
{
  unint64_t result;

  result = qword_1EEF639D8;
  if (!qword_1EEF639D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE24C, &type metadata for TextureGPURepresentationDoNotUpload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639D8);
  }
  return result;
}

unint64_t sub_1B2118268()
{
  unint64_t result;

  result = qword_1EEF639E0;
  if (!qword_1EEF639E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE274, &type metadata for TextureGPURepresentationDoNotUpload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639E0);
  }
  return result;
}

unint64_t sub_1B21182B0()
{
  unint64_t result;

  result = qword_1EEF639E8;
  if (!qword_1EEF639E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE1FC, &type metadata for TextureSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639E8);
  }
  return result;
}

unint64_t sub_1B21182F8()
{
  unint64_t result;

  result = qword_1EEF639F0;
  if (!qword_1EEF639F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE224, &type metadata for TextureSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF639F0);
  }
  return result;
}

unint64_t sub_1B2118340()
{
  unint64_t result;

  result = qword_1EEF639F8;
  if (!qword_1EEF639F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE10C, &type metadata for TextureDescriptorCoder.CodingKeys_pre2019);
    atomic_store(result, (unint64_t *)&qword_1EEF639F8);
  }
  return result;
}

unint64_t sub_1B2118388()
{
  unint64_t result;

  result = qword_1EEF63A00;
  if (!qword_1EEF63A00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE134, &type metadata for TextureDescriptorCoder.CodingKeys_pre2019);
    atomic_store(result, (unint64_t *)&qword_1EEF63A00);
  }
  return result;
}

unint64_t sub_1B21183D0()
{
  unint64_t result;

  result = qword_1EEF63A08;
  if (!qword_1EEF63A08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE01C, &type metadata for TextureDescriptorCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63A08);
  }
  return result;
}

unint64_t sub_1B2118418()
{
  unint64_t result;

  result = qword_1EEF63A10;
  if (!qword_1EEF63A10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BE044, &type metadata for TextureDescriptorCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63A10);
  }
  return result;
}

unint64_t sub_1B2118460()
{
  unint64_t result;

  result = qword_1EEF63A18;
  if (!qword_1EEF63A18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDF2C, &type metadata for TextureOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63A18);
  }
  return result;
}

unint64_t sub_1B21184A8()
{
  unint64_t result;

  result = qword_1EEF63A20;
  if (!qword_1EEF63A20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDF54, &type metadata for TextureOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63A20);
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentPropertyRewriter()
{
  return &type metadata for ComponentPropertyRewriter;
}

id sub_1B2118500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B2118614(a1, a2, a3, a4, a5, a6, (SEL *)&selRef_setVertexBuffer_offset_atIndex_);
}

id sub_1B211850C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B2118614(a1, a2, a3, a4, a5, a6, (SEL *)&selRef_setBuffer_offset_atIndex_);
}

id sub_1B2118518(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  void *v6;
  id v11;

  v11 = result;
  if ((a6 & 1) != 0)
  {
    result = objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, result, a4 + a2, a5);
    if ((a6 & 8) == 0)
    {
LABEL_3:
      if ((a6 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a6 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = objc_msgSend(v6, sel_setObjectBuffer_offset_atIndex_, v11, a4 + a2, a5);
  if ((a6 & 0x10) == 0)
  {
LABEL_4:
    if ((a6 & 2) == 0)
      return result;
    return objc_msgSend(v6, sel_setFragmentBuffer_offset_atIndex_, v11, a4 + a2, a5);
  }
LABEL_8:
  result = objc_msgSend(v6, sel_setMeshBuffer_offset_atIndex_, v11, a4 + a2, a5);
  if ((a6 & 2) != 0)
    return objc_msgSend(v6, sel_setFragmentBuffer_offset_atIndex_, v11, a4 + a2, a5);
  return result;
}

id sub_1B21185F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B2118614(a1, a2, a3, a4, a5, a6, (SEL *)&selRef_setFragmentBuffer_offset_atIndex_);
}

id sub_1B21185FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B2118614(a1, a2, a3, a4, a5, a6, (SEL *)&selRef_setObjectBuffer_offset_atIndex_);
}

id sub_1B2118608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B2118614(a1, a2, a3, a4, a5, a6, (SEL *)&selRef_setMeshBuffer_offset_atIndex_);
}

id sub_1B2118614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  void *v7;

  return objc_msgSend(v7, *a7, a1, a4 + a2);
}

id sub_1B2118628(uint64_t a1, uint64_t a2)
{
  void *v2;

  return objc_msgSend(v2, sel_setFragmentTexture_atIndex_, a1, a2);
}

ValueMetadata *type metadata accessor for PointOfView()
{
  return &type metadata for PointOfView;
}

__n128 initializeBufferWithCopyOfBuffer for OrthographicCamera(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for OrthographicCamera(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OrthographicCamera(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrthographicCamera()
{
  return &type metadata for OrthographicCamera;
}

ValueMetadata *type metadata accessor for PerspectiveCamera()
{
  return &type metadata for PerspectiveCamera;
}

ValueMetadata *type metadata accessor for ProjectionMatrix()
{
  return &type metadata for ProjectionMatrix;
}

float sub_1B211871C()
{
  uint64_t v0;

  return *(float *)(v0 + 12) / *(float *)(v0 + 16);
}

uint64_t sub_1B2118728()
{
  sub_1B211CA40();
  return sub_1B222A1D4();
}

uint64_t sub_1B2118750()
{
  sub_1B211CA40();
  return sub_1B222A1E0();
}

uint64_t sub_1B2118778(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF63A48, (uint64_t (*)(void))sub_1B211CA40, (uint64_t)&type metadata for PointOfView.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211CA40();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B2118854@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = sub_1B1E88B24(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v7;
    a2[3] = v8;
  }
  return result;
}

uint64_t sub_1B2118880(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B21188BC + 4 * byte_1B22BECA0[a1]))(0x6E654C6C61636F66, 0xEB00000000687467);
}

uint64_t sub_1B21188BC()
{
  return 0x7369447375636F66;
}

uint64_t sub_1B21188E0()
{
  return 0x6953726F736E6573;
}

uint64_t sub_1B21188FC()
{
  return 0x706F745366;
}

uint64_t sub_1B2118910()
{
  return 0x657275736F707865;
}

uint64_t sub_1B2118928()
{
  return 0x65676E61527ALL;
}

uint64_t sub_1B211893C()
{
  return 0x5A65737265766572;
}

unint64_t sub_1B2118954()
{
  return 0xD000000000000013;
}

uint64_t sub_1B2118970()
{
  return 0x7366664F6D6C6966;
}

uint64_t sub_1B2118990(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B21189CC + 4 * byte_1B22BECA9[a1]))(0x6E654C6C61636F66, 0xEB00000000687467);
}

uint64_t sub_1B21189CC()
{
  return 0x7369447375636F66;
}

uint64_t sub_1B21189F0()
{
  return 0x6953726F736E6573;
}

uint64_t sub_1B2118A0C()
{
  return 0x706F745366;
}

uint64_t sub_1B2118A20()
{
  return 0x657275736F707865;
}

uint64_t sub_1B2118A38()
{
  return 0x65676E61527ALL;
}

uint64_t sub_1B2118A4C()
{
  return 0x5A65737265766572;
}

unint64_t sub_1B2118A64()
{
  return 0xD000000000000013;
}

uint64_t sub_1B2118A80()
{
  return 0x7366664F6D6C6966;
}

double sub_1B2118AA0@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 95168079.9;
  *(_OWORD *)a1 = xmmword_1B22BEC70;
  *(_OWORD *)(a1 + 16) = xmmword_1B22BEC80;
  *(_WORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_1B2118AC4(char *a1)
{
  sub_1B1F92CA4(*a1);
}

uint64_t sub_1B2118AD0()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1DB4450((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

void sub_1B2118B14(uint64_t a1)
{
  char *v1;

  sub_1B1DB4450(a1, *v1);
}

uint64_t sub_1B2118B1C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1DB4450((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

uint64_t sub_1B2118B5C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B211AE3C();
  *a1 = result;
  return result;
}

uint64_t sub_1B2118B88@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B2118880(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B2118BB0()
{
  unsigned __int8 *v0;

  return sub_1B2118990(*v0);
}

uint64_t sub_1B2118BB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B211AE3C();
  *a1 = result;
  return result;
}

uint64_t sub_1B2118BDC()
{
  sub_1B211C9FC();
  return sub_1B222A1D4();
}

uint64_t sub_1B2118C04()
{
  sub_1B211C9FC();
  return sub_1B222A1E0();
}

uint64_t sub_1B2118C2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  char v14;
  uint64_t v15;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF63A40, (uint64_t (*)(void))sub_1B211C9FC, (uint64_t)&type metadata for PerspectiveCamera.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211C9FC();
  sub_1B222A180();
  LOBYTE(v15) = 0;
  sub_1B2229934();
  if (!v2)
  {
    LOBYTE(v15) = 1;
    sub_1B2229934();
    LOBYTE(v15) = 2;
    sub_1B2229934();
    LOBYTE(v15) = 3;
    sub_1B2229934();
    LOBYTE(v15) = 4;
    sub_1B2229934();
    v15 = *(_QWORD *)(v3 + 24);
    v14 = 5;
    sub_1B1B4D924();
    sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
    LOBYTE(v15) = 6;
    sub_1B222991C();
    LOBYTE(v15) = *(_BYTE *)(v3 + 33);
    v14 = 7;
    sub_1B1A70D98();
    sub_1B2229958();
    v15 = *(_QWORD *)(v3 + 40);
    v14 = 8;
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v11, MEMORY[0x1E0DEDD30]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B2118F28@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1B211BE18(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B2118F68(_QWORD *a1)
{
  return sub_1B2118C2C(a1);
}

uint64_t sub_1B2118F7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF63A68, (uint64_t (*)(void))sub_1B211CA84, (uint64_t)&type metadata for OrthographicCamera.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211CA84();
  sub_1B222A180();
  v17 = 0;
  sub_1B2229934();
  if (!v2)
  {
    v16 = *(_BYTE *)(v3 + 4);
    v15 = 1;
    sub_1B1A70D98();
    sub_1B2229958();
    v12[1] = *(_QWORD *)(v3 + 8);
    v14 = 2;
    sub_1B1B4D924();
    sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
    v13 = 3;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B2119150(char *a1)
{
  sub_1B1F93914(*a1);
}

uint64_t sub_1B211915C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2119188 + 4 * byte_1B22BECB2[*v0]))(0x656C616373, 0xE500000000000000);
}

unint64_t sub_1B2119188()
{
  return 0xD000000000000013;
}

uint64_t sub_1B21191A4()
{
  return 0x65676E61527ALL;
}

uint64_t sub_1B21191B8()
{
  return 0x5A65737265766572;
}

uint64_t sub_1B21191D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B211B43C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B21191F4()
{
  sub_1B211CA84();
  return sub_1B222A1D4();
}

uint64_t sub_1B211921C()
{
  sub_1B211CA84();
  return sub_1B222A1E0();
}

double sub_1B2119244@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  char v6;

  sub_1B211C740(a1, (uint64_t)&v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B2119284(_QWORD *a1)
{
  return sub_1B2118F7C(a1);
}

double sub_1B2119298@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 1065353216;
  *(_BYTE *)(a1 + 4) = 0;
  result = 5.59548971e29;
  *(_QWORD *)(a1 + 8) = 0x461C40003DCCCCCDLL;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t sub_1B21192BC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  sub_1B19F8E54(0, &qword_1EEF63AE0, (uint64_t (*)(void))sub_1B211D140, (uint64_t)&type metadata for CameraDepthOfField.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v10[-v7];
  sub_1B19FA070(a1, a1[3]);
  sub_1B211D140();
  sub_1B222A180();
  v10[15] = 0;
  sub_1B2229934();
  if (!v1)
  {
    v10[14] = 1;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B21193F4(char *a1, char *a2)
{
  return sub_1B1F93418(*a1, *a2);
}

uint64_t sub_1B2119400()
{
  _BYTE *v0;

  if (*v0)
    return 0x6163537375636F66;
  else
    return 0x696F507375636F66;
}

uint64_t sub_1B2119440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B211B338(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2119464()
{
  sub_1B211D140();
  return sub_1B222A1D4();
}

uint64_t sub_1B211948C()
{
  sub_1B211D140();
  return sub_1B222A1E0();
}

void sub_1B21194B4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;

  v4 = sub_1B211C5CC(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B21194DC(_QWORD *a1)
{
  return sub_1B21192BC(a1);
}

double sub_1B21194F4@<D0>(_QWORD *a1@<X8>)
{
  double result;

  result = 524288.125;
  *a1 = 0x4120000040000000;
  return result;
}

uint64_t sub_1B2119504(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2119540 + 4 * byte_1B22BECB6[a1]))(0x7469736E65746E69, 0xE900000000000079);
}

uint64_t sub_1B2119540()
{
  return 0x617265744978616DLL;
}

uint64_t sub_1B2119560()
{
  return 0x6C6F687365726874;
}

unint64_t sub_1B211957C()
{
  return 0xD000000000000013;
}

uint64_t sub_1B2119598()
{
  return 0x6C6946726F6C6F63;
}

uint64_t sub_1B21195B8()
{
  return 0x74736172746E6F63;
}

uint64_t sub_1B21195D0()
{
  return 0x6974617275746173;
}

uint64_t sub_1B21195EC()
{
  return 0x5168676948657375;
}

uint64_t sub_1B2119610(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B211964C + 4 * byte_1B22BECBE[a1]))(0x7469736E65746E69, 0xE900000000000079);
}

uint64_t sub_1B211964C()
{
  return 0x617265744978616DLL;
}

uint64_t sub_1B211966C()
{
  return 0x6C6F687365726874;
}

unint64_t sub_1B2119688()
{
  return 0xD000000000000013;
}

uint64_t sub_1B21196A4()
{
  return 0x6C6946726F6C6F63;
}

uint64_t sub_1B21196C4()
{
  return 0x74736172746E6F63;
}

uint64_t sub_1B21196DC()
{
  return 0x6974617275746173;
}

uint64_t sub_1B21196F8()
{
  return 0x5168676948657375;
}

void sub_1B211971C(char *a1)
{
  sub_1B1F8DD8C(*a1);
}

void sub_1B2119728()
{
  char *v0;

  sub_1B1DB63E8(0, *v0);
}

void sub_1B2119734(uint64_t a1)
{
  char *v1;

  sub_1B1DB4900(a1, *v1);
}

void sub_1B211973C(uint64_t a1)
{
  char *v1;

  sub_1B1DB63E8(a1, *v1);
}

uint64_t sub_1B2119744@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B211AA98();
  *a1 = result;
  return result;
}

uint64_t sub_1B2119770@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B2119504(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B2119798()
{
  unsigned __int8 *v0;

  return sub_1B2119610(*v0);
}

uint64_t sub_1B21197A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B211AA98();
  *a1 = result;
  return result;
}

uint64_t sub_1B21197C4()
{
  sub_1B211D184();
  return sub_1B222A1D4();
}

uint64_t sub_1B21197EC()
{
  sub_1B211D184();
  return sub_1B222A1E0();
}

uint64_t sub_1B2119814(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  __int128 v13;
  char v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF63AE8, (uint64_t (*)(void))sub_1B211D184, (uint64_t)&type metadata for CameraBloom.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211D184();
  sub_1B222A180();
  LOBYTE(v13) = 0;
  sub_1B2229934();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_1B2229940();
    LOBYTE(v13) = 2;
    sub_1B2229934();
    LOBYTE(v13) = 3;
    sub_1B2229934();
    v13 = *(_OWORD *)(v3 + 32);
    v14 = 4;
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDB8]);
    sub_1B2229958();
    LOBYTE(v13) = 5;
    sub_1B2229934();
    LOBYTE(v13) = 6;
    sub_1B2229934();
    LOBYTE(v13) = 7;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B2119A98@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_1B211B5DC(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1B2119AE0(_QWORD *a1)
{
  return sub_1B2119814(a1);
}

double sub_1B2119AF4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 1065353216;
  *(_QWORD *)(a1 + 8) = 10;
  *(_QWORD *)(a1 + 16) = 0x3DCCCCCD3F800000;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 32) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 48) = result;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

void sub_1B2119B2C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63840B0;
}

uint64_t sub_1B2119B3C()
{
  sub_1B211C974();
  return sub_1B2228A58();
}

uint64_t sub_1B2119B98()
{
  sub_1B211C974();
  return sub_1B22289E0();
}

uint64_t sub_1B2119BE4(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;

  v12 = a2;
  sub_1B19F8E54(0, &qword_1EEF63B00, (uint64_t (*)(void))sub_1B211D1C8, (uint64_t)&type metadata for CameraLensBlur.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211D1C8();
  sub_1B222A180();
  v16 = 0;
  sub_1B2229934();
  if (!v2)
  {
    v15 = v12;
    v14 = 1;
    sub_1B1A71140();
    sub_1B2229958();
    v13 = 2;
    sub_1B2229940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B2119D68(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F90280(*a1, *a2);
}

uint64_t sub_1B2119D74()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x75517265746C6966;
  if (*v0 != 1)
    v1 = 0x656E72654B78616DLL;
  if (*v0)
    return v1;
  else
    return 0x737569646172;
}

uint64_t sub_1B2119DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B211AAE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2119E08()
{
  sub_1B211D1C8();
  return sub_1B222A1D4();
}

uint64_t sub_1B2119E30()
{
  sub_1B211D1C8();
  return sub_1B222A1E0();
}

uint64_t sub_1B2119E58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  result = sub_1B211B938(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v6;
    *(_BYTE *)(a2 + 4) = result;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1B2119E88(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B2119BE4(a1, *(unsigned __int8 *)(v1 + 4));
}

void sub_1B2119EA8(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8) = 32;
}

uint64_t sub_1B2119EBC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  sub_1B19F8E54(0, &qword_1EEF63B30, (uint64_t (*)(void))sub_1B211D250, (uint64_t)&type metadata for CameraVignetting.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v10[-v7];
  sub_1B19FA070(a1, a1[3]);
  sub_1B211D250();
  sub_1B222A180();
  v10[15] = 0;
  sub_1B2229934();
  if (!v1)
  {
    v10[14] = 1;
    sub_1B2229934();
    v10[13] = 2;
    sub_1B2229934();
    v10[12] = 3;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1B211A054(char *a1)
{
  sub_1B1F91414(*a1);
}

uint64_t sub_1B211A060()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B211A094 + 4 * byte_1B22BECC6[*v0]))(0x7469736E65746E69, 0xE900000000000079);
}

uint64_t sub_1B211A094()
{
  return 0x6870726F6D616E61;
}

uint64_t sub_1B211A0B0()
{
  return 0x7373656E74666F73;
}

uint64_t sub_1B211A0C8()
{
  return 0x737569646172;
}

uint64_t sub_1B211A0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B211AC74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B211A100()
{
  sub_1B211D250();
  return sub_1B222A1D4();
}

uint64_t sub_1B211A128()
{
  sub_1B211D250();
  return sub_1B222A1E0();
}

void sub_1B211A150(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;
  int v6;
  int v7;

  v4 = sub_1B211BAF4(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
  }
}

uint64_t sub_1B211A17C(_QWORD *a1)
{
  return sub_1B2119EBC(a1);
}

double sub_1B211A198@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0078125;
  *a1 = xmmword_1B22BEC90;
  return result;
}

uint64_t sub_1B211A1A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B211A1DC + 4 * byte_1B22BECCA[a1]))(0x657275736F707865, 0xE800000000000000);
}

uint64_t sub_1B211A1DC()
{
  return 0x74617265706D6574;
}

uint64_t sub_1B211A1FC()
{
  return 1953393012;
}

uint64_t sub_1B211A20C()
{
  return 0x6F6C6F437466696CLL;
}

uint64_t sub_1B211A280()
{
  return 0x74736172746E6F63;
}

uint64_t sub_1B211A294()
{
  return 0x6974617275746173;
}

uint64_t sub_1B211A2D0(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  __int128 v13;
  char v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF63B48, (uint64_t (*)(void))sub_1B211D294, (uint64_t)&type metadata for CameraColorGrading.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211D294();
  sub_1B222A180();
  LOBYTE(v13) = 0;
  sub_1B2229934();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_1B2229934();
    LOBYTE(v13) = 2;
    sub_1B2229934();
    v13 = v3[1];
    v14 = 3;
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDB8]);
    sub_1B2229958();
    LOBYTE(v13) = 4;
    sub_1B2229934();
    v13 = v3[3];
    v14 = 5;
    sub_1B2229958();
    LOBYTE(v13) = 6;
    sub_1B2229934();
    v13 = v3[5];
    v14 = 7;
    sub_1B2229958();
    LOBYTE(v13) = 8;
    sub_1B2229934();
    LOBYTE(v13) = 9;
    sub_1B2229934();
    LOBYTE(v13) = 10;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B211A5F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B211A1A8(*a1);
  v5 = v4;
  if (v3 == sub_1B211A1A8(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B211A678()
{
  unsigned __int8 *v0;

  return sub_1B211A1A8(*v0);
}

uint64_t sub_1B211A680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B211AE84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B211A6A4()
{
  sub_1B211D294();
  return sub_1B222A1D4();
}

uint64_t sub_1B211A6CC()
{
  sub_1B211D294();
  return sub_1B222A1E0();
}

__n128 sub_1B211A6F4@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  _OWORD v8[2];

  sub_1B211C1F4(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 92) = *(_OWORD *)((char *)v8 + 12);
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B211A744(_QWORD *a1)
{
  return sub_1B211A2D0(a1);
}

double sub_1B211A758@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 48) = _Q0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = _Q0;
  result = 0.0078125;
  *(_QWORD *)(a1 + 96) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 104) = 1065353216;
  return result;
}

void sub_1B211A790(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E639AC08;
}

uint64_t sub_1B211A7A0()
{
  sub_1B211C9B8();
  return sub_1B2228A58();
}

uint64_t sub_1B211A7FC()
{
  sub_1B211C9B8();
  return sub_1B22289E0();
}

uint64_t sub_1B211A848(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;

  sub_1B19F8E54(0, &qword_1EEF63B18, (uint64_t (*)(void))sub_1B211D20C, (uint64_t)&type metadata for CameraToneMapping.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211D20C();
  sub_1B222A180();
  v12 = a2;
  sub_1B1A710A4();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B211A95C()
{
  return 0x726F74617265706FLL;
}

uint64_t sub_1B211A974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x726F74617265706FLL && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B211AA08()
{
  sub_1B211D20C();
  return sub_1B222A1D4();
}

uint64_t sub_1B211AA30()
{
  sub_1B211D20C();
  return sub_1B222A1E0();
}

unint64_t sub_1B211AA58@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1B211BCC8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B211AA80(_QWORD *a1)
{
  char *v1;

  return sub_1B211A848(a1, *v1);
}

uint64_t sub_1B211AA98()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

uint64_t sub_1B211AAE0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x737569646172 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x75517265746C6966 && a2 == 0xED00007974696C61 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E72654B78616DLL && a2 == 0xEF7375696461526CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B211AC74(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6870726F6D616E61 && a2 == 0xEA00000000006369 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7373656E74666F73 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B211AE3C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t sub_1B211AE84(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x657275736F707865 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1953393012 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F6C6F437466696CLL && a2 == 0xE900000000000072 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7366664F7466696CLL && a2 == 0xEA00000000007465 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C6F43616D6D6167 && a2 == 0xEA0000000000726FLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x66664F616D6D6167 && a2 == 0xEB00000000746573 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F6C6F436E696167 && a2 == 0xE900000000000072 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7366664F6E696167 && a2 == 0xEA00000000007465 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x74736172746E6F63 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6974617275746173 && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1B211B338(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x696F507375636F66 && a2 == 0xEA0000000000746ELL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6163537375636F66 && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B211B43C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656C616373 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001B2328C20 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676E61527ALL && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5A65737265766572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B211B5DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t result;
  int v18;
  int v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  float v27;
  uint64_t v28;
  char v29;
  float v30;
  __int128 v31;
  _QWORD *v32;
  char v33;
  __int128 v34;
  char v35;

  sub_1B19F8E54(0, &qword_1ED4BAA48, (uint64_t (*)(void))sub_1B211D184, (uint64_t)&type metadata for CameraBloom.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v31 - v9;
  v11 = a1[3];
  v32 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B211D184();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v32);
  LOBYTE(v34) = 0;
  sub_1B22297F0();
  v13 = v12;
  LOBYTE(v34) = 1;
  v14 = sub_1B22297FC();
  LOBYTE(v34) = 2;
  sub_1B22297F0();
  v16 = v15;
  LOBYTE(v34) = 3;
  sub_1B22297F0();
  v19 = v18;
  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  v33 = 4;
  sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v20, MEMORY[0x1E0DEDDC8]);
  sub_1B22297B4();
  if ((v35 & 1) != 0)
    __asm { FMOV            V0.4S, #1.0 }
  else
    _Q0 = v34;
  v31 = _Q0;
  LOBYTE(v34) = 5;
  v26 = sub_1B222979C();
  if ((v26 & 0x100000000) != 0)
    v27 = 1.0;
  else
    v27 = *(float *)&v26;
  LOBYTE(v34) = 6;
  v28 = sub_1B222979C();
  LOBYTE(v34) = 7;
  v29 = sub_1B2229784();
  if ((v28 & 0x100000000) != 0)
    v30 = 1.0;
  else
    v30 = *(float *)&v28;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v32);
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = v16;
  *(_DWORD *)(a2 + 20) = v19;
  *(_OWORD *)(a2 + 32) = v31;
  *(float *)(a2 + 48) = v27;
  *(float *)(a2 + 52) = v30;
  *(_BYTE *)(a2 + 56) = (v29 == 2) | v29 & 1;
  return result;
}

uint64_t sub_1B211B938(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];

  sub_1B19F8E54(0, &qword_1EEF63AF0, (uint64_t (*)(void))sub_1B211D1C8, (uint64_t)&type metadata for CameraLensBlur.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v11[-v7];
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B211D1C8();
  sub_1B222A150();
  if (!v1)
  {
    v11[15] = 0;
    sub_1B22297F0();
    v11[13] = 1;
    sub_1B1A710FC();
    sub_1B2229814();
    v9 = v11[14];
    v11[12] = 2;
    sub_1B22297FC();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

float sub_1B211BAF4(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;

  sub_1B19F8E54(0, &qword_1EEF63B20, (uint64_t (*)(void))sub_1B211D250, (uint64_t)&type metadata for CameraVignetting.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211D250();
  sub_1B222A150();
  if (!v1)
  {
    v16 = 0;
    sub_1B22297F0();
    v2 = v10;
    v15 = 1;
    sub_1B22297F0();
    v14 = 2;
    sub_1B22297F0();
    v13 = 3;
    sub_1B22297F0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B211BCC8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  unsigned __int8 v13;

  sub_1B19F8E54(0, &qword_1EEF63B08, (uint64_t (*)(void))sub_1B211D20C, (uint64_t)&type metadata for CameraToneMapping.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B211D20C();
  v10 = (unint64_t)v9;
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1A71060();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = v13;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

uint64_t sub_1B211BE18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  int v14;
  float v15;
  float v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int8x8_t v21;
  uint64_t result;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  unsigned int v25;
  int8x8_t v26;
  float v27;
  float v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int8x8_t v33;
  char v34;
  char v35;
  char v36;
  char v37;

  sub_1B19F8E54(0, &qword_1ED4BAB70, (uint64_t (*)(void))sub_1B211C9FC, (uint64_t)&type metadata for PerspectiveCamera.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v32 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v31 - v8;
  v35 = 1;
  v37 = 0;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211C9FC();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v33.i8[0] = 0;
  sub_1B22297F0();
  v11 = v10;
  v33.i8[0] = 1;
  sub_1B22297F0();
  v12 = v6;
  v14 = v13;
  v33.i8[0] = 2;
  sub_1B22297F0();
  v16 = v15;
  v33.i8[0] = 3;
  sub_1B22297F0();
  v18 = v17;
  v33.i8[0] = 4;
  sub_1B22297F0();
  v20 = v19;
  sub_1B1B4D924();
  v36 = 5;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v21 = v33;
  v33.i8[0] = 6;
  v35 = sub_1B22297D8() & 1;
  v36 = 7;
  sub_1B1A70D54();
  sub_1B22297B4();
  v37 = v33.i8[0] & 1;
  v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  v36 = 8;
  v24 = v32;
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v23, MEMORY[0x1E0DEDD40]);
  sub_1B22297B4();
  if (v34)
    v25 = -1;
  else
    v25 = 0;
  v26 = vbic_s8(v33, (int8x8_t)vdup_n_s32(v25));
  v27 = atanf((float)(v16 * 0.5) / v11);
  v28 = v27 + v27;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v24);
  v29 = v35;
  v30 = v37;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(float *)a2 = v28;
  *(float *)(a2 + 4) = v11;
  *(_DWORD *)(a2 + 8) = v14;
  *(float *)(a2 + 12) = v16;
  *(_DWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 20) = v20;
  *(int8x8_t *)(a2 + 24) = v21;
  *(_BYTE *)(a2 + 32) = v29;
  *(_BYTE *)(a2 + 33) = v30;
  *(int8x8_t *)(a2 + 40) = v26;
  return result;
}

uint64_t sub_1B211C1F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  char v33;

  sub_1B19F8E54(0, &qword_1EEF63B38, (uint64_t (*)(void))sub_1B211D294, (uint64_t)&type metadata for CameraColorGrading.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v31 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v28 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211D294();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v32) = 0;
  sub_1B22297F0();
  v11 = v10;
  LOBYTE(v32) = 1;
  sub_1B22297F0();
  v13 = v12;
  LOBYTE(v32) = 2;
  sub_1B22297F0();
  v15 = v14;
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  v33 = 3;
  *(_QWORD *)&v30 = sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v16, MEMORY[0x1E0DEDDC8]);
  sub_1B2229814();
  v29 = v32;
  LOBYTE(v32) = 4;
  sub_1B22297F0();
  v18 = v17;
  v33 = 5;
  sub_1B2229814();
  v28 = v32;
  LOBYTE(v32) = 6;
  sub_1B22297F0();
  v20 = v19;
  v33 = 7;
  sub_1B2229814();
  v30 = v32;
  LOBYTE(v32) = 8;
  sub_1B22297F0();
  v22 = v21;
  LOBYTE(v32) = 9;
  sub_1B22297F0();
  v24 = v23;
  LOBYTE(v32) = 10;
  sub_1B22297F0();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v31);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)a2 = v11;
  *(_DWORD *)(a2 + 4) = v13;
  *(_DWORD *)(a2 + 8) = v15;
  *(_OWORD *)(a2 + 16) = v29;
  *(_DWORD *)(a2 + 32) = v18;
  *(_OWORD *)(a2 + 48) = v28;
  *(_DWORD *)(a2 + 64) = v20;
  *(_OWORD *)(a2 + 80) = v30;
  *(_DWORD *)(a2 + 96) = v22;
  *(_DWORD *)(a2 + 100) = v24;
  *(_DWORD *)(a2 + 104) = v26;
  return result;
}

float sub_1B211C5CC(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  uint64_t v12;
  char v13;
  char v14;

  sub_1B19F8E54(0, &qword_1EEF63AD0, (uint64_t (*)(void))sub_1B211D140, (uint64_t)&type metadata for CameraDepthOfField.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211D140();
  sub_1B222A150();
  if (!v1)
  {
    v14 = 0;
    sub_1B22297F0();
    v2 = v10;
    v13 = 1;
    sub_1B22297F0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B211C740@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v17[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF63A58, (uint64_t (*)(void))sub_1B211CA84, (uint64_t)&type metadata for OrthographicCamera.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v17 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211CA84();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v17[0];
  v22 = 0;
  sub_1B22297F0();
  v12 = v11;
  v20 = 1;
  sub_1B1A70D54();
  sub_1B2229814();
  v13 = v21;
  sub_1B1B4D924();
  v19 = 2;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v14 = v17[1];
  v18 = 3;
  v15 = sub_1B22297D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)v10 = v12;
  *(_BYTE *)(v10 + 4) = v13;
  *(_QWORD *)(v10 + 8) = v14;
  *(_BYTE *)(v10 + 16) = v15 & 1;
  return result;
}

unint64_t sub_1B211C974()
{
  unint64_t result;

  result = qword_1EEF63A30;
  if (!qword_1EEF63A30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF784, &type metadata for LensBlurQuality);
    atomic_store(result, (unint64_t *)&qword_1EEF63A30);
  }
  return result;
}

unint64_t sub_1B211C9B8()
{
  unint64_t result;

  result = qword_1EEF63A38;
  if (!qword_1EEF63A38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF74C, &type metadata for ToneMappingOperator);
    atomic_store(result, (unint64_t *)&qword_1EEF63A38);
  }
  return result;
}

unint64_t sub_1B211C9FC()
{
  unint64_t result;

  result = qword_1ED4B9120;
  if (!qword_1ED4B9120)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF6FC, &type metadata for PerspectiveCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9120);
  }
  return result;
}

unint64_t sub_1B211CA40()
{
  unint64_t result;

  result = qword_1EEF63A50;
  if (!qword_1EEF63A50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF6AC, &type metadata for PointOfView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63A50);
  }
  return result;
}

unint64_t sub_1B211CA84()
{
  unint64_t result;

  result = qword_1EEF63A60;
  if (!qword_1EEF63A60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF65C, &type metadata for OrthographicCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63A60);
  }
  return result;
}

ValueMetadata *type metadata accessor for OrthographicCamera.CodingKeys()
{
  return &type metadata for OrthographicCamera.CodingKeys;
}

ValueMetadata *type metadata accessor for PointOfView.CodingKeys()
{
  return &type metadata for PointOfView.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PerspectiveCamera.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B211CB38 + 4 * byte_1B22BECDA[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B211CB6C + 4 * byte_1B22BECD5[v4]))();
}

uint64_t sub_1B211CB6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211CB74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B211CB7CLL);
  return result;
}

uint64_t sub_1B211CB88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B211CB90);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B211CB94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211CB9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PerspectiveCamera.CodingKeys()
{
  return &type metadata for PerspectiveCamera.CodingKeys;
}

ValueMetadata *type metadata accessor for CameraDepthOfField()
{
  return &type metadata for CameraDepthOfField;
}

__n128 initializeWithCopy for CameraBloom(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CameraBloom(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraBloom(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraBloom()
{
  return &type metadata for CameraBloom;
}

uint64_t getEnumTagSinglePayload for CameraLensBlur(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CameraLensBlur(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraLensBlur()
{
  return &type metadata for CameraLensBlur;
}

ValueMetadata *type metadata accessor for CameraToneMapping()
{
  return &type metadata for CameraToneMapping;
}

ValueMetadata *type metadata accessor for CameraVignetting()
{
  return &type metadata for CameraVignetting;
}

__n128 initializeWithCopy for CameraColorGrading(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 92) = *(__int128 *)((char *)a2 + 92);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CameraColorGrading(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 108))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CameraColorGrading(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 108) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CameraColorGrading()
{
  return &type metadata for CameraColorGrading;
}

ValueMetadata *type metadata accessor for LensBlurQuality()
{
  return &type metadata for LensBlurQuality;
}

ValueMetadata *type metadata accessor for ToneMappingOperator()
{
  return &type metadata for ToneMappingOperator;
}

uint64_t sub_1B211CE18()
{
  return sub_1B1D5E388(&qword_1EEF63A70, &qword_1EEF63A78);
}

unint64_t sub_1B211CE48()
{
  unint64_t result;

  result = qword_1EEF63A80;
  if (!qword_1EEF63A80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF1BC, &type metadata for ToneMappingOperator);
    atomic_store(result, (unint64_t *)&qword_1EEF63A80);
  }
  return result;
}

uint64_t sub_1B211CE8C()
{
  return sub_1B1D5E388(&qword_1EEF63A88, &qword_1EEF63A90);
}

unint64_t sub_1B211CEBC()
{
  unint64_t result;

  result = qword_1EEF63A98;
  if (!qword_1EEF63A98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF25C, &type metadata for LensBlurQuality);
    atomic_store(result, (unint64_t *)&qword_1EEF63A98);
  }
  return result;
}

unint64_t sub_1B211CF04()
{
  unint64_t result;

  result = qword_1EEF63AA0;
  if (!qword_1EEF63AA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF52C, &type metadata for PerspectiveCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63AA0);
  }
  return result;
}

unint64_t sub_1B211CF4C()
{
  unint64_t result;

  result = qword_1EEF63AA8;
  if (!qword_1EEF63AA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF634, &type metadata for OrthographicCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63AA8);
  }
  return result;
}

unint64_t sub_1B211CF94()
{
  unint64_t result;

  result = qword_1EEF63AB0;
  if (!qword_1EEF63AB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF5A4, &type metadata for OrthographicCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63AB0);
  }
  return result;
}

unint64_t sub_1B211CFDC()
{
  unint64_t result;

  result = qword_1EEF63AB8;
  if (!qword_1EEF63AB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF5CC, &type metadata for OrthographicCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63AB8);
  }
  return result;
}

unint64_t sub_1B211D024()
{
  unint64_t result;

  result = qword_1EEF63AC0;
  if (!qword_1EEF63AC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF554, &type metadata for PointOfView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63AC0);
  }
  return result;
}

unint64_t sub_1B211D06C()
{
  unint64_t result;

  result = qword_1EEF63AC8;
  if (!qword_1EEF63AC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF57C, &type metadata for PointOfView.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63AC8);
  }
  return result;
}

unint64_t sub_1B211D0B4()
{
  unint64_t result;

  result = qword_1ED4B9130;
  if (!qword_1ED4B9130)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF464, &type metadata for PerspectiveCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9130);
  }
  return result;
}

unint64_t sub_1B211D0FC()
{
  unint64_t result;

  result = qword_1ED4B9128;
  if (!qword_1ED4B9128)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF48C, &type metadata for PerspectiveCamera.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9128);
  }
  return result;
}

unint64_t sub_1B211D140()
{
  unint64_t result;

  result = qword_1EEF63AD8;
  if (!qword_1EEF63AD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFE94, &type metadata for CameraDepthOfField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63AD8);
  }
  return result;
}

unint64_t sub_1B211D184()
{
  unint64_t result;

  result = qword_1ED4B7C48;
  if (!qword_1ED4B7C48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFE44, &type metadata for CameraBloom.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7C48);
  }
  return result;
}

unint64_t sub_1B211D1C8()
{
  unint64_t result;

  result = qword_1EEF63AF8;
  if (!qword_1EEF63AF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFDF4, &type metadata for CameraLensBlur.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63AF8);
  }
  return result;
}

unint64_t sub_1B211D20C()
{
  unint64_t result;

  result = qword_1EEF63B10;
  if (!qword_1EEF63B10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFDA4, &type metadata for CameraToneMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B10);
  }
  return result;
}

unint64_t sub_1B211D250()
{
  unint64_t result;

  result = qword_1EEF63B28;
  if (!qword_1EEF63B28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFD54, &type metadata for CameraVignetting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B28);
  }
  return result;
}

unint64_t sub_1B211D294()
{
  unint64_t result;

  result = qword_1EEF63B40;
  if (!qword_1EEF63B40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFD04, &type metadata for CameraColorGrading.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CameraColorGrading.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1B211D324 + 4 * byte_1B22BECE4[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1B211D358 + 4 * byte_1B22BECDF[v4]))();
}

uint64_t sub_1B211D358(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D360(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B211D368);
  return result;
}

uint64_t sub_1B211D374(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B211D37CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1B211D380(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D388(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraColorGrading.CodingKeys()
{
  return &type metadata for CameraColorGrading.CodingKeys;
}

uint64_t _s3VFX18OrthographicCameraV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B211D3F0 + 4 * byte_1B22BECEE[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B211D424 + 4 * byte_1B22BECE9[v4]))();
}

uint64_t sub_1B211D424(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D42C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B211D434);
  return result;
}

uint64_t sub_1B211D440(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B211D448);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B211D44C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D454(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraVignetting.CodingKeys()
{
  return &type metadata for CameraVignetting.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CameraToneMapping.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B211D4B0 + 4 * byte_1B22BECF3[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B211D4D0 + 4 * byte_1B22BECF8[v4]))();
}

_BYTE *sub_1B211D4B0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B211D4D0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B211D4D8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B211D4E0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B211D4E8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B211D4F0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CameraToneMapping.CodingKeys()
{
  return &type metadata for CameraToneMapping.CodingKeys;
}

uint64_t _s3VFX15LensBlurQualityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B211D558 + 4 * byte_1B22BED02[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B211D58C + 4 * byte_1B22BECFD[v4]))();
}

uint64_t sub_1B211D58C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D594(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B211D59CLL);
  return result;
}

uint64_t sub_1B211D5A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B211D5B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B211D5B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D5BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraLensBlur.CodingKeys()
{
  return &type metadata for CameraLensBlur.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CameraBloom.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B211D624 + 4 * byte_1B22BED0C[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B211D658 + 4 * byte_1B22BED07[v4]))();
}

uint64_t sub_1B211D658(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D660(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B211D668);
  return result;
}

uint64_t sub_1B211D674(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B211D67CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B211D680(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D688(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraBloom.CodingKeys()
{
  return &type metadata for CameraBloom.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CameraDepthOfField.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B211D6F0 + 4 * byte_1B22BED16[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B211D724 + 4 * byte_1B22BED11[v4]))();
}

uint64_t sub_1B211D724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D72C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B211D734);
  return result;
}

uint64_t sub_1B211D740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B211D748);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B211D74C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B211D754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraDepthOfField.CodingKeys()
{
  return &type metadata for CameraDepthOfField.CodingKeys;
}

unint64_t sub_1B211D774()
{
  unint64_t result;

  result = qword_1EEF63B50;
  if (!qword_1EEF63B50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF90C, &type metadata for CameraDepthOfField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B50);
  }
  return result;
}

unint64_t sub_1B211D7BC()
{
  unint64_t result;

  result = qword_1EEF63B58;
  if (!qword_1EEF63B58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF9FC, &type metadata for CameraBloom.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B58);
  }
  return result;
}

unint64_t sub_1B211D804()
{
  unint64_t result;

  result = qword_1EEF63B60;
  if (!qword_1EEF63B60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFAB4, &type metadata for CameraLensBlur.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B60);
  }
  return result;
}

unint64_t sub_1B211D84C()
{
  unint64_t result;

  result = qword_1EEF63B68;
  if (!qword_1EEF63B68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFB6C, &type metadata for CameraToneMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B68);
  }
  return result;
}

unint64_t sub_1B211D894()
{
  unint64_t result;

  result = qword_1EEF63B70;
  if (!qword_1EEF63B70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFC24, &type metadata for CameraVignetting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B70);
  }
  return result;
}

unint64_t sub_1B211D8DC()
{
  unint64_t result;

  result = qword_1EEF63B78;
  if (!qword_1EEF63B78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFCDC, &type metadata for CameraColorGrading.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B78);
  }
  return result;
}

unint64_t sub_1B211D924()
{
  unint64_t result;

  result = qword_1EEF63B80;
  if (!qword_1EEF63B80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFC4C, &type metadata for CameraColorGrading.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B80);
  }
  return result;
}

unint64_t sub_1B211D96C()
{
  unint64_t result;

  result = qword_1EEF63B88;
  if (!qword_1EEF63B88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFC74, &type metadata for CameraColorGrading.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B88);
  }
  return result;
}

unint64_t sub_1B211D9B4()
{
  unint64_t result;

  result = qword_1EEF63B90;
  if (!qword_1EEF63B90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFB94, &type metadata for CameraVignetting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B90);
  }
  return result;
}

unint64_t sub_1B211D9FC()
{
  unint64_t result;

  result = qword_1EEF63B98;
  if (!qword_1EEF63B98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFBBC, &type metadata for CameraVignetting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63B98);
  }
  return result;
}

unint64_t sub_1B211DA44()
{
  unint64_t result;

  result = qword_1EEF63BA0;
  if (!qword_1EEF63BA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFADC, &type metadata for CameraToneMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BA0);
  }
  return result;
}

unint64_t sub_1B211DA8C()
{
  unint64_t result;

  result = qword_1EEF63BA8;
  if (!qword_1EEF63BA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFB04, &type metadata for CameraToneMapping.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BA8);
  }
  return result;
}

unint64_t sub_1B211DAD4()
{
  unint64_t result;

  result = qword_1EEF63BB0;
  if (!qword_1EEF63BB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFA24, &type metadata for CameraLensBlur.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BB0);
  }
  return result;
}

unint64_t sub_1B211DB1C()
{
  unint64_t result;

  result = qword_1EEF63BB8;
  if (!qword_1EEF63BB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BFA4C, &type metadata for CameraLensBlur.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BB8);
  }
  return result;
}

unint64_t sub_1B211DB64()
{
  unint64_t result;

  result = qword_1ED4B7C58;
  if (!qword_1ED4B7C58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF934, &type metadata for CameraBloom.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7C58);
  }
  return result;
}

unint64_t sub_1B211DBAC()
{
  unint64_t result;

  result = qword_1ED4B7C50;
  if (!qword_1ED4B7C50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF95C, &type metadata for CameraBloom.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7C50);
  }
  return result;
}

unint64_t sub_1B211DBF4()
{
  unint64_t result;

  result = qword_1EEF63BC0;
  if (!qword_1EEF63BC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF87C, &type metadata for CameraDepthOfField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BC0);
  }
  return result;
}

unint64_t sub_1B211DC3C()
{
  unint64_t result;

  result = qword_1EEF63BC8;
  if (!qword_1EEF63BC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BF8A4, &type metadata for CameraDepthOfField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for HiddenOrHasHiddenAncestor()
{
  return &type metadata for HiddenOrHasHiddenAncestor;
}

uint64_t sub_1B211DC90(char a1, unint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t result;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  BOOL v18;
  _QWORD v19[3];
  char v20;
  _BYTE v21[32];

  v6 = a1 & 1;
  swift_retain();
  v7 = sub_1B1FD568C((uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB290, a2);
  result = swift_release();
  if (v7 != v6)
  {
    v10 = (_DWORD)a2 == -1 && HIDWORD(a2) == 0;
    if ((a1 & 1) != 0)
    {
      if (!v10)
      {
        v11 = swift_retain();
        MEMORY[0x1E0C80A78](v11, v12);
        sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B211E4EC);
        swift_release();
      }
      return sub_1B211E138(a2, a3);
    }
    else
    {
      if (v10)
        return sub_1B211DF9C(a2, a3);
      v13 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v13)
      {
        v14 = *(_BYTE *)(v13 + 80);
        MEMORY[0x1B5E240CC](v13 + 48);
        v13 = *(_QWORD *)(v13 + 56);
      }
      else
      {
        v14 = 0;
      }
      swift_unknownObjectUnownedInit();
      v19[0] = a3;
      v19[2] = v13;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v20 = v14;
      sub_1B1A02530((uint64_t)v19, (uint64_t)v21);
      sub_1B1E2D290((uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB218, a2);
      sub_1B1A0256C((uint64_t)v21);
      sub_1B1E31340(1);
      swift_release();
      swift_retain();
      v15 = sub_1B1D1593C(a2);
      v17 = v16;
      swift_release();
      if ((v17 & 1) != 0)
        return sub_1B211DF9C(a2, a3);
      swift_retain();
      v18 = sub_1B1FD568C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1E636CBB0, v15);
      result = swift_release();
      if (!v18)
        return sub_1B211DF9C(a2, a3);
    }
  }
  return result;
}

uint64_t sub_1B211DEA4()
{
  sub_1B211E650();
  return sub_1B222A1D4();
}

uint64_t sub_1B211DECC()
{
  sub_1B211E650();
  return sub_1B222A1E0();
}

uint64_t sub_1B211DEF4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF63C08, (uint64_t (*)(void))sub_1B211E650, (uint64_t)&type metadata for Hidden.CodingKeys);
}

uint64_t sub_1B211DF20()
{
  sub_1B211E508();
  return sub_1B222A1D4();
}

uint64_t sub_1B211DF48()
{
  sub_1B211E508();
  return sub_1B222A1E0();
}

uint64_t sub_1B211DF70(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF63BD0, (uint64_t (*)(void))sub_1B211E508, (uint64_t)&type metadata for HiddenOrHasHiddenAncestor.CodingKeys);
}

uint64_t sub_1B211DF9C(unint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[3];
  char v13;
  _BYTE v14[32];

  swift_retain();
  v4 = sub_1B1FD568C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1E636CBB0, a1);
  result = swift_release();
  if (v4)
  {
    swift_retain();
    v6 = sub_1B1FD568C((uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB290, a1);
    result = swift_release();
    if (!v6)
    {
      if (a1 != 0xFFFFFFFF)
      {
        v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        swift_retain();
        if (v7)
        {
          v8 = *(_BYTE *)(v7 + 80);
          MEMORY[0x1B5E240CC](v7 + 48);
          v7 = *(_QWORD *)(v7 + 56);
        }
        else
        {
          v8 = 0;
        }
        swift_unknownObjectUnownedInit();
        v12[0] = a2;
        v12[2] = v7;
        swift_unknownObjectUnownedAssign();
        swift_unownedRetain();
        swift_unknownObjectRelease();
        v13 = v8;
        sub_1B1A02530((uint64_t)v12, (uint64_t)v14);
        sub_1B1E2D290((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1E636CB80, a1);
        sub_1B1A0256C((uint64_t)v14);
        sub_1B1E31340(1);
        swift_release();
      }
      v9 = sub_1B1E856CC(a1, a2);
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v11 = (_QWORD *)(v9 + 40);
        do
        {
          sub_1B211DF9C(*(v11 - 1), *v11);
          v11 += 2;
          --v10;
        }
        while (v10);
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B211E138(unint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  swift_retain();
  v4 = sub_1B1FD568C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1E636CBB0, a1);
  result = swift_release();
  if (!v4)
  {
    if (a1 != 0xFFFFFFFF)
    {
      v6 = swift_retain();
      MEMORY[0x1E0C80A78](v6, v7);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B211E4D4);
      swift_release();
    }
    v8 = sub_1B1E856CC(a1, a2);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = (_QWORD *)(v8 + 40);
      do
      {
        sub_1B211E138(*(v10 - 1), *v10);
        v10 += 2;
        --v9;
      }
      while (v9);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B211E230()
{
  sub_1B211E60C();
  return sub_1B222A1D4();
}

uint64_t sub_1B211E258()
{
  sub_1B211E60C();
  return sub_1B222A1E0();
}

uint64_t sub_1B211E280@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  _DWORD *v15;

  v15 = a2;
  sub_1B19F8E54(0, &qword_1EEF63BF0, (uint64_t (*)(void))sub_1B211E60C, (uint64_t)&type metadata for Opacity.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v14 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211E60C();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v15;
  sub_1B22297F0();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v10 = v12;
  return result;
}

uint64_t sub_1B211E3CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF63C00, (uint64_t (*)(void))sub_1B211E60C, (uint64_t)&type metadata for Opacity.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B211E60C();
  sub_1B222A180();
  sub_1B2229934();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

_QWORD *sub_1B211E4D4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F57560(a1, *(_QWORD *)(v1 + 24));
}

_QWORD *sub_1B211E4EC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F53F40(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1B211E508()
{
  unint64_t result;

  result = qword_1EEF63BD8;
  if (!qword_1EEF63BD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C00F8, &type metadata for HiddenOrHasHiddenAncestor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Opacity()
{
  return &type metadata for Opacity;
}

ValueMetadata *type metadata accessor for HiddenOrHasHiddenAncestor.CodingKeys()
{
  return &type metadata for HiddenOrHasHiddenAncestor.CodingKeys;
}

ValueMetadata *type metadata accessor for Hidden()
{
  return &type metadata for Hidden;
}

unint64_t sub_1B211E580()
{
  unint64_t result;

  result = qword_1EEF63BE0;
  if (!qword_1EEF63BE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0028, &type metadata for HiddenOrHasHiddenAncestor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BE0);
  }
  return result;
}

unint64_t sub_1B211E5C8()
{
  unint64_t result;

  result = qword_1EEF63BE8;
  if (!qword_1EEF63BE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0050, &type metadata for HiddenOrHasHiddenAncestor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BE8);
  }
  return result;
}

unint64_t sub_1B211E60C()
{
  unint64_t result;

  result = qword_1EEF63BF8;
  if (!qword_1EEF63BF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C02C0, &type metadata for Opacity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63BF8);
  }
  return result;
}

unint64_t sub_1B211E650()
{
  unint64_t result;

  result = qword_1EEF63C10;
  if (!qword_1EEF63C10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0270, &type metadata for Hidden.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63C10);
  }
  return result;
}

ValueMetadata *type metadata accessor for Hidden.CodingKeys()
{
  return &type metadata for Hidden.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Opacity.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B211E6E4 + 4 * byte_1B22BFF00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B211E704 + 4 * byte_1B22BFF05[v4]))();
}

_BYTE *sub_1B211E6E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B211E704(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B211E70C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B211E714(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B211E71C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B211E724(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Opacity.CodingKeys()
{
  return &type metadata for Opacity.CodingKeys;
}

unint64_t sub_1B211E744()
{
  unint64_t result;

  result = qword_1EEF63C18;
  if (!qword_1EEF63C18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C01F8, &type metadata for Opacity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63C18);
  }
  return result;
}

unint64_t sub_1B211E78C()
{
  unint64_t result;

  result = qword_1EEF63C20;
  if (!qword_1EEF63C20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0220, &type metadata for Hidden.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63C20);
  }
  return result;
}

unint64_t sub_1B211E7D4()
{
  unint64_t result;

  result = qword_1EEF63C28;
  if (!qword_1EEF63C28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0248, &type metadata for Hidden.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63C28);
  }
  return result;
}

unint64_t sub_1B211E81C()
{
  unint64_t result;

  result = qword_1EEF63C30;
  if (!qword_1EEF63C30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0168, &type metadata for Opacity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63C30);
  }
  return result;
}

unint64_t sub_1B211E864()
{
  unint64_t result;

  result = qword_1EEF63C38;
  if (!qword_1EEF63C38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0190, &type metadata for Opacity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63C38);
  }
  return result;
}

uint64_t type metadata accessor for DeferredRendering()
{
  return objc_opt_self();
}

const char *sub_1B211E8CC()
{
  return "Deferred Rendering";
}

uint64_t sub_1B211E8E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t ObjectType;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  void *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int16 v79;
  _QWORD v80[10];
  _QWORD v81[10];
  _QWORD v82[10];
  _QWORD v83[10];
  _BYTE v84[80];
  _QWORD v85[10];
  _QWORD v86[11];
  uint64_t v87[101];
  _QWORD v88[11];
  uint64_t v89[101];
  _OWORD v90[11];
  _BYTE v91[48];
  __int16 v92;
  _QWORD v93[8];

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v1 || (*(_BYTE *)(v1 + 536) & 1) != 0)
    return result;
  v65 = result;
  v2 = *(_QWORD *)(v1 + 272);
  if (*(_BYTE *)(v2 + 24) == 2)
  {
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  v63 = *(_QWORD *)(v2 + 32);
  sub_1B1791524(0, &qword_1ED4BAF58, (uint64_t (*)(uint64_t))sub_1B211F4E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = (_QWORD *)swift_allocObject();
  sub_1B206309C(0x11u, (uint64_t)v80);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 264) + 40);
  v5 = *(_QWORD *)(v4 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v5)
  {
    v7 = v80[0];
    v6 = v80[1];
    swift_bridgeObjectRetain();
    v8 = sub_1B1DC3B00(v7, v6);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v8);
      swift_unknownObjectRetain();
      sub_1B1BA80C0((uint64_t)v80);
      swift_release();
      sub_1B1BA80C0((uint64_t)v80);
      goto LABEL_9;
    }
    sub_1B1BA80C0((uint64_t)v80);
  }
  swift_release();
  sub_1B1BA80C0((uint64_t)v80);
  v10 = 0;
LABEL_9:
  v3[4] = v10;
  v3[5] = 0;
  sub_1B206309C(0xEu, (uint64_t)v81);
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 264) + 40);
  v12 = *(_QWORD *)(v11 + 16);
  swift_retain();
  if (v12)
  {
    v13 = v81[1];
    v14 = v81[0];
    swift_bridgeObjectRetain();
    v15 = sub_1B1DC3B00(v14, v13);
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v15);
      swift_unknownObjectRetain();
      sub_1B1BA80C0((uint64_t)v81);
      swift_release();
      sub_1B1BA80C0((uint64_t)v81);
      goto LABEL_14;
    }
    sub_1B1BA80C0((uint64_t)v81);
  }
  swift_release();
  sub_1B1BA80C0((uint64_t)v81);
  v17 = 0;
LABEL_14:
  v3[6] = v17;
  v3[7] = 3;
  sub_1B206309C(0xFu, (uint64_t)v82);
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 264) + 40);
  v19 = *(_QWORD *)(v18 + 16);
  swift_retain();
  if (v19)
  {
    v20 = v82[1];
    v21 = v82[0];
    swift_bridgeObjectRetain();
    v22 = sub_1B1DC3B00(v21, v20);
    if ((v23 & 1) != 0)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v22);
      swift_unknownObjectRetain();
      sub_1B1BA80C0((uint64_t)v82);
      swift_release();
      sub_1B1BA80C0((uint64_t)v82);
      goto LABEL_19;
    }
    sub_1B1BA80C0((uint64_t)v82);
  }
  swift_release();
  sub_1B1BA80C0((uint64_t)v82);
  v24 = 0;
LABEL_19:
  v3[8] = v24;
  v3[9] = 1;
  sub_1B206309C(0x10u, (uint64_t)v83);
  v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 264) + 40);
  v26 = *(_QWORD *)(v25 + 16);
  swift_retain();
  if (v26)
  {
    v27 = v83[1];
    v28 = v83[0];
    swift_bridgeObjectRetain();
    v29 = sub_1B1DC3B00(v28, v27);
    if ((v30 & 1) != 0)
    {
      v31 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v29);
      swift_unknownObjectRetain();
      sub_1B1BA80C0((uint64_t)v83);
      swift_release();
      sub_1B1BA80C0((uint64_t)v83);
    }
    else
    {
      sub_1B1BA80C0((uint64_t)v83);
      swift_release();
      sub_1B1BA80C0((uint64_t)v83);
      v31 = 0;
    }
  }
  else
  {
    swift_release();
    sub_1B1BA80C0((uint64_t)v83);
    v31 = 0;
  }
  v3[10] = v31;
  v3[11] = 2;
  if (!v10)
    goto LABEL_37;
  if (!v17)
    goto LABEL_37;
  if (!v24)
    goto LABEL_37;
  if (!v31)
    goto LABEL_37;
  sub_1B206309C(0, (uint64_t)v84);
  v32 = sub_1B206318C((uint64_t)v84, 1, 0, 2);
  sub_1B1BA80C0((uint64_t)v84);
  if (!v32)
    goto LABEL_37;
  sub_1B206309C(1u, (uint64_t)v85);
  v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 264) + 40);
  v34 = *(_QWORD *)(v33 + 16);
  swift_retain();
  if (!v34)
    goto LABEL_36;
  v35 = v85[1];
  v36 = v85[0];
  swift_bridgeObjectRetain();
  v37 = sub_1B1DC3B00(v36, v35);
  if ((v38 & 1) == 0)
  {
    sub_1B1BA80C0((uint64_t)v85);
LABEL_36:
    swift_release();
    sub_1B1BA80C0((uint64_t)v85);
    swift_unknownObjectRelease();
LABEL_37:
    swift_setDeallocating();
    sub_1B211F4E8();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    swift_release();
    return swift_release();
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v37);
  swift_unknownObjectRetain();
  sub_1B1BA80C0((uint64_t)v85);
  swift_release();
  sub_1B1BA80C0((uint64_t)v85);
  v40 = swift_unknownObjectRetain();
  v41 = sub_1B1BA147C(v40, 2, 0, 2, 0, 0);
  swift_unknownObjectRelease();
  v42 = objc_msgSend(v41, sel_depthAttachment);
  swift_unknownObjectRetain();
  objc_msgSend(v42, sel_setTexture_, v39);
  objc_msgSend(v42, sel_setLoadAction_, 1);
  objc_msgSend(v42, sel_setStoreAction_, 0);
  objc_msgSend(v42, sel_setClearDepth_, 0.0);
  objc_msgSend(v42, sel_setLevel_, 0);

  swift_unknownObjectRelease();
  sub_1B1F9B834();
  v43 = sub_1B2229454();
  sub_1B1BA77BC(v43, v44, v41);
  v45 = (void *)sub_1B1BA7B7C(0);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  if (!v45)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    goto LABEL_37;
  }
  ObjectType = swift_getObjectType();
  objc_msgSend(v45, sel_setFragmentTexture_atIndex_, v3[4], v3[5]);
  objc_msgSend(v45, sel_setFragmentTexture_atIndex_, v3[6], v3[7]);
  objc_msgSend(v45, sel_setFragmentTexture_atIndex_, v3[8], v3[9]);
  objc_msgSend(v45, sel_setFragmentTexture_atIndex_, v3[10], v3[11]);
  swift_setDeallocating();
  sub_1B211F4E8();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v47 = swift_unknownObjectRetain();
  sub_1B2118628(v47, 9);
  swift_unknownObjectRelease();
  sub_1B1E125C8(v65, ObjectType);
  swift_retain();
  sub_1B2000408((uint64_t)&v78);
  swift_release();
  if (v78 != 1)
  {
    v66 = v78;
    v48 = v79;
    *(_QWORD *)&v67[0] = 0xD00000000000001BLL;
    *((_QWORD *)&v67[0] + 1) = 0x80000001B234D1C0;
    *(_QWORD *)&v68 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v68 + 1) = 0xD000000000000017;
    v67[1] = 0uLL;
    v69 = 0x80000001B234D1E0;
    v70 = 0;
    *(_QWORD *)&v71 = 0;
    *((_QWORD *)&v71 + 1) = MEMORY[0x1E0DEE9D8];
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    v77 = 0u;
    v72 = 0u;
    v73 = 0u;
    v90[0] = v67[0];
    v90[1] = 0uLL;
    memset(&v90[5], 0, 96);
    v90[3] = 0x80000001B234D1E0;
    v90[4] = v71;
    v90[2] = v68;
    sub_1B1D34438((uint64_t *)v67);
    sub_1B1F9AEC4((uint64_t)v86);
    sub_1B1EFF55C();
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_1B226CAD0;
    *(_OWORD *)(v49 + 32) = xmmword_1B22C0310;
    *(_BYTE *)(v49 + 48) = 0;
    v62 = v48 & 1;
    *(_QWORD *)(v49 + 64) = v62;
    *(_OWORD *)(v49 + 72) = 0u;
    *(_OWORD *)(v49 + 88) = 0u;
    *(_OWORD *)(v49 + 104) = 0u;
    *(_QWORD *)(v49 + 120) = 0;
    *(_BYTE *)(v49 + 128) = 13;
    *(_OWORD *)(v49 + 144) = xmmword_1B22C0320;
    *(_BYTE *)(v49 + 160) = 0;
    *(_OWORD *)(v49 + 176) = 0u;
    *(_OWORD *)(v49 + 192) = 0u;
    *(_OWORD *)(v49 + 208) = 0u;
    *(_OWORD *)(v49 + 224) = 0u;
    *(_BYTE *)(v49 + 240) = 13;
    v50 = *(unsigned __int8 *)(v1 + 600);
    *(_OWORD *)(v49 + 256) = xmmword_1B22C0330;
    *(_BYTE *)(v49 + 272) = 0;
    *(_QWORD *)(v49 + 288) = v50;
    *(_OWORD *)(v49 + 296) = 0u;
    *(_OWORD *)(v49 + 312) = 0u;
    *(_OWORD *)(v49 + 328) = 0u;
    *(_QWORD *)(v49 + 344) = 0;
    *(_BYTE *)(v49 + 352) = 13;
    v61 = (v63 >> 16) & 1;
    *(_OWORD *)(v49 + 368) = xmmword_1B22C0340;
    *(_BYTE *)(v49 + 384) = 0;
    *(_QWORD *)(v49 + 400) = !(v63 & 0x10000);
    *(_OWORD *)(v49 + 408) = 0u;
    *(_OWORD *)(v49 + 424) = 0u;
    *(_OWORD *)(v49 + 440) = 0u;
    *(_QWORD *)(v49 + 456) = 0;
    *(_BYTE *)(v49 + 464) = 13;
    *(_OWORD *)(v49 + 480) = xmmword_1B22C0350;
    *(_BYTE *)(v49 + 496) = 0;
    *(_OWORD *)(v49 + 544) = 0u;
    *(_OWORD *)(v49 + 560) = 0u;
    *(_OWORD *)(v49 + 512) = 0u;
    *(_OWORD *)(v49 + 528) = 0u;
    *(_BYTE *)(v49 + 576) = 14;
    memset(v91, 0, sizeof(v91));
    v92 = 256;
    v93[0] = 0;
    v93[1] = 0;
    v93[2] = 2;
    memset(&v93[3], 0, 24);
    sub_1B1FD1C40((uint64_t *)v90, v86, 0, 0, v49, (uint64_t)v91, 3, (uint64_t)v93, (uint64_t)v87, 1, 1);
    sub_1B1BDB228((uint64_t *)v67);
    v64 = OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare;
    swift_retain();
    v51 = sub_1B1B32B58((uint64_t)v87, 0);
    v53 = v51;
    v54 = v52;
    if (v51 >= 3)
    {
      v55 = swift_unknownObjectRetain();
      sub_1B1B427DC(v55, v54);
      swift_release();
      if (*(_BYTE *)(v65 + v64) == 1)
      {
        sub_1B1D34438((uint64_t *)v67);
        sub_1B1F9AEC4((uint64_t)v88);
        v56 = swift_allocObject();
        *(_OWORD *)(v56 + 16) = xmmword_1B226CAD0;
        *(_OWORD *)(v56 + 32) = xmmword_1B22C0310;
        *(_BYTE *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 64) = v62;
        *(_OWORD *)(v56 + 72) = 0u;
        *(_OWORD *)(v56 + 88) = 0u;
        *(_OWORD *)(v56 + 104) = 0u;
        *(_QWORD *)(v56 + 120) = 0;
        *(_BYTE *)(v56 + 128) = 13;
        *(_OWORD *)(v56 + 144) = xmmword_1B22C0320;
        *(_BYTE *)(v56 + 160) = 0;
        *(_OWORD *)(v56 + 176) = 0u;
        *(_OWORD *)(v56 + 192) = 0u;
        *(_OWORD *)(v56 + 208) = 0u;
        *(_OWORD *)(v56 + 224) = 0u;
        *(_BYTE *)(v56 + 240) = 13;
        v57 = *(unsigned __int8 *)(v1 + 600);
        *(_OWORD *)(v56 + 256) = xmmword_1B22C0330;
        *(_BYTE *)(v56 + 272) = 0;
        *(_QWORD *)(v56 + 288) = v57;
        *(_OWORD *)(v56 + 296) = 0u;
        *(_OWORD *)(v56 + 312) = 0u;
        *(_OWORD *)(v56 + 328) = 0u;
        *(_QWORD *)(v56 + 344) = 0;
        *(_BYTE *)(v56 + 352) = 13;
        *(_OWORD *)(v56 + 368) = xmmword_1B22C0340;
        *(_BYTE *)(v56 + 384) = 0;
        *(_QWORD *)(v56 + 400) = v61;
        *(_OWORD *)(v56 + 408) = 0u;
        *(_OWORD *)(v56 + 424) = 0u;
        *(_OWORD *)(v56 + 440) = 0u;
        *(_QWORD *)(v56 + 456) = 0;
        *(_BYTE *)(v56 + 464) = 13;
        *(_OWORD *)(v56 + 480) = xmmword_1B22C0350;
        *(_BYTE *)(v56 + 496) = 0;
        *(_OWORD *)(v56 + 544) = 0u;
        *(_OWORD *)(v56 + 560) = 0u;
        *(_OWORD *)(v56 + 512) = 0u;
        *(_OWORD *)(v56 + 528) = 0u;
        *(_BYTE *)(v56 + 576) = 14;
        sub_1B1FD1C40((uint64_t *)v90, v88, 0, 0, v56, (uint64_t)v91, 3, (uint64_t)v93, (uint64_t)v89, 1, 1);
        sub_1B1BDB228((uint64_t *)v67);
        swift_retain();
        v58 = sub_1B1B32B58((uint64_t)v89, 0);
        v60 = v59;
        if (v58 >= 3)
          v58 = swift_unknownObjectRetain();
        sub_1B1B427DC(v58, v60);
        swift_release();
        swift_unknownObjectRelease();
        sub_1B1B41134(v89);
      }
      else
      {
        objc_msgSend(v45, sel_setDepthStencilState_, *(_QWORD *)(*(_QWORD *)(v1 + 248) + 688));
        objc_msgSend(v45, sel_setRenderPipelineState_, v53);
        sub_1B20BFD20(1);
      }
      swift_unknownObjectRelease();
    }
    else
    {
      sub_1B1B427DC(v51, v52);
      swift_release();
    }
    sub_1B1B41134(v87);
    sub_1B1BDB228((uint64_t *)v67);
    sub_1B211F564(v66);
  }
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

void sub_1B211F4E8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BA600)
  {
    sub_1B1791524(255, (unint64_t *)&unk_1ED4BA5F0, (uint64_t (*)(uint64_t))sub_1B1E8BB30, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BA600);
  }
}

uint64_t sub_1B211F564(uint64_t result)
{
  if (result != 1)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B211F594(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  type metadata accessor for SwiftScriptCodeGen();
  swift_initStackObject();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1B5A24C(a1, a2, a3);
  swift_release();
  swift_bridgeObjectRelease();
  v11 = sub_1B1B59590(1);
  if (v5)
  {
    swift_release();
  }
  else
  {
    v14 = v11;
    v23 = v12;
    v24 = v13;
    type metadata accessor for CScriptCodeGen();
    swift_initStackObject();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1B5A24C(a1, a2, a3);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B1B5812C(1);
    v18 = v15;
    v19 = v16;
    if (v14 < 1)
    {
      swift_bridgeObjectRelease();
      v22 = 0;
      v21 = 0;
      v20 = a4;
    }
    else
    {
      v20 = a4;
      v21 = v24;
      v22 = v23;
    }
    a5 = sub_1B2120A5C(v22, v21, v18, v19, v20, a5 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return a5;
}

unint64_t sub_1B211F780(unint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v9;

  v3 = a1;
  v4 = HIDWORD(a1);
  swift_retain();
  if ((v3 != -1 || (_DWORD)v4)
    && (v3 & 0x80000000) == 0
    && v3 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v5 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v4 == -1)
     || *(_DWORD *)(v5 + 12 * v3 + 8) == (_DWORD)v4))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v5 + 12 * v3) + 32);
    v6 = *(unsigned int *)(v9 + 28);
    v7 = *(_BYTE *)(v9 + 32);
    swift_release();
  }
  else
  {
    swift_release();
    v6 = 0;
    v7 = 1;
  }
  return v6 | ((unint64_t)v7 << 32);
}

void sub_1B211F850(char *a1)
{
  sub_1B1F8D868(*a1);
}

void sub_1B211F85C()
{
  char *v0;

  sub_1B1DB65EC(0, *v0);
}

void sub_1B211F868()
{
  __asm { BR              X10 }
}

uint64_t sub_1B211F8AC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B211F960(uint64_t a1)
{
  char *v1;

  sub_1B1DB65EC(a1, *v1);
}

uint64_t sub_1B211F968@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2127CFC();
  *a1 = result;
  return result;
}

uint64_t sub_1B211F994()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B211F9CC + 4 * byte_1B22C03A7[*v0]))();
}

void sub_1B211F9CC(_QWORD *a1@<X8>)
{
  *a1 = 1145656661;
  a1[1] = 0xE400000000000000;
}

void sub_1B211F9E0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6F6973726556;
  a1[1] = 0xE700000000000000;
}

void sub_1B211F9FC(_QWORD *a1@<X8>)
{
  *a1 = 0x74726F7078457349;
  a1[1] = 0xEA00000000006465;
}

void sub_1B211FA1C(_QWORD *a1@<X8>)
{
  *a1 = 0x325846567349;
  a1[1] = 0xE600000000000000;
}

void sub_1B211FA34(char *a1@<X8>)
{
  strcpy(a1, "VersionHistory");
  a1[15] = -18;
}

void sub_1B211FA5C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "SceneFilename");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1B211FA84()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B211FABC + 4 * byte_1B22C03AE[*v0]))(0x4E7463656A6F7250, 0xEB00000000656D61);
}

uint64_t sub_1B211FABC()
{
  return 1145656661;
}

uint64_t sub_1B211FACC()
{
  return 0x6E6F6973726556;
}

uint64_t sub_1B211FAE4()
{
  return 0x74726F7078457349;
}

uint64_t sub_1B211FB00()
{
  return 0x325846567349;
}

uint64_t sub_1B211FB14()
{
  return 0x486E6F6973726556;
}

uint64_t sub_1B211FB38()
{
  return 0x6C6946656E656353;
}

uint64_t sub_1B211FB5C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2127CFC();
  *a1 = result;
  return result;
}

uint64_t sub_1B211FB80()
{
  sub_1B2127820();
  return sub_1B222A1D4();
}

uint64_t sub_1B211FBA8()
{
  sub_1B2127820();
  return sub_1B222A1E0();
}

uint64_t sub_1B211FBD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int *v46;
  int *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t i;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char v69;
  char v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  char v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  _OWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;

  v108 = a2;
  sub_1B1792854(0, (unint64_t *)&qword_1ED4B7B50, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v104 - v5;
  v7 = sub_1B222826C();
  v113 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v109 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2127C5C(0, &qword_1ED4BAA30, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v13);
  v15 = (char *)&v104 - v14;
  v16 = type metadata accessor for BundleInfo();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (uint64_t *)((char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v19 = 0;
  v19[1] = 0;
  v112 = (uint64_t)v20;
  v21 = v19;
  v22 = (_QWORD *)((char *)v19 + v20[10]);
  *v22 = 0;
  v22[1] = 0;
  v110 = v22;
  v23 = a1[3];
  v114 = a1;
  sub_1B19FA070(a1, v23);
  sub_1B2127820();
  v24 = v111;
  sub_1B222A150();
  if (!v24)
  {
    v106 = v6;
    v107 = v12;
    LOBYTE(v116) = 1;
    sub_1B19E52CC(&qword_1ED4B7B48, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v32 = v109;
    sub_1B2229814();
    v30 = (int *)v112;
    v28 = v21;
    v33 = (char *)v21 + *(int *)(v112 + 20);
    v34 = v113;
    (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v33, v32, v7);
    LOBYTE(v116) = 2;
    v35 = v15;
    v36 = sub_1B22297FC();
    v37 = v7;
    *(_QWORD *)((char *)v28 + v30[6]) = v36;
    v38 = v36;
    sub_1B1A02758(0, &qword_1ED4BA4D0, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    LOBYTE(v117) = 5;
    sub_1B1E0F9FC();
    sub_1B2229814();
    v39 = v35;
    v109 = 0;
    v111 = v38;
    v105 = v11;
    v53 = v116;
    v54 = sub_1B2228CD4();
    v117 = v54;
    v55 = *(_QWORD *)(v53 + 16);
    if (v55)
    {
      for (i = 0; i != v55; ++i)
      {
        v57 = *(_QWORD *)(v53 + 8 * i + 32);
        sub_1B1B8A534(&v115, v57);
      }
      swift_bridgeObjectRelease();
      v58 = v117;
      v30 = (int *)v112;
    }
    else
    {
      v58 = v54;
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)((char *)v28 + v30[9]) = v58;
    v27 = (uint64_t)v114;
    v67 = v109;
    if (v111 >= 1023)
    {
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      LOBYTE(v117) = 0;
      sub_1B1D8EC74(&qword_1ED4BA2B8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEE9A0]);
      sub_1B2229814();
      if (v67)
      {
        v109 = v67;
        LODWORD(v111) = 99;
        v51 = v105;
        v34 = v113;
        goto LABEL_4;
      }
      v72 = (int *)*((_QWORD *)&v116 + 1);
      *v28 = v116;
      v28[1] = v72;
      v112 = (uint64_t)v72;
      if ((unint64_t)v111 >= 0x421)
      {
        LOBYTE(v116) = 3;
        v79 = sub_1B22297D8();
        *((_BYTE *)v28 + v30[7]) = v79 & 1;
        if ((unint64_t)v111 >= 0x7D9)
        {
          LOBYTE(v117) = 6;
          sub_1B2229814();
          *v110 = v116;
          v51 = v105;
          v34 = v113;
          goto LABEL_36;
        }
        v51 = v105;
        v34 = v113;
LABEL_35:
        v68 = v110;
        *(_QWORD *)v110 = 0;
        *((_QWORD *)v68 + 1) = 0;
LABEL_36:
        LOBYTE(v116) = 4;
        v69 = sub_1B2229784();
        if (!v67)
        {
          v49 = v39;
          v70 = v69 & 1;
          v71 = v108;
          v50 = v111;
LABEL_83:
          *((_BYTE *)v28 + v30[8]) = v70;
          sub_1B1B8A534((uint64_t *)&v116, v50);
          (*(void (**)(char *, uint64_t))(v107 + 8))(v49, v51);
          sub_1B2127CB8((uint64_t)v28, v71);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v27);
          return sub_1B1B8A68C((uint64_t)v28);
        }
        swift_bridgeObjectRelease();
        LODWORD(v111) = 99;
        v109 = v67;
LABEL_4:
        *v28 = 0;
        v28[1] = 0;
        LOBYTE(v116) = 1;
        sub_1B22297CC();
        v40 = v51;
        v41 = v39;
        v42 = v37;
        v43 = (uint64_t)v106;
        sub_1B2228218();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v43, 1, v42);
        v44 = (char *)v28 + v30[5];
        if ((v111 & 2) != 0)
          (*(void (**)(char *, uint64_t))(v34 + 8))((char *)v28 + v30[5], v42);
        (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v44, v106, v42);
        LOBYTE(v116) = 2;
        v45 = sub_1B22297CC();
        v48 = v46;
        v49 = v41;
        if (v45 == 3157553 && v46 == (int *)0xE300000000000000)
        {

          swift_bridgeObjectRelease();
          v50 = 1000;
          v51 = v40;
          v27 = (uint64_t)v114;
LABEL_80:
          *(_QWORD *)((char *)v28 + v30[6]) = v50;
          v87 = v30[9];
          v71 = v108;
          if ((v111 & 0x20) != 0)
          {
            v88 = v50;
            swift_bridgeObjectRelease();
            v50 = v88;
          }
          v70 = 0;
          *(_QWORD *)((char *)v28 + v87) = MEMORY[0x1E0DEE9E8];
          *((_BYTE *)v28 + v30[7]) = 0;
          goto LABEL_83;
        }
        v52 = v45;
        v51 = v40;
        if ((sub_1B2229D24() & 1) != 0)
        {

          swift_bridgeObjectRelease();
          v50 = 1000;
          v27 = (uint64_t)v114;
          goto LABEL_80;
        }
        v59 = ((unint64_t)v48 >> 56) & 0xF;
        v60 = v52 & 0xFFFFFFFFFFFFLL;
        v112 = (uint64_t)v48;
        if (((unint64_t)v48 & 0x2000000000000000) != 0)
          v61 = ((unint64_t)v48 >> 56) & 0xF;
        else
          v61 = v52 & 0xFFFFFFFFFFFFLL;
        v27 = (uint64_t)v114;
        if (!v61)
          goto LABEL_93;
        v62 = v112;
        if ((v112 & 0x1000000000000000) != 0)
        {
          v106 = (char *)v52;
          swift_bridgeObjectRetain();
          v93 = sub_1B1DCCE40((uint64_t)v106, v62, 10);
          v95 = v94;
          swift_bridgeObjectRelease();
          if ((v95 & 1) == 0)
          {
            v66 = v93;
            goto LABEL_79;
          }
          goto LABEL_93;
        }
        if ((v112 & 0x2000000000000000) == 0)
        {
          if ((v52 & 0x1000000000000000) != 0)
            v63 = (unsigned __int8 *)((v112 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v63 = (unsigned __int8 *)sub_1B22294FC();
          v64 = sub_1B1DCCD48(v63, v60, 10);
          if ((v65 & 1) == 0)
          {
            v66 = v64;
LABEL_79:
            v86 = v66;

            swift_bridgeObjectRelease();
            v50 = v86;
            goto LABEL_80;
          }
LABEL_93:
          *(_QWORD *)&v116 = 0;
          *((_QWORD *)&v116 + 1) = 0xE000000000000000;
          sub_1B2229430();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v116 = 0xD000000000000018;
          *((_QWORD *)&v116 + 1) = 0x80000001B234D2D0;
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v96 = v42;
          v97 = v49;
          v98 = v51;
          v100 = *((_QWORD *)&v116 + 1);
          v99 = v116;
          sub_1B1B6AE48();
          swift_allocError();
          *(_QWORD *)v101 = v99;
          *(_QWORD *)(v101 + 8) = v100;
          *(_BYTE *)(v101 + 16) = 32;
          swift_willThrow();

          v102 = v96;
          v31 = v113;
          v103 = v98;
          v29 = v102;
          (*(void (**)(char *, uint64_t))(v107 + 8))(v97, v103);
          v26 = (v111 >> 5) & 1;
          v25 = 1;
          goto LABEL_7;
        }
        *(_QWORD *)&v116 = v52;
        *((_QWORD *)&v116 + 1) = v112 & 0xFFFFFFFFFFFFFFLL;
        if (v52 == 43)
        {
          if (v59 == 1)
            goto LABEL_95;
          if ((BYTE1(v52) - 48) > 9u)
            goto LABEL_62;
          v66 = (BYTE1(v52) - 48);
          if (v59 != 2)
          {
            if ((BYTE2(v52) - 48) > 9u)
              goto LABEL_62;
            v66 = 10 * (BYTE1(v52) - 48) + (BYTE2(v52) - 48);
            v73 = v59 - 3;
            if (v59 != 3)
            {
              v74 = (unsigned __int8 *)&v116 + 3;
              while (1)
              {
                v75 = *v74 - 48;
                if (v75 > 9)
                  goto LABEL_62;
                v76 = (unsigned __int128)(v66 * (__int128)10) >> 64;
                v77 = 10 * v66;
                if (v76 != v77 >> 63)
                  goto LABEL_62;
                v78 = __OFADD__(v77, v75);
                v66 = v77 + v75;
                if (v78)
                  goto LABEL_62;
                LOBYTE(v59) = 0;
                ++v74;
                if (!--v73)
                  goto LABEL_78;
              }
            }
          }
        }
        else
        {
          if (v52 == 45)
          {
            if (v59 != 1)
            {
              if ((BYTE1(v52) - 48) <= 9u)
              {
                if (v59 == 2)
                {
                  LOBYTE(v59) = 0;
                  v66 = -(uint64_t)(BYTE1(v52) - 48);
                  goto LABEL_78;
                }
                if ((BYTE2(v52) - 48) <= 9u)
                {
                  v66 = -10 * (BYTE1(v52) - 48) - (BYTE2(v52) - 48);
                  v85 = v59 - 3;
                  if (v59 == 3)
                    goto LABEL_77;
                  v89 = (unsigned __int8 *)&v116 + 3;
                  while (1)
                  {
                    v90 = *v89 - 48;
                    if (v90 > 9)
                      break;
                    v91 = (unsigned __int128)(v66 * (__int128)10) >> 64;
                    v92 = 10 * v66;
                    if (v91 != v92 >> 63)
                      break;
                    v78 = __OFSUB__(v92, v90);
                    v66 = v92 - v90;
                    if (v78)
                      break;
                    LOBYTE(v59) = 0;
                    ++v89;
                    if (!--v85)
                      goto LABEL_78;
                  }
                }
              }
LABEL_62:
              v66 = 0;
              LOBYTE(v59) = 1;
              goto LABEL_78;
            }
LABEL_95:
            v66 = 0;
LABEL_78:
            if ((v59 & 1) == 0)
              goto LABEL_79;
            goto LABEL_93;
          }
          if (!v59 || (v52 - 48) > 9u)
            goto LABEL_62;
          v66 = (v52 - 48);
          if (v59 != 1)
          {
            if ((BYTE1(v52) - 48) > 9u)
              goto LABEL_62;
            v66 = 10 * (v52 - 48) + (BYTE1(v52) - 48);
            v80 = v59 - 2;
            if (v59 != 2)
            {
              v81 = (unsigned __int8 *)&v116 + 2;
              while (1)
              {
                v82 = *v81 - 48;
                if (v82 > 9)
                  goto LABEL_62;
                v83 = (unsigned __int128)(v66 * (__int128)10) >> 64;
                v84 = 10 * v66;
                if (v83 != v84 >> 63)
                  goto LABEL_62;
                v78 = __OFADD__(v84, v82);
                v66 = v84 + v82;
                if (v78)
                  goto LABEL_62;
                LOBYTE(v59) = 0;
                ++v81;
                if (!--v80)
                  goto LABEL_78;
              }
            }
          }
        }
LABEL_77:
        LOBYTE(v59) = 0;
        goto LABEL_78;
      }
      v34 = v113;
    }
    else
    {
      v112 = 0;
      *v28 = 0;
      v28[1] = 0;
    }
    *((_BYTE *)v28 + v30[7]) = 0;
    v51 = v105;
    goto LABEL_35;
  }
  v25 = 0;
  v26 = 0;
  v27 = (uint64_t)v114;
  v28 = v21;
  v29 = v7;
  v30 = (int *)v112;
  v31 = v113;
LABEL_7:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v27);
  swift_bridgeObjectRelease();
  if (v25)
    (*(void (**)(char *, uint64_t))(v31 + 8))((char *)v28 + v30[5], v29);
  if (v26)
    swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2120768(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  _QWORD v13[2];
  __int128 v14;
  char v15;

  v3 = v1;
  sub_1B2127C5C(0, &qword_1EEF63C60, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2127820();
  sub_1B222A180();
  v14 = *v3;
  v15 = 0;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1D8EC74(&qword_1EEF5D590, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEE988]);
  sub_1B2229958();
  if (!v2)
  {
    v11 = (int *)type metadata accessor for BundleInfo();
    LOBYTE(v14) = 3;
    sub_1B222991C();
    LOBYTE(v14) = 4;
    sub_1B222991C();
    v13[1] = (char *)v3 + v11[5];
    LOBYTE(v14) = 1;
    sub_1B222826C();
    sub_1B19E52CC(&qword_1EEF5C600, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    sub_1B2229958();
    LOBYTE(v14) = 2;
    sub_1B2229940();
    *(_QWORD *)&v14 = *(_QWORD *)((char *)v3 + v11[9]);
    v15 = 5;
    sub_1B1EB6008();
    sub_1B2127864();
    sub_1B2229958();
    v14 = *(__int128 *)((char *)v3 + v11[10]);
    v15 = 6;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B2120A34@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B211FBD0(a1, a2);
}

uint64_t sub_1B2120A48(_QWORD *a1)
{
  return sub_1B2120768(a1);
}

uint64_t sub_1B2120A5C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v75;
  char *v76;
  int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;

  v7 = v6;
  v77 = a6;
  v88 = a4;
  v81 = a3;
  v83 = a1;
  v10 = sub_1B2228110();
  v86 = *(_QWORD *)(v10 - 8);
  v87 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v79 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v85 = (char *)&v75 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v76 = (char *)&v75 - v18;
  v19 = MEMORY[0x1E0DEE9D8];
  v96 = MEMORY[0x1E0DEE9D8];
  v20 = *(_QWORD *)(a5 + 56);
  v80 = a5 + 56;
  v21 = 1 << *(_BYTE *)(a5 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v24 = (unint64_t)(v21 + 63) >> 6;
  swift_bridgeObjectRetain();
  v25 = 0;
  v82 = v24;
  v75 = v24 - 5;
  v91 = a5;
  v78 = a5 + 96;
  v84 = a2;
  if (!v23)
    goto LABEL_5;
LABEL_4:
  v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v27 = v26 | (v25 << 6);
  while (1)
  {
    LOWORD(v92) = *(_WORD *)(*(_QWORD *)(v91 + 48) + 2 * v27);
    type metadata accessor for XcodeCommandBuilder();
    v31 = swift_allocObject();
    v32 = sub_1B1BD4F68((unsigned __int8 *)&v92);
    if (!v32)
      goto LABEL_43;
    v33 = v32;
    v34 = *(_QWORD **)(v32 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v33 + 32) = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v34 = sub_1B1C63044(0, v34[2] + 1, 1, v34);
      *(_QWORD *)(v33 + 32) = v34;
    }
    v37 = v34[2];
    v36 = v34[3];
    if (v37 >= v36 >> 1)
    {
      v34 = sub_1B1C63044(v36 > 1, v37 + 1, 1, v34);
      *(_QWORD *)(v33 + 32) = v34;
    }
    v34[2] = v37 + 1;
    v38 = &v34[2 * v37];
    v38[4] = 5785174;
    v38[5] = 0xE300000000000000;
    v89 = v25;
    v90 = v19;
    if (a2)
    {
      type metadata accessor for SwiftCodeLoader();
      v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = 0u;
      *(_OWORD *)(v31 + 32) = 0u;
      *(_QWORD *)(v31 + 48) = 0;
      *(_BYTE *)(v31 + 56) = 1;
      *(_QWORD *)(v31 + 64) = 0;
      *(_QWORD *)(v31 + 72) = 0;
      *(_QWORD *)(v31 + 80) = v33;
      swift_retain();
      v39 = sub_1B203B918(v83, a2, 6972015, 0xE300000000000000);
      if (v7)
      {
        swift_release();
        swift_release();
LABEL_58:
        swift_release();
        sub_1B21216A4((uint64_t *)&v96);
        goto LABEL_68;
      }
      sub_1B203C6C0((uint64_t)v39, v40);
      v7 = 0;
      v41 = v94;
      v42 = v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v43 = sub_1B1C63044(0, 1, 1, MEMORY[0x1E0DEE9D8]);
      v45 = v43[2];
      v44 = v43[3];
      if (v45 >= v44 >> 1)
        v43 = sub_1B1C63044(v44 > 1, v45 + 1, 1, v43);
      v43[2] = v45 + 1;
      v46 = &v43[2 * v45];
      v46[4] = v41;
      v46[5] = v42;
      swift_release();
    }
    else
    {
      v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    type metadata accessor for CCodeLoader();
    v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = 0u;
    *(_OWORD *)(v47 + 32) = 0u;
    *(_QWORD *)(v47 + 48) = 0;
    *(_BYTE *)(v47 + 56) = 1;
    *(_QWORD *)(v47 + 64) = 0;
    *(_QWORD *)(v47 + 72) = 0;
    *(_QWORD *)(v47 + 80) = v33;
    swift_retain();
    if (v88)
    {
      v31 = v47;
      v48 = sub_1B203B918(v81, v88, 6972015, 0xE300000000000000);
      if (v7)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_67;
      }
      sub_1B203CCB4((uint64_t)v48, v49);
      v7 = 0;
      v50 = v94;
      v51 = v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v43 = sub_1B1C63044(0, v43[2] + 1, 1, v43);
      v53 = v43[2];
      v52 = v43[3];
      if (v53 >= v52 >> 1)
        v43 = sub_1B1C63044(v52 > 1, v53 + 1, 1, v43);
      v43[2] = v53 + 1;
      v54 = &v43[2 * v53];
      v54[4] = v50;
      v54[5] = v51;
    }
    v55 = swift_bridgeObjectRetain();
    v31 = v47;
    sub_1B203BCDC(v55);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
      goto LABEL_67;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v91 + 16) == 1)
    {
      if ((v77 & 1) == 0)
      {
        swift_release();
        v31 = *(_QWORD *)(v47 + 32);
        swift_bridgeObjectRetain();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B21216A4((uint64_t *)&v96);
        goto LABEL_68;
      }
      swift_bridgeObjectRetain();
      v60 = v76;
      sub_1B2228050();
      swift_bridgeObjectRelease();
      if (qword_1ED4BF430 != -1)
        swift_once();
      v92 = 0;
      v93 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v92 = 0xD000000000000013;
      v93 = 0x80000001B234D380;
      sub_1B222805C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v61 = v92;
      v62 = v93;
      v63 = sub_1B2228E84();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v92 = 0;
      swift_retain();
      sub_1B1F1AD70(v63, &v92, v61, v62);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B1BD6EF0();
      v31 = v64;
      swift_bridgeObjectRelease();
      sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B1D1257C();
      swift_allocError();
      *(_QWORD *)v65 = 0xD000000000000027;
      *(_QWORD *)(v65 + 8) = 0x80000001B2348570;
      *(_QWORD *)(v65 + 16) = 0;
      *(_QWORD *)(v65 + 24) = 0;
      *(_BYTE *)(v65 + 32) = 3;
      swift_willThrow();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v60, v87);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v56 = v85;
    sub_1B2228050();
    swift_bridgeObjectRelease();
    v19 = v90;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = sub_1B1C64A88(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
    a2 = v84;
    v58 = *(_QWORD *)(v19 + 16);
    v57 = *(_QWORD *)(v19 + 24);
    if (v58 >= v57 >> 1)
      v19 = sub_1B1C64A88(v57 > 1, v58 + 1, 1, v19);
    *(_QWORD *)(v19 + 16) = v58 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v86 + 32))(v19+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(_QWORD *)(v86 + 72) * v58, v56, v87);
    swift_release();
    swift_release();
    v96 = v19;
    v25 = v89;
    if (v23)
      goto LABEL_4;
LABEL_5:
    v28 = v25 + 1;
    if (v25 + 1 >= v82)
    {
      v29 = v79;
      goto LABEL_55;
    }
    v29 = v79;
    v30 = *(_QWORD *)(v80 + 8 * v28);
    if (!v30)
    {
      v28 = v25 + 2;
      if (v25 + 2 >= v82)
        goto LABEL_55;
      v30 = *(_QWORD *)(v80 + 8 * v28);
      if (!v30)
      {
        v28 = v25 + 3;
        if (v25 + 3 >= v82)
          goto LABEL_55;
        v30 = *(_QWORD *)(v80 + 8 * v28);
        if (!v30)
        {
          v28 = v25 + 4;
          if (v25 + 4 >= v82)
            goto LABEL_55;
          v30 = *(_QWORD *)(v80 + 8 * v28);
          if (!v30)
            break;
        }
      }
    }
LABEL_16:
    v23 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v28 << 6);
    v25 = v28;
  }
  while (v75 != v25)
  {
    v30 = *(_QWORD *)(v78 + 8 * v25++);
    if (v30)
    {
      v28 = v25 + 4;
      goto LABEL_16;
    }
  }
LABEL_55:
  swift_release();
  type metadata accessor for SwiftCodeLoader();
  v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = 0u;
  *(_OWORD *)(v66 + 32) = 0u;
  *(_QWORD *)(v66 + 48) = 0;
  *(_BYTE *)(v66 + 56) = 1;
  *(_QWORD *)(v66 + 72) = 0;
  *(_QWORD *)(v66 + 80) = 0;
  *(_QWORD *)(v66 + 64) = 0;
  LOWORD(v92) = 256;
  type metadata accessor for XcodeCommandBuilder();
  v31 = swift_allocObject();
  v67 = sub_1B1BD4F68((unsigned __int8 *)&v92);
  if (!v67)
  {
LABEL_43:
    sub_1B1B63B64();
    swift_allocError();
    *v59 = 0;
    v59[1] = 0;
    swift_willThrow();
    goto LABEL_66;
  }
  *(_QWORD *)(v66 + 80) = v67;
  swift_retain();
  v68 = swift_bridgeObjectRetain();
  v31 = v66;
  sub_1B203C2D8(v68);
  if (v7)
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_58;
  }
  swift_bridgeObjectRelease();
  if ((v77 & 1) != 0)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v92 = 0;
    v93 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v92 = 0xD000000000000013;
    v93 = 0x80000001B234D380;
    sub_1B222805C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v69 = v92;
    v70 = v93;
    v71 = sub_1B2228E84();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v92 = 0;
    swift_retain();
    sub_1B1F1AD70(v71, &v92, v69, v70);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B1BD6EF0();
    v31 = v72;
    swift_bridgeObjectRelease();
    sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1D1257C();
    swift_allocError();
    *(_QWORD *)v73 = 0xD000000000000027;
    *(_QWORD *)(v73 + 8) = 0x80000001B2348570;
    *(_QWORD *)(v73 + 16) = 0;
    *(_QWORD *)(v73 + 24) = 0;
    *(_BYTE *)(v73 + 32) = 3;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v29, v87);
    swift_release();
LABEL_66:
    swift_release();
LABEL_67:
    sub_1B21216A4((uint64_t *)&v96);
    goto LABEL_68;
  }
  v31 = sub_1B22280D4();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v29, v87);
  sub_1B21216A4((uint64_t *)&v96);
LABEL_68:
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t sub_1B21216A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  id v16;
  void *v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  id v19;
  void *v20;
  unsigned int v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  id v27[2];

  v27[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = sub_1B2228110();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, v7);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v24 - v10;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 16);
  v24 = *a1;
  if (v13)
  {
    v14 = v12 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v25 = *(_QWORD *)(v3 + 72);
    v26 = v15;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      v26(v11, v14, v2);
      v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v18(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      v19 = objc_msgSend((id)objc_opt_self(), sel_defaultManager, v24);
      v20 = (void *)sub_1B2228074();
      v27[0] = 0;
      v21 = objc_msgSend(v19, sel_removeItemAtURL_error_, v20, v27);

      if (v21)
      {
        v22 = v27[0];
      }
      else
      {
        v16 = v27[0];
        v17 = (void *)sub_1B2227FB4();

        swift_willThrow();
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      v14 += v25;
      if (!--v13)
        goto LABEL_9;
    }
  }
  else
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    swift_bridgeObjectRetain_n();
LABEL_9:
    v18(v11, 1, 1, v2);
  }
  return swift_bridgeObjectRelease_n();
}

double sub_1B21218F8()
{
  uint64_t v0;
  double result;

  *(_DWORD *)(v0 + 16) = 0;
  *(_QWORD *)&result = 16777217;
  *(_DWORD *)(v0 + 20) = 16777217;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  return result;
}

void sub_1B2121914(_BYTE *a1)
{
  id v1;
  void *v2;
  unsigned int v3;
  id v4;
  id v5;
  void *v6;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x1E0C80C00];
  if (*a1 == 1)
  {
    v1 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v2 = (void *)sub_1B2228074();
    v7[0] = 0;
    v3 = objc_msgSend(v1, sel_removeItemAtURL_error_, v2, v7);

    if (v3)
    {
      v4 = v7[0];
    }
    else
    {
      v5 = v7[0];
      v6 = (void *)sub_1B2227FB4();

      swift_willThrow();
    }
  }
}

void sub_1B2121A2C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  void (*v21)(char *, uint64_t);
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  id v27;
  void *v28;
  unint64_t v29;
  uint64_t *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;

  v40 = a3;
  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v37 - v13;
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v19 = (char *)v37 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v20((char *)v37 - v18, a1, v6, v17);
  if (a2)
  {
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v22 = a2;
    v21(v19, v6);
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v20)(v14, v19, v6);
    v31 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
    v32 = sub_1B21278BC((uint64_t)v14, 0);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
      return;
    }
    v22 = v32;
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v19, v6);
  }
  v23 = objc_msgSend(v22, sel_fileWrappers);
  if (!v23)
    goto LABEL_12;
  sub_1B1B9DAD4(0, &qword_1ED4BA680);
  v24 = sub_1B2228530();

  if (!*(_QWORD *)(v24 + 16) || (v25 = sub_1B1DC3B00(0x6F736A2E6F666E69, 0xE90000000000006ELL), (v26 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v23 = 0;
    goto LABEL_12;
  }
  v23 = *(id *)(*(_QWORD *)(v24 + 56) + 8 * v25);
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v23, sel_regularFileContents);
  if (!v27)
  {
LABEL_12:
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v33 = 0xD000000000000022;
    *(_QWORD *)(v33 + 8) = 0x80000001B234D8B0;
    *(_BYTE *)(v33 + 16) = 96;
    swift_willThrow();
    goto LABEL_13;
  }
  v28 = v27;
  v38 = sub_1B222817C();
  v39 = v29;

  sub_1B2227CB4();
  swift_allocObject();
  v37[1] = sub_1B2227CA8();
  type metadata accessor for BundleInfo();
  sub_1B19E52CC(&qword_1ED4B7BB8, (uint64_t (*)(uint64_t))type metadata accessor for BundleInfo, (uint64_t)&unk_1B22C0480);
  v30 = v40;
  sub_1B2227C84();
  if (v3)
  {
    swift_release();
    sub_1B1A0DADC(v38, v39);
LABEL_13:

    return;
  }
  if (v30[1])
  {
    swift_release();

    sub_1B1A0DADC(v38, v39);
  }
  else
  {
    sub_1B222808C();
    v34 = sub_1B222805C();
    v36 = v35;
    swift_release();
    sub_1B1A0DADC(v38, v39);

    v21(v10, v6);
    swift_bridgeObjectRelease();
    *v30 = v34;
    v30[1] = v36;
  }
}

uint64_t sub_1B2121D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v35;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v35 - v6;
  v8 = sub_1B2228110();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v35 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&v35 - v16, a1, v8, v15);
  if (sub_1B222805C() == 47 && v18 == 0xE100000000000000)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v20 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
    sub_1B222805C();
    v21 = sub_1B2228920();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
      sub_1B222805C();
      v22 = sub_1B2228920();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
        while (1)
        {
          sub_1B22280B0();
          (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v17, v12, v8);
          if (sub_1B222805C() == 47 && v23 == 0xE100000000000000)
            goto LABEL_14;
          v24 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0)
          {
            sub_1B222805C();
            v25 = sub_1B2228920();
            swift_bridgeObjectRelease();
            if ((v25 & 1) == 0)
            {
              sub_1B222805C();
              v26 = sub_1B2228920();
              swift_bridgeObjectRelease();
              if ((v26 & 1) == 0)
                continue;
            }
          }
          break;
        }
      }
    }
  }
LABEL_15:
  v27 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
  v28 = (void *)sub_1B2228074();
  v29 = objc_msgSend(v27, sel_initWithURL_, v28);

  if (v29)
  {
    v30 = (void *)sub_1B2228728();
    v31 = (void *)sub_1B2228728();
    v32 = objc_msgSend(v29, sel_URLForResource_withExtension_, v30, v31);

    if (v32)
    {
      sub_1B22280C8();

      v33 = 0;
    }
    else
    {
      v33 = 1;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v33, 1, v8);
    return sub_1B1A0F584((uint64_t)v7, a2);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1, 1, v8);
  }
}

void (*sub_1B2122140(uint64_t a1, char *a2, char *a3, unint64_t a4, unint64_t a5))(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, unint64_t, uint64_t);
  NSObject *v95;
  os_signpost_type_t v96;
  char *v97;
  uint64_t v98;
  uint8_t *v99;
  os_signpost_id_t v100;
  uint8_t *v101;
  void (*v102)(char *, uint64_t);
  void (*v103)(char *, unint64_t, uint64_t);
  id v104;
  id v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, char *, uint64_t);
  void (*v113)(char *, uint64_t);
  NSObject *v114;
  char *v115;
  os_signpost_type_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  const char *v124;
  id v125;
  uint64_t v126;
  id v127;
  void (*v128)(char *, uint64_t);
  NSObject *v129;
  char *v130;
  os_signpost_type_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  const char *v136;
  int v137;
  uint64_t v138;
  int v139;
  char *v140;
  int v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  char *v146;
  os_signpost_type_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  const char *v151;
  int v152;
  uint64_t v153;
  int *v154;
  char v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint8_t *v159;
  os_signpost_id_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  char *v166;
  uint64_t v167;
  uint8_t *v168;
  os_signpost_id_t v169;
  uint8_t *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  id v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  char v179;
  char *v180;
  char *v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  NSObject *v187;
  char *v188;
  os_signpost_type_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  const char *v193;
  int v194;
  id v195;
  void *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  unsigned __int8 *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  uint64_t *v217;
  uint64_t v218;
  void (*v219)(char *, char *, uint64_t);
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  char *v225;
  os_signpost_type_t v226;
  char v227;
  uint64_t v228;
  char *v229;
  void (*v230)(char *, char *, uint64_t);
  char *v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  char *v242;
  uint64_t *v243;
  uint64_t v244;
  char *v245;
  uint8_t *v246;
  os_signpost_id_t v247;
  char *v248;
  void (*v249)(char *, uint64_t);
  char *v250;
  uint64_t v251;
  uint8_t *v252;
  os_signpost_id_t v253;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unsigned __int8 *v268;
  int v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  char *v276;
  NSObject *v277;
  char *v278;
  os_signpost_type_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  os_signpost_type_t v286;
  char v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  char *v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  char *v301;
  _QWORD *v302;
  NSObject *v303;
  char *v304;
  os_signpost_type_t v305;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  uint64_t v310;
  const char *v311;
  char *v312;
  uint8_t *v313;
  os_signpost_id_t v314;
  char *v315;
  char *v316;
  char *v317;
  uint8_t *v318;
  os_signpost_id_t v319;
  char *v320;
  void (*v321)(char *, uint64_t);
  uint8_t *v322;
  os_signpost_id_t v323;
  void (*v324)(char *, uint64_t);
  char *v325;
  char *v326;
  uint8_t *v327;
  os_signpost_id_t v328;
  uint64_t v329;
  void (*v330)(char *, uint64_t);
  uint64_t v331;
  void (*v332)(char *, char *, uint64_t);
  void (*v333)(char *, uint64_t);
  char *v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  uint64_t v346;
  char *v347;
  unint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  char *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  char *v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unsigned __int8 *v368;
  char *v369;
  uint64_t v370;
  uint64_t v371;
  char *v372;
  char *v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;

  v348 = a5;
  v372 = a3;
  v373 = a2;
  v341 = a1;
  v340 = *v5;
  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v7, v8);
  v344 = (char *)&v331 - v9;
  v362 = type metadata accessor for BundleInfo();
  v338 = *(_QWORD *)(v362 - 8);
  MEMORY[0x1E0C80A78](v362, v10);
  v346 = (uint64_t)&v331 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v358 = (uint64_t)&v331 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v360 = (uint64_t)&v331 - v17;
  v339 = v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v375 = (uint64_t *)((char *)&v331 - v21);
  v22 = sub_1B22283BC();
  v366 = *(_QWORD *)(v22 - 8);
  v367 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v335 = (char *)&v331 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v359 = (unint64_t)&v331 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v352 = (char *)&v331 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v353 = (char *)&v331 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v351 = (char *)&v331 - v36;
  MEMORY[0x1E0C80A78](v37, v38);
  v334 = (char *)&v331 - v39;
  MEMORY[0x1E0C80A78](v40, v41);
  v342 = (char *)&v331 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v336 = (char *)&v331 - v45;
  MEMORY[0x1E0C80A78](v46, v47);
  v356 = (char *)&v331 - v48;
  v49 = sub_1B2228110();
  v364 = *(_QWORD *)(v49 - 8);
  v365 = v49;
  MEMORY[0x1E0C80A78](v49, v50);
  v349 = (char *)&v331 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v337 = v51;
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v331 - v54;
  v56 = sub_1B2228380();
  v57 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v58);
  v345 = (char *)&v331 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v60, v61);
  v369 = (char *)&v331 - v62;
  MEMORY[0x1E0C80A78](v63, v64);
  v354 = (char *)&v331 - v65;
  MEMORY[0x1E0C80A78](v66, v67);
  v357 = (char *)&v331 - v68;
  MEMORY[0x1E0C80A78](v69, v70);
  v355 = (char *)&v331 - v71;
  MEMORY[0x1E0C80A78](v72, v73);
  v343 = (char *)&v331 - v74;
  MEMORY[0x1E0C80A78](v75, v76);
  v350 = (char *)&v331 - v77;
  MEMORY[0x1E0C80A78](v78, v79);
  v347 = (char *)&v331 - v80;
  MEMORY[0x1E0C80A78](v81, v82);
  v361 = (char *)&v331 - v83;
  MEMORY[0x1E0C80A78](v84, v85);
  v87 = (char *)&v331 - v86;
  MEMORY[0x1E0C80A78](v88, v89);
  v91 = (char *)&v331 - v90;
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v92 = sub_1B22283B0();
  v93 = sub_1B1B40EC8(v92, (uint64_t)qword_1ED4D0E48);
  v363 = a4;
  v94 = *(void (**)(char *, unint64_t, uint64_t))(v57 + 16);
  v94(v91, a4 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v56);
  v370 = v93;
  v95 = sub_1B2228398();
  v96 = sub_1B2228FA4();
  if ((sub_1B2229094() & 1) != 0)
  {
    v94(v87, (unint64_t)v91, v56);
    v97 = v87;
    v98 = v56;
    v99 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v99 = 0;
    v100 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v95, v96, v100, "VFXLoader.load", "", v99, 2u);
    v101 = v99;
    v56 = v98;
    v87 = v97;
    MEMORY[0x1B5E23F88](v101, -1, -1);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v97, v56);
  }
  else
  {

  }
  v94(v87, (unint64_t)v91, v56);
  sub_1B22283E0();
  swift_allocObject();
  v374 = sub_1B22283D4();
  v102 = *(void (**)(char *, uint64_t))(v57 + 8);
  v371 = v56;
  v102(v91, v56);
  v103 = v94;
  v104 = v372;
  if (v372)
  {
    v105 = v372;
    v106 = v375;
    v107 = v376;
    v108 = (uint64_t)v373;
  }
  else
  {
    v108 = (uint64_t)v373;
    (*(void (**)(char *, char *, uint64_t))(v364 + 16))(v55, v373, v365);
    v125 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
    v126 = v376;
    v127 = sub_1B21278BC((uint64_t)v55, 0);
    if (v126)
    {
      v128 = v102;
      v129 = sub_1B2228398();
      v130 = v361;
      sub_1B22283C8();
      v131 = sub_1B2228F98();
      if ((sub_1B2229094() & 1) != 0)
      {
        v132 = v87;
        swift_retain();
        v133 = v356;
        sub_1B22283EC();
        swift_release();
        v135 = v366;
        v134 = v367;
        if ((*(unsigned int (**)(char *, uint64_t))(v366 + 88))(v133, v367) == *MEMORY[0x1E0DF2190])
        {
          v136 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v135 + 8))(v133, v134);
          v136 = "";
        }
        v166 = v361;
        v167 = v371;
        v94(v132, (unint64_t)v361, v371);
        v168 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v168 = 0;
        v169 = sub_1B2228374();
        _os_signpost_emit_with_name_impl(&dword_1B178D000, v129, v131, v169, "VFXLoader.load", v136, v168, 2u);
        v170 = v168;
        v161 = v167;
        MEMORY[0x1B5E23F88](v170, -1, -1);

        v128(v166, v167);
      }
      else
      {

        v132 = v130;
        v161 = v371;
      }
      goto LABEL_81;
    }
    v105 = v127;
    v107 = 0;
    v106 = v375;
    v104 = v372;
  }
  v109 = v104;
  v110 = (char *)v105;
  v111 = v107;
  sub_1B2121A2C(v108, v105, v106);
  if (v107)
  {
    v112 = (void (*)(char *, char *, uint64_t))v103;
    v113 = v102;

    v114 = sub_1B2228398();
    v115 = v369;
    sub_1B22283C8();
    v116 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      v376 = v111;
      swift_retain();
      v117 = v359;
      sub_1B22283EC();
      v118 = v117;
      swift_release();
      v119 = v366;
      v120 = v117;
      v121 = v367;
      v122 = (*(uint64_t (**)(unint64_t, uint64_t))(v366 + 88))(v120, v367);
      v123 = v371;
      if (v122 == *MEMORY[0x1E0DF2190])
      {
        v124 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(unint64_t, uint64_t))(v119 + 8))(v118, v121);
        v124 = "";
      }
      v156 = v369;
      v112(v87, v369, v123);
      v157 = v87;
      v158 = v123;
      v159 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v159 = 0;
      v160 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v114, v116, v160, "VFXLoader.load", v124, v159, 2u);
      MEMORY[0x1B5E23F88](v159, -1, -1);

      v113(v156, v158);
      v113(v157, v158);
    }
    else
    {

      v113(v115, v371);
    }
    return (void (*)(uint64_t, int, uint64_t))swift_release();
  }

  v137 = v368[19];
  v138 = v360;
  sub_1B2127CB8((uint64_t)v106, v360);
  v333 = v102;
  if (v137 == 1)
  {
    sub_1B1B8A68C(v138);
  }
  else
  {
    v139 = *(unsigned __int8 *)(v363 + OBJC_IVAR____TtC3VFX13EntityManager_isVFX2);
    v140 = v110;
    v141 = *(unsigned __int8 *)(v138 + *(int *)(v362 + 32));
    sub_1B1B8A68C(v138);
    v142 = v139 == v141;
    v110 = v140;
    if (!v142)
    {
      sub_1B1B6AE48();
      v143 = swift_allocError();
      *(_QWORD *)v144 = 0xD000000000000052;
      *(_QWORD *)(v144 + 8) = 0x80000001B234D610;
      *(_BYTE *)(v144 + 16) = 96;
      swift_willThrow();

      sub_1B1B8A68C((uint64_t)v375);
      v145 = sub_1B2228398();
      v146 = v354;
      sub_1B22283C8();
      v147 = sub_1B2228F98();
      if ((sub_1B2229094() & 1) != 0)
      {
        v376 = v143;
        swift_retain();
        v148 = v352;
        sub_1B22283EC();
        swift_release();
        v150 = v366;
        v149 = v367;
        if ((*(unsigned int (**)(char *, uint64_t))(v366 + 88))(v148, v367) == *MEMORY[0x1E0DF2190])
        {
          v151 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v150 + 8))(v148, v149);
          v151 = "";
        }
        v244 = v371;
        v103(v87, (unint64_t)v146, v371);
        v245 = v87;
        v246 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v246 = 0;
        v247 = sub_1B2228374();
        _os_signpost_emit_with_name_impl(&dword_1B178D000, v145, v147, v247, "VFXLoader.load", v151, v246, 2u);
        MEMORY[0x1B5E23F88](v246, -1, -1);

        v248 = v146;
        v249 = v333;
        v333(v248, v244);
        v249(v245, v244);
        return (void (*)(uint64_t, int, uint64_t))swift_release();
      }

      v174 = v146;
      goto LABEL_73;
    }
  }
  v152 = v368[19];
  v153 = v358;
  sub_1B2127CB8((uint64_t)v375, v358);
  v376 = 0;
  if (v152 == 1)
  {
    v154 = (int *)v362;
    v155 = *(_BYTE *)(v153 + *(int *)(v362 + 28)) ^ 1;
  }
  else
  {
    v155 = 0;
    v154 = (int *)v362;
  }
  sub_1B1B8A68C(v153);
  v162 = v363;
  *(_BYTE *)(v363 + 48) = v155 & 1;
  *(_BYTE *)(*(_QWORD *)(v162 + OBJC_IVAR____TtC3VFX13EntityManager_scheduler) + 16) = v155 & 1;
  v163 = v154[7];
  v362 = v154[6];
  v164 = *(uint64_t *)((char *)v375 + v362);
  LODWORD(v163) = *((unsigned __int8 *)v375 + v163);
  v361 = (char *)v164;
  if ((_DWORD)v163 == 1)
  {
    if (v164 >= 1106)
    {
      if ((unint64_t)v164 < 0x7D6)
        v165 = 1;
      else
        v165 = 2;
    }
    else
    {
      v165 = 0;
    }
  }
  else
  {
    v165 = 3;
  }
  v171 = (uint64_t *)((char *)v375 + v154[10]);
  if (!v171[1])
    __asm { BR              X10 }
  v172 = *v171;
  v173 = v171[1];
  swift_bridgeObjectRetain();
  v369 = v110;
  v175 = objc_msgSend(v110, sel_fileWrappers);
  if (v175)
  {
    v176 = v175;
    sub_1B1B9DAD4(0, &qword_1ED4BA680);
    v177 = sub_1B2228530();

    if (*(_QWORD *)(v177 + 16))
    {
      swift_bridgeObjectRetain();
      v178 = sub_1B1DC3B00(v172, v173);
      if ((v179 & 1) != 0)
      {
        v372 = *(char **)(*(_QWORD *)(v177 + 56) + 8 * v178);
        v180 = v372;
      }
      else
      {
        v372 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v372 = 0;
    }
    v181 = v373;
    swift_bridgeObjectRelease();
  }
  else
  {
    v372 = 0;
    v181 = v373;
  }
  swift_bridgeObjectRetain();
  v182 = sub_1B2127D44();
  if (v182 == 5)
  {
    v377 = 0;
    v378 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v377 = 0xD000000000000018;
    v378 = 0x80000001B234D670;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v183 = v377;
    v184 = v378;
    sub_1B1B6AE48();
    v185 = swift_allocError();
    *(_QWORD *)v186 = v183;
    *(_QWORD *)(v186 + 8) = v184;
    *(_BYTE *)(v186 + 16) = 96;
    swift_willThrow();

    sub_1B1B8A68C((uint64_t)v375);
    v187 = sub_1B2228398();
    v188 = v357;
    sub_1B22283C8();
    v189 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      v376 = v185;
      swift_retain();
      v190 = v353;
      sub_1B22283EC();
      swift_release();
      v192 = v366;
      v191 = v367;
      if ((*(unsigned int (**)(char *, uint64_t))(v366 + 88))(v190, v367) == *MEMORY[0x1E0DF2190])
      {
        v193 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v192 + 8))(v190, v191);
        v193 = "";
      }
      v242 = v87;
      v243 = &v381;
LABEL_80:
      v250 = (char *)*(v243 - 32);
      v251 = v371;
      v103(v242, (unint64_t)v250, v371);
      v161 = v251;
      v132 = v87;
      v252 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v252 = 0;
      v253 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v187, v189, v253, "VFXLoader.load", v193, v252, 2u);
      MEMORY[0x1B5E23F88](v252, -1, -1);

      v128 = v333;
      v333(v250, v161);
LABEL_81:
      v128(v132, v161);
      return (void (*)(uint64_t, int, uint64_t))swift_release();
    }
LABEL_72:

    v174 = v188;
LABEL_73:
    v333(v174, v371);
    return (void (*)(uint64_t, int, uint64_t))swift_release();
  }
  if (!v372
    || (v194 = v182, (v195 = objc_msgSend(v372, sel_regularFileContents)) == 0))
  {
    v377 = 0;
    v378 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v377 = 0x742064656C696166;
    v378 = 0xEF2064616F6C206FLL;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v235 = v377;
    v236 = v378;
    sub_1B1B6AE48();
    v237 = swift_allocError();
    *(_QWORD *)v238 = v235;
    *(_QWORD *)(v238 + 8) = v236;
    *(_BYTE *)(v238 + 16) = 96;
    swift_willThrow();

    sub_1B1B8A68C((uint64_t)v375);
    v187 = sub_1B2228398();
    v188 = v355;
    sub_1B22283C8();
    v189 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      v376 = v237;
      swift_retain();
      v239 = v351;
      sub_1B22283EC();
      swift_release();
      v241 = v366;
      v240 = v367;
      if ((*(unsigned int (**)(char *, uint64_t))(v366 + 88))(v239, v367) == *MEMORY[0x1E0DF2190])
      {
        v193 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v241 + 8))(v239, v240);
        v193 = "";
      }
      v242 = v87;
      v243 = &v380;
      goto LABEL_80;
    }
    goto LABEL_72;
  }
  v196 = v195;
  LODWORD(v357) = v194;
  v332 = (void (*)(char *, char *, uint64_t))v103;
  v373 = v87;
  swift_bridgeObjectRelease();
  v197 = sub_1B222817C();
  v359 = v198;

  v200 = *v375;
  v199 = v375[1];
  v201 = qword_1ED4BF430;
  swift_bridgeObjectRetain();
  if (v201 != -1)
    swift_once();
  v358 = v197;
  v377 = 0;
  v378 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v377 = 91;
  v378 = 0xE100000000000000;
  v379 = 2048;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  v360 = v200;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v202 = (uint64_t)v361;
  v379 = (uint64_t)v361;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B22280D4();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v203 = v377;
  v204 = v378;
  v205 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v377 = 0;
  swift_retain();
  sub_1B1F1AD70(v205, &v377, v203, v204);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (v202 >= 2049)
  {
    v377 = 0;
    v378 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    v379 = 2048;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v379 = v202;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v206 = v377;
    v207 = v378;
    v208 = sub_1B2228EA8();
    v377 = 0;
    swift_retain();
    sub_1B1F1AD70(v208, &v377, v206, v207);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v377 = 0;
    v378 = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    v379 = v202;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v379 = 2048;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v210 = v377;
    v209 = v378;
    v211 = v368;
    if ((v368[22] & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1B1B6AE48();
      v284 = swift_allocError();
      *(_QWORD *)v285 = v210;
      *(_QWORD *)(v285 + 8) = v209;
      *(_BYTE *)(v285 + 16) = -96;
      v376 = v284;
      swift_willThrow();
      sub_1B1A0DADC(v358, v359);

      sub_1B1B8A68C((uint64_t)v375);
      v224 = sub_1B2228398();
      v225 = v347;
      sub_1B22283C8();
      v286 = sub_1B2228F98();
      v287 = sub_1B2229094();
      v228 = v371;
      if ((v287 & 1) != 0)
      {
        v288 = v371;
        swift_retain();
        v289 = v336;
        sub_1B22283EC();
        swift_release();
        v291 = v366;
        v290 = v367;
        if ((*(unsigned int (**)(char *, uint64_t))(v366 + 88))(v289, v367) == *MEMORY[0x1E0DF2190])
        {
          v292 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v291 + 8))(v289, v290);
          v292 = "";
        }
        v317 = v347;
        v332(v373, v347, v288);
        v318 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v318 = 0;
        v319 = sub_1B2228374();
        _os_signpost_emit_with_name_impl(&dword_1B178D000, v224, v286, v319, "VFXLoader.load", v292, v318, 2u);
        v320 = v373;
        MEMORY[0x1B5E23F88](v318, -1, -1);

        v321 = v333;
        v333(v317, v288);
        v321(v320, v288);
        return (void (*)(uint64_t, int, uint64_t))swift_release();
      }
      goto LABEL_95;
    }
    v377 = 0;
    v378 = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v212 = v377;
    v213 = v378;
    sub_1B1B6AE48();
    v214 = swift_allocError();
    *(_QWORD *)v215 = v212;
    *(_QWORD *)(v215 + 8) = v213;
    *(_BYTE *)(v215 + 16) = -96;
    v216 = (void *)*((_QWORD *)v211 + 3);
    *((_QWORD *)v211 + 3) = v214;

  }
  v217 = v375;
  v218 = *(uint64_t *)((char *)v375 + v362);
  v219 = v332;
  if (v218 <= 1025)
  {
    v377 = 0;
    v378 = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v379 = v218;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v379 = 1026;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v220 = v377;
    v221 = v378;
    sub_1B1B6AE48();
    v222 = swift_allocError();
    *(_QWORD *)v223 = v220;
    *(_QWORD *)(v223 + 8) = v221;
    *(_BYTE *)(v223 + 16) = -64;
    v376 = v222;
    swift_willThrow();
    sub_1B1A0DADC(v358, v359);

    sub_1B1B8A68C((uint64_t)v217);
    v224 = sub_1B2228398();
    v225 = v350;
    sub_1B22283C8();
    v226 = sub_1B2228F98();
    v227 = sub_1B2229094();
    v228 = v371;
    v229 = v373;
    if ((v227 & 1) != 0)
    {
      v230 = v219;
      swift_retain();
      v231 = v342;
      sub_1B22283EC();
      swift_release();
      v233 = v366;
      v232 = v367;
      if ((*(unsigned int (**)(char *, uint64_t))(v366 + 88))(v231, v367) == *MEMORY[0x1E0DF2190])
      {
        v234 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v233 + 8))(v231, v232);
        v234 = "";
      }
      v312 = v350;
      v230(v229, v350, v228);
      v313 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v313 = 0;
      v314 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v224, v226, v314, "VFXLoader.load", v234, v313, 2u);
      v315 = v373;
      MEMORY[0x1B5E23F88](v313, -1, -1);

      v316 = v312;
      goto LABEL_107;
    }
LABEL_95:

    v333(v225, v228);
    return (void (*)(uint64_t, int, uint64_t))swift_release();
  }
  swift_getKeyPath();
  v255 = *(_QWORD *)(v363 + 176);
  swift_retain();
  v256 = v376;
  v257 = (void *)sub_1B1F22924((uint64_t)&type metadata for AssetManagerInstance, (uint64_t)&off_1E639B010, v255, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1B692E4);
  v258 = v256;
  swift_release();
  swift_release();
  v259 = v348;
  if (v257)
  {
    v376 = v256;
    v260 = v349;
    sub_1B2228098();
    v261 = v364;
    v262 = v365;
    v263 = (uint64_t)v344;
    (*(void (**)(char *, char *, uint64_t))(v364 + 16))(v344, v260, v365);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v261 + 56))(v263, 0, 1, v262);
    sub_1B20E12E8(v263, v259 | ((HIDWORD(v259) & 1) << 32));

    v264 = v260;
    v265 = v262;
    v217 = v375;
    v258 = v376;
    (*(void (**)(char *, uint64_t))(v261 + 8))(v264, v265);
  }
  v266 = (v259 & 0x100000000) >> 32;
  if ((v259 & 0x100000000) != 0)
    v267 = 0;
  else
    v267 = v259;
  v268 = v368;
  v269 = v368[21];
  v270 = v368[20];
  v271 = v368[19];
  v272 = *(uint64_t *)((char *)v217 + v362);
  LODWORD(v361) = v266 & 1 | ((_DWORD)v259 == 0);
  LOBYTE(v377) = v266 & 1 | ((_DWORD)v259 == 0);
  v362 = v267;
  v273 = v358;
  v274 = v359;
  v275 = sub_1B206E0E8(v358, v359, (int)v357, v269, v270, v271, v267 | ((unint64_t)v377 << 32), v272, 0);
  v276 = v373;
  v376 = v258;
  if (v258)
  {
    sub_1B1B8A68C((uint64_t)v217);

    sub_1B1A0DADC(v273, v274);
    swift_bridgeObjectRelease();
    v277 = sub_1B2228398();
    v278 = v345;
    sub_1B22283C8();
    v279 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) == 0)
    {

      v333(v278, v371);
      return (void (*)(uint64_t, int, uint64_t))swift_release();
    }
    swift_retain();
    v280 = v335;
    sub_1B22283EC();
    swift_release();
    v282 = v366;
    v281 = v367;
    if ((*(unsigned int (**)(char *, uint64_t))(v366 + 88))(v280, v367) == *MEMORY[0x1E0DF2190])
    {
      v283 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v282 + 8))(v280, v281);
      v283 = "";
    }
    v228 = v371;
    v332(v276, v278, v371);
    v322 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v322 = 0;
    v323 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v277, v279, v323, "VFXLoader.load", v283, v322, 2u);
    v315 = v373;
    MEMORY[0x1B5E23F88](v322, -1, -1);

    v316 = v278;
LABEL_107:
    v324 = v333;
    v333(v316, v228);
    v324(v315, v228);
    return (void (*)(uint64_t, int, uint64_t))swift_release();
  }
  v293 = v275;

  sub_1B1A0DADC(v273, v274);
  *((_QWORD *)v268 + 4) = v293;
  swift_release();
  sub_1B2127CB8((uint64_t)v217, v346);
  v294 = v364;
  (*(void (**)(char *, char *, uint64_t))(v364 + 16))(v349, v181, v365);
  v295 = (*(unsigned __int8 *)(v338 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v338 + 80);
  v372 = (char *)((v295 + v339 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  v296 = (v295 + v339 + 15) & 0xFFFFFFFFFFFFFFF8;
  v297 = (*(unsigned __int8 *)(v294 + 80) + v296 + 8) & ~(unint64_t)*(unsigned __int8 *)(v294 + 80);
  v298 = (v337 + v297 + 7) & 0xFFFFFFFFFFFFFFF8;
  v363 = (v298 + 23) & 0xFFFFFFFFFFFFFFF8;
  v299 = (v363 + 15) & 0xFFFFFFFFFFFFFFF8;
  v300 = swift_allocObject();
  sub_1B1C2D830(v346, v300 + v295);
  v301 = &v372[v300];
  *(_DWORD *)v301 = v362;
  v301[4] = (char)v361;
  *(_QWORD *)(v300 + v296) = v268;
  (*(void (**)(unint64_t, char *, uint64_t))(v294 + 32))(v300 + v297, v349, v365);
  v302 = (_QWORD *)(v300 + v298);
  *v302 = v360;
  v302[1] = v199;
  *(_QWORD *)(v300 + v363) = v369;
  *(_QWORD *)(v300 + v299) = v340;
  sub_1B1C2D830((uint64_t)v375, v341);
  swift_retain();
  v303 = sub_1B2228398();
  v304 = v343;
  sub_1B22283C8();
  v305 = sub_1B2228F98();
  if ((sub_1B2229094() & 1) != 0)
  {
    swift_retain();
    v306 = v334;
    sub_1B22283EC();
    swift_release();
    v308 = v366;
    v307 = v367;
    v309 = (*(uint64_t (**)(char *, uint64_t))(v366 + 88))(v306, v367);
    v310 = v371;
    if (v309 == *MEMORY[0x1E0DF2190])
    {
      v311 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v308 + 8))(v306, v307);
      v311 = "";
    }
    v325 = v373;
    v326 = v343;
    v332(v373, v343, v310);
    v327 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v327 = 0;
    v328 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v303, v305, v328, "VFXLoader.load", v311, v327, 2u);
    v329 = v371;
    MEMORY[0x1B5E23F88](v327, -1, -1);

    v330 = v333;
    v333(v326, v329);
    v330(v325, v329);
  }
  else
  {

    v333(v304, v371);
  }
  swift_release();
  return sub_1B212A338;
}

void sub_1B2124198(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, _QWORD *a7, _QWORD *a8, uint64_t a9, void *a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  id v39;
  uint64_t v40;
  void *v41;
  id *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  objc_class *v47;
  id v48;
  id v49;
  _UNKNOWN **v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t);
  char *v54;
  objc_class *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  os_unfair_lock_s *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t ObjectType;
  char *v80;
  _UNKNOWN **v81;
  uint64_t *v82;
  void *v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _UNKNOWN **v93;
  char *v94;
  uint64_t v95;
  uint64_t *v96;
  void *v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  int v109;
  char v110;
  char *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  _UNKNOWN **v121;
  char *v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  _QWORD *v131;
  uint64_t v132;
  char *v133;
  void (*v134)(uint64_t, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  objc_super v138;
  objc_super v139;
  _OWORD v140[2];
  uint64_t v141;
  uint64_t v142[12];
  _OWORD v143[2];
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  _OWORD v153[2];
  uint64_t v154;
  _OWORD v155[2];
  uint64_t v156;
  _BYTE v157[40];
  uint64_t v158;
  int v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  void (*v164)(uint64_t, uint64_t, void *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t);

  v11 = v10;
  v115 = a8;
  v117 = a7;
  v119 = a5;
  v120 = a4;
  v116 = type metadata accessor for BundleInfo();
  MEMORY[0x1E0C80A78](v116, v16);
  v18 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1B2228110();
  MEMORY[0x1E0C80A78](v19, v20);
  MEMORY[0x1E0C80A78](v21, v22);
  v118 = (char *)&v111 - v26;
  if ((a2 & 1) != 0)
  {
    if (!qword_1ED4D0EA8)
    {
      sub_1B2229688();
      __break(1u);
      return;
    }
    v122 = v25;
    v136 = v24;
    v137 = v23;
    v112 = a2;
    v113 = a3;
    v114 = a6;
    v27 = *(_QWORD *)(qword_1ED4D0EA8 + 16);
    v132 = a1;
    v111 = v18;
    if (v27)
    {
      v28 = v119;
      v29 = *(_QWORD *)(v120 + *(int *)(v116 + 24));
      v30 = *(unsigned __int8 *)(v120 + *(int *)(v116 + 28));
      v31 = *(unsigned __int8 *)(a6 + 19);
      v135 = OBJC_IVAR____TtC3VFX13EntityManager_world;
      v32 = v30 == 0;
      v33 = 0x1000000000000;
      if (v32)
        v33 = 0;
      v32 = v31 == 0;
      v34 = 0x10000000000;
      if (v32)
        v34 = 0;
      v35 = v34 | v33;
      v36 = (char *)swift_bridgeObjectRetain();
      v37 = v36 + 48;
      v133 = v36;
      v134 = (void (*)(uint64_t, uint64_t, uint64_t, _UNKNOWN **))(v35 | ((HIDWORD(v28) & 1) << 32) | v28);
      while (1)
      {
        if (v29 < *((_QWORD *)v37 - 2))
        {
          v164 = (void (*)(uint64_t, uint64_t, void *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t))*((_QWORD *)v37 - 1);
          v41 = *(void **)(a1 + v135);
          v42 = v41;
          swift_retain();
          if (v41)
          {
            sub_1B193E758(v42);
            swift_unknownObjectRetain();

            objc_opt_self();
            v38 = (void *)swift_dynamicCastObjCClass();
            if (!v38)
              swift_unknownObjectRelease();
          }
          else
          {
            v38 = 0;
          }
          v39 = v38;
          swift_retain();
          a1 = v132;
          v40 = swift_retain();
          v164(v40, a1, v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v134, v29);
          if (v11)
          {
            swift_bridgeObjectRelease();

            swift_release();
            swift_release_n();
            return;
          }
          swift_release();
          swift_release_n();

        }
        v37 += 24;
        if (!--v27)
        {
          swift_bridgeObjectRelease();
          a6 = v114;
          break;
        }
      }
    }
    sub_1B1DA8FBC();
    sub_1B22280A4();
    if ((*(_BYTE *)(a6 + 19) & 1) != 0
      && (swift_getKeyPath(),
          v43 = *(_QWORD *)(a1 + 176),
          swift_retain(),
          v44 = (void *)sub_1B1F22924((uint64_t)&type metadata for AssetManagerInstance, (uint64_t)&off_1E639B010, v43, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1B692E4), swift_release(), swift_release(), v44, v44))
    {
      swift_getKeyPath();
      v45 = *(_QWORD *)(a1 + 176);
      swift_retain();
      v46 = (void *)sub_1B1F22924((uint64_t)&type metadata for AssetManagerInstance, (uint64_t)&off_1E639B010, v45, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1B692E4);
      swift_release();
      swift_release();
      v47 = (objc_class *)type metadata accessor for AssetManagerPathResolver();
      v48 = objc_allocWithZone(v47);
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      v138.receiver = v48;
      v138.super_class = v47;
      v49 = objc_msgSendSuper2(&v138, sel_init);

      v50 = &off_1E63AD240;
    }
    else
    {
      v52 = v136;
      v51 = v137;
      v53 = *(void (**)(uint64_t, char *, uint64_t))(v136 + 16);
      v54 = v122;
      v53((uint64_t)v122, v118, v137);
      v55 = (objc_class *)type metadata accessor for BundleResolver(0);
      v56 = (char *)objc_allocWithZone(v55);
      v53((uint64_t)&v56[OBJC_IVAR____TtC3VFX14BundleResolver_bundle], v54, v51);
      v139.receiver = v56;
      v139.super_class = v55;
      v49 = objc_msgSendSuper2(&v139, sel_init);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v54, v51);
      v50 = &off_1E637E458;
    }
    v121 = v50;
    v164 = (void (*)(uint64_t, uint64_t, void *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t))v49;
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    v158 = qword_1ED4D09F8;
    v159 = 0;
    v160 = 2;
    v161 = 0;
    v162 = 2;
    v163 = 0;
    swift_retain();
    sub_1B1E408FC(2, (uint64_t)v140);
    swift_release();
    v155[0] = v140[0];
    v155[1] = v140[1];
    v156 = v141;
    if ((v119 & 0x100000000) != 0)
      v57 = 0x200000000;
    else
      v57 = v119;
    sub_1B1E8FCE4(a1, (uint64_t)v155, v57, v142);
    v58 = v142[11];
    sub_1B1A18378((uint64_t)v142, (uint64_t)v143, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v143[0])
    {
      v135 = v58;
      v150 = v143[0];
      v151 = v143[1];
      v127 = v145;
      v152 = v144;
      v59 = v146;
      v60 = v147;
      v61 = v149;
      v131 = v148;
      sub_1B19ED720((uint64_t)v140);
      if (v61 > 0 && v59)
      {
        v62 = v131[4];
        v130 = *(unsigned __int8 *)(v60 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v153[0] = v150;
        v153[1] = v151;
        v154 = v152;
        v123 = v131 + 8;
        v124 = v131 + 6;
        swift_retain();
        swift_retain();
        swift_retain();
        v63 = 0;
        v125 = v62;
        v126 = v59;
        do
        {
          v128 = v63;
          v129 = v11;
          v64 = (unsigned int *)(v127 + 48 * v63);
          v65 = *v64;
          v66 = v64[1];
          v68 = (uint64_t *)*((_QWORD *)v64 + 2);
          v67 = *((_QWORD *)v64 + 3);
          v69 = *((_QWORD *)v64 + 4);
          v70 = *((_QWORD *)v64 + 5);
          if (v130)
          {
            v71 = *(os_unfair_lock_s **)(v70 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v71);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v70 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v62);
          sub_1B1A18378((uint64_t)v124, (uint64_t)v157, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v70 + 40) + 16) + 32) + 16);
          v133 = (char *)v70;
          v73 = v131;
          v74 = v131[4];
          v75 = v72 + 1;
          v76 = 48 * (v72 + 1);
          swift_retain();
          v73[6] = ecs_stack_allocator_allocate(v74, v76, 8);
          v73[7] = v75;
          v77 = v123;
          v123[1] = 0;
          v77[2] = 0;
          *v77 = 0;
          swift_release();
          v78 = sub_1B1A12038((uint64_t)&type metadata for VirtualFileAsset, (uint64_t)&off_1E638B060, v68, v67, v69, (uint64_t)v73);
          if (v68)
          {
            if (v69)
            {
              ObjectType = swift_getObjectType();
              v81 = v121;
              v80 = v122;
              v134 = (void (*)(uint64_t, uint64_t, uint64_t, _UNKNOWN **))v121[1];
              v135 = ObjectType;
              v82 = (uint64_t *)(v78 + 24);
              do
              {
                v83 = (void *)v82[1];
                v84 = v164;
                v82[1] = (uint64_t)v164;
                v82[2] = (uint64_t)v81;
                v85 = v84;

                v87 = *(v82 - 1);
                v86 = *v82;
                v88 = v85;
                swift_bridgeObjectRetain();
                v134(v87, v86, v135, v81);
                swift_bridgeObjectRelease();

                v89 = sub_1B222802C();
                v91 = v90;
                (*(void (**)(char *, uint64_t))(v136 + 8))(v80, v137);
                swift_bridgeObjectRelease();
                *(v82 - 3) = v89;
                *(v82 - 2) = v91;

                v82 += 6;
                --v69;
              }
              while (v69);
            }
          }
          else if ((_DWORD)v65 != (_DWORD)v66)
          {
            v92 = swift_getObjectType();
            v93 = v121;
            v94 = v122;
            v134 = (void (*)(uint64_t, uint64_t, uint64_t, _UNKNOWN **))v121[1];
            v135 = v92;
            v95 = v66 - v65;
            v96 = (uint64_t *)(v78 + 48 * v65 + 24);
            do
            {
              v97 = (void *)v96[1];
              v98 = v164;
              v96[1] = (uint64_t)v164;
              v96[2] = (uint64_t)v93;
              v99 = v98;

              v100 = *(v96 - 1);
              v101 = *v96;
              v102 = v99;
              swift_bridgeObjectRetain();
              v134(v100, v101, v135, v93);
              swift_bridgeObjectRelease();

              v103 = sub_1B222802C();
              v105 = v104;
              (*(void (**)(char *, uint64_t))(v136 + 8))(v94, v137);
              swift_bridgeObjectRelease();
              *(v96 - 3) = v103;
              *(v96 - 2) = v105;

              v96 += 6;
              --v95;
            }
            while (v95);
          }
          v106 = v129;
          sub_1B1F05D48(v131, (unsigned __int16 **)v153, (uint64_t)v157);
          v11 = v106;
          v107 = v133;
          sub_1B1F03804(v133);
          v62 = v125;
          ecs_stack_allocator_pop_snapshot(v125);
          if ((v130 & 1) != 0)
          {
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v107 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v107 + 47));
          }
          swift_release();
          v63 = v128 + 1;
          a1 = v132;
        }
        while (v128 + 1 != v126);
        sub_1B19ED748(v142);
      }
      sub_1B19ED748(v142);
    }
    else
    {
      sub_1B19ED720((uint64_t)v140);
    }
    a6 = v114;
    LOBYTE(a2) = v112;
    v108 = (uint64_t)v111;
    v109 = *(unsigned __int8 *)(v114 + 19);
    sub_1B2127CB8(v120, (uint64_t)v111);
    if (v109 == 1)
    {
      v110 = *(_BYTE *)(v108 + *(int *)(v116 + 28));
      sub_1B1B8A68C(v108);
      if ((v110 & 1) == 0)
        sub_1B1C18034(a1, 1);

    }
    else
    {

      sub_1B1B8A68C(v108);
    }
    (*(void (**)(char *, uint64_t))(v136 + 8))(v118, v137);
    a3 = v113;
  }
  if ((a2 & 2) != 0)
  {
    sub_1B2124BB0(v120, v115, a9, v117, a10, a1, v119 | ((HIDWORD(v119) & 1) << 32), a3);
    if (v11)
      return;
    sub_1B2094974();
  }
  if ((a2 & 4) != 0 && *(_BYTE *)(a6 + 23) == 1)
    sub_1B1E7192C();
}

uint64_t sub_1B2124BB0(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, void *a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  void *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  NSObject *v109;
  char v110;
  char *v111;
  uint8_t *v112;
  os_signpost_id_t v113;
  char *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  id v133;
  id v134;
  void *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  NSObject *v158;
  char *v159;
  os_signpost_type_t v160;
  char v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t);
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  NSObject *v181;
  char *v182;
  os_signpost_type_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int (*v196)(uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  id v199;
  void *v200;
  uint64_t v201;
  char *v202;
  void *v203;
  char v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  void *v210;
  void (*v211)(uint64_t, uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  _QWORD *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unsigned __int8 v223;
  id v224;
  uint64_t v225;
  void *v226;
  char v227;
  uint64_t v228;
  void (*v229)(char *, uint64_t, uint64_t);
  char *v230;
  char *v231;
  uint64_t *v232;
  uint64_t v233;
  uint8_t *v234;
  os_signpost_id_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint8_t *v240;
  os_signpost_id_t v241;
  uint64_t v242;
  void (*v243)(char *, uint64_t);
  char *v245;
  id v246;
  char *v247;
  void *v248;
  uint64_t v249;
  void (*v250)(char *, uint64_t);
  NSObject *v251;
  char *v252;
  os_signpost_type_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  id v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  char *v270;
  char *v271;
  NSObject *v272;
  char *v273;
  os_signpost_type_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  void (*v278)(char *, uint64_t);
  const char *v279;
  char *v280;
  char *v281;
  uint8_t *v282;
  os_signpost_id_t v283;
  id v284;
  char *v285;
  uint64_t v286;
  void (*v287)(char *, uint64_t);
  char *v288;
  uint64_t v289;
  id v290;
  void *v291;
  id v292;
  NSObject *v293;
  char *v294;
  os_signpost_type_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  const char *v299;
  void *v300;
  char *v301;
  uint64_t v302;
  uint8_t *v303;
  os_signpost_id_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint8_t *v309;
  os_signpost_id_t v310;
  unsigned __int8 v311;
  _QWORD v312[2];
  void (*v313)(char *, uint64_t);
  uint64_t v314;
  char *v315;
  char *v316;
  char *v317;
  char *v318;
  char *v319;
  char *v320;
  char *v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  _QWORD *v338;
  char *v339;
  uint64_t v340;
  char *v341;
  uint64_t v342;
  char *v343;
  uint64_t v344;
  unint64_t v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  id v350;
  uint64_t v351;
  id v352;
  void *v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  uint64_t v358;
  char v359;
  void *v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;

  v342 = a8;
  v345 = a7;
  v352 = a5;
  v354 = a4;
  v340 = a3;
  v338 = a2;
  v364 = *MEMORY[0x1E0C80C00];
  v330 = *v8;
  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v12, v13);
  v346 = (char *)v312 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v329 = (uint64_t)v312 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v334 = (uint64_t)v312 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v331 = (uint64_t)v312 - v23;
  v336 = sub_1B22283BC();
  v335 = *(_QWORD *)(v336 - 8);
  MEMORY[0x1E0C80A78](v336, v24);
  v315 = (char *)v312 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v318 = (char *)v312 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v326 = (char *)v312 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v339 = (char *)v312 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v317 = (char *)v312 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v325 = (char *)v312 - v40;
  v41 = type metadata accessor for BundleInfo();
  MEMORY[0x1E0C80A78](v41, v42);
  v337 = (uint64_t)v312 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v344 = sub_1B2228380();
  v44 = *(_QWORD *)(v344 - 8);
  MEMORY[0x1E0C80A78](v344, v45);
  v316 = (char *)v312 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v48);
  v323 = (char *)v312 - v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v333 = (char *)v312 - v52;
  MEMORY[0x1E0C80A78](v53, v54);
  v341 = (char *)v312 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v320 = (char *)v312 - v58;
  MEMORY[0x1E0C80A78](v59, v60);
  v332 = (char *)v312 - v61;
  MEMORY[0x1E0C80A78](v62, v63);
  v343 = (char *)v312 - v64;
  MEMORY[0x1E0C80A78](v65, v66);
  v68 = (char *)v312 - v67;
  v69 = sub_1B2228110();
  v355 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69, v70);
  v347 = (uint64_t)v312 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v72, v73);
  v328 = (char *)v312 - v74;
  MEMORY[0x1E0C80A78](v75, v76);
  v321 = (char *)v312 - v77;
  MEMORY[0x1E0C80A78](v78, v79);
  v319 = (char *)v312 - v80;
  MEMORY[0x1E0C80A78](v81, v82);
  v322 = (char *)v312 - v83;
  MEMORY[0x1E0C80A78](v84, v85);
  v327 = (char *)v312 - v86;
  MEMORY[0x1E0C80A78](v87, v88);
  v324 = (char *)v312 - v89;
  MEMORY[0x1E0C80A78](v90, v91);
  v93 = (char *)v312 - v92;
  v358 = a6;
  sub_1B1C1A56C(a6, 1, 1);
  v94 = *(int *)(v41 + 24);
  v351 = a1;
  v348 = v94;
  v95 = *(_QWORD *)(a1 + v94);
  if (v95 > 2025)
    goto LABEL_6;
  if ((*(_BYTE *)(v358 + OBJC_IVAR____TtC3VFX13EntityManager_isVFX2) & 1) == 0)
    sub_1B1E793FC(v358, v351);
  if (v95 >= 1003)
  {
LABEL_6:
    v96 = v356;
    LODWORD(v349) = *(unsigned __int8 *)(v356 + 16);
  }
  else
  {
    LODWORD(v349) = 0;
    v96 = v356;
  }
  v357 = v93;
  sub_1B22280A4();
  v97 = objc_msgSend(v352, sel_fileWrappers);
  if (v97)
  {
    v98 = v97;
    sub_1B1B9DAD4(0, &qword_1ED4BA680);
    v99 = sub_1B2228530();

    if (*(_QWORD *)(v99 + 16))
    {
      v100 = sub_1B1DC3B00(0x2E73747069726373, 0xEE00656C646E7562);
      v101 = v357;
      if ((v102 & 1) != 0)
      {
        v350 = *(id *)(*(_QWORD *)(v99 + 56) + 8 * v100);
        v103 = v350;
      }
      else
      {
        v350 = 0;
      }
    }
    else
    {
      v350 = 0;
      v101 = v357;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v350 = 0;
    v101 = v357;
  }
  v363 = 0;
  if (*(_BYTE *)(v96 + 19) != 1)
    goto LABEL_22;
  if ((*(_BYTE *)(v96 + 18) & 1) != 0)
    goto LABEL_22;
  v361 = 0;
  v104 = v358;
  sub_1B1CF5D9C(v358, &v361);
  sub_1B1CF5DC0(v104, &v361);
  sub_1B1CF5DE4(v104, &v361);
  sub_1B1CF5E08(v104, &v361);
  sub_1B1CF5E2C(v104, &v361);
  sub_1B1CF5E50(v104, &v361);
  sub_1B1CF5E74(v104, &v361);
  sub_1B1CF5E98(v104, &v361);
  if (v361 < 1)
  {
LABEL_22:
    if ((v349 & 1) != 0)
    {
      v353 = v9;
      v115 = 0;
      v116 = v347;
      goto LABEL_24;
    }
    v120 = v350;
LABEL_27:

    (*(void (**)(char *, uint64_t))(v355 + 8))(v101, v69);
    return swift_unknownObjectRelease();
  }
  v353 = v9;
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v105 = sub_1B22283B0();
  v106 = sub_1B1B40EC8(v105, (uint64_t)qword_1ED4D0E48);
  v107 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  v108 = v344;
  v107(v68, v358 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v344);
  v312[1] = v106;
  v109 = sub_1B2228398();
  LODWORD(v313) = sub_1B2228FA4();
  v110 = sub_1B2229094();
  v314 = v69;
  if ((v110 & 1) != 0)
  {
    v111 = v343;
    v107(v343, (uint64_t)v68, v108);
    v112 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v112 = 0;
    v113 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v109, (os_signpost_type_t)v313, v113, "initialBuildScripts", "", v112, 2u);
    MEMORY[0x1B5E23F88](v112, -1, -1);

    v114 = v111;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v111, v108);
  }
  else
  {

    v114 = v343;
  }
  v312[0] = v107;
  v107(v114, (uint64_t)v68, v108);
  sub_1B22283E0();
  swift_allocObject();
  v139 = sub_1B22283D4();
  v140 = v108;
  v313 = *(void (**)(char *, uint64_t))(v44 + 8);
  v313(v68, v108);
  v141 = v351;
  if (*(_BYTE *)(v351 + *(int *)(v41 + 28)) != 1)
  {
    v170 = sub_1B1F4E9E8((uint64_t)&unk_1E63C5F08);
    v171 = v358;
    v172 = v338;
    v173 = v340;
    v174 = v353;
    v175 = sub_1B211F594(v358, v338, v340, v170, 0);
    v176 = v357;
    if (v174)
    {
      swift_bridgeObjectRelease();
      v353 = 0;
      if (qword_1ED4BF430 != -1)
        swift_once();
      v361 = 0;
      v362 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      v360 = v174;
      sub_1B1A203F8();
      sub_1B22295EC();
      v267 = v361;
      v268 = v362;
      v269 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v361 = 0;
      swift_retain();
      sub_1B1F1AD70(v269, &v361, v267, v268);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      LODWORD(v340) = 0;
      v261 = v344;
    }
    else
    {
      v353 = (void *)v175;
      swift_bridgeObjectRelease();
      type metadata accessor for MetalScriptCodeGen();
      swift_initStackObject();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B1B5A24C(v171, v172, v173);
      swift_release();
      swift_bridgeObjectRelease();
      LOWORD(v361) = 256;
      v191 = v331;
      sub_1B1B5529C((char *)&v361, v331);
      swift_release();
      v213 = v355;
      v214 = v314;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v355 + 48))(v191, 1, v314) == 1)
      {
        sub_1B1B25B94(v191, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      }
      else
      {
        v245 = v319;
        (*(void (**)(char *, uint64_t, uint64_t))(v213 + 32))(v319, v191, v214);
        if (*(_QWORD *)(v358 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
        {
          swift_retain();
          sub_1B1B31564();
          v260 = v259;
          (*(void (**)(char *, uint64_t))(v355 + 8))(v245, v314);
          swift_release();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v213 + 8))(v245, v214);
          v260 = 0;
        }
        swift_unknownObjectRelease();
        v363 = v260;
        v176 = v357;
      }
      v261 = v140;
      v262 = v327;
      sub_1B2228050();
      swift_bridgeObjectRelease();
      v263 = v355;
      v264 = v314;
      (*(void (**)(char *, uint64_t))(v355 + 8))(v176, v314);
      (*(void (**)(char *, char *, uint64_t))(v263 + 32))(v176, v262, v264);
      v265 = (uint64_t)v321;
      (*(void (**)(char *, char *, uint64_t))(v263 + 16))(v321, v176, v264);
      v266 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
      v284 = sub_1B21278BC(v265, 0);
      v353 = 0;

      LODWORD(v349) = 1;
      LODWORD(v340) = 1;
      v350 = v284;
    }
    v116 = v347;
    v270 = v339;
    v271 = v341;
LABEL_124:
    v272 = sub_1B2228398();
    sub_1B22283C8();
    v273 = v271;
    v274 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      swift_retain();
      sub_1B22283EC();
      v347 = v139;
      swift_release();
      v275 = v270;
      v276 = v335;
      v277 = v336;
      if ((*(unsigned int (**)(char *, uint64_t))(v335 + 88))(v275, v336) == *MEMORY[0x1E0DF2190])
      {
        v278 = v313;
        v279 = "[Error] Interval already ended";
      }
      else
      {
        v278 = v313;
        (*(void (**)(char *, uint64_t))(v276 + 8))(v275, v277);
        v279 = "";
      }
      v280 = v343;
      v281 = v341;
      ((void (*)(char *, char *, uint64_t))v312[0])(v343, v341, v261);
      v282 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v282 = 0;
      v283 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v272, v274, v283, "initialBuildScripts", v279, v282, 2u);
      v261 = v344;
      MEMORY[0x1B5E23F88](v282, -1, -1);

      v278(v281, v261);
    }
    else
    {

      v280 = v273;
    }
    v313(v280, v261);
    swift_release();
    v101 = v357;
    v115 = v340;
    if ((v349 & 1) != 0)
    {
      v69 = v314;
LABEL_24:
      v117 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
      v118 = *(_QWORD *)(v358 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
      if (v118)
      {
        v119 = *(void **)(v118 + 16);
        swift_unknownObjectRetain();
      }
      else
      {
        v119 = 0;
      }
      v347 = sub_1B2129A64((uint64_t)v354, v119);
      v122 = v121;
      v124 = v123;
      swift_unknownObjectRelease();
      LODWORD(v340) = v115;
      v349 = v122;
      if (v124)
      {
        v125 = v69;
        swift_unknownObjectRelease();
        v363 = v124;
        goto LABEL_33;
      }
      if (v363)
      {
LABEL_32:
        v125 = v69;
        goto LABEL_33;
      }
      v177 = *(_QWORD *)(v358 + v117);
      if (v177)
      {
        v178 = *(id *)(v177 + 16);
        swift_unknownObjectRetain();
      }
      else
      {
        v178 = MTLCreateSystemDefaultDevice();
        if (!v178)
          goto LABEL_32;
      }
      v192 = OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
      v193 = v358 + *(int *)(type metadata accessor for ScriptingConfiguration() + 28) + v192;
      v194 = v334;
      sub_1B19EC90C(v193, v334);
      v195 = v355;
      v196 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v355 + 48);
      if (v196(v194, 1, v69) == 1)
      {
        sub_1B1B25B94(v194, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
        v197 = v329;
        sub_1B2121D9C((uint64_t)v354, v329);
        if (v196(v197, 1, v69) == 1)
        {
          sub_1B1B25B94(v197, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
          v198 = *(_QWORD *)(v358 + v117);
          if (v198)
          {
            v125 = v69;
            v199 = *(id *)(v198 + 16);
            swift_unknownObjectRetain();
            v115 = v340;
          }
          else
          {
            v125 = v69;
            v199 = MTLCreateSystemDefaultDevice();
            v115 = v340;
            if (!v199)
            {
              swift_unknownObjectRelease();
              v363 = 0;
              goto LABEL_33;
            }
          }
          v246 = objc_msgSend(v199, sel_newDefaultLibrary);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          v363 = (uint64_t)v246;
LABEL_33:
          v126 = v351;
          goto LABEL_34;
        }
        v209 = v197;
        v195 = v355;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v355 + 32))(v116, v209, v69);
        sub_1B1B40648((uint64_t)v178);
        v210 = v353;
        sub_1B1B31564();
        v353 = v210;
        if (v210)
        {
          swift_release();
          swift_unknownObjectRelease();
          goto LABEL_75;
        }
      }
      else
      {
        v116 = (uint64_t)v328;
        (*(void (**)(char *, uint64_t, uint64_t))(v195 + 32))(v328, v194, v69);
        sub_1B1B40648((uint64_t)v178);
        v200 = v353;
        sub_1B1B31564();
        v353 = v200;
        if (v200)
        {
          swift_unknownObjectRelease();
          swift_release();
LABEL_75:
          swift_bridgeObjectRelease();
          v211 = *(void (**)(uint64_t, uint64_t))(v195 + 8);
          v211(v116, v69);

          v211((uint64_t)v101, v69);
          return swift_unknownObjectRelease();
        }
      }
      v212 = v201;
      v125 = v69;
      (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v116, v69);
      swift_unknownObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
      v363 = v212;
      v126 = v351;
      v115 = v340;
LABEL_34:
      v127 = *(_QWORD *)(v126 + v348);
      if (v127 >= 1033)
      {
        v128 = objc_msgSend(v352, sel_fileWrappers);
        if (v128)
        {
          v129 = v128;
          sub_1B1B9DAD4(0, &qword_1ED4BA680);
          v130 = sub_1B2228530();

          if (*(_QWORD *)(v130 + 16)
            && (v131 = sub_1B1DC3B00(0xD000000000000010, 0x80000001B23315E0), (v132 & 1) != 0))
          {
            v133 = *(id *)(*(_QWORD *)(v130 + 56) + 8 * v131);
            swift_bridgeObjectRelease();
            v134 = objc_msgSend(v133, sel_regularFileContents);
            if (v134)
            {
              v135 = v134;
              v136 = sub_1B222817C();
              v138 = v137;

              if (*(_QWORD *)(v358 + v117))
                __asm { BR              X10 }
              sub_1B1A0DADC(v136, v138);
            }

          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
      }
      v215 = v353;
      if (v115)
      {
        v354 = sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
        v127 = 0;
      }
      else
      {
        v354 = *(_QWORD **)(*(_QWORD *)(v356 + 32) + 120);
        if (v342)
        {
          v216 = sub_1B2129F68(v342, (uint64_t)v354);
          v353 = v215;
          v354 = v216;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
      }
      v217 = v355;
      v218 = (uint64_t)v346;
      v219 = v125;
      (*(void (**)(char *, char *, uint64_t))(v355 + 16))(v346, v357, v125);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v217 + 56))(v218, 0, 1, v125);
      v220 = v363;
      v221 = *(_QWORD **)v126;
      v222 = *(_QWORD *)(v126 + 8);
      v223 = *(_BYTE *)(v356 + 17);
      v224 = v350;
      v120 = v350;
      swift_unknownObjectRetain();
      v311 = v223;
      v225 = v358;
      v226 = v353;
      sub_1B2128008(v358, v347, v349, v224, v218, v220, v221, v222, v127, v340, (uint64_t)v354, v345 | ((HIDWORD(v345) & 1) << 32), v311);
      if (v226)
      {
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B1B25B94(v218, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);

        (*(void (**)(char *, uint64_t))(v355 + 8))(v357, v219);
        return swift_unknownObjectRelease();
      }
      v69 = v219;
      sub_1B1B25B94(v218, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(uint64_t *)(v351 + v348) >= 2026)
      {
        v101 = v357;
      }
      else
      {
        v227 = *(_BYTE *)(v225 + OBJC_IVAR____TtC3VFX13EntityManager_isVFX2);
        v228 = v225;
        v101 = v357;
        if ((v227 & 1) == 0)
          sub_1B1E79F34(v228, v351);
      }
      goto LABEL_27;
    }
    v120 = v350;
    v69 = v314;
    goto LABEL_27;
  }
  v142 = v139;
  v143 = sub_1B2129D1C();
  v145 = v144;
  v146 = sub_1B2129D1C();
  v148 = v147;
  v361 = v146;
  v362 = v147;
  v149 = sub_1B2129D1C();
  v151 = v150;
  v152 = v141;
  v153 = v337;
  sub_1B2127CB8(v152, v337);
  if (v148)
  {
    v154 = *(_QWORD *)(v153 + *(int *)(v41 + 24));
    sub_1B1B8A68C(v153);
    if (v154 >= 2001)
      goto LABEL_47;
    sub_1B1B63914((uint64_t)&v361, *(_QWORD **)v351, *(_QWORD *)(v351 + 8), *(_QWORD *)(v351 + v348));
    v148 = v362;
    if (v145 | v362)
      goto LABEL_47;
  }
  else
  {
    sub_1B1B8A68C(v153);
    if (v145 != (unsigned __int128)0)
    {
LABEL_47:
      v155 = v361;
      swift_bridgeObjectRetain();
      v156 = sub_1B1F4E9E8((uint64_t)&unk_1E63C5F30);
      v157 = v353;
      sub_1B2120A5C(v155, v148, v143, v145, v156, 0);
      v353 = v157;
      if (v157)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v158 = sub_1B2228398();
        v159 = v333;
        sub_1B22283C8();
        v160 = sub_1B2228F98();
        v161 = sub_1B2229094();
        v162 = v314;
        if ((v161 & 1) != 0)
        {
          swift_retain();
          v163 = v326;
          sub_1B22283EC();
          swift_release();
          v164 = v335;
          v165 = v336;
          v166 = (*(uint64_t (**)(char *, uint64_t))(v335 + 88))(v163, v336);
          v167 = v344;
          v168 = (void (*)(uint64_t, uint64_t))v313;
          if (v166 == *MEMORY[0x1E0DF2190])
          {
            v169 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v164 + 8))(v163, v165);
            v169 = "";
          }
          v229 = (void (*)(char *, uint64_t, uint64_t))v312[0];
          v230 = v343;
          v231 = v343;
          v232 = (uint64_t *)&v359;
LABEL_95:
          v233 = *(v232 - 32);
          v229(v231, v233, v167);
          v234 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v234 = 0;
          v235 = sub_1B2228374();
          _os_signpost_emit_with_name_impl(&dword_1B178D000, v158, v160, v235, "initialBuildScripts", v169, v234, 2u);
          v236 = v344;
          MEMORY[0x1B5E23F88](v234, -1, -1);

          v168(v233, v236);
          v162 = v314;
          v168((uint64_t)v230, v236);
          goto LABEL_96;
        }
        goto LABEL_72;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v151)
      {
        type metadata accessor for MetalScriptCodeGen();
        LOWORD(v360) = 256;
        v202 = v324;
        v203 = v353;
        sub_1B1B55420(v149, v151, (__int16 *)&v360);
        v353 = v203;
        if (v203)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v158 = sub_1B2228398();
          v159 = v323;
          sub_1B22283C8();
          v160 = sub_1B2228F98();
          v204 = sub_1B2229094();
          v162 = v314;
          if ((v204 & 1) != 0)
          {
            swift_retain();
            v205 = v318;
            sub_1B22283EC();
            swift_release();
            v206 = v335;
            v207 = v336;
            v208 = (*(uint64_t (**)(char *, uint64_t))(v335 + 88))(v205, v336);
            v167 = v344;
            v168 = (void (*)(uint64_t, uint64_t))v313;
            if (v208 == *MEMORY[0x1E0DF2190])
            {
              v169 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v206 + 8))(v205, v207);
              v169 = "";
            }
            v229 = (void (*)(char *, uint64_t, uint64_t))v312[0];
            v230 = v343;
            v231 = v343;
            v232 = &v355;
            goto LABEL_95;
          }
LABEL_72:

          v313(v159, v344);
LABEL_96:
          swift_release();

          (*(void (**)(char *, uint64_t))(v355 + 8))(v357, v162);
          return swift_unknownObjectRelease();
        }
        swift_bridgeObjectRelease();
        v139 = v142;
        if (*(_QWORD *)(v358 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
        {
          v247 = v202;
          v237 = v314;
          swift_retain();
          v248 = v353;
          sub_1B1B31564();
          v353 = v248;
          if (v248)
          {
            v250 = *(void (**)(char *, uint64_t))(v355 + 8);
            v250(v247, v237);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            v251 = sub_1B2228398();
            v252 = v316;
            sub_1B22283C8();
            v253 = sub_1B2228F98();
            if ((sub_1B2229094() & 1) != 0)
            {
              swift_retain();
              v254 = v315;
              sub_1B22283EC();
              swift_release();
              v255 = v335;
              v256 = v336;
              if ((*(unsigned int (**)(char *, uint64_t))(v335 + 88))(v254, v336) == *MEMORY[0x1E0DF2190])
              {
                v257 = "[Error] Interval already ended";
              }
              else
              {
                (*(void (**)(char *, uint64_t))(v255 + 8))(v254, v256);
                v257 = "";
              }
              v306 = v343;
              v308 = v316;
              ((void (*)(char *, char *, uint64_t))v312[0])(v343, v316, v344);
              v309 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v309 = 0;
              v310 = sub_1B2228374();
              _os_signpost_emit_with_name_impl(&dword_1B178D000, v251, v253, v310, "initialBuildScripts", v257, v309, 2u);
              v307 = v344;
              MEMORY[0x1B5E23F88](v309, -1, -1);

              v313(v308, v307);
            }
            else
            {

              v306 = v252;
              v307 = v344;
            }
            v313(v306, v307);
            swift_release();

            v250(v357, v237);
            return swift_unknownObjectRelease();
          }
          v258 = v249;
          (*(void (**)(char *, uint64_t))(v355 + 8))(v202, v237);
          swift_release();
        }
        else
        {
          v237 = v314;
          (*(void (**)(char *))(v355 + 8))(v202);
          v258 = 0;
        }
        swift_unknownObjectRelease();
        v363 = v258;
      }
      else
      {
        v237 = v314;
        v139 = v142;
      }
      v285 = v327;
      sub_1B2228050();
      swift_bridgeObjectRelease();
      v286 = v355;
      v287 = *(void (**)(char *, uint64_t))(v355 + 8);
      v288 = v357;
      v287(v357, v237);
      (*(void (**)(char *, char *, uint64_t))(v286 + 32))(v288, v285, v237);
      v289 = (uint64_t)v322;
      (*(void (**)(char *, char *, uint64_t))(v286 + 16))(v322, v288, v237);
      v290 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
      v291 = v353;
      v292 = sub_1B21278BC(v289, 0);
      v353 = v291;
      if (v291)
      {
        swift_bridgeObjectRelease();
        v293 = sub_1B2228398();
        v294 = v320;
        sub_1B22283C8();
        v295 = sub_1B2228F98();
        if ((sub_1B2229094() & 1) != 0)
        {
          swift_retain();
          v296 = v317;
          sub_1B22283EC();
          swift_release();
          v297 = v335;
          v298 = v336;
          if ((*(unsigned int (**)(char *, uint64_t))(v335 + 88))(v296, v336) == *MEMORY[0x1E0DF2190])
          {
            v299 = "[Error] Interval already ended";
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v297 + 8))(v296, v298);
            v299 = "";
          }
          v301 = v343;
          ((void (*)(char *, char *, uint64_t))v312[0])(v343, v294, v344);
          v303 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v303 = 0;
          v304 = sub_1B2228374();
          _os_signpost_emit_with_name_impl(&dword_1B178D000, v293, v295, v304, "initialBuildScripts", v299, v303, 2u);
          v305 = v344;
          MEMORY[0x1B5E23F88](v303, -1, -1);

          v302 = v305;
          v313(v294, v305);
        }
        else
        {

          v301 = v294;
          v302 = v344;
        }
        v313(v301, v302);
        swift_release();

        v287(v357, v314);
        return swift_unknownObjectRelease();
      }
      v300 = v292;

      *(_BYTE *)(v358 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig) = 0;
      swift_bridgeObjectRelease();
      LODWORD(v340) = 0;
      LODWORD(v349) = 1;
      v350 = v300;
      v116 = v347;
      v270 = v339;
      v271 = v341;
      v261 = v344;
      goto LABEL_124;
    }
  }
  swift_bridgeObjectRelease();
  sub_1B1B6AE48();
  v179 = swift_allocError();
  *(_QWORD *)v180 = 0xD000000000000037;
  *(_QWORD *)(v180 + 8) = 0x80000001B234D340;
  *(_BYTE *)(v180 + 16) = 96;
  v353 = (void *)v179;
  swift_willThrow();
  swift_bridgeObjectRelease();
  v181 = sub_1B2228398();
  v182 = v332;
  sub_1B22283C8();
  v183 = sub_1B2228F98();
  if ((sub_1B2229094() & 1) != 0)
  {
    swift_retain();
    v184 = v325;
    sub_1B22283EC();
    swift_release();
    v185 = v335;
    v186 = v336;
    v187 = (*(uint64_t (**)(char *, uint64_t))(v335 + 88))(v184, v336);
    v188 = v314;
    v189 = v344;
    if (v187 == *MEMORY[0x1E0DF2190])
    {
      v190 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v185 + 8))(v184, v186);
      v190 = "";
    }
    v238 = v343;
    v239 = v332;
    ((void (*)(char *, char *, uint64_t))v312[0])(v343, v332, v189);
    v240 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v240 = 0;
    v241 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v181, v183, v241, "initialBuildScripts", v190, v240, 2u);
    v242 = v344;
    MEMORY[0x1B5E23F88](v240, -1, -1);

    v243 = v313;
    v313(v239, v242);
    v243(v238, v242);
  }
  else
  {

    v188 = v314;
    v313(v182, v344);
  }
  swift_release();

  (*(void (**)(char *, uint64_t))(v355 + 8))(v357, v188);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2126EB0(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  id v13;
  void *v15;
  id v16[2];

  v16[1] = *(id *)MEMORY[0x1E0C80C00];
  v6 = sub_1B22284D0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B22284C4();
  v11 = (void *)sub_1B22284B8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v16[0] = 0;
  v12 = objc_msgSend(a4, sel_newLibraryWithData_error_, v11, v16);

  v13 = v16[0];
  if (v12)
  {
    *a3 = v12;
    return swift_unknownObjectRelease();
  }
  else
  {
    v15 = v13;
    sub_1B2227FB4();

    return swift_willThrow();
  }
}

uint64_t sub_1B2126FE8()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VFXLoader()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for EffectID()
{
  return &type metadata for EffectID;
}

ValueMetadata *type metadata accessor for VFXLoader.InitializePhases()
{
  return &type metadata for VFXLoader.InitializePhases;
}

_QWORD *sub_1B2127054(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_1B222826C();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    *(_QWORD *)((char *)v4 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[9];
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *(_QWORD *)((char *)v4 + v14) = *(_QWORD *)((char *)a2 + v14);
    v15 = a3[10];
    v16 = (_QWORD *)((char *)v4 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1B2127148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B21271B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B222826C();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  v14 = a3[10];
  v15 = (_QWORD *)((char *)a1 + v14);
  v16 = (_QWORD *)((char *)a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_1B212727C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B222826C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[10];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1B212736C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1B222826C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  v11 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  return a1;
}

_QWORD *sub_1B212740C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1B222826C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_bridgeObjectRelease();
  v13 = a3[10];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B21274CC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B21274D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1B2127558()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B2127564(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1B222826C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BundleInfo()
{
  uint64_t result;

  result = qword_1ED4B7608;
  if (!qword_1ED4B7608)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B212761C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B222826C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1B21276BC()
{
  unint64_t result;

  result = qword_1EEF63C40;
  if (!qword_1EEF63C40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C04D8, &type metadata for VFXLoader.InitializePhases);
    atomic_store(result, (unint64_t *)&qword_1EEF63C40);
  }
  return result;
}

unint64_t sub_1B2127704()
{
  unint64_t result;

  result = qword_1EEF63C48;
  if (!qword_1EEF63C48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C04A8, &type metadata for VFXLoader.InitializePhases);
    atomic_store(result, (unint64_t *)&qword_1EEF63C48);
  }
  return result;
}

unint64_t sub_1B212774C()
{
  unint64_t result;

  result = qword_1EEF63C50;
  if (!qword_1EEF63C50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0500, &type metadata for VFXLoader.InitializePhases);
    atomic_store(result, (unint64_t *)&qword_1EEF63C50);
  }
  return result;
}

unint64_t sub_1B2127794()
{
  unint64_t result;

  result = qword_1EEF63C58;
  if (!qword_1EEF63C58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0538, &type metadata for VFXLoader.InitializePhases);
    atomic_store(result, (unint64_t *)&qword_1EEF63C58);
  }
  return result;
}

unint64_t sub_1B21277DC()
{
  unint64_t result;

  result = qword_1ED4BA090;
  if (!qword_1ED4BA090)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0638, &type metadata for EffectID);
    atomic_store(result, (unint64_t *)&qword_1ED4BA090);
  }
  return result;
}

unint64_t sub_1B2127820()
{
  unint64_t result;

  result = qword_1ED4B7BA0;
  if (!qword_1ED4B7BA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C07E0, &type metadata for BundleInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7BA0);
  }
  return result;
}

unint64_t sub_1B2127864()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EEF63C68;
  if (!qword_1EEF63C68)
  {
    sub_1B1EB6008();
    v2 = MEMORY[0x1E0DEB420];
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEB3B8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EEF63C68);
  }
  return result;
}

id sub_1B21278BC(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  id v12;
  uint64_t v13;
  id v15[2];

  v3 = v2;
  v15[1] = *(id *)MEMORY[0x1E0C80C00];
  v6 = (void *)sub_1B2228074();
  v15[0] = 0;
  v7 = objc_msgSend(v3, sel_initWithURL_options_error_, v6, a2, v15);

  v8 = v15[0];
  if (v7)
  {
    v9 = sub_1B2228110();
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v11 = v8;
    v10(a1, v9);
  }
  else
  {
    v12 = v15[0];
    sub_1B2227FB4();

    swift_willThrow();
    v13 = sub_1B2228110();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  }
  return v7;
}

_QWORD *sub_1B21279CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  sub_1B1B996C0();
  v2 = sub_1B22296B8();
  v3 = (_QWORD *)v2;
  v4 = 0;
  v26 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v11 = v2 + 64;
  v24 = v6;
  v25 = (unint64_t)(v8 + 63) >> 6;
  v23 = v6 + 40;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v4 << 6);
      goto LABEL_5;
    }
    v20 = v4 + 1;
    if (v4 + 1 >= v25)
      return v3;
    v21 = *(_QWORD *)(v24 + 8 * v20);
    if (!v21)
    {
      v20 = v4 + 2;
      if (v4 + 2 >= v25)
        return v3;
      v21 = *(_QWORD *)(v24 + 8 * v20);
      if (!v21)
      {
        v20 = v4 + 3;
        if (v4 + 3 >= v25)
          return v3;
        v21 = *(_QWORD *)(v24 + 8 * v20);
        if (!v21)
        {
          v20 = v4 + 4;
          if (v4 + 4 >= v25)
            return v3;
          v21 = *(_QWORD *)(v24 + 8 * v20);
          if (!v21)
            break;
        }
      }
    }
LABEL_18:
    v10 = (v21 - 1) & v21;
    v13 = __clz(__rbit64(v21)) + (v20 << 6);
    v4 = v20;
LABEL_5:
    v14 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * v13);
    v16 = *v14;
    v15 = v14[1];
    v17 = *(void **)(*(_QWORD *)(v26 + 56) + 8 * v13);
    swift_bridgeObjectRetain();
    v18 = objc_msgSend(v17, sel_pointerValue);
    *(_QWORD *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v19 = (_QWORD *)(v3[6] + 16 * v13);
    *v19 = v16;
    v19[1] = v15;
    *(_QWORD *)(v3[7] + 8 * v13) = v18;
    ++v3[2];
  }
  while (v25 - 5 != v4)
  {
    v21 = *(_QWORD *)(v23 + 8 * v4++);
    if (v21)
    {
      v20 = v4 + 4;
      goto LABEL_18;
    }
  }
  return v3;
}

uint64_t sub_1B2127BB4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = sub_1B2227E4C();
  if (v9)
    v9 += a1 - sub_1B2227E70();
  v10 = sub_1B2227E64();
  v11 = a2 - a1;
  if (v10 < a2 - a1)
    v11 = v10;
  v12 = v9 + v11;
  if (v9)
    v13 = v12;
  else
    v13 = 0;
  sub_1B2126EB0(v9, v13, a4, a5);
  return swift_unknownObjectRelease();
}

void sub_1B2127C5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B2127820();
    v7 = a3(a1, &type metadata for BundleInfo.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B2127CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BundleInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B2127CFC()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

uint64_t sub_1B2127D44()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v7;
  char v8;

  v0 = (void *)sub_1B2228728();
  v1 = objc_msgSend(v0, sel_pathExtension);

  v2 = sub_1B222874C();
  v4 = v3;
  swift_bridgeObjectRelease();

  v5 = v2 == 1852797802 && v4 == 0xE400000000000000;
  if (v5 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v7 = v2 == 0x7473696C70 && v4 == 0xE500000000000000;
    if (v7 || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (v2 == 0x6E6962786676 && v4 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 5;
    }
  }
}

uint64_t sub_1B2127EC4(uint64_t a1, uint64_t a2)
{
  uint32_t v4;
  uint32_t v5;
  const mach_header *image_header;
  uint8_t *v7;
  uint8_t *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  unint64_t v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v4 = _dyld_image_count();
  if (!v4)
    return 0;
  v5 = v4;
  while (1)
  {
    image_header = _dyld_get_image_header(--v5);
    if (image_header)
    {
      v15[0] = 0;
      v7 = getsectiondata((const mach_header_64 *)image_header, "__DATA_CONST", "__vfx_script_tbl", v15);
      if (v7)
      {
        if (v15[0] >= 0x10)
          break;
      }
    }
LABEL_4:
    if (!v5)
      return 0;
  }
  v8 = v7;
  v9 = &v7[v15[0] & 0xFFFFFFFFFFFFFFF0];
  while (1)
  {
    if (*(_QWORD *)v8)
    {
      v10 = *((_QWORD *)v8 + 1);
      if (sub_1B22288A8() == a1 && v11 == a2)
      {
        swift_bridgeObjectRelease();
        if (v10)
          return v10;
        goto LABEL_4;
      }
      v13 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        break;
    }
    v8 += 16;
    if (v8 == v9)
      goto LABEL_4;
  }
  if (!v10)
    goto LABEL_4;
  return v10;
}

void sub_1B2128008(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, unint64_t a12, unsigned __int8 a13)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSString *v53;
  void *v54;
  void *v55;
  id v56;
  char *v57;
  void *v58;
  id v59;
  int v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  void *v69;
  id v70;
  void (*v71)(uint64_t);
  id v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  void *v76;
  void *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  void *v86;
  const char *v87;
  uint64_t (*v88)(uint64_t);
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  char v110;
  char v111;
  char isUniquelyReferenced_nonNull_native;
  void *v113;
  const char *v114;
  void (*v115)(uint64_t);
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t);
  uint64_t v119;
  void *ObjCClassFromMetadata;
  id v121;
  id v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  int v129;
  int v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t);
  uint64_t v135;
  uint64_t v136;
  objc_class *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  __int128 v141;
  int v142;
  uint64_t v143;
  NSString *v144;
  Class v145;
  NSString *v146;
  Class v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  NSString *v158;
  Class v159;
  NSString *v160;
  Class v161;
  uint64_t v162;
  id v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  char *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;

  v176 = a8;
  v175 = a7;
  v165 = a6;
  v179 = a4;
  v177 = a3;
  v171 = a2;
  v178 = a1;
  v185 = *MEMORY[0x1E0C80C00];
  v169 = sub_1B222826C();
  v168 = *(_QWORD *)(v169 - 8);
  MEMORY[0x1E0C80A78](v169, v14);
  v167 = (char *)&v162 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = sub_1B2228110();
  v16 = *(_QWORD *)(v180 - 8);
  MEMORY[0x1E0C80A78](v180, v17);
  v174 = (char *)&v162 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v166 = (uint64_t)&v162 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v162 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v162 - v29;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v162 - v33;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v162 - v37;
  v170 = a10;
  v181 = a9;
  v173 = a5;
  v39 = (char *)&v162 - v37;
  if ((a10 & 1) != 0)
  {
    sub_1B19EC90C(a5, (uint64_t)v39);
LABEL_6:
    sub_1B19EC90C((uint64_t)v38, (uint64_t)v34);
    v43 = a13;
    if (v179)
    {
      v44 = (void (*)(uint64_t))MEMORY[0x1E0CAFFF8];
      sub_1B1B25B94((uint64_t)v38, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      sub_1B1B25B94((uint64_t)v34, (unint64_t *)&qword_1ED4BF720, v44);
      v45 = v16;
      v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
      v47 = v180;
    }
    else
    {
      v172 = a13;
      v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
      v47 = v180;
      v60 = v46(v34, 1, v180);
      sub_1B19EC90C((uint64_t)v34, (uint64_t)v30);
      if (v60 == 1)
      {
        v61 = (void (*)(uint64_t))MEMORY[0x1E0CAFFF8];
        sub_1B1B25B94((uint64_t)v30, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
        sub_1B1B25B94((uint64_t)v38, (unint64_t *)&qword_1ED4BF720, v61);
        sub_1B1B25B94((uint64_t)v34, (unint64_t *)&qword_1ED4BF720, v61);
        v40 = 0;
        v41 = 0;
        v42 = v182;
        v43 = v172;
        goto LABEL_27;
      }
      v163 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      sub_1B19EC90C((uint64_t)v30, (uint64_t)v26);
      v46(v26, 1, v47);
      sub_1B22280D4();
      v69 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v47);
      v70 = v163;
      v164 = objc_msgSend(v163, sel_isReadableFileAtPath_, v69);

      v71 = (void (*)(uint64_t))MEMORY[0x1E0CAFFF8];
      sub_1B1B25B94((uint64_t)v30, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      sub_1B1B25B94((uint64_t)v38, (unint64_t *)&qword_1ED4BF720, v71);
      sub_1B1B25B94((uint64_t)v34, (unint64_t *)&qword_1ED4BF720, v71);
      v43 = v172;
      v45 = v16;
      if ((v164 & 1) == 0)
      {
        v40 = 0;
        v41 = 0;
        v42 = v182;
        goto LABEL_27;
      }
    }
    LOBYTE(v183) = 0;
    v48 = v173;
    if (v46((char *)v173, 1, v47) == 1)
    {
      v49 = v167;
      sub_1B2228260();
      v50 = sub_1B2228224();
      v52 = v51;
      (*(void (**)(char *, uint64_t))(v168 + 8))(v49, v169);
      v53 = NSTemporaryDirectory();
      sub_1B222874C();

      *(_QWORD *)&v184 = v50;
      *((_QWORD *)&v184 + 1) = v52;
      sub_1B2228890();
      v54 = (void *)sub_1B2228728();
      v55 = (void *)sub_1B2228728();
      v56 = objc_msgSend(v54, sel_stringByAppendingPathComponent_, v55);

      sub_1B222874C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v57 = v174;
      sub_1B2228050();
      swift_bridgeObjectRelease();
      v58 = (void *)sub_1B2228074();
      *(_QWORD *)&v184 = 0;
      LODWORD(v50) = objc_msgSend(v179, sel_writeToURL_options_originalContentsURL_error_, v58, 0, 0, &v184);

      if (!(_DWORD)v50)
      {
        v72 = (id)v184;
        v66 = (void *)sub_1B2227FB4();

        swift_willThrow();
        v42 = 0;
        v47 = v180;
LABEL_20:
        sub_1B2121914(&v183);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v57, v47);
        *(_QWORD *)&v184 = 0;
        *((_QWORD *)&v184 + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        *(_QWORD *)&v183 = v66;
        sub_1B1A203F8();
        sub_1B22295EC();
        v73 = v184;
        if ((v43 & 1) != 0)
        {
          sub_1B1B6AE48();
          swift_allocError();
          *(_OWORD *)v74 = v73;
          *(_BYTE *)(v74 + 16) = 96;
          swift_willThrow();

          return;
        }
        if (qword_1ED4BF430 != -1)
          swift_once();
        swift_retain();
        v75 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v184 = 0;
        swift_retain();
        sub_1B1F1AD70(v75, (uint64_t *)&v184, v73, *((uint64_t *)&v73 + 1));
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        v41 = 0;
        v40 = 1;
LABEL_27:
        if (!v177)
          goto LABEL_4;
LABEL_28:
        v76 = sub_1B203EE34();
        if (v42)
        {
LABEL_132:
          swift_release();
          return;
        }
        v77 = v76;
        v172 = v43;
        type metadata accessor for CodeLoader();
        v78 = swift_allocObject();
        *(_OWORD *)(v78 + 16) = 0u;
        *(_OWORD *)(v78 + 32) = 0u;
        *(_QWORD *)(v78 + 48) = 0;
        *(_QWORD *)(v78 + 72) = 0;
        *(_QWORD *)(v78 + 80) = 0;
        *(_QWORD *)(v78 + 64) = v77;
        *(_BYTE *)(v78 + 56) = 1;
        swift_release();
        v180 = v78;
        goto LABEL_30;
      }
      LOBYTE(v183) = 1;
      v59 = (id)v184;
      v47 = v180;
    }
    else
    {
      v62 = v48;
      v63 = v166;
      sub_1B19EC90C(v62, v166);
      v46((char *)v63, 1, v47);
      v57 = v174;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v174, v63, v47);
    }
    sub_1B22280D4();
    v64 = (void *)v182;
    v65 = sub_1B203EE34();
    v42 = (unint64_t)v64;
    if (!v64)
    {
      v67 = v65;
      type metadata accessor for CodeLoader();
      v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = 0u;
      *(_OWORD *)(v41 + 32) = 0u;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 72) = 0;
      *(_QWORD *)(v41 + 80) = 0;
      *(_QWORD *)(v41 + 64) = v67;
      v68 = v45;
      v40 = 1;
      *(_BYTE *)(v41 + 56) = 1;
      swift_bridgeObjectRelease();
      sub_1B2121914(&v183);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v57, v47);
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    v66 = v64;
    v42 = 0;
    goto LABEL_20;
  }
  sub_1B19EC90C(a5, (uint64_t)v39);
  if (a9 > 1040)
    goto LABEL_6;
  sub_1B1B25B94((uint64_t)v38, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v40 = 0;
  v41 = 0;
  v42 = v182;
  v43 = a13;
  if (v177)
    goto LABEL_28;
LABEL_4:
  v172 = v43;
  v180 = v41;
LABEL_30:
  v79 = v170 & 1;
  type metadata accessor for ScriptCodeGen();
  swift_initStackObject();
  v80 = v178;
  swift_retain();
  v81 = v176;
  swift_bridgeObjectRetain();
  v82 = (_QWORD *)sub_1B1B5A24C(v80, v175, v81);
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v177) = v79;
  v179 = v82;
  if (!v79 && v181 <= 2000)
  {
    if (v181 > 1059)
    {
      *(_QWORD *)&v184 = 0;
      *((_QWORD *)&v184 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain_n();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v184 = 0xD000000000000017;
      *((_QWORD *)&v184 + 1) = 0x80000001B2330730;
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v84 = *((_QWORD *)&v184 + 1);
      v83 = v184;
    }
    else
    {
      swift_bridgeObjectRetain();
      v83 = 0xD000000000000012;
      v84 = 0x80000001B2330770;
    }
    v182 = v83;
    if (v180)
    {
      v113 = *(void **)(v180 + 64);
      v114 = (const char *)(sub_1B22287D0() + 32);
      swift_retain();
      v115 = (void (*)(uint64_t))dlsym(v113, v114);
      v116 = swift_release();
      if (!v115)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        LODWORD(v178) = v40;
        *(_QWORD *)&v184 = 0;
        *((_QWORD *)&v184 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        swift_bridgeObjectRelease();
        strcpy((char *)&v184, "couldn't find ");
        HIBYTE(v184) = -18;
        sub_1B2228890();
        v128 = v184;
        v129 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v184 = 0;
        swift_retain();
        sub_1B1F1AD70(v129, (uint64_t *)&v184, v128, *((uint64_t *)&v128 + 1));
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v40 = v178;
        goto LABEL_89;
      }
      v115(v116);
      swift_release();
      goto LABEL_71;
    }
    v117 = sub_1B22287D0();
    v118 = (void (*)(uint64_t))dlsym_default((char *)(v117 + 32));
    v119 = swift_release();
    if (v118)
    {
      v118(v119);
    }
    else
    {
      v136 = sub_1B22287D0();
      v137 = objc_getClass((const char *)(v136 + 32));
      swift_release();
      if (v137)
      {
        sub_1B22292EC();
        swift_unknownObjectRelease();
        sub_1B1A0DDAC(&v183, &v184);
        sub_1B1A0DDAC(&v184, &v183);
        sub_1B212A1C0();
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_89;
        goto LABEL_72;
      }
      strcpy((char *)&v184, "VFXAssets.");
      BYTE11(v184) = 0;
      HIDWORD(v184) = -369098752;
      sub_1B2228890();
      v144 = (NSString *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v145 = NSClassFromString(v144);

      if (!v145)
      {
        *(_QWORD *)&v184 = 0x2E6E69616DLL;
        *((_QWORD *)&v184 + 1) = 0xE500000000000000;
        sub_1B2228890();
        v146 = (NSString *)sub_1B2228728();
        swift_bridgeObjectRelease();
        v147 = NSClassFromString(v146);

        if (!v147)
        {
          v148 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
          v149 = objc_msgSend(v148, sel_bundleIdentifier);

          if (v149)
          {
            v174 = (char *)v84;
            v150 = sub_1B222874C();
            v152 = v151;

            *(_QWORD *)&v184 = v150;
            *((_QWORD *)&v184 + 1) = v152;
            *(_QWORD *)&v183 = 46;
            *((_QWORD *)&v183 + 1) = 0xE100000000000000;
            sub_1B1A06460();
            v153 = sub_1B2229214();
            swift_bridgeObjectRelease();
            v154 = *(_QWORD *)(v153 + 16);
            if (v154)
            {
              v155 = v153 + 16 * v154;
              v157 = *(_QWORD *)(v155 + 16);
              v156 = *(_QWORD *)(v155 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(_QWORD *)&v184 = v157;
              *((_QWORD *)&v184 + 1) = v156;
              sub_1B2228890();
              sub_1B2228890();
              v158 = (NSString *)sub_1B2228728();
              swift_bridgeObjectRelease();
              v159 = NSClassFromString(v158);

              if (v159)
                goto LABEL_71;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          strcpy((char *)&v184, "VFXCoreTests.");
          HIWORD(v184) = -4864;
          sub_1B2228890();
          v160 = (NSString *)sub_1B2228728();
          swift_bridgeObjectRelease();
          v161 = NSClassFromString(v160);

          if (!v161)
            goto LABEL_89;
        }
      }
    }
LABEL_71:
    swift_getObjCClassMetadata();
LABEL_72:
    sub_1B1B9DAD4(0, &qword_1ED4BA7E8);
    if (swift_dynamicCastMetatype())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      v121 = objc_msgSend(ObjCClassFromMetadata, sel_performSelector_, sub_1B2228284());
      v122 = ObjCClassFromMetadata;
      v123 = v172;
      if (v121)
      {
        swift_unknownObjectRetain();
        *(_QWORD *)&v184 = v121;
        sub_1B212A14C();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v94 = sub_1B21279CC(v183);
          v182 = v42;
          swift_bridgeObjectRelease();
          goto LABEL_76;
        }
      }
      if ((v123 & 1) != 0)
      {
        sub_1B1B6AE48();
        swift_allocError();
        *(_QWORD *)v126 = 0xD000000000000022;
        *(_QWORD *)(v126 + 8) = 0x80000001B234D5A0;
        *(_BYTE *)(v126 + 16) = 96;
        swift_willThrow();
        swift_release();
        goto LABEL_132;
      }
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v130 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v184 = 0;
      swift_retain();
      v131 = 0xD000000000000022;
      v132 = "missing selector: scriptTable_1000";
      goto LABEL_130;
    }
LABEL_89:
    if (v181 <= 1008)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v130 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v184 = 0;
      swift_retain();
      v131 = 0xD000000000000032;
      v132 = "file is too old to load script without recompiling";
      goto LABEL_130;
    }
    if (v40)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v184 = 0;
      *((_QWORD *)&v184 + 1) = 0xE000000000000000;
      sub_1B2229430();
    }
    else
    {
      *(_QWORD *)&v184 = 0;
      *((_QWORD *)&v184 + 1) = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
    }
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v138 = *((_QWORD *)&v184 + 1);
    v139 = v184;
    if ((v172 & 1) == 0)
    {
LABEL_110:
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v140 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v184 = 0;
      swift_retain();
      sub_1B1F1AD70(v140, (uint64_t *)&v184, v139, v138);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_131;
    }
LABEL_124:
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v143 = v139;
    *(_QWORD *)(v143 + 8) = v138;
    *(_BYTE *)(v143 + 16) = 96;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_132;
  }
  *(_QWORD *)&v184 = 0;
  *((_QWORD *)&v184 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v184 = 0xD000000000000017;
  *((_QWORD *)&v184 + 1) = 0x80000001B234D3A0;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if ((_DWORD)v177 || v181 > 2042)
  {
    v93 = v82[5];
    v92 = v82[6];
    swift_bridgeObjectRetain();
    v90 = (_QWORD *)sub_1B2127EC4(v93, v92);
    swift_bridgeObjectRelease();
    LOBYTE(v85) = v172;
    if (!v90)
      goto LABEL_39;
  }
  else
  {
    v85 = v172;
    if (v180)
    {
      v86 = *(void **)(v180 + 64);
      v87 = (const char *)(sub_1B22287D0() + 32);
      swift_retain();
      v88 = (uint64_t (*)(uint64_t))dlsym(v86, v87);
      v89 = swift_release();
      if (!v88)
      {
        v172 = v85;
        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)&v184 = 0;
        *((_QWORD *)&v184 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        swift_bridgeObjectRelease();
        strcpy((char *)&v184, "couldn't find ");
        HIBYTE(v184) = -18;
        sub_1B2228890();
        v141 = v184;
        v142 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v184 = 0;
        swift_retain();
        sub_1B1F1AD70(v142, (uint64_t *)&v184, v141, *((uint64_t *)&v141 + 1));
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        LOBYTE(v85) = v172;
        goto LABEL_120;
      }
      v90 = (_QWORD *)v88(v89);
      swift_release();
      if (!v90)
      {
LABEL_39:
        if ((_DWORD)v177 || v181 > 2043)
        {
          swift_bridgeObjectRelease();
          if ((v85 & 1) != 0)
          {
            sub_1B1B6AE48();
            swift_allocError();
            *(_QWORD *)v91 = 0xD00000000000001CLL;
            *(_QWORD *)(v91 + 8) = 0x80000001B234D3C0;
            *(_BYTE *)(v91 + 16) = 96;
            swift_willThrow();
LABEL_131:
            swift_release();
            goto LABEL_132;
          }
          if (qword_1ED4BF430 != -1)
            swift_once();
          swift_retain();
          v130 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          *(_QWORD *)&v184 = 0;
          swift_retain();
          v131 = 0xD00000000000001CLL;
          v132 = "couldn't locate script table";
LABEL_130:
          sub_1B1F1AD70(v130, (uint64_t *)&v184, v131, (unint64_t)(v132 - 32) | 0x8000000000000000);
          swift_release();
          swift_release();
          goto LABEL_131;
        }
LABEL_120:
        if (v40)
        {
          *(_QWORD *)&v184 = 0;
          *((_QWORD *)&v184 + 1) = 0xE000000000000000;
          sub_1B2229430();
          sub_1B2228890();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v138 = *((_QWORD *)&v184 + 1);
          v139 = v184;
          if ((v85 & 1) == 0)
            goto LABEL_110;
        }
        else
        {
          *(_QWORD *)&v184 = 0;
          *((_QWORD *)&v184 + 1) = 0xE000000000000000;
          sub_1B2229430();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v184 = 0xD000000000000010;
          *((_QWORD *)&v184 + 1) = 0x80000001B234D3E0;
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v138 = *((_QWORD *)&v184 + 1);
          v139 = v184;
          if ((v85 & 1) == 0)
            goto LABEL_110;
        }
        goto LABEL_124;
      }
    }
    else
    {
      v133 = sub_1B22287D0();
      v134 = (uint64_t (*)(uint64_t))dlsym_default((char *)(v133 + 32));
      v135 = swift_release();
      if (!v134)
        goto LABEL_120;
      v90 = (_QWORD *)v134(v135);
      if (!v90)
        goto LABEL_39;
    }
  }
  v182 = v42;
  swift_bridgeObjectRelease();
  v94 = sub_1B1B7F538(MEMORY[0x1E0DEE9D8]);
  if (!*v90)
  {
LABEL_76:
    v124 = v165;
    if (v165)
    {
      type metadata accessor for MetalAPICodeLoader();
      swift_allocObject();
      v125 = sub_1B203E760();
      *(_QWORD *)(v125 + 72) = v124;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
    }
    else
    {
      v125 = 0;
    }
    swift_retain();
    v127 = sub_1B1BF9018();
    swift_release();
    if (!v127)
    {
      type metadata accessor for ScriptCompilerSystem();
      swift_allocObject();
      sub_1B1CDD824();
    }
    sub_1B1CDC974(v178, v175, v176, v181, v177, v180, v125, (uint64_t)v94, a11, a12 | ((HIDWORD(a12) & 1) << 32));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_132;
  }
  v95 = v90 + 2;
  while (1)
  {
    v98 = *(v95 - 1);
    v99 = sub_1B22288A8();
    v101 = v100;
    if (v98)
      break;
    swift_bridgeObjectRetain();
    v109 = sub_1B1DC3B00(v99, v101);
    v111 = v110;
    swift_bridgeObjectRelease();
    if ((v111 & 1) == 0)
      goto LABEL_48;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v184 = v94;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B1EB2CDC();
      v94 = (_QWORD *)v184;
    }
    swift_bridgeObjectRelease();
    sub_1B1EA4920(v109, (uint64_t)v94);
LABEL_47:
    swift_bridgeObjectRelease();
LABEL_48:
    swift_bridgeObjectRelease();
    v97 = *v95;
    v95 += 2;
    if (!v97)
      goto LABEL_76;
  }
  v102 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v184 = v94;
  v104 = sub_1B1DC3B00(v99, v101);
  v105 = v103;
  v106 = v94[2] + ((v103 & 1) == 0);
  if (v94[3] >= v106)
  {
    if ((v102 & 1) != 0)
    {
      v94 = (_QWORD *)v184;
      if ((v103 & 1) != 0)
        goto LABEL_60;
    }
    else
    {
      sub_1B1EB2CDC();
      v94 = (_QWORD *)v184;
      if ((v105 & 1) != 0)
      {
LABEL_60:
        *(_QWORD *)(v94[7] + 8 * v104) = v98;
        goto LABEL_47;
      }
    }
    goto LABEL_46;
  }
  sub_1B1EA338C(v106, v102);
  v107 = sub_1B1DC3B00(v99, v101);
  if ((v105 & 1) == (v108 & 1))
  {
    v104 = v107;
    v94 = (_QWORD *)v184;
    if ((v105 & 1) != 0)
      goto LABEL_60;
LABEL_46:
    v94[(v104 >> 6) + 8] |= 1 << v104;
    v96 = (uint64_t *)(v94[6] + 16 * v104);
    *v96 = v99;
    v96[1] = v101;
    *(_QWORD *)(v94[7] + 8 * v104) = v98;
    ++v94[2];
    swift_bridgeObjectRetain();
    goto LABEL_47;
  }
  sub_1B2229FC4();
  __break(1u);
}

uint64_t sub_1B2129A64(uint64_t a1, void *a2)
{
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v28;
  void *v29;
  _QWORD v30[3];
  id v31[3];

  v31[2] = *(id *)MEMORY[0x1E0C80C00];
  v3 = (void (*)(uint64_t))MEMORY[0x1E0CB0E38];
  sub_1B1792854(0, (unint64_t *)&qword_1ED4B7B60, (void (*)(uint64_t))MEMORY[0x1E0CB0E38]);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v30 - v6;
  v31[0] = (id)sub_1B22280D4();
  v31[1] = v8;
  v30[1] = 0x617262696C786676;
  v30[2] = 0xEA00000000007972;
  v9 = sub_1B2228278();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  sub_1B1A06460();
  sub_1B222925C();
  v11 = v10;
  sub_1B1B25B94((uint64_t)v7, (unint64_t *)&qword_1ED4B7B60, v3);
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = sub_1B2228974();
    v14 = v13;
    v16 = v15;
    v18 = v17;
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E20388](v12, v14, v16, v18);
    swift_bridgeObjectRelease();
    v19 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
    v20 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(v19, sel_initWithPath_, v20);

    if (v21)
    {
      v22 = objc_msgSend(v21, sel_executablePath);
      if (v22)
      {
        v23 = v22;
        v24 = sub_1B222874C();

        if (!a2)
          goto LABEL_10;
      }
      else
      {
        v24 = 0;
        if (!a2)
        {
LABEL_10:

          return v24;
        }
      }
      v31[0] = 0;
      v25 = objc_msgSend(a2, sel_newDefaultLibraryWithBundle_error_, v21, v31);
      v26 = v31[0];
      if (!v25)
      {
        v28 = v26;
        v29 = (void *)sub_1B2227FB4();

        swift_willThrow();
        return v24;
      }
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t sub_1B2129D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void (*v14)(char *, uint64_t);
  void *v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  id v20[4];

  v0 = sub_1B2228110();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v20 - v7;
  v20[0] = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  sub_1B222805C();
  v9 = (void *)sub_1B2228728();
  v10 = objc_msgSend(v9, sel_stringByDeletingPathExtension);

  v11 = (void *)sub_1B222874C();
  v13 = v12;
  swift_bridgeObjectRelease();

  sub_1B22280B0();
  v20[2] = v11;
  v20[3] = v13;
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B22280A4();
  swift_bridgeObjectRelease();
  v14 = *(void (**)(char *, uint64_t))(v1 + 8);
  v14(v4, v0);
  sub_1B22280D4();
  v15 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v16 = v20[0];
  v17 = objc_msgSend(v20[0], sel_isReadableFileAtPath_, v15);

  if (v17)
  {
    v18 = sub_1B2228710();
    v14(v8, v0);

  }
  else
  {
    v14(v8, v0);

    return 0;
  }
  return v18;
}

_QWORD *sub_1B2129F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int64_t v22;

  sub_1B1B9D218();
  v4 = sub_1B22296B8();
  v5 = (_QWORD *)v4;
  v6 = 0;
  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = v4 + 64;
  v22 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v6 << 6);
      goto LABEL_19;
    }
    v15 = v6 + 1;
    if (v6 + 1 >= v22)
      return v5;
    v16 = *(_QWORD *)(v7 + 8 * v15);
    if (!v16)
    {
      v15 = v6 + 2;
      if (v6 + 2 >= v22)
        return v5;
      v16 = *(_QWORD *)(v7 + 8 * v15);
      if (!v16)
      {
        v15 = v6 + 3;
        if (v6 + 3 >= v22)
          return v5;
        v16 = *(_QWORD *)(v7 + 8 * v15);
        if (!v16)
        {
          v15 = v6 + 4;
          if (v6 + 4 >= v22)
            return v5;
          v16 = *(_QWORD *)(v7 + 8 * v15);
          if (!v16)
            break;
        }
      }
    }
LABEL_18:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v6 = v15;
LABEL_19:
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14);
    v18 = 0xFFFFFFFFLL;
    if (*(_QWORD *)(a2 + 16))
    {
      v19 = sub_1B1DC3CA4(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14));
      if ((v20 & 1) != 0)
        v18 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v12 = 8 * v14;
    *(_QWORD *)(v5[6] + v12) = v17;
    *(_QWORD *)(v5[7] + v12) = v18;
    ++v5[2];
  }
  while (v22 - 5 != v6)
  {
    v16 = *(_QWORD *)(a1 + 104 + 8 * v6++);
    if (v16)
    {
      v15 = v6 + 4;
      goto LABEL_18;
    }
  }
  return v5;
}

void sub_1B212A14C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF63C70)
  {
    sub_1B1B9DAD4(255, &qword_1EEF5FBF0);
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF63C70);
  }
}

unint64_t sub_1B212A1C0()
{
  unint64_t result;

  result = qword_1EEF63C78;
  if (!qword_1EEF63C78)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF63C78);
  }
  return result;
}

uint64_t sub_1B212A1FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for BundleInfo();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_1B2228110();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v9 = v0 + v3 + *(int *)(v1 + 20);
  v10 = sub_1B222826C();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_1B212A338(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v7 = *(_QWORD *)(type metadata accessor for BundleInfo() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  v10 = (v9 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v11 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_QWORD *)(sub_1B2228110() - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + v11 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = (*(_QWORD *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1B2124198(a1, a2, a3, v3 + v8, *(unsigned int *)(v3 + v10) | ((unint64_t)*(unsigned __int8 *)(v3 + v10 + 4) << 32), *(_QWORD *)(v3 + v11), (_QWORD *)(v3 + v13), *(_QWORD **)(v3 + v14), *(_QWORD *)(v3 + v14 + 8), *(void **)(v3 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t storeEnumTagSinglePayload for BundleInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B212A488 + 4 * byte_1B22C03BA[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B212A4BC + 4 * byte_1B22C03B5[v4]))();
}

uint64_t sub_1B212A4BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B212A4C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B212A4CCLL);
  return result;
}

uint64_t sub_1B212A4D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B212A4E0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B212A4E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B212A4EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BundleInfo.CodingKeys()
{
  return &type metadata for BundleInfo.CodingKeys;
}

unint64_t sub_1B212A50C()
{
  unint64_t result;

  result = qword_1EEF63C80;
  if (!qword_1EEF63C80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C07B8, &type metadata for BundleInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63C80);
  }
  return result;
}

unint64_t sub_1B212A554()
{
  unint64_t result;

  result = qword_1ED4B7BB0;
  if (!qword_1ED4B7BB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C06F0, &type metadata for BundleInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7BB0);
  }
  return result;
}

unint64_t sub_1B212A59C()
{
  unint64_t result;

  result = qword_1ED4B7BA8;
  if (!qword_1ED4B7BA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0718, &type metadata for BundleInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7BA8);
  }
  return result;
}

uint64_t sub_1B212A5E0()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 0x676E69646F636544;
}

void sub_1B212A680(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = &unk_1E638BCF8;
  a1[1] = &unk_1E638BCD0;
  v1 = MEMORY[0x1E0DEE9D8];
  a1[2] = &unk_1E638BCA0;
  a1[3] = v1;
  a1[4] = v1;
  a1[5] = v1;
}

_QWORD *sub_1B212A6B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name + 8);
  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name);
  *v4 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name);
  v4[1] = v3;
  swift_bridgeObjectRetain();
  return sub_1B1BCE388(a1);
}

void sub_1B212A704()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B212A730()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B212A744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B212A7BC()
{
  return type metadata accessor for DecodingErrorNode(0);
}

uint64_t type metadata accessor for DecodingErrorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63C88);
}

uint64_t sub_1B212A7D8()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B212A818(_QWORD *a1)
{
  sub_1B19FA070(a1, a1[3]);
  return sub_1B1FF5998();
}

uint64_t sub_1B212A890(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B1FF5A30();
  if (!v2)
  {
    v4 = (_QWORD *)(v1 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name);
    *v4 = v5;
    v4[1] = v6;
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthoringGraphCoder()
{
  return &type metadata for AuthoringGraphCoder;
}

void sub_1B212A934(char *a1)
{
  sub_1B1F932B4(*a1);
}

void sub_1B212A940()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B212A980()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B212A9FC()
{
  __asm { BR              X10 }
}

uint64_t sub_1B212AA2C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B212AA94()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B212AAD0()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B212AB4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B212C85C();
  *a1 = result;
  return result;
}

uint64_t sub_1B212AB78()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B212AB9C + 4 * byte_1B22C084F[*v0]))();
}

void sub_1B212AB9C(_QWORD *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

void sub_1B212ABB0(_QWORD *a1@<X8>)
{
  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
}

void sub_1B212ABC8(_QWORD *a1@<X8>)
{
  *a1 = 0x6870617267627573;
  a1[1] = 0xE800000000000000;
}

void sub_1B212ABE4(_QWORD *a1@<X8>)
{
  *a1 = 0x6F666E4972657375;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1B212AC00()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B212AC24 + 4 * byte_1B22C0854[*v0]))(25705, 0xE200000000000000);
}

uint64_t sub_1B212AC24()
{
  return 1701869940;
}

uint64_t sub_1B212AC34()
{
  return 0x65756C6176;
}

uint64_t sub_1B212AC48()
{
  return 0x6870617267627573;
}

uint64_t sub_1B212AC60()
{
  return 0x6F666E4972657375;
}

uint64_t sub_1B212AC78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B212C85C();
  *a1 = result;
  return result;
}

uint64_t sub_1B212AC9C()
{
  sub_1B212EA54();
  return sub_1B222A1D4();
}

uint64_t sub_1B212ACC4()
{
  sub_1B212EA54();
  return sub_1B222A1E0();
}

uint64_t sub_1B212ACEC(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v48 = a7;
  v47 = a6;
  v44 = a5;
  v11 = sub_1B222826C();
  v46 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v45 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, v14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15, v16);
  v42 = (char *)&v41 - v17;
  v49 = 0;
  v50 = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v49 = 0xD000000000000016;
  v50 = 0x80000001B234D960;
  v41 = a2;
  v43 = a3;
  sub_1B2228890();
  v51 = v49;
  v52 = v50;
  if (a1)
  {
    v49 = 8250;
    v50 = 0xE200000000000000;
    swift_getErrorValue();
    v18 = a1;
    sub_1B2229FE8();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();

  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  v19 = v51;
  v20 = v52;
  swift_retain();
  swift_bridgeObjectRetain();
  v21 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v49 = 0;
  swift_retain();
  sub_1B1F1AD70(v21, &v49, v19, v20);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v22 = a4[3];
  v23 = a4[4];
  sub_1B19FA070(a4, v22);
  LOBYTE(v22) = *(_BYTE *)(sub_1B20680A8(v22, v23) + 82);
  swift_release();
  if ((v22 & 1) != 0)
  {
    swift_retain();
    v24 = sub_1B2228E90();
    v49 = 0;
    swift_retain();
    sub_1B1F1AD70(v24, &v49, v19, v20);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for DecodingErrorNode(0);
    v25 = (_QWORD *)swift_allocObject();
    v26 = (_QWORD *)((char *)v25 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name);
    v27 = v43;
    *v26 = v41;
    v26[1] = v27;
    v28 = MEMORY[0x1E0DEE9D8];
    v25[2] = MEMORY[0x1E0DEE9D8];
    v25[3] = 0;
    v25[4] = 0;
    swift_bridgeObjectRetain();
    sub_1B2228260();
    v29 = v46;
    v30 = (uint64_t)v42;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v42, 1, 1, v11);
    type metadata accessor for AuthoringNode();
    swift_allocObject();
    v19 = sub_1B20E4E94((uint64_t)v25, v28, v30, 0, 0xF000000000000000);
    swift_release();
    v31 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v45, v44, v11);
    v32 = v19 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v33 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 24);
    v33(v19 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v31, v11);
    v33(*(_QWORD *)(v19 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + OBJC_IVAR____TtC3VFX4Node_authoringID, (char *)v32, v11);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v11);
    v34 = (uint64_t *)(v19 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
    v35 = *(_QWORD *)(v19 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
    v36 = *(_QWORD *)(v19 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
    v37 = v47;
    v38 = v48;
    *v34 = v47;
    v34[1] = v38;
    sub_1B1AEB720(v37, v38);
    sub_1B1A0DAC8(v35, v36);
  }
  else
  {
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v39 = v19;
    *(_QWORD *)(v39 + 8) = v20;
    *(_BYTE *)(v39 + 16) = 32;
    swift_willThrow();
  }
  return v19;
}

uint64_t sub_1B212B160(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __objc2_class **v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t);
  char *v16;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  __objc2_class **v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31[5];
  char v32;

  v29[0] = a2;
  v3 = sub_1B222826C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1EEF63D48, (uint64_t (*)(void))sub_1B212EA54, (uint64_t)&type metadata for AuthoringNodeCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v30 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v29 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B212EA54();
  v13 = (__objc2_class **)v29[0];
  sub_1B222A180();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, (uint64_t)v13 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v3);
  LOBYTE(v31[0]) = 0;
  sub_1B19E52CC(&qword_1EEF5C600, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  v14 = v29[1];
  sub_1B2229958();
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v15 = *(uint64_t (**)(char *, uint64_t))(v30 + 8);
    v16 = v12;
  }
  else
  {
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v19 = *(uint64_t **)((char *)v13 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
    sub_1B222A210();
    LOBYTE(v31[0]) = 1;
    sub_1B2229910();
    swift_bridgeObjectRelease();
    v20 = *(unint64_t *)((char *)v13 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
    if (v20 >> 60 == 15)
    {
      v21 = v13;
      v22 = v12;
    }
    else
    {
      v23 = v12;
      v31[0] = *(uint64_t *)((char *)v13 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
      v24 = v31[0];
      v31[1] = v20;
      v32 = 4;
      sub_1B1A0DC90(v31[0], v20);
      sub_1B2115F08();
      sub_1B2229958();
      v21 = v13;
      v22 = v23;
      sub_1B1A0DAC8(v24, v20);
    }
    v25 = swift_conformsToProtocol2();
    if (v25)
      v26 = v25;
    else
      v26 = 0;
    if (v25)
      v27 = v19;
    else
      v27 = 0;
    if (v27)
    {
      v28 = *v27;
      v32 = 2;
      swift_retain();
      sub_1B22298C8();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v26 + 8))(v31, v28, v26);
      swift_release();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v31);
      v18 = v30;
    }
    if (*v21 == _TtC3VFX21AuthoringSubGraphNode)
    {
      v31[0] = *(uint64_t *)((char *)v21 + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph);
      v32 = 3;
      sub_1B19FC428();
      sub_1B2229958();
    }
    v15 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
    v16 = v22;
  }
  return v15(v16, v9);
}

uint64_t sub_1B212B52C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;

  sub_1B19F8E54(0, &qword_1EEF63D50, (uint64_t (*)(void))sub_1B212EA98, (uint64_t)&type metadata for EdgeCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B212EA98();
  sub_1B222A180();
  v14 = 0;
  sub_1B222826C();
  sub_1B19E52CC(&qword_1EEF5C600, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
  sub_1B2229958();
  if (!v1)
  {
    type metadata accessor for EdgeCoder(0);
    v13 = 1;
    sub_1B2229940();
    v12 = 2;
    sub_1B2229958();
    v11 = 3;
    sub_1B2229940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B212B700@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v29 = a2;
  v3 = sub_1B222826C();
  v4 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  v32 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v30 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v33 = (char *)v28 - v9;
  sub_1B19F8E54(0, &qword_1EEF63D38, (uint64_t (*)(void))sub_1B212EA98, (uint64_t)&type metadata for EdgeCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v35 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v28 - v13;
  v15 = (int *)type metadata accessor for EdgeCoder(0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19FA070(a1, a1[3]);
  sub_1B212EA98();
  v34 = v14;
  v19 = (uint64_t)v36;
  sub_1B222A150();
  if (v19)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v20 = v30;
  v21 = v11;
  v36 = a1;
  v22 = v32;
  v40 = 0;
  v23 = sub_1B19E52CC(&qword_1ED4B7B48, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
  v24 = v31;
  sub_1B2229814();
  v28[1] = v23;
  v25 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  v25(v18, v33, v24);
  v39 = 1;
  *(_QWORD *)&v18[v15[5]] = sub_1B22297FC();
  v38 = 2;
  sub_1B2229814();
  v25(&v18[v15[6]], v20, v24);
  v37 = 3;
  v26 = sub_1B22297FC();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v34, v35);
  *(_QWORD *)&v18[v15[7]] = v26;
  sub_1B212E234((uint64_t)v18, v29);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v36);
  return sub_1B1A04628((uint64_t)v18, type metadata accessor for EdgeCoder);
}

uint64_t sub_1B212BA58@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B212CC44(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B212BA80(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B212B160(a1, *v1);
}

void sub_1B212BA98(char *a1)
{
  sub_1B1F99F1C(*a1);
}

uint64_t sub_1B212BAA4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B212BAD4 + 4 * byte_1B22C0859[*v0]))(0x44497475706E69, 0xE700000000000000);
}

uint64_t sub_1B212BAD4()
{
  return 0x646E497475706E69;
}

uint64_t sub_1B212BAF0()
{
  return 0x444974757074756FLL;
}

uint64_t sub_1B212BB08()
{
  return 0x6E4974757074756FLL;
}

uint64_t sub_1B212BB28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B212C8EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B212BB4C()
{
  sub_1B212EA98();
  return sub_1B222A1D4();
}

uint64_t sub_1B212BB74()
{
  sub_1B212EA98();
  return sub_1B222A1E0();
}

uint64_t sub_1B212BB9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B212B700(a1, a2);
}

uint64_t sub_1B212BBB0(_QWORD *a1)
{
  return sub_1B212B52C(a1);
}

uint64_t sub_1B212BBC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F93CC4(*a1, *a2);
}

uint64_t sub_1B212BBD0()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B212BC68()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B212BCDC()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B212BD70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B212C8A4();
  *a1 = result;
  return result;
}

void sub_1B212BD9C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x7365676465;
  if (v2 != 1)
  {
    v5 = 0x6F666E4972657375;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7365646F6ELL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B212BDF4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7365676465;
  if (*v0 != 1)
    v1 = 0x6F666E4972657375;
  if (*v0)
    return v1;
  else
    return 0x7365646F6ELL;
}

uint64_t sub_1B212BE48@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B212C8A4();
  *a1 = result;
  return result;
}

uint64_t sub_1B212BE6C()
{
  sub_1B212E140();
  return sub_1B222A1D4();
}

uint64_t sub_1B212BE94()
{
  sub_1B212E140();
  return sub_1B222A1E0();
}

void sub_1B212BEBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;

  v4 = sub_1B222826C();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    v10 = *(_QWORD *)(a1 + 8);
    (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v9, v10 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v4, v7);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *a2;
    *a2 = 0x8000000000000000;
    sub_1B1B8A2DC(v10, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
    *a2 = v13;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
}

uint64_t sub_1B212BFBC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t result;
  uint64_t v29;
  char *v30;
  char v31;
  _QWORD *v32;
  char v33[16];
  void **v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  sub_1B19F8E54(0, &qword_1EEF63CD8, (uint64_t (*)(void))sub_1B212E140, (uint64_t)&type metadata for AuthoringGraphCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v29 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B212E140();
  sub_1B222A180();
  v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v32 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v34 = (void **)&v32;
  v35 = (_QWORD *)sub_1B1C6E138(MEMORY[0x1E0DEE9D8]);
  v36 = v12;
  v29 = a2;
  sub_1B1C5DF90((uint64_t)sub_1B212E278, (uint64_t)v33, 0, 0x1000000000000000, 0, (uint64_t)v11, (uint64_t)&v35);
  if (v2)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v13 = sub_1B1C6B88C((uint64_t)v35, v36, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1BE20A4, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = v11;
    v14 = v13[2];
    if (v14)
    {
      v30 = v10;
      v15 = v6;
      v16 = v7;
      swift_retain();
      for (i = 0; i != v14; ++i)
      {
        if (v13[i + 4])
        {
          v18 = swift_retain();
          MEMORY[0x1B5E2064C](v18);
          if (v35[2] >= v35[3] >> 1)
            sub_1B2228AF4();
          sub_1B2228B30();
          sub_1B2228AD0();
        }
      }
      swift_release();
      v11 = v35;
      v7 = v16;
      v6 = v15;
      v10 = v30;
    }
    swift_release();
    v35 = v11;
    v31 = 0;
    sub_1B212E184();
    sub_1B212E280(&qword_1EEF63CE0, (uint64_t (*)(void))sub_1B212E2E4, MEMORY[0x1E0DEAF10]);
    sub_1B2229958();
    swift_bridgeObjectRelease();
    v35 = v32;
    v31 = 1;
    sub_1B1791524(0, &qword_1EEF63CC0, type metadata accessor for EdgeCoder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B212E328(&qword_1EEF63CF0, &qword_1EEF63CF8, (uint64_t)&unk_1B22C0A48, MEMORY[0x1E0DEAF10]);
    sub_1B2229958();
    if (*(_QWORD *)(v29 + 16))
    {
      v19 = v7;
      v20 = (void *)objc_opt_self();
      swift_bridgeObjectRetain();
      v21 = (void *)sub_1B2228524();
      swift_bridgeObjectRelease();
      v35 = 0;
      v22 = objc_msgSend(v20, sel_dataWithJSONObject_options_error_, v21, 0, &v35);

      v23 = v35;
      if (v22)
      {
        v24 = (_QWORD *)sub_1B222817C();
        v26 = v25;

        v35 = v24;
        v36 = v26;
        v31 = 2;
        sub_1B2115F08();
        sub_1B2229958();
        sub_1B1A0DADC((uint64_t)v24, v26);
      }
      else
      {
        v27 = v23;
        sub_1B2227FB4();

        swift_willThrow();
      }
      (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B212C428(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v6 = type metadata accessor for EdgeCoder(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v37 - v13;
  sub_1B1791524(0, &qword_1EEF62628, v15, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v37 - v23;
  v25 = 0;
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    v42 = v10;
    v43 = v6;
    v39 = a2;
    v40 = a3;
    v26 = *(_QWORD *)(a1 + 8);
    swift_retain();
    v27 = swift_bridgeObjectRetain();
    v38 = v26;
    v28 = sub_1B212CAC8(v27, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B212E3C0, v26);
    swift_bridgeObjectRelease();
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      v41 = v14;
      v30 = v28 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v44 = *(_QWORD *)(v17 + 72);
      v37 = v28;
      swift_bridgeObjectRetain();
      v31 = MEMORY[0x1E0DEE9D8];
      v33 = (uint64_t)v42;
      v32 = v43;
      do
      {
        sub_1B1FFFFBC(v30, (uint64_t)v24, &qword_1EEF62628, type metadata accessor for EdgeCoder);
        sub_1B212E3C8((uint64_t)v24, (uint64_t)v20);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v20, 1, v32) == 1)
        {
          sub_1B1B1DC9C((uint64_t)v20, &qword_1EEF62628, type metadata accessor for EdgeCoder);
        }
        else
        {
          v34 = (uint64_t)v41;
          sub_1B212E424((uint64_t)v20, (uint64_t)v41);
          sub_1B212E424(v34, v33);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v31 = sub_1B1C69DB0(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
          v36 = *(_QWORD *)(v31 + 16);
          v35 = *(_QWORD *)(v31 + 24);
          if (v36 >= v35 >> 1)
            v31 = sub_1B1C69DB0(v35 > 1, v36 + 1, 1, v31);
          *(_QWORD *)(v31 + 16) = v36 + 1;
          v33 = (uint64_t)v42;
          sub_1B212E424((uint64_t)v42, v31+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v36);
          v32 = v43;
        }
        v30 += v44;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      v31 = MEMORY[0x1E0DEE9D8];
    }
    sub_1B19F6178(v31);
    a3 = v40;
    v25 = v38;
  }
  *a3 = v25;
}

uint64_t sub_1B212C730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  int *v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2)
  {
    v9 = a4 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v10 = sub_1B222826C();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(a5, v9, v10);
    v12 = a2 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v13 = (int *)type metadata accessor for EdgeCoder(0);
    v11(a5 + v13[6], v12, v10);
    *(_QWORD *)(a5 + v13[5]) = a1;
    *(_QWORD *)(a5 + v13[7]) = a3;
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*((_QWORD *)v13 - 1) + 56);
    v15 = a5;
    v16 = 0;
    v17 = (uint64_t)v13;
  }
  else
  {
    v17 = type metadata accessor for EdgeCoder(0);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
    v15 = a5;
    v16 = 1;
  }
  return v14(v15, v16, 1, v17);
}

uint64_t sub_1B212C81C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B212D4F0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B212C844(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B212BFBC(a1, *v1);
}

uint64_t sub_1B212C85C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1B212C8A4()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B212C8EC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x44497475706E69 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E497475706E69 && a2 == 0xEA00000000007865 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x444974757074756FLL && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E4974757074756FLL && a2 == 0xEB00000000786564)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B212CAC8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v19 = a2;
  v20 = a3;
  sub_1B1791524(0, &qword_1EEF62628, type metadata accessor for EdgeCoder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v18 - v7;
  v21 = MEMORY[0x1E0DEE9D8];
  sub_1B202B304(0, 0, 0);
  v9 = v21;
  v10 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v18 = a1;
  if (v10)
  {
    v11 = 0;
    v12 = (uint64_t *)(a1 + 40);
    do
    {
      v14 = *(v12 - 1);
      v13 = *v12;
      swift_retain();
      v19(v11, v14, v13);
      swift_release();
      v21 = v9;
      v16 = *(_QWORD *)(v9 + 16);
      v15 = *(_QWORD *)(v9 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1B202B304(v15 > 1, v16 + 1, 1);
        v9 = v21;
      }
      v12 += 2;
      ++v11;
      *(_QWORD *)(v9 + 16) = v16 + 1;
      sub_1B212E3C8((uint64_t)v8, v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v16);
    }
    while (v10 != v11);
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B212CC44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __objc2_class **v31;
  __objc2_class **v32;
  __objc2_class *v33;
  uint64_t v34;
  uint64_t v35;
  __objc2_class **v36;
  void *v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, char *, uint64_t);
  void (*v56)(char *, uint64_t);
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  __objc2_class **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __objc2_class **v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[5];
  char v82;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v75 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v77 = (char *)&v68 - v7;
  v78 = sub_1B222826C();
  v76 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v8);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v79 = (uint64_t)&v68 - v13;
  sub_1B19F8E54(0, &qword_1EEF63D28, (uint64_t (*)(void))sub_1B212EA54, (uint64_t)&type metadata for AuthoringNodeCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = (char *)&v68 - v18;
  v20 = (uint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B212EA54();
  v21 = v80;
  sub_1B222A150();
  if (!v21)
  {
    v22 = (uint64_t)v77;
    v23 = v10;
    v80 = v16;
    LOBYTE(v81[0]) = 0;
    sub_1B19E52CC(&qword_1ED4B7B48, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    sub_1B2229814();
    LOBYTE(v81[0]) = 1;
    v73 = (char *)sub_1B22297CC();
    v74 = v24;
    v82 = 4;
    sub_1B2115EC4();
    sub_1B22297B4();
    v72 = 0;
    v69 = v81[0];
    v70 = v81[1];
    if (qword_1EEF57548 != -1)
      swift_once();
    v26 = qword_1EEFD58C0;
    v27 = a1[3];
    v28 = a1[4];
    sub_1B19FA070(a1, v27);
    sub_1B2067BF4(v27, v28);
    v29 = (uint64_t)v73;
    v30 = v74;
    v20 = v26;
    v31 = (__objc2_class **)sub_1B20ED458((uint64_t)v73, v74);
    v71 = a1;
    if (v31)
    {
      v32 = v31;
      v33 = *v31;
      v34 = swift_conformsToProtocol2();
      if (v34)
        v35 = v34;
      else
        v35 = 0;
      if (v34)
        v36 = v32;
      else
        v36 = 0;
      v37 = v72;
      v68 = v32;
      if (v36)
      {
        v82 = 2;
        swift_retain();
        sub_1B222976C();
        v38 = v70;
        if (v37)
        {
          v65 = v79;
          v39 = v37;
          v40 = v69;
          v20 = sub_1B212ACEC(v37, (uint64_t)v73, v74, v71, v65, v69, v38);
          swift_bridgeObjectRelease();
          sub_1B1A0DAC8(v40, v38);

          swift_release();
LABEL_25:
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v65, v78);
          goto LABEL_26;
        }
        (*(void (**)(_QWORD *, __objc2_class *, uint64_t))(v35 + 16))(v81, *v36, v35);
        v37 = 0;
        v64 = v68;
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v81);
        v33 = *v64;
        v65 = v79;
      }
      else
      {
        v65 = v79;
        v38 = v70;
      }
      v47 = v23;
      if (v33 != _TtC3VFX12SubGraphNode)
      {
        v72 = v37;
        v73 = v19;
        swift_bridgeObjectRelease();
        v48 = v76;
        v49 = v78;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v22, 1, 1, v78);
        type metadata accessor for AuthoringNode();
        swift_allocObject();
        v50 = swift_retain();
        v20 = sub_1B20E4E94(v50, MEMORY[0x1E0DEE9D8], v22, 0, 0xF000000000000000);
LABEL_23:
        swift_release();
        (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v65, v49);
        v51 = v47;
        v52 = v65;
        v53 = v49;
        v54 = v20 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
        v55 = *(void (**)(uint64_t, char *, uint64_t))(v48 + 24);
        v55(v20 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v51, v53);
        v55(*(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + OBJC_IVAR____TtC3VFX4Node_authoringID, (char *)v54, v53);
        v56 = *(void (**)(char *, uint64_t))(v48 + 8);
        v56(v51, v53);
        swift_release();
        v56((char *)v52, v53);
        (*(void (**)(char *, uint64_t))(v80 + 8))(v73, v15);
        v57 = (_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
        v58 = *(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
        v59 = *(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
        v60 = v70;
        *v57 = v69;
        v57[1] = v60;
        sub_1B1A0DAC8(v58, v59);
LABEL_27:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v71);
        return v20;
      }
      v82 = 3;
      sub_1B19FC30C();
      v61 = (uint64_t)v68;
      swift_retain();
      sub_1B2229814();
      if (!v37)
      {
        v72 = 0;
        v73 = v19;
        swift_bridgeObjectRelease();
        v66 = v81[0];
        v48 = v76;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v22, 1, 1, v78);
        type metadata accessor for AuthoringSubGraphNode(0);
        *(_QWORD *)(swift_allocObject() + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph) = v66;
        v67 = v75;
        sub_1B1FFFFBC(v22, v75, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
        swift_retain();
        v20 = sub_1B20E4E94(v61, MEMORY[0x1E0DEE9D8], v67, 0, 0xF000000000000000);
        swift_release();
        v49 = v78;
        sub_1B1B1DC9C(v22, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998]);
        v65 = v79;
        goto LABEL_23;
      }
      v62 = v37;
      v63 = v69;
      v20 = sub_1B212ACEC(v37, (uint64_t)v73, v74, v71, v65, v69, v38);
      swift_bridgeObjectRelease();
      sub_1B1A0DAC8(v63, v38);
      swift_release();

      goto LABEL_25;
    }
    v41 = v79;
    v42 = v69;
    v43 = v70;
    v44 = v72;
    v45 = sub_1B212ACEC(0, v29, v30, a1, v79, v69, v70);
    v46 = v78;
    if (!v44)
    {
      v20 = v45;
      swift_bridgeObjectRelease();
      sub_1B1A0DAC8(v42, v43);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v41, v46);
LABEL_26:
      (*(void (**)(char *, uint64_t))(v80 + 8))(v19, v15);
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    sub_1B1A0DAC8(v42, v43);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v41, v46);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v19, v15);
    a1 = v71;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v20;
}

uint64_t sub_1B212D4F0(_QWORD *a1)
{
  uint64_t v1;
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  id v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  _QWORD *v95;
  int *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  sub_1B1B1F358();
  v4 = v3;
  MEMORY[0x1E0C80A78](v3, v5);
  v100 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B222820C();
  v98 = *(_QWORD *)(v7 - 8);
  v99 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v97 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for EdgeCoder(0);
  v10 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102, v11);
  v101 = (uint64_t)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1EEF63C98, (uint64_t (*)(void))sub_1B212E140, (uint64_t)&type metadata for AuthoringGraphCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v14 = v13;
  v15 = *(_QWORD **)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v79 - v17;
  v19 = a1[3];
  v20 = a1[4];
  sub_1B19FA070(a1, v19);
  if (!sub_1B2067BAC(2039, v19, v20))
  {
    type metadata accessor for AuthoringGraph();
    v15 = (_QWORD *)swift_allocObject();
    v21 = MEMORY[0x1E0DEE9D8];
    v15[2] = 0;
    v15[3] = v21;
    v15[4] = 0;
    v15[5] = 0;
    v15[6] = sub_1B1B7DC90(v21);
LABEL_6:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return (uint64_t)v15;
  }
  v96 = v4;
  sub_1B19FA070(a1, a1[3]);
  sub_1B212E140();
  sub_1B222A150();
  if (v1)
    goto LABEL_6;
  sub_1B212E184();
  LOBYTE(v103) = 0;
  sub_1B212E280(&qword_1EEF63CB0, (uint64_t (*)(void))sub_1B212E1D8, MEMORY[0x1E0DEAF40]);
  sub_1B2229814();
  v84 = v15;
  v91 = v18;
  v92 = v14;
  v23 = v106[2];
  if (v23)
  {
    v103 = MEMORY[0x1E0DEE9D8];
    sub_1B2229550();
    v24 = 0;
    do
    {
      v25 = v24 + 1;
      swift_retain();
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
      v24 = v25;
    }
    while (v23 != v25);
    v26 = v103;
    swift_bridgeObjectRelease();
    v14 = v92;
  }
  else
  {
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x1E0DEE9D8];
  }
  type metadata accessor for AuthoringGraph();
  v15 = (_QWORD *)swift_allocObject();
  v27 = MEMORY[0x1E0DEE9D8];
  v15[2] = 0;
  v15[3] = v27;
  v15[4] = 0;
  v15[5] = 0;
  v15[6] = sub_1B1B7DC90(v27);
  v15[3] = v26;
  LOBYTE(v103) = 2;
  sub_1B2115EC4();
  swift_retain();
  sub_1B22297B4();
  v28 = v107;
  if (v107 >> 60 != 15)
  {
    v29 = v106;
    v30 = (void *)objc_opt_self();
    v95 = v29;
    v31 = (void *)sub_1B2228170();
    v106 = 0;
    v32 = objc_msgSend(v30, sel_JSONObjectWithData_options_error_, v31, 0, &v106);

    if (!v32)
    {
      v77 = v14;
      v78 = v106;
      swift_release();
      sub_1B2227FB4();

      swift_willThrow();
      sub_1B1A0DAC8((uint64_t)v95, v28);
      ((void (*)(char *, uint64_t))v84[1])(v91, v77);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
      swift_release();
      return (uint64_t)v15;
    }
    v33 = v106;
    sub_1B22292EC();
    sub_1B1A0DAC8((uint64_t)v95, v28);
    swift_unknownObjectRelease();
    sub_1B1B9D058();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v15[2] = v103;
      swift_bridgeObjectRelease();
    }
  }
  v34 = MEMORY[0x1E0DEE9D8];
  v105 = sub_1B1B7DC90(MEMORY[0x1E0DEE9D8]);
  MEMORY[0x1E0C80A78](v105, v35);
  *(&v79 - 2) = &v105;
  MEMORY[0x1E0C80A78](v36, v37);
  *(&v79 - 2) = sub_1B212E21C;
  *(&v79 - 1) = v38;
  v106 = (_QWORD *)sub_1B1C6D068(v34);
  v107 = v39;
  sub_1B1C5C9C4((uint64_t)sub_1B1B28F5C, (uint64_t)(&v79 - 4), 1, 0x1000000000000000uLL, 0, v34, (uint64_t)&v106);
  v40 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1791524(0, &qword_1EEF63CC0, type metadata accessor for EdgeCoder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  LOBYTE(v103) = 1;
  sub_1B212E328(&qword_1EEF63CC8, &qword_1EEF63CD0, (uint64_t)&unk_1B22C0A98, MEMORY[0x1E0DEAF40]);
  sub_1B2229814();
  v41 = v106[2];
  if (v41)
  {
    v42 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v79 = v106;
    v43 = (char *)v106 + v42;
    v90 = *(_QWORD *)(v10 + 72);
    v83 = 0x80000001B234D920;
    v82 = 0x80000001B234D940;
    v81 = xmmword_1B226D240;
    v44 = v101;
    v45 = (int *)v102;
    v80 = 0;
    do
    {
      v93 = v43;
      sub_1B212E234((uint64_t)v43, v44);
      v49 = v105;
      v50 = v105[2];
      v94 = v41;
      if (v50)
      {
        sub_1B1DC3CA8(v44);
        if ((v51 & 1) != 0)
        {
          v52 = swift_retain();
          if (v49[2])
            goto LABEL_26;
        }
        else
        {
          v52 = 0;
          if (v49[2])
          {
LABEL_26:
            v53 = v52;
            v54 = sub_1B1DC3CA8(v44 + v45[6]);
            if ((v55 & 1) != 0)
            {
              v56 = *(_QWORD *)(v49[7] + 8 * v54);
              swift_retain();
            }
            else
            {
              v56 = 0;
            }
            v52 = v53;
            goto LABEL_33;
          }
        }
        v56 = 0;
      }
      else
      {
        v52 = 0;
        v56 = 0;
      }
LABEL_33:
      v95 = (_QWORD *)v52;
      v57 = *(_QWORD *)(v44 + v45[5]);
      v58 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
      v72 = *(_QWORD **)(v52 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
      if (v57 < v72[2])
      {
        v46 = *(_QWORD *)(v44 + v45[7]);
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)((char *)v95 + v58) = v72;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v72 = sub_1B1FFEED4(v72);
          *(_QWORD *)((char *)v95 + v58) = v72;
        }
        v48 = &v72[2 * v57];
        v48[4] = v56;
        v48[5] = v46;
        swift_release();
        swift_release();
        v45 = (int *)v102;
      }
      else
      {
        v89 = v56;
        if (qword_1ED4BF430 != -1)
          swift_once();
        v106 = 0;
        v107 = 0xE000000000000000;
        v88 = qword_1ED4D0FB0;
        swift_retain();
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v106 = (_QWORD *)0xD000000000000016;
        v107 = v83;
        v103 = 60;
        v104 = 0xE100000000000000;
        sub_1B222A210();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        swift_retain();
        sub_1B1BCE95C();
        sub_1B2228890();
        swift_release();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v60 = v106;
        v59 = v107;
        v61 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v62 = qword_1ED4D0FD0;
        v63 = qword_1ED4BF688;
        swift_retain();
        if (v63 != -1)
          swift_once();
        sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
        v64 = swift_allocObject();
        *(_OWORD *)(v64 + 16) = v81;
        *(_QWORD *)(v64 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v64 + 64) = sub_1B1B1F47C();
        *(_QWORD *)(v64 + 32) = v60;
        *(_QWORD *)(v64 + 40) = v59;
        swift_bridgeObjectRetain();
        sub_1B222835C();
        swift_bridgeObjectRelease();
        swift_retain();
        v86 = v61;
        v65 = v97;
        sub_1B2228200();
        v85 = v60;
        v66 = v96[12];
        v67 = v96[16];
        v68 = v96[20];
        v87 = v62;
        v69 = (uint64_t)v100;
        v70 = v59;
        v71 = &v100[v68];
        (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v100, v65, v99);
        *(_BYTE *)(v69 + v66) = v86;
        *(_QWORD *)(v69 + v67) = 0;
        *(_QWORD *)v71 = v85;
        *((_QWORD *)v71 + 1) = v70;
        swift_bridgeObjectRetain();
        sub_1B2228428();
        swift_release();
        sub_1B1A04628(v69, (uint64_t (*)(_QWORD))sub_1B1B1F358);
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        v14 = v92;
        v45 = (int *)v102;
        v40 = v80;
      }
      swift_release();
      v44 = v101;
      sub_1B1A04628(v101, type metadata accessor for EdgeCoder);
      v43 = &v93[v90];
      v41 = v94 - 1;
    }
    while (v94 != 1);
  }
  swift_bridgeObjectRelease();
  v73 = MEMORY[0x1E0DEE9D8];
  v15[6] = sub_1B1B7DC90(MEMORY[0x1E0DEE9D8]);
  v74 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v74, v75);
  *(&v79 - 2) = sub_1B1C254C8;
  *(&v79 - 1) = v15;
  v106 = (_QWORD *)sub_1B1C6D068(v73);
  v107 = v76;
  sub_1B1C5C9C4((uint64_t)sub_1B1C254D0, (uint64_t)(&v79 - 4), 1, 0x1000000000000000uLL, 0, v73, (uint64_t)&v106);
  if (!v40)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v84[1])(v91, v14);
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for EdgeCoder(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63D00);
}

unint64_t sub_1B212E140()
{
  unint64_t result;

  result = qword_1EEF63CA0;
  if (!qword_1EEF63CA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0AE8, &type metadata for AuthoringGraphCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63CA0);
  }
  return result;
}

void sub_1B212E184()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF63CA8)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF63CA8);
  }
}

unint64_t sub_1B212E1D8()
{
  unint64_t result;

  result = qword_1EEF63CB8;
  if (!qword_1EEF63CB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0AC0, &type metadata for AuthoringNodeCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF63CB8);
  }
  return result;
}

void sub_1B212E21C(uint64_t a1)
{
  uint64_t v1;

  sub_1B212BEBC(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1B212E234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EdgeCoder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1B212E278(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_1B212C428(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1B212E280(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B212E184();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B212E2E4()
{
  unint64_t result;

  result = qword_1EEF63CE8;
  if (!qword_1EEF63CE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0A70, &type metadata for AuthoringNodeCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF63CE8);
  }
  return result;
}

uint64_t sub_1B212E328(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_1B1791524(255, &qword_1EEF63CC0, type metadata accessor for EdgeCoder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v10 = v9;
    v11 = sub_1B19E52CC(a2, type metadata accessor for EdgeCoder, a3);
    result = MEMORY[0x1B5E23E74](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B212E3C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;

  return sub_1B212C730(a1, a2, a3, v4, a4);
}

uint64_t sub_1B212E3C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, &qword_1EEF62628, type metadata accessor for EdgeCoder, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B212E424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EdgeCoder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AuthoringNodeCoder()
{
  return &type metadata for AuthoringNodeCoder;
}

uint64_t storeEnumTagSinglePayload for AuthoringGraphCoder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B212E4C4 + 4 * byte_1B22C0862[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B212E4F8 + 4 * byte_1B22C085D[v4]))();
}

uint64_t sub_1B212E4F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B212E500(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B212E508);
  return result;
}

uint64_t sub_1B212E514(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B212E51CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B212E520(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B212E528(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthoringGraphCoder.CodingKeys()
{
  return &type metadata for AuthoringGraphCoder.CodingKeys;
}

uint64_t *sub_1B212E544(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1B222826C();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v8((uint64_t *)((char *)a1 + v9), (uint64_t *)((char *)a2 + v9), v7);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_1B212E5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = sub_1B222826C();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 24), v4);
}

uint64_t sub_1B212E65C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_1B222826C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1B212E6E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_1B222826C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7(a1 + a3[6], a2 + a3[6], v6);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1B212E768(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_1B222826C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1B212E7EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_1B222826C();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1B212E870()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B212E87C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1B212E8B8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B212E8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B222826C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1B212E904()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B222826C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1B212E980()
{
  unint64_t result;

  result = qword_1EEF63D10;
  if (!qword_1EEF63D10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0A20, &type metadata for AuthoringGraphCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D10);
  }
  return result;
}

unint64_t sub_1B212E9C8()
{
  unint64_t result;

  result = qword_1EEF63D18;
  if (!qword_1EEF63D18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0958, &type metadata for AuthoringGraphCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D18);
  }
  return result;
}

unint64_t sub_1B212EA10()
{
  unint64_t result;

  result = qword_1EEF63D20;
  if (!qword_1EEF63D20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0980, &type metadata for AuthoringGraphCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D20);
  }
  return result;
}

unint64_t sub_1B212EA54()
{
  unint64_t result;

  result = qword_1EEF63D30;
  if (!qword_1EEF63D30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0D30, &type metadata for AuthoringNodeCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D30);
  }
  return result;
}

unint64_t sub_1B212EA98()
{
  unint64_t result;

  result = qword_1EEF63D40;
  if (!qword_1EEF63D40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0CE0, &type metadata for EdgeCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EdgeCoder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B212EB28 + 4 * byte_1B22C086C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B212EB5C + 4 * byte_1B22C0867[v4]))();
}

uint64_t sub_1B212EB5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B212EB64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B212EB6CLL);
  return result;
}

uint64_t sub_1B212EB78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B212EB80);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B212EB84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B212EB8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EdgeCoder.CodingKeys()
{
  return &type metadata for EdgeCoder.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AuthoringNodeCoder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B212EBF4 + 4 * byte_1B22C0876[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B212EC28 + 4 * byte_1B22C0871[v4]))();
}

uint64_t sub_1B212EC28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B212EC30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B212EC38);
  return result;
}

uint64_t sub_1B212EC44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B212EC4CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B212EC50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B212EC58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthoringNodeCoder.CodingKeys()
{
  return &type metadata for AuthoringNodeCoder.CodingKeys;
}

unint64_t sub_1B212EC78()
{
  unint64_t result;

  result = qword_1EEF63D58;
  if (!qword_1EEF63D58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0C00, &type metadata for AuthoringNodeCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D58);
  }
  return result;
}

unint64_t sub_1B212ECC0()
{
  unint64_t result;

  result = qword_1EEF63D60;
  if (!qword_1EEF63D60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0CB8, &type metadata for EdgeCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D60);
  }
  return result;
}

unint64_t sub_1B212ED08()
{
  unint64_t result;

  result = qword_1EEF63D68;
  if (!qword_1EEF63D68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0C28, &type metadata for EdgeCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D68);
  }
  return result;
}

unint64_t sub_1B212ED50()
{
  unint64_t result;

  result = qword_1EEF63D70;
  if (!qword_1EEF63D70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0C50, &type metadata for EdgeCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D70);
  }
  return result;
}

unint64_t sub_1B212ED98()
{
  unint64_t result;

  result = qword_1EEF63D78;
  if (!qword_1EEF63D78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0B38, &type metadata for AuthoringNodeCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D78);
  }
  return result;
}

unint64_t sub_1B212EDE0()
{
  unint64_t result;

  result = qword_1EEF63D80;
  if (!qword_1EEF63D80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0B60, &type metadata for AuthoringNodeCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63D80);
  }
  return result;
}

uint64_t sub_1B212EE24()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

uint64_t sub_1B212EEC4()
{
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  return sub_1B222A09C();
}

uint64_t sub_1B212EF34()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

BOOL sub_1B212EFD0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_1B2130244(v5, v7);
}

uint64_t sub_1B212F018()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A084();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

uint64_t sub_1B212F144()
{
  sub_1B222A078();
  sub_1B222A084();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  return sub_1B222A09C();
}

uint64_t sub_1B212F224()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A084();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A09C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

BOOL sub_1B212F350(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[6];
  _OWORD v10[6];

  v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1B2130278((uint64_t)v9, (uint64_t)v10);
}

id sub_1B212F3A8(uint64_t *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v3 = *a1;
  v4 = v2;
  objc_msgSend(v4, sel_setDepthCompareFunction_, v3);
  objc_msgSend(v4, sel_setDepthWriteEnabled_, *((unsigned __int8 *)a1 + 8));
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v10 = *((unsigned int *)a1 + 12);
  v9 = *((unsigned int *)a1 + 13);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B98]), (SEL)&selRef_loadSCN_options_error_);
  objc_msgSend(v11, sel_setStencilCompareFunction_, v5);
  objc_msgSend(v11, sel_setStencilFailureOperation_, v6);
  objc_msgSend(v11, sel_setDepthFailureOperation_, v7);
  objc_msgSend(v11, sel_setDepthStencilPassOperation_, v8);
  objc_msgSend(v11, sel_setReadMask_, v10);
  objc_msgSend(v11, sel_setWriteMask_, v9);
  objc_msgSend(v4, sel_setFrontFaceStencil_, v11);

  v12 = a1[7];
  v13 = a1[8];
  v14 = a1[9];
  v15 = a1[10];
  v16 = *((unsigned int *)a1 + 22);
  v17 = *((unsigned int *)a1 + 23);
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B98]), sel_init);
  objc_msgSend(v18, sel_setStencilCompareFunction_, v12);
  objc_msgSend(v18, sel_setStencilFailureOperation_, v13);
  objc_msgSend(v18, sel_setDepthFailureOperation_, v14);
  objc_msgSend(v18, sel_setDepthStencilPassOperation_, v15);
  objc_msgSend(v18, sel_setReadMask_, v16);
  objc_msgSend(v18, sel_setWriteMask_, v17);
  objc_msgSend(v4, sel_setBackFaceStencil_, v18);

  return v4;
}

uint64_t sub_1B212F598()
{
  uint64_t v0;
  _BYTE __dst[728];

  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 56), -1, -1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(__dst, (const void *)(v0 + 64), sizeof(__dst));
  sub_1B2130370((uint64_t)__dst);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DepthStencilCache()
{
  return objc_opt_self();
}

uint64_t destroy for DepthStencilCache.Default()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DepthStencilCache.Default(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v3 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v3;
  v4 = *(_OWORD *)(a2 + 144);
  v5 = *(_OWORD *)(a2 + 160);
  v6 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v6;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v5;
  v8 = *(_QWORD *)(a2 + 208);
  v7 = a2 + 208;
  *(_QWORD *)(a1 + 208) = v8;
  v9 = *(_OWORD *)(v7 + 8);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(v7 + 24);
  *(_OWORD *)(a1 + 216) = v9;
  v10 = *(_OWORD *)(v7 + 40);
  v11 = *(_OWORD *)(v7 + 56);
  v12 = *(_OWORD *)(v7 + 72);
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(v7 + 88);
  *(_OWORD *)(a1 + 280) = v12;
  *(_OWORD *)(a1 + 264) = v11;
  *(_OWORD *)(a1 + 248) = v10;
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(v7 + 104);
  v13 = *(_OWORD *)(v7 + 128);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(v7 + 112);
  *(_OWORD *)(a1 + 336) = v13;
  v14 = *(_OWORD *)(v7 + 144);
  v15 = *(_OWORD *)(v7 + 160);
  v16 = *(_OWORD *)(v7 + 192);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(v7 + 176);
  *(_OWORD *)(a1 + 400) = v16;
  *(_OWORD *)(a1 + 352) = v14;
  *(_OWORD *)(a1 + 368) = v15;
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(v7 + 208);
  v17 = *(_OWORD *)(v7 + 216);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(v7 + 232);
  *(_OWORD *)(a1 + 424) = v17;
  v18 = *(_OWORD *)(v7 + 248);
  v19 = *(_OWORD *)(v7 + 264);
  v20 = *(_OWORD *)(v7 + 280);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(v7 + 296);
  *(_OWORD *)(a1 + 488) = v20;
  *(_OWORD *)(a1 + 472) = v19;
  *(_OWORD *)(a1 + 456) = v18;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(v7 + 312);
  v21 = *(_OWORD *)(v7 + 336);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(v7 + 320);
  *(_OWORD *)(a1 + 544) = v21;
  v22 = *(_OWORD *)(v7 + 352);
  v23 = *(_OWORD *)(v7 + 368);
  v24 = *(_OWORD *)(v7 + 400);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(v7 + 384);
  *(_OWORD *)(a1 + 608) = v24;
  *(_OWORD *)(a1 + 560) = v22;
  *(_OWORD *)(a1 + 576) = v23;
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(v7 + 416);
  v25 = *(_OWORD *)(v7 + 424);
  *(_OWORD *)(a1 + 648) = *(_OWORD *)(v7 + 440);
  *(_OWORD *)(a1 + 632) = v25;
  v26 = *(_OWORD *)(v7 + 456);
  v27 = *(_OWORD *)(v7 + 472);
  v28 = *(_OWORD *)(v7 + 488);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(v7 + 504);
  *(_OWORD *)(a1 + 696) = v28;
  *(_OWORD *)(a1 + 680) = v27;
  *(_OWORD *)(a1 + 664) = v26;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DepthStencilCache.Default(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2 + 328;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_QWORD *)(a1 + 384) = *(_QWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 412);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(v4 + 104);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 472);
  *(_DWORD *)(a1 + 476) = *(_DWORD *)(a2 + 476);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a1 + 496) = *(_QWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_DWORD *)(a1 + 512) = *(_DWORD *)(a2 + 512);
  *(_DWORD *)(a1 + 516) = *(_DWORD *)(a2 + 516);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_BYTE *)(a1 + 536) = *(_BYTE *)(v4 + 208);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_DWORD *)(a1 + 576) = *(_DWORD *)(a2 + 576);
  *(_DWORD *)(a1 + 580) = *(_DWORD *)(a2 + 580);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_DWORD *)(a1 + 616) = *(_DWORD *)(a2 + 616);
  *(_DWORD *)(a1 + 620) = *(_DWORD *)(a2 + 620);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 664) = *(_QWORD *)(a2 + 664);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  *(_DWORD *)(a1 + 684) = *(_DWORD *)(a2 + 684);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_DWORD *)(a1 + 720) = *(_DWORD *)(a2 + 720);
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a2 + 724);
  return a1;
}

void *initializeWithTake for DepthStencilCache.Default(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2D8uLL);
}

uint64_t assignWithTake for DepthStencilCache.Default(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = a2 + 328;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  v7 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v7;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  v8 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v8;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(v4 + 104);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  v9 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v9;
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_BYTE *)(a1 + 536) = *(_BYTE *)(v4 + 208);
  v10 = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 560) = v10;
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_BYTE *)(a1 + 640) = *(_BYTE *)(a2 + 640);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  v11 = *(_OWORD *)(a2 + 704);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 704) = v11;
  *(_QWORD *)(a1 + 720) = *(_QWORD *)(a2 + 720);
  return a1;
}

uint64_t getEnumTagSinglePayload for DepthStencilCache.Default(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 728))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DepthStencilCache.Default(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 728) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 728) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DepthStencilCache.Default()
{
  return &type metadata for DepthStencilCache.Default;
}

uint64_t getEnumTagSinglePayload for DepthStencilDescriptor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DepthStencilDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for DepthStencilDescriptor()
{
  return &type metadata for DepthStencilDescriptor;
}

unint64_t sub_1B2130080()
{
  unint64_t result;

  result = qword_1EEF63D88;
  if (!qword_1EEF63D88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0DE8, &type metadata for DepthStencilDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EEF63D88);
  }
  return result;
}

uint64_t sub_1B21300C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  void *v10;
  id v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_1B1DC4750((uint64_t)a2), (v8 & 1) != 0))
  {
    *a3 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
    return swift_unknownObjectRetain();
  }
  else
  {
    v10 = *(void **)(a1 + 16);
    sub_1B2130208();
    v11 = sub_1B212F3A8(a2);
    v12 = objc_msgSend(v10, sel_newDepthStencilStateWithDescriptor_, v11);

    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0x8000000000000000;
    sub_1B1B8A42C((uint64_t)v12, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a1 + 24) = v14;
    result = swift_bridgeObjectRelease();
    *a3 = v12;
  }
  return result;
}

id sub_1B21301B4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  qword_1ED4BF3F0 = (uint64_t)result;
  return result;
}

_QWORD *sub_1B21301E4()
{
  _QWORD *result;

  result = sub_1B1B978E0(MEMORY[0x1E0DEE9D8]);
  off_1ED4BF668 = result;
  return result;
}

unint64_t sub_1B2130208()
{
  unint64_t result;

  result = qword_1EEF63D90;
  if (!qword_1EEF63D90)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF63D90);
  }
  return result;
}

BOOL sub_1B2130244(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4];
}

BOOL sub_1B2130278(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
      && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
      && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
      && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64)
      && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72)
      && *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80)
      && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88)
      && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92);
}

uint64_t sub_1B2130370(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

void sub_1B21303F8(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  unsigned int v5;
  unsigned int v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  unsigned int v12;
  unsigned int v13;
  id v14;
  id v15;
  id v16;
  id v17;
  unsigned __int8 v18;
  id v19;

  v19 = objc_msgSend(a1, sel_depthCompareFunction);
  v18 = objc_msgSend(a1, sel_isDepthWriteEnabled);
  v4 = objc_msgSend(a1, sel_frontFaceStencil);
  v17 = objc_msgSend(v4, sel_stencilCompareFunction);
  v16 = objc_msgSend(v4, sel_stencilFailureOperation);
  v15 = objc_msgSend(v4, sel_depthFailureOperation);
  v14 = objc_msgSend(v4, sel_depthStencilPassOperation);
  v5 = objc_msgSend(v4, sel_readMask);
  v6 = objc_msgSend(v4, sel_writeMask);

  v7 = objc_msgSend(a1, sel_backFaceStencil);
  v8 = objc_msgSend(v7, sel_stencilCompareFunction);
  v9 = objc_msgSend(v7, sel_stencilFailureOperation);
  v10 = objc_msgSend(v7, sel_depthFailureOperation);
  v11 = objc_msgSend(v7, sel_depthStencilPassOperation);
  v12 = objc_msgSend(v7, sel_readMask);
  v13 = objc_msgSend(v7, sel_writeMask);

  *(_QWORD *)a2 = v19;
  *(_BYTE *)(a2 + 8) = v18;
  *(_QWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v14;
  *(_DWORD *)(a2 + 48) = v5;
  *(_DWORD *)(a2 + 52) = v6;
  *(_QWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a2 + 72) = v10;
  *(_QWORD *)(a2 + 80) = v11;
  *(_DWORD *)(a2 + 88) = v12;
  *(_DWORD *)(a2 + 92) = v13;
}

__n128 sub_1B21305B0@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  int v39;
  int v40;
  __n128 result;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  id v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  id v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  char v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;

  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6A88]), sel_init);
  objc_msgSend(v4, sel_setDepthCompareFunction_, 6);
  objc_msgSend(v4, sel_setDepthWriteEnabled_, 1);
  v74 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v4);
  v5 = v4;
  sub_1B21303F8(v5, (uint64_t)&v95);
  v73 = v95;
  v72 = v96;
  v70 = v99;
  v71 = v98;
  v93 = v101;
  v94 = v97;
  v68 = v103;
  v69 = v102;

  objc_msgSend(v5, sel_setDepthCompareFunction_, 1);
  v92 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v5);
  v6 = v5;
  sub_1B21303F8(v6, (uint64_t)&v105);
  v86 = v106;
  v91 = v107;
  v89 = v105;
  v90 = v108;
  v88 = v109;
  v87 = v111;
  v84 = v113;
  v85 = v112;

  objc_msgSend(v6, sel_setDepthWriteEnabled_, 0);
  v83 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v6);
  v7 = v6;
  sub_1B21303F8(v7, (uint64_t)&v115);
  v75 = v116;
  v79 = v117;
  v78 = v118;
  v76 = v115;
  v77 = v119;
  v82 = v121;
  v80 = v123;
  v81 = v122;

  objc_msgSend(v7, sel_setDepthCompareFunction_, 6);
  v57 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v7);
  v8 = v7;
  sub_1B21303F8(v8, (uint64_t)&v125);
  v48 = v125;
  v47 = v126;
  v45 = v129;
  v46 = v128;
  v66 = v131;
  v67 = v127;
  v43 = v133;
  v44 = v132;

  objc_msgSend(v8, sel_setDepthCompareFunction_, 7);
  objc_msgSend(v8, sel_setDepthWriteEnabled_, 0);
  v42 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v8);
  v9 = v8;
  sub_1B21303F8(v9, (uint64_t)&v135);
  v10 = v135;
  v61 = v136;
  v65 = v137;
  v59 = v139;
  v60 = v138;
  v62 = v141;
  v63 = v143;
  v64 = v142;

  objc_msgSend(v9, sel_setDepthCompareFunction_, 7);
  objc_msgSend(v9, sel_setDepthWriteEnabled_, 1);
  v58 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v9);
  v11 = v9;
  sub_1B21303F8(v11, (uint64_t)&v145);
  v51 = v146;
  v56 = v147;
  v54 = v145;
  v55 = v148;
  v53 = v149;
  v52 = v151;
  v49 = v153;
  v50 = v152;

  objc_msgSend(v11, sel_setDepthWriteEnabled_, 0);
  objc_msgSend(v11, sel_setDepthCompareFunction_, 6);
  v12 = objc_msgSend(v11, sel_frontFaceStencil);
  objc_msgSend(v12, sel_setStencilCompareFunction_, 4);

  v13 = objc_msgSend(v11, sel_frontFaceStencil);
  objc_msgSend(v13, sel_setStencilFailureOperation_, 0);

  v14 = objc_msgSend(v11, sel_frontFaceStencil);
  objc_msgSend(v14, sel_setDepthStencilPassOperation_, 6);

  v15 = objc_msgSend(v11, sel_backFaceStencil);
  objc_msgSend(v15, sel_setStencilCompareFunction_, 4);

  v16 = objc_msgSend(v11, sel_backFaceStencil);
  objc_msgSend(v16, sel_setStencilFailureOperation_, 0);

  v17 = objc_msgSend(v11, sel_backFaceStencil);
  objc_msgSend(v17, sel_setDepthStencilPassOperation_, 6);

  v18 = objc_msgSend(a1, sel_newDepthStencilStateWithDescriptor_, v11);
  v19 = v100;
  sub_1B21303F8(v11, (uint64_t)&v155);
  v20 = v155;
  LOBYTE(v5) = v156;
  v21 = v104;

  *(_QWORD *)a2 = v74;
  *(_QWORD *)(a2 + 8) = v73;
  *(_BYTE *)(a2 + 16) = v72;
  *(_QWORD *)(a2 + 40) = v71;
  *(_QWORD *)(a2 + 48) = v70;
  *(_QWORD *)(a2 + 80) = v69;
  *(_QWORD *)(a2 + 88) = v68;
  *(_QWORD *)(a2 + 104) = v57;
  *(_QWORD *)(a2 + 112) = v48;
  *(_BYTE *)(a2 + 120) = v47;
  *(_QWORD *)(a2 + 144) = v46;
  *(_QWORD *)(a2 + 152) = v45;
  *(_QWORD *)(a2 + 184) = v44;
  *(_QWORD *)(a2 + 192) = v43;
  *(_QWORD *)(a2 + 208) = v18;
  *(_QWORD *)(a2 + 216) = v20;
  *(_BYTE *)(a2 + 224) = (_BYTE)v5;
  *(_QWORD *)(a2 + 312) = v42;
  *(_QWORD *)(a2 + 320) = v10;
  *(_DWORD *)(a2 + 332) = *(_DWORD *)((char *)&v135 + 3);
  *(_DWORD *)(a2 + 329) = v135;
  *(_DWORD *)(a2 + 121) = v155;
  v22 = v161;
  *(_DWORD *)(a2 + 124) = *(_DWORD *)((char *)&v155 + 3);
  v23 = v160;
  *(_DWORD *)(a2 + 228) = *(_DWORD *)((char *)&v145 + 3);
  *(_DWORD *)(a2 + 225) = v145;
  *(_BYTE *)(a2 + 328) = v61;
  *(_QWORD *)(a2 + 352) = v60;
  *(_QWORD *)(a2 + 360) = v59;
  v24 = v110;
  v25 = v114;
  *(_OWORD *)(a2 + 376) = v62;
  v26 = v120;
  v27 = v124;
  v28 = v130;
  v29 = v134;
  v30 = v140;
  v31 = v144;
  v32 = v150;
  v33 = v154;
  v34 = v159;
  v35 = v162;
  v36 = v157;
  v37 = v158;
  *(_OWORD *)(a2 + 24) = v94;
  *(_QWORD *)(a2 + 56) = v19;
  *(_OWORD *)(a2 + 64) = v93;
  *(_QWORD *)(a2 + 96) = v21;
  *(_OWORD *)(a2 + 128) = v67;
  *(_QWORD *)(a2 + 160) = v28;
  *(_OWORD *)(a2 + 168) = v66;
  *(_QWORD *)(a2 + 200) = v29;
  *(_OWORD *)(a2 + 232) = v36;
  *(_OWORD *)(a2 + 248) = v37;
  *(_QWORD *)(a2 + 264) = v34;
  *(_OWORD *)(a2 + 272) = v23;
  *(_OWORD *)(a2 + 288) = v22;
  *(_QWORD *)(a2 + 304) = v35;
  *(_OWORD *)(a2 + 336) = v65;
  *(_QWORD *)(a2 + 368) = v30;
  *(_QWORD *)(a2 + 392) = v64;
  *(_QWORD *)(a2 + 400) = v63;
  *(_QWORD *)(a2 + 408) = v31;
  *(_QWORD *)(a2 + 416) = v58;
  *(_QWORD *)(a2 + 424) = v54;
  *(_BYTE *)(a2 + 432) = v51;
  v38 = v125;
  *(_DWORD *)(a2 + 436) = *(_DWORD *)((char *)&v125 + 3);
  *(_DWORD *)(a2 + 433) = v38;
  *(_OWORD *)(a2 + 440) = v56;
  *(_QWORD *)(a2 + 456) = v55;
  *(_QWORD *)(a2 + 464) = v53;
  *(_QWORD *)(a2 + 472) = v32;
  *(_OWORD *)(a2 + 480) = v52;
  *(_QWORD *)(a2 + 496) = v50;
  *(_QWORD *)(a2 + 504) = v49;
  *(_QWORD *)(a2 + 512) = v33;
  *(_QWORD *)(a2 + 520) = v92;
  *(_QWORD *)(a2 + 528) = v89;
  *(_BYTE *)(a2 + 536) = v86;
  v39 = v115;
  *(_DWORD *)(a2 + 540) = *(_DWORD *)((char *)&v115 + 3);
  *(_DWORD *)(a2 + 537) = v39;
  *(_OWORD *)(a2 + 544) = v91;
  *(_QWORD *)(a2 + 560) = v90;
  *(_QWORD *)(a2 + 568) = v88;
  *(_QWORD *)(a2 + 576) = v24;
  *(_OWORD *)(a2 + 584) = v87;
  *(_QWORD *)(a2 + 600) = v85;
  *(_QWORD *)(a2 + 608) = v84;
  *(_QWORD *)(a2 + 616) = v25;
  *(_QWORD *)(a2 + 624) = v83;
  *(_QWORD *)(a2 + 632) = v76;
  *(_BYTE *)(a2 + 640) = v75;
  v40 = v105;
  *(_DWORD *)(a2 + 644) = *(_DWORD *)((char *)&v105 + 3);
  *(_DWORD *)(a2 + 641) = v40;
  *(_OWORD *)(a2 + 648) = v79;
  *(_QWORD *)(a2 + 664) = v78;
  *(_QWORD *)(a2 + 672) = v77;
  *(_QWORD *)(a2 + 680) = v26;
  result = v82;
  *(__n128 *)(a2 + 688) = v82;
  *(_QWORD *)(a2 + 704) = v81;
  *(_QWORD *)(a2 + 712) = v80;
  *(_QWORD *)(a2 + 720) = v27;
  return result;
}

uint64_t sub_1B2130CF8(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;
  uint64_t Strong;
  _DWORD *v6;
  void *v7;
  uint64_t v9;
  _BYTE v10[16];
  _QWORD __src[91];

  if (qword_1ED4BF678 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED4BF3F0, sel_lock);
  if (qword_1ED4BF670 != -1)
    swift_once();
  v2 = off_1ED4BF668;
  if (!*((_QWORD *)off_1ED4BF668 + 2) || (v3 = sub_1B1DC3AC8(a1), (v4 & 1) == 0))
  {
    __src[0] = 0;
    LOBYTE(__src[1]) = 1;
    sub_1B2130EC4((uint64_t)__src);
LABEL_10:
    type metadata accessor for DepthStencilCache();
    Strong = swift_allocObject();
    *(_QWORD *)(Strong + 24) = sub_1B1B97A24(MEMORY[0x1E0DEE9D8]);
    swift_unknownObjectRetain();
    v6 = (_DWORD *)swift_slowAlloc();
    *v6 = 0;
    *(_QWORD *)(Strong + 32) = "lock DepthStencilCache";
    *(_QWORD *)(Strong + 40) = 22;
    *(_BYTE *)(Strong + 48) = 2;
    *(_QWORD *)(Strong + 56) = v6;
    *(_QWORD *)(Strong + 16) = a1;
    v7 = (void *)swift_unknownObjectRetain();
    sub_1B21305B0(v7, (uint64_t)__src);
    memcpy((void *)(Strong + 64), __src, 0x2D8uLL);
    swift_unknownObjectRelease();
    swift_weakInit();
    swift_weakAssign();
    sub_1B1EB60D0((uint64_t)&v9, (uint64_t)v10);
    v10[8] = 0;
    sub_1B20E15F8((uint64_t)v10, a1);
    goto LABEL_11;
  }
  sub_1B1EB6064(v2[7] + 8 * v3, (uint64_t)__src);
  LOBYTE(__src[1]) = 0;
  Strong = swift_weakLoadStrong();
  sub_1B2130EC4((uint64_t)__src);
  if (!Strong)
    goto LABEL_10;
LABEL_11:
  objc_msgSend((id)qword_1ED4BF3F0, sel_unlock);
  return Strong;
}

uint64_t sub_1B2130EC4(uint64_t a1)
{
  uint64_t v2;

  sub_1B1B7C554(0, &qword_1ED4BF650, 255, (uint64_t (*)(uint64_t))sub_1B20E44FC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for StencilDescriptor()
{
  return &type metadata for StencilDescriptor;
}

unint64_t sub_1B2130F30()
{
  unint64_t result;

  result = qword_1EEF63D98;
  if (!qword_1EEF63D98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C0E64, &type metadata for StencilDescriptor);
    atomic_store(result, (unint64_t *)&qword_1EEF63D98);
  }
  return result;
}

ValueMetadata *type metadata accessor for RandomNumberGeneratorXoshiro()
{
  return &type metadata for RandomNumberGeneratorXoshiro;
}

uint64_t sub_1B2130F84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[1];
  result = 9 * __ROR8__(5 * v1, 57);
  v3 = v0[2] ^ *v0;
  v4 = v0[3] ^ v1;
  *v0 ^= v4;
  v0[1] = v3 ^ v1;
  v0[2] = v3 ^ (v1 << 17);
  v0[3] = __ROR8__(v4, 19);
  return result;
}

uint64_t sub_1B2130FC0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t DynamicType;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  _OWORD v55[3];

  sub_1B1A02864((uint64_t)a1, (uint64_t)&v48);
  if (swift_dynamicCast())
  {
    v2 = v54;
LABEL_8:
    v11 = &v48;
LABEL_9:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
    return v2;
  }
  v3 = MEMORY[0x1E0DEB188];
  if (swift_dynamicCast())
  {
    v4 = v54;
    sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
    v6 = MEMORY[0x1E0DEB1E8];
    *(_QWORD *)(v5 + 56) = v3;
    *(_QWORD *)(v5 + 64) = v6;
    *(_DWORD *)(v5 + 32) = v4;
LABEL_7:
    v2 = sub_1B222877C();
    goto LABEL_8;
  }
  v7 = MEMORY[0x1E0DEB070];
  if (swift_dynamicCast())
  {
    v8 = v54;
    sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
    v10 = MEMORY[0x1E0DEB100];
    *(_QWORD *)(v9 + 56) = v7;
    *(_QWORD *)(v9 + 64) = v10;
    *(_QWORD *)(v9 + 32) = v8;
    goto LABEL_7;
  }
  sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  if (swift_dynamicCast())
  {
    v44 = v54;
    sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1B226CD10;
    v14 = MEMORY[0x1E0DEB1E8];
    *(_QWORD *)(v13 + 56) = v3;
    *(_QWORD *)(v13 + 64) = v14;
    *(_DWORD *)(v13 + 32) = v44;
    *(_QWORD *)(v13 + 96) = v3;
    *(_QWORD *)(v13 + 104) = v14;
    *(_DWORD *)(v13 + 72) = HIDWORD(v44);
    goto LABEL_7;
  }
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  if (swift_dynamicCast())
  {
    v45 = v54;
    sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1B226E100;
    v16 = MEMORY[0x1E0DEB1E8];
    *(_QWORD *)(v15 + 56) = v3;
    *(_QWORD *)(v15 + 64) = v16;
    *(_DWORD *)(v15 + 32) = v45;
    *(_DWORD *)(v15 + 72) = DWORD1(v45);
    *(_QWORD *)(v15 + 96) = v3;
    *(_QWORD *)(v15 + 104) = v16;
    *(_QWORD *)(v15 + 136) = v3;
    *(_QWORD *)(v15 + 144) = v16;
    *(_DWORD *)(v15 + 112) = DWORD2(v45);
    goto LABEL_7;
  }
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
  v18 = v17;
  if (swift_dynamicCast())
  {
    v46 = v54;
    sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1B227BE30;
    v20 = MEMORY[0x1E0DEB1E8];
    *(_QWORD *)(v19 + 56) = v3;
    *(_QWORD *)(v19 + 64) = v20;
    *(_DWORD *)(v19 + 32) = v46;
    *(_QWORD *)(v19 + 96) = v3;
    *(_QWORD *)(v19 + 104) = v20;
    *(_DWORD *)(v19 + 72) = DWORD1(v46);
    *(_DWORD *)(v19 + 112) = DWORD2(v46);
    *(_QWORD *)(v19 + 136) = v3;
    *(_QWORD *)(v19 + 144) = v20;
    *(_QWORD *)(v19 + 176) = v3;
    *(_QWORD *)(v19 + 184) = v20;
    *(_DWORD *)(v19 + 152) = HIDWORD(v46);
    goto LABEL_7;
  }
  type metadata accessor for simd_float4x4(0);
  if (swift_dynamicCast())
  {
    v41 = v54;
    v42 = v55[0];
    v43 = v55[1];
    v47 = v55[2];
    v53 = v18;
    v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v41;
    sub_1B2130FC0(&v51);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v51);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v53 = v18;
    v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v42;
    sub_1B2130FC0(&v51);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v51);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v51 = 40;
    v52 = 0xE100000000000000;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v51;
    v21 = v52;
    v53 = v18;
    v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v43;
    sub_1B2130FC0(&v51);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v51);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v51 = v22;
    v52 = v21;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v51;
    v23 = v52;
    v53 = v18;
    v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v47;
    sub_1B2130FC0(&v51);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v51);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v51 = v24;
    v52 = v23;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v51;
    goto LABEL_8;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v48);
  sub_1B1A02864((uint64_t)a1, (uint64_t)&v51);
  sub_1B1A025A0(0, &qword_1EEF63DA0);
  if (swift_dynamicCast())
  {
    sub_1B1A02518(&v48, (uint64_t)&v54);
    sub_1B19FA070(&v54, *((uint64_t *)&v55[0] + 1));
    v2 = sub_1B2229A0C();
    v11 = &v54;
    goto LABEL_9;
  }
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  sub_1B21319EC((uint64_t)&v48);
  v25 = sub_1B1B7D518(a1);
  if (!v25)
  {
LABEL_40:
    *(_QWORD *)&v54 = 0;
    *((_QWORD *)&v54 + 1) = 0xE000000000000000;
    sub_1B22295EC();
    return v54;
  }
  v26 = v25;
  v27 = *(_QWORD *)(v25 + 16);
  if (!v27)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  v28 = *(_QWORD *)(v25 + 16);
  if (v27 != 1)
    goto LABEL_27;
  sub_1B2131A48((_QWORD *)(v25 + 32), &v54);
  if (v54 != __PAIR128__(0xE600000000000000, 0x65756C61765FLL) && (sub_1B2229D24() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v2 = sub_1B2130FC0(v55);
    sub_1B2131A84((uint64_t)&v54);
    return v2;
  }
  sub_1B2131A84((uint64_t)&v54);
  v28 = *(_QWORD *)(v26 + 16);
  if (v28)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v29 = v26 + 48;
    while (1)
    {
      sub_1B1A02864(v29, (uint64_t)&v54);
      sub_1B19FA070(&v54, *((uint64_t *)&v55[0] + 1));
      DynamicType = swift_getDynamicType();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v54);
      sub_1B1A02864(v26 + 48, (uint64_t)&v48);
      sub_1B19FA070(&v48, *((uint64_t *)&v49 + 1));
      v31 = swift_getDynamicType();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v48);
      if (DynamicType != v31)
        break;
      v29 += 48;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
LABEL_31:
  *(_QWORD *)&v48 = 40;
  *((_QWORD *)&v48 + 1) = 0xE100000000000000;
  v51 = MEMORY[0x1E0DEE9D8];
  sub_1B2029FFC(0, v27, 0);
  v32 = (_QWORD *)(v26 + 32);
  v33 = v51;
  do
  {
    sub_1B2131A48(v32, &v54);
    v34 = sub_1B2130FC0(v55);
    v36 = v35;
    sub_1B2131A84((uint64_t)&v54);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1B2029FFC(0, *(_QWORD *)(v33 + 16) + 1, 1);
      v33 = v51;
    }
    v38 = *(_QWORD *)(v33 + 16);
    v37 = *(_QWORD *)(v33 + 24);
    v39 = v38 + 1;
    if (v38 >= v37 >> 1)
    {
      sub_1B2029FFC(v37 > 1, v38 + 1, 1);
      v39 = v38 + 1;
      v33 = v51;
    }
    *(_QWORD *)(v33 + 16) = v39;
    v40 = v33 + 16 * v38;
    *(_QWORD *)(v40 + 32) = v34;
    *(_QWORD *)(v40 + 40) = v36;
    v32 += 6;
    --v27;
  }
  while (v27);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v54 = v33;
  sub_1B19FA1DC();
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v2 = sub_1B222877C();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B21319EC(uint64_t a1)
{
  uint64_t v2;

  sub_1B1CC6310(0, (unint64_t *)&unk_1EEF63DA8, &qword_1EEF63DA0, MEMORY[0x1E0DED1C8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1B2131A48(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for Property(a2, a1);
  return a2;
}

uint64_t sub_1B2131A84(uint64_t a1)
{
  destroy for Property(a1);
  return a1;
}

uint64_t sub_1B2131AB8()
{
  return swift_deallocObject();
}

uint64_t sub_1B2131AC8(uint64_t (*a1)(void), uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void (*v11)(_QWORD *__return_ptr, double);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t (*v43)(void);
  uint64_t v44;
  uint64_t (*v45)(void);
  uint64_t v46;
  _QWORD *v47;
  _QWORD v48[6];
  _QWORD v49[6];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v44 = a4;
  v45 = a3;
  v46 = a2;
  sub_1B1B28F74();
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void (**)(_QWORD *__return_ptr, double))(*(_QWORD *)v4 + 152);
  v11(v48, v8);
  v12 = v48[0];
  v60 = v48[1];
  v61 = v48[0];
  sub_1B1B28C6C((uint64_t)&v60);
  v59 = v48[2];
  sub_1B1B28C6C((uint64_t)&v59);
  v58 = v48[3];
  sub_1B1B28C6C((uint64_t)&v58);
  v57 = v48[4];
  sub_1B1B28C6C((uint64_t)&v57);
  v56 = v48[5];
  sub_1B1B28C6C((uint64_t)&v56);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v43 = a1;
    v14 = *(_QWORD *)(v12 + 32);
    *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
    sub_1B19F8CD0(v14);
    sub_1B1D3590C(v14);
    v16 = v15;
    swift_release();
    sub_1B19F8D00(v14);
    v17 = 0;
    v18 = v13 - 1;
    if (v13 != 1)
    {
      a1 = v43;
      if ((v16 & 1) == 0)
        goto LABEL_12;
      v42 = v10;
      v19 = 0;
      v20 = v12 + 40;
      while (1)
      {
        v21 = *(_QWORD *)(v20 + 8 * v19);
        *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
        sub_1B19F8CD0(v21);
        sub_1B1D3590C(v21);
        v23 = v22;
        swift_release();
        sub_1B19F8D00(v21);
        if ((v23 & 1) == 0)
          break;
        if (v18 == ++v19)
        {
          v17 = 0;
          goto LABEL_10;
        }
      }
      v17 = v19 + 1;
LABEL_10:
      v10 = v42;
    }
    a1 = v43;
  }
  else
  {
    v17 = 0;
  }
LABEL_12:
  v24 = sub_1B1B28C6C((uint64_t)&v61);
  ((void (*)(_QWORD *__return_ptr, uint64_t))v11)(v49, v24);
  v25 = v49[0];
  v54 = v49[1];
  v55 = v49[0];
  sub_1B1B28C6C((uint64_t)&v54);
  v53 = v49[2];
  sub_1B1B28C6C((uint64_t)&v53);
  v52 = v49[3];
  sub_1B1B28C6C((uint64_t)&v52);
  v51 = v49[4];
  sub_1B1B28C6C((uint64_t)&v51);
  v50 = v49[5];
  sub_1B1B28C6C((uint64_t)&v50);
  v26 = *(_QWORD *)(v25 + 16);
  sub_1B1B28C6C((uint64_t)&v55);
  v47 = sub_1B1C6681C(0, v26, 0, MEMORY[0x1E0DEE9D8]);
  v27 = v45();
  sub_1B19F5520(v27);
  v28 = v47;
  v29 = v47[2];
  if (v29 < v17)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = sub_1B1C6681C(0, v29 + 1, 1, v28);
    v30 = v28[2];
    v31 = 16 * v30 + 32;
    do
    {
      v32 = v28[3];
      v33 = v30 + 1;
      if (v30 >= v32 >> 1)
        v28 = sub_1B1C6681C(v32 > 1, v30 + 1, 1, v28);
      v28[2] = v33;
      v34 = (_QWORD *)((char *)v28 + v31);
      *v34 = 0;
      v34[1] = 0;
      v31 += 16;
      v30 = v33;
    }
    while (v33 < v17);
    v47 = v28;
  }
  v35 = a1();
  sub_1B19F5520(v35);
  v36 = (uint64_t)v47;
  v37 = sub_1B222826C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v10, 1, 1, v37);
  type metadata accessor for AuthoringNode();
  swift_allocObject();
  v38 = swift_retain();
  v39 = sub_1B20E4E94(v38, v36, (uint64_t)v10, 0, 0xF000000000000000);
  swift_release();
  return v39;
}

uint64_t sub_1B2131EB0()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B2131ED4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 && object_getClass(*(id *)(v0 + 24)) == (Class)_TtC3VFX16PrelitParameters)
  {
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for PrelitParameters();
    v1 = swift_allocObject();
    *(_QWORD *)&v2 = 0xFFFFFFFFLL;
    *((_QWORD *)&v2 + 1) = 0xFFFFFFFFLL;
    *(_OWORD *)(v1 + 16) = v2;
    *(_BYTE *)(v1 + 32) = 0;
  }
  return v1;
}

uint64_t sub_1B2131F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  char v11;

  v1 = v0;
  swift_getKeyPath();
  v10 = 0;
  v11 = 1;
  swift_retain();
  v2 = swift_retain();
  sub_1B1F24458(v2, (uint64_t)&v10);
  swift_release();
  swift_release_n();
  if ((v11 & 1) != 0 || v10 == 0xFFFFFFFFLL)
  {
    type metadata accessor for PBRParameters();
    v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v3 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 40) = 16777473;
    *(_BYTE *)(v3 + 44) = 1;
    *(_OWORD *)(v3 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 72) = 0;
    *(_QWORD *)(v3 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 88) = 16777473;
    *(_BYTE *)(v3 + 92) = 1;
    *(_OWORD *)(v3 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 120) = 16777473;
    *(_BYTE *)(v3 + 124) = 1;
    *(_DWORD *)(v3 + 128) = 1056964608;
    *(_OWORD *)(v3 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 168) = 16777473;
    *(_BYTE *)(v3 + 172) = 1;
    *(_DWORD *)(v3 + 176) = 0;
    *(_OWORD *)(v3 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 216) = 16777473;
    *(_BYTE *)(v3 + 220) = 1;
    *(_DWORD *)(v3 + 224) = 1065353216;
    *(_OWORD *)(v3 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v3 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v3 + 264) = 16777473;
    *(_BYTE *)(v3 + 268) = 1;
    *(_DWORD *)(v3 + 272) = 1065353216;
    *(_OWORD *)(v3 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v3 + 304) = 0;
    type metadata accessor for RenderPipelineFactory();
    swift_allocObject();
    v4 = sub_1B20C3C0C(140);
    *(_QWORD *)(v4 + 88) = sub_1B2137D90;
    *(_QWORD *)(v4 + 96) = 0;
    swift_release();
    v5 = sub_1B2180BAC(0x100000000uLL, **(_QWORD **)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues), 0, v4, 0x100000000uLL, 0xD000000000000018, 0x80000001B2338140, -1.0);
    swift_release();
    swift_retain();
    sub_1B1FEC0E4(v5, v1, v3);
    v6 = swift_release_n();
    v10 = v5;
    MEMORY[0x1E0C80A78](v6, v7);
    v8 = *(_QWORD **)(v1 + 176);
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for DefaultMaterialInstance, (uint64_t)&off_1E63AA418, v8, (void (*)(uint64_t))sub_1B1C1A13C);
    swift_release();
  }
  return v10;
}

uint64_t sub_1B21321C0@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v3 = 0xEB00000000676172;
  v4 = 0x665F74696C657270;
  v5 = 0x5F656E696C74756FLL;
  v9 = xmmword_1B22C0F20;
  v10 = 0;
  v11 = 0;
  v6 = 0xD000000000000014;
  if ((a1 & 0x4000) == 0)
    v6 = 0x665F74696C657270;
  v7 = 0x80000001B234DA20;
  if ((a1 & 0x4000) == 0)
    v7 = 0xEB00000000676172;
  if (a1 < 0)
    v7 = 0xEC00000067617266;
  else
    v5 = v6;
  if ((a1 & 0x800) == 0)
    v4 = v5;
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = v4;
  if ((a1 & 0x800) == 0)
    v3 = v7;
  v14 = v3;
  v15 = 0;
  v16 = 0;
  v17 = MEMORY[0x1E0DEE9D8];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  nullsub_16(&v9);
  return sub_1B2132F6C((uint64_t)&v9, a2);
}

double sub_1B21322A0(_QWORD *a1, double *a2)
{
  double result;

  result = *a2;
  *a1 = *(_QWORD *)a2;
  return result;
}

uint64_t sub_1B21322AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F92148(*a1, *a2);
}

uint64_t sub_1B21322B8()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2132360()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B21323E4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2132488@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2132F24();
  *a1 = result;
  return result;
}

void sub_1B21324B4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE900000000000070;
  v5 = 0x614D6C616D726F6ELL;
  if (v2 != 1)
  {
    v5 = 0xD000000000000010;
    v4 = 0x80000001B2328A40;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x70614D726F6C6F63;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B213251C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x614D6C616D726F6ELL;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x70614D726F6C6F63;
}

uint64_t sub_1B2132580@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2132F24();
  *a1 = result;
  return result;
}

uint64_t sub_1B21325A4()
{
  sub_1B2132FC8();
  return sub_1B222A1D4();
}

uint64_t sub_1B21325CC()
{
  sub_1B2132FC8();
  return sub_1B222A1E0();
}

uint64_t sub_1B21325F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_1B213300C(0, (unint64_t *)&unk_1EEF63DE8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2132FC8();
  sub_1B222A180();
  v13 = *(_QWORD *)(v3 + 16);
  HIBYTE(v12) = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 24);
    HIBYTE(v12) = 1;
    sub_1B2229958();
    LOBYTE(v13) = 2;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B2132768(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = v1;
  sub_1B213300C(0, &qword_1EEF63DD0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v14 - v9;
  *(_QWORD *)&v11 = 0xFFFFFFFFLL;
  *((_QWORD *)&v11 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(v1 + 16) = v11;
  *(_BYTE *)(v1 + 32) = 0;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2132FC8();
  sub_1B222A150();
  if (v2)
  {
    swift_release();
  }
  else
  {
    v15 = 0;
    sub_1B1A08878();
    sub_1B2229814();
    *(_QWORD *)(v1 + 16) = v16;
    v15 = 1;
    sub_1B2229814();
    *(_QWORD *)(v1 + 24) = v16;
    LOBYTE(v16) = 2;
    v13 = sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    *(_BYTE *)(v3 + 32) = v13 & 1;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t type metadata accessor for PrelitParameters()
{
  return objc_opt_self();
}

uint64_t sub_1B2132964@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = sub_1B2132768(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B21329B8(_QWORD *a1)
{
  return sub_1B21325F4(a1);
}

uint64_t sub_1B21329D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  char v23;

  if (*(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_renderer) && *(_QWORD *)(*(_QWORD *)(result + 8) + 192))
  {
    swift_getObjectType();
    swift_retain();
    v5 = objc_msgSend((id)swift_unknownObjectRetain(), sel_encodedLength);
    v6 = sub_1B1BA2B0C((uint64_t)v5, 0);
    if (!v6)
    {
      swift_release();
      return swift_unknownObjectRelease();
    }
    v9 = v7;
    v10 = v8;
    v19 = a2;
    v18 = v6;
    sub_1B1F9C328((uint64_t)v6, v7, v8, 0);
    v11 = sub_1B20F26A4(*(_QWORD *)(v3 + 16), v22);
    v12 = sub_1B20F26A4(*(_QWORD *)(v3 + 24), v22);
    sub_1B1F9C9D8(v11, 100);
    sub_1B1F9C9D8(v12, 104);
    v13 = sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, *(_QWORD *)(v3 + 16))
       || sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, *(_QWORD *)(v3 + 24));
    *(_BYTE *)(v19 + 225) = v13;
    v22[0] = v18;
    v22[1] = v9;
    v22[2] = v10;
    v22[3] = 0;
    v23 = 0;
    swift_unknownObjectRetain();
    sub_1B1D2C700((uint64_t)v22, 2, 0);
    swift_unknownObjectRelease();
    sub_1B1791524(0, &qword_1EEF63DF8, (uint64_t (*)(uint64_t))sub_1B2133068, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
    *(_QWORD *)(inited + 32) = v11;
    *(_QWORD *)(inited + 40) = v12;
    v20 = inited;
    sub_1B2228AD0();
    v15 = v20;
    v21 = MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(v15 + 32))
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v16 = swift_unknownObjectRetain();
      MEMORY[0x1B5E2064C](v16);
      if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
      if (!*(_QWORD *)(v15 + 40))
        goto LABEL_17;
    }
    else
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if (!*(_QWORD *)(v15 + 40))
      {
LABEL_17:
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 136) = v21;
        return result;
      }
    }
    v17 = swift_unknownObjectRetain();
    MEMORY[0x1B5E2064C](v17);
    if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_1B2132D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t result;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v6 = *(_QWORD *)(v2 + 16);
  sub_1B1F02EF0(v6, 0, ObjectType, a2);
  v7 = v6;
  v8 = HIDWORD(v6);
  v9 = *(_QWORD *)(v2 + 24);
  sub_1B1F02EF0(v9, 0, ObjectType, a2);
  v10 = v9;
  v11 = HIDWORD(v9);
  LOBYTE(v3) = *(_BYTE *)(v3 + 32);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = v7;
  *(_DWORD *)(result + 20) = v8;
  *(_DWORD *)(result + 24) = v10;
  *(_DWORD *)(result + 28) = v11;
  *(_BYTE *)(result + 32) = v3;
  return result;
}

BOOL sub_1B2132DD4(uint64_t a1)
{
  _DWORD *v1;

  if (v1[4] == (_DWORD)a1 && v1[5] == HIDWORD(a1))
    return 1;
  if (v1[6] == (_DWORD)a1)
    return v1[7] == HIDWORD(a1);
  return 0;
}

uint64_t sub_1B2132E14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t result;

  v3 = *v1;
  v4 = sub_1B1E33C2C(*(_QWORD *)(*v1 + 16));
  v5 = v4;
  v6 = HIDWORD(v4);
  v7 = sub_1B1E33C2C(*(_QWORD *)(v3 + 24));
  v8 = v7;
  v9 = HIDWORD(v7);
  LOBYTE(v3) = *(_BYTE *)(v3 + 32);
  result = swift_allocObject();
  *(_DWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 20) = v6;
  *(_DWORD *)(result + 24) = v8;
  *(_DWORD *)(result + 28) = v9;
  *(_BYTE *)(result + 32) = v3;
  *a1 = result;
  return result;
}

uint64_t sub_1B2132E9C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1B2132EE8(&qword_1EEF63DB8, (uint64_t)&unk_1B22C1008);
  result = sub_1B2132EE8((unint64_t *)&unk_1EEF63DC0, (uint64_t)&unk_1B22C0FE0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B2132EE8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PrelitParameters();
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B2132F24()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B2132F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B2132FC8()
{
  unint64_t result;

  result = qword_1EEF63DD8;
  if (!qword_1EEF63DD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1198, &type metadata for PrelitParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63DD8);
  }
  return result;
}

void sub_1B213300C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B2132FC8();
    v7 = a3(a1, &type metadata for PrelitParameters.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1B2133068(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1EEF63E00, (uint64_t (*)(uint64_t))sub_1B1C93F74, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

double sub_1B2133084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v3;
  _BOOL8 v4;
  double result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = swift_allocObject();
  v2 = *(unsigned __int8 *)(v0 + 32);
  *(_OWORD *)(v1 + 16) = xmmword_1B227BE30;
  *(_OWORD *)(v1 + 32) = xmmword_1B22C0F30;
  *(_BYTE *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 64) = v2;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 13;
  v3 = *(_DWORD *)(v0 + 16) != -1 || *(_DWORD *)(v0 + 20) != 0;
  *(_OWORD *)(v1 + 144) = xmmword_1B22C0F40;
  *(_BYTE *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 176) = v3;
  *(_OWORD *)(v1 + 184) = 0uLL;
  *(_OWORD *)(v1 + 200) = 0uLL;
  *(_OWORD *)(v1 + 216) = 0uLL;
  *(_QWORD *)(v1 + 232) = 0;
  *(_BYTE *)(v1 + 240) = 13;
  v4 = *(_DWORD *)(v0 + 24) != -1 || *(_DWORD *)(v0 + 28) != 0;
  *(_OWORD *)(v1 + 256) = xmmword_1B22C0F50;
  *(_BYTE *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 288) = v4;
  *(_QWORD *)(v1 + 344) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_BYTE *)(v1 + 352) = 13;
  *(_OWORD *)(v1 + 368) = xmmword_1B22C0F60;
  *(_BYTE *)(v1 + 384) = 0;
  *(_OWORD *)(v1 + 400) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_BYTE *)(v1 + 464) = 13;
  return result;
}

uint64_t storeEnumTagSinglePayload for PrelitParameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B2133200 + 4 * byte_1B22C0F75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B2133234 + 4 * byte_1B22C0F70[v4]))();
}

uint64_t sub_1B2133234(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B213323C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2133244);
  return result;
}

uint64_t sub_1B2133250(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2133258);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B213325C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2133264(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrelitParameters.CodingKeys()
{
  return &type metadata for PrelitParameters.CodingKeys;
}

ValueMetadata *type metadata accessor for DefaultMaterialInstance()
{
  return &type metadata for DefaultMaterialInstance;
}

unint64_t sub_1B2133294()
{
  unint64_t result;

  result = qword_1EEF63E08;
  if (!qword_1EEF63E08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1170, &type metadata for PrelitParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E08);
  }
  return result;
}

unint64_t sub_1B21332DC()
{
  unint64_t result;

  result = qword_1EEF63E10;
  if (!qword_1EEF63E10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C10A8, &type metadata for PrelitParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E10);
  }
  return result;
}

unint64_t sub_1B2133324()
{
  unint64_t result;

  result = qword_1EEF63E18;
  if (!qword_1EEF63E18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C10D0, &type metadata for PrelitParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E18);
  }
  return result;
}

_UNKNOWN **sub_1B2133368()
{
  return &off_1ED4A7188;
}

uint64_t sub_1B2133374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  swift_bridgeObjectRetain();
  v47 = a4;
  v48 = a5;
  MEMORY[0x1B5E204E4](a4, a5, a3);
  sub_1B2228890();
  if (!a1)
  {
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return sub_1B2228890();
  }
  v15 = *(_QWORD *)(a7 + 16);
  if (*(_QWORD *)(v15 + 16)
    && (v16 = sub_1B1DC3AC8(a1), (v17 & 1) != 0)
    && *(_BYTE *)(*(_QWORD *)(v15 + 56) + v16) == 1)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(*(_QWORD *)(a8 + 16) + 16))
      sub_1B1DC3AC8(a1);
  }
  else
  {
    if (!*(_QWORD *)(*(_QWORD *)(a8 + 16) + 16) || (sub_1B1DC3AC8(a1), (v18 & 1) == 0) || (a9 & 1) == 0)
    {
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v51 = *(_QWORD *)(a7 + 16);
      *(_QWORD *)(a7 + 16) = 0x8000000000000000;
      sub_1B1B84A2C(1, a1, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(a7 + 16) = v51;
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(a10 + 16);
      v22 = swift_isUniquelyReferenced_nonNull_native();
      v52 = *(_QWORD *)(a8 + 16);
      *(_QWORD *)(a8 + 16) = 0x8000000000000000;
      sub_1B1B89E58(v21, a1, v22);
      *(_QWORD *)(a8 + 16) = v52;
      swift_bridgeObjectRelease();
      ++*(_QWORD *)(a10 + 16);
      v23 = *(_QWORD *)(a1 + 16);
      v24 = *(_QWORD *)(v23 + 16);
      v25 = MEMORY[0x1E0DEE9D8];
      if (v24)
      {
        v44 = a3;
        v45 = a7;
        v46 = a1;
        v53 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        sub_1B202A2C8(0, v24, 0);
        v26 = 0;
        v25 = v53;
        v27 = *(_QWORD *)(v53 + 16);
        v28 = 16 * v27;
        do
        {
          v29 = *(_QWORD *)(v23 + v26 + 32);
          v30 = *(_QWORD *)(v23 + v26 + 40);
          v31 = *(_QWORD *)(v53 + 24);
          v32 = v27 + 1;
          swift_retain();
          if (v27 >= v31 >> 1)
            sub_1B202A2C8(v31 > 1, v32, 1);
          *(_QWORD *)(v53 + 16) = v32;
          v33 = v53 + v28 + v26;
          *(_QWORD *)(v33 + 32) = v29;
          *(_QWORD *)(v33 + 40) = v30;
          v26 += 16;
          ++v27;
          --v24;
        }
        while (v24);
        swift_bridgeObjectRelease();
        a7 = v45;
        a1 = v46;
        a3 = v44;
      }
      v34 = *(_QWORD *)(v25 + 16);
      if (v34)
        sub_1B2228890();
      if ((a9 & 1) != 0)
      {
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
      }
      swift_retain();
      sub_1B1BCE95C();
      swift_release();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v35 = sub_1B22287AC();
      v37 = HIBYTE(v36) & 0xF;
      if ((v36 & 0x2000000000000000) == 0)
        v37 = v35 & 0xFFFFFFFFFFFFLL;
      if (v37)
      {
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
      }
      swift_bridgeObjectRelease();
      if (v34)
      {
        sub_1B2228890();
        v38 = a3 + 1;
        swift_bridgeObjectRetain();
        v39 = (uint64_t *)(v25 + 40);
        do
        {
          v41 = *(v39 - 1);
          if (v41)
          {
            v40 = *v39;
            swift_retain_n();
          }
          else
          {
            v40 = 0;
          }
          LOBYTE(v43) = a9 & 1;
          sub_1B2133374(v41, v40, v38, v47, v48, a6, a7, a8, v43, a10);
          swift_release_n();
          v39 += 2;
          --v34;
        }
        while (v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v42 = swift_isUniquelyReferenced_nonNull_native();
      v54 = *(_QWORD *)(a7 + 16);
      *(_QWORD *)(a7 + 16) = 0x8000000000000000;
      sub_1B1B84A2C(0, a1, v42);
      *(_QWORD *)(a7 + 16) = v54;
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    swift_retain();
    swift_bridgeObjectRelease();
  }
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_36:
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B21339B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  swift_bridgeObjectRetain();
  v38 = a4;
  MEMORY[0x1B5E204E4](a4, a5, a3);
  sub_1B2228890();
  if (!a1)
  {
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return sub_1B2228890();
  }
  v16 = *(_QWORD *)(a7 + 16);
  if (*(_QWORD *)(v16 + 16)
    && (v17 = sub_1B1DC3AC8(a1), (v18 & 1) != 0)
    && *(_BYTE *)(*(_QWORD *)(v16 + 56) + v17) == 1)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    v41 = 91;
    v42 = 0xE100000000000000;
    if (*(_QWORD *)(*(_QWORD *)(a8 + 16) + 16))
      sub_1B1DC3AC8(a1);
    sub_1B2229A0C();
  }
  else
  {
    if (!*(_QWORD *)(*(_QWORD *)(a8 + 16) + 16) || (sub_1B1DC3AC8(a1), (v19 & 1) == 0) || (a9 & 1) == 0)
    {
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v41 = *(_QWORD *)(a7 + 16);
      *(_QWORD *)(a7 + 16) = 0x8000000000000000;
      sub_1B1B84A2C(1, a1, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(a7 + 16) = v41;
      swift_bridgeObjectRelease();
      v22 = *(_QWORD *)(a10 + 16);
      v23 = swift_isUniquelyReferenced_nonNull_native();
      v41 = *(_QWORD *)(a8 + 16);
      *(_QWORD *)(a8 + 16) = 0x8000000000000000;
      sub_1B1B89E58(v22, a1, v23);
      *(_QWORD *)(a8 + 16) = v41;
      v24 = swift_bridgeObjectRelease();
      ++*(_QWORD *)(a10 + 16);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(**(_QWORD **)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                             + 152))(&v41, v24);
      v25 = v41;
      v51 = v42;
      v52 = v41;
      sub_1B1B28C6C((uint64_t)&v51);
      v50 = v43;
      sub_1B1B28C6C((uint64_t)&v50);
      v49 = v44;
      sub_1B1B28C6C((uint64_t)&v49);
      v48 = v45;
      sub_1B1B28C6C((uint64_t)&v48);
      v47 = v46;
      sub_1B1B28C6C((uint64_t)&v47);
      v26 = *(_QWORD *)(v25 + 16);
      sub_1B1B28C6C((uint64_t)&v52);
      if (*(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) > v26)
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
      swift_retain();
      v27 = sub_1B2134084(0, v26, a1);
      v37 = a1;
      swift_release();
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
        sub_1B2228890();
      if ((a9 & 1) != 0)
      {
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
      }
      swift_retain();
      sub_1B1BCE95C();
      swift_release();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v29 = sub_1B22287AC();
      v31 = HIBYTE(v30) & 0xF;
      if ((v30 & 0x2000000000000000) == 0)
        v31 = v29 & 0xFFFFFFFFFFFFLL;
      if (v31)
      {
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
      }
      swift_bridgeObjectRelease();
      if (v28)
      {
        sub_1B2228890();
        v32 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
        do
        {
          v34 = *(v32 - 1);
          if (v34)
          {
            v33 = *v32;
            swift_retain_n();
          }
          else
          {
            v33 = 0;
          }
          LOBYTE(v36) = a9 & 1;
          sub_1B21339B4(v34, v33, a3 + 1, v38, a5, a6, a7, a8, v36, a10);
          swift_release_n();
          v32 += 2;
          --v28;
        }
        while (v28);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v35 = swift_isUniquelyReferenced_nonNull_native();
      v40 = *(_QWORD *)(a7 + 16);
      *(_QWORD *)(a7 + 16) = 0x8000000000000000;
      sub_1B1B84A2C(0, v37, v35);
      *(_QWORD *)(a7 + 16) = v40;
      swift_release();
      swift_bridgeObjectRelease();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      goto LABEL_33;
    }
    swift_retain();
    swift_bridgeObjectRelease();
    v41 = 91;
    v42 = 0xE100000000000000;
    sub_1B2229A0C();
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_release();
  swift_bridgeObjectRelease();
  v41 = 46;
  v42 = 0xE100000000000000;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
LABEL_33:
  sub_1B2228890();
  return swift_bridgeObjectRelease();
}

_UNKNOWN **sub_1B2134078()
{
  return &off_1ED488F38;
}

uint64_t sub_1B2134084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v18;

  v3 = MEMORY[0x1E0DEE9D8];
  if (a2 != a1)
  {
    v5 = a1;
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B202A270(0, (a2 - a1) & ~((a2 - a1) >> 63), 0);
    v3 = v18;
    v6 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
    v7 = 16 * v5;
    v8 = a3;
    while (1)
    {
      v9 = *(_QWORD *)(v8 + v6);
      if (v5 >= *(_QWORD *)(v9 + 16))
        break;
      v10 = v9 + v7;
      v11 = *(_QWORD *)(v10 + 32);
      if (!v11)
        goto LABEL_7;
      v12 = *(_QWORD *)(v10 + 40);
      swift_retain();
LABEL_8:
      v14 = *(_QWORD *)(v18 + 16);
      v13 = *(_QWORD *)(v18 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1B202A270(v13 > 1, v14 + 1, 1);
        v8 = a3;
      }
      *(_QWORD *)(v18 + 16) = v14 + 1;
      v15 = v18 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v12;
      ++v5;
      v7 += 16;
      if (a2 == v5)
        return v3;
    }
    v11 = 0;
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  return v3;
}

uint64_t sub_1B21341A4()
{
  sub_1B21348CC();
  return sub_1B222A1D4();
}

uint64_t sub_1B21341CC()
{
  sub_1B21348CC();
  return sub_1B222A1E0();
}

uint64_t sub_1B21341F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D2F094(a1, a2, a3, &qword_1EEF63E30, (void (*)(void))sub_1B21348CC);
}

uint64_t sub_1B2134220()
{
  sub_1B2134888();
  return sub_1B222A1D4();
}

uint64_t sub_1B2134248()
{
  sub_1B2134888();
  return sub_1B222A1E0();
}

uint64_t sub_1B2134270(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D2F094(a1, a2, a3, &qword_1EEF63E20, (void (*)(void))sub_1B2134888);
}

uint64_t sub_1B213429C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v1 = qword_1ED4D09F8;
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for OldEvent;
  *(_QWORD *)(inited + 40) = &off_1E63C20C0;
  v18 = v1;
  v19 = 0;
  v20 = 2;
  v21 = 0;
  v22 = 2;
  v23 = 0;
  swift_retain();
  sub_1B1E68AF8(inited, 1, (uint64_t)v8);
  swift_setDeallocating();
  swift_release();
  v3 = v8[1];
  *(_OWORD *)(v0 + 16) = v8[0];
  *(_OWORD *)(v0 + 32) = v3;
  *(_QWORD *)(v0 + 48) = v9;
  v4 = qword_1ED4D09F8;
  v5 = swift_initStackObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v5 + 32) = &type metadata for NewEvent;
  *(_QWORD *)(v5 + 40) = &off_1E63C1FA0;
  v12 = v4;
  v13 = 0;
  v14 = 2;
  v15 = 0;
  v16 = 2;
  v17 = 0;
  swift_retain();
  sub_1B1E68AF8(v5, 1, (uint64_t)v10);
  swift_setDeallocating();
  swift_release();
  v6 = v10[1];
  *(_OWORD *)(v0 + 56) = v10[0];
  *(_OWORD *)(v0 + 72) = v6;
  *(_QWORD *)(v0 + 88) = v11;
  return v0;
}

uint64_t sub_1B2134458(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t *sub_1B21345B8(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  int v14;
  int v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20[12];
  uint64_t v21[12];
  _QWORD v22[7];
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[12];
  _OWORD v26[2];
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v3 = *(_OWORD *)(v1 + 32);
  v28[0] = *(_OWORD *)(v1 + 16);
  v28[1] = v3;
  v29 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v28, 0x200000000, v20);
  sub_1B19ED688((uint64_t)v20, (uint64_t)v25);
  if (*(_QWORD *)&v25[0])
  {
    v25[8] = v25[2];
    v25[9] = v25[3];
    v25[10] = v25[4];
    v25[11] = v25[5];
    v25[6] = v25[0];
    v25[7] = v25[1];
    sub_1B1BEAAFC(0);
    sub_1B19ED748(v20);
  }
  v4 = *(_OWORD *)(v1 + 72);
  v26[0] = *(_OWORD *)(v1 + 56);
  v26[1] = v4;
  v27 = *(_QWORD *)(v1 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v26, 0x200000000, v21);
  result = (uint64_t *)sub_1B19ED688((uint64_t)v21, (uint64_t)v22);
  if (v22[0])
  {
    if (v24 >= 1 && v23)
    {
      v6 = 48 * v23;
      v7 = v22[5] + 40;
      do
      {
        v12 = *(_QWORD *)v7;
        v13 = *(os_unfair_lock_s **)(*(_QWORD *)v7 + 376);
        swift_retain();
        os_unfair_lock_lock(v13);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
        v14 = *(_DWORD *)(v12 + 24);
        swift_retain();
        v19 = 0;
        memset(v18, 0, sizeof(v18));
        v17 = 0;
        memset(v16, 0, sizeof(v16));
        v15 = sub_1B1DA4ED8(v14, (uint64_t)&type metadata for OldEvent, (uint64_t)&off_1E63C2090, 0, 0, (uint64_t)v18, (uint64_t)v16);
        swift_release();
        sub_1B1A12E98((uint64_t)v16);
        sub_1B1A12E98((uint64_t)v18);
        if (sub_1B1A10B20(v15))
        {
          sub_1B1A10BB0(v15);
        }
        else
        {
          v8 = *(_QWORD *)(v12 + 232);
          v9 = *(_QWORD *)(v12 + 240);
          v10 = *(unsigned __int8 *)(v12 + 120);
          v11 = *(unsigned int *)(v12 + 28);
          LOBYTE(v18[0]) = *(_BYTE *)(v12 + 32);
          sub_1B1FD8C68(v8, v9, v15, v10, v11 | ((unint64_t)LOBYTE(v18[0]) << 32), 0, 0, 0);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
        swift_release();
        v7 += 48;
        v6 -= 48;
      }
      while (v6);
    }
    return sub_1B19ED748(v21);
  }
  return result;
}

uint64_t type metadata accessor for EventDisposeSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B213481C()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B213429C();
  return v0;
}

const char *sub_1B2134850()
{
  return "Events Dispose";
}

ValueMetadata *type metadata accessor for NewEvent()
{
  return &type metadata for NewEvent;
}

ValueMetadata *type metadata accessor for OldEvent()
{
  return &type metadata for OldEvent;
}

unint64_t sub_1B2134888()
{
  unint64_t result;

  result = qword_1EEF63E28;
  if (!qword_1EEF63E28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1484, &type metadata for NewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E28);
  }
  return result;
}

unint64_t sub_1B21348CC()
{
  unint64_t result;

  result = qword_1EEF63E38;
  if (!qword_1EEF63E38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1434, &type metadata for OldEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E38);
  }
  return result;
}

ValueMetadata *type metadata accessor for OldEvent.CodingKeys()
{
  return &type metadata for OldEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for NewEvent.CodingKeys()
{
  return &type metadata for NewEvent.CodingKeys;
}

unint64_t sub_1B2134934()
{
  unint64_t result;

  result = qword_1EEF63E40;
  if (!qword_1EEF63E40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C13E4, &type metadata for OldEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E40);
  }
  return result;
}

unint64_t sub_1B213497C()
{
  unint64_t result;

  result = qword_1EEF63E48;
  if (!qword_1EEF63E48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C140C, &type metadata for OldEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E48);
  }
  return result;
}

unint64_t sub_1B21349C4()
{
  unint64_t result;

  result = qword_1EEF63E50;
  if (!qword_1EEF63E50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1394, &type metadata for NewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E50);
  }
  return result;
}

unint64_t sub_1B2134A0C()
{
  unint64_t result;

  result = qword_1EEF63E58;
  if (!qword_1EEF63E58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C13BC, &type metadata for NewEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E58);
  }
  return result;
}

uint64_t sub_1B2134A50()
{
  sub_1B2137D4C();
  return sub_1B2228A7C();
}

uint64_t sub_1B2134AAC()
{
  sub_1B2137D4C();
  return sub_1B2228A04();
}

void sub_1B2134AF8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E639F4A0;
}

uint64_t sub_1B2134B08(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[32];

  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF63FA0, (uint64_t (*)(void))sub_1B2139480, (uint64_t)&type metadata for TextureSampler.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v12[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B2139480();
  sub_1B222A180();
  v12[31] = a2 & 1;
  v12[30] = 0;
  sub_1B1A71CD4();
  sub_1B2229958();
  if (!v2)
  {
    v12[29] = BYTE1(a2) & 1;
    v12[28] = 1;
    sub_1B2229958();
    v12[27] = BYTE2(a2);
    v12[26] = 2;
    sub_1B1A71C38();
    sub_1B2229958();
    v12[25] = BYTE3(a2);
    v12[24] = 3;
    sub_1B1A71D70();
    sub_1B2229958();
    v12[15] = BYTE4(a2);
    v12[14] = 4;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B2134D2C(char *a1)
{
  sub_1B1F90EE8(*a1);
}

uint64_t sub_1B2134D38()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2134D6C + 4 * byte_1B22C14E0[*v0]))(0x65746C694667616DLL, 0xE900000000000072);
}

uint64_t sub_1B2134D6C()
{
  return 0x65746C69466E696DLL;
}

uint64_t sub_1B2134D80()
{
  return 0x65746C694670696DLL;
}

uint64_t sub_1B2134D98()
{
  return 0x5370617277;
}

uint64_t sub_1B2134DAC()
{
  return 0x5470617277;
}

uint64_t sub_1B2134DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B2138340(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2134DE4()
{
  sub_1B2139480();
  return sub_1B222A1D4();
}

uint64_t sub_1B2134E0C()
{
  sub_1B2139480();
  return sub_1B222A1E0();
}

uint64_t sub_1B2134E34@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B213854C(a1);
  if (!v2)
  {
    *a2 = result & 1;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result);
    a2[3] = BYTE3(result);
    a2[4] = BYTE4(result);
  }
  return result;
}

uint64_t sub_1B2134E80(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;

  v2 = 256;
  if (!v1[1])
    v2 = 0;
  return sub_1B2134B08(a1, v2 | *v1 | ((unint64_t)v1[2] << 16) | ((unint64_t)v1[3] << 24) | ((unint64_t)v1[4] << 32));
}

uint64_t sub_1B2134EC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F91B84(*a1, *a2);
}

uint64_t sub_1B2134EDC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B2134F10()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B2134F48 + 4 * byte_1B22C14E5[*v0]))();
}

void sub_1B2134F48(_QWORD *a1@<X8>)
{
  *a1 = 0x65727574786574;
  a1[1] = 0xE700000000000000;
}

void sub_1B2134F64(_QWORD *a1@<X8>)
{
  *a1 = 0x72656C706D6173;
  a1[1] = 0xE700000000000000;
}

void sub_1B2134F80(_QWORD *a1@<X8>)
{
  *a1 = 0x616942656C616373;
  a1[1] = 0xE900000000000073;
}

uint64_t sub_1B2134FA0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2134FD8 + 4 * byte_1B22C14E9[*v0]))(0x7469736E65746E69, 0xE900000000000079);
}

uint64_t sub_1B2134FD8()
{
  return 0x65727574786574;
}

uint64_t sub_1B2134FF0()
{
  return 0x72656C706D6173;
}

uint64_t sub_1B2135008()
{
  return 0x616942656C616373;
}

uint64_t sub_1B2135024@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B2135050()
{
  sub_1B2138DE4();
  return sub_1B222A1D4();
}

uint64_t sub_1B2135078()
{
  sub_1B2138DE4();
  return sub_1B222A1E0();
}

uint64_t sub_1B21350A0(_QWORD *a1, unint64_t a2, uint64_t a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  __n128 v18;
  char v19;

  v15 = a5;
  v16 = a2;
  v17 = a4;
  sub_1B19F8E54(0, &qword_1EEF63F10, (uint64_t (*)(void))sub_1B2138DE4, (uint64_t)&type metadata for PBRColorProperty.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v15 - v12;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2138DE4();
  sub_1B222A180();
  v18 = v17;
  v19 = 0;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1BF439C((unint64_t *)&qword_1ED4B7318, MEMORY[0x1E0DEDDB8]);
  sub_1B2229958();
  if (!v5)
  {
    v18.n128_u64[0] = v16;
    v19 = 1;
    sub_1B1A0895C();
    sub_1B2229958();
    v18.n128_u16[0] = a3 & 0x101;
    v18.n128_u8[2] = BYTE2(a3);
    v18.n128_u8[3] = BYTE3(a3);
    v18.n128_u8[4] = BYTE4(a3);
    v19 = 2;
    sub_1B2138DA0();
    sub_1B2229958();
    v18 = v15;
    v19 = 3;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1B21352E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  result = sub_1B21387D0(a1);
  if (!v2)
  {
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = result;
    *(_BYTE *)(a2 + 24) = v5 & 1;
    *(_BYTE *)(a2 + 25) = BYTE1(v5) & 1;
    *(_BYTE *)(a2 + 26) = BYTE2(v5);
    *(_BYTE *)(a2 + 27) = BYTE3(v5);
    *(_BYTE *)(a2 + 28) = BYTE4(v5);
    *(_OWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B2135340(_QWORD *a1)
{
  __n128 *v1;
  uint64_t v2;

  v2 = 256;
  if (!v1[1].n128_u8[9])
    v2 = 0;
  return sub_1B21350A0(a1, v1[1].n128_u64[0], v2 | v1[1].n128_u8[8] | ((unint64_t)v1[1].n128_u8[10] << 16) | ((unint64_t)v1[1].n128_u8[11] << 24) | ((unint64_t)v1[1].n128_u8[12] << 32), *v1, v1[2]);
}

__n128 sub_1B2135390@<Q0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  char v3;
  char v4;
  __int16 v5;
  char v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __n128 v10;

  v3 = *((_BYTE *)v1 + 24);
  v4 = *((_BYTE *)v1 + 25);
  v5 = *((_WORD *)v1 + 13);
  v6 = *((_BYTE *)v1 + 28);
  v9 = *v1;
  v10 = (__n128)v1[2];
  v7 = sub_1B1E33C2C(*((_QWORD *)v1 + 2));
  *(_OWORD *)a1 = v9;
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 25) = v4;
  *(_WORD *)(a1 + 26) = v5;
  *(_BYTE *)(a1 + 28) = v6;
  result = v10;
  *(__n128 *)(a1 + 32) = v10;
  return result;
}

void sub_1B2135418()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B213546C()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B21354E0()
{
  __asm { BR              X10 }
}

uint64_t sub_1B2135524()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B2135584()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B21355D4()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2135648@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B213567C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B21356A8()
{
  sub_1B2138D18();
  return sub_1B222A1D4();
}

uint64_t sub_1B21356D0()
{
  sub_1B2138D18();
  return sub_1B222A1E0();
}

uint64_t sub_1B21356F8(_QWORD *a1, unint64_t a2, uint64_t a3, double a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  char v18;

  v15 = a5;
  v16 = a2;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF63EE0, (uint64_t (*)(void))sub_1B2138D18, (uint64_t)&type metadata for PBRScalarProperty.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v15 - v12;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2138D18();
  sub_1B222A180();
  v17.n128_u8[0] = 0;
  sub_1B2229934();
  if (!v5)
  {
    v17.n128_u64[0] = v16;
    v18 = 1;
    sub_1B1A0895C();
    sub_1B2229958();
    v17.n128_u16[0] = a3 & 0x101;
    v17.n128_u8[2] = BYTE2(a3);
    v17.n128_u8[3] = BYTE3(a3);
    v17.n128_u8[4] = BYTE4(a3);
    v18 = 2;
    sub_1B2138DA0();
    sub_1B2229958();
    v17 = v15;
    v18 = 3;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1BF439C((unint64_t *)&qword_1ED4B7318, MEMORY[0x1E0DEDDB8]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void sub_1B2135930(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float v6;
  __int128 v7;

  v6 = sub_1B2138A84(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(_BYTE *)(a2 + 9) = BYTE1(v5) & 1;
    *(_BYTE *)(a2 + 10) = BYTE2(v5);
    *(_BYTE *)(a2 + 11) = BYTE3(v5);
    *(_BYTE *)(a2 + 12) = BYTE4(v5);
    *(float *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 32) = v7;
  }
}

uint64_t sub_1B213598C(_QWORD *a1, double a2)
{
  __n128 *v2;
  uint64_t v3;

  v3 = 256;
  if (!v2->n128_u8[9])
    v3 = 0;
  LODWORD(a2) = v2[1].n128_u32[0];
  return sub_1B21356F8(a1, v2->n128_u64[0], v3 | v2->n128_u8[8] | ((unint64_t)v2->n128_u8[10] << 16) | ((unint64_t)v2->n128_u8[11] << 24) | ((unint64_t)v2->n128_u8[12] << 32), a2, v2[2]);
}

__n128 sub_1B21359DC@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int16 v5;
  unsigned __int8 v6;
  unsigned __int32 v7;
  __n128 result;
  __n128 v9;

  v3 = v1->n128_u8[8];
  v4 = v1->n128_u8[9];
  v5 = v1->n128_u16[5];
  v6 = v1->n128_u8[12];
  v7 = v1[1].n128_u32[0];
  v9 = v1[2];
  a1->n128_u64[0] = sub_1B1E33C2C(v1->n128_u64[0]);
  a1->n128_u8[8] = v3;
  a1->n128_u8[9] = v4;
  a1->n128_u16[5] = v5;
  a1->n128_u8[12] = v6;
  a1[1].n128_u32[0] = v7;
  result = v9;
  a1[2] = v9;
  return result;
}

uint64_t sub_1B2135A68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2135A98 + 4 * byte_1B22C14F9[a1]))(0x6F6465626C61, 0xE600000000000000);
}

uint64_t sub_1B2135A98()
{
  return 0x6576697373696D65;
}

uint64_t sub_1B2135AB0()
{
  return 0x73656E6867756F72;
}

uint64_t sub_1B2135ADC()
{
  return 0x6F6973756C63636FLL;
}

uint64_t sub_1B2135AFC()
{
  return 0x6C616D726F6ELL;
}

unint64_t sub_1B2135B0C()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B2135B28()
{
  return 0x656C62756F447369;
}

void sub_1B2135B4C(char *a1)
{
  sub_1B1F8FAD4(*a1);
}

uint64_t sub_1B2135B58()
{
  unsigned __int8 *v0;

  return sub_1B2135A68(*v0);
}

uint64_t sub_1B2135B60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B2137FD8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2135B84()
{
  sub_1B2137E84();
  return sub_1B222A1D4();
}

uint64_t sub_1B2135BAC()
{
  sub_1B2137E84();
  return sub_1B222A1E0();
}

uint64_t sub_1B2135BD4()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PBRParameters()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for PBRScalarProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PBRScalarProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRScalarProperty()
{
  return &type metadata for PBRScalarProperty;
}

uint64_t getEnumTagSinglePayload for PBRColorProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PBRColorProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRColorProperty()
{
  return &type metadata for PBRColorProperty;
}

uint64_t sub_1B2135D4C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  __int16 v13;
  char v14;
  __int128 v15;
  char v16;
  char v17;
  __int16 v18;
  char v19;
  __int128 v20;
  char v21;
  char v22;
  __int16 v23;
  char v24;
  int v25;
  __int128 v26;
  char v27;
  char v28;
  __int16 v29;
  char v30;
  int v31;
  __int128 v32;
  char v33;
  char v34;
  __int16 v35;
  char v36;
  int v37;
  __int128 v38;
  char v39;
  char v40;
  __int16 v41;
  char v42;
  int v43;
  __int128 v44;
  __int128 v46;
  uint64_t v47;
  char v48;
  char v49;
  __int16 v50;
  char v51;
  __int128 v52;
  char v53;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF63EA0, (uint64_t (*)(void))sub_1B2137E84, (uint64_t)&type metadata for PBRParameters.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v46 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2137E84();
  sub_1B222A180();
  v11 = *(_BYTE *)(v3 + 40);
  v12 = *(_BYTE *)(v3 + 41);
  v13 = *(_WORD *)(v3 + 42);
  v14 = *(_BYTE *)(v3 + 44);
  v15 = *(_OWORD *)(v3 + 48);
  v46 = *(_OWORD *)(v3 + 16);
  v47 = *(_QWORD *)(v3 + 32);
  v48 = v11;
  v49 = v12;
  v50 = v13;
  v51 = v14;
  v52 = v15;
  v53 = 0;
  sub_1B2137F50();
  sub_1B2229958();
  if (!v2)
  {
    v16 = *(_BYTE *)(v3 + 88);
    v17 = *(_BYTE *)(v3 + 89);
    v18 = *(_WORD *)(v3 + 90);
    v19 = *(_BYTE *)(v3 + 92);
    v20 = *(_OWORD *)(v3 + 96);
    v46 = *(_OWORD *)(v3 + 64);
    v47 = *(_QWORD *)(v3 + 80);
    v48 = v16;
    v49 = v17;
    v50 = v18;
    v51 = v19;
    v52 = v20;
    v53 = 1;
    sub_1B2229958();
    v21 = *(_BYTE *)(v3 + 120);
    v22 = *(_BYTE *)(v3 + 121);
    v23 = *(_WORD *)(v3 + 122);
    v24 = *(_BYTE *)(v3 + 124);
    v25 = *(_DWORD *)(v3 + 128);
    v26 = *(_OWORD *)(v3 + 144);
    *(_QWORD *)&v46 = *(_QWORD *)(v3 + 112);
    BYTE8(v46) = v21;
    BYTE9(v46) = v22;
    WORD5(v46) = v23;
    BYTE12(v46) = v24;
    LODWORD(v47) = v25;
    v52 = v26;
    v53 = 2;
    sub_1B2137F94();
    sub_1B2229958();
    v27 = *(_BYTE *)(v3 + 168);
    v28 = *(_BYTE *)(v3 + 169);
    v29 = *(_WORD *)(v3 + 170);
    v30 = *(_BYTE *)(v3 + 172);
    v31 = *(_DWORD *)(v3 + 176);
    v32 = *(_OWORD *)(v3 + 192);
    *(_QWORD *)&v46 = *(_QWORD *)(v3 + 160);
    BYTE8(v46) = v27;
    BYTE9(v46) = v28;
    WORD5(v46) = v29;
    BYTE12(v46) = v30;
    LODWORD(v47) = v31;
    v52 = v32;
    v53 = 3;
    sub_1B2229958();
    v33 = *(_BYTE *)(v3 + 216);
    v34 = *(_BYTE *)(v3 + 217);
    v35 = *(_WORD *)(v3 + 218);
    v36 = *(_BYTE *)(v3 + 220);
    v37 = *(_DWORD *)(v3 + 224);
    v38 = *(_OWORD *)(v3 + 240);
    *(_QWORD *)&v46 = *(_QWORD *)(v3 + 208);
    BYTE8(v46) = v33;
    BYTE9(v46) = v34;
    WORD5(v46) = v35;
    BYTE12(v46) = v36;
    LODWORD(v47) = v37;
    v52 = v38;
    v53 = 4;
    sub_1B2229958();
    v39 = *(_BYTE *)(v3 + 264);
    v40 = *(_BYTE *)(v3 + 265);
    v41 = *(_WORD *)(v3 + 266);
    v42 = *(_BYTE *)(v3 + 268);
    v43 = *(_DWORD *)(v3 + 272);
    v44 = *(_OWORD *)(v3 + 288);
    *(_QWORD *)&v46 = *(_QWORD *)(v3 + 256);
    BYTE8(v46) = v39;
    BYTE9(v46) = v40;
    WORD5(v46) = v41;
    BYTE12(v46) = v42;
    LODWORD(v47) = v43;
    v52 = v44;
    v53 = 5;
    sub_1B2229958();
    LOBYTE(v46) = 6;
    sub_1B222991C();
    LOBYTE(v46) = 7;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B213611C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  char v15;
  __int16 v16;
  char v17;
  __int128 v18;
  char v19;
  char v20;
  __int16 v21;
  char v22;
  __int128 v23;
  char v24;
  char v25;
  __int16 v26;
  char v27;
  int v28;
  __int128 v29;
  char v30;
  char v31;
  __int16 v32;
  char v33;
  int v34;
  __int128 v35;
  char v36;
  char v37;
  __int16 v38;
  char v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  char v44;
  char v45;
  __int16 v46;
  char v47;
  int v48;
  __int128 v49;
  char v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  char v57;
  __int16 v58;
  char v59;
  __int128 v60;
  char v61;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF63E80, (uint64_t (*)(void))sub_1B2137E84, (uint64_t)&type metadata for PBRParameters.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v52 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v52 - v8;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)(v1 + 32) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 40) = 16777473;
  *(_BYTE *)(v1 + 44) = 1;
  *(_OWORD *)(v1 + 48) = xmmword_1B2244EC0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_QWORD *)(v1 + 80) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 88) = 16777473;
  *(_BYTE *)(v1 + 92) = 1;
  *(_OWORD *)(v1 + 96) = xmmword_1B2244EC0;
  *(_QWORD *)(v1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 120) = 16777473;
  *(_BYTE *)(v1 + 124) = 1;
  *(_DWORD *)(v1 + 128) = 0;
  *(_OWORD *)(v1 + 144) = xmmword_1B2244EC0;
  *(_QWORD *)(v1 + 160) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 168) = 16777473;
  *(_BYTE *)(v1 + 172) = 1;
  *(_DWORD *)(v1 + 176) = 0;
  *(_OWORD *)(v1 + 192) = xmmword_1B2244EC0;
  *(_QWORD *)(v1 + 208) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 216) = 16777473;
  *(_BYTE *)(v1 + 220) = 1;
  *(_DWORD *)(v1 + 224) = 1065353216;
  *(_OWORD *)(v1 + 240) = xmmword_1B2244EC0;
  *(_QWORD *)(v1 + 256) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 264) = 16777473;
  *(_BYTE *)(v1 + 268) = 1;
  *(_DWORD *)(v1 + 272) = 1065353216;
  *(_OWORD *)(v1 + 288) = xmmword_1B2244EC0;
  *(_WORD *)(v1 + 304) = 0;
  v10 = a1[3];
  v53 = a1;
  sub_1B19FA070(a1, v10);
  sub_1B2137E84();
  sub_1B222A150();
  if (v2)
  {
    swift_release();
    v42 = (uint64_t)v53;
  }
  else
  {
    v11 = v6;
    v61 = 0;
    sub_1B2137EC8();
    v12 = v52;
    v13 = v9;
    sub_1B2229814();
    v14 = v56;
    v15 = v57;
    v16 = v58;
    v17 = v59;
    v18 = v60;
    *(_OWORD *)(v3 + 16) = v54;
    *(_QWORD *)(v3 + 32) = v55;
    *(_BYTE *)(v3 + 40) = v14;
    *(_BYTE *)(v3 + 41) = v15;
    *(_WORD *)(v3 + 42) = v16;
    *(_BYTE *)(v3 + 44) = v17;
    *(_OWORD *)(v3 + 48) = v18;
    v61 = 1;
    sub_1B2229814();
    v19 = v56;
    v20 = v57;
    v21 = v58;
    v22 = v59;
    v23 = v60;
    *(_OWORD *)(v3 + 64) = v54;
    *(_QWORD *)(v3 + 80) = v55;
    *(_BYTE *)(v3 + 88) = v19;
    *(_BYTE *)(v3 + 89) = v20;
    *(_WORD *)(v3 + 90) = v21;
    *(_BYTE *)(v3 + 92) = v22;
    *(_OWORD *)(v3 + 96) = v23;
    v61 = 2;
    sub_1B2137F0C();
    sub_1B2229814();
    v24 = BYTE8(v54);
    v25 = BYTE9(v54);
    v26 = WORD5(v54);
    v27 = BYTE12(v54);
    v28 = v55;
    v29 = v60;
    *(_QWORD *)(v3 + 112) = v54;
    *(_BYTE *)(v3 + 120) = v24;
    *(_BYTE *)(v3 + 121) = v25;
    *(_WORD *)(v3 + 122) = v26;
    *(_BYTE *)(v3 + 124) = v27;
    *(_DWORD *)(v3 + 128) = v28;
    *(_OWORD *)(v3 + 144) = v29;
    v61 = 3;
    sub_1B2229814();
    v30 = BYTE8(v54);
    v31 = BYTE9(v54);
    v32 = WORD5(v54);
    v33 = BYTE12(v54);
    v34 = v55;
    v35 = v60;
    *(_QWORD *)(v3 + 160) = v54;
    *(_BYTE *)(v3 + 168) = v30;
    *(_BYTE *)(v3 + 169) = v31;
    *(_WORD *)(v3 + 170) = v32;
    *(_BYTE *)(v3 + 172) = v33;
    *(_DWORD *)(v3 + 176) = v34;
    *(_OWORD *)(v3 + 192) = v35;
    v61 = 4;
    sub_1B2229814();
    v36 = BYTE8(v54);
    v37 = BYTE9(v54);
    v38 = WORD5(v54);
    v39 = BYTE12(v54);
    v40 = v55;
    v41 = v60;
    *(_QWORD *)(v3 + 208) = v54;
    *(_BYTE *)(v3 + 216) = v36;
    *(_BYTE *)(v3 + 217) = v37;
    *(_WORD *)(v3 + 218) = v38;
    *(_BYTE *)(v3 + 220) = v39;
    *(_DWORD *)(v3 + 224) = v40;
    *(_OWORD *)(v3 + 240) = v41;
    v61 = 5;
    sub_1B2229814();
    v44 = BYTE8(v54);
    v45 = BYTE9(v54);
    v46 = WORD5(v54);
    v47 = BYTE12(v54);
    v48 = v55;
    v49 = v60;
    *(_QWORD *)(v3 + 256) = v54;
    *(_BYTE *)(v3 + 264) = v44;
    *(_BYTE *)(v3 + 265) = v45;
    *(_WORD *)(v3 + 266) = v46;
    *(_BYTE *)(v3 + 268) = v47;
    *(_DWORD *)(v3 + 272) = v48;
    *(_OWORD *)(v3 + 288) = v49;
    LOBYTE(v54) = 6;
    v50 = sub_1B22297D8();
    v42 = (uint64_t)v53;
    *(_BYTE *)(v3 + 304) = v50 & 1;
    LOBYTE(v54) = 7;
    v51 = sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v12);
    *(_BYTE *)(v3 + 305) = v51 & 1;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v42);
  return v3;
}

uint64_t sub_1B2136604@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = sub_1B213611C(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B2136658(_QWORD *a1)
{
  return sub_1B2135D4C(a1);
}

uint64_t sub_1B2136678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  unsigned __int8 v13;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  v4 = v3;
  v5 = (_BYTE *)(v3 + 272);
  *(_OWORD *)(v3 + 16) = xmmword_1B226CAD0;
  *(_OWORD *)(v3 + 32) = xmmword_1B22C1D40;
  *(_BYTE *)(v3 + 48) = 0;
  v6 = 1;
  *(_QWORD *)(v3 + 64) = 1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = 0;
  *(_BYTE *)(v3 + 128) = 13;
  v7 = *(unsigned __int8 *)(v1 + 304);
  *(_OWORD *)(v3 + 144) = xmmword_1B22C1D50;
  *(_BYTE *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 176) = v7;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_QWORD *)(v3 + 232) = 0;
  *(_BYTE *)(v3 + 240) = 13;
  if (*(_DWORD *)(v1 + 208) == -1)
    v6 = *(_DWORD *)(v1 + 212) != 0;
  *(_OWORD *)(v3 + 256) = xmmword_1B22C1D60;
  *v5 = 0;
  *(_QWORD *)(v3 + 288) = v6;
  *(_QWORD *)(v3 + 344) = 0;
  *(_OWORD *)(v3 + 296) = 0uLL;
  *(_OWORD *)(v3 + 312) = 0uLL;
  *(_OWORD *)(v3 + 328) = 0uLL;
  *(_BYTE *)(v3 + 352) = 13;
  sub_1B1AE6738((int *)(a1 + 40), (uint64_t)&v11);
  sub_1B1AE6738(&v11, (uint64_t)&v12);
  if (v12)
    v8 = 0;
  else
    v8 = v13;
  *(_OWORD *)(v4 + 368) = xmmword_1B22C1D70;
  v5[112] = 0;
  *(_QWORD *)(v4 + 400) = v8;
  *(_OWORD *)(v4 + 408) = 0u;
  *(_OWORD *)(v4 + 424) = 0u;
  *(_OWORD *)(v4 + 440) = 0u;
  *(_QWORD *)(v4 + 456) = 0;
  *(_BYTE *)(v4 + 464) = 13;
  v9 = *(unsigned __int8 *)(v1 + 305);
  *(_OWORD *)(v4 + 480) = xmmword_1B22C1D80;
  v5[224] = 0;
  *(_QWORD *)(v4 + 512) = v9;
  *(_OWORD *)(v4 + 520) = 0u;
  *(_OWORD *)(v4 + 536) = 0u;
  *(_OWORD *)(v4 + 552) = 0u;
  *(_QWORD *)(v4 + 568) = 0;
  *(_BYTE *)(v4 + 576) = 13;
  return v4;
}

__n128 sub_1B2136810(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  __n128 result;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  char v27;
  __int16 v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  char v34;
  __int16 v35;
  char v36;
  char v37;
  __int128 v38;
  char v39;
  __int16 v40;
  char v41;
  char v42;
  __int128 v43;
  char v44;
  __int16 v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  char v50;
  __int16 v51;
  char v52;
  char v53;
  char v54;
  __int16 v55;
  char v56;
  char v57;
  __int128 v58;
  __int128 v59;

  v4 = v2 + 264;
  v5 = *(_QWORD *)(v2 + 32);
  v56 = *(_BYTE *)(v2 + 41);
  v57 = *(_BYTE *)(v2 + 40);
  v54 = *(_BYTE *)(v2 + 44);
  v55 = *(_WORD *)(v2 + 42);
  v58 = *(_OWORD *)(v2 + 16);
  v59 = *(_OWORD *)(v2 + 48);
  ObjectType = swift_getObjectType();
  sub_1B1F02EF0(v5, 0, ObjectType, a2);
  v48 = *(_OWORD *)(v2 + 64);
  v7 = *(_QWORD *)(v2 + 80);
  v52 = *(_BYTE *)(v2 + 89);
  v53 = *(_BYTE *)(v2 + 88);
  v50 = *(_BYTE *)(v2 + 92);
  v51 = *(_WORD *)(v2 + 90);
  v49 = *(_OWORD *)(v2 + 96);
  sub_1B1F02EF0(v7, 0, ObjectType, a2);
  v8 = v7;
  v31 = HIDWORD(v7);
  v9 = *(_QWORD *)(v2 + 112);
  v46 = *(_BYTE *)(v2 + 121);
  v47 = *(_BYTE *)(v2 + 120);
  v44 = *(_BYTE *)(v2 + 124);
  v45 = *(_WORD *)(v2 + 122);
  v10 = *(_DWORD *)(v2 + 128);
  v43 = *(_OWORD *)(v2 + 144);
  sub_1B1F02EF0(v9, 0, ObjectType, a2);
  v11 = v9;
  v32 = HIDWORD(v9);
  v12 = *(_QWORD *)(v2 + 160);
  v41 = *(_BYTE *)(v2 + 169);
  v42 = *(_BYTE *)(v2 + 168);
  v39 = *(_BYTE *)(v2 + 172);
  v40 = *(_WORD *)(v2 + 170);
  v13 = *(_DWORD *)(v2 + 176);
  v38 = *(_OWORD *)(v2 + 192);
  sub_1B1F02EF0(v12, 0, ObjectType, a2);
  v14 = v12;
  v25 = HIDWORD(v12);
  v15 = *(_QWORD *)(v2 + 208);
  v36 = *(_BYTE *)(v2 + 217);
  v37 = *(_BYTE *)(v2 + 216);
  v34 = *(_BYTE *)(v2 + 220);
  v35 = *(_WORD *)(v2 + 218);
  v16 = *(_DWORD *)(v2 + 224);
  v33 = *(_OWORD *)(v2 + 240);
  sub_1B1F02EF0(v15, 0, ObjectType, a2);
  v17 = v15;
  v24 = HIDWORD(v15);
  v18 = *(_QWORD *)(v2 + 256);
  v29 = *(_BYTE *)(v2 + 265);
  v30 = *(_BYTE *)(v2 + 264);
  v27 = *(_BYTE *)(v2 + 268);
  v28 = *(_WORD *)(v2 + 266);
  v19 = *(_DWORD *)(v2 + 272);
  v26 = *(__n128 *)(v2 + 288);
  sub_1B1F02EF0(v18, 0, ObjectType, a2);
  v20 = v18;
  v21 = HIDWORD(v18);
  LOBYTE(a2) = *(_BYTE *)(v4 + 40);
  LOBYTE(v4) = *(_BYTE *)(v4 + 41);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 32) = v5;
  *(_BYTE *)(v22 + 40) = v57;
  *(_BYTE *)(v22 + 41) = v56;
  *(_WORD *)(v22 + 42) = v55;
  *(_BYTE *)(v22 + 44) = v54;
  *(_DWORD *)(v22 + 80) = v8;
  *(_DWORD *)(v22 + 84) = v31;
  *(_OWORD *)(v22 + 16) = v58;
  *(_OWORD *)(v22 + 48) = v59;
  *(_OWORD *)(v22 + 64) = v48;
  *(_BYTE *)(v22 + 88) = v53;
  *(_BYTE *)(v22 + 89) = v52;
  *(_WORD *)(v22 + 90) = v51;
  *(_BYTE *)(v22 + 92) = v50;
  *(_OWORD *)(v22 + 96) = v49;
  *(_DWORD *)(v22 + 112) = v11;
  *(_DWORD *)(v22 + 116) = v32;
  *(_BYTE *)(v22 + 120) = v47;
  *(_BYTE *)(v22 + 121) = v46;
  *(_WORD *)(v22 + 122) = v45;
  *(_BYTE *)(v22 + 124) = v44;
  *(_DWORD *)(v22 + 128) = v10;
  *(_OWORD *)(v22 + 144) = v43;
  *(_DWORD *)(v22 + 160) = v14;
  *(_DWORD *)(v22 + 164) = v25;
  *(_BYTE *)(v22 + 168) = v42;
  *(_BYTE *)(v22 + 169) = v41;
  *(_WORD *)(v22 + 170) = v40;
  *(_BYTE *)(v22 + 172) = v39;
  *(_DWORD *)(v22 + 176) = v13;
  *(_OWORD *)(v22 + 192) = v38;
  *(_DWORD *)(v22 + 208) = v17;
  *(_DWORD *)(v22 + 212) = v24;
  *(_BYTE *)(v22 + 216) = v37;
  *(_BYTE *)(v22 + 217) = v36;
  *(_WORD *)(v22 + 218) = v35;
  *(_BYTE *)(v22 + 220) = v34;
  *(_DWORD *)(v22 + 224) = v16;
  *(_OWORD *)(v22 + 240) = v33;
  *(_DWORD *)(v22 + 256) = v20;
  *(_DWORD *)(v22 + 260) = v21;
  *(_BYTE *)(v22 + 264) = v30;
  *(_BYTE *)(v22 + 265) = v29;
  *(_WORD *)(v22 + 266) = v28;
  *(_BYTE *)(v22 + 268) = v27;
  *(_DWORD *)(v22 + 272) = v19;
  result = v26;
  *(__n128 *)(v22 + 288) = v26;
  *(_BYTE *)(v22 + 304) = a2;
  *(_BYTE *)(v22 + 305) = v4;
  return result;
}

uint64_t sub_1B2136B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t inited;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  _QWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  __int128 v84;
  int v85;
  __int128 v86;
  int v87;
  __int128 v88;
  int v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v4)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v15 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v78 = 0;
    swift_retain();
    sub_1B1F1AD70(v15, (uint64_t *)&v78, 0xD000000000000036, 0x80000001B234DB00);
    swift_release();
    return swift_release();
  }
  v5 = v3;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(v8 + 200);
  swift_retain();
  v10 = sub_1B1BA2B0C(v9, 0);
  if (!v10)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v16 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v78 = 0;
    swift_retain();
    sub_1B1F1AD70(v16, (uint64_t *)&v78, 0xD000000000000040, 0x80000001B234DB40);
    swift_release();
    swift_release();
    return swift_release();
  }
  v13 = v10;
  if (v9 <= 207)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v14 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v78 = 0;
    swift_retain();
    sub_1B1F1AD70(v14, (uint64_t *)&v78, 0xD000000000000020, 0x80000001B234DBD0);
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    return swift_release();
  }
  v18 = v12;
  v19 = 0uLL;
  if ((*(_BYTE *)(v5 + 304) & 1) == 0)
    v19 = *(_OWORD *)(v5 + 192);
  v76 = v19;
  v73 = v11;
  v63 = *(_OWORD *)(v5 + 16);
  v65 = *(_OWORD *)(v5 + 48);
  v68 = *(_OWORD *)(v5 + 64);
  v70 = *(_OWORD *)(v5 + 96);
  v20 = *(_DWORD *)(v5 + 176);
  v71 = *(_OWORD *)(v5 + 144);
  v21 = *(_DWORD *)(v5 + 128);
  v22 = *(_DWORD *)(v5 + 224);
  v74 = *(_OWORD *)(v5 + 240);
  v23 = *(_DWORD *)(v5 + 272);
  v61 = *(_OWORD *)(v5 + 288);
  v24 = *(_DWORD *)(a1 + 48);
  v67 = v12;
  if (*(_QWORD *)(v8 + 192))
  {
    ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B1F9C328((uint64_t)v13, v73, v18, 0);
    v78 = v63;
    v79 = v65;
    v80 = v68;
    v81 = v70;
    v82 = v61;
    v84 = v76;
    v83 = v23;
    v85 = v20;
    v86 = v71;
    v88 = v74;
    v87 = v21;
    v89 = v22;
    v90 = v24;
    type metadata accessor for pbr_material_constants(0);
    sub_1B1F9C340((uint64_t)&v78, 0, ObjectType, v26);
    v27 = sub_1B20F26A4(*(_QWORD *)(v5 + 32), &v78);
    v28 = v27;
    if (*(_DWORD *)(v5 + 36))
      v29 = 0;
    else
      v29 = *(_DWORD *)(v5 + 32) == -1;
    v66 = a2;
    v75 = v27;
    if (!v29 && !v27)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v78 = 0;
      *((_QWORD *)&v78 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v78 = 0xD000000000000014;
      *((_QWORD *)&v78 + 1) = 0x80000001B234DBB0;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v30 = v78;
      v31 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v78 = 0;
      swift_retain();
      sub_1B1F1AD70(v31, (uint64_t *)&v78, v30, *((uint64_t *)&v30 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v28 = v75;
    }
    v32 = sub_1B20F26A4(*(_QWORD *)(v5 + 80), &v78);
    if (v32)
    {
      v72 = v32;
    }
    else
    {
      v37 = *(_QWORD *)(v4 + 240);
      swift_retain();
      v72 = (uint64_t)sub_1B1FAE1A4(0xD000000000000015, 0x80000001B233FDE0, v37, v4);
      swift_release();
    }
    v38 = sub_1B20F26A4(*(_QWORD *)(v5 + 112), &v78);
    if (v38)
    {
      v39 = v38;
    }
    else
    {
      v40 = *(_QWORD *)(v4 + 240);
      swift_retain();
      v39 = (uint64_t)sub_1B1FAE1A4(0xD000000000000015, 0x80000001B233FDE0, v40, v4);
      swift_release();
    }
    v69 = sub_1B20F26A4(*(_QWORD *)(v5 + 160), &v78);
    if (!v69)
    {
      v41 = *(_QWORD *)(v4 + 240);
      swift_retain();
      v69 = (uint64_t)sub_1B1FAE1A4(0xD000000000000015, 0x80000001B233FDE0, v41, v4);
      swift_release();
    }
    v42 = sub_1B20F26A4(*(_QWORD *)(v5 + 208), &v78);
    if (v42)
    {
      v64 = v42;
    }
    else
    {
      v43 = *(_QWORD *)(v4 + 240);
      swift_retain();
      v64 = (uint64_t)sub_1B1FAE1A4(0xD000000000000015, 0x80000001B233FDE0, v43, v4);
      swift_release();
    }
    v44 = sub_1B20F26A4(*(_QWORD *)(v5 + 256), &v78);
    if (v44)
    {
      v62 = v44;
    }
    else
    {
      v45 = *(_QWORD *)(v4 + 240);
      swift_retain();
      v62 = (uint64_t)sub_1B1FAE724(0xD000000000000017, 0x80000001B234DB90, v45, v4);
      swift_release();
    }
    sub_1B1F9C9D8(v28, 100);
    v46 = swift_unknownObjectRetain();
    sub_1B1F9C9D8(v46, 105);
    swift_unknownObjectRelease();
    v47 = swift_unknownObjectRetain();
    sub_1B1F9C9D8(v47, 101);
    swift_unknownObjectRelease();
    if ((*(_BYTE *)(v5 + 304) & 1) == 0)
    {
      v48 = swift_unknownObjectRetain();
      sub_1B1F9C9D8(v48, 102);
      swift_unknownObjectRelease();
    }
    v49 = swift_unknownObjectRetain();
    sub_1B1F9C9D8(v49, 103);
    swift_unknownObjectRelease();
    v50 = swift_unknownObjectRetain();
    sub_1B1F9C9D8(v50, 104);
    swift_unknownObjectRelease();
    sub_1B1791524(0, &qword_1EEF63DF8, (uint64_t (*)(uint64_t))sub_1B2133068, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B2280B20;
    *(_QWORD *)(inited + 32) = v28;
    *(_QWORD *)(inited + 40) = v72;
    *(_QWORD *)(inited + 48) = v39;
    *(_QWORD *)(inited + 56) = v69;
    *(_QWORD *)(inited + 64) = v64;
    *(_QWORD *)(inited + 72) = v62;
    *(_QWORD *)&v78 = inited;
    sub_1B2228AD0();
    v52 = (_QWORD *)v78;
    *(_QWORD *)&v78 = MEMORY[0x1E0DEE9D8];
    v77 = v52;
    if (v52[4])
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v53 = swift_unknownObjectRetain();
      MEMORY[0x1B5E2064C](v53);
      if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
    else
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
    }
    if (v77[5])
    {
      v54 = swift_unknownObjectRetain();
      MEMORY[0x1B5E2064C](v54);
      if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
    if (v77[6])
    {
      v55 = swift_unknownObjectRetain();
      MEMORY[0x1B5E2064C](v55);
      if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
    if (v77[7])
    {
      v56 = swift_unknownObjectRetain();
      MEMORY[0x1B5E2064C](v56);
      if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
    if (v77[8])
    {
      v57 = swift_unknownObjectRetain();
      MEMORY[0x1B5E2064C](v57);
      if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
    if (v77[9])
    {
      v58 = swift_unknownObjectRetain();
      MEMORY[0x1B5E2064C](v58);
      if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
    v59 = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v66 + 136) = v59;
    v60 = sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, *(_QWORD *)(v5 + 32))
       || sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, *(_QWORD *)(v5 + 80))
       || sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, *(_QWORD *)(v5 + 112))
       || sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, *(_QWORD *)(v5 + 160))
       || sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, *(_QWORD *)(v5 + 208))
       || sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, *(_QWORD *)(v5 + 256));
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(_BYTE *)(v66 + 225) = v60;
    v35 = v73;
  }
  else
  {
    objc_msgSend(v10, sel_storageMode);
    v33 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v34 = v13;
    v35 = v73;
    v36 = &v33[v73];
    *(_OWORD *)v36 = v63;
    *((_OWORD *)v36 + 1) = v65;
    *((_OWORD *)v36 + 2) = v68;
    *((_OWORD *)v36 + 3) = v70;
    *((_OWORD *)v36 + 4) = v61;
    *((_DWORD *)v36 + 20) = v23;
    *((_OWORD *)v36 + 6) = v76;
    *((_DWORD *)v36 + 28) = v20;
    *((_OWORD *)v36 + 8) = v71;
    *((_DWORD *)v36 + 36) = v21;
    *((_OWORD *)v36 + 10) = v74;
    *((_DWORD *)v36 + 44) = v22;
    *((_DWORD *)v36 + 48) = v24;
  }
  *(_QWORD *)&v78 = v13;
  *((_QWORD *)&v78 + 1) = v35;
  v79 = (unint64_t)v67;
  LOBYTE(v80) = 0;
  swift_unknownObjectRetain();
  sub_1B1D2C700((uint64_t)&v78, 2, 0);
  swift_release();
  return swift_unknownObjectRelease_n();
}

BOOL sub_1B21378EC(uint64_t a1)
{
  uint64_t v1;
  BOOL v4;

  if (*(_DWORD *)(v1 + 32) == (_DWORD)a1 && *(_DWORD *)(v1 + 36) == HIDWORD(a1))
    return 1;
  if (*(_DWORD *)(v1 + 80) == (_DWORD)a1 && *(_DWORD *)(v1 + 84) == HIDWORD(a1))
    return 1;
  v4 = *(_DWORD *)(v1 + 112) == (_DWORD)a1 && *(_DWORD *)(v1 + 116) == HIDWORD(a1);
  if (v4 || *(_QWORD *)(v1 + 160) == a1 || *(_QWORD *)(v1 + 208) == a1)
    return 1;
  if (*(_DWORD *)(v1 + 256) == (_DWORD)a1)
    return *(_DWORD *)(v1 + 260) == HIDWORD(a1);
  return 0;
}

__n128 sub_1B213798C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  __n128 result;
  char v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  char v27;
  __int16 v28;
  char v29;
  char v30;
  unint64_t v31;
  __int128 v32;
  char v33;
  __int16 v34;
  char v35;
  char v36;
  __int128 v37;
  char v38;
  __int16 v39;
  char v40;
  char v41;
  __int128 v42;
  char v43;
  __int16 v44;
  char v45;
  char v46;
  __int128 v47;
  char v48;
  __int16 v49;
  char v50;
  char v51;
  __int128 v52;
  char v53;
  __int16 v54;
  char v55;
  char v56;
  __int128 v57;
  __int128 v58;

  v1 = v0 + 264;
  v57 = *(_OWORD *)(v0 + 16);
  v50 = *(_BYTE *)(v0 + 41);
  v51 = *(_BYTE *)(v0 + 40);
  v49 = *(_WORD *)(v0 + 42);
  v48 = *(_BYTE *)(v0 + 44);
  v58 = *(_OWORD *)(v0 + 48);
  v2 = sub_1B1E33C2C(*(_QWORD *)(v0 + 32));
  v3 = v2;
  v31 = HIDWORD(v2);
  v47 = *(_OWORD *)(v0 + 64);
  v55 = *(_BYTE *)(v0 + 89);
  v56 = *(_BYTE *)(v0 + 88);
  v53 = *(_BYTE *)(v0 + 92);
  v54 = *(_WORD *)(v0 + 90);
  v52 = *(_OWORD *)(v0 + 96);
  v4 = sub_1B1E33C2C(*(_QWORD *)(v0 + 80));
  v5 = v4;
  v6 = HIDWORD(v4);
  v45 = *(_BYTE *)(v0 + 121);
  v46 = *(_BYTE *)(v0 + 120);
  v43 = *(_BYTE *)(v0 + 124);
  v44 = *(_WORD *)(v0 + 122);
  v7 = *(_DWORD *)(v0 + 128);
  v42 = *(_OWORD *)(v0 + 144);
  v8 = sub_1B1E33C2C(*(_QWORD *)(v0 + 112));
  v9 = v8;
  v25 = HIDWORD(v8);
  v40 = *(_BYTE *)(v0 + 169);
  v41 = *(_BYTE *)(v0 + 168);
  v38 = *(_BYTE *)(v0 + 172);
  v39 = *(_WORD *)(v0 + 170);
  v10 = *(_DWORD *)(v0 + 176);
  v37 = *(_OWORD *)(v0 + 192);
  v11 = sub_1B1E33C2C(*(_QWORD *)(v0 + 160));
  v12 = v11;
  v24 = HIDWORD(v11);
  v35 = *(_BYTE *)(v0 + 217);
  v36 = *(_BYTE *)(v0 + 216);
  v33 = *(_BYTE *)(v0 + 220);
  v34 = *(_WORD *)(v0 + 218);
  v13 = *(_DWORD *)(v0 + 224);
  v32 = *(_OWORD *)(v0 + 240);
  v14 = sub_1B1E33C2C(*(_QWORD *)(v0 + 208));
  v15 = v14;
  v16 = HIDWORD(v14);
  v29 = *(_BYTE *)(v0 + 265);
  v30 = *(_BYTE *)(v0 + 264);
  v27 = *(_BYTE *)(v0 + 268);
  v28 = *(_WORD *)(v0 + 266);
  v17 = *(_DWORD *)(v0 + 272);
  v26 = *(__n128 *)(v0 + 288);
  v18 = sub_1B1E33C2C(*(_QWORD *)(v0 + 256));
  v19 = v18;
  v20 = HIDWORD(v18);
  v23 = *(_BYTE *)(v1 + 40);
  LOBYTE(v1) = *(_BYTE *)(v1 + 41);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 32) = v3;
  *(_DWORD *)(v21 + 36) = v31;
  *(_BYTE *)(v21 + 40) = v51;
  *(_BYTE *)(v21 + 41) = v50;
  *(_WORD *)(v21 + 42) = v49;
  *(_BYTE *)(v21 + 44) = v48;
  *(_DWORD *)(v21 + 80) = v5;
  *(_DWORD *)(v21 + 84) = v6;
  *(_OWORD *)(v21 + 16) = v57;
  *(_OWORD *)(v21 + 48) = v58;
  *(_OWORD *)(v21 + 64) = v47;
  *(_BYTE *)(v21 + 88) = v56;
  *(_BYTE *)(v21 + 89) = v55;
  *(_WORD *)(v21 + 90) = v54;
  *(_BYTE *)(v21 + 92) = v53;
  *(_OWORD *)(v21 + 96) = v52;
  *(_DWORD *)(v21 + 112) = v9;
  *(_DWORD *)(v21 + 116) = v25;
  *(_BYTE *)(v21 + 120) = v46;
  *(_BYTE *)(v21 + 121) = v45;
  *(_WORD *)(v21 + 122) = v44;
  *(_BYTE *)(v21 + 124) = v43;
  *(_DWORD *)(v21 + 128) = v7;
  *(_OWORD *)(v21 + 144) = v42;
  *(_DWORD *)(v21 + 160) = v12;
  *(_DWORD *)(v21 + 164) = v24;
  *(_BYTE *)(v21 + 168) = v41;
  *(_BYTE *)(v21 + 169) = v40;
  *(_WORD *)(v21 + 170) = v39;
  *(_BYTE *)(v21 + 172) = v38;
  *(_DWORD *)(v21 + 176) = v10;
  *(_OWORD *)(v21 + 192) = v37;
  *(_DWORD *)(v21 + 208) = v15;
  *(_DWORD *)(v21 + 212) = v16;
  *(_BYTE *)(v21 + 216) = v36;
  *(_BYTE *)(v21 + 217) = v35;
  *(_WORD *)(v21 + 218) = v34;
  *(_BYTE *)(v21 + 220) = v33;
  *(_DWORD *)(v21 + 224) = v13;
  *(_OWORD *)(v21 + 240) = v32;
  *(_DWORD *)(v21 + 256) = v19;
  *(_DWORD *)(v21 + 260) = v20;
  *(_BYTE *)(v21 + 264) = v30;
  *(_BYTE *)(v21 + 265) = v29;
  *(_WORD *)(v21 + 266) = v28;
  *(_BYTE *)(v21 + 268) = v27;
  *(_DWORD *)(v21 + 272) = v17;
  result = v26;
  *(__n128 *)(v21 + 288) = v26;
  *(_BYTE *)(v21 + 304) = v23;
  *(_BYTE *)(v21 + 305) = v1;
  return result;
}

void sub_1B2137C9C(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_1B213798C();
  *a1 = v2;
}

uint64_t sub_1B2137CC4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1B2137D10(&qword_1EEF63E60, (uint64_t)&unk_1B22C16B8);
  result = sub_1B2137D10(&qword_1EEF63E68, (uint64_t)&unk_1B22C1690);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B2137D10(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for PBRParameters();
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B2137D4C()
{
  unint64_t result;

  result = qword_1EEF63E70;
  if (!qword_1EEF63E70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1BFC, &type metadata for TextureMipFilterMode);
    atomic_store(result, (unint64_t *)&qword_1EEF63E70);
  }
  return result;
}

uint64_t sub_1B2137D90@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v3 = 0xD000000000000015;
  v4 = 0xEC00000067617266;
  v8 = xmmword_1B22C1D90;
  v9 = 0;
  v10 = 0;
  if ((a1 & 0x4000) == 0)
    v3 = 0x676172665F726270;
  v5 = 0x80000001B234DAC0;
  if ((a1 & 0x4000) == 0)
    v5 = 0xEC000000746E656DLL;
  if (a1 < 0)
    v3 = 0x5F656E696C74756FLL;
  else
    v4 = v5;
  if ((a1 & 0x800) != 0)
    v3 = 0xD000000000000017;
  v11 = MEMORY[0x1E0DEE9D8];
  v12 = v3;
  v6 = 0x80000001B234DAE0;
  if ((a1 & 0x800) == 0)
    v6 = v4;
  v13 = v6;
  v14 = 0;
  v15 = 0;
  v16 = MEMORY[0x1E0DEE9D8];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  nullsub_16(&v8);
  return sub_1B2132F6C((uint64_t)&v8, a2);
}

unint64_t sub_1B2137E84()
{
  unint64_t result;

  result = qword_1EEF63E88;
  if (!qword_1EEF63E88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1BAC, &type metadata for PBRParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63E88);
  }
  return result;
}

unint64_t sub_1B2137EC8()
{
  unint64_t result;

  result = qword_1EEF63E90;
  if (!qword_1EEF63E90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C15EC, &type metadata for PBRColorProperty);
    atomic_store(result, (unint64_t *)&qword_1EEF63E90);
  }
  return result;
}

unint64_t sub_1B2137F0C()
{
  unint64_t result;

  result = qword_1EEF63E98;
  if (!qword_1EEF63E98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C163C, &type metadata for PBRScalarProperty);
    atomic_store(result, (unint64_t *)&qword_1EEF63E98);
  }
  return result;
}

unint64_t sub_1B2137F50()
{
  unint64_t result;

  result = qword_1EEF63EA8;
  if (!qword_1EEF63EA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C15C4, &type metadata for PBRColorProperty);
    atomic_store(result, (unint64_t *)&qword_1EEF63EA8);
  }
  return result;
}

unint64_t sub_1B2137F94()
{
  unint64_t result;

  result = qword_1EEF63EB0;
  if (!qword_1EEF63EB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1614, &type metadata for PBRScalarProperty);
    atomic_store(result, (unint64_t *)&qword_1EEF63EB0);
  }
  return result;
}

uint64_t sub_1B2137FD8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F6465626C61 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6576697373696D65 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73656E6867756F72 && a2 == 0xE900000000000073 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73656E6C6174656DLL && a2 == 0xE900000000000073 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F6973756C63636FLL && a2 == 0xE90000000000006ELL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C616D726F6ELL && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001B2346270 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x656C62756F447369 && a2 == 0xED00006465646953)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1B2138340(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65746C694667616DLL && a2 == 0xE900000000000072;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65746C69466E696DLL && a2 == 0xE900000000000072 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65746C694670696DLL && a2 == 0xE900000000000072 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5370617277 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x5470617277 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1B213854C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  unsigned __int8 v19;
  char v20;
  unsigned __int8 v21;
  char v22;
  unsigned __int8 v23;
  char v24;
  unsigned __int8 v25;
  char v26;
  unsigned __int8 v27;

  sub_1B19F8E54(0, &qword_1EEF63F78, (uint64_t (*)(void))sub_1B2139480, (uint64_t)&type metadata for TextureSampler.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v16 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2139480();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v26 = 0;
  sub_1B1A71C90();
  sub_1B2229814();
  v9 = v27;
  v24 = 1;
  sub_1B2229814();
  v10 = v25;
  v22 = 2;
  sub_1B1A71BF4();
  sub_1B2229814();
  v17 = v10;
  v11 = v23;
  v20 = 3;
  sub_1B1A71D2C();
  sub_1B2229814();
  v16 = v11;
  v12 = v21;
  v18 = 4;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v14 = v19;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v15 = 256;
  if (!v17)
    v15 = 0;
  return v15 | v9 | (v16 << 16) | (v12 << 24) | (v14 << 32);
}

uint64_t sub_1B21387D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char v19;

  sub_1B19F8E54(0, &qword_1EEF63F00, (uint64_t (*)(void))sub_1B2138DE4, (uint64_t)&type metadata for PBRColorProperty.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[4];
  sub_1B19FA070(a1, a1[3]);
  sub_1B2138DE4();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v19 = 0;
    sub_1B1BF439C((unint64_t *)&qword_1ED4B7330, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    v16 = v17;
    v19 = 1;
    sub_1B1A08878();
    sub_1B2229814();
    v9 = v17;
    v19 = 2;
    sub_1B2138D5C();
    sub_1B2229814();
    v15 = v17;
    v18 = BYTE1(v17);
    v14 = BYTE2(v17);
    v13 = BYTE3(v17);
    v12 = BYTE4(v17);
    v19 = 3;
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11 = v17;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

float sub_1B2138A84(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;

  sub_1B19F8E54(0, &qword_1EEF63EB8, (uint64_t (*)(void))sub_1B2138D18, (uint64_t)&type metadata for PBRScalarProperty.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2138D18();
  sub_1B222A150();
  if (!v1)
  {
    LOBYTE(v16) = 0;
    sub_1B22297F0();
    v2 = v10;
    v17 = 1;
    sub_1B1A08878();
    sub_1B2229814();
    v17 = 2;
    sub_1B2138D5C();
    sub_1B2229814();
    v15 = v16;
    v14 = BYTE3(v16);
    v13 = BYTE4(v16);
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v17 = 3;
    sub_1B1BF439C((unint64_t *)&qword_1ED4B7330, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v12 = v16;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B2138D18()
{
  unint64_t result;

  result = qword_1EEF63EC0;
  if (!qword_1EEF63EC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1B5C, &type metadata for PBRScalarProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63EC0);
  }
  return result;
}

unint64_t sub_1B2138D5C()
{
  unint64_t result;

  result = qword_1EEF63ED0;
  if (!qword_1EEF63ED0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1B34, &type metadata for TextureSampler);
    atomic_store(result, (unint64_t *)&qword_1EEF63ED0);
  }
  return result;
}

unint64_t sub_1B2138DA0()
{
  unint64_t result;

  result = qword_1EEF63EF0;
  if (!qword_1EEF63EF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1B0C, &type metadata for TextureSampler);
    atomic_store(result, (unint64_t *)&qword_1EEF63EF0);
  }
  return result;
}

unint64_t sub_1B2138DE4()
{
  unint64_t result;

  result = qword_1EEF63F08;
  if (!qword_1EEF63F08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1ABC, &type metadata for PBRColorProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F08);
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRColorProperty.CodingKeys()
{
  return &type metadata for PBRColorProperty.CodingKeys;
}

uint64_t _s3VFX16PBRColorPropertyV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B2138E88 + 4 * byte_1B22C1506[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B2138EBC + 4 * byte_1B22C1501[v4]))();
}

uint64_t sub_1B2138EBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2138EC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2138ECCLL);
  return result;
}

uint64_t sub_1B2138ED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2138EE0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B2138EE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2138EEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PBRScalarProperty.CodingKeys()
{
  return &type metadata for PBRScalarProperty.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PBRParameters.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B2138F54 + 4 * byte_1B22C1510[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B2138F88 + 4 * byte_1B22C150B[v4]))();
}

uint64_t sub_1B2138F88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2138F90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2138F98);
  return result;
}

uint64_t sub_1B2138FA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2138FACLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B2138FB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2138FB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PBRParameters.CodingKeys()
{
  return &type metadata for PBRParameters.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for TextureMipFilterMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B2139020 + 4 * byte_1B22C151A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B2139054 + 4 * byte_1B22C1515[v4]))();
}

uint64_t sub_1B2139054(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B213905C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2139064);
  return result;
}

uint64_t sub_1B2139070(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2139078);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B213907C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2139084(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureMipFilterMode()
{
  return &type metadata for TextureMipFilterMode;
}

uint64_t initializeBufferWithCopyOfBuffer for TextureSampler(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TextureSampler(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[5])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureSampler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureSampler()
{
  return &type metadata for TextureSampler;
}

unint64_t sub_1B2139150()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF63F18;
  if (!qword_1EEF63F18)
  {
    sub_1B1A02758(255, &qword_1EEF63F20, (uint64_t)&type metadata for TextureMipFilterMode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF63F18);
  }
  return result;
}

unint64_t sub_1B21391B4()
{
  unint64_t result;

  result = qword_1EEF63F28;
  if (!qword_1EEF63F28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C17BC, &type metadata for TextureMipFilterMode);
    atomic_store(result, (unint64_t *)&qword_1EEF63F28);
  }
  return result;
}

unint64_t sub_1B21391FC()
{
  unint64_t result;

  result = qword_1EEF63F30;
  if (!qword_1EEF63F30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C18B4, &type metadata for PBRParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F30);
  }
  return result;
}

unint64_t sub_1B2139244()
{
  unint64_t result;

  result = qword_1EEF63F38;
  if (!qword_1EEF63F38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C19A4, &type metadata for PBRScalarProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F38);
  }
  return result;
}

unint64_t sub_1B213928C()
{
  unint64_t result;

  result = qword_1EEF63F40;
  if (!qword_1EEF63F40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1A94, &type metadata for PBRColorProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F40);
  }
  return result;
}

unint64_t sub_1B21392D4()
{
  unint64_t result;

  result = qword_1EEF63F48;
  if (!qword_1EEF63F48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C19CC, &type metadata for PBRColorProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F48);
  }
  return result;
}

unint64_t sub_1B213931C()
{
  unint64_t result;

  result = qword_1EEF63F50;
  if (!qword_1EEF63F50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C19F4, &type metadata for PBRColorProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F50);
  }
  return result;
}

unint64_t sub_1B2139364()
{
  unint64_t result;

  result = qword_1EEF63F58;
  if (!qword_1EEF63F58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C18DC, &type metadata for PBRScalarProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F58);
  }
  return result;
}

unint64_t sub_1B21393AC()
{
  unint64_t result;

  result = qword_1EEF63F60;
  if (!qword_1EEF63F60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1904, &type metadata for PBRScalarProperty.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F60);
  }
  return result;
}

unint64_t sub_1B21393F4()
{
  unint64_t result;

  result = qword_1EEF63F68;
  if (!qword_1EEF63F68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1824, &type metadata for PBRParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F68);
  }
  return result;
}

unint64_t sub_1B213943C()
{
  unint64_t result;

  result = qword_1EEF63F70;
  if (!qword_1EEF63F70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C184C, &type metadata for PBRParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F70);
  }
  return result;
}

unint64_t sub_1B2139480()
{
  unint64_t result;

  result = qword_1EEF63F80;
  if (!qword_1EEF63F80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1CEC, &type metadata for TextureSampler.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63F80);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TextureSampler.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B2139510 + 4 * byte_1B22C1524[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B2139544 + 4 * byte_1B22C151F[v4]))();
}

uint64_t sub_1B2139544(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B213954C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2139554);
  return result;
}

uint64_t sub_1B2139560(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2139568);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B213956C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2139574(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureSampler.CodingKeys()
{
  return &type metadata for TextureSampler.CodingKeys;
}

unint64_t sub_1B2139594()
{
  unint64_t result;

  result = qword_1EEF63FC0;
  if (!qword_1EEF63FC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1CC4, &type metadata for TextureSampler.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63FC0);
  }
  return result;
}

unint64_t sub_1B21395DC()
{
  unint64_t result;

  result = qword_1EEF63FC8;
  if (!qword_1EEF63FC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1C34, &type metadata for TextureSampler.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63FC8);
  }
  return result;
}

unint64_t sub_1B2139624()
{
  unint64_t result;

  result = qword_1EEF63FD0[0];
  if (!qword_1EEF63FD0[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C1C5C, &type metadata for TextureSampler.CodingKeys);
    atomic_store(result, qword_1EEF63FD0);
  }
  return result;
}

uint64_t sub_1B2139670()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ShaderRegistry();
  v0 = swift_allocObject();
  result = sub_1B21396A8();
  qword_1EEFD5900 = v0;
  return result;
}

uint64_t sub_1B21396A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  uint64_t v63;
  simd_float4 v65;
  simd_float4 v66;
  simd_float4 v67;
  simd_float4 v68;

  v1 = v0;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 16) = sub_1B1B7F314(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 24) = sub_1B1B7F438(v2);
  sub_1B1BF6F5C();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226E440;
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
  v5 = v4;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAF00, (uint64_t (*)(uint64_t))sub_1B20ED050, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0xE000000000000000;
  *(_QWORD *)(v6 + 72) = v5;
  v7 = swift_allocObject();
  *(_QWORD *)(v6 + 48) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1B2244E40;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  *(_QWORD *)(v3 + 32) = sub_1B1BF5168(0x726F6C6F63, 0xE500000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                           v6);
  sub_1B2228AD0();
  sub_1B213AC08(0x69665F44326E6567, 0xEF726F6C6F436C6CLL, 0x6C7070612E6D6F63, 0xED00007866762E65, v3);
  swift_bridgeObjectRelease();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226E450;
  swift_allocObject();
  *(_QWORD *)(v8 + 32) = sub_1B1BF5168(3239529, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)&type metadata for Entity, 0, 0, 0,
                           v2);
  swift_allocObject();
  *(_QWORD *)(v8 + 40) = sub_1B1BF5168(3305065, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 8, 0, (uint64_t)&type metadata for Entity, 0, 0, 0,
                           v2);
  sub_1B2228AD0();
  sub_1B213AC08(0x696D5F44326E6567, 0xE900000000000078, 0x6C7070612E6D6F63, 0xED00007866762E65, v8);
  swift_bridgeObjectRelease();
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226E450;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0xE000000000000000;
  *(_QWORD *)(v10 + 72) = v5;
  v11 = swift_allocObject();
  *(_QWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  swift_allocObject();
  *(_QWORD *)(v9 + 32) = sub_1B1BF5168(0x31726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                           v10);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 40) = 0xE000000000000000;
  *(_QWORD *)(v12 + 72) = v5;
  v13 = swift_allocObject();
  *(_QWORD *)(v12 + 48) = v13;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v13 + 16) = _Q0;
  swift_allocObject();
  *(_QWORD *)(v9 + 40) = sub_1B1BF5168(0x32726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                           v12);
  sub_1B2228AD0();
  sub_1B213AC08(0x69645F44326E6567, 0xEA00000000006373, 0x6C7070612E6D6F63, 0xED00007866762E65, v9);
  swift_bridgeObjectRelease();
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E450;
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v20 + 40) = 0xE000000000000000;
  *(_QWORD *)(v20 + 72) = v5;
  v21 = swift_allocObject();
  *(_QWORD *)(v20 + 48) = v21;
  *(_OWORD *)(v21 + 16) = xmmword_1B22B25D0;
  swift_allocObject();
  *(_QWORD *)(v19 + 32) = sub_1B1BF5168(0x31726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v20);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = 0xE000000000000000;
  *(_QWORD *)(v22 + 72) = v5;
  v23 = swift_allocObject();
  *(_QWORD *)(v22 + 48) = v23;
  *(_OWORD *)(v23 + 16) = xmmword_1B2244E10;
  swift_allocObject();
  *(_QWORD *)(v19 + 40) = sub_1B1BF5168(0x32726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v22);
  sub_1B2228AD0();
  sub_1B213AC08(0xD000000000000016, 0x80000001B234DC20, 0x6C7070612E6D6F63, 0xED00007866762E65, v19);
  swift_bridgeObjectRelease();
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1B226E4A0;
  sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  v26 = v25;
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = 0xE000000000000000;
  *(_QWORD *)(v27 + 72) = v26;
  *(_QWORD *)(v27 + 48) = 0;
  swift_allocObject();
  *(_QWORD *)(v24 + 32) = sub_1B1BF5168(829648752, 0xE400000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v27);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v28 + 32) = 0;
  *(_QWORD *)(v28 + 40) = 0xE000000000000000;
  *(_QWORD *)(v28 + 72) = v26;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v28 + 48) = _D0;
  swift_allocObject();
  *(_QWORD *)(v24 + 40) = sub_1B1BF5168(846425968, 0xE400000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v28);
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 40) = 0xE000000000000000;
  *(_QWORD *)(v30 + 72) = v5;
  v31 = swift_allocObject();
  *(_QWORD *)(v30 + 48) = v31;
  *(_OWORD *)(v31 + 16) = xmmword_1B22B25D0;
  swift_allocObject();
  *(_QWORD *)(v24 + 48) = sub_1B1BF5168(0x31726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v30);
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 40) = 0xE000000000000000;
  *(_QWORD *)(v32 + 72) = v5;
  v33 = swift_allocObject();
  *(_QWORD *)(v32 + 48) = v33;
  *(_OWORD *)(v33 + 16) = xmmword_1B2244E10;
  swift_allocObject();
  *(_QWORD *)(v24 + 56) = sub_1B1BF5168(0x32726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v32);
  sub_1B2228AD0();
  sub_1B213AC08(0xD000000000000014, 0x80000001B234DC40, 0x6C7070612E6D6F63, 0xED00007866762E65, v24);
  swift_bridgeObjectRelease();
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1B226E4A0;
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)(v35 + 40) = 0xE000000000000000;
  *(_QWORD *)(v35 + 72) = v26;
  *(_QWORD *)(v35 + 48) = 0;
  swift_allocObject();
  *(_QWORD *)(v34 + 32) = sub_1B1BF5168(0x7265746E6563, 0xE600000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v35);
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 40) = 0xE000000000000000;
  v37 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v36 + 72) = MEMORY[0x1E0DEB188];
  *(_DWORD *)(v36 + 48) = 1065353216;
  swift_allocObject();
  *(_QWORD *)(v34 + 40) = sub_1B1BF5168(0x737569646172, 0xE600000000000000, 0, 0, 0x4024000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v37, 0, 0, 0,
                            v36);
  v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)(v38 + 40) = 0xE000000000000000;
  *(_QWORD *)(v38 + 72) = v5;
  v39 = swift_allocObject();
  *(_QWORD *)(v38 + 48) = v39;
  *(_OWORD *)(v39 + 16) = xmmword_1B22B25D0;
  swift_allocObject();
  *(_QWORD *)(v34 + 48) = sub_1B1BF5168(0x31726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v38);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v40 + 32) = 0;
  *(_QWORD *)(v40 + 40) = 0xE000000000000000;
  *(_QWORD *)(v40 + 72) = v5;
  v41 = swift_allocObject();
  *(_QWORD *)(v40 + 48) = v41;
  *(_OWORD *)(v41 + 16) = xmmword_1B2244E10;
  swift_allocObject();
  *(_QWORD *)(v34 + 56) = sub_1B1BF5168(0x32726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v40);
  sub_1B2228AD0();
  sub_1B213AC08(0xD000000000000014, 0x80000001B234DC60, 0x6C7070612E6D6F63, 0xED00007866762E65, v34);
  swift_bridgeObjectRelease();
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1B226E480;
  v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v43 + 32) = 0;
  *(_QWORD *)(v43 + 40) = 0xE000000000000000;
  *(_QWORD *)(v43 + 72) = v26;
  *(_QWORD *)(v43 + 48) = 1056964608;
  swift_allocObject();
  *(_QWORD *)(v42 + 32) = sub_1B1BF5168(0x68676948796B73, 0xE700000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v43);
  v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v44 + 32) = 0;
  *(_QWORD *)(v44 + 40) = 0xE000000000000000;
  *(_QWORD *)(v44 + 72) = v26;
  *(_QWORD *)(v44 + 48) = 0x3FECCCCD3F3AE148;
  swift_allocObject();
  *(_QWORD *)(v42 + 40) = sub_1B1BF5168(0x6C6464694D796B73, 0xE900000000000065, 0, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v44);
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v45 + 32) = 0;
  *(_QWORD *)(v45 + 40) = 0xE000000000000000;
  *(_QWORD *)(v45 + 72) = v26;
  *(_QWORD *)(v45 + 48) = 0x3F8000003F0A3D71;
  swift_allocObject();
  *(_QWORD *)(v42 + 48) = sub_1B1BF5168(0x776F4C796B73, 0xE600000000000000, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v45);
  v46 = swift_allocObject();
  v47 = (int8x16_t)xmmword_1B226D240;
  *(_OWORD *)(v46 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v46 + 32) = 0;
  *(_QWORD *)(v46 + 40) = 0xE000000000000000;
  v47.i32[0] = 1.0;
  v65 = sub_1B1BF3FA8(3871237, v47, v48);
  *(_QWORD *)(v46 + 72) = v5;
  v49 = swift_allocObject();
  *(_QWORD *)(v46 + 48) = v49;
  *(simd_float4 *)(v49 + 16) = v65;
  swift_allocObject();
  *(_QWORD *)(v42 + 56) = sub_1B1BF5168(0x4368676948796B73, 0xEC000000726F6C6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v46);
  v50 = swift_allocObject();
  v51 = (int8x16_t)xmmword_1B226D240;
  *(_OWORD *)(v50 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v50 + 32) = 0;
  *(_QWORD *)(v50 + 40) = 0xE000000000000000;
  v51.i32[0] = 1.0;
  v66 = sub_1B1BF3FA8(13810438, v51, v52);
  *(_QWORD *)(v50 + 72) = v5;
  v53 = swift_allocObject();
  *(_QWORD *)(v50 + 48) = v53;
  *(simd_float4 *)(v53 + 16) = v66;
  swift_allocObject();
  *(_QWORD *)(v42 + 64) = sub_1B1BF5168(0x6C6464694D796B73, 0xEE00726F6C6F4365, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v50);
  v54 = swift_allocObject();
  v55 = (int8x16_t)xmmword_1B226D240;
  *(_OWORD *)(v54 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v54 + 32) = 0;
  *(_QWORD *)(v54 + 40) = 0xE000000000000000;
  v55.i32[0] = 1.0;
  v67 = sub_1B1BF3FA8(5473238, v55, v56);
  *(_QWORD *)(v54 + 72) = v5;
  v57 = swift_allocObject();
  *(_QWORD *)(v54 + 48) = v57;
  *(simd_float4 *)(v57 + 16) = v67;
  swift_allocObject();
  *(_QWORD *)(v42 + 72) = sub_1B1BF5168(0x6F43776F4C796B73, 0xEB00000000726F6CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v54);
  v58 = swift_allocObject();
  *(_OWORD *)(v58 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v58 + 32) = 0;
  *(_QWORD *)(v58 + 40) = 0xE000000000000000;
  *(_QWORD *)(v58 + 72) = v26;
  *(_QWORD *)(v58 + 48) = 0x3F51EB853F3851ECLL;
  swift_allocObject();
  *(_QWORD *)(v42 + 80) = sub_1B1BF5168(0x65746E65436E7573, 0xE900000000000072, 0xBFF0000000000000, 0, 0x4000000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v58);
  v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v59 + 32) = 0;
  *(_QWORD *)(v59 + 40) = 0xE000000000000000;
  *(_QWORD *)(v59 + 72) = v26;
  *(_QWORD *)(v59 + 48) = 0x3FC28F5C3E851EB8;
  swift_allocObject();
  *(_QWORD *)(v42 + 88) = sub_1B1BF5168(0xD000000000000011, 0x80000001B234DC80, 0, 0, 0x4024000000000000, 0, 0x3F847AE147AE147BLL, 0, 0, 1, 0, 1, 0, 1, 0, v26, 0, 0, 0,
                            v59);
  v60 = swift_allocObject();
  v61 = (int8x16_t)xmmword_1B226D240;
  *(_OWORD *)(v60 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 40) = 0xE000000000000000;
  v61.i32[0] = 1062836634;
  v68 = sub_1B1BF3FA8(11204599, v61, v62);
  *(_QWORD *)(v60 + 72) = v5;
  v63 = swift_allocObject();
  *(_QWORD *)(v60 + 48) = v63;
  *(simd_float4 *)(v63 + 16) = v68;
  swift_allocObject();
  *(_QWORD *)(v42 + 96) = sub_1B1BF5168(0x726F6C6F436E7573, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, v5, 0, 0, 0,
                            v60);
  sub_1B2228AD0();
  sub_1B213AC08(0x6B735F44326E6567, 0xEB00000000443279, 0x6C7070612E6D6F63, 0xED00007866762E65, v42);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B213AC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t inited;
  uint64_t v21;

  v6 = v5;
  v12 = *(_QWORD *)(v5 + 16);
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = sub_1B1DC3B00(a3, a4);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    sub_1B1791524(0, &qword_1EEF63FE8, (uint64_t (*)(uint64_t))sub_1B213B078, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226D240;
    *(_QWORD *)(inited + 32) = a1;
    *(_QWORD *)(inited + 40) = a2;
    *(_QWORD *)(inited + 48) = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = sub_1B1B7F208(inited);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = 0x8000000000000000;
    goto LABEL_6;
  }
  v15 = *(_QWORD **)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = swift_isUniquelyReferenced_nonNull_native();
  sub_1B1B85958(a5, a1, a2, v16);
  v17 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = 0x8000000000000000;
LABEL_6:
  sub_1B1B8593C((uint64_t)v17, a3, a4, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 16) = v21;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B213ADD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v4 = sub_1B213AF40(a1, a2, a3, a4);
  if (v4 >> 62)
  {
    v5 = sub_1B22296AC();
    if (!v5)
      goto LABEL_14;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v5)
      goto LABEL_14;
  }
  v6 = 0;
  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      v8 = MEMORY[0x1B5E21018](v6, v4);
    }
    else
    {
      v8 = *(_QWORD *)(v4 + 8 * v6 + 32);
      swift_retain();
    }
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v7 = sub_1B1C64968(0, v7[2] + 1, 1, v7);
    v10 = v7[2];
    v9 = v7[3];
    if (v10 >= v9 >> 1)
      v7 = sub_1B1C64968(v9 > 1, v10 + 1, 1, v7);
    v7[2] = v10 + 1;
    v11 = &v7[6 * v10];
    v11[4] = 0;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = 1;
    v11[7] = v6;
    v11[8] = 0;
    v11[9] = v8;
    swift_release();
    ++v6;
  }
  while (v5 != v6);
LABEL_14:
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9E0];
}

uint64_t sub_1B213AF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v5 = *(_QWORD *)(v4 + 16);
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = sub_1B1DC3B00(a3, a4);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v12 + 16))
      {
        v15 = MEMORY[0x1E0DEE9D8];
LABEL_11:
        swift_bridgeObjectRelease();
        return v15;
      }
      swift_bridgeObjectRetain();
      v13 = sub_1B1DC3B00(a1, a2);
      if ((v14 & 1) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
        swift_bridgeObjectRetain();
      }
      else
      {
        v15 = MEMORY[0x1E0DEE9D8];
      }
    }
    else
    {
      v15 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t type metadata accessor for ShaderRegistry()
{
  return objc_opt_self();
}

uint64_t sub_1B213B068()
{
  return swift_deallocObject();
}

void sub_1B213B078()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF63FF0)
  {
    sub_1B1791524(255, &qword_1EEF58810, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF63FF0);
  }
}

ValueMetadata *type metadata accessor for ParticleLifetime()
{
  return &type metadata for ParticleLifetime;
}

ValueMetadata *type metadata accessor for ParticleTextureFrame()
{
  return &type metadata for ParticleTextureFrame;
}

ValueMetadata *type metadata accessor for Color()
{
  return &type metadata for Color;
}

ValueMetadata *type metadata accessor for ParticleAge()
{
  return &type metadata for ParticleAge;
}

float sub_1B213B134(float a1)
{
  return 1.0 / a1;
}

double sub_1B213B140(unsigned int a1)
{
  return sub_1B1AE4138(a1);
}

uint64_t sub_1B213B154()
{
  sub_1B213F148();
  return sub_1B222A1D4();
}

uint64_t sub_1B213B17C()
{
  sub_1B213F148();
  return sub_1B222A1E0();
}

uint64_t sub_1B213B1A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF640B8, (uint64_t (*)(void))sub_1B213F148, (uint64_t)&type metadata for Particle.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F148();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B213B280@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B213E7F8(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B213B2A8()
{
  sub_1B213F18C();
  return sub_1B222A1D4();
}

uint64_t sub_1B213B2D0()
{
  sub_1B213F18C();
  return sub_1B222A1E0();
}

uint64_t sub_1B213B2F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF640C8, (uint64_t (*)(void))sub_1B213F18C, (uint64_t)&type metadata for ParticleRoughness.CodingKeys, a2);
}

uint64_t sub_1B213B324(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF640D8, (uint64_t (*)(void))sub_1B213F18C, (uint64_t)&type metadata for ParticleRoughness.CodingKeys);
}

void sub_1B213B350(_DWORD *a1@<X8>)
{
  *a1 = 1056964608;
}

uint64_t sub_1B213B35C()
{
  sub_1B213F1D0();
  return sub_1B222A1D4();
}

uint64_t sub_1B213B384()
{
  sub_1B213F1D0();
  return sub_1B222A1E0();
}

uint64_t sub_1B213B3AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF640E0, (uint64_t (*)(void))sub_1B213F1D0, (uint64_t)&type metadata for ParticleMetalness.CodingKeys, a2);
}

uint64_t sub_1B213B3D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF640F0, (uint64_t (*)(void))sub_1B213F1D0, (uint64_t)&type metadata for ParticleMetalness.CodingKeys);
}

uint64_t sub_1B213B404()
{
  sub_1B213F214();
  return sub_1B222A1D4();
}

uint64_t sub_1B213B42C()
{
  sub_1B213F214();
  return sub_1B222A1E0();
}

uint64_t sub_1B213B454@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF640F8, (uint64_t (*)(void))sub_1B213F214, (uint64_t)&type metadata for ParticleEmission.CodingKeys, a2);
}

uint64_t sub_1B213B480(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF64108, (uint64_t (*)(void))sub_1B213F214, (uint64_t)&type metadata for ParticleEmission.CodingKeys);
}

uint64_t sub_1B213B4AC()
{
  sub_1B213F258();
  return sub_1B222A1D4();
}

uint64_t sub_1B213B4D4()
{
  sub_1B213F258();
  return sub_1B222A1E0();
}

uint64_t sub_1B213B4FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF64110, (uint64_t (*)(void))sub_1B213F258, (uint64_t)&type metadata for ParticleAngle.CodingKeys, a2);
}

uint64_t sub_1B213B528(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF64120, (uint64_t (*)(void))sub_1B213F258, (uint64_t)&type metadata for ParticleAngle.CodingKeys);
}

uint64_t sub_1B213B554()
{
  sub_1B213F29C();
  return sub_1B222A1D4();
}

uint64_t sub_1B213B57C()
{
  sub_1B213F29C();
  return sub_1B222A1E0();
}

uint64_t sub_1B213B5A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF64128, (uint64_t (*)(void))sub_1B213F29C, (uint64_t)&type metadata for ParticleAngleVelocity.CodingKeys, a2);
}

uint64_t sub_1B213B5D0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF64138, (uint64_t (*)(void))sub_1B213F29C, (uint64_t)&type metadata for ParticleAngleVelocity.CodingKeys);
}

uint64_t sub_1B213B5FC()
{
  sub_1B213D77C();
  return sub_1B222A1D4();
}

uint64_t sub_1B213B624()
{
  sub_1B213D77C();
  return sub_1B222A1E0();
}

uint64_t sub_1B213B64C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF64010, (uint64_t (*)(void))sub_1B213D77C, (uint64_t)&type metadata for ParticleTextureFrame.CodingKeys, a2);
}

uint64_t sub_1B213B678(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF64020, (uint64_t (*)(void))sub_1B213D77C, (uint64_t)&type metadata for ParticleTextureFrame.CodingKeys);
}

uint64_t sub_1B213B6A4(_QWORD *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD v12[2];

  sub_1B19F8E54(0, &qword_1EEF64098, (uint64_t (*)(void))sub_1B213F0C0, (uint64_t)&type metadata for ParticleRibbonLength.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F0C0();
  sub_1B222A180();
  *(double *)&v12[1] = a2;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v10, MEMORY[0x1E0DEDD30]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B213B800()
{
  sub_1B213F0C0();
  return sub_1B222A1D4();
}

uint64_t sub_1B213B828()
{
  sub_1B213F0C0();
  return sub_1B222A1E0();
}

void sub_1B213B850(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double v4;

  v4 = sub_1B213E090(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_1B213B878(_QWORD *a1)
{
  double *v1;

  return sub_1B213B6A4(a1, *v1);
}

uint64_t sub_1B213B890()
{
  return 0x4D65737265766E69;
}

uint64_t sub_1B213B8B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x4D65737265766E69 && a2 == 0xEB00000000737361)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B213B95C()
{
  sub_1B213F2E0();
  return sub_1B222A1D4();
}

uint64_t sub_1B213B984()
{
  sub_1B213F2E0();
  return sub_1B222A1E0();
}

uint64_t sub_1B213B9AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF64140, (uint64_t (*)(void))sub_1B213F2E0, (uint64_t)&type metadata for Mass.CodingKeys, a2);
}

uint64_t sub_1B213B9D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF64150, (uint64_t (*)(void))sub_1B213F2E0, (uint64_t)&type metadata for Mass.CodingKeys);
}

uint64_t sub_1B213BA04(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  v11[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF64168, (uint64_t (*)(void))sub_1B213F324, (uint64_t)&type metadata for LinearFactor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F324();
  sub_1B222A180();
  v11[1] = v11[0];
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v9, MEMORY[0x1E0DEDD60]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B213BB60()
{
  sub_1B213F324();
  return sub_1B222A1D4();
}

uint64_t sub_1B213BB88()
{
  sub_1B213F324();
  return sub_1B222A1E0();
}

uint64_t sub_1B213BBB0@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B213DBB0(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B213BBD8(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B213BA04(a1, *v1);
}

uint64_t sub_1B213BBF0()
{
  return 12;
}

uint64_t sub_1B213BBF8(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  v11[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF64180, (uint64_t (*)(void))sub_1B213F368, (uint64_t)&type metadata for AngularFactor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F368();
  sub_1B222A180();
  v11[1] = v11[0];
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v9, MEMORY[0x1E0DEDD60]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B213BD54()
{
  sub_1B213F368();
  return sub_1B222A1D4();
}

uint64_t sub_1B213BD7C()
{
  sub_1B213F368();
  return sub_1B222A1E0();
}

uint64_t sub_1B213BDA4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B213DD50(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B213BDCC(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B213BBF8(a1, *v1);
}

uint64_t sub_1B213BDE4()
{
  return 13;
}

uint64_t sub_1B213BDEC(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  v11[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF64198, (uint64_t (*)(void))sub_1B213F3AC, (uint64_t)&type metadata for ParticleTarget.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F3AC();
  sub_1B222A180();
  v11[1] = v11[0];
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v9, MEMORY[0x1E0DEDD60]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B213BF48(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  v11[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF641B0, (uint64_t (*)(void))sub_1B213F590, (uint64_t)&type metadata for UserData1.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F590();
  sub_1B222A180();
  v11[1] = v11[0];
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDB8]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B213C0A4(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  v11[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF641C8, (uint64_t (*)(void))sub_1B213F774, (uint64_t)&type metadata for UserData2.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F774();
  sub_1B222A180();
  v11[1] = v11[0];
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDB8]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B213C200(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  v11[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF641E0, (uint64_t (*)(void))sub_1B213F958, (uint64_t)&type metadata for UserData3.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F958();
  sub_1B222A180();
  v11[1] = v11[0];
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDB8]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B213C35C(_QWORD *a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  v11[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF641F8, (uint64_t (*)(void))sub_1B213FB3C, (uint64_t)&type metadata for UserData4.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213FB3C();
  sub_1B222A180();
  v11[1] = v11[0];
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDB8]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B213C4B8()
{
  return 0x7A696C616D726F6ELL;
}

uint64_t sub_1B213C4DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7A696C616D726F6ELL && a2 == 0xEF65756C61566465)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B213C594()
{
  sub_1B213EA94();
  return sub_1B222A1D4();
}

uint64_t sub_1B213C5BC()
{
  sub_1B213EA94();
  return sub_1B222A1E0();
}

uint64_t sub_1B213C5E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF64028, (uint64_t (*)(void))sub_1B213EA94, (uint64_t)&type metadata for ParticleAge.CodingKeys, a2);
}

uint64_t sub_1B213C610(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF64038, (uint64_t (*)(void))sub_1B213EA94, (uint64_t)&type metadata for ParticleAge.CodingKeys);
}

uint64_t sub_1B213C63C()
{
  sub_1B213F3AC();
  return sub_1B222A1D4();
}

uint64_t sub_1B213C664()
{
  sub_1B213F3AC();
  return sub_1B222A1E0();
}

uint64_t sub_1B213C68C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B213DEF0(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B213C6B4(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B213BDEC(a1, *v1);
}

uint64_t sub_1B213C6CC()
{
  sub_1B213F590();
  return sub_1B222A1D4();
}

uint64_t sub_1B213C6F4()
{
  sub_1B213F590();
  return sub_1B222A1E0();
}

uint64_t sub_1B213C71C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B213F3F0(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B213C744(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B213BF48(a1, *v1);
}

uint64_t sub_1B213C75C()
{
  sub_1B213F774();
  return sub_1B222A1D4();
}

uint64_t sub_1B213C784()
{
  sub_1B213F774();
  return sub_1B222A1E0();
}

uint64_t sub_1B213C7AC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B213F5D4(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B213C7D4(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B213C0A4(a1, *v1);
}

uint64_t sub_1B213C7EC()
{
  sub_1B213F958();
  return sub_1B222A1D4();
}

uint64_t sub_1B213C814()
{
  sub_1B213F958();
  return sub_1B222A1E0();
}

uint64_t sub_1B213C83C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B213F7B8(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B213C864(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B213C200(a1, *v1);
}

uint64_t sub_1B213C87C()
{
  sub_1B213FB3C();
  return sub_1B222A1D4();
}

uint64_t sub_1B213C8A4()
{
  sub_1B213FB3C();
  return sub_1B222A1E0();
}

uint64_t sub_1B213C8CC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B213F99C(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B213C8F4(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B213C35C(a1, *v1);
}

uint64_t sub_1B213C90C()
{
  sub_1B213FB80();
  return sub_1B222A1D4();
}

uint64_t sub_1B213C934()
{
  sub_1B213FB80();
  return sub_1B222A1E0();
}

uint64_t sub_1B213C95C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF64200, (uint64_t (*)(void))sub_1B213FB80, (uint64_t)&type metadata for NeighborCount.CodingKeys, a2);
}

uint64_t sub_1B213C988(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF64210, (uint64_t (*)(void))sub_1B213FB80, (uint64_t)&type metadata for NeighborCount.CodingKeys);
}

uint64_t sub_1B213C9B4()
{
  sub_1B213FBC4();
  return sub_1B222A1D4();
}

uint64_t sub_1B213C9DC()
{
  sub_1B213FBC4();
  return sub_1B222A1E0();
}

uint64_t sub_1B213CA04@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD *v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  _DWORD *v14;

  v14 = a2;
  sub_1B19F8E54(0, &qword_1EEF64218, (uint64_t (*)(void))sub_1B213FBC4, (uint64_t)&type metadata for ParticlePivot.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v13 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213FBC4();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v14;
  v11 = sub_1B2229868();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v10 = v11;
  return result;
}

uint64_t sub_1B213CB44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF64228, (uint64_t (*)(void))sub_1B213FBC4, (uint64_t)&type metadata for ParticlePivot.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213FBC4();
  sub_1B222A180();
  sub_1B22299AC();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1B213CC44(_DWORD *a1@<X8>)
{
  *a1 = -2139062144;
}

uint64_t sub_1B213CC50()
{
  return 0x4C65737265766E69;
}

uint64_t sub_1B213CC74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x4C65737265766E69 && a2 == 0xEF656D6974656669)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B213CD2C()
{
  sub_1B213D738();
  return sub_1B222A1D4();
}

uint64_t sub_1B213CD54()
{
  sub_1B213D738();
  return sub_1B222A1E0();
}

uint64_t sub_1B213CD7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF63FF8, (uint64_t (*)(void))sub_1B213D738, (uint64_t)&type metadata for ParticleLifetime.CodingKeys, a2);
}

uint64_t sub_1B213CDA8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF64008, (uint64_t (*)(void))sub_1B213D738, (uint64_t)&type metadata for ParticleLifetime.CodingKeys);
}

uint64_t sub_1B213CDD4(char *a1, unsigned __int8 *a2)
{
  return sub_1B1F95FA4(*a1, *a2);
}

uint64_t sub_1B213CDE0()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B213CE80()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B213CEFC()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B213CF98@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B213D90C();
  *a1 = result;
  return result;
}

void sub_1B213CFC4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xEC000000656D6954;
  v4 = 0x7473727562;
  if (v2 != 1)
    v4 = 0x74696D655FLL;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x7265764F65746172;
  if (!v5)
    v3 = 0xE500000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_1B213D024()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7473727562;
  if (*v0 != 1)
    v1 = 0x74696D655FLL;
  if (*v0)
    return v1;
  else
    return 0x7265764F65746172;
}

uint64_t sub_1B213D080@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B213D90C();
  *a1 = result;
  return result;
}

uint64_t sub_1B213D0A4()
{
  sub_1B213F104();
  return sub_1B222A1D4();
}

uint64_t sub_1B213D0CC()
{
  sub_1B213F104();
  return sub_1B222A1E0();
}

double sub_1B213D0F4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];

  sub_1B213E460(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B213D12C(_QWORD *a1)
{
  return sub_1B213DA48(a1);
}

void sub_1B213D148(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = nullsub_16;
  *(_QWORD *)(a1 + 24) = 0;
}

uint64_t sub_1B213D160(_QWORD *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  __n128 v12;
  __n128 v13;
  char v14;

  v12 = a2;
  sub_1B19F8E54(0, &qword_1EEF64240, (uint64_t (*)(void))sub_1B213FC08, (uint64_t)&type metadata for ParticleSphereAttractor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213FC08();
  sub_1B222A180();
  v13 = v12;
  v14 = 0;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v10, MEMORY[0x1E0DEDDB8]);
  sub_1B2229958();
  if (!v2)
  {
    v13.n128_u8[0] = 1;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B213D2F8(char *a1, char *a2)
{
  return sub_1B1F96E4C(*a1, *a2);
}

uint64_t sub_1B213D304()
{
  _BYTE *v0;

  if (*v0)
    return 0x7469736E65746E69;
  else
    return 0x657265687073;
}

uint64_t sub_1B213D340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B213D954(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B213D364()
{
  sub_1B213FC08();
  return sub_1B222A1D4();
}

uint64_t sub_1B213D38C()
{
  sub_1B213FC08();
  return sub_1B222A1E0();
}

uint64_t sub_1B213D3B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  int v6;

  result = sub_1B213E61C(a1);
  if (!v2)
  {
    *(_OWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B213D3E0(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B213D160(a1, *v1);
}

double sub_1B213D3FC@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_1B2244E20;
  *(_DWORD *)(a1 + 16) = 1065353216;
  return result;
}

uint64_t sub_1B213D414(_QWORD *a1, unint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  __n128 v15;
  __n128 v16;
  __n128 v17;
  char v18;

  v15 = a4;
  v16 = a3;
  sub_1B19F8E54(0, &qword_1EEF64258, (uint64_t (*)(void))sub_1B213FC4C, (uint64_t)&type metadata for ParticleSDFAttractor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v15 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213FC4C();
  sub_1B222A180();
  v17.n128_u64[0] = a2;
  v18 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v4)
  {
    v17 = v16;
    v18 = 1;
    v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v13, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
    v17 = v15;
    v18 = 2;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B213D5FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F94EA0(*a1, *a2);
}

uint64_t sub_1B213D608()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7265746E6563;
  if (*v0 != 1)
    v1 = 0x657A6953666C6168;
  if (*v0)
    return v1;
  else
    return 0x61746144666473;
}

uint64_t sub_1B213D660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B213D7C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B213D684()
{
  sub_1B213FC4C();
  return sub_1B222A1D4();
}

uint64_t sub_1B213D6AC()
{
  sub_1B213FC4C();
  return sub_1B222A1E0();
}

uint64_t sub_1B213D6D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  result = sub_1B213E234(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = v6;
  }
  return result;
}

uint64_t sub_1B213D704(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B213D414(a1, v1->n128_u64[0], v1[1], v1[2]);
}

__n128 sub_1B213D720@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  a1->n128_u64[0] = 0xFFFFFFFFLL;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  __asm { FMOV            V0.4S, #1.0 }
  a1[2] = result;
  return result;
}

unint64_t sub_1B213D738()
{
  unint64_t result;

  result = qword_1EEF64000;
  if (!qword_1EEF64000)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2D10, &type metadata for ParticleLifetime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64000);
  }
  return result;
}

unint64_t sub_1B213D77C()
{
  unint64_t result;

  result = qword_1EEF64018;
  if (!qword_1EEF64018)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2CC0, &type metadata for ParticleTextureFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64018);
  }
  return result;
}

uint64_t sub_1B213D7C0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x61746144666473 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265746E6563 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657A6953666C6168 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B213D90C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B213D954(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x657265687073 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B213DA48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  sub_1B19F8E54(0, &qword_1EEF640B0, (uint64_t (*)(void))sub_1B213F104, (uint64_t)&type metadata for ParticleCustomEmitter.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F104();
  sub_1B222A180();
  v13 = 0;
  sub_1B2229934();
  if (!v1)
  {
    v12 = 1;
    sub_1B2229934();
    v11 = 2;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B213DBB0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF64158, (uint64_t (*)(void))sub_1B213F324, (uint64_t)&type metadata for LinearFactor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F324();
  sub_1B222A150();
  if (!v1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v9, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B213DD50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF64170, (uint64_t (*)(void))sub_1B213F368, (uint64_t)&type metadata for AngularFactor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F368();
  sub_1B222A150();
  if (!v1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v9, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B213DEF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF64188, (uint64_t (*)(void))sub_1B213F3AC, (uint64_t)&type metadata for ParticleTarget.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F3AC();
  sub_1B222A150();
  if (!v1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v9, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

double sub_1B213E090(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD v12[2];

  sub_1B19F8E54(0, &qword_1EEF64088, (uint64_t (*)(void))sub_1B213F0C0, (uint64_t)&type metadata for ParticleRibbonLength.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F0C0();
  sub_1B222A150();
  if (!v1)
  {
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v10, MEMORY[0x1E0DEDD40]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v2 = *(double *)&v12[1];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B213E234(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  _OWORD v12[2];
  __int128 v13;
  char v14;

  sub_1B19F8E54(0, &qword_1EEF64248, (uint64_t (*)(void))sub_1B213FC4C, (uint64_t)&type metadata for ParticleSDFAttractor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v12 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B213FC4C();
  sub_1B222A150();
  if (!v1)
  {
    v14 = 0;
    sub_1B1A08878();
    sub_1B2229814();
    v9 = v13;
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v14 = 1;
    sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v10, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    v12[1] = v13;
    v14 = 2;
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v12[0] = v13;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1B213E460@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v18 = a2;
  sub_1B19F8E54(0, &qword_1EEF640A0, (uint64_t (*)(void))sub_1B213F104, (uint64_t)&type metadata for ParticleCustomEmitter.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v18 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F104();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v18;
  v21 = 0;
  sub_1B22297F0();
  v12 = v11;
  v20 = 1;
  sub_1B22297F0();
  v14 = v13;
  v19 = 2;
  sub_1B22297F0();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)v10 = v12;
  *(_DWORD *)(v10 + 4) = v14;
  *(_DWORD *)(v10 + 8) = v16;
  *(_QWORD *)(v10 + 16) = nullsub_16;
  *(_QWORD *)(v10 + 24) = 0;
  return result;
}

uint64_t sub_1B213E61C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  __int128 v11;
  char v12;
  __int128 v13;

  sub_1B19F8E54(0, &qword_1EEF64230, (uint64_t (*)(void))sub_1B213FC08, (uint64_t)&type metadata for ParticleSphereAttractor.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213FC08();
  sub_1B222A150();
  if (!v1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v12 = 0;
    sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    v11 = v13;
    LOBYTE(v13) = 1;
    sub_1B22297F0();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B213E7F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  _OWORD v14[2];
  __int128 v15;
  uint64_t v16;

  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BAAF0, (uint64_t (*)(void))sub_1B1E88F28, (uint64_t)&type metadata for ValueCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v14 - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067BAC(2000, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(&v15, v16);
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDC8]);
      sub_1B2229D6C();
      v14[0] = v14[1];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v15);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1E88F28();
    sub_1B222A150();
    if (!v1)
    {
      v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v12, MEMORY[0x1E0DEDDC8]);
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v14[0] = v15;
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B213EA94()
{
  unint64_t result;

  result = qword_1EEF64030;
  if (!qword_1EEF64030)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2C70, &type metadata for ParticleAge.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64030);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleAge.CodingKeys()
{
  return &type metadata for ParticleAge.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleTextureFrame.CodingKeys()
{
  return &type metadata for ParticleTextureFrame.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleLifetime.CodingKeys()
{
  return &type metadata for ParticleLifetime.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleGPU()
{
  return &type metadata for ParticleGPU;
}

ValueMetadata *type metadata accessor for ParticleRibbonLength()
{
  return &type metadata for ParticleRibbonLength;
}

uint64_t destroy for ParticleCustomEmitter()
{
  return swift_release();
}

uint64_t initializeWithCopy for ParticleCustomEmitter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ParticleCustomEmitter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ParticleCustomEmitter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleCustomEmitter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleCustomEmitter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleCustomEmitter()
{
  return &type metadata for ParticleCustomEmitter;
}

ValueMetadata *type metadata accessor for ParticleParentID()
{
  return &type metadata for ParticleParentID;
}

ValueMetadata *type metadata accessor for Particle()
{
  return &type metadata for Particle;
}

ValueMetadata *type metadata accessor for ParticleRoughness()
{
  return &type metadata for ParticleRoughness;
}

ValueMetadata *type metadata accessor for ParticleMetalness()
{
  return &type metadata for ParticleMetalness;
}

ValueMetadata *type metadata accessor for ParticleEmission()
{
  return &type metadata for ParticleEmission;
}

ValueMetadata *type metadata accessor for ParticleAngle()
{
  return &type metadata for ParticleAngle;
}

ValueMetadata *type metadata accessor for ParticleAngleVelocity()
{
  return &type metadata for ParticleAngleVelocity;
}

ValueMetadata *type metadata accessor for ParticleID()
{
  return &type metadata for ParticleID;
}

ValueMetadata *type metadata accessor for Mass()
{
  return &type metadata for Mass;
}

ValueMetadata *type metadata accessor for LinearFactor()
{
  return &type metadata for LinearFactor;
}

ValueMetadata *type metadata accessor for AngularFactor()
{
  return &type metadata for AngularFactor;
}

ValueMetadata *type metadata accessor for ParticleTarget()
{
  return &type metadata for ParticleTarget;
}

ValueMetadata *type metadata accessor for UserData1()
{
  return &type metadata for UserData1;
}

ValueMetadata *type metadata accessor for UserData2()
{
  return &type metadata for UserData2;
}

ValueMetadata *type metadata accessor for UserData3()
{
  return &type metadata for UserData3;
}

ValueMetadata *type metadata accessor for UserData4()
{
  return &type metadata for UserData4;
}

ValueMetadata *type metadata accessor for NeighborCount()
{
  return &type metadata for NeighborCount;
}

ValueMetadata *type metadata accessor for ParticlePivot()
{
  return &type metadata for ParticlePivot;
}

__n128 initializeWithCopy for ParticleSphereAttractor(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleSphereAttractor(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ParticleSphereAttractor(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSphereAttractor()
{
  return &type metadata for ParticleSphereAttractor;
}

ValueMetadata *type metadata accessor for ParticleSDFAttractor()
{
  return &type metadata for ParticleSDFAttractor;
}

unint64_t sub_1B213EE3C()
{
  unint64_t result;

  result = qword_1EEF64040;
  if (!qword_1EEF64040)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2AA8, &type metadata for ParticleLifetime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64040);
  }
  return result;
}

unint64_t sub_1B213EE84()
{
  unint64_t result;

  result = qword_1EEF64048;
  if (!qword_1EEF64048)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2B60, &type metadata for ParticleTextureFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64048);
  }
  return result;
}

unint64_t sub_1B213EECC()
{
  unint64_t result;

  result = qword_1EEF64050;
  if (!qword_1EEF64050)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2C18, &type metadata for ParticleAge.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64050);
  }
  return result;
}

unint64_t sub_1B213EF14()
{
  unint64_t result;

  result = qword_1EEF64058;
  if (!qword_1EEF64058)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2B88, &type metadata for ParticleAge.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64058);
  }
  return result;
}

unint64_t sub_1B213EF5C()
{
  unint64_t result;

  result = qword_1EEF64060;
  if (!qword_1EEF64060)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2BB0, &type metadata for ParticleAge.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64060);
  }
  return result;
}

unint64_t sub_1B213EFA4()
{
  unint64_t result;

  result = qword_1EEF64068;
  if (!qword_1EEF64068)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2AD0, &type metadata for ParticleTextureFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64068);
  }
  return result;
}

unint64_t sub_1B213EFEC()
{
  unint64_t result;

  result = qword_1EEF64070;
  if (!qword_1EEF64070)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2AF8, &type metadata for ParticleTextureFrame.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64070);
  }
  return result;
}

unint64_t sub_1B213F034()
{
  unint64_t result;

  result = qword_1EEF64078;
  if (!qword_1EEF64078)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2A18, &type metadata for ParticleLifetime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64078);
  }
  return result;
}

unint64_t sub_1B213F07C()
{
  unint64_t result;

  result = qword_1EEF64080;
  if (!qword_1EEF64080)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2A40, &type metadata for ParticleLifetime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64080);
  }
  return result;
}

unint64_t sub_1B213F0C0()
{
  unint64_t result;

  result = qword_1EEF64090;
  if (!qword_1EEF64090)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C43F0, &type metadata for ParticleRibbonLength.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64090);
  }
  return result;
}

unint64_t sub_1B213F104()
{
  unint64_t result;

  result = qword_1EEF640A8;
  if (!qword_1EEF640A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C43A0, &type metadata for ParticleCustomEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF640A8);
  }
  return result;
}

unint64_t sub_1B213F148()
{
  unint64_t result;

  result = qword_1EEF640C0;
  if (!qword_1EEF640C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4350, &type metadata for Particle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF640C0);
  }
  return result;
}

unint64_t sub_1B213F18C()
{
  unint64_t result;

  result = qword_1EEF640D0;
  if (!qword_1EEF640D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4300, &type metadata for ParticleRoughness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF640D0);
  }
  return result;
}

unint64_t sub_1B213F1D0()
{
  unint64_t result;

  result = qword_1EEF640E8;
  if (!qword_1EEF640E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C42B0, &type metadata for ParticleMetalness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF640E8);
  }
  return result;
}

unint64_t sub_1B213F214()
{
  unint64_t result;

  result = qword_1EEF64100;
  if (!qword_1EEF64100)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4260, &type metadata for ParticleEmission.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64100);
  }
  return result;
}

unint64_t sub_1B213F258()
{
  unint64_t result;

  result = qword_1EEF64118;
  if (!qword_1EEF64118)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4210, &type metadata for ParticleAngle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64118);
  }
  return result;
}

unint64_t sub_1B213F29C()
{
  unint64_t result;

  result = qword_1EEF64130;
  if (!qword_1EEF64130)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C41C0, &type metadata for ParticleAngleVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64130);
  }
  return result;
}

unint64_t sub_1B213F2E0()
{
  unint64_t result;

  result = qword_1EEF64148;
  if (!qword_1EEF64148)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4170, &type metadata for Mass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64148);
  }
  return result;
}

unint64_t sub_1B213F324()
{
  unint64_t result;

  result = qword_1EEF64160;
  if (!qword_1EEF64160)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4120, &type metadata for LinearFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64160);
  }
  return result;
}

unint64_t sub_1B213F368()
{
  unint64_t result;

  result = qword_1EEF64178;
  if (!qword_1EEF64178)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C40D0, &type metadata for AngularFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64178);
  }
  return result;
}

unint64_t sub_1B213F3AC()
{
  unint64_t result;

  result = qword_1EEF64190;
  if (!qword_1EEF64190)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4080, &type metadata for ParticleTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64190);
  }
  return result;
}

uint64_t sub_1B213F3F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF641A0, (uint64_t (*)(void))sub_1B213F590, (uint64_t)&type metadata for UserData1.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F590();
  sub_1B222A150();
  if (!v1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B213F590()
{
  unint64_t result;

  result = qword_1EEF641A8;
  if (!qword_1EEF641A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4030, &type metadata for UserData1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF641A8);
  }
  return result;
}

uint64_t sub_1B213F5D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF641B8, (uint64_t (*)(void))sub_1B213F774, (uint64_t)&type metadata for UserData2.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F774();
  sub_1B222A150();
  if (!v1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B213F774()
{
  unint64_t result;

  result = qword_1EEF641C0;
  if (!qword_1EEF641C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3FE0, &type metadata for UserData2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF641C0);
  }
  return result;
}

uint64_t sub_1B213F7B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF641D0, (uint64_t (*)(void))sub_1B213F958, (uint64_t)&type metadata for UserData3.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213F958();
  sub_1B222A150();
  if (!v1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B213F958()
{
  unint64_t result;

  result = qword_1EEF641D8;
  if (!qword_1EEF641D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3F90, &type metadata for UserData3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF641D8);
  }
  return result;
}

uint64_t sub_1B213F99C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  _OWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF641E8, (uint64_t (*)(void))sub_1B213FB3C, (uint64_t)&type metadata for UserData4.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B213FB3C();
  sub_1B222A150();
  if (!v1)
  {
    v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v9, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B213FB3C()
{
  unint64_t result;

  result = qword_1EEF641F0;
  if (!qword_1EEF641F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3F40, &type metadata for UserData4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF641F0);
  }
  return result;
}

unint64_t sub_1B213FB80()
{
  unint64_t result;

  result = qword_1EEF64208;
  if (!qword_1EEF64208)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3EF0, &type metadata for NeighborCount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64208);
  }
  return result;
}

unint64_t sub_1B213FBC4()
{
  unint64_t result;

  result = qword_1EEF64220;
  if (!qword_1EEF64220)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3EA0, &type metadata for ParticlePivot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64220);
  }
  return result;
}

unint64_t sub_1B213FC08()
{
  unint64_t result;

  result = qword_1EEF64238;
  if (!qword_1EEF64238)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3E50, &type metadata for ParticleSphereAttractor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64238);
  }
  return result;
}

unint64_t sub_1B213FC4C()
{
  unint64_t result;

  result = qword_1EEF64250;
  if (!qword_1EEF64250)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3E00, &type metadata for ParticleSDFAttractor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64250);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSDFAttractor.CodingKeys()
{
  return &type metadata for ParticleSDFAttractor.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ParticleSphereAttractor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B213FCF0 + 4 * byte_1B22C1DF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B213FD24 + 4 * asc_1B22C1DF0[v4]))();
}

uint64_t sub_1B213FD24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B213FD2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B213FD34);
  return result;
}

uint64_t sub_1B213FD40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B213FD48);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B213FD4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B213FD54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSphereAttractor.CodingKeys()
{
  return &type metadata for ParticleSphereAttractor.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticlePivot.CodingKeys()
{
  return &type metadata for ParticlePivot.CodingKeys;
}

ValueMetadata *type metadata accessor for NeighborCount.CodingKeys()
{
  return &type metadata for NeighborCount.CodingKeys;
}

ValueMetadata *type metadata accessor for UserData4.CodingKeys()
{
  return &type metadata for UserData4.CodingKeys;
}

ValueMetadata *type metadata accessor for UserData3.CodingKeys()
{
  return &type metadata for UserData3.CodingKeys;
}

ValueMetadata *type metadata accessor for UserData2.CodingKeys()
{
  return &type metadata for UserData2.CodingKeys;
}

ValueMetadata *type metadata accessor for UserData1.CodingKeys()
{
  return &type metadata for UserData1.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleTarget.CodingKeys()
{
  return &type metadata for ParticleTarget.CodingKeys;
}

ValueMetadata *type metadata accessor for AngularFactor.CodingKeys()
{
  return &type metadata for AngularFactor.CodingKeys;
}

ValueMetadata *type metadata accessor for LinearFactor.CodingKeys()
{
  return &type metadata for LinearFactor.CodingKeys;
}

ValueMetadata *type metadata accessor for Mass.CodingKeys()
{
  return &type metadata for Mass.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleAngleVelocity.CodingKeys()
{
  return &type metadata for ParticleAngleVelocity.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleAngle.CodingKeys()
{
  return &type metadata for ParticleAngle.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleEmission.CodingKeys()
{
  return &type metadata for ParticleEmission.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleMetalness.CodingKeys()
{
  return &type metadata for ParticleMetalness.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleRoughness.CodingKeys()
{
  return &type metadata for ParticleRoughness.CodingKeys;
}

ValueMetadata *type metadata accessor for Particle.CodingKeys()
{
  return &type metadata for Particle.CodingKeys;
}

uint64_t _s3VFX20ParticleSDFAttractorV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B213FEBC + 4 * byte_1B22C1DFF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B213FEF0 + 4 * byte_1B22C1DFA[v4]))();
}

uint64_t sub_1B213FEF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B213FEF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B213FF00);
  return result;
}

uint64_t sub_1B213FF0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B213FF14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B213FF18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B213FF20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleCustomEmitter.CodingKeys()
{
  return &type metadata for ParticleCustomEmitter.CodingKeys;
}

uint64_t _s3VFX11ParticleAgeV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B213FF7C + 4 * byte_1B22C1E04[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B213FF9C + 4 * byte_1B22C1E09[v4]))();
}

_BYTE *sub_1B213FF7C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B213FF9C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B213FFA4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B213FFAC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B213FFB4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B213FFBC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ParticleRibbonLength.CodingKeys()
{
  return &type metadata for ParticleRibbonLength.CodingKeys;
}

unint64_t sub_1B213FFDC()
{
  unint64_t result;

  result = qword_1EEF64260;
  if (!qword_1EEF64260)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3060, &type metadata for ParticleRibbonLength.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64260);
  }
  return result;
}

unint64_t sub_1B2140024()
{
  unint64_t result;

  result = qword_1EEF64268;
  if (!qword_1EEF64268)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3150, &type metadata for ParticleCustomEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64268);
  }
  return result;
}

unint64_t sub_1B214006C()
{
  unint64_t result;

  result = qword_1EEF64270;
  if (!qword_1EEF64270)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3258, &type metadata for ParticleRoughness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64270);
  }
  return result;
}

unint64_t sub_1B21400B4()
{
  unint64_t result;

  result = qword_1EEF64278;
  if (!qword_1EEF64278)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3310, &type metadata for ParticleMetalness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64278);
  }
  return result;
}

unint64_t sub_1B21400FC()
{
  unint64_t result;

  result = qword_1EEF64280;
  if (!qword_1EEF64280)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C33C8, &type metadata for ParticleEmission.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64280);
  }
  return result;
}

unint64_t sub_1B2140144()
{
  unint64_t result;

  result = qword_1EEF64288;
  if (!qword_1EEF64288)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3480, &type metadata for ParticleAngle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64288);
  }
  return result;
}

unint64_t sub_1B214018C()
{
  unint64_t result;

  result = qword_1EEF64290;
  if (!qword_1EEF64290)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3538, &type metadata for ParticleAngleVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64290);
  }
  return result;
}

unint64_t sub_1B21401D4()
{
  unint64_t result;

  result = qword_1EEF64298;
  if (!qword_1EEF64298)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C35F0, &type metadata for Mass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64298);
  }
  return result;
}

unint64_t sub_1B214021C()
{
  unint64_t result;

  result = qword_1EEF642A0;
  if (!qword_1EEF642A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C36A8, &type metadata for LinearFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642A0);
  }
  return result;
}

unint64_t sub_1B2140264()
{
  unint64_t result;

  result = qword_1EEF642A8;
  if (!qword_1EEF642A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3760, &type metadata for AngularFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642A8);
  }
  return result;
}

unint64_t sub_1B21402AC()
{
  unint64_t result;

  result = qword_1EEF642B0;
  if (!qword_1EEF642B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3818, &type metadata for ParticleTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642B0);
  }
  return result;
}

unint64_t sub_1B21402F4()
{
  unint64_t result;

  result = qword_1EEF642B8;
  if (!qword_1EEF642B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C38D0, &type metadata for UserData1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642B8);
  }
  return result;
}

unint64_t sub_1B214033C()
{
  unint64_t result;

  result = qword_1EEF642C0;
  if (!qword_1EEF642C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3988, &type metadata for UserData2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642C0);
  }
  return result;
}

unint64_t sub_1B2140384()
{
  unint64_t result;

  result = qword_1EEF642C8;
  if (!qword_1EEF642C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3A40, &type metadata for UserData3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642C8);
  }
  return result;
}

unint64_t sub_1B21403CC()
{
  unint64_t result;

  result = qword_1EEF642D0;
  if (!qword_1EEF642D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3AF8, &type metadata for UserData4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642D0);
  }
  return result;
}

unint64_t sub_1B2140414()
{
  unint64_t result;

  result = qword_1EEF642D8;
  if (!qword_1EEF642D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3BB0, &type metadata for NeighborCount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642D8);
  }
  return result;
}

unint64_t sub_1B214045C()
{
  unint64_t result;

  result = qword_1EEF642E0;
  if (!qword_1EEF642E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3C68, &type metadata for ParticlePivot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642E0);
  }
  return result;
}

unint64_t sub_1B21404A4()
{
  unint64_t result;

  result = qword_1EEF642E8;
  if (!qword_1EEF642E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3D20, &type metadata for ParticleSphereAttractor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642E8);
  }
  return result;
}

unint64_t sub_1B21404EC()
{
  unint64_t result;

  result = qword_1EEF642F0;
  if (!qword_1EEF642F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3DD8, &type metadata for ParticleSDFAttractor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642F0);
  }
  return result;
}

unint64_t sub_1B2140534()
{
  unint64_t result;

  result = qword_1EEF642F8;
  if (!qword_1EEF642F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3D48, &type metadata for ParticleSDFAttractor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF642F8);
  }
  return result;
}

unint64_t sub_1B214057C()
{
  unint64_t result;

  result = qword_1EEF64300;
  if (!qword_1EEF64300)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3D70, &type metadata for ParticleSDFAttractor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64300);
  }
  return result;
}

unint64_t sub_1B21405C4()
{
  unint64_t result;

  result = qword_1EEF64308;
  if (!qword_1EEF64308)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3C90, &type metadata for ParticleSphereAttractor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64308);
  }
  return result;
}

unint64_t sub_1B214060C()
{
  unint64_t result;

  result = qword_1EEF64310;
  if (!qword_1EEF64310)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3CB8, &type metadata for ParticleSphereAttractor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64310);
  }
  return result;
}

unint64_t sub_1B2140654()
{
  unint64_t result;

  result = qword_1EEF64318;
  if (!qword_1EEF64318)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3BD8, &type metadata for ParticlePivot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64318);
  }
  return result;
}

unint64_t sub_1B214069C()
{
  unint64_t result;

  result = qword_1EEF64320;
  if (!qword_1EEF64320)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3C00, &type metadata for ParticlePivot.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64320);
  }
  return result;
}

unint64_t sub_1B21406E4()
{
  unint64_t result;

  result = qword_1EEF64328;
  if (!qword_1EEF64328)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3B20, &type metadata for NeighborCount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64328);
  }
  return result;
}

unint64_t sub_1B214072C()
{
  unint64_t result;

  result = qword_1EEF64330;
  if (!qword_1EEF64330)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3B48, &type metadata for NeighborCount.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64330);
  }
  return result;
}

unint64_t sub_1B2140774()
{
  unint64_t result;

  result = qword_1EEF64338;
  if (!qword_1EEF64338)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3A68, &type metadata for UserData4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64338);
  }
  return result;
}

unint64_t sub_1B21407BC()
{
  unint64_t result;

  result = qword_1EEF64340;
  if (!qword_1EEF64340)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3A90, &type metadata for UserData4.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64340);
  }
  return result;
}

unint64_t sub_1B2140804()
{
  unint64_t result;

  result = qword_1EEF64348;
  if (!qword_1EEF64348)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C39B0, &type metadata for UserData3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64348);
  }
  return result;
}

unint64_t sub_1B214084C()
{
  unint64_t result;

  result = qword_1EEF64350;
  if (!qword_1EEF64350)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C39D8, &type metadata for UserData3.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64350);
  }
  return result;
}

unint64_t sub_1B2140894()
{
  unint64_t result;

  result = qword_1EEF64358;
  if (!qword_1EEF64358)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C38F8, &type metadata for UserData2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64358);
  }
  return result;
}

unint64_t sub_1B21408DC()
{
  unint64_t result;

  result = qword_1EEF64360;
  if (!qword_1EEF64360)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3920, &type metadata for UserData2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64360);
  }
  return result;
}

unint64_t sub_1B2140924()
{
  unint64_t result;

  result = qword_1EEF64368;
  if (!qword_1EEF64368)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3840, &type metadata for UserData1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64368);
  }
  return result;
}

unint64_t sub_1B214096C()
{
  unint64_t result;

  result = qword_1EEF64370;
  if (!qword_1EEF64370)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3868, &type metadata for UserData1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64370);
  }
  return result;
}

unint64_t sub_1B21409B4()
{
  unint64_t result;

  result = qword_1EEF64378;
  if (!qword_1EEF64378)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3788, &type metadata for ParticleTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64378);
  }
  return result;
}

unint64_t sub_1B21409FC()
{
  unint64_t result;

  result = qword_1EEF64380;
  if (!qword_1EEF64380)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C37B0, &type metadata for ParticleTarget.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64380);
  }
  return result;
}

unint64_t sub_1B2140A44()
{
  unint64_t result;

  result = qword_1EEF64388;
  if (!qword_1EEF64388)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C36D0, &type metadata for AngularFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64388);
  }
  return result;
}

unint64_t sub_1B2140A8C()
{
  unint64_t result;

  result = qword_1EEF64390;
  if (!qword_1EEF64390)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C36F8, &type metadata for AngularFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64390);
  }
  return result;
}

unint64_t sub_1B2140AD4()
{
  unint64_t result;

  result = qword_1EEF64398;
  if (!qword_1EEF64398)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3618, &type metadata for LinearFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64398);
  }
  return result;
}

unint64_t sub_1B2140B1C()
{
  unint64_t result;

  result = qword_1EEF643A0;
  if (!qword_1EEF643A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3640, &type metadata for LinearFactor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643A0);
  }
  return result;
}

unint64_t sub_1B2140B64()
{
  unint64_t result;

  result = qword_1EEF643A8;
  if (!qword_1EEF643A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3560, &type metadata for Mass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643A8);
  }
  return result;
}

unint64_t sub_1B2140BAC()
{
  unint64_t result;

  result = qword_1EEF643B0;
  if (!qword_1EEF643B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3588, &type metadata for Mass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643B0);
  }
  return result;
}

unint64_t sub_1B2140BF4()
{
  unint64_t result;

  result = qword_1EEF643B8;
  if (!qword_1EEF643B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C34A8, &type metadata for ParticleAngleVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643B8);
  }
  return result;
}

unint64_t sub_1B2140C3C()
{
  unint64_t result;

  result = qword_1EEF643C0;
  if (!qword_1EEF643C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C34D0, &type metadata for ParticleAngleVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643C0);
  }
  return result;
}

unint64_t sub_1B2140C84()
{
  unint64_t result;

  result = qword_1EEF643C8;
  if (!qword_1EEF643C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C33F0, &type metadata for ParticleAngle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643C8);
  }
  return result;
}

unint64_t sub_1B2140CCC()
{
  unint64_t result;

  result = qword_1EEF643D0;
  if (!qword_1EEF643D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3418, &type metadata for ParticleAngle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643D0);
  }
  return result;
}

unint64_t sub_1B2140D14()
{
  unint64_t result;

  result = qword_1EEF643D8;
  if (!qword_1EEF643D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3338, &type metadata for ParticleEmission.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643D8);
  }
  return result;
}

unint64_t sub_1B2140D5C()
{
  unint64_t result;

  result = qword_1EEF643E0;
  if (!qword_1EEF643E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3360, &type metadata for ParticleEmission.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643E0);
  }
  return result;
}

unint64_t sub_1B2140DA4()
{
  unint64_t result;

  result = qword_1EEF643E8;
  if (!qword_1EEF643E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3280, &type metadata for ParticleMetalness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643E8);
  }
  return result;
}

unint64_t sub_1B2140DEC()
{
  unint64_t result;

  result = qword_1EEF643F0;
  if (!qword_1EEF643F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C32A8, &type metadata for ParticleMetalness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643F0);
  }
  return result;
}

unint64_t sub_1B2140E34()
{
  unint64_t result;

  result = qword_1EEF643F8;
  if (!qword_1EEF643F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C31C8, &type metadata for ParticleRoughness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF643F8);
  }
  return result;
}

unint64_t sub_1B2140E7C()
{
  unint64_t result;

  result = qword_1EEF64400;
  if (!qword_1EEF64400)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C31F0, &type metadata for ParticleRoughness.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64400);
  }
  return result;
}

unint64_t sub_1B2140EC4()
{
  unint64_t result;

  result = qword_1EEF64408;
  if (!qword_1EEF64408)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3178, &type metadata for Particle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64408);
  }
  return result;
}

unint64_t sub_1B2140F0C()
{
  unint64_t result;

  result = qword_1EEF64410;
  if (!qword_1EEF64410)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C31A0, &type metadata for Particle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64410);
  }
  return result;
}

unint64_t sub_1B2140F54()
{
  unint64_t result;

  result = qword_1EEF64418;
  if (!qword_1EEF64418)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C3088, &type metadata for ParticleCustomEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64418);
  }
  return result;
}

unint64_t sub_1B2140F9C()
{
  unint64_t result;

  result = qword_1EEF64420;
  if (!qword_1EEF64420)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C30B0, &type metadata for ParticleCustomEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64420);
  }
  return result;
}

unint64_t sub_1B2140FE4()
{
  unint64_t result;

  result = qword_1EEF64428;
  if (!qword_1EEF64428)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2FD0, &type metadata for ParticleRibbonLength.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64428);
  }
  return result;
}

unint64_t sub_1B214102C()
{
  unint64_t result;

  result = qword_1EEF64430;
  if (!qword_1EEF64430)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C2FF8, &type metadata for ParticleRibbonLength.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64430);
  }
  return result;
}

float sub_1B2141074(uint64_t a1, __n128 a2, float32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int v17;
  __int32 v18;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v30;
  int32x4_t v31;
  float result;
  __n128 v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;

  v40 = a5;
  v41 = a4;
  v42 = a3;
  v39 = a2;
  v6 = sub_1B2229CD0();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (float32x4_t)v39;
  v10.i32[3] = 0;
  v11 = vmaxnmq_f32(v10, (float32x4_t)0);
  v11.i32[3] = 0;
  v42 = vmulq_f32(vminnmq_f32(v11, (float32x4_t)xmmword_1B2244F70), v42);
  (*(void (**)(char *, _QWORD))(v12 + 104))(v9, *MEMORY[0x1E0DED4D8]);
  sub_1B2141B70((uint64_t)v9, (__n128)v42);
  v13.i32[3] = 0;
  v14 = v40;
  v14.i32[3] = 0;
  v15 = (int8x16_t)vminq_s32(v13, v14);
  v16 = vcgtq_s32(v40, (int32x4_t)v15);
  *(int32x2_t *)v14.i8 = vsub_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8);
  v17 = v15.i32[2];
  v18 = vmovn_s32(v16).i32[1] & 1;
  _Q0 = vmulq_s32((int32x4_t)v15, v41);
  _Q0.i32[0] = vaddq_s32(vaddq_s32(_Q0, vdupq_lane_s32(*(int32x2_t *)_Q0.i8, 1)), vdupq_laneq_s32(_Q0, 2)).u32[0];
  v20 = (int32x4_t)v15.u32[0];
  v21 = (int32x4_t)v15.u32[0];
  v20.i32[1] = v14.i32[1];
  v22 = v20;
  v22.i32[2] = v15.i32[2];
  v23 = vextq_s8(v15, v15, 8uLL).u64[0];
  v21.i32[1] = v15.i32[1];
  *(float32x2_t *)v24.f32 = vcvt_f32_s32(*(int32x2_t *)v15.i8);
  v15.i32[0] = v14.i32[0];
  v25 = vmulq_s32((int32x4_t)v15, v41);
  v26 = vmulq_s32(v22, v41);
  v26.i32[0] = *(_DWORD *)(a1
                         + 4
                         * vaddq_s32(vaddq_s32(v26, vdupq_lane_s32(*(int32x2_t *)v26.i8, 1)), vdupq_laneq_s32(v26, 2)).i32[0]);
  v27.i64[0] = v14.i64[0];
  v27.i64[1] = v23;
  v28 = vmulq_s32(v27, v41);
  v21.i32[2] = v15.i32[2] + v18;
  _Q16 = vmulq_s32(v21, v41);
  _Q16.i32[0] = *(_DWORD *)(a1
                          + 4
                          * vaddq_s32(vaddq_s32(_Q16, vdupq_lane_s32(*(int32x2_t *)_Q16.i8, 1)), vdupq_laneq_s32(_Q16, 2)).i32[0]);
  v15.i32[2] += v18;
  v30 = vmulq_s32((int32x4_t)v15, v41);
  v20.i32[2] = v21.i32[2];
  v31 = vmulq_s32(v20, v41);
  v31.i32[0] = vaddq_s32(vaddq_s32(v31, vdupq_lane_s32(*(int32x2_t *)v31.i8, 1)), vdupq_laneq_s32(v31, 2)).u32[0];
  v14.i32[2] = v21.i32[2];
  _Q1 = vmulq_s32(v14, v41);
  v24.f32[2] = (float)v17;
  _Q6 = vsubq_f32(v42, v24);
  *(float *)v31.i32 = vmlas_n_f32(*(float *)(a1 + 4 * v31.i32[0]), *(float *)(a1+ 4* vaddq_s32(vaddq_s32(_Q1, vdupq_lane_s32(*(int32x2_t *)_Q1.i8, 1)), vdupq_laneq_s32(_Q1, 2)).i32[0])- *(float *)(a1 + 4 * v31.i32[0]), _Q6.f32[0]);
  *(float *)_Q1.i32 = vmlas_n_f32(*(float *)v26.i32, *(float *)(a1+ 4* vaddq_s32(vaddq_s32(v28, vdupq_lane_s32(*(int32x2_t *)v28.i8, 1)), vdupq_laneq_s32(v28, 2)).i32[0])- *(float *)v26.i32, _Q6.f32[0])- vmlas_n_f32(*(float *)(a1 + 4 * _Q0.i32[0]), *(float *)(a1+ 4* vaddq_s32(vaddq_s32(v25, vdupq_lane_s32(*(int32x2_t *)v25.i8, 1)), vdupq_laneq_s32(v25, 2)).i32[0])- *(float *)(a1 + 4 * _Q0.i32[0]), _Q6.f32[0]);
  __asm { FMLA            S0, S1, V6.S[1] }
  *(float *)_Q1.i32 = *(float *)v31.i32
                    - vmlas_n_f32(*(float *)_Q16.i32, *(float *)(a1+ 4* vaddq_s32(vaddq_s32(v30, vdupq_lane_s32(*(int32x2_t *)v30.i8, 1)), vdupq_laneq_s32(v30, 2)).i32[0])- *(float *)_Q16.i32, _Q6.f32[0]);
  __asm { FMLA            S16, S1, V6.S[1] }
  *(float *)_Q1.i32 = *(float *)_Q16.i32 - *(float *)_Q0.i32;
  __asm { FMLA            S0, S1, V6.S[2] }
  return result;
}

double sub_1B21412C8(uint64_t a1, float32x4_t a2, float32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  float v6;
  float v7;
  unsigned int v9;
  unsigned int v10;

  v6 = sub_1B2141074(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B22AB6E0), a3, a4, a5);
  *(float *)&v10 = v6 - sub_1B2141074(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B22AB6F0), a3, a4, a5);
  v7 = sub_1B2141074(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B22AB700), a3, a4, a5);
  *(float *)&v9 = v7 - sub_1B2141074(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B22AB710), a3, a4, a5);
  sub_1B2141074(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B22AB720), a3, a4, a5);
  sub_1B2141074(a1, (__n128)vaddq_f32(a2, (float32x4_t)xmmword_1B22AB730), a3, a4, a5);
  return COERCE_DOUBLE(__PAIR64__(v9, v10));
}

uint64_t sub_1B21413EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v20 = a2;
  v3 = sub_1B2228110();
  v21 = *(_QWORD *)(v3 - 8);
  v22 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v23 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19F8E54(0, &qword_1EEF64460, (uint64_t (*)(void))sub_1B214483C, (uint64_t)&type metadata for SDFFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v20 - v10;
  v12 = type metadata accessor for SDFFileAsset();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B2228050();
  sub_1B19FA070(a1, a1[3]);
  sub_1B214483C();
  v16 = v24;
  sub_1B222A150();
  if (!v16)
  {
    v17 = v21;
    sub_1B1E0F8DC((unint64_t *)&qword_1ED4B7B20, MEMORY[0x1E0CB0038]);
    v18 = v22;
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v15, v23, v18);
    sub_1B2144880((uint64_t)v15, v20);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1A04628((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SDFFileAsset);
}

uint64_t sub_1B21415F0()
{
  return 7107189;
}

uint64_t sub_1B2141600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B2141684()
{
  sub_1B214483C();
  return sub_1B222A1D4();
}

uint64_t sub_1B21416AC()
{
  sub_1B214483C();
  return sub_1B222A1E0();
}

uint64_t sub_1B21416D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B21413EC(a1, a2);
}

uint64_t sub_1B21416E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF64478, (uint64_t (*)(void))sub_1B214483C, (uint64_t)&type metadata for SDFFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B214483C();
  sub_1B222A180();
  sub_1B2228110();
  sub_1B1E0F8DC(&qword_1EEF62990, MEMORY[0x1E0CB0010]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B2141810()
{
  return sub_1B2228050();
}

uint64_t sub_1B214181C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F906F4(*a1, *a2);
}

uint64_t sub_1B2141828()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21418BC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B214192C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21419BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2143D20();
  *a1 = result;
  return result;
}

void sub_1B21419E8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x746867696568;
  if (v2 != 1)
  {
    v5 = 0x6874706564;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6874646977;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B2141A3C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746867696568;
  if (*v0 != 1)
    v1 = 0x6874706564;
  if (*v0)
    return v1;
  else
    return 0x6874646977;
}

uint64_t sub_1B2141A8C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2143D20();
  *a1 = result;
  return result;
}

uint64_t sub_1B2141AB0()
{
  sub_1B2145004();
  return sub_1B222A1D4();
}

uint64_t sub_1B2141AD8()
{
  sub_1B2145004();
  return sub_1B222A1E0();
}

double sub_1B2141B00@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1B21448C4(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B2141B44(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B2143ED8(a1, *v1, v1[1], v1[2]);
}

double sub_1B2141B60@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1B2141B70(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t (*v17)(char *, uint64_t);
  int v18;
  int v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  int v24;
  float v25;
  float v26;
  unsigned int v27;
  float v28;
  int v29;
  float v30;
  __n128 v31;
  uint64_t result;
  __n128 v33;
  _QWORD v34[2];

  v33 = a2;
  v3 = sub_1B2229CD0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v33 - v10;
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v33 - v14;
  LODWORD(v34[0]) = v33.n128_u32[0];
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v16((char *)&v33 - v14, a1, v3);
  v17 = *(uint64_t (**)(char *, uint64_t))(v4 + 88);
  v18 = v17(v15, v3);
  v19 = *MEMORY[0x1E0DED4F0];
  if (v18 == *MEMORY[0x1E0DED4F0])
  {
    v20 = roundf(v33.n128_f32[0]);
  }
  else if (v18 == *MEMORY[0x1E0DED4E8])
  {
    v20 = rintf(v33.n128_f32[0]);
  }
  else if (v18 == *MEMORY[0x1E0DED500])
  {
    v20 = ceilf(v33.n128_f32[0]);
  }
  else if (v18 == *MEMORY[0x1E0DED508])
  {
    v20 = floorf(v33.n128_f32[0]);
  }
  else if (v18 == *MEMORY[0x1E0DED4D8])
  {
    v20 = truncf(v33.n128_f32[0]);
  }
  else if (v18 == *MEMORY[0x1E0DED4E0])
  {
    v20 = ceilf(v33.n128_f32[0]);
    v21 = floorf(v33.n128_f32[0]);
    if (v33.n128_i32[0] < 0)
      v20 = v21;
  }
  else
  {
    sub_1B2228C80();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
    v20 = *(float *)v34;
  }
  sub_1B2143BC0((uint64_t)v34, v20);
  if ((v34[0] & 0x100000000) != 0)
    goto LABEL_49;
  v22 = v34[0];
  v23 = v33.n128_f32[1];
  LODWORD(v34[0]) = v33.n128_u32[1];
  v16(v11, a1, v3);
  v24 = v17(v11, v3);
  if (v24 == v19)
  {
    v25 = roundf(v23);
  }
  else if (v24 == *MEMORY[0x1E0DED4E8])
  {
    v25 = rintf(v23);
  }
  else if (v24 == *MEMORY[0x1E0DED500])
  {
    v25 = ceilf(v23);
  }
  else if (v24 == *MEMORY[0x1E0DED508])
  {
    v25 = floorf(v23);
  }
  else if (v24 == *MEMORY[0x1E0DED4D8])
  {
    v25 = truncf(v23);
  }
  else if (v24 == *MEMORY[0x1E0DED4E0])
  {
    v25 = ceilf(v23);
    v26 = floorf(v23);
    if (v23 < 0.0)
      v25 = v26;
  }
  else
  {
    sub_1B2228C80();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
    v25 = *(float *)v34;
  }
  sub_1B2143BC0((uint64_t)v34, v25);
  if ((v34[0] & 0x100000000) != 0)
    goto LABEL_49;
  v27 = v34[0];
  v28 = v33.n128_f32[2];
  LODWORD(v34[0]) = v33.n128_u32[2];
  v16(v7, a1, v3);
  v29 = v17(v7, v3);
  if (v29 == v19)
  {
    v30 = roundf(v28);
    goto LABEL_47;
  }
  if (v29 == *MEMORY[0x1E0DED4E8])
  {
    v30 = rintf(v28);
    goto LABEL_47;
  }
  if (v29 == *MEMORY[0x1E0DED500])
    goto LABEL_38;
  if (v29 == *MEMORY[0x1E0DED508])
    goto LABEL_40;
  if (v29 == *MEMORY[0x1E0DED4D8])
  {
    v30 = truncf(v28);
  }
  else
  {
    if (v29 == *MEMORY[0x1E0DED4E0])
    {
      if ((LODWORD(v28) & 0x80000000) == 0)
      {
LABEL_38:
        v30 = ceilf(v28);
        goto LABEL_47;
      }
LABEL_40:
      v30 = floorf(v28);
      goto LABEL_47;
    }
    sub_1B2228C80();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v30 = *(float *)v34;
  }
LABEL_47:
  sub_1B2143BC0((uint64_t)v34, v30);
  if ((v34[0] & 0x100000000) == 0)
  {
    v31.n128_u64[0] = __PAIR64__(v27, v22);
    v31.n128_u64[1] = LODWORD(v34[0]);
    v33 = v31;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
LABEL_49:
  v34[0] = 0;
  v34[1] = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B2142034(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B21420FC(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5[12];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v2 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = (uint64_t)result;
    v4 = *(_OWORD *)(v1 + 32);
    v28[0] = *(_OWORD *)(v1 + 16);
    v28[1] = v4;
    v29 = *(_QWORD *)(v1 + 48);
    swift_retain();
    sub_1B1E8FCE4(v3, (uint64_t)v28, 0x200000000, v5);
    sub_1B19ED688((uint64_t)v5, (uint64_t)&v6);
    if (v6)
    {
      v17 = v6;
      v18 = v7;
      v19 = v8;
      v20 = v9;
      v21 = v10;
      v22 = v11;
      v23 = v12;
      v24 = v13;
      v25 = v14;
      v26 = v15;
      v27 = v16;
      swift_retain();
      sub_1B219B810((uint64_t)&v17, v2);
      swift_release_n();
      return sub_1B19ED748(v5);
    }
    else
    {
      return (uint64_t *)swift_release();
    }
  }
  return result;
}

uint64_t sub_1B214220C(unsigned __int16 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int16 v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;

  v8 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v8, v9);
  v36 = xmmword_1B2295C70;
  *(_QWORD *)&v37 = a1;
  *((_QWORD *)&v37 + 1) = a2;
  sub_1B2228794();
  sub_1B19F8E54(0, (unint64_t *)&qword_1EEF64440, (uint64_t (*)(void))sub_1B1FC15D4, MEMORY[0x1E0DEAC20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
  sub_1B1FC1618();
  v10 = sub_1B2228770();
  if (!v11)
    goto LABEL_12;
  if (v10 == 1180649046 && v11 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
      goto LABEL_12;
  }
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  *a3 = v14;
  a3[1] = v15;
  a3[2] = v16;
  v17 = objc_msgSend(*(id *)(a4 + 16), sel_newBufferWithBytes_length_options_, a1 + 5, 4 * (v14 * v15) * (unint64_t)v16, 0);
  if (v17)
  {
    v18 = (uint64_t)v17;
    a3[3] = (uint64_t)v17;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    sub_1B210B50C(7, 55, v14, v15, v16, 0, 1, 1, (uint64_t)&v36, 1, 0, 1);
    v19 = WORD4(v36);
    v20 = BYTE10(v36);
    v27 = v37;
    v26 = v38;
    v25 = v39;
    v21 = v40;
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
    v28 = v36;
    v29 = v19;
    v30 = v20;
    v31 = v27;
    v32 = v26;
    v33 = v25;
    v34 = v21;
    v35 = v41;
    RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v28, v22);
    v23 = sub_1B1F328F4(v22, 0x7478655420464453, 0xEB00000000657275);

    if (v23)
    {
      sub_1B19FB60C(v18, 0, v23, 0);
      swift_unknownObjectRelease();
      a3[4] = (uint64_t)v23;
      return swift_unknownObjectRelease();
    }
  }
LABEL_12:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SDFFileSystem()
{
  return objc_opt_self();
}

const char *sub_1B21425AC()
{
  return "SDFFile";
}

uint64_t sub_1B21425C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v13[1] = a3;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF644A0, (uint64_t (*)(void))sub_1B2144C24, (uint64_t)&type metadata for SDFTextureGenerator.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2144C24();
  sub_1B222A180();
  v17 = a2;
  v16 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v3)
  {
    v15 = 1;
    sub_1B2229934();
    v14 = 2;
    sub_1B2229940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B2142748(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F9453C(*a1, *a2);
}

uint64_t sub_1B2142754()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C6F687365726874;
  if (*v0 != 1)
    v1 = 0x706D61736E776F64;
  if (*v0)
    return v1;
  else
    return 0x656372756F73;
}

uint64_t sub_1B21427B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B2143D68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B21427DC()
{
  sub_1B2144C24();
  return sub_1B222A1D4();
}

uint64_t sub_1B2142804()
{
  sub_1B2144C24();
  return sub_1B222A1E0();
}

void sub_1B214282C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float v6;

  v6 = sub_1B2144A68(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = v4;
    *(float *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v5;
  }
}

uint64_t sub_1B2142860(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B21425C4(a1, *v1, v1[2]);
}

double sub_1B2142880@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 1056964608;
  *(_QWORD *)(a1 + 16) = 2;
  return result;
}

uint64_t sub_1B214289C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t *sub_1B21429FC(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  int v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20[8];
  uint64_t v21[12];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[7];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;

  v2 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = v1;
    v4 = (uint64_t)result;
    v5 = *(_OWORD *)(v1 + 72);
    v43[0] = *(_OWORD *)(v1 + 56);
    v43[1] = v5;
    v44 = *(_QWORD *)(v1 + 88);
    swift_retain();
    sub_1B1E8FCE4(v4, (uint64_t)v43, 0x200000000, v20);
    sub_1B19ED688((uint64_t)v20, (uint64_t)v30);
    if (v30[0])
    {
      if (v32 >= 1)
      {
        v6 = v31;
        if (v31)
        {
          v19 = v4;
          v7 = v30[5];
          swift_retain();
          swift_retain();
          swift_retain();
          v8 = 48 * v6;
          v9 = (uint64_t *)(v7 + 40);
          do
          {
            v14 = *v9;
            v15 = *(os_unfair_lock_s **)(*v9 + 376);
            swift_retain();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            v16 = *(_DWORD *)(v14 + 24);
            swift_retain();
            v35 = 0;
            v33 = 0u;
            v34 = 0u;
            v24 = 0;
            v22 = 0u;
            v23 = 0u;
            v17 = sub_1B1DA4ED8(v16, (uint64_t)&type metadata for TextureGPURepresentationDoNotUpload, (uint64_t)&off_1E63B7CE8, 0, 0, (uint64_t)&v33, (uint64_t)&v22);
            swift_release();
            sub_1B1A04628((uint64_t)&v22, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            sub_1B1A04628((uint64_t)&v33, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            if (sub_1B1A10B20(v17))
            {
              sub_1B1A10BB0(v17);
            }
            else
            {
              v10 = *(_QWORD *)(v14 + 232);
              v11 = *(_QWORD *)(v14 + 240);
              v12 = *(unsigned __int8 *)(v14 + 120);
              v13 = *(unsigned int *)(v14 + 28);
              LOBYTE(v33) = *(_BYTE *)(v14 + 32);
              sub_1B1FD8C68(v10, v11, v17, v12, v13 | ((unint64_t)v33 << 32), 0, 0, 0);
            }
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
            swift_release();
            v9 += 6;
            v8 -= 48;
          }
          while (v8);
          sub_1B19ED748(v20);
          v4 = v19;
        }
      }
      sub_1B19ED748(v20);
    }
    v18 = *(_OWORD *)(v3 + 32);
    v41[0] = *(_OWORD *)(v3 + 16);
    v41[1] = v18;
    v42 = *(_QWORD *)(v3 + 48);
    sub_1B1E8FCE4(v4, (uint64_t)v41, 0x200000000, v21);
    sub_1B19ED688((uint64_t)v21, (uint64_t)&v22);
    if ((_QWORD)v22)
    {
      *(_QWORD *)&v33 = v22;
      DWORD2(v33) = DWORD2(v22);
      BYTE12(v33) = BYTE12(v22);
      *(_QWORD *)&v34 = v23;
      BYTE8(v34) = BYTE8(v23);
      v35 = v24;
      v36 = v25;
      v37 = v26;
      v38 = v27;
      v39 = v28;
      v40 = v29;
      swift_retain();
      swift_retain();
      sub_1B219D568((uint64_t)&v33, v4, v2);
      swift_release();
      swift_release_n();
      return sub_1B19ED748(v21);
    }
    else
    {
      return (uint64_t *)swift_release();
    }
  }
  return result;
}

uint64_t sub_1B2142D00(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  __int16 v16;
  __int16 v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  float v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  __int128 v51;
  int v52;
  id v54;
  __int128 v55;
  int v56;
  void *v59;
  __int16 v60;
  char v61;
  uint64_t v62;
  __int128 v63;
  char v65;
  unint64_t v66;
  char v67;
  int v68;
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89[4];
  __int16 v90;
  __int16 v91;
  char v92;
  char v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  char v97;
  char v98;
  char v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _QWORD v106[7];
  _QWORD v107[10];

  v107[7] = *MEMORY[0x1E0C80C00];
  v69 = 0;
  v68 = *(_DWORD *)(a2 + 8);
  v6 = (uint64_t)objc_msgSend(a3, sel_width, RGTextureDescriptor.init()((uint64_t)v89).n128_f64[0]);
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  v59 = a3;
  v8 = (uint64_t)objc_msgSend(a3, sel_height);
  v9 = v97;
  if (v8 <= 1)
    v10 = 1;
  else
    v10 = v8;
  v67 = v98;
  v65 = v99;
  v11 = v100;
  v12 = v96;
  v63 = v95;
  v13 = v94;
  v14 = v93;
  v15 = v92;
  v16 = v91;
  v17 = v90;
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  v62 = v13;
  LOWORD(v80) = v7;
  v19 = v12;
  v20 = v18;
  WORD1(v80) = v10;
  v60 = v17;
  WORD2(v80) = v17;
  WORD3(v80) = v16;
  BYTE8(v80) = 1;
  v61 = v14;
  BYTE9(v80) = v15;
  BYTE10(v80) = v14;
  *(_QWORD *)&v81 = 115;
  *((_QWORD *)&v81 + 1) = v13;
  v82 = xmmword_1B2294DB0;
  v83 = v63;
  v21 = v19;
  v84 = v19;
  v85 = v9;
  v86 = v67;
  v87 = v65;
  v88 = v11;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v80, v18);
  v22 = *(void **)(a4 + 16);
  v23 = objc_msgSend(v22, sel_newTextureWithDescriptor_, v20);
  if (!v23)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v80 = 0;
    *((_QWORD *)&v80 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = 0xD000000000000023;
    *((_QWORD *)&v80 + 1) = 0x80000001B2331BE0;
    v50 = objc_msgSend(v20, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v51 = v80;
    v52 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v80 = 0;
    swift_retain();
    sub_1B1F1AD70(v52, (uint64_t *)&v80, v51, *((uint64_t *)&v51 + 1));

    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v24 = v23;
  sub_1B1F326B0((uint64_t)v23);
  objc_msgSend(v24, sel_setLabel_, 0);

  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  LOWORD(v80) = v7;
  WORD1(v80) = v10;
  WORD2(v80) = v60;
  WORD3(v80) = v16;
  BYTE8(v80) = 1;
  BYTE9(v80) = v15;
  BYTE10(v80) = v61;
  *(_QWORD *)&v81 = 115;
  *((_QWORD *)&v81 + 1) = v62;
  v82 = xmmword_1B2294DB0;
  v83 = v63;
  v84 = v21;
  v85 = v9;
  v86 = v67;
  v87 = v65;
  v88 = v11;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v80, v25);
  v26 = v25;
  v27 = objc_msgSend(v22, sel_newTextureWithDescriptor_, v25);
  if (!v27)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v80 = 0;
    *((_QWORD *)&v80 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v80 = 0xD000000000000023;
    *((_QWORD *)&v80 + 1) = 0x80000001B2331BE0;
    v54 = objc_msgSend(v25, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v55 = v80;
    v56 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v80 = 0;
    swift_retain();
    sub_1B1F1AD70(v56, (uint64_t *)&v80, v55, *((uint64_t *)&v55 + 1));
    swift_unknownObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v28 = v27;
  sub_1B1F326B0((uint64_t)v27);
  objc_msgSend(v28, sel_setLabel_, 0);

  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v82 = v77;
  v83 = v78;
  v84 = v79;
  v80 = v75;
  v81 = v76;
  v29 = sub_1B222A0B4();
  v107[0] = 0xD000000000000017;
  v107[1] = 0x80000001B234DE50;
  v107[2] = 0;
  v107[3] = 0;
  v107[4] = MEMORY[0x1E0DEE9D8];
  v107[5] = 0;
  v107[6] = v29;
  v30 = sub_1B1B3947C((uint64_t)v107, 0, 0);
  v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (!v30)
    goto LABEL_30;
  swift_getObjectType();
  objc_msgSend(a1, sel_setTexture_atIndex_, v59, 0);
  objc_msgSend(a1, sel_setTexture_atIndex_, v24, 1);
  objc_msgSend(a1, sel_setBytes_length_atIndex_, &v68, 8, 0);
  sub_1B1F40F48(v30, (uint64_t)v24, 0);
  swift_unknownObjectRelease();
  v33 = (float)(uint64_t)objc_msgSend(v59, sel_width);
  v34 = MEMORY[0x1E0DEE9D8];
  v35 = log2f(fmaxf(v33, (float)(uint64_t)objc_msgSend(v59, sel_height)));
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v78 = v73;
  v79 = v74;
  v76 = v71;
  v77 = v72;
  v75 = v70;
  v36 = sub_1B222A0B4();
  v106[0] = 0xD000000000000015;
  v106[1] = 0x80000001B234DE70;
  v106[2] = 0;
  v106[3] = 0;
  v106[4] = v34;
  v106[5] = 0;
  v106[6] = v36;
  v37 = sub_1B1B3947C((uint64_t)v106, 0, 0);
  v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (!v37)
    goto LABEL_30;
  v66 = vcvtms_s32_f32(v35);
  if (v66)
  {
    v40 = 0;
    v41 = v66 - 1;
    do
    {
      v42 = v40 + 1;
      if ((v40 & 1) != 0)
        v43 = v28;
      else
        v43 = v24;
      if ((v40 & 1) != 0)
        v44 = v24;
      else
        v44 = v28;
      objc_msgSend(a1, sel_setTexture_atIndex_, v43, 0);
      objc_msgSend(a1, sel_setTexture_atIndex_, v44, 1);
      v69 = (int)exp2f((float)v41);
      objc_msgSend(a1, sel_setBytes_length_atIndex_, &v68, 8, 0);
      sub_1B1F40F48(v37, (uint64_t)v24, 0);
      --v41;
      v40 = v42;
    }
    while (v41 != -1);
  }
  swift_unknownObjectRelease();
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v72 = v103;
  v73 = v104;
  v74 = v105;
  v70 = v101;
  v71 = v102;
  v45 = sub_1B222A0B4();
  *(_QWORD *)&v101 = 0xD000000000000015;
  *((_QWORD *)&v101 + 1) = 0x80000001B234DE90;
  v102 = 0uLL;
  v103 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v104 = v45;
  v46 = sub_1B1B3947C((uint64_t)&v101, 0, 0);
  v48 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v46)
  {
    if ((v66 & 1) != 0)
      v49 = v28;
    else
      v49 = v24;
    objc_msgSend(a1, sel_setTexture_atIndex_, v49, 0);
    objc_msgSend(a1, sel_setTexture_atIndex_, a5, 1);
    sub_1B1F40F48(v46, a5, 0);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
LABEL_30:
    swift_unknownObjectRelease();
  }
  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for SDFGeneratorSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B21436AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B2228110();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1B21436E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1B2228110();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1B214371C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B2143760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B21437A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B21437E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1B214382C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B2143838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B2228110();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1B2143874()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B2143880(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1B2228110();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SDFFileAsset()
{
  uint64_t result;

  result = qword_1ED4B8430;
  if (!qword_1ED4B8430)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B21438FC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2228110();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SDFTextureGenerator()
{
  return &type metadata for SDFTextureGenerator;
}

uint64_t sub_1B2143974()
{
  uint64_t v0;
  uint64_t inited;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _BYTE v9[40];
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[40];
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v24 = qword_1ED4D09F8;
  v25 = 0;
  v26 = 2;
  v27 = 0;
  v28 = 2;
  v29 = 0;
  swift_retain();
  sub_1B1E3CBF4(1, (uint64_t)v9);
  swift_release();
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireGPURepresentation;
  *(_QWORD *)(inited + 40) = &off_1E63B6458;
  sub_1B1E68C98(&v10);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v9);
  v2 = v11;
  v3 = v12;
  v4 = v14;
  v5 = v13 | 4;
  *(_QWORD *)(v0 + 16) = v10;
  *(_DWORD *)(v0 + 24) = v2;
  *(_BYTE *)(v0 + 28) = v3;
  *(_QWORD *)(v0 + 32) = v5;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v4;
  v18 = qword_1ED4D09F8;
  v19 = 0;
  v20 = 2;
  v21 = 0;
  v22 = 2;
  v23 = 0;
  swift_retain();
  sub_1B1E3CBF4(1, (uint64_t)v15);
  swift_release();
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v6 + 32) = &type metadata for TextureGPURepresentationDoNotUpload;
  *(_QWORD *)(v6 + 40) = &off_1E63B7D18;
  sub_1B1B44110(v16, v6);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v15);
  v7 = v16[1];
  *(_OWORD *)(v0 + 56) = v16[0];
  *(_OWORD *)(v0 + 72) = v7;
  *(_QWORD *)(v0 + 88) = v17;
  return v0;
}

uint64_t sub_1B2143B74()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B2143974();
  return v0;
}

const char *sub_1B2143BA8()
{
  return "SDFGenerator";
}

BOOL sub_1B2143BC0(uint64_t a1, float a2)
{
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  char v15;

  v4 = (LODWORD(a2) >> 23);
  v5 = LODWORD(a2) & 0x7FFFFF;
  v6 = v4 | LODWORD(a2) & 0x7FFFFF;
  if (!v6)
  {
    v15 = 0;
    result = 1;
    goto LABEL_21;
  }
  if (v4 == 255)
    goto LABEL_23;
  v7 = sub_1B2228CA4();
  if (v7 > 31)
    goto LABEL_23;
  v8 = v7;
  v9 = sub_1B2228C8C();
  result = v8 >= v9;
  v11 = v9 + __clz(__rbit32(v5));
  v12 = v8 - v11;
  if (v11 > 31)
  {
    if (v12 < -32 || v12 > 32)
      goto LABEL_10;
  }
  else if (v12 < -32 || v12 > 32)
  {
    goto LABEL_10;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    if ((unint64_t)v12 < 0x20)
    {
      v14 = v5 << v12;
      if (v8 != 31)
        goto LABEL_16;
LABEL_27:
      if (a2 < 0.0 && !v14)
        goto LABEL_29;
      goto LABEL_23;
    }
LABEL_10:
    if (v8 != 31)
    {
      v13 = 0;
      v14 = 0;
      if (v8 < 0)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (a2 < 0.0)
    {
LABEL_29:
      v15 = 0;
      v6 = 0x80000000;
      goto LABEL_21;
    }
LABEL_23:
    v6 = 0;
    result = 0;
    v15 = 1;
    goto LABEL_21;
  }
  if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFE0)
    goto LABEL_10;
  v14 = v5 >> (v11 - v8);
  if (v8 == 31)
    goto LABEL_27;
LABEL_16:
  if (v8 < 0)
  {
    v13 = 0;
    goto LABEL_19;
  }
LABEL_18:
  v13 = 1 << v8;
LABEL_19:
  v15 = 0;
  v6 = v14 | v13;
  if (a2 < 0.0)
    v6 = -v6;
LABEL_21:
  *(_DWORD *)a1 = v6;
  *(_BYTE *)(a1 + 4) = v15;
  return result;
}

uint64_t sub_1B2143D20()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B2143D68(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x706D61736E776F64 && a2 == 0xEC000000676E696CLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B2143ED8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];
  char v14;
  char v15;
  char v16;

  v13[0] = a4;
  v13[1] = a3;
  sub_1B19F8E54(0, &qword_1EEF644F0, (uint64_t (*)(void))sub_1B2145004, (uint64_t)&type metadata for SDFRuntimeData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2145004();
  sub_1B222A180();
  v16 = 0;
  sub_1B2229940();
  if (!v4)
  {
    v15 = 1;
    sub_1B2229940();
    v14 = 2;
    sub_1B2229940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B2144038()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  _BYTE v4[40];
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  type metadata accessor for SDFFileSystem();
  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v7 = qword_1ED4D09F8;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1B6C490((uint64_t)v4);
  swift_release();
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SDFRuntimeData;
  *(_QWORD *)(inited + 40) = &off_1E6380BB0;
  sub_1B1B44110(v5, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v4);
  v2 = v5[1];
  *(_OWORD *)(v0 + 16) = v5[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v6;
  return v0;
}

uint64_t sub_1B2144170(uint64_t a1, uint64_t a2, unsigned int *a3, void **a4, uint64_t a5, uint64_t a6)
{
  uint8x8_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *v40;
  int16x8_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int32 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int32 v70;
  uint64_t v71;

  v71 = a6;
  v12 = *a3;
  v13 = a3[1];
  swift_retain();
  v14 = sub_1B1A101F0(a2);
  swift_release();
  if ((_DWORD)v12 == (_DWORD)v14 && (_DWORD)v13 == HIDWORD(v14))
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v62 = 0x80000001B234DE00;
    swift_retain();
    v33 = sub_1B1A101F0(a2);
    swift_release();
    sub_1B1FF35D8(v33);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v34 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v61 = 0;
    swift_retain();
    sub_1B1F1AD70(v34, &v61, 0xD000000000000010, 0x80000001B234DE00);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    result = sub_1B1FEF004(v12 | (v13 << 32), a5, a1, a2);
    if ((_DWORD)v12 != -1 || (_DWORD)v13 != 0)
    {
      swift_retain();
      v18 = (void *)sub_1B1D15420(v12 | (v13 << 32));
      result = swift_release();
      if (v18)
      {
        if (v18 == (void *)1)
          return result;
        if ((objc_msgSend((id)swift_unknownObjectRetain(), sel_usage) & 1) != 0
          && objc_msgSend(v18, sel_textureType) == (id)2)
        {
          if (*((uint64_t *)a3 + 2) <= 1)
            v19 = 1;
          else
            v19 = *((_QWORD *)a3 + 2);
          v20 = (uint64_t)objc_msgSend(v18, sel_width);
          if (v20 / v19 <= 1)
            v21 = 1;
          else
            v21 = v20 / v19;
          v22 = (uint64_t)objc_msgSend(v18, sel_height);
          if (v22 / v19 <= 1)
            v23 = 1;
          else
            v23 = v22 / v19;
          sub_1B210B50C(2, 25, v21, v23, 1, 0, 1, 1, (uint64_t)&v61, 1, 2, 3);
          v24 = v61;
          v25 = v62;
          v49 = BYTE2(v62);
          v50 = BYTE1(v62);
          v47 = v64;
          v48 = v63;
          v45 = v66;
          v46 = v65;
          v43 = v68;
          v44 = v67;
          v42 = v69;
          v6.i32[0] = v70;
          v26 = *a4;
          v27 = v71;
          if (*a4)
          {
            v28 = (void *)swift_unknownObjectRetain();
            v29 = v26;
            if (sub_1B20F2C10(v28))
            {
LABEL_41:
              v39 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
              v40 = (void *)sub_1B2228728();
              objc_msgSend(v39, sel_pushDebugGroup_, v40);

              sub_1B2142D00(v39, (uint64_t)a3, v18, v27, (uint64_t)v29);
              objc_msgSend(v39, sel_popDebugGroup);
              swift_unknownObjectRelease();
              sub_1B1D2E668((uint64_t)v18);
              sub_1B1D2E668((uint64_t)v18);
              result = swift_unknownObjectRelease();
              *a4 = v29;
              return result;
            }
            swift_unknownObjectRelease();
          }
          v41 = (int16x8_t)vmovl_u8(v6);
          v51 = 1531331667;
          v52 = 0xE400000000000000;
          v30 = objc_msgSend(v18, sel_label);
          if (v30)
          {
            v31 = v30;
            v32 = v25;
            sub_1B222874C();

          }
          else
          {
            v32 = v25;
          }
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v36 = v51;
          v37 = v52;
          v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
          v51 = v24;
          LOBYTE(v52) = v32;
          BYTE1(v52) = v50;
          BYTE2(v52) = v49;
          v53 = v48;
          v54 = v47;
          v55 = v46;
          v56 = v45;
          v57 = v44;
          v58 = v43;
          v59 = v42;
          v60 = vmovn_s16(v41).u32[0];
          RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v51, v38);
          v29 = sub_1B1F328F4(v38, v36, v37);
          swift_bridgeObjectRelease();

          goto LABEL_41;
        }
        sub_1B1D2E668((uint64_t)v18);
      }
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v35 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v61 = 0;
      swift_retain();
      sub_1B1F1AD70(v35, &v61, 0xD00000000000003BLL, 0x80000001B234DDC0);
      swift_release();
      sub_1B1D2E668((uint64_t)v18);
      return swift_release();
    }
  }
  return result;
}

id sub_1B214477C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  id v6;

  swift_unknownObjectRetain();
  v5 = objc_msgSend(a4, sel_contents);
  v6 = a4;
  return v5;
}

unint64_t sub_1B214483C()
{
  unint64_t result;

  result = qword_1EEF64468;
  if (!qword_1EEF64468)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4840, &type metadata for SDFFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64468);
  }
  return result;
}

uint64_t sub_1B2144880(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SDFFileAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B21448C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  char v18;
  char v19;

  v16 = a2;
  sub_1B19F8E54(0, &qword_1EEF644E0, (uint64_t (*)(void))sub_1B2145004, (uint64_t)&type metadata for SDFRuntimeData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v15 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2145004();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v16;
  v19 = 0;
  v11 = sub_1B22297FC();
  v18 = 1;
  v12 = sub_1B22297FC();
  v17 = 2;
  v13 = sub_1B22297FC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v10 = v11;
  v10[1] = v12;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v13;
  return result;
}

float sub_1B2144A68(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  float v10;
  _BYTE v12[8];

  sub_1B19F8E54(0, &qword_1EEF64488, (uint64_t (*)(void))sub_1B2144C24, (uint64_t)&type metadata for SDFTextureGenerator.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B2144C24();
  sub_1B222A150();
  if (!v1)
  {
    v12[7] = 0;
    sub_1B1A08878();
    sub_1B2229814();
    v12[6] = 1;
    sub_1B22297F0();
    v2 = v10;
    v12[5] = 2;
    sub_1B22297FC();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B2144C24()
{
  unint64_t result;

  result = qword_1EEF64490;
  if (!qword_1EEF64490)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C47F0, &type metadata for SDFTextureGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64490);
  }
  return result;
}

ValueMetadata *type metadata accessor for SDFTextureGenerator.CodingKeys()
{
  return &type metadata for SDFTextureGenerator.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SDFFileAsset.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B2144CBC + 4 * byte_1B22C4440[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B2144CDC + 4 * byte_1B22C4445[v4]))();
}

_BYTE *sub_1B2144CBC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B2144CDC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2144CE4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2144CEC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2144CF4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2144CFC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SDFFileAsset.CodingKeys()
{
  return &type metadata for SDFFileAsset.CodingKeys;
}

uint64_t destroy for SDFRuntimeData()
{
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for SDFRuntimeData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SDFRuntimeData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for SDFRuntimeData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SDFRuntimeData()
{
  return &type metadata for SDFRuntimeData;
}

unint64_t sub_1B2144E58()
{
  unint64_t result;

  result = qword_1EEF644B0;
  if (!qword_1EEF644B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4710, &type metadata for SDFFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF644B0);
  }
  return result;
}

unint64_t sub_1B2144EA0()
{
  unint64_t result;

  result = qword_1EEF644B8;
  if (!qword_1EEF644B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C47C8, &type metadata for SDFTextureGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF644B8);
  }
  return result;
}

unint64_t sub_1B2144EE8()
{
  unint64_t result;

  result = qword_1EEF644C0;
  if (!qword_1EEF644C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4738, &type metadata for SDFTextureGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF644C0);
  }
  return result;
}

unint64_t sub_1B2144F30()
{
  unint64_t result;

  result = qword_1EEF644C8;
  if (!qword_1EEF644C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4760, &type metadata for SDFTextureGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF644C8);
  }
  return result;
}

unint64_t sub_1B2144F78()
{
  unint64_t result;

  result = qword_1EEF644D0;
  if (!qword_1EEF644D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4680, &type metadata for SDFFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF644D0);
  }
  return result;
}

unint64_t sub_1B2144FC0()
{
  unint64_t result;

  result = qword_1EEF644D8;
  if (!qword_1EEF644D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C46A8, &type metadata for SDFFileAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF644D8);
  }
  return result;
}

unint64_t sub_1B2145004()
{
  unint64_t result;

  result = qword_1EEF644E8;
  if (!qword_1EEF644E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C49A0, &type metadata for SDFRuntimeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF644E8);
  }
  return result;
}

uint64_t _s3VFX19SDFTextureGeneratorV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B2145094 + 4 * byte_1B22C444F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B21450C8 + 4 * byte_1B22C444A[v4]))();
}

uint64_t sub_1B21450C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21450D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B21450D8);
  return result;
}

uint64_t sub_1B21450E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B21450ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B21450F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21450F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SDFRuntimeData.CodingKeys()
{
  return &type metadata for SDFRuntimeData.CodingKeys;
}

unint64_t sub_1B2145118()
{
  unint64_t result;

  result = qword_1EEF644F8;
  if (!qword_1EEF644F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4978, &type metadata for SDFRuntimeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF644F8);
  }
  return result;
}

unint64_t sub_1B2145160()
{
  unint64_t result;

  result = qword_1EEF64500;
  if (!qword_1EEF64500)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C48B0, &type metadata for SDFRuntimeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64500);
  }
  return result;
}

unint64_t sub_1B21451A8()
{
  unint64_t result;

  result = qword_1EEF64508;
  if (!qword_1EEF64508)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C48D8, &type metadata for SDFRuntimeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64508);
  }
  return result;
}

char *sub_1B21451EC(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  int *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1C635D8(0, v2, 0, MEMORY[0x1E0DEE9D8]);
  v5 = sub_1B1C635D8(0, v2, 0, v3);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v6 = (int *)(a1 + 36);
    do
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v10 = *((_QWORD *)v4 + 2);
      v9 = *((_QWORD *)v4 + 3);
      if (v10 >= v9 >> 1)
        v4 = sub_1B1C635D8(v9 > 1, v10 + 1, 1, v4);
      *((_QWORD *)v4 + 2) = v10 + 1;
      *(_DWORD *)&v4[4 * v10 + 32] = v8;
      v12 = *((_QWORD *)v5 + 2);
      v11 = *((_QWORD *)v5 + 3);
      if (v12 >= v11 >> 1)
        v5 = sub_1B1C635D8(v11 > 1, v12 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v12 + 1;
      *(_DWORD *)&v5[4 * v12 + 32] = v7;
      v6 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v4;
}

char *sub_1B2145310(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  _DWORD *v6;
  __int128 v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (char *)MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1791058(0, v2, 0, MEMORY[0x1E0DEE9D8]);
  v5 = sub_1B1C635D8(0, v2, 0, v3);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v6 = (_DWORD *)(a1 + 48);
    do
    {
      v7 = *((_OWORD *)v6 - 1);
      v8 = *v6;
      v10 = *((_QWORD *)v4 + 2);
      v9 = *((_QWORD *)v4 + 3);
      if (v10 >= v9 >> 1)
      {
        v15 = *((_OWORD *)v6 - 1);
        v13 = sub_1B1791058(v9 > 1, v10 + 1, 1, v4);
        v7 = v15;
        v4 = v13;
      }
      *((_QWORD *)v4 + 2) = v10 + 1;
      *(_OWORD *)&v4[16 * v10 + 32] = v7;
      v12 = *((_QWORD *)v5 + 2);
      v11 = *((_QWORD *)v5 + 3);
      if (v12 >= v11 >> 1)
        v5 = sub_1B1C635D8(v11 > 1, v12 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v12 + 1;
      *(_DWORD *)&v5[4 * v12 + 32] = v8;
      v6 += 8;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v4;
}

void sub_1B2145448()
{
  qword_1EEFD5908 = (uint64_t)&unk_1E638DD18;
}

uint64_t sub_1B214545C@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1EEF57580 != -1)
    swift_once();
  *a1 = qword_1EEFD5908;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B21454AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;

  v3 = v1;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF64520, (uint64_t (*)(void))sub_1B2147C98, (uint64_t)&type metadata for ParticleColorInit.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v14 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2147C98();
  sub_1B222A180();
  *(_QWORD *)&v14 = *(_QWORD *)v3;
  v19 = 0;
  sub_1B1BA05CC();
  sub_1B2229958();
  if (!v2)
  {
    sub_1B1AF0254((int *)(v3 + 8), (uint64_t)&v18);
    sub_1B1AF0254(&v18, (uint64_t)&v14);
    v19 = 1;
    sub_1B1A71FE0();
    sub_1B2229958();
    LOBYTE(v14) = 2;
    sub_1B2229934();
    LOBYTE(v14) = 3;
    sub_1B222991C();
    v14 = *(_OWORD *)(v3 + 32);
    v19 = 4;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1BF439C((unint64_t *)&qword_1ED4B7318, MEMORY[0x1E0DEDDB8]);
    sub_1B2229958();
    v11 = *(_QWORD *)(v3 + 56);
    v12 = *(_BYTE *)(v3 + 64);
    v16 = *(_QWORD *)(v3 + 48);
    v17 = v11;
    *(_QWORD *)&v14 = v16;
    *((_QWORD *)&v14 + 1) = v11;
    v15 = v12;
    v19 = 5;
    sub_1B1FEE6A4(v3);
    sub_1B1D3DBB0();
    sub_1B2229958();
    sub_1B1B28C6C((uint64_t)&v16);
    sub_1B1B28C6C((uint64_t)&v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B214574C(char *a1)
{
  sub_1B1F92AD8(*a1);
}

uint64_t sub_1B2145758()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2145790 + 4 * byte_1B22C49F0[*v0]))(0x7469736F706D6F63, 0xEB000000006E6F69);
}

uint64_t sub_1B2145790()
{
  return 1701080941;
}

uint64_t sub_1B21457A0()
{
  return 0x7469736E65746E69;
}

uint64_t sub_1B21457BC()
{
  return 0x4173746365666661;
}

uint64_t sub_1B21457DC()
{
  return 0x65756C6176;
}

uint64_t sub_1B21457F0()
{
  return 1886216562;
}

uint64_t sub_1B2145800@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B2146C18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2145824()
{
  sub_1B2147C98();
  return sub_1B222A1D4();
}

uint64_t sub_1B214584C()
{
  sub_1B2147C98();
  return sub_1B222A1E0();
}

__n128 sub_1B2145874@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  char v7;

  sub_1B21478B8(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_BYTE *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B21458BC(_QWORD *a1)
{
  return sub_1B21454AC(a1);
}

uint64_t sub_1B21458FC()
{
  return type metadata accessor for ParticleColorInit.System();
}

double sub_1B2145918()
{
  uint64_t v0;
  double result;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for Color;
  *(_QWORD *)(v0 + 40) = &off_1E63BA190;
  return result;
}

__n128 sub_1B2145974@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __n128 result;
  _OWORD v4[4];
  char v5;

  sub_1B2146314((uint64_t)v4);
  v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_BYTE *)(a1 + 64) = v5;
  result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *sub_1B21459B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  _QWORD *v58;
  size_t v59;
  char *v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83[12];
  _QWORD v84[7];
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _OWORD v89[2];
  uint64_t v90;
  _QWORD v91[10];
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;

  v3 = *(_OWORD *)(a3 + 104);
  v89[0] = *(_OWORD *)(a3 + 88);
  v89[1] = v3;
  v90 = *(_QWORD *)(a3 + 120);
  sub_1B1E8FCE4(a2, (uint64_t)v89, 0x200000000, v83);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v83, (uint64_t)v84, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v82 = (unsigned __int16 *)v84[0];
  if (v84[0])
  {
    v69 = v88;
    if (v88 >= 1)
    {
      v68 = v85;
      if (v85)
      {
        v5 = 0;
        v67 = v84[5];
        v6 = v87;
        v7 = v87[4];
        v65 = v7;
        v66 = v86;
        v79 = *(unsigned __int8 *)(v86 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v64 = v87 + 8;
        v63 = v87 + 13;
        v81 = v84[0] + 41;
        v96 = v87;
        do
        {
          v8 = (unsigned int *)(v67 + 48 * v5);
          v9 = *v8;
          v10 = v8[1];
          v11 = v8[2];
          v12 = *((_QWORD *)v8 + 2);
          v13 = *((_QWORD *)v8 + 5);
          v76 = *((_QWORD *)v8 + 4);
          v77 = *((_QWORD *)v8 + 3);
          if (v79)
          {
            v14 = *(os_unfair_lock_s **)(v13 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          v73 = v6[7];
          v74 = v6[6];
          v71 = v6[9];
          v72 = v6[8];
          v75 = v6[10];
          v15 = v6[4];
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v17 = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v96[6] = v17;
          v96[7] = v16;
          v6 = v96;
          v64[1] = 0;
          v64[2] = 0;
          *v64 = 0;
          swift_release();
          v91[0] = v66;
          v91[1] = v13;
          v80 = (_QWORD *)v13;
          v91[2] = v6;
          v91[3] = v11;
          v91[4] = (v10 - v9 + v11);
          v91[5] = v69;
          v91[6] = v9;
          v91[7] = v10;
          v91[8] = 0;
          v91[9] = 0;
          v92 = 1;
          v93 = v12;
          v94 = v77;
          v95 = v76;
          sub_1B21466CC((uint64_t)v91, a1);
          v18 = v6[6];
          v19 = v6[8];
          if (!v19)
          {
            v46 = v6[7];
            v47 = (_QWORD *)v6[4];
            v51 = v73;
            v50 = v74;
            v53 = v71;
            v52 = v72;
            v48 = v75;
            goto LABEL_47;
          }
          v78 = v5;
          for (i = 0; i != v19; ++i)
          {
            v22 = v18;
            v23 = (uint64_t *)(v18 + 48 * i);
            v24 = *v23;
            v25 = (void (*)(uint64_t))v23[4];
            v26 = v6[9];
            if (v26)
              v27 = v24 == v26;
            else
              v27 = 0;
            if (v27 || !v82[11])
              goto LABEL_11;
            v28 = v82[9];
            v29 = (_QWORD *)(v81 + v82[8]);
            v30 = v23[2];
            v31 = v29;
            v32 = v28 >> 4;
            v33 = v81;
            if (v28 >= 0x10)
            {
              while (*v31 != v24)
              {
                ++v33;
                v31 += 2;
                if (!--v32)
                  goto LABEL_26;
              }
              v34 = *(unsigned __int8 *)(v33 + v82[10]);
              v35 = v34 > 5;
              v36 = (1 << v34) & 0x23;
              if (v35 || v36 == 0)
              {
LABEL_11:
                v21 = swift_retain();
                v25(v21);
                swift_release();
                goto LABEL_12;
              }
            }
LABEL_26:
            if (swift_conformsToProtocol2())
              v38 = v30;
            else
              v38 = 0;
            if (v38)
            {
              if (v28 < 0x10)
                goto LABEL_11;
              v39 = v29;
              v40 = v28 >> 4;
              v41 = v81;
              while (*v39 != v38)
              {
                ++v41;
                v39 += 2;
                if (!--v40)
                  goto LABEL_39;
              }
              v42 = *(unsigned __int8 *)(v41 + v82[10]);
              v35 = v42 > 5;
              v43 = (1 << v42) & 0x23;
              if (v35 || v43 == 0)
                goto LABEL_11;
LABEL_39:
              v45 = 16 * (v28 >> 4);
              while (*v29 != v38)
              {
                v29 += 2;
                v45 -= 16;
                if (!v45)
                  goto LABEL_11;
              }
            }
LABEL_12:
            v6 = v96;
            v18 = v22;
          }
          v46 = v96[7];
          v18 = v96[6];
          v47 = (_QWORD *)v96[4];
          v48 = v75;
          if ((uint64_t)v96[8] >= 1)
          {
            v49 = v96[6];
            swift_arrayDestroy();
            v18 = v49;
          }
          v5 = v78;
          v51 = v73;
          v50 = v74;
          v53 = v71;
          v52 = v72;
LABEL_47:
          ecs_stack_allocator_deallocate(v47, v18, 48 * v46);
          v6[6] = v50;
          v6[7] = v51;
          v6[8] = v52;
          v6[9] = v53;
          v6[10] = v48;
          v54 = v80;
          if (*(_QWORD *)(v6[13] + 16))
          {
            v55 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v55, (uint64_t)v80);
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v57 = v6[13];
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v57 + 16));
            }
            else
            {
              v58 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v57 + 24) >= 2uLL)
              {
                sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                v58 = (_QWORD *)swift_allocObject();
                v59 = j__malloc_size(v58);
                v58[2] = 0;
                v58[3] = 2 * ((uint64_t)(v59 - 32) / 72);
              }
              *v63 = v58;
              swift_bridgeObjectRelease();
            }
            v54 = v80;
            if (*(unsigned __int8 *)(v6[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v60 = (char *)v80[29];
              v61 = (char *)v80[32];
              if (v60 == v61)
              {
                v62 = (char *)v80[30];
              }
              else
              {
                sub_1B1A1059C(v61, v60);
                v54 = v80;
                v61 = (char *)v80[29];
                v62 = (char *)v80[30];
                if (v62 == v61)
                {
                  v62 = 0;
                  v61 = 0;
                  v80[29] = 0;
                  v80[30] = 0;
                }
              }
              v54[31] = v62;
              v54[32] = v61;
            }
          }
          v7 = v65;
          ecs_stack_allocator_pop_snapshot(v65);
          if ((v79 & 1) != 0)
          {
            os_unfair_lock_unlock((os_unfair_lock_t)v54[43]);
            os_unfair_lock_unlock((os_unfair_lock_t)v54[47]);
          }
          swift_release();
          ++v5;
        }
        while (v5 != v68);
      }
    }
    return sub_1B19ED748(v83);
  }
  return result;
}

uint64_t type metadata accessor for ParticleColorInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B2145FB0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _DWORD v16[2];
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[4];
  int v24;
  int v25;
  char v26;
  int v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE v33[4];
  int v34;
  int v35;
  char v36;
  int v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v2 = *a1;
  swift_retain();
  v3 = a1[1];
  swift_retain();
  sub_1B1D17C04(v3, (uint64_t)v16);
  swift_release();
  v4 = v20;
  if (v20)
  {
    v5 = v22;
    v6 = v21;
    v7 = v17;
    v8 = v18;
    v9 = v16[0];
    v10 = v16[1];
    v11 = HIDWORD(v17) & 1;
    v12 = HIDWORD(v18) & 1;
    v13 = v19;
  }
  else
  {
    sub_1B2146314((uint64_t)v23);
    v9 = v23[0];
    v10 = v24;
    v7 = v25;
    LOBYTE(v11) = v26;
    v8 = v27;
    LOBYTE(v12) = v28;
    v13 = v29;
    v4 = v30;
    v6 = v31;
    v5 = v32;
  }
  v33[0] = v9;
  v34 = v10;
  v35 = v7;
  v36 = v11;
  v37 = v8;
  v38 = v12;
  v39 = v13;
  v40 = v4;
  v41 = v6;
  v42 = v5;
  v14 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1FE9114(v14, v2, v2, (uint64_t)a1, (uint64_t)v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B4F21C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release_n();
}

const char *sub_1B2146104()
{
  return "SetParticleColor.CPU";
}

uint64_t type metadata accessor for ParticleColorInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B214613C()
{
  return "SetParticleColor.GPU";
}

uint64_t sub_1B2146150()
{
  return type metadata accessor for ParticleColorInit.GPUSystem();
}

uint64_t sub_1B214616C(_QWORD *a1, uint64_t a2)
{
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v4, v5);
  if ((a2 & 0x100000000) != 0)
    sub_1B2229DB4();
  else
    sub_1B2229DCC();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B21462B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B2147334(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t sub_1B21462E4(_QWORD *a1)
{
  unsigned int *v1;

  return sub_1B214616C(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

__n128 sub_1B2146314@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v13;

  sub_1B1791524(0, (unint64_t *)&unk_1ED4BAF80, (uint64_t (*)(uint64_t))sub_1B1C71C08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  __asm { FMOV            V1.4S, #1.0 }
  v13 = _Q1;
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  *(__n128 *)(v2 + 32) = _Q1;
  *(_DWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_DWORD *)(v2 + 80) = 1065353216;
  v8 = sub_1B1C512B4(v2);
  swift_setDeallocating();
  swift_deallocClassInstance();
  v9 = sub_1B2145310(v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 1065353216;
  *(_BYTE *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = 1065353216;
  *(_BYTE *)(a1 + 20) = 1;
  result = v13;
  *(__n128 *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v11;
  *(_BYTE *)(a1 + 64) = 1;
  return result;
}

_QWORD *sub_1B21463FC(_QWORD *result, unsigned __int8 *a2, float a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14[15];
  _BYTE v15[40];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[7];
  uint64_t v20;
  _OWORD v21[7];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    v4 = result;
    v6 = *((_QWORD *)a2 + 6);
    v7 = *((_QWORD *)a2 + 7);
    v8 = a2[64];
    swift_retain();
    sub_1B1E4D26C(v6, v7, v8, (uint64_t)v14);
    sub_1B1A18378((uint64_t)v14, (uint64_t)v19, (unint64_t *)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime);
    if (v20)
    {
      v21[4] = v19[4];
      v21[5] = v19[5];
      v21[6] = v19[6];
      v22 = v20;
      v21[0] = v19[0];
      v21[1] = v19[1];
      v21[2] = v19[2];
      v21[3] = v19[3];
      sub_1B1EDFE20((uint64_t)v21, 1, 1, (uint64_t)v15);
      sub_1B1B4D278((uint64_t)v15, (uint64_t)&v16, &qword_1ED4BB3F0, (uint64_t (*)(uint64_t))type metadata accessor for __vfx_sampler1d);
      if (*((_QWORD *)&v17 + 1) != 1)
      {
        v11 = v16;
        v12 = v17;
        v13 = v18;
        if (v4[7] != v4[6])
        {
          v9 = a2[20];
          (*((void (**)(__int128 *, float))&v12 + 1))(&v11, a3);
          v10 = *a2;
          if ((v9 & 1) == 0)
            __asm { BR              X9 }
          __asm { BR              X9 }
        }
      }
      sub_1B1A08614(v14);
    }
    return (_QWORD *)swift_release();
  }
  return result;
}

_QWORD *sub_1B21466CC(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  float v9;
  float v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  float v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20[15];
  _BYTE v21[40];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[7];
  uint64_t v26;
  _OWORD v27[7];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
  sub_1B1AF0254((int *)v2 + 2, (uint64_t)&v14);
  result = (_QWORD *)sub_1B1AF0254(&v14, (uint64_t)&v15);
  if (v16 != 1)
  {
    v9 = *(double *)(*(_QWORD *)a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48) / v15;
    v10 = fmodf(v9, 1.0);
    return sub_1B21463FC((_QWORD *)a1, v2, v10);
  }
  if (v15 != 0.0)
  {
    if (LODWORD(v15) == 1)
    {
      if (*(_QWORD *)(*(_QWORD *)a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
      {
        v6 = *((_QWORD *)v2 + 6);
        v7 = *((_QWORD *)v2 + 7);
        v8 = v2[64];
        swift_retain();
        sub_1B1E4D26C(v6, v7, v8, (uint64_t)v20);
        sub_1B1A18378((uint64_t)v20, (uint64_t)v25, (unint64_t *)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime);
        if (v26)
        {
          v27[4] = v25[4];
          v27[5] = v25[5];
          v27[6] = v25[6];
          v28 = v26;
          v27[0] = v25[0];
          v27[1] = v25[1];
          v27[2] = v25[2];
          v27[3] = v25[3];
          sub_1B1EDFE20((uint64_t)v27, 1, 1, (uint64_t)v21);
          sub_1B1B4D278((uint64_t)v21, (uint64_t)&v22, &qword_1ED4BB3F0, (uint64_t (*)(uint64_t))type metadata accessor for __vfx_sampler1d);
          if (*((_QWORD *)&v23 + 1) != 1)
          {
            v17 = v22;
            v18 = v23;
            v19 = v24;
            if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a1 + 48))
            {
              v12 = v2[20];
              (*((void (**)(__int128 *, float))&v18 + 1))(&v17, (float)((9* ((((unint64_t)(5 * *(_QWORD *)(a2 + 16)) >> 32) >> 25) | (640 * *(_QWORD *)(a2 + 16)))) & 0xFFFFFF)* 0.000000059605);
              v13 = *v2;
              if ((v12 & 1) == 0)
                __asm { BR              X9 }
              __asm { BR              X9 }
            }
          }
          sub_1B1A08614(v20);
        }
        return (_QWORD *)swift_release();
      }
      return result;
    }
    v10 = (float)(sub_1B2130F84() & 0xFFFFFF) * 0.000000059605;
    return sub_1B21463FC((_QWORD *)a1, v2, v10);
  }
  v11 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
  if ((v2[20] & 1) != 0)
  {
    if (v11)
      __asm { BR              X12 }
  }
  else if (v11)
  {
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_1B2146C18(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4173746365666661 && a2 == 0xEC0000006168706CLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1886216562 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1B2146EAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  char v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _BYTE v41[4];
  int v42;
  unsigned int v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BYTE v51[8];
  _BYTE v52[4];
  int v53;
  unsigned int v54;
  char v55;
  unsigned int v56;
  char v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  id v62[4];

  v62[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 52);
  swift_retain();
  swift_retain();
  sub_1B1D17C04(v3, (uint64_t)&v34);
  swift_release();
  v6 = v38;
  if (v38)
  {
    v7 = v40;
    v8 = v39;
    v10 = DWORD2(v34);
    v9 = v35;
    v11 = v34;
    v12 = DWORD1(v34);
    v13 = HIDWORD(*((_QWORD *)&v34 + 1)) & 1;
    v14 = HIDWORD(v35) & 1;
    v15 = v37;
  }
  else
  {
    sub_1B2146314((uint64_t)v41);
    v11 = v41[0];
    v12 = v42;
    v10 = v43;
    LODWORD(v13) = v44;
    v9 = v45;
    LOBYTE(v14) = v46;
    v15 = v47;
    v6 = v48;
    v8 = v49;
    v7 = v50;
  }
  v52[0] = v11;
  v53 = v12;
  v54 = v10;
  v55 = v13;
  v56 = v9;
  v57 = v14;
  v58 = v15;
  v59 = v6;
  v60 = v8;
  v61 = v7;
  v34 = v15;
  LODWORD(v35) = v12;
  BYTE4(v35) = v11;
  v36 = v9 | 0x3F80000000000000;
  LOBYTE(v37) = v14;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = v4 | (v5 << 32);
  sub_1B1FE8714(v28, v2, (uint64_t)v52, (uint64_t)&v34, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if ((_DWORD)v13 && !v10)
  {
LABEL_10:
    v29 = v34;
    v30 = v35;
    v31 = BYTE4(v35);
    v32 = v36;
    v33 = v37;
    v17 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      ObjectType = swift_getObjectType();
      type metadata accessor for particle_set_color_uniforms(0);
      sub_1B1F40E1C((uint64_t)&v29, 1, ObjectType, v19, v20, v21, v22, v23);
    }
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1B226D240;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v10;
    if (!(_DWORD)v13)
      v25 = 3;
    *(_OWORD *)(v24 + 32) = xmmword_1B22C4D10;
    *(_BYTE *)(v24 + 48) = 0;
    *(_QWORD *)(v24 + 64) = v25;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *(_QWORD *)(v24 + 120) = 0;
    *(_BYTE *)(v24 + 128) = 14;
    swift_retain();
    sub_1B1B1FC34(a1);
    sub_1B1FE6FB8(v28, v2, v17 == 0, v24, a1, 0xD000000000000012, 0x80000001B234DF40, 0);
    sub_1B1B1FC88(a1);
    swift_release_n();
    swift_setDeallocating();
    swift_arrayDestroy();
    return swift_deallocClassInstance();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v16 = sub_1B1E4D65C(v6, v8, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_1B1B4D278(a1, (uint64_t)v51, &qword_1EEF60208, (uint64_t (*)(uint64_t))sub_1B1EC6A2C);
    sub_1B1B4D278((uint64_t)v51, (uint64_t)v62, &qword_1EEF60208, (uint64_t (*)(uint64_t))sub_1B1EC6A2C);
    if (v62[0])
      objc_msgSend(v62[0], sel_setTexture_atIndex_, v16, 0, v28);
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v27 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  *(_QWORD *)&v29 = 0;
  swift_retain();
  sub_1B1F1AD70(v27, (uint64_t *)&v29, 0x20676E697373696DLL, 0xEC000000706D6172);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1B2147334(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v9[4];

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FA070(v9, v9[3]);
  v5 = sub_1B2229D30();
  v6 = v4;
  v7 = v5 == 0x746E6174736E6F63 && v4 == 0xE800000000000000;
  if (v7 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 0;
  }
  else if (v5 == 0x6D6F646E6172 && v6 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v8 = 1;
  }
  else
  {
    if ((v5 != 0x6E556D6F646E6172 || v6 != 0xED00006D726F6669) && (sub_1B2229D24() & 1) == 0)
    {
      sub_1B22294CC();
      swift_allocError();
      sub_1B2229490();
      swift_willThrow();
      swift_bridgeObjectRelease();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    }
    swift_bridgeObjectRelease();
    v8 = 2;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v9[0]) = 1;
  return v8 | 0x100000000;
}

uint64_t destroy for ParticleColorInit()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ParticleColorInit(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleColorInit(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for ParticleColorInit(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleColorInit(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleColorInit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorInit()
{
  return &type metadata for ParticleColorInit;
}

ValueMetadata *type metadata accessor for ParticleColorInit.Mode()
{
  return &type metadata for ParticleColorInit.Mode;
}

unint64_t sub_1B2147858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF64510;
  if (!qword_1EEF64510)
  {
    sub_1B1A02758(255, &qword_1EEF64518, (uint64_t)&type metadata for ParticleColorInit.Mode, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF64510);
  }
  return result;
}

uint64_t sub_1B21478B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  uint64_t result;
  __int128 v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  int v35;
  char v36;

  v30 = a2;
  sub_1B19F8E54(0, &qword_1ED4BAB60, (uint64_t (*)(void))sub_1B2147C98, (uint64_t)&type metadata for ParticleColorInit.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v31 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v27 - v7;
  sub_1B1791524(0, (unint64_t *)&unk_1ED4BAF80, (uint64_t (*)(uint64_t))sub_1B1C71C08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = swift_allocObject();
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v9 + 16) = xmmword_1B226CD10;
  *(_OWORD *)(v9 + 32) = _Q1;
  *(_DWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_DWORD *)(v9 + 80) = 1065353216;
  v15 = sub_1B1C512B4(v9);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B2145310(v15);
  v32 = v16;
  swift_bridgeObjectRelease();
  sub_1B19FA070(a1, a1[3]);
  sub_1B2147C98();
  sub_1B222A150();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v17 = v5;
    v18 = v30;
    v36 = 0;
    sub_1B1BA0588();
    sub_1B2229814();
    v19 = v33;
    v20 = DWORD1(v33);
    v36 = 1;
    sub_1B1A71F9C();
    sub_1B2229814();
    v35 = v19;
    v21 = v33;
    v22 = BYTE4(v33);
    LOBYTE(v33) = 2;
    sub_1B22297F0();
    v24 = v23;
    v28 = v21;
    v29 = v22;
    LOBYTE(v33) = 3;
    LOBYTE(v22) = sub_1B22297D8();
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v36 = 4;
    sub_1B1BF439C((unint64_t *)&qword_1ED4B7330, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    v27 = v33;
    v36 = 5;
    sub_1B1D3DB38();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v31);
    v25 = v33;
    LOBYTE(v21) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_BYTE *)v18 = v35;
    *(_DWORD *)(v18 + 4) = v20;
    *(_DWORD *)(v18 + 8) = v28;
    *(_BYTE *)(v18 + 12) = v29;
    *(_DWORD *)(v18 + 16) = v24;
    *(_BYTE *)(v18 + 20) = v22 & 1;
    *(_OWORD *)(v18 + 32) = v27;
    *(_OWORD *)(v18 + 48) = v25;
    *(_BYTE *)(v18 + 64) = v21;
  }
  return result;
}

unint64_t sub_1B2147C98()
{
  unint64_t result;

  result = qword_1ED4B90D8;
  if (!qword_1ED4B90D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4CC0, &type metadata for ParticleColorInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B90D8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleColorInit.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B2147D28 + 4 * byte_1B22C4A13[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B2147D5C + 4 * byte_1B22C4A0E[v4]))();
}

uint64_t sub_1B2147D5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2147D64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2147D6CLL);
  return result;
}

uint64_t sub_1B2147D78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2147D80);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B2147D84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2147D8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorInit.CodingKeys()
{
  return &type metadata for ParticleColorInit.CodingKeys;
}

unint64_t sub_1B2147DAC()
{
  unint64_t result;

  result = qword_1EEF64540;
  if (!qword_1EEF64540)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4C98, &type metadata for ParticleColorInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64540);
  }
  return result;
}

unint64_t sub_1B2147DF4()
{
  unint64_t result;

  result = qword_1ED4B90F8;
  if (!qword_1ED4B90F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4C08, &type metadata for ParticleColorInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B90F8);
  }
  return result;
}

unint64_t sub_1B2147E3C()
{
  unint64_t result;

  result = qword_1ED4B90E0[0];
  if (!qword_1ED4B90E0[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4C30, &type metadata for ParticleColorInit.CodingKeys);
    atomic_store(result, qword_1ED4B90E0);
  }
  return result;
}

_QWORD *sub_1B2147E80(char a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[4];
  _BYTE v7[24];
  _QWORD v8[3];

  v7[16] = a1;
  v1 = MEMORY[0x1E0DEE9D8];
  sub_1B1C5A714((uint64_t)sub_1B21483B0, (uint64_t)v7, 0, 0x1000000000000000uLL, 1, MEMORY[0x1E0DEE9D8]);
  v2 = sub_1B1C6A11C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = 0;
  v3[3] = v1;
  v3[4] = 0;
  v3[5] = 0;
  v3[6] = sub_1B1B7DC90(v1);
  v3[3] = v2;
  v3[6] = sub_1B1B7DC90(v1);
  swift_bridgeObjectRelease();
  v6[2] = sub_1B1C254C8;
  v6[3] = v3;
  v8[0] = sub_1B1C6D068(v1);
  v8[1] = v4;
  sub_1B1C5C9C4((uint64_t)sub_1B1C254D0, (uint64_t)v6, 1, 0x1000000000000000uLL, 0, v1, (uint64_t)v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B2147FBC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 24);
  v7 = MEMORY[0x1E0DEE9D8];
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v2 = sub_1B22296AC();
  if (!v2)
    goto LABEL_13;
LABEL_3:
  v3 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      v4 = MEMORY[0x1B5E21018](v3, v1);
    }
    else
    {
      v4 = *(_QWORD *)(v1 + 8 * v3 + 32);
      swift_retain();
    }
    (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v4 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + 152))(v8);
    v13 = v8[0];
    v14 = v8[1];
    sub_1B1B28C6C((uint64_t)&v13);
    v12 = v8[2];
    sub_1B1B28C6C((uint64_t)&v12);
    v11 = v8[3];
    sub_1B1B28C6C((uint64_t)&v11);
    v10 = v8[4];
    sub_1B1B28C6C((uint64_t)&v10);
    v9 = v8[5];
    sub_1B1B28C6C((uint64_t)&v9);
    v5 = *(_QWORD *)(v14 + 16);
    sub_1B1B28C6C((uint64_t)&v14);
    if (v5)
    {
      swift_release();
    }
    else
    {
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
    }
    ++v3;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B2148168(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_1B222826C();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v9, *a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v4, v7);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0x8000000000000000;
  sub_1B1B8A2DC(v10, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a2 + 48) = v14;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_1B2148250@<X0>(uint64_t a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t, char *, uint64_t);
  uint64_t v15;

  v6 = sub_1B222826C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) == 0)
  {
    sub_1B2228260();
    v12 = (char *)(v11 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID);
    v13 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 24);
    v13(v11 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v10, v6);
    v13(*(_QWORD *)(v11 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + OBJC_IVAR____TtC3VFX4Node_authoringID, v12, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  *a3 = v11;
  return swift_retain();
}

uint64_t sub_1B214834C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B19E5A18(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AuthoringGraph()
{
  return objc_opt_self();
}

uint64_t sub_1B21483A8()
{
  uint64_t *v0;

  return sub_1B1BBAA78(*v0);
}

uint64_t sub_1B21483B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1B2148250(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t getEnumTagSinglePayload for ParticleMeshRenderer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 7;
  v5 = v3 - 7;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleMeshRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 250;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleMeshRenderer()
{
  return &type metadata for ParticleMeshRenderer;
}

uint64_t sub_1B2148468@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[10];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = 0xD000000000000012;
  v6[0] = 0xD000000000000012;
  v6[1] = 0x80000001B234E010;
  v6[2] = 0;
  v6[3] = 0;
  if ((a1 & 0x4800) == 0x4000)
    v3 = 0xD00000000000001BLL;
  v6[4] = MEMORY[0x1E0DEE9D8];
  v6[5] = v3;
  v4 = 0x80000001B234E030;
  if ((a1 & 0x4800) == 0x4000)
    v4 = 0x80000001B234E050;
  v6[6] = v4;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = MEMORY[0x1E0DEE9D8];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  nullsub_16(v6);
  return sub_1B19F66A0((uint64_t)v6, a2, &qword_1ED4B8CF8);
}

uint64_t sub_1B2148530()
{
  uint64_t v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = sub_1B20C3C0C(132);
  *(_QWORD *)(v0 + 88) = sub_1B2148468;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

__n128 sub_1B214858C@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  result.n128_u64[0] = 0xFFFFFFFFLL;
  result.n128_u64[1] = 0xFFFFFFFFLL;
  *a1 = result;
  a1[1].n128_u8[0] = 0;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  return result;
}

void sub_1B21485A0(char *a1)
{
  sub_1B1F94AF0(*a1);
}

void sub_1B21485AC()
{
  char *v0;

  sub_1B1FB2DAC(*v0);
}

void sub_1B21485B4()
{
  __asm { BR              X10 }
}

uint64_t sub_1B21485F4()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B2148670(uint64_t a1)
{
  char *v1;

  sub_1B1DB5398(a1, *v1);
}

uint64_t sub_1B2148678@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2148AE0();
  *a1 = result;
  return result;
}

uint64_t sub_1B21486A4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B21486D8 + 4 * byte_1B22C4D85[*v0]))();
}

void sub_1B21486D8(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001B2328850;
}

void sub_1B21486F8(_QWORD *a1@<X8>)
{
  *a1 = 0x65646F4D74726F73;
  a1[1] = 0xE800000000000000;
}

void sub_1B214872C(_QWORD *a1@<X8>)
{
  *a1 = 0x7865646E49646F6CLL;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1B2148748()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B214877C + 4 * byte_1B22C4D8A[*v0]))(0x69746E456873656DLL, 0xEA00000000007974);
}

unint64_t sub_1B214877C()
{
  return 0xD000000000000010;
}

uint64_t sub_1B2148798()
{
  return 0x65646F4D74726F73;
}

uint64_t sub_1B21487B0()
{
  return 0x65646E4974726170;
}

uint64_t sub_1B21487CC()
{
  return 0x7865646E49646F6CLL;
}

uint64_t sub_1B21487E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2148AE0();
  *a1 = result;
  return result;
}

uint64_t sub_1B2148808()
{
  sub_1B2149088();
  return sub_1B222A1D4();
}

uint64_t sub_1B2148830()
{
  sub_1B2149088();
  return sub_1B222A1E0();
}

uint64_t sub_1B2148858(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_1B21490CC(0, &qword_1EEF64558, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2149088();
  sub_1B222A180();
  v13 = *v3;
  HIBYTE(v12) = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v2)
  {
    v13 = v3[1];
    HIBYTE(v12) = 1;
    sub_1B2229958();
    LOBYTE(v13) = *((_BYTE *)v3 + 16);
    HIBYTE(v12) = 2;
    sub_1B1A719C8();
    sub_1B2229958();
    LOBYTE(v13) = 3;
    sub_1B2229940();
    LOBYTE(v13) = 4;
    sub_1B2229940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B2148A34@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1B2148DD4(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B2148A78(_QWORD *a1)
{
  return sub_1B2148858(a1);
}

uint64_t sub_1B2148A8C(int32x4_t *a1, int32x4_t *a2)
{
  return vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*a1, *a2))), 0xFuLL))) & 1 | (a1[1].i64[1] != a2[1].i64[1]) | (a1[1].u8[0] != a2[1].u8[0]);
}

uint64_t sub_1B2148AE0()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1B2148B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;

  v2 = *(unsigned int *)(v1 + 8);
  v3 = *(unsigned int *)(v1 + 12);
  if ((_DWORD)v2 != -1 || (_DWORD)v3 != 0)
    return v2 | (v3 << 32);
  result = 0;
  v7 = *(_QWORD *)(v1 + 24);
  if ((v7 & 0x8000000000000000) == 0 && v7 < *(_QWORD *)(a1 + 16))
    return *(_QWORD *)(a1 + 8 * v7 + 32);
  return result;
}

void *sub_1B2148B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  id v9;
  __int128 *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16[2];
  _BYTE v17[80];
  _OWORD v18[4];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a3 + 8);
  swift_retain();
  sub_1B1D15764(v3, (uint64_t)v17);
  swift_release();
  sub_1B19F66A0((uint64_t)v17, (uint64_t)v18, qword_1ED4B8BB0);
  if ((v19 & 1) != 0)
  {
    v15 = xmmword_1B2244E20;
    v14 = xmmword_1B2244D90;
    v13 = xmmword_1B2244DD0;
    v12 = xmmword_1B2244DB0;
  }
  else
  {
    v12 = v18[0];
    v13 = v18[1];
    v14 = v18[2];
    v15 = v18[3];
  }
  swift_retain();
  v4 = (void *)sub_1B1D22DA8(0, 64);
  v6 = v5;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v7 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v16[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v7, v16, 0xD000000000000046, 0x80000001B234DFC0);
    swift_release();
    swift_release();
  }
  else
  {
    v8 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v9 = v4;
    v10 = (__int128 *)&v8[v6];
    *v10 = v12;
    v10[1] = v13;
    v10[2] = v14;
    v10[3] = v15;
  }
  swift_release();
  return v4;
}

uint64_t sub_1B2148DD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  sub_1B21490CC(0, &qword_1EEF64548, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v26 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2149088();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v27 = 0;
  sub_1B1A08878();
  sub_1B2229814();
  v12 = v28;
  v13 = a1[3];
  v14 = a1[4];
  sub_1B19FA070(a1, v13);
  v15 = 0xFFFFFFFFLL;
  if (sub_1B2067BAC(1070, v13, v14))
  {
    v27 = 1;
    sub_1B2229814();
    v15 = v28;
  }
  v16 = a1[3];
  v17 = a1[4];
  sub_1B19FA070(a1, v16);
  if (sub_1B2067BAC(1092, v16, v17))
  {
    v27 = 2;
    sub_1B1A71984();
    sub_1B2229814();
    v18 = v28;
    LOBYTE(v28) = 3;
    v19 = sub_1B22297FC();
    LOBYTE(v28) = 4;
    v20 = sub_1B22297A8();
    v22 = v21;
    v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24 = v20;
    v23(v10, v6);
    if ((v22 & 1) != 0)
      v25 = 0;
    else
      v25 = v24;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v19 = 0;
    v25 = 0;
    v18 = 0;
  }
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v15;
  *(_BYTE *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v25;
  return result;
}

unint64_t sub_1B2149088()
{
  unint64_t result;

  result = qword_1EEF64550;
  if (!qword_1EEF64550)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4F64, &type metadata for ParticleMeshRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64550);
  }
  return result;
}

void sub_1B21490CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B2149088();
    v7 = a3(a1, &type metadata for ParticleMeshRenderer.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleMeshRenderer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B2149174 + 4 * byte_1B22C4D94[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B21491A8 + 4 * byte_1B22C4D8F[v4]))();
}

uint64_t sub_1B21491A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21491B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B21491B8);
  return result;
}

uint64_t sub_1B21491C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B21491CCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B21491D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21491D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleMeshRenderer.CodingKeys()
{
  return &type metadata for ParticleMeshRenderer.CodingKeys;
}

unint64_t sub_1B21491F8()
{
  unint64_t result;

  result = qword_1EEF64560;
  if (!qword_1EEF64560)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4F3C, &type metadata for ParticleMeshRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64560);
  }
  return result;
}

unint64_t sub_1B2149240()
{
  unint64_t result;

  result = qword_1EEF64568;
  if (!qword_1EEF64568)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4E74, &type metadata for ParticleMeshRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64568);
  }
  return result;
}

unint64_t sub_1B2149288()
{
  unint64_t result;

  result = qword_1EEF64570;
  if (!qword_1EEF64570)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C4E9C, &type metadata for ParticleMeshRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64570);
  }
  return result;
}

uint64_t sub_1B21492CC()
{
  uint64_t result;

  result = sub_1B21492E8();
  qword_1ED4D0DA0 = result;
  return result;
}

uint64_t sub_1B21492E8()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  char v2;
  char v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  type metadata accessor for NavigationConfiguration();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = sub_1B1B95510(MEMORY[0x1E0DEE9D8]);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B856F8((uint64_t)&unk_1E63AAE70, 0, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v0 + 16) = v6;
  swift_bridgeObjectRelease();
  v2 = swift_isUniquelyReferenced_nonNull_native();
  v7 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B856F8((uint64_t)&unk_1E63AADF8, 1, v2);
  *(_QWORD *)(v0 + 16) = v7;
  swift_bridgeObjectRelease();
  v3 = swift_isUniquelyReferenced_nonNull_native();
  v8 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B856F8((uint64_t)&unk_1E63AAE20, 2, v3);
  *(_QWORD *)(v0 + 16) = v8;
  swift_bridgeObjectRelease();
  v4 = swift_isUniquelyReferenced_nonNull_native();
  v9 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0x8000000000000000;
  sub_1B1B856F8((uint64_t)&unk_1E63AAE48, 3, v4);
  *(_QWORD *)(v0 + 16) = v9;
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata accessor for NavigationConfiguration()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for FlyModeKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B21494B0 + 4 * byte_1B22C4FC5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B21494E4 + 4 * byte_1B22C4FC0[v4]))();
}

uint64_t sub_1B21494E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21494EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B21494F4);
  return result;
}

uint64_t sub_1B2149500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2149508);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B214950C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2149514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlyModeKeys()
{
  return &type metadata for FlyModeKeys;
}

unint64_t sub_1B2149534()
{
  unint64_t result;

  result = qword_1ED4B7D68;
  if (!qword_1ED4B7D68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5074, &type metadata for FlyModeKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D68);
  }
  return result;
}

uint64_t sub_1B2149578(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B21495AC + 4 * byte_1B22C4FCA[a1]))(0x7055646C726F77, 0xE700000000000000);
}

unint64_t sub_1B21495AC()
{
  return 0xD000000000000010;
}

uint64_t sub_1B21495F4()
{
  return 0x69736E65536E6170;
}

uint64_t sub_1B2149618()
{
  return 0x6C754D7466696873;
}

uint64_t sub_1B214963C()
{
  return 0x636F6C6556796C66;
}

uint64_t sub_1B214965C()
{
  return 0x6E6F697461746F72;
}

uint64_t sub_1B214967C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v12;
  char v13;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF64590, (uint64_t (*)(void))sub_1B214AE14, (uint64_t)&type metadata for _Navigation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B214AE14();
  sub_1B222A180();
  v12 = *v3;
  v13 = 0;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
  sub_1B2229958();
  if (!v2)
  {
    v12 = v3[1];
    v13 = 1;
    sub_1B2229958();
    LOBYTE(v12) = 2;
    sub_1B2229934();
    LOBYTE(v12) = 3;
    sub_1B2229934();
    LOBYTE(v12) = 4;
    sub_1B2229934();
    LOBYTE(v12) = 5;
    sub_1B2229934();
    LOBYTE(v12) = 6;
    sub_1B2229934();
    LOBYTE(v12) = *((_BYTE *)v3 + 52);
    v13 = 7;
    sub_1B214AE9C();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B214991C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63A7C88;
}

uint64_t sub_1B214992C()
{
  sub_1B214B34C();
  return sub_1B2228A58();
}

uint64_t sub_1B2149988()
{
  sub_1B214B34C();
  return sub_1B22289E0();
}

void sub_1B21499D4(char *a1)
{
  sub_1B1F8EA80(*a1);
}

uint64_t sub_1B21499E0()
{
  unsigned __int8 *v0;

  return sub_1B2149578(*v0);
}

uint64_t sub_1B21499E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B2149EE4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2149A0C()
{
  sub_1B214AE14();
  return sub_1B222A1D4();
}

uint64_t sub_1B2149A34()
{
  sub_1B214AE14();
  return sub_1B222A1E0();
}

double sub_1B2149A5C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  double v7[4];

  sub_1B214AACC(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = v7[0];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)v7;
    *(double *)(a2 + 45) = *(double *)((char *)&v7[1] + 5);
  }
  return result;
}

uint64_t sub_1B2149AA4(_QWORD *a1)
{
  return sub_1B214967C(a1);
}

uint64_t sub_1B2149AB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED4B99A8 != -1)
    swift_once();
  v2 = qword_1ED4D0DA0;
  *(_OWORD *)a1 = xmmword_1B2244DD0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1B22C5590;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_BYTE *)(a1 + 52) = 1;
  *(_QWORD *)(a1 + 56) = v2;
  *(_BYTE *)(a1 + 64) = 2;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 72) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 80) = v3;
  *(_QWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 104) = v3;
  return swift_retain();
}

uint64_t sub_1B2149B50()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B2149BA8()
{
  return sub_1B2228824();
}

uint64_t sub_1B2149BC8()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B2149C1C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B2149C6C(_QWORD *a1@<X8>)
{
  *a1 = 0x7461676976614E63;
  a1[1] = 0xEB000000006E6F69;
}

uint64_t sub_1B2149C90()
{
  return 0x7461676976614E63;
}

uint64_t sub_1B2149CB0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B2149D04()
{
  sub_1B214A48C();
  return sub_1B222A1D4();
}

uint64_t sub_1B2149D2C()
{
  sub_1B214A48C();
  return sub_1B222A1E0();
}

uint64_t sub_1B2149D54(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  _OWORD v12[2];
  _OWORD v13[2];

  v2 = v1;
  sub_1B19F8E54(0, &qword_1EEF64578, (uint64_t (*)(void))sub_1B214A48C, (uint64_t)&type metadata for Navigation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B214A48C();
  sub_1B222A180();
  v10 = *(_OWORD *)(v2 + 16);
  v12[0] = *(_OWORD *)v2;
  v12[1] = v10;
  v13[0] = *(_OWORD *)(v2 + 32);
  *(_QWORD *)((char *)v13 + 13) = *(_QWORD *)(v2 + 45);
  sub_1B214A514();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

__n128 sub_1B2149E80@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[7];

  sub_1B214A288(a1, v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B2149ED0(_QWORD *a1)
{
  return sub_1B2149D54(a1);
}

uint64_t sub_1B2149EE4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7055646C726F77 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B23462D0 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001B23462B0 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B2346290 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69736E65536E6170 && a2 == 0xEE00797469766974 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C754D7466696873 && a2 == 0xEF7265696C706974 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x636F6C6556796C66 && a2 == 0xEB00000000797469 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xEC00000065646F4DLL)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_1B214A288@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t result;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  char v25;

  v20 = a2;
  sub_1B19F8E54(0, &qword_1ED4BAA38, (uint64_t (*)(void))sub_1B214A48C, (uint64_t)&type metadata for Navigation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v17 - v8;
  if (qword_1ED4B99A8 != -1)
    swift_once();
  v10 = qword_1ED4D0DA0;
  sub_1B19FA070(a1, a1[3]);
  sub_1B214A48C();
  swift_retain();
  sub_1B222A150();
  if (v2)
  {
    swift_bridgeObjectRelease_n();
    swift_release();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B214A4D0();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v18 = v22;
    v19 = v21;
    v11 = v24;
    v12 = v25;
    v17 = v23;
    result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    v14 = v20;
    v15 = v18;
    *v20 = v19;
    v14[1] = v15;
    v14[2] = v17;
    *((_DWORD *)v14 + 12) = v11;
    *((_BYTE *)v14 + 52) = v12;
    *((_QWORD *)v14 + 7) = v10;
    v16 = MEMORY[0x1E0DEE9D8];
    *((_BYTE *)v14 + 64) = 2;
    *((_QWORD *)v14 + 9) = v16;
    *((_QWORD *)v14 + 10) = v16;
    *((_QWORD *)v14 + 11) = v16;
    *((_QWORD *)v14 + 12) = v16;
    *((_QWORD *)v14 + 13) = v16;
  }
  return result;
}

unint64_t sub_1B214A48C()
{
  unint64_t result;

  result = qword_1ED4B7BC8;
  if (!qword_1ED4B7BC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5280, &type metadata for Navigation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7BC8);
  }
  return result;
}

unint64_t sub_1B214A4D0()
{
  unint64_t result;

  result = qword_1ED4B7F50;
  if (!qword_1ED4B7F50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5258, &type metadata for _Navigation);
    atomic_store(result, (unint64_t *)&qword_1ED4B7F50);
  }
  return result;
}

unint64_t sub_1B214A514()
{
  unint64_t result;

  result = qword_1EEF64580;
  if (!qword_1EEF64580)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5230, &type metadata for _Navigation);
    atomic_store(result, (unint64_t *)&qword_1EEF64580);
  }
  return result;
}

__n128 initializeWithCopy for _Navigation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _Navigation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 53))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 52);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _Navigation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 53) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 53) = 0;
    if (a2)
      *(_BYTE *)(result + 52) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for _Navigation()
{
  return &type metadata for _Navigation;
}

uint64_t storeEnumTagSinglePayload for Navigation.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B214A660 + 4 * byte_1B22C4FD2[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B214A680 + 4 * byte_1B22C4FD7[v4]))();
}

_BYTE *sub_1B214A660(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B214A680(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B214A688(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B214A690(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B214A698(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B214A6A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Navigation.CodingKeys()
{
  return &type metadata for Navigation.CodingKeys;
}

uint64_t destroy for Navigation()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Navigation(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Navigation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Navigation(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_release();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Navigation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Navigation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Navigation()
{
  return &type metadata for Navigation;
}

unint64_t sub_1B214A9F8()
{
  unint64_t result;

  result = qword_1EEF64588;
  if (!qword_1EEF64588)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5208, &type metadata for Navigation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64588);
  }
  return result;
}

unint64_t sub_1B214AA40()
{
  unint64_t result;

  result = qword_1ED4B7BD8;
  if (!qword_1ED4B7BD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5140, &type metadata for Navigation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7BD8);
  }
  return result;
}

unint64_t sub_1B214AA88()
{
  unint64_t result;

  result = qword_1ED4B7BD0;
  if (!qword_1ED4B7BD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5168, &type metadata for Navigation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7BD0);
  }
  return result;
}

uint64_t sub_1B214AACC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char v25;
  uint64_t result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  char v31;
  __int128 v32;

  sub_1B19F8E54(0, &qword_1ED4BAA60, (uint64_t (*)(void))sub_1B214AE14, (uint64_t)&type metadata for _Navigation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v28 - v9;
  v11 = a1[3];
  v30 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B214AE14();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v30);
  v12 = v7;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v31 = 0;
  sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
  v13 = v6;
  sub_1B2229814();
  v29 = v32;
  v31 = 1;
  sub_1B2229814();
  v28 = v32;
  LOBYTE(v32) = 2;
  sub_1B22297F0();
  v15 = v14;
  LOBYTE(v32) = 3;
  sub_1B22297F0();
  v16 = (uint64_t)v30;
  v18 = v17;
  LOBYTE(v32) = 4;
  sub_1B22297F0();
  v20 = v19;
  LOBYTE(v32) = 5;
  sub_1B22297F0();
  v22 = v21;
  LOBYTE(v32) = 6;
  sub_1B22297F0();
  v24 = v23;
  v31 = 7;
  sub_1B214AE58();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v13);
  v25 = v32;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v16);
  v27 = v28;
  *(_OWORD *)a2 = v29;
  *(_OWORD *)(a2 + 16) = v27;
  *(_DWORD *)(a2 + 32) = v15;
  *(_DWORD *)(a2 + 36) = v18;
  *(_DWORD *)(a2 + 40) = v20;
  *(_DWORD *)(a2 + 44) = v22;
  *(_DWORD *)(a2 + 48) = v24;
  *(_BYTE *)(a2 + 52) = v25;
  return result;
}

unint64_t sub_1B214AE14()
{
  unint64_t result;

  result = qword_1ED4B7F38;
  if (!qword_1ED4B7F38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C553C, &type metadata for _Navigation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7F38);
  }
  return result;
}

unint64_t sub_1B214AE58()
{
  unint64_t result;

  result = qword_1ED4B9868;
  if (!qword_1ED4B9868)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5514, &type metadata for NavigationRotationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B9868);
  }
  return result;
}

unint64_t sub_1B214AE9C()
{
  unint64_t result;

  result = qword_1EEF64598;
  if (!qword_1EEF64598)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C54EC, &type metadata for NavigationRotationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF64598);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for _Navigation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B214AF2C + 4 * byte_1B22C4FE1[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B214AF60 + 4 * byte_1B22C4FDC[v4]))();
}

uint64_t sub_1B214AF60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B214AF68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B214AF70);
  return result;
}

uint64_t sub_1B214AF7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B214AF84);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B214AF88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B214AF90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _Navigation.CodingKeys()
{
  return &type metadata for _Navigation.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NavigationRotationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B214AFF8 + 4 * byte_1B22C4FEB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B214B02C + 4 * byte_1B22C4FE6[v4]))();
}

uint64_t sub_1B214B02C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B214B034(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B214B03CLL);
  return result;
}

uint64_t sub_1B214B048(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B214B050);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B214B054(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B214B05C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NavigationRotationMode()
{
  return &type metadata for NavigationRotationMode;
}

uint64_t storeEnumTagSinglePayload for Navigation.ScrollMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B214B0C4 + 4 * byte_1B22C4FF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B214B0F8 + 4 * byte_1B22C4FF0[v4]))();
}

uint64_t sub_1B214B0F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B214B100(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B214B108);
  return result;
}

uint64_t sub_1B214B114(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B214B11CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B214B120(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B214B128(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Navigation.ScrollMode()
{
  return &type metadata for Navigation.ScrollMode;
}

unint64_t sub_1B214B148()
{
  unint64_t result;

  result = qword_1EEF645A0;
  if (!qword_1EEF645A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5334, &type metadata for Navigation.ScrollMode);
    atomic_store(result, (unint64_t *)&qword_1EEF645A0);
  }
  return result;
}

unint64_t sub_1B214B190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF645A8;
  if (!qword_1EEF645A8)
  {
    sub_1B214B1D8();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF645A8);
  }
  return result;
}

void sub_1B214B1D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF645B0)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF645B0);
  }
}

unint64_t sub_1B214B230()
{
  unint64_t result;

  result = qword_1EEF645B8;
  if (!qword_1EEF645B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C540C, &type metadata for NavigationRotationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF645B8);
  }
  return result;
}

unint64_t sub_1B214B278()
{
  unint64_t result;

  result = qword_1EEF645C0;
  if (!qword_1EEF645C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C54C4, &type metadata for _Navigation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF645C0);
  }
  return result;
}

unint64_t sub_1B214B2C0()
{
  unint64_t result;

  result = qword_1ED4B7F48;
  if (!qword_1ED4B7F48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5434, &type metadata for _Navigation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7F48);
  }
  return result;
}

unint64_t sub_1B214B308()
{
  unint64_t result;

  result = qword_1ED4B7F40;
  if (!qword_1ED4B7F40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C545C, &type metadata for _Navigation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7F40);
  }
  return result;
}

unint64_t sub_1B214B34C()
{
  unint64_t result;

  result = qword_1ED4B9860;
  if (!qword_1ED4B9860)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5394, &type metadata for NavigationRotationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B9860);
  }
  return result;
}

void sub_1B214B390(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63AB248;
}

uint64_t sub_1B214B3A0()
{
  sub_1B214B9A0();
  return sub_1B2228A70();
}

uint64_t sub_1B214B3FC()
{
  sub_1B214B9A0();
  return sub_1B22289F8();
}

uint64_t sub_1B214B448(char *a1, char *a2)
{
  return sub_1B1F96DA0(*a1, *a2);
}

uint64_t sub_1B214B454()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B214B4DC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B214B540()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B214B5C4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B214B620(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x726F74636166;
  if (*v1)
    v2 = 0x6F69746365726964;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xED0000736978416ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B214B668()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F69746365726964;
  else
    return 0x726F74636166;
}

uint64_t sub_1B214B6AC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B214B70C()
{
  sub_1B214C97C();
  return sub_1B222A1D4();
}

uint64_t sub_1B214B734()
{
  sub_1B214C97C();
  return sub_1B222A1E0();
}

uint64_t sub_1B214B75C(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  sub_1B214C9C0(0, &qword_1EEF645F8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B214C97C();
  sub_1B222A180();
  v15 = 0;
  sub_1B2229934();
  if (!v2)
  {
    v14 = a2 & 1;
    v13 = 1;
    sub_1B1A71A64();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t type metadata accessor for OrientationOverVelocity.System()
{
  return objc_opt_self();
}

const char *sub_1B214B8BC()
{
  return "OrientationOverVelocity";
}

void sub_1B214B8D0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  float v5;

  v5 = sub_1B214C800(a1);
  if (!v2)
  {
    *(float *)a2 = v5;
    *(_BYTE *)(a2 + 4) = v4 & 1;
  }
}

uint64_t sub_1B214B900(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B214B75C(a1, *(_BYTE *)(v1 + 4));
}

uint64_t sub_1B214B91C()
{
  return type metadata accessor for OrientationOverVelocity.System();
}

void sub_1B214B938(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1065353216;
  *(_BYTE *)(a1 + 4) = 1;
}

uint64_t type metadata accessor for OrientationOverVelocity.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B214B970()
{
  return "OrientationOverVelocity.GPU";
}

uint64_t sub_1B214B984()
{
  return type metadata accessor for OrientationOverVelocity.GPUSystem();
}

unint64_t sub_1B214B9A0()
{
  unint64_t result;

  result = qword_1EEF645C8;
  if (!qword_1EEF645C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C57D8, &type metadata for OrientationOverVelocity.DirectionAxis);
    atomic_store(result, (unint64_t *)&qword_1EEF645C8);
  }
  return result;
}

uint64_t sub_1B214B9E4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD v17[2];
  char v18;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D17FE8(v3);
  swift_release();
  if ((v5 & 0xFF00000000) == 0x200000000)
    v6 = 1.0;
  else
    v6 = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0x200000000)
    v7 = 1;
  else
    v7 = BYTE4(v5) & 1;
  sub_1B1E52E10();
  v17[0] = v8;
  *(float *)&v17[1] = v6;
  v18 = v7;
  v9 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_orientation_over_velocity_uniforms(0);
    sub_1B1F40E1C((uint64_t)v17, 1, ObjectType, v11, v12, v13, v14, v15);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v9 == 0, 0, (uint64_t)a1, 0xD000000000000022, 0x80000001B234E100, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

uint64_t *sub_1B214BB08(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  _BOOL4 v6;
  float v7;
  float v8;
  float v9;
  __int128 v10;
  float v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  float32x4_t *v29;
  uint64_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x2_t v34;
  float v35;
  int32x4_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float v66;
  float32x2_t v67;
  float32x2_t v68;
  uint64_t v69;
  int32x2_t v70;
  int8x16_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v76;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  uint64_t v85;
  float32x4_t *v86;
  float32x4_t *v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x2_t v91;
  float v92;
  int32x4_t v93;
  float32x2_t v94;
  float32x2_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  int8x16_t v115;
  float v116;
  float v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float v122;
  float32x2_t v123;
  float32x2_t v124;
  uint64_t v125;
  int32x2_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x2_t v129;
  float32x2_t v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x4_t v136;
  char v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int32 v146;
  uint64_t v147;
  float32x4_t v148;
  __int32 v149;
  uint64_t v150;
  float32x4_t v151;
  float32x4_t v152;
  uint64_t v153;
  float32x4_t v154;
  float32x4_t v155;
  _OWORD v156[2];
  uint64_t v157;
  uint64_t v158[8];
  _OWORD v159[2];
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _OWORD v166[2];
  uint64_t v167;
  _OWORD v168[2];
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  _BYTE v173[48];

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  swift_retain_n();
  v4 = sub_1B1D17FE8(v2);
  swift_release();
  v5 = *(float *)&v4;
  if ((v4 & 0xFF00000000) == 0x200000000)
    v5 = 1.0;
  v6 = (v4 & 0x100000000) == 0 && (v4 & 0xFF00000000) != 0x200000000;
  v7 = 1.0 - fminf(fmaxf(v5, 0.0), 1.0);
  sub_1B1E5267C();
  v9 = powf(v7, v8 * 60.0);
  v10 = *(_OWORD *)(a1 + 104);
  v170 = *(_OWORD *)(a1 + 88);
  v171 = v10;
  v172 = *(_QWORD *)(a1 + 120);
  sub_1B19F1BD8((uint64_t)v156);
  v168[0] = v156[0];
  v168[1] = v156[1];
  v169 = v157;
  sub_1B1E8FCE4(v3, (uint64_t)v168, 0x200000000, v158);
  sub_1B1A18378((uint64_t)v158, (uint64_t)v159, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v159[0])
  {
    sub_1B19ED720((uint64_t)v156);
    return (uint64_t *)swift_release();
  }
  if (v165 <= 0 || (v143 = v162) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)v156);
    goto LABEL_66;
  }
  v11 = fminf(fmaxf(1.0 - v9, 0.0), 1.0);
  v12 = v164;
  v13 = v164[4];
  v14 = *(_BYTE *)(v163 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v166[0] = v159[0];
  v166[1] = v159[1];
  v167 = v160;
  v141 = (uint64_t)(v164 + 6);
  v142 = v161;
  v140 = v164 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v15 = 0;
  v16 = 0;
  v139 = v14;
  while (2)
  {
    v17 = (unsigned int *)(v142 + 48 * v15);
    v150 = *v17;
    v144 = v17[1];
    v145 = v15;
    v19 = (uint64_t *)*((_QWORD *)v17 + 2);
    v18 = *((_QWORD *)v17 + 3);
    v21 = *((_QWORD *)v17 + 4);
    v20 = *((_QWORD *)v17 + 5);
    v147 = v20;
    v153 = v16;
    if ((v14 & 1) != 0)
    {
      v22 = *(os_unfair_lock_s **)(v20 + 376);
      swift_retain_n();
      v23 = v22;
      v20 = v147;
      os_unfair_lock_lock(v23);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v147 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    v24 = v13;
    ecs_stack_allocator_push_snapshot(v13);
    sub_1B1A18378(v141, (uint64_t)v173, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v25 = v12[4];
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v12[6] = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    v12[7] = v26;
    v140[1] = 0;
    v140[2] = 0;
    *v140 = 0;
    swift_release();
    v27 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v19, v18, v21, (uint64_t)v12);
    v28 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v19, v18, v21, (uint64_t)v12);
    v29 = (float32x4_t *)v28;
    v148 = (float32x4_t)vdupq_n_s32(0x3F3504F3u);
    if (v19)
    {
      if (!v21)
      {
LABEL_38:
        v13 = v24;
        v14 = v139;
        v30 = v145;
        v16 = v153;
        goto LABEL_61;
      }
      v13 = v24;
      v30 = v145;
      v16 = v153;
      while (1)
      {
        v32 = (int8x16_t)vabsq_f32(*v29);
        if (*(float *)v32.i32 > 0.00000011921)
          break;
        v32.i32[0] = vextq_s8(v32, v32, 8uLL).u32[0];
        *(int32x2_t *)v32.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v32.i8);
        if ((v32.i8[4] & 1) == 0 || (v32.i8[0] & 1) == 0)
          break;
LABEL_18:
        ++v29;
        ++v27;
        if (!--v21)
          goto LABEL_60;
      }
      v151 = *v27;
      v154 = *v29;
      sub_1B200B468(*v27);
      if (v6)
      {
        *(float32x2_t *)v33.f32 = vsub_f32(0, v34);
        v33.f32[2] = 0.0 - v35;
        v33.i32[3] = 0;
      }
      else
      {
        v33.i32[3] = v149;
      }
      v36 = (int32x4_t)vmulq_f32(v154, v154);
      v36.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v36, 2), vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1))).u32[0];
      v37 = vrsqrte_f32((float32x2_t)v36.u32[0]);
      v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v37, v37)));
      v39 = vmulq_n_f32(v154, vmul_f32(v38, vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v38, v38))).f32[0]);
      v40 = vmulq_f32(v39, v39);
      v40.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u64[0];
      v41 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0);
      v41.i32[3] = 0;
      v42 = vrsqrteq_f32(v41);
      v43 = vmulq_f32(v42, vrsqrtsq_f32(v41, vmulq_f32(v42, v42)));
      v44 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v40.f32[0] != 0.0)), 0x1FuLL));
      v44.i32[3] = 0;
      v45 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v44), (int8x16_t)vmulq_f32(v39, vmulq_f32(v43, vrsqrtsq_f32(v41, vmulq_f32(v43, v43)))), (int8x16_t)v39);
      v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
      v47 = vmlaq_f32(vmulq_f32(v46, vnegq_f32(v33)), v45, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL));
      v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL);
      v49 = vmulq_f32(v47, v47);
      v49.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), v49)).u64[0];
      v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0);
      v50.i32[3] = 0;
      v51 = vrsqrteq_f32(v50);
      v52 = vmulq_f32(v51, vrsqrtsq_f32(v50, vmulq_f32(v51, v51)));
      v53 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v49.f32[0] != 0.0)), 0x1FuLL));
      v53.i32[3] = 0;
      v54 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v53), (int8x16_t)vmulq_f32(vmulq_f32(v52, vrsqrtsq_f32(v50, vmulq_f32(v52, v52))), v48), vextq_s8(vextq_s8((int8x16_t)v45, (int8x16_t)v45, 0xCuLL), (int8x16_t)v45, 8uLL));
      v55 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL), vnegq_f32(v45)), v54, v46);
      v56 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL);
      v57 = (int32x4_t)vmulq_f32(v55, v55);
      v57.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v57, 2), *(float32x2_t *)v57.i8)).u32[0];
      *(float32x2_t *)v43.f32 = vrsqrte_f32((float32x2_t)v57.u32[0]);
      *(float32x2_t *)v43.f32 = vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32)));
      v58 = (int8x16_t)vmulq_n_f32(v56, vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32))).f32[0]);
      v59 = v45.f32[2] + (float)(v54.f32[0] + *(float *)&v58.i32[1]);
      if (v59 > 0.0)
      {
        v60 = sqrtf(v59 + 1.0);
        v61 = (float32x4_t)vzip1q_s32((int32x4_t)v54, (int32x4_t)v45);
        v61.i32[0] = v58.i32[2];
        v62 = (float32x4_t)vtrn2q_s32((int32x4_t)v45, vzip2q_s32((int32x4_t)v45, (int32x4_t)v54));
        v62.i32[2] = v58.i32[0];
        v64 = vsubq_f32(v61, v62);
        v61.f32[3] = v60;
        v62.f32[3] = v60;
        v63 = vmulq_f32(v61, v62);
        v64.i32[3] = v63.i32[3];
LABEL_27:
        v63.f32[0] = 0.5 / v60;
        v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 0);
LABEL_34:
        _Q1 = vmulq_f32(v64, v65);
        if (v6)
        {
          _Q4 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q1, (float32x4_t)xmmword_1B22C55B0), (float32x4_t)xmmword_1B22C55A0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL));
          v76 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), _Q4, 0xCuLL);
          _Q4.i32[0] = 1060439283;
          __asm { FMLA            S2, S4, V1.S[3] }
          _Q1 = vaddq_f32(vmlaq_laneq_f32(vmulq_f32(_Q1, v148), (float32x4_t)xmmword_1B22C55A0, _Q1, 3), v76);
          _Q1.i32[3] = _S2;
        }
        sub_1B1BE4440(v151, _Q1, v11);
        *v27 = v31;
        goto LABEL_18;
      }
      if (v54.f32[0] < v45.f32[2] || v54.f32[0] < *(float *)&v58.i32[1])
      {
        if (*(float *)&v58.i32[1] <= v45.f32[2])
        {
          v82.i32[0] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u32[0];
          v82.i32[1] = v58.i32[2];
          v60 = sqrtf((float)((float)(v45.f32[2] + 1.0) - v54.f32[0]) - *(float *)&v58.i32[1]);
          v83 = (float32x2_t)__PAIR64__(v54.u32[1], LODWORD(v60));
          v84 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 0);
          *(float32x2_t *)v63.f32 = vsub_f32(*(float32x2_t *)v54.f32, v84);
          v84.f32[0] = v60;
          v84.i32[0] = vmul_f32(v83, v84).u32[0];
          v84.i32[1] = v63.i32[1];
          *(float32x2_t *)v64.f32 = vadd_f32(*(float32x2_t *)v45.f32, v82);
          *(float32x2_t *)&v64.u32[2] = v84;
          goto LABEL_27;
        }
        v66 = sqrtf((float)((float)(*(float *)&v58.i32[1] + 1.0) - v54.f32[0]) - v45.f32[2]);
        v71 = (int8x16_t)v45;
        *(float *)v71.i32 = v66;
        v72 = (float32x2_t)vdup_laneq_s32((int32x4_t)v58, 2);
        *(float *)v58.i32 = v54.f32[1] + *(float *)v58.i32;
        v73 = vadd_f32(*(float32x2_t *)v45.f32, v72);
        v72.f32[0] = v66;
        v71.i32[0] = vmul_f32(*(float32x2_t *)v71.i8, v72).u32[0];
        v71.i32[1] = v73.i32[1];
        v70 = (int32x2_t)vsubq_f32(v45, (float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2)).u64[0];
        v65 = (float32x4_t)vextq_s8(vextq_s8(v58, v58, 4uLL), v71, 0xCuLL);
        v65.i32[3] = v70.i32[0];
      }
      else
      {
        v66 = sqrtf((float)((float)(v54.f32[0] + 1.0) - *(float *)&v58.i32[1]) - v45.f32[2]);
        v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v58.i8, 0);
        v68 = vadd_f32(*(float32x2_t *)v54.f32, v67);
        v67.f32[0] = v66;
        v65.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v54.u32[1], LODWORD(v66)), v67).u32[0];
        v65.i32[1] = v68.i32[1];
        LODWORD(v69) = vadd_f32(*(float32x2_t *)v45.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL)).u32[0];
        v70 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(v58.u32[2], v45.u32[0]), *(float32x2_t *)v45.f32);
        HIDWORD(v69) = v70.i32[1];
        v65.i64[1] = v69;
      }
      *(float *)v70.i32 = 0.5 / v66;
      v64 = (float32x4_t)vdupq_lane_s32(v70, 0);
      goto LABEL_34;
    }
    if ((_DWORD)v150 == (_DWORD)v144)
      goto LABEL_38;
    v85 = v144 - v150;
    v86 = (float32x4_t *)(v28 + 16 * v150);
    v87 = &v27[v150];
    v13 = v24;
    v30 = v145;
    v16 = v153;
    do
    {
      v89 = (int8x16_t)vabsq_f32(*v86);
      if (*(float *)v89.i32 <= 0.00000011921)
      {
        v89.i32[0] = vextq_s8(v89, v89, 8uLL).u32[0];
        *(int32x2_t *)v89.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v89.i8);
        if ((v89.i8[4] & 1) != 0 && (v89.i8[0] & 1) != 0)
          goto LABEL_41;
      }
      v152 = *v87;
      v155 = *v86;
      sub_1B200B468(*v87);
      if (v6)
      {
        *(float32x2_t *)v90.f32 = vsub_f32(0, v91);
        v90.f32[2] = 0.0 - v92;
        v90.i32[3] = 0;
      }
      else
      {
        v90.i32[3] = v146;
      }
      v93 = (int32x4_t)vmulq_f32(v155, v155);
      v93.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v93, 2), vadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v93.i8, 1))).u32[0];
      v94 = vrsqrte_f32((float32x2_t)v93.u32[0]);
      v95 = vmul_f32(v94, vrsqrts_f32((float32x2_t)v93.u32[0], vmul_f32(v94, v94)));
      v96 = vmulq_n_f32(v155, vmul_f32(v95, vrsqrts_f32((float32x2_t)v93.u32[0], vmul_f32(v95, v95))).f32[0]);
      v97 = vmulq_f32(v96, v96);
      v97.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 2), vaddq_f32(v97, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 1))).u64[0];
      v98 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 0);
      v98.i32[3] = 0;
      v99 = vrsqrteq_f32(v98);
      v100 = vmulq_f32(v99, vrsqrtsq_f32(v98, vmulq_f32(v99, v99)));
      v101 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v97.f32[0] != 0.0)), 0x1FuLL));
      v101.i32[3] = 0;
      v102 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v101), (int8x16_t)vmulq_f32(v96, vmulq_f32(v100, vrsqrtsq_f32(v98, vmulq_f32(v100, v100)))), (int8x16_t)v96);
      v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), (int8x16_t)v102, 0xCuLL);
      v104 = vmlaq_f32(vmulq_f32(v103, vnegq_f32(v90)), v102, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL));
      v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL);
      v106 = vmulq_f32(v104, v104);
      v106.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), v106)).u64[0];
      v107 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 0);
      v107.i32[3] = 0;
      v108 = vrsqrteq_f32(v107);
      v109 = vmulq_f32(v108, vrsqrtsq_f32(v107, vmulq_f32(v108, v108)));
      v110 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v106.f32[0] != 0.0)), 0x1FuLL));
      v110.i32[3] = 0;
      v111 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v110), (int8x16_t)vmulq_f32(vmulq_f32(v109, vrsqrtsq_f32(v107, vmulq_f32(v109, v109))), v105), vextq_s8(vextq_s8((int8x16_t)v102, (int8x16_t)v102, 0xCuLL), (int8x16_t)v102, 8uLL));
      v112 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v111, (int32x4_t)v111), (int8x16_t)v111, 0xCuLL), vnegq_f32(v102)), v111, v103);
      v113 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL);
      v114 = (int32x4_t)vmulq_f32(v112, v112);
      v114.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v114.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v114, 2), *(float32x2_t *)v114.i8)).u32[0];
      *(float32x2_t *)v100.f32 = vrsqrte_f32((float32x2_t)v114.u32[0]);
      *(float32x2_t *)v100.f32 = vmul_f32(*(float32x2_t *)v100.f32, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32)));
      v115 = (int8x16_t)vmulq_n_f32(v113, vmul_f32(*(float32x2_t *)v100.f32, vrsqrts_f32((float32x2_t)v114.u32[0], vmul_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32))).f32[0]);
      v116 = v102.f32[2] + (float)(v111.f32[0] + *(float *)&v115.i32[1]);
      if (v116 > 0.0)
      {
        v117 = sqrtf(v116 + 1.0);
        v118 = (float32x4_t)vzip1q_s32((int32x4_t)v111, (int32x4_t)v102);
        v118.i32[0] = v115.i32[2];
        v119 = (float32x4_t)vtrn2q_s32((int32x4_t)v102, vzip2q_s32((int32x4_t)v102, (int32x4_t)v111));
        v119.i32[2] = v115.i32[0];
        v121 = vsubq_f32(v118, v119);
        v118.f32[3] = v117;
        v119.f32[3] = v117;
        v120 = vmulq_f32(v118, v119);
        v121.i32[3] = v120.i32[3];
LABEL_57:
        v120.f32[0] = 0.5 / v117;
        v127 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v120.f32, 0);
        goto LABEL_58;
      }
      if (v111.f32[0] < v102.f32[2] || v111.f32[0] < *(float *)&v115.i32[1])
      {
        if (*(float *)&v115.i32[1] <= v102.f32[2])
        {
          v131.i32[0] = vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL).u32[0];
          v131.i32[1] = v115.i32[2];
          v117 = sqrtf((float)((float)(v102.f32[2] + 1.0) - v111.f32[0]) - *(float *)&v115.i32[1]);
          v132 = (float32x2_t)__PAIR64__(v111.u32[1], LODWORD(v117));
          v133 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.i8, 0);
          *(float32x2_t *)v120.f32 = vsub_f32(*(float32x2_t *)v111.f32, v133);
          v133.f32[0] = v117;
          v133.i32[0] = vmul_f32(v132, v133).u32[0];
          v133.i32[1] = v120.i32[1];
          *(float32x2_t *)v121.f32 = vadd_f32(*(float32x2_t *)v102.f32, v131);
          *(float32x2_t *)&v121.u32[2] = v133;
          goto LABEL_57;
        }
        v122 = sqrtf((float)((float)(*(float *)&v115.i32[1] + 1.0) - v111.f32[0]) - v102.f32[2]);
        v128 = (int8x16_t)v102;
        *(float *)v128.i32 = v122;
        v129 = (float32x2_t)vdup_laneq_s32((int32x4_t)v115, 2);
        *(float *)v115.i32 = v111.f32[1] + *(float *)v115.i32;
        v130 = vadd_f32(*(float32x2_t *)v102.f32, v129);
        v129.f32[0] = v122;
        v128.i32[0] = vmul_f32(*(float32x2_t *)v128.i8, v129).u32[0];
        v128.i32[1] = v130.i32[1];
        v126 = (int32x2_t)vsubq_f32(v102, (float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 2)).u64[0];
        v127 = (float32x4_t)vextq_s8(vextq_s8(v115, v115, 4uLL), v128, 0xCuLL);
        v127.i32[3] = v126.i32[0];
      }
      else
      {
        v122 = sqrtf((float)((float)(v111.f32[0] + 1.0) - *(float *)&v115.i32[1]) - v102.f32[2]);
        v123 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v115.i8, 0);
        v124 = vadd_f32(*(float32x2_t *)v111.f32, v123);
        v123.f32[0] = v122;
        v127.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v111.u32[1], LODWORD(v122)), v123).u32[0];
        v127.i32[1] = v124.i32[1];
        LODWORD(v125) = vadd_f32(*(float32x2_t *)v102.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v111, (int8x16_t)v111, 8uLL)).u32[0];
        v126 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(v115.u32[2], v102.u32[0]), *(float32x2_t *)v102.f32);
        HIDWORD(v125) = v126.i32[1];
        v127.i64[1] = v125;
      }
      *(float *)v126.i32 = 0.5 / v122;
      v121 = (float32x4_t)vdupq_lane_s32(v126, 0);
LABEL_58:
      _Q1 = vmulq_f32(v121, v127);
      if (v6)
      {
        _Q4 = (int8x16_t)vmlaq_f32(vmulq_f32(_Q1, (float32x4_t)xmmword_1B22C55B0), (float32x4_t)xmmword_1B22C55A0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL));
        v136 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), _Q4, 0xCuLL);
        _Q4.i32[0] = 1060439283;
        __asm { FMLA            S2, S4, V1.S[3] }
        _Q1 = vaddq_f32(vmlaq_laneq_f32(vmulq_f32(_Q1, v148), (float32x4_t)xmmword_1B22C55A0, _Q1, 3), v136);
        _Q1.i32[3] = _S2;
      }
      sub_1B1BE4440(v152, _Q1, v11);
      *v87 = v88;
LABEL_41:
      ++v86;
      ++v87;
      --v85;
    }
    while (v85);
LABEL_60:
    v14 = v139;
LABEL_61:
    sub_1B1F05D48(v12, (unsigned __int16 **)v166, (uint64_t)v173);
    sub_1B1F03804((char *)v147);
    ecs_stack_allocator_pop_snapshot(v13);
    if ((v14 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v147 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v147 + 376));
    }
    swift_release();
    v15 = v30 + 1;
    if (v15 != v143)
      continue;
    break;
  }
  sub_1B19ED720((uint64_t)v156);
LABEL_66:
  swift_release();
  sub_1B19ED748(v158);
  return sub_1B19ED748(v158);
}

uint64_t getEnumTagSinglePayload for OrientationOverVelocity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for OrientationOverVelocity()
{
  return &type metadata for OrientationOverVelocity;
}

ValueMetadata *type metadata accessor for OrientationOverVelocity.DirectionAxis()
{
  return &type metadata for OrientationOverVelocity.DirectionAxis;
}

unint64_t sub_1B214C758()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF645D0;
  if (!qword_1EEF645D0)
  {
    sub_1B1A02758(255, &qword_1EEF645D8, (uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF645D0);
  }
  return result;
}

unint64_t sub_1B214C7BC()
{
  unint64_t result;

  result = qword_1EEF645E0;
  if (!qword_1EEF645E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5730, &type metadata for OrientationOverVelocity.DirectionAxis);
    atomic_store(result, (unint64_t *)&qword_1EEF645E0);
  }
  return result;
}

float sub_1B214C800(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  uint64_t v12;
  char v13;
  char v14;

  sub_1B214C9C0(0, &qword_1EEF645E8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B214C97C();
  sub_1B222A150();
  if (!v1)
  {
    v14 = 0;
    sub_1B22297F0();
    v2 = v10;
    v13 = 1;
    sub_1B1A71A20();
    sub_1B22297B4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B214C97C()
{
  unint64_t result;

  result = qword_1EEF645F0;
  if (!qword_1EEF645F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C592C, &type metadata for OrientationOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF645F0);
  }
  return result;
}

void sub_1B214C9C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B214C97C();
    v7 = a3(a1, &type metadata for OrientationOverVelocity.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t _s3VFX23OrientationOverVelocityV13DirectionAxisOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B214CA68 + 4 * byte_1B22C55C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B214CA9C + 4 * byte_1B22C55C0[v4]))();
}

uint64_t sub_1B214CA9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B214CAA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B214CAACLL);
  return result;
}

uint64_t sub_1B214CAB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B214CAC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B214CAC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B214CACC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OrientationOverVelocity.CodingKeys()
{
  return &type metadata for OrientationOverVelocity.CodingKeys;
}

unint64_t sub_1B214CAEC()
{
  unint64_t result;

  result = qword_1EEF64600;
  if (!qword_1EEF64600)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5904, &type metadata for OrientationOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64600);
  }
  return result;
}

unint64_t sub_1B214CB34()
{
  unint64_t result;

  result = qword_1EEF64608;
  if (!qword_1EEF64608)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C583C, &type metadata for OrientationOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64608);
  }
  return result;
}

unint64_t sub_1B214CB7C()
{
  unint64_t result;

  result = qword_1EEF64610;
  if (!qword_1EEF64610)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5864, &type metadata for OrientationOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64610);
  }
  return result;
}

uint64_t sub_1B214CBC0()
{
  return 1701667182;
}

uint64_t sub_1B214CBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B214CC54()
{
  sub_1B214E064();
  return sub_1B222A1D4();
}

uint64_t sub_1B214CC7C()
{
  sub_1B214E064();
  return sub_1B222A1E0();
}

uint64_t sub_1B214CCA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  sub_1B214E0A8(0, &qword_1EEF64638, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B214E064();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v11 = sub_1B22297CC();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v11;
  a2[1] = v13;
  return result;
}

uint64_t sub_1B214CDD0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B214E0A8(0, &qword_1EEF64648, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B214E064();
  sub_1B222A180();
  sub_1B2229910();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

id sub_1B214CEC4(uint64_t a1, uint64_t a2)
{
  id *v2;
  id *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t inited;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  _QWORD *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  id *v47;
  char isUniquelyReferenced_nonNull_native;
  void *v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  void *v63;
  unint64_t v64;
  void *v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, unint64_t);
  uint64_t v73;
  void (*v74)(char *, uint64_t, unint64_t);
  uint64_t v75;
  char *v76;
  void *v77;
  void *v78;
  id v79;
  void *v80;
  void *v81;
  uint64_t v82;
  id v83;
  unint64_t v84;
  id *v86;
  char v87;
  uint64_t v88;
  id *v89;
  char v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  id *v94;
  void (*v95)(uint64_t, unint64_t);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  id v108;
  uint64_t v109;
  id v110;
  unint64_t v111;
  uint64_t v112;

  v3 = v2;
  v112 = *MEMORY[0x1E0C80C00];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v107 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v105 = (uint64_t)&v91 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v106 = (char *)&v91 - v14;
  v15 = sub_1B2228110();
  v109 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *v2;
  if (!v19[2])
  {
LABEL_5:
    v23 = (uint64_t)v3[2];
    if (v23)
    {
      v100 = v15;
      v92 = v18;
      v94 = v3;
      v24 = objc_allocWithZone(MEMORY[0x1E0CC6C40]);
      swift_unknownObjectRetain();
      v108 = objc_msgSend(v24, sel_initWithDevice_, v23);
      sub_1B1791524(0, &qword_1EEF64620, (uint64_t (*)(uint64_t))sub_1B214DF70, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B226E100;
      v26 = (void *)*MEMORY[0x1E0CC6BF8];
      *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CC6BF8];
      v27 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      v93 = v23;
      v28 = v27;
      v29 = v26;
      v30 = objc_msgSend(v28, sel_initWithBool_, 1);
      v31 = (void *)*MEMORY[0x1E0CC6C18];
      *(_QWORD *)(inited + 40) = v30;
      *(_QWORD *)(inited + 48) = v31;
      v32 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      v33 = v31;
      v34 = objc_msgSend(v32, sel_initWithUnsignedInteger_, 1);
      v35 = (void *)*MEMORY[0x1E0CC6C10];
      *(_QWORD *)(inited + 56) = v34;
      *(_QWORD *)(inited + 64) = v35;
      v36 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      v37 = v35;
      *(_QWORD *)(inited + 72) = objc_msgSend(v36, sel_initWithUnsignedInteger_, 2);
      v38 = sub_1B1B819CC(inited);
      v39 = (void *)sub_1B2228728();
      v40 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
      sub_1B1BADCE0((uint64_t)v38);
      type metadata accessor for Option(0);
      v42 = v41;
      v43 = sub_1B214DFDC();
      v44 = MEMORY[0x1E0DEE9B8];
      v45 = (void *)sub_1B2228524();
      swift_bridgeObjectRelease();
      v110 = 0;
      v22 = objc_msgSend(v108, sel_newTextureWithName_scaleFactor_bundle_options_error_, v39, v40, v45, &v110, 1.0);

      v46 = v110;
      if (v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        v47 = v94;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v110 = *v47;
        *v47 = (id)0x8000000000000000;
        sub_1B1B84668((uint64_t)v22, a1, a2, isUniquelyReferenced_nonNull_native);
        *v47 = v110;

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      v49 = v46;
      v104 = v43;
      v101 = v42;
      v50 = (void *)sub_1B2227FB4();

      swift_willThrow();
      v51 = (unint64_t)v94[1];
      if (v51 >> 62)
      {
        swift_bridgeObjectRetain();
        v52 = sub_1B22296AC();
      }
      else
      {
        v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      v53 = v100;
      if (v52)
      {
        v54 = 0;
        v100 = v51 & 0xC000000000000001;
        v99 = v44 + 8;
        v97 = a2;
        v98 = v51;
        v96 = v52;
        v103 = a1;
        v102 = v38;
        while (1)
        {
          if (v100)
            v56 = (id)MEMORY[0x1B5E21018](v54, v51);
          else
            v56 = *(id *)(v51 + 8 * v54 + 32);
          v57 = v56;
          v58 = v108;
          v59 = (void *)sub_1B2228728();
          v60 = v57;
          sub_1B1BADCE0((uint64_t)v38);
          v61 = (void *)sub_1B2228524();
          swift_bridgeObjectRelease();
          v110 = 0;
          v22 = objc_msgSend(v58, sel_newTextureWithName_scaleFactor_bundle_options_error_, v59, v60, v61, &v110, 1.0);

          v62 = v110;
          if (v22)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            v86 = v94;
            v87 = swift_isUniquelyReferenced_nonNull_native();
            v110 = *v86;
            *v86 = (id)0x8000000000000000;
            sub_1B1B84668((uint64_t)v22, v103, a2, v87);
            *v86 = v110;

            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_8;
          }
          v63 = v62;
          v64 = v53;
          v65 = (void *)sub_1B2227FB4();

          swift_willThrow();
          v66 = objc_msgSend(v60, sel_resourceURL);
          if (v66)
          {
            v67 = v66;
            v68 = (uint64_t)v107;
            sub_1B22280C8();

            v69 = v109;
            v70 = *(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v109 + 56);
            v70(v68, 0, 1, v64);
          }
          else
          {
            v69 = v109;
            v70 = *(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v109 + 56);
            v68 = (uint64_t)v107;
            v70((uint64_t)v107, 1, 1, v64);
          }
          v71 = v105;
          sub_1B1F55C64(v68, v105, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
          v72 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v69 + 48);
          if (v72(v71, 1, v64) == 1)
            break;
          v55 = (uint64_t)v106;
          sub_1B22280A4();
          v73 = v109;
          v95 = *(void (**)(uint64_t, unint64_t))(v109 + 8);
          v95(v71, v64);
          v70(v55, 0, 1, v64);
          if (v72(v55, 1, v64) == 1)
            goto LABEL_14;
          v74 = *(void (**)(char *, uint64_t, unint64_t))(v73 + 32);
          v75 = v55;
          v76 = v92;
          v53 = v64;
          v74(v92, v75, v64);
          v77 = (void *)sub_1B2228074();
          sub_1B1BADCE0((uint64_t)v102);
          v44 = MEMORY[0x1E0DEE9B8];
          v78 = (void *)sub_1B2228524();
          swift_bridgeObjectRelease();
          v110 = 0;
          v22 = objc_msgSend(v108, sel_newTextureWithContentsOfURL_options_error_, v77, v78, &v110);

          v79 = v110;
          if (v22)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v88 = v97;
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            v89 = v94;
            v90 = swift_isUniquelyReferenced_nonNull_native();
            v110 = *v89;
            *v89 = (id)0x8000000000000000;
            sub_1B1B84668((uint64_t)v22, v103, v88, v90);
            *v89 = v110;
            swift_unknownObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v95((uint64_t)v76, v64);
            return v22;
          }
          v80 = v79;
          v81 = (void *)sub_1B2227FB4();

          swift_willThrow();
          v95((uint64_t)v76, v64);

LABEL_15:
          v51 = v98;
          ++v54;
          a2 = v97;
          v38 = v102;
          if (v96 == v54)
            goto LABEL_27;
        }
        sub_1B19EC9A4(v71);
        v55 = (uint64_t)v106;
        v70((uint64_t)v106, 1, 1, v64);
LABEL_14:

        sub_1B19EC9A4(v55);
        v53 = v64;
        v44 = MEMORY[0x1E0DEE9B8];
        goto LABEL_15;
      }
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B1A02758(0, &qword_1ED4BAFF0, v44 + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v82 = swift_allocObject();
      *(_OWORD *)(v82 + 16) = xmmword_1B226D240;
      v110 = 0;
      v111 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v110 = (id)0xD00000000000001DLL;
      v111 = 0x80000001B234E190;
      sub_1B2228890();
      v83 = v110;
      v84 = v111;
      *(_QWORD *)(v82 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v82 + 32) = v83;
      *(_QWORD *)(v82 + 40) = v84;
      sub_1B222A048();
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  v20 = sub_1B1DC3B00(a1, a2);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v22 = *(id *)(v19[7] + 8 * v20);
  swift_unknownObjectRetain();
LABEL_8:
  swift_bridgeObjectRelease();
  return v22;
}

_QWORD *sub_1B214D8F8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1B214DE80();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_1B214D920(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    v3 = result;
    v4 = *(_QWORD **)(result + 176);
    MEMORY[0x1E0C80A78](result, a2);
    swift_retain();
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for AssetCatalog, (uint64_t)&off_1E63744F8, v4, (void (*)(uint64_t))sub_1B1D66DE4);
    swift_release();
    v5 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
    swift_getObjectType();
    v7 = sub_1B204D6E4();
    v8 = *(os_unfair_lock_s **)(v6 + 40);
    swift_retain_n();
    os_unfair_lock_lock(v8);
    sub_1B1E8F784(v3, v5);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1E8FAC0(v3, v7, v5);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 40));
    swift_release();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1B214DA88(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    MEMORY[0x1E0C80A78](v2, v4);
    swift_retain();
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for AssetCatalog, (uint64_t)&off_1E63744F8, v3, (void (*)(uint64_t))sub_1B1B6932C);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B214DB64(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    MEMORY[0x1E0C80A78](v2, v4);
    swift_retain();
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for AssetCatalog, (uint64_t)&off_1E63744F8, v3, (void (*)(uint64_t))sub_1B1D66DE4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *sub_1B214DC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t *result;
  uint64_t v8[12];
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;

  v6 = *(_OWORD *)(a3 + 32);
  v31[0] = *(_OWORD *)(a3 + 16);
  v31[1] = v6;
  v32 = *(_QWORD *)(a3 + 48);
  sub_1B1E8FCE4(a2, (uint64_t)v31, 0x200000000, v8);
  result = (uint64_t *)sub_1B1F55C64((uint64_t)v8, (uint64_t)&v9, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  if (v9)
  {
    v20 = v9;
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v24 = v13;
    v25 = v14;
    v26 = v15;
    v27 = v16;
    v28 = v17;
    v29 = v18;
    v30 = v19;
    swift_retain();
    sub_1B219FA94((uint64_t)&v20, a1, a4);
    swift_release();
    return sub_1B19ED748(v8);
  }
  return result;
}

uint64_t type metadata accessor for AssetCatalogSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for TextureNamedAsset()
{
  return &type metadata for TextureNamedAsset;
}

uint64_t sub_1B214DD80()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v11 = qword_1ED4D09F8;
  v12 = 0;
  v13 = 2;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  swift_retain();
  sub_1B1E3C9FC(1, (uint64_t)&v6);
  swift_release();
  v1 = v7;
  v2 = v8;
  v3 = v10;
  v4 = v9 | 4;
  *(_QWORD *)(v0 + 16) = v6;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  return v0;
}

const char *sub_1B214DE5C()
{
  return "AssetCatalogSystem";
}

uint64_t *sub_1B214DE74(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B214DC40(a1, v1[2], v1[3], v1[4]);
}

_QWORD *sub_1B214DE80()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  id v3;
  uint64_t v5;

  v0 = MEMORY[0x1E0DEE9D8];
  v1 = sub_1B1B7E998(MEMORY[0x1E0DEE9D8]);
  v5 = v0;
  v2 = (void *)sub_1B2228728();
  v3 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v2);

  MEMORY[0x1B5E2064C]();
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  return v1;
}

void sub_1B214DF70()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF64628)
  {
    type metadata accessor for Option(255);
    sub_1B1E4C9CC();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF64628);
  }
}

unint64_t sub_1B214DFDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5BD00;
  if (!qword_1EEF5BD00)
  {
    type metadata accessor for Option(255);
    result = MEMORY[0x1B5E23E74](&unk_1B226C3AC, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5BD00);
  }
  return result;
}

uint64_t sub_1B214E024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v3;
  return result;
}

unint64_t sub_1B214E064()
{
  unint64_t result;

  result = qword_1EEF64640;
  if (!qword_1EEF64640)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5B78, &type metadata for TextureNamedAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64640);
  }
  return result;
}

void sub_1B214E0A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B214E064();
    v7 = a3(a1, &type metadata for TextureNamedAsset.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for TextureNamedAsset.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B214E144 + 4 * byte_1B22C5980[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B214E164 + 4 * byte_1B22C5985[v4]))();
}

_BYTE *sub_1B214E144(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B214E164(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B214E16C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B214E174(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B214E17C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B214E184(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TextureNamedAsset.CodingKeys()
{
  return &type metadata for TextureNamedAsset.CodingKeys;
}

uint64_t destroy for AssetCatalog()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

_QWORD *_s3VFX12AssetCatalogVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AssetCatalog(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for AssetCatalog(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AssetCatalog()
{
  return &type metadata for AssetCatalog;
}

unint64_t sub_1B214E2F4()
{
  unint64_t result;

  result = qword_1EEF64650;
  if (!qword_1EEF64650)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5B50, &type metadata for TextureNamedAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64650);
  }
  return result;
}

unint64_t sub_1B214E33C()
{
  unint64_t result;

  result = qword_1EEF64658;
  if (!qword_1EEF64658)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5AC0, &type metadata for TextureNamedAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64658);
  }
  return result;
}

unint64_t sub_1B214E384()
{
  unint64_t result;

  result = qword_1EEF64660;
  if (!qword_1EEF64660)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5AE8, &type metadata for TextureNamedAsset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64660);
  }
  return result;
}

uint64_t sub_1B214E3CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B214E3E8()
{
  sub_1B2228830();
  sub_1B2228854();
  return sub_1B2228974();
}

uint64_t sub_1B214E490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v9 = a8;
  v11 = a9;
  v12 = *(_QWORD *)(a7 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    v15 = a7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v15 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v9 = a8;
    v11 = a9;
  }
  if (a6)
  {
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v16 = sub_1B1BC8628(v9, v11);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    sub_1B2228890();
    v18 = *(_QWORD *)(v16 + 16) - 1;
    swift_bridgeObjectRetain();
    v19 = (uint64_t *)(v16 + 56);
    do
    {
      v20 = *v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      if (v18)
        sub_1B2228890();
      swift_bridgeObjectRelease();
      if (v20)
      {
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        swift_bridgeObjectRelease();
      }
      sub_1B2228890();
      sub_1B1B567DC(4);
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v19 += 4;
      --v18;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0;
}

uint64_t sub_1B214E740(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  sub_1B2228890();
  v7 = sub_1B2228890();
  v8 = a3(v7);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + 56;
    do
    {
      v10 += 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1B567DC(4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  v11 = sub_1B2228890();
  v12 = a5(v11);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v13, 0);
    v14 = v12 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = sub_1B1B567DC(4);
      v17 = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(v23 + 16);
      v18 = *(_QWORD *)(v23 + 24);
      if (v19 >= v18 >> 1)
        sub_1B2029FFC(v18 > 1, v19 + 1, 1);
      v14 += 32;
      *(_QWORD *)(v23 + 16) = v19 + 1;
      v20 = v23 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v17;
      --v13;
    }
    while (v13);
  }
  sub_1B19FA1DC();
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRelease();
  if (v21)
  {
    sub_1B2228890();
    sub_1B2228890();
  }
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 673212009;
}

uint64_t sub_1B214E9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B214ECA4(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1B1B519E0);
}

uint64_t sub_1B214E9D8(uint64_t a1, uint64_t a2)
{
  return sub_1B214EFAC(a1, a2, (uint64_t (*)(uint64_t))sub_1B1B5351C);
}

uint64_t sub_1B214E9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t))
{
  uint64_t (*v8)(uint64_t);
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v8 = a8;
  v10 = *(_QWORD *)(a7 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v13 = a7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v13 += 16;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v8 = a8;
  }
  if (a6)
  {
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  v14 = swift_bridgeObjectRelease();
  v15 = v8(v14);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    sub_1B2228890();
    v17 = *(_QWORD *)(v15 + 16) - 1;
    swift_bridgeObjectRetain();
    v18 = (uint64_t *)(v15 + 56);
    do
    {
      v19 = *v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      if (v17)
        sub_1B2228890();
      swift_bridgeObjectRelease();
      if (v19)
      {
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        swift_bridgeObjectRelease();
      }
      sub_1B2228890();
      sub_1B1B567DC(4);
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v18 += 4;
      --v17;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0;
}

uint64_t sub_1B214EC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B214ECA4(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1B1B52490);
}

uint64_t sub_1B214EC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B214ECA4(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1B1B52C40);
}

uint64_t sub_1B214ECA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  sub_1B2228890();
  sub_1B2228890();
  v6 = a4(a3);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    sub_1B2228890();
    v8 = v6 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = sub_1B2228914();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      if ((v9 & 1) == 0)
      {
        sub_1B1B567DC(4);
        swift_bridgeObjectRelease();
      }
      sub_1B2228890();
      v8 += 32;
      swift_bridgeObjectRelease();
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0x20746375727473;
}

uint64_t sub_1B214EE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = *(_QWORD *)(a1 + 8 * v3 + 32);
    v6 = *(_QWORD *)(v5 + 16);
    v7 = v4[2];
    v8 = v7 + v6;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v8 <= v4[3] >> 1)
    {
      if (!*(_QWORD *)(v5 + 16))
        goto LABEL_3;
    }
    else
    {
      if (v7 <= v8)
        v10 = v7 + v6;
      else
        v10 = v7;
      v4 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v10, 1, v4);
      if (!*(_QWORD *)(v5 + 16))
        goto LABEL_3;
    }
    v11 = (unint64_t)&v4[4 * v4[2] + 4];
    if (v5 + 32 < v11 + 32 * v6 && v11 < v5 + 32 + 32 * v6)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
    if (v6)
      v4[2] += v6;
LABEL_3:
    swift_bridgeObjectRelease();
    ++v3;
  }
  while (v1 != v3);
  swift_bridgeObjectRelease();
  return (uint64_t)v4;
}

uint64_t sub_1B214EFA0(uint64_t a1, uint64_t a2)
{
  return sub_1B214EFAC(a1, a2, (uint64_t (*)(uint64_t))sub_1B1B57268);
}

uint64_t sub_1B214EFAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  sub_1B2228890();
  v4 = sub_1B2228890();
  v5 = a3(v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    sub_1B2228890();
    v7 = v5 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8 = sub_1B2228914();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      if ((v8 & 1) == 0)
      {
        sub_1B1B567DC(4);
        swift_bridgeObjectRelease();
      }
      sub_1B2228890();
      v7 += 32;
      swift_bridgeObjectRelease();
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0x20746375727473;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1B214F11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_bridgeObjectRetain();
  sub_1B2228890();
  v4 = sub_1B1B5ED50(a3);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    sub_1B2228890();
    v6 = *(_QWORD *)(v4 + 16) - 1;
    swift_bridgeObjectRetain();
    v7 = v4 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      v8 = sub_1B2228920();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
      {
        v9 = sub_1B214E3E8();
        v11 = v10;
        v13 = v12;
        v15 = v14;
        swift_bridgeObjectRelease();
        MEMORY[0x1B5E20388](v9, v11, v13, v15);
        swift_bridgeObjectRelease();
      }
      if (v6)
        sub_1B2228890();
      v7 += 32;
      sub_1B2228890();
      sub_1B1B567DC(4);
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      --v6;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1B2228890();
}

uint64_t sub_1B214F2E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_bridgeObjectRetain();
  v4 = sub_1B2228890();
  v5 = a3(v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    sub_1B2228890();
    v7 = *(_QWORD *)(v5 + 16) - 1;
    swift_bridgeObjectRetain();
    v8 = v5 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      v9 = sub_1B2228920();
      swift_bridgeObjectRelease();
      if ((v9 & 1) != 0)
      {
        v10 = sub_1B214E3E8();
        v12 = v11;
        v14 = v13;
        v16 = v15;
        swift_bridgeObjectRelease();
        MEMORY[0x1B5E20388](v10, v12, v14, v16);
        swift_bridgeObjectRelease();
      }
      if (v7)
        sub_1B2228890();
      v8 += 32;
      sub_1B2228890();
      sub_1B1B567DC(4);
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      --v7;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return a1;
}

uint64_t sub_1B214F4B0(uint64_t a1, uint64_t a2)
{
  return sub_1B214F714(a1, a2, (uint64_t (*)(void))sub_1B1B56AC0);
}

uint64_t sub_1B214F4BC(uint64_t a1, uint64_t a2)
{
  return sub_1B214F714(a1, a2, (uint64_t (*)(void))sub_1B1B578CC);
}

uint64_t sub_1B214F4C8(uint64_t a1, uint64_t a2)
{
  return sub_1B214F714(a1, a2, (uint64_t (*)(void))sub_1B1B574A0);
}

uint64_t sub_1B214F4D4(uint64_t a1)
{
  return sub_1B214F4F8(a1, sub_1B1B63440);
}

uint64_t sub_1B214F4E0(uint64_t a1, char a2)
{
  return sub_1B214F604(a1, a2, (uint64_t (*)(uint64_t, _QWORD))sub_1B1D8A878);
}

uint64_t sub_1B214F4EC(uint64_t a1)
{
  return sub_1B214F4F8(a1, (uint64_t (*)(void))sub_1B1F1FD90);
}

uint64_t sub_1B214F4F8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = a2();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v5 = sub_1B2228920();
      swift_bridgeObjectRelease();
      if ((v5 & 1) == 0)
        sub_1B2228890();
      v4 += 32;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B214F5F8(uint64_t a1, char a2)
{
  return sub_1B214F604(a1, a2, (uint64_t (*)(uint64_t, _QWORD))sub_1B1F1F914);
}

uint64_t sub_1B214F604(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = a3(a1, a2 & 1);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v6 = sub_1B2228920();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        sub_1B2228890();
      v5 += 32;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B214F708(uint64_t a1, uint64_t a2)
{
  return sub_1B214F714(a1, a2, (uint64_t (*)(void))sub_1B1BCCF5C);
}

uint64_t sub_1B214F714(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = a3();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v6 = sub_1B2228920();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0)
        sub_1B2228890();
      v5 += 32;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B214F814(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = sub_1B1BC7944(a1);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v4 = sub_1B2228920();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
        sub_1B2228890();
      v3 += 32;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  return 0;
}

ValueMetadata *type metadata accessor for CodeEmitter.Code()
{
  return &type metadata for CodeEmitter.Code;
}

void sub_1B214F924(char a1, uint64_t a2)
{
  if ((a1 & 1) != 0)
  {
    type metadata accessor for ImplicitConstantNode(0);
    type metadata accessor for ImplicitNilNode(0);
    type metadata accessor for ImplicitStateNode(0);
  }
  else
  {
    type metadata accessor for ConstantNode(0);
    type metadata accessor for NilNode(0);
    type metadata accessor for StateNode(0);
  }
  __asm { BR              X10 }
}

uint64_t sub_1B214F9A4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_1B214FBA0()
{
  _QWORD *v0;
  char *v1;
  _OWORD *v2;

  type metadata accessor for ColorRampTextureNode(0);
  v0 = (_QWORD *)swift_allocObject();
  v1 = (char *)v0 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp;
  sub_1B1AE11F4();
  v2 = (_OWORD *)swift_allocObject();
  __asm { FMOV            V1.4S, #1.0 }
  v2[1] = xmmword_1B226CD10;
  v2[2] = _Q1;
  v2[3] = xmmword_1B2244E20;
  *(_QWORD *)v1 = v2;
  *((_QWORD *)v1 + 1) = &unk_1E63C3890;
  v1[16] = 1;
  *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = 0xFFFFFFFFLL;
  v0[2] = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  sub_1B2228260();
  JUMPOUT(0x1B214FB88);
}

void sub_1B214FC48()
{
  type metadata accessor for CurveTextureNode(0);
  swift_allocObject();
  sub_1B1D8C370();
  JUMPOUT(0x1B214FB84);
}

void sub_1B214FC68()
{
  JUMPOUT(0x1B214F9ACLL);
}

_QWORD *sub_1B214FC74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  v7 = 0;
  v24 = swift_bridgeObjectRetain() + 112;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v10 = v9 | (v7 << 6);
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 56) + 56 * v10;
    if (*(_BYTE *)(v11 + 48) == 1)
    {
      v14 = *(_QWORD *)(v11 + 40);
      v25 = v8;
      v16 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      v17 = *(_QWORD *)v11;
      v26 = *(_QWORD *)(v11 + 8);
      v29 = *(_QWORD *)(v11 + 32);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      v27 = v16;
      v18 = v25;
      swift_bridgeObjectRetain();
      v28 = v15;
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_1B1C6537C(0, v25[2] + 1, 1, v25);
      v20 = v18[2];
      v19 = v18[3];
      v21 = v18;
      if (v20 >= v19 >> 1)
        v21 = sub_1B1C6537C(v19 > 1, v20 + 1, 1, v18);
      v8 = v21;
      v21[2] = v20 + 1;
      v22 = &v21[6 * v20];
      v22[4] = v17;
      v22[5] = v26;
      v22[6] = v27;
      v22[7] = v28;
      v22[8] = v29;
      v22[9] = v14;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v12 = v7 + 1;
    if (v7 + 1 >= v6)
      goto LABEL_27;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    if (!v13)
    {
      v12 = v7 + 2;
      if (v7 + 2 >= v6)
        goto LABEL_27;
      v13 = *(_QWORD *)(v2 + 8 * v12);
      if (!v13)
      {
        v12 = v7 + 3;
        if (v7 + 3 >= v6)
          goto LABEL_27;
        v13 = *(_QWORD *)(v2 + 8 * v12);
        if (!v13)
        {
          v12 = v7 + 4;
          if (v7 + 4 >= v6)
            goto LABEL_27;
          v13 = *(_QWORD *)(v2 + 8 * v12);
          if (!v13)
          {
            v12 = v7 + 5;
            if (v7 + 5 >= v6)
              goto LABEL_27;
            v13 = *(_QWORD *)(v2 + 8 * v12);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_20:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v7 = v12;
  }
  while (v6 - 6 != v7)
  {
    v13 = *(_QWORD *)(v24 + 8 * v7++);
    if (v13)
    {
      v12 = v7 + 5;
      goto LABEL_20;
    }
  }
LABEL_27:
  swift_release();
  return v8;
}

_QWORD *sub_1B214FED4(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  const void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char v21;
  uint64_t v22;
  _BYTE v23[832];
  _BYTE v24[832];
  _BYTE v25[840];
  _QWORD *v26;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = 0;
  v22 = swift_bridgeObjectRetain() + 112;
  v26 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v21 = a2;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_21;
    }
    v12 = v9 + 1;
    if (v9 + 1 >= v8)
      goto LABEL_32;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    if (!v13)
    {
      v12 = v9 + 2;
      if (v9 + 2 >= v8)
        goto LABEL_32;
      v13 = *(_QWORD *)(v4 + 8 * v12);
      if (!v13)
      {
        v12 = v9 + 3;
        if (v9 + 3 >= v8)
          goto LABEL_32;
        v13 = *(_QWORD *)(v4 + 8 * v12);
        if (!v13)
        {
          v12 = v9 + 4;
          if (v9 + 4 >= v8)
            goto LABEL_32;
          v13 = *(_QWORD *)(v4 + 8 * v12);
          if (!v13)
          {
            v12 = v9 + 5;
            if (v9 + 5 >= v8)
              goto LABEL_32;
            v13 = *(_QWORD *)(v4 + 8 * v12);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_20:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v9 = v12;
LABEL_21:
    sub_1B2156FD4(*(_QWORD *)(a1 + 56) + 832 * v11, (uint64_t)v24);
    sub_1B2156FD4((uint64_t)v24, (uint64_t)v25);
    if (sub_1B1B41574((uint64_t)v25) == 1)
    {
      if ((sub_1B2156FD4((uint64_t)v24, (uint64_t)v23), nullsub_16(v23), v15 = v14, (a2 & 1) == 0)
        || (v16 = v14[2]) == 0
        || (v14[1] != 0x6E69726F68747561 || v16 != 0xEE00747265765F67) && (sub_1B2229D24() & 1) == 0)
      {
        sub_1B1EB58B4((uint64_t)v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v26 = sub_1B1C6549C(0, v26[2] + 1, 1, v26);
        v18 = v26[2];
        v17 = v26[3];
        if (v18 >= v17 >> 1)
          v26 = sub_1B1C6549C(v17 > 1, v18 + 1, 1, v26);
        v19 = v26;
        v26[2] = v18 + 1;
        memcpy(&v19[103 * v18 + 4], v15, 0x338uLL);
        a2 = v21;
      }
    }
  }
  while (v8 - 6 != v9)
  {
    v13 = *(_QWORD *)(v22 + 8 * v9++);
    if (v13)
    {
      v12 = v9 + 5;
      goto LABEL_20;
    }
  }
LABEL_32:
  swift_release();
  return v26;
}

_QWORD *sub_1B2150198(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  v7 = 0;
  v20 = swift_bridgeObjectRetain() + 112;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v10 = v9 | (v7 << 6);
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 56) + 80 * v10;
    if (*(_BYTE *)(v11 + 72) == 1)
    {
      v14 = *(id *)v11;
      v25 = *(_QWORD *)(v11 + 40);
      v26 = *(void **)(v11 + 64);
      v21 = *(_QWORD *)(v11 + 8);
      v22 = *(_QWORD *)(v11 + 16);
      v23 = *(_QWORD *)(v11 + 24);
      v24 = *(_QWORD *)(v11 + 32);
      v28 = *(_QWORD *)(v11 + 48);
      v27 = *(_QWORD *)(v11 + 56);
      sub_1B1B3FCA8(*(id *)v11, v21, v22, v23, v24, v25, v28, v27, v26, 1);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = sub_1B1C655C4(0, v8[2] + 1, 1, v8);
      v16 = v8[2];
      v15 = v8[3];
      v17 = v8;
      if (v16 >= v15 >> 1)
        v17 = sub_1B1C655C4(v15 > 1, v16 + 1, 1, v8);
      v17[2] = v16 + 1;
      v8 = v17;
      v18 = &v17[9 * v16];
      v18[4] = v14;
      v18[5] = v21;
      v18[6] = v22;
      v18[7] = v23;
      v18[8] = v24;
      v18[9] = v25;
      v18[10] = v28;
      v18[11] = v27;
      v18[12] = v26;
      if (v5)
        goto LABEL_4;
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_7:
    v12 = v7 + 1;
    if (v7 + 1 >= v6)
      goto LABEL_27;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    if (!v13)
    {
      v12 = v7 + 2;
      if (v7 + 2 >= v6)
        goto LABEL_27;
      v13 = *(_QWORD *)(v2 + 8 * v12);
      if (!v13)
      {
        v12 = v7 + 3;
        if (v7 + 3 >= v6)
          goto LABEL_27;
        v13 = *(_QWORD *)(v2 + 8 * v12);
        if (!v13)
        {
          v12 = v7 + 4;
          if (v7 + 4 >= v6)
            goto LABEL_27;
          v13 = *(_QWORD *)(v2 + 8 * v12);
          if (!v13)
          {
            v12 = v7 + 5;
            if (v7 + 5 >= v6)
              goto LABEL_27;
            v13 = *(_QWORD *)(v2 + 8 * v12);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_20:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v7 = v12;
  }
  while (v6 - 6 != v7)
  {
    v13 = *(_QWORD *)(v20 + 8 * v7++);
    if (v13)
    {
      v12 = v7 + 5;
      goto LABEL_20;
    }
  }
LABEL_27:
  swift_release();
  return v8;
}

void sub_1B21503F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  id v22;
  id v23;
  void *v24;
  unsigned int v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD v36[2];
  id v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v36 - v7;
  v9 = sub_1B2228110();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v36 - v16;
  v18 = *(void **)(v0 + 144);
  if (v18)
  {
    v19 = v0 + OBJC_IVAR____TtC3VFX11ShaderCache_urlToSaveBinaryArchiveTo;
    sub_1B19EC90C(v19, (uint64_t)v8);
    v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
    v21 = v20(v8, 1, v9);
    swift_unknownObjectRetain();
    sub_1B19EC9A4((uint64_t)v8);
    if (v21 == 1)
    {
      v22 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v23 = objc_msgSend(v22, sel_temporaryDirectory);

      sub_1B22280C8();
      sub_1B22280A4();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
    else
    {
      sub_1B19EC90C(v19, (uint64_t)v4);
      v20(v4, 1, v9);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v4, v9);
    }
    v24 = (void *)sub_1B2228074();
    v37 = 0;
    v25 = objc_msgSend(v18, sel_serializeToURL_error_, v24, &v37);

    if (v25)
    {
      v26 = qword_1ED4BF430;
      v27 = v37;
      if (v26 != -1)
        swift_once();
      v37 = 0;
      v38 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v37 = (id)0xD000000000000021;
      v38 = 0x80000001B234E300;
      sub_1B19E52CC((unint64_t *)&qword_1EEF5AE60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v28 = (uint64_t)v37;
      v29 = v38;
      v30 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v37 = 0;
      swift_retain();
      sub_1B1F1AD70(v30, (uint64_t *)&v37, v28, v29);
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    }
    else
    {
      v31 = v37;
      v32 = (void *)sub_1B2227FB4();

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
      if (qword_1ED4BF430 != -1)
        swift_once();
      v37 = 0;
      v38 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      v36[1] = v32;
      sub_1B1A203F8();
      sub_1B22295EC();
      v33 = (uint64_t)v37;
      v34 = v38;
      v35 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v37 = 0;
      swift_retain();
      sub_1B1F1AD70(v35, (uint64_t *)&v37, v33, v34);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1B2150910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v1 = v0;
  v2 = sub_1B2228110();
  v24 = *(_QWORD *)(v2 - 8);
  v25 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v24 - v8;
  v10 = sub_1B2227CD8();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE0E0];
  MEMORY[0x1E0C80A78](v10, v12);
  sub_1B2227D20();
  swift_allocObject();
  sub_1B2227D14();
  sub_1B1791524(0, &qword_1EEF5B2F0, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226CD10;
  sub_1B2227CCC();
  sub_1B2227CC0();
  v26 = v13;
  sub_1B19E52CC(&qword_1EEF5B2F8, v11, MEMORY[0x1E0CAE0F8]);
  sub_1B1791524(0, &qword_1EEF5B300, v11, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1B8A62C();
  sub_1B2229364();
  sub_1B2227CE4();
  v26 = v1;
  sub_1B21567FC();
  swift_retain();
  v14 = sub_1B2227CF0();
  v16 = v15;
  swift_release();
  v17 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v18 = objc_msgSend(v17, sel_temporaryDirectory);

  sub_1B22280C8();
  sub_1B22280A4();
  v19 = *(void (**)(char *, uint64_t))(v24 + 8);
  v19(v5, v25);
  sub_1B2228194();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v26 = 0;
  v27 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v26 = 0xD000000000000023;
  v27 = 0x80000001B234E280;
  sub_1B19E52CC((unint64_t *)&qword_1EEF5AE60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v20 = v26;
  v21 = v27;
  v22 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v26 = 0;
  swift_retain();
  sub_1B1F1AD70(v22, &v26, v20, v21);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1B1A0DADC(v14, v16);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v19)(v9, v25);
}

uint64_t sub_1B2150E6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF64878, (uint64_t (*)(void))sub_1B2157820, (uint64_t)&_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2157820();
  sub_1B222A180();
  v15 = 0;
  sub_1B2229910();
  if (!v2)
  {
    v14 = 1;
    sub_1B2229910();
    v12[1] = *(_QWORD *)(v3 + 32);
    v13 = 2;
    sub_1B1A02758(0, &qword_1EEF64888, (uint64_t)&_s21FunctionConstantCoderVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B2156E9C(&qword_1EEF64890, &qword_1EEF64888, (uint64_t)&_s21FunctionConstantCoderVN, (uint64_t (*)(void))sub_1B2157864);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B2151020(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F8E5D0(*a1, *a2);
}

uint64_t sub_1B215102C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21510D0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2151150()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21511F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

void sub_1B2151224(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0xE900000000000073;
  v3 = *v1;
  v4 = 0x656E696C65706970;
  v5 = 0x80000001B2328630;
  if (v3 == 1)
    v5 = 0xE900000000000073;
  else
    v4 = 0xD000000000000010;
  v6 = v3 == 0;
  if (*v1)
    v7 = v4;
  else
    v7 = 0x656972617262696CLL;
  if (!v6)
    v2 = v5;
  *a1 = v7;
  a1[1] = v2;
}

uint64_t sub_1B2151288()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x656E696C65706970;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x656972617262696CLL;
}

uint64_t sub_1B21512E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

uint64_t sub_1B2151314()
{
  sub_1B2156E14();
  return sub_1B222A1D4();
}

uint64_t sub_1B215133C()
{
  sub_1B2156E14();
  return sub_1B222A1E0();
}

uint64_t sub_1B2151364(char *a1, char *a2)
{
  return sub_1B1F8E6E0(*a1, *a2);
}

uint64_t sub_1B2151370()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21513F0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B215144C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21514C8@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B21514D4(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x7368746170;
  if (*v1)
    v2 = 0xD000000000000015;
  v3 = 0x80000001B2328650;
  if (!*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B2151514()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x7368746170;
}

uint64_t sub_1B2151550@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B215155C()
{
  sub_1B2156DD0();
  return sub_1B222A1D4();
}

uint64_t sub_1B2151584()
{
  sub_1B2156DD0();
  return sub_1B222A1E0();
}

uint64_t sub_1B21515AC(char *a1, char *a2)
{
  return sub_1B1F8E528(*a1, *a2);
}

uint64_t sub_1B21515B8()
{
  return sub_1B1FB2624();
}

uint64_t sub_1B21515C0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2151620()
{
  return sub_1B1DB61D0();
}

uint64_t sub_1B2151628@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B2151634(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000010;
  else
    v2 = 0xD000000000000011;
  v3 = 0x80000001B23285E0;
  if (*v1)
    v3 = 0x80000001B2328600;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1B2151678()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0xD000000000000011;
}

uint64_t sub_1B21516B8@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B21516C4()
{
  sub_1B2156D8C();
  return sub_1B222A1D4();
}

uint64_t sub_1B21516EC()
{
  sub_1B2156D8C();
  return sub_1B222A1E0();
}

uint64_t sub_1B2151714(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F8E400(*a1, *a2);
}

uint64_t sub_1B2151720()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F6974636E7566;
  if (*v0 != 1)
    v1 = 0x746E6174736E6F63;
  if (*v0)
    return v1;
  else
    return 0x6C6562616CLL;
}

uint64_t sub_1B2151784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B2156368(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B21517A8()
{
  sub_1B2157820();
  return sub_1B222A1D4();
}

uint64_t sub_1B21517D0()
{
  sub_1B2157820();
  return sub_1B222A1E0();
}

uint64_t sub_1B21517F8(_QWORD *a1)
{
  return sub_1B2150E6C(a1);
}

uint64_t sub_1B2151830(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  uint64_t v76;
  _QWORD *v77;
  os_unfair_lock_s *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  int64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;

  v92 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1B19F8E54(0, &qword_1EEF64740, (uint64_t (*)(void))sub_1B2156D8C, (uint64_t)&_s19PipelineScriptCoderV18PipelineCodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v91 = v4;
  v89 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v90 = (char *)&v83 - v6;
  sub_1B19F8E54(0, &qword_1EEF64750, (uint64_t (*)(void))sub_1B2156DD0, (uint64_t)&_s19PipelineScriptCoderV19LibrariesCodingKeysON, v3);
  v8 = v7;
  v99 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v83 - v10;
  sub_1B19F8E54(0, &qword_1EEF64760, (uint64_t (*)(void))sub_1B2156E14, (uint64_t)&_s19PipelineScriptCoderV10CodingKeysON, v3);
  v13 = v12;
  v98 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v83 - v15;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2156E14();
  v17 = v92;
  sub_1B222A180();
  LOBYTE(v118) = 0;
  sub_1B2156DD0();
  sub_1B22298BC();
  v118 = *(_QWORD *)(v17 + 32);
  LOBYTE(v120) = 0;
  sub_1B1A02758(0, &qword_1EEF64770, (uint64_t)&type metadata for ShaderCache.Library, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B2156E9C(&qword_1EEF64778, &qword_1EEF64770, (uint64_t)&type metadata for ShaderCache.Library, (uint64_t (*)(void))sub_1B2156E58);
  v18 = v117;
  sub_1B2229958();
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v99 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v16, v13);
  }
  else
  {
    v86 = v13;
    v87 = v11;
    v93 = v16;
    v88 = v8;
    v84 = v17 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
    v20 = *(os_unfair_lock_s **)(v17 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
    os_unfair_lock_lock(v20);
    v21 = swift_bridgeObjectRetain();
    v22 = sub_1B214FC74(v21);
    v85 = 0;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v20);
    v23 = v22[2];
    v24 = v98;
    if (v23)
    {
      v120 = MEMORY[0x1E0DEE9D8];
      sub_1B202B0F4(0, v23, 0);
      v25 = 0;
      v26 = v120;
      v83 = v22;
      v94 = v22 + 4;
      v27 = v93;
      v28 = v99;
      v95 = v23;
      do
      {
        v29 = v27;
        v105 = v25;
        v106 = v26;
        v30 = &v94[6 * v25];
        v32 = *v30;
        v31 = v30[1];
        v34 = v30[2];
        v33 = v30[3];
        v36 = (void *)v30[4];
        v35 = v30[5];
        swift_unknownObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain_n();
        v101 = v32;
        swift_unknownObjectRetain();
        v107 = v35;
        v118 = sub_1B1C7C49C(v35);
        sub_1B1B40D84();
        sub_1B2228944();
        v118 = v31;
        v119 = v34;
        v108 = v34;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v103 = v118;
        v104 = v36;
        v102 = v119;
        if (v36)
        {
          v37 = objc_msgSend(v36, sel_label, v83);
          if (v37)
          {
            v38 = v37;
            v39 = sub_1B222874C();
            v41 = v40;

          }
          else
          {
            v39 = 0x616665642D786676;
            v41 = 0xEB00000000746C75;
          }
          v28 = v99;
        }
        else
        {
          v39 = 0x616665642D786676;
          v41 = 0xEB00000000746C75;
        }
        v27 = v29;
        v42 = v107;
        v43 = MEMORY[0x1B5E20D60](v39, v41);
        v47 = sub_1B21522CC(v43, v44, v45, v46, v31, v108, 0);
        v100 = v48;
        swift_bridgeObjectRelease();
        v49 = *(_QWORD *)(v42 + 16);
        if (v49)
        {
          v96 = v47;
          v97 = v33;
          v118 = MEMORY[0x1E0DEE9D8];
          swift_bridgeObjectRetain();
          sub_1B202B110(0, v49, 0);
          v50 = v118;
          v51 = (uint64_t *)(v42 + 64);
          v26 = v106;
          do
          {
            v53 = *(v51 - 4);
            v52 = *(v51 - 3);
            v54 = *((_BYTE *)v51 - 16);
            v55 = *v51;
            v116 = v51[1];
            v117 = v55;
            v56 = v51[2];
            v114 = v51[3];
            v115 = v56;
            v57 = v51[4];
            v112 = v51[5];
            v113 = v57;
            v58 = v51[6];
            v110 = v51[7];
            v111 = v58;
            v109 = *((unsigned __int8 *)v51 + 64);
            sub_1B1B40E34(v53, v52, v54);
            v118 = v50;
            v60 = *(_QWORD *)(v50 + 16);
            v59 = *(_QWORD *)(v50 + 24);
            if (v60 >= v59 >> 1)
            {
              sub_1B202B110(v59 > 1, v60 + 1, 1);
              v26 = v106;
              v50 = v118;
            }
            v51 += 14;
            *(_QWORD *)(v50 + 16) = v60 + 1;
            v61 = v50 + 112 * v60;
            *(_QWORD *)(v61 + 32) = v53;
            *(_QWORD *)(v61 + 40) = v52;
            *(_BYTE *)(v61 + 48) = v54;
            v62 = v116;
            *(_QWORD *)(v61 + 64) = v117;
            *(_QWORD *)(v61 + 72) = v62;
            v63 = v114;
            *(_QWORD *)(v61 + 80) = v115;
            *(_QWORD *)(v61 + 88) = v63;
            v64 = v112;
            *(_QWORD *)(v61 + 96) = v113;
            *(_QWORD *)(v61 + 104) = v64;
            v65 = v110;
            *(_QWORD *)(v61 + 112) = v111;
            *(_QWORD *)(v61 + 120) = v65;
            *(_BYTE *)(v61 + 128) = v109;
            --v49;
          }
          while (v49);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          v27 = v93;
          v28 = v99;
          v47 = v96;
        }
        else
        {
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease_n();
          v50 = MEMORY[0x1E0DEE9D8];
          v26 = v106;
        }
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v120 = v26;
        v67 = *(_QWORD *)(v26 + 16);
        v66 = *(_QWORD *)(v26 + 24);
        v24 = v98;
        if (v67 >= v66 >> 1)
        {
          sub_1B202B0F4(v66 > 1, v67 + 1, 1);
          v26 = v120;
        }
        v25 = v105 + 1;
        *(_QWORD *)(v26 + 16) = v67 + 1;
        v68 = (_QWORD *)(v26 + 40 * v67);
        v69 = v102;
        v68[4] = v103;
        v68[5] = v69;
        v70 = v100;
        v68[6] = v47;
        v68[7] = v70;
        v68[8] = v50;
      }
      while (v25 != v95);
      swift_bridgeObjectRelease();
      v71 = v28;
    }
    else
    {
      swift_bridgeObjectRelease();
      v26 = MEMORY[0x1E0DEE9D8];
      v27 = v93;
      v71 = v99;
    }
    v118 = v26;
    LOBYTE(v120) = 1;
    sub_1B1A02758(0, &qword_1EEF64788, (uint64_t)&_s19PipelineScriptCoderV24SpecializedFunctionCoderVN, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B2156E9C(&qword_1EEF64790, &qword_1EEF64788, (uint64_t)&_s19PipelineScriptCoderV24SpecializedFunctionCoderVN, (uint64_t (*)(void))sub_1B2156F08);
    v72 = v88;
    v73 = v87;
    v74 = v85;
    sub_1B2229958();
    if (v74)
    {
      (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v72);
    }
    else
    {
      swift_bridgeObjectRelease();
      LOBYTE(v118) = 1;
      sub_1B2156D8C();
      sub_1B22298BC();
      v75 = *(os_unfair_lock_s **)(v84 + 24);
      os_unfair_lock_lock(v75);
      v76 = swift_bridgeObjectRetain();
      v77 = sub_1B2150198(v76);
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v75);
      v118 = (unint64_t)v77;
      LOBYTE(v120) = 0;
      sub_1B1A02758(0, &qword_1EEF647A0, (uint64_t)&type metadata for ShaderCache.ComputePipeline, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B2156E9C(&qword_1EEF647A8, &qword_1EEF647A0, (uint64_t)&type metadata for ShaderCache.ComputePipeline, (uint64_t (*)(void))sub_1B2156F4C);
      sub_1B2229958();
      swift_bridgeObjectRelease();
      v78 = *(os_unfair_lock_s **)(v84 + 24);
      os_unfair_lock_lock(v78);
      v79 = swift_bridgeObjectRetain();
      v80 = sub_1B214FED4(v79, 1);
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v78);
      v118 = (unint64_t)v80;
      LOBYTE(v120) = 1;
      sub_1B1A02758(0, &qword_1EEF647B8, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      v81 = v91;
      sub_1B2156E9C(&qword_1EEF647C0, &qword_1EEF647B8, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(void))sub_1B2156F90);
      v82 = v90;
      sub_1B2229958();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v82, v81);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v87, v88);
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v86);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B21522CC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v8;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v8 = a5;
  if ((sub_1B1ADE3D8(a5, a6, a1, a2, a3, a4) & 1) != 0)
  {
    if (a7)
    {
      v13 = objc_msgSend((id)swift_unknownObjectRetain(), sel_label);
      if (!v13)
      {
        swift_unknownObjectRelease();
        goto LABEL_12;
      }
      v14 = v13;
      v15 = sub_1B222874C();
      v17 = v16;
      swift_unknownObjectRelease();

      if (v15 != 0x616665642D786676)
      {
LABEL_12:
        if ((sub_1B2229D24() & 1) != 0)
        {
LABEL_13:
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_15:
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        return 0x3A7361696C61;
      }
    }
    else
    {
      v17 = 0xEB00000000746C75;
    }
    if (v17 == 0xEB00000000746C75)
      goto LABEL_13;
    goto LABEL_12;
  }
  if ((sub_1B1EE7988(a1, a2, a3, a4, 0x616665642D786676, 0xEB00000000746C75) & 1) == 0)
  {
    MEMORY[0x1B5E20388](a1, a2, a3, a4);
    goto LABEL_15;
  }
LABEL_14:
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1B2152504(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B2151830(a1, *v1);
}

void sub_1B215251C(char *a1)
{
  sub_1B1F8E784(*a1);
}

void sub_1B2152528()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B2152574()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B21525D8()
{
  __asm { BR              X10 }
}

uint64_t sub_1B2152614()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B2152664()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B21526AC()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2152710@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B21564D8();
  *a1 = result;
  return result;
}

uint64_t sub_1B215273C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B215276C + 4 * byte_1B22C5C1C[*v0]))();
}

void sub_1B215276C(_QWORD *a1@<X8>)
{
  *a1 = 25705;
  a1[1] = 0xE200000000000000;
}

void sub_1B215277C(_QWORD *a1@<X8>)
{
  *a1 = 0x79745F65756C6176;
  a1[1] = 0xEA00000000006570;
}

void sub_1B215279C(_QWORD *a1@<X8>)
{
  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1B21527B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B21527E4 + 4 * byte_1B22C5C20[*v0]))(0x657079745F6469, 0xE700000000000000);
}

uint64_t sub_1B21527E4()
{
  return 25705;
}

uint64_t sub_1B21527F0()
{
  return 0x79745F65756C6176;
}

uint64_t sub_1B215280C()
{
  return 0x65756C6176;
}

uint64_t sub_1B2152820@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B21564D8();
  *a1 = result;
  return result;
}

uint64_t sub_1B2152844()
{
  sub_1B21578EC();
  return sub_1B222A1D4();
}

uint64_t sub_1B215286C()
{
  sub_1B21578EC();
  return sub_1B222A1E0();
}

uint64_t sub_1B2152894()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B21528DC()
{
  return sub_1B2228824();
}

uint64_t sub_1B21528EC()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B2152930@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B2152980(_QWORD *a1@<X8>)
{
  *a1 = 1635017060;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1B2152994@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B21529E8()
{
  sub_1B21578A8();
  return sub_1B222A1D4();
}

uint64_t sub_1B2152A10()
{
  sub_1B21578A8();
  return sub_1B222A1E0();
}

uint64_t sub_1B2152A38(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[4];
  char v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[4];
  char v25;
  _BYTE v26[80];
  __int128 v27;
  uint64_t v29;

  v3 = v1;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1B19F8E54(0, &qword_1EEF648A0, (uint64_t (*)(void))sub_1B21578A8, (uint64_t)&_s21FunctionConstantCoderV15ValueCodingKeysON, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v20[1] = *(_QWORD *)(v6 - 8);
  v20[2] = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v20[3] = (char *)v20 - v8;
  sub_1B19F8E54(0, &qword_1EEF648B0, (uint64_t (*)(void))sub_1B21578EC, (uint64_t)&_s21FunctionConstantCoderV10CodingKeysON, v5);
  v10 = v9;
  v29 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v20 - v12;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21578EC();
  sub_1B222A180();
  v14 = v3[1];
  v22 = *v3;
  v23 = v14;
  v15 = v3[5];
  v24[2] = v3[4];
  v24[3] = v15;
  v25 = *((_BYTE *)v3 + 96);
  v16 = v3[3];
  v24[0] = v3[2];
  v24[1] = v16;
  sub_1B1C7B89C(v22, *((uint64_t *)&v22 + 1), v23);
  if (v17)
  {
    v21 = 0;
    sub_1B2229910();
    if (!v2)
    {
      v21 = 1;
      sub_1B2229910();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v10);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v21 = 0;
    sub_1B2229910();
    if (!v2)
    {
      v21 = 1;
      sub_1B2229940();
LABEL_7:
      sub_1B1B2A86C((uint64_t)v24, (uint64_t)v26);
      v18 = sub_1B1B292BC();
      sub_1B1FA0230(v18);
      v21 = 2;
      sub_1B2229910();
      swift_bridgeObjectRelease();
      v21 = 3;
      sub_1B21578A8();
      sub_1B22298BC();
      sub_1B1B2A86C((uint64_t)v26, (uint64_t)&v27);
      __asm { BR              X10 }
    }
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v13, v10);
  }
}

uint64_t sub_1B2153050(_QWORD *a1)
{
  return sub_1B2152A38(a1);
}

uint64_t sub_1B2153064(char *a1, char *a2)
{
  return sub_1B1F8E8C8(*a1, *a2);
}

uint64_t sub_1B2153070()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21530E4()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2153134()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21531A4@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B21531B0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1752457584;
  if (!*v1)
    v2 = 0x6C6562616CLL;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B21531E4()
{
  _BYTE *v0;

  if (*v0)
    return 1752457584;
  else
    return 0x6C6562616CLL;
}

uint64_t sub_1B2153214@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B2153220()
{
  sub_1B21566A8();
  return sub_1B222A1D4();
}

uint64_t sub_1B2153248()
{
  sub_1B21566A8();
  return sub_1B222A1E0();
}

uint64_t sub_1B2153270(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B2156568(a1, v1[1], v1[2], v1[3], v1[4]);
}

unint64_t sub_1B215328C(char a1)
{
  unint64_t result;

  result = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000036;
    else
      return 0xD000000000000021;
  }
  return result;
}

uint64_t sub_1B21532EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F8E304(*a1, *a2);
}

uint64_t sub_1B21532F8()
{
  return sub_1B1FB257C();
}

uint64_t sub_1B2153300()
{
  return sub_1B1DB4880();
}

uint64_t sub_1B2153308()
{
  return sub_1B1DB6250();
}

uint64_t sub_1B2153310@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

unint64_t sub_1B2153344@<X0>(unint64_t *a1@<X8>)
{
  char *v1;
  unint64_t result;
  unint64_t v4;

  result = sub_1B215328C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B215336C()
{
  char *v0;

  return sub_1B215328C(*v0);
}

uint64_t sub_1B2153374@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

uint64_t sub_1B21533A0()
{
  sub_1B21566EC();
  return sub_1B222A1D4();
}

uint64_t sub_1B21533C8()
{
  sub_1B21566EC();
  return sub_1B222A1E0();
}

uint64_t sub_1B21533F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF64680, (uint64_t (*)(void))sub_1B21566EC, (uint64_t)&_s10CodingKeysON_2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v21 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21566EC();
  sub_1B222A180();
  v11 = objc_msgSend(*(id *)v3, sel_label);
  if (v11)
  {
    v12 = v11;
    v13 = sub_1B222874C();
    v15 = v14;

  }
  else
  {
    v15 = 0xE200000000000000;
    v13 = 16718;
  }
  v16 = MEMORY[0x1B5E20D60](v13, v15);
  sub_1B21522CC(v16, v17, v18, v19, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 32));
  swift_bridgeObjectRelease();
  v24 = 0;
  sub_1B2229910();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = 1;
    sub_1B222991C();
    v22 = 2;
    sub_1B2229940();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1B21535D8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B2153618 + 4 * byte_1B22C5C34[a1]))(0x665F786574726576, 0xEF6E6F6974636E75);
}

unint64_t sub_1B2153618()
{
  return 0xD000000000000011;
}

unint64_t sub_1B2153770()
{
  return 0xD00000000000001DLL;
}

void sub_1B2153788()
{
  JUMPOUT(0x1B215379CLL);
}

uint64_t sub_1B21537A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B21537E8 + 4 * byte_1B22C5C46[a1]))(0x665F786574726576, 0xEF6E6F6974636E75);
}

unint64_t sub_1B21537E8()
{
  return 0xD000000000000011;
}

unint64_t sub_1B2153940()
{
  return 0xD00000000000001DLL;
}

void sub_1B2153958()
{
  JUMPOUT(0x1B215396CLL);
}

uint64_t sub_1B2153978(_QWORD *a1)
{
  return sub_1B21533F0(a1);
}

uint64_t sub_1B215398C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B21537A8(*a1);
  v5 = v4;
  if (v3 == sub_1B21537A8(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B2153A14()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B21535D8(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2153A74()
{
  unsigned __int8 *v0;

  sub_1B21535D8(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2153AB4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B21535D8(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2153B10@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2156318();
  *a1 = result;
  return result;
}

uint64_t sub_1B2153B3C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B21535D8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B2153B64()
{
  unsigned __int8 *v0;

  return sub_1B21537A8(*v0);
}

uint64_t sub_1B2153B6C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2156318();
  *a1 = result;
  return result;
}

void sub_1B2153B90(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_1B2153B9C()
{
  sub_1B2156730();
  return sub_1B222A1D4();
}

uint64_t sub_1B2153BC4()
{
  sub_1B2156730();
  return sub_1B222A1E0();
}

uint64_t sub_1B2153BEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  _BYTE v120[448];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  _QWORD v132[2];
  char v133;
  _QWORD v134[2];
  char v135;
  _BYTE v136[448];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;

  v2 = v1;
  sub_1B19F8E54(0, &qword_1EEF64690, (uint64_t (*)(void))sub_1B2156730, (uint64_t)&_s10CodingKeysON_1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v93 = *(_QWORD *)(v4 - 8);
  v94 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v63 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2156730();
  v95 = v7;
  sub_1B222A180();
  v8 = objc_msgSend(*(id *)v2, sel_label);
  if (v8)
  {
    v9 = v8;
    v10 = sub_1B222874C();
    v12 = v11;

  }
  else
  {
    v12 = 0xE100000000000000;
    v10 = 43;
  }
  sub_1B1DB9A94(43, 0xE100000000000000, v10, v12);
  if ((v13 & 1) != 0)
  {
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  v14 = sub_1B2228974();
  v88 = v15;
  v89 = v14;
  v17 = v16;
  v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B222883C();
  swift_bridgeObjectRelease();
  v20 = sub_1B2228974();
  v82 = v21;
  v83 = v20;
  v81 = v22;
  v92 = v23;
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v2 + 16);
  v26 = *(_QWORD *)(v2 + 24);
  v25 = *(_QWORD *)(v2 + 32);
  v28 = *(_QWORD *)(v2 + 40);
  v27 = *(_QWORD *)(v2 + 48);
  v29 = *(_QWORD *)(v2 + 56);
  v30 = *(_QWORD *)(v2 + 64);
  v90 = *(_QWORD *)(v2 + 8);
  v91 = v30;
  v31 = *(_QWORD *)(v2 + 72);
  v86 = v29;
  v87 = v31;
  v32 = *(_QWORD *)(v2 + 80);
  v84 = v27;
  v85 = v32;
  v33 = *(_OWORD *)(v2 + 136);
  v34 = *(_OWORD *)(v2 + 168);
  v141 = *(_OWORD *)(v2 + 152);
  v142 = v34;
  v143 = *(_QWORD *)(v2 + 184);
  v35 = *(_OWORD *)(v2 + 104);
  v137 = *(_OWORD *)(v2 + 88);
  v138 = v35;
  v139 = *(_OWORD *)(v2 + 120);
  v140 = v33;
  v36 = *(_OWORD *)(v2 + 192);
  v68 = *(_OWORD *)(v2 + 208);
  v69 = v36;
  v37 = *(_OWORD *)(v2 + 224);
  v66 = *(_OWORD *)(v2 + 240);
  v67 = v37;
  v65 = *(_OWORD *)(v2 + 256);
  v76 = *(_QWORD *)(v2 + 272);
  memcpy(v136, (const void *)(v2 + 280), sizeof(v136));
  v38 = *(_QWORD *)(v2 + 728);
  v78 = *(_QWORD *)(v2 + 736);
  v79 = v38;
  v77 = *(_QWORD *)(v2 + 744);
  v39 = *(_QWORD *)(v2 + 752);
  v40 = *(_QWORD *)(v2 + 760);
  v41 = *(_QWORD *)(v2 + 768);
  v72 = *(_QWORD *)(v2 + 776);
  v73 = v40;
  v42 = *(_QWORD *)(v2 + 784);
  v70 = v39;
  v71 = v42;
  v74 = *(_QWORD *)(v2 + 792);
  v135 = *(_BYTE *)(v2 + 800);
  v75 = *(unsigned __int8 *)(v2 + 801);
  v134[0] = *(_QWORD *)(v2 + 802);
  *(_QWORD *)((char *)v134 + 6) = *(_QWORD *)(v2 + 808);
  v80 = v41;
  if (v24)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1B21522CC(v89, v88, v17, v19, v90, v24, v25);
    swift_bridgeObjectRelease();
    LOBYTE(v97) = 0;
    v44 = v94;
    v43 = v95;
    v45 = v144;
    sub_1B2229910();
    if (v45)
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v43, v44);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v144 = 0;
    v88 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v64 = v28;
    swift_bridgeObjectRelease();
    v89 = v25;
    swift_unknownObjectRelease();
    v63 = v26;
    swift_unknownObjectRelease();
    v41 = v80;
  }
  else
  {
    v63 = v26;
    v64 = v28;
    v88 = 0;
    v89 = v25;
    swift_bridgeObjectRelease();
    v44 = v94;
    v43 = v95;
  }
  v47 = v86;
  v48 = v87;
  v49 = v84;
  if (v86)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    sub_1B21522CC(v83, v82, v81, v92, v49, v47, v48);
    swift_bridgeObjectRelease();
    LOBYTE(v97) = 1;
    v50 = v144;
    sub_1B2229910();
    v144 = v50;
    if (v50)
    {
      (*(void (**)(char *, uint64_t))(v93 + 8))(v43, v44);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v41 = v80;
    v52 = v78;
    v51 = v79;
    if (!v78)
      goto LABEL_17;
LABEL_14:
    v53 = v41;
    v54 = objc_allocWithZone(MEMORY[0x1E0CC6BD8]);
    swift_retain();
    v55 = objc_msgSend(v54, sel_init);
    sub_1B1E1D7CC(v55, v51, v52);
    v97 = (uint64_t)v55;
    v133 = 2;
    sub_1B21567B8();
    v56 = v55;
    v57 = v95;
    v58 = v144;
    sub_1B2229958();
    v59 = v58;
    v60 = v89;
    if (v58)
    {

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v57, v44);
    }
    swift_release();

    v41 = v53;
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  v52 = v78;
  v51 = v79;
  if (v78)
    goto LABEL_14;
LABEL_17:
  v57 = v95;
  v60 = v89;
  v59 = v144;
LABEL_19:
  v61 = v76;
  LOBYTE(v97) = 3;
  sub_1B2229910();
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v93 + 8))(v57, v44);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v41 != 2)
    {
      LOBYTE(v97) = 4;
      sub_1B2229940();
      LOBYTE(v97) = 5;
      sub_1B222991C();
      LOBYTE(v97) = 6;
      sub_1B2229910();
      swift_bridgeObjectRelease();
      LOBYTE(v97) = 7;
      sub_1B2229910();
      swift_bridgeObjectRelease();
      LOBYTE(v97) = 8;
      sub_1B2229910();
      swift_bridgeObjectRelease();
      LOBYTE(v97) = 9;
      sub_1B2229910();
      swift_bridgeObjectRelease();
      v41 = v80;
    }
    LOBYTE(v97) = 10;
    sub_1B2229994();
    LOBYTE(v97) = 11;
    sub_1B222991C();
    v133 = 14;
    sub_1B2229940();
    v110 = v140;
    v111 = v141;
    v112 = v142;
    v107 = v137;
    v108 = v138;
    v113 = v143;
    v109 = v139;
    memcpy(v120, v136, sizeof(v120));
    v132[0] = v134[0];
    *(_QWORD *)((char *)v132 + 6) = *(_QWORD *)((char *)v134 + 6);
    v97 = v90;
    v98 = v88;
    v99 = v63;
    v100 = v60;
    v101 = v64;
    v102 = v84;
    v103 = v86;
    v104 = v91;
    v105 = v87;
    v106 = v85;
    v114 = v69;
    v115 = v68;
    v116 = v67;
    v117 = v66;
    v118 = v65;
    v119 = v61;
    v121 = v79;
    v122 = v52;
    v123 = v77;
    v124 = v70;
    v125 = v73;
    v126 = v41;
    v127 = v72;
    v128 = v71;
    v129 = v74;
    v62 = v94;
    v130 = v135;
    v131 = v75;
    v96 = 15;
    sub_1B2156774();
    sub_1B2229958();
    return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v57, v62);
  }
}

uint64_t sub_1B2154778(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B21547B4 + 4 * byte_1B22C5C58[a1]))(0x6F665F6C65786970, 0xEC00000074616D72);
}

uint64_t sub_1B21547B4()
{
  return 0x616D5F6574697277;
}

unint64_t sub_1B21547D0()
{
  return 0xD000000000000010;
}

unint64_t sub_1B21547EC()
{
  return 0xD000000000000015;
}

uint64_t sub_1B215488C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B21548C8 + 4 * byte_1B22C5C61[a1]))(0x6F665F6C65786970, 0xEC00000074616D72);
}

uint64_t sub_1B21548C8()
{
  return 0x616D5F6574697277;
}

unint64_t sub_1B21548E4()
{
  return 0xD000000000000010;
}

unint64_t sub_1B2154900()
{
  return 0xD000000000000015;
}

uint64_t sub_1B21549A0(_QWORD *a1)
{
  return sub_1B2153BEC(a1);
}

void sub_1B21549B4(char *a1)
{
  sub_1B1F95420(*a1);
}

uint64_t sub_1B21549C0()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1DB3F5C((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

void sub_1B2154A04(uint64_t a1)
{
  char *v1;

  sub_1B1DB3F5C(a1, *v1);
}

uint64_t sub_1B2154A0C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1DB3F5C((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

uint64_t sub_1B2154A4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2156520();
  *a1 = result;
  return result;
}

uint64_t sub_1B2154A78@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B2154778(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B2154AA0()
{
  unsigned __int8 *v0;

  return sub_1B215488C(*v0);
}

uint64_t sub_1B2154AA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2156520();
  *a1 = result;
  return result;
}

uint64_t sub_1B2154ACC()
{
  sub_1B2156C7C();
  return sub_1B222A1D4();
}

uint64_t sub_1B2154AF4()
{
  sub_1B2156C7C();
  return sub_1B222A1E0();
}

uint64_t sub_1B2154B1C(_QWORD *a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  _QWORD v16[2];
  _OWORD *v17;
  _OWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  int64x2_t v25;
  _OWORD v26[28];
  uint64_t v27[5];
  _QWORD v28[101];
  _BYTE v29[441];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;

  v3 = v1;
  v23 = &v26[3];
  v20 = (char *)&v26[2] + 8;
  v21 = (char *)v26 + 8;
  v18 = &v26[2];
  v19 = (char *)&v26[1] + 8;
  v17 = &v26[1];
  sub_1B19F8E54(0, &qword_1EEF64700, (uint64_t (*)(void))sub_1B2156C7C, (uint64_t)&type metadata for ColorAttachmentsCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v24 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v16 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  memcpy(v28, v3, sizeof(v28));
  v10 = 0;
  v30 = *(_OWORD *)&v28[23];
  v31 = *(_OWORD *)&v28[25];
  v32 = *(_OWORD *)&v28[27];
  v33 = *(_OWORD *)&v28[29];
  v22 = &v28[34];
  v11 = (uint64_t *)v26;
  v25 = (int64x2_t)xmmword_1B2246910;
  v16[1] = "oding of MTLBlendOperation";
  while (1)
  {
    v26[0] = v30;
    v26[1] = v31;
    v26[2] = v32;
    v26[3] = v33;
    v13 = *v11++;
    v12 = v13;
    if (v13)
      break;
LABEL_4:
    v10 += 56;
    if (v10 == 448)
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v27);
  }
  v34 = v11;
  sub_1B19FC264((uint64_t)v27, v27[3]);
  sub_1B2156C7C();
  sub_1B2229B50();
  sub_1B1F9A724(v12);
  LOBYTE(v26[0]) = 0;
  sub_1B2229910();
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v6);
    swift_bridgeObjectRelease();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v27);
  }
  swift_bridgeObjectRelease();
  memcpy(v29, v22, sizeof(v29));
  memcpy(v26, v22, 0x1B9uLL);
  sub_1B1FA00DC(*((unsigned __int8 *)v23 + v10));
  LOBYTE(v26[0]) = 1;
  sub_1B2229910();
  swift_bridgeObjectRelease();
  memcpy(v26, v29, 0x1B9uLL);
  v14 = (_QWORD *)((char *)v26 + v10);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)((char *)&v26[1] + v10), v25), (int32x4_t)vceqq_s64(*(int64x2_t *)((char *)&v26[2] + v10), v25))))) & 1) == 0&& !*v14&& !v14[1])
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v6);
LABEL_3:
    v11 = v34;
    goto LABEL_4;
  }
  memcpy(v26, v29, 0x1B9uLL);
  LOBYTE(v26[0]) = 2;
  sub_1B222991C();
  memcpy(v26, v29, 0x1B9uLL);
  switch(*(_QWORD *)&v21[v10])
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      LOBYTE(v26[0]) = 3;
      sub_1B2229910();
      swift_bridgeObjectRelease();
      memcpy(v26, v29, 0x1B9uLL);
      switch(*(_QWORD *)((char *)v26 + v10))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          LOBYTE(v26[0]) = 4;
          sub_1B2229910();
          swift_bridgeObjectRelease();
          memcpy(v26, v29, 0x1B9uLL);
          sub_1B1F9FE8C(*(_QWORD *)&v20[v10]);
          LOBYTE(v26[0]) = 5;
          sub_1B2229910();
          swift_bridgeObjectRelease();
          memcpy(v26, v29, 0x1B9uLL);
          sub_1B1F9FE8C(*(_QWORD *)&v19[v10]);
          LOBYTE(v26[0]) = 6;
          sub_1B2229910();
          swift_bridgeObjectRelease();
          memcpy(v26, v29, 0x1B9uLL);
          sub_1B1F9FE8C(*(_QWORD *)((char *)v18 + v10));
          LOBYTE(v26[0]) = 7;
          sub_1B2229910();
          swift_bridgeObjectRelease();
          memcpy(v26, v29, 0x1B9uLL);
          sub_1B1F9FE8C(*(_QWORD *)((char *)v17 + v10));
          LOBYTE(v26[0]) = 8;
          sub_1B2229910();
          (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v6);
          swift_bridgeObjectRelease();
          goto LABEL_3;
        default:
          goto LABEL_15;
      }
    default:
LABEL_15:
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1B2155194(_QWORD *a1)
{
  return sub_1B2154B1C(a1);
}

uint64_t sub_1B21551A8(char *a1, char *a2)
{
  return sub_1B1F96394(*a1, *a2);
}

uint64_t sub_1B21551B4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2155238()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2155298()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B2155318@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B2155324(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7475626972747461;
  if (*v1)
    v2 = 0x7374756F79616CLL;
  v3 = 0xEA00000000007365;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B2155368()
{
  _BYTE *v0;

  if (*v0)
    return 0x7374756F79616CLL;
  else
    return 0x7475626972747461;
}

uint64_t sub_1B21553A8@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B21553B4()
{
  sub_1B2156D48();
  return sub_1B222A1D4();
}

uint64_t sub_1B21553DC()
{
  sub_1B2156D48();
  return sub_1B222A1E0();
}

uint64_t sub_1B2155404(char *a1, unsigned __int8 *a2)
{
  return sub_1B1F9656C(*a1, *a2);
}

uint64_t sub_1B2155410()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21554B0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B215552C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21555C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

void sub_1B21555FC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xEC0000007865646ELL;
  v4 = 0x74657366666FLL;
  if (v2 != 1)
    v4 = 0x74616D726F66;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x695F726566667562;
  if (!v5)
    v3 = 0xE600000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_1B215565C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x74657366666FLL;
  if (*v0 != 1)
    v1 = 0x74616D726F66;
  if (*v0)
    return v1;
  else
    return 0x695F726566667562;
}

uint64_t sub_1B21556B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

uint64_t sub_1B21556E4()
{
  sub_1B2156D04();
  return sub_1B222A1D4();
}

uint64_t sub_1B215570C()
{
  sub_1B2156D04();
  return sub_1B222A1E0();
}

uint64_t sub_1B2155734(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F9643C(*a1, *a2);
}

uint64_t sub_1B2155740()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21557EC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B2155874()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B215591C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

void sub_1B2155950(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xED00006E6F697463;
  v5 = 0x6E75665F70657473;
  if (v2 != 1)
  {
    v5 = 0x7461725F70657473;
    v4 = 0xE900000000000065;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656469727473;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B21559BC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E75665F70657473;
  if (*v0 != 1)
    v1 = 0x7461725F70657473;
  if (*v0)
    return v1;
  else
    return 0x656469727473;
}

uint64_t sub_1B2155A24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1C86F74();
  *a1 = result;
  return result;
}

uint64_t sub_1B2155A50()
{
  sub_1B2156CC0();
  return sub_1B222A1D4();
}

uint64_t sub_1B2155A78()
{
  sub_1B2156CC0();
  return sub_1B222A1E0();
}

uint64_t sub_1B2155AA0(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  char *v49;
  id v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  _BYTE v70[24];
  uint64_t v71;
  id v72;

  v3 = v2;
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1B19F8E54(0, &qword_1EEF64710, (uint64_t (*)(void))sub_1B2156CC0, (uint64_t)&type metadata for VertexDescriptorCoder.LayoutCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v58 = *(_QWORD *)(v7 - 8);
  v59 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v60 = (char *)&v55 - v9;
  sub_1B19F8E54(0, &qword_1EEF64720, (uint64_t (*)(void))sub_1B2156D04, (uint64_t)&type metadata for VertexDescriptorCoder.AttributeCodingKeys, v6);
  v11 = *(_QWORD *)(v10 - 8);
  v61 = v10;
  v62 = v11;
  MEMORY[0x1E0C80A78](v10, v12);
  v65 = (char *)&v55 - v13;
  sub_1B19F8E54(0, &qword_1EEF64730, (uint64_t (*)(void))sub_1B2156D48, (uint64_t)&type metadata for VertexDescriptorCoder.CodingKeys, v6);
  v15 = v14;
  v55 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v55 - v17;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2156D48();
  sub_1B222A180();
  LOBYTE(v68[0]) = 0;
  v57 = v15;
  v56 = v18;
  sub_1B22298B0();
  v19 = 31;
  v20 = &selRef_maximumDrawableCount;
  while (1)
  {
    v21 = v19 - 1;
    v22 = objc_msgSend(a2, sel_attributes);
    v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, v19 - 1);

    v24 = objc_msgSend(v23, sel_format);
    if (v24)
      break;
    --v19;
    if (!v21)
    {
      v19 = 31;
      break;
    }
  }
  v25 = 0;
  v72 = a2;
  v26 = v61;
  while (1)
  {
    sub_1B19FC264((uint64_t)v70, v71);
    sub_1B2156D04();
    v27 = v65;
    sub_1B2229B50();
    v28 = objc_msgSend(v72, sel_attributes);
    v29 = objc_msgSend(v28, v20[183], v25);

    if (v29)
      break;
    (*(void (**)(const char *, uint64_t))(v62 + 8))(v27, v26);
LABEL_7:
    if (v19 == ++v25)
    {
      v42 = v3;
      LOBYTE(v66) = 1;
      sub_1B22298B0();
      v43 = 31;
      do
      {
        v44 = v43 - 1;
        v45 = objc_msgSend(v72, sel_layouts);
        v46 = objc_msgSend(v45, sel_objectAtIndexedSubscript_, v43 - 1);

        v47 = objc_msgSend(v46, sel_stride);
        if (v47)
          goto LABEL_17;
        --v43;
      }
      while (v44);
      v43 = 31;
LABEL_17:
      v48 = 0;
      v65 = "ReverseSubstract";
      while (1)
      {
        sub_1B19FC264((uint64_t)v68, v69);
        sub_1B2156CC0();
        v49 = v60;
        sub_1B2229B50();
        v50 = objc_msgSend(v72, sel_layouts);
        v51 = objc_msgSend(v50, sel_objectAtIndexedSubscript_, v48);

        if (v51)
        {
          objc_msgSend(v51, sel_stride);
          LOBYTE(v66) = 0;
          sub_1B2229940();
          if (v42)
          {

            (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v59);
            (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v68);
            return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v70);
          }
          objc_msgSend(v51, sel_stepFunction);
          v53 = v59;
          v52 = v60;
          LOBYTE(v66) = 1;
          sub_1B2229910();
          swift_bridgeObjectRelease();
          objc_msgSend(v51, sel_stepRate);
          LOBYTE(v66) = 2;
          sub_1B2229940();
          v42 = 0;
          (*(void (**)(char *, uint64_t))(v58 + 8))(v52, v53);

        }
        else
        {
          (*(void (**)(char *, uint64_t))(v58 + 8))(v49, v59);
        }
        if (v43 == ++v48)
        {
          (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v68);
          return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v70);
        }
      }
    }
  }
  objc_msgSend(v29, sel_bufferIndex);
  LOBYTE(v68[0]) = 0;
  sub_1B2229940();
  if (v3)
  {

    (*(void (**)(const char *, uint64_t))(v62 + 8))(v27, v26);
    goto LABEL_24;
  }
  objc_msgSend(v29, sel_offset);
  LOBYTE(v68[0]) = 1;
  sub_1B2229940();
  v63 = v29;
  sub_1B1F9C4B8((uint64_t)objc_msgSend(v29, sel_format));
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  v64 = 0;
  swift_bridgeObjectRelease();
  v30 = sub_1B222916C();
  v32 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v33 = sub_1B1DCD8E8();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  swift_bridgeObjectRelease();
  v66 = v30;
  v67 = v32;
  v26 = v61;
  v68[0] = v33;
  v68[1] = v35;
  v68[2] = v37;
  v69 = v39;
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = v65;
  swift_bridgeObjectRelease();
  LOBYTE(v68[0]) = 2;
  v41 = v64;
  sub_1B2229910();
  v3 = v41;
  if (!v41)
  {
    (*(void (**)(const char *, uint64_t))(v62 + 8))(v40, v26);

    swift_bridgeObjectRelease();
    v20 = &selRef_maximumDrawableCount;
    goto LABEL_7;
  }

  swift_bridgeObjectRelease();
  (*(void (**)(const char *, uint64_t))(v62 + 8))(v40, v26);
LABEL_24:
  (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v70);
}

uint64_t sub_1B2156300(_QWORD *a1)
{
  void **v1;

  return sub_1B2155AA0(a1, *v1);
}

uint64_t sub_1B2156318()
{
  unint64_t v0;

  v0 = sub_1B2229F64();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12)
    return 18;
  else
    return v0;
}

uint64_t sub_1B2156368(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E6174736E6F63 && a2 == 0xEF7365756C61765FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B21564D8()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_1B2156520()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t sub_1B2156568(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[4];
  char v15;
  char v16;

  v14[2] = a5;
  v14[1] = a4;
  sub_1B19F8E54(0, &qword_1EEF64670, (uint64_t (*)(void))sub_1B21566A8, (uint64_t)&_s10CodingKeysON_3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v14 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21566A8();
  sub_1B222A180();
  v16 = 1;
  v12 = v14[3];
  sub_1B2229910();
  if (!v12)
  {
    v15 = 0;
    sub_1B2229910();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

unint64_t sub_1B21566A8()
{
  unint64_t result;

  result = qword_1EEF64678;
  if (!qword_1EEF64678)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C617C, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_1EEF64678);
  }
  return result;
}

unint64_t sub_1B21566EC()
{
  unint64_t result;

  result = qword_1EEF64688;
  if (!qword_1EEF64688)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C612C, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1EEF64688);
  }
  return result;
}

unint64_t sub_1B2156730()
{
  unint64_t result;

  result = qword_1EEF64698;
  if (!qword_1EEF64698)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C60DC, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_1EEF64698);
  }
  return result;
}

unint64_t sub_1B2156774()
{
  unint64_t result;

  result = qword_1EEF646A0;
  if (!qword_1EEF646A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C60B4, &type metadata for ColorAttachmentsCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF646A0);
  }
  return result;
}

unint64_t sub_1B21567B8()
{
  unint64_t result;

  result = qword_1EEF646A8;
  if (!qword_1EEF646A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C608C, &type metadata for VertexDescriptorCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF646A8);
  }
  return result;
}

unint64_t sub_1B21567FC()
{
  unint64_t result;

  result = qword_1EEF646B0;
  if (!qword_1EEF646B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6064, &_s19PipelineScriptCoderVN);
    atomic_store(result, (unint64_t *)&qword_1EEF646B0);
  }
  return result;
}

ValueMetadata *_s19PipelineScriptCoderVMa()
{
  return &_s19PipelineScriptCoderVN;
}

ValueMetadata *type metadata accessor for VertexDescriptorCoder()
{
  return &type metadata for VertexDescriptorCoder;
}

ValueMetadata *type metadata accessor for ColorAttachmentsCoder()
{
  return &type metadata for ColorAttachmentsCoder;
}

uint64_t _s10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1B215694C + 4 * byte_1B22C5C79[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1B2156980 + 4 * byte_1B22C5C74[v4]))();
}

uint64_t sub_1B2156980(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2156988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2156990);
  return result;
}

uint64_t sub_1B215699C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B21569A4);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1B21569A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21569B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s10CodingKeysOMa_1()
{
  return &_s10CodingKeysON_1;
}

ValueMetadata *_s10CodingKeysOMa_2()
{
  return &_s10CodingKeysON_2;
}

ValueMetadata *_s10CodingKeysOMa_3()
{
  return &_s10CodingKeysON_3;
}

unint64_t sub_1B21569F8()
{
  unint64_t result;

  result = qword_1EEF646B8;
  if (!qword_1EEF646B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5E5C, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_1EEF646B8);
  }
  return result;
}

unint64_t sub_1B2156A40()
{
  unint64_t result;

  result = qword_1EEF646C0;
  if (!qword_1EEF646C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5F4C, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1EEF646C0);
  }
  return result;
}

unint64_t sub_1B2156A88()
{
  unint64_t result;

  result = qword_1EEF646C8;
  if (!qword_1EEF646C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C603C, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_1EEF646C8);
  }
  return result;
}

unint64_t sub_1B2156AD0()
{
  unint64_t result;

  result = qword_1EEF646D0;
  if (!qword_1EEF646D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5F74, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_1EEF646D0);
  }
  return result;
}

unint64_t sub_1B2156B18()
{
  unint64_t result;

  result = qword_1EEF646D8;
  if (!qword_1EEF646D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5F9C, &_s10CodingKeysON_1);
    atomic_store(result, (unint64_t *)&qword_1EEF646D8);
  }
  return result;
}

unint64_t sub_1B2156B60()
{
  unint64_t result;

  result = qword_1EEF646E0;
  if (!qword_1EEF646E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5E84, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1EEF646E0);
  }
  return result;
}

unint64_t sub_1B2156BA8()
{
  unint64_t result;

  result = qword_1EEF646E8;
  if (!qword_1EEF646E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5EAC, &_s10CodingKeysON_2);
    atomic_store(result, (unint64_t *)&qword_1EEF646E8);
  }
  return result;
}

unint64_t sub_1B2156BF0()
{
  unint64_t result;

  result = qword_1EEF646F0;
  if (!qword_1EEF646F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5D94, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_1EEF646F0);
  }
  return result;
}

unint64_t sub_1B2156C38()
{
  unint64_t result;

  result = qword_1EEF646F8;
  if (!qword_1EEF646F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5DBC, &_s10CodingKeysON_3);
    atomic_store(result, (unint64_t *)&qword_1EEF646F8);
  }
  return result;
}

unint64_t sub_1B2156C7C()
{
  unint64_t result;

  result = qword_1EEF64708;
  if (!qword_1EEF64708)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6B44, &type metadata for ColorAttachmentsCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64708);
  }
  return result;
}

unint64_t sub_1B2156CC0()
{
  unint64_t result;

  result = qword_1EEF64718;
  if (!qword_1EEF64718)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6AF4, &type metadata for VertexDescriptorCoder.LayoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64718);
  }
  return result;
}

unint64_t sub_1B2156D04()
{
  unint64_t result;

  result = qword_1EEF64728;
  if (!qword_1EEF64728)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6AA4, &type metadata for VertexDescriptorCoder.AttributeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64728);
  }
  return result;
}

unint64_t sub_1B2156D48()
{
  unint64_t result;

  result = qword_1EEF64738;
  if (!qword_1EEF64738)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6A54, &type metadata for VertexDescriptorCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64738);
  }
  return result;
}

unint64_t sub_1B2156D8C()
{
  unint64_t result;

  result = qword_1EEF64748;
  if (!qword_1EEF64748)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6A04, &_s19PipelineScriptCoderV18PipelineCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64748);
  }
  return result;
}

unint64_t sub_1B2156DD0()
{
  unint64_t result;

  result = qword_1EEF64758;
  if (!qword_1EEF64758)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C69B4, &_s19PipelineScriptCoderV19LibrariesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64758);
  }
  return result;
}

unint64_t sub_1B2156E14()
{
  unint64_t result;

  result = qword_1EEF64768;
  if (!qword_1EEF64768)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6964, &_s19PipelineScriptCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64768);
  }
  return result;
}

unint64_t sub_1B2156E58()
{
  unint64_t result;

  result = qword_1EEF64780;
  if (!qword_1EEF64780)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5D00, &type metadata for ShaderCache.Library);
    atomic_store(result, (unint64_t *)&qword_1EEF64780);
  }
  return result;
}

uint64_t sub_1B2156E9C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a4();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B2156F08()
{
  unint64_t result;

  result = qword_1EEF64798;
  if (!qword_1EEF64798)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C693C, &_s19PipelineScriptCoderV24SpecializedFunctionCoderVN);
    atomic_store(result, (unint64_t *)&qword_1EEF64798);
  }
  return result;
}

unint64_t sub_1B2156F4C()
{
  unint64_t result;

  result = qword_1EEF647B0;
  if (!qword_1EEF647B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5CD8, &type metadata for ShaderCache.ComputePipeline);
    atomic_store(result, (unint64_t *)&qword_1EEF647B0);
  }
  return result;
}

unint64_t sub_1B2156F90()
{
  unint64_t result;

  result = qword_1EEF647C8;
  if (!qword_1EEF647C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C5CB0, &type metadata for ShaderCache.RenderPipeline);
    atomic_store(result, (unint64_t *)&qword_1EEF647C8);
  }
  return result;
}

uint64_t sub_1B2156FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *_s21FunctionConstantCoderVMa()
{
  return &_s21FunctionConstantCoderVN;
}

ValueMetadata *_s19PipelineScriptCoderV24SpecializedFunctionCoderVMa()
{
  return &_s19PipelineScriptCoderV24SpecializedFunctionCoderVN;
}

ValueMetadata *_s19PipelineScriptCoderV10CodingKeysOMa()
{
  return &_s19PipelineScriptCoderV10CodingKeysON;
}

ValueMetadata *_s19PipelineScriptCoderV19LibrariesCodingKeysOMa()
{
  return &_s19PipelineScriptCoderV19LibrariesCodingKeysON;
}

ValueMetadata *_s19PipelineScriptCoderV18PipelineCodingKeysOMa()
{
  return &_s19PipelineScriptCoderV18PipelineCodingKeysON;
}

uint64_t _s10CodingKeysOwst_2_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B21570CC + 4 * byte_1B22C5C83[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B2157100 + 4 * byte_1B22C5C7E[v4]))();
}

uint64_t sub_1B2157100(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2157108(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2157110);
  return result;
}

uint64_t sub_1B215711C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2157124);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B2157128(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2157130(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VertexDescriptorCoder.CodingKeys()
{
  return &type metadata for VertexDescriptorCoder.CodingKeys;
}

ValueMetadata *type metadata accessor for VertexDescriptorCoder.AttributeCodingKeys()
{
  return &type metadata for VertexDescriptorCoder.AttributeCodingKeys;
}

ValueMetadata *type metadata accessor for VertexDescriptorCoder.LayoutCodingKeys()
{
  return &type metadata for VertexDescriptorCoder.LayoutCodingKeys;
}

uint64_t storeEnumTagSinglePayload for ColorAttachmentsCoder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B21571B8 + 4 * byte_1B22C5C8D[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B21571EC + 4 * byte_1B22C5C88[v4]))();
}

uint64_t sub_1B21571EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21571F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B21571FCLL);
  return result;
}

uint64_t sub_1B2157208(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2157210);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B2157214(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B215721C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ColorAttachmentsCoder.CodingKeys()
{
  return &type metadata for ColorAttachmentsCoder.CodingKeys;
}

unint64_t sub_1B215723C()
{
  unint64_t result;

  result = qword_1EEF647D0;
  if (!qword_1EEF647D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C634C, &type metadata for ColorAttachmentsCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF647D0);
  }
  return result;
}

unint64_t sub_1B2157284()
{
  unint64_t result;

  result = qword_1EEF647D8;
  if (!qword_1EEF647D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C643C, &type metadata for VertexDescriptorCoder.LayoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF647D8);
  }
  return result;
}

unint64_t sub_1B21572CC()
{
  unint64_t result;

  result = qword_1EEF647E0;
  if (!qword_1EEF647E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C652C, &type metadata for VertexDescriptorCoder.AttributeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF647E0);
  }
  return result;
}

unint64_t sub_1B2157314()
{
  unint64_t result;

  result = qword_1EEF647E8;
  if (!qword_1EEF647E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C661C, &type metadata for VertexDescriptorCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF647E8);
  }
  return result;
}

unint64_t sub_1B215735C()
{
  unint64_t result;

  result = qword_1EEF647F0;
  if (!qword_1EEF647F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C670C, &_s19PipelineScriptCoderV18PipelineCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF647F0);
  }
  return result;
}

unint64_t sub_1B21573A4()
{
  unint64_t result;

  result = qword_1EEF647F8;
  if (!qword_1EEF647F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C67FC, &_s19PipelineScriptCoderV19LibrariesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF647F8);
  }
  return result;
}

unint64_t sub_1B21573EC()
{
  unint64_t result;

  result = qword_1EEF64800;
  if (!qword_1EEF64800)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C68EC, &_s19PipelineScriptCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64800);
  }
  return result;
}

unint64_t sub_1B2157434()
{
  unint64_t result;

  result = qword_1EEF64808;
  if (!qword_1EEF64808)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6824, &_s19PipelineScriptCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64808);
  }
  return result;
}

unint64_t sub_1B215747C()
{
  unint64_t result;

  result = qword_1EEF64810;
  if (!qword_1EEF64810)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C684C, &_s19PipelineScriptCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64810);
  }
  return result;
}

unint64_t sub_1B21574C4()
{
  unint64_t result;

  result = qword_1EEF64818;
  if (!qword_1EEF64818)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6734, &_s19PipelineScriptCoderV19LibrariesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64818);
  }
  return result;
}

unint64_t sub_1B215750C()
{
  unint64_t result;

  result = qword_1EEF64820;
  if (!qword_1EEF64820)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C675C, &_s19PipelineScriptCoderV19LibrariesCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64820);
  }
  return result;
}

unint64_t sub_1B2157554()
{
  unint64_t result;

  result = qword_1EEF64828;
  if (!qword_1EEF64828)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6644, &_s19PipelineScriptCoderV18PipelineCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64828);
  }
  return result;
}

unint64_t sub_1B215759C()
{
  unint64_t result;

  result = qword_1EEF64830;
  if (!qword_1EEF64830)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C666C, &_s19PipelineScriptCoderV18PipelineCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64830);
  }
  return result;
}

unint64_t sub_1B21575E4()
{
  unint64_t result;

  result = qword_1EEF64838;
  if (!qword_1EEF64838)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6554, &type metadata for VertexDescriptorCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64838);
  }
  return result;
}

unint64_t sub_1B215762C()
{
  unint64_t result;

  result = qword_1EEF64840;
  if (!qword_1EEF64840)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C657C, &type metadata for VertexDescriptorCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64840);
  }
  return result;
}

unint64_t sub_1B2157674()
{
  unint64_t result;

  result = qword_1EEF64848;
  if (!qword_1EEF64848)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6464, &type metadata for VertexDescriptorCoder.AttributeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64848);
  }
  return result;
}

unint64_t sub_1B21576BC()
{
  unint64_t result;

  result = qword_1EEF64850;
  if (!qword_1EEF64850)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C648C, &type metadata for VertexDescriptorCoder.AttributeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64850);
  }
  return result;
}

unint64_t sub_1B2157704()
{
  unint64_t result;

  result = qword_1EEF64858;
  if (!qword_1EEF64858)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6374, &type metadata for VertexDescriptorCoder.LayoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64858);
  }
  return result;
}

unint64_t sub_1B215774C()
{
  unint64_t result;

  result = qword_1EEF64860;
  if (!qword_1EEF64860)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C639C, &type metadata for VertexDescriptorCoder.LayoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64860);
  }
  return result;
}

unint64_t sub_1B2157794()
{
  unint64_t result;

  result = qword_1EEF64868;
  if (!qword_1EEF64868)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6284, &type metadata for ColorAttachmentsCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64868);
  }
  return result;
}

unint64_t sub_1B21577DC()
{
  unint64_t result;

  result = qword_1EEF64870;
  if (!qword_1EEF64870)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C62AC, &type metadata for ColorAttachmentsCoder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64870);
  }
  return result;
}

unint64_t sub_1B2157820()
{
  unint64_t result;

  result = qword_1EEF64880;
  if (!qword_1EEF64880)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6EDC, &_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64880);
  }
  return result;
}

unint64_t sub_1B2157864()
{
  unint64_t result;

  result = qword_1EEF64898;
  if (!qword_1EEF64898)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6914, &_s21FunctionConstantCoderVN);
    atomic_store(result, (unint64_t *)&qword_1EEF64898);
  }
  return result;
}

unint64_t sub_1B21578A8()
{
  unint64_t result;

  result = qword_1EEF648A8;
  if (!qword_1EEF648A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6E8C, &_s21FunctionConstantCoderV15ValueCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648A8);
  }
  return result;
}

unint64_t sub_1B21578EC()
{
  unint64_t result;

  result = qword_1EEF648B8;
  if (!qword_1EEF648B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6E3C, &_s21FunctionConstantCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648B8);
  }
  return result;
}

uint64_t _s21FunctionConstantCoderV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B215797C + 4 * byte_1B22C5C97[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B21579B0 + 4 * byte_1B22C5C92[v4]))();
}

uint64_t sub_1B21579B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21579B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B21579C0);
  return result;
}

uint64_t sub_1B21579CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B21579D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B21579D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21579E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s21FunctionConstantCoderV10CodingKeysOMa()
{
  return &_s21FunctionConstantCoderV10CodingKeysON;
}

uint64_t _s21FunctionConstantCoderV15ValueCodingKeysOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B2157A3C + 4 * byte_1B22C5C9C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B2157A5C + 4 * byte_1B22C5CA1[v4]))();
}

_BYTE *sub_1B2157A3C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B2157A5C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2157A64(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2157A6C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2157A74(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2157A7C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s21FunctionConstantCoderV15ValueCodingKeysOMa()
{
  return &_s21FunctionConstantCoderV15ValueCodingKeysON;
}

uint64_t _s10CodingKeysOwst_1_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B2157AE4 + 4 * byte_1B22C5CAB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B2157B18 + 4 * byte_1B22C5CA6[v4]))();
}

uint64_t sub_1B2157B18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2157B20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2157B28);
  return result;
}

uint64_t sub_1B2157B34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2157B3CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B2157B40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2157B48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysOMa()
{
  return &_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysON;
}

unint64_t sub_1B2157B68()
{
  unint64_t result;

  result = qword_1EEF648C0;
  if (!qword_1EEF648C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6C34, &_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648C0);
  }
  return result;
}

unint64_t sub_1B2157BB0()
{
  unint64_t result;

  result = qword_1EEF648C8;
  if (!qword_1EEF648C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6D24, &_s21FunctionConstantCoderV15ValueCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648C8);
  }
  return result;
}

unint64_t sub_1B2157BF8()
{
  unint64_t result;

  result = qword_1EEF648D0;
  if (!qword_1EEF648D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6E14, &_s21FunctionConstantCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648D0);
  }
  return result;
}

unint64_t sub_1B2157C40()
{
  unint64_t result;

  result = qword_1EEF648D8;
  if (!qword_1EEF648D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6D4C, &_s21FunctionConstantCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648D8);
  }
  return result;
}

unint64_t sub_1B2157C88()
{
  unint64_t result;

  result = qword_1EEF648E0;
  if (!qword_1EEF648E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6D74, &_s21FunctionConstantCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648E0);
  }
  return result;
}

unint64_t sub_1B2157CD0()
{
  unint64_t result;

  result = qword_1EEF648E8;
  if (!qword_1EEF648E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6C5C, &_s21FunctionConstantCoderV15ValueCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648E8);
  }
  return result;
}

unint64_t sub_1B2157D18()
{
  unint64_t result;

  result = qword_1EEF648F0;
  if (!qword_1EEF648F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6C84, &_s21FunctionConstantCoderV15ValueCodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648F0);
  }
  return result;
}

unint64_t sub_1B2157D60()
{
  unint64_t result;

  result = qword_1EEF648F8;
  if (!qword_1EEF648F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6BA4, &_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF648F8);
  }
  return result;
}

unint64_t sub_1B2157DA8()
{
  unint64_t result;

  result = qword_1EEF64900;
  if (!qword_1EEF64900)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6BCC, &_s19PipelineScriptCoderV24SpecializedFunctionCoderV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64900);
  }
  return result;
}

uint64_t sub_1B2157DEC()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B2157E9C()
{
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A084();
}

uint64_t sub_1B2157F18()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  return sub_1B222A0C0();
}

double sub_1B2157FC4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 16) = xmmword_1B2246910;
  *(_OWORD *)(a1 + 32) = xmmword_1B2246910;
  *(_BYTE *)(a1 + 48) = 15;
  return result;
}

BOOL sub_1B2157FE0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  char v6;
  _OWORD v7[3];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 48);
  return sub_1B21582EC((uint64_t *)v5, (uint64_t *)v7);
}

uint64_t sub_1B2158038()
{
  sub_1B2229430();
  sub_1B2228890();
  type metadata accessor for MTLBlendFactor(0);
  sub_1B22295EC();
  sub_1B2228890();
  type metadata accessor for MTLBlendOperation(0);
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  type metadata accessor for MTLColorWriteMask(0);
  sub_1B22295EC();
  return 0;
}

uint64_t getEnumTagSinglePayload for BlendingStates(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BlendingStates(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 49) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BlendingStates()
{
  return &type metadata for BlendingStates;
}

unint64_t sub_1B21582A8()
{
  unint64_t result;

  result = qword_1EEF64908;
  if (!qword_1EEF64908)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C6F64, &type metadata for BlendingStates);
    atomic_store(result, (unint64_t *)&qword_1EEF64908);
  }
  return result;
}

BOOL sub_1B21582EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2[4];
  v13 = a2[5];
  v14 = *((unsigned __int8 *)a1 + 48);
  v15 = *((unsigned __int8 *)a2 + 48);
  return v2 == v4 && v3 == v5 && v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13 && v14 == v15;
}

float32x4_t sub_1B2158330(uint64_t a1, char a2, char a3)
{
  float32x4_t *v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  float32x2_t v16;
  uint64_t v17;
  float32x2_t *v18;
  float32x2_t v19;
  float v20;
  float *v21;
  float v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t result;
  int32x2_t v44;

  v6 = *(float32x4_t **)(a1 + 8);
  v7 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
  v8 = sub_1B1B47D58();
  if ((v10 & 1) == 0)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(_QWORD *)(a1 + 56) - v11;
    if (!v12)
    {
      v9.i32[0] = 0;
      if ((a2 & 1) == 0)
      {
        v9.i32[0] = 0;
        if ((a3 & 1) == 0)
          goto LABEL_23;
LABEL_22:
        v44 = v9;
        v31 = cbrtf(3.0);
        v9.i32[1] = v44.i32[1];
        *(float *)v9.i32 = *(float *)v44.i32 * v31;
        goto LABEL_23;
      }
      goto LABEL_20;
    }
    v21 = (float *)(v8 + 4 * v11);
    v20 = 0.0;
    do
    {
      v22 = *v21++;
      v20 = fmaxf(v20, v22);
      --v12;
    }
    while (v12);
LABEL_19:
    *(float *)v9.i32 = v20 * 0.5;
    if ((a2 & 1) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
  v13 = sub_1B1B47DC8();
  if ((v14 & 1) == 0)
  {
    v15 = *(_QWORD *)(a1 + 48);
    v16 = 0;
    v17 = *(_QWORD *)(a1 + 56) - v15;
    if (v17)
    {
      v18 = (float32x2_t *)(v13 + 8 * v15);
      v16 = 0;
      do
      {
        v19 = *v18++;
        v16 = vmaxnm_f32(v16, v19);
        --v17;
      }
      while (v17);
    }
    v20 = fmaxf(v16.f32[0], v16.f32[1]);
    goto LABEL_19;
  }
  v23 = sub_1B1B47E38();
  if ((v24 & 1) == 0)
  {
    v25 = *(_QWORD *)(a1 + 48);
    v26.i64[0] = 0;
    v26.i32[2] = 0;
    v27 = *(_QWORD *)(a1 + 56) - v25;
    if (v27)
    {
      v28 = (float32x4_t *)(v23 + 16 * v25);
      do
      {
        v29 = *v28++;
        v30 = v29;
        v26.i32[3] = 0;
        v30.i32[3] = 0;
        v26 = vmaxnmq_f32(v26, v30);
        --v27;
      }
      while (v27);
    }
    v20 = fmaxf(fmaxf(v26.f32[0], v26.f32[2]), v26.f32[1]);
    goto LABEL_19;
  }
  v9.i32[0] = 0.5;
  if ((a2 & 1) != 0)
  {
LABEL_20:
    *(float *)v9.i32 = *(float *)v9.i32 + *(float *)v9.i32;
LABEL_21:
    if ((a3 & 1) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  v9.i32[0] = 0.5;
  if ((a3 & 1) != 0)
    goto LABEL_22;
LABEL_23:
  v32 = *(_QWORD *)(a1 + 48);
  v33 = *(float32x4_t *)(v7 + 16 * v32);
  v34 = *(_QWORD *)(a1 + 56) - v32;
  if (v34)
  {
    v36 = (float32x4_t *)(v7 + 16 * v32);
    v35 = v33;
    do
    {
      v37 = *v36++;
      v33 = vminnmq_f32(v33, v37);
      v35 = vmaxnmq_f32(v35, v37);
      --v34;
    }
    while (v34);
  }
  else
  {
    v35 = *(float32x4_t *)(v7 + 16 * v32);
  }
  v38 = (float32x4_t)vdupq_lane_s32(v9, 0);
  v39 = vsubq_f32(v33, v38);
  v39.i32[3] = 1.0;
  v40 = vaddq_f32(v38, v35);
  v40.i32[3] = 1.0;
  v41.i64[0] = 0x3F0000003F000000;
  v41.i64[1] = 0x3F0000003F000000;
  v42 = vmulq_f32(vaddq_f32(v39, v40), v41);
  result = vmulq_f32(vsubq_f32(v40, v39), v41);
  v6[17] = v42;
  v6[18] = result;
  v6[19].i32[0] = v6[7].i32[1];
  return result;
}

uint64_t type metadata accessor for ParticleUpdateAABB.System()
{
  return objc_opt_self();
}

const char *sub_1B2158538()
{
  return "ParticleUpdateAABB.CPU";
}

uint64_t sub_1B215854C()
{
  return type metadata accessor for ParticleUpdateAABB.System();
}

uint64_t sub_1B2158568(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  os_unfair_lock_s *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t j;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  void (*v72)(uint64_t);
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  _QWORD *v95;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v97;
  _QWORD *v98;
  size_t v99;
  char *v100;
  char *v101;
  char *v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  _QWORD *v113;
  char v114;
  int v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  float32x4_t v138;
  uint64_t v139;
  float32x4_t v140;
  uint64_t v141;
  float32x4_t v142;
  uint64_t v143;
  float32x4_t v144;
  unsigned __int16 *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int16 *v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152[12];
  _BYTE v153[80];
  _OWORD v154[2];
  char v155;
  _QWORD v156[7];
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD v161[7];
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _OWORD v166[2];
  uint64_t v167;
  _QWORD v168[10];
  char v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;

  v110 = *(_QWORD *)a1;
  swift_retain();
  v109 = a1;
  sub_1B1E5371C();
  v2 = sub_1B1E36538((uint64_t)&type metadata for ParticlePivot);
  v3 = sub_1B1E36538((uint64_t)&type metadata for Orientation)
    || sub_1B1E36538((uint64_t)&type metadata for ParticleAngle);
  v4 = *(_OWORD *)(a1 + 104);
  v166[0] = *(_OWORD *)(a1 + 88);
  v166[1] = v4;
  v167 = *(_QWORD *)(a1 + 120);
  sub_1B1E8FCE4(v110, (uint64_t)v166, 0x200000000, v152);
  sub_1B1F55C64((uint64_t)v152, (uint64_t)v161, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  v145 = (unsigned __int16 *)v161[0];
  if (v161[0])
  {
    v127 = v165;
    if (v165 >= 1)
    {
      v125 = v162;
      if (v162)
      {
        v123 = v161[5];
        v5 = v164;
        v6 = v164[4];
        v121 = v163;
        v7 = *(unsigned __int8 *)(v163 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v117 = v164 + 8;
        v143 = v161[0] + 41;
        swift_retain();
        swift_retain();
        swift_retain();
        v8 = 0;
        v114 = v2;
        v112 = v3;
        v119 = v7;
        v150 = v5;
        v111 = v6;
        while (1)
        {
          v137 = v8;
          v9 = (unsigned int *)(v123 + 48 * v8);
          v10 = *v9;
          v11 = v9[1];
          v12 = v9[2];
          v13 = *((_QWORD *)v9 + 3);
          v147 = *((_QWORD *)v9 + 2);
          v15 = *((_QWORD *)v9 + 4);
          v14 = *((_QWORD *)v9 + 5);
          if (v7)
          {
            v16 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v16);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v6);
          v133 = v5[7];
          v135 = v5[6];
          v129 = v5[9];
          v131 = v5[8];
          v139 = v5[10];
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16);
          v141 = v14;
          v18 = v5[4];
          v19 = v17 + 1;
          v20 = 48 * (v17 + 1);
          swift_retain();
          v150[6] = ecs_stack_allocator_allocate(v18, v20, 8);
          v150[7] = v19;
          v5 = v150;
          v117[1] = 0;
          v117[2] = 0;
          *v117 = 0;
          swift_release();
          v168[0] = v121;
          v168[1] = v141;
          v168[2] = v150;
          v168[3] = v12;
          v168[4] = (v11 - v10 + v12);
          v168[5] = v127;
          v168[6] = v10;
          v168[7] = v11;
          v168[8] = 0;
          v168[9] = 0;
          v169 = 1;
          v170 = v147;
          v171 = v13;
          v172 = v15;
          sub_1B2158330((uint64_t)v168, v114, v112);
          v21 = v150[6];
          v148 = v150[8];
          if (!v148)
          {
            v48 = v150[7];
            v49 = (_QWORD *)v150[4];
            v6 = v111;
            v50 = v135;
            v51 = v137;
            v52 = v133;
            goto LABEL_49;
          }
          for (i = 0; i != v148; ++i)
          {
            v24 = v21;
            v25 = (uint64_t *)(v21 + 48 * i);
            v26 = *v25;
            v27 = (void (*)(uint64_t))v25[4];
            v28 = v5[9];
            if (v28)
              v29 = v26 == v28;
            else
              v29 = 0;
            if (v29 || !v145[11])
              goto LABEL_14;
            v30 = v145[9];
            v31 = (_QWORD *)(v143 + v145[8]);
            v32 = v25[2];
            v33 = v31;
            v34 = v30 >> 4;
            v35 = v143;
            if (v30 >= 0x10)
            {
              while (*v33 != v26)
              {
                ++v35;
                v33 += 2;
                if (!--v34)
                  goto LABEL_29;
              }
              v36 = *(unsigned __int8 *)(v35 + v145[10]);
              v37 = v36 > 5;
              v38 = (1 << v36) & 0x23;
              if (v37 || v38 == 0)
              {
LABEL_14:
                v23 = swift_retain();
                v27(v23);
                swift_release();
                goto LABEL_15;
              }
            }
LABEL_29:
            if (swift_conformsToProtocol2())
              v40 = v32;
            else
              v40 = 0;
            if (v40)
            {
              if (v30 < 0x10)
                goto LABEL_14;
              v41 = v31;
              v42 = v30 >> 4;
              v43 = v143;
              while (*v41 != v40)
              {
                ++v43;
                v41 += 2;
                if (!--v42)
                  goto LABEL_42;
              }
              v44 = *(unsigned __int8 *)(v43 + v145[10]);
              v37 = v44 > 5;
              v45 = (1 << v44) & 0x23;
              if (v37 || v45 == 0)
                goto LABEL_14;
LABEL_42:
              v47 = 16 * (v30 >> 4);
              while (*v31 != v40)
              {
                v31 += 2;
                v47 -= 16;
                if (!v47)
                  goto LABEL_14;
              }
            }
LABEL_15:
            v5 = v150;
            v21 = v24;
          }
          v48 = v150[7];
          v21 = v150[6];
          v49 = (_QWORD *)v150[4];
          v6 = v111;
          v50 = v135;
          v51 = v137;
          v52 = v133;
          if ((uint64_t)v150[8] >= 1)
          {
            v53 = v150[6];
            swift_arrayDestroy();
            v21 = v53;
          }
LABEL_49:
          ecs_stack_allocator_deallocate(v49, v21, 48 * v48);
          v5[6] = v50;
          v5[7] = v52;
          v5[8] = v131;
          v5[9] = v129;
          v5[10] = v139;
          sub_1B1F03804((char *)v141);
          ecs_stack_allocator_pop_snapshot(v6);
          v7 = v119;
          if ((v119 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v141 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v141 + 376));
          }
          swift_release();
          v8 = v51 + 1;
          if (v8 == v125)
          {
            sub_1B19ED748(v152);
            break;
          }
        }
      }
    }
  }
  sub_1B1F55C64((uint64_t)v152, (uint64_t)v156, (uint64_t)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  v142 = (float32x4_t)xmmword_1B2244E20;
  v144 = (float32x4_t)xmmword_1B226DDC0;
  v149 = (unsigned __int16 *)v156[0];
  if (!v156[0])
    goto LABEL_113;
  v54 = v109;
  if (v160 >= 1)
  {
    v122 = v157;
    if (v157)
    {
      v55 = v159;
      v120 = v156[5];
      v56 = v159[4];
      v57 = *(unsigned __int8 *)(v158 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v113 = v159 + 13;
      v118 = v159 + 8;
      v146 = v156[0] + 41;
      swift_retain();
      swift_retain();
      swift_retain();
      v58 = 0;
      v142 = (float32x4_t)xmmword_1B2244E20;
      v144 = (float32x4_t)xmmword_1B226DDC0;
      v116 = v56;
      v115 = v57;
      while (1)
      {
        v62 = *(_QWORD *)(v120 + 48 * v58 + 40);
        if (v57)
        {
          v63 = *(os_unfair_lock_s **)(v62 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v63);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v62 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v56);
        v128 = v55[7];
        v130 = v55[6];
        v134 = v55[9];
        v136 = v55[8];
        v132 = v55[10];
        v64 = v55[4];
        v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v55[6] = ecs_stack_allocator_allocate(v64, 48 * v65, 8);
        v55[7] = v65;
        v118[1] = 0;
        v118[2] = 0;
        *v118 = 0;
        swift_release();
        v138 = *(float32x4_t *)(v62 + 288);
        v140 = *(float32x4_t *)(v62 + 272);
        v66 = v55[6];
        v151 = v55[8];
        if (!v151)
        {
          v92 = v55[7];
          v93 = (_QWORD *)v55[4];
          goto LABEL_98;
        }
        v124 = v62;
        v126 = v58;
        for (j = 0; j != v151; ++j)
        {
          v69 = v66;
          v70 = (uint64_t *)(v66 + 48 * j);
          v71 = *v70;
          v72 = (void (*)(uint64_t))v70[4];
          v73 = v55[9];
          if (v73)
            v74 = v71 == v73;
          else
            v74 = 0;
          if (v74 || !v149[11])
            goto LABEL_62;
          v75 = v149[9];
          v76 = (_QWORD *)(v146 + v149[8]);
          v77 = v70[2];
          v78 = v76;
          v79 = v75 >> 4;
          v80 = v146;
          if (v75 >= 0x10)
          {
            while (*v78 != v71)
            {
              ++v80;
              v78 += 2;
              if (!--v79)
                goto LABEL_77;
            }
            v81 = *(unsigned __int8 *)(v80 + v149[10]);
            v37 = v81 > 5;
            v82 = (1 << v81) & 0x23;
            if (v37 || v82 == 0)
            {
LABEL_62:
              v68 = swift_retain();
              v72(v68);
              swift_release();
              goto LABEL_63;
            }
          }
LABEL_77:
          if (swift_conformsToProtocol2())
            v84 = v77;
          else
            v84 = 0;
          if (v84)
          {
            if (v75 < 0x10)
              goto LABEL_62;
            v85 = v76;
            v86 = v75 >> 4;
            v87 = v146;
            while (*v85 != v84)
            {
              ++v87;
              v85 += 2;
              if (!--v86)
                goto LABEL_90;
            }
            v88 = *(unsigned __int8 *)(v87 + v149[10]);
            v37 = v88 > 5;
            v89 = (1 << v88) & 0x23;
            if (v37 || v89 == 0)
              goto LABEL_62;
LABEL_90:
            v91 = 16 * (v75 >> 4);
            while (*v76 != v84)
            {
              v76 += 2;
              v91 -= 16;
              if (!v91)
                goto LABEL_62;
            }
          }
LABEL_63:
          v66 = v69;
        }
        v92 = v55[7];
        v66 = v55[6];
        v93 = (_QWORD *)v55[4];
        if ((uint64_t)v55[8] >= 1)
        {
          v94 = v55[6];
          swift_arrayDestroy();
          v66 = v94;
        }
        v56 = v116;
        v57 = v115;
        v62 = v124;
        v58 = v126;
LABEL_98:
        ecs_stack_allocator_deallocate(v93, v66, 48 * v92);
        v55[6] = v130;
        v55[7] = v128;
        v55[8] = v136;
        v55[9] = v134;
        v55[10] = v132;
        if (*(_QWORD *)(v55[13] + 16))
        {
          v95 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v95, v62);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v97 = v55[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v97 + 16));
          }
          else
          {
            v98 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v97 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v98 = (_QWORD *)swift_allocObject();
              v99 = j__malloc_size(v98);
              v98[2] = 0;
              v98[3] = 2 * ((uint64_t)(v99 - 32) / 72);
            }
            *v113 = v98;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v55[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v100 = *(char **)(v62 + 232);
            v101 = *(char **)(v62 + 256);
            if (v100 == v101)
            {
              v102 = *(char **)(v62 + 240);
            }
            else
            {
              sub_1B1A1059C(v101, v100);
              v101 = *(char **)(v62 + 232);
              v102 = *(char **)(v62 + 240);
              if (v102 == v101)
              {
                v102 = 0;
                v101 = 0;
                *(_QWORD *)(v62 + 232) = 0;
                *(_QWORD *)(v62 + 240) = 0;
              }
            }
            *(_QWORD *)(v62 + 248) = v102;
            *(_QWORD *)(v62 + 256) = v101;
          }
        }
        ecs_stack_allocator_pop_snapshot(v56);
        if ((v57 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 376));
        }
        v59 = vminnmq_f32(vsubq_f32(v142, v144), vsubq_f32(v140, v138));
        v60 = vmaxnmq_f32(vaddq_f32(v144, v142), vaddq_f32(v140, v138));
        v61.i64[0] = 0x3F0000003F000000;
        v61.i64[1] = 0x3F0000003F000000;
        v142 = vmulq_f32(vaddq_f32(v59, v60), v61);
        v144 = vmulq_f32(vsubq_f32(v60, v59), v61);
        swift_release();
        if (++v58 == v122)
        {
          sub_1B19ED748(v152);
LABEL_113:
          v54 = v109;
          break;
        }
      }
    }
  }
  v104 = *(_DWORD *)(v54 + 32);
  v103 = *(_DWORD *)(v54 + 36);
  if ((sub_1B1E53374() & 1) == 0)
  {
    sub_1B1E53FDC();
    v105 = swift_retain();
    sub_1B1F213C0(v105, (uint64_t)v153);
    swift_release();
    sub_1B1F55C64((uint64_t)v153, (uint64_t)v154, (uint64_t)&qword_1ED4B79B0, (uint64_t)type metadata accessor for simd_float4x4, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
    if ((v155 & 1) != 0)
    {
      if (v104 != -1 || v103)
        goto LABEL_125;
    }
    else if (v104 != -1 || v103)
    {
      goto LABEL_125;
    }
LABEL_124:
    swift_release();
    sub_1B19ED748(v152);
    return swift_release();
  }
  v154[0] = v142;
  v154[1] = v144;
  if (v104 == -1 && !v103)
    goto LABEL_124;
LABEL_125:
  v107 = swift_retain();
  MEMORY[0x1E0C80A78](v107, v108);
  sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B21592D8);
  swift_release();
  swift_release();
  sub_1B19ED748(v152);
  return swift_release();
}

_QWORD *sub_1B21592D8(_QWORD *a1)
{
  return sub_1B21592EC(a1);
}

_QWORD *sub_1B21592EC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F57FD4(a1, *(_QWORD *)(v1 + 24), *(__n128 *)*(_QWORD *)(v1 + 16), *(__n128 *)(*(_QWORD *)(v1 + 16) + 16));
}

ValueMetadata *type metadata accessor for ParticleUpdateAABB()
{
  return &type metadata for ParticleUpdateAABB;
}

uint64_t sub_1B215931C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t i;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  __int128 v59;
  _QWORD *v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  _QWORD **v108;
  uint64_t v109;
  uint64_t v110;
  int v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126[2];
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  __int16 v136;
  char v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;

  v6 = *a1;
  v7 = *(unsigned __int8 *)(*a1 + 24);
  sub_1B1DCC5E8(v4[22]);
  if (v9)
  {
    v10 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  v135 = v7;
  v136 = 256;
  v137 = 0;
  v138 = MEMORY[0x1E0DEE9D8];
  v139 = 0;
  v140 = MEMORY[0x1E0DEE9D8];
  v141 = MEMORY[0x1E0DEE9D8];
  v142 = 257;
  v143 = 0;
  v144 = 0;
  v114 = v4;
  v11 = sub_1B1DE387C(v10, (uint64_t)&v135, a4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  *(_QWORD *)&v131 = 0;
  *((_QWORD *)&v131 + 1) = 0xE000000000000000;
  v12 = *(_QWORD *)(v11 + 128);
  v13 = *(_QWORD *)(v12 + 16);
  v113 = v6;
  v119 = v11;
  v112 = v7;
  if (v13)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v14 = (uint64_t *)(v12 + 40);
    do
    {
      v15 = *v14;
      v129 = *(v14 - 1);
      v130 = v15;
      v127 = 0x244E49414D4F4424;
      v128 = 0xE800000000000000;
      v126[0] = (_QWORD *)34;
      v126[1] = (_QWORD *)0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B1A06460();
      sub_1B222922C();
      swift_bridgeObjectRelease();
      v11 = v119;
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 += 2;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    v6 = v113;
  }
  else
  {
    swift_retain();
  }
  v129 = 10;
  v130 = 0xE100000000000000;
  v127 = 2314;
  v128 = 0xE200000000000000;
  sub_1B1A06460();
  sub_1B222922C();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v131 = 8201;
  *((_QWORD *)&v131 + 1) = 0xE200000000000000;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v108 = (_QWORD **)(v6 + 128);
  sub_1B1C9110C(0, 0, 8201, 0xE200000000000000);
  swift_release();
  v16 = *(_QWORD *)(v11 + 144);
  v17 = v114;
  v110 = *(_QWORD *)(v16 + 16);
  if (v110)
  {
    v109 = v16 + 32;
    swift_bridgeObjectRetain();
    for (i = 0; i != v110; i = v19 + 1)
    {
      v116 = i;
      v20 = (_QWORD *)(v109 + (i << 6));
      v21 = v20[3];
      v124 = v20[2];
      v22 = v20[5];
      v122 = v20[4];
      v23 = v20[7];
      v121 = v20[6];
      v24 = v17[4];
      *(_QWORD *)&v131 = v17[3];
      *((_QWORD *)&v131 + 1) = v24;
      swift_retain();
      swift_bridgeObjectRetain();
      v125 = v21;
      swift_bridgeObjectRetain();
      v123 = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v25 = v131;
      v120 = *(_QWORD **)(v6 + 144);
      v115 = v120[2];
      if (v115)
      {
        v26 = v120 + 6;
        v27 = v120[2];
        while (1)
        {
          v29 = *v26;
          v28 = v26[1];
          v30 = v26[2];
          v31 = v26[3];
          v32 = v26[4];
          v33 = v26[5];
          v34 = *(v26 - 2) == (_QWORD)v131 && *(v26 - 1) == *((_QWORD *)&v131 + 1);
          if (v34 || (sub_1B2229D24() & 1) != 0)
          {
            v35 = v29 == v124 && v28 == v125;
            if (v35 || (sub_1B2229D24() & 1) != 0)
            {
              v36 = v30 == v122 && v31 == v123;
              if (v36 || (sub_1B2229D24() & 1) != 0)
              {
                v37 = v32 == v121 && v33 == v23;
                if (v37 || (sub_1B2229D24() & 1) != 0)
                  break;
              }
            }
          }
          v26 += 8;
          if (!--v27)
            goto LABEL_37;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v6 = v113;
        v17 = v114;
        v7 = v112;
        v19 = v116;
      }
      else
      {
LABEL_37:
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v120 = sub_1B1C637DC(0, v115 + 1, 1, v120);
        v39 = v120[2];
        v38 = v120[3];
        v6 = v113;
        if (v39 >= v38 >> 1)
          v120 = sub_1B1C637DC(v38 > 1, v39 + 1, 1, v120);
        v7 = v112;
        v17 = v114;
        v19 = v116;
        v120[2] = v39 + 1;
        v40 = &v120[8 * v39];
        *((_OWORD *)v40 + 2) = v25;
        v40[6] = v124;
        v40[7] = v125;
        v40[8] = v122;
        v40[9] = v123;
        v40[10] = v121;
        v40[11] = v23;
        *(_QWORD *)(v113 + 144) = v120;
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v11 = v119;
  }
  *(_BYTE *)(v6 + 160) = (*(_BYTE *)(v6 + 160) | *(_BYTE *)(v11 + 160)) & 1;
  v41 = v17[7];
  if (!(v41 >> 62))
  {
    v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v42)
      goto LABEL_45;
LABEL_73:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_74;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  if (!sub_1B22296AC())
    goto LABEL_73;
LABEL_45:
  if ((v41 & 0xC000000000000001) == 0)
  {
    v43 = *(_QWORD *)(v41 + 32);
    swift_retain();
    goto LABEL_47;
  }
LABEL_74:
  v43 = MEMORY[0x1B5E21018](0, v41);
LABEL_47:
  swift_bridgeObjectRelease();
  v44 = *(_QWORD *)(v43 + 40);
  v45 = *(_QWORD *)(v43 + 48);
  swift_bridgeObjectRetain();
  swift_release();
  v46 = (_QWORD *)sub_1B1DDD484(v44, v45, *(unsigned __int8 *)(v6 + 24));
  swift_bridgeObjectRelease();
  swift_release();
  v47 = OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs;
  if (*(_QWORD *)(*(_QWORD *)((char *)v17
                             + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs)
                 + 16))
  {
    *(_QWORD *)&v131 = 8201;
    *((_QWORD *)&v131 + 1) = 0xE200000000000000;
    swift_retain();
    swift_bridgeObjectRetain();
    v48 = sub_1B1FC0A9C();
    v50 = v49;
    swift_bridgeObjectRelease();
    v129 = v48;
    v130 = v50;
    sub_1B2228890();
    if (v7 == 2)
    {
      v129 = 544366966;
      v130 = 0xE400000000000000;
      sub_1B2228890();
    }
    else
    {
      v129 = 0x745F3436746E69;
      v130 = 0xE700000000000000;
    }
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v129 = (uint64_t)v46;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v59 = v131;
    v60 = *v108;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v108 = v60;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v60 = sub_1B1C63044(0, v60[2] + 1, 1, v60);
      *v108 = v60;
    }
    v63 = v60[2];
    v62 = v60[3];
    if (v63 >= v62 >> 1)
    {
      v60 = sub_1B1C63044(v62 > 1, v63 + 1, 1, v60);
      *v108 = v60;
    }
    v60[2] = v63 + 1;
    *(_OWORD *)&v60[2 * v63 + 4] = v59;
    swift_release();
    swift_bridgeObjectRelease();
    v64 = *(_QWORD *)((char *)v17 + v47);
    v65 = *(_QWORD *)(v64 + 16);
    if (v65)
    {
      swift_bridgeObjectRetain();
      v66 = (uint64_t *)(v64 + 40);
      v11 = v119;
      do
      {
        v67 = *v66;
        *(_QWORD *)&v131 = *(v66 - 1);
        *((_QWORD *)&v131 + 1) = v67;
        swift_bridgeObjectRetain();
        sub_1B215AE0C((uint64_t *)&v131, (uint64_t)v17, a1, v7);
        swift_bridgeObjectRelease();
        v66 += 2;
        --v65;
      }
      while (v65);
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = v119;
    }
  }
  else
  {
    v129 = 8201;
    v130 = 0xE200000000000000;
    v131 = xmmword_1B2295CD0;
    v133 = 0;
    v134 = 0;
    v132 = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    v51 = sub_1B1FC0A9C();
    v53 = v52;
    swift_bridgeObjectRelease();
    v128 = v53;
    sub_1B2228890();
    sub_1B1C39E78((uint64_t)&v131, v51, v53, 0, v7);
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v127 = (uint64_t)v46;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v54 = *(_QWORD **)(v6 + 128);
    swift_bridgeObjectRetain();
    v55 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 128) = v54;
    if ((v55 & 1) == 0)
    {
      v54 = sub_1B1C63044(0, v54[2] + 1, 1, v54);
      *v108 = v54;
    }
    v57 = v54[2];
    v56 = v54[3];
    if (v57 >= v56 >> 1)
    {
      v54 = sub_1B1C63044(v56 > 1, v57 + 1, 1, v54);
      *v108 = v54;
    }
    v54[2] = v57 + 1;
    v58 = &v54[2 * v57];
    v58[4] = 8201;
    v58[5] = 0xE200000000000000;
    swift_release();
    swift_bridgeObjectRelease();
  }
  v127 = MEMORY[0x1E0DEE9D8];
  v68 = *(_QWORD *)(v11 + 112);
  if (v68 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v69 = sub_1B22296AC();
    if (!v69)
      goto LABEL_76;
  }
  else
  {
    v69 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v69)
      goto LABEL_76;
  }
  v70 = 0;
  do
  {
    if ((v68 & 0xC000000000000001) != 0)
    {
      v71 = MEMORY[0x1B5E21018](v70, v68);
    }
    else
    {
      v71 = *(_QWORD *)(v68 + 8 * v70 + 32);
      swift_retain();
    }
    ++v70;
    v129 = v71;
    sub_1B215B488((uint64_t)&v129, (uint64_t)v17, a2, a3, (_QWORD **)&v127);
    swift_release();
  }
  while (v69 != v70);
LABEL_76:
  swift_bridgeObjectRelease_n();
  v126[0] = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v72 = *(_QWORD *)(v119 + 120);
  if (v72 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v73 = sub_1B22296AC();
    if (!v73)
      goto LABEL_84;
  }
  else
  {
    v73 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v73)
      goto LABEL_84;
  }
  v74 = 0;
  do
  {
    if ((v72 & 0xC000000000000001) != 0)
    {
      v75 = MEMORY[0x1B5E21018](v74, v72);
    }
    else
    {
      v75 = *(_QWORD *)(v72 + 8 * v74 + 32);
      swift_retain();
    }
    ++v74;
    v129 = v75;
    sub_1B215B7C4((uint64_t)&v129, (uint64_t)v17, a2, a3, a1, v7, (uint64_t)v46, v126);
    swift_release();
  }
  while (v73 != v74);
LABEL_84:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  v76 = sub_1B1FC0A9C();
  v78 = v77;
  swift_bridgeObjectRelease();
  v129 = v76;
  v130 = v78;
  sub_1B2228890();
  v79 = v129;
  v80 = v130;
  swift_bridgeObjectRetain();
  v81 = sub_1B1FC0A9C();
  v83 = v82;
  swift_bridgeObjectRelease();
  v129 = v81;
  v130 = v83;
  sub_1B2228890();
  sub_1B1C3A8F4(v79, v80, 48, 0xE100000000000000, v129, v130, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v129 = 8201;
  v130 = 0xE200000000000000;
  swift_retain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v85 = v129;
  v84 = v130;
  v86 = *(_QWORD **)(v6 + 128);
  swift_bridgeObjectRetain();
  v87 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 128) = v86;
  if ((v87 & 1) == 0)
  {
    v86 = sub_1B1C63044(0, v86[2] + 1, 1, v86);
    *v108 = v86;
  }
  v89 = v86[2];
  v88 = v86[3];
  if (v89 >= v88 >> 1)
  {
    v86 = sub_1B1C63044(v88 > 1, v89 + 1, 1, v86);
    *v108 = v86;
  }
  v86[2] = v89 + 1;
  v90 = &v86[2 * v89];
  v90[4] = v85;
  v90[5] = v84;
  swift_release();
  swift_bridgeObjectRelease();
  v129 = v127;
  swift_bridgeObjectRetain();
  v91 = swift_bridgeObjectRetain();
  sub_1B19F48F0(v91);
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  v129 = 2099465;
  v130 = 0xE300000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  v92 = sub_1B1FC0A9C();
  v94 = v93;
  swift_bridgeObjectRelease();
  sub_1B1C3A564(v92, v94, v7);
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v96 = v129;
  v95 = v130;
  v97 = *(_QWORD **)(v6 + 128);
  swift_bridgeObjectRetain();
  v98 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 128) = v97;
  if ((v98 & 1) == 0)
  {
    v97 = sub_1B1C63044(0, v97[2] + 1, 1, v97);
    *v108 = v97;
  }
  v100 = v97[2];
  v99 = v97[3];
  if (v100 >= v99 >> 1)
  {
    v97 = sub_1B1C63044(v99 > 1, v100 + 1, 1, v97);
    *v108 = v97;
  }
  v97[2] = v100 + 1;
  v101 = &v97[2 * v100];
  v101[4] = v96;
  v101[5] = v95;
  swift_release();
  swift_bridgeObjectRelease();
  v102 = *(_QWORD **)(v6 + 128);
  swift_retain();
  v103 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v6 + 128) = v102;
  if ((v103 & 1) == 0)
  {
    v102 = sub_1B1C63044(0, v102[2] + 1, 1, v102);
    *v108 = v102;
  }
  v105 = v102[2];
  v104 = v102[3];
  if (v105 >= v104 >> 1)
  {
    v102 = sub_1B1C63044(v104 > 1, v105 + 1, 1, v102);
    *v108 = v102;
  }
  v102[2] = v105 + 1;
  v106 = &v102[2 * v105];
  v106[4] = 8200201;
  v106[5] = 0xE300000000000000;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1B215A414(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F95B28(*a1, *a2);
}

uint64_t sub_1B215A420()
{
  return sub_1B1FB3054();
}

uint64_t sub_1B215A428()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B215A49C()
{
  return sub_1B1DB5128();
}

uint64_t sub_1B215A4A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B215ADC4();
  *a1 = result;
  return result;
}

void sub_1B215A4D0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0x80000001B2329500;
  v5 = 0xD000000000000015;
  if (v2 != 1)
  {
    v5 = 0xD000000000000016;
    v4 = 0x80000001B2329520;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701869940;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B215A528()
{
  _BYTE *v0;
  int v1;
  unint64_t v2;

  v1 = *v0;
  v2 = 0xD000000000000015;
  if (v1 != 1)
    v2 = 0xD000000000000016;
  if (*v0)
    return v2;
  else
    return 1701869940;
}

uint64_t sub_1B215A57C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B215ADC4();
  *a1 = result;
  return result;
}

uint64_t sub_1B215A5A0()
{
  sub_1B215AD24();
  return sub_1B222A1D4();
}

uint64_t sub_1B215A5C8()
{
  sub_1B215AD24();
  return sub_1B222A1E0();
}

uint64_t sub_1B215A5F0(_QWORD *a1)
{
  swift_allocObject();
  return sub_1B215A638(a1);
}

uint64_t sub_1B215A638(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v3 = v1;
  sub_1B215AD68(0, &qword_1EEF64930, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v18 - v9;
  v11 = MEMORY[0x1E0DEE9D8];
  v24 = OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs) = MEMORY[0x1E0DEE9D8];
  v20 = OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayOutputs;
  *(_QWORD *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayOutputs) = v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B215AD24();
  swift_retain();
  sub_1B222A150();
  if (v2)
  {
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s20ArraySequenceSnippetCMa();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v19 = v7;
    LOBYTE(v21[0]) = 0;
    sub_1B19FA154();
    sub_1B2229814();
    v13 = v23;
    v14 = v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type;
    v15 = v22[1];
    *(_OWORD *)v14 = v22[0];
    *(_OWORD *)(v14 + 16) = v15;
    *(_QWORD *)(v14 + 32) = v13;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    LOBYTE(v21[0]) = 1;
    sub_1B1B28C94((unint64_t *)&qword_1ED4BA4A8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    *(_QWORD *)(v1 + v24) = *(_QWORD *)&v22[0];
    swift_bridgeObjectRelease();
    LOBYTE(v21[0]) = 2;
    sub_1B2229814();
    *(_QWORD *)(v1 + v20) = *(_QWORD *)&v22[0];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B19FA198((uint64_t)a1, (uint64_t)v22);
    sub_1B19FA198((uint64_t)v22, (uint64_t)v21);
    v16 = sub_1B1DD6A90(v21);
    v17 = v19;
    v3 = v16;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v22);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_1B215A9D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  char v15;

  sub_1B215AD68(0, &qword_1EEF64920, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v13 - v8;
  result = sub_1B1DD722C(a1);
  if (!v2)
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B215AD24();
    sub_1B222A180();
    v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type + 32);
    v12 = *(_OWORD *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type + 16);
    v13[0] = *(_OWORD *)(v1 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type);
    v13[1] = v12;
    v14 = v11;
    v15 = 0;
    sub_1B19FA094();
    sub_1B2229958();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v1
                                   + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayInputs);
    v15 = 1;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B28C94((unint64_t *)&qword_1EEF5AC40, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1B2229958();
    *(_QWORD *)&v13[0] = *(_QWORD *)(v1
                                   + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_additionalArrayOutputs);
    v15 = 2;
    sub_1B2229958();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1B215ABD8()
{
  uint64_t v0;

  sub_1B19F9FEC(*(_QWORD *)(v0 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type), *(_QWORD *)(v0 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B215AC20()
{
  uint64_t v0;

  v0 = sub_1B1DD7DC8();
  sub_1B19F9FEC(*(_QWORD *)(v0 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type), *(_QWORD *)(v0 + OBJC_IVAR____TtCO3VFX21GraphV1CodeGeneration20ArraySequenceSnippet_type + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B215AC8C()
{
  return _s20ArraySequenceSnippetCMa();
}

uint64_t _s20ArraySequenceSnippetCMa()
{
  uint64_t result;

  result = qword_1EEF64910;
  if (!qword_1EEF64910)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B215ACD0()
{
  return swift_updateClassMetadata2();
}

unint64_t sub_1B215AD24()
{
  unint64_t result;

  result = qword_1EEF64928;
  if (!qword_1EEF64928)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C71AC, &_s20ArraySequenceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64928);
  }
  return result;
}

void sub_1B215AD68(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B215AD24();
    v7 = a3(a1, &_s20ArraySequenceSnippetC10CodingKeysON, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B215ADC4()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B215AE0C(uint64_t *a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  __int128 v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = sub_1B1FB71E0(*a1, a1[1]);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 40);
    v7 = *(_QWORD *)(v6 + 48);
    v9 = *(unsigned __int8 *)(*a3 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    v33 = sub_1B1DDD484(v8, v7, v9);
    swift_release();
    swift_bridgeObjectRelease();
    v10 = *a3;
    v29 = xmmword_1B2295CD0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    v11 = sub_1B1FC0A9C();
    v13 = v12;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1C39E78((uint64_t)&v29, v11, v13, 0, a4);
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    if (a4 == 2)
      v14 = 0xE000000000000000;
    else
      v14 = 0xE100000000000000;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v15 = *(_QWORD **)(v10 + 128);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v10 + 128) = v15;
    v33 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v15 = sub_1B1C63044(0, v15[2] + 1, 1, v15);
      *(_QWORD *)(v10 + 128) = v15;
    }
    v18 = v15[2];
    v17 = v15[3];
    if (v18 >= v17 >> 1)
    {
      v15 = sub_1B1C63044(v17 > 1, v18 + 1, 1, v15);
      *(_QWORD *)(v10 + 128) = v15;
    }
    v15[2] = v18 + 1;
    v19 = &v15[2 * v18];
    v19[4] = 8201;
    v19[5] = 0xE200000000000000;
    swift_release();
    swift_bridgeObjectRelease();
    v20 = *a3;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B1FC0A9C();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B1FC0A9C();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1FC0A9C();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B1FC0A9C();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1FC0A9C();
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v21 = *(_QWORD **)(v20 + 128);
    swift_bridgeObjectRetain();
    v22 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v20 + 128) = v21;
    if ((v22 & 1) == 0)
    {
      v21 = sub_1B1C63044(0, v21[2] + 1, 1, v21);
      *(_QWORD *)(v20 + 128) = v21;
    }
    v24 = v21[2];
    v23 = v21[3];
    if (v24 >= v23 >> 1)
    {
      v21 = sub_1B1C63044(v23 > 1, v24 + 1, 1, v21);
      *(_QWORD *)(v20 + 128) = v21;
    }
    v21[2] = v24 + 1;
    v25 = &v21[2 * v24];
    v25[4] = 0;
    v25[5] = 0xE000000000000000;
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v29 = 0;
    *((_QWORD *)&v29 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    v27 = v29;
    v28 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v29 = 0;
    swift_retain();
    sub_1B1F1AD70(v28, (uint64_t *)&v29, v27, *((uint64_t *)&v27 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1B215B488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v18 = v6;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRetain_n();
  sub_1B19FA2B4(v5, v6);
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_weakInit();
  swift_weakAssign();
  swift_bridgeObjectRetain();
  sub_1B1FC0A9C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B1A06460();
  v7 = sub_1B222922C();
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = sub_1B2228920();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    v11 = sub_1B2228830();
    sub_1B1C830C8(v11);
    swift_bridgeObjectRetain();
    sub_1B1FC0A9C();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v12 = *a5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a5 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = sub_1B1C63044(0, v12[2] + 1, 1, v12);
    *a5 = v12;
  }
  v15 = v12[2];
  v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    v12 = sub_1B1C63044(v14 > 1, v15 + 1, 1, v12);
    *a5 = v12;
  }
  v12[2] = v15 + 1;
  v16 = &v12[2 * v15];
  v16[4] = v7;
  v16[5] = v9;
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1B19F9FEC(v5, v18);
}

uint64_t sub_1B215B7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, uint64_t a7, _QWORD **a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  _QWORD **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[5];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD v75[6];
  int v76;

  v76 = a6;
  v12 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  sub_1B19FA278(*(_QWORD *)a1 + 56, (uint64_t)v75);
  v13 = *(_QWORD *)(a2 + 32);
  v63 = *(_QWORD *)(a2 + 24);
  v64 = v13;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRetain_n();
  sub_1B19F8C58(v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v14 = v63;
  v15 = v64;
  _s13ParameterBaseCMa();
  inited = (_QWORD *)swift_initStackObject();
  swift_weakInit();
  swift_weakAssign();
  inited[3] = v12;
  inited[4] = v11;
  inited[5] = v14;
  inited[6] = v15;
  sub_1B19FA278((uint64_t)v75, (uint64_t)(inited + 7));
  sub_1B19F8C58(v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
  swift_bridgeObjectRetain();
  v17 = sub_1B1FC0A9C();
  v19 = v18;
  swift_bridgeObjectRelease();
  v63 = v17;
  v64 = v19;
  v20 = *(_QWORD *)(a2 + 32);
  v73 = *(_QWORD *)(a2 + 24);
  v74 = v20;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v71 = a3;
  v72 = a4;
  sub_1B1A06460();
  v21 = sub_1B222922C();
  v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = v21;
  v69 = v23;
  swift_bridgeObjectRetain();
  LOBYTE(v17) = sub_1B2228920();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v24 = sub_1B2228830();
    sub_1B1C830C8(v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1FC0A9C();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((sub_1B1E03BF8() & 1) == 0)
      goto LABEL_4;
    v63 = sub_1B1E03DBC();
    v64 = v25;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1E0E85C(v63, v64, v70);
    v26 = v70[0];
    v27 = v70[1];
    v29 = v70[2];
    v28 = v70[3];
    v30 = v70[4];
    sub_1B1A202F4((uint64_t)v70, (uint64_t)&v71);
    if (v72 != 59)
    {
      sub_1B19FA278((uint64_t)&v71, (uint64_t)&v73);
    }
    else
    {
LABEL_4:
      v26 = 0;
      v29 = 0;
      v28 = 0;
      v30 = 0;
      v27 = 42;
    }
    sub_1B19F8C58(v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    v63 = v26;
    v64 = v27;
    v65 = v29;
    v66 = v28;
    v67 = v30;
    v45 = *a5;
    swift_retain_n();
    v46 = sub_1B1C3AAC8((uint64_t)&v63, v68, v69, a7, 0, 0, 0, v45, v76);
    v48 = v47;
    swift_release();
    swift_bridgeObjectRelease();
    sub_1B19F9FEC(v26, v27);
    v49 = *(_QWORD **)(v45 + 128);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v45 + 128) = v49;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v49 = sub_1B1C63044(0, v49[2] + 1, 1, v49);
      *(_QWORD *)(v45 + 128) = v49;
    }
    v52 = v49[2];
    v51 = v49[3];
    if (v52 >= v51 >> 1)
    {
      v49 = sub_1B1C63044(v51 > 1, v52 + 1, 1, v49);
      *(_QWORD *)(v45 + 128) = v49;
    }
    v49[2] = v52 + 1;
    v53 = &v49[2 * v52];
    v53[4] = v46;
    v53[5] = v48;
    swift_release();
    swift_bridgeObjectRelease();
    v33 = a8;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v44 = 0;
    v43 = 0xE000000000000000;
  }
  else
  {
    v31 = v76;
    if (v76 == 2)
    {
      v63 = 544366966;
      v64 = 0xE400000000000000;
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B1C39C20((uint64_t)v75, 2u);
      sub_1B2228890();
      swift_bridgeObjectRelease();
    }
    else
    {
      v63 = sub_1B1C39C20((uint64_t)v75, v76);
      v64 = v32;
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
    }
    swift_bridgeObjectRelease();
    v33 = a8;
    v34 = *a5;
    v73 = 8201;
    v74 = 0xE200000000000000;
    swift_retain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1E02E1C(v75, 1, (uint64_t)&v63);
    sub_1B19F8C58(v75, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    v35 = *a5;
    if (v31)
    {
      swift_retain();
      if (v31 == 1)
        sub_1B1C46B4C((uint64_t)&v63, v35);
      else
        sub_1B1C3B344(&v63, v35, 0, 0, 2);
    }
    else
    {
      swift_retain();
      sub_1B1C3F84C(&v63, v35, 0, 0, 0);
    }
    swift_release();
    sub_1B1A203C4((uint64_t)&v63);
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v37 = v73;
    v36 = v74;
    v38 = *(_QWORD **)(v34 + 128);
    swift_bridgeObjectRetain();
    v39 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v34 + 128) = v38;
    if ((v39 & 1) == 0)
    {
      v38 = sub_1B1C63044(0, v38[2] + 1, 1, v38);
      *(_QWORD *)(v34 + 128) = v38;
    }
    v41 = v38[2];
    v40 = v38[3];
    if (v41 >= v40 >> 1)
    {
      v38 = sub_1B1C63044(v40 > 1, v41 + 1, 1, v38);
      *(_QWORD *)(v34 + 128) = v38;
    }
    v38[2] = v41 + 1;
    v42 = &v38[2 * v41];
    v42[4] = v37;
    v42[5] = v36;
    swift_release();
    swift_bridgeObjectRelease();
    v63 = 0;
    v64 = 0xE000000000000000;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v44 = v63;
    v43 = v64;
  }
  v54 = *v33;
  v55 = swift_isUniquelyReferenced_nonNull_native();
  *v33 = v54;
  if ((v55 & 1) == 0)
  {
    v54 = sub_1B1C63044(0, v54[2] + 1, 1, v54);
    *v33 = v54;
  }
  v57 = v54[2];
  v56 = v54[3];
  if (v57 >= v56 >> 1)
  {
    v54 = sub_1B1C63044(v56 > 1, v57 + 1, 1, v54);
    *v33 = v54;
  }
  v54[2] = v57 + 1;
  v58 = &v54[2 * v57];
  v58[4] = v44;
  v58[5] = v43;
  return swift_release();
}

uint64_t _s20ArraySequenceSnippetC10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B215C074 + 4 * byte_1B22C7075[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B215C0A8 + 4 * byte_1B22C7070[v4]))();
}

uint64_t sub_1B215C0A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B215C0B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B215C0B8);
  return result;
}

uint64_t sub_1B215C0C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B215C0CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B215C0D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B215C0D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s20ArraySequenceSnippetC10CodingKeysOMa()
{
  return &_s20ArraySequenceSnippetC10CodingKeysON;
}

unint64_t sub_1B215C0F8()
{
  unint64_t result;

  result = qword_1EEF64938;
  if (!qword_1EEF64938)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7184, &_s20ArraySequenceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64938);
  }
  return result;
}

unint64_t sub_1B215C140()
{
  unint64_t result;

  result = qword_1EEF64940;
  if (!qword_1EEF64940)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C70BC, &_s20ArraySequenceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64940);
  }
  return result;
}

unint64_t sub_1B215C188()
{
  unint64_t result;

  result = qword_1EEF64948;
  if (!qword_1EEF64948)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C70E4, &_s20ArraySequenceSnippetC10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF64948);
  }
  return result;
}

uint64_t sub_1B215C1CC(_QWORD *a1, float a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _DWORD v13[4];

  sub_1B19F8E54(0, &qword_1EEF649C0, (uint64_t (*)(void))sub_1B215D0A4, (uint64_t)&type metadata for GenericLOD.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B215D0A4();
  sub_1B222A180();
  *(float *)&v13[2] = a2;
  *(float *)&v13[3] = a3;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

unint64_t sub_1B215C308()
{
  return 0xD000000000000013;
}

uint64_t sub_1B215C324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B215C89C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B215C34C()
{
  sub_1B215D0A4();
  return sub_1B222A1D4();
}

uint64_t sub_1B215C374()
{
  sub_1B215D0A4();
  return sub_1B222A1E0();
}

void sub_1B215C39C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;

  v4 = sub_1B215CA34(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B215C3C4(_QWORD *a1)
{
  float *v1;

  return sub_1B215C1CC(a1, *v1, v1[1]);
}

double sub_1B215C3DC@<D0>(_QWORD *a1@<X8>)
{
  double result;

  result = 6.56066616e69;
  *a1 = 0x4E6E6B2800000000;
  return result;
}

uint64_t sub_1B215C3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    MEMORY[0x1B5E23F88](v1, -1, -1);
  v2 = *(_QWORD *)(v0 + 32);
  if (v2)
    MEMORY[0x1B5E23F88](v2, -1, -1);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LODResource()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for LODResource.Variation()
{
  return &type metadata for LODResource.Variation;
}

ValueMetadata *type metadata accessor for LODState()
{
  return &type metadata for LODState;
}

ValueMetadata *type metadata accessor for LODRenderer()
{
  return &type metadata for LODRenderer;
}

ValueMetadata *type metadata accessor for PointOfCulling()
{
  return &type metadata for PointOfCulling;
}

uint64_t sub_1B215C490(_QWORD *a1, float a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v14[16];
  float v15;
  float v16;

  sub_1B19F8E54(0, &qword_1EEF64960, (uint64_t (*)(void))sub_1B215CD64, (uint64_t)&type metadata for LODState.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = &v14[-v11];
  sub_1B19FA070(a1, a1[3]);
  sub_1B215CD64();
  sub_1B222A180();
  v15 = a2;
  v16 = a3;
  v14[15] = 0;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  if (!v3)
  {
    v14[14] = 1;
    sub_1B222997C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B215C608(char *a1, char *a2)
{
  return sub_1B1F999E0(*a1, *a2);
}

uint64_t sub_1B215C614()
{
  _BYTE *v0;

  if (*v0)
    return 0x49646F4C7473616CLL;
  else
    return 0x676E61527473616CLL;
}

uint64_t sub_1B215C65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B215C920(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B215C680()
{
  sub_1B215CD64();
  return sub_1B222A1D4();
}

uint64_t sub_1B215C6A8()
{
  sub_1B215CD64();
  return sub_1B222A1E0();
}

uint64_t sub_1B215C6D0@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  int v6;

  result = sub_1B215CBB0(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = result;
  }
  return result;
}

uint64_t sub_1B215C6FC(_QWORD *a1)
{
  float *v1;

  return sub_1B215C490(a1, *v1, v1[1]);
}

void sub_1B215C718(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
}

uint64_t sub_1B215C728()
{
  sub_1B215CDA8();
  return sub_1B222A1D4();
}

uint64_t sub_1B215C750()
{
  sub_1B215CDA8();
  return sub_1B222A1E0();
}

uint64_t sub_1B215C778(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF64968, (uint64_t (*)(void))sub_1B215CDA8, (uint64_t)&type metadata for PointOfCulling.CodingKeys);
}

uint64_t sub_1B215C7A4()
{
  sub_1B215D060();
  return sub_1B222A1D4();
}

uint64_t sub_1B215C7CC()
{
  sub_1B215D060();
  return sub_1B222A1E0();
}

uint64_t sub_1B215C7F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF649A0, (uint64_t (*)(void))sub_1B215D060, (uint64_t)&type metadata for FrustumCulled.CodingKeys);
}

uint64_t sub_1B215C820()
{
  sub_1B215D0E8();
  return sub_1B222A1D4();
}

uint64_t sub_1B215C848()
{
  sub_1B215D0E8();
  return sub_1B222A1E0();
}

uint64_t sub_1B215C870(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF649C8, (uint64_t (*)(void))sub_1B215D0E8, (uint64_t)&type metadata for LODCulled.CodingKeys);
}

uint64_t sub_1B215C89C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000013 && a2 == 0x80000001B234E510)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1B215C920(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E61527473616CLL && a2 == 0xE900000000000065;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x49646F4C7473616CLL && a2 == 0xEC0000007865646ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

float sub_1B215CA34(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  float v12;

  sub_1B19F8E54(0, &qword_1EEF649B0, (uint64_t (*)(void))sub_1B215D0A4, (uint64_t)&type metadata for GenericLOD.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B215D0A4();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1B4D924();
    sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v2 = v12;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B215CBB0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[16];

  sub_1B19F8E54(0, &qword_1EEF64950, (uint64_t (*)(void))sub_1B215CD64, (uint64_t)&type metadata for LODState.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v12[-v7];
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B215CD64();
  v10 = (uint64_t)v9;
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1B4D924();
    v12[15] = 0;
    sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
    sub_1B2229814();
    v12[14] = 1;
    v10 = sub_1B2229838();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

unint64_t sub_1B215CD64()
{
  unint64_t result;

  result = qword_1EEF64958;
  if (!qword_1EEF64958)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7668, &type metadata for LODState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64958);
  }
  return result;
}

unint64_t sub_1B215CDA8()
{
  unint64_t result;

  result = qword_1EEF64970;
  if (!qword_1EEF64970)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7618, &type metadata for PointOfCulling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64970);
  }
  return result;
}

ValueMetadata *type metadata accessor for PointOfCulling.CodingKeys()
{
  return &type metadata for PointOfCulling.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for LODState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B215CE48 + 4 * byte_1B22C720D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B215CE7C + 4 * byte_1B22C7208[v4]))();
}

uint64_t sub_1B215CE7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B215CE84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B215CE8CLL);
  return result;
}

uint64_t sub_1B215CE98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B215CEA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B215CEA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B215CEAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LODState.CodingKeys()
{
  return &type metadata for LODState.CodingKeys;
}

ValueMetadata *type metadata accessor for FrustumCulled()
{
  return &type metadata for FrustumCulled;
}

ValueMetadata *type metadata accessor for GenericLOD()
{
  return &type metadata for GenericLOD;
}

ValueMetadata *type metadata accessor for LODCulled()
{
  return &type metadata for LODCulled;
}

unint64_t sub_1B215CEFC()
{
  unint64_t result;

  result = qword_1EEF64978;
  if (!qword_1EEF64978)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C75A0, &type metadata for LODState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64978);
  }
  return result;
}

unint64_t sub_1B215CF44()
{
  unint64_t result;

  result = qword_1EEF64980;
  if (!qword_1EEF64980)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C75C8, &type metadata for PointOfCulling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64980);
  }
  return result;
}

unint64_t sub_1B215CF8C()
{
  unint64_t result;

  result = qword_1EEF64988;
  if (!qword_1EEF64988)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C75F0, &type metadata for PointOfCulling.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64988);
  }
  return result;
}

unint64_t sub_1B215CFD4()
{
  unint64_t result;

  result = qword_1EEF64990;
  if (!qword_1EEF64990)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7510, &type metadata for LODState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64990);
  }
  return result;
}

unint64_t sub_1B215D01C()
{
  unint64_t result;

  result = qword_1EEF64998;
  if (!qword_1EEF64998)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7538, &type metadata for LODState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64998);
  }
  return result;
}

unint64_t sub_1B215D060()
{
  unint64_t result;

  result = qword_1EEF649A8;
  if (!qword_1EEF649A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7900, &type metadata for FrustumCulled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF649A8);
  }
  return result;
}

unint64_t sub_1B215D0A4()
{
  unint64_t result;

  result = qword_1EEF649B8;
  if (!qword_1EEF649B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C78B0, &type metadata for GenericLOD.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF649B8);
  }
  return result;
}

unint64_t sub_1B215D0E8()
{
  unint64_t result;

  result = qword_1EEF649D0;
  if (!qword_1EEF649D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7860, &type metadata for LODCulled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF649D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for LODCulled.CodingKeys()
{
  return &type metadata for LODCulled.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for GenericLOD.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B215D17C + 4 * byte_1B22C7212[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B215D19C + 4 * byte_1B22C7217[v4]))();
}

_BYTE *sub_1B215D17C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B215D19C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B215D1A4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B215D1AC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B215D1B4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B215D1BC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GenericLOD.CodingKeys()
{
  return &type metadata for GenericLOD.CodingKeys;
}

ValueMetadata *type metadata accessor for FrustumCulled.CodingKeys()
{
  return &type metadata for FrustumCulled.CodingKeys;
}

unint64_t sub_1B215D1EC()
{
  unint64_t result;

  result = qword_1EEF649D8;
  if (!qword_1EEF649D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C77E8, &type metadata for GenericLOD.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF649D8);
  }
  return result;
}

unint64_t sub_1B215D234()
{
  unint64_t result;

  result = qword_1EEF649E0;
  if (!qword_1EEF649E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7810, &type metadata for LODCulled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF649E0);
  }
  return result;
}

unint64_t sub_1B215D27C()
{
  unint64_t result;

  result = qword_1EEF649E8;
  if (!qword_1EEF649E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7838, &type metadata for LODCulled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF649E8);
  }
  return result;
}

unint64_t sub_1B215D2C4()
{
  unint64_t result;

  result = qword_1EEF649F0;
  if (!qword_1EEF649F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7758, &type metadata for GenericLOD.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF649F0);
  }
  return result;
}

unint64_t sub_1B215D30C()
{
  unint64_t result;

  result = qword_1EEF649F8;
  if (!qword_1EEF649F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7780, &type metadata for GenericLOD.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF649F8);
  }
  return result;
}

unint64_t sub_1B215D354()
{
  unint64_t result;

  result = qword_1EEF64A00;
  if (!qword_1EEF64A00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7708, &type metadata for FrustumCulled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64A00);
  }
  return result;
}

unint64_t sub_1B215D39C()
{
  unint64_t result;

  result = qword_1EEF64A08;
  if (!qword_1EEF64A08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7730, &type metadata for FrustumCulled.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64A08);
  }
  return result;
}

void sub_1B215D3E0()
{
  __asm { BR              X10 }
}

uint64_t sub_1B215D434()
{
  uint64_t v1;

  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return v1;
}

double sub_1B215D504@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B1D8DCC0((unint64_t)&unk_1E637E888, a1);
}

_QWORD *sub_1B215D514(_QWORD *a1)
{
  *(_BYTE *)(swift_allocObject() + OBJC_IVAR____TtC3VFX14CanvasItemNode_stage) = *((_BYTE *)a1
                                                                                 + OBJC_IVAR____TtC3VFX14CanvasItemNode_stage);
  return sub_1B1BCE388(a1);
}

uint64_t sub_1B215D55C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD v4[4];
  char v5;

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B222A138();
  if (!v2)
  {
    sub_1B19FA070(v4, v4[3]);
    sub_1B1D8E668();
    sub_1B2229D6C();
    *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX14CanvasItemNode_stage) = v5;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
  }
  return result;
}

void sub_1B215D620()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B215D64C()
{
  return type metadata accessor for CanvasItemNode(0);
}

uint64_t type metadata accessor for CanvasItemNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF64A10);
}

uint64_t sub_1B215D668()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B215D6A8(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;
  char v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v5 = *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX14CanvasItemNode_stage);
  sub_1B19FC264((uint64_t)v3, v4);
  sub_1B1D8E6AC();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B215D758(_QWORD *a1)
{
  return sub_1B215D55C(a1);
}

uint64_t sub_1B215D76C()
{
  return 0x4E20796B63697453;
}

double sub_1B215D78C@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B1D8DCC0((unint64_t)&unk_1E6386AB8, a1);
}

void sub_1B215D79C(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[18];
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1B19F8E54(0, &qword_1EEF64AC8, (uint64_t (*)(void))sub_1B215EDDC, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.GrayCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v26[16] = *(_QWORD *)(v4 - 8);
  v26[17] = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v26[15] = (char *)v26 - v6;
  sub_1B19F8E54(0, &qword_1EEF64AD0, (uint64_t (*)(void))sub_1B215EE20, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.PinkCodingKeys, v3);
  v26[13] = *(_QWORD *)(v7 - 8);
  v26[14] = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v26[12] = (char *)v26 - v9;
  sub_1B19F8E54(0, &qword_1EEF64AD8, (uint64_t (*)(void))sub_1B215EE64, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.PurpleCodingKeys, v3);
  v26[10] = *(_QWORD *)(v10 - 8);
  v26[11] = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v26[9] = (char *)v26 - v12;
  sub_1B19F8E54(0, &qword_1EEF64AE0, (uint64_t (*)(void))sub_1B215EEA8, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.BlueCodingKeys, v3);
  v26[7] = *(_QWORD *)(v13 - 8);
  v26[8] = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v26[6] = (char *)v26 - v15;
  sub_1B19F8E54(0, &qword_1EEF64AE8, (uint64_t (*)(void))sub_1B215EEEC, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.GreenCodingKeys, v3);
  v26[4] = *(_QWORD *)(v16 - 8);
  v26[5] = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v26[3] = (char *)v26 - v18;
  sub_1B19F8E54(0, &qword_1EEF64AF0, (uint64_t (*)(void))sub_1B215EF30, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.YellowCodingKeys, v3);
  v26[1] = *(_QWORD *)(v19 - 8);
  v26[2] = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v26[0] = (char *)v26 - v21;
  sub_1B19F8E54(0, &qword_1EEF64AF8, (uint64_t (*)(void))sub_1B215EF74, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.OrangeCodingKeys, v3);
  MEMORY[0x1E0C80A78](v22, v23);
  sub_1B19F8E54(0, &qword_1EEF64B00, (uint64_t (*)(void))sub_1B215EFB8, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.CodingKeys, v3);
  v28 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  sub_1B19FA070(a1, a1[3]);
  sub_1B215EFB8();
  sub_1B222A180();
  __asm { BR              X10 }
}

uint64_t sub_1B215DAC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 - 71) = 0;
  sub_1B215EF74();
  sub_1B22298BC();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 96) + 8))(v3, v1);
}

uint64_t sub_1B215DCA4()
{
  sub_1B215EEA8();
  return sub_1B222A1D4();
}

uint64_t sub_1B215DCCC()
{
  sub_1B215EEA8();
  return sub_1B222A1E0();
}

void sub_1B215DCF4(char *a1)
{
  sub_1B1F91578(*a1);
}

uint64_t sub_1B215DD00()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B215DD2C + 4 * byte_1B22C795F[*v0]))(0x65676E61726FLL, 0xE600000000000000);
}

uint64_t sub_1B215DD2C()
{
  return 0x776F6C6C6579;
}

uint64_t sub_1B215DD3C()
{
  return 0x6E65657267;
}

uint64_t sub_1B215DD50()
{
  return 1702194274;
}

uint64_t sub_1B215DD60()
{
  return 0x656C70727570;
}

uint64_t sub_1B215DD70()
{
  return 1802398064;
}

uint64_t sub_1B215DD80()
{
  return 2036429415;
}

uint64_t sub_1B215DD90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B215E4A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B215DDB4()
{
  sub_1B215EFB8();
  return sub_1B222A1D4();
}

uint64_t sub_1B215DDDC()
{
  sub_1B215EFB8();
  return sub_1B222A1E0();
}

uint64_t sub_1B215DE04()
{
  sub_1B215EDDC();
  return sub_1B222A1D4();
}

uint64_t sub_1B215DE2C()
{
  sub_1B215EDDC();
  return sub_1B222A1E0();
}

uint64_t sub_1B215DE54()
{
  sub_1B215EEEC();
  return sub_1B222A1D4();
}

uint64_t sub_1B215DE7C()
{
  sub_1B215EEEC();
  return sub_1B222A1E0();
}

uint64_t sub_1B215DEA4()
{
  sub_1B215EF74();
  return sub_1B222A1D4();
}

uint64_t sub_1B215DECC()
{
  sub_1B215EF74();
  return sub_1B222A1E0();
}

uint64_t sub_1B215DEF4()
{
  sub_1B215EE20();
  return sub_1B222A1D4();
}

uint64_t sub_1B215DF1C()
{
  sub_1B215EE20();
  return sub_1B222A1E0();
}

uint64_t sub_1B215DF44()
{
  sub_1B215EE64();
  return sub_1B222A1D4();
}

uint64_t sub_1B215DF6C()
{
  sub_1B215EE64();
  return sub_1B222A1E0();
}

uint64_t sub_1B215DF94()
{
  sub_1B215EF30();
  return sub_1B222A1D4();
}

uint64_t sub_1B215DFBC()
{
  sub_1B215EF30();
  return sub_1B222A1E0();
}

uint64_t sub_1B215DFE4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B215E738(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_1B215E00C(_QWORD *a1)
{
  unsigned __int8 *v1;

  sub_1B215D79C(a1, *v1);
}

_QWORD *sub_1B215E024(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = swift_allocObject();
  v3 = OBJC_IVAR____TtC3VFX16CanvasStickyNode_colorScheme;
  v4 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_text + 8);
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_text);
  *v5 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_text);
  v5[1] = v4;
  *(_BYTE *)(v2 + v3) = *((_BYTE *)a1 + v3);
  swift_bridgeObjectRetain();
  return sub_1B1BCE388(a1);
}

uint64_t sub_1B215E088(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  swift_bridgeObjectRetain();
  sub_1B2229B68();
  swift_bridgeObjectRelease();
  if (!v2 && *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_colorScheme) != 7)
  {
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B215F040();
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B215E198(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;
  char v9;

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B222A12C();
  if (!v2)
  {
    sub_1B19FC264((uint64_t)v7, v8);
    v4 = sub_1B2229A60();
    v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_text);
    *v5 = v4;
    v5[1] = v6;
    swift_bridgeObjectRelease();
    sub_1B19FC264((uint64_t)v7, v8);
    sub_1B215EFFC();
    sub_1B2229AA8();
    *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_colorScheme) = v9;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  }
  return result;
}

void sub_1B215E2B8()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B215E2E4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B215E2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B215E370()
{
  return type metadata accessor for CanvasStickyNode(0);
}

uint64_t type metadata accessor for CanvasStickyNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF64A20);
}

uint64_t sub_1B215E38C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B215E3D4(_QWORD *a1)
{
  return sub_1B215E088(a1);
}

uint64_t sub_1B215E3E8(_QWORD *a1)
{
  return sub_1B215E198(a1);
}

uint64_t sub_1B215E3FC()
{
  return 0x4720796B63697453;
}

double sub_1B215E41C@<D0>(_OWORD *a1@<X8>)
{
  return sub_1B1D8DCC0((unint64_t)&unk_1E639FE30, a1);
}

uint64_t sub_1B215E42C()
{
  return type metadata accessor for CanvasStickyGroupNode(0);
}

uint64_t type metadata accessor for CanvasStickyGroupNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF64A30);
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme()
{
  return &type metadata for CanvasStickyNode.ColorScheme;
}

unint64_t sub_1B215E460()
{
  unint64_t result;

  result = qword_1EEF64A40;
  if (!qword_1EEF64A40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7A64, &type metadata for CanvasStickyNode.ColorScheme);
    atomic_store(result, (unint64_t *)&qword_1EEF64A40);
  }
  return result;
}

uint64_t sub_1B215E4A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65676E61726FLL && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x776F6C6C6579 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E65657267 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1702194274 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C70727570 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1802398064 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 2036429415 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1B215E738(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD v42[22];
  char *v43;
  uint64_t v44;
  char *v45;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_1B19F8E54(0, &qword_1EEF64A48, (uint64_t (*)(void))sub_1B215EDDC, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.GrayCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v42[14] = *(_QWORD *)(v3 - 8);
  v42[15] = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v42[18] = (char *)v42 - v5;
  sub_1B19F8E54(0, &qword_1EEF64A58, (uint64_t (*)(void))sub_1B215EE20, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.PinkCodingKeys, v2);
  v42[12] = *(_QWORD *)(v6 - 8);
  v42[13] = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v42[21] = (char *)v42 - v8;
  sub_1B19F8E54(0, &qword_1EEF64A68, (uint64_t (*)(void))sub_1B215EE64, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.PurpleCodingKeys, v2);
  v42[10] = *(_QWORD *)(v9 - 8);
  v42[11] = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v42[16] = (char *)v42 - v11;
  sub_1B19F8E54(0, &qword_1EEF64A78, (uint64_t (*)(void))sub_1B215EEA8, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.BlueCodingKeys, v2);
  v42[8] = *(_QWORD *)(v12 - 8);
  v42[9] = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v42[20] = (char *)v42 - v14;
  sub_1B19F8E54(0, &qword_1EEF64A88, (uint64_t (*)(void))sub_1B215EEEC, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.GreenCodingKeys, v2);
  v42[6] = *(_QWORD *)(v15 - 8);
  v42[7] = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v42[17] = (char *)v42 - v17;
  sub_1B19F8E54(0, &qword_1EEF64A98, (uint64_t (*)(void))sub_1B215EF30, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.YellowCodingKeys, v2);
  v42[4] = *(_QWORD *)(v18 - 8);
  v42[5] = v18;
  MEMORY[0x1E0C80A78](v18, v19);
  v42[19] = (char *)v42 - v20;
  sub_1B19F8E54(0, &qword_1EEF64AA8, (uint64_t (*)(void))sub_1B215EF74, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.OrangeCodingKeys, v2);
  v42[3] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)v42 - v24;
  sub_1B19F8E54(0, &qword_1EEF64AB8, (uint64_t (*)(void))sub_1B215EFB8, (uint64_t)&type metadata for CanvasStickyNode.ColorScheme.CodingKeys, v2);
  v27 = v26;
  v28 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v29);
  v30 = *(_QWORD *)(a1 + 24);
  v44 = a1;
  v31 = (_QWORD *)a1;
  v33 = (char *)v42 - v32;
  sub_1B19FA070(v31, v30);
  sub_1B215EFB8();
  v43 = v33;
  v34 = v45;
  sub_1B222A150();
  if (!v34)
  {
    v45 = v25;
    v42[2] = v22;
    v35 = sub_1B2229880();
    v30 = v35;
    if (*(_QWORD *)(v35 + 16) == 1)
    {
      v42[1] = v35;
      __asm { BR              X9 }
    }
    v36 = sub_1B22294CC();
    v37 = v43;
    v38 = v36;
    swift_allocError();
    v40 = v39;
    sub_1B1BDBA1C();
    *v40 = &type metadata for CanvasStickyNode.ColorScheme;
    sub_1B2229760();
    sub_1B22294B4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v38 - 8) + 104))(v40, *MEMORY[0x1E0DEC450], v38);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v37, v27);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v44);
  return v30;
}

unint64_t sub_1B215EDDC()
{
  unint64_t result;

  result = qword_1EEF64A50;
  if (!qword_1EEF64A50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C80C8, &type metadata for CanvasStickyNode.ColorScheme.GrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64A50);
  }
  return result;
}

unint64_t sub_1B215EE20()
{
  unint64_t result;

  result = qword_1EEF64A60;
  if (!qword_1EEF64A60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8078, &type metadata for CanvasStickyNode.ColorScheme.PinkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64A60);
  }
  return result;
}

unint64_t sub_1B215EE64()
{
  unint64_t result;

  result = qword_1EEF64A70;
  if (!qword_1EEF64A70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8028, &type metadata for CanvasStickyNode.ColorScheme.PurpleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64A70);
  }
  return result;
}

unint64_t sub_1B215EEA8()
{
  unint64_t result;

  result = qword_1EEF64A80;
  if (!qword_1EEF64A80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7FD8, &type metadata for CanvasStickyNode.ColorScheme.BlueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64A80);
  }
  return result;
}

unint64_t sub_1B215EEEC()
{
  unint64_t result;

  result = qword_1EEF64A90;
  if (!qword_1EEF64A90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7F88, &type metadata for CanvasStickyNode.ColorScheme.GreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64A90);
  }
  return result;
}

unint64_t sub_1B215EF30()
{
  unint64_t result;

  result = qword_1EEF64AA0;
  if (!qword_1EEF64AA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7F38, &type metadata for CanvasStickyNode.ColorScheme.YellowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64AA0);
  }
  return result;
}

unint64_t sub_1B215EF74()
{
  unint64_t result;

  result = qword_1EEF64AB0;
  if (!qword_1EEF64AB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7EE8, &type metadata for CanvasStickyNode.ColorScheme.OrangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64AB0);
  }
  return result;
}

unint64_t sub_1B215EFB8()
{
  unint64_t result;

  result = qword_1EEF64AC0;
  if (!qword_1EEF64AC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7E98, &type metadata for CanvasStickyNode.ColorScheme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64AC0);
  }
  return result;
}

unint64_t sub_1B215EFFC()
{
  unint64_t result;

  result = qword_1EEF64B08;
  if (!qword_1EEF64B08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7A3C, &type metadata for CanvasStickyNode.ColorScheme);
    atomic_store(result, (unint64_t *)&qword_1EEF64B08);
  }
  return result;
}

unint64_t sub_1B215F040()
{
  unint64_t result;

  result = qword_1EEF64B10;
  if (!qword_1EEF64B10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7A14, &type metadata for CanvasStickyNode.ColorScheme);
    atomic_store(result, (unint64_t *)&qword_1EEF64B10);
  }
  return result;
}

uint64_t _s3VFX16CanvasStickyNodeC11ColorSchemeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B215F0D0 + 4 * byte_1B22C7972[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B215F104 + 4 * byte_1B22C796D[v4]))();
}

uint64_t sub_1B215F104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B215F10C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B215F114);
  return result;
}

uint64_t sub_1B215F120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B215F128);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B215F12C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B215F134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.CodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.CodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.OrangeCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.OrangeCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.YellowCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.YellowCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.GreenCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.GreenCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.BlueCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.BlueCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.PurpleCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.PurpleCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.PinkCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.PinkCodingKeys;
}

ValueMetadata *type metadata accessor for CanvasStickyNode.ColorScheme.GrayCodingKeys()
{
  return &type metadata for CanvasStickyNode.ColorScheme.GrayCodingKeys;
}

unint64_t sub_1B215F1C4()
{
  unint64_t result;

  result = qword_1EEF64B18;
  if (!qword_1EEF64B18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7E70, &type metadata for CanvasStickyNode.ColorScheme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B18);
  }
  return result;
}

unint64_t sub_1B215F20C()
{
  unint64_t result;

  result = qword_1EEF64B20;
  if (!qword_1EEF64B20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7DE0, &type metadata for CanvasStickyNode.ColorScheme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B20);
  }
  return result;
}

unint64_t sub_1B215F254()
{
  unint64_t result;

  result = qword_1EEF64B28;
  if (!qword_1EEF64B28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7E08, &type metadata for CanvasStickyNode.ColorScheme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B28);
  }
  return result;
}

unint64_t sub_1B215F29C()
{
  unint64_t result;

  result = qword_1EEF64B30;
  if (!qword_1EEF64B30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7D90, &type metadata for CanvasStickyNode.ColorScheme.OrangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B30);
  }
  return result;
}

unint64_t sub_1B215F2E4()
{
  unint64_t result;

  result = qword_1EEF64B38;
  if (!qword_1EEF64B38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7DB8, &type metadata for CanvasStickyNode.ColorScheme.OrangeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B38);
  }
  return result;
}

unint64_t sub_1B215F32C()
{
  unint64_t result;

  result = qword_1EEF64B40;
  if (!qword_1EEF64B40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7D40, &type metadata for CanvasStickyNode.ColorScheme.YellowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B40);
  }
  return result;
}

unint64_t sub_1B215F374()
{
  unint64_t result;

  result = qword_1EEF64B48;
  if (!qword_1EEF64B48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7D68, &type metadata for CanvasStickyNode.ColorScheme.YellowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B48);
  }
  return result;
}

unint64_t sub_1B215F3BC()
{
  unint64_t result;

  result = qword_1EEF64B50;
  if (!qword_1EEF64B50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7CF0, &type metadata for CanvasStickyNode.ColorScheme.GreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B50);
  }
  return result;
}

unint64_t sub_1B215F404()
{
  unint64_t result;

  result = qword_1EEF64B58;
  if (!qword_1EEF64B58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7D18, &type metadata for CanvasStickyNode.ColorScheme.GreenCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B58);
  }
  return result;
}

unint64_t sub_1B215F44C()
{
  unint64_t result;

  result = qword_1EEF64B60;
  if (!qword_1EEF64B60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7CA0, &type metadata for CanvasStickyNode.ColorScheme.BlueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B60);
  }
  return result;
}

unint64_t sub_1B215F494()
{
  unint64_t result;

  result = qword_1EEF64B68;
  if (!qword_1EEF64B68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7CC8, &type metadata for CanvasStickyNode.ColorScheme.BlueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B68);
  }
  return result;
}

unint64_t sub_1B215F4DC()
{
  unint64_t result;

  result = qword_1EEF64B70;
  if (!qword_1EEF64B70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7C50, &type metadata for CanvasStickyNode.ColorScheme.PurpleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B70);
  }
  return result;
}

unint64_t sub_1B215F524()
{
  unint64_t result;

  result = qword_1EEF64B78;
  if (!qword_1EEF64B78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7C78, &type metadata for CanvasStickyNode.ColorScheme.PurpleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B78);
  }
  return result;
}

unint64_t sub_1B215F56C()
{
  unint64_t result;

  result = qword_1EEF64B80;
  if (!qword_1EEF64B80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7C00, &type metadata for CanvasStickyNode.ColorScheme.PinkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B80);
  }
  return result;
}

unint64_t sub_1B215F5B4()
{
  unint64_t result;

  result = qword_1EEF64B88;
  if (!qword_1EEF64B88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7C28, &type metadata for CanvasStickyNode.ColorScheme.PinkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B88);
  }
  return result;
}

unint64_t sub_1B215F5FC()
{
  unint64_t result;

  result = qword_1EEF64B90;
  if (!qword_1EEF64B90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7BB0, &type metadata for CanvasStickyNode.ColorScheme.GrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B90);
  }
  return result;
}

unint64_t sub_1B215F644()
{
  unint64_t result;

  result = qword_1EEF64B98;
  if (!qword_1EEF64B98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C7BD8, &type metadata for CanvasStickyNode.ColorScheme.GrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64B98);
  }
  return result;
}

void *sub_1B215F688(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t Strong;
  id v19;
  id v20;
  char isUniquelyReferenced_nonNull_native;
  id v22;
  int v23;
  void *v25;
  id v26;
  uint64_t v27[2];

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = 32;
    do
    {
      v8 = *(void **)(v4 + v7);
      swift_unknownObjectRetain();
      v9 = objc_msgSend(a1, sel_textureType);
      if (v9 == objc_msgSend(v8, sel_textureType)
        && (v10 = objc_msgSend(a1, sel_arrayLength), v10 == objc_msgSend(v8, sel_arrayLength))
        && (v11 = objc_msgSend(a1, sel_pixelFormat), v11 == objc_msgSend(v8, sel_pixelFormat))
        && (v12 = objc_msgSend(a1, sel_mipmapLevelCount), v12 == objc_msgSend(v8, sel_mipmapLevelCount))
        && (v13 = objc_msgSend(a1, sel_sampleCount), v13 == objc_msgSend(v8, sel_sampleCount))
        && (v14 = objc_msgSend(a1, sel_storageMode), v14 == objc_msgSend(v8, sel_storageMode))
        && (v15 = objc_msgSend(a1, sel_width), v15 == objc_msgSend(v8, sel_width))
        && (v16 = objc_msgSend(a1, sel_height), v16 == objc_msgSend(v8, sel_height)))
      {
        v26 = objc_msgSend(a1, sel_depth);
        v17 = objc_msgSend(v8, sel_depth);
        swift_unknownObjectRelease();
        if (v26 == v17)
        {
          swift_bridgeObjectRelease();
          v25 = *(void **)(*(_QWORD *)(v1 + 40) + v7);
          swift_unknownObjectRetain();
          sub_1B1DBA284(v6);
          swift_unknownObjectRelease();
          v2 = v1;
          goto LABEL_19;
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
      ++v6;
      v7 += 16;
    }
    while (v5 != v6);
    swift_bridgeObjectRelease();
    v2 = v1;
  }
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v19 = objc_msgSend(*(id *)(Strong + 16), sel_newTextureWithDescriptor_, a1);
  if (!v19)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v27[1] = 0x80000001B2331BE0;
    v22 = objc_msgSend(a1, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v23 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v27[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v23, v27, 0xD000000000000023, 0x80000001B2331BE0);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  v25 = v19;
  sub_1B1F326B0((uint64_t)v19);
  objc_msgSend(v25, sel_setLabel_, 0);
  swift_release();
LABEL_19:
  v20 = objc_msgSend(v25, sel_hash);
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v27[0] = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0x8000000000000000;
  sub_1B1B86D40((uint64_t)v25, (uint64_t)v20, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 48) = v27[0];
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_1B215FACC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v2 = v1;
  v3 = sub_1B1B83CC0((uint64_t)objc_msgSend(a1, sel_hash));
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD **)(v2 + 40);
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 40) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v5 = sub_1B1C66610(0, v5[2] + 1, 1, v5);
      *(_QWORD *)(v2 + 40) = v5;
    }
    v8 = v5[2];
    v7 = v5[3];
    if (v8 >= v7 >> 1)
      v5 = sub_1B1C66610(v7 > 1, v8 + 1, 1, v5);
    v5[2] = v8 + 1;
    v9 = &v5[2 * v8];
    v9[4] = v4;
    v9[5] = 0;
    *(_QWORD *)(v2 + 40) = v5;
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1E8BB30();
    sub_1B22295EC();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B215FC5C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v2 = v1;
  if ((a1 & 1) != 0)
  {
    v3 = *(_QWORD *)(v1 + 48);
    v4 = *(_QWORD *)(v2 + 48);
    v7 = *(_QWORD *)(v4 + 64);
    v6 = v4 + 64;
    v5 = v7;
    v8 = 1 << *(_BYTE *)(v3 + 32);
    v9 = -1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    v10 = v9 & v5;
    v11 = (unint64_t)(v8 + 63) >> 6;
    swift_bridgeObjectRetain();
    v12 = 0;
    if (!v10)
      goto LABEL_6;
LABEL_5:
    v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v14 = v13 | (v12 << 6);
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v14);
      v18 = *(_QWORD **)(v2 + 40);
      swift_unknownObjectRetain_n();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v2 + 40) = v18;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v18 = sub_1B1C66610(0, v18[2] + 1, 1, v18);
        *(_QWORD *)(v2 + 40) = v18;
      }
      v21 = v18[2];
      v20 = v18[3];
      if (v21 >= v20 >> 1)
        v18 = sub_1B1C66610(v20 > 1, v21 + 1, 1, v18);
      v18[2] = v21 + 1;
      v22 = &v18[2 * v21];
      v22[4] = v17;
      v22[5] = 0;
      *(_QWORD *)(v2 + 40) = v18;
      swift_unknownObjectRelease();
      if (v10)
        goto LABEL_5;
LABEL_6:
      v15 = v12 + 1;
      if (v12 + 1 >= v11)
        goto LABEL_25;
      v16 = *(_QWORD *)(v6 + 8 * v15);
      if (!v16)
      {
        v15 = v12 + 2;
        if (v12 + 2 >= v11)
          goto LABEL_25;
        v16 = *(_QWORD *)(v6 + 8 * v15);
        if (!v16)
        {
          v15 = v12 + 3;
          if (v12 + 3 >= v11)
            goto LABEL_25;
          v16 = *(_QWORD *)(v6 + 8 * v15);
          if (!v16)
          {
            v15 = v12 + 4;
            if (v12 + 4 >= v11)
              goto LABEL_25;
            v16 = *(_QWORD *)(v6 + 8 * v15);
            if (!v16)
              break;
          }
        }
      }
LABEL_17:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v15 << 6);
      v12 = v15;
    }
    while (v11 - 5 != v12)
    {
      v16 = *(_QWORD *)(v3 + 104 + 8 * v12++);
      if (v16)
      {
        v15 = v12 + 4;
        goto LABEL_17;
      }
    }
LABEL_25:
    swift_release();
    if (*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16))
    {
      swift_isUniquelyReferenced_nonNull_native();
      v26 = *(_QWORD *)(v2 + 48);
      *(_QWORD *)(v2 + 48) = 0x8000000000000000;
      sub_1B216012C();
      sub_1B2229634();
      *(_QWORD *)(v2 + 48) = v26;
      swift_bridgeObjectRelease();
    }
    swift_retain();
    v24 = swift_bridgeObjectRetain();
    v25 = sub_1B2160024(v24);
    swift_bridgeObjectRelease();
    swift_release();
    *(_QWORD *)(v2 + 40) = v25;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(v1 + 40) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 48) = MEMORY[0x1E0DEE9E0];
  }
  return result;
}

uint64_t sub_1B215FF04()
{
  swift_unknownObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NoHeapTextureAllocator()
{
  return objc_opt_self();
}

_QWORD *initializeBufferWithCopyOfBuffer for NoHeapTextureAllocator.UnusedTexture(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NoHeapTextureAllocator.UnusedTexture(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for NoHeapTextureAllocator.UnusedTexture(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for NoHeapTextureAllocator.UnusedTexture()
{
  return &type metadata for NoHeapTextureAllocator.UnusedTexture;
}

_QWORD *sub_1B2160024(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = *v2;
    if (*v2 <= 99)
    {
      v6 = *(v2 - 1);
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1B1C66610(0, v3[2] + 1, 1, v3);
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
        v3 = sub_1B1C66610(v7 > 1, v8 + 1, 1, v3);
      v3[2] = v8 + 1;
      v4 = &v3[2 * v8];
      v4[4] = v6;
      v4[5] = v5 + 1;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

void sub_1B216012C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7A38)
  {
    sub_1B1E8BB30();
    v0 = sub_1B2229640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7A38);
  }
}

double sub_1B2160194()
{
  return sub_1B21612A8();
}

uint64_t sub_1B21601C4()
{
  return type metadata accessor for ParticleSizeInit.System();
}

double sub_1B21601E0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 4) = xmmword_1B22C8190;
  result = 0.0000000134110482;
  *(_QWORD *)(a1 + 20) = 0x3E4CCCCD3DCCCCCDLL;
  *(_DWORD *)(a1 + 28) = 1065353216;
  return result;
}

void sub_1B2160208(char *a1)
{
  sub_1B1F91DAC(*a1);
}

void sub_1B2160214()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B2160258()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B21602C0()
{
  __asm { BR              X10 }
}

uint64_t sub_1B21602F4()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B2160348()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B2160388()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B21603F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2161260();
  *a1 = result;
  return result;
}

uint64_t sub_1B216041C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B2160444 + 4 * byte_1B22C81BC[*v0]))();
}

void sub_1B2160444(_QWORD *a1@<X8>)
{
  *a1 = 0x65676E615278;
  a1[1] = 0xE600000000000000;
}

void sub_1B216045C(_QWORD *a1@<X8>)
{
  *a1 = 0x65676E615279;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1B216048C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B21604B4 + 4 * byte_1B22C81C0[*v0]))(1701080941, 0xE400000000000000);
}

uint64_t sub_1B21604B4()
{
  return 0x65676E615278;
}

uint64_t sub_1B21604C8()
{
  return 0x65676E615279;
}

uint64_t sub_1B21604F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B2161260();
  *a1 = result;
  return result;
}

uint64_t sub_1B2160518()
{
  sub_1B2161854();
  return sub_1B222A1D4();
}

uint64_t sub_1B2160540()
{
  sub_1B2161854();
  return sub_1B222A1E0();
}

uint64_t sub_1B2160568(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;

  v3 = v1;
  sub_1B2161898(0, &qword_1EEF64BA0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2161854();
  sub_1B222A180();
  LOBYTE(v12) = *(_BYTE *)v3;
  v13 = 0;
  sub_1B1A71B00();
  sub_1B2229958();
  if (!v2)
  {
    v12 = *(_QWORD *)(v3 + 4);
    v13 = 1;
    sub_1B1B4D924();
    sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
    v12 = *(_QWORD *)(v3 + 12);
    v13 = 2;
    sub_1B2229958();
    v12 = *(_QWORD *)(v3 + 20);
    v13 = 3;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B2160748@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];

  sub_1B21615D0(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B2160780(_QWORD *a1)
{
  return sub_1B2160568(a1);
}

void sub_1B2160794(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  void *v10;
  void *v11;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  _QWORD *v34;
  size_t v35;
  char *v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  int v50;
  uint64_t v51[12];
  _OWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  _BYTE v68[40];
  _QWORD v69[10];
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v11 = v10;
  v18 = *(_OWORD *)(a3 + 104);
  v66[0] = *(_OWORD *)(a3 + 88);
  v66[1] = v18;
  v67 = *(_QWORD *)(a3 + 120);
  sub_1B1E8FCE4(a2, (uint64_t)v66, 0x200000000, v51);
  sub_1B1A18378((uint64_t)v51, (uint64_t)v52, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v52[0])
  {
    v59 = v52[0];
    v60 = v52[1];
    v61 = v53;
    v43 = v58;
    if (v58 >= 1 && (v19 = v55) != 0)
    {
      v20 = v57;
      v74 = v57[4];
      v50 = *(unsigned __int8 *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v41 = (uint64_t)(v57 + 6);
      v42 = v56;
      v39 = v57 + 13;
      v40 = v57 + 8;
      v21 = (uint64_t *)(v54 + 24);
      while (1)
      {
        v22 = *((unsigned int *)v21 - 6);
        v23 = *((unsigned int *)v21 - 5);
        v24 = *((unsigned int *)v21 - 4);
        v25 = *v21;
        v26 = v21[2];
        v48 = v19;
        v49 = v11;
        v46 = v21[1];
        v47 = *(v21 - 1);
        if (v50)
        {
          v27 = *(os_unfair_lock_s **)(v26 + 376);
          swift_retain();
          os_unfair_lock_lock(v27);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v74);
        sub_1B1A18378(v41, (uint64_t)v68, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v28 = v20[4];
        v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v20[6] = ecs_stack_allocator_allocate(v28, 48 * v29, 8);
        v20[7] = v29;
        v40[1] = 0;
        v40[2] = 0;
        *v40 = 0;
        swift_release();
        v69[0] = v42;
        v69[1] = v26;
        v69[2] = v20;
        v69[3] = v24;
        v69[4] = (v23 - v22 + v24);
        v69[5] = v43;
        v69[6] = v22;
        v69[7] = v23;
        v69[8] = 0;
        v69[9] = 0;
        v70 = 1;
        v71 = v47;
        v72 = v25;
        v73 = v46;
        *(float *)&v30 = a5;
        sub_1B2160BFC((uint64_t)v69, a4, a1, v30, a6, a7, a8, a9, a10);
        if (v49)
          break;
        v64[0] = v59;
        v64[1] = v60;
        v65 = v61;
        sub_1B1F05D48(v20, (unsigned __int16 **)v64, (uint64_t)v68);
        v11 = 0;
        if (*(_QWORD *)(v20[13] + 16))
        {
          v31 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v31, v26);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v33 = v20[13];
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v33 + 16));
          }
          else
          {
            v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v33 + 24) >= 2uLL)
            {
              sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
              v34 = (_QWORD *)swift_allocObject();
              v35 = j__malloc_size(v34);
              v34[2] = 0;
              v34[3] = 2 * ((uint64_t)(v35 - 32) / 72);
            }
            *v39 = v34;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v20[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v36 = *(char **)(v26 + 232);
            v37 = *(char **)(v26 + 256);
            if (v36 == v37)
            {
              v38 = *(char **)(v26 + 240);
            }
            else
            {
              sub_1B1A1059C(v37, v36);
              v37 = *(char **)(v26 + 232);
              v38 = *(char **)(v26 + 240);
              if (v38 == v37)
              {
                v38 = 0;
                v37 = 0;
                *(_QWORD *)(v26 + 232) = 0;
                *(_QWORD *)(v26 + 240) = 0;
              }
            }
            *(_QWORD *)(v26 + 248) = v38;
            *(_QWORD *)(v26 + 256) = v37;
          }
        }
        ecs_stack_allocator_pop_snapshot(v74);
        if ((v50 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 376));
        }
        swift_release();
        v21 += 6;
        v19 = v48 - 1;
        if (v48 == 1)
          goto LABEL_24;
      }

      v62[0] = v59;
      v62[1] = v60;
      v63 = v61;
      sub_1B1F05D48(v20, (unsigned __int16 **)v62, (uint64_t)v68);
      sub_1B1F03804((char *)v26);
      ecs_stack_allocator_pop_snapshot(v74);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 376));
      __break(1u);
    }
    else
    {
LABEL_24:
      sub_1B19ED748(v51);
    }
  }
}

uint64_t sub_1B2160BFC(uint64_t a1, _BYTE *a2, _QWORD *a3, double a4, float a5, float a6, float a7, float a8, float a9)
{
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  unint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _OWORD *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD *v40;
  int32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  int32x4_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int32x4_t *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;

  if (*a2)
  {
    if (*a2 == 1)
    {
      result = sub_1B1B47DC8();
      if ((v14 & 1) == 0)
      {
        v16 = *(_QWORD *)(a1 + 48);
        v15 = *(_QWORD *)(a1 + 56);
        LODWORD(v17) = LODWORD(a4);
        if (*(float *)&a4 == a5 && a6 == a7)
        {
          v18 = v15 - v16;
          if (v18)
          {
            *((float *)&v17 + 1) = a6;
            v19 = (_QWORD *)(result + 8 * v16);
            do
            {
              *v19++ = v17;
              --v18;
            }
            while (v18);
          }
          return result;
        }
        v65 = v15 - v16;
        if (!v65)
          return result;
        v48 = a3[3];
        v66 = a3[4];
        v67 = (_QWORD *)(result + 8 * v16);
        v69 = a3[1];
        v68 = a3[2];
        do
        {
          v70 = v69 ^ v48;
          v71 = v68 ^ v66;
          v72 = v70 ^ v68;
          v73 = v69 ^ v71;
          v74 = v70 ^ (v68 << 17) ^ v73;
          v75 = __ROR8__(v71, 19);
          v76 = (float)((9 * ((((unint64_t)(5 * v68) >> 32) >> 25) | (640 * v68))) & 0xFFFFFF)
              * 0.000000059605;
          v68 = v74 ^ v72;
          v69 = v72 ^ v75 ^ v73;
          v48 = v74 ^ (v72 << 17);
          v66 = __ROR8__(v72 ^ v75, 19);
          *(float *)&v77 = (float)((float)(a5 - *(float *)&a4) * v76) + *(float *)&a4;
          *((float *)&v77 + 1) = (float)((float)(a7 - a6)
                                       * (float)((float)((9
                                                        * ((((unint64_t)(5 * v72) >> 32) >> 25) | (640 * v72))) & 0xFFFFFF)
                                               * 0.000000059605))
                               + a6;
          *v67++ = v77;
          --v65;
        }
        while (v65);
        a3[1] = v69;
        a3[2] = v68;
        a3[4] = v66;
LABEL_46:
        a3[3] = v48;
        return result;
      }
      result = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
      v37 = *(_QWORD *)(a1 + 48);
      v36 = *(_QWORD *)(a1 + 56);
      LODWORD(v38) = LODWORD(a4);
      if (*(float *)&a4 == a5 && a6 == a7)
      {
        v39 = v36 - v37;
        if (v39)
        {
          *((float *)&v38 + 1) = a6;
          *((_QWORD *)&v38 + 1) = COERCE_UNSIGNED_INT(1.0);
          v40 = (_OWORD *)(result + 16 * v37);
          do
          {
            *v40++ = v38;
            --v39;
          }
          while (v39);
        }
      }
      else
      {
        v78 = v36 - v37;
        if (v78)
        {
          v79 = a3[3];
          v80 = a3[4];
          v81 = (_OWORD *)(result + 16 * v37);
          v83 = a3[1];
          v82 = a3[2];
          do
          {
            v84 = v83 ^ v79;
            v85 = v82 ^ v80;
            v86 = v84 ^ v82;
            v87 = v83 ^ v85;
            v88 = (float)(a5 - *(float *)&a4)
                * (float)((float)((9 * ((((unint64_t)(5 * v82) >> 32) >> 25) | (640 * v82))) & 0xFFFFFF)
                        * 0.000000059605);
            v89 = v84 ^ (v82 << 17) ^ v87;
            v90 = __ROR8__(v85, 19);
            v82 ^= v89 ^ v84;
            *(float *)&v91 = v88 + *(float *)&a4;
            v83 = v86 ^ v90 ^ v87;
            *((float *)&v91 + 1) = (float)((float)(a7 - a6)
                                         * (float)((float)((9
                                                          * ((((unint64_t)(5 * v86) >> 32) >> 25) | (640 * v86))) & 0xFFFFFF)
                                                 * 0.000000059605))
                                 + a6;
            *((_QWORD *)&v91 + 1) = COERCE_UNSIGNED_INT(1.0);
            v80 = __ROR8__(v86 ^ v90, 19);
            v79 = v89 ^ (v86 << 17);
            *v81++ = v91;
            --v78;
          }
          while (v78);
          a3[1] = v83;
          a3[2] = v82;
          a3[3] = v79;
          a3[4] = v80;
        }
      }
    }
    else
    {
      result = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
      v32 = *(_QWORD *)(a1 + 48);
      v31 = *(_QWORD *)(a1 + 56);
      if (*(float *)&a4 != a5 || a6 != a7 || a8 != a9)
      {
        v47 = v31 - v32;
        if (!v47)
          return result;
        v48 = a3[3];
        v49 = a3[4];
        v50 = (_OWORD *)(result + 16 * v32);
        v52 = a3[1];
        v51 = a3[2];
        do
        {
          v53 = v52 ^ v48;
          v54 = v51 ^ v49;
          v55 = v53 ^ v51;
          v56 = v52 ^ v54;
          v57 = (float)((9 * ((((unint64_t)(5 * v51) >> 32) >> 25) | (640 * v51))) & 0xFFFFFF);
          v58 = v53 ^ (v51 << 17) ^ v56;
          v59 = __ROR8__(v54, 19);
          v60 = v58 ^ v55;
          v61 = v55 ^ v59 ^ v56;
          v62 = v58 ^ (v55 << 17) ^ v61;
          v63 = __ROR8__(v55 ^ v59, 19);
          v51 = v62 ^ v60;
          v52 = v60 ^ v63 ^ v61;
          v48 = v62 ^ (v60 << 17);
          HIDWORD(v64) = 0;
          *(float *)&v64 = (float)((float)(a5 - *(float *)&a4) * (float)(v57 * 0.000000059605)) + *(float *)&a4;
          *((float *)&v64 + 1) = (float)((float)(a7 - a6)
                                       * (float)((float)((9
                                                        * ((((unint64_t)(5 * v55) >> 32) >> 25) | (640 * v55))) & 0xFFFFFF)
                                               * 0.000000059605))
                               + a6;
          v49 = __ROR8__(v60 ^ v63, 19);
          *((float *)&v64 + 2) = (float)((float)(a9 - a8)
                                       * (float)((float)((9
                                                        * ((((unint64_t)(5 * v60) >> 32) >> 25) | (640 * v60))) & 0xFFFFFF)
                                               * 0.000000059605))
                               + a8;
          *v50++ = v64;
          --v47;
        }
        while (v47);
        a3[1] = v52;
        a3[2] = v51;
        a3[4] = v49;
        goto LABEL_46;
      }
      v33 = v31 - v32;
      if (v33)
      {
        *(_QWORD *)&v34 = __PAIR64__(LODWORD(a6), LODWORD(a4));
        *((_QWORD *)&v34 + 1) = LODWORD(a8);
        v35 = (_OWORD *)(result + 16 * v32);
        do
        {
          *v35++ = v34;
          --v33;
        }
        while (v33);
      }
    }
  }
  else
  {
    result = sub_1B1B47D58();
    if ((v20 & 1) != 0)
    {
      result = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
      v43 = *(_QWORD *)(a1 + 48);
      v42 = *(_QWORD *)(a1 + 56);
      if (*(float *)&a4 == a5)
      {
        v44 = v42 - v43;
        if (v44)
        {
          v45 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          v45.i32[3] = 0;
          v46 = (int32x4_t *)(result + 16 * v43);
          do
          {
            *v46++ = v45;
            --v44;
          }
          while (v44);
        }
      }
      else
      {
        v101 = v42 - v43;
        if (v101)
        {
          v102 = a3[3];
          v103 = a3[4];
          v104 = (int32x4_t *)(result + 16 * v43);
          v105 = a3[1];
          v106 = a3[2];
          do
          {
            v107 = 9 * ((((unint64_t)(5 * v106) >> 32) >> 25) | (640 * v106));
            v108 = v105 ^ v102;
            v109 = v106 ^ v103;
            v102 ^= v105 ^ (v106 << 17);
            v106 ^= v108;
            *(float *)v41.i32 = (float)((float)(a5 - *(float *)&a4)
                                      * (float)((float)(*(_QWORD *)&v107 & 0xFFFFFFLL) * 0.000000059605))
                              + *(float *)&a4;
            v41 = vdupq_lane_s32(*(int32x2_t *)v41.i8, 0);
            v103 = __ROR8__(v109, 19);
            v105 ^= v109;
            v41.i32[3] = 0;
            *v104++ = v41;
            --v101;
          }
          while (v101);
          a3[1] = v105;
          a3[2] = v106;
          a3[3] = v102;
          a3[4] = v103;
        }
      }
    }
    else
    {
      v22 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(a1 + 56);
      if (*(float *)&a4 == a5)
      {
        v23 = v21 - v22;
        if (v21 != v22)
        {
          v24 = *(_QWORD *)(a1 + 48);
          if (v23 < 8)
            goto LABEL_17;
          v24 = v22 + (v23 & 0xFFFFFFFFFFFFFFF8);
          v25 = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          v26 = (int32x4_t *)(result + 4 * v22 + 16);
          v27 = v23 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v26[-1] = v25;
            *v26 = v25;
            v26 += 2;
            v27 -= 8;
          }
          while (v27);
          if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_17:
            v28 = v21 - v24;
            v29 = (_DWORD *)(result + 4 * v24);
            do
            {
              *v29++ = LODWORD(a4);
              --v28;
            }
            while (v28);
          }
        }
      }
      else
      {
        v92 = v21 - v22;
        if (v92)
        {
          v93 = a3[3];
          v94 = a3[4];
          v95 = (float *)(result + 4 * v22);
          v96 = a3[1];
          v97 = a3[2];
          do
          {
            v98 = 9 * ((((unint64_t)(5 * v97) >> 32) >> 25) | (640 * v97));
            v99 = v96 ^ v93;
            v100 = v97 ^ v94;
            v93 ^= v96 ^ (v97 << 17);
            v97 ^= v99;
            v96 ^= v100;
            v94 = __ROR8__(v100, 19);
            *v95++ = (float)((float)(a5 - *(float *)&a4)
                           * (float)((float)(*(_QWORD *)&v98 & 0xFFFFFFLL) * 0.000000059605))
                   + *(float *)&a4;
            --v92;
          }
          while (v92);
          a3[1] = v96;
          a3[2] = v97;
          a3[3] = v93;
          a3[4] = v94;
        }
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for ParticleSizeInit.System()
{
  return objc_opt_self();
}

const char *sub_1B21611F8()
{
  return "ParticleSizeInitSystem";
}

uint64_t type metadata accessor for ParticleSizeInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B2161230()
{
  return "ParticleSizeInit.GPU";
}

uint64_t sub_1B2161244()
{
  return type metadata accessor for ParticleSizeInit.GPUSystem();
}

uint64_t sub_1B2161260()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

double sub_1B21612A8()
{
  char *v0;
  uint64_t v1;
  ValueMetadata *v2;
  _UNKNOWN **v3;
  uint64_t v4;
  double result;

  v1 = *v0;
  v2 = off_1E63FB820[v1];
  v3 = off_1E63FB838[v1];
  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAD80, (void (*)(uint64_t))sub_1B19ED84C);
  v4 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  return result;
}

uint64_t sub_1B2161314(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float32x4_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[20];
  float v19;
  float v20;
  float v21;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  sub_1B1D17804(v3, v18);
  swift_release();
  if (v18[0] == 3)
  {
    v5 = 0.0;
    v6 = (float32x4_t)xmmword_1B22C8190;
    v7 = 1.0;
    v8 = 0.2;
    v9 = 0.1;
  }
  else
  {
    v6 = *(float32x4_t *)&v18[4];
    v9 = v19;
    v8 = v20;
    v7 = v21;
    LODWORD(v5) = v18[0];
  }
  *(float32x4_t *)v18 = vmulq_n_f32(v6, v7);
  *(float *)&v18[16] = v9 * v7;
  v19 = v8 * v7;
  v20 = v5;
  v10 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_size_uniforms(0);
    sub_1B1F40E1C((uint64_t)v18, 1, ObjectType, v12, v13, v14, v15, v16);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v10 == 0, 0, (uint64_t)a1, 0xD000000000000011, 0x80000001B234E720, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

uint64_t sub_1B2161484(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  _BYTE v27[4];
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;

  v2 = *a1;
  swift_retain();
  v3 = a1[1];
  swift_retain();
  sub_1B1D17804(v3, &v20);
  swift_release();
  v4 = v20;
  if (v20 == 3)
  {
    v4 = 0;
    v5 = 1.0;
    v6 = 0.2;
    v7 = 0.1;
    v8 = 0.1;
    v9 = 0.2;
    v10 = 0.1;
    v11 = 0.2;
  }
  else
  {
    v7 = *((float *)&v20 + 1);
    v6 = v21;
    v8 = v22;
    v9 = v23;
    v10 = v24;
    v11 = v25;
    v5 = v26;
  }
  v27[0] = v4;
  v28 = v7;
  v29 = v6;
  v12 = v7 * v5;
  v30 = v8;
  v31 = v9;
  v13 = v6 * v5;
  v14 = v8 * v5;
  v15 = v9 * v5;
  v32 = v10;
  v33 = v11;
  v34 = v5;
  v16 = v10 * v5;
  v17 = v11 * v5;
  v18 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FE8ED0(v18, v2, v2, (uint64_t)a1, v27, v12, v13, v14, v15, v16, v17);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

uint64_t sub_1B21615D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;

  sub_1B2161898(0, &qword_1ED4BB4A0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v19 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2161854();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v22 = 0;
  sub_1B1A71ABC();
  sub_1B2229814();
  v21 = v20;
  sub_1B1B4D924();
  v22 = 1;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v11 = v20;
  v22 = 2;
  sub_1B2229814();
  v12 = v20;
  v22 = 3;
  sub_1B2229814();
  v14 = v20;
  v15 = a1[3];
  v16 = a1[4];
  sub_1B19FA070(a1, v15);
  v17 = sub_1B2067B64(2026, v15, v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v17)
    v18 = 2.0;
  else
    v18 = 1.0;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_BYTE *)a2 = v21;
  *(_QWORD *)(a2 + 4) = v11;
  *(_QWORD *)(a2 + 12) = v12;
  *(_QWORD *)(a2 + 20) = v14;
  *(float *)(a2 + 28) = v18;
  return result;
}

unint64_t sub_1B2161854()
{
  unint64_t result;

  result = qword_1ED4BB2F0;
  if (!qword_1ED4BB2F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C83D0, &type metadata for ParticleSizeInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BB2F0);
  }
  return result;
}

void sub_1B2161898(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B2161854();
    v7 = a3(a1, &type metadata for ParticleSizeInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleSizeInit.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B2161940 + 4 * byte_1B22C81C9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B2161974 + 4 * byte_1B22C81C4[v4]))();
}

uint64_t sub_1B2161974(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B216197C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2161984);
  return result;
}

uint64_t sub_1B2161990(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2161998);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B216199C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B21619A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeInit.CodingKeys()
{
  return &type metadata for ParticleSizeInit.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ParticleSizeInit(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[32])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleSizeInit(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeInit()
{
  return &type metadata for ParticleSizeInit;
}

unint64_t sub_1B2161A5C()
{
  unint64_t result;

  result = qword_1EEF64BA8;
  if (!qword_1EEF64BA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C83A8, &type metadata for ParticleSizeInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64BA8);
  }
  return result;
}

unint64_t sub_1B2161AA4()
{
  unint64_t result;

  result = qword_1ED4BB300;
  if (!qword_1ED4BB300)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C82E0, &type metadata for ParticleSizeInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BB300);
  }
  return result;
}

unint64_t sub_1B2161AEC()
{
  unint64_t result;

  result = qword_1ED4BB2F8;
  if (!qword_1ED4BB2F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8308, &type metadata for ParticleSizeInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BB2F8);
  }
  return result;
}

uint64_t sub_1B2161B30(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, id *a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30[101];
  _OWORD v31[11];
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  __int16 v35;
  _QWORD v36[6];

  *(_QWORD *)&v19 = 0xD000000000000010;
  *((_QWORD *)&v19 + 1) = 0x80000001B23338F0;
  v20 = 0uLL;
  v9 = 0x7065645F79706F63;
  if (a4)
    v9 = 0xD000000000000010;
  *(_QWORD *)&v21 = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)&v21 + 1) = v9;
  if (a4)
    v10 = 0x80000001B234E7B0;
  else
    v10 = 0xEA00000000006874;
  v22 = v10;
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = MEMORY[0x1E0DEE9D8];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v31[0] = v19;
  v31[1] = v20;
  memset(&v31[5], 0, 96);
  v31[4] = v23;
  v31[2] = v21;
  v31[3] = v10;
  v32[0] = 0;
  v32[1] = 0;
  v33 = xmmword_1B2246910;
  v34 = xmmword_1B2246910;
  v35 = 15;
  v36[0] = 0;
  v36[1] = 0;
  v36[2] = 2;
  memset(&v36[3], 0, 24);
  swift_bridgeObjectRetain();
  sub_1B1FD1C40((uint64_t *)v31, a2, 0, 0, 0, (uint64_t)v32, 3, (uint64_t)v36, (uint64_t)v30, 1, 1);
  sub_1B1BDB228((uint64_t *)&v19);
  v11 = sub_1B1B32B58((uint64_t)v30, 0);
  v13 = v12;
  v14 = 0;
  if (v11 >= 3)
  {
    v11 = swift_unknownObjectRetain();
    v14 = v11;
  }
  sub_1B1B427DC(v11, v13);
  sub_1B1B41134(v30);
  swift_bridgeObjectRelease();
  swift_getObjectType();
  objc_msgSend(a1, sel_setRenderPipelineState_, v14);
  objc_msgSend(a1, sel_setDepthStencilState_, *(_QWORD *)(*(_QWORD *)(a3 + 248) + 480));
  if (!*a5)
  {
    v16 = 0;
LABEL_15:
    objc_msgSend(a1, sel_setFragmentTexture_atIndex_, v16, 0);
    goto LABEL_16;
  }
  if (objc_msgSend(*a5, sel_storageMode) != (id)3)
  {
    v16 = *a5;
    goto LABEL_15;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v15 = sub_1B2228E90();
  v18 = 1;
  sub_1B1F1AAF0(v15, 0xD000000000000037, 0x80000001B234E7D0, &v18);
  swift_release();
LABEL_16:
  sub_1B20BFD20(1);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2161DF4(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v11;
  void *v12;
  void *v13;
  unint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  double (*v18)(uint64_t, uint64_t);
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  double v29;
  double v30;
  uint64_t v31;
  float v32;
  float v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  _BYTE v45[160];
  uint64_t v46[20];
  _BYTE v47[160];
  uint64_t v48[21];
  uint64_t v49[101];
  char v50[4];
  int v51;
  char v52;
  char v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  __int16 v58;
  __int16 v59;
  int v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  _OWORD v70[11];
  _QWORD v71[2];
  __int128 v72;
  __int128 v73;
  __int16 v74;
  _QWORD v75[6];
  _OWORD v76[2];
  _BYTE v77[24];
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;

  *(_QWORD *)&v76[0] = 0xD000000000000010;
  *((_QWORD *)&v76[0] + 1) = 0x80000001B23338F0;
  v76[1] = 0uLL;
  *(_OWORD *)&v77[8] = xmmword_1B22C8450;
  *(_QWORD *)v77 = MEMORY[0x1E0DEE9D8];
  v78 = 0;
  *(_QWORD *)&v79 = 0;
  *((_QWORD *)&v79 + 1) = MEMORY[0x1E0DEE9D8];
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v70[1] = 0uLL;
  v70[0] = v76[0];
  memset(&v70[5], 0, 96);
  v70[4] = v79;
  v70[2] = *(_OWORD *)v77;
  v70[3] = 0xEE00687470654465;
  v71[1] = 0;
  v71[0] = 0;
  v72 = xmmword_1B2246910;
  v73 = xmmword_1B2246910;
  v74 = 15;
  v75[1] = 0;
  v75[0] = 0;
  v75[2] = 2;
  memset(&v75[3], 0, 24);
  sub_1B1FD1C40((uint64_t *)v70, a2, 0, 0, 0, (uint64_t)v71, 3, (uint64_t)v75, (uint64_t)v49, 1, 1);
  sub_1B1BDB228((uint64_t *)v76);
  v11 = sub_1B1B32B58((uint64_t)v49, 0);
  v13 = v12;
  v14 = 0;
  if (v11 >= 3)
  {
    v11 = swift_unknownObjectRetain();
    v14 = v11;
  }
  sub_1B1B427DC(v11, v13);
  sub_1B1B41134(v49);
  ObjectType = swift_getObjectType();
  objc_msgSend(a1, sel_setRenderPipelineState_, v14);
  RGTextureDescriptor.init()((uint64_t)v50);
  sub_1B1BA802C(a3 + 624, (uint64_t)v47);
  sub_1B1BA802C((uint64_t)v47, (uint64_t)v48);
  if (sub_1B1B3C438(v48) == 1)
    goto LABEL_11;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  v43 = a6;
  v44 = a1;
  v16 = v48[1];
  v17 = swift_getObjectType();
  v18 = *(double (**)(uint64_t, uint64_t))(v16 + 72);
  swift_unknownObjectRetain();
  v19 = v18(v17, v16);
  swift_unknownObjectRelease();
  sub_1B1BA802C(a3 + 624, (uint64_t)v45);
  sub_1B1BA802C((uint64_t)v45, (uint64_t)v46);
  if (sub_1B1B3C438(v46) == 1)
  {
LABEL_11:
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v20 = (uint64_t)v19;
    v21 = v46[1];
    v22 = v56;
    v39 = v55;
    v23 = v54;
    v24 = v53;
    v25 = v52;
    v26 = v51;
    v27 = swift_getObjectType();
    v28 = *(void (**)(uint64_t, uint64_t))(v21 + 72);
    swift_unknownObjectRetain();
    v28(v27, v21);
    v30 = v29;
    swift_unknownObjectRelease();
    v31 = *(_QWORD *)(v40 + 408);
    v58 = v20;
    v59 = (uint64_t)v30;
    v60 = v26;
    v61 = 1;
    v62 = v25;
    v63 = v24;
    v64 = v31;
    v65 = v23;
    v66 = xmmword_1B2245BA0;
    v67 = v39;
    v68 = v22;
    v69 = v57;
    sub_1B20F1554();
    v32 = *(float *)(v41 + 20);
    v33 = 1.0;
    if (v32 >= 1.0)
    {
      v36 = v43;
      v35 = v44;
      v37 = ObjectType;
    }
    else
    {
      v34 = 0;
      v36 = v43;
      v35 = v44;
      v37 = ObjectType;
      do
      {
        ++v34;
        v33 = v33 * 0.5;
      }
      while (v32 < v33);
    }
    swift_getObjectType();
    objc_msgSend(v42, sel_pixelFormat);
    objc_msgSend(v42, sel_textureType);
    objc_msgSend(v35, sel_setFragmentTexture_atIndex_, sub_1B2228E60(), 0);
    sub_1B1E125C8(v36, v37);
    sub_1B20BFD20(1);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for DepthPrepareSystem()
{
  return objc_opt_self();
}

const char *sub_1B2162294()
{
  return "Depth Prepare";
}

uint64_t sub_1B21622A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  float v4;
  float v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64x2_t v9;
  int16x8_t v10;
  _BOOL4 v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  float v24;
  float v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  id v49;
  _QWORD v50[10];
  _BYTE v51[88];
  _QWORD v52[11];
  _QWORD v53[11];
  uint64_t v54;
  unint64_t v55;
  __int16 v56;
  char v57;
  char v58;
  unsigned __int32 v59;
  __int16 v60;
  char v61;
  int v62;
  float v63;
  float v64;

  v1 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 272);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3 == 2)
    {
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
    v5 = *(float *)(v2 + 40);
    v4 = *(float *)(v2 + 44);
    v6 = *(_QWORD *)(v2 + 32);
    v7 = v6 & 1;
    v8 = HIDWORD(v6);
    v56 = v3 & 0x101;
    v57 = BYTE2(v3) & 1;
    v58 = BYTE3(v3) & 1;
    v9 = (uint64x2_t)vdupq_n_s64(v3);
    v10 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v9, (uint64x2_t)xmmword_1B2280B00), (int32x4_t)vshlq_u64(v9, (uint64x2_t)xmmword_1B2280B10));
    *(int8x8_t *)v10.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v10), (int8x8_t)0x1000100010001);
    v59 = vmovn_s16(v10).u32[0];
    v60 = v6 & 0x101;
    v61 = BYTE2(v6) & 1;
    v62 = HIDWORD(v6);
    v63 = v5;
    v64 = v4;
    v11 = (v3 & 0x100000100 | v6 & 1) != 0;
    if ((v3 & 1) != 0 && v11)
    {
      v45 = result;
      v46 = v7;
      swift_retain();
      swift_retain();
      v12 = sub_1B2229454();
      v14 = *(void **)(v1 + 368);
      v47 = v2;
      if (v14)
      {
        v54 = v12;
        v55 = v13;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B2228968();
        v15 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
        objc_msgSend(v14, sel_pushDebugGroup_, v15);
        swift_bridgeObjectRelease();

        v2 = v47;
        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_1B206309C(1u, (uint64_t)v50);
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 264) + 40);
      v17 = *(_QWORD *)(v16 + 16);
      swift_retain();
      if (v17)
      {
        v19 = v50[0];
        v18 = v50[1];
        swift_bridgeObjectRetain();
        v20 = sub_1B1DC3B00(v19, v18);
        if ((v21 & 1) != 0)
        {
          v22 = *(void **)(*(_QWORD *)(v16 + 56) + 8 * v20);
          swift_unknownObjectRetain();
          sub_1B1BA80C0((uint64_t)v50);
          swift_release();
          sub_1B1BA80C0((uint64_t)v50);
          sub_1B206309C(5u, (uint64_t)v51);
          v23 = sub_1B206318C((uint64_t)v51, 1, 0, 2);
          sub_1B1BA80C0((uint64_t)v51);
          v48 = (void *)v23;
          if (v23)
          {
            v24 = v5;
            v25 = v4;
            if ((v3 & 0x100) != 0 && *(float *)&v8 < 1.0)
            {
              if (v5 >= *(float *)&v8)
                v24 = *(float *)&v8;
              if ((v3 & 0x1000000) == 0)
                v24 = *(float *)&v8;
            }
            else
            {
              if ((v3 & 0x1000000) == 0)
              {
                v24 = 1.0;
                v25 = fminf(v4, 1.0);
LABEL_30:
                if ((v3 & 0x10000) == 0)
                  v25 = v24;
                v28 = 1 - (uint64_t)log2f(v25);
                swift_getObjectType();
                v29 = objc_msgSend(v48, sel_mipmapLevelCount);
                if ((uint64_t)v29 < v28)
                  v28 = (uint64_t)v29;
                objc_msgSend(v48, sel_pixelFormat);
                objc_msgSend(v48, sel_textureType);
                v49 = v22;
                if (v28)
                {
                  v30 = v28;
                  swift_unknownObjectRetain();
                  v31 = 0;
                  do
                  {
                    v32 = v31 + 1;
                    v33 = (void *)sub_1B2228E60();
                    if (v31)
                    {
                      v54 = 0;
                      v55 = 0xE000000000000000;
                      sub_1B2229430();
                      swift_bridgeObjectRelease();
                      v54 = 0x776F446874706544;
                      v55 = 0xEF656C706D61736ELL;
                      v53[0] = v31;
                      sub_1B2229A0C();
                      sub_1B2228890();
                      swift_bridgeObjectRelease();
                      v34 = v54;
                      v35 = v55;
                    }
                    else
                    {
                      v35 = 0xE900000000000079;
                      v34 = 0x706F436874706544;
                    }
                    v36 = sub_1B1BA147C(0, 2, (uint64_t)v33, 0, 1, 0);
                    sub_1B1BA77BC(v34, v35, v36);
                    v37 = sub_1B1BA7B7C(0);
                    if (v37)
                    {
                      v38 = (void *)v37;
                      swift_unknownObjectRetain();
                      sub_1B1F9AEC4((uint64_t)v52);
                      sub_1B2161B30(v38, v52, v1, v31, &v49);
                      sub_1B1BA2FBC();
                      swift_bridgeObjectRelease();

                      swift_unknownObjectRelease();
                    }
                    else
                    {
                      swift_bridgeObjectRelease();

                    }
                    swift_unknownObjectRelease();
                    v49 = v33;
                    ++v31;
                  }
                  while (v30 != v32);
                }
                else
                {
                  swift_unknownObjectRetain();
                }
                sub_1B206309C(2u, (uint64_t)v53);
                v39 = sub_1B206318C((uint64_t)v53, v46, 0, 2);
                sub_1B1BA80C0((uint64_t)v53);
                if (v39)
                {
                  v40 = swift_unknownObjectRetain();
                  v41 = sub_1B1BA147C(v40, 2, 0, 2, 0, 0);
                  swift_unknownObjectRelease();
                  sub_1B1BA77BC(0x6E694C6874706544, 0xEB00000000726165, v41);
                  v42 = sub_1B1BA7B7C(0);
                  if (v42)
                  {
                    v43 = (void *)v42;
                    swift_unknownObjectRetain();
                    sub_1B1F9AEC4((uint64_t)&v54);
                    sub_1B2161DF4(v43, &v54, v1, (uint64_t)&v56, v48, v45);
                    sub_1B1BA2FBC();
                    swift_unknownObjectRelease();
                  }
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();

                }
                else
                {
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                }
                v44 = *(void **)(v1 + 368);
                if (v44)
                  objc_msgSend(v44, sel_popDebugGroup);
                swift_release();
                return swift_release();
              }
              v24 = fminf(v5, 1.0);
            }
            if (v24 <= v4)
              v25 = v24;
            goto LABEL_30;
          }
          swift_unknownObjectRelease();
          v27 = *(void **)(v1 + 368);
          if (v27)
            objc_msgSend(v27, sel_popDebugGroup);
LABEL_21:
          swift_release();
          return swift_release();
        }
        sub_1B1BA80C0((uint64_t)v50);
      }
      swift_release();
      sub_1B1BA80C0((uint64_t)v50);
      v26 = *(void **)(v1 + 368);
      if (v26)
        objc_msgSend(v26, sel_popDebugGroup);
      goto LABEL_21;
    }
  }
  return result;
}

BOOL sub_1B2162978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char v6;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 128);
  if (*(_QWORD *)(v3 + 16) && (v5 = sub_1B1DC3AC8(a1), (v6 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v5) + 32) == a1;
  else
    return 0;
}

uint64_t sub_1B21629D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for NullEntityComponent;
  *(_QWORD *)(v0 + 40) = &off_1E63984B0;
  type metadata accessor for EntityFamily();
  v1 = swift_allocObject();
  result = sub_1B2162A58(-1, v0, MEMORY[0x1E0DEE9D8]);
  qword_1ED4D0A38 = v1;
  return result;
}

uint64_t sub_1B2162A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72;
  uint64_t v73;

  v7 = MEMORY[0x1E0DEE9D8];
  v3[2] = sub_1B1B95440(MEMORY[0x1E0DEE9D8]);
  v3[16] = sub_1B1B954FC(v7);
  v3[17] = a1;
  v8 = v3 + 16;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = v10 + v9;
  if (v10 + v9 < 0)
  {
LABEL_50:
    sub_1B222967C();
    __break(1u);
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    if (v11)
    {
      sub_1B1BBFC44(0, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = sub_1B2228B0C();
      *(_QWORD *)(v12 + 16) = v11;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v12 = MEMORY[0x1E0DEE9D8];
    }
    v73 = 0;
    *(_QWORD *)&v67 = v12 + 32;
    *((_QWORD *)&v67 + 1) = v10 + v9;
    sub_1B2163008(&v67, &v73, a2, a3, v9, v10);
    *(_QWORD *)(v12 + 16) = v73;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3[3] = v12;
    v3[4] = a2;
    v3[5] = a3;
    v65 = a2;
    v66 = v3;
    if (v9)
    {
      v64 = v12;
      *(_QWORD *)&v67 = v7;
      swift_bridgeObjectRetain();
      sub_1B202A0CC(0, v9, 0);
      v13 = a2;
      v14 = v67;
      v15 = v13 + 40;
      do
      {
        v16 = *(_QWORD *)(v15 - 8);
        v17 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
        v20 = v19;
        *(_QWORD *)&v67 = v14;
        v22 = *(_QWORD *)(v14 + 16);
        v21 = *(_QWORD *)(v14 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_1B202A0CC(v21 > 1, v22 + 1, 1);
          v14 = v67;
        }
        *(_QWORD *)(v14 + 16) = v22 + 1;
        v23 = (_QWORD *)(v14 + 32 * v22);
        v23[4] = v16;
        v23[5] = v17;
        v23[6] = v18;
        v23[7] = v20;
        v15 += 16;
        --v9;
      }
      while (v9);
      v12 = v64;
      v8 = v3 + 16;
    }
    else
    {
      swift_bridgeObjectRetain();
      v14 = MEMORY[0x1E0DEE9D8];
    }
    v3[6] = v14;
    v24 = *(_QWORD *)(v12 + 16);
    if (v24)
    {
      swift_bridgeObjectRetain();
      v25 = 0;
      v26 = 32;
      do
      {
        v25 ^= sub_1B2228CF8();
        v26 += 16;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = 0;
    }
    v3[18] = v25;
    v27 = v3[3];
    v28 = *(_QWORD *)(v27 + 16);
    sub_1B1D4BDD8();
    sub_1B2228554();
    if (v28)
    {
      swift_retain();
      v29 = 0;
      v30 = (uint64_t *)(v27 + 40);
      while (1)
      {
        v32 = *(v30 - 1);
        v33 = *v30;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v67 = *v8;
        v35 = v67;
        v36 = v8;
        *v8 = 0x8000000000000000;
        v38 = sub_1B1DC3AC8(v32);
        v39 = v37;
        v40 = *(_QWORD *)(v35 + 16) + ((v37 & 1) == 0);
        if (*(_QWORD *)(v35 + 24) >= v40)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v43 = (_QWORD *)v67;
            if ((v37 & 1) != 0)
              goto LABEL_28;
          }
          else
          {
            sub_1B1EA7974();
            v43 = (_QWORD *)v67;
            if ((v39 & 1) != 0)
              goto LABEL_28;
          }
        }
        else
        {
          sub_1B1E8FF1C(v40, isUniquelyReferenced_nonNull_native);
          v41 = sub_1B1DC3AC8(v32);
          if ((v39 & 1) != (v42 & 1))
            goto LABEL_49;
          v38 = v41;
          v43 = (_QWORD *)v67;
          if ((v39 & 1) != 0)
          {
LABEL_28:
            *(_QWORD *)(v43[7] + 8 * v38) = v29;
            goto LABEL_31;
          }
        }
        v43[(v38 >> 6) + 8] |= 1 << v38;
        v44 = 8 * v38;
        *(_QWORD *)(v43[6] + v44) = v32;
        *(_QWORD *)(v43[7] + v44) = v29;
        ++v43[2];
LABEL_31:
        v8 = v36;
        *v36 = v43;
        swift_bridgeObjectRelease();
        if (!sub_1B1F276D0(v32, v33))
          goto LABEL_21;
        v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v32, v33);
        v46 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v67 = *v36;
        v47 = v67;
        *v36 = 0x8000000000000000;
        v49 = sub_1B1DC3AC8(v45);
        v50 = v48;
        v51 = *(_QWORD *)(v47 + 16) + ((v48 & 1) == 0);
        if (*(_QWORD *)(v47 + 24) >= v51)
        {
          if ((v46 & 1) != 0)
          {
            v54 = (_QWORD *)v67;
            if ((v48 & 1) != 0)
              goto LABEL_38;
          }
          else
          {
            sub_1B1EA7974();
            v54 = (_QWORD *)v67;
            if ((v50 & 1) != 0)
              goto LABEL_38;
          }
        }
        else
        {
          sub_1B1E8FF1C(v51, v46);
          v52 = sub_1B1DC3AC8(v45);
          if ((v50 & 1) != (v53 & 1))
          {
LABEL_49:
            sub_1B2229FC4();
            __break(1u);
            goto LABEL_50;
          }
          v49 = v52;
          v54 = (_QWORD *)v67;
          if ((v50 & 1) != 0)
          {
LABEL_38:
            *(_QWORD *)(v54[7] + 8 * v49) = v29;
            goto LABEL_20;
          }
        }
        v54[(v49 >> 6) + 8] |= 1 << v49;
        v31 = 8 * v49;
        *(_QWORD *)(v54[6] + v31) = v45;
        *(_QWORD *)(v54[7] + v31) = v29;
        ++v54[2];
LABEL_20:
        *v36 = v54;
        swift_bridgeObjectRelease();
LABEL_21:
        ++v29;
        v30 += 2;
        if (v28 == v29)
        {
          swift_release();
          break;
        }
      }
    }
    if (*(_QWORD *)(*v8 + 16))
    {
      sub_1B1DC3AC8((uint64_t)&type metadata for AnonymousEntity);
      if ((v55 & 1) != 0)
        v56 = 0x10000;
      else
        v56 = 0x4000;
      v57 = v55 ^ 1;
    }
    else
    {
      v57 = 1;
      v56 = 0x4000;
    }
    v58 = sub_1B1C50E3C(v65);
    swift_bridgeObjectRelease();
    sub_1B216B51C(v58, v56, 0, v57 & 1, (uint64_t)&v67);
    v59 = v68;
    v60 = v71;
    v61 = v72;
    *(_OWORD *)(v66 + 7) = v67;
    v66[9] = v59;
    v62 = v70;
    *((_OWORD *)v66 + 5) = v69;
    *((_OWORD *)v66 + 6) = v62;
    v66[14] = v60;
    *((_BYTE *)v66 + 120) = v61;
    return (uint64_t)v66;
  }
  return result;
}

_QWORD *sub_1B2163008(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(*result + 8);
    v8 = a3 + 40;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      *(v7 - 1) = *(_QWORD *)(v8 - 8);
      *v7 = v9;
      v7 += 2;
      v8 += 16;
      --v6;
    }
    while (v6);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(*result + 16 * a5 + 8);
    v12 = a4 + 40;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)v12 + 8);
      *(v11 - 1) = *(_QWORD *)(v12 - 8);
      *v11 = v13;
      v11 += 2;
      v12 += 16;
      --v10;
    }
    while (v10);
  }
  *a2 = a6 + a5;
  return result;
}

uint64_t sub_1B2163078@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (result && a2)
  {
    v4 = (uint64_t *)(result + 8);
    while (1)
    {
      v5 = v4 - 1;
      v6 = *(v4 - 1);
      if (v6 == a3 || v4[1] == a3)
        break;
      v4 += 4;
      if (v5 + 4 == (uint64_t *)(result + 32 * a2))
        goto LABEL_9;
    }
    v8 = *v4;
    *a4 = v6;
    a4[1] = v8;
  }
  else
  {
LABEL_9:
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

uint64_t sub_1B21630C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B2163134()
{
  sub_1B21630C4();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EntityFamily()
{
  return objc_opt_self();
}

uint64_t sub_1B2163174()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  if (v1)
  {
    v11[0] = MEMORY[0x1E0DEE9D8];
    swift_retain();
    sub_1B2029FFC(0, v1, 0);
    v2 = 32;
    v3 = v11[0];
    do
    {
      v4 = sub_1B222A210();
      v6 = v5;
      v11[0] = v3;
      v8 = *(_QWORD *)(v3 + 16);
      v7 = *(_QWORD *)(v3 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_1B2029FFC(v7 > 1, v8 + 1, 1);
        v3 = v11[0];
      }
      *(_QWORD *)(v3 + 16) = v8 + 1;
      v9 = v3 + 16 * v8;
      *(_QWORD *)(v9 + 32) = v4;
      *(_QWORD *)(v9 + 40) = v6;
      v2 += 16;
      --v1;
    }
    while (v1);
    swift_release();
  }
  sub_1B19FA1DC();
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  strcpy((char *)v11, "<EntityFamily[");
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return v11[0];
}

uint64_t sub_1B216334C()
{
  return sub_1B2163174();
}

uint64_t sub_1B216336C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B21636B4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B2163394(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229DD8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B2163424()
{
  sub_1B21638E4();
  return sub_1B222A1D4();
}

uint64_t sub_1B216344C()
{
  sub_1B21638E4();
  return sub_1B222A1E0();
}

uint64_t sub_1B2163474@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;

  v14 = a2;
  sub_1B19F8E54(0, &qword_1EEF64BB8, (uint64_t (*)(void))sub_1B21638E4, (uint64_t)&type metadata for ParticleClassSpawnID.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v13 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21638E4();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v14;
  v11 = sub_1B22297FC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v10 = v11;
  return result;
}

uint64_t sub_1B21635B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF64BC8, (uint64_t (*)(void))sub_1B21638E4, (uint64_t)&type metadata for ParticleClassSpawnID.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21638E4();
  sub_1B222A180();
  sub_1B2229940();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B21636B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[4];

  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BAAF0, (uint64_t (*)(void))sub_1B1E88F28, (uint64_t)&type metadata for ValueCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v14[-1] - v7;
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067BAC(2000, v9, v10))
  {
    v11 = (uint64_t)sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(v14, v14[3]);
      v11 = sub_1B2229D54();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
    }
  }
  else
  {
    v11 = (uint64_t)sub_1B19FA070(a1, a1[3]);
    sub_1B1E88F28();
    sub_1B222A150();
    if (!v1)
    {
      v11 = sub_1B22297FC();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v11;
}

ValueMetadata *type metadata accessor for ParticleClassSpawnID()
{
  return &type metadata for ParticleClassSpawnID;
}

ValueMetadata *type metadata accessor for ParticleSpawnID()
{
  return &type metadata for ParticleSpawnID;
}

unint64_t sub_1B21638A0()
{
  unint64_t result;

  result = qword_1EEF64BB0;
  if (!qword_1EEF64BB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C85C8, &type metadata for ParticleClassSpawnID);
    atomic_store(result, (unint64_t *)&qword_1EEF64BB0);
  }
  return result;
}

unint64_t sub_1B21638E4()
{
  unint64_t result;

  result = qword_1EEF64BC0;
  if (!qword_1EEF64BC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8784, &type metadata for ParticleClassSpawnID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64BC0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleClassSpawnID.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B2163968 + 4 * byte_1B22C8520[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B2163988 + 4 * byte_1B22C8525[v4]))();
}

_BYTE *sub_1B2163968(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B2163988(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2163990(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2163998(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B21639A0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B21639A8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ParticleClassSpawnID.CodingKeys()
{
  return &type metadata for ParticleClassSpawnID.CodingKeys;
}

unint64_t sub_1B21639C8()
{
  unint64_t result;

  result = qword_1EEF64BD0;
  if (!qword_1EEF64BD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C875C, &type metadata for ParticleClassSpawnID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64BD0);
  }
  return result;
}

unint64_t sub_1B2163A10()
{
  unint64_t result;

  result = qword_1EEF64BD8;
  if (!qword_1EEF64BD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C86CC, &type metadata for ParticleClassSpawnID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64BD8);
  }
  return result;
}

unint64_t sub_1B2163A58()
{
  unint64_t result;

  result = qword_1EEF64BE0;
  if (!qword_1EEF64BE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C86F4, &type metadata for ParticleClassSpawnID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64BE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderVariant()
{
  return &type metadata for RenderVariant;
}

ValueMetadata *type metadata accessor for RenderVariantDescriptor()
{
  return &type metadata for RenderVariantDescriptor;
}

uint64_t sub_1B2163ABC(int a1)
{
  uint64_t result;

  if ((a1 & 2) != 0)
  {
    result = 1;
    if ((a1 & 8) != 0)
    {
LABEL_3:
      result = sub_1B2164E94(result);
      if ((a1 & 0x20) != 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    result = 0;
    if ((a1 & 8) != 0)
      goto LABEL_3;
  }
  if ((a1 & 0x20) != 0)
  {
LABEL_4:
    result = sub_1B2164E8C(result);
    if ((a1 & 0x200) != 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  if ((a1 & 0x200) != 0)
  {
LABEL_5:
    result = sub_1B2164E84(result);
    if ((a1 & 0x8000000) != 0)
      goto LABEL_6;
LABEL_12:
    if ((a1 & 0x10000000) == 0)
      return result;
    return sub_1B2164E74(result);
  }
LABEL_11:
  if ((a1 & 0x8000000) == 0)
    goto LABEL_12;
LABEL_6:
  result = sub_1B2164E7C(result);
  if ((a1 & 0x10000000) != 0)
    return sub_1B2164E74(result);
  return result;
}

_QWORD *sub_1B2163B24(int a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;

  if ((a1 & 1) == 0)
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if ((a1 & 4) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_1B1C64EC0(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_1B1C64EC0(v3 > 1, v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = &v2[14 * v4];
  *((_OWORD *)v5 + 2) = xmmword_1B22C87E0;
  *((_BYTE *)v5 + 48) = 0;
  v5[8] = 1;
  *(_OWORD *)(v5 + 9) = 0u;
  *(_OWORD *)(v5 + 11) = 0u;
  *(_OWORD *)(v5 + 13) = 0u;
  v5[15] = 0;
  *((_BYTE *)v5 + 128) = 13;
  if ((a1 & 4) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_1B1C64EC0(v6 > 1, v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[14 * v7];
    *((_OWORD *)v8 + 2) = xmmword_1B22C87F0;
    *((_BYTE *)v8 + 48) = 0;
    v8[8] = 1;
    *(_OWORD *)(v8 + 9) = 0u;
    *(_OWORD *)(v8 + 11) = 0u;
    *(_OWORD *)(v8 + 13) = 0u;
    v8[15] = 0;
    *((_BYTE *)v8 + 128) = 13;
  }
LABEL_12:
  if ((a1 & 0x400) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
    v11 = v2[2];
    v10 = v2[3];
    if (v11 >= v10 >> 1)
      v2 = sub_1B1C64EC0(v10 > 1, v11 + 1, 1, v2);
    v2[2] = v11 + 1;
    v12 = &v2[14 * v11];
    *((_OWORD *)v12 + 2) = xmmword_1B22C8800;
    *((_BYTE *)v12 + 48) = 0;
    v12[8] = 1;
    *(_OWORD *)(v12 + 9) = 0u;
    *(_OWORD *)(v12 + 11) = 0u;
    *(_OWORD *)(v12 + 13) = 0u;
    v12[15] = 0;
    *((_BYTE *)v12 + 128) = 13;
    if ((a1 & 0x40) == 0)
    {
LABEL_14:
      if ((a1 & 0x2000000) == 0)
        goto LABEL_15;
      goto LABEL_36;
    }
  }
  else if ((a1 & 0x40) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v14 = v2[2];
  v13 = v2[3];
  if (v14 >= v13 >> 1)
    v2 = sub_1B1C64EC0(v13 > 1, v14 + 1, 1, v2);
  v2[2] = v14 + 1;
  v15 = &v2[14 * v14];
  *((_OWORD *)v15 + 2) = xmmword_1B22C8810;
  *((_BYTE *)v15 + 48) = 0;
  v15[8] = 1;
  *(_OWORD *)(v15 + 9) = 0u;
  *(_OWORD *)(v15 + 11) = 0u;
  *(_OWORD *)(v15 + 13) = 0u;
  v15[15] = 0;
  *((_BYTE *)v15 + 128) = 13;
  if ((a1 & 0x2000000) == 0)
  {
LABEL_15:
    if ((a1 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_36:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v17 = v2[2];
  v16 = v2[3];
  if (v17 >= v16 >> 1)
    v2 = sub_1B1C64EC0(v16 > 1, v17 + 1, 1, v2);
  v2[2] = v17 + 1;
  v18 = &v2[14 * v17];
  *((_OWORD *)v18 + 2) = xmmword_1B22C8820;
  *((_BYTE *)v18 + 48) = 0;
  v18[8] = 1;
  *(_OWORD *)(v18 + 9) = 0u;
  *(_OWORD *)(v18 + 11) = 0u;
  *(_OWORD *)(v18 + 13) = 0u;
  v18[15] = 0;
  *((_BYTE *)v18 + 128) = 13;
  if ((a1 & 0x10000) == 0)
  {
LABEL_16:
    v9 = (_OWORD *)&unk_1B22C8000;
    if ((a1 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_41:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v20 = v2[2];
  v19 = v2[3];
  if (v20 >= v19 >> 1)
    v2 = sub_1B1C64EC0(v19 > 1, v20 + 1, 1, v2);
  v2[2] = v20 + 1;
  v21 = &v2[14 * v20];
  *((_OWORD *)v21 + 2) = xmmword_1B22C8830;
  *((_BYTE *)v21 + 48) = 0;
  v21[8] = 1;
  *(_OWORD *)(v21 + 9) = 0u;
  *(_OWORD *)(v21 + 11) = 0u;
  *(_OWORD *)(v21 + 13) = 0u;
  v21[15] = 0;
  *((_BYTE *)v21 + 128) = 13;
  v9 = &unk_1B22C8000;
  if ((a1 & 0x20000) == 0)
  {
LABEL_17:
    if ((a1 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_46:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v23 = v2[2];
  v22 = v2[3];
  if (v23 >= v22 >> 1)
    v2 = sub_1B1C64EC0(v22 > 1, v23 + 1, 1, v2);
  v2[2] = v23 + 1;
  v24 = &v2[14 * v23];
  *((_OWORD *)v24 + 2) = v9[132];
  *((_BYTE *)v24 + 48) = 0;
  v24[8] = 1;
  *(_OWORD *)(v24 + 9) = 0u;
  *(_OWORD *)(v24 + 11) = 0u;
  *(_OWORD *)(v24 + 13) = 0u;
  v24[15] = 0;
  *((_BYTE *)v24 + 128) = 14;
  if ((a1 & 0x40000) == 0)
  {
LABEL_18:
    if ((a1 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_51:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v26 = v2[2];
  v25 = v2[3];
  if (v26 >= v25 >> 1)
    v2 = sub_1B1C64EC0(v25 > 1, v26 + 1, 1, v2);
  v2[2] = v26 + 1;
  v27 = &v2[14 * v26];
  *((_OWORD *)v27 + 2) = v9[132];
  *((_BYTE *)v27 + 48) = 0;
  v27[8] = 2;
  *(_OWORD *)(v27 + 9) = 0u;
  *(_OWORD *)(v27 + 11) = 0u;
  *(_OWORD *)(v27 + 13) = 0u;
  v27[15] = 0;
  *((_BYTE *)v27 + 128) = 14;
  if ((a1 & 0x80000) == 0)
  {
LABEL_19:
    if ((a1 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_61;
  }
LABEL_56:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v29 = v2[2];
  v28 = v2[3];
  if (v29 >= v28 >> 1)
    v2 = sub_1B1C64EC0(v28 > 1, v29 + 1, 1, v2);
  v2[2] = v29 + 1;
  v30 = &v2[14 * v29];
  *((_OWORD *)v30 + 2) = v9[132];
  *((_BYTE *)v30 + 48) = 0;
  v30[8] = 3;
  *(_OWORD *)(v30 + 9) = 0u;
  *(_OWORD *)(v30 + 11) = 0u;
  *(_OWORD *)(v30 + 13) = 0u;
  v30[15] = 0;
  *((_BYTE *)v30 + 128) = 14;
  if ((a1 & 0x100000) == 0)
  {
LABEL_20:
    if ((a1 & 0x200000) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_61:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v32 = v2[2];
  v31 = v2[3];
  if (v32 >= v31 >> 1)
    v2 = sub_1B1C64EC0(v31 > 1, v32 + 1, 1, v2);
  v2[2] = v32 + 1;
  v33 = &v2[14 * v32];
  *((_OWORD *)v33 + 2) = v9[132];
  *((_BYTE *)v33 + 48) = 0;
  v33[8] = 4;
  *(_OWORD *)(v33 + 9) = 0u;
  *(_OWORD *)(v33 + 11) = 0u;
  *(_OWORD *)(v33 + 13) = 0u;
  v33[15] = 0;
  *((_BYTE *)v33 + 128) = 14;
  if ((a1 & 0x200000) == 0)
  {
LABEL_21:
    if ((a1 & 0x400000) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_66:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v35 = v2[2];
  v34 = v2[3];
  if (v35 >= v34 >> 1)
    v2 = sub_1B1C64EC0(v34 > 1, v35 + 1, 1, v2);
  v2[2] = v35 + 1;
  v36 = &v2[14 * v35];
  *((_OWORD *)v36 + 2) = v9[132];
  *((_BYTE *)v36 + 48) = 0;
  v36[8] = 5;
  *(_OWORD *)(v36 + 9) = 0u;
  *(_OWORD *)(v36 + 11) = 0u;
  *(_OWORD *)(v36 + 13) = 0u;
  v36[15] = 0;
  *((_BYTE *)v36 + 128) = 14;
  if ((a1 & 0x400000) == 0)
  {
LABEL_22:
    if ((a1 & 0x800000) == 0)
      goto LABEL_23;
    goto LABEL_76;
  }
LABEL_71:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v38 = v2[2];
  v37 = v2[3];
  if (v38 >= v37 >> 1)
    v2 = sub_1B1C64EC0(v37 > 1, v38 + 1, 1, v2);
  v2[2] = v38 + 1;
  v39 = &v2[14 * v38];
  *((_OWORD *)v39 + 2) = v9[132];
  *((_BYTE *)v39 + 48) = 0;
  v39[8] = 6;
  *(_OWORD *)(v39 + 9) = 0u;
  *(_OWORD *)(v39 + 11) = 0u;
  *(_OWORD *)(v39 + 13) = 0u;
  v39[15] = 0;
  *((_BYTE *)v39 + 128) = 14;
  if ((a1 & 0x800000) == 0)
  {
LABEL_23:
    if ((a1 & 0x1000000) == 0)
      goto LABEL_24;
    goto LABEL_81;
  }
LABEL_76:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v41 = v2[2];
  v40 = v2[3];
  if (v41 >= v40 >> 1)
    v2 = sub_1B1C64EC0(v40 > 1, v41 + 1, 1, v2);
  v2[2] = v41 + 1;
  v42 = &v2[14 * v41];
  *((_OWORD *)v42 + 2) = v9[132];
  *((_BYTE *)v42 + 48) = 0;
  v42[8] = 7;
  *(_OWORD *)(v42 + 9) = 0u;
  *(_OWORD *)(v42 + 11) = 0u;
  *(_OWORD *)(v42 + 13) = 0u;
  v42[15] = 0;
  *((_BYTE *)v42 + 128) = 14;
  if ((a1 & 0x1000000) == 0)
  {
LABEL_24:
    if ((a1 & 0x4000000) == 0)
      return v2;
    goto LABEL_86;
  }
LABEL_81:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
  v44 = v2[2];
  v43 = v2[3];
  if (v44 >= v43 >> 1)
    v2 = sub_1B1C64EC0(v43 > 1, v44 + 1, 1, v2);
  v2[2] = v44 + 1;
  v45 = &v2[14 * v44];
  *((_OWORD *)v45 + 2) = v9[132];
  *((_BYTE *)v45 + 48) = 0;
  v45[8] = 8;
  *(_OWORD *)(v45 + 9) = 0u;
  *(_OWORD *)(v45 + 11) = 0u;
  *(_OWORD *)(v45 + 13) = 0u;
  v45[15] = 0;
  *((_BYTE *)v45 + 128) = 14;
  if ((a1 & 0x4000000) != 0)
  {
LABEL_86:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_1B1C64EC0(0, v2[2] + 1, 1, v2);
    v47 = v2[2];
    v46 = v2[3];
    if (v47 >= v46 >> 1)
      v2 = sub_1B1C64EC0(v46 > 1, v47 + 1, 1, v2);
    v2[2] = v47 + 1;
    v48 = &v2[14 * v47];
    *((_OWORD *)v48 + 2) = xmmword_1B22C8850;
    *((_BYTE *)v48 + 48) = 0;
    v48[8] = 1;
    *(_OWORD *)(v48 + 9) = 0u;
    *(_OWORD *)(v48 + 11) = 0u;
    *(_OWORD *)(v48 + 13) = 0u;
    v48[15] = 0;
    *((_BYTE *)v48 + 128) = 13;
  }
  return v2;
}

void sub_1B21644D0()
{
  dword_1ED4BF580 = 134175813;
}

uint64_t sub_1B21645D4()
{
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B1DC3544();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B2164678()
{
  sub_1B222A09C();
  sub_1B1DC3544();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A078();
}

uint64_t sub_1B2164700()
{
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B1DC3544();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A0C0();
}

BOOL sub_1B21647A0(int64x2_t *a1, int64x2_t *a2)
{
  int64x2_t v2;
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v9[6];
  int64x2_t v10[6];

  v2 = a1[3];
  v9[2] = a1[2];
  v9[3] = v2;
  v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  v4 = a1[1];
  v9[0] = *a1;
  v9[1] = v4;
  v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  v6 = a2[5];
  v10[4] = a2[4];
  v10[5] = v6;
  v7 = a2[1];
  v10[0] = *a2;
  v10[1] = v7;
  return sub_1B2164E9C(v9, v10);
}

unint64_t sub_1B21647FC()
{
  unint64_t result;

  result = qword_1ED4B7928;
  if (!qword_1ED4B7928)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8898, &type metadata for RenderVariantDescriptor);
    atomic_store(result, (unint64_t *)&qword_1ED4B7928);
  }
  return result;
}

unint64_t sub_1B2164844()
{
  unint64_t result;

  result = qword_1EEF64BE8;
  if (!qword_1EEF64BE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8930, &type metadata for RenderVariant);
    atomic_store(result, (unint64_t *)&qword_1EEF64BE8);
  }
  return result;
}

unint64_t sub_1B216488C()
{
  unint64_t result;

  result = qword_1EEF64BF0;
  if (!qword_1EEF64BF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8900, &type metadata for RenderVariant);
    atomic_store(result, (unint64_t *)&qword_1EEF64BF0);
  }
  return result;
}

unint64_t sub_1B21648D4()
{
  unint64_t result;

  result = qword_1EEF64BF8;
  if (!qword_1EEF64BF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8958, &type metadata for RenderVariant);
    atomic_store(result, (unint64_t *)&qword_1EEF64BF8);
  }
  return result;
}

unint64_t sub_1B216491C()
{
  unint64_t result;

  result = qword_1EEF64C00;
  if (!qword_1EEF64C00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8990, &type metadata for RenderVariant);
    atomic_store(result, (unint64_t *)&qword_1EEF64C00);
  }
  return result;
}

uint64_t sub_1B2164960(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1)
  {
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    if ((a1 & 1) != 0)
    {
      sub_1B2228890();
      if ((a1 & 2) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0)
          goto LABEL_5;
        goto LABEL_23;
      }
    }
    else if ((a1 & 2) == 0)
    {
      goto LABEL_4;
    }
    sub_1B2228890();
    if ((a1 & 4) == 0)
    {
LABEL_5:
      if ((a1 & 8) == 0)
        goto LABEL_6;
      goto LABEL_24;
    }
LABEL_23:
    sub_1B2228890();
    if ((a1 & 8) == 0)
    {
LABEL_6:
      if ((a1 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_25;
    }
LABEL_24:
    sub_1B2228890();
    if ((a1 & 0x20) == 0)
    {
LABEL_7:
      if ((a1 & 0x40) == 0)
        goto LABEL_8;
      goto LABEL_26;
    }
LABEL_25:
    sub_1B2228890();
    if ((a1 & 0x40) == 0)
    {
LABEL_8:
      if ((a1 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_27;
    }
LABEL_26:
    sub_1B2228890();
    if ((a1 & 0x400) == 0)
    {
LABEL_9:
      if ((a1 & 0x800) == 0)
        goto LABEL_10;
      goto LABEL_28;
    }
LABEL_27:
    sub_1B2228890();
    if ((a1 & 0x800) == 0)
    {
LABEL_10:
      if ((a1 & 0x1000) == 0)
        goto LABEL_11;
      goto LABEL_29;
    }
LABEL_28:
    sub_1B2228890();
    if ((a1 & 0x1000) == 0)
    {
LABEL_11:
      if ((a1 & 0x2000) == 0)
        goto LABEL_12;
      goto LABEL_30;
    }
LABEL_29:
    sub_1B2228890();
    if ((a1 & 0x2000) == 0)
    {
LABEL_12:
      if ((a1 & 0x4000) == 0)
        goto LABEL_13;
      goto LABEL_31;
    }
LABEL_30:
    sub_1B2228890();
    if ((a1 & 0x4000) == 0)
    {
LABEL_13:
      if ((a1 & 0x8000) == 0)
        goto LABEL_14;
      goto LABEL_32;
    }
LABEL_31:
    sub_1B2228890();
    if ((a1 & 0x8000) == 0)
    {
LABEL_14:
      if ((a1 & 0x2000000) == 0)
        goto LABEL_15;
      goto LABEL_33;
    }
LABEL_32:
    sub_1B2228890();
    if ((a1 & 0x2000000) == 0)
    {
LABEL_15:
      if ((a1 & 0x4000000) == 0)
        goto LABEL_16;
      goto LABEL_34;
    }
LABEL_33:
    sub_1B2228890();
    if ((a1 & 0x4000000) == 0)
    {
LABEL_16:
      if ((a1 & 0x8000000) == 0)
        goto LABEL_17;
      goto LABEL_35;
    }
LABEL_34:
    sub_1B2228890();
    if ((a1 & 0x8000000) == 0)
    {
LABEL_17:
      if ((a1 & 0x10000000) == 0)
      {
LABEL_19:
        sub_1B214E3E8();
        swift_bridgeObjectRelease();
        sub_1B222919C();
        sub_1B2229184();
        v2 = sub_1B22291C0();
        v4 = v3;
        v6 = v5;
        v8 = v7;
        swift_bridgeObjectRelease();
        v9 = MEMORY[0x1B5E20388](v2, v4, v6, v8);
        swift_bridgeObjectRelease();
        sub_1B2228890();
        return v9;
      }
LABEL_18:
      sub_1B2228890();
      goto LABEL_19;
    }
LABEL_35:
    sub_1B2228890();
    if ((a1 & 0x10000000) == 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  return 23899;
}

uint64_t sub_1B2164D68()
{
  int *v0;

  return sub_1B2164960(*v0);
}

uint64_t sub_1B2164D70()
{
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B22295EC();
  return 0;
}

uint64_t sub_1B2164E74(int a1)
{
  return a1 | 0x20u;
}

uint64_t sub_1B2164E7C(int a1)
{
  return a1 | 0x10u;
}

uint64_t sub_1B2164E84(int a1)
{
  return a1 | 8u;
}

uint64_t sub_1B2164E8C(int a1)
{
  return a1 | 2u;
}

uint64_t sub_1B2164E94(int a1)
{
  return a1 | 4u;
}

BOOL sub_1B2164E9C(int64x2_t *a1, int64x2_t *a2)
{
  return a1->i32[0] == a2->i32[0]
      && a1->i64[1] == a2->i64[1]
      && (vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(a1[1], a2[1]), (int32x4_t)vceqq_s64(a1[2], a2[2])), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(a1[3], a2[3]), (int32x4_t)vceqq_s64(a1[4], a2[4])))), 7uLL))) & 1) != 0&& a1[5].i64[0] == a2[5].i64[0]&& a1[5].i64[1] == a2[5].i64[1];
}

ValueMetadata *type metadata accessor for RenderPass()
{
  return &type metadata for RenderPass;
}

ValueMetadata *type metadata accessor for RenderPass.Dimension()
{
  return &type metadata for RenderPass.Dimension;
}

double sub_1B2164F54@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float32x4_t v14;
  double result;
  uint64_t v16[12];
  _BYTE v17[80];
  float32x4_t v18[3];
  float32x4_t v19[3];
  char v20;
  _OWORD v21[5];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  uint64_t v30;

  if (qword_1ED4B8608 != -1)
    swift_once();
  v29[0] = xmmword_1ED4D0B58;
  v29[1] = unk_1ED4D0B68;
  v30 = qword_1ED4D0B78;
  sub_1B1E8FCE4(v1, (uint64_t)v29, 0x200000000, v16);
  sub_1B19F66A0((uint64_t)v16, (uint64_t)v21, (unint64_t *)&qword_1ED4B7DE0);
  v3 = (float32x4_t)xmmword_1B2244DB0;
  v4 = (float32x4_t)xmmword_1B2244DD0;
  v5 = (float32x4_t)xmmword_1B2244D90;
  v6 = 1.0;
  if (*(_QWORD *)&v21[0])
  {
    v25 = v21[2];
    v26 = v21[3];
    v27 = v21[4];
    v28 = v22;
    v23 = v21[0];
    v24 = v21[1];
    if ((_QWORD)v22)
    {
      sub_1B1BEC018(0);
      v8 = v7;
      swift_retain();
      v9 = (_QWORD *)sub_1B1A101F0(v8);
      swift_release();
      sub_1B19ED748(v16);
      v10 = sub_1B1D18AC8((uint64_t)v9);
      if ((v10 & 0x100000000) != 0)
        v6 = 1.0;
      else
        v6 = *(float *)&v10;
      sub_1B1D15764(v9, (uint64_t)v17);
      sub_1B19F66A0((uint64_t)v17, (uint64_t)v19, qword_1ED4B8BB0);
      if ((v20 & 1) == 0)
      {
        sub_1B1C2F9CC(v18, v19[0], v19[1], v19[2]);
        v3 = v18[0];
        v4 = v18[1];
        v5 = v18[2];
        goto LABEL_14;
      }
      v11 = sub_1B1D15930((unint64_t)v9);
      if ((v13 & 1) == 0)
      {
        v14.i64[0] = v11;
        v14.i64[1] = v12;
        *(__n64 *)v3.f32 = sub_1B200B468(v14);
        goto LABEL_14;
      }
    }
    else
    {
      sub_1B19ED748(v16);
    }
    v4 = (float32x4_t)xmmword_1B2244DD0;
    v3 = (float32x4_t)xmmword_1B2244DB0;
    v5 = (float32x4_t)xmmword_1B2244D90;
  }
LABEL_14:
  *(float32x4_t *)a1 = v3;
  *(float32x4_t *)(a1 + 16) = v4;
  *(float32x4_t *)(a1 + 32) = v5;
  *(float *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 52) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  return result;
}

uint64_t sub_1B216516C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15[12];
  _OWORD v16[12];
  _OWORD v17[2];
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v1)
    return 0;
  v2 = v0;
  v3 = qword_1ED4B85C0;
  swift_retain();
  if (v3 != -1)
    swift_once();
  v17[0] = xmmword_1ED4D0AE8;
  v17[1] = unk_1ED4D0AF8;
  v18 = qword_1ED4D0B08;
  sub_1B1E8FCE4(v2, (uint64_t)v17, 0x200000000, v15);
  sub_1B19F66A0((uint64_t)v15, (uint64_t)v16, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v16[0])
  {
    v16[8] = v16[2];
    v16[9] = v16[3];
    v16[10] = v16[4];
    v16[11] = v16[5];
    v16[6] = v16[0];
    v16[7] = v16[1];
    sub_1B1BEC018(0);
    v5 = (unint64_t *)(sub_1B1A11FDC((uint64_t)&type metadata for IBLRuntime) + 16 * v4);
    v6 = v5[1];
    if (!sub_1B20F26A4(*v5, &v14))
    {
      v10 = *(_QWORD *)(v1 + 240);
      swift_retain();
      sub_1B1FAE50C(0xD000000000000012, 0x80000001B2331EA0, v10, v1);
      swift_release();
    }
    v11 = sub_1B20F26A4(v6, &v14);
    if (v11)
    {
      v7 = v11;
    }
    else
    {
      v12 = *(_QWORD *)(v1 + 240);
      swift_retain();
      v7 = (uint64_t)sub_1B1FAE518(0xD000000000000014, 0x80000001B2331D30, v12, v1);
      swift_release();
    }
    sub_1B19ED748(v15);
    swift_release();
  }
  else
  {
    v8 = *(_QWORD *)(v1 + 240);
    swift_retain();
    v7 = (uint64_t)sub_1B1FAE524(0xD000000000000017, 0x80000001B23408C0, v8, v1);
    swift_release();
    v9 = *(_QWORD *)(v1 + 240);
    swift_retain();
    sub_1B1FAE524(0xD000000000000017, 0x80000001B23408C0, v9, v1);
    swift_release_n();
  }
  return v7;
}

uint64_t sub_1B21653EC()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B2165440()
{
  return sub_1B2228824();
}

uint64_t sub_1B216545C()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B21654AC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B21654FC(_QWORD *a1@<X8>)
{
  *a1 = 0x7469736E65746E69;
  a1[1] = 0xE900000000000079;
}

uint64_t sub_1B216551C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B2165570()
{
  sub_1B216713C();
  return sub_1B222A1D4();
}

uint64_t sub_1B2165598()
{
  sub_1B216713C();
  return sub_1B222A1E0();
}

void sub_1B21655C0(_QWORD *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  float v4;

  v4 = sub_1B2166FEC(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_1B21655E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF64C18, (uint64_t (*)(void))sub_1B216713C, (uint64_t)&type metadata for IBLGenerator.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B216713C();
  sub_1B222A180();
  sub_1B2229934();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B21656F0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v13 = a3;
  sub_1B19F8E54(0, &qword_1EEF64C30, (uint64_t (*)(void))sub_1B2167180, (uint64_t)&type metadata for IBLRuntime.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2167180();
  sub_1B222A180();
  v15 = a2;
  v14 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v3)
  {
    v15 = v13;
    v14 = 1;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B2165854(char *a1, char *a2)
{
  return sub_1B1F8DA98(*a1, *a2);
}

uint64_t sub_1B2165860()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E61696461727269;
  else
    return 0x65636E6169646172;
}

uint64_t sub_1B21658A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B21666FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B21658C4()
{
  sub_1B2167180();
  return sub_1B222A1D4();
}

uint64_t sub_1B21658EC()
{
  sub_1B2167180();
  return sub_1B222A1E0();
}

uint64_t sub_1B2165914@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B2166E4C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B2165948(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B21656F0(a1, *v1, v1[1]);
}

uint64_t sub_1B2165960(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B2165A28(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5[12];
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v2 = *(uint64_t *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2 && (*(_BYTE *)(v2 + 537) & 1) == 0)
  {
    v3 = (uint64_t)result;
    v4 = *(_OWORD *)(v1 + 32);
    v28[0] = *(_OWORD *)(v1 + 16);
    v28[1] = v4;
    v29 = *(_QWORD *)(v1 + 48);
    swift_retain();
    sub_1B1E8FCE4(v3, (uint64_t)v28, 0x200000000, v5);
    sub_1B19F66A0((uint64_t)v5, (uint64_t)&v6, (unint64_t *)&qword_1ED4B7DE0);
    if (v6)
    {
      v17 = v6;
      v18 = v7;
      v19 = v8;
      v20 = v9;
      v21 = v10;
      v22 = v11;
      v23 = v12;
      v24 = v13;
      v25 = v14;
      v26 = v15;
      v27 = v16;
      swift_retain();
      swift_retain();
      sub_1B21A1438((uint64_t)&v17, v3, v2);
      swift_release();
      swift_release_n();
      return sub_1B19ED748(v5);
    }
    else
    {
      return (uint64_t *)swift_release();
    }
  }
  return result;
}

void sub_1B2165B64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  int v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  LODWORD(v57) = 256;
  swift_getObjectType();
  if ((sub_1B1F9FB98() & 1) != 0)
  {
    sub_1B222A0CC();
    sub_1B2228824();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    v55 = v50;
    v56 = v51;
    v53 = v48;
    v54 = v49;
    v52 = v47;
    v8 = sub_1B222A0B4();
    v62 = 0xD000000000000022;
    v63 = 0x80000001B234EB00;
    v64 = 0;
    v65 = 0;
    v66 = MEMORY[0x1E0DEE9D8];
    v67 = 0;
    v68 = v8;
    v9 = sub_1B1B3947C((uint64_t)&v62, 0, 0);
    v11 = v10;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (!v9)
      return;
    swift_getObjectType();
    objc_msgSend(a1, sel_setBytes_length_atIndex_, &v57, 4, 0);
    v12 = a3;
    objc_msgSend(a1, sel_setTexture_atIndex_, a3, 0);
    objc_msgSend(a1, sel_setTexture_atIndex_, a4, 1);
    sub_1B1F411DC(v9, a4, 0);
  }
  else
  {
    sub_1B222A0CC();
    sub_1B2228824();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    v55 = v50;
    v56 = v51;
    v53 = v48;
    v54 = v49;
    v52 = v47;
    v23 = sub_1B222A0B4();
    v62 = 0xD00000000000002ELL;
    v63 = 0x80000001B234EA70;
    v64 = 0;
    v65 = 0;
    v66 = MEMORY[0x1E0DEE9D8];
    v67 = 0;
    v68 = v23;
    v24 = sub_1B1B3947C((uint64_t)&v62, 0, 0);
    v26 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (!v24)
      return;
    swift_getObjectType();
    objc_msgSend(a1, sel_setBytes_length_atIndex_, &v57, 4, 0);
    objc_msgSend(a1, sel_setTexture_atIndex_, a3, 0);
    swift_getObjectType();
    v27 = sub_1B1F9CD08();
    if (!v27)
      goto LABEL_31;
    objc_msgSend(a1, sel_setTexture_atIndex_, v27, 1);
    swift_unknownObjectRelease();
    v28 = sub_1B1F9CD08();
    if (!v28)
      goto LABEL_31;
    objc_msgSend(a1, sel_setTexture_atIndex_, v28, 2);
    swift_unknownObjectRelease();
    v29 = sub_1B1F9CD08();
    if (!v29)
      goto LABEL_31;
    objc_msgSend(a1, sel_setTexture_atIndex_, v29, 3);
    swift_unknownObjectRelease();
    v30 = sub_1B1F9CD08();
    if (!v30)
      goto LABEL_31;
    objc_msgSend(a1, sel_setTexture_atIndex_, v30, 4);
    swift_unknownObjectRelease();
    v31 = sub_1B1F9CD08();
    if (!v31)
      goto LABEL_31;
    objc_msgSend(a1, sel_setTexture_atIndex_, v31, 5);
    swift_unknownObjectRelease();
    v32 = sub_1B1F9CD08();
    if (!v32)
      goto LABEL_31;
    objc_msgSend(a1, sel_setTexture_atIndex_, v32, 6);
    swift_unknownObjectRelease();
    sub_1B1F411DC(v24, a4, 0);
    v12 = a3;
  }
  swift_unknownObjectRelease();
  swift_getObjectType();
  objc_msgSend(a1, sel_setTexture_atIndex_, v12, 0);
  if ((sub_1B1F9FB98() & 1) != 0)
  {
    sub_1B222A0CC();
    sub_1B2228824();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    v49 = v59;
    v50 = v60;
    v51 = v61;
    v47 = v57;
    v48 = v58;
    v13 = sub_1B222A0B4();
    *(_QWORD *)&v57 = 0xD000000000000023;
    *((_QWORD *)&v57 + 1) = 0x80000001B234EAD0;
    v58 = 0uLL;
    v59 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v60 = v13;
    v14 = sub_1B1B3947C((uint64_t)&v57, 0, 0);
    v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (!v14)
      return;
    swift_getObjectType();
    v17 = objc_msgSend(a5, sel_mipmapLevelCount);
    if (v17)
    {
      v18 = v17;
      v19 = 0;
      do
      {
        objc_msgSend(a5, sel_pixelFormat);
        v20 = sub_1B2228E60();
        if (!v20)
          break;
        v21 = v20;
        objc_msgSend(a1, sel_setTexture_atIndex_, v20, 1);
        v22 = v19;
        if (v19 == 0x100000000)
          goto LABEL_33;
        v45 = v19;
        v46 = 256;
        objc_msgSend(a1, sel_setBytes_length_atIndex_, &v45, 8, 0);
        sub_1B1F411DC(v14, v21, 0);
        swift_unknownObjectRelease();
        ++v19;
      }
      while ((id)(v22 + 1) != v18);
    }
LABEL_31:
    swift_unknownObjectRelease();
    return;
  }
  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v49 = v59;
  v50 = v60;
  v51 = v61;
  v47 = v57;
  v48 = v58;
  v33 = sub_1B222A0B4();
  *(_QWORD *)&v57 = 0xD00000000000002FLL;
  *((_QWORD *)&v57 + 1) = 0x80000001B234EAA0;
  v58 = 0uLL;
  v59 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v60 = v33;
  v34 = sub_1B1B3947C((uint64_t)&v57, 0, 0);
  v36 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (!v34)
    return;
  swift_getObjectType();
  v43 = objc_msgSend(a5, sel_mipmapLevelCount);
  if (!v43)
    goto LABEL_31;
  v37 = 0;
  while (1)
  {
    v38 = 0;
    v39 = (id)(v37 + 1);
    v40 = 1;
    while (1)
    {
      objc_msgSend(a5, sel_pixelFormat);
      v41 = sub_1B2228E60();
      if (!v41)
        break;
      v42 = v41;
      swift_unknownObjectRetain();
      objc_msgSend(a1, sel_setTexture_atIndex_, v42, v40);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      ++v40;
      v38 = v42;
      if (v40 == 7)
        goto LABEL_29;
    }
    v42 = v38;
LABEL_29:
    if (v37 == 0x100000000)
      break;
    v45 = v37;
    v46 = 256;
    objc_msgSend(a1, sel_setBytes_length_atIndex_, &v45, 8, 0);
    swift_unknownObjectRetain();
    sub_1B1F411DC(v34, v42, 0);
    swift_unknownObjectRelease_n();
    ++v37;
    if (v39 == v43)
      goto LABEL_31;
  }
LABEL_33:
  sub_1B222967C();
  __break(1u);
}

uint64_t type metadata accessor for IBLGeneratorSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for IBLGenerator()
{
  return &type metadata for IBLGenerator;
}

ValueMetadata *type metadata accessor for IBLRuntime()
{
  return &type metadata for IBLRuntime;
}

uint64_t sub_1B2166448()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v11 = qword_1ED4D09F8;
  v12 = 0;
  v13 = 2;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  swift_retain();
  sub_1B1B12A30(1, 1, (uint64_t)&v6);
  swift_release();
  v1 = v7;
  v2 = v8;
  v3 = v10;
  v4 = v9 | 4;
  *(_QWORD *)(v0 + 16) = v6;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  return v0;
}

const char *sub_1B2166528()
{
  return "IBLGenerator";
}

uint64_t sub_1B2166540()
{
  uint64_t v0;
  uint64_t inited;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v0 = qword_1ED4D09F8;
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for IBLRuntime;
  *(_QWORD *)(inited + 40) = &off_1E636DF70;
  v5 = v0;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1B0FA64(inited, (uint64_t)v3);
  swift_setDeallocating();
  xmmword_1ED4D0AE8 = v3[0];
  unk_1ED4D0AF8 = v3[1];
  qword_1ED4D0B08 = v4;
  return swift_release();
}

double sub_1B2166658()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1E412D4(1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1ED4D0B58 = v1[0];
  unk_1ED4D0B68 = v1[1];
  qword_1ED4D0B78 = v2;
  return result;
}

uint64_t sub_1B21666FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65636E6169646172 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E61696461727269 && a2 == 0xEA00000000006563)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void *sub_1B21667F8(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  void *v16;
  int v17;
  double Default;
  char v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  int8x8_t v28;
  uint64_t v29;
  char v30;
  char v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int16x8_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int16x8_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int32 v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int32 v75;

  sub_1B1DA4B24(a5[1]);
  a5[1] = 0xFFFFFFFFLL;
  sub_1B1DA4B24(*a5);
  *a5 = 0xFFFFFFFFLL;
  v11 = *a3;
  v12 = a3[1];
  swift_retain();
  v13 = sub_1B1A101F0(a2);
  swift_release();
  if ((_DWORD)v11 != (_DWORD)v13 || (_DWORD)v12 != HIDWORD(v13))
    sub_1B1BF79EC(v13, v11 | (v12 << 32));
  result = (void *)sub_1B20F26A4(v11 | (v12 << 32), &v68);
  if (result)
  {
    v16 = result;
    if (objc_msgSend(result, sel_textureType) == (id)5)
    {
      if (objc_msgSend(v16, sel_mipmapLevelCount) == (id)1)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        swift_retain();
        v17 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v68 = 0;
        swift_retain();
        sub_1B1F1AD70(v17, &v68, 0xD00000000000001FLL, 0x80000001B234EA50);
        swift_release();
        swift_release();
      }
      Default = RGTextureDescriptorMakeDefault((uint64_t)&v68);
      v19 = BYTE2(v69);
      v20 = v72;
      v53 = v74;
      v55 = v73;
      LODWORD(Default) = v75;
      v51 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&Default);
      v68 = 0;
      v69 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v68 = 0xD000000000000016;
      v69 = 0x80000001B234EA10;
      v21 = objc_msgSend(v16, sel_label);
      if (v21)
      {
        v22 = v21;
        sub_1B222874C();

      }
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v23 = v68;
      v24 = v69;
      v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
      v68 = 0x1000100800080;
      LOWORD(v69) = 257;
      BYTE2(v69) = v19;
      v70 = xmmword_1B22C8B40;
      v71 = xmmword_1B2294DB0;
      v72 = v20;
      v73 = v55;
      v74 = v53;
      v75 = vmovn_s16(v51).u32[0];
      RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v68, v25);
      v26 = sub_1B1F328F4(v25, v23, v24);
      swift_bridgeObjectRelease();

      v27 = objc_msgSend(v16, sel_width);
      v28 = sub_1B210B50C(5, 115, (uint64_t)v27, (uint64_t)v27, 1, 1, 1, 1, (uint64_t)&v68, 1, 2, 3);
      v29 = v68;
      v30 = v69;
      v31 = BYTE1(v69);
      v56 = BYTE2(v69);
      v54 = v70;
      v50 = v71;
      v52 = *((_QWORD *)&v70 + 1);
      v48 = v72;
      v49 = *((_QWORD *)&v71 + 1);
      v46 = v74;
      v47 = v73;
      v28.i32[0] = v75;
      v45 = (int16x8_t)vmovl_u8((uint8x8_t)v28);
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v58 = 0xD000000000000017;
      v59 = 0x80000001B234EA30;
      v32 = objc_msgSend(v16, sel_label);
      if (v32)
      {
        v33 = v32;
        sub_1B222874C();

      }
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v34 = v58;
      v35 = v59;
      v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
      v58 = v29;
      LOBYTE(v59) = v30;
      BYTE1(v59) = v31;
      BYTE2(v59) = v56;
      v60 = v54;
      v61 = v52;
      v62 = v50;
      v63 = v49;
      v64 = v48;
      v65 = v47;
      v66 = v46;
      v67 = vmovn_s16(v45).u32[0];
      RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v58, v36);
      v37 = sub_1B1F328F4(v36, v34, v35);
      swift_bridgeObjectRelease();

      v38 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
      v39 = (void *)sub_1B2228728();
      objc_msgSend(v38, sel_pushDebugGroup_, v39);

      sub_1B2165B64(v38, a7, (uint64_t)v16, (uint64_t)v26, v37);
      objc_msgSend(v38, sel_popDebugGroup);
      swift_unknownObjectRelease();
      v40 = *(uint64_t **)(a6 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      v41 = *v40;
      swift_unknownObjectRetain();
      LOBYTE(v58) = 1;
      v42 = sub_1B2181C58(0x100000000uLL, v41, (uint64_t)v26);
      swift_unknownObjectRelease();
      a5[1] = v42;
      v43 = *v40;
      swift_unknownObjectRetain();
      LOBYTE(v58) = 1;
      v44 = sub_1B2181C58(0x100000000uLL, v43, (uint64_t)v37);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      result = (void *)swift_unknownObjectRelease_n();
      *a5 = v44;
    }
    else
    {
      return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B2166E4C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_1B19F8E54(0, &qword_1EEF64C20, (uint64_t (*)(void))sub_1B2167180, (uint64_t)&type metadata for IBLRuntime.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B2167180();
  sub_1B222A150();
  if (!v1)
  {
    v12 = 0;
    sub_1B1A08878();
    sub_1B2229814();
    v9 = v13;
    v12 = 1;
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

float sub_1B2166FEC(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;

  sub_1B19F8E54(0, &qword_1EEF64C08, (uint64_t (*)(void))sub_1B216713C, (uint64_t)&type metadata for IBLGenerator.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B216713C();
  sub_1B222A150();
  if (!v1)
  {
    v11 = sub_1B222979C();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if ((v11 & 0x100000000) != 0)
      v2 = 1.0;
    else
      v2 = *(float *)&v11;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B216713C()
{
  unint64_t result;

  result = qword_1EEF64C10;
  if (!qword_1EEF64C10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8ED0, &type metadata for IBLGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64C10);
  }
  return result;
}

unint64_t sub_1B2167180()
{
  unint64_t result;

  result = qword_1EEF64C28;
  if (!qword_1EEF64C28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8E80, &type metadata for IBLRuntime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64C28);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IBLRuntime.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B2167210 + 4 * byte_1B22C8B65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B2167244 + 4 * byte_1B22C8B60[v4]))();
}

uint64_t sub_1B2167244(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B216724C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B2167254);
  return result;
}

uint64_t sub_1B2167260(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B2167268);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B216726C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B2167274(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IBLRuntime.CodingKeys()
{
  return &type metadata for IBLRuntime.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IBLGenerator.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B21672D0 + 4 * byte_1B22C8B6A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B21672F0 + 4 * byte_1B22C8B6F[v4]))();
}

_BYTE *sub_1B21672D0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B21672F0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B21672F8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2167300(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B2167308(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B2167310(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IBLGenerator.CodingKeys()
{
  return &type metadata for IBLGenerator.CodingKeys;
}

unint64_t sub_1B2167330()
{
  unint64_t result;

  result = qword_1EEF64C38;
  if (!qword_1EEF64C38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8DA0, &type metadata for IBLGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64C38);
  }
  return result;
}

unint64_t sub_1B2167378()
{
  unint64_t result;

  result = qword_1EEF64C40;
  if (!qword_1EEF64C40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8E58, &type metadata for IBLRuntime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64C40);
  }
  return result;
}

unint64_t sub_1B21673C0()
{
  unint64_t result;

  result = qword_1EEF64C48;
  if (!qword_1EEF64C48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8DC8, &type metadata for IBLRuntime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64C48);
  }
  return result;
}

unint64_t sub_1B2167408()
{
  unint64_t result;

  result = qword_1EEF64C50;
  if (!qword_1EEF64C50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8DF0, &type metadata for IBLRuntime.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64C50);
  }
  return result;
}

unint64_t sub_1B2167450()
{
  unint64_t result;

  result = qword_1EEF64C58;
  if (!qword_1EEF64C58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8CD8, &type metadata for IBLGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64C58);
  }
  return result;
}

unint64_t sub_1B2167498()
{
  unint64_t result;

  result = qword_1EEF64C60;
  if (!qword_1EEF64C60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22C8D00, &type metadata for IBLGenerator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF64C60);
  }
  return result;
}

_QWORD *sub_1B21674DC(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _UNKNOWN **v15;
  char v16;

  v5 = result;
  v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for ScriptsHolder, (uint64_t)&off_1E637D188, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF78B8(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a3;
      v10[1] = v6;
      v11 = v7;
      sub_1B1C1FE78(0, qword_1EEF64C98, (uint64_t)&type metadata for ScriptsHolder, (uint64_t)&off_1E637D158);
      v14 = v9;
      v15 = &off_1E6383838;
      v12 = a2;
      v13 = !v8;
      v16 = 12;
      swift_bridgeObjectRetain();
      sub_1B1E2DB30((uint64_t)v10);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v10);
    }
  }
  return result;
}

_QWORD *sub_1B2167624(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _UNKNOWN **v15;
  char v16;

  v5 = result;
  v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for Children, (uint64_t)&off_1E63BEDD0, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF78C4(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a3;
      v10[1] = v6;
      v11 = v7;
      sub_1B1C1FE78(0, &qword_1EEF5C4A8, (uint64_t)&type metadata for Children, (uint64_t)&off_1E63BED58);
      v14 = v9;
      v15 = &off_1E6383838;
      v12 = a2;
      v13 = !v8;
      v16 = 12;
      swift_bridgeObjectRetain();
      sub_1B1E2DB30((uint64_t)v10);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v10);
    }
  }
  return result;
}

_QWORD *sub_1B216776C(_QWORD *result, __int128 *a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _DWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _UNKNOWN **v16;
  char v17;

  v5 = result;
  v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1E638EE48, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF83B8(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v12[0] = a3;
      v12[1] = v6;
      v13 = v7;
      sub_1B1C1FE78(0, &qword_1EEF614E0, (uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1E638EDD0);
      v15 = v9;
      v16 = &off_1E6383838;
      v10 = swift_allocObject();
      v14 = v10;
      v11 = a2[1];
      *(_OWORD *)(v10 + 16) = *a2;
      *(_OWORD *)(v10 + 32) = v11;
      *(_OWORD *)(v10 + 48) = a2[2];
      *(_BYTE *)(v10 + 64) = !v8;
      v17 = 12;
      sub_1B1E2DB30((uint64_t)v12);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v12);
    }
  }
  return result;
}

_QWORD *sub_1B21678D0(_QWORD *result, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __n128 *v12;
  _DWORD v17[2];
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  char v22;

  v7 = result;
  v8 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v9 = *result;
    swift_unownedRetainStrong();
    v10 = sub_1B1FD568C((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA9D8, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF89C8(a2, a3, a4, a5, a6);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v7 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v17[0] = a2;
      v17[1] = v8;
      v18 = v9;
      sub_1B1C1FE78(0, &qword_1EEF64C90, (uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960);
      v20 = v11;
      v21 = &off_1E6383838;
      v12 = (__n128 *)swift_allocObject();
      v19 = v12;
      v12[1] = a3;
      v12[2] = a4;
      v12[3] = a5;
      v12[4] = a6;
      v12[5].n128_u8[0] = !v10;
      v22 = 12;
      sub_1B1E2DB30((uint64_t)v17);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v17);
    }
  }
  return result;
}

uint64_t VFXCoreCameraProjectionDirection.init(rawValue:)(unsigned __int8 a1)
{
  unsigned __int8 v1;
  int v2;

  v1 = a1;
  if (a1)
  {
    if (a1 == 1)
      v1 = a1;
    else
      v1 = 0;
    v2 = a1 != 1;
  }
  else
  {
    v2 = 0;
  }
  return v1 | (v2 << 8);
}

void *static VFXCoreCameraProjectionDirection.allCases.getter()
{
  return &unk_1E63B70B0;
}

char *sub_1B2167A88@<X0>(char *result@<X0>, char *a2@<X8>)
{
  int v2;
  char v3;
  BOOL v4;
  BOOL v5;
  char v6;
  BOOL v7;

  v2 = *result;
  if (*result)
    v3 = 0;
  else
    v3 = *result;
  v4 = v2 != 0;
  v5 = v2 == 1;
  if (v2 == 1)
    v6 = 1;
  else
    v6 = v3;
  v7 = !v5 && v4;
  *a2 = v6;
  a2[1] = v7;
  return result;
}

void sub_1B2167AB8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63B70D8;
}

uint64_t sub_1B2167AC8()
{
  sub_1B216B334();
  return sub_1B2228A70();
}

uint64_t sub_1B2167B24()
{
  sub_1B216B334();
  return sub_1B22289F8();
}

BOOL sub_1B2167B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char *v11;
  _BYTE v12[24];
  uint64_t v13;

  swift_getObjectType();
  sub_1B1A0DCD4(a1, (uint64_t)v12);
  if (!v13)
  {
    sub_1B1A0DD70((uint64_t)v12);
    return 0;
  }
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v3 = v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  v4 = &v11[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  if (*(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance) != *(_DWORD *)&v11[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance])
  {

    return 0;
  }
  v5 = *((_QWORD *)v4 + 1);
  v6 = *(_QWORD *)(v3 + 8);
  v7 = *((_DWORD *)v4 + 1);
  v8 = *(_DWORD *)(v3 + 4);

  return v8 == v7 && v6 == v5;
}

uint64_t sub_1B2167D50()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v2 = v0;
  sub_1B1DAFC84(v1, v2);
  v4 = v3;
  swift_release();

  return v4;
}

uint64_t sub_1B2167DC4@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v5 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if ((_DWORD)v4 == -1)
  {
    if (!v3)
    {
LABEL_12:
      v11 = 0;
      v10 = 0;
      goto LABEL_13;
    }
    swift_retain();
LABEL_11:
    result = swift_release();
    goto LABEL_12;
  }
  v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v4 & 0x80000000) != 0)
    goto LABEL_11;
  if (*(_QWORD *)(v5 + v6 + 8) <= v4)
    goto LABEL_11;
  v7 = *(_QWORD *)(v5 + v6);
  if (v3 != -1 && *(_DWORD *)(v7 + 12 * (int)v4 + 8) != v3)
    goto LABEL_11;
  v8 = sub_1B1D1EAC8(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 16, v5);
  v10 = v9;
  result = swift_release();
  if (v10)
    v11 = v8;
  else
    v11 = 0;
LABEL_13:
  *a2 = v11;
  a2[1] = v10;
  return result;
}

uint64_t sub_1B2167ED4()
{
  return sub_1B216A96C((uint64_t (*)(uint64_t, char *))sub_1B1DAF104);
}

uint64_t sub_1B2167F50(char a1)
{
  char *v1;
  uint64_t v3;

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  sub_1B1DA406C(v3, a1, v1);
  return swift_release();
}

void sub_1B2167FB0(void **a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *a1;
  v4 = *(_QWORD *)((char *)*a1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  v5 = v3;
  LOBYTE(v3) = sub_1B1DAF104(v4, v5);
  swift_release();

  *a2 = v3 & 1;
}

uint64_t sub_1B2168028(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)((char *)*a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  sub_1B1DA406C(v4, v2, v3);
  return swift_release();
}

uint64_t sub_1B216808C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  ValueMetadata *v20;
  _UNKNOWN **v21;
  _QWORD v22[2];
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int16 v27;
  uint64_t v28;

  v2 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v3 = *(unsigned int *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  v6 = v2 == 0xFFFFFFFFLL && v3 == 0;
  if ((result & 1) != 0)
  {
    if (!v6)
    {
      v7 = v2 | (v3 << 32);
      swift_retain();
      v8 = sub_1B1FD568C((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1E6393C48, v7);
      result = swift_release();
      if (!v8)
      {
        LODWORD(v25) = 1065353216;
        BYTE4(v25) = 0;
        *((_QWORD *)&v25 + 1) = 0x461C40003DCCCCCDLL;
        LOBYTE(v26) = 1;
        v9 = swift_retain();
        MEMORY[0x1E0C80A78](v9, v10);
        sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1F55DAC);
        swift_release();
        swift_retain();
        v11 = sub_1B1FD568C((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1E638EE48, v2 | (v3 << 32));
        result = swift_release();
        if (v11)
        {
          v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
          swift_retain();
          if (v12)
          {
            v13 = *(_BYTE *)(v12 + 80);
            MEMORY[0x1B5E240CC](v12 + 48);
            v12 = *(_QWORD *)(v12 + 56);
          }
          else
          {
            v13 = 0;
          }
          swift_unknownObjectUnownedInit();
          v22[0] = v4;
          v23 = v12;
          swift_unknownObjectUnownedAssign();
          swift_unownedRetain();
          swift_unknownObjectRelease();
          v24 = v13;
          sub_1B1A02530((uint64_t)v22, (uint64_t)&v25);
          v20 = &type metadata for PerspectiveCamera;
          v21 = &off_1E638EDD0;
LABEL_22:
          sub_1B1E2D290((uint64_t)v20, (uint64_t)v21, v7);
          sub_1B1A0256C((uint64_t)&v25);
          sub_1B1E31340(1);
          return swift_release();
        }
      }
    }
  }
  else if (!v6)
  {
    v7 = v2 | (v3 << 32);
    swift_retain();
    v14 = sub_1B1FD568C((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1E638EE48, v7);
    result = swift_release();
    if (!v14)
    {
      v25 = xmmword_1B22BEC70;
      v26 = xmmword_1B22BEC80;
      v27 = 1;
      v28 = 0;
      v15 = swift_retain();
      MEMORY[0x1E0C80A78](v15, v16);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216B388);
      swift_release();
      swift_retain();
      v17 = sub_1B1FD568C((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1E6393C48, v2 | (v3 << 32));
      result = swift_release();
      if (v17)
      {
        v18 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        swift_retain();
        if (v18)
        {
          v19 = *(_BYTE *)(v18 + 80);
          MEMORY[0x1B5E240CC](v18 + 48);
          v18 = *(_QWORD *)(v18 + 56);
        }
        else
        {
          v19 = 0;
        }
        swift_unknownObjectUnownedInit();
        v22[0] = v4;
        v23 = v18;
        swift_unknownObjectUnownedAssign();
        swift_unownedRetain();
        swift_unknownObjectRelease();
        v24 = v19;
        sub_1B1A02530((uint64_t)v22, (uint64_t)&v25);
        v20 = &type metadata for OrthographicCamera;
        v21 = &off_1E6393BD0;
        goto LABEL_22;
      }
    }
  }
  return result;
}

uint64_t (*sub_1B2168418(uint64_t a1))(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  char *v4;
  char v5;

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain();
  v4 = v1;
  v5 = sub_1B1DAF104(v3, v4);
  *(_QWORD *)(a1 + 16) = 0;

  swift_release();
  *(_BYTE *)(a1 + 24) = v5 & 1;
  return sub_1B21684A8;
}

uint64_t sub_1B21684A8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  char v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(void **)a1;
  v3 = *(_BYTE *)(a1 + 24);
  swift_retain();
  sub_1B1DA406C(v1, v3, v2);
  return swift_release();
}

double sub_1B2168508()
{
  double result;

  *(_QWORD *)&result = sub_1B2169D0C((double (*)(uint64_t, char *))sub_1B1DB1340).n128_u64[0];
  return result;
}

void sub_1B2168560(simd_float4x4 a1)
{
  uint64_t v1;
  BOOL v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  simd_float4x4 v8;

  v2 = *(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance) == -1
    && *(_DWORD *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4) == 0;
  v3 = v2;
  if (!v2)
  {
    v8 = a1;
    v4 = swift_retain();
    MEMORY[0x1E0C80A78](v4, v5);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED814);
    swift_release();
    a1 = v8;
  }
  __invert_f4(a1);
  if (!v3)
  {
    v6 = swift_retain();
    MEMORY[0x1E0C80A78](v6, v7);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED830);
    swift_release();
  }
}

uint64_t sub_1B2168688@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[80];
  _QWORD v17[8];
  char v18;

  v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v5 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if ((_DWORD)v4 == -1)
  {
    if (!v3)
      goto LABEL_11;
    swift_retain();
LABEL_10:
    result = swift_release();
    goto LABEL_11;
  }
  v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v4 & 0x80000000) != 0)
    goto LABEL_10;
  if (*(_QWORD *)(v5 + v6 + 8) <= v4)
    goto LABEL_10;
  v7 = *(_QWORD *)(v5 + v6);
  if (v3 != -1 && *(_DWORD *)(v7 + 12 * (int)v4 + 8) != v3)
    goto LABEL_10;
  sub_1B1D1E81C(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 64, v5, (uint64_t)v16);
  swift_release();
  result = sub_1B1A18378((uint64_t)v16, (uint64_t)v17, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v18 & 1) != 0)
  {
LABEL_11:
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_12;
  }
  v8 = v17[0];
  v9 = v17[1];
  v10 = v17[2];
  v11 = v17[3];
  v12 = v17[4];
  v13 = v17[5];
  v14 = v17[6];
  v15 = v17[7];
LABEL_12:
  *a2 = v8;
  a2[1] = v9;
  a2[2] = v10;
  a2[3] = v11;
  a2[4] = v12;
  a2[5] = v13;
  a2[6] = v14;
  a2[7] = v15;
  return result;
}

void (*sub_1B21687E0(_QWORD *a1))(simd_float4 **a1, char a2)
{
  char *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = malloc(0xA0uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  v3[16] = v1;
  v3[17] = v4;
  v5 = *(_QWORD *)&v1[v4 + 8];
  v3[18] = v5;
  swift_retain();
  v6 = v1;
  sub_1B1DB1340(v5, v6);
  v14 = v8;
  v15 = v7;
  v12 = v10;
  v13 = v9;
  v3[19] = 0;

  swift_release();
  *(_OWORD *)v3 = v15;
  *((_OWORD *)v3 + 1) = v14;
  *((_OWORD *)v3 + 2) = v13;
  *((_OWORD *)v3 + 3) = v12;
  return sub_1B2168890;
}

void sub_1B2168890(simd_float4 **a1, char a2)
{
  simd_float4 *v2;
  int *v3;
  int v4;
  int v5;
  simd_float4x4 v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;
  simd_float4 v18;
  simd_float4 v19;
  simd_float4 v20;
  simd_float4 v21;
  simd_float4 v22;

  v2 = *a1;
  v3 = (int *)((*a1)[8].i64[0] + (*a1)[8].i64[1]);
  v5 = *v3;
  v4 = v3[1];
  v6.columns[0] = **a1;
  v6.columns[1] = (*a1)[1];
  v2[4] = v6.columns[0];
  v6.columns[2] = v2[2];
  v6.columns[3] = v2[3];
  v8 = v5 == -1 && v4 == 0;
  v2[5] = v6.columns[1];
  v2[6] = v6.columns[2];
  v2[7] = v6.columns[3];
  if ((a2 & 1) != 0)
  {
    if (!v8)
    {
      v19 = v6.columns[2];
      v21 = v6.columns[3];
      v15 = v6.columns[1];
      v17 = v6.columns[0];
      v9 = swift_retain();
      MEMORY[0x1E0C80A78](v9, v10);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216B3D0);
      swift_release();
      v6.columns[1] = v15;
      v6.columns[0] = v17;
      v6.columns[2] = v19;
      v6.columns[3] = v21;
    }
    *(simd_float4x4 *)v2[4].f32 = __invert_f4(v6);
    if (!v8)
    {
LABEL_15:
      v13 = swift_retain();
      MEMORY[0x1E0C80A78](v13, v14);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216B3E4);
      swift_release();
    }
  }
  else
  {
    if (!v8)
    {
      v20 = v6.columns[2];
      v22 = v6.columns[3];
      v16 = v6.columns[1];
      v18 = v6.columns[0];
      v11 = swift_retain();
      MEMORY[0x1E0C80A78](v11, v12);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216B3D0);
      swift_release();
      v6.columns[1] = v16;
      v6.columns[0] = v18;
      v6.columns[2] = v20;
      v6.columns[3] = v22;
    }
    *(simd_float4x4 *)v2[4].f32 = __invert_f4(v6);
    if (!v8)
      goto LABEL_15;
  }
  free(v2);
}

double sub_1B2168AA0()
{
  double result;

  *(_QWORD *)&result = sub_1B2169D0C((double (*)(uint64_t, char *))sub_1B1DB136C).n128_u64[0];
  return result;
}

void sub_1B2168B70()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance) != -1
    || *(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4) != 0)
  {
    v2 = swift_retain();
    MEMORY[0x1E0C80A78](v2, v3);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216ADA4);
    swift_release();
  }
}

uint64_t sub_1B2168C18(uint64_t a1, _QWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = (_DWORD *)(*a2 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  if (*v2 != -1 || v2[1] != 0)
  {
    v4 = swift_retain();
    MEMORY[0x1E0C80A78](v4, v5);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216ADA4);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2168CCC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B216A098(a1, (void (*)(_QWORD *__return_ptr, _QWORD))sub_1B1D1ECB0, &qword_1ED4B99A0, (uint64_t)&type metadata for LastFrameWorldTransform, a2);
}

void (*sub_1B2168CF8(_QWORD *a1))(uint64_t a1, char a2)
{
  char *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v3 = malloc(0xA0uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  v3[16] = v1;
  v3[17] = v4;
  v5 = *(_QWORD *)&v1[v4 + 8];
  v3[18] = v5;
  swift_retain();
  v6 = v1;
  sub_1B1DB136C(v5, v6);
  v14 = v8;
  v15 = v7;
  v12 = v10;
  v13 = v9;
  v3[19] = 0;

  swift_release();
  *(_OWORD *)v3 = v15;
  *((_OWORD *)v3 + 1) = v14;
  *((_OWORD *)v3 + 2) = v13;
  *((_OWORD *)v3 + 3) = v12;
  return sub_1B2168DA8;
}

void sub_1B2168DA8(uint64_t a1, char a2)
{
  _OWORD *v2;
  _DWORD *v3;
  BOOL v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_OWORD **)a1;
  v3 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 128) + *(_QWORD *)(*(_QWORD *)a1 + 136));
  v5 = *v3 == -1 && v3[1] == 0;
  if ((a2 & 1) != 0)
  {
    if (!v5)
      goto LABEL_11;
  }
  else if (!v5)
  {
LABEL_11:
    v7 = v2[2];
    v6 = v2[3];
    v8 = v2[1];
    v2[4] = *v2;
    v2[5] = v8;
    v2[6] = v7;
    v2[7] = v6;
    v9 = swift_retain();
    MEMORY[0x1E0C80A78](v9, v10);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216ADA4);
    swift_release();
  }
  free(v2);
}

double sub_1B2168F3C()
{
  double result;

  *(_QWORD *)&result = sub_1B21695F4((double (*)(uint64_t, char *))sub_1B1DB15DC).n128_u64[0];
  return result;
}

void sub_1B2168F84(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __n128 v12;
  BOOL v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v19;
  _OWORD v20[3];

  v2 = *(unsigned int *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v3 = *(unsigned int *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v2 != -1 || (_DWORD)v3 != 0)
  {
    swift_retain();
    v5 = sub_1B1D15838(v2 | (v3 << 32));
    v7 = v6;
    v9 = v8;
    swift_release();
    if ((v9 & 1) != 0)
    {
      v12 = a1;
LABEL_14:
      v12.n128_u32[3] = 1.0;
      v20[2] = v12;
      v16 = swift_retain();
      MEMORY[0x1E0C80A78](v16, v17);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B20BFAE4);
      swift_release();
      return;
    }
    v10 = 0;
    *(_QWORD *)&v11 = v5;
    *((_QWORD *)&v11 + 1) = v7;
    v12 = a1;
    while (1)
    {
      v19 = a1;
      v14 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      v20[0] = v11;
      v15 = *(float *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      v13 = v14 == v15;
      if (v10 == 2)
        break;
      while (1)
      {
        ++v10;
        if (v13)
          break;
        if (v10 == 2)
          goto LABEL_14;
        v13 = 0;
      }
    }
    if (v14 != v15)
      goto LABEL_14;
  }
}

__n128 sub_1B21690EC@<Q0>(void **a1@<X0>, __n128 *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  id v5;
  __n128 v6;
  __n128 result;
  __n128 v8;

  v3 = *a1;
  v4 = *(_QWORD *)((char *)*a1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  v5 = v3;
  sub_1B1DB15DC(v4, v5);
  v8 = v6;
  swift_release();

  result = v8;
  *a2 = v8;
  return result;
}

uint64_t sub_1B2169164@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  __int128 v13;

  v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v5 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if ((_DWORD)v4 == -1)
  {
    if (!v3)
    {
LABEL_11:
      v13 = 0uLL;
      goto LABEL_12;
    }
    swift_retain();
LABEL_10:
    result = swift_release();
    goto LABEL_11;
  }
  v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v4 & 0x80000000) != 0)
    goto LABEL_10;
  if (*(_QWORD *)(v5 + v6 + 8) <= v4)
    goto LABEL_10;
  v7 = *(_QWORD *)(v5 + v6);
  if (v3 != -1 && *(_DWORD *)(v7 + 12 * (int)v4 + 8) != v3)
    goto LABEL_10;
  v8 = sub_1B1D1ED54(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 16, v5);
  v10 = v9;
  v12 = v11;
  result = swift_release();
  v13 = 0uLL;
  if ((v12 & 1) == 0)
  {
    *(_QWORD *)&v13 = v8;
    *((_QWORD *)&v13 + 1) = v10;
  }
LABEL_12:
  *a2 = v13;
  return result;
}

void (*sub_1B2169270(_QWORD *a1))(__int128 **a1, char a2)
{
  char *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v9;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  v3[4] = v1;
  v3[5] = v4;
  v5 = *(_QWORD *)&v1[v4 + 8];
  v3[6] = v5;
  swift_retain();
  v6 = v1;
  sub_1B1DB15DC(v5, v6);
  v9 = v7;
  v3[7] = 0;

  swift_release();
  *(_OWORD *)v3 = v9;
  return sub_1B216930C;
}

void sub_1B216930C(__int128 **a1, char a2)
{
  __int128 *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  BOOL v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  BOOL v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v2 = *a1;
  v3 = (unsigned int *)(*((_QWORD *)*a1 + 4) + *((_QWORD *)*a1 + 5));
  v4 = *v3;
  v5 = v3[1];
  v7 = v4 == 0xFFFFFFFFLL && v5 == 0;
  if ((a2 & 1) != 0)
  {
    if (v7)
      goto LABEL_29;
    v34 = **a1;
    swift_retain();
    v8 = sub_1B1D15838(v4 | (v5 << 32));
    v10 = v9;
    v12 = v11;
    swift_release();
    v13 = v34;
    if ((v12 & 1) != 0)
      goto LABEL_25;
    v14 = 0;
    *(_QWORD *)&v15 = v8;
    *((_QWORD *)&v15 + 1) = v10;
    v16 = 1;
    while (1)
    {
      if (v16)
      {
        v36 = v34;
        v17 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
        v37 = v15;
        v18 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3)));
        v16 = v17 == v18;
        if (v14 == 2)
        {
          if (v17 != v18)
          {
LABEL_25:
            HIDWORD(v13) = 1.0;
            v2[1] = v13;
            v30 = swift_retain();
            MEMORY[0x1E0C80A78](v30, v31);
            goto LABEL_28;
          }
          goto LABEL_29;
        }
      }
      else
      {
        if (v14 == 2)
          goto LABEL_25;
        v16 = 0;
      }
      ++v14;
    }
  }
  if (v7)
    goto LABEL_29;
  v35 = **a1;
  swift_retain();
  v19 = sub_1B1D15838(v4 | (v5 << 32));
  v21 = v20;
  v23 = v22;
  swift_release();
  v24 = v35;
  if ((v23 & 1) == 0)
  {
    v25 = 0;
    *(_QWORD *)&v26 = v19;
    *((_QWORD *)&v26 + 1) = v21;
    v27 = 1;
    while (1)
    {
      if (v27)
      {
        v38 = v35;
        v28 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
        v39 = v26;
        v29 = *(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
        v27 = v28 == v29;
        if (v25 == 2)
        {
          if (v28 == v29)
            goto LABEL_29;
          break;
        }
      }
      else
      {
        if (v25 == 2)
          break;
        v27 = 0;
      }
      ++v25;
    }
  }
  HIDWORD(v24) = 1.0;
  v2[1] = v24;
  v32 = swift_retain();
  MEMORY[0x1E0C80A78](v32, v33);
LABEL_28:
  sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216B3F8);
  swift_release();
LABEL_29:
  free(v2);
}

double sub_1B21695E8()
{
  double result;

  *(_QWORD *)&result = sub_1B21695F4((double (*)(uint64_t, char *))sub_1B1DB17B8).n128_u64[0];
  return result;
}

__n128 sub_1B21695F4(double (*a1)(uint64_t, char *))
{
  char *v1;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v7;

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v4 = v1;
  *(double *)&v5 = a1(v3, v4);
  v7 = v5;
  swift_release();

  return (__n128)v7;
}

void sub_1B21696A0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __n128 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  __n128 v19;
  _OWORD v20[3];

  v2 = *(unsigned int *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v3 = *(unsigned int *)(v1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v2 != -1 || (_DWORD)v3 != 0)
  {
    swift_retain();
    v5 = sub_1B1D15930(v2 | (v3 << 32));
    v7 = v6;
    v9 = v8;
    swift_release();
    if ((v9 & 1) != 0)
    {
      v12 = a1;
LABEL_10:
      v20[2] = v12;
      v14 = swift_retain();
      MEMORY[0x1E0C80A78](v14, v15);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B20BFB00);
      swift_release();
      return;
    }
    v10 = 0;
    *(_QWORD *)&v11 = v5;
    *((_QWORD *)&v11 + 1) = v7;
    v12 = a1;
    while (1)
    {
      v19 = a1;
      v16 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      v20[0] = v11;
      v17 = *(float *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      v13 = v16 == v17;
      if (v10 == 3)
        break;
      while (1)
      {
        ++v10;
        if (v13)
          break;
        if (v10 == 3)
          goto LABEL_10;
        v13 = 0;
      }
    }
    if (v16 != v17)
      goto LABEL_10;
  }
}

__n128 sub_1B21697FC@<Q0>(void **a1@<X0>, __n128 *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  id v5;
  __n128 v6;
  __n128 result;
  __n128 v8;

  v3 = *a1;
  v4 = *(_QWORD *)((char *)*a1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  v5 = v3;
  sub_1B1DB17B8(v4, v5);
  v8 = v6;
  swift_release();

  result = v8;
  *a2 = v8;
  return result;
}

uint64_t sub_1B2169874@<X0>(uint64_t result@<X0>, __int128 *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  __int128 v13;

  v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v5 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if ((_DWORD)v4 == -1)
  {
    if (!v3)
      goto LABEL_11;
    swift_retain();
LABEL_10:
    result = swift_release();
    goto LABEL_11;
  }
  v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v4 & 0x80000000) != 0)
    goto LABEL_10;
  if (*(_QWORD *)(v5 + v6 + 8) <= v4)
    goto LABEL_10;
  v7 = *(_QWORD *)(v5 + v6);
  if (v3 != -1 && *(_DWORD *)(v7 + 12 * (int)v4 + 8) != v3)
    goto LABEL_10;
  v8 = sub_1B1D1EDC4(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 16, v5);
  v10 = v9;
  v12 = v11;
  result = swift_release();
  if ((v12 & 1) != 0)
  {
LABEL_11:
    v13 = xmmword_1B2244E20;
    goto LABEL_12;
  }
  *(_QWORD *)&v13 = v8;
  *((_QWORD *)&v13 + 1) = v10;
LABEL_12:
  *a2 = v13;
  return result;
}

void (*sub_1B2169980(_QWORD *a1))(__int128 **a1, char a2)
{
  char *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v9;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance;
  v3[4] = v1;
  v3[5] = v4;
  v5 = *(_QWORD *)&v1[v4 + 8];
  v3[6] = v5;
  swift_retain();
  v6 = v1;
  sub_1B1DB17B8(v5, v6);
  v9 = v7;
  v3[7] = 0;

  swift_release();
  *(_OWORD *)v3 = v9;
  return sub_1B2169A1C;
}

void sub_1B2169A1C(__int128 **a1, char a2)
{
  __int128 *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  BOOL v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  BOOL v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v2 = *a1;
  v3 = (unsigned int *)(*((_QWORD *)*a1 + 4) + *((_QWORD *)*a1 + 5));
  v4 = *v3;
  v5 = v3[1];
  v7 = v4 == 0xFFFFFFFFLL && v5 == 0;
  if ((a2 & 1) != 0)
  {
    if (v7)
      goto LABEL_29;
    v32 = **a1;
    swift_retain();
    v8 = sub_1B1D15930(v4 | (v5 << 32));
    v10 = v9;
    v12 = v11;
    swift_release();
    if ((v12 & 1) != 0)
      goto LABEL_25;
    v13 = 0;
    *(_QWORD *)&v14 = v8;
    *((_QWORD *)&v14 + 1) = v10;
    v15 = 1;
    while (1)
    {
      if (v15)
      {
        v34 = v32;
        v16 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
        v35 = v14;
        v17 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
        v15 = v16 == v17;
        if (v13 == 3)
        {
          if (v16 != v17)
          {
LABEL_25:
            v2[1] = v32;
            v28 = swift_retain();
            MEMORY[0x1E0C80A78](v28, v29);
            goto LABEL_28;
          }
          goto LABEL_29;
        }
      }
      else
      {
        if (v13 == 3)
          goto LABEL_25;
        v15 = 0;
      }
      ++v13;
    }
  }
  if (v7)
    goto LABEL_29;
  v33 = **a1;
  swift_retain();
  v18 = sub_1B1D15930(v4 | (v5 << 32));
  v20 = v19;
  v22 = v21;
  swift_release();
  if ((v22 & 1) == 0)
  {
    v23 = 0;
    *(_QWORD *)&v24 = v18;
    *((_QWORD *)&v24 + 1) = v20;
    v25 = 1;
    while (1)
    {
      if (v25)
      {
        v36 = v33;
        v26 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
        v37 = v24;
        v27 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
        v25 = v26 == v27;
        if (v23 == 3)
        {
          if (v26 == v27)
            goto LABEL_29;
          break;
        }
      }
      else
      {
        if (v23 == 3)
          break;
        v25 = 0;
      }
      ++v23;
    }
  }
  v2[1] = v33;
  v30 = swift_retain();
  MEMORY[0x1E0C80A78](v30, v31);
LABEL_28:
  sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216B40C);
  swift_release();
LABEL_29:
  free(v2);
}

__n128 sub_1B2169C84(char *a1, uint64_t a2, double (*a3)(uint64_t, char *))
{
  uint64_t v5;
  char *v6;
  __int128 v7;
  __int128 v9;

  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v6 = a1;
  *(double *)&v7 = a3(v5, v6);
  v9 = v7;

  swift_release();
  return (__n128)v9;
}

double sub_1B2169D00()
{
  double result;

  *(_QWORD *)&result = sub_1B2169D0C((double (*)(uint64_t, char *))sub_1B1DB1398).n128_u64[0];
  return result;
}

__n128 sub_1B2169D0C(double (*a1)(uint64_t, char *))
{
  char *v1;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v7;

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v4 = v1;
  *(double *)&v5 = a1(v3, v4);
  v7 = v5;
  swift_release();

  return (__n128)v7;
}

void sub_1B2169DD0(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _OWORD v21[4];
  _BYTE v22[80];
  float32x4_t v23[4];
  char v24;

  v5 = *(unsigned int *)(v4 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v6 = *(unsigned int *)(v4 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  if ((_DWORD)v5 != -1 || (_DWORD)v6 != 0)
  {
    v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
    v9 = (_QWORD *)(v5 | (v6 << 32));
    swift_retain();
    sub_1B1D15DE8(v9, (uint64_t)v22);
    swift_release();
    sub_1B1A18378((uint64_t)v22, (uint64_t)v23, &qword_1ED4B8E80, (uint64_t)&type metadata for ProjectionMatrix);
    if ((v24 & 1) != 0
      || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v23[1], a2), (int8x16_t)vceqq_f32(v23[0], a1)), vandq_s8((int8x16_t)vceqq_f32(v23[2], a3), (int8x16_t)vceqq_f32(v23[3], a4)))) & 0x80000000) == 0)
    {
      v21[0] = a1;
      v21[1] = a2;
      v21[2] = a3;
      v21[3] = a4;
      v10 = swift_retain();
      MEMORY[0x1E0C80A78](v10, v11);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B216ADC0);
      swift_release();
      v12 = *(_QWORD *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v12)
      {
        v13 = *(_BYTE *)(v12 + 80);
        MEMORY[0x1B5E240CC](v12 + 48);
        v12 = *(_QWORD *)(v12 + 56);
      }
      else
      {
        v13 = 0;
      }
      v19 = 0;
      swift_unknownObjectUnownedInit();
      v18 = v8;
      v19 = v12;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v20 = v13;
      sub_1B1A02530((uint64_t)&v18, (uint64_t)v21);
      sub_1B1E2D290((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1E638EDD0, (unint64_t)v9);
      sub_1B1A0256C((uint64_t)v21);
      sub_1B1E31340(1);
      swift_release();
    }
  }
}

__n128 sub_1B2169FD4@<Q0>(void **a1@<X0>, double (*a2)(uint64_t, id)@<X3>, _OWORD *a3@<X8>)
{
  void *v5;
  uint64_t v6;
  id v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 v11;
  __n128 result;
  __n128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v5 = *a1;
  v6 = *(_QWORD *)((char *)*a1 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  swift_retain();
  v7 = v5;
  *(double *)&v8 = a2(v6, v7);
  v15 = v9;
  v16 = v8;
  v13 = v11;
  v14 = v10;
  swift_release();

  *a3 = v16;
  a3[1] = v15;
  result = v13;
  a3[2] = v14;
  a3[3] = v13;
  return result;
}

uint64_t sub_1B216A06C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B216A098(a1, (void (*)(_QWORD *__return_ptr, _QWORD))sub_1B1D1E8C0, &qword_1ED4B8E80, (uint64_t)&type metadata for ProjectionMatrix, a2);
}

uint64_t sub_1B216A098@<X0>(uint64_t result@<X0>, void (*a2)(_QWORD *__return_ptr, _QWORD)@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[10];
  _OWORD v18[4];
  char v19;

  v6 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  v7 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v8 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if ((_DWORD)v7 == -1)
  {
    if (!v6)
      goto LABEL_11;
    swift_retain();
LABEL_10:
    result = swift_release();
    goto LABEL_11;
  }
  v12 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
  swift_retain();
  if ((v7 & 0x80000000) != 0)
    goto LABEL_10;
  if (*(_QWORD *)(v8 + v12 + 8) <= v7)
    goto LABEL_10;
  v13 = *(_QWORD *)(v8 + v12);
  if (v6 != -1 && *(_DWORD *)(v13 + 12 * (int)v7 + 8) != v6)
    goto LABEL_10;
  a2(v17, *(_QWORD *)(*(_QWORD *)(v8 + 136) + 8 * *(int *)(v13 + 12 * (int)v7) + 32));
  swift_release();
  result = sub_1B1A18378((uint64_t)v17, (uint64_t)v18, a3, a4);
  if ((v19 & 1) != 0)
  {
LABEL_11:
    *a5 = xmmword_1B2244DB0;
    a5[1] = xmmword_1B2244DD0;
    v15 = xmmword_1B2244D90;
    v16 = xmmword_1B2244E20;
    goto LABEL_12;
  }
  v14 = v18[1];
  *a5 = v18[0];
  a5[1] = v14;
  v15 = v18[2];
  v16 = v18[3];
LABEL_12:
  a5[2] = v15;
  a5[3] = v16;
  return result;
}

void (*sub_1B216A1F0(_QWORD *a1))(float32x4_t **a1)
{
  char *v1;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v5 = v1;
  sub_1B1DB1398(v4, v5);
  v13 = v7;
  v14 = v6;
  v11 = v9;
  v12 = v8;

  swift_release();
  *(_OWORD *)v3 = v14;
  *((_OWORD *)v3 + 1) = v13;
  *((_OWORD *)v3 + 2) = v12;
  *((_OWORD *)v3 + 3) = v11;
  return sub_1B216A298;
}

void sub_1B216A298(float32x4_t **a1)
{
  float32x4_t *v1;

  v1 = *a1;
  sub_1B2169DD0(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);
  free(v1);
}

float sub_1B216A2D4()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB1994);
}

float sub_1B216A2EC()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB1C1C);
}

float sub_1B216A304()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB1E74);
}

float sub_1B216A31C()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB20CC);
}

float sub_1B216A334()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB2324);
}

float sub_1B216A34C()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB257C);
}

float sub_1B216A364()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB27D4);
}

double sub_1B216A3E8()
{
  char *v0;
  uint64_t v1;
  char *v2;
  double v3;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v2 = v0;
  v3 = sub_1B1DB2C98(v1, v2);
  swift_release();

  return v3;
}

float sub_1B216A468()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB2A2C);
}

uint64_t sub_1B216A474@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 4);
  v4 = *(int *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v5 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8);
  if ((_DWORD)v4 != -1)
  {
    v6 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
    swift_retain();
    if ((v4 & 0x80000000) == 0 && *(_QWORD *)(v5 + v6 + 8) > v4)
    {
      v7 = *(_QWORD *)(v5 + v6);
      if (v3 == -1 || *(_DWORD *)(v7 + 12 * (int)v4 + 8) == v3)
      {
        v8 = sub_1B1D1EB50(*(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *(int *)(v7 + 12 * (int)v4) + 32), *(_DWORD *)(v7 + 12 * (int)v4), *(_WORD *)(v7 + 12 * (int)v4 + 4), 20, v5);
        result = swift_release();
        if ((v8 & 0xFF00000000) != 0x200000000)
          goto LABEL_12;
        goto LABEL_11;
      }
    }
    goto LABEL_10;
  }
  if (v3)
  {
    swift_retain();
LABEL_10:
    result = swift_release();
  }
LABEL_11:
  LODWORD(v8) = 1065353216;
LABEL_12:
  *a2 = v8;
  return result;
}

float sub_1B216A584()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB2A58);
}

void sub_1B216A590(char *a1@<X0>, _DWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char v21;

  v4 = &a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v6 = a1;
  v7 = sub_1B1DAF104(v5, v6);
  swift_release();

  if ((v7 & 1) != 0)
  {
    v8 = *(unsigned int *)v4;
    v9 = *((unsigned int *)v4 + 1);
    if ((_DWORD)v8 != -1 || (_DWORD)v9 != 0)
    {
      v11 = v8 | (v9 << 32);
      swift_retain();
      v12 = sub_1B1D1798C(v11);
      v14 = v13;
      swift_release();
      if ((v12 & 0xFF00000000) != 0x200000000)
      {
        *a2 = v14;
        return;
      }
    }
    goto LABEL_13;
  }
  v15 = *(unsigned int *)v4;
  v16 = *((unsigned int *)v4 + 1);
  v17 = (_DWORD)v15 == -1 && (_DWORD)v16 == 0;
  if (v17 || (v18 = v15 | (v16 << 32), swift_retain(), sub_1B1D178C4(v18, &v19), swift_release(), v21 == 2))
  {
LABEL_13:
    *a2 = 0;
    return;
  }
  *a2 = v20;
}

float sub_1B216A6BC(char *a1, uint64_t a2, float (*a3)(uint64_t, char *))
{
  uint64_t v5;
  char *v6;
  float v7;

  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v6 = a1;
  v7 = a3(v5, v6);

  swift_release();
  return v7;
}

float sub_1B216A738()
{
  return sub_1B216A744((float (*)(uint64_t, char *))sub_1B1DB2A84);
}

float sub_1B216A744(float (*a1)(uint64_t, char *))
{
  char *v1;
  uint64_t v3;
  char *v4;
  float v5;

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v4 = v1;
  v5 = a1(v3, v4);
  swift_release();

  return v5;
}

void sub_1B216A7BC(char *a1@<X0>, _DWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  char v21;

  v4 = &a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v6 = a1;
  v7 = sub_1B1DAF104(v5, v6);
  swift_release();

  if ((v7 & 1) != 0)
  {
    v8 = *(unsigned int *)v4;
    v9 = *((unsigned int *)v4 + 1);
    if ((_DWORD)v8 != -1 || (_DWORD)v9 != 0)
    {
      v11 = v8 | (v9 << 32);
      swift_retain();
      v12 = sub_1B1D1798C(v11);
      v14 = v13;
      swift_release();
      if ((v12 & 0xFF00000000) != 0x200000000)
      {
        *a2 = v14;
        return;
      }
    }
    goto LABEL_13;
  }
  v15 = *(unsigned int *)v4;
  v16 = *((unsigned int *)v4 + 1);
  v17 = (_DWORD)v15 == -1 && (_DWORD)v16 == 0;
  if (v17 || (v18 = v15 | (v16 << 32), swift_retain(), sub_1B1D178C4(v18, &v19), swift_release(), v21 == 2))
  {
LABEL_13:
    *a2 = 0;
    return;
  }
  *a2 = v20;
}

uint64_t sub_1B216A8EC(char *a1, uint64_t a2, uint64_t (*a3)(uint64_t, char *))
{
  uint64_t v5;
  char *v6;

  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v6 = a1;
  LOBYTE(a3) = a3(v5, v6);

  swift_release();
  return a3 & 1;
}

uint64_t sub_1B216A960()
{
  return sub_1B216A96C((uint64_t (*)(uint64_t, char *))sub_1B1DAF33C);
}

uint64_t sub_1B216A96C(uint64_t (*a1)(uint64_t, char *))
{
  char *v1;
  uint64_t v3;
  char *v4;

  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v4 = v1;
  LOBYTE(a1) = a1(v3, v4);
  swift_release();

  return a1 & 1;
}

void sub_1B216A9DC(char *a1@<X0>, char *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  char v21;

  v4 = &a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v6 = a1;
  v7 = sub_1B1DAF104(v5, v6);
  swift_release();

  if ((v7 & 1) == 0)
  {
    v16 = *(unsigned int *)v4;
    v17 = *((unsigned int *)v4 + 1);
    if ((_DWORD)v16 != -1 || (_DWORD)v17 != 0)
    {
      v19 = v16 | (v17 << 32);
      swift_retain();
      sub_1B1D178C4(v19, &v20);
      swift_release();
      if (v21 != 2)
      {
        v15 = v21 & 1;
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
  v8 = *(unsigned int *)v4;
  v9 = *((unsigned int *)v4 + 1);
  if ((_DWORD)v8 == -1 && (_DWORD)v9 == 0)
  {
LABEL_14:
    v15 = 1;
    goto LABEL_15;
  }
  v11 = v8 | (v9 << 32);
  swift_retain();
  v12 = sub_1B1D1798C(v11);
  v14 = v13;
  swift_release();
  v15 = v14 & 1;
  if ((v12 & 0xFF00000000) == 0x200000000)
    v15 = 1;
LABEL_15:
  *a2 = v15;
}

uint64_t sub_1B216AB70()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v2 = v0;
  sub_1B1DB2F00(v1, v2);
  v4 = v3;
  swift_release();

  return v4;
}

void sub_1B216ABDC(char *a1@<X0>, _BYTE *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = &a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance + 8];
  swift_retain();
  v6 = a1;
  v7 = sub_1B1DAF104(v5, v6);
  swift_release();

  if ((v7 & 1) == 0)
  {
    v14 = *(unsigned int *)v4;
    v15 = *((unsigned int *)v4 + 1);
    if ((_DWORD)v14 != -1 || (_DWORD)v15 != 0)
    {
      v17 = v14 | (v15 << 32);
      swift_retain();
      sub_1B1D178C4(v17, &v18);
      swift_release();
      if (v19 != 2)
      {
        LODWORD(v13) = (v19 >> 8) & 1;
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
  v8 = *(unsigned int *)v4;
  v9 = *((unsigned int *)v4 + 1);
  if ((_DWORD)v8 == -1 && (_DWORD)v9 == 0)
  {
LABEL_14:
    LOBYTE(v13) = 0;
    goto LABEL_15;
  }
  v11 = v8 | (v9 << 32);
  swift_retain();
  v12 = sub_1B1D1798C(v11);
  swift_release();
  v13 = HIDWORD(v12) & 1;
  if ((v12 & 0xFF00000000) == 0x200000000)
    LOBYTE(v13) = 0;
LABEL_15:
  *a2 = v13;
}

id VFXCoreCamera.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VFXCoreCamera.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VFXCoreCamera.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXCoreCamera();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B216ADA4(uint64_t a1)
{
  return sub_1B1DCAE9C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, __n128, __n128, __n128, __n128))sub_1B21678D0);
}

uint64_t sub_1B216ADC0(uint64_t a1)
{
  return sub_1B1DCAE9C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, __n128, __n128, __n128, __n128))sub_1B1F58530);
}

uint64_t type metadata accessor for VFXCoreCamera()
{
  return objc_opt_self();
}

unint64_t sub_1B216AE00()
{
  unint64_t result;

  result = qword_1EEF64C70;
  if (!qword_1EEF64C70)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for VFXCoreCameraProjectionDirection, &type metadata for VFXCoreCameraProjectionDirection);
    atomic_store(result, (unint64_t *)&qword_1EEF64C70);
  }
  return result;
}

unint64_t sub_1B216AE48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF64C78;
  if (!qword_1EEF64C78)
  {
    sub_1B1A02758(255, &qword_1EEF64C80, (uint64_t)&type metadata for VFXCoreCameraProjectionDirection, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF64C78);
  }
  return result;
}

double sub_1B216AEB0@<D0>(void **a1@<X0>, _OWORD *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B2169FD4(a1, (double (*)(uint64_t, id))sub_1B1DB1340, a2).n128_u64[0];
  return result;
}

uint64_t sub_1B216AECC(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B216AF70(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128))sub_1B2168560);
}

double sub_1B216AED8@<D0>(void **a1@<X0>, _OWORD *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B2169FD4(a1, (double (*)(uint64_t, id))sub_1B1DB136C, a2).n128_u64[0];
  return result;
}

void sub_1B216AEFC(__n128 *a1)
{
  sub_1B2168F84(*a1);
}

void sub_1B216AF24(__n128 *a1)
{
  sub_1B21696A0(*a1);
}

double sub_1B216AF48@<D0>(void **a1@<X0>, _OWORD *a2@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1B2169FD4(a1, (double (*)(uint64_t, id))sub_1B1DB1398, a2).n128_u64[0];
  return result;
}

uint64_t sub_1B216AF64(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B216AF70(a1, a2, a3, a4, (uint64_t (*)(__n128, __n128, __n128, __n128))sub_1B2169DD0);
}

uint64_t sub_1B216AF70(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128, __n128, __n128, __n128))
{
  return a5(*a1, a1[1], a1[2], a1[3]);
}

ValueMetadata *type metadata accessor for VFXCoreCameraProjectionDirection()
{
  return &type metadata for VFXCoreCameraProjectionDirection;
}

uint64_t method lookup function for VFXCoreCamera()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXCoreCamera.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of VFXCoreCamera.isOrthographic.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of VFXCoreCamera.isOrthographic.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of VFXCoreCamera.isOrthographic.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of VFXCoreCamera.worldTransform.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of VFXCoreCamera.worldTransform.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of VFXCoreCamera.worldTransform.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of VFXCoreCamera.lastFrameWorldTransform.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of VFXCoreCamera.lastFrameWorldTransform.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of VFXCoreCamera.lastFrameWorldTransform.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of VFXCoreCamera.position.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of VFXCoreCamera.position.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of VFXCoreCamera.position.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of VFXCoreCamera.orientation.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of VFXCoreCamera.orientation.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of VFXCoreCamera.orientation.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of VFXCoreCamera.projection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of VFXCoreCamera.projection.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of VFXCoreCamera.projection.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of VFXCoreCamera.fieldOfView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of VFXCoreCamera.focalLength.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of VFXCoreCamera.focusDistance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of VFXCoreCamera.sensorSize.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of VFXCoreCamera.fStop.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of VFXCoreCamera.exposure.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of VFXCoreCamera.aperture.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of VFXCoreCamera.filmOffset.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of VFXCoreCamera.scale.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of VFXCoreCamera.zNear.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of VFXCoreCamera.zFar.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of VFXCoreCamera.reverseZ.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of VFXCoreCamera.projectionDirection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

unint64_t sub_1B216B334()
{
  unint64_t result;

  result = qword_1EEF64C88;
  if (!qword_1EEF64C88)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for VFXCoreCameraProjectionDirection, &type metadata for VFXCoreCameraProjectionDirection);
    atomic_store(result, (unint64_t *)&qword_1EEF64C88);
  }
  return result;
}

uint64_t sub_1B216B378()
{
  return swift_deallocObject();
}

_QWORD *sub_1B216B388(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  __int128 *v3;
  __int128 v4;
  __int128 v6[3];

  v3 = *(__int128 **)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = v3[1];
  v6[0] = *v3;
  v6[1] = v4;
  v6[2] = v3[2];
  return sub_1B216776C(a1, v6, v2);
}

uint64_t sub_1B216B3C0()
{
  return swift_deallocObject();
}

_QWORD *sub_1B216B3D0(_QWORD *a1)
{
  return sub_1B19ED814(a1);
}

_QWORD *sub_1B216B3E4(_QWORD *a1)
{
  return sub_1B19ED830(a1);
}

unint64_t sub_1B216B3F8(uint64_t a1)
{
  return sub_1B20BFAE4(a1);
}

unint64_t sub_1B216B40C(uint64_t a1)
{
  return sub_1B20BFB00(a1);
}

uint64_t sub_1B216B420(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v8 = result;
  v9 = *(_QWORD *)(v4 + 8);
  v10 = *(_QWORD *)(v4 + 16);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    swift_retain();
    v12 = (_QWORD *)(v10 + 56);
    do
    {
      memmove((void *)(v8 + *v12 + *(v12 - 1) * a4), (const void *)(v8 + *v12 + *(v12 - 1) * a2), *(v12 - 1) * (a3 - a2));
      v12 += 5;
      --v11;
    }
    while (v11);
    result = swift_release();
  }
  v13 = *(_QWORD *)(v9 + 16);
  if (v13)
  {
    swift_retain();
    v14 = v9 + 56;
    do
    {
      sub_1B1F24B74();
      v14 += 40;
      --v13;
    }
    while (v13);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B216B51C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = a1;
  if ((a3 & 0x100) != 0)
  {
    v10 = sub_1B216BD08(a1);
    v12 = v15;
    v14 = -1;
    if ((a4 & 1) == 0)
    {
      v16 = 0;
      v17 = 1;
      v13 = -1;
      v18 = *(_QWORD *)(v6 + 16);
      if (v18)
        goto LABEL_17;
      goto LABEL_44;
    }
    v13 = -1;
    goto LABEL_16;
  }
  v54 = a1;
  swift_bridgeObjectRetain();
  sub_1B216BC24(&v54);
  swift_bridgeObjectRelease();
  v6 = v54;
  v9 = sub_1B216BD08(v54);
  v10 = v9;
  v12 = v11;
  if ((a3 & 1) != 0)
    v13 = v9;
  else
    v13 = a2;
  if ((a4 & 1) != 0)
  {
    if (v9 + 4 < 1)
      v14 = v13;
    else
      v14 = v13 / (v9 + 4);
LABEL_16:
    v17 = 0;
    v16 = 4 * v14;
    v18 = *(_QWORD *)(v6 + 16);
    if (v18)
      goto LABEL_17;
LABEL_44:
    v40 = MEMORY[0x1E0DEE9D8];
    v39 = MEMORY[0x1E0DEE9D8];
    v21 = MEMORY[0x1E0DEE9D8];
    goto LABEL_45;
  }
  if (v9 >= 1)
  {
    v16 = 0;
    v17 = 1;
    v14 = v13 / v9;
    v18 = *(_QWORD *)(v6 + 16);
    if (v18)
      goto LABEL_17;
    goto LABEL_44;
  }
  v16 = 0;
  v17 = 1;
  v14 = v13;
  v18 = *(_QWORD *)(v6 + 16);
  if (!v18)
    goto LABEL_44;
LABEL_17:
  v42 = v17;
  v49 = v14;
  v43 = v13;
  v44 = v12;
  v45 = v10;
  v46 = a5;
  swift_bridgeObjectRetain();
  v19 = 0;
  v20 = (uint64_t *)(v6 + 40);
  v21 = MEMORY[0x1E0DEE9D8];
  v47 = MEMORY[0x1E0DEE9D8];
  v48 = MEMORY[0x1E0DEE9D8];
  v22 = v16;
  do
  {
    v27 = *(v20 - 1);
    v28 = sub_1B1F24AA4(v27);
    v29 = sub_1B1F24B84(v27);
    if (v28 <= 0)
    {
      v30 = v22;
    }
    else
    {
      v19 = (v29 - 1 + v19) & -v29;
      v30 = (v29 - 1 + v22) & -v29;
    }
    v52 = *v20;
    v53 = *(v20 - 1);
    v31 = sub_1B1F24B94(v27);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v54 = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B202A08C(0, *(_QWORD *)(v21 + 16) + 1, 1);
      v21 = v54;
    }
    v34 = *(_QWORD *)(v21 + 16);
    v33 = *(_QWORD *)(v21 + 24);
    if (v34 >= v33 >> 1)
    {
      sub_1B202A08C(v33 > 1, v34 + 1, 1);
      v21 = v54;
    }
    *(_QWORD *)(v21 + 16) = v34 + 1;
    v35 = v21 + 40 * v34;
    *(_QWORD *)(v35 + 32) = v53;
    *(_QWORD *)(v35 + 40) = v52;
    *(_QWORD *)(v35 + 48) = v28;
    *(_QWORD *)(v35 + 56) = v30;
    v36 = v31;
    *(_BYTE *)(v35 + 64) = v31;
    v19 += v28;
    if ((a3 & 0x100) != 0)
      v22 = v19;
    else
      v22 = v30 + v28 * v49;
    if (v28 >= 1)
    {
      v51 = v22;
      if (v31)
      {
        v38 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B202A08C(0, *(_QWORD *)(v47 + 16) + 1, 1);
          v38 = v47;
        }
        v24 = *(_QWORD *)(v38 + 16);
        v23 = *(_QWORD *)(v38 + 24);
        v25 = v24 + 1;
        if (v24 >= v23 >> 1)
        {
          sub_1B202A08C(v23 > 1, v24 + 1, 1);
          v38 = v47;
        }
        v47 = v38;
      }
      else
      {
        v38 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B202A08C(0, *(_QWORD *)(v48 + 16) + 1, 1);
          v38 = v48;
        }
        v24 = *(_QWORD *)(v38 + 16);
        v37 = *(_QWORD *)(v38 + 24);
        v25 = v24 + 1;
        if (v24 >= v37 >> 1)
        {
          sub_1B202A08C(v37 > 1, v24 + 1, 1);
          v38 = v48;
        }
        else
        {
          v48 = v38;
        }
      }
      *(_QWORD *)(v38 + 16) = v25;
      v26 = v38 + 40 * v24;
      v22 = v51;
      *(_QWORD *)(v26 + 32) = v53;
      *(_QWORD *)(v26 + 40) = v52;
      *(_QWORD *)(v26 + 48) = v28;
      *(_QWORD *)(v26 + 56) = v30;
      *(_BYTE *)(v26 + 64) = v36;
    }
    v20 += 2;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  a5 = v46;
  v39 = v47;
  v12 = v44;
  v10 = v45;
  v13 = v43;
  v40 = v48;
  v14 = v49;
  v17 = v42;
LABEL_45:
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a5 = v21;
  *(_QWORD *)(a5 + 8) = v40;
  *(_QWORD *)(a5 + 16) = v39;
  *(_QWORD *)(a5 + 24) = v10;
  *(_QWORD *)(a5 + 32) = v12;
  *(_QWORD *)(a5 + 40) = v14;
  *(_QWORD *)(a5 + 48) = v13;
  *(_QWORD *)(a5 + 56) = 0;
  *(_BYTE *)(a5 + 64) = v17;
  return result;
}

uint64_t sub_1B216B8F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;

  result = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9)
  {
    v11 = result + 32;
    v12 = *(_QWORD *)(*(_QWORD *)a6 + 16);
    v13 = *(_QWORD *)a6 + 56;
    v14 = a3 - a2;
    swift_retain();
    for (i = 0; i != v9; ++i)
    {
      if (v12)
      {
        v16 = v11 + 40 * i;
        v17 = *(_QWORD *)v16;
        v19 = *(_QWORD *)(v16 + 16);
        v18 = *(_QWORD *)(v16 + 24);
        v20 = *(unsigned __int8 *)(v16 + 32);
        v21 = (_QWORD *)v13;
        v22 = v12;
        while (*(v21 - 3) != v17)
        {
          v21 += 5;
          if (!--v22)
            goto LABEL_4;
        }
        if (v20)
          memmove((void *)(a5 + *v21 + v19 * a4), (const void *)(a1 + v18 + v19 * a2), v19 * v14);
        else
          sub_1B1F24B74();
      }
LABEL_4:
      ;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B216BA20(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = result;
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(v8 + 32);
    swift_retain();
    do
    {
      sub_1B1F24BA8(v6 + v10[3], a2, a3, *v10, v10[1]);
      v10 += 5;
      --v9;
    }
    while (v9);
    result = swift_release();
  }
  v11 = *(_QWORD *)(v7 + 16);
  if (v11)
  {
    v12 = (uint64_t *)(v7 + 32);
    swift_retain();
    do
    {
      sub_1B1F24CC0(v6 + v12[3], a2, a3, *v12);
      v12 += 5;
      --v11;
    }
    while (v11);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B216BAFC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v6 = result;
  v8 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(v8 + 32);
    swift_retain();
    do
    {
      sub_1B1F282E0(v6 + v10[3], a2, a3, *v10);
      v10 += 5;
      --v9;
    }
    while (v9);
    result = swift_release();
  }
  v11 = *(_QWORD *)(v7 + 16);
  if (v11)
  {
    v12 = (uint64_t *)(v7 + 32);
    swift_retain();
    do
    {
      sub_1B1F282E0(v6 + v12[3], a2, a3, *v12);
      v12 += 5;
      --v11;
    }
    while (v11);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B216BBD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v2)
    return 0;
  for (i = *(_QWORD *)v1 + 56; *(_QWORD *)(i - 24) != a1; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return *(_QWORD *)i;
}

uint64_t sub_1B216BC24(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B216D538(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1B216C2B8(v5);
  *a1 = v2;
  return result;
}

BOOL ComponentStorageLayout.isCompatible(with:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *i;

  if (v1[5] == a1[5])
  {
    v2 = a1[2];
    v3 = v1[2];
    v4 = *(_QWORD *)(v3 + 16);
    if (v4 == *(_QWORD *)(v2 + 16))
    {
      if (v4)
        v5 = v3 == v2;
      else
        v5 = 1;
      if (v5)
        return sub_1B216BFB8(v1[1], a1[1]);
      v6 = (_QWORD *)(v3 + 32);
      for (i = (_QWORD *)(v2 + 32); *v6 == *i && v6[3] == i[3]; i += 5)
      {
        v6 += 5;
        if (!--v4)
          return sub_1B216BFB8(v1[1], a1[1]);
      }
    }
  }
  return 0;
}

uint64_t sub_1B216BD08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = a1 + 40;
    v4 = 1;
    do
    {
      v5 = *(_QWORD *)(v3 - 8);
      v6 = sub_1B1F24AA4(v5);
      v7 = sub_1B1F24B84(v5);
      if (v7 > v4)
        v4 = v7;
      v8 = (v2 + v7 - 1) & -v7;
      if (v6 <= 0)
        v8 = v2;
      v2 = v8 + v6;
      v3 += 16;
      --v1;
    }
    while (v1);
  }
  else
  {
    v2 = 0;
    v4 = 1;
  }
  return (v4 + v2 - 1) & -v4;
}

uint64_t sub_1B216BDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = v3;
  v8 = v3[3];
  v9 = sub_1B1F24B84(a1);
  v10 = (v8 + v9 - 1) & -v9;
  v3[3] = v10 + sub_1B1F24AA4(a1);
  v11 = sub_1B1F24AA4(a1);
  v12 = sub_1B1F24B94(a1);
  v13 = *v3;
  v14 = *(_QWORD *)(*v4 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v4 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_1B202A08C(0, v14 + 1, 1);
    v13 = *v4;
  }
  v28 = v14;
  v17 = *(_QWORD *)(v13 + 16);
  v16 = *(_QWORD *)(v13 + 24);
  if (v17 >= v16 >> 1)
  {
    sub_1B202A08C(v16 > 1, v17 + 1, 1);
    v13 = *v4;
  }
  *(_QWORD *)(v13 + 16) = v17 + 1;
  v18 = v13 + 40 * v17;
  *(_QWORD *)(v18 + 32) = a1;
  *(_QWORD *)(v18 + 40) = a2;
  *(_QWORD *)(v18 + 48) = v11;
  *(_QWORD *)(v18 + 56) = v10;
  v19 = v12;
  *(_BYTE *)(v18 + 64) = v12;
  *v4 = v13;
  result = sub_1B1F24AA4(a1);
  if (result >= 1)
  {
    if (v12)
    {
      v23 = v4[2];
      v22 = v4 + 2;
      v21 = v23;
    }
    else
    {
      v24 = v4[1];
      v22 = v4 + 1;
      v21 = v24;
    }
    result = swift_isUniquelyReferenced_nonNull_native();
    *v22 = v21;
    if ((result & 1) == 0)
    {
      result = sub_1B202A08C(0, *(_QWORD *)(v21 + 16) + 1, 1);
      v21 = *v22;
    }
    v26 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    if (v26 >= v25 >> 1)
    {
      result = sub_1B202A08C(v25 > 1, v26 + 1, 1);
      v21 = *v22;
    }
    *(_QWORD *)(v21 + 16) = v26 + 1;
    v27 = v21 + 40 * v26;
    *(_QWORD *)(v27 + 32) = a1;
    *(_QWORD *)(v27 + 40) = a2;
    *(_QWORD *)(v27 + 48) = v11;
    *(_QWORD *)(v27 + 56) = v10;
    *(_BYTE *)(v27 + 64) = v19;
    *v22 = v21;
  }
  *(_QWORD *)a3 = v28;
  *(_QWORD *)(a3 + 8) = a1;
  *(_QWORD *)(a3 + 16) = a2;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = v10;
  *(_BYTE *)(a3 + 40) = v19;
  return result;
}

BOOL sub_1B216BF98(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[3] == a2[3];
}

BOOL sub_1B216BFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (_QWORD *)(a1 + 32);
  v4 = (_QWORD *)(a2 + 32);
  v5 = v2 - 1;
  do
  {
    result = *v3 == *v4 && v3[3] == v4[3];
    v9 = v5-- != 0;
    if (!result)
      break;
    v4 += 5;
    v3 += 5;
  }
  while (v9);
  return result;
}

uint64_t destroy for ComponentStorageLayout()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ComponentStorageLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ComponentStorageLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v4;
  return a1;
}

__n128 initializeWithTake for ComponentStorageLayout(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ComponentStorageLayout(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ComponentStorageLayout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ComponentStorageLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentStorageLayout()
{
  return &type metadata for ComponentStorageLayout;
}

ValueMetadata *type metadata accessor for ComponentStorageLayout.ComponentLayout()
{
  return &type metadata for ComponentStorageLayout.ComponentLayout;
}

uint64_t sub_1B216C2B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;

  v2 = v1;
  v4 = a1[1];
  result = sub_1B22299E8();
  if (result >= v4)
  {
    if (v4)
      return sub_1B216C8B8(0, v4, 1, a1);
    return result;
  }
  v72 = result;
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  v67 = a1;
  if (v4 >= 2)
  {
    v7 = v6 >> 1;
    sub_1B19F66EC();
    v8 = sub_1B2228B0C();
    *(_QWORD *)(v8 + 16) = v7;
    v70 = v8;
    v9 = v8 + 32;
    goto LABEL_12;
  }
  v10 = MEMORY[0x1E0DEE9D8];
  v78 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
  if (v4 == 1)
  {
    v70 = MEMORY[0x1E0DEE9D8];
    v9 = MEMORY[0x1E0DEE9D8] + 32;
LABEL_12:
    v11 = 0;
    v68 = *a1 + 40;
    v79 = *a1;
    v69 = *a1 - 16;
    v12 = (char *)MEMORY[0x1E0DEE9D8];
    v78 = (char *)v9;
    v75 = v4;
    do
    {
      v14 = v11++;
      if (v11 < v4)
      {
        v15 = (uint64_t *)(v79 + 16 * v14);
        v16 = *v15;
        v17 = v15[1];
        v73 = (*(uint64_t (**)(void))(*(_QWORD *)(v79 + 16 * v11 + 8) + 72))();
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 72))(v16, v17);
        v11 = v14 + 2;
        if (v14 + 2 < v4)
        {
          v76 = v14;
          v19 = v68 + 16 * v14;
          while (1)
          {
            v20 = *(_QWORD *)(v19 - 24);
            v21 = *(_QWORD *)(v19 - 16);
            v22 = (*(uint64_t (**)(void))(*(_QWORD *)v19 + 72))();
            if (v73 < v18 == v22 >= (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 72))(v20, v21))
              break;
            ++v11;
            v19 += 16;
            v4 = v75;
            if (v75 == v11)
            {
              v11 = v75;
              goto LABEL_22;
            }
          }
          v4 = v75;
LABEL_22:
          v14 = v76;
        }
        if (v73 < v18 && v14 < v11)
        {
          v23 = (__int128 *)(v69 + 16 * v11);
          v24 = v11;
          v25 = v14;
          v26 = (__int128 *)(v79 + 16 * v14);
          do
          {
            if (v25 != --v24)
            {
              v27 = *v26;
              *v26 = *v23;
              *v23 = v27;
            }
            ++v25;
            --v23;
            ++v26;
          }
          while (v25 < v24);
        }
      }
      if (v11 < v4 && v11 - v14 < v72)
      {
        v77 = v14;
        if (v14 + v72 >= v4)
          v28 = v4;
        else
          v28 = v14 + v72;
        if (v11 != v28)
        {
          v71 = v12;
          v74 = v2;
          v29 = v69 + 16 * v11;
          do
          {
            v30 = *(_OWORD *)(v79 + 16 * v11);
            v31 = v77;
            v32 = v29;
            do
            {
              v33 = *(_QWORD *)v32;
              v34 = *(_QWORD *)(v32 + 8);
              v35 = (*(uint64_t (**)(void))(*((_QWORD *)&v30 + 1) + 72))();
              if (v35 >= (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 72))(v33, v34))
                break;
              v36 = *(_OWORD *)v32;
              v30 = *(_OWORD *)(v32 + 16);
              *(_OWORD *)v32 = v30;
              *(_OWORD *)(v32 + 16) = v36;
              v32 -= 16;
              ++v31;
            }
            while (v11 != v31);
            ++v11;
            v29 += 16;
          }
          while (v11 != v28);
          v11 = v28;
          v2 = v74;
          v12 = v71;
        }
        v14 = v77;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = sub_1B216CC74(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
      v38 = *((_QWORD *)v12 + 2);
      v37 = *((_QWORD *)v12 + 3);
      v13 = v38 + 1;
      if (v38 >= v37 >> 1)
        v12 = sub_1B216CC74(v37 > 1, v38 + 1, 1, v12);
      *((_QWORD *)v12 + 2) = v13;
      v39 = v12 + 32;
      v40 = &v12[16 * v38 + 32];
      *(_QWORD *)v40 = v14;
      *((_QWORD *)v40 + 1) = v11;
      if (v38)
      {
        while (1)
        {
          v41 = v13 - 1;
          if (v13 >= 4)
          {
            v46 = &v39[16 * v13];
            v47 = *((_QWORD *)v46 - 7) - *((_QWORD *)v46 - 8);
            v44 = *((_QWORD *)v46 - 5) - *((_QWORD *)v46 - 6);
            v45 = v13 - 2;
            v48 = &v39[16 * v13 - 32];
            v42 = *(_QWORD *)v48;
            v43 = *((_QWORD *)v48 + 1);
            if (v44 - v42 + v43 >= v47)
            {
              v51 = v44 < *(_QWORD *)&v39[16 * v41 + 8] - *(_QWORD *)&v39[16 * v41];
              goto LABEL_58;
            }
          }
          else
          {
            if (v13 != 3)
            {
              v49 = *(_QWORD *)&v39[16 * v13 - 24] - *(_QWORD *)&v39[16 * v13 - 32];
              v50 = *(_QWORD *)&v39[16 * v41 + 8] - *(_QWORD *)&v39[16 * v41];
LABEL_55:
              if (v50 < v49)
                goto LABEL_14;
              goto LABEL_60;
            }
            v42 = *((_QWORD *)v12 + 6);
            v43 = *((_QWORD *)v12 + 7);
            v44 = *((_QWORD *)v12 + 5) - *((_QWORD *)v12 + 4);
            v45 = 1;
          }
          v49 = v43 - v42;
          v50 = *(_QWORD *)&v39[16 * v41 + 8] - *(_QWORD *)&v39[16 * v41];
          if (v49 + v50 < v44)
            goto LABEL_55;
          v51 = v44 < v50;
LABEL_58:
          if (v51)
            v41 = v45;
LABEL_60:
          v52 = v12;
          v53 = &v39[16 * v41 - 16];
          v54 = *(_QWORD *)v53;
          v55 = &v39[16 * v41];
          v56 = *((_QWORD *)v55 + 1);
          sub_1B216C994((char *)(v79 + 16 * *(_QWORD *)v53), (char *)(v79 + 16 * *(_QWORD *)v55), v79 + 16 * v56, v78);
          if (v2)
            goto LABEL_71;
          *(_QWORD *)v53 = v54;
          *((_QWORD *)v53 + 1) = v56;
          v12 = v52;
          v57 = *((_QWORD *)v52 + 2);
          v13 = v57 - 1;
          memmove(&v39[16 * v41], v55 + 16, 16 * (v57 - 1 - v41));
          *((_QWORD *)v52 + 2) = v57 - 1;
          if (v57 <= 2)
            goto LABEL_14;
        }
      }
      v13 = 1;
LABEL_14:
      v4 = v75;
    }
    while (v11 < v75);
    v10 = v70;
    goto LABEL_65;
  }
  v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_65:
  v70 = v10;
  if (v13 >= 2)
  {
    v58 = *v67;
    do
    {
      v59 = v12 + 32;
      v60 = (uint64_t)v12;
      v61 = *(_QWORD *)&v12[16 * v13];
      v62 = &v59[16 * v13 - 16];
      v63 = *((_QWORD *)v62 + 1);
      sub_1B216C994((char *)(v58 + 16 * v61), (char *)(v58 + 16 * *(_QWORD *)v62), v58 + 16 * v63, v78);
      if (v2)
        break;
      v64 = (char *)v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v64 = sub_1B216D510(v60);
      v65 = &v64[16 * v13];
      *(_QWORD *)v65 = v61;
      *((_QWORD *)v65 + 1) = v63;
      v66 = *((_QWORD *)v64 + 2);
      memmove(&v64[16 * v13 + 16], &v64[16 * v13 + 32], 16 * (v66 - v13));
      *((_QWORD *)v64 + 2) = v66 - 1;
      v13 = v66 - 1;
      v12 = v64;
    }
    while (v66 > 2);
  }
LABEL_71:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v70 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B216C8B8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v14 = *a4;
    v6 = *a4 + 16 * a3 - 16;
    do
    {
      v7 = *(_OWORD *)(v14 + 16 * v4);
      v8 = v15;
      v9 = v6;
      do
      {
        v10 = *(_QWORD *)v9;
        v11 = *(_QWORD *)(v9 + 8);
        v12 = (*(uint64_t (**)(void))(*((_QWORD *)&v7 + 1) + 72))();
        result = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 72))(v10, v11);
        if (v12 >= result)
          break;
        v13 = *(_OWORD *)v9;
        v7 = *(_OWORD *)(v9 + 16);
        *(_OWORD *)v9 = v7;
        *(_OWORD *)(v9 + 16) = v13;
        v9 -= 16;
        ++v8;
      }
      while (v4 != v8);
      ++v4;
      v6 += 16;
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t sub_1B216C994(char *a1, char *__src, unint64_t a3, char *a4)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t result;
  char *v32;
  char *v33;
  char *v34;
  char *v35;

  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 15;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 4;
  v9 = a3 - (_QWORD)__src;
  v10 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v10 = a3 - (_QWORD)__src;
  v11 = v10 >> 4;
  v35 = a1;
  v34 = a4;
  if (v8 >= v10 >> 4)
  {
    if (v9 >= -15)
    {
      if (a4 != __src || &__src[16 * v11] <= a4)
        memmove(a4, __src, 16 * v11);
      v19 = &a4[16 * v11];
      v33 = v19;
      v35 = v5;
      if (a1 < v5 && v9 >= 16)
      {
        v20 = (char *)(a3 - 16);
        v21 = v5;
        while (1)
        {
          v32 = v5;
          v22 = v19 - 16;
          v23 = v20 + 16;
          v24 = *((_QWORD *)v21 - 2);
          v25 = *((_QWORD *)v21 - 1);
          v21 -= 16;
          v26 = (unint64_t)v19;
          v27 = (*(uint64_t (**)(void))(*((_QWORD *)v19 - 1) + 72))();
          if (v27 >= (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 72))(v24, v25))
          {
            v33 = v22;
            if ((unint64_t)v23 < v26 || (unint64_t)v20 >= v26 || v23 != (char *)v26)
              *(_OWORD *)v20 = *(_OWORD *)v22;
            v28 = a4;
            v21 = v32;
            v19 = v22;
            if (v32 <= a1)
              goto LABEL_43;
          }
          else
          {
            if (v23 != v32 || v20 >= v32)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v35 = v21;
            v28 = a4;
            v19 = (char *)v26;
            if (v21 <= a1)
              goto LABEL_43;
          }
          v20 -= 16;
          v5 = v21;
          if (v19 <= v28)
            goto LABEL_43;
        }
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -15)
  {
    v12 = a4;
    if (a4 != a1 || &a1[16 * v8] <= a4)
      memmove(a4, a1, 16 * v8);
    v13 = &a4[16 * v8];
    v33 = v13;
    if ((unint64_t)v5 < a3 && v6 >= 16)
    {
      v14 = a1;
      do
      {
        v15 = *(_QWORD *)v12;
        v16 = *((_QWORD *)v12 + 1);
        v17 = (*(uint64_t (**)(void))(*((_QWORD *)v5 + 1) + 72))();
        if (v17 >= (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 72))(v15, v16))
        {
          if (v14 != v12)
            *(_OWORD *)v14 = *(_OWORD *)v12;
          v12 += 16;
          v34 = v12;
          v18 = v5;
        }
        else
        {
          v18 = v5 + 16;
          if (v14 < v5 || v14 >= v18 || v14 != v5)
            *(_OWORD *)v14 = *(_OWORD *)v5;
        }
        v14 += 16;
        if (v12 >= v13)
          break;
        v5 = v18;
      }
      while ((unint64_t)v18 < a3);
      v35 = v14;
    }
LABEL_43:
    sub_1B216CD50((void **)&v35, (const void **)&v34, &v33);
    return 1;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

char *sub_1B216CC74(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1AED6E8();
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9])
      memmove(v14, v15, 16 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v9);
  }
  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1B216CD50(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1B216CDF8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -104)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 104;
    if (result != v3 || result >= &v3[104 * v6])
      return (char *)memmove(result, v3, 104 * v6);
  }
  return result;
}

char *sub_1B216CEB8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1B216CF60(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -80)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 80;
    if (result != v3 || result >= &v3[80 * v6])
      return (char *)memmove(result, v3, 80 * v6);
  }
  return result;
}

char *sub_1B216D01C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -112)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 112 * (v4 / 112);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_1B216D0D8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -12)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 12;
    if (result != v3 || result >= &v3[12 * v6])
      return (char *)memmove(result, v3, 12 * v6);
  }
  return result;
}

char *sub_1B216D194(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -48)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 48;
    if (result != v3 || result >= &v3[48 * v6])
      return (char *)memmove(result, v3, 48 * v6);
  }
  return result;
}

char *sub_1B216D250(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -96)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 96;
    if (result != v3 || result >= &v3[96 * v6])
      return (char *)memmove(result, v3, 96 * v6);
  }
  return result;
}

char *sub_1B216D30C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_1B216D3C4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 31;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -32)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7])
      return (char *)memmove(result, v3, 32 * v7);
  }
  return result;
}

char *sub_1B216D46C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_1B216D510(uint64_t a1)
{
  return sub_1B216CC74(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D524(uint64_t a1)
{
  return sub_1B202B618(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D538(uint64_t a1)
{
  return sub_1B202B7A4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D54C(uint64_t a1)
{
  return sub_1B202B62C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D560(uint64_t a1)
{
  return sub_1B202B4C0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D574(uint64_t a1)
{
  return sub_1B202C1D4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D588(uint64_t a1)
{
  return sub_1B202B35C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D59C(_QWORD *a1)
{
  return sub_1B202C4E0(0, a1[2], 0, a1);
}

uint64_t sub_1B216D5B0(uint64_t a1)
{
  return sub_1B202B908(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D5C4(uint64_t a1)
{
  return sub_1B202E674(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D5D8(uint64_t a1)
{
  return sub_1B202CC70(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B216D5EC(_QWORD *a1)
{
  return sub_1B20307D4(0, a1[2], 0, a1);
}

void sub_1B216D600()
{
  JUMPOUT(0x1B5E21588);
}

uint64_t sub_1B216D618()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FixedArray10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FixedArray10);
}

uint64_t sub_1B216D6E8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FixedArray8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FixedArray8);
}

void (*sub_1B216D7B4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  v9[2] = v4;
  *v9 = a3;
  v10 = sub_1B222A03C();
  v9[3] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[4] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v9[5] = malloc(v12);
  v13 = (char *)malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v14 = sub_1B2228E48();
  v9[7] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v9[8] = v15;
  v9[9] = malloc(*(_QWORD *)(v15 + 64));
  (*(void (**)(void))(v15 + 16))();
  sub_1B216DA28(a2, a3, a4, v13);
  return sub_1B216D8F4;
}

void sub_1B216D8F4(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, uint64_t);
  uint64_t v10;

  v2 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v3 = *(void **)(*(_QWORD *)a1 + 72);
  v5 = *(void **)(*(_QWORD *)a1 + 48);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, _QWORD))(v7 + 16))(v2[5], v5, v2[3]);
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE48], v8);
    sub_1B2229A00();
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v6, v8);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
  }
  else
  {
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE48], v2[3]);
    sub_1B2229A00();
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v10);
    v9 = *(void (**)(void *, uint64_t))(v7 + 8);
  }
  v9(v5, v8);
  free(v3);
  free(v5);
  free(v6);
  free(v2);
}

uint64_t sub_1B216DA28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t TupleTypeMetadata2;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;

  v60 = a1;
  v61 = a4;
  v6 = *(_QWORD *)(a3 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v50 - v13;
  v53 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v50 - v21;
  swift_getAssociatedConformanceWitness();
  v23 = sub_1B2228E48();
  v24 = *(_QWORD *)(v23 - 8);
  v58 = v23;
  v59 = v24;
  MEMORY[0x1E0C80A78](v23, v25);
  v52 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v50 - v29;
  v54 = v4;
  v55 = a2;
  v56 = v6;
  sub_1B2228D4C();
  sub_1B2228D88();
  sub_1B2228668();
  v31 = TupleTypeMetadata2;
  v32 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  v33 = v53;
  v34 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  v51 = v14;
  v34(v14, v22, AssociatedTypeWitness);
  v34(v32, v18, AssociatedTypeWitness);
  v35 = &v10[*(int *)(v31 + 48)];
  v36 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  v36(v10, v14, AssociatedTypeWitness);
  v36(v35, v32, AssociatedTypeWitness);
  v37 = v52;
  v34(v52, v10, AssociatedTypeWitness);
  v38 = *(void (**)(char *, uint64_t))(v33 + 8);
  v38(v35, AssociatedTypeWitness);
  v39 = &v10[*(int *)(v31 + 48)];
  v40 = v10;
  v34(v10, v51, AssociatedTypeWitness);
  v34(v39, v32, AssociatedTypeWitness);
  v41 = v58;
  v34(&v37[*(int *)(v58 + 36)], v39, AssociatedTypeWitness);
  v38(v40, AssociatedTypeWitness);
  v42 = v59;
  v43 = v41;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v30, v37, v41);
  v44 = v60;
  v46 = v54;
  v45 = v55;
  sub_1B2228D64();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v41);
  v47 = sub_1B222A03C();
  v48 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(&v61[*(int *)(v47 + 40)], v46, v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v30, v44, v43);
  v34(v48, v30, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, char *, uint64_t))v34)(&v48[*(int *)(v47 + 36)], &v30[*(int *)(v43 + 36)], AssociatedTypeWitness);
}

uint64_t sub_1B216DDA8(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *TupleTypeMetadata;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  char *v67;
  int *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  void (*v84)(char *, char *, uint64_t, double);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  void (*v129)(void);
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  char *v155;
  void (*v156)(char *, uint64_t);
  char *v157;
  char *v158;
  int *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  void (*v177)(void);
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(char *, uint64_t);
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  int *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  void (*v224)(void);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  void (*v247)(char *, uint64_t);
  char *v248;
  char *v249;
  char *v250;
  int *v251;
  uint64_t v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  void (*v269)(void);
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  void (*v293)(char *, uint64_t);
  char *v294;
  uint64_t v295;
  char *v296;
  char *v297;
  char *v298;
  char *v299;
  int *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  void (*v317)(void);
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  char *v330;
  char *v331;
  char *v332;
  char *v333;
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  uint64_t v340;
  void (*v341)(char *, uint64_t);
  char *v342;
  uint64_t v343;
  char *v344;
  char *v345;
  char *v346;
  int *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  char *v358;
  char *v359;
  char *v360;
  char *v361;
  char *v362;
  char *v363;
  char *v364;
  void (*v365)(void);
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char *v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  void (*v383)(char *, uint64_t);
  char *v384;
  char *v385;
  char *v386;
  char *v387;
  char *v388;
  char *v389;
  char *v390;
  char *v391;
  uint64_t v392;
  char *v393;
  char *v394;
  int *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  char *v406;
  char *v407;
  char *v408;
  char *v409;
  char *v410;
  char *v411;
  char *v412;
  void (*v413)(void);
  uint64_t v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  char *v425;
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  void (*v431)(char *, uint64_t);
  char *v432;
  char *v433;
  char *v434;
  char *v435;
  char *v436;
  char *v437;
  char *v438;
  uint64_t v439;
  char *v440;
  char *v441;
  char *v442;
  uint64_t v443;
  char *v444;
  int *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  char *v456;
  char *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  void (*v463)(void);
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  char *v473;
  char *v474;
  char *v475;
  char *v476;
  char *v477;
  char *v478;
  char *v479;
  char *v480;
  uint64_t v481;
  char *v482;
  char *v483;
  char *v484;
  char *v485;
  char *v486;
  void (*v487)(char *, uint64_t);
  char *v488;
  char *v489;
  char *v490;
  int *v491;
  uint64_t v492;
  char *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  char *v503;
  char *v504;
  char *v505;
  char *v506;
  char *v507;
  void (*v508)(void);
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  char *v518;
  char *v519;
  char *v520;
  char *v521;
  char *v522;
  char *v523;
  char *v524;
  char *v525;
  char *v526;
  char v527;
  char *v528;
  uint64_t v529;
  void (*v530)(char *, uint64_t);
  void (*v531)(char *, uint64_t);
  char *v532;
  char *v533;
  char *v534;
  char *v535;
  char *v536;
  void (*v537)(char *, uint64_t);
  char *v538;
  char *v539;
  char *v540;
  char *v541;
  char *v542;
  char *v543;
  char *v544;
  char *v545;
  char *v546;
  void (*v547)(char *, uint64_t);
  char *v548;
  char *v549;
  void (*v550)(char *, uint64_t);
  char *v552;
  char *v553;
  char *v554;
  char *v555;
  char *v556;
  char *v557;
  char *v558;
  char *v559;
  char *v560;
  char *v561;
  int *v562;
  char *v563;
  char *v564;
  char *v565;
  char *v566;
  char *v567;
  char *v568;
  char *v569;
  char *v570;
  char *v571;
  char *v572;
  char *v573;
  char *v574;
  char *v575;
  char *v576;
  void (*v577)(void);
  char *v578;
  char *v579;
  char *v580;
  char *v581;
  char *v582;
  char *v583;
  char *v584;
  char *v585;
  char *v586;
  char *v587;
  char *v588;
  char *v589;
  char *v590;
  char *v591;
  char *v592;
  char *v593;
  char *v594;
  char *v595;
  char *v596;
  uint64_t v597;
  char *v598;
  void (*v599)(char *, uint64_t);
  char *v600;
  char *v601;
  char *v602;
  char *v603;
  char *v604;
  char *v605;
  char *v606;
  char *v607;
  uint64_t v608;
  char *v609;
  char *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;

  v597 = a4;
  v609 = a2;
  v608 = type metadata accessor for FixedArray10(0, a3, a3, a4);
  v599 = *(void (**)(char *, uint64_t))(v608 - 8);
  MEMORY[0x1E0C80A78](v608, v6);
  v563 = (char *)&v556 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v589 = (char *)&v556 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v565 = (char *)&v556 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v590 = (char *)&v556 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v572 = (char *)&v556 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v591 = (char *)&v556 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v571 = (char *)&v556 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v592 = (char *)&v556 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v570 = (char *)&v556 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v564 = (char *)&v556 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v569 = (char *)&v556 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v566 = (char *)&v556 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v568 = (char *)&v556 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v567 = (char *)&v556 - v46;
  MEMORY[0x1E0C80A78](v47, v48);
  v594 = (char *)&v556 - v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v593 = (char *)&v556 - v52;
  MEMORY[0x1E0C80A78](v53, v54);
  v598 = (char *)&v556 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v595 = (char *)&v556 - v58;
  v611 = a3;
  v612 = a3;
  v613 = a3;
  v614 = a3;
  v615 = a3;
  v616 = a3;
  v617 = a3;
  v618 = a3;
  v619 = a3;
  v620 = a3;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v60);
  v62 = (char *)&v556 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = MEMORY[0x1E0C80A78](v63, v64);
  v67 = (char *)&v556 - v66;
  v69 = v68[12];
  v70 = (char *)&v556 + v69 - v66;
  v588 = v70;
  v71 = v68[16];
  v72 = (char *)&v556 + v71 - v66;
  v587 = v72;
  v73 = v68[20];
  v74 = (char *)&v556 + v73 - v66;
  v586 = v74;
  v75 = v68[24];
  v607 = (char *)&v556 + v75 - v66;
  v76 = v68[28];
  v606 = &v67[v76];
  v77 = v68[32];
  v605 = &v67[v77];
  v78 = v68[36];
  v604 = &v67[v78];
  v79 = v68[40];
  v603 = &v67[v79];
  v80 = v68[44];
  v602 = &v67[v80];
  v81 = a1;
  v82 = &a1[v69];
  v83 = &v81[v71];
  v580 = &v81[v73];
  v581 = &v81[v75];
  v582 = &v81[v76];
  v583 = &v81[v77];
  v584 = &v81[v78];
  v600 = &v81[v79];
  v601 = &v81[v80];
  v610 = v81;
  v585 = *(char **)(a3 - 8);
  v84 = (void (*)(char *, char *, uint64_t, double))*((_QWORD *)v585 + 2);
  v84(v67, v81, a3, v65);
  ((void (*)(char *, char *, uint64_t))v84)(v70, v82, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v72, v83, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v74, v580, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v607, v581, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v606, v582, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v605, v583, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v604, v584, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v603, v600, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v602, v601, a3);
  v85 = TupleTypeMetadata[12];
  v86 = &v62[v85];
  v583 = &v62[v85];
  v87 = TupleTypeMetadata[16];
  v601 = &v62[v87];
  v88 = TupleTypeMetadata[20];
  v89 = &v62[v88];
  v582 = &v62[v88];
  v90 = TupleTypeMetadata[24];
  v600 = &v62[v90];
  v91 = TupleTypeMetadata[28];
  v576 = &v62[v91];
  v92 = TupleTypeMetadata[32];
  v578 = &v62[v92];
  v93 = TupleTypeMetadata[36];
  v579 = &v62[v93];
  v94 = TupleTypeMetadata[40];
  v580 = &v62[v94];
  v562 = TupleTypeMetadata;
  v95 = TupleTypeMetadata[44];
  v581 = &v62[v95];
  v96 = &v609[v85];
  v97 = &v609[v87];
  v98 = &v609[v88];
  v99 = &v609[v90];
  v573 = &v609[v91];
  v574 = &v609[v92];
  v575 = &v609[v93];
  v577 = (void (*)(void))&v609[v94];
  v584 = &v609[v95];
  ((void (*)(char *))v84)(v62);
  ((void (*)(char *, char *, uint64_t))v84)(v86, v96, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v601, v97, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v89, v98, a3);
  ((void (*)(char *, char *, uint64_t))v84)(v600, v99, a3);
  v100 = v576;
  ((void (*)(char *, char *, uint64_t))v84)(v576, v573, a3);
  v101 = v578;
  ((void (*)(char *, char *, uint64_t))v84)(v578, v574, a3);
  v102 = v579;
  ((void (*)(char *, char *, uint64_t))v84)(v579, v575, a3);
  v103 = v580;
  ((void (*)(char *, void (*)(void), uint64_t))v84)(v580, v577, a3);
  v104 = v581;
  v577 = (void (*)(void))v84;
  ((void (*)(char *, char *, uint64_t))v84)(v581, v584, a3);
  v105 = v595;
  LODWORD(v584) = sub_1B22286E0();
  v106 = (char *)*((_QWORD *)v585 + 1);
  ((void (*)(char *, uint64_t))v106)(v104, a3);
  ((void (*)(char *, uint64_t))v106)(v103, a3);
  ((void (*)(char *, uint64_t))v106)(v102, a3);
  ((void (*)(char *, uint64_t))v106)(v101, a3);
  ((void (*)(char *, uint64_t))v106)(v100, a3);
  ((void (*)(char *, uint64_t))v106)(v600, a3);
  ((void (*)(char *, uint64_t))v106)(v582, a3);
  ((void (*)(char *, uint64_t))v106)(v601, a3);
  ((void (*)(char *, uint64_t))v106)(v583, a3);
  v601 = v62;
  ((void (*)(char *, uint64_t))v106)(v62, a3);
  ((void (*)(char *, uint64_t))v106)(v602, a3);
  ((void (*)(char *, uint64_t))v106)(v603, a3);
  ((void (*)(char *, uint64_t))v106)(v604, a3);
  ((void (*)(char *, uint64_t))v106)(v605, a3);
  ((void (*)(char *, uint64_t))v106)(v606, a3);
  ((void (*)(char *, uint64_t))v106)(v607, a3);
  ((void (*)(char *, uint64_t))v106)(v586, a3);
  ((void (*)(char *, uint64_t))v106)(v587, a3);
  ((void (*)(char *, uint64_t))v106)(v588, a3);
  v596 = v67;
  v607 = (char *)a3;
  ((void (*)(char *, uint64_t))v106)(v67, a3);
  v107 = (char *)*((_QWORD *)v599 + 2);
  v108 = v608;
  ((void (*)(char *, char *, uint64_t))v107)(v105, v610, v608);
  v109 = v609;
  v110 = v108;
  ((void (*)(char *))v107)(v598);
  if ((v584 & 1) == 0)
  {
    v531 = (void (*)(char *, uint64_t))*((_QWORD *)v599 + 1);
    v531(v598, v108);
    v531(v105, v108);
    v158 = v593;
    ((void (*)(char *, char *, uint64_t))v107)(v593, v610, v108);
    v532 = v594;
    ((void (*)(char *, char *, uint64_t))v107)(v594, v109, v108);
    v533 = v592;
    v298 = v564;
    v249 = v566;
    v204 = v567;
    v534 = v532;
LABEL_13:
    v531(v534, v110);
    v531(v158, v110);
    ((void (*)(char *, char *, uint64_t))v107)(v204, v610, v110);
    v535 = v568;
    ((void (*)(char *, char *, uint64_t))v107)(v568, v109, v110);
    v536 = v535;
    v537 = v531;
    v442 = v590;
    v345 = v533;
    v537(v536, v110);
LABEL_14:
    v537(v204, v110);
    ((void (*)(char *, char *, uint64_t))v107)(v249, v610, v110);
    v538 = v569;
    ((void (*)(char *, char *, uint64_t))v107)(v569, v109, v110);
    v539 = v538;
    v540 = v563;
    v537(v539, v110);
LABEL_15:
    v537(v249, v110);
    ((void (*)(char *, char *, uint64_t))v107)(v298, v610, v110);
    v541 = v570;
    ((void (*)(char *, char *, uint64_t))v107)(v570, v109, v110);
    v542 = v541;
    v543 = v565;
    v537(v542, v110);
LABEL_16:
    v537(v298, v110);
    ((void (*)(char *, char *, uint64_t))v107)(v345, v610, v110);
    v544 = v571;
    ((void (*)(char *, char *, uint64_t))v107)(v571, v109, v110);
    v545 = v591;
    v537(v544, v110);
LABEL_17:
    v537(v345, v110);
    ((void (*)(char *, char *, uint64_t))v107)(v545, v610, v110);
    v546 = v545;
    v547 = v537;
    v548 = v572;
    ((void (*)(char *, char *, uint64_t))v107)(v572, v109, v110);
    v549 = v548;
    v550 = v547;
    v393 = v546;
    v488 = v589;
    v550(v549, v110);
LABEL_18:
    v550(v393, v110);
    ((void (*)(char *, char *, uint64_t))v107)(v442, v610, v110);
    ((void (*)(char *, char *, uint64_t))v107)(v543, v109, v110);
    v550(v543, v110);
LABEL_19:
    v550(v442, v110);
    ((void (*)(char *, char *, uint64_t))v107)(v488, v610, v110);
    ((void (*)(char *, char *, uint64_t))v107)(v540, v109, v110);
    v550(v540, v110);
LABEL_20:
    v550(v488, v110);
    v527 = 0;
    return v527 & 1;
  }
  v588 = v107;
  v111 = v562;
  v112 = v562[12];
  v575 = &v105[v112];
  v113 = v562[16];
  v576 = &v105[v113];
  v114 = v562[20];
  v578 = &v105[v114];
  v115 = v562[24];
  v600 = v106;
  v579 = &v105[v115];
  v116 = v562[28];
  v580 = &v105[v116];
  v117 = v562[32];
  v581 = &v105[v117];
  v118 = v562[36];
  v582 = &v105[v118];
  v119 = v562[40];
  v602 = &v105[v119];
  v120 = v562[44];
  v121 = &v105[v120];
  v122 = &v596[v112];
  v603 = &v596[v112];
  v123 = &v596[v113];
  v587 = &v596[v113];
  v124 = &v596[v114];
  v586 = &v596[v114];
  v125 = &v596[v115];
  v585 = &v596[v115];
  v126 = &v596[v116];
  v584 = &v596[v116];
  v127 = &v596[v117];
  v583 = &v596[v117];
  v606 = &v596[v118];
  v605 = &v596[v119];
  v604 = &v596[v120];
  v128 = v607;
  v129 = v577;
  v577();
  ((void (*)(char *, char *, char *))v129)(v122, v575, v128);
  ((void (*)(char *, char *, char *))v129)(v123, v576, v128);
  ((void (*)(char *, char *, char *))v129)(v124, v578, v128);
  ((void (*)(char *, char *, char *))v129)(v125, v579, v128);
  ((void (*)(char *, char *, char *))v129)(v126, v580, v128);
  ((void (*)(char *, char *, char *))v129)(v127, v581, v128);
  ((void (*)(char *, char *, char *))v129)(v606, v582, v128);
  ((void (*)(char *, char *, char *))v129)(v605, v602, v128);
  ((void (*)(char *, char *, char *))v129)(v604, v121, v128);
  v130 = v111[12];
  v131 = v598;
  v132 = &v598[v130];
  v133 = v111[16];
  v556 = &v598[v133];
  v134 = v111[20];
  v558 = &v598[v134];
  v135 = v111[24];
  v560 = &v598[v135];
  v136 = v111[28];
  v137 = &v598[v136];
  v138 = v111[32];
  v574 = &v598[v138];
  v139 = v111[36];
  v576 = &v598[v139];
  v140 = v111[40];
  v578 = &v598[v140];
  v141 = v111[44];
  v582 = &v598[v141];
  v142 = v601;
  v143 = &v601[v130];
  v573 = &v601[v130];
  v144 = &v601[v133];
  v581 = &v601[v133];
  v145 = &v601[v134];
  v580 = &v601[v134];
  v146 = &v601[v135];
  v579 = &v601[v135];
  v602 = &v601[v136];
  v557 = &v601[v138];
  v559 = &v601[v139];
  v561 = &v601[v140];
  v575 = &v601[v141];
  ((void (*)(char *, char *, char *))v129)(v601, v598, v128);
  ((void (*)(char *, char *, char *))v129)(v143, v132, v128);
  ((void (*)(char *, char *, char *))v129)(v144, v556, v128);
  v147 = v600;
  ((void (*)(char *, char *, char *))v129)(v145, v558, v128);
  ((void (*)(char *, char *, char *))v129)(v146, v560, v128);
  v148 = v137;
  v149 = v608;
  ((void (*)(char *, char *, char *))v129)(v602, v148, v128);
  v150 = v557;
  ((void (*)(char *, char *, char *))v129)(v557, v574, v128);
  v151 = v559;
  ((void (*)(char *, char *, char *))v129)(v559, v576, v128);
  v152 = v561;
  ((void (*)(char *, char *, char *))v129)(v561, v578, v128);
  v153 = v575;
  ((void (*)(char *, char *, char *))v129)(v575, v582, v128);
  v154 = v573;
  LODWORD(v582) = sub_1B22286E0();
  v155 = v131;
  v156 = (void (*)(char *, uint64_t))*((_QWORD *)v599 + 1);
  v156(v155, v149);
  v156(v595, v149);
  ((void (*)(char *, char *))v147)(v153, v128);
  ((void (*)(char *, char *))v147)(v152, v128);
  ((void (*)(char *, char *))v147)(v151, v128);
  ((void (*)(char *, char *))v147)(v150, v128);
  ((void (*)(char *, char *))v147)(v602, v128);
  ((void (*)(char *, char *))v147)(v579, v128);
  ((void (*)(char *, char *))v147)(v580, v128);
  ((void (*)(char *, char *))v147)(v581, v128);
  ((void (*)(char *, char *))v147)(v154, v128);
  v157 = v142;
  v107 = v588;
  ((void (*)(char *, char *))v147)(v157, v128);
  ((void (*)(char *, char *))v147)(v604, v128);
  ((void (*)(char *, char *))v147)(v605, v128);
  ((void (*)(char *, char *))v147)(v606, v128);
  ((void (*)(char *, char *))v147)(v583, v128);
  ((void (*)(char *, char *))v147)(v584, v128);
  ((void (*)(char *, char *))v147)(v585, v128);
  ((void (*)(char *, char *))v147)(v586, v128);
  ((void (*)(char *, char *))v147)(v587, v128);
  ((void (*)(char *, char *))v147)(v603, v128);
  ((void (*)(char *, char *))v147)(v596, v128);
  v158 = v593;
  ((void (*)(char *, char *, uint64_t))v107)(v593, v610, v149);
  v109 = v609;
  v110 = v149;
  ((void (*)(char *))v107)(v594);
  if ((v582 & 1) == 0)
  {
    v533 = v592;
    v298 = v564;
    v249 = v566;
    v204 = v567;
    v534 = v594;
    v531 = v156;
    goto LABEL_13;
  }
  v159 = v562;
  v160 = v562[12];
  v578 = &v158[v160];
  v161 = v562[16];
  v579 = &v158[v161];
  v162 = v562[20];
  v580 = &v158[v162];
  v163 = v562[24];
  v581 = &v158[v163];
  v164 = v562[28];
  v582 = &v158[v164];
  v165 = v562[32];
  v583 = &v158[v165];
  v166 = v562[36];
  v598 = &v158[v166];
  v167 = v562[40];
  v602 = &v158[v167];
  v168 = v562[44];
  v169 = &v158[v168];
  v599 = v156;
  v170 = &v596[v160];
  v595 = &v596[v160];
  v171 = &v596[v161];
  v604 = &v596[v161];
  v172 = &v596[v162];
  v587 = &v596[v162];
  v173 = &v596[v163];
  v586 = &v596[v163];
  v174 = &v596[v164];
  v585 = &v596[v164];
  v175 = &v596[v165];
  v584 = &v596[v165];
  v606 = &v596[v166];
  v605 = &v596[v167];
  v603 = &v596[v168];
  v176 = v607;
  v177 = v577;
  v577();
  ((void (*)(char *, char *, char *))v177)(v170, v578, v176);
  ((void (*)(char *, char *, char *))v177)(v171, v579, v176);
  ((void (*)(char *, char *, char *))v177)(v172, v580, v176);
  ((void (*)(char *, char *, char *))v177)(v173, v581, v176);
  ((void (*)(char *, char *, char *))v177)(v174, v582, v176);
  ((void (*)(char *, char *, char *))v177)(v175, v583, v176);
  ((void (*)(char *, char *, char *))v177)(v606, v598, v176);
  ((void (*)(char *, char *, char *))v177)(v605, v602, v176);
  ((void (*)(char *, char *, char *))v177)(v603, v169, v176);
  v178 = v159[12];
  v179 = v594;
  v180 = &v594[v178];
  v181 = v159[16];
  v559 = &v594[v181];
  v182 = v159[20];
  v560 = &v594[v182];
  v183 = v159[24];
  v573 = &v594[v183];
  v184 = v159[28];
  v574 = &v594[v184];
  v185 = v159[32];
  v576 = &v594[v185];
  v186 = v159[36];
  v578 = &v594[v186];
  v187 = v159[40];
  v579 = &v594[v187];
  v188 = v159[44];
  v583 = &v594[v188];
  v189 = v601;
  v190 = &v601[v178];
  v582 = &v601[v178];
  v191 = &v601[v181];
  v192 = &v601[v182];
  v581 = &v601[v182];
  v193 = &v601[v183];
  v580 = &v601[v183];
  v602 = &v601[v184];
  v598 = &v601[v185];
  v561 = &v601[v186];
  v575 = &v601[v187];
  v194 = &v601[v188];
  ((void (*)(char *, char *, char *))v177)(v601, v594, v176);
  ((void (*)(char *, char *, char *))v177)(v190, v180, v176);
  ((void (*)(char *, char *, char *))v177)(v191, v559, v176);
  v195 = v600;
  ((void (*)(char *, char *, char *))v177)(v192, v560, v176);
  ((void (*)(char *, char *, char *))v177)(v193, v573, v176);
  v196 = v608;
  ((void (*)(char *, char *, char *))v177)(v602, v574, v176);
  ((void (*)(char *, char *, char *))v177)(v598, v576, v176);
  v197 = v561;
  ((void (*)(char *, char *, char *))v177)(v561, v578, v176);
  v198 = v575;
  ((void (*)(char *, char *, char *))v177)(v575, v579, v176);
  ((void (*)(char *, char *, char *))v177)(v194, v583, v176);
  v107 = v588;
  LODWORD(v583) = sub_1B22286E0();
  v199 = v179;
  v200 = v196;
  v201 = v196;
  v202 = v599;
  v599(v199, v201);
  v202(v593, v200);
  v203 = v609;
  ((void (*)(char *, char *))v195)(v194, v176);
  ((void (*)(char *, char *))v195)(v198, v176);
  ((void (*)(char *, char *))v195)(v197, v176);
  ((void (*)(char *, char *))v195)(v598, v176);
  ((void (*)(char *, char *))v195)(v602, v176);
  ((void (*)(char *, char *))v195)(v580, v176);
  ((void (*)(char *, char *))v195)(v581, v176);
  ((void (*)(char *, char *))v195)(v191, v176);
  ((void (*)(char *, char *))v195)(v582, v176);
  ((void (*)(char *, char *))v195)(v189, v176);
  ((void (*)(char *, char *))v195)(v603, v176);
  ((void (*)(char *, char *))v195)(v605, v176);
  ((void (*)(char *, char *))v195)(v606, v176);
  ((void (*)(char *, char *))v195)(v584, v176);
  ((void (*)(char *, char *))v195)(v585, v176);
  ((void (*)(char *, char *))v195)(v586, v176);
  ((void (*)(char *, char *))v195)(v587, v176);
  ((void (*)(char *, char *))v195)(v604, v176);
  ((void (*)(char *, char *))v195)(v595, v176);
  ((void (*)(char *, char *))v195)(v596, v176);
  v204 = v567;
  v205 = v200;
  ((void (*)(char *, char *, uint64_t))v107)(v567, v610, v200);
  v206 = v568;
  v109 = v203;
  v110 = v205;
  ((void (*)(char *, char *, uint64_t))v107)(v568, v203, v205);
  if ((v583 & 1) == 0)
  {
    v442 = v590;
    v537 = v599;
    v345 = v592;
    v249 = v566;
    v552 = v206;
    v298 = v564;
    v599(v552, v205);
    goto LABEL_14;
  }
  v207 = v562;
  v208 = v562[12];
  v579 = &v204[v208];
  v209 = v562[16];
  v580 = &v204[v209];
  v210 = v562[20];
  v581 = &v204[v210];
  v211 = v562[24];
  v582 = &v204[v211];
  v212 = v562[28];
  v583 = &v204[v212];
  v213 = v562[32];
  v584 = &v204[v213];
  v214 = v562[36];
  v585 = &v204[v214];
  v215 = v562[40];
  v595 = &v204[v215];
  v216 = v562[44];
  v598 = &v204[v216];
  v217 = v206;
  v218 = &v596[v208];
  v594 = &v596[v208];
  v219 = &v596[v209];
  v593 = &v596[v209];
  v220 = &v596[v210];
  v602 = &v596[v210];
  v221 = &v596[v211];
  v587 = &v596[v211];
  v222 = &v596[v212];
  v586 = &v596[v212];
  v603 = &v596[v213];
  v606 = &v596[v214];
  v605 = &v596[v215];
  v604 = &v596[v216];
  v223 = v607;
  v224 = v577;
  v577();
  ((void (*)(char *, char *, char *))v224)(v218, v579, v223);
  ((void (*)(char *, char *, char *))v224)(v219, v580, v223);
  ((void (*)(char *, char *, char *))v224)(v220, v581, v223);
  ((void (*)(char *, char *, char *))v224)(v221, v582, v223);
  ((void (*)(char *, char *, char *))v224)(v222, v583, v223);
  ((void (*)(char *, char *, char *))v224)(v603, v584, v223);
  ((void (*)(char *, char *, char *))v224)(v606, v585, v223);
  ((void (*)(char *, char *, char *))v224)(v605, v595, v223);
  ((void (*)(char *, char *, char *))v224)(v604, v598, v223);
  v225 = v207[12];
  v559 = &v217[v225];
  v226 = v207[16];
  v560 = &v217[v226];
  v227 = v207[20];
  v561 = &v217[v227];
  v228 = v207[24];
  v573 = &v217[v228];
  v229 = v207[28];
  v574 = &v217[v229];
  v230 = v207[32];
  v576 = &v217[v230];
  v231 = v207[36];
  v579 = &v217[v231];
  v232 = v207[40];
  v580 = &v217[v232];
  v233 = v207[44];
  v585 = &v217[v233];
  v234 = v601;
  v235 = &v601[v225];
  v584 = &v601[v225];
  v236 = &v601[v226];
  v583 = &v601[v226];
  v237 = &v601[v227];
  v238 = &v601[v228];
  v582 = &v601[v228];
  v239 = &v601[v229];
  v581 = &v601[v229];
  v598 = &v601[v230];
  v595 = &v601[v231];
  v575 = &v601[v232];
  v578 = &v601[v233];
  ((void (*)(char *, char *, char *))v224)(v601, v217, v223);
  ((void (*)(char *, char *, char *))v224)(v235, v559, v223);
  ((void (*)(char *, char *, char *))v224)(v236, v560, v223);
  v240 = v237;
  v241 = v237;
  v107 = v588;
  ((void (*)(char *, char *, char *))v224)(v241, v561, v223);
  ((void (*)(char *, char *, char *))v224)(v238, v573, v223);
  ((void (*)(char *, char *, char *))v224)(v239, v574, v223);
  ((void (*)(char *, char *, char *))v224)(v598, v576, v223);
  ((void (*)(char *, char *, char *))v224)(v595, v579, v223);
  v242 = v575;
  ((void (*)(char *, char *, char *))v224)(v575, v580, v223);
  v243 = v578;
  ((void (*)(char *, char *, char *))v224)(v578, v585, v223);
  v244 = v600;
  LODWORD(v585) = sub_1B22286E0();
  v245 = v217;
  v246 = v608;
  v247 = v599;
  v599(v245, v608);
  v247(v204, v246);
  ((void (*)(char *, char *))v244)(v243, v223);
  ((void (*)(char *, char *))v244)(v242, v223);
  v248 = v609;
  ((void (*)(char *, char *))v244)(v595, v223);
  ((void (*)(char *, char *))v244)(v598, v223);
  ((void (*)(char *, char *))v244)(v581, v223);
  ((void (*)(char *, char *))v244)(v582, v223);
  ((void (*)(char *, char *))v244)(v240, v223);
  ((void (*)(char *, char *))v244)(v583, v223);
  ((void (*)(char *, char *))v244)(v584, v223);
  ((void (*)(char *, char *))v244)(v234, v223);
  ((void (*)(char *, char *))v244)(v604, v223);
  ((void (*)(char *, char *))v244)(v605, v223);
  ((void (*)(char *, char *))v244)(v606, v223);
  ((void (*)(char *, char *))v244)(v603, v223);
  ((void (*)(char *, char *))v244)(v586, v223);
  ((void (*)(char *, char *))v244)(v587, v223);
  ((void (*)(char *, char *))v244)(v602, v223);
  ((void (*)(char *, char *))v244)(v593, v223);
  ((void (*)(char *, char *))v244)(v594, v223);
  ((void (*)(char *, char *))v244)(v596, v223);
  v249 = v566;
  ((void (*)(char *, char *, uint64_t))v107)(v566, v610, v246);
  v250 = v569;
  v109 = v248;
  v110 = v246;
  ((void (*)(char *, char *, uint64_t))v107)(v569, v248, v246);
  if ((v585 & 1) == 0)
  {
    v540 = v563;
    v442 = v590;
    v537 = v599;
    v345 = v592;
    v553 = v250;
    v298 = v564;
    v599(v553, v110);
    goto LABEL_15;
  }
  v251 = v562;
  v252 = v562[12];
  v253 = v249;
  v579 = &v249[v252];
  v254 = v562[16];
  v580 = &v249[v254];
  v255 = v562[20];
  v581 = &v249[v255];
  v256 = v562[24];
  v582 = &v249[v256];
  v257 = v562[28];
  v583 = &v249[v257];
  v258 = v562[32];
  v584 = &v249[v258];
  v259 = v562[36];
  v585 = &v249[v259];
  v260 = v562[40];
  v595 = &v249[v260];
  v261 = v562[44];
  v598 = &v249[v261];
  v262 = v250;
  v263 = &v596[v252];
  v594 = &v596[v252];
  v264 = &v596[v254];
  v593 = &v596[v254];
  v265 = &v596[v255];
  v587 = &v596[v255];
  v266 = &v596[v256];
  v602 = &v596[v256];
  v267 = &v596[v257];
  v586 = &v596[v257];
  v603 = &v596[v258];
  v606 = &v596[v259];
  v605 = &v596[v260];
  v604 = &v596[v261];
  v268 = v607;
  v269 = v577;
  v577();
  ((void (*)(char *, char *, char *))v269)(v263, v579, v268);
  ((void (*)(char *, char *, char *))v269)(v264, v580, v268);
  ((void (*)(char *, char *, char *))v269)(v265, v581, v268);
  ((void (*)(char *, char *, char *))v269)(v266, v582, v268);
  ((void (*)(char *, char *, char *))v269)(v267, v583, v268);
  ((void (*)(char *, char *, char *))v269)(v603, v584, v268);
  ((void (*)(char *, char *, char *))v269)(v606, v585, v268);
  ((void (*)(char *, char *, char *))v269)(v605, v595, v268);
  ((void (*)(char *, char *, char *))v269)(v604, v598, v268);
  v270 = v251[12];
  v271 = &v262[v270];
  v272 = v251[16];
  v567 = &v262[v272];
  v273 = v251[20];
  v568 = &v262[v273];
  v274 = v251[24];
  v574 = &v262[v274];
  v275 = v251[28];
  v575 = &v262[v275];
  v276 = v251[32];
  v578 = &v262[v276];
  v277 = v251[36];
  v580 = &v262[v277];
  v278 = v251[40];
  v581 = &v262[v278];
  v279 = v251[44];
  v585 = &v262[v279];
  v280 = v601;
  v281 = &v601[v270];
  v584 = &v601[v270];
  v282 = &v601[v272];
  v583 = &v601[v272];
  v283 = &v601[v273];
  v582 = &v601[v273];
  v284 = &v601[v274];
  v598 = &v601[v275];
  v595 = &v601[v276];
  v573 = &v601[v277];
  v576 = &v601[v278];
  v579 = &v601[v279];
  ((void (*)(char *, char *, char *))v269)(v601, v262, v268);
  v285 = v271;
  v286 = v600;
  ((void (*)(char *, char *, char *))v269)(v281, v285, v268);
  ((void (*)(char *, char *, char *))v269)(v282, v567, v268);
  ((void (*)(char *, char *, char *))v269)(v283, v568, v268);
  ((void (*)(char *, char *, char *))v269)(v284, v574, v268);
  ((void (*)(char *, char *, char *))v269)(v598, v575, v268);
  ((void (*)(char *, char *, char *))v269)(v595, v578, v268);
  v287 = v573;
  ((void (*)(char *, char *, char *))v269)(v573, v580, v268);
  v288 = v576;
  ((void (*)(char *, char *, char *))v269)(v576, v581, v268);
  v289 = v579;
  ((void (*)(char *, char *, char *))v269)(v579, v585, v268);
  v290 = v284;
  LODWORD(v585) = sub_1B22286E0();
  v291 = v262;
  v292 = v608;
  v293 = v599;
  v599(v291, v608);
  v294 = v253;
  v295 = v292;
  v293(v294, v292);
  ((void (*)(char *, char *))v286)(v289, v268);
  ((void (*)(char *, char *))v286)(v288, v268);
  v296 = v609;
  ((void (*)(char *, char *))v286)(v287, v268);
  ((void (*)(char *, char *))v286)(v595, v268);
  ((void (*)(char *, char *))v286)(v598, v268);
  ((void (*)(char *, char *))v286)(v290, v268);
  ((void (*)(char *, char *))v286)(v582, v268);
  ((void (*)(char *, char *))v286)(v583, v268);
  ((void (*)(char *, char *))v286)(v584, v268);
  v297 = v280;
  v107 = v588;
  ((void (*)(char *, char *))v286)(v297, v268);
  ((void (*)(char *, char *))v286)(v604, v268);
  ((void (*)(char *, char *))v286)(v605, v268);
  ((void (*)(char *, char *))v286)(v606, v268);
  ((void (*)(char *, char *))v286)(v603, v268);
  ((void (*)(char *, char *))v286)(v586, v268);
  ((void (*)(char *, char *))v286)(v602, v268);
  ((void (*)(char *, char *))v286)(v587, v268);
  ((void (*)(char *, char *))v286)(v593, v268);
  ((void (*)(char *, char *))v286)(v594, v268);
  ((void (*)(char *, char *))v286)(v596, v268);
  v298 = v564;
  ((void (*)(char *, char *, uint64_t))v107)(v564, v610, v295);
  v299 = v570;
  v109 = v296;
  v110 = v295;
  ((void (*)(char *, char *, uint64_t))v107)(v570, v296, v295);
  if ((v585 & 1) == 0)
  {
    v540 = v563;
    v442 = v590;
    v537 = v599;
    v345 = v592;
    v554 = v299;
    v543 = v565;
    v599(v554, v110);
    goto LABEL_16;
  }
  v300 = v562;
  v301 = v562[12];
  v579 = &v298[v301];
  v302 = v562[16];
  v580 = &v298[v302];
  v303 = v562[20];
  v581 = &v298[v303];
  v304 = v562[24];
  v582 = &v298[v304];
  v305 = v562[28];
  v583 = &v298[v305];
  v306 = v562[32];
  v584 = &v298[v306];
  v307 = v562[36];
  v585 = &v298[v307];
  v308 = v562[40];
  v586 = &v298[v308];
  v309 = v562[44];
  v602 = &v298[v309];
  v310 = &v596[v301];
  v598 = &v596[v301];
  v311 = &v596[v302];
  v595 = &v596[v302];
  v312 = &v596[v303];
  v594 = &v596[v303];
  v313 = &v596[v304];
  v593 = &v596[v304];
  v606 = &v596[v305];
  v314 = v299;
  v315 = &v596[v306];
  v587 = &v596[v306];
  v605 = &v596[v307];
  v604 = &v596[v308];
  v603 = &v596[v309];
  v316 = v607;
  v317 = v577;
  v577();
  ((void (*)(char *, char *, char *))v317)(v310, v579, v316);
  ((void (*)(char *, char *, char *))v317)(v311, v580, v316);
  ((void (*)(char *, char *, char *))v317)(v312, v581, v316);
  ((void (*)(char *, char *, char *))v317)(v313, v582, v316);
  ((void (*)(char *, char *, char *))v317)(v606, v583, v316);
  ((void (*)(char *, char *, char *))v317)(v315, v584, v316);
  ((void (*)(char *, char *, char *))v317)(v605, v585, v316);
  ((void (*)(char *, char *, char *))v317)(v604, v586, v316);
  ((void (*)(char *, char *, char *))v317)(v603, v602, v316);
  v318 = v300[12];
  v319 = &v314[v318];
  v320 = v300[16];
  v568 = &v314[v320];
  v321 = v300[20];
  v569 = &v314[v321];
  v322 = v300[24];
  v574 = &v314[v322];
  v323 = v300[28];
  v575 = &v314[v323];
  v324 = v300[32];
  v578 = &v314[v324];
  v325 = v300[36];
  v581 = &v314[v325];
  v326 = v300[40];
  v582 = &v314[v326];
  v327 = v300[44];
  v585 = &v314[v327];
  v328 = v601;
  v329 = &v601[v318];
  v586 = &v601[v318];
  v330 = &v601[v320];
  v584 = &v601[v320];
  v331 = &v601[v321];
  v583 = &v601[v321];
  v602 = &v601[v322];
  v567 = &v601[v323];
  v332 = &v601[v324];
  v580 = &v601[v324];
  v573 = &v601[v325];
  v576 = &v601[v326];
  v579 = &v601[v327];
  ((void (*)(char *, char *, char *))v317)(v601, v314, v316);
  v333 = v319;
  v334 = v600;
  ((void (*)(char *, char *, char *))v317)(v329, v333, v316);
  ((void (*)(char *, char *, char *))v317)(v330, v568, v316);
  ((void (*)(char *, char *, char *))v317)(v331, v569, v316);
  ((void (*)(char *, char *, char *))v317)(v602, v574, v316);
  v335 = v567;
  ((void (*)(char *, char *, char *))v317)(v567, v575, v316);
  ((void (*)(char *, char *, char *))v317)(v332, v578, v316);
  v336 = v573;
  ((void (*)(char *, char *, char *))v317)(v573, v581, v316);
  v337 = v576;
  ((void (*)(char *, char *, char *))v317)(v576, v582, v316);
  v338 = v579;
  ((void (*)(char *, char *, char *))v317)(v579, v585, v316);
  LODWORD(v585) = sub_1B22286E0();
  v339 = v314;
  v340 = v608;
  v341 = v599;
  v599(v339, v608);
  v342 = v298;
  v343 = v340;
  v341(v342, v340);
  ((void (*)(char *, char *))v334)(v338, v316);
  ((void (*)(char *, char *))v334)(v337, v316);
  v344 = v609;
  ((void (*)(char *, char *))v334)(v336, v316);
  ((void (*)(char *, char *))v334)(v580, v316);
  ((void (*)(char *, char *))v334)(v335, v316);
  ((void (*)(char *, char *))v334)(v602, v316);
  ((void (*)(char *, char *))v334)(v583, v316);
  ((void (*)(char *, char *))v334)(v584, v316);
  ((void (*)(char *, char *))v334)(v586, v316);
  ((void (*)(char *, char *))v334)(v328, v316);
  ((void (*)(char *, char *))v334)(v603, v316);
  ((void (*)(char *, char *))v334)(v604, v316);
  ((void (*)(char *, char *))v334)(v605, v316);
  ((void (*)(char *, char *))v334)(v587, v316);
  ((void (*)(char *, char *))v334)(v606, v316);
  ((void (*)(char *, char *))v334)(v593, v316);
  ((void (*)(char *, char *))v334)(v594, v316);
  ((void (*)(char *, char *))v334)(v595, v316);
  ((void (*)(char *, char *))v334)(v598, v316);
  v107 = v588;
  ((void (*)(char *, char *))v334)(v596, v316);
  v345 = v592;
  ((void (*)(char *, char *, uint64_t))v107)(v592, v610, v343);
  v346 = v571;
  v109 = v344;
  v110 = v343;
  ((void (*)(char *, char *, uint64_t))v107)(v571, v344, v343);
  if ((v585 & 1) == 0)
  {
    v537 = v341;
    v540 = v563;
    v442 = v590;
    v545 = v591;
    v555 = v346;
    v543 = v565;
    v537(v555, v343);
    goto LABEL_17;
  }
  v347 = v562;
  v348 = v562[12];
  v579 = &v345[v348];
  v349 = v562[16];
  v580 = &v345[v349];
  v350 = v562[20];
  v581 = &v345[v350];
  v351 = v562[24];
  v582 = &v345[v351];
  v352 = v562[28];
  v583 = &v345[v352];
  v353 = v562[32];
  v584 = &v345[v353];
  v354 = v562[36];
  v585 = &v345[v354];
  v355 = v562[40];
  v586 = &v345[v355];
  v356 = v562[44];
  v593 = &v345[v356];
  v357 = &v596[v348];
  v358 = &v596[v349];
  v602 = &v596[v349];
  v603 = &v596[v348];
  v359 = &v596[v350];
  v598 = &v596[v350];
  v360 = &v596[v351];
  v595 = &v596[v351];
  v361 = v346;
  v362 = &v596[v352];
  v594 = &v596[v352];
  v363 = &v596[v353];
  v587 = &v596[v353];
  v604 = &v596[v354];
  v606 = &v596[v355];
  v605 = &v596[v356];
  v364 = v607;
  v365 = v577;
  v577();
  ((void (*)(char *, char *, char *))v365)(v357, v579, v364);
  ((void (*)(char *, char *, char *))v365)(v358, v580, v364);
  ((void (*)(char *, char *, char *))v365)(v359, v581, v364);
  ((void (*)(char *, char *, char *))v365)(v360, v582, v364);
  ((void (*)(char *, char *, char *))v365)(v362, v583, v364);
  ((void (*)(char *, char *, char *))v365)(v363, v584, v364);
  ((void (*)(char *, char *, char *))v365)(v604, v585, v364);
  ((void (*)(char *, char *, char *))v365)(v606, v586, v364);
  ((void (*)(char *, char *, char *))v365)(v605, v593, v364);
  v366 = v347[12];
  v367 = &v361[v366];
  v368 = v347[16];
  v568 = &v361[v368];
  v369 = v347[20];
  v570 = &v361[v369];
  v370 = v347[24];
  v574 = &v361[v370];
  v371 = v347[28];
  v575 = &v361[v371];
  v372 = v347[32];
  v578 = &v361[v372];
  v373 = v347[36];
  v580 = &v361[v373];
  v374 = v347[40];
  v581 = &v361[v374];
  v375 = v347[44];
  v584 = &v361[v375];
  v376 = v601;
  v377 = &v601[v366];
  v593 = &v601[v366];
  v378 = &v601[v368];
  v586 = &v601[v368];
  v379 = &v601[v369];
  v585 = &v601[v369];
  v380 = &v601[v370];
  v583 = &v601[v370];
  v381 = &v601[v371];
  v582 = &v601[v371];
  v569 = &v601[v372];
  v573 = &v601[v373];
  v576 = &v601[v374];
  v579 = &v601[v375];
  ((void (*)(char *, char *, char *))v365)(v601, v361, v364);
  v382 = v377;
  v383 = v599;
  ((void (*)(char *, char *, char *))v365)(v382, v367, v364);
  ((void (*)(char *, char *, char *))v365)(v378, v568, v364);
  ((void (*)(char *, char *, char *))v365)(v379, v570, v364);
  ((void (*)(char *, char *, char *))v365)(v380, v574, v364);
  ((void (*)(char *, char *, char *))v365)(v381, v575, v364);
  v384 = v569;
  ((void (*)(char *, char *, char *))v365)(v569, v578, v364);
  v385 = v573;
  ((void (*)(char *, char *, char *))v365)(v573, v580, v364);
  v386 = v576;
  ((void (*)(char *, char *, char *))v365)(v576, v581, v364);
  v387 = v579;
  ((void (*)(char *, char *, char *))v365)(v579, v584, v364);
  v388 = v600;
  v389 = v587;
  LODWORD(v584) = sub_1B22286E0();
  v383(v361, v608);
  v383(v592, v608);
  ((void (*)(char *, char *))v388)(v387, v364);
  ((void (*)(char *, char *))v388)(v386, v364);
  v390 = v385;
  v391 = v609;
  ((void (*)(char *, char *))v388)(v390, v364);
  v392 = v608;
  ((void (*)(char *, char *))v388)(v384, v364);
  ((void (*)(char *, char *))v388)(v582, v364);
  ((void (*)(char *, char *))v388)(v583, v364);
  ((void (*)(char *, char *))v388)(v585, v364);
  ((void (*)(char *, char *))v388)(v586, v364);
  ((void (*)(char *, char *))v388)(v593, v364);
  ((void (*)(char *, char *))v388)(v376, v364);
  ((void (*)(char *, char *))v388)(v605, v364);
  ((void (*)(char *, char *))v388)(v606, v364);
  ((void (*)(char *, char *))v388)(v604, v364);
  ((void (*)(char *, char *))v388)(v389, v364);
  ((void (*)(char *, char *))v388)(v594, v364);
  ((void (*)(char *, char *))v388)(v595, v364);
  ((void (*)(char *, char *))v388)(v598, v364);
  ((void (*)(char *, char *))v388)(v602, v364);
  ((void (*)(char *, char *))v388)(v603, v364);
  v107 = v588;
  ((void (*)(char *, char *))v388)(v596, v364);
  v393 = v591;
  ((void (*)(char *, char *, uint64_t))v107)(v591, v610, v392);
  v394 = v572;
  v109 = v391;
  v110 = v392;
  ((void (*)(char *, char *, uint64_t))v107)(v572, v391, v392);
  if ((v584 & 1) == 0)
  {
    v488 = v589;
    v540 = v563;
    v442 = v590;
    v543 = v565;
    v550 = v599;
    v599(v394, v110);
    goto LABEL_18;
  }
  v395 = v562;
  v396 = v562[12];
  v580 = &v393[v396];
  v397 = v562[16];
  v581 = &v393[v397];
  v398 = v562[20];
  v582 = &v393[v398];
  v399 = v562[24];
  v583 = &v393[v399];
  v400 = v562[28];
  v584 = &v393[v400];
  v401 = v562[32];
  v585 = &v393[v401];
  v402 = v562[36];
  v586 = &v393[v402];
  v403 = v562[40];
  v587 = &v393[v403];
  v404 = v562[44];
  v592 = &v393[v404];
  v405 = &v596[v396];
  v406 = v394;
  v407 = &v596[v397];
  v602 = &v596[v397];
  v603 = &v596[v396];
  v408 = &v596[v398];
  v598 = &v596[v398];
  v409 = &v596[v399];
  v595 = &v596[v399];
  v410 = &v596[v400];
  v594 = &v596[v400];
  v411 = &v596[v401];
  v593 = &v596[v401];
  v604 = &v596[v402];
  v606 = &v596[v403];
  v605 = &v596[v404];
  v412 = v607;
  v413 = v577;
  v577();
  ((void (*)(char *, char *, char *))v413)(v405, v580, v412);
  ((void (*)(char *, char *, char *))v413)(v407, v581, v412);
  ((void (*)(char *, char *, char *))v413)(v408, v582, v412);
  ((void (*)(char *, char *, char *))v413)(v409, v583, v412);
  ((void (*)(char *, char *, char *))v413)(v410, v584, v412);
  ((void (*)(char *, char *, char *))v413)(v411, v585, v412);
  ((void (*)(char *, char *, char *))v413)(v604, v586, v412);
  ((void (*)(char *, char *, char *))v413)(v606, v587, v412);
  ((void (*)(char *, char *, char *))v413)(v605, v592, v412);
  v414 = v395[12];
  v415 = &v406[v414];
  v416 = v395[16];
  v570 = &v406[v416];
  v417 = v395[20];
  v573 = &v406[v417];
  v418 = v395[24];
  v575 = &v406[v418];
  v419 = v395[28];
  v576 = &v406[v419];
  v420 = v395[32];
  v579 = &v406[v420];
  v421 = v395[36];
  v581 = &v406[v421];
  v422 = v395[40];
  v582 = &v406[v422];
  v423 = v395[44];
  v592 = &v406[v423];
  v424 = v601;
  v425 = &v601[v414];
  v587 = &v601[v414];
  v426 = &v601[v416];
  v586 = &v601[v416];
  v427 = &v601[v417];
  v585 = &v601[v417];
  v428 = &v601[v418];
  v584 = &v601[v418];
  v429 = &v601[v419];
  v583 = &v601[v419];
  v571 = &v601[v420];
  v574 = &v601[v421];
  v578 = &v601[v422];
  v580 = &v601[v423];
  ((void (*)(char *, char *, char *))v413)(v601, v406, v412);
  v430 = v425;
  v431 = v599;
  ((void (*)(char *, char *, char *))v413)(v430, v415, v412);
  ((void (*)(char *, char *, char *))v413)(v426, v570, v412);
  v432 = v600;
  ((void (*)(char *, char *, char *))v413)(v427, v573, v412);
  ((void (*)(char *, char *, char *))v413)(v428, v575, v412);
  ((void (*)(char *, char *, char *))v413)(v429, v576, v412);
  v433 = v571;
  ((void (*)(char *, char *, char *))v413)(v571, v579, v412);
  v434 = v574;
  ((void (*)(char *, char *, char *))v413)(v574, v581, v412);
  v435 = v578;
  ((void (*)(char *, char *, char *))v413)(v578, v582, v412);
  v436 = v580;
  ((void (*)(char *, char *, char *))v413)(v580, v592, v412);
  v437 = v604;
  LODWORD(v592) = sub_1B22286E0();
  v438 = v406;
  v439 = v608;
  v431(v438, v608);
  v431(v591, v439);
  ((void (*)(char *, char *))v432)(v436, v412);
  ((void (*)(char *, char *))v432)(v435, v412);
  v440 = v434;
  v441 = v609;
  ((void (*)(char *, char *))v432)(v440, v412);
  ((void (*)(char *, char *))v432)(v433, v412);
  ((void (*)(char *, char *))v432)(v583, v412);
  ((void (*)(char *, char *))v432)(v584, v412);
  ((void (*)(char *, char *))v432)(v585, v412);
  ((void (*)(char *, char *))v432)(v586, v412);
  ((void (*)(char *, char *))v432)(v587, v412);
  ((void (*)(char *, char *))v432)(v424, v412);
  ((void (*)(char *, char *))v432)(v605, v412);
  ((void (*)(char *, char *))v432)(v606, v412);
  ((void (*)(char *, char *))v432)(v437, v412);
  ((void (*)(char *, char *))v432)(v593, v412);
  ((void (*)(char *, char *))v432)(v594, v412);
  ((void (*)(char *, char *))v432)(v595, v412);
  ((void (*)(char *, char *))v432)(v598, v412);
  ((void (*)(char *, char *))v432)(v602, v412);
  ((void (*)(char *, char *))v432)(v603, v412);
  v107 = v588;
  ((void (*)(char *, char *))v432)(v596, v412);
  v442 = v590;
  v443 = v608;
  ((void (*)(char *, char *, uint64_t))v107)(v590, v610, v608);
  v444 = v565;
  v109 = v441;
  v110 = v443;
  ((void (*)(char *, char *, uint64_t))v107)(v565, v441, v443);
  if ((v592 & 1) == 0)
  {
    v488 = v589;
    v540 = v563;
    v550 = v599;
    v599(v444, v443);
    goto LABEL_19;
  }
  v445 = v562;
  v446 = v562[12];
  v581 = &v442[v446];
  v447 = v562[16];
  v582 = &v442[v447];
  v448 = v562[20];
  v449 = v444;
  v583 = &v442[v448];
  v450 = v562[24];
  v584 = &v442[v450];
  v451 = v562[28];
  v585 = &v442[v451];
  v452 = v562[32];
  v586 = &v442[v452];
  v453 = v562[36];
  v587 = &v442[v453];
  v454 = v562[40];
  v591 = &v442[v454];
  v455 = v562[44];
  v592 = &v442[v455];
  v456 = &v596[v446];
  v457 = &v596[v447];
  v602 = &v596[v447];
  v603 = &v596[v446];
  v458 = &v596[v448];
  v598 = &v596[v448];
  v459 = &v596[v450];
  v595 = &v596[v450];
  v460 = &v596[v451];
  v594 = &v596[v451];
  v461 = &v596[v452];
  v593 = &v596[v452];
  v606 = &v596[v453];
  v604 = &v596[v454];
  v605 = &v596[v455];
  v462 = v607;
  v463 = v577;
  v577();
  ((void (*)(char *, char *, char *))v463)(v456, v581, v462);
  ((void (*)(char *, char *, char *))v463)(v457, v582, v462);
  ((void (*)(char *, char *, char *))v463)(v458, v583, v462);
  ((void (*)(char *, char *, char *))v463)(v459, v584, v462);
  ((void (*)(char *, char *, char *))v463)(v460, v585, v462);
  ((void (*)(char *, char *, char *))v463)(v461, v586, v462);
  ((void (*)(char *, char *, char *))v463)(v606, v587, v462);
  ((void (*)(char *, char *, char *))v463)(v604, v591, v462);
  ((void (*)(char *, char *, char *))v463)(v605, v592, v462);
  v464 = v445[12];
  v572 = &v449[v464];
  v465 = v445[16];
  v573 = &v449[v465];
  v466 = v445[20];
  v575 = &v449[v466];
  v467 = v445[24];
  v578 = &v449[v467];
  v468 = v445[28];
  v579 = &v449[v468];
  v469 = v445[32];
  v580 = &v449[v469];
  v470 = v445[36];
  v582 = &v449[v470];
  v471 = v445[40];
  v583 = &v449[v471];
  v472 = v445[44];
  v592 = &v449[v472];
  v473 = v601;
  v474 = &v601[v464];
  v591 = &v601[v464];
  v475 = &v601[v465];
  v587 = &v601[v465];
  v476 = &v601[v466];
  v586 = &v601[v466];
  v477 = &v601[v467];
  v585 = &v601[v467];
  v478 = &v601[v468];
  v584 = &v601[v468];
  v574 = &v601[v469];
  v576 = &v601[v470];
  v479 = &v601[v471];
  v581 = &v601[v472];
  ((void (*)(char *, char *, char *))v463)(v601, v449, v462);
  ((void (*)(char *, char *, char *))v463)(v474, v572, v462);
  ((void (*)(char *, char *, char *))v463)(v475, v573, v462);
  ((void (*)(char *, char *, char *))v463)(v476, v575, v462);
  ((void (*)(char *, char *, char *))v463)(v477, v578, v462);
  ((void (*)(char *, char *, char *))v463)(v478, v579, v462);
  v480 = v574;
  v481 = v608;
  ((void (*)(char *, char *, char *))v463)(v574, v580, v462);
  v482 = v576;
  ((void (*)(char *, char *, char *))v463)(v576, v582, v462);
  ((void (*)(char *, char *, char *))v463)(v479, v583, v462);
  v483 = v581;
  ((void (*)(char *, char *, char *))v463)(v581, v592, v462);
  v484 = v600;
  v485 = v604;
  LODWORD(v592) = sub_1B22286E0();
  v486 = v449;
  v487 = v599;
  v599(v486, v481);
  v487(v590, v481);
  ((void (*)(char *, char *))v484)(v483, v462);
  ((void (*)(char *, char *))v484)(v479, v462);
  ((void (*)(char *, char *))v484)(v482, v462);
  ((void (*)(char *, char *))v484)(v480, v462);
  ((void (*)(char *, char *))v484)(v584, v462);
  ((void (*)(char *, char *))v484)(v585, v462);
  ((void (*)(char *, char *))v484)(v586, v462);
  ((void (*)(char *, char *))v484)(v587, v462);
  ((void (*)(char *, char *))v484)(v591, v462);
  ((void (*)(char *, char *))v484)(v473, v462);
  ((void (*)(char *, char *))v484)(v605, v462);
  ((void (*)(char *, char *))v484)(v485, v462);
  ((void (*)(char *, char *))v484)(v606, v462);
  ((void (*)(char *, char *))v484)(v593, v462);
  ((void (*)(char *, char *))v484)(v594, v462);
  ((void (*)(char *, char *))v484)(v595, v462);
  ((void (*)(char *, char *))v484)(v598, v462);
  ((void (*)(char *, char *))v484)(v602, v462);
  ((void (*)(char *, char *))v484)(v603, v462);
  ((void (*)(char *, char *))v484)(v596, v462);
  v488 = v589;
  v489 = v588;
  ((void (*)(char *, char *, uint64_t))v588)(v589, v610, v481);
  v490 = v563;
  v110 = v481;
  ((void (*)(char *, char *, uint64_t))v489)(v563, v609, v481);
  if ((v592 & 1) == 0)
  {
    v550 = v599;
    v599(v490, v481);
    goto LABEL_20;
  }
  v491 = v562;
  v492 = v562[12];
  v493 = v490;
  v585 = &v488[v492];
  v494 = v562[16];
  v586 = &v488[v494];
  v495 = v562[20];
  v587 = &v488[v495];
  v496 = v562[24];
  v588 = &v488[v496];
  v497 = v562[28];
  v590 = &v488[v497];
  v498 = v562[32];
  v591 = &v488[v498];
  v499 = v562[36];
  v592 = &v488[v499];
  v500 = v562[40];
  v603 = &v488[v500];
  v501 = v562[44];
  v604 = &v488[v501];
  v502 = &v596[v492];
  v602 = &v596[v492];
  v503 = &v596[v494];
  v598 = &v596[v494];
  v504 = &v596[v495];
  v595 = &v596[v495];
  v505 = &v596[v496];
  v594 = &v596[v496];
  v506 = &v596[v497];
  v593 = &v596[v497];
  v610 = &v596[v498];
  v609 = &v596[v499];
  v606 = &v596[v500];
  v605 = &v596[v501];
  v507 = v607;
  v508 = v577;
  v577();
  ((void (*)(char *, char *, char *))v508)(v502, v585, v507);
  ((void (*)(char *, char *, char *))v508)(v503, v586, v507);
  ((void (*)(char *, char *, char *))v508)(v504, v587, v507);
  ((void (*)(char *, char *, char *))v508)(v505, v588, v507);
  ((void (*)(char *, char *, char *))v508)(v506, v590, v507);
  ((void (*)(char *, char *, char *))v508)(v610, v591, v507);
  ((void (*)(char *, char *, char *))v508)(v609, v592, v507);
  ((void (*)(char *, char *, char *))v508)(v606, v603, v507);
  ((void (*)(char *, char *, char *))v508)(v605, v604, v507);
  v509 = v491[12];
  v576 = &v493[v509];
  v510 = v491[16];
  v578 = &v493[v510];
  v511 = v491[20];
  v579 = &v493[v511];
  v512 = v491[24];
  v581 = &v493[v512];
  v513 = v491[28];
  v582 = &v493[v513];
  v514 = v491[32];
  v584 = &v493[v514];
  v515 = v491[36];
  v585 = &v493[v515];
  v516 = v491[40];
  v587 = &v493[v516];
  v517 = v491[44];
  v588 = &v493[v517];
  v518 = v601;
  v519 = &v601[v509];
  v592 = &v601[v509];
  v520 = &v601[v510];
  v591 = &v601[v510];
  v521 = &v601[v511];
  v590 = &v601[v511];
  v604 = &v601[v512];
  v603 = &v601[v513];
  v522 = &v601[v514];
  v586 = &v601[v514];
  v580 = &v601[v515];
  v583 = &v601[v516];
  v523 = &v601[v517];
  ((void (*)(char *, char *, char *))v508)(v601, v493, v507);
  ((void (*)(char *, char *, char *))v508)(v519, v576, v507);
  ((void (*)(char *, char *, char *))v508)(v520, v578, v507);
  ((void (*)(char *, char *, char *))v508)(v521, v579, v507);
  ((void (*)(char *, char *, char *))v508)(v604, v581, v507);
  ((void (*)(char *, char *, char *))v508)(v603, v582, v507);
  ((void (*)(char *, char *, char *))v508)(v522, v584, v507);
  v524 = v580;
  ((void (*)(char *, char *, char *))v508)(v580, v585, v507);
  v525 = v583;
  ((void (*)(char *, char *, char *))v508)(v583, v587, v507);
  ((void (*)(char *, char *, char *))v508)(v523, v588, v507);
  v526 = v605;
  v527 = sub_1B22286E0();
  v528 = v493;
  v529 = v608;
  v530 = v599;
  v599(v528, v608);
  v530(v589, v529);
  ((void (*)(char *, char *))v484)(v523, v507);
  ((void (*)(char *, char *))v484)(v525, v507);
  ((void (*)(char *, char *))v484)(v524, v507);
  ((void (*)(char *, char *))v484)(v586, v507);
  ((void (*)(char *, char *))v484)(v603, v507);
  ((void (*)(char *, char *))v484)(v604, v507);
  ((void (*)(char *, char *))v484)(v590, v507);
  ((void (*)(char *, char *))v484)(v591, v507);
  ((void (*)(char *, char *))v484)(v592, v507);
  ((void (*)(char *, char *))v484)(v518, v507);
  ((void (*)(char *, char *))v484)(v526, v507);
  ((void (*)(char *, char *))v484)(v606, v507);
  ((void (*)(char *, char *))v484)(v609, v507);
  ((void (*)(char *, char *))v484)(v610, v507);
  ((void (*)(char *, char *))v484)(v593, v507);
  ((void (*)(char *, char *))v484)(v594, v507);
  ((void (*)(char *, char *))v484)(v595, v507);
  ((void (*)(char *, char *))v484)(v598, v507);
  ((void (*)(char *, char *))v484)(v602, v507);
  ((void (*)(char *, char *))v484)(v596, v507);
  return v527 & 1;
}

uint64_t sub_1B2171948(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata;
  uint64_t v8;
  _QWORD v10[14];

  v5 = *a2;
  v6 = *(_QWORD *)(a3 + 16);
  v10[2] = v6;
  v10[3] = v5;
  v10[4] = a1;
  v10[5] = v6;
  v10[6] = v6;
  v10[7] = v6;
  v10[8] = v6;
  v10[9] = v6;
  v10[10] = v6;
  v10[11] = v6;
  v10[12] = v6;
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  sub_1B1EF311C(v3, (uint64_t)sub_1B217BDC4, (uint64_t)v10, TupleTypeMetadata, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
}

void (*sub_1B21719F8(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  int *TupleTypeMetadata;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char v56[16];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = v3;
  v59 = *MEMORY[0x1E0C80C00];
  v8 = malloc(0x98uLL);
  *a1 = v8;
  v9 = *(_QWORD *)(a3 + 16);
  v8[8] = v5;
  v8[9] = v9;
  *v8 = v9;
  v8[1] = v9;
  v8[2] = v9;
  v8[3] = v9;
  v8[4] = v9;
  v8[5] = v9;
  v8[6] = v9;
  v8[7] = v9;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v8[10] = TupleTypeMetadata;
  v50 = *((_QWORD *)TupleTypeMetadata - 1);
  v11 = *(_QWORD *)(v50 + 64);
  v12 = (char *)malloc(v11);
  v8[11] = v12;
  v13 = (char *)malloc(v11);
  v8[12] = v13;
  v14 = *(_QWORD *)(v9 - 8);
  v8[13] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v46 = v14;
  v48 = (char *)malloc(v15);
  v8[14] = v48;
  v49 = (char *)malloc(v15);
  v47 = *a2;
  v16 = *a2;
  v8[15] = v49;
  v8[16] = v16;
  v17 = TupleTypeMetadata[12];
  v18 = &v13[v17];
  v19 = TupleTypeMetadata[16];
  v20 = &v13[v19];
  v44 = &v13[v17];
  v45 = &v13[v19];
  v21 = TupleTypeMetadata[20];
  v51 = &v13[v21];
  v22 = TupleTypeMetadata[24];
  v52 = &v13[v22];
  v23 = TupleTypeMetadata[28];
  v53 = &v13[v23];
  v24 = TupleTypeMetadata[32];
  v54 = &v13[v24];
  v25 = TupleTypeMetadata[36];
  v55 = &v13[v25];
  v34 = v5 + v17;
  v35 = v5 + v19;
  v36 = v5 + v21;
  v37 = v5 + v22;
  v38 = v5 + v23;
  v40 = v5 + v24;
  v42 = v5 + v25;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v8[17] = v26;
  v26(v13, v5, v9);
  v26(v18, v34, v9);
  v26(v20, v35, v9);
  v26(v51, v36, v9);
  v26(v52, v37, v9);
  v26(v53, v38, v9);
  v26(v54, v40, v9);
  v26(v55, v42, v9);
  v27 = &v12[TupleTypeMetadata[12]];
  v28 = &v12[TupleTypeMetadata[16]];
  v29 = &v12[TupleTypeMetadata[20]];
  v30 = &v12[TupleTypeMetadata[24]];
  v39 = &v12[TupleTypeMetadata[28]];
  v41 = &v12[TupleTypeMetadata[32]];
  v43 = &v12[TupleTypeMetadata[36]];
  v31 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v31(v12, v13, v9);
  v31(v27, v44, v9);
  v31(v28, v45, v9);
  v31(v29, v51, v9);
  v31(v30, v52, v9);
  v31(v39, v53, v9);
  v31(v41, v54, v9);
  v31(v43, v55, v9);
  v57 = v9;
  v58 = v47;
  sub_1B1EF311C((uint64_t)v12, (uint64_t)sub_1B217B98C, (uint64_t)v56, (uint64_t)TupleTypeMetadata, MEMORY[0x1E0DEDCE8], v9, MEMORY[0x1E0DEDD18], v32);
  v8[18] = 0;
  (*(void (**)(char *, int *))(v50 + 8))(v12, TupleTypeMetadata);
  v31(v49, v48, v9);
  return sub_1B2171D6C;
}

void sub_1B2171D6C(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v3)(void *, void *, uint64_t);
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void *, uint64_t);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[16];
    v3 = (uint64_t (*)(void *, void *, uint64_t))v2[17];
    v6 = (void *)v2[14];
    v5 = (void *)v2[15];
    v7 = (void *)v2[12];
    v9 = v2[10];
    v8 = (void *)v2[11];
    v27 = v2[13];
    v28 = v8;
    v11 = v2[8];
    v10 = v2[9];
    v12 = v3(v6, v5, v10);
    MEMORY[0x1E0C80A78](v12, v13);
    v24 = v10;
    v25 = v4;
    v26 = v6;
    sub_1B1EF311C(v11, (uint64_t)sub_1B217BDC4, (uint64_t)v23, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v14);
    v15 = *(void (**)(void *, uint64_t))(v27 + 8);
    v15(v6, v10);
    v16 = v28;
    v15(v5, v10);
  }
  else
  {
    v5 = (void *)v2[15];
    v17 = v2[13];
    v6 = (void *)v2[14];
    v16 = (void *)v2[11];
    v7 = (void *)v2[12];
    v18 = v2[9];
    MEMORY[0x1E0C80A78](v2[8], a2);
    v24 = v18;
    v25 = v19;
    v26 = v5;
    sub_1B1EF311C(v20, (uint64_t)sub_1B217BDC4, (uint64_t)v23, v21, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v22);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v5, v18);
  }
  free(v5);
  free(v6);
  free(v7);
  free(v16);
  free(v2);
}

uint64_t sub_1B2171F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B2177B6C(a1, a2, a3, a4, (uint64_t)&unk_1B22C91C0);
}

uint64_t sub_1B2171F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22C92A0, a3);
  return sub_1B22286BC();
}

uint64_t sub_1B2171F80()
{
  MEMORY[0x1B5E23E74](&unk_1B22C9370);
  return sub_1B2228D1C();
}

_QWORD *sub_1B2171FD0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2178378(a1, a2, a3, (uint64_t)&unk_1B22C9370, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB508]);
}

uint64_t sub_1B2171FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9370, a3);
  return sub_1B2228D28();
}

uint64_t sub_1B2172048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9370, a4);
  return sub_1B2228D04();
}

uint64_t sub_1B21720AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9370, a3);
  return sub_1B2228D40();
}

void sub_1B2172100(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

uint64_t (*sub_1B217210C(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1B2172168(v6, *a2, a3);
  return sub_1B1C6BBC4;
}

void (*sub_1B2172168(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  int *TupleTypeMetadata;
  size_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char v53[16];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = malloc(0x70uLL);
  *a1 = v6;
  v7 = *(_QWORD *)(a3 + 16);
  v6[7] = v7;
  v6[8] = v7;
  *v6 = v7;
  v6[1] = v7;
  v6[2] = v7;
  v6[3] = v7;
  v6[4] = v7;
  v6[5] = v7;
  v6[6] = v7;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v47 = *((_QWORD *)TupleTypeMetadata - 1);
  v9 = *(_QWORD *)(v47 + 64);
  v10 = (char *)malloc(v9);
  v6[9] = v10;
  v11 = (char *)malloc(v9);
  v6[10] = v11;
  v12 = *(_QWORD **)(v7 - 8);
  v6[11] = v12;
  v13 = v12[8];
  v46 = (char *)malloc(v13);
  v6[12] = v46;
  v14 = (char *)malloc(v13);
  v6[13] = v14;
  v15 = TupleTypeMetadata[12];
  v16 = &v11[v15];
  v43 = &v11[v15];
  v17 = TupleTypeMetadata[16];
  v18 = &v11[v17];
  v44 = &v11[v17];
  v45 = v14;
  v19 = TupleTypeMetadata[20];
  v49 = &v11[v19];
  v20 = TupleTypeMetadata[24];
  v50 = &v11[v20];
  v21 = TupleTypeMetadata[28];
  v51 = &v11[v21];
  v22 = TupleTypeMetadata[32];
  v52 = &v11[v22];
  v23 = TupleTypeMetadata[36];
  v24 = v3 + v15;
  v33 = v3 + v17;
  v34 = v3 + v19;
  v35 = v3 + v20;
  v36 = v3 + v21;
  v38 = v3 + v22;
  v40 = v3 + v23;
  v42 = &v11[v23];
  v25 = (void (*)(char *, uint64_t, uint64_t))v12[2];
  v25(v11, v3, v7);
  v25(v16, v24, v7);
  v25(v18, v33, v7);
  v25(v49, v34, v7);
  v25(v50, v35, v7);
  v25(v51, v36, v7);
  v25(v52, v38, v7);
  v25(v42, v40, v7);
  v26 = &v10[TupleTypeMetadata[12]];
  v27 = &v10[TupleTypeMetadata[16]];
  v28 = &v10[TupleTypeMetadata[20]];
  v29 = &v10[TupleTypeMetadata[24]];
  v37 = &v10[TupleTypeMetadata[28]];
  v39 = &v10[TupleTypeMetadata[32]];
  v41 = &v10[TupleTypeMetadata[36]];
  v30 = (void (*)(char *, char *, uint64_t))v12[4];
  v30(v10, v11, v7);
  v30(v26, v43, v7);
  v30(v27, v44, v7);
  v30(v28, v49, v7);
  v30(v29, v50, v7);
  v30(v37, v51, v7);
  v30(v39, v52, v7);
  v30(v41, v42, v7);
  v54 = v7;
  v55 = a2;
  sub_1B1EF311C((uint64_t)v10, (uint64_t)sub_1B217B98C, (uint64_t)v53, (uint64_t)TupleTypeMetadata, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v31);
  (*(void (**)(char *, int *))(v47 + 8))(v10, TupleTypeMetadata);
  v30(v45, v46, v7);
  return sub_1B21724C4;
}

void sub_1B21724C4(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 96);
  v2 = *(void **)(*(_QWORD *)a1 + 104);
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(void **)(*(_QWORD *)a1 + 72);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 64));
  free(v2);
  free(v3);
  free(v4);
  free(v5);
  free(v1);
}

uint64_t sub_1B217252C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x1B5E23E74](&unk_1B22C9300);
  return sub_1B216DA28(a1, a2, v6, a3);
}

uint64_t sub_1B2172574(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9370, a1);
  return sub_1B2228D34();
}

uint64_t sub_1B21725C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B217B9FC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (void (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_1B21725E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B217B9FC(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (void (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

uint64_t sub_1B2172608()
{
  MEMORY[0x1B5E23E74](&unk_1B22C9370);
  return sub_1B2228D10();
}

_QWORD *sub_1B2172658(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2178378(a1, a2, a3, (uint64_t)&unk_1B22C9370, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB500]);
}

uint64_t sub_1B217266C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B21783E4(a1, (uint64_t)&unk_1B22C91C0, a2);
}

uint64_t sub_1B2172678(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C91C0, a1);
  return sub_1B2228DA0();
}

uint64_t sub_1B21726AC(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C91C0, a1);
  return sub_1B2228DAC();
}

void sub_1B21726E0()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B21726F0()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B2172700(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B22C92A0);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t sub_1B2172748(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B22C9300);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE30], a1, &v3);
}

void sub_1B2172790()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B21727A0(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B22C9370);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t sub_1B21727E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int *TupleTypeMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, double);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v71 = a3;
  v69 = a1;
  v93 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 16);
  v85 = v5;
  v86 = v5;
  v87 = v5;
  v88 = v5;
  v89 = v5;
  v90 = v5;
  v91 = v5;
  v92 = v5;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v68 = *((_QWORD *)TupleTypeMetadata - 1);
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v7);
  v67 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v66 = (char *)&v52 - v11;
  v12 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v65 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v64 = (char *)&v52 - v19;
  MEMORY[0x1B5E23E74](&unk_1B22C91C0, a2, v18);
  v20 = sub_1B22295F8();
  v53 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v52 - v23;
  v25 = *(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16);
  v70 = a2;
  v25(v24, v3, a2, v22);
  v26 = 0;
  v81 = 0;
  v54 = v20;
  v63 = &v24[*(int *)(v20 + 36)];
  *(_QWORD *)v63 = 0;
  v62 = &v24[TupleTypeMetadata[12]];
  v61 = &v24[TupleTypeMetadata[16]];
  v60 = &v24[TupleTypeMetadata[20]];
  v59 = &v24[TupleTypeMetadata[24]];
  v58 = &v24[TupleTypeMetadata[28]];
  v57 = &v24[TupleTypeMetadata[32]];
  v27 = TupleTypeMetadata[36];
  v83 = v24;
  v56 = &v24[v27];
  v82 = v12;
  v55 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v28 = v66;
  do
  {
    v30 = &v28[TupleTypeMetadata[16]];
    v75 = &v28[TupleTypeMetadata[12]];
    v29 = v75;
    v76 = v30;
    v32 = &v28[TupleTypeMetadata[24]];
    v77 = &v28[TupleTypeMetadata[20]];
    v31 = v77;
    v78 = v32;
    v79 = &v28[TupleTypeMetadata[28]];
    v33 = v79;
    v80 = v26;
    v34 = &v28[TupleTypeMetadata[32]];
    v84 = &v28[TupleTypeMetadata[36]];
    v35 = v55;
    v55(v28, v83, v5);
    v35(v29, v62, v5);
    v35(v30, v61, v5);
    v35(v31, v60, v5);
    v35(v32, v59, v5);
    v35(v33, v58, v5);
    v36 = v34;
    v35(v34, v57, v5);
    v35(v84, v56, v5);
    v37 = (uint64_t)v67;
    v38 = &v67[TupleTypeMetadata[12]];
    v39 = &v67[TupleTypeMetadata[16]];
    v40 = &v67[TupleTypeMetadata[20]];
    v41 = &v67[TupleTypeMetadata[24]];
    v72 = &v67[TupleTypeMetadata[28]];
    v73 = &v67[TupleTypeMetadata[32]];
    v74 = &v67[TupleTypeMetadata[36]];
    v42 = *(void (**)(char *, char *, uint64_t))(v82 + 32);
    v42(v67, v28, v5);
    v42(v38, v75, v5);
    v42(v39, v76, v5);
    v42(v40, v77, v5);
    v42(v41, v78, v5);
    v42(v72, v79, v5);
    v42(v73, v36, v5);
    v43 = ((uint64_t (*)(char *, char *, uint64_t))v42)(v74, v84, v5);
    MEMORY[0x1E0C80A78](v43, v44);
    v45 = v80;
    v46 = v81;
    *(&v52 - 2) = v5;
    *(&v52 - 1) = v45;
    v47 = v65;
    sub_1B1EF311C(v37, (uint64_t)sub_1B217B98C, (uint64_t)(&v52 - 4), (uint64_t)TupleTypeMetadata, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v48);
    v81 = v46;
    (*(void (**)(uint64_t, int *))(v68 + 8))(v37, TupleTypeMetadata);
    v49 = v64;
    v42(v64, v47, v5);
    MEMORY[0x1B5E23E74](&unk_1B22C9370, v70);
    v50 = (uint64_t *)v63;
    sub_1B2228D10();
    *v50 = v85;
    sub_1B22285E4();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v49, v5);
    v26 = *v50;
  }
  while (*v50 != 8);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v83, v54);
}

uint64_t sub_1B2172D7C(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B2172D8C(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8));
}

uint64_t sub_1B2172D8C(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *TupleTypeMetadata;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  char *v55;
  int *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t, double);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  void (*v89)(void);
  char *v90;
  char *v91;
  char *v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  void (*v113)(void);
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  void (*v133)(char *, uint64_t);
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  void (*v155)(void);
  char *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  void (*v177)(char *, uint64_t);
  char *v178;
  char *v179;
  char *v180;
  int *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  void (*v196)(void);
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  char *v213;
  void (*v214)(char *, uint64_t);
  char *v215;
  char *v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  int *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  void (*v235)(void);
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  void (*v255)(char *, uint64_t);
  char *v256;
  char *v257;
  char *v258;
  int *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  char *v269;
  char *v270;
  char *v271;
  char *v272;
  void (*v273)(void);
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  char *v283;
  char *v284;
  char *v285;
  char *v286;
  uint64_t v287;
  char *v288;
  char *v289;
  char *v290;
  char *v291;
  uint64_t v292;
  void (*v293)(char *, uint64_t);
  char *v294;
  char *v295;
  char *v296;
  char *v297;
  int *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  char *v308;
  char *v309;
  char *v310;
  char *v311;
  char *v312;
  void (*v313)(void);
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  char *v328;
  char *v329;
  char *v330;
  void (*v331)(char *, uint64_t);
  char *v332;
  char *v333;
  char *v334;
  char *v335;
  int *v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  char *v347;
  char *v348;
  char *v349;
  void (*v350)(void);
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  char *v359;
  char *v360;
  char *v361;
  char *v362;
  char *v363;
  char *v364;
  char v365;
  char *v366;
  uint64_t v367;
  void (*v368)(char *, uint64_t);
  char *v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  char *v384;
  char *v385;
  char *v386;
  char *v387;
  char *v388;
  char *v389;
  char *v390;
  char *v391;
  int *v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  char *v397;
  char *v398;
  char *v399;
  char *v400;
  char *v401;
  char *v402;
  char *v403;
  char *v404;
  void (*v405)(void);
  char *v406;
  char *v407;
  char *v408;
  char *v409;
  char *v410;
  char *v411;
  char *v412;
  char *v413;
  char *v414;
  char *v415;
  char *v416;
  char *v417;
  char *v418;
  char *v419;
  char *v420;
  char *v421;
  uint64_t v422;
  uint64_t v423;
  char *v424;
  void (*v425)(char *, uint64_t);
  char *v426;
  char *v427;
  char *v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;

  v422 = a4;
  v429 = a2;
  v423 = type metadata accessor for FixedArray8(0, a3, a3, a4);
  v425 = *(void (**)(char *, uint64_t))(v423 - 8);
  MEMORY[0x1E0C80A78](v423, v6);
  v393 = (char *)&v386 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v395 = (char *)&v386 - v10;
  MEMORY[0x1E0C80A78](v11, v12);
  v394 = (char *)&v386 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v415 = (char *)&v386 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v399 = (char *)&v386 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v416 = (char *)&v386 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v398 = (char *)&v386 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v417 = (char *)&v386 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v397 = (char *)&v386 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v396 = (char *)&v386 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v419 = (char *)&v386 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v418 = (char *)&v386 - v40;
  MEMORY[0x1E0C80A78](v41, v42);
  v424 = (char *)&v386 - v43;
  MEMORY[0x1E0C80A78](v44, v45);
  v420 = (char *)&v386 - v46;
  v431 = a3;
  v432 = a3;
  v433 = a3;
  v434 = a3;
  v435 = a3;
  v436 = a3;
  v437 = a3;
  v438 = a3;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v48);
  v50 = (char *)&v386 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = MEMORY[0x1E0C80A78](v51, v52);
  v55 = (char *)&v386 - v54;
  v57 = v56[12];
  v58 = (char *)&v386 + v57 - v54;
  v414 = v58;
  v59 = v56[16];
  v60 = (char *)&v386 + v59 - v54;
  v413 = v60;
  v61 = v56[20];
  v62 = (char *)&v386 + v61 - v54;
  v412 = v62;
  v63 = v56[24];
  v64 = (char *)&v386 + v63 - v54;
  v411 = v64;
  v65 = v56[28];
  v428 = &v55[v65];
  v66 = v56[32];
  v427 = &v55[v66];
  v67 = v56[36];
  v426 = &v55[v67];
  v68 = a1;
  v69 = &a1[v57];
  v404 = &v68[v59];
  v405 = (void (*)(void))&v68[v61];
  v406 = &v68[v63];
  v407 = &v68[v65];
  v408 = &v68[v66];
  v409 = &v68[v67];
  v430 = v68;
  v410 = *(char **)(a3 - 8);
  v70 = (void (*)(char *, char *, uint64_t, double))*((_QWORD *)v410 + 2);
  v70(v55, v68, a3, v53);
  ((void (*)(char *, char *, uint64_t))v70)(v58, v69, a3);
  ((void (*)(char *, char *, uint64_t))v70)(v60, v404, a3);
  ((void (*)(char *, void (*)(void), uint64_t))v70)(v62, v405, a3);
  ((void (*)(char *, char *, uint64_t))v70)(v64, v406, a3);
  ((void (*)(char *, char *, uint64_t))v70)(v428, v407, a3);
  ((void (*)(char *, char *, uint64_t))v70)(v427, v408, a3);
  ((void (*)(char *, char *, uint64_t))v70)(v426, v409, a3);
  v71 = TupleTypeMetadata[12];
  v72 = &v50[v71];
  v409 = &v50[v71];
  v73 = TupleTypeMetadata[16];
  v74 = &v50[v73];
  v408 = &v50[v73];
  v75 = TupleTypeMetadata[20];
  v400 = &v50[v75];
  v76 = TupleTypeMetadata[24];
  v402 = &v50[v76];
  v77 = TupleTypeMetadata[28];
  v404 = &v50[v77];
  v78 = TupleTypeMetadata[32];
  v406 = &v50[v78];
  v392 = TupleTypeMetadata;
  v79 = TupleTypeMetadata[36];
  v407 = &v50[v79];
  v80 = &v429[v71];
  v81 = &v429[v73];
  v82 = &v429[v75];
  v83 = &v429[v76];
  v401 = &v429[v77];
  v403 = &v429[v78];
  v405 = (void (*)(void))&v429[v79];
  ((void (*)(char *))v70)(v50);
  ((void (*)(char *, char *, uint64_t))v70)(v72, v80, a3);
  ((void (*)(char *, char *, uint64_t))v70)(v74, v81, a3);
  v84 = v400;
  ((void (*)(char *, char *, uint64_t))v70)(v400, v82, a3);
  v85 = v402;
  ((void (*)(char *, char *, uint64_t))v70)(v402, v83, a3);
  v86 = v404;
  ((void (*)(char *, char *, uint64_t))v70)(v404, v401, a3);
  v87 = v406;
  ((void (*)(char *, char *, uint64_t))v70)(v406, v403, a3);
  v88 = v407;
  v89 = v405;
  v405 = (void (*)(void))v70;
  ((void (*)(char *, void (*)(void), uint64_t))v70)(v407, v89, a3);
  LOBYTE(v70) = sub_1B22286E0();
  v90 = (char *)*((_QWORD *)v410 + 1);
  ((void (*)(char *, uint64_t))v90)(v88, a3);
  ((void (*)(char *, uint64_t))v90)(v87, a3);
  ((void (*)(char *, uint64_t))v90)(v86, a3);
  ((void (*)(char *, uint64_t))v90)(v85, a3);
  ((void (*)(char *, uint64_t))v90)(v84, a3);
  ((void (*)(char *, uint64_t))v90)(v408, a3);
  ((void (*)(char *, uint64_t))v90)(v409, a3);
  v410 = v50;
  ((void (*)(char *, uint64_t))v90)(v50, a3);
  ((void (*)(char *, uint64_t))v90)(v426, a3);
  ((void (*)(char *, uint64_t))v90)(v427, a3);
  ((void (*)(char *, uint64_t))v90)(v428, a3);
  ((void (*)(char *, uint64_t))v90)(v411, a3);
  ((void (*)(char *, uint64_t))v90)(v412, a3);
  ((void (*)(char *, uint64_t))v90)(v413, a3);
  ((void (*)(char *, uint64_t))v90)(v414, a3);
  v421 = v55;
  v91 = v55;
  v92 = v420;
  v428 = (char *)a3;
  v403 = v90;
  ((void (*)(char *, uint64_t))v90)(v91, a3);
  v93 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v425 + 2);
  v94 = v423;
  v93(v92, v430, v423);
  v95 = v429;
  v96 = v94;
  ((void (*)(char *))v93)(v424);
  if ((v70 & 1) == 0)
  {
    v214 = (void (*)(char *, uint64_t))*((_QWORD *)v425 + 1);
    v214(v424, v94);
    v214(v92, v94);
    v137 = v418;
    v93(v418, v430, v94);
    v369 = v419;
    v93(v419, v95, v94);
    v370 = v415;
    v136 = (char *)v93;
    v371 = v417;
    v178 = v396;
    v372 = v369;
LABEL_11:
    v214(v372, v96);
    v214(v137, v96);
    ((void (*)(char *, char *, uint64_t))v136)(v178, v430, v96);
    v373 = v397;
    ((void (*)(char *, char *, uint64_t))v136)(v397, v95, v96);
    v374 = v373;
    v375 = v393;
    v214(v374, v96);
LABEL_12:
    v214(v178, v96);
    ((void (*)(char *, char *, uint64_t))v136)(v371, v430, v96);
    v376 = v398;
    ((void (*)(char *, char *, uint64_t))v136)(v398, v95, v96);
    v377 = v376;
    v378 = v394;
LABEL_13:
    v214(v377, v96);
    v214(v371, v96);
    v379 = v416;
    ((void (*)(char *, char *, uint64_t))v136)(v416, v430, v96);
    v380 = v399;
    ((void (*)(char *, char *, uint64_t))v136)(v399, v95, v96);
    v381 = v380;
    v382 = v379;
    v332 = v395;
    v214(v381, v96);
LABEL_14:
    v214(v382, v96);
    ((void (*)(char *, char *, uint64_t))v136)(v370, v430, v96);
    ((void (*)(char *, char *, uint64_t))v136)(v378, v95, v96);
    v214(v378, v96);
LABEL_15:
    v214(v370, v96);
    ((void (*)(char *, char *, uint64_t))v136)(v332, v430, v96);
    ((void (*)(char *, char *, uint64_t))v136)(v375, v95, v96);
    v214(v375, v96);
LABEL_16:
    v214(v332, v96);
    v365 = 0;
    return v365 & 1;
  }
  v97 = v392;
  v98 = v392[12];
  v391 = &v92[v98];
  v99 = v392[16];
  v400 = &v92[v99];
  v100 = v392[20];
  v426 = (char *)v93;
  v401 = &v92[v100];
  v101 = v392[24];
  v402 = &v92[v101];
  v102 = v392[28];
  v404 = &v92[v102];
  v103 = v392[32];
  v406 = &v92[v103];
  v104 = v392[36];
  v407 = &v92[v104];
  v105 = &v421[v98];
  v427 = &v421[v98];
  v106 = &v421[v99];
  v414 = &v421[v99];
  v107 = &v421[v100];
  v413 = &v421[v100];
  v108 = &v421[v101];
  v412 = &v421[v101];
  v109 = &v421[v102];
  v411 = &v421[v102];
  v110 = &v421[v103];
  v409 = &v421[v103];
  v111 = &v421[v104];
  v408 = &v421[v104];
  v112 = v428;
  v113 = v405;
  v405();
  ((void (*)(char *, char *, char *))v113)(v105, v391, v112);
  ((void (*)(char *, char *, char *))v113)(v106, v400, v112);
  ((void (*)(char *, char *, char *))v113)(v107, v401, v112);
  ((void (*)(char *, char *, char *))v113)(v108, v402, v112);
  ((void (*)(char *, char *, char *))v113)(v109, v404, v112);
  ((void (*)(char *, char *, char *))v113)(v110, v406, v112);
  ((void (*)(char *, char *, char *))v113)(v111, v407, v112);
  v114 = v97[12];
  v115 = v424;
  v116 = &v424[v114];
  v117 = v97[16];
  v387 = &v424[v117];
  v118 = v97[20];
  v389 = &v424[v118];
  v119 = v97[24];
  v391 = &v424[v119];
  v120 = v97[28];
  v401 = &v424[v120];
  v121 = v97[32];
  v402 = &v424[v121];
  v122 = v97[36];
  v407 = &v424[v122];
  v123 = v410;
  v124 = &v410[v114];
  v125 = &v410[v117];
  v406 = &v410[v117];
  v126 = &v410[v118];
  v404 = &v410[v118];
  v127 = &v410[v119];
  v388 = &v410[v120];
  v390 = &v410[v121];
  v400 = &v410[v122];
  ((void (*)(char *, char *, char *))v113)(v410, v424, v112);
  ((void (*)(char *, char *, char *))v113)(v124, v116, v112);
  ((void (*)(char *, char *, char *))v113)(v125, v387, v112);
  ((void (*)(char *, char *, char *))v113)(v126, v389, v112);
  v128 = v127;
  v129 = v423;
  ((void (*)(char *, char *, char *))v113)(v127, v391, v112);
  v130 = v388;
  ((void (*)(char *, char *, char *))v113)(v388, v401, v112);
  v131 = v390;
  ((void (*)(char *, char *, char *))v113)(v390, v402, v112);
  v132 = v400;
  ((void (*)(char *, char *, char *))v113)(v400, v407, v112);
  LODWORD(v407) = sub_1B22286E0();
  v133 = (void (*)(char *, uint64_t))*((_QWORD *)v425 + 1);
  v133(v115, v129);
  v425 = v133;
  v133(v420, v129);
  v134 = v403;
  ((void (*)(char *, char *))v403)(v132, v112);
  ((void (*)(char *, char *))v134)(v131, v112);
  ((void (*)(char *, char *))v134)(v130, v112);
  ((void (*)(char *, char *))v134)(v128, v112);
  ((void (*)(char *, char *))v134)(v404, v112);
  ((void (*)(char *, char *))v134)(v406, v112);
  ((void (*)(char *, char *))v134)(v124, v112);
  ((void (*)(char *, char *))v134)(v123, v112);
  ((void (*)(char *, char *))v134)(v408, v112);
  ((void (*)(char *, char *))v134)(v409, v112);
  ((void (*)(char *, char *))v134)(v411, v112);
  ((void (*)(char *, char *))v134)(v412, v112);
  ((void (*)(char *, char *))v134)(v413, v112);
  ((void (*)(char *, char *))v134)(v414, v112);
  ((void (*)(char *, char *))v134)(v427, v112);
  v135 = v112;
  v136 = v426;
  ((void (*)(char *, char *))v134)(v421, v135);
  v137 = v418;
  ((void (*)(char *, char *, uint64_t))v136)(v418, v430, v129);
  v95 = v429;
  v96 = v129;
  ((void (*)(char *))v136)(v419);
  if ((v407 & 1) == 0)
  {
    v370 = v415;
    v214 = v425;
    v371 = v417;
    v178 = v396;
    v372 = v419;
    goto LABEL_11;
  }
  v138 = v392;
  v139 = v392[12];
  v401 = &v137[v139];
  v140 = v392[16];
  v402 = &v137[v140];
  v141 = v392[20];
  v404 = &v137[v141];
  v142 = v392[24];
  v406 = &v137[v142];
  v143 = v392[28];
  v407 = &v137[v143];
  v144 = v392[32];
  v408 = &v137[v144];
  v145 = v392[36];
  v409 = &v137[v145];
  v146 = v137;
  v147 = v421;
  v148 = &v421[v139];
  v420 = &v421[v139];
  v149 = &v421[v140];
  v427 = &v421[v140];
  v150 = &v421[v141];
  v414 = &v421[v141];
  v151 = &v421[v142];
  v413 = &v421[v142];
  v152 = &v421[v143];
  v412 = &v421[v143];
  v153 = &v421[v144];
  v411 = &v421[v144];
  v424 = &v421[v145];
  v154 = v428;
  v155 = v405;
  ((void (*)(char *, char *, char *))v405)(v421, v146, v428);
  ((void (*)(char *, char *, char *))v155)(v148, v401, v154);
  ((void (*)(char *, char *, char *))v155)(v149, v402, v154);
  ((void (*)(char *, char *, char *))v155)(v150, v404, v154);
  ((void (*)(char *, char *, char *))v155)(v151, v406, v154);
  v156 = v152;
  v157 = v403;
  ((void (*)(char *, char *, char *))v155)(v156, v407, v154);
  ((void (*)(char *, char *, char *))v155)(v153, v408, v154);
  ((void (*)(char *, char *, char *))v155)(v424, v409, v154);
  v158 = v138[12];
  v159 = v419;
  v386 = &v419[v158];
  v160 = v138[16];
  v387 = &v419[v160];
  v161 = v138[20];
  v390 = &v419[v161];
  v162 = v138[24];
  v400 = &v419[v162];
  v163 = v138[28];
  v402 = &v419[v163];
  v164 = v138[32];
  v404 = &v419[v164];
  v165 = v138[36];
  v409 = &v419[v165];
  v166 = v410;
  v167 = &v410[v158];
  v408 = &v410[v158];
  v168 = &v410[v160];
  v389 = &v410[v160];
  v169 = &v410[v161];
  v407 = &v410[v161];
  v170 = &v410[v162];
  v406 = &v410[v162];
  v388 = &v410[v163];
  v391 = &v410[v164];
  v401 = &v410[v165];
  ((void (*)(char *, char *, char *))v155)(v410, v419, v154);
  ((void (*)(char *, char *, char *))v155)(v167, v386, v154);
  v171 = v423;
  ((void (*)(char *, char *, char *))v155)(v168, v387, v154);
  ((void (*)(char *, char *, char *))v155)(v169, v390, v154);
  ((void (*)(char *, char *, char *))v155)(v170, v400, v154);
  v172 = v388;
  ((void (*)(char *, char *, char *))v155)(v388, v402, v154);
  v173 = v391;
  ((void (*)(char *, char *, char *))v155)(v391, v404, v154);
  v174 = v401;
  ((void (*)(char *, char *, char *))v155)(v401, v409, v154);
  v175 = v389;
  LODWORD(v409) = sub_1B22286E0();
  v176 = v159;
  v177 = v425;
  v425(v176, v171);
  v177(v418, v171);
  ((void (*)(char *, char *))v157)(v174, v154);
  ((void (*)(char *, char *))v157)(v173, v154);
  ((void (*)(char *, char *))v157)(v172, v154);
  ((void (*)(char *, char *))v157)(v406, v154);
  ((void (*)(char *, char *))v157)(v407, v154);
  ((void (*)(char *, char *))v157)(v175, v154);
  ((void (*)(char *, char *))v157)(v408, v154);
  ((void (*)(char *, char *))v157)(v166, v154);
  ((void (*)(char *, char *))v157)(v424, v154);
  ((void (*)(char *, char *))v157)(v411, v154);
  ((void (*)(char *, char *))v157)(v412, v154);
  ((void (*)(char *, char *))v157)(v413, v154);
  ((void (*)(char *, char *))v157)(v414, v154);
  ((void (*)(char *, char *))v157)(v427, v154);
  ((void (*)(char *, char *))v157)(v420, v154);
  ((void (*)(char *, char *))v157)(v147, v154);
  v178 = v396;
  v179 = v426;
  ((void (*)(char *, char *, uint64_t))v426)(v396, v430, v171);
  v180 = v397;
  v95 = v429;
  v96 = v171;
  ((void (*)(char *))v179)(v397);
  if ((v409 & 1) == 0)
  {
    v375 = v393;
    v214 = v425;
    v384 = v180;
    v370 = v415;
    v136 = v179;
    v371 = v417;
    v425(v384, v171);
    goto LABEL_12;
  }
  v181 = v392;
  v182 = v392[12];
  v183 = v178;
  v404 = &v178[v182];
  v184 = v392[16];
  v406 = &v178[v184];
  v185 = v392[20];
  v407 = &v178[v185];
  v186 = v392[24];
  v408 = &v178[v186];
  v187 = v392[28];
  v409 = &v178[v187];
  v188 = v392[32];
  v411 = &v178[v188];
  v189 = v392[36];
  v412 = &v178[v189];
  v190 = &v421[v182];
  v191 = &v421[v184];
  v418 = &v421[v184];
  v419 = &v421[v182];
  v192 = &v421[v185];
  v420 = &v421[v185];
  v193 = &v421[v186];
  v414 = &v421[v186];
  v194 = &v421[v187];
  v413 = &v421[v187];
  v427 = &v421[v188];
  v424 = &v421[v189];
  v195 = v428;
  v196 = v405;
  v405();
  ((void (*)(char *, char *, char *))v196)(v190, v404, v195);
  ((void (*)(char *, char *, char *))v196)(v191, v406, v195);
  ((void (*)(char *, char *, char *))v196)(v192, v407, v195);
  ((void (*)(char *, char *, char *))v196)(v193, v408, v195);
  ((void (*)(char *, char *, char *))v196)(v194, v409, v195);
  ((void (*)(char *, char *, char *))v196)(v427, v411, v195);
  ((void (*)(char *, char *, char *))v196)(v424, v412, v195);
  v197 = v181[12];
  v198 = &v180[v197];
  v199 = v181[16];
  v390 = &v180[v199];
  v200 = v181[20];
  v400 = &v180[v200];
  v201 = v181[24];
  v402 = &v180[v201];
  v202 = v181[28];
  v406 = &v180[v202];
  v203 = v181[32];
  v407 = &v180[v203];
  v204 = v181[36];
  v412 = &v180[v204];
  v205 = v410;
  v206 = &v410[v197];
  v411 = &v410[v197];
  v207 = &v410[v199];
  v409 = &v410[v199];
  v208 = &v410[v200];
  v209 = &v410[v201];
  v408 = &v410[v201];
  v391 = &v410[v202];
  v401 = &v410[v203];
  v404 = &v410[v204];
  ((void (*)(char *, char *, char *))v196)(v410, v180, v195);
  ((void (*)(char *, char *, char *))v196)(v206, v198, v195);
  ((void (*)(char *, char *, char *))v196)(v207, v390, v195);
  v210 = v423;
  ((void (*)(char *, char *, char *))v196)(v208, v400, v195);
  ((void (*)(char *, char *, char *))v196)(v209, v402, v195);
  v211 = v391;
  ((void (*)(char *, char *, char *))v196)(v391, v406, v195);
  v212 = v401;
  ((void (*)(char *, char *, char *))v196)(v401, v407, v195);
  v213 = v404;
  ((void (*)(char *, char *, char *))v196)(v404, v412, v195);
  LODWORD(v412) = sub_1B22286E0();
  v214 = v425;
  v425(v180, v210);
  v214(v183, v210);
  v215 = v403;
  ((void (*)(char *, char *))v403)(v213, v195);
  ((void (*)(char *, char *))v215)(v212, v195);
  ((void (*)(char *, char *))v215)(v211, v195);
  ((void (*)(char *, char *))v215)(v408, v195);
  v216 = v208;
  v217 = v429;
  ((void (*)(char *, char *))v215)(v216, v195);
  ((void (*)(char *, char *))v215)(v409, v195);
  ((void (*)(char *, char *))v215)(v411, v195);
  ((void (*)(char *, char *))v215)(v205, v195);
  ((void (*)(char *, char *))v215)(v424, v195);
  ((void (*)(char *, char *))v215)(v427, v195);
  ((void (*)(char *, char *))v215)(v413, v195);
  ((void (*)(char *, char *))v215)(v414, v195);
  ((void (*)(char *, char *))v215)(v420, v195);
  ((void (*)(char *, char *))v215)(v418, v195);
  ((void (*)(char *, char *))v215)(v419, v195);
  ((void (*)(char *, char *))v215)(v421, v195);
  v218 = v417;
  v219 = v426;
  ((void (*)(char *, char *, uint64_t))v426)(v417, v430, v210);
  v220 = v398;
  v95 = v217;
  v96 = v210;
  ((void (*)(char *, char *, uint64_t))v219)(v398, v217, v210);
  if ((v412 & 1) == 0)
  {
    v375 = v393;
    v370 = v415;
    v378 = v394;
    v136 = v219;
    v371 = v218;
    v377 = v220;
    goto LABEL_13;
  }
  v221 = v392;
  v222 = v392[12];
  v404 = &v218[v222];
  v223 = v392[16];
  v406 = &v218[v223];
  v224 = v392[20];
  v407 = &v218[v224];
  v225 = v392[24];
  v408 = &v218[v225];
  v226 = v392[28];
  v409 = &v218[v226];
  v227 = v392[32];
  v411 = &v218[v227];
  v228 = v392[36];
  v412 = &v218[v228];
  v229 = &v421[v222];
  v230 = &v421[v223];
  v418 = &v421[v223];
  v419 = &v421[v222];
  v231 = &v421[v224];
  v414 = &v421[v224];
  v427 = &v421[v225];
  v232 = &v421[v226];
  v413 = &v421[v226];
  v420 = &v421[v227];
  v233 = v220;
  v424 = &v421[v228];
  v234 = v428;
  v235 = v405;
  v405();
  ((void (*)(char *, char *, char *))v235)(v229, v404, v234);
  ((void (*)(char *, char *, char *))v235)(v230, v406, v234);
  ((void (*)(char *, char *, char *))v235)(v231, v407, v234);
  ((void (*)(char *, char *, char *))v235)(v427, v408, v234);
  ((void (*)(char *, char *, char *))v235)(v232, v409, v234);
  ((void (*)(char *, char *, char *))v235)(v420, v411, v234);
  ((void (*)(char *, char *, char *))v235)(v424, v412, v234);
  v236 = v221[12];
  v237 = &v220[v236];
  v238 = v221[16];
  v396 = &v220[v238];
  v239 = v221[20];
  v400 = &v220[v239];
  v240 = v221[24];
  v402 = &v220[v240];
  v241 = v221[28];
  v406 = &v220[v241];
  v242 = v221[32];
  v407 = &v220[v242];
  v243 = v221[36];
  v412 = &v220[v243];
  v244 = v410;
  v245 = &v410[v236];
  v411 = &v410[v236];
  v246 = &v410[v238];
  v409 = &v410[v238];
  v247 = &v410[v239];
  v408 = &v410[v239];
  v248 = &v410[v240];
  v397 = &v410[v241];
  v401 = &v410[v242];
  v404 = &v410[v243];
  ((void (*)(char *, char *, char *))v235)(v410, v233, v234);
  ((void (*)(char *, char *, char *))v235)(v245, v237, v234);
  ((void (*)(char *, char *, char *))v235)(v246, v396, v234);
  v249 = v423;
  ((void (*)(char *, char *, char *))v235)(v247, v400, v234);
  v250 = v248;
  ((void (*)(char *, char *, char *))v235)(v248, v402, v234);
  v251 = v397;
  ((void (*)(char *, char *, char *))v235)(v397, v406, v234);
  v252 = v401;
  ((void (*)(char *, char *, char *))v235)(v401, v407, v234);
  v253 = v404;
  ((void (*)(char *, char *, char *))v235)(v404, v412, v234);
  v254 = v250;
  LODWORD(v412) = sub_1B22286E0();
  v255 = v425;
  v425(v233, v249);
  v255(v417, v249);
  ((void (*)(char *, char *))v215)(v253, v234);
  ((void (*)(char *, char *))v215)(v252, v234);
  ((void (*)(char *, char *))v215)(v251, v234);
  ((void (*)(char *, char *))v215)(v254, v234);
  ((void (*)(char *, char *))v215)(v408, v234);
  ((void (*)(char *, char *))v215)(v409, v234);
  ((void (*)(char *, char *))v215)(v411, v234);
  ((void (*)(char *, char *))v215)(v244, v234);
  ((void (*)(char *, char *))v215)(v424, v234);
  ((void (*)(char *, char *))v215)(v420, v234);
  ((void (*)(char *, char *))v215)(v413, v234);
  ((void (*)(char *, char *))v215)(v427, v234);
  ((void (*)(char *, char *))v215)(v414, v234);
  ((void (*)(char *, char *))v215)(v418, v234);
  ((void (*)(char *, char *))v215)(v419, v234);
  ((void (*)(char *, char *))v215)(v421, v234);
  v256 = v416;
  v257 = v426;
  ((void (*)(char *, char *, uint64_t))v426)(v416, v430, v249);
  v258 = v399;
  v95 = v429;
  v96 = v249;
  ((void (*)(char *))v257)(v399);
  if ((v412 & 1) == 0)
  {
    v332 = v395;
    v370 = v415;
    v378 = v394;
    v214 = v425;
    v136 = v257;
    v382 = v256;
    v385 = v258;
    v375 = v393;
    v425(v385, v96);
    goto LABEL_14;
  }
  v259 = v392;
  v260 = v392[12];
  v406 = &v256[v260];
  v261 = v392[16];
  v407 = &v256[v261];
  v262 = v392[20];
  v408 = &v256[v262];
  v263 = v392[24];
  v409 = &v256[v263];
  v264 = v392[28];
  v411 = &v256[v264];
  v265 = v392[32];
  v412 = &v256[v265];
  v266 = v392[36];
  v413 = &v256[v266];
  v267 = &v421[v260];
  v268 = &v421[v261];
  v419 = &v421[v261];
  v420 = &v421[v260];
  v269 = &v421[v262];
  v418 = &v421[v262];
  v270 = &v421[v263];
  v417 = &v421[v263];
  v424 = &v421[v264];
  v271 = &v421[v265];
  v414 = &v421[v265];
  v427 = &v421[v266];
  v272 = v428;
  v273 = v405;
  v405();
  ((void (*)(char *, char *, char *))v273)(v267, v406, v272);
  ((void (*)(char *, char *, char *))v273)(v268, v407, v272);
  ((void (*)(char *, char *, char *))v273)(v269, v408, v272);
  ((void (*)(char *, char *, char *))v273)(v270, v409, v272);
  ((void (*)(char *, char *, char *))v273)(v424, v411, v272);
  ((void (*)(char *, char *, char *))v273)(v271, v412, v272);
  ((void (*)(char *, char *, char *))v273)(v427, v413, v272);
  v274 = v259[12];
  v397 = &v258[v274];
  v275 = v259[16];
  v398 = &v258[v275];
  v276 = v259[20];
  v400 = &v258[v276];
  v277 = v259[24];
  v402 = &v258[v277];
  v278 = v259[28];
  v406 = &v258[v278];
  v279 = v259[32];
  v407 = &v258[v279];
  v280 = v259[36];
  v413 = &v258[v280];
  v281 = v410;
  v282 = &v410[v274];
  v412 = &v410[v274];
  v283 = &v410[v275];
  v411 = &v410[v275];
  v284 = &v410[v276];
  v409 = &v410[v276];
  v285 = &v410[v277];
  v408 = &v410[v277];
  v286 = &v410[v278];
  v401 = &v410[v279];
  v404 = &v410[v280];
  ((void (*)(char *, char *, char *))v273)(v410, v258, v272);
  ((void (*)(char *, char *, char *))v273)(v282, v397, v272);
  ((void (*)(char *, char *, char *))v273)(v283, v398, v272);
  v287 = v423;
  ((void (*)(char *, char *, char *))v273)(v284, v400, v272);
  ((void (*)(char *, char *, char *))v273)(v285, v402, v272);
  ((void (*)(char *, char *, char *))v273)(v286, v406, v272);
  v288 = v401;
  ((void (*)(char *, char *, char *))v273)(v401, v407, v272);
  v289 = v404;
  ((void (*)(char *, char *, char *))v273)(v404, v413, v272);
  v290 = v424;
  LODWORD(v413) = sub_1B22286E0();
  v291 = v258;
  v292 = v287;
  v293 = v425;
  v425(v291, v287);
  v293(v416, v287);
  ((void (*)(char *, char *))v215)(v289, v272);
  v294 = v429;
  ((void (*)(char *, char *))v215)(v288, v272);
  ((void (*)(char *, char *))v215)(v286, v272);
  ((void (*)(char *, char *))v215)(v408, v272);
  ((void (*)(char *, char *))v215)(v409, v272);
  ((void (*)(char *, char *))v215)(v411, v272);
  ((void (*)(char *, char *))v215)(v412, v272);
  ((void (*)(char *, char *))v215)(v281, v272);
  ((void (*)(char *, char *))v215)(v427, v272);
  ((void (*)(char *, char *))v215)(v414, v272);
  ((void (*)(char *, char *))v215)(v290, v272);
  ((void (*)(char *, char *))v215)(v417, v272);
  ((void (*)(char *, char *))v215)(v418, v272);
  ((void (*)(char *, char *))v215)(v419, v272);
  ((void (*)(char *, char *))v215)(v420, v272);
  ((void (*)(char *, char *))v215)(v421, v272);
  v295 = v415;
  v296 = v426;
  ((void (*)(char *, char *, uint64_t))v426)(v415, v430, v292);
  v297 = v394;
  v95 = v294;
  v96 = v292;
  ((void (*)(char *, char *, uint64_t))v296)(v394, v294, v292);
  if ((v413 & 1) == 0)
  {
    v332 = v395;
    v375 = v393;
    v214 = v425;
    v136 = v296;
    v370 = v295;
    v425(v297, v96);
    goto LABEL_15;
  }
  v298 = v392;
  v299 = v392[12];
  v407 = &v295[v299];
  v300 = v392[16];
  v408 = &v295[v300];
  v301 = v392[20];
  v302 = v297;
  v409 = &v295[v301];
  v303 = v392[24];
  v411 = &v295[v303];
  v304 = v392[28];
  v412 = &v295[v304];
  v305 = v392[32];
  v413 = &v295[v305];
  v306 = v392[36];
  v414 = &v295[v306];
  v307 = &v421[v299];
  v308 = &v421[v300];
  v419 = &v421[v300];
  v420 = &v421[v299];
  v309 = &v421[v301];
  v418 = &v421[v301];
  v310 = &v421[v303];
  v417 = &v421[v303];
  v311 = &v421[v304];
  v416 = &v421[v304];
  v424 = &v421[v305];
  v427 = &v421[v306];
  v312 = v428;
  v313 = v405;
  v405();
  ((void (*)(char *, char *, char *))v313)(v307, v407, v312);
  ((void (*)(char *, char *, char *))v313)(v308, v408, v312);
  ((void (*)(char *, char *, char *))v313)(v309, v409, v312);
  ((void (*)(char *, char *, char *))v313)(v310, v411, v312);
  ((void (*)(char *, char *, char *))v313)(v311, v412, v312);
  ((void (*)(char *, char *, char *))v313)(v424, v413, v312);
  ((void (*)(char *, char *, char *))v313)(v427, v414, v312);
  v314 = v298[12];
  v399 = &v302[v314];
  v315 = v298[16];
  v400 = &v302[v315];
  v316 = v298[20];
  v402 = &v302[v316];
  v317 = v298[24];
  v404 = &v302[v317];
  v318 = v298[28];
  v407 = &v302[v318];
  v319 = v298[32];
  v408 = &v302[v319];
  v320 = v298[36];
  v413 = &v302[v320];
  v321 = v410;
  v322 = &v410[v314];
  v414 = &v410[v314];
  v323 = &v410[v315];
  v412 = &v410[v315];
  v324 = &v410[v316];
  v411 = &v410[v316];
  v325 = &v410[v317];
  v409 = &v410[v317];
  v401 = &v410[v318];
  v326 = &v410[v319];
  v406 = &v410[v320];
  ((void (*)(char *, char *, char *))v313)(v410, v302, v312);
  ((void (*)(char *, char *, char *))v313)(v322, v399, v312);
  ((void (*)(char *, char *, char *))v313)(v323, v400, v312);
  v327 = v423;
  ((void (*)(char *, char *, char *))v313)(v324, v402, v312);
  ((void (*)(char *, char *, char *))v313)(v325, v404, v312);
  v328 = v401;
  ((void (*)(char *, char *, char *))v313)(v401, v407, v312);
  ((void (*)(char *, char *, char *))v313)(v326, v408, v312);
  v329 = v406;
  ((void (*)(char *, char *, char *))v313)(v406, v413, v312);
  v330 = v424;
  LODWORD(v413) = sub_1B22286E0();
  v331 = v425;
  v425(v302, v327);
  v331(v415, v327);
  ((void (*)(char *, char *))v215)(v329, v312);
  ((void (*)(char *, char *))v215)(v326, v312);
  ((void (*)(char *, char *))v215)(v328, v312);
  ((void (*)(char *, char *))v215)(v409, v312);
  ((void (*)(char *, char *))v215)(v411, v312);
  ((void (*)(char *, char *))v215)(v412, v312);
  ((void (*)(char *, char *))v215)(v414, v312);
  ((void (*)(char *, char *))v215)(v321, v312);
  ((void (*)(char *, char *))v215)(v427, v312);
  ((void (*)(char *, char *))v215)(v330, v312);
  ((void (*)(char *, char *))v215)(v416, v312);
  ((void (*)(char *, char *))v215)(v417, v312);
  ((void (*)(char *, char *))v215)(v418, v312);
  ((void (*)(char *, char *))v215)(v419, v312);
  ((void (*)(char *, char *))v215)(v420, v312);
  ((void (*)(char *, char *))v215)(v421, v312);
  v332 = v395;
  v333 = v426;
  ((void (*)(char *, char *, uint64_t))v426)(v395, v430, v327);
  v334 = v393;
  v96 = v327;
  ((void (*)(char *, char *, uint64_t))v333)(v393, v429, v327);
  if ((v413 & 1) == 0)
  {
    v214 = v425;
    v425(v334, v327);
    goto LABEL_16;
  }
  v335 = v334;
  v336 = v392;
  v337 = v392[12];
  v338 = v332;
  v412 = &v332[v337];
  v339 = v392[16];
  v413 = &v332[v339];
  v340 = v392[20];
  v414 = &v332[v340];
  v341 = v392[24];
  v415 = &v332[v341];
  v342 = v392[28];
  v416 = &v332[v342];
  v343 = v392[32];
  v424 = &v332[v343];
  v344 = v392[36];
  v426 = &v332[v344];
  v345 = &v421[v337];
  v346 = &v421[v339];
  v419 = &v421[v339];
  v420 = &v421[v337];
  v347 = &v421[v340];
  v418 = &v421[v340];
  v348 = &v421[v341];
  v417 = &v421[v341];
  v430 = &v421[v342];
  v429 = &v421[v343];
  v427 = &v421[v344];
  v349 = v428;
  v350 = v405;
  v405();
  ((void (*)(char *, char *, char *))v350)(v345, v412, v349);
  ((void (*)(char *, char *, char *))v350)(v346, v413, v349);
  ((void (*)(char *, char *, char *))v350)(v347, v414, v349);
  ((void (*)(char *, char *, char *))v350)(v348, v415, v349);
  ((void (*)(char *, char *, char *))v350)(v430, v416, v349);
  ((void (*)(char *, char *, char *))v350)(v429, v424, v349);
  ((void (*)(char *, char *, char *))v350)(v427, v426, v349);
  v351 = v336[12];
  v404 = &v335[v351];
  v352 = v336[16];
  v406 = &v335[v352];
  v353 = v336[20];
  v407 = &v335[v353];
  v354 = v336[24];
  v409 = &v335[v354];
  v355 = v336[28];
  v411 = &v335[v355];
  v356 = v336[32];
  v412 = &v335[v356];
  v357 = v336[36];
  v413 = &v335[v357];
  v358 = v410;
  v359 = &v410[v351];
  v416 = &v410[v351];
  v360 = &v410[v352];
  v415 = &v410[v352];
  v426 = &v410[v353];
  v361 = &v410[v354];
  v414 = &v410[v354];
  v424 = &v410[v355];
  v408 = &v410[v356];
  v362 = &v410[v357];
  ((void (*)(char *, char *, char *))v350)(v410, v335, v349);
  ((void (*)(char *, char *, char *))v350)(v359, v404, v349);
  ((void (*)(char *, char *, char *))v350)(v360, v406, v349);
  ((void (*)(char *, char *, char *))v350)(v426, v407, v349);
  ((void (*)(char *, char *, char *))v350)(v361, v409, v349);
  ((void (*)(char *, char *, char *))v350)(v424, v411, v349);
  v363 = v408;
  ((void (*)(char *, char *, char *))v350)(v408, v412, v349);
  ((void (*)(char *, char *, char *))v350)(v362, v413, v349);
  v364 = v427;
  v365 = sub_1B22286E0();
  v366 = v335;
  v367 = v423;
  v368 = v425;
  v425(v366, v423);
  v368(v338, v367);
  ((void (*)(char *, char *))v215)(v362, v349);
  ((void (*)(char *, char *))v215)(v363, v349);
  ((void (*)(char *, char *))v215)(v424, v349);
  ((void (*)(char *, char *))v215)(v414, v349);
  ((void (*)(char *, char *))v215)(v426, v349);
  ((void (*)(char *, char *))v215)(v415, v349);
  ((void (*)(char *, char *))v215)(v416, v349);
  ((void (*)(char *, char *))v215)(v358, v349);
  ((void (*)(char *, char *))v215)(v364, v349);
  ((void (*)(char *, char *))v215)(v429, v349);
  ((void (*)(char *, char *))v215)(v430, v349);
  ((void (*)(char *, char *))v215)(v417, v349);
  ((void (*)(char *, char *))v215)(v418, v349);
  ((void (*)(char *, char *))v215)(v419, v349);
  ((void (*)(char *, char *))v215)(v420, v349);
  ((void (*)(char *, char *))v215)(v421, v349);
  return v365 & 1;
}

uint64_t sub_1B2175460(uint64_t a1, uint64_t a2)
{
  return sub_1B2178C24(a1, *(_QWORD *)(a2 - 8), (void (*)(_BYTE *, uint64_t, uint64_t))sub_1B21727E8);
}

uint64_t sub_1B2175480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B21727E8(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t sub_1B2175488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2178CC0(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))sub_1B21727E8);
}

uint64_t sub_1B2175494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, int *a12)
{
  int *TupleTypeMetadata;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  void (*v26)(double);
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  void (*v87)(double);
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  int *v107;
  void (*v108)(double);
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  v105 = a8;
  v104 = a7;
  v103 = a6;
  v102 = a5;
  v101 = a4;
  v100 = a3;
  v99 = a2;
  v97 = a1;
  v112 = a9;
  v106 = (char *)a11;
  v107 = a12;
  v118 = a10;
  v119 = a10;
  v120 = a10;
  v121 = a10;
  v122 = a10;
  v123 = a10;
  v124 = a10;
  v125 = a10;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v13);
  v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v97 + TupleTypeMetadata[12] - v19;
  v110 = (char *)&v97 + TupleTypeMetadata[16] - v19;
  v21 = v110;
  v111 = v20;
  v109 = (char *)&v97 + TupleTypeMetadata[20] - v19;
  v22 = v109;
  v24 = (char *)&v97 + TupleTypeMetadata[28] - v19;
  v113 = (char *)&v97 + TupleTypeMetadata[24] - v19;
  v23 = v113;
  v114 = v24;
  v115 = (char *)&v97 + TupleTypeMetadata[32] - v19;
  v25 = v115;
  v116 = (char *)&v97 - v19;
  v117 = (char *)&v97 + TupleTypeMetadata[36] - v19;
  v98 = *(_QWORD *)(a10 - 8);
  v26 = *(void (**)(double))(v98 + 32);
  v108 = v26;
  v26(v18);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v20, v99, a10);
  ((void (*)(char *, uint64_t, uint64_t))v26)(v21, v100, a10);
  ((void (*)(char *, char *, uint64_t))v26)(v22, v101, a10);
  ((void (*)(char *, char *, uint64_t))v26)(v23, v102, a10);
  ((void (*)(char *, char *, uint64_t))v26)(v24, v103, a10);
  ((void (*)(char *, char *, uint64_t))v26)(v25, v104, a10);
  ((void (*)(char *, char *, uint64_t))v26)(v117, v105, a10);
  v105 = &v15[TupleTypeMetadata[12]];
  v27 = v105;
  v28 = &v15[TupleTypeMetadata[16]];
  v104 = &v15[TupleTypeMetadata[20]];
  v29 = v104;
  v103 = &v15[TupleTypeMetadata[24]];
  v30 = v103;
  v101 = &v15[TupleTypeMetadata[28]];
  v102 = &v15[TupleTypeMetadata[32]];
  v31 = &v15[TupleTypeMetadata[36]];
  v32 = v98;
  v33 = *(void (**)(char *, char *, uint64_t))(v98 + 16);
  v33(v15, v116, a10);
  v33(v27, v111, a10);
  v34 = v28;
  v33(v28, v110, a10);
  v33(v29, v109, a10);
  v33(v30, v113, a10);
  v35 = v101;
  v33(v101, v114, a10);
  v36 = v102;
  v33(v102, v115, a10);
  v33(v31, v117, a10);
  ((void (*)(uint64_t, char *, uint64_t))v108)(v112, v15, a10);
  v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v31, a10);
  v37(v36, a10);
  v37(v35, a10);
  v37(v103, a10);
  v37(v104, a10);
  v37(v34, a10);
  v37(v105, a10);
  v38 = &v15[TupleTypeMetadata[12]];
  v105 = &v15[TupleTypeMetadata[16]];
  v39 = v105;
  v104 = &v15[TupleTypeMetadata[20]];
  v40 = v104;
  v41 = &v15[TupleTypeMetadata[24]];
  v42 = &v15[TupleTypeMetadata[28]];
  v102 = &v15[TupleTypeMetadata[32]];
  v103 = &v15[TupleTypeMetadata[36]];
  v33(v15, v116, a10);
  v33(v38, v111, a10);
  v33(v39, v110, a10);
  v33(v40, v109, a10);
  v43 = v41;
  v33(v41, v113, a10);
  v44 = v42;
  v33(v42, v114, a10);
  v45 = v102;
  v33(v102, v115, a10);
  v46 = v103;
  v33(v103, v117, a10);
  v107 = (int *)type metadata accessor for __FixedArrayCodableStorage8(0, a10, (uint64_t)v106, (uint64_t)v107);
  ((void (*)(uint64_t, char *, uint64_t))v108)(v112 + v107[11], v38, a10);
  v37(v46, a10);
  v37(v45, a10);
  v37(v44, a10);
  v37(v43, a10);
  v37(v104, a10);
  v37(v105, a10);
  v37(v15, a10);
  v47 = (uint64_t)&v15[TupleTypeMetadata[12]];
  v48 = &v15[TupleTypeMetadata[16]];
  v49 = &v15[TupleTypeMetadata[20]];
  v105 = &v15[TupleTypeMetadata[24]];
  v50 = v105;
  v106 = (char *)v47;
  v103 = &v15[TupleTypeMetadata[28]];
  v104 = &v15[TupleTypeMetadata[32]];
  v51 = &v15[TupleTypeMetadata[36]];
  v33(v15, v116, a10);
  v33((char *)v47, v111, a10);
  v33(v48, v110, a10);
  v52 = v49;
  v33(v49, v109, a10);
  v33(v50, v113, a10);
  v53 = v103;
  v33(v103, v114, a10);
  v54 = v104;
  v33(v104, v115, a10);
  v33(v51, v117, a10);
  ((void (*)(uint64_t, char *, uint64_t))v108)(v112 + v107[12], v48, a10);
  v37(v51, a10);
  v37(v54, a10);
  v37(v53, a10);
  v37(v105, a10);
  v37(v52, a10);
  v37(v106, a10);
  v37(v15, a10);
  v55 = (uint64_t)&v15[TupleTypeMetadata[12]];
  v56 = &v15[TupleTypeMetadata[16]];
  v57 = &v15[TupleTypeMetadata[20]];
  v105 = &v15[TupleTypeMetadata[24]];
  v58 = v105;
  v106 = (char *)v55;
  v103 = &v15[TupleTypeMetadata[28]];
  v104 = &v15[TupleTypeMetadata[32]];
  v59 = &v15[TupleTypeMetadata[36]];
  v33(v15, v116, a10);
  v33((char *)v55, v111, a10);
  v60 = v56;
  v33(v56, v110, a10);
  v33(v57, v109, a10);
  v33(v58, v113, a10);
  v61 = v103;
  v33(v103, v114, a10);
  v62 = v104;
  v33(v104, v115, a10);
  v33(v59, v117, a10);
  ((void (*)(uint64_t, char *, uint64_t))v108)(v112 + v107[13], v57, a10);
  v37(v59, a10);
  v37(v62, a10);
  v37(v61, a10);
  v37(v105, a10);
  v37(v60, a10);
  v37(v106, a10);
  v37(v15, a10);
  v63 = (uint64_t)&v15[TupleTypeMetadata[12]];
  v105 = &v15[TupleTypeMetadata[16]];
  v64 = v105;
  v106 = (char *)v63;
  v65 = &v15[TupleTypeMetadata[20]];
  v66 = &v15[TupleTypeMetadata[24]];
  v103 = &v15[TupleTypeMetadata[28]];
  v104 = &v15[TupleTypeMetadata[32]];
  v67 = &v15[TupleTypeMetadata[36]];
  v33(v15, v116, a10);
  v33((char *)v63, v111, a10);
  v33(v64, v110, a10);
  v68 = v65;
  v33(v65, v109, a10);
  v33(v66, v113, a10);
  v69 = v103;
  v33(v103, v114, a10);
  v70 = v104;
  v33(v104, v115, a10);
  v33(v67, v117, a10);
  ((void (*)(uint64_t, char *, uint64_t))v108)(v112 + v107[14], v66, a10);
  v37(v67, a10);
  v37(v70, a10);
  v37(v69, a10);
  v37(v68, a10);
  v37(v105, a10);
  v37(v106, a10);
  v37(v15, a10);
  v71 = (uint64_t)&v15[TupleTypeMetadata[12]];
  v72 = &v15[TupleTypeMetadata[16]];
  v105 = &v15[TupleTypeMetadata[20]];
  v73 = v105;
  v106 = (char *)v71;
  v103 = &v15[TupleTypeMetadata[24]];
  v74 = &v15[TupleTypeMetadata[28]];
  v104 = &v15[TupleTypeMetadata[32]];
  v75 = &v15[TupleTypeMetadata[36]];
  v33(v15, v116, a10);
  v33((char *)v71, v111, a10);
  v76 = v72;
  v33(v72, v110, a10);
  v33(v73, v109, a10);
  v77 = v103;
  v33(v103, v113, a10);
  v33(v74, v114, a10);
  v78 = v104;
  v33(v104, v115, a10);
  v33(v75, v117, a10);
  ((void (*)(uint64_t, char *, uint64_t))v108)(v112 + v107[15], v74, a10);
  v37(v75, a10);
  v37(v78, a10);
  v37(v77, a10);
  v37(v105, a10);
  v37(v76, a10);
  v37(v106, a10);
  v37(v15, a10);
  v79 = (uint64_t)&v15[TupleTypeMetadata[12]];
  v80 = &v15[TupleTypeMetadata[16]];
  v105 = &v15[TupleTypeMetadata[20]];
  v81 = v105;
  v106 = (char *)v79;
  v103 = &v15[TupleTypeMetadata[24]];
  v104 = &v15[TupleTypeMetadata[28]];
  v82 = &v15[TupleTypeMetadata[32]];
  v83 = &v15[TupleTypeMetadata[36]];
  v33(v15, v116, a10);
  v33((char *)v79, v111, a10);
  v84 = v80;
  v33(v80, v110, a10);
  v33(v81, v109, a10);
  v85 = v103;
  v33(v103, v113, a10);
  v86 = v104;
  v33(v104, v114, a10);
  v33(v82, v115, a10);
  v33(v83, v117, a10);
  v87 = v108;
  ((void (*)(uint64_t, char *, uint64_t))v108)(v112 + v107[16], v82, a10);
  v37(v83, a10);
  v37(v86, a10);
  v37(v85, a10);
  v37(v105, a10);
  v37(v84, a10);
  v37(v106, a10);
  v37(v15, a10);
  v88 = (uint64_t)&v15[TupleTypeMetadata[12]];
  v89 = &v15[TupleTypeMetadata[16]];
  v90 = &v15[TupleTypeMetadata[20]];
  v91 = &v15[TupleTypeMetadata[24]];
  v105 = &v15[TupleTypeMetadata[28]];
  v106 = (char *)v88;
  v92 = &v15[TupleTypeMetadata[32]];
  v93 = &v15[TupleTypeMetadata[36]];
  ((void (*)(char *, char *, uint64_t))v87)(v15, v116, a10);
  ((void (*)(uint64_t, char *, uint64_t))v87)(v88, v111, a10);
  v94 = v89;
  ((void (*)(char *, char *, uint64_t))v87)(v89, v110, a10);
  ((void (*)(char *, char *, uint64_t))v87)(v90, v109, a10);
  ((void (*)(char *, char *, uint64_t))v87)(v91, v113, a10);
  v95 = v105;
  ((void (*)(char *, char *, uint64_t))v87)(v105, v114, a10);
  ((void (*)(char *, char *, uint64_t))v87)(v92, v115, a10);
  ((void (*)(char *, char *, uint64_t))v87)(v93, v117, a10);
  ((void (*)(uint64_t, char *, uint64_t))v87)(v112 + v107[17], v93, a10);
  v37(v92, a10);
  v37(v95, a10);
  v37(v91, a10);
  v37(v90, a10);
  v37(v94, a10);
  v37(v106, a10);
  return ((uint64_t (*)(char *, uint64_t))v37)(v15, a10);
}

uint64_t sub_1B2176144(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 3170143 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 3235679 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 3301215 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 3366751 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 3432287 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 3497823 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 3563359 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 3628895 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

unint64_t sub_1B21763C0(unsigned __int8 a1)
{
  return ((unint64_t)a1 << 16) + 3170143;
}

uint64_t sub_1B21763D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v13[4];
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v4 = a2[2];
  v3 = a2[3];
  v13[0] = a2;
  v13[1] = v4;
  v5 = type metadata accessor for __FixedArrayCodableStorage8.CodingKeys(255, v4, v3, a2[4]);
  MEMORY[0x1B5E23E74](&unk_1B22C9B20, v5);
  v6 = sub_1B22299C4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A180();
  v21 = 0;
  v11 = v13[3];
  sub_1B2229958();
  if (!v11)
  {
    v20 = 1;
    sub_1B2229958();
    v19 = 2;
    sub_1B2229958();
    v18 = 3;
    sub_1B2229958();
    v17 = 4;
    sub_1B2229958();
    v16 = 5;
    sub_1B2229958();
    v15 = 6;
    sub_1B2229958();
    v14 = 7;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B217668C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  int *v55;
  char *v56;
  char *v57;
  char *v58;
  int *v59;
  char *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;

  v65 = a5;
  v80 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v66 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v67 = (char *)&v63 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v68 = (char *)&v63 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v69 = (char *)&v63 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v70 = (char *)&v63 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v71 = (char *)&v63 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v72 = (char *)&v63 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v73 = (char *)&v63 - v30;
  v34 = type metadata accessor for __FixedArrayCodableStorage8.CodingKeys(255, v31, v32, v33);
  MEMORY[0x1B5E23E74](&unk_1B22C9B20, v34);
  v75 = sub_1B2229898();
  v35 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75, v36);
  v38 = (char *)&v63 - v37;
  v79 = a2;
  v74 = a3;
  v76 = (int *)type metadata accessor for __FixedArrayCodableStorage8(0, a2, a3, a4);
  v39 = *((_QWORD *)v76 - 1);
  MEMORY[0x1E0C80A78](v76, v40);
  v82 = (char *)&v63 - v41;
  v42 = a1[3];
  v78 = a1;
  sub_1B19FA070(a1, v42);
  v77 = v38;
  v43 = v81;
  sub_1B222A150();
  if (v43)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v78);
  v64 = v39;
  v81 = v35;
  v90 = 0;
  v44 = v72;
  v45 = v73;
  v46 = v79;
  sub_1B2229814();
  v47 = v82;
  v73 = *(char **)(v80 + 32);
  ((void (*)(char *, char *, uint64_t))v73)(v82, v45, v46);
  v89 = 1;
  v48 = v44;
  sub_1B2229814();
  v49 = v76;
  ((void (*)(char *, char *, uint64_t))v73)(&v47[v76[11]], v48, v46);
  v88 = 2;
  v50 = v71;
  sub_1B2229814();
  ((void (*)(char *, char *, uint64_t))v73)(&v47[v49[12]], v50, v46);
  v87 = 3;
  v51 = v70;
  sub_1B2229814();
  v52 = (uint64_t)v78;
  ((void (*)(char *, char *, uint64_t))v73)(&v47[v76[13]], v51, v46);
  v86 = 4;
  v53 = v69;
  sub_1B2229814();
  v54 = v53;
  v55 = v76;
  ((void (*)(char *, char *, uint64_t))v73)(&v47[v76[14]], v54, v46);
  v85 = 5;
  v56 = v68;
  sub_1B2229814();
  ((void (*)(char *, char *, uint64_t))v73)(&v47[v55[15]], v56, v46);
  v84 = 6;
  v57 = v67;
  sub_1B2229814();
  ((void (*)(_QWORD, char *, uint64_t))v73)(v55[16], v57, v46);
  v83 = 7;
  v58 = v66;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v77, v75);
  v59 = v76;
  v60 = v82;
  ((void (*)(char *, char *, uint64_t))v73)(&v82[v76[17]], v58, v46);
  v61 = v64;
  (*(void (**)(uint64_t, char *, int *))(v64 + 16))(v65, v60, v59);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v52);
  return (*(uint64_t (**)(char *, int *))(v61 + 8))(v60, v59);
}

uint64_t sub_1B2176DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9B20, a3);
  return sub_1B1F1DDE8();
}

uint64_t sub_1B2176E38()
{
  return sub_1B1CC71B0();
}

uint64_t sub_1B2176E58()
{
  return sub_1B1CC718C();
}

uint64_t sub_1B2176E68(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1B217B180(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1CC718C);
}

unint64_t sub_1B2176E74()
{
  unsigned __int8 *v0;

  return sub_1B21763C0(*v0);
}

uint64_t sub_1B2176E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B2176144(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B2176EB4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1A239AC();
  *a1 = result;
  return result;
}

uint64_t sub_1B2176EE4(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9B20, a1);
  return sub_1B222A1D4();
}

uint64_t sub_1B2176F18(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9B20, a1);
  return sub_1B222A1E0();
}

uint64_t sub_1B2176F4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B217668C(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_1B2176F6C(_QWORD *a1, _QWORD *a2)
{
  return sub_1B21763D8(a1, a2);
}

uint64_t sub_1B2176F80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  char *v18;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  int *TupleTypeMetadata;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  char *v41;

  v30 = a5;
  v31 = type metadata accessor for __FixedArrayCodableStorage8(0, a2, a3, a4);
  MEMORY[0x1E0C80A78](v31, v8);
  v41 = (char *)&v25 - v9;
  v12 = type metadata accessor for FixedArray8(0, a2, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v25 - v15;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v5)
  {
    v24 = (uint64_t)a1;
  }
  else
  {
    v28 = v12;
    v29 = a1;
    v26 = v16;
    v27 = v13;
    sub_1B19FA070(v40, v40[3]);
    v17 = (int *)v31;
    MEMORY[0x1B5E23E74](&unk_1B22C9908, v31);
    v18 = v41;
    sub_1B2229D6C();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(a2 - 8) + 32);
    v21 = v26;
    v20(v26, v18, a2);
    v22 = &v18[v17[11]];
    v32 = a2;
    v33 = a2;
    v34 = a2;
    v35 = a2;
    v36 = a2;
    v37 = a2;
    v38 = a2;
    v39 = a2;
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    v20(&v21[TupleTypeMetadata[12]], v22, a2);
    v20(&v21[TupleTypeMetadata[16]], &v18[v17[12]], a2);
    v20(&v21[TupleTypeMetadata[20]], &v18[v17[13]], a2);
    v20(&v21[TupleTypeMetadata[24]], &v18[v17[14]], a2);
    v20(&v21[TupleTypeMetadata[28]], &v18[v17[15]], a2);
    v20(&v21[TupleTypeMetadata[32]], &v18[v17[16]], a2);
    v20(&v21[TupleTypeMetadata[36]], &v18[v17[17]], a2);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v40);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v30, v21, v28);
    v24 = (uint64_t)v29;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v24);
}

uint64_t sub_1B21771FC(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int *TupleTypeMetadata;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;

  v5 = v4;
  v47 = a4;
  v48 = a3;
  v9 = *(_QWORD *)(a2 + 16);
  v50[1] = v9;
  v50[2] = v9;
  v51 = v9;
  v52 = v9;
  v53 = v9;
  v54 = v9;
  v55 = v9;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v11);
  v13 = (char *)&v36 - v12;
  v46 = type metadata accessor for __FixedArrayCodableStorage8(0, v9, a3, (uint64_t)a4);
  v49 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46, v14);
  v45 = (char *)&v36 - v15;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v16 = TupleTypeMetadata[12];
  v56 = &v13[v16];
  v17 = TupleTypeMetadata[16];
  v18 = &v13[v17];
  v19 = TupleTypeMetadata[20];
  v38 = &v13[v19];
  v20 = TupleTypeMetadata[24];
  v21 = &v13[v20];
  v22 = TupleTypeMetadata[28];
  v41 = &v13[v17];
  v42 = &v13[v22];
  v23 = TupleTypeMetadata[32];
  v44 = &v13[v23];
  v24 = TupleTypeMetadata[36];
  v25 = &v13[v24];
  v26 = v5 + v16;
  v27 = v5 + v17;
  v36 = v5 + v19;
  v37 = v5 + v20;
  v39 = v5 + v22;
  v40 = v5 + v23;
  v43 = v5 + v24;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v28(v13, v5, v9);
  v28(v56, v26, v9);
  v28(v18, v27, v9);
  v29 = v38;
  v30 = (uint64_t)v45;
  v28(v38, v36, v9);
  v31 = v21;
  v28(v21, v37, v9);
  v32 = v42;
  v28(v42, v39, v9);
  v33 = v44;
  v28(v44, v40, v9);
  v28(v25, v43, v9);
  sub_1B2175494((uint64_t)v13, (uint64_t)v56, (uint64_t)v41, v29, v31, v32, v33, v25, v30, v9, v48, v47);
  sub_1B19FC264((uint64_t)v50, v51);
  v34 = v46;
  MEMORY[0x1B5E23E74](&unk_1B22C98E0, v46);
  sub_1B2229DF0();
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v30, v34);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v50);
}

uint64_t sub_1B21774E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1B2176F80(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

uint64_t sub_1B2177504(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B21771FC(a1, a2, *(_QWORD *)(a3 - 8), *(int **)(a3 - 16));
}

uint64_t sub_1B2177520(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata;
  uint64_t v8;
  _QWORD v10[16];

  v5 = *a2;
  v6 = *(_QWORD *)(a3 + 16);
  v10[2] = v6;
  v10[3] = v5;
  v10[4] = a1;
  v10[5] = v6;
  v10[6] = v6;
  v10[7] = v6;
  v10[8] = v6;
  v10[9] = v6;
  v10[10] = v6;
  v10[11] = v6;
  v10[12] = v6;
  v10[13] = v6;
  v10[14] = v6;
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  sub_1B1EF311C(v3, (uint64_t)sub_1B217BD54, (uint64_t)v10, TupleTypeMetadata, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
}

void (*sub_1B21775D4(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD **a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  int *TupleTypeMetadata;
  size_t v10;
  char *v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char v61[16];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v7 = malloc(0xA8uLL);
  *a1 = v7;
  v8 = *(_QWORD *)(a3 + 16);
  v7[10] = v3;
  v7[11] = v8;
  *v7 = v8;
  v7[1] = v8;
  v7[2] = v8;
  v7[3] = v8;
  v7[4] = v8;
  v7[5] = v8;
  v7[6] = v8;
  v7[7] = v8;
  v7[8] = v8;
  v7[9] = v8;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v7[12] = TupleTypeMetadata;
  v52 = *((_QWORD *)TupleTypeMetadata - 1);
  v10 = *(_QWORD *)(v52 + 64);
  v11 = (char *)malloc(v10);
  v7[13] = v11;
  v12 = (char *)malloc(v10);
  v7[14] = v12;
  v53 = *(_QWORD **)(v8 - 8);
  v7[15] = v53;
  v13 = v53[8];
  v51 = (char *)malloc(v13);
  v7[16] = v51;
  v49 = (char *)malloc(v13);
  v50 = *a2;
  v7[17] = v49;
  v7[18] = v50;
  v14 = TupleTypeMetadata[12];
  v15 = &v12[v14];
  v16 = TupleTypeMetadata[16];
  v17 = &v12[v16];
  v47 = &v12[v14];
  v48 = &v12[v16];
  v18 = TupleTypeMetadata[20];
  v54 = &v12[v18];
  v19 = TupleTypeMetadata[24];
  v55 = &v12[v19];
  v20 = TupleTypeMetadata[28];
  v56 = &v12[v20];
  v21 = TupleTypeMetadata[32];
  v57 = &v12[v21];
  v22 = TupleTypeMetadata[36];
  v58 = &v12[v22];
  v23 = TupleTypeMetadata[40];
  v59 = &v12[v23];
  v24 = TupleTypeMetadata[44];
  v60 = &v12[v24];
  v25 = v3 + v14;
  v34 = v3 + v16;
  v35 = v3 + v18;
  v36 = v3 + v19;
  v37 = v3 + v20;
  v39 = v3 + v21;
  v41 = v3 + v22;
  v43 = v3 + v23;
  v45 = v3 + v24;
  v26 = (void (*)(char *, uint64_t, uint64_t))v53[2];
  v7[19] = v26;
  v26(v12, v3, v8);
  v26(v15, v25, v8);
  v26(v17, v34, v8);
  v26(v54, v35, v8);
  v26(v55, v36, v8);
  v26(v56, v37, v8);
  v26(v57, v39, v8);
  v26(v58, v41, v8);
  v26(v59, v43, v8);
  v26(v60, v45, v8);
  v27 = &v11[TupleTypeMetadata[12]];
  v28 = &v11[TupleTypeMetadata[16]];
  v29 = &v11[TupleTypeMetadata[20]];
  v30 = &v11[TupleTypeMetadata[24]];
  v38 = &v11[TupleTypeMetadata[28]];
  v40 = &v11[TupleTypeMetadata[32]];
  v42 = &v11[TupleTypeMetadata[36]];
  v44 = &v11[TupleTypeMetadata[40]];
  v46 = &v11[TupleTypeMetadata[44]];
  v31 = (void (*)(char *, char *, uint64_t))v53[4];
  v31(v11, v12, v8);
  v31(v27, v47, v8);
  v31(v28, v48, v8);
  v31(v29, v54, v8);
  v31(v30, v55, v8);
  v31(v38, v56, v8);
  v31(v40, v57, v8);
  v31(v42, v58, v8);
  v31(v44, v59, v8);
  v31(v46, v60, v8);
  v62 = v8;
  v63 = v50;
  sub_1B1EF311C((uint64_t)v11, (uint64_t)sub_1B217B9B0, (uint64_t)v61, (uint64_t)TupleTypeMetadata, MEMORY[0x1E0DEDCE8], v8, MEMORY[0x1E0DEDD18], v32);
  v7[20] = 0;
  (*(void (**)(char *, int *))(v52 + 8))(v11, TupleTypeMetadata);
  v31(v49, v51, v8);
  return sub_1B21779C8;
}

void sub_1B21779C8(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t (*v3)(void *, void *, uint64_t);
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void *, uint64_t);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = v2[18];
    v3 = (uint64_t (*)(void *, void *, uint64_t))v2[19];
    v6 = (void *)v2[16];
    v5 = (void *)v2[17];
    v7 = (void *)v2[14];
    v9 = v2[12];
    v8 = (void *)v2[13];
    v27 = v2[15];
    v28 = v8;
    v11 = v2[10];
    v10 = v2[11];
    v12 = v3(v6, v5, v10);
    MEMORY[0x1E0C80A78](v12, v13);
    v24 = v10;
    v25 = v4;
    v26 = v6;
    sub_1B1EF311C(v11, (uint64_t)sub_1B217BD54, (uint64_t)v23, v9, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v14);
    v15 = *(void (**)(void *, uint64_t))(v27 + 8);
    v15(v6, v10);
    v16 = v28;
    v15(v5, v10);
  }
  else
  {
    v5 = (void *)v2[17];
    v17 = v2[15];
    v6 = (void *)v2[16];
    v16 = (void *)v2[13];
    v7 = (void *)v2[14];
    v18 = v2[11];
    MEMORY[0x1E0C80A78](v2[10], a2);
    v24 = v18;
    v25 = v19;
    v26 = v5;
    sub_1B1EF311C(v20, (uint64_t)sub_1B217BD54, (uint64_t)v23, v21, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v22);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v5, v18);
  }
  free(v5);
  free(v6);
  free(v7);
  free(v16);
  free(v2);
}

uint64_t sub_1B2177B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B2177B6C(a1, a2, a3, a4, (uint64_t)&unk_1B22C9428);
}

uint64_t sub_1B2177B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;

  sub_1B217BCDC();
  MEMORY[0x1B5E23E74](a5, a3);
  v8 = sub_1B222A03C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
}

uint64_t sub_1B2177BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9508, a3);
  return sub_1B22286BC();
}

uint64_t sub_1B2177C50()
{
  MEMORY[0x1B5E23E74](&unk_1B22C95D8);
  return sub_1B2228D1C();
}

_QWORD *sub_1B2177CA0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2178378(a1, a2, a3, (uint64_t)&unk_1B22C95D8, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB508]);
}

uint64_t sub_1B2177CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22C95D8, a3);
  return sub_1B2228D28();
}

uint64_t sub_1B2177D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1B5E23E74](&unk_1B22C95D8, a4);
  return sub_1B2228D04();
}

uint64_t sub_1B2177D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22C95D8, a3);
  return sub_1B2228D40();
}

void sub_1B2177DD0(_QWORD *a1@<X8>)
{
  *a1 = 10;
}

uint64_t (*sub_1B2177DDC(_QWORD *a1, uint64_t *a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = sub_1B2177E38(v6, *a2, a3);
  return sub_1B1C6BBC4;
}

void (*sub_1B2177E38(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  int *TupleTypeMetadata;
  size_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char v62[16];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = malloc(0x80uLL);
  *a1 = v6;
  v7 = *(_QWORD *)(a3 + 16);
  v6[9] = v7;
  v6[10] = v7;
  *v6 = v7;
  v6[1] = v7;
  v6[2] = v7;
  v6[3] = v7;
  v6[4] = v7;
  v6[5] = v7;
  v6[6] = v7;
  v6[7] = v7;
  v6[8] = v7;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v53 = *((_QWORD *)TupleTypeMetadata - 1);
  v9 = *(_QWORD *)(v53 + 64);
  v10 = (char *)malloc(v9);
  v6[11] = v10;
  v11 = (char *)malloc(v9);
  v6[12] = v11;
  v12 = *(_QWORD *)(v7 - 8);
  v6[13] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v48 = v12;
  v52 = (char *)malloc(v13);
  v6[14] = v52;
  v14 = (char *)malloc(v13);
  v6[15] = v14;
  v15 = TupleTypeMetadata[12];
  v16 = &v11[v15];
  v49 = &v11[v15];
  v17 = TupleTypeMetadata[16];
  v18 = &v11[v17];
  v50 = &v11[v17];
  v51 = v14;
  v19 = TupleTypeMetadata[20];
  v55 = &v11[v19];
  v20 = TupleTypeMetadata[24];
  v56 = &v11[v20];
  v21 = TupleTypeMetadata[28];
  v57 = &v11[v21];
  v22 = TupleTypeMetadata[32];
  v58 = &v11[v22];
  v23 = TupleTypeMetadata[36];
  v59 = &v11[v23];
  v24 = TupleTypeMetadata[40];
  v60 = &v11[v24];
  v25 = TupleTypeMetadata[44];
  v61 = &v11[v25];
  v26 = v3 + v15;
  v36 = v3 + v17;
  v37 = v3 + v19;
  v38 = v3 + v20;
  v39 = v3 + v21;
  v40 = v3 + v22;
  v42 = v3 + v23;
  v44 = v3 + v24;
  v46 = v3 + v25;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v27(v11, v3, v7);
  v27(v16, v26, v7);
  v27(v18, v36, v7);
  v27(v55, v37, v7);
  v27(v56, v38, v7);
  v27(v57, v39, v7);
  v27(v58, v40, v7);
  v27(v59, v42, v7);
  v27(v60, v44, v7);
  v27(v61, v46, v7);
  v28 = &v10[TupleTypeMetadata[12]];
  v29 = &v10[TupleTypeMetadata[16]];
  v30 = &v10[TupleTypeMetadata[20]];
  v31 = &v10[TupleTypeMetadata[24]];
  v32 = &v10[TupleTypeMetadata[28]];
  v41 = &v10[TupleTypeMetadata[32]];
  v43 = &v10[TupleTypeMetadata[36]];
  v45 = &v10[TupleTypeMetadata[40]];
  v47 = &v10[TupleTypeMetadata[44]];
  v33 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  v33(v10, v11, v7);
  v33(v28, v49, v7);
  v33(v29, v50, v7);
  v33(v30, v55, v7);
  v33(v31, v56, v7);
  v33(v32, v57, v7);
  v33(v41, v58, v7);
  v33(v43, v59, v7);
  v33(v45, v60, v7);
  v33(v47, v61, v7);
  v63 = v7;
  v64 = a2;
  sub_1B1EF311C((uint64_t)v10, (uint64_t)sub_1B217B9B0, (uint64_t)v62, (uint64_t)TupleTypeMetadata, MEMORY[0x1E0DEDCE8], v7, MEMORY[0x1E0DEDD18], v34);
  (*(void (**)(char *, int *))(v53 + 8))(v10, TupleTypeMetadata);
  v33(v51, v52, v7);
  return sub_1B2178218;
}

void sub_1B2178218(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 112);
  v2 = *(void **)(*(_QWORD *)a1 + 120);
  v4 = *(void **)(*(_QWORD *)a1 + 96);
  v5 = *(void **)(*(_QWORD *)a1 + 88);
  (*(void (**)(void *, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 104) + 8))(v2, *(_QWORD *)(*(_QWORD *)a1 + 80));
  free(v2);
  free(v3);
  free(v4);
  free(v5);
  free(v1);
}

uint64_t sub_1B2178280@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x1B5E23E74](&unk_1B22C9568);
  return sub_1B216DA28(a1, a2, v6, a3);
}

uint64_t sub_1B21782C8(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C95D8, a1);
  return sub_1B2228D34();
}

uint64_t sub_1B2178314()
{
  MEMORY[0x1B5E23E74](&unk_1B22C95D8);
  return sub_1B2228D10();
}

_QWORD *sub_1B2178364(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2178378(a1, a2, a3, (uint64_t)&unk_1B22C95D8, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB500]);
}

_QWORD *sub_1B2178378(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *(*a5)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v8 = MEMORY[0x1B5E23E74](a4);
  result = a5(&v10, a1, a2, v8, MEMORY[0x1E0DEB458]);
  *a1 = v10;
  return result;
}

uint64_t sub_1B21783D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B21783E4(a1, (uint64_t)&unk_1B22C9428, a2);
}

uint64_t sub_1B21783E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;

  v6 = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(a3, v6, a1);
  MEMORY[0x1B5E23E74](a2, a1);
  result = sub_1B22295F8();
  *(_QWORD *)(a3 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t sub_1B217844C(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9428, a1);
  return sub_1B2228DA0();
}

uint64_t sub_1B2178480(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9428, a1);
  return sub_1B2228DAC();
}

void sub_1B21784B4()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B21784C4()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B21784D4(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B22C9508);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t sub_1B217851C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B22C9568);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE30], a1, &v3);
}

void sub_1B2178564()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B2178574(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B22C95D8);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE40], a1, &v3);
}

uint64_t sub_1B21785BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  int *TupleTypeMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t, double);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v73 = a3;
  v71 = a1;
  v101 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 16);
  v91 = v5;
  v92 = v5;
  v93 = v5;
  v94 = v5;
  v95 = v5;
  v96 = v5;
  v97 = v5;
  v98 = v5;
  v99 = v5;
  v100 = v5;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v70 = *((_QWORD *)TupleTypeMetadata - 1);
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v7);
  v56 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v57 = (char *)&v52 - v11;
  v12 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v69 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v68 = (char *)&v52 - v19;
  MEMORY[0x1B5E23E74](&unk_1B22C9428, a2, v18);
  v20 = sub_1B22295F8();
  v53 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)&v52 - v23;
  v25 = *(void (**)(char *, uint64_t, uint64_t, double))(*(_QWORD *)(a2 - 8) + 16);
  v72 = a2;
  v25(v24, v3, a2, v22);
  v26 = 0;
  v85 = 0;
  v54 = v20;
  v67 = &v24[*(int *)(v20 + 36)];
  *(_QWORD *)v67 = 0;
  v66 = &v24[TupleTypeMetadata[12]];
  v65 = &v24[TupleTypeMetadata[16]];
  v64 = &v24[TupleTypeMetadata[20]];
  v63 = &v24[TupleTypeMetadata[24]];
  v62 = &v24[TupleTypeMetadata[28]];
  v61 = &v24[TupleTypeMetadata[32]];
  v60 = &v24[TupleTypeMetadata[36]];
  v59 = &v24[TupleTypeMetadata[40]];
  v27 = TupleTypeMetadata[44];
  v87 = v24;
  v58 = &v24[v27];
  v86 = v12;
  v55 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v28 = v57;
  do
  {
    v84 = v26;
    v79 = &v28[TupleTypeMetadata[12]];
    v29 = v79;
    v80 = &v28[TupleTypeMetadata[16]];
    v30 = v80;
    v81 = &v28[TupleTypeMetadata[20]];
    v31 = v81;
    v33 = &v28[TupleTypeMetadata[28]];
    v82 = &v28[TupleTypeMetadata[24]];
    v32 = v82;
    v83 = v33;
    v34 = &v28[TupleTypeMetadata[32]];
    v88 = &v28[TupleTypeMetadata[36]];
    v89 = &v28[TupleTypeMetadata[40]];
    v90 = &v28[TupleTypeMetadata[44]];
    v35 = v55;
    v55(v28, v87, v5);
    v35(v29, v66, v5);
    v35(v30, v65, v5);
    v35(v31, v64, v5);
    v35(v32, v63, v5);
    v35(v33, v62, v5);
    v36 = v34;
    v35(v34, v61, v5);
    v35(v88, v60, v5);
    v35(v89, v59, v5);
    v35(v90, v58, v5);
    v37 = (uint64_t)v56;
    v38 = &v56[TupleTypeMetadata[12]];
    v39 = &v56[TupleTypeMetadata[16]];
    v40 = &v56[TupleTypeMetadata[20]];
    v41 = &v56[TupleTypeMetadata[24]];
    v74 = &v56[TupleTypeMetadata[28]];
    v75 = &v56[TupleTypeMetadata[32]];
    v76 = &v56[TupleTypeMetadata[36]];
    v77 = &v56[TupleTypeMetadata[40]];
    v78 = &v56[TupleTypeMetadata[44]];
    v42 = *(void (**)(char *, char *, uint64_t))(v86 + 32);
    v42(v56, v28, v5);
    v42(v38, v79, v5);
    v42(v39, v80, v5);
    v42(v40, v81, v5);
    v42(v41, v82, v5);
    v42(v74, v83, v5);
    v42(v75, v36, v5);
    v42(v76, v88, v5);
    v42(v77, v89, v5);
    v43 = ((uint64_t (*)(char *, char *, uint64_t))v42)(v78, v90, v5);
    MEMORY[0x1E0C80A78](v43, v44);
    v45 = v84;
    v46 = v85;
    *(&v52 - 2) = v5;
    *(&v52 - 1) = v45;
    v47 = v69;
    sub_1B1EF311C(v37, (uint64_t)sub_1B217B9B0, (uint64_t)(&v52 - 4), (uint64_t)TupleTypeMetadata, MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v48);
    v85 = v46;
    (*(void (**)(uint64_t, int *))(v70 + 8))(v37, TupleTypeMetadata);
    v49 = v68;
    v42(v68, v47, v5);
    MEMORY[0x1B5E23E74](&unk_1B22C95D8, v72);
    v50 = (uint64_t *)v67;
    sub_1B2228D10();
    *v50 = v91;
    sub_1B22285E4();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v49, v5);
    v26 = *v50;
  }
  while (*v50 != 10);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v87, v54);
}

uint64_t sub_1B2178C24(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t))
{
  _BYTE v7[72];

  sub_1B222A06C();
  a3(v7, a1, a2);
  return sub_1B222A0C0();
}

uint64_t sub_1B2178C7C(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B216DDA8(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(*(_QWORD *)(a4 - 8) + 8));
}

uint64_t sub_1B2178C8C(uint64_t a1, uint64_t a2)
{
  return sub_1B2178C24(a1, *(_QWORD *)(a2 - 8), (void (*)(_BYTE *, uint64_t, uint64_t))sub_1B21785BC);
}

uint64_t sub_1B2178CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B21785BC(a1, a2, *(_QWORD *)(a3 - 8));
}

uint64_t sub_1B2178CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2178CC0(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))sub_1B21785BC);
}

uint64_t sub_1B2178CC0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t v6;
  _BYTE v8[72];

  v6 = *(_QWORD *)(a3 - 8);
  sub_1B222A06C();
  a4(v8, a2, v6);
  return sub_1B222A0C0();
}

uint64_t sub_1B2178D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, char *a10, int *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int *TupleTypeMetadata;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  void (*v28)(double);
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  void (*v110)(double);
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  int *v135;
  void (*v136)(double);
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v131 = a8;
  v129 = a7;
  v128 = a6;
  v127 = a5;
  v126 = a4;
  v125 = a3;
  v124 = a2;
  v123 = a1;
  v140 = a9;
  v133 = (char *)a14;
  v135 = a11;
  v130 = a10;
  v132 = (char *)a13;
  v148 = a12;
  v149 = a12;
  v150 = a12;
  v151 = a12;
  v152 = a12;
  v153 = a12;
  v154 = a12;
  v155 = a12;
  v156 = a12;
  v157 = a12;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v15);
  v17 = (char *)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v123 + TupleTypeMetadata[12] - v21;
  v141 = (char *)&v123 - v21;
  v142 = v22;
  v24 = (char *)&v123 + TupleTypeMetadata[20] - v21;
  v143 = (char *)&v123 + TupleTypeMetadata[16] - v21;
  v23 = v143;
  v144 = v24;
  v25 = (char *)&v123 + TupleTypeMetadata[24] - v21;
  v137 = (char *)&v123 + TupleTypeMetadata[28] - v21;
  v26 = v137;
  v138 = v25;
  v139 = (char *)&v123 + TupleTypeMetadata[32] - v21;
  v27 = v139;
  v145 = (char *)&v123 + TupleTypeMetadata[36] - v21;
  v146 = (char *)&v123 + TupleTypeMetadata[40] - v21;
  v147 = (char *)&v123 + TupleTypeMetadata[44] - v21;
  v134 = *(char **)(a12 - 8);
  v28 = (void (*)(double))*((_QWORD *)v134 + 4);
  v136 = v28;
  v28(v20);
  ((void (*)(char *, uint64_t, uint64_t))v28)(v22, v124, a12);
  ((void (*)(char *, char *, uint64_t))v28)(v23, v125, a12);
  ((void (*)(char *, char *, uint64_t))v28)(v24, v126, a12);
  ((void (*)(char *, char *, uint64_t))v28)(v25, v127, a12);
  ((void (*)(char *, char *, uint64_t))v28)(v26, v128, a12);
  ((void (*)(char *, char *, uint64_t))v28)(v27, v129, a12);
  ((void (*)(char *, char *, uint64_t))v28)(v145, v131, a12);
  ((void (*)(char *, char *, uint64_t))v28)(v146, v130, a12);
  ((void (*)(char *, int *, uint64_t))v28)(v147, v135, a12);
  v131 = &v17[TupleTypeMetadata[12]];
  v29 = v131;
  v130 = &v17[TupleTypeMetadata[16]];
  v30 = v130;
  v135 = (int *)&v17[TupleTypeMetadata[20]];
  v129 = &v17[TupleTypeMetadata[24]];
  v31 = v129;
  v32 = &v17[TupleTypeMetadata[28]];
  v127 = &v17[TupleTypeMetadata[32]];
  v128 = &v17[TupleTypeMetadata[36]];
  v33 = &v17[TupleTypeMetadata[40]];
  v34 = &v17[TupleTypeMetadata[44]];
  v35 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v134 + 2);
  v35(v17, v141, a12);
  v35(v29, v142, a12);
  v35(v30, v143, a12);
  v35((char *)v135, v144, a12);
  v35(v31, v138, a12);
  v35(v32, v137, a12);
  v36 = v127;
  v35(v127, v139, a12);
  v37 = v128;
  v35(v128, v145, a12);
  v35(v33, v146, a12);
  v35(v34, v147, a12);
  ((void (*)(uint64_t, char *, uint64_t))v136)(v140, v17, a12);
  v38 = (void (*)(char *, uint64_t))*((_QWORD *)v134 + 1);
  v38(v34, a12);
  v38(v33, a12);
  v38(v37, a12);
  v38(v36, a12);
  v38(v32, a12);
  v38(v129, a12);
  v38((char *)v135, a12);
  v38(v130, a12);
  v38(v131, a12);
  v129 = &v17[TupleTypeMetadata[12]];
  v39 = v129;
  v134 = &v17[TupleTypeMetadata[16]];
  v40 = v134;
  v131 = &v17[TupleTypeMetadata[20]];
  v41 = v131;
  v42 = &v17[TupleTypeMetadata[24]];
  v130 = &v17[TupleTypeMetadata[28]];
  v43 = v130;
  v125 = &v17[TupleTypeMetadata[32]];
  v126 = &v17[TupleTypeMetadata[36]];
  v127 = &v17[TupleTypeMetadata[40]];
  v128 = &v17[TupleTypeMetadata[44]];
  v35(v17, v141, a12);
  v35(v39, v142, a12);
  v35(v40, v143, a12);
  v35(v41, v144, a12);
  v44 = v42;
  v35(v42, v138, a12);
  v35(v43, v137, a12);
  v45 = v125;
  v35(v125, v139, a12);
  v46 = v126;
  v35(v126, v145, a12);
  v47 = v127;
  v35(v127, v146, a12);
  v48 = v128;
  v35(v128, v147, a12);
  v135 = (int *)type metadata accessor for __FixedArrayCodableStorage10(0, a12, (uint64_t)v132, (uint64_t)v133);
  ((void (*)(uint64_t, char *, uint64_t))v136)(v140 + v135[11], v129, a12);
  v38(v48, a12);
  v38(v47, a12);
  v38(v46, a12);
  v38(v45, a12);
  v38(v130, a12);
  v38(v44, a12);
  v38(v131, a12);
  v38(v134, a12);
  v38(v17, a12);
  v134 = &v17[TupleTypeMetadata[12]];
  v49 = v134;
  v129 = &v17[TupleTypeMetadata[16]];
  v50 = v129;
  v51 = &v17[TupleTypeMetadata[20]];
  v133 = &v17[TupleTypeMetadata[24]];
  v52 = (uint64_t)v133;
  v132 = &v17[TupleTypeMetadata[28]];
  v53 = (uint64_t)v132;
  v127 = &v17[TupleTypeMetadata[32]];
  v128 = &v17[TupleTypeMetadata[36]];
  v130 = &v17[TupleTypeMetadata[40]];
  v131 = &v17[TupleTypeMetadata[44]];
  v35(v17, v141, a12);
  v35(v49, v142, a12);
  v35(v50, v143, a12);
  v54 = v51;
  v35(v51, v144, a12);
  v35((char *)v52, v138, a12);
  v35((char *)v53, v137, a12);
  v55 = v127;
  v35(v127, v139, a12);
  v56 = v128;
  v35(v128, v145, a12);
  v57 = v130;
  v35(v130, v146, a12);
  v58 = v131;
  v35(v131, v147, a12);
  ((void (*)(uint64_t, char *, uint64_t))v136)(v140 + v135[12], v129, a12);
  v38(v58, a12);
  v38(v57, a12);
  v38(v56, a12);
  v38(v55, a12);
  v38(v132, a12);
  v38(v133, a12);
  v38(v54, a12);
  v38(v134, a12);
  v38(v17, a12);
  v133 = &v17[TupleTypeMetadata[12]];
  v59 = (uint64_t)v133;
  v132 = &v17[TupleTypeMetadata[16]];
  v60 = (uint64_t)v132;
  v129 = &v17[TupleTypeMetadata[20]];
  v61 = v129;
  v134 = &v17[TupleTypeMetadata[24]];
  v128 = &v17[TupleTypeMetadata[28]];
  v62 = &v17[TupleTypeMetadata[32]];
  v130 = &v17[TupleTypeMetadata[36]];
  v63 = &v17[TupleTypeMetadata[40]];
  v131 = &v17[TupleTypeMetadata[44]];
  v35(v17, v141, a12);
  v35((char *)v59, v142, a12);
  v35((char *)v60, v143, a12);
  v35(v61, v144, a12);
  v35(v134, v138, a12);
  v64 = v128;
  v35(v128, v137, a12);
  v35(v62, v139, a12);
  v65 = v130;
  v35(v130, v145, a12);
  v35(v63, v146, a12);
  v66 = v131;
  v35(v131, v147, a12);
  ((void (*)(uint64_t, char *, uint64_t))v136)(v140 + v135[13], v129, a12);
  v38(v66, a12);
  v38(v63, a12);
  v38(v65, a12);
  v38(v62, a12);
  v38(v64, a12);
  v38(v134, a12);
  v38(v132, a12);
  v38(v133, a12);
  v38(v17, a12);
  v133 = &v17[TupleTypeMetadata[12]];
  v67 = (uint64_t)v133;
  v132 = &v17[TupleTypeMetadata[16]];
  v68 = (uint64_t)v132;
  v134 = &v17[TupleTypeMetadata[20]];
  v128 = &v17[TupleTypeMetadata[24]];
  v69 = v128;
  v70 = &v17[TupleTypeMetadata[28]];
  v129 = &v17[TupleTypeMetadata[32]];
  v130 = &v17[TupleTypeMetadata[36]];
  v131 = &v17[TupleTypeMetadata[40]];
  v71 = &v17[TupleTypeMetadata[44]];
  v35(v17, v141, a12);
  v35((char *)v67, v142, a12);
  v35((char *)v68, v143, a12);
  v35(v134, v144, a12);
  v35(v69, v138, a12);
  v72 = v70;
  v35(v70, v137, a12);
  v73 = v129;
  v35(v129, v139, a12);
  v74 = v130;
  v35(v130, v145, a12);
  v75 = v131;
  v35(v131, v146, a12);
  v35(v71, v147, a12);
  ((void (*)(uint64_t, char *, uint64_t))v136)(v140 + v135[14], v128, a12);
  v38(v71, a12);
  v38(v75, a12);
  v38(v74, a12);
  v38(v73, a12);
  v38(v72, a12);
  v38(v134, a12);
  v38(v132, a12);
  v38(v133, a12);
  v38(v17, a12);
  v133 = &v17[TupleTypeMetadata[12]];
  v76 = (uint64_t)v133;
  v132 = &v17[TupleTypeMetadata[16]];
  v77 = (uint64_t)v132;
  v134 = &v17[TupleTypeMetadata[20]];
  v131 = &v17[TupleTypeMetadata[24]];
  v78 = v131;
  v79 = &v17[TupleTypeMetadata[28]];
  v128 = &v17[TupleTypeMetadata[32]];
  v129 = &v17[TupleTypeMetadata[36]];
  v130 = &v17[TupleTypeMetadata[40]];
  v80 = &v17[TupleTypeMetadata[44]];
  v35(v17, v141, a12);
  v35((char *)v76, v142, a12);
  v35((char *)v77, v143, a12);
  v35(v134, v144, a12);
  v35(v78, v138, a12);
  v81 = v79;
  v35(v79, v137, a12);
  v82 = v128;
  v35(v128, v139, a12);
  v83 = v129;
  v35(v129, v145, a12);
  v84 = v130;
  v35(v130, v146, a12);
  v35(v80, v147, a12);
  ((void (*)(uint64_t, char *, uint64_t))v136)(v140 + v135[15], v81, a12);
  v38(v80, a12);
  v38(v84, a12);
  v38(v83, a12);
  v38(v82, a12);
  v38(v131, a12);
  v38(v134, a12);
  v38(v132, a12);
  v38(v133, a12);
  v38(v17, a12);
  v133 = &v17[TupleTypeMetadata[12]];
  v85 = (uint64_t)v133;
  v132 = &v17[TupleTypeMetadata[16]];
  v86 = (uint64_t)v132;
  v134 = &v17[TupleTypeMetadata[20]];
  v131 = &v17[TupleTypeMetadata[24]];
  v87 = v131;
  v88 = &v17[TupleTypeMetadata[28]];
  v128 = &v17[TupleTypeMetadata[32]];
  v129 = &v17[TupleTypeMetadata[36]];
  v130 = &v17[TupleTypeMetadata[40]];
  v89 = &v17[TupleTypeMetadata[44]];
  v35(v17, v141, a12);
  v35((char *)v85, v142, a12);
  v35((char *)v86, v143, a12);
  v35(v134, v144, a12);
  v35(v87, v138, a12);
  v35(v88, v137, a12);
  v90 = v128;
  v35(v128, v139, a12);
  v91 = v129;
  v35(v129, v145, a12);
  v92 = v130;
  v35(v130, v146, a12);
  v35(v89, v147, a12);
  ((void (*)(uint64_t, char *, uint64_t))v136)(v140 + v135[16], v90, a12);
  v38(v89, a12);
  v38(v92, a12);
  v38(v91, a12);
  v38(v88, a12);
  v38(v131, a12);
  v38(v134, a12);
  v38(v132, a12);
  v38(v133, a12);
  v38(v17, a12);
  v133 = &v17[TupleTypeMetadata[12]];
  v93 = (uint64_t)v133;
  v132 = &v17[TupleTypeMetadata[16]];
  v94 = (uint64_t)v132;
  v134 = &v17[TupleTypeMetadata[20]];
  v131 = &v17[TupleTypeMetadata[24]];
  v95 = v131;
  v96 = &v17[TupleTypeMetadata[28]];
  v128 = &v17[TupleTypeMetadata[32]];
  v97 = &v17[TupleTypeMetadata[36]];
  v129 = &v17[TupleTypeMetadata[40]];
  v130 = &v17[TupleTypeMetadata[44]];
  v35(v17, v141, a12);
  v35((char *)v93, v142, a12);
  v35((char *)v94, v143, a12);
  v35(v134, v144, a12);
  v35(v95, v138, a12);
  v35(v96, v137, a12);
  v98 = v128;
  v35(v128, v139, a12);
  v35(v97, v145, a12);
  v99 = v129;
  v35(v129, v146, a12);
  v100 = v130;
  v35(v130, v147, a12);
  ((void (*)(uint64_t, char *, uint64_t))v136)(v140 + v135[17], v97, a12);
  v38(v100, a12);
  v38(v99, a12);
  v38(v98, a12);
  v38(v96, a12);
  v38(v131, a12);
  v38(v134, a12);
  v38(v132, a12);
  v38(v133, a12);
  v38(v17, a12);
  v133 = &v17[TupleTypeMetadata[12]];
  v101 = (uint64_t)v133;
  v132 = &v17[TupleTypeMetadata[16]];
  v102 = (uint64_t)v132;
  v134 = &v17[TupleTypeMetadata[20]];
  v131 = &v17[TupleTypeMetadata[24]];
  v103 = v131;
  v104 = &v17[TupleTypeMetadata[28]];
  v128 = &v17[TupleTypeMetadata[32]];
  v129 = &v17[TupleTypeMetadata[36]];
  v105 = &v17[TupleTypeMetadata[40]];
  v130 = &v17[TupleTypeMetadata[44]];
  v35(v17, v141, a12);
  v35((char *)v101, v142, a12);
  v35((char *)v102, v143, a12);
  v35(v134, v144, a12);
  v35(v103, v138, a12);
  v35(v104, v137, a12);
  v106 = v128;
  v35(v128, v139, a12);
  v107 = v129;
  v35(v129, v145, a12);
  v35(v105, v146, a12);
  v108 = v130;
  v35(v130, v147, a12);
  v109 = v105;
  v110 = v136;
  ((void (*)(uint64_t, char *, uint64_t))v136)(v140 + v135[18], v109, a12);
  v38(v108, a12);
  v38(v107, a12);
  v38(v106, a12);
  v38(v104, a12);
  v38(v131, a12);
  v38(v134, a12);
  v38(v132, a12);
  v38(v133, a12);
  v38(v17, a12);
  v134 = &v17[TupleTypeMetadata[12]];
  v111 = v134;
  v133 = &v17[TupleTypeMetadata[16]];
  v112 = (uint64_t)v133;
  v113 = &v17[TupleTypeMetadata[20]];
  v132 = &v17[TupleTypeMetadata[24]];
  v114 = (uint64_t)v132;
  v115 = &v17[TupleTypeMetadata[28]];
  v129 = &v17[TupleTypeMetadata[32]];
  v130 = &v17[TupleTypeMetadata[36]];
  v131 = &v17[TupleTypeMetadata[40]];
  v116 = &v17[TupleTypeMetadata[44]];
  ((void (*)(char *, char *, uint64_t))v110)(v17, v141, a12);
  ((void (*)(char *, char *, uint64_t))v110)(v111, v142, a12);
  ((void (*)(uint64_t, char *, uint64_t))v110)(v112, v143, a12);
  v117 = v113;
  ((void (*)(char *, char *, uint64_t))v110)(v113, v144, a12);
  ((void (*)(uint64_t, char *, uint64_t))v110)(v114, v138, a12);
  v118 = v115;
  ((void (*)(char *, char *, uint64_t))v110)(v115, v137, a12);
  v119 = v129;
  ((void (*)(char *, char *, uint64_t))v110)(v129, v139, a12);
  v120 = v130;
  ((void (*)(char *, char *, uint64_t))v110)(v130, v145, a12);
  v121 = v131;
  ((void (*)(char *, char *, uint64_t))v110)(v131, v146, a12);
  ((void (*)(char *, char *, uint64_t))v110)(v116, v147, a12);
  ((void (*)(uint64_t, char *, uint64_t))v110)(v140 + v135[19], v116, a12);
  v38(v121, a12);
  v38(v120, a12);
  v38(v119, a12);
  v38(v118, a12);
  v38(v132, a12);
  v38(v117, a12);
  v38(v133, a12);
  v38(v134, a12);
  return ((uint64_t (*)(char *, uint64_t))v38)(v17, a12);
}

uint64_t sub_1B217A270(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 3170143 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 3235679 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 3301215 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 3366751 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 3432287 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 3497823 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 3563359 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 3628895 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 3694431 && a2 == 0xE300000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 3759967 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_1B217A57C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v4 = a2[2];
  v3 = a2[3];
  v5 = a2[4];
  v14[1] = a2;
  v14[2] = v5;
  v6 = type metadata accessor for __FixedArrayCodableStorage10.CodingKeys(255, v4, v3, v5);
  MEMORY[0x1B5E23E74](&unk_1B22C9AD0, v6);
  v7 = sub_1B22299C4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v14 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A180();
  v24 = 0;
  v12 = v14[4];
  sub_1B2229958();
  if (!v12)
  {
    v23 = 1;
    sub_1B2229958();
    v22 = 2;
    sub_1B2229958();
    v21 = 3;
    sub_1B2229958();
    v20 = 4;
    sub_1B2229958();
    v19 = 5;
    sub_1B2229958();
    v18 = 6;
    sub_1B2229958();
    v17 = 7;
    sub_1B2229958();
    v16 = 8;
    sub_1B2229958();
    v15 = 9;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B217A89C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  int *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;

  v70 = a5;
  v87 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v71 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v72 = (char *)&v68 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v73 = (char *)&v68 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v74 = (char *)&v68 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v75 = (char *)&v68 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v76 = (char *)&v68 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v77 = (char *)&v68 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v79 = (char *)&v68 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v78 = (char *)&v68 - v33;
  MEMORY[0x1E0C80A78](v34, v35);
  v81 = (void (*)(char *, char *, uint64_t))((char *)&v68 - v36);
  v40 = type metadata accessor for __FixedArrayCodableStorage10.CodingKeys(255, v37, v38, v39);
  MEMORY[0x1B5E23E74](&unk_1B22C9AD0, v40);
  v83 = sub_1B2229898();
  v41 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v42);
  v44 = (char *)&v68 - v43;
  v86 = a2;
  v80 = a3;
  v88 = type metadata accessor for __FixedArrayCodableStorage10(0, a2, a3, a4);
  v45 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v46);
  v89 = (char *)&v68 - v47;
  v48 = a1[3];
  v84 = a1;
  sub_1B19FA070(a1, v48);
  v82 = v44;
  v49 = v85;
  sub_1B222A150();
  if (v49)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v84);
  v51 = v78;
  v50 = v79;
  v69 = v45;
  v85 = v41;
  v99 = 0;
  v52 = v86;
  sub_1B2229814();
  v53 = *(void (**)(char *, char *, uint64_t))(v87 + 32);
  v54 = v89;
  v53(v89, (char *)v81, v52);
  v98 = 1;
  sub_1B2229814();
  v55 = v53;
  v56 = (int *)v88;
  v57 = &v54[*(int *)(v88 + 44)];
  v81 = v55;
  v55(v57, v51, v52);
  v97 = 2;
  sub_1B2229814();
  v81(&v54[v56[12]], v50, v52);
  v96 = 3;
  v58 = v77;
  sub_1B2229814();
  v81(&v54[v56[13]], v58, v52);
  v95 = 4;
  v59 = v76;
  sub_1B2229814();
  v81(&v54[v56[14]], v59, v52);
  v94 = 5;
  v60 = v75;
  sub_1B2229814();
  v81(&v54[v56[15]], v60, v52);
  v93 = 6;
  v61 = v74;
  sub_1B2229814();
  v81(&v54[v56[16]], v61, v52);
  v92 = 7;
  v62 = v73;
  sub_1B2229814();
  v81(&v54[v56[17]], v62, v52);
  v91 = 8;
  v63 = v72;
  sub_1B2229814();
  v81(&v54[v56[18]], v63, v52);
  v90 = 9;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v82, v83);
  v64 = v88;
  v65 = v89;
  v81(&v89[*(int *)(v88 + 76)], v71, v52);
  v66 = v69;
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 16))(v70, v65, v64);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v84);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v65, v64);
}

uint64_t sub_1B217B128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9AD0, a3);
  return sub_1B1F1DDE8();
}

uint64_t sub_1B217B174(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return sub_1B217B180(a1, a2, a3, (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B217D820);
}

uint64_t sub_1B217B180(uint64_t a1, _QWORD *a2, uint64_t a3, void (*a4)(_BYTE *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  unsigned __int8 *v4;
  _BYTE v8[72];

  sub_1B222A06C();
  a4(v8, *v4, a2[2], a2[3], a2[4]);
  return sub_1B222A0C0();
}

uint64_t sub_1B217B1D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B217A270(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B217B204@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D2CDE0();
  *a1 = result;
  return result;
}

uint64_t sub_1B217B234(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9AD0, a1);
  return sub_1B222A1D4();
}

uint64_t sub_1B217B268(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22C9AD0, a1);
  return sub_1B222A1E0();
}

uint64_t sub_1B217B29C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B217A89C(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t sub_1B217B2BC(_QWORD *a1, _QWORD *a2)
{
  return sub_1B217A57C(a1, a2);
}

uint64_t sub_1B217B2D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  char *v18;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  char *v22;
  int *TupleTypeMetadata;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  char *v42;

  v29 = a5;
  v30 = type metadata accessor for __FixedArrayCodableStorage10(0, a2, a3, a4);
  MEMORY[0x1E0C80A78](v30, v8);
  v42 = (char *)&v25 - v9;
  v12 = type metadata accessor for FixedArray10(0, a2, v10, v11);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v25 - v15;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v5)
  {
    v24 = (uint64_t)a1;
  }
  else
  {
    v27 = v12;
    v28 = a1;
    v25 = v16;
    v26 = v13;
    sub_1B19FA070(v41, v41[3]);
    v17 = (int *)v30;
    MEMORY[0x1B5E23E74](&unk_1B22C98B8, v30);
    v18 = v42;
    sub_1B2229D6C();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(a2 - 8) + 32);
    v21 = v25;
    v20(v25, v18, a2);
    v22 = &v18[v17[11]];
    v31 = a2;
    v32 = a2;
    v33 = a2;
    v34 = a2;
    v35 = a2;
    v36 = a2;
    v37 = a2;
    v38 = a2;
    v39 = a2;
    v40 = a2;
    TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
    v20(&v21[TupleTypeMetadata[12]], v22, a2);
    v20(&v21[TupleTypeMetadata[16]], &v18[v17[12]], a2);
    v20(&v21[TupleTypeMetadata[20]], &v18[v17[13]], a2);
    v20(&v21[TupleTypeMetadata[24]], &v18[v17[14]], a2);
    v20(&v21[TupleTypeMetadata[28]], &v18[v17[15]], a2);
    v20(&v21[TupleTypeMetadata[32]], &v18[v17[16]], a2);
    v20(&v21[TupleTypeMetadata[36]], &v18[v17[17]], a2);
    v20(&v21[TupleTypeMetadata[40]], &v18[v17[18]], a2);
    v20(&v21[TupleTypeMetadata[44]], &v18[v17[19]], a2);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v29, v21, v27);
    v24 = (uint64_t)v28;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v24);
}

uint64_t sub_1B217B580(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  int *TupleTypeMetadata;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;

  v5 = v4;
  v52 = a4;
  v53 = a3;
  v9 = *(_QWORD *)(a2 + 16);
  v57[0] = v9;
  v57[1] = v9;
  v57[2] = v9;
  v58 = v9;
  v59 = v9;
  v60 = v9;
  v61 = v9;
  v62 = v9;
  v63 = v9;
  v64 = v9;
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  MEMORY[0x1E0C80A78](TupleTypeMetadata, v11);
  v13 = (char *)&v39 - v12;
  v50 = type metadata accessor for __FixedArrayCodableStorage10(0, v9, a3, a4);
  v54 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v14);
  v51 = (uint64_t)&v39 - v15;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v16 = TupleTypeMetadata[12];
  v65 = &v13[v16];
  v17 = TupleTypeMetadata[16];
  v56 = &v13[v17];
  v18 = TupleTypeMetadata[20];
  v19 = &v13[v18];
  v43 = &v13[v18];
  v20 = TupleTypeMetadata[24];
  v55 = &v13[v20];
  v21 = TupleTypeMetadata[28];
  v42 = &v13[v21];
  v22 = TupleTypeMetadata[32];
  v45 = &v13[v22];
  v23 = TupleTypeMetadata[36];
  v46 = &v13[v23];
  v24 = TupleTypeMetadata[40];
  v48 = &v13[v24];
  v25 = TupleTypeMetadata[44];
  v49 = (int *)&v13[v25];
  v26 = v5 + v16;
  v27 = v5 + v17;
  v28 = v5 + v18;
  v29 = v5 + v20;
  v39 = v5 + v21;
  v40 = v5 + v22;
  v41 = v5 + v23;
  v44 = v5 + v24;
  v47 = v5 + v25;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v30(v13, v5, v9);
  v30(v65, v26, v9);
  v30(v56, v27, v9);
  v30(v19, v28, v9);
  v30(v55, v29, v9);
  v31 = v42;
  v32 = v50;
  v30(v42, v39, v9);
  v33 = v45;
  v30(v45, v40, v9);
  v34 = v46;
  v30(v46, v41, v9);
  v35 = v48;
  v30(v48, v44, v9);
  v36 = v49;
  v30((char *)v49, v47, v9);
  v37 = v51;
  sub_1B2178D14((uint64_t)v13, (uint64_t)v65, v56, v43, v55, v31, v33, v34, v51, v35, v36, v9, v53, v52);
  sub_1B19FC264((uint64_t)v57, v58);
  MEMORY[0x1B5E23E74](&unk_1B22C9890, v32);
  sub_1B2229DF0();
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v37, v32);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v57);
}

uint64_t sub_1B217B8E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1B217B2D0(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16), a4);
}

uint64_t sub_1B217B908(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B217B580(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

uint64_t sub_1B217B924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x1B5E23E74](&unk_1B22C96F4, a1, &v4);
}

uint64_t sub_1B217B958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x1B5E23E74](&unk_1B22C97F4, a1, &v4);
}

uint64_t sub_1B217B98C@<X0>(uint64_t a1@<X8>)
{
  return sub_1B217BD6C(a1);
}

uint64_t type metadata accessor for __FixedArrayCodableStorage8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for __FixedArrayCodableStorage8);
}

uint64_t sub_1B217B9B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1B217BD6C(a1);
}

uint64_t type metadata accessor for __FixedArrayCodableStorage10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for __FixedArrayCodableStorage10);
}

uint64_t sub_1B217B9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B217B9FC(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848], (void (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3C0]);
}

uint64_t sub_1B217B9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B217B9FC(a1, a2, a3, a4, MEMORY[0x1E0DEA4B0], (void (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0DEA3D0]);
}

uint64_t sub_1B217B9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), void (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t, uint64_t);

  v24 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v23 - v14;
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v23 - v19;
  v21 = sub_1B2228668();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v21 & 1) != 0)
    v24(v20, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, AssociatedTypeWitness);
}

uint64_t sub_1B217BB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = sub_1B2228E48();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v17 - v11;
  v13 = sub_1B2228668();
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v12, a1, v4);
  v14(v8, a2, v4);
  if ((v13 & 1) != 0)
    sub_1B2228668();
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, v4);
}

uint64_t sub_1B217BCDC()
{
  uint64_t v0;

  v0 = sub_1B222A03C();
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE48], v0);
  return sub_1B2229A00();
}

uint64_t sub_1B217BD54()
{
  return sub_1B217BDDC();
}

uint64_t sub_1B217BD6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = sub_1B22286EC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v5 + *(_QWORD *)(*(_QWORD *)(v4 - 8) + 72) * v3, v4);
}

uint64_t sub_1B217BDC4()
{
  return sub_1B217BDDC();
}

uint64_t sub_1B217BDDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  v4 = sub_1B222913C();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 24))(v4 + *(_QWORD *)(*(_QWORD *)(v1 - 8) + 72) * v2, v3, v1);
}

uint64_t sub_1B217BE34()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B217BEB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ~v7;
  v9 = v7 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0;
  if (v9
    && (v10 = *(_QWORD *)(v6 + 64),
        v11 = v10 + v7,
        ((v10
        + v7
        + ((v10
          + v7
          + ((v10
            + v7
            + ((v10
              + v7
              + ((v10 + v7 + ((v10 + v7 + ((v10 + v7 + ((v10 + v7 + ((v10 + v7) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & (unint64_t)~v7)
      + v10 <= 0x18))
  {
    v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v12(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = ((unint64_t)a2 + v11) & v8;
    v12((uint64_t *)(((unint64_t)v4 + v11) & v8), (uint64_t *)v13, v5);
    v14 = (v11 + v13) & v8;
    v12((uint64_t *)((v11 + (((unint64_t)v4 + v11) & v8)) & v8), (uint64_t *)v14, v5);
    v15 = (v11 + v14) & v8;
    v12((uint64_t *)((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8), (uint64_t *)v15, v5);
    v16 = (v11 + v15) & v8;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8), (uint64_t *)v16, v5);
    v17 = (v11 + v16) & v8;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8), (uint64_t *)v17, v5);
    v18 = (v11 + v17) & v8;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8), (uint64_t *)v18, v5);
    v19 = (v11 + v18) & v8;
    v12((uint64_t *)((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8), (uint64_t *)v19, v5);
    v20 = (v11 + v19) & v8;
    v12((uint64_t *)((v11+ ((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8), (uint64_t *)v20, v5);
    v12((uint64_t *)((v11+ ((v11+ ((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8), (uint64_t *)((v11 + v20) & v8), v5);
  }
  else
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v21 + ((v7 + 16) & v8));
    swift_retain();
  }
  return v4;
}

uint64_t sub_1B217C0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v17)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v17 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v17(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = (v5 + v6 + a1) & ~v6;
  v17(v8, v3);
  v9 = (v7 + v8) & ~v6;
  v17(v9, v3);
  v10 = (v7 + v9) & ~v6;
  v17(v10, v3);
  v11 = (v7 + v10) & ~v6;
  v17(v11, v3);
  v12 = (v7 + v11) & ~v6;
  v17(v12, v3);
  v13 = (v7 + v12) & ~v6;
  v17(v13, v3);
  v14 = (v7 + v13) & ~v6;
  v17(v14, v3);
  v15 = (v7 + v14) & ~v6;
  v17(v15, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v17)((v7 + v15) & ~v6, v3);
}

uint64_t sub_1B217C1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v16 = (v9 + v15) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, v5);
  v17 = (v9 + v16) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, v5);
  v7((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v17) & ~v8, v5);
  return a1;
}

uint64_t sub_1B217C34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v16 = (v9 + v15) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, v5);
  v17 = (v9 + v16) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, v5);
  v7((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v17) & ~v8, v5);
  return a1;
}

uint64_t sub_1B217C4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v16 = (v9 + v15) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, v5);
  v17 = (v9 + v16) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, v5);
  v7((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v17) & ~v8, v5);
  return a1;
}

uint64_t sub_1B217C634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v16 = (v9 + v15) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v16, v5);
  v17 = (v9 + v16) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v17, v5);
  v7((v9+ ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v17) & ~v8, v5);
  return a1;
}

uint64_t sub_1B217C7A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = ((v7
       + v8
       + ((v7
         + v8
         + ((v7
           + v8
           + ((v7
             + v8
             + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)
     + v7;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v12 = ((v6 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_18;
LABEL_11:
  v13 = (v11 - 1) << v10;
  if (v9 > 3)
    v13 = 0;
  if (!(_DWORD)v9)
    return v5 + v13 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B217C8A8 + 4 * byte_1B22C90E0[(v9 - 1)]))();
}

void sub_1B217C8F8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((v8
        + v9
        + ((v8
          + v9
          + ((v8
            + v9
            + ((v8
              + v9
              + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  v11 = a3 >= v7;
  v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      v15 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v15))
      {
        v13 = 4u;
      }
      else if (v15 >= 0x100)
      {
        v13 = 2;
      }
      else
      {
        v13 = v15 > 1;
      }
    }
    else
    {
      v13 = 1u;
    }
  }
  else
  {
    v13 = 0u;
  }
  if (v7 < a2)
  {
    v14 = ~v7 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v16;
          *((_BYTE *)a1 + 2) = BYTE2(v16);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v16;
        }
        else
        {
          *(_BYTE *)a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_1B217CAF8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B217CB70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = ~v7;
  v9 = v7 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0;
  if (v9
    && (v10 = *(_QWORD *)(v6 + 64),
        v11 = v10 + v7,
        ((v10
        + v7
        + ((v10
          + v7
          + ((v10 + v7 + ((v10 + v7 + ((v10 + v7 + ((v10 + v7 + ((v10 + v7) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & ~v7)) & (unint64_t)~v7)
      + v10 <= 0x18))
  {
    v12 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v12(a1, a2, *(_QWORD *)(a3 + 16));
    v13 = ((unint64_t)a2 + v11) & v8;
    v12((uint64_t *)(((unint64_t)v4 + v11) & v8), (uint64_t *)v13, v5);
    v14 = (v11 + v13) & v8;
    v12((uint64_t *)((v11 + (((unint64_t)v4 + v11) & v8)) & v8), (uint64_t *)v14, v5);
    v15 = (v11 + v14) & v8;
    v12((uint64_t *)((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8), (uint64_t *)v15, v5);
    v16 = (v11 + v15) & v8;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8), (uint64_t *)v16, v5);
    v17 = (v11 + v16) & v8;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8), (uint64_t *)v17, v5);
    v18 = (v11 + v17) & v8;
    v12((uint64_t *)((v11 + ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8), (uint64_t *)v18, v5);
    v12((uint64_t *)((v11+ ((v11+ ((v11 + ((v11 + ((v11 + ((v11 + (((unint64_t)v4 + v11) & v8)) & v8)) & v8)) & v8)) & v8)) & v8)) & v8), (uint64_t *)((v11 + v18) & v8), v5);
  }
  else
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v7 + 16) & v8));
    swift_retain();
  }
  return v4;
}

uint64_t sub_1B217CD20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v15)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v15 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v15(a1, v3);
  v5 = *(_QWORD *)(v4 + 64);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = v5 + v6;
  v8 = (v5 + v6 + a1) & ~v6;
  v15(v8, v3);
  v9 = (v7 + v8) & ~v6;
  v15(v9, v3);
  v10 = (v7 + v9) & ~v6;
  v15(v10, v3);
  v11 = (v7 + v10) & ~v6;
  v15(v11, v3);
  v12 = (v7 + v11) & ~v6;
  v15(v12, v3);
  v13 = (v7 + v12) & ~v6;
  v15(v13, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)((v7 + v13) & ~v6, v3);
}

uint64_t sub_1B217CE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v15) & ~v8, v5);
  return a1;
}

uint64_t sub_1B217CF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v15) & ~v8, v5);
  return a1;
}

uint64_t sub_1B217D080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v15) & ~v8, v5);
  return a1;
}

uint64_t sub_1B217D1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v12 = (v9 + v11) & ~v8;
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, v12, v5);
  v13 = (v9 + v12) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8, v13, v5);
  v14 = (v9 + v13) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v14, v5);
  v15 = (v9 + v14) & ~v8;
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, v15, v5);
  v7((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8, (v9 + v15) & ~v8, v5);
  return a1;
}

uint64_t sub_1B217D2E8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = ((v7
       + v8
       + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)) & ~v8)
     + v7;
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v12 = ((v6 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_18;
LABEL_11:
  v13 = (v11 - 1) << v10;
  if (v9 > 3)
    v13 = 0;
  if (!(_DWORD)v9)
    return v5 + v13 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B217D3D8 + 4 * byte_1B22C90EE[(v9 - 1)]))();
}

void sub_1B217D428(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = ((v8
        + v9
        + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9 + ((v8 + v9) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)) & ~v9)
      + v8;
  v11 = a3 >= v7;
  v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      v15 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v15))
      {
        v13 = 4u;
      }
      else if (v15 >= 0x100)
      {
        v13 = 2;
      }
      else
      {
        v13 = v15 > 1;
      }
    }
    else
    {
      v13 = 1u;
    }
  }
  else
  {
    v13 = 0u;
  }
  if (v7 < a2)
  {
    v14 = ~v7 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v16;
          *((_BYTE *)a1 + 2) = BYTE2(v16);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v16;
        }
        else
        {
          *(_BYTE *)a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for __FixedArrayCodableStorage8.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for __FixedArrayCodableStorage8.CodingKeys);
}

uint64_t type metadata accessor for __FixedArrayCodableStorage10.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for __FixedArrayCodableStorage10.CodingKeys);
}

uint64_t sub_1B217D630(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1B217D67C + 4 * byte_1B22C9101[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1B217D6B0 + 4 * byte_1B22C90FC[v4]))();
}

uint64_t sub_1B217D6B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B217D6B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B217D6C0);
  return result;
}

uint64_t sub_1B217D6CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B217D6D4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1B217D6D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B217D6E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B217D6EC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B217D738 + 4 * byte_1B22C910B[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B217D76C + 4 * byte_1B22C9106[v4]))();
}

uint64_t sub_1B217D76C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B217D774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B217D77CLL);
  return result;
}

uint64_t sub_1B217D788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B217D790);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B217D794(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B217D79C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_1B217D7A8()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B217D7B8()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B217D7C8()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B217D7D8()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B217D7E8()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B217D7F8()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B217D830(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  v5 = ecs_stack_allocator_allocate(v4, 16, 8);
  *v5 = type metadata accessor for GraphScript(0);
  v5[1] = &off_1E6370AB0;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = sub_1B1DAD870((uint64_t)v5, 1, MEMORY[0x1E0DEE9D8]);
  v11 = v10;
  v12 = sub_1B1DA8760(v9);
  if ((v13 & 1) != 0 || (v14 = sub_1B1DA87D4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    v16 = sub_1B1DC9E90(v5, 1);
    v15 = sub_1B1DA8838(v9, v11, v16, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v15 + 32);
  v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  v19 = sub_1B1F05F54(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v19;
}

uint64_t sub_1B217D9A8(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  v5 = ecs_stack_allocator_allocate(v4, 16, 8);
  *v5 = &type metadata for IBLRuntime;
  v5[1] = &off_1E636DEF8;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = sub_1B1DAD870((uint64_t)v5, 1, MEMORY[0x1E0DEE9D8]);
  v11 = v10;
  v12 = sub_1B1DA8760(v9);
  if ((v13 & 1) != 0 || (v14 = sub_1B1DA87D4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    v16 = sub_1B1DC9E90(v5, 1);
    v15 = sub_1B1DA8838(v9, v11, v16, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v15 + 32);
  v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  v19 = sub_1B1F060FC(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v19;
}

uint64_t sub_1B217DB20(unint64_t a1, uint64_t a2, __n128 a3, __n128 a4, float a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;

  v8 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v8);
  v9 = ecs_stack_allocator_allocate(v8, 64, 8);
  *v9 = &type metadata for Position;
  v9[1] = &off_1E63C2398;
  v9[2] = &type metadata for Orientation;
  v9[3] = &off_1E6371540;
  v9[4] = &type metadata for Scale1;
  v9[5] = &off_1E63BC288;
  v9[6] = &type metadata for WorldTransform;
  v9[7] = &off_1E6382C00;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v12 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v12);
  v13 = sub_1B1DAD870((uint64_t)v9, 4, MEMORY[0x1E0DEE9D8]);
  v15 = v14;
  v16 = sub_1B1DA8760(v13);
  if ((v17 & 1) != 0 || (v18 = sub_1B1DA87D4(v15, v16), v19 = v18, (v18 & 0x100000000) != 0))
  {
    v20 = sub_1B1DC9E90(v9, 4);
    v19 = sub_1B1DA8838(v13, v15, v20, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v10 + 80) + 8 * v19 + 32);
  v22 = *(os_unfair_lock_s **)(v11 + 24);
  swift_retain();
  os_unfair_lock_unlock(v22);
  swift_release();
  v23 = sub_1B1F0666C(v21, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v23;
}

uint64_t sub_1B217DCF4(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  v5 = ecs_stack_allocator_allocate(v4, 64, 8);
  *v5 = &type metadata for Position;
  v5[1] = &off_1E63C2398;
  v5[2] = &type metadata for Orientation;
  v5[3] = &off_1E6371540;
  v5[4] = &type metadata for Scale3;
  v5[5] = &off_1E63BC558;
  v5[6] = &type metadata for Name;
  v5[7] = &off_1E63B9AE8;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = sub_1B1DAD870((uint64_t)v5, 4, MEMORY[0x1E0DEE9D8]);
  v11 = v10;
  v12 = sub_1B1DA8760(v9);
  if ((v13 & 1) != 0 || (v14 = sub_1B1DA87D4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    v16 = sub_1B1DC9E90(v5, 4);
    v15 = sub_1B1DA8838(v9, v11, v16, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v15 + 32);
  v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  v19 = sub_1B1F06858(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v19;
}

uint64_t sub_1B217DEA8(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  v5 = ecs_stack_allocator_allocate(v4, 48, 8);
  *v5 = &type metadata for VFXTag;
  v5[1] = &off_1E63BD620;
  v5[2] = type metadata accessor for VFXObjectTag();
  v5[3] = &off_1E63786A0;
  v5[4] = &type metadata for WorldTransform;
  v5[5] = &off_1E6382C00;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = sub_1B1DAD870((uint64_t)v5, 3, MEMORY[0x1E0DEE9D8]);
  v11 = v10;
  v12 = sub_1B1DA8760(v9);
  if ((v13 & 1) != 0 || (v14 = sub_1B1DA87D4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    v16 = sub_1B1DC9E90(v5, 3);
    v15 = sub_1B1DA8838(v9, v11, v16, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v15 + 32);
  v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  v19 = sub_1B1F06874(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v19;
}

uint64_t sub_1B217E048(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  v5 = ecs_stack_allocator_allocate(v4, 96, 8);
  *v5 = &type metadata for Name;
  v5[1] = &off_1E63B9AE8;
  v5[2] = &type metadata for PointOfView;
  v5[3] = &off_1E6371A20;
  v5[4] = &type metadata for WorldTransform;
  v5[5] = &off_1E6382C00;
  v5[6] = &type metadata for ProjectionMatrix;
  v5[7] = &off_1E638A398;
  v5[8] = &type metadata for LastFrameWorldTransform;
  v5[9] = &off_1E63AA960;
  v5[10] = &type metadata for Beamed;
  v5[11] = &off_1E63BB000;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = sub_1B1DAD870((uint64_t)v5, 6, MEMORY[0x1E0DEE9D8]);
  v11 = v10;
  v12 = sub_1B1DA8760(v9);
  if ((v13 & 1) != 0 || (v14 = sub_1B1DA87D4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    v16 = sub_1B1DC9E90(v5, 6);
    v15 = sub_1B1DA8838(v9, v11, v16, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v15 + 32);
  v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  v19 = sub_1B1F06A3C(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v19;
}

uint64_t sub_1B217E224(unint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, __n128 a6, float32x4_t a7)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;

  v9 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v9);
  v10 = ecs_stack_allocator_allocate(v9, 96, 8);
  *v10 = &type metadata for Position;
  v10[1] = &off_1E63C2398;
  v10[2] = &type metadata for Orientation;
  v10[3] = &off_1E6371540;
  v10[4] = &type metadata for Scale3;
  v10[5] = &off_1E63BC558;
  v10[6] = &type metadata for WorldTransform;
  v10[7] = &off_1E6382C00;
  v10[8] = &type metadata for ParticlePlaneCollider;
  v10[9] = &off_1E63A4A68;
  v10[10] = &type metadata for NotInHierarchy;
  v10[11] = &off_1E6380040;
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v11 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v13 = *(os_unfair_lock_s **)(v11 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v13);
  v14 = sub_1B1DAD870((uint64_t)v10, 6, MEMORY[0x1E0DEE9D8]);
  v16 = v15;
  v17 = sub_1B1DA8760(v14);
  if ((v18 & 1) != 0 || (v19 = sub_1B1DA87D4(v16, v17), v20 = v19, (v19 & 0x100000000) != 0))
  {
    v21 = sub_1B1DC9E90(v10, 6);
    v20 = sub_1B1DA8838(v14, v16, v21, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v11 + 80) + 8 * v20 + 32);
  v23 = *(os_unfair_lock_s **)(v12 + 24);
  swift_retain();
  os_unfair_lock_unlock(v23);
  swift_release();
  v24 = sub_1B1F06A58(v22, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5, a6, a7);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v24;
}

uint64_t sub_1B217E420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v25[2];
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v8 = v6;
  sub_1B1FDE8CC(a3, a4, a2, (uint64_t)&v29);
  if (v30)
  {
    sub_1B1A02518(&v29, (uint64_t)&v32);
    sub_1B19FA198((uint64_t)&v32, (uint64_t)&v27);
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B8C70);
    sub_1B1A025A0(0, (unint64_t *)&unk_1ED4B8538);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_1B1A02518(v25, (uint64_t)&v29);
      v11 = v30;
      v12 = v31;
      sub_1B19FA070(&v29, v30);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 + 8) + 48))(a5, v11);
      if (v13)
      {
        v14 = v13;
        swift_release();
        *v8 = a2;
        v8[1] = v14;
      }
      else
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v27 = 0;
        v28 = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        sub_1B2228890();
        *(_QWORD *)&v25[0] = a5;
        sub_1B2181B8C(0, a6);
        sub_1B22295EC();
        sub_1B2228890();
        sub_1B1BC3C70();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B222A210();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v22 = v27;
        v21 = v28;
        v23 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v27 = 0;
        swift_retain();
        sub_1B1F1AD70(v23, &v27, v22, v21);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v32);
      v20 = (uint64_t *)&v29;
    }
    else
    {
      v26 = 0;
      memset(v25, 0, sizeof(v25));
      sub_1B1E34C34((uint64_t)v25, (unint64_t *)&unk_1EEF5E900, (unint64_t *)&unk_1ED4B8538);
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v29 = 0;
      *((_QWORD *)&v29 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      sub_1B22295EC();
      sub_1B2228890();
      v18 = v29;
      v19 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v29 = 0;
      swift_retain();
      sub_1B1F1AD70(v19, (uint64_t *)&v29, v18, *((uint64_t *)&v18 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v20 = &v32;
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v20);
  }
  else
  {
    sub_1B1E34C34((uint64_t)&v29, (unint64_t *)&qword_1ED4B8C80, (unint64_t *)&qword_1ED4B8C70);
    if (qword_1ED4BF430 != -1)
      swift_once();
    v32 = 0;
    v33 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v32 = 0x6E656E6F706D6F63;
    v33 = 0xEA00000000002074;
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v16 = v32;
    v15 = v33;
    v17 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v32 = 0;
    swift_retain();
    sub_1B1F1AD70(v17, &v32, v16, v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return 0;
}

uint64_t sub_1B217E9B4(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  v5 = ecs_stack_allocator_allocate(v4, 32, 8);
  *v5 = &type metadata for WorldTransform;
  v5[1] = &off_1E6382C00;
  v5[2] = &type metadata for Beamed;
  v5[3] = &off_1E63BB000;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = sub_1B1DAD870((uint64_t)v5, 2, MEMORY[0x1E0DEE9D8]);
  v11 = v10;
  v12 = sub_1B1DA8760(v9);
  if ((v13 & 1) != 0 || (v14 = sub_1B1DA87D4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    v16 = sub_1B1DC9E90(v5, 2);
    v15 = sub_1B1DA8838(v9, v11, v16, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v15 + 32);
  v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  v19 = sub_1B1F06C44(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v19;
}

uint64_t sub_1B217EB40(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  *(_BYTE *)(a1 + 16) = a3;
  *(float *)a2 = a6;
  *(_BYTE *)(a2 + 21) = 1;
  *(_QWORD *)(a2 + 40) = a4;
  v14 = *(_QWORD *)(a5 + 32);
  v15 = *(_QWORD *)(a5 + 40);
  v16 = *(_QWORD *)(a5 + 48);
  v17 = *(_BYTE *)(a5 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v16;
  *(_BYTE *)(a1 + 48) = v17;
  v18 = *(_QWORD *)(a5 + 16);
  if (v18 >= 2)
  {
    v19 = *(_QWORD *)(a5 + 64);
    v20 = *(_QWORD *)(a5 + 72);
    v21 = *(_QWORD *)(a5 + 80);
    v22 = *(_BYTE *)(a5 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + 56) = v19;
    *(_QWORD *)(a1 + 64) = v20;
    *(_QWORD *)(a1 + 72) = v21;
    *(_BYTE *)(a1 + 80) = v22;
    if (v18 != 2)
    {
      v23 = *(_QWORD *)(a5 + 96);
      v24 = *(_QWORD *)(a5 + 104);
      v25 = *(_QWORD *)(a5 + 112);
      v26 = *(_BYTE *)(a5 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = v23;
      *(_QWORD *)(a1 + 96) = v24;
      *(_QWORD *)(a1 + 104) = v25;
      *(_BYTE *)(a1 + 112) = v26;
      if (v18 >= 4)
      {
        v27 = *(_QWORD *)(a5 + 128);
        v28 = *(_QWORD *)(a5 + 136);
        v29 = *(_QWORD *)(a5 + 144);
        v30 = *(_BYTE *)(a5 + 152);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(a1 + 120) = v27;
        *(_QWORD *)(a1 + 128) = v28;
        *(_QWORD *)(a1 + 136) = v29;
        *(_BYTE *)(a1 + 144) = v30;
      }
    }
  }
  v31 = swift_retain();
  sub_1B217E420(v31, a8, a10, a11, a9, a12);
  return swift_release();
}

uint64_t sub_1B217ED50(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;

  v8 = v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  swift_bridgeObjectRetain();
  v9 = sub_1B1DAD870((uint64_t)a1, a3, a4);
  v11 = v10;
  swift_bridgeObjectRelease();
  v12 = sub_1B1DA8760(v9);
  if ((v13 & 1) != 0 || (v14 = sub_1B1DA87D4(v11, v12), (v14 & 0x100000000) != 0))
  {
    v15 = sub_1B1DC9E90(a1, a3);
    swift_bridgeObjectRetain();
    LODWORD(v14) = sub_1B1DA8838(v9, v11, v15, a4);
    swift_release();
    swift_bridgeObjectRelease();
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * (int)v14 + 32);
  v17 = *(os_unfair_lock_s **)(v8 + 24);
  swift_retain();
  os_unfair_lock_unlock(v17);
  return v16;
}

uint64_t sub_1B217EE54(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v4);
  v5 = ecs_stack_allocator_allocate(v4, 112, 8);
  *v5 = &type metadata for Position;
  v5[1] = &off_1E63C2398;
  v5[2] = &type metadata for Orientation;
  v5[3] = &off_1E6371540;
  v5[4] = &type metadata for Scale3;
  v5[5] = &off_1E63BC558;
  v5[6] = &type metadata for Name;
  v5[7] = &off_1E63B9AE8;
  v5[8] = &type metadata for PointOfView;
  v5[9] = &off_1E6371A20;
  v5[10] = &type metadata for WorldTransform;
  v5[11] = &off_1E6382C00;
  v5[12] = &type metadata for ProjectionMatrix;
  v5[13] = &off_1E638A398;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = sub_1B1DAD870((uint64_t)v5, 7, MEMORY[0x1E0DEE9D8]);
  v11 = v10;
  v12 = sub_1B1DA8760(v9);
  if ((v13 & 1) != 0 || (v14 = sub_1B1DA87D4(v11, v12), v15 = v14, (v14 & 0x100000000) != 0))
  {
    v16 = sub_1B1DC9E90(v5, 7);
    v15 = sub_1B1DA8838(v9, v11, v16, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v6 + 80) + 8 * v15 + 32);
  v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_release();
  v19 = sub_1B1F06FAC(v17, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v19;
}

uint64_t sub_1B217F044(uint64_t a1, unint64_t a2, uint64_t a3, __int128 *a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  uint64_t v40;
  __int128 *v42;
  _OWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v11 = *(_QWORD *)(a3 + 32);
  ecs_stack_allocator_push_snapshot(v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = 16 * v12;
  v14 = ecs_stack_allocator_allocate(v11, 16 * v12 + 48, 8);
  v15 = v14;
  *v14 = &type metadata for DebugInfoWireframePrimitive;
  v14[1] = &off_1E63B2990;
  v14[2] = &type metadata for WorldTransform;
  v14[3] = &off_1E6382C00;
  v14[4] = &type metadata for Beamed;
  v14[5] = &off_1E63BB000;
  if (!v12)
  {
    v23 = 3;
    goto LABEL_18;
  }
  if (v12 < 0x14
    || ((v16 = (unint64_t)(v14 + 6),
         v17 = 2 * (v12 - 1),
         v18 = (unint64_t)&v14[v17 + 6],
         v19 = (unint64_t)&v14[v17 + 7],
         v18 >= (unint64_t)(v14 + 6))
      ? (v20 = v19 >= (unint64_t)(v14 + 7))
      : (v20 = 0),
        v20 ? (v21 = (v12 - 1) >> 60 == 0) : (v21 = 0),
        !v21 || v16 < v13 + a1 + 32 && a1 + 32 < v16 + v13))
  {
    v22 = 0;
    v23 = 3;
LABEL_14:
    v24 = v12 - v22;
    v25 = (__int128 *)(a1 + 16 * v22 + 32);
    do
    {
      v26 = *v25++;
      *(_OWORD *)&v14[2 * v23++] = v26;
      --v24;
    }
    while (v24);
    goto LABEL_18;
  }
  v22 = v12 & 0x7FFFFFFFFFFFFFFCLL;
  v23 = v12 | 3;
  v42 = (__int128 *)(a1 + 64);
  v43 = v14 + 10;
  v44 = v12 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v46 = *(v42 - 2);
    v45 = *(v42 - 1);
    v48 = *v42;
    v47 = v42[1];
    v42 += 4;
    *(v43 - 2) = v46;
    *(v43 - 1) = v45;
    *v43 = v48;
    v43[1] = v47;
    v43 += 4;
    v44 -= 4;
  }
  while (v44);
  if (v12 != v22)
    goto LABEL_14;
LABEL_18:
  v27 = *(_QWORD *)(a3 + 16);
  v28 = v27 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v29 = *(os_unfair_lock_s **)(v27 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v29);
  v30 = sub_1B1DAD870((uint64_t)v15, v23, MEMORY[0x1E0DEE9D8]);
  v32 = v31;
  v33 = sub_1B1DA8760(v30);
  if ((v34 & 1) != 0 || (v35 = sub_1B1DA87D4(v32, v33), v36 = v35, (v35 & 0x100000000) != 0))
  {
    v37 = sub_1B1DC9E90(v15, v23);
    v36 = sub_1B1DA8838(v30, v32, v37, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v27 + 80) + 8 * v36 + 32);
  v39 = *(os_unfair_lock_s **)(v28 + 24);
  swift_retain();
  os_unfair_lock_unlock(v39);
  swift_release();
  v40 = sub_1B1F06C60(v38, 1, 1, a2 | ((HIDWORD(a2) & 1) << 32), a3, a4, a5, a6, a7, a8);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a3 + 32));
  return v40;
}

uint64_t sub_1B217F2CC(uint64_t a1, unint64_t a2, uint64_t a3, __int128 *a4, int a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  __int128 *v43;
  _OWORD *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v12 = *(_QWORD *)(a3 + 32);
  ecs_stack_allocator_push_snapshot(v12);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = 16 * v13;
  v15 = ecs_stack_allocator_allocate(v12, 16 * v13 + 64, 8);
  v16 = v15;
  *v15 = &type metadata for DebugInfoWireframePrimitive;
  v15[1] = &off_1E63B2990;
  v15[2] = &type metadata for DebugInfoColor;
  v15[3] = &off_1E637ED40;
  v15[4] = &type metadata for WorldTransform;
  v15[5] = &off_1E6382C00;
  v15[6] = &type metadata for Beamed;
  v15[7] = &off_1E63BB000;
  if (!v13)
  {
    v24 = 4;
    goto LABEL_18;
  }
  if (v13 < 0x14
    || ((v17 = (unint64_t)(v15 + 8),
         v18 = 2 * (v13 - 1),
         v19 = (unint64_t)&v15[v18 + 8],
         v20 = (unint64_t)&v15[v18 + 9],
         v19 >= (unint64_t)(v15 + 8))
      ? (v21 = v20 >= (unint64_t)(v15 + 9))
      : (v21 = 0),
        v21 ? (v22 = (v13 - 1) >> 60 == 0) : (v22 = 0),
        !v22 || v17 < v14 + a1 + 32 && a1 + 32 < v17 + v14))
  {
    v23 = 0;
    v24 = 4;
LABEL_14:
    v25 = v13 - v23;
    v26 = (__int128 *)(a1 + 16 * v23 + 32);
    do
    {
      v27 = *v26++;
      *(_OWORD *)&v15[2 * v24++] = v27;
      --v25;
    }
    while (v25);
    goto LABEL_18;
  }
  v23 = v13 & 0x7FFFFFFFFFFFFFFCLL;
  v24 = (v13 & 0x7FFFFFFFFFFFFFFCLL) + 4;
  v43 = (__int128 *)(a1 + 64);
  v44 = v15 + 12;
  v45 = v13 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v47 = *(v43 - 2);
    v46 = *(v43 - 1);
    v49 = *v43;
    v48 = v43[1];
    v43 += 4;
    *(v44 - 2) = v47;
    *(v44 - 1) = v46;
    *v44 = v49;
    v44[1] = v48;
    v44 += 4;
    v45 -= 4;
  }
  while (v45);
  if (v13 != v23)
    goto LABEL_14;
LABEL_18:
  v28 = *(_QWORD *)(a3 + 16);
  v29 = v28 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v30 = *(os_unfair_lock_s **)(v28 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v30);
  v31 = sub_1B1DAD870((uint64_t)v16, v24, MEMORY[0x1E0DEE9D8]);
  v33 = v32;
  v34 = sub_1B1DA8760(v31);
  if ((v35 & 1) != 0 || (v36 = sub_1B1DA87D4(v33, v34), v37 = v36, (v36 & 0x100000000) != 0))
  {
    v38 = sub_1B1DC9E90(v16, v24);
    v37 = sub_1B1DA8838(v31, v33, v38, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v39 = *(_QWORD *)(*(_QWORD *)(v28 + 80) + 8 * v37 + 32);
  v40 = *(os_unfair_lock_s **)(v29 + 24);
  swift_retain();
  os_unfair_lock_unlock(v40);
  swift_release();
  v41 = sub_1B1F0629C(v39, 1, 1, a2 | ((HIDWORD(a2) & 1) << 32), a3, a4, a5, a6, a7, a8, a9);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a3 + 32));
  return v41;
}

uint64_t sub_1B217F570(uint64_t a1, unint64_t a2, uint64_t a3, __int128 *a4, int a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  uint64_t v39;

  v8 = *(_QWORD *)(a3 + 32);
  ecs_stack_allocator_push_snapshot(v8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = 2 * v9;
  v11 = ecs_stack_allocator_allocate(v8, 16 * v9 + 32, 8);
  v12 = v11;
  *v11 = &type metadata for DebugInfoWireframePrimitive;
  v11[1] = &off_1E63B2990;
  v11[2] = &type metadata for DebugInfoColor;
  v11[3] = &off_1E637ED40;
  if (!v9)
  {
    v15 = 2;
    goto LABEL_17;
  }
  if (v9 < 6
    || ((unint64_t)(v11 + 4) < a1 + v10 * 8 + 32 ? (v13 = a1 + 32 >= (unint64_t)&v11[v10 + 4]) : (v13 = 1),
        !v13))
  {
    v14 = 0;
    v15 = 2;
LABEL_13:
    v23 = v9 - v14;
    v24 = (__int128 *)(a1 + 16 * v14 + 32);
    do
    {
      v25 = *v24++;
      *(_OWORD *)&v11[2 * v15++] = v25;
      --v23;
    }
    while (v23);
    goto LABEL_17;
  }
  v14 = v9 & 0x7FFFFFFFFFFFFFFCLL;
  v15 = v9 & 0x7FFFFFFFFFFFFFFCLL | 2;
  v16 = (__int128 *)(a1 + 64);
  v17 = v11 + 8;
  v18 = v9 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v20 = *(v16 - 2);
    v19 = *(v16 - 1);
    v22 = *v16;
    v21 = v16[1];
    v16 += 4;
    *(v17 - 2) = v20;
    *(v17 - 1) = v19;
    *v17 = v22;
    v17[1] = v21;
    v17 += 4;
    v18 -= 4;
  }
  while (v18);
  if (v9 != v14)
    goto LABEL_13;
LABEL_17:
  v26 = *(_QWORD *)(a3 + 16);
  v27 = v26 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v28 = *(os_unfair_lock_s **)(v26 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v28);
  v29 = sub_1B1DAD870((uint64_t)v12, v15, MEMORY[0x1E0DEE9D8]);
  v31 = v30;
  v32 = sub_1B1DA8760(v29);
  if ((v33 & 1) != 0 || (v34 = sub_1B1DA87D4(v31, v32), v35 = v34, (v34 & 0x100000000) != 0))
  {
    v36 = sub_1B1DC9E90(v12, v15);
    v35 = sub_1B1DA8838(v29, v31, v36, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v26 + 80) + 8 * v35 + 32);
  v38 = *(os_unfair_lock_s **)(v27 + 24);
  swift_retain();
  os_unfair_lock_unlock(v38);
  swift_release();
  v39 = sub_1B1F0648C(v37, 1, 1, a2 | ((HIDWORD(a2) & 1) << 32), a3, a4, a5);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a3 + 32));
  return v39;
}

double sub_1B217F7AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _OWORD *v4;
  double result;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  if ((v3 & 1) != 0)
    v4 = 0;
  else
    v4 = (_OWORD *)(v2 + (v1 << 6));
  sub_1B1A11FDC((uint64_t)&type metadata for Beamed);
  *v4 = xmmword_1B2244DB0;
  v4[1] = xmmword_1B2244DD0;
  result = 0.0;
  v4[2] = xmmword_1B2244D90;
  v4[3] = xmmword_1B2244E20;
  return result;
}

__n128 sub_1B217F840(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[5];
  uint64_t v20;
  uint64_t v21;
  char v22;

  sub_1B200A008(a2, (uint64_t)v19);
  v17 = v19[1];
  v18 = v19[0];
  v15 = v19[3];
  v16 = v19[2];
  v14 = (__n128)v19[4];
  v5 = v20;
  v6 = v21;
  v7 = v22;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoWireframePrimitive);
  if ((v10 & 1) != 0)
    v11 = 0;
  else
    v11 = v9 + 112 * v8;
  v12 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoColor);
  *(_OWORD *)v11 = v18;
  *(_OWORD *)(v11 + 16) = v17;
  *(_OWORD *)(v11 + 32) = v16;
  *(_OWORD *)(v11 + 48) = v15;
  result = v14;
  *(__n128 *)(v11 + 64) = v14;
  *(_QWORD *)(v11 + 80) = v5;
  *(_QWORD *)(v11 + 88) = v6;
  *(_BYTE *)(v11 + 96) = v7;
  *(_DWORD *)(v12 + 4 * v8) = a3;
  return result;
}

__n128 sub_1B217F93C(uint64_t a1, __int128 *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __n128 *v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v27[5];
  uint64_t v28;
  uint64_t v29;
  char v30;

  sub_1B200A008(a2, (uint64_t)v27);
  v21 = v27[1];
  v22 = v27[0];
  v19 = v27[3];
  v20 = v27[2];
  v18 = v27[4];
  v7 = v28;
  v8 = v29;
  v9 = v30;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoWireframePrimitive);
  if ((v12 & 1) != 0)
    v13 = 0;
  else
    v13 = v11 + 112 * v10;
  v14 = sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  if ((v15 & 1) != 0)
    v16 = 0;
  else
    v16 = (__n128 *)(v14 + (v10 << 6));
  sub_1B1A11FDC((uint64_t)&type metadata for Beamed);
  *(_OWORD *)v13 = v22;
  *(_OWORD *)(v13 + 16) = v21;
  *(_OWORD *)(v13 + 32) = v20;
  *(_OWORD *)(v13 + 48) = v19;
  *(_OWORD *)(v13 + 64) = v18;
  *(_QWORD *)(v13 + 80) = v7;
  *(_QWORD *)(v13 + 88) = v8;
  *(_BYTE *)(v13 + 96) = v9;
  *v16 = a3;
  v16[1] = a4;
  result = a6;
  v16[2] = a5;
  v16[3] = a6;
  return result;
}

__n128 sub_1B217FA6C(uint64_t a1, __n128 a2, __n128 a3, float a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 *v8;
  uint64_t v9;
  char v10;
  __n128 *v11;
  uint64_t v12;
  char v13;
  float *v14;
  __n128 v15;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = sub_1B1A11FDC((uint64_t)&type metadata for Position);
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = (__n128 *)(v6 + 16 * v5);
  v9 = sub_1B1A11FDC((uint64_t)&type metadata for Orientation);
  if ((v10 & 1) != 0)
    v11 = 0;
  else
    v11 = (__n128 *)(v9 + 16 * v5);
  v12 = sub_1B1A11FDC((uint64_t)&type metadata for Scale1);
  if ((v13 & 1) != 0)
    v14 = 0;
  else
    v14 = (float *)(v12 + 4 * v5);
  sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  v15 = a2;
  v15.n128_u32[3] = 1.0;
  *v8 = v15;
  result = a3;
  *v11 = a3;
  *v14 = a4;
  return result;
}

uint64_t sub_1B217FB60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _OWORD *v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  char v10;
  _OWORD *v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = sub_1B1A11FDC((uint64_t)&type metadata for Position);
  v3 = 16 * v1;
  if ((v4 & 1) != 0)
    v5 = 0;
  else
    v5 = (_OWORD *)(v2 + v3);
  v6 = sub_1B1A11FDC((uint64_t)&type metadata for Orientation);
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = (_OWORD *)(v6 + v3);
  v9 = sub_1B1A11FDC((uint64_t)&type metadata for Scale3);
  if ((v10 & 1) != 0)
    v11 = 0;
  else
    v11 = (_OWORD *)(v9 + v3);
  v12 = sub_1B1A11FDC((uint64_t)&type metadata for Name);
  if ((v13 & 1) != 0)
    v14 = 0;
  else
    v14 = (_QWORD *)(v12 + v3);
  *v5 = xmmword_1B2244E20;
  __asm { FMOV            V1.4S, #1.0 }
  *v11 = _Q1;
  *v8 = xmmword_1B2244E20;
  result = swift_bridgeObjectRelease();
  *v14 = 0x746F6F72656874;
  v14[1] = 0xE700000000000000;
  return result;
}

__n128 sub_1B217FC64(uint64_t a1, __int128 *a2, int a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _DWORD *v18;
  uint64_t v19;
  char v20;
  __n128 *v21;
  __n128 result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v32[5];
  uint64_t v33;
  uint64_t v34;
  char v35;

  sub_1B200A008(a2, (uint64_t)v32);
  v26 = v32[1];
  v27 = v32[0];
  v24 = v32[3];
  v25 = v32[2];
  v23 = v32[4];
  v9 = v33;
  v10 = v34;
  v11 = v35;
  v12 = *(_QWORD *)(a1 + 48);
  v13 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoWireframePrimitive);
  if ((v14 & 1) != 0)
    v15 = 0;
  else
    v15 = v13 + 112 * v12;
  v16 = sub_1B1A11FDC((uint64_t)&type metadata for DebugInfoColor);
  if ((v17 & 1) != 0)
    v18 = 0;
  else
    v18 = (_DWORD *)(v16 + 4 * v12);
  v19 = sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  if ((v20 & 1) != 0)
    v21 = 0;
  else
    v21 = (__n128 *)(v19 + (v12 << 6));
  sub_1B1A11FDC((uint64_t)&type metadata for Beamed);
  *(_OWORD *)v15 = v27;
  *(_OWORD *)(v15 + 16) = v26;
  *(_OWORD *)(v15 + 32) = v25;
  *(_OWORD *)(v15 + 48) = v24;
  *(_OWORD *)(v15 + 64) = v23;
  *(_QWORD *)(v15 + 80) = v9;
  *(_QWORD *)(v15 + 88) = v10;
  *(_BYTE *)(v15 + 96) = v11;
  *v18 = a3;
  *v21 = a4;
  v21[1] = a5;
  result = a7;
  v21[2] = a6;
  v21[3] = a7;
  return result;
}

uint64_t sub_1B217FDC8()
{
  sub_1B1A11FDC((uint64_t)&type metadata for Name);
  sub_1B1A11FDC((uint64_t)&type metadata for PointOfView);
  sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  sub_1B1A11FDC((uint64_t)&type metadata for ProjectionMatrix);
  sub_1B1A11FDC((uint64_t)&type metadata for LastFrameWorldTransform);
  return sub_1B1A11FDC((uint64_t)&type metadata for Beamed);
}

double sub_1B217FE7C(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, __n128 a5, float32x4_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __n128 *v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  float32x4_t *v16;
  uint64_t v17;
  char v18;
  char v19;
  __n128 v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v52;
  int8x16_t v53;
  float v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  uint64_t v58;
  int32x2_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t *v65;
  double result;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = sub_1B1A11FDC((uint64_t)&type metadata for Position);
  v8 = 16 * v6;
  if ((v9 & 1) != 0)
    v10 = 0;
  else
    v10 = (__n128 *)(v7 + 16 * v6);
  v11 = sub_1B1A11FDC((uint64_t)&type metadata for Orientation);
  v13 = v12;
  v14 = sub_1B1A11FDC((uint64_t)&type metadata for Scale3);
  if ((v15 & 1) != 0)
    v16 = 0;
  else
    v16 = (float32x4_t *)(v14 + v8);
  sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  v17 = sub_1B1A11FDC((uint64_t)&type metadata for ParticlePlaneCollider);
  v19 = v18;
  sub_1B1A11FDC((uint64_t)&type metadata for NotInHierarchy);
  v20 = a5;
  v20.n128_u32[3] = 1.0;
  v21 = vmulq_f32(a2, a2);
  *v10 = v20;
  v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)));
  v22.f32[0] = sqrtf(v22.f32[0]);
  v23 = vmulq_f32(a3, a3);
  v24 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2);
  v25 = vmulq_f32(a4, a4);
  v22.i32[1] = sqrtf(vaddq_f32(v24, vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
  v22.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
  *v16 = vmulq_f32(v22, a6);
  v26 = vzip2q_s32((int32x4_t)v21, (int32x4_t)v25);
  v27 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v21, (int32x4_t)v25), (int32x4_t)v23);
  v28 = (float32x4_t)vtrn2q_s32((int32x4_t)v21, (int32x4_t)v23);
  v28.i32[2] = v25.i32[1];
  v29 = vaddq_f32((float32x4_t)vzip1q_s32(v26, (int32x4_t)v24), vaddq_f32(v27, v28));
  v27.i64[0] = 0x80000000800000;
  v27.i64[1] = 0x80000000800000;
  v30 = vcgeq_f32(v27, v29);
  v29.i32[3] = 0;
  v31 = vrsqrteq_f32(v29);
  v32 = vmulq_f32(v31, vrsqrtsq_f32(v29, vmulq_f32(v31, v31)));
  v33 = v30;
  v33.i32[3] = 0;
  v34 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v33), (int8x16_t)v29, (int8x16_t)vmulq_f32(v32, vrsqrtsq_f32(v29, vmulq_f32(v32, v32))));
  v35 = vmulq_n_f32(a2, v34.f32[0]);
  v36 = vmulq_lane_f32(a3, *(float32x2_t *)v34.f32, 1);
  v37 = vmulq_laneq_f32(a4, v34, 2);
  v38 = (int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37);
  v39 = (int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36);
  v40 = (int32x4_t)v35;
  if (v30.i32[0])
  {
    v41 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v38, (int8x16_t)v37, 0xCuLL), vnegq_f32(v36)), v37, (float32x4_t)vextq_s8(v39, (int8x16_t)v36, 0xCuLL));
    v40 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL);
  }
  v42 = (int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35);
  v43 = v36;
  if (v30.i32[1])
  {
    v44 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v42, (int8x16_t)v35, 0xCuLL), vnegq_f32(v37)), v35, (float32x4_t)vextq_s8(v38, (int8x16_t)v37, 0xCuLL));
    v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL);
  }
  if (v30.i32[2])
  {
    v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v39, (int8x16_t)v36, 0xCuLL), vnegq_f32(v35)), v36, (float32x4_t)vextq_s8(v42, (int8x16_t)v35, 0xCuLL));
    v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
  }
  v45 = (float)(*(float *)v40.i32 + v43.f32[1]) + v37.f32[2];
  if (v45 <= 0.0)
  {
    if (*(float *)v40.i32 < v43.f32[1] || *(float *)v40.i32 < v37.f32[2])
    {
      if (v43.f32[1] <= v37.f32[2])
      {
        v47 = sqrtf((float)((float)(v37.f32[2] + 1.0) - *(float *)v40.i32) - v43.f32[1]);
        *(float32x2_t *)v50.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v40, (int32x4_t)v43), *(float32x2_t *)v37.f32);
        v61 = (float32x2_t)__PAIR64__(v40.u32[1], LODWORD(v47));
        v62 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0);
        *(float32x2_t *)v49.f32 = vsub_f32(*(float32x2_t *)v40.i8, v62);
        v62.f32[0] = v47;
        v62.i32[0] = vmul_f32(v61, v62).u32[0];
        v62.i32[1] = v49.i32[1];
        *(float32x2_t *)&v50.u32[2] = v62;
        goto LABEL_24;
      }
      v54 = sqrtf((float)((float)(v43.f32[1] + 1.0) - *(float *)v40.i32) - v37.f32[2]);
      *(int32x2_t *)v30.i8 = vdup_laneq_s32((int32x4_t)v43, 2);
      v52 = (int8x16_t)v30;
      *(float *)v52.i32 = v54;
      v52.i32[0] = vmul_f32(*(float32x2_t *)v52.i8, (float32x2_t)__PAIR64__(v37.u32[1], LODWORD(v54))).u32[0];
      v52.i32[1] = vadd_f32(*(float32x2_t *)&v30, *(float32x2_t *)&v37).i32[1];
      v53 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.i8, 1), v43);
      v59 = (int32x2_t)vsubq_f32(v37, (float32x4_t)vdupq_laneq_s32(v40, 2)).u64[0];
      v60 = (float32x4_t)vextq_s8(vextq_s8(v53, v53, 4uLL), v52, 0xCuLL);
      v60.i32[3] = v59.i32[0];
    }
    else
    {
      v54 = sqrtf((float)((float)(*(float *)v40.i32 + 1.0) - v43.f32[1]) - v37.f32[2]);
      v55 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.f32, 0);
      v56 = vadd_f32(*(float32x2_t *)v40.i8, v55);
      v55.f32[0] = v54;
      v60.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v40.u32[1], LODWORD(v54)), v55).u32[0];
      v60.i32[1] = v56.i32[1];
      v57 = (float32x2_t)vzip2q_s32(v40, (int32x4_t)v43).u64[0];
      LODWORD(v58) = vadd_f32(v57, *(float32x2_t *)v37.f32).u32[0];
      v59 = (int32x2_t)vsub_f32(v57, *(float32x2_t *)v37.f32);
      HIDWORD(v58) = v59.i32[1];
      v60.i64[1] = v58;
    }
    *(float *)v59.i32 = 0.5 / v54;
    v50 = (float32x4_t)vdupq_lane_s32(v59, 0);
    goto LABEL_25;
  }
  v46 = (float32x4_t)vzip2q_s32((int32x4_t)v43, vuzp1q_s32((int32x4_t)v43, (int32x4_t)v37));
  v46.i32[2] = v40.i32[1];
  v47 = sqrtf(v45 + 1.0);
  v48 = (float32x4_t)vtrn2q_s32((int32x4_t)v37, vzip2q_s32((int32x4_t)v37, v40));
  v48.i32[2] = v43.i32[0];
  v50 = vsubq_f32(v46, v48);
  v46.f32[3] = v47;
  v48.f32[3] = v47;
  v49 = vmulq_f32(v46, v48);
  v50.i32[3] = v49.i32[3];
LABEL_24:
  v49.f32[0] = 0.5 / v47;
  v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0);
LABEL_25:
  v63 = vmulq_f32(v50, v60);
  v64 = v17 + 28 * v6;
  if ((v19 & 1) != 0)
    v64 = 0;
  v65 = (float32x4_t *)(v11 + v8);
  if ((v13 & 1) != 0)
    v65 = 0;
  *v65 = v63;
  *(_BYTE *)v64 = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(v64 + 12) = 1065353216;
  return result;
}

double sub_1B2180270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _OWORD *v5;
  uint64_t v6;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  char v10;
  _OWORD *v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  double result;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = sub_1B1A11FDC((uint64_t)&type metadata for Position);
  v3 = 16 * v1;
  if ((v4 & 1) != 0)
    v5 = 0;
  else
    v5 = (_OWORD *)(v2 + 16 * v1);
  v6 = sub_1B1A11FDC((uint64_t)&type metadata for Orientation);
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = (_OWORD *)(v6 + v3);
  v9 = sub_1B1A11FDC((uint64_t)&type metadata for Scale3);
  if ((v10 & 1) != 0)
    v11 = 0;
  else
    v11 = (_OWORD *)(v9 + v3);
  v12 = sub_1B1A11FDC((uint64_t)&type metadata for Name);
  if ((v13 & 1) != 0)
    v14 = 0;
  else
    v14 = (_QWORD *)(v12 + v3);
  sub_1B1A11FDC((uint64_t)&type metadata for PointOfView);
  sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  sub_1B1A11FDC((uint64_t)&type metadata for ProjectionMatrix);
  swift_bridgeObjectRelease();
  *v14 = 0x6172656D6143;
  v14[1] = 0xE600000000000000;
  result = 0.0;
  *v5 = xmmword_1B2244E20;
  __asm { FMOV            V1.4S, #1.0 }
  *v11 = _Q1;
  *v8 = xmmword_1B2244E20;
  return result;
}

uint64_t sub_1B21803B8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = sub_1B1A11FDC((uint64_t)&type metadata for Material);
  if ((v11 & 1) != 0)
    v12 = 0;
  else
    v12 = v10 + 104 * v9;
  *(_BYTE *)v12 = a2;
  swift_retain();
  result = swift_release();
  *(_QWORD *)(v12 + 8) = a3;
  *(_DWORD *)(v12 + 40) = a4;
  *(_BYTE *)(v12 + 44) = BYTE4(a4) & 1;
  *(float *)(v12 + 48) = a5;
  return result;
}

uint64_t sub_1B218045C(unint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, float a6)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;

  v10 = *(_QWORD *)(a2 + 32);
  swift_retain();
  ecs_stack_allocator_push_snapshot(v10);
  v11 = ecs_stack_allocator_allocate(v10, 16, 8);
  *v11 = &type metadata for Material;
  v11[1] = &off_1E63C1AA0;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v14 = *(os_unfair_lock_s **)(v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v14);
  v15 = sub_1B1DAD870((uint64_t)v11, 1, MEMORY[0x1E0DEE9D8]);
  v17 = v16;
  v18 = sub_1B1DA8760(v15);
  if ((v19 & 1) != 0 || (v20 = sub_1B1DA87D4(v17, v18), v21 = v20, (v20 & 0x100000000) != 0))
  {
    v22 = sub_1B1DC9E90(v11, 1);
    v21 = sub_1B1DA8838(v15, v17, v22, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v12 + 80) + 8 * v21 + 32);
  v24 = *(os_unfair_lock_s **)(v13 + 24);
  swift_retain();
  os_unfair_lock_unlock(v24);
  swift_release();
  swift_retain();
  v25 = sub_1B1F0A9C0(v23, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6);
  swift_release();
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  swift_release();
  return v25;
}

uint64_t sub_1B2180630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = sub_1B1A11FDC((uint64_t)&type metadata for SkeletalAnimationPlayer);
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = (_QWORD *)(v6 + 16 * v5);
  *v8 = a2;
  swift_retain();
  result = swift_release();
  v8[1] = a3;
  return result;
}

uint64_t sub_1B21806B0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;

  v7 = *(_QWORD *)(a2 + 32);
  swift_retain();
  ecs_stack_allocator_push_snapshot(v7);
  v8 = ecs_stack_allocator_allocate(v7, 16, 8);
  *v8 = &type metadata for SkeletalAnimationPlayer;
  v8[1] = &off_1E63ACB18;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v11 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  v12 = sub_1B1DAD870((uint64_t)v8, 1, MEMORY[0x1E0DEE9D8]);
  v14 = v13;
  v15 = sub_1B1DA8760(v12);
  if ((v16 & 1) != 0 || (v17 = sub_1B1DA87D4(v14, v15), v18 = v17, (v17 & 0x100000000) != 0))
  {
    v19 = sub_1B1DC9E90(v8, 1);
    v18 = sub_1B1DA8838(v12, v14, v19, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + 8 * v18 + 32);
  v21 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_unlock(v21);
  swift_release();
  swift_retain();
  v22 = sub_1B1F0ABE0(v20, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4);
  swift_release();
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  swift_release();
  return v22;
}

uint64_t sub_1B2180858(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = sub_1B1A11FDC((uint64_t)&type metadata for Name);
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = (uint64_t *)(v4 + 16 * v3);
  sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  v7 = objc_msgSend(a2, sel_name);
  v8 = sub_1B222874C();
  v10 = v9;

  result = swift_bridgeObjectRelease();
  *v6 = v8;
  v6[1] = v10;
  return result;
}

uint64_t sub_1B2180908(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  id v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = a3;
  ecs_stack_allocator_push_snapshot(v5);
  v7 = ecs_stack_allocator_allocate(v5, 32, 8);
  *v7 = &type metadata for Name;
  v7[1] = &off_1E63B9AE8;
  v7[2] = &type metadata for WorldTransform;
  v7[3] = &off_1E6382C00;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v10 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v10);
  v11 = sub_1B1DAD870((uint64_t)v7, 2, MEMORY[0x1E0DEE9D8]);
  v13 = v12;
  v14 = sub_1B1DA8760(v11);
  if ((v15 & 1) != 0 || (v16 = sub_1B1DA87D4(v13, v14), v17 = v16, (v16 & 0x100000000) != 0))
  {
    v18 = sub_1B1DC9E90(v7, 2);
    v17 = sub_1B1DA8838(v11, v13, v18, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v17 + 32);
  v20 = *(os_unfair_lock_s **)(v9 + 24);
  swift_retain();
  os_unfair_lock_unlock(v20);
  swift_release();
  v21 = v6;
  v22 = sub_1B1F0ADE4(v19, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, v21);
  swift_release();

  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v22;
}

uint64_t sub_1B2180AB4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t result;

  v13 = *(_QWORD *)(a1 + 48);
  v14 = sub_1B1A11FDC((uint64_t)&type metadata for Material);
  if ((v15 & 1) != 0)
    v16 = 0;
  else
    v16 = v14 + 104 * v13;
  v17 = sub_1B1A11FDC((uint64_t)&type metadata for Name);
  if ((v18 & 1) != 0)
    v19 = 0;
  else
    v19 = (_QWORD *)(v17 + 16 * v13);
  *(_BYTE *)v16 = a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(v16 + 8) = a3;
  *(_DWORD *)(v16 + 40) = a4;
  *(_BYTE *)(v16 + 44) = BYTE4(a4) & 1;
  *(float *)(v16 + 48) = a7;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v19 = a5;
  v19[1] = a6;
  return result;
}

uint64_t sub_1B2180BAC(unint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;

  v12 = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  ecs_stack_allocator_push_snapshot(v12);
  v13 = ecs_stack_allocator_allocate(v12, 32, 8);
  *v13 = &type metadata for Material;
  v13[1] = &off_1E63C1AA0;
  v13[2] = &type metadata for Name;
  v13[3] = &off_1E63B9AE8;
  v14 = *(_QWORD *)(a2 + 16);
  v15 = v14 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v16 = *(os_unfair_lock_s **)(v14 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v16);
  v17 = sub_1B1DAD870((uint64_t)v13, 2, MEMORY[0x1E0DEE9D8]);
  v19 = v18;
  v20 = sub_1B1DA8760(v17);
  if ((v21 & 1) != 0 || (v22 = sub_1B1DA87D4(v19, v20), v23 = v22, (v22 & 0x100000000) != 0))
  {
    v24 = sub_1B1DC9E90(v13, 2);
    v23 = sub_1B1DA8838(v17, v19, v24, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v14 + 80) + 8 * v23 + 32);
  v26 = *(os_unfair_lock_s **)(v15 + 24);
  swift_retain();
  os_unfair_lock_unlock(v26);
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  v27 = sub_1B1F0AE1C(v25, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a8, a6, a7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  swift_bridgeObjectRelease();
  swift_release();
  return v27;
}

uint64_t sub_1B2180DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t result;

  v9 = *(_QWORD *)(a1 + 48);
  v10 = sub_1B1A11FDC((uint64_t)&type metadata for MeshModel);
  v11 = 16 * v9;
  if ((v12 & 1) != 0)
    v13 = 0;
  else
    v13 = (_QWORD *)(v10 + v11);
  v14 = sub_1B1A11FDC((uint64_t)&type metadata for Name);
  if ((v15 & 1) != 0)
    v16 = 0;
  else
    v16 = (_QWORD *)(v14 + v11);
  swift_retain();
  swift_release();
  *v13 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13[1] = a3;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *v16 = a4;
  v16[1] = a5;
  return result;
}

uint64_t sub_1B2180EA8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v29;

  v10 = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ecs_stack_allocator_push_snapshot(v10);
  v11 = ecs_stack_allocator_allocate(v10, 32, 8);
  *v11 = &type metadata for MeshModel;
  v11[1] = &off_1E63C4480;
  v11[2] = &type metadata for Name;
  v11[3] = &off_1E63B9AE8;
  v29 = a2;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v14 = *(os_unfair_lock_s **)(v12 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v14);
  v15 = sub_1B1DAD870((uint64_t)v11, 2, MEMORY[0x1E0DEE9D8]);
  v17 = v16;
  v18 = sub_1B1DA8760(v15);
  if ((v19 & 1) != 0 || (v20 = sub_1B1DA87D4(v17, v18), v21 = v20, (v20 & 0x100000000) != 0))
  {
    v22 = sub_1B1DC9E90(v11, 2);
    v21 = sub_1B1DA8838(v15, v17, v22, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v12 + 80) + 8 * v21 + 32);
  v24 = *(os_unfair_lock_s **)(v13 + 24);
  swift_retain();
  os_unfair_lock_unlock(v24);
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25 = sub_1B1F0B068(v23, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), v29, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v29 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v25;
}

id sub_1B21810BC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  char v9;
  _OWORD *v10;
  uint64_t v11;
  char v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  id result;
  __int128 v17;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = sub_1B1A11FDC((uint64_t)&type metadata for Position);
  v5 = 16 * v3;
  if ((v6 & 1) != 0)
    v7 = 0;
  else
    v7 = (_OWORD *)(v4 + 16 * v3);
  v8 = sub_1B1A11FDC((uint64_t)&type metadata for Orientation);
  if ((v9 & 1) != 0)
    v10 = 0;
  else
    v10 = (_OWORD *)(v8 + v5);
  v11 = sub_1B1A11FDC((uint64_t)&type metadata for Scale3);
  if ((v12 & 1) != 0)
    v13 = 0;
  else
    v13 = (_OWORD *)(v11 + v5);
  sub_1B1F02D60(v3);
  sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
  objc_msgSend(a2, sel_position);
  HIDWORD(v14) = 1.0;
  *v7 = v14;
  objc_msgSend(a2, sel_orientation);
  *v10 = v15;
  result = objc_msgSend(a2, sel_scale);
  *v13 = v17;
  return result;
}

uint64_t sub_1B21811D4(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  id v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = a3;
  ecs_stack_allocator_push_snapshot(v5);
  v7 = ecs_stack_allocator_allocate(v5, 80, 8);
  *v7 = &type metadata for Position;
  v7[1] = &off_1E63C2398;
  v7[2] = &type metadata for Orientation;
  v7[3] = &off_1E6371540;
  v7[4] = &type metadata for Scale3;
  v7[5] = &off_1E63BC558;
  v7[6] = type metadata accessor for VFXObjectTag();
  v7[7] = &off_1E63786A0;
  v7[8] = &type metadata for WorldTransform;
  v7[9] = &off_1E6382C00;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v10 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v10);
  v11 = sub_1B1DAD870((uint64_t)v7, 5, MEMORY[0x1E0DEE9D8]);
  v13 = v12;
  v14 = sub_1B1DA8760(v11);
  if ((v15 & 1) != 0 || (v16 = sub_1B1DA87D4(v13, v14), v17 = v16, (v16 & 0x100000000) != 0))
  {
    v18 = sub_1B1DC9E90(v7, 5);
    v17 = sub_1B1DA8838(v11, v13, v18, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v17 + 32);
  v20 = *(os_unfair_lock_s **)(v9 + 24);
  swift_retain();
  os_unfair_lock_unlock(v20);
  swift_release();
  v21 = v6;
  v22 = sub_1B1F0B2B8(v19, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, v21);
  swift_release();

  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  return v22;
}

uint64_t sub_1B21813BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = sub_1B1A11FDC((uint64_t)&type metadata for TextureFileData);
  if ((v7 & 1) != 0)
    v8 = 0;
  else
    v8 = (uint64_t *)(v6 + 16 * v5);
  v9 = *v8;
  v10 = v8[1];
  sub_1B1A0DC90(a2, a3);
  result = sub_1B1A0DAC8(v9, v10);
  *v8 = a2;
  v8[1] = a3;
  return result;
}

uint64_t sub_1B2181440(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _OWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  __int128 *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  uint64_t v40;
  uint64_t v43;

  v9 = *(_QWORD *)(a3 + 32);
  sub_1B1A0DC90(a4, a5);
  ecs_stack_allocator_push_snapshot(v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = 2 * v10;
  v12 = ecs_stack_allocator_allocate(v9, 16 * v10 + 16, 8);
  v13 = v12;
  *v12 = &type metadata for TextureFileData;
  v12[1] = &off_1E6385E20;
  if (!v10)
  {
    v16 = 1;
    goto LABEL_17;
  }
  if (v10 < 6
    || ((unint64_t)(v12 + 2) < v11 * 8 + a1 + 32 ? (v14 = a1 + 32 >= (unint64_t)&v12[v11 + 2]) : (v14 = 1),
        !v14))
  {
    v15 = 0;
    v16 = 1;
LABEL_13:
    v24 = v10 - v15;
    v25 = (__int128 *)(a1 + 16 * v15 + 32);
    do
    {
      v26 = *v25++;
      *(_OWORD *)&v12[2 * v16++] = v26;
      --v24;
    }
    while (v24);
    goto LABEL_17;
  }
  v15 = v10 & 0x7FFFFFFFFFFFFFFCLL;
  v16 = v10 & 0x7FFFFFFFFFFFFFFCLL | 1;
  v17 = (__int128 *)(a1 + 64);
  v18 = v12 + 6;
  v19 = v10 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v21 = *(v17 - 2);
    v20 = *(v17 - 1);
    v23 = *v17;
    v22 = v17[1];
    v17 += 4;
    *(v18 - 2) = v21;
    *(v18 - 1) = v20;
    *v18 = v23;
    v18[1] = v22;
    v18 += 4;
    v19 -= 4;
  }
  while (v19);
  if (v10 != v15)
    goto LABEL_13;
LABEL_17:
  v43 = a3;
  v27 = *(_QWORD *)(a3 + 16);
  v28 = v27 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v29 = *(os_unfair_lock_s **)(v27 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v29);
  v30 = sub_1B1DAD870((uint64_t)v13, v16, MEMORY[0x1E0DEE9D8]);
  v32 = v31;
  v33 = sub_1B1DA8760(v30);
  if ((v34 & 1) != 0 || (v35 = sub_1B1DA87D4(v32, v33), v36 = v35, (v35 & 0x100000000) != 0))
  {
    v37 = sub_1B1DC9E90(v13, v16);
    v36 = sub_1B1DA8838(v30, v32, v37, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v27 + 80) + 8 * v36 + 32);
  v39 = *(os_unfair_lock_s **)(v28 + 24);
  swift_retain();
  os_unfair_lock_unlock(v39);
  swift_release();
  sub_1B1A0DC90(a4, a5);
  v40 = sub_1B1F0B4D8(v38, 1, 1, a2 | ((HIDWORD(a2) & 1) << 32), v43, a4, a5);
  sub_1B1A0DADC(a4, a5);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v43 + 32));
  sub_1B1A0DADC(a4, a5);
  return v40;
}

uint64_t sub_1B21816A4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  return sub_1B218175C(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD))sub_1B1A1B298, a8, (uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, &qword_1EEF64FA0);
}

uint64_t sub_1B21816E8(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  return sub_1B218196C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD))sub_1B1A1B298, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))sub_1B1F0B6F0);
}

uint64_t sub_1B2181718(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  return sub_1B218175C(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD))sub_1B1A1B168, a8, (uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, &qword_1EEF64FA8);
}

uint64_t sub_1B218175C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), float a9, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v18 = *(_QWORD *)(a1 + 48);
  v19 = a8(0);
  v20 = sub_1B1A11FDC(v19);
  if ((v21 & 1) != 0)
    v22 = 0;
  else
    v22 = v20 + 152 * v18;
  v23 = sub_1B1A11FDC((uint64_t)&type metadata for AnimationTimeSource);
  if ((v24 & 1) != 0)
    v25 = 0;
  else
    v25 = v23 + 60 * v18;
  return sub_1B217EB40(v22, v25, a2, a3, a4, a9, a5, a6, a7, a10, a11, a12);
}

uint64_t sub_1B2181854(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  return sub_1B218196C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD))sub_1B1A1B168, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))sub_1B1F0B724);
}

uint64_t sub_1B2181884(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  return sub_1B218175C(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD))sub_1B1A1B298, a8, (uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, &qword_1EEF64FA8);
}

uint64_t sub_1B21818C8(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  return sub_1B218196C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD))sub_1B1A1B298, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))sub_1B1F0B758);
}

uint64_t sub_1B21818F8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  return sub_1B218175C(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(_QWORD))sub_1B1A1B298, a8, (uint64_t)&type metadata for Scale3, (uint64_t)&off_1E63BC558, qword_1EEF64FB0);
}

uint64_t sub_1B218193C(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  return sub_1B218196C(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(_QWORD))sub_1B1A1B298, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))sub_1B1F0B78C);
}

uint64_t sub_1B218196C(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t (*a10)(_QWORD), uint64_t (*a11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, float, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;

  v15 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  ecs_stack_allocator_push_snapshot(v15);
  v16 = ecs_stack_allocator_allocate(v15, 32, 8);
  *v16 = a10(0);
  v16[1] = &off_1E638CEA0;
  v16[2] = &type metadata for AnimationTimeSource;
  v16[3] = &off_1E6397740;
  v17 = *(_QWORD *)(a2 + 16);
  v18 = v17 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v19 = *(os_unfair_lock_s **)(v17 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v19);
  v20 = sub_1B1DAD870((uint64_t)v16, 2, MEMORY[0x1E0DEE9D8]);
  v22 = v21;
  v23 = sub_1B1DA8760(v20);
  if ((v24 & 1) != 0 || (v25 = sub_1B1DA87D4(v22, v23), v26 = v25, (v25 & 0x100000000) != 0))
  {
    v27 = sub_1B1DC9E90(v16, 2);
    v26 = sub_1B1DA8838(v20, v22, v27, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v28 = *(_QWORD *)(*(_QWORD *)(v17 + 80) + 8 * v26 + 32);
  v29 = *(os_unfair_lock_s **)(v18 + 24);
  swift_retain();
  os_unfair_lock_unlock(v29);
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  v30 = a11(v28, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, a4, a5, a9, a6, a7, a8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  swift_release();
  swift_bridgeObjectRelease();
  return v30;
}

void sub_1B2181B8C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1B2229514();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_1B2181BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 48);
  v4 = sub_1B1A11FDC((uint64_t)&type metadata for TextureGPURuntime);
  if ((v5 & 1) != 0)
    v6 = 0;
  else
    v6 = (_QWORD *)(v4 + 8 * v3);
  sub_1B1A11FDC((uint64_t)&type metadata for TextureRequireGPURepresentation);
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  *v6 = a2;
  return result;
}

uint64_t sub_1B2181C58(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  ecs_stack_allocator_push_snapshot(v6);
  v7 = ecs_stack_allocator_allocate(v6, 32, 8);
  *v7 = &type metadata for TextureGPURuntime;
  v7[1] = &off_1E6390060;
  v7[2] = &type metadata for TextureRequireGPURepresentation;
  v7[3] = &off_1E63B6428;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v10 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v10);
  v11 = sub_1B1DAD870((uint64_t)v7, 2, MEMORY[0x1E0DEE9D8]);
  v13 = v12;
  v14 = sub_1B1DA8760(v11);
  if ((v15 & 1) != 0 || (v16 = sub_1B1DA87D4(v13, v14), v17 = v16, (v16 & 0x100000000) != 0))
  {
    v18 = sub_1B1DC9E90(v7, 2);
    v17 = sub_1B1DA8838(v11, v13, v18, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v19 = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v17 + 32);
  v20 = *(os_unfair_lock_s **)(v9 + 24);
  swift_retain();
  os_unfair_lock_unlock(v20);
  swift_release();
  swift_unknownObjectRetain();
  v21 = sub_1B1F0BA14(v19, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a2, a3);
  swift_release();
  swift_unknownObjectRelease();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a2 + 32));
  swift_unknownObjectRelease();
  return v21;
}

uint64_t sub_1B2181E10()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for Query6()
{
  JUMPOUT(0x1B5E23DD8);
}

uint64_t sub_1B2181E38()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for Query5()
{
  JUMPOUT(0x1B5E23DD8);
}

uint64_t sub_1B2181E4C()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for Query4()
{
  JUMPOUT(0x1B5E23DD8);
}

void type metadata accessor for Query3()
{
  JUMPOUT(0x1B5E23DD8);
}

uint64_t type metadata accessor for Query1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Query1);
}

void type metadata accessor for Query2()
{
  JUMPOUT(0x1B5E23DD8);
}

uint64_t sub_1B2181E84(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v12;
  int v13;
  int v14;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v12 = a7(0);
  v13 = *(_DWORD *)(v7 + 24);
  swift_retain();
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v14 = sub_1B1DA4ED8(v13, v12, (uint64_t)&off_1E639FC40, 0, 0, (uint64_t)v23, (uint64_t)v21);
  swift_release();
  sub_1B1A12E98((uint64_t)v21);
  sub_1B1A12E98((uint64_t)v23);
  if (*(_QWORD *)(v7 + 240) - *(_QWORD *)(v7 + 232) == a3 && sub_1B1A10B20(v14))
    return sub_1B1A10BB0(v14);
  v16 = *(unsigned __int8 *)(v7 + 120);
  v17 = *(unsigned int *)(v7 + 28);
  v18 = *(_BYTE *)(v7 + 32);
  if (a4)
    v19 = a4 + (a5 << 6);
  else
    v19 = 0;
  LOBYTE(v23[0]) = *(_BYTE *)(v7 + 32);
  return sub_1B1FD891C(a1, a2, a3, v14, v16, v17 | ((unint64_t)v18 << 32), a4, v19);
}

uint64_t sub_1B2181FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v6;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v11 = a6(0);
  v12 = *(_DWORD *)(v6 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v13 = sub_1B1DA4ED8(v12, v11, (uint64_t)&off_1E639FC40, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  if (a2 - a1 == *(_QWORD *)(v6 + 240) - *(_QWORD *)(v6 + 232) && sub_1B1A10B20(v13))
    return sub_1B1A10BB0(v13);
  v15 = *(unsigned __int8 *)(v6 + 120);
  v16 = *(unsigned int *)(v6 + 28);
  v17 = *(_BYTE *)(v6 + 32);
  if (a3)
    v18 = a3 + (a4 << 6);
  else
    v18 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v6 + 32);
  return sub_1B1FD8C68(a1, a2, v13, v15, v16 | ((unint64_t)v17 << 32), a3, v18, v11);
}

uint64_t sub_1B2182118(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  sub_1B1A19DCC(0);
  v11 = v10;
  v12 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v13 = sub_1B1DA4ED8(v12, v11, (uint64_t)&off_1E639FC40, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B1A12E98((uint64_t)v20);
  sub_1B1A12E98((uint64_t)v22);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v13))
    return sub_1B1A10BB0(v13);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + 40 * a5;
  else
    v18 = 0;
  LOBYTE(v22[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v13, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B2182268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  sub_1B1A19DCC(0);
  v10 = v9;
  v11 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, v10, (uint64_t)&off_1E639FC40, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v4 + 120);
  v15 = *(unsigned int *)(v4 + 28);
  v16 = *(_BYTE *)(v4 + 32);
  if (a3)
    v17 = a3 + 40 * a4;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v12, v14, v15 | ((unint64_t)v16 << 32), a3, v17, v10);
}

uint64_t sub_1B21823B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  sub_1B1A1B4F8(0, &qword_1ED4B9728, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for BasicAnimationRuntime);
  v11 = v10;
  v12 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v13 = sub_1B1DA4ED8(v12, v11, (uint64_t)&off_1E639FC40, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B1A12E98((uint64_t)v20);
  sub_1B1A12E98((uint64_t)v22);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v13))
    return sub_1B1A10BB0(v13);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + 32 * a5;
  else
    v18 = 0;
  LOBYTE(v22[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v13, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B2182510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  sub_1B1A1B4F8(0, &qword_1ED4B9728, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for BasicAnimationRuntime);
  v10 = v9;
  v11 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, v10, (uint64_t)&off_1E639FC40, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v4 + 120);
  v15 = *(unsigned int *)(v4 + 28);
  v16 = *(_BYTE *)(v4 + 32);
  if (a3)
    v17 = a3 + 32 * a4;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v12, v14, v15 | ((unint64_t)v16 << 32), a3, v17, v10);
}

uint64_t sub_1B2182668(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v12;
  int v13;
  int v14;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  _OWORD v21[2];
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v12 = a7(0);
  v13 = *(_DWORD *)(v7 + 24);
  swift_retain();
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v14 = sub_1B1DA4ED8(v13, v12, (uint64_t)&off_1E63AD5B0, 0, 0, (uint64_t)v23, (uint64_t)v21);
  swift_release();
  sub_1B1A12E98((uint64_t)v21);
  sub_1B1A12E98((uint64_t)v23);
  if (*(_QWORD *)(v7 + 240) - *(_QWORD *)(v7 + 232) == a3 && sub_1B1A10B20(v14))
    return sub_1B1A10BB0(v14);
  v16 = *(unsigned __int8 *)(v7 + 120);
  v17 = *(unsigned int *)(v7 + 28);
  v18 = *(_BYTE *)(v7 + 32);
  if (a4)
    v19 = a4 + (a5 << 6);
  else
    v19 = 0;
  LOBYTE(v23[0]) = *(_BYTE *)(v7 + 32);
  return sub_1B1FD891C(a1, a2, a3, v14, v16, v17 | ((unint64_t)v18 << 32), a4, v19);
}

uint64_t sub_1B21827B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v6;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v11 = a6(0);
  v12 = *(_DWORD *)(v6 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v13 = sub_1B1DA4ED8(v12, v11, (uint64_t)&off_1E63AD5B0, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  if (a2 - a1 == *(_QWORD *)(v6 + 240) - *(_QWORD *)(v6 + 232) && sub_1B1A10B20(v13))
    return sub_1B1A10BB0(v13);
  v15 = *(unsigned __int8 *)(v6 + 120);
  v16 = *(unsigned int *)(v6 + 28);
  v17 = *(_BYTE *)(v6 + 32);
  if (a3)
    v18 = a3 + (a4 << 6);
  else
    v18 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v6 + 32);
  return sub_1B1FD8C68(a1, a2, v13, v15, v16 | ((unint64_t)v17 << 32), a3, v18, v11);
}

uint64_t sub_1B21828FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  sub_1B1A1B460(0);
  v11 = v10;
  v12 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v13 = sub_1B1DA4ED8(v12, v11, (uint64_t)&off_1E63AD5B0, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B1A12E98((uint64_t)v20);
  sub_1B1A12E98((uint64_t)v22);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v13))
    return sub_1B1A10BB0(v13);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + 48 * a5;
  else
    v18 = 0;
  LOBYTE(v22[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v13, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B2182A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  sub_1B1A1B460(0);
  v10 = v9;
  v11 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, v10, (uint64_t)&off_1E63AD5B0, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v4 + 120);
  v15 = *(unsigned int *)(v4 + 28);
  v16 = *(_BYTE *)(v4 + 32);
  if (a3)
    v17 = a3 + 48 * a4;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v12, v14, v15 | ((unint64_t)v16 << 32), a3, v17, v10);
}

uint64_t sub_1B2182B98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  sub_1B1A1B4F8(0, &qword_1ED4B9AB0, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for KeyframeAnimationRuntime);
  v11 = v10;
  v12 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v13 = sub_1B1DA4ED8(v12, v11, (uint64_t)&off_1E63AD5B0, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B1A12E98((uint64_t)v20);
  sub_1B1A12E98((uint64_t)v22);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v13))
    return sub_1B1A10BB0(v13);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + 48 * a5;
  else
    v18 = 0;
  LOBYTE(v22[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v13, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B2182CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  sub_1B1A1B4F8(0, &qword_1ED4B9AB0, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for KeyframeAnimationRuntime);
  v10 = v9;
  v11 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, v10, (uint64_t)&off_1E63AD5B0, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v4 + 120);
  v15 = *(unsigned int *)(v4 + 28);
  v16 = *(_BYTE *)(v4 + 32);
  if (a3)
    v17 = a3 + 48 * a4;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v12, v14, v15 | ((unint64_t)v16 << 32), a3, v17, v10);
}

uint64_t sub_1B2182E54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for ForceFieldRuntime, (uint64_t)&off_1E638C1A0, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 32 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2182FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for ForceFieldRuntime, (uint64_t)&off_1E638C1A0, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 32 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for ForceFieldRuntime);
}

uint64_t sub_1B21830E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v10 = type metadata accessor for ShaderScript(0);
  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v12 = sub_1B1DA4ED8(v11, v10, (uint64_t)&off_1E63774F8, 0, 0, (uint64_t)v22, (uint64_t)v20);
  swift_release();
  sub_1B1A12E98((uint64_t)v20);
  sub_1B1A12E98((uint64_t)v22);
  v13 = *(_QWORD *)(v5 + 192);
  if (v13)
    sub_1B1FE2290(a1, a2, a3, v10, (uint64_t)&off_1E63774F8, 1, v13, *(_QWORD *)(v5 + 200), *(_QWORD *)(v5 + 208));
  sub_1B1FE26A8(*(_QWORD *)(v5 + 40), v5, a1, a2, a3);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a5;
  else
    v18 = 0;
  LOBYTE(v22[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B2183298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v8 = type metadata accessor for ShaderScript(0);
  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v10 = sub_1B1DA4ED8(v9, v8, (uint64_t)&off_1E63774F8, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  v11 = *(_QWORD *)(v4 + 192);
  if (v11)
    sub_1B1FE243C(a1, a2, v8, (uint64_t)&off_1E63774F8, 1, v11, *(_QWORD *)(v4 + 200), *(_QWORD *)(v4 + 208));
  sub_1B1FE2814(*(_QWORD *)(v4 + 40), v4, a1, a2);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v13 = *(unsigned __int8 *)(v4 + 120);
  v14 = *(unsigned int *)(v4 + 28);
  v15 = *(_BYTE *)(v4 + 32);
  if (a3)
    v16 = a3 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a4;
  else
    v16 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v13, v14 | ((unint64_t)v15 << 32), a3, v16, v8);
}

uint64_t sub_1B218343C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 8 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2183588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 8 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for TextureGPURuntime);
}

uint64_t sub_1B21836CC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for VideoCaptureRuntime, (uint64_t)&off_1E639AD40, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 32 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2183818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for VideoCaptureRuntime, (uint64_t)&off_1E639AD40, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 32 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for VideoCaptureRuntime);
}

uint64_t sub_1B218395C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v10 = type metadata accessor for MovieRuntime(0);
  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v12 = sub_1B1DA4ED8(v11, v10, (uint64_t)&off_1E6375E38, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a5;
  else
    v17 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2183AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  int v10;
  int v11;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v9 = type metadata accessor for MovieRuntime(0);
  v10 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v11 = sub_1B1DA4ED8(v10, v9, (uint64_t)&off_1E6375E38, 0, 0, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B1A12E98((uint64_t)v17);
  sub_1B1A12E98((uint64_t)v19);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v11))
    return sub_1B1A10BB0(v11);
  v13 = *(unsigned __int8 *)(v4 + 120);
  v14 = *(unsigned int *)(v4 + 28);
  v15 = *(_BYTE *)(v4 + 32);
  if (a3)
    v16 = a3 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a4;
  else
    v16 = 0;
  LOBYTE(v19[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v11, v13, v14 | ((unint64_t)v15 << 32), a3, v16, v9);
}

uint64_t sub_1B2183C0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for AudioSpectrum, (uint64_t)&off_1E63793F8, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + (a5 << 6);
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2183D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for AudioSpectrum, (uint64_t)&off_1E63793F8, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + (a4 << 6);
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for AudioSpectrum);
}

uint64_t sub_1B2183E9C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v10 = type metadata accessor for AudioPlayerComponent(0);
  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v12 = sub_1B1DA4ED8(v11, v10, (uint64_t)&off_1E639B140, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a5;
  else
    v17 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2183FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  int v10;
  int v11;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v9 = type metadata accessor for AudioPlayerComponent(0);
  v10 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v11 = sub_1B1DA4ED8(v10, v9, (uint64_t)&off_1E639B140, 0, 0, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B1A12E98((uint64_t)v17);
  sub_1B1A12E98((uint64_t)v19);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v11))
    return sub_1B1A10BB0(v11);
  v13 = *(unsigned __int8 *)(v4 + 120);
  v14 = *(unsigned int *)(v4 + 28);
  v15 = *(_BYTE *)(v4 + 32);
  if (a3)
    v16 = a3 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a4;
  else
    v16 = 0;
  LOBYTE(v19[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v11, v13, v14 | ((unint64_t)v15 << 32), a3, v16, v9);
}

uint64_t sub_1B218414C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t *a7, uint64_t (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  _OWORD v24[2];
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;

  sub_1B1A1B6FC(0, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v15 = v14;
  v16 = *(_DWORD *)(v9 + 24);
  swift_retain();
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v17 = sub_1B1DA4ED8(v16, v15, (uint64_t)&off_1E63A95C8, 0, 0, (uint64_t)v26, (uint64_t)v24);
  swift_release();
  sub_1B1A12E98((uint64_t)v24);
  sub_1B1A12E98((uint64_t)v26);
  if (*(_QWORD *)(v9 + 240) - *(_QWORD *)(v9 + 232) == a3 && sub_1B1A10B20(v17))
    return sub_1B1A10BB0(v17);
  v19 = *(unsigned __int8 *)(v9 + 120);
  v20 = *(unsigned int *)(v9 + 28);
  v21 = *(_BYTE *)(v9 + 32);
  if (a4)
    v22 = a4 + 16 * a5;
  else
    v22 = 0;
  LOBYTE(v26[0]) = *(_BYTE *)(v9 + 32);
  return sub_1B1FD891C(a1, a2, a3, v17, v19, v20 | ((unint64_t)v21 << 32), a4, v22);
}

uint64_t sub_1B21842AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  sub_1B1A1B6FC(0, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v14 = v13;
  v15 = *(_DWORD *)(v8 + 24);
  swift_retain();
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v16 = sub_1B1DA4ED8(v15, v14, (uint64_t)&off_1E63A95C8, 0, 0, (uint64_t)v24, (uint64_t)v22);
  swift_release();
  sub_1B1A12E98((uint64_t)v22);
  sub_1B1A12E98((uint64_t)v24);
  if (a2 - a1 == *(_QWORD *)(v8 + 240) - *(_QWORD *)(v8 + 232) && sub_1B1A10B20(v16))
    return sub_1B1A10BB0(v16);
  v18 = *(unsigned __int8 *)(v8 + 120);
  v19 = *(unsigned int *)(v8 + 28);
  v20 = *(_BYTE *)(v8 + 32);
  if (a3)
    v21 = a3 + 16 * a4;
  else
    v21 = 0;
  LOBYTE(v24[0]) = *(_BYTE *)(v8 + 32);
  return sub_1B1FD8C68(a1, a2, v16, v18, v19 | ((unint64_t)v20 << 32), a3, v21, v14);
}

uint64_t sub_1B2184408(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1E637F3F8, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 656 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2184558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1E637F3F8, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 656 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for EmitterRuntime);
}

uint64_t sub_1B21846A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for MetalScriptReflection, (uint64_t)&off_1E63A3588, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 8 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B21847EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for MetalScriptReflection, (uint64_t)&off_1E63A3588, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 8 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for MetalScriptReflection);
}

uint64_t sub_1B2184930(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  v13 = *(_QWORD *)(v5 + 192);
  if (v13)
    sub_1B1FE2290(a1, a2, a3, (uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, 1, v13, *(_QWORD *)(v5 + 200), *(_QWORD *)(v5 + 208));
  sub_1B1FE26A8(*(_QWORD *)(v5 + 40), v5, a1, a2, a3);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + 8 * a5;
  else
    v18 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B2184ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, 0, 0, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B1A12E98((uint64_t)v17);
  sub_1B1A12E98((uint64_t)v19);
  v11 = *(_QWORD *)(v4 + 192);
  if (v11)
    sub_1B1FE243C(a1, a2, (uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, 1, v11, *(_QWORD *)(v4 + 200), *(_QWORD *)(v4 + 208));
  sub_1B1FE2814(*(_QWORD *)(v4 + 40), v4, a1, a2);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v13 = *(unsigned __int8 *)(v4 + 120);
  v14 = *(unsigned int *)(v4 + 28);
  v15 = *(_BYTE *)(v4 + 32);
  if (a3)
    v16 = a3 + 8 * a4;
  else
    v16 = 0;
  LOBYTE(v19[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v13, v14 | ((unint64_t)v15 << 32), a3, v16, (uint64_t)&type metadata for Parent);
}

uint64_t sub_1B2184C70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1E638FF20, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 120 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2184DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1E638FF20, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 120 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for TextureCPURuntime);
}

uint64_t sub_1B2184F08(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1E6386C78, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 4 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2185054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1E6386C78, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 4 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for ColorRampRuntime);
}

uint64_t sub_1B2185198(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for MeshModel, (uint64_t)&off_1E63C4480, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  v13 = *(_QWORD *)(v5 + 192);
  if (v13)
    sub_1B1FE2290(a1, a2, a3, (uint64_t)&type metadata for MeshModel, (uint64_t)&off_1E63C4480, 1, v13, *(_QWORD *)(v5 + 200), *(_QWORD *)(v5 + 208));
  sub_1B1FE26A8(*(_QWORD *)(v5 + 40), v5, a1, a2, a3);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + 16 * a5;
  else
    v18 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B2185344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for MeshModel, (uint64_t)&off_1E63C4480, 0, 0, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B1A12E98((uint64_t)v17);
  sub_1B1A12E98((uint64_t)v19);
  v11 = *(_QWORD *)(v4 + 192);
  if (v11)
    sub_1B1FE243C(a1, a2, (uint64_t)&type metadata for MeshModel, (uint64_t)&off_1E63C4480, 1, v11, *(_QWORD *)(v4 + 200), *(_QWORD *)(v4 + 208));
  sub_1B1FE2814(*(_QWORD *)(v4 + 40), v4, a1, a2);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v13 = *(unsigned __int8 *)(v4 + 120);
  v14 = *(unsigned int *)(v4 + 28);
  v15 = *(_BYTE *)(v4 + 32);
  if (a3)
    v16 = a3 + 16 * a4;
  else
    v16 = 0;
  LOBYTE(v19[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v13, v14 | ((unint64_t)v15 << 32), a3, v16, (uint64_t)&type metadata for MeshModel);
}

uint64_t sub_1B21854D8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for SDFRuntimeData, (uint64_t)&off_1E6380B80, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 40 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2185628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for SDFRuntimeData, (uint64_t)&off_1E6380B80, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 40 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for SDFRuntimeData);
}

uint64_t sub_1B2185770(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for FileWatcher, (uint64_t)&off_1E63705E8, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 8 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B21858BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for FileWatcher, (uint64_t)&off_1E63705E8, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 8 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for FileWatcher);
}

uint64_t sub_1B2185A00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for IBLRuntime, (uint64_t)&off_1E636DEF8, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 16 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2185B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for IBLRuntime, (uint64_t)&off_1E636DEF8, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 16 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for IBLRuntime);
}

uint64_t sub_1B2185C90(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v10 = type metadata accessor for SceneKitRenderer(0);
  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v12 = sub_1B1DA4ED8(v11, v10, (uint64_t)&off_1E638A890, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a5;
  else
    v17 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2185DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  int v10;
  int v11;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v9 = type metadata accessor for SceneKitRenderer(0);
  v10 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v11 = sub_1B1DA4ED8(v10, v9, (uint64_t)&off_1E638A890, 0, 0, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B1A12E98((uint64_t)v17);
  sub_1B1A12E98((uint64_t)v19);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v11))
    return sub_1B1A10BB0(v11);
  v13 = *(unsigned __int8 *)(v4 + 120);
  v14 = *(unsigned int *)(v4 + 28);
  v15 = *(_BYTE *)(v4 + 32);
  if (a3)
    v16 = a3 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a4;
  else
    v16 = 0;
  LOBYTE(v19[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v11, v13, v14 | ((unint64_t)v15 << 32), a3, v16, v9);
}

uint64_t sub_1B2185F40(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1E638F3F0, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 32 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B218608C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1E638F3F0, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 32 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for PointCacheRuntime);
}

uint64_t sub_1B21861D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for Seed, (uint64_t)&off_1E63B9E88, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  v13 = *(_QWORD *)(v5 + 192);
  if (v13)
    sub_1B1FE2290(a1, a2, a3, (uint64_t)&type metadata for Seed, (uint64_t)&off_1E63B9E88, 1, v13, *(_QWORD *)(v5 + 200), *(_QWORD *)(v5 + 208));
  sub_1B1FE26A8(*(_QWORD *)(v5 + 40), v5, a1, a2, a3);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + 8 * a5;
  else
    v18 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B218637C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for Seed, (uint64_t)&off_1E63B9E88, 0, 0, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B1A12E98((uint64_t)v17);
  sub_1B1A12E98((uint64_t)v19);
  v11 = *(_QWORD *)(v4 + 192);
  if (v11)
    sub_1B1FE243C(a1, a2, (uint64_t)&type metadata for Seed, (uint64_t)&off_1E63B9E88, 1, v11, *(_QWORD *)(v4 + 200), *(_QWORD *)(v4 + 208));
  sub_1B1FE2814(*(_QWORD *)(v4 + 40), v4, a1, a2);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v13 = *(unsigned __int8 *)(v4 + 120);
  v14 = *(unsigned int *)(v4 + 28);
  v15 = *(_BYTE *)(v4 + 32);
  if (a3)
    v16 = a3 + 8 * a4;
  else
    v16 = 0;
  LOBYTE(v19[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v13, v14 | ((unint64_t)v15 << 32), a3, v16, (uint64_t)&type metadata for Seed);
}

uint64_t sub_1B2186510(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 4 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B218665C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 4 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for Scale1);
}

uint64_t sub_1B21867A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  v13 = *(_QWORD *)(v5 + 192);
  if (v13)
    sub_1B1FE2290(a1, a2, a3, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 1, v13, *(_QWORD *)(v5 + 200), *(_QWORD *)(v5 + 208));
  sub_1B1FE26A8(*(_QWORD *)(v5 + 40), v5, a1, a2, a3);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + (a5 << 6);
  else
    v18 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B218694C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 0, 0, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B1A12E98((uint64_t)v17);
  sub_1B1A12E98((uint64_t)v19);
  v11 = *(_QWORD *)(v4 + 192);
  if (v11)
    sub_1B1FE243C(a1, a2, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 1, v11, *(_QWORD *)(v4 + 200), *(_QWORD *)(v4 + 208));
  sub_1B1FE2814(*(_QWORD *)(v4 + 40), v4, a1, a2);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v13 = *(unsigned __int8 *)(v4 + 120);
  v14 = *(unsigned int *)(v4 + 28);
  v15 = *(_BYTE *)(v4 + 32);
  if (a3)
    v16 = a3 + (a4 << 6);
  else
    v16 = 0;
  LOBYTE(v19[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v13, v14 | ((unint64_t)v15 << 32), a3, v16, (uint64_t)&type metadata for TextureLoadingOptions);
}

uint64_t sub_1B2186AE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1E6390318, 0, 0, (uint64_t)v21, (uint64_t)v19);
  swift_release();
  sub_1B1A12E98((uint64_t)v19);
  sub_1B1A12E98((uint64_t)v21);
  v13 = *(_QWORD *)(v5 + 192);
  if (v13)
    sub_1B1FE2290(a1, a2, a3, (uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1E6390318, 1, v13, *(_QWORD *)(v5 + 200), *(_QWORD *)(v5 + 208));
  sub_1B1FE26A8(*(_QWORD *)(v5 + 40), v5, a1, a2, a3);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v15 = *(unsigned __int8 *)(v5 + 120);
  v16 = *(unsigned int *)(v5 + 28);
  v17 = *(_BYTE *)(v5 + 32);
  if (a4)
    v18 = a4 + 4 * a5;
  else
    v18 = 0;
  LOBYTE(v21[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v15, v16 | ((unint64_t)v17 << 32), a4, v18);
}

uint64_t sub_1B2186C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1E6390318, 0, 0, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B1A12E98((uint64_t)v17);
  sub_1B1A12E98((uint64_t)v19);
  v11 = *(_QWORD *)(v4 + 192);
  if (v11)
    sub_1B1FE243C(a1, a2, (uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1E6390318, 1, v11, *(_QWORD *)(v4 + 200), *(_QWORD *)(v4 + 208));
  sub_1B1FE2814(*(_QWORD *)(v4 + 40), v4, a1, a2);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v13 = *(unsigned __int8 *)(v4 + 120);
  v14 = *(unsigned int *)(v4 + 28);
  v15 = *(_BYTE *)(v4 + 32);
  if (a3)
    v16 = a3 + 4 * a4;
  else
    v16 = 0;
  LOBYTE(v19[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v13, v14 | ((unint64_t)v15 << 32), a3, v16, (uint64_t)&type metadata for TextureLoadPolicy);
}

uint64_t sub_1B2186E20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v11;
  int v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v11 = *(_DWORD *)(v5 + 24);
  swift_retain();
  v21 = 0;
  memset(v20, 0, sizeof(v20));
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v12 = sub_1B1DA4ED8(v11, (uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1E6374B40, 0, 0, (uint64_t)v20, (uint64_t)v18);
  swift_release();
  sub_1B1A12E98((uint64_t)v18);
  sub_1B1A12E98((uint64_t)v20);
  if (*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232) == a3 && sub_1B1A10B20(v12))
    return sub_1B1A10BB0(v12);
  v14 = *(unsigned __int8 *)(v5 + 120);
  v15 = *(unsigned int *)(v5 + 28);
  v16 = *(_BYTE *)(v5 + 32);
  if (a4)
    v17 = a4 + 4 * a5;
  else
    v17 = 0;
  LOBYTE(v20[0]) = *(_BYTE *)(v5 + 32);
  return sub_1B1FD891C(a1, a2, a3, v12, v14, v15 | ((unint64_t)v16 << 32), a4, v17);
}

uint64_t sub_1B2186F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v9 = *(_DWORD *)(v4 + 24);
  swift_retain();
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v10 = sub_1B1DA4ED8(v9, (uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1E6374B40, 0, 0, (uint64_t)v18, (uint64_t)v16);
  swift_release();
  sub_1B1A12E98((uint64_t)v16);
  sub_1B1A12E98((uint64_t)v18);
  if (a2 - a1 == *(_QWORD *)(v4 + 240) - *(_QWORD *)(v4 + 232) && sub_1B1A10B20(v10))
    return sub_1B1A10BB0(v10);
  v12 = *(unsigned __int8 *)(v4 + 120);
  v13 = *(unsigned int *)(v4 + 28);
  v14 = *(_BYTE *)(v4 + 32);
  if (a3)
    v15 = a3 + 4 * a4;
  else
    v15 = 0;
  LOBYTE(v18[0]) = *(_BYTE *)(v4 + 32);
  return sub_1B1FD8C68(a1, a2, v10, v12, v13 | ((unint64_t)v14 << 32), a3, v15, (uint64_t)&type metadata for CurveRuntime);
}

uint64_t sub_1B21870B0(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B2188898);
}

uint64_t sub_1B21870CC(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B2188D30);
}

uint64_t sub_1B21870E8(uint64_t result, void (*a2)(_QWORD *, _QWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _BYTE v36[40];
  _QWORD v37[10];
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v29 = *(_OWORD *)result;
  v30 = *(_OWORD *)(result + 16);
  v31 = *(_QWORD *)(result + 32);
  v23 = *(_QWORD *)(result + 80);
  if (v23 >= 1)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v7 = *(_QWORD *)(result + 56);
    v6 = *(_QWORD *)(result + 64);
    v8 = *(_QWORD **)(result + 72);
    v9 = v8[4];
    ecs_stack_allocator_push_snapshot(v9);
    if (v7)
    {
      v22 = v6;
      v10 = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v20 = v4;
      sub_1B1D6631C(v4);
      v11 = (uint64_t *)(v5 + 24);
      v21 = v10;
      while (1)
      {
        v25 = v7;
        v12 = *((unsigned int *)v11 - 6);
        v13 = *((unsigned int *)v11 - 5);
        v14 = *((unsigned int *)v11 - 4);
        v27 = *v11;
        v28 = *(v11 - 1);
        v15 = v11[2];
        v26 = v11[1];
        v42 = v3;
        if (v10)
        {
          v16 = *(os_unfair_lock_s **)(v15 + 376);
          swift_retain();
          os_unfair_lock_lock(v16);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v9);
        sub_1B1A000F0((uint64_t)(v8 + 6), (uint64_t)v36, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v17 = v8[4];
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v8[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
        v8[7] = v18;
        v8[9] = 0;
        v8[10] = 0;
        v8[8] = 0;
        swift_release();
        v37[0] = v22;
        v37[1] = v15;
        v37[2] = v8;
        v37[3] = v14;
        v37[4] = (v13 - v12 + v14);
        v37[5] = v23;
        v37[6] = v12;
        v37[7] = v13;
        v37[8] = 0;
        v37[9] = 0;
        v38 = 1;
        v39 = v28;
        v40 = v27;
        v41 = v26;
        v19 = v42;
        a2(v37, v8);
        if (v19)
          break;
        v34[0] = v29;
        v34[1] = v30;
        v35 = v31;
        sub_1B1F05D48(v8, (unsigned __int16 **)v34, (uint64_t)v36);
        v3 = 0;
        sub_1B1F03804((char *)v15);
        ecs_stack_allocator_pop_snapshot(v9);
        v10 = v21;
        if ((v21 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
        }
        swift_release();
        v11 += 6;
        v7 = v25 - 1;
        if (v25 == 1)
        {
          sub_1B1D66364(v20);
          return ecs_stack_allocator_pop_snapshot(v8[4]);
        }
      }
      v32[0] = v29;
      v32[1] = v30;
      v33 = v31;
      sub_1B1F05D48(v8, (unsigned __int16 **)v32, (uint64_t)v36);
      sub_1B1F03804((char *)v15);
      ecs_stack_allocator_pop_snapshot(v9);
      if ((v21 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
      }
      sub_1B1D66364(v20);
      swift_release();
    }
    return ecs_stack_allocator_pop_snapshot(v8[4]);
  }
  return result;
}

uint64_t sub_1B21873D0(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B2189FB8);
}

uint64_t sub_1B21873EC(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218A2D0);
}

uint64_t sub_1B2187408(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _BYTE v36[40];
  _QWORD v37[10];
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v29 = *(_OWORD *)result;
  v30 = *(_OWORD *)(result + 16);
  v31 = *(_QWORD *)(result + 32);
  v23 = *(_QWORD *)(result + 80);
  if (v23 >= 1)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 40);
    v7 = *(_QWORD *)(result + 56);
    v6 = *(_QWORD *)(result + 64);
    v8 = *(_QWORD **)(result + 72);
    v9 = v8[4];
    ecs_stack_allocator_push_snapshot(v9);
    if (v7)
    {
      v22 = v6;
      v10 = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v20 = v4;
      sub_1B1D6631C(v4);
      v11 = (uint64_t *)(v5 + 24);
      v21 = v10;
      while (1)
      {
        v25 = v7;
        v12 = *((unsigned int *)v11 - 6);
        v13 = *((unsigned int *)v11 - 5);
        v14 = *((unsigned int *)v11 - 4);
        v27 = *v11;
        v28 = *(v11 - 1);
        v15 = v11[2];
        v26 = v11[1];
        v42 = v3;
        if (v10)
        {
          v16 = *(os_unfair_lock_s **)(v15 + 376);
          swift_retain();
          os_unfair_lock_lock(v16);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v9);
        sub_1B1A000F0((uint64_t)(v8 + 6), (uint64_t)v36, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v17 = v8[4];
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v8[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
        v8[7] = v18;
        v8[9] = 0;
        v8[10] = 0;
        v8[8] = 0;
        swift_release();
        v37[0] = v22;
        v37[1] = v15;
        v37[2] = v8;
        v37[3] = v14;
        v37[4] = (v13 - v12 + v14);
        v37[5] = v23;
        v37[6] = v12;
        v37[7] = v13;
        v37[8] = 0;
        v37[9] = 0;
        v38 = 1;
        v39 = v28;
        v40 = v27;
        v41 = v26;
        v19 = v42;
        sub_1B218A954(v37, v8, a2);
        if (v19)
          break;
        v34[0] = v29;
        v34[1] = v30;
        v35 = v31;
        sub_1B1F05D48(v8, (unsigned __int16 **)v34, (uint64_t)v36);
        v3 = 0;
        sub_1B1F03804((char *)v15);
        ecs_stack_allocator_pop_snapshot(v9);
        v10 = v21;
        if ((v21 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
        }
        swift_release();
        v11 += 6;
        v7 = v25 - 1;
        if (v25 == 1)
        {
          sub_1B1D66364(v20);
          return ecs_stack_allocator_pop_snapshot(v8[4]);
        }
      }
      v32[0] = v29;
      v32[1] = v30;
      v33 = v31;
      sub_1B1F05D48(v8, (unsigned __int16 **)v32, (uint64_t)v36);
      sub_1B1F03804((char *)v15);
      ecs_stack_allocator_pop_snapshot(v9);
      if ((v21 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
      }
      sub_1B1D66364(v20);
      swift_release();
    }
    return ecs_stack_allocator_pop_snapshot(v8[4]);
  }
  return result;
}

uint64_t sub_1B21876EC(uint64_t a1, uint64_t a2)
{
  return sub_1B218775C(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B218B334);
}

uint64_t sub_1B2187708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2187C24(a1, a2, a3, (void (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1B218ADEC);
}

uint64_t sub_1B2187724(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218B7A4);
}

uint64_t sub_1B2187740(uint64_t a1, uint64_t a2)
{
  return sub_1B218775C(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B218BA3C);
}

uint64_t sub_1B218775C(uint64_t result, uint64_t a2, void (*a3)(_QWORD *, _QWORD *, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _BYTE v38[40];
  _QWORD v39[10];
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = v3;
  v31 = *(_OWORD *)result;
  v32 = *(_OWORD *)(result + 16);
  v33 = *(_QWORD *)(result + 32);
  v24 = *(_QWORD *)(result + 80);
  if (v24 >= 1)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    v7 = *(_QWORD *)(result + 56);
    v8 = *(_QWORD *)(result + 64);
    v9 = *(_QWORD **)(result + 72);
    v10 = v9[4];
    ecs_stack_allocator_push_snapshot(v10);
    if (v7)
    {
      v23 = v8;
      v11 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v21 = v5;
      sub_1B1D6631C(v5);
      v12 = (uint64_t *)(v6 + 24);
      v22 = v11;
      while (1)
      {
        v27 = v7;
        v13 = *((unsigned int *)v12 - 6);
        v14 = *((unsigned int *)v12 - 5);
        v15 = *((unsigned int *)v12 - 4);
        v29 = *v12;
        v30 = *(v12 - 1);
        v16 = v12[2];
        v28 = v12[1];
        v44 = v4;
        if (v11)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A000F0((uint64_t)(v9 + 6), (uint64_t)v38, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v18 = v9[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v39[0] = v23;
        v39[1] = v16;
        v39[2] = v9;
        v39[3] = v15;
        v39[4] = (v14 - v13 + v15);
        v39[5] = v24;
        v39[6] = v13;
        v39[7] = v14;
        v39[8] = 0;
        v39[9] = 0;
        v40 = 1;
        v41 = v30;
        v42 = v29;
        v43 = v28;
        v20 = v44;
        a3(v39, v9, a2);
        if (v20)
          break;
        v36[0] = v31;
        v36[1] = v32;
        v37 = v33;
        sub_1B1F05D48(v9, (unsigned __int16 **)v36, (uint64_t)v38);
        v4 = 0;
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        v11 = v22;
        if ((v22 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        v7 = v27 - 1;
        if (v27 == 1)
        {
          sub_1B1D66364(v21);
          return ecs_stack_allocator_pop_snapshot(v9[4]);
        }
      }
      v34[0] = v31;
      v34[1] = v32;
      v35 = v33;
      sub_1B1F05D48(v9, (unsigned __int16 **)v34, (uint64_t)v38);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if ((v22 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B1D66364(v21);
      swift_release();
    }
    return ecs_stack_allocator_pop_snapshot(v9[4]);
  }
  return result;
}

uint64_t sub_1B2187A48(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218C0C0);
}

uint64_t sub_1B2187A64(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218C32C);
}

uint64_t sub_1B2187A80(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218F900);
}

uint64_t sub_1B2187A9C(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218F520);
}

uint64_t sub_1B2187AB8(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218F130);
}

uint64_t sub_1B2187AD4(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218ED50);
}

uint64_t sub_1B2187AF0(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218E960);
}

uint64_t sub_1B2187B0C(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218E4F0);
}

uint64_t sub_1B2187B28(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218E080);
}

uint64_t sub_1B2187B44(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218DC10);
}

uint64_t sub_1B2187B60(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218D7A0);
}

uint64_t sub_1B2187B7C(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218D330);
}

uint64_t sub_1B2187B98(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218CEC0);
}

uint64_t sub_1B2187BB4(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218CA50);
}

uint64_t sub_1B2187BD0(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B218C5E0);
}

uint64_t sub_1B2187BEC(uint64_t a1, uint64_t a2)
{
  return sub_1B218775C(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B2190320);
}

uint64_t sub_1B2187C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B2187C24(a1, a2, a3, (void (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))sub_1B218FD70);
}

uint64_t sub_1B2187C24(uint64_t result, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _BYTE v38[40];
  _QWORD v39[10];
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  v5 = v4;
  v31 = *(_OWORD *)result;
  v32 = *(_OWORD *)(result + 16);
  v33 = *(_QWORD *)(result + 32);
  v22 = *(_QWORD *)(result + 80);
  if (v22 >= 1)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 40);
    v9 = *(_QWORD *)(result + 56);
    v8 = *(_QWORD *)(result + 64);
    v10 = *(_QWORD **)(result + 72);
    v11 = v10[4];
    ecs_stack_allocator_push_snapshot(v11);
    if (v9)
    {
      v21 = v8;
      v44 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v20 = v6;
      sub_1B1D6631C(v6);
      for (i = (uint64_t *)(v7 + 24); ; i += 6)
      {
        v26 = v9;
        v13 = *((unsigned int *)i - 6);
        v14 = *((unsigned int *)i - 5);
        v15 = *((unsigned int *)i - 4);
        v28 = *i;
        v29 = *(i - 1);
        v16 = i[2];
        v27 = i[1];
        v30 = v5;
        if (v44)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v11);
        sub_1B1A000F0((uint64_t)(v10 + 6), (uint64_t)v38, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v18 = v10[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v10[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v10[7] = v19;
        v10[9] = 0;
        v10[10] = 0;
        v10[8] = 0;
        swift_release();
        v39[0] = v21;
        v39[1] = v16;
        v39[2] = v10;
        v39[3] = v15;
        v39[4] = (v14 - v13 + v15);
        v39[5] = v22;
        v39[6] = v13;
        v39[7] = v14;
        v39[8] = 0;
        v39[9] = 0;
        v40 = 1;
        v41 = v29;
        v42 = v28;
        v43 = v27;
        a4(v39, v10, a2, a3);
        if (v30)
          break;
        v36[0] = v31;
        v36[1] = v32;
        v37 = v33;
        sub_1B1F05D48(v10, (unsigned __int16 **)v36, (uint64_t)v38);
        v5 = 0;
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v11);
        if ((v44 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v9 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B1D66364(v20);
          return ecs_stack_allocator_pop_snapshot(v10[4]);
        }
      }
      v34[0] = v31;
      v34[1] = v32;
      v35 = v33;
      sub_1B1F05D48(v10, (unsigned __int16 **)v34, (uint64_t)v38);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v11);
      if ((v44 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B1D66364(v20);
      swift_release();
    }
    return ecs_stack_allocator_pop_snapshot(v10[4]);
  }
  return result;
}

uint64_t sub_1B2187F08(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B2190F64);
}

uint64_t sub_1B2187F24(uint64_t a1)
{
  return sub_1B21870E8(a1, (void (*)(_QWORD *, _QWORD *))sub_1B2190BC0);
}

_QWORD *sub_1B2187F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v23[16];
  char v24[8];

  sub_1B21948C0(a2, (uint64_t)v24);
  sub_1B1A025EC(a2 + 32, (uint64_t)v23, (uint64_t (*)(_QWORD))sub_1B2193D88);
  v6 = ecs_stack_allocator_allocate(a3, a1 << 6, 16);
  v7 = v6;
  if (a1)
  {
    v8 = *(_OWORD *)a2;
    v9 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)(a2 + 32);
    v6[6] = *(_QWORD *)(a2 + 48);
    *((_OWORD *)v6 + 1) = v9;
    *((_OWORD *)v6 + 2) = v10;
    *(_OWORD *)v6 = v8;
    if (a1 != 1)
    {
      v11 = *(_OWORD *)a2;
      v12 = *(_OWORD *)(a2 + 16);
      v13 = *(_OWORD *)(a2 + 32);
      v6[14] = *(_QWORD *)(a2 + 48);
      *((_OWORD *)v6 + 5) = v12;
      *((_OWORD *)v6 + 6) = v13;
      *((_OWORD *)v6 + 4) = v11;
      if (a1 != 2)
      {
        v14 = *(_OWORD *)a2;
        v15 = *(_OWORD *)(a2 + 16);
        v16 = *(_OWORD *)(a2 + 32);
        v6[22] = *(_QWORD *)(a2 + 48);
        *((_OWORD *)v6 + 9) = v15;
        *((_OWORD *)v6 + 10) = v16;
        *((_OWORD *)v6 + 8) = v14;
        v17 = a1 - 3;
        if (a1 != 3)
        {
          v18 = v6 + 24;
          do
          {
            sub_1B1B40D5C((uint64_t)v23);
            sub_1B1B7C5AC((uint64_t)v24);
            v20 = *(_OWORD *)(a2 + 16);
            v19 = *(_OWORD *)(a2 + 32);
            v21 = *(_OWORD *)a2;
            v18[6] = *(_QWORD *)(a2 + 48);
            *((_OWORD *)v18 + 1) = v20;
            *((_OWORD *)v18 + 2) = v19;
            *(_OWORD *)v18 = v21;
            v18 += 8;
            --v17;
          }
          while (v17);
        }
        sub_1B1B40D5C((uint64_t)v23);
        sub_1B1B7C5AC((uint64_t)v24);
      }
      sub_1B1B40D5C((uint64_t)v23);
      sub_1B1B7C5AC((uint64_t)v24);
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v24);
    sub_1B1B40274((uint64_t)v23);
  }
  return v7;
}

_OWORD *sub_1B2188088(uint64_t a1, __int128 *a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  _BYTE v19[16];
  char v20[8];

  sub_1B21948C0((uint64_t)a2, (uint64_t)v20);
  sub_1B1A025EC((uint64_t)a2 + 24, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_1B2193D88);
  v6 = ecs_stack_allocator_allocate(a3, 48 * a1, 8);
  v7 = v6;
  if (a1)
  {
    v8 = *a2;
    v9 = a2[2];
    v6[1] = a2[1];
    v6[2] = v9;
    *v6 = v8;
    if (a1 != 1)
    {
      v10 = *a2;
      v11 = a2[2];
      v6[4] = a2[1];
      v6[5] = v11;
      v6[3] = v10;
      if (a1 != 2)
      {
        v12 = *a2;
        v13 = a2[2];
        v6[7] = a2[1];
        v6[8] = v13;
        v6[6] = v12;
        v14 = a1 - 3;
        if (a1 != 3)
        {
          v15 = v6 + 9;
          do
          {
            sub_1B1B40D5C((uint64_t)v19);
            sub_1B1B7C5AC((uint64_t)v20);
            v17 = a2[1];
            v16 = a2[2];
            *v15 = *a2;
            v15[1] = v17;
            v15[2] = v16;
            v15 += 3;
            --v14;
          }
          while (v14);
        }
        sub_1B1B40D5C((uint64_t)v19);
        sub_1B1B7C5AC((uint64_t)v20);
      }
      sub_1B1B40D5C((uint64_t)v19);
      sub_1B1B7C5AC((uint64_t)v20);
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v20);
    sub_1B1B40274((uint64_t)v19);
  }
  return v7;
}

_QWORD *sub_1B21881B8(uint64_t a1, id a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  char v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  id v19;

  v11 = ecs_stack_allocator_allocate(a6, 32 * a1, 8);
  v12 = v11;
  if (a1)
  {
    *v11 = a2;
    v13 = a3 >> 8;
    v14 = a3 & 1;
    *((_BYTE *)v11 + 8) = a3 & 1;
    *((_BYTE *)v11 + 9) = BYTE1(a3);
    v15 = HIWORD(a3) & 1;
    *((_BYTE *)v11 + 10) = v15;
    v11[2] = a4;
    v11[3] = a5;
    if (a1 != 1)
    {
      v11[4] = a2;
      *((_BYTE *)v11 + 40) = v14;
      *((_BYTE *)v11 + 41) = v13;
      *((_BYTE *)v11 + 42) = v15;
      v11[6] = a4;
      v11[7] = a5;
      if (a1 != 2)
      {
        v11[8] = a2;
        *((_BYTE *)v11 + 72) = v14;
        *((_BYTE *)v11 + 73) = v13;
        *((_BYTE *)v11 + 74) = v15;
        v11[10] = a4;
        v11[11] = a5;
        v16 = a1 - 3;
        if (a1 != 3)
        {
          v17 = v11 + 15;
          do
          {
            *(v17 - 3) = a2;
            *((_BYTE *)v17 - 16) = v14;
            *((_BYTE *)v17 - 15) = v13;
            *((_BYTE *)v17 - 14) = v15;
            *(v17 - 1) = a4;
            *v17 = a5;
            swift_bridgeObjectRetain();
            v18 = a2;
            v17 += 4;
            --v16;
          }
          while (v16);
        }
        swift_bridgeObjectRetain();
        a2 = a2;
      }
      swift_bridgeObjectRetain();
      v19 = a2;
    }
  }
  else
  {
    swift_bridgeObjectRelease();

  }
  return v12;
}

_QWORD *sub_1B21882E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v7 = ecs_stack_allocator_allocate(a4, 16 * a1, 8);
  v8 = v7;
  if (a1)
  {
    *v7 = a2;
    v7[1] = a3;
    if (a1 != 1)
    {
      v7[2] = a2;
      v7[3] = a3;
      if (a1 != 2)
      {
        v7[4] = a2;
        v7[5] = a3;
        v9 = a1 - 3;
        if (a1 != 3)
        {
          v10 = v7 + 7;
          do
          {
            *(v10 - 1) = a2;
            *v10 = a3;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v10 += 2;
            --v9;
          }
          while (v9);
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

_QWORD *sub_1B21883B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v7 = ecs_stack_allocator_allocate(a4, 16 * a1, 8);
  v8 = v7;
  if (a1)
  {
    *v7 = a2;
    v7[1] = a3;
    if (a1 != 1)
    {
      v7[2] = a2;
      v7[3] = a3;
      if (a1 != 2)
      {
        v7[4] = a2;
        v7[5] = a3;
        v9 = a1 - 3;
        if (a1 != 3)
        {
          v10 = v7 + 7;
          do
          {
            *(v10 - 1) = a2;
            *v10 = a3;
            swift_bridgeObjectRetain();
            swift_retain();
            v10 += 2;
            --v9;
          }
          while (v9);
        }
        swift_bridgeObjectRetain();
        swift_retain();
      }
      swift_bridgeObjectRetain();
      swift_retain();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v8;
}

_QWORD *sub_1B218848C(uint64_t a1, __int128 *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v19;
  char v20[8];

  sub_1B1A000F0((uint64_t)a2 + 24, (uint64_t)v20, (uint64_t)&unk_1EEF652E0, (uint64_t)&qword_1ED4B7A00, (uint64_t)&protocolRef_MTLBuffer_0, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1E27638);
  sub_1B1A000F0((uint64_t)(a2 + 2), (uint64_t)&v19, (uint64_t)&unk_1ED4BA5F0, (uint64_t)&qword_1ED4B7990, (uint64_t)&protocolRef_MTLTexture_0, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1E27638);
  v6 = ecs_stack_allocator_allocate(a3, 40 * a1, 8);
  v7 = v6;
  if (a1)
  {
    v8 = *a2;
    v9 = a2[1];
    v6[4] = *((_QWORD *)a2 + 4);
    *(_OWORD *)v6 = v8;
    *((_OWORD *)v6 + 1) = v9;
    if (a1 != 1)
    {
      v10 = *a2;
      v11 = a2[1];
      v6[9] = *((_QWORD *)a2 + 4);
      *(_OWORD *)(v6 + 7) = v11;
      *(_OWORD *)(v6 + 5) = v10;
      if (a1 != 2)
      {
        v12 = *a2;
        v13 = a2[1];
        v6[14] = *((_QWORD *)a2 + 4);
        *((_OWORD *)v6 + 5) = v12;
        *((_OWORD *)v6 + 6) = v13;
        v14 = a1 - 3;
        if (a1 != 3)
        {
          v15 = v6 + 15;
          do
          {
            sub_1B1B40D5C((uint64_t)&v19);
            sub_1B1B40D5C((uint64_t)v20);
            v16 = *((_QWORD *)a2 + 4);
            v17 = a2[1];
            *(_OWORD *)v15 = *a2;
            *((_OWORD *)v15 + 1) = v17;
            v15[4] = v16;
            v15 += 5;
            --v14;
          }
          while (v14);
        }
        sub_1B1B40D5C((uint64_t)&v19);
        sub_1B1B40D5C((uint64_t)v20);
      }
      sub_1B1B40D5C((uint64_t)&v19);
      sub_1B1B40D5C((uint64_t)v20);
    }
  }
  else
  {
    sub_1B1B40274((uint64_t)v20);
    sub_1B1B40274((uint64_t)&v19);
  }
  return v7;
}

_QWORD *sub_1B21885F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v11 = ecs_stack_allocator_allocate(a6, 32 * a1, 8);
  v12 = v11;
  if (a1)
  {
    *v11 = a2;
    v11[1] = a3;
    v11[2] = a4;
    v11[3] = a5;
    if (a1 != 1)
    {
      v11[4] = a2;
      v11[5] = a3;
      v11[6] = a4;
      v11[7] = a5;
      if (a1 != 2)
      {
        v11[8] = a2;
        v11[9] = a3;
        v11[10] = a4;
        v11[11] = a5;
        v13 = a1 - 3;
        if (a1 != 3)
        {
          v14 = v11 + 15;
          do
          {
            *(v14 - 3) = a2;
            *(v14 - 2) = a3;
            *(v14 - 1) = a4;
            *v14 = a5;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v14 += 4;
            --v13;
          }
          while (v13);
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v12;
}

uint64_t sub_1B21886EC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  float *v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  float *v19;
  unint64_t v20;
  float v21;
  uint64_t v22;
  float *v23;

  v2 = (uint64_t *)a1[11];
  v3 = a1[13];
  result = sub_1B1A12038((uint64_t)&type metadata for ParticleFluidSolver2DEmitter, (uint64_t)&off_1E63B46F8, v2, a1[12], v3, a1[2]);
  if (v2)
  {
    if (v3)
    {
      v5 = 0;
      v6 = v3 - 1;
      if (v3 == 1)
        goto LABEL_9;
      v7 = !is_mul_ok(v6, 0x1CuLL);
      if (result + 12 + 28 * v6 < result + 12)
        goto LABEL_9;
      if (v7)
        goto LABEL_9;
      v5 = v3 & 0xFFFFFFFFFFFFFFFELL;
      v8 = (float *)(result + 40);
      v9 = v3 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v10 = *v8 * 0.5;
        *(v8 - 7) = *(v8 - 7) * 0.5;
        *v8 = v10;
        v8 += 14;
        v9 -= 2;
      }
      while (v9);
      if (v3 != v5)
      {
LABEL_9:
        v11 = v3 - v5;
        v12 = (float *)(result + 28 * v5 + 12);
        do
        {
          *v12 = *v12 * 0.5;
          v12 += 7;
          --v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v13 = a1[6];
    v14 = a1[7];
    v15 = v14 - v13;
    if (v14 != v13)
    {
      if (v15 < 2)
        goto LABEL_19;
      v16 = v14 + ~v13;
      v17 = 28 * v13;
      v18 = !is_mul_ok(v16, 0x1CuLL);
      if (28 * v13 + result + 12 + 28 * v16 < 28 * v13 + result + 12)
        goto LABEL_19;
      if (v18)
        goto LABEL_19;
      v13 += v15 & 0xFFFFFFFFFFFFFFFELL;
      v19 = (float *)(v17 + result + 40);
      v20 = v15 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v21 = *v19 * 0.5;
        *(v19 - 7) = *(v19 - 7) * 0.5;
        *v19 = v21;
        v19 += 14;
        v20 -= 2;
      }
      while (v20);
      if (v15 != (v15 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_19:
        v22 = v14 - v13;
        v23 = (float *)(result + 28 * v13 + 12);
        do
        {
          *v23 = *v23 * 0.5;
          v23 += 7;
          --v22;
        }
        while (v22);
      }
    }
  }
  return result;
}

uint64_t sub_1B2188898(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  double *v33;
  unint64_t v34;
  double *v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  unint64_t v52;

  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[1];
  v7 = a1[2];
  swift_retain();
  v51 = sub_1B1A12038((uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, v3, v4, v5, v7);
  sub_1B1A10AA4(*(_QWORD *)(v6 + 40), (uint64_t)&type metadata for ForceFieldRuntime, &v52);
  if (v52 == 1)
  {
    *(_QWORD *)(a2 + 72) = &type metadata for ForceFieldRuntime;
    *(_QWORD *)(a2 + 80) = &off_1E638C1A0;
    v8 = sub_1B1A12038((uint64_t)&type metadata for ForceFieldRuntime, (uint64_t)&off_1E638C1A0, v3, v4, v5, v7);
    if (v3)
    {
      if (v5)
      {
        v9 = (uint64_t *)(v51 + 24);
        v10 = (_QWORD *)(v8 + 16);
        do
        {
          v11 = *v9;
          v9 += 18;
          *(v10 - 2) = v11 + 0x76E15D3EFEFDCBBFLL;
          *(v10 - 1) = 0xC5004E441C522FB3 * v11 - 0x3AFFB1BBE3ADD04DLL;
          *v10 = 0x77710069854EE241 - v11;
          v10[1] = 0x39109BB02ACBE635 * v11;
          v10 += 4;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      v22 = a1[6];
      v23 = a1[7] - v22;
      if (v23)
      {
        v24 = (_QWORD *)(v8 + 32 * v22 + 16);
        v25 = (uint64_t *)(v51 + 144 * v22 + 24);
        do
        {
          v26 = *v25;
          v25 += 18;
          *(v24 - 2) = v26 + 0x76E15D3EFEFDCBBFLL;
          *(v24 - 1) = 0xC5004E441C522FB3 * v26 - 0x3AFFB1BBE3ADD04DLL;
          *v24 = 0x77710069854EE241 - v26;
          v24[1] = 0x39109BB02ACBE635 * v26;
          v24 += 4;
          --v23;
        }
        while (v23);
      }
    }
    return swift_release();
  }
  v49 = a2;
  v12 = v5;
  if (!v3)
    v12 = a1[7] - a1[6];
  v52 = 0;
  v13 = v12;
  MEMORY[0x1B5E23FA0](&v52, 8);
  v14 = v52;
  v52 = 0;
  MEMORY[0x1B5E23FA0](&v52, 8);
  v15 = v52;
  v52 = 0;
  MEMORY[0x1B5E23FA0](&v52, 8);
  v16 = v52;
  v52 = 0;
  MEMORY[0x1B5E23FA0](&v52, 8);
  v17 = v52;
  v47 = *(_QWORD **)(v49 + 32);
  v48 = 32 * v13;
  v18 = ecs_stack_allocator_allocate((uint64_t)v47, 32 * v13, 8);
  v19 = v13;
  v20 = (unint64_t)v18;
  if (v19)
  {
    if (v19 >= 0x1C)
    {
      v21 = 0;
      v28 = 4 * (v19 - 1);
      if (&v18[v28] >= v18
        && &v18[v28 + 1] >= v18 + 1
        && &v18[v28 + 2] >= v18 + 2
        && &v18[v28 + 3] >= v18 + 3
        && !((v19 - 1) >> 59))
      {
        v21 = v19 & 0xFFFFFFFFFFFFFFFCLL;
        v29 = vdupq_n_s64(v14);
        v30 = vdupq_n_s64(v15);
        v31 = vdupq_n_s64(v16);
        v32 = vdupq_n_s64(v17);
        v33 = (double *)(v18 + 8);
        v34 = v19 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v35 = v33 - 8;
          vst4q_f64(v35, *(float64x2x4_t *)v29.i8);
          vst4q_f64(v33, *(float64x2x4_t *)v29.i8);
          v33 += 16;
          v34 -= 4;
        }
        while (v34);
        if (v19 == v21)
          goto LABEL_26;
      }
    }
    else
    {
      v21 = 0;
    }
    v36 = v19 - v21;
    v37 = &v18[4 * v21 + 2];
    do
    {
      *(v37 - 2) = v14;
      *(v37 - 1) = v15;
      *v37 = v16;
      v37[1] = v17;
      v37 += 4;
      --v36;
    }
    while (v36);
  }
LABEL_26:
  if (v3)
  {
    if (v5)
    {
      v38 = (uint64_t *)(v51 + 24);
      v39 = v18 + 2;
      v40 = v5;
      do
      {
        v41 = *v38;
        v38 += 18;
        *(v39 - 2) = v41 + 0x76E15D3EFEFDCBBFLL;
        *(v39 - 1) = 0xC5004E441C522FB3 * v41 - 0x3AFFB1BBE3ADD04DLL;
        *v39 = 0x77710069854EE241 - v41;
        v39[1] = 0x39109BB02ACBE635 * v41;
        v39 += 4;
        --v40;
      }
      while (v40);
    }
    sub_1B2182E54(v3, v4, v5, (uint64_t)v18, v19);
  }
  else
  {
    v42 = a1[6];
    v43 = a1[7] - v42;
    if (v43)
    {
      v44 = v18 + 2;
      v45 = (uint64_t *)(v51 + 144 * v42 + 24);
      do
      {
        v46 = *v45;
        v45 += 18;
        *(v44 - 2) = v46 + 0x76E15D3EFEFDCBBFLL;
        *(v44 - 1) = 0xC5004E441C522FB3 * v46 - 0x3AFFB1BBE3ADD04DLL;
        *v44 = 0x77710069854EE241 - v46;
        v44[1] = 0x39109BB02ACBE635 * v46;
        v44 += 4;
        --v43;
      }
      while (v43);
    }
    sub_1B2182FA0(*(_QWORD *)(v6 + 232), *(_QWORD *)(v6 + 240), (uint64_t)v18, v19);
  }
  ecs_stack_allocator_deallocate(v47, v20, v48);
  return swift_release();
}

uint64_t sub_1B2188D30(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t ObjectType;
  uint64_t v47;
  _QWORD *v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v50;
  unint64_t v51;
  char *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  _QWORD *v77;
  uint64_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  void *v88;
  void (*v89)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v90;
  void *v91;
  unint64_t v92;
  char *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  void *v115;
  uint64_t *v116;
  _QWORD *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v153;
  unint64_t v154;
  char *v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  unint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  int *v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  unint64_t v199;
  void *v200;

  v4 = type metadata accessor for ShaderScript(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v170 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B1F358();
  v191 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v190 = (char *)&v170 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1B222820C();
  v188 = *(_QWORD *)(v12 - 8);
  v189 = v12;
  MEMORY[0x1E0C80A78](v12, v13);
  v187 = (char *)&v170 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1B2228110();
  v195 = *(_QWORD *)(v15 - 8);
  v196 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  *(_QWORD *)&v180 = (char *)&v170 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v181 = (char *)&v170 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  *(_QWORD *)&v179 = (char *)&v170 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v182 = (char *)&v170 - v26;
  v28 = (uint64_t *)a1[11];
  v27 = a1[12];
  v29 = a1[13];
  v31 = a1[1];
  v30 = a1[2];
  swift_retain();
  v174 = v27;
  v32 = sub_1B1A12038((uint64_t)&type metadata for ShaderFileAsset, (uint64_t)&off_1E6385810, v28, v27, v29, v30);
  v33 = v4;
  v197 = v32;
  v34 = v200;
  sub_1B1A10AA4(*(_QWORD *)(v31 + 40), v4, &v198);
  if (v198 == 1)
  {
    *(_QWORD *)(a2 + 72) = v4;
    *(_QWORD *)(a2 + 80) = &off_1E63774F8;
    v35 = (_QWORD *)sub_1B19F6460(v31, (uint64_t)a1);
    v36 = v31;
    if (v28)
    {
      if (v29)
      {
        v37 = v29;
        v176 = v36;
        v38 = (_QWORD *)(v197 + 40);
        v193 = *(_QWORD **)(v5 + 72);
        v181 = (char *)0x80000001B2332670;
        *(_QWORD *)&v180 = 0x80000001B23326A0;
        v179 = xmmword_1B226D240;
        v39 = v34;
        v40 = v182;
        do
        {
          v43 = *(v38 - 3);
          v197 = *(v38 - 2);
          v44 = (void *)*(v38 - 1);
          v200 = v39;
          v194 = v38;
          if (v44)
          {
            v45 = *v38;
            ObjectType = swift_getObjectType();
            v47 = v197;
            v48 = v35;
            v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 8);
            swift_bridgeObjectRetain();
            v50 = v44;
            v49(v43, v47, ObjectType, v45);
            v35 = v48;

          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v198 = 0;
            v199 = 0xE000000000000000;
            v185 = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            sub_1B2228890();
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v52 = v198;
            v51 = v199;
            v53 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v192 = v43;
            v186 = v37;
            v54 = qword_1ED4D0FD0;
            v55 = qword_1ED4BF688;
            swift_retain();
            if (v55 != -1)
              swift_once();
            sub_1B1D11FE4(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v56 = swift_allocObject();
            *(_OWORD *)(v56 + 16) = v179;
            *(_QWORD *)(v56 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v56 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v56 + 32) = v52;
            *(_QWORD *)(v56 + 40) = v51;
            swift_bridgeObjectRetain();
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            LODWORD(v183) = v53;
            v57 = v187;
            sub_1B2228200();
            v58 = (uint64_t)v190;
            v59 = v191[12];
            v60 = v51;
            v61 = v191[16];
            v62 = v191[20];
            v184 = v54;
            v63 = &v190[v62];
            (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v190, v57, v189);
            *(_BYTE *)(v58 + v59) = v183;
            *(_QWORD *)(v58 + v61) = 0;
            *(_QWORD *)v63 = v52;
            *((_QWORD *)v63 + 1) = v60;
            swift_bridgeObjectRetain();
            sub_1B2228428();
            swift_release();
            sub_1B1A04628(v58, (uint64_t (*)(_QWORD))sub_1B1B1F358);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            v40 = v182;
            sub_1B2228050();
            v37 = v186;
          }
          swift_bridgeObjectRelease();
          v64 = v200;
          v65 = sub_1B2228710();
          v39 = v64;
          if (v64)
          {

            v39 = 0;
          }
          else
          {
            v41 = v65;
            v42 = v66;
            swift_bridgeObjectRelease();
            *v35 = v41;
            v35[1] = v42;
            sub_1B1C9FD8C();
          }
          (*(void (**)(char *, uint64_t))(v195 + 8))(v40, v196);
          v35 = (_QWORD *)((char *)v193 + (_QWORD)v35);
          v38 = v194 + 6;
          --v37;
        }
        while (v37);
      }
    }
    else
    {
      v108 = a1[6];
      v109 = a1[7];
      v110 = (_QWORD *)(v109 - v108);
      if (v109 != v108)
      {
        v176 = v31;
        v192 = *(_QWORD *)(v5 + 72);
        v116 = (_QWORD *)((char *)v35 + v108 * v192);
        v117 = (_QWORD *)(v197 + 48 * v108 + 40);
        v181 = (char *)0x80000001B23326A0;
        v182 = (char *)0x80000001B2332670;
        v180 = xmmword_1B226D240;
        v118 = v34;
        v119 = v179;
        do
        {
          v193 = v117;
          v194 = v110;
          v120 = *(v117 - 3);
          v197 = *(v117 - 2);
          v121 = (void *)*(v117 - 1);
          if (v121)
          {
            v122 = *v117;
            v123 = swift_getObjectType();
            v124 = v197;
            v125 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 8);
            swift_bridgeObjectRetain();
            v126 = v121;
            v125(v120, v124, v123, v122);

          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v198 = 0;
            v199 = 0xE000000000000000;
            v185 = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            sub_1B2228890();
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v127 = (uint64_t)v198;
            v128 = v199;
            v129 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v186 = v120;
            v200 = v118;
            v130 = qword_1ED4D0FD0;
            v131 = qword_1ED4BF688;
            swift_retain();
            if (v131 != -1)
              swift_once();
            sub_1B1D11FE4(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v132 = swift_allocObject();
            *(_OWORD *)(v132 + 16) = v180;
            *(_QWORD *)(v132 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v132 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v132 + 32) = v127;
            *(_QWORD *)(v132 + 40) = v128;
            swift_bridgeObjectRetain();
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v183 = v127;
            v133 = v187;
            sub_1B2228200();
            v134 = (uint64_t)v190;
            v135 = v191[12];
            v136 = v191[16];
            v137 = v191[20];
            v184 = v130;
            v138 = &v190[v137];
            (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v190, v133, v189);
            *(_BYTE *)(v134 + v135) = v129;
            *(_QWORD *)(v134 + v136) = 0;
            *(_QWORD *)v138 = v183;
            *((_QWORD *)v138 + 1) = v128;
            swift_bridgeObjectRetain();
            sub_1B2228428();
            swift_release();
            sub_1B1A04628(v134, (uint64_t (*)(_QWORD))sub_1B1B1F358);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            v119 = v179;
            sub_1B2228050();
            v118 = v200;
          }
          swift_bridgeObjectRelease();
          v139 = sub_1B2228710();
          if (v118)
          {

            v118 = 0;
          }
          else
          {
            v141 = v139;
            v142 = v140;
            swift_bridgeObjectRelease();
            *v116 = v141;
            v116[1] = v142;
            sub_1B1C9FD8C();
          }
          (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v119, v196);
          v116 = (uint64_t *)((char *)v116 + v192);
          v117 = v193 + 6;
          v110 = (_QWORD *)((char *)v194 - 1);
        }
        while (v194 != (_QWORD *)1);
      }
    }
  }
  else
  {
    v175 = a2;
    v176 = v31;
    v67 = v29;
    v172 = v28;
    if (!v28)
      v67 = a1[7] - a1[6];
    v8[16] = 1;
    v68 = &v8[*(int *)(v4 + 24)];
    v69 = v67;
    v70 = type metadata accessor for ScriptIndex();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v68, 1, 1, v70);
    *(_QWORD *)&v8[*(int *)(v33 + 28)] = &unk_1E63762B8;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0xE000000000000000;
    v71 = *(_QWORD *)(v175 + 32);
    v72 = *(_QWORD *)(v5 + 72);
    v73 = *(unsigned __int8 *)(v5 + 80) + 1;
    v171 = v72 * v69;
    v177 = ecs_stack_allocator_allocate(v71, v72 * v69, v73);
    v173 = v69;
    if (v69)
    {
      v74 = v177;
      v75 = v173;
      do
      {
        sub_1B1792810((uint64_t)v8, (uint64_t)v74, type metadata accessor for ShaderScript);
        v74 = (_QWORD *)((char *)v74 + v72);
        --v75;
      }
      while (v75);
    }
    sub_1B1A04628((uint64_t)v8, type metadata accessor for ShaderScript);
    if (v172)
    {
      v76 = v34;
      v186 = v29;
      if (v29)
      {
        v192 = v72;
        v77 = (_QWORD *)(v197 + 40);
        *(_QWORD *)&v180 = 0x80000001B2332670;
        *(_QWORD *)&v179 = 0x80000001B23326A0;
        v178 = xmmword_1B226D240;
        v78 = v177;
        v79 = v181;
        do
        {
          v193 = v77;
          v194 = (_QWORD *)v29;
          v82 = *(v77 - 3);
          v197 = *(v77 - 2);
          v83 = (void *)*(v77 - 1);
          if (v83)
          {
            v84 = *v77;
            v85 = swift_getObjectType();
            v86 = v197;
            v87 = v78;
            v88 = v76;
            v89 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 8);
            swift_bridgeObjectRetain();
            v90 = v83;
            v89(v82, v86, v85, v84);
            v91 = v88;
            v78 = v87;

          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v198 = 0;
            v199 = 0xE000000000000000;
            v184 = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            sub_1B2228890();
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v93 = v198;
            v92 = v199;
            v94 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v185 = v82;
            v200 = v76;
            v95 = qword_1ED4D0FD0;
            v96 = qword_1ED4BF688;
            swift_retain();
            if (v96 != -1)
              swift_once();
            sub_1B1D11FE4(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v97 = swift_allocObject();
            *(_OWORD *)(v97 + 16) = v178;
            *(_QWORD *)(v97 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v97 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v97 + 32) = v93;
            *(_QWORD *)(v97 + 40) = v92;
            swift_bridgeObjectRetain();
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v98 = v187;
            sub_1B2228200();
            v99 = (uint64_t)v190;
            v100 = v191[12];
            v182 = v93;
            v183 = v95;
            v101 = v92;
            v102 = v191[16];
            v103 = &v190[v191[20]];
            (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v190, v98, v189);
            *(_BYTE *)(v99 + v100) = v94;
            *(_QWORD *)(v99 + v102) = 0;
            *(_QWORD *)v103 = v182;
            *((_QWORD *)v103 + 1) = v101;
            swift_bridgeObjectRetain();
            sub_1B2228428();
            swift_release();
            sub_1B1A04628(v99, (uint64_t (*)(_QWORD))sub_1B1B1F358);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            v79 = v181;
            sub_1B2228050();
            v91 = v200;
          }
          swift_bridgeObjectRelease();
          v104 = sub_1B2228710();
          v76 = v91;
          if (v91)
          {

            v76 = 0;
          }
          else
          {
            v80 = v104;
            v81 = v105;
            swift_bridgeObjectRelease();
            *v78 = v80;
            v78[1] = v81;
            sub_1B1C9FD8C();
          }
          (*(void (**)(char *, uint64_t))(v195 + 8))(v79, v196);
          v78 = (uint64_t *)((char *)v78 + v192);
          v77 = v193 + 6;
          v29 = (uint64_t)v194 - 1;
        }
        while (v194 != (_QWORD *)1);
      }
      v106 = (unint64_t)v177;
      v107 = v175;
      sub_1B21830E4(v172, v174, v186, (uint64_t)v177, v173);
    }
    else
    {
      v112 = a1[6];
      v113 = a1[7];
      v114 = (_QWORD *)(v113 - v112);
      v115 = v34;
      if (v113 != v112)
      {
        v143 = (_QWORD *)(v197 + 48 * v112 + 40);
        v181 = (char *)0x80000001B23326A0;
        v182 = (char *)0x80000001B2332670;
        v179 = xmmword_1B226D240;
        v144 = v177;
        v145 = v180;
        v192 = v72;
        do
        {
          v193 = v143;
          v194 = v114;
          v147 = *(v143 - 3);
          v197 = *(v143 - 2);
          v148 = (void *)*(v143 - 1);
          if (v148)
          {
            v149 = *v143;
            v150 = swift_getObjectType();
            v151 = v197;
            v152 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 8);
            swift_bridgeObjectRetain();
            v153 = v148;
            v152(v147, v151, v150, v149);

          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v198 = 0;
            v199 = 0xE000000000000000;
            v185 = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            sub_1B2228890();
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v155 = v198;
            v154 = v199;
            v156 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v186 = v147;
            v200 = v115;
            v157 = qword_1ED4D0FD0;
            v158 = qword_1ED4BF688;
            swift_retain();
            if (v158 != -1)
              swift_once();
            sub_1B1D11FE4(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v159 = swift_allocObject();
            *(_OWORD *)(v159 + 16) = v179;
            *(_QWORD *)(v159 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v159 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v159 + 32) = v155;
            *(_QWORD *)(v159 + 40) = v154;
            swift_bridgeObjectRetain();
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v160 = v187;
            sub_1B2228200();
            v161 = v191[12];
            v183 = v191[16];
            v184 = v157;
            v162 = v155;
            v163 = v154;
            v164 = (uint64_t)v190;
            v165 = &v190[v191[20]];
            (*(void (**)(char *, char *, uint64_t))(v188 + 32))(v190, v160, v189);
            *(_BYTE *)(v164 + v161) = v156;
            *(_QWORD *)(v164 + v183) = 0;
            *(_QWORD *)v165 = v162;
            *((_QWORD *)v165 + 1) = v163;
            swift_bridgeObjectRetain();
            sub_1B2228428();
            swift_release();
            sub_1B1A04628(v164, (uint64_t (*)(_QWORD))sub_1B1B1F358);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            v145 = v180;
            sub_1B2228050();
            v115 = v200;
          }
          swift_bridgeObjectRelease();
          v166 = sub_1B2228710();
          if (v115)
          {

            v115 = 0;
          }
          else
          {
            v168 = v166;
            v169 = v167;
            swift_bridgeObjectRelease();
            *v144 = v168;
            v144[1] = v169;
            sub_1B1C9FD8C();
          }
          v146 = v192;
          (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v145, v196);
          v144 = (uint64_t *)((char *)v144 + v146);
          v143 = v193 + 6;
          v114 = (_QWORD *)((char *)v194 - 1);
        }
        while (v194 != (_QWORD *)1);
      }
      v106 = (unint64_t)v177;
      v107 = v175;
      sub_1B2183298(*(_QWORD *)(v176 + 232), *(_QWORD *)(v176 + 240), (uint64_t)v177, v173);
    }
    ecs_stack_allocator_deallocate(*(_QWORD **)(v107 + 32), v106, v171);
  }
  return swift_release();
}

uint64_t sub_1B2189FB8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  v9 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for VideoCaptureRuntime, (uint64_t)&off_1E639AD40, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v54);
  if (v54 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1E6390060;
    v10 = sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v5, v4, v6, v8);
    v11 = (_QWORD *)v10;
    if (v5)
    {
      for (; v6; --v6)
      {
        v13 = *v9;
        v9 += 4;
        v12 = v13;
        if (v13)
        {
          v14 = *(_QWORD *)(v12 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture);
          if (v14)
          {
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v11 = v14;
          }
        }
        ++v11;
      }
    }
    else
    {
      v28 = a1[6];
      v29 = a1[7];
      v30 = v29 - v28;
      if (v29 != v28)
      {
        v39 = (_QWORD *)(v10 + 8 * v28);
        v40 = &v9[4 * v28];
        do
        {
          v42 = *v40;
          v40 += 4;
          v41 = v42;
          if (v42)
          {
            v43 = *(_QWORD *)(v41 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture);
            if (v43)
            {
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              *v39 = v43;
            }
          }
          ++v39;
          --v30;
        }
        while (v30);
      }
    }
    return swift_release();
  }
  else
  {
    v53 = a2;
    if (v5)
    {
      v49 = v5;
      v51 = a2[4];
      v15 = sub_1B2197120(v6, 0, v51);
      v16 = (unint64_t)v15;
      v50 = v17;
      v19 = v18;
      v20 = v4;
      if (v6)
      {
        v21 = v15;
        v22 = v6;
        do
        {
          v24 = *v9;
          v9 += 4;
          v23 = v24;
          if (v24)
          {
            v25 = *(_QWORD *)(v23 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture);
            if (v25)
            {
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              v20 = v4;
              *v21 = v25;
            }
          }
          ++v21;
          --v22;
        }
        while (v22);
      }
      sub_1B218343C(v49, v20, v6, v16, v19);
      v27 = v50;
      v26 = (_QWORD *)v51;
    }
    else
    {
      v31 = a1[6];
      v32 = a1[7];
      v52 = v53[4];
      v33 = sub_1B2197120(v32 - v31, 0, v52);
      v16 = (unint64_t)v33;
      v27 = v34;
      v36 = v35;
      v37 = v32 - v31;
      if (v37)
      {
        v44 = &v9[4 * v31];
        v45 = v33;
        do
        {
          v47 = *v44;
          v44 += 4;
          v46 = v47;
          if (v47)
          {
            v48 = *(_QWORD *)(v46 + OBJC_IVAR____TtC3VFX19VideoCaptureSession_outputTexture);
            if (v48)
            {
              swift_unknownObjectRetain();
              swift_unknownObjectRelease();
              *v45 = v48;
            }
          }
          ++v45;
          --v37;
        }
        while (v37);
      }
      sub_1B2183588(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v16, v36);
      v26 = (_QWORD *)v52;
    }
    ecs_stack_allocator_deallocate(v26, v16, 8 * v27);
    return swift_release();
  }
}

uint64_t sub_1B218A2D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  unsigned __int8 v77;
  _OWORD __src[41];
  _QWORD __dst[83];
  uint64_t v80;

  v4 = (uint64_t *)a1[11];
  v3 = a1[12];
  v5 = a1[13];
  v7 = a1[1];
  v6 = a1[2];
  swift_retain();
  v8 = (_BYTE *)sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v4, v3, v5, v6);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for EmitterRuntime, __dst);
  v80 = v7;
  if (LOBYTE(__dst[0]) != 1)
  {
    v65 = v3;
    v72 = v5;
    if (!v4)
      v5 = a1[7] - a1[6];
    v70 = v5;
    if (qword_1ED4B7D30 != -1)
      swift_once();
    v75 = v4;
    v68 = qword_1ED4D09E0;
    __dst[0] = 0;
    MEMORY[0x1B5E23FA0](__dst, 8);
    v20 = __dst[0];
    __dst[0] = 0;
    MEMORY[0x1B5E23FA0](__dst, 8);
    v21 = __dst[0];
    __dst[0] = 0;
    MEMORY[0x1B5E23FA0](__dst, 8);
    v22 = __dst[0];
    __dst[0] = 0;
    MEMORY[0x1B5E23FA0](__dst, 8);
    v23 = __dst[0];
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    v24 = qword_1ED4D09F8;
    type metadata accessor for EmitterRuntime.Storage();
    v25 = swift_allocObject();
    swift_retain();
    vfx_uniform_grid_create();
    *(_QWORD *)(v25 + 16) = v26;
    *(_QWORD *)&__src[0] = v68;
    *((_QWORD *)&__src[0] + 1) = v20;
    *(_QWORD *)&__src[1] = v21;
    *((_QWORD *)&__src[1] + 1) = v22;
    __src[2] = v23;
    LOBYTE(__src[3]) = 1;
    *(_WORD *)((char *)&__src[3] + 1) = 0;
    *((_QWORD *)&__src[3] + 1) = v24;
    LODWORD(__src[4]) = 0;
    BYTE4(__src[4]) = 2;
    *((_QWORD *)&__src[4] + 1) = 0;
    LOBYTE(__src[5]) = 2;
    *((_QWORD *)&__src[5] + 1) = 0;
    LODWORD(__src[6]) = 0;
    __src[7] = 0uLL;
    *((_QWORD *)&__src[6] + 1) = 0;
    LOBYTE(__src[8]) = 1;
    *(_WORD *)((char *)&__src[8] + 1) = 1;
    __src[9] = 0uLL;
    *((_QWORD *)&__src[8] + 1) = 0;
    LOBYTE(__src[10]) = 1;
    *((_QWORD *)&__src[10] + 1) = 0;
    *(_QWORD *)&__src[11] = MEMORY[0x1E0DEE9E0];
    BYTE8(__src[11]) = 0;
    HIDWORD(__src[13]) = 0;
    LODWORD(__src[14]) = 0;
    *((_QWORD *)&__src[14] + 1) = 0;
    memset(&__src[12], 0, 25);
    LOBYTE(__src[15]) = 1;
    *((_QWORD *)&__src[15] + 1) = MEMORY[0x1E0DEE9D8];
    __src[16] = MEMORY[0x1E0DEE9D8];
    LOBYTE(__src[17]) = 0;
    *(_OWORD *)((char *)&__src[26] + 8) = 0u;
    *(_OWORD *)((char *)&__src[27] + 8) = 0u;
    *(_OWORD *)((char *)&__src[24] + 8) = 0u;
    *(_OWORD *)((char *)&__src[25] + 8) = 0u;
    *(_OWORD *)((char *)&__src[22] + 8) = 0u;
    *(_OWORD *)((char *)&__src[23] + 8) = 0u;
    *(_OWORD *)((char *)&__src[20] + 8) = 0u;
    *(_OWORD *)((char *)&__src[21] + 8) = 0u;
    *(_OWORD *)((char *)&__src[18] + 8) = 0u;
    *(_OWORD *)((char *)&__src[19] + 8) = 0u;
    *(_OWORD *)((char *)&__src[17] + 8) = 0u;
    DWORD2(__src[28]) = 0;
    memset(&__src[29], 0, 32);
    *(_QWORD *)&__src[31] = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&__src[31] + 1) = v25;
    memset(&__src[32], 0, 144);
    memcpy(__dst, __src, 0x290uLL);
    v69 = (_QWORD *)a2[4];
    v71 = sub_1B21990A8(v70, __dst, (uint64_t)v69);
    v67 = v27;
    v29 = v28;
    sub_1B1CDB618((uint64_t)__src);
    v66 = v29;
    if (v75)
    {
      if (v72)
      {
        v30 = v75;
        v31 = *a1;
        v32 = (uint64_t)v71;
        v33 = v72;
        do
        {
          v35 = *v30++;
          v34 = v35;
          v36 = swift_retain();
          if ((*(_BYTE *)(v7 + 184) & 1) != 0)
            goto LABEL_33;
          v37 = *(unsigned int *)(*(_QWORD *)(v7 + 168) + 4 * v34);
          v38 = *(unsigned int *)(*(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v37 + 8);
          swift_release();
          v39 = *(unsigned int *)(v7 + 28);
          v40 = *(_BYTE *)(v80 + 32);
          swift_retain();
          v77 = v40;
          v7 = v80;
          sub_1B1CCA31C(v37 | (v38 << 32), v39 | ((unint64_t)v77 << 32), v8, v32, v31, 1);
          swift_release();
          v32 += 656;
          v8 += 88;
        }
        while (--v33);
      }
      v41 = (unint64_t)v71;
      sub_1B2184408(v75, v65, v72, (uint64_t)v71, v66);
    }
    else
    {
      v43 = a1[6];
      v44 = a1[7];
      if (v43 != v44)
      {
        v45 = *a1;
        v46 = &v8[88 * v43];
        v47 = (uint64_t)v71;
        do
        {
          v48 = swift_retain();
          if ((*(_BYTE *)(v7 + 184) & 1) != 0)
            goto LABEL_33;
          v49 = *(unsigned int *)(*(_QWORD *)(v7 + 168) + 4 * v43);
          v50 = v43 + 1;
          v51 = *(unsigned int *)(*(_QWORD *)(v48 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v49 + 8);
          swift_release();
          v52 = *(unsigned int *)(v80 + 28);
          v53 = *(_BYTE *)(v80 + 32);
          v54 = v49 | (v51 << 32);
          v7 = v80;
          swift_retain();
          sub_1B1CCA31C(v54, v52 | ((unint64_t)v53 << 32), v46, v47, v45, 1);
          swift_release();
          v47 += 656;
          v46 += 88;
          v43 = v50;
        }
        while (v44 != v50);
      }
      v41 = (unint64_t)v71;
      sub_1B2184558(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), (uint64_t)v71, v66);
    }
    ecs_stack_allocator_deallocate(v69, v41, 656 * v67);
    return swift_release();
  }
  a2[9] = &type metadata for EmitterRuntime;
  a2[10] = &off_1E637F3F8;
  v9 = sub_1B1A12038((uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1E637F3F8, v4, v3, v5, v6);
  v10 = v9;
  if (!v4)
  {
    v42 = a1[6];
    v76 = a1[7];
    if (v42 != v76)
    {
      v56 = *a1;
      v57 = v9 + 656 * v42;
      v58 = &v8[88 * v42];
      v59 = v80;
      while (1)
      {
        v60 = swift_retain();
        if ((*(_BYTE *)(v59 + 184) & 1) != 0)
          break;
        v61 = *(unsigned int *)(*(_QWORD *)(v59 + 168) + 4 * v42);
        v62 = *(unsigned int *)(*(_QWORD *)(v60 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v61 + 8);
        swift_release();
        v63 = *(unsigned int *)(v59 + 28);
        v64 = *(_BYTE *)(v59 + 32);
        swift_retain();
        LOBYTE(__dst[0]) = v64;
        sub_1B1CCA31C(v61 | (v62 << 32), v63 | ((unint64_t)v64 << 32), v58, v57, v56, 1);
        swift_release();
        v57 += 656;
        v58 += 88;
        if (v76 == ++v42)
          return swift_release();
      }
      goto LABEL_33;
    }
    return swift_release();
  }
  v11 = v5;
  if (!v5)
    return swift_release();
  v74 = *a1;
  v12 = v80;
  while (1)
  {
    v14 = *v4++;
    v13 = v14;
    v15 = swift_retain();
    if ((*(_BYTE *)(v12 + 184) & 1) != 0)
      break;
    v16 = *(unsigned int *)(*(_QWORD *)(v12 + 168) + 4 * v13);
    v17 = *(unsigned int *)(*(_QWORD *)(v15 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v16 + 8);
    swift_release();
    v18 = *(unsigned int *)(v12 + 28);
    v19 = *(_BYTE *)(v12 + 32);
    swift_retain();
    LOBYTE(__dst[0]) = v19;
    sub_1B1CCA31C(v16 | (v17 << 32), v18 | ((unint64_t)v19 << 32), v8, v10, v74, 1);
    swift_release();
    v10 += 656;
    v8 += 88;
    if (!--v11)
      return swift_release();
  }
LABEL_33:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B218A954(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  _OWORD *v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t v42;
  int32x4_t v43;
  float *v44;
  unint64_t v45;
  float *v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float *v52;
  unint64_t v53;
  float *v54;
  unint64_t v55;
  _DWORD *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float *v62;
  unint64_t v63;
  float *v64;
  uint64_t v65;
  _DWORD *v66;
  int32x4_t v68;
  int32x4_t v69;
  float *v70;
  unint64_t v71;
  float *v72;
  _QWORD *v73;
  unint64_t v74;
  char v75;

  v3 = a3;
  v74 = HIDWORD(a3);
  v7 = (uint64_t *)a1[11];
  v6 = a1[12];
  v8 = a1[13];
  v9 = a1[1];
  v10 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v7, v6, v8, v10);
  sub_1B1A10AA4(*(_QWORD *)(v9 + 40), (uint64_t)&type metadata for Parent, &v75);
  if (v75 != 1)
  {
    v14 = v8;
    if (!v7)
      v14 = a1[7] - a1[6];
    v73 = (_QWORD *)a2[4];
    v15 = ecs_stack_allocator_allocate((uint64_t)v73, 8 * v14, 4);
    v16 = (unint64_t)v15;
    if (v14)
    {
      if (v14 < 0x18)
      {
        v17 = 0;
LABEL_23:
        v27 = v14 - v17;
        v28 = &v15[v17];
        do
        {
          *v28++ = 0xFFFFFFFFLL;
          --v27;
        }
        while (v27);
        goto LABEL_25;
      }
      v17 = 0;
      v22 = v14 - 1;
      if (&v15[v22] < v15)
        goto LABEL_23;
      if ((char *)&v15[v22] + 4 < (char *)v15 + 4 || (v14 - 1) >> 61 != 0)
        goto LABEL_23;
      v17 = v14 & 0xFFFFFFFFFFFFFFF8;
      v24 = v15 + 4;
      *(_QWORD *)&v25 = 0xFFFFFFFFLL;
      *((_QWORD *)&v25 + 1) = 0xFFFFFFFFLL;
      v26 = v14 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        *(v24 - 2) = v25;
        *(v24 - 1) = v25;
        *v24 = v25;
        v24[1] = v25;
        v24 += 4;
        v26 -= 8;
      }
      while (v26);
      if (v14 != v17)
        goto LABEL_23;
    }
LABEL_25:
    if (v7)
    {
      if (v8)
      {
        if (v8 >= 0x18)
        {
          v29 = 0;
          v49 = v8 - 1;
          if (&v15[v49] >= v15 && (char *)&v15[v49] + 4 >= (char *)v15 + 4 && !((v8 - 1) >> 61))
          {
            v29 = v8 & 0xFFFFFFFFFFFFFFF8;
            v50 = vdupq_n_s32(v3);
            v51 = vdupq_n_s32(v74);
            v52 = (float *)(v15 + 4);
            v53 = v8 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v54 = v52 - 8;
              vst2q_f32(v54, *(float32x4x2_t *)v50.i8);
              vst2q_f32(v52, *(float32x4x2_t *)v50.i8);
              v52 += 16;
              v53 -= 8;
            }
            while (v53);
            if (v8 == v29)
              goto LABEL_62;
          }
        }
        else
        {
          v29 = 0;
        }
        v55 = v8 - v29;
        v56 = (_DWORD *)&v15[v29] + 1;
        do
        {
          *(v56 - 1) = v3;
          *v56 = v74;
          v56 += 2;
          --v55;
        }
        while (v55);
      }
LABEL_62:
      sub_1B2184930(v7, v6, v8, (uint64_t)v15, v14);
      goto LABEL_63;
    }
    v30 = a1[6];
    v31 = a1[7];
    v32 = v31 - v30;
    if (v31 != v30)
    {
      if (v32 >= 0x18
        && ((v33 = v31 + ~v30, &v15[v33] >= v15) ? (v34 = (char *)&v15[v33] + 4 >= (char *)v15 + 4) : (v34 = 0),
            (v35 = v33 >> 61, v34) ? (v36 = v35 == 0) : (v36 = 0),
            v36))
      {
        v37 = v32 & 0xFFFFFFFFFFFFFFF8;
        v30 += v32 & 0xFFFFFFFFFFFFFFF8;
        v68 = vdupq_n_s32(v3);
        v69 = vdupq_n_s32(v74);
        v70 = (float *)(v15 + 4);
        v71 = v32 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v72 = v70 - 8;
          vst2q_f32(v72, *(float32x4x2_t *)v68.i8);
          vst2q_f32(v70, *(float32x4x2_t *)v68.i8);
          v70 += 16;
          v71 -= 8;
        }
        while (v71);
        if (v32 == v37)
          goto LABEL_41;
      }
      else
      {
        v37 = 0;
      }
      v38 = (_DWORD *)&v15[v37] + 1;
      v39 = v31 - v30;
      do
      {
        *(v38 - 1) = v3;
        *v38 = v74;
        v38 += 2;
        --v39;
      }
      while (v39);
    }
LABEL_41:
    sub_1B2184ADC(*(_QWORD *)(v9 + 232), *(_QWORD *)(v9 + 240), (uint64_t)v15, v14);
LABEL_63:
    ecs_stack_allocator_deallocate(v73, v16, 8 * v14);
    return swift_release();
  }
  a2[9] = &type metadata for Parent;
  a2[10] = &off_1E63BB8E8;
  v11 = sub_1B1A12038((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v7, v6, v8, v10);
  if (!v7)
  {
    v18 = a1[6];
    v19 = a1[7];
    v20 = v19 - v18;
    if (v19 == v18)
      return swift_release();
    if (v20 >= 0x20)
    {
      v57 = v19 + ~v18;
      v58 = 8 * v18;
      v59 = v11 + 8 * v18;
      v21 = v74;
      if (v59 + 8 * v57 >= v59 && v59 + 4 + 8 * v57 >= v59 + 4 && !(v57 >> 61))
      {
        v60 = vdupq_n_s32(v3);
        v18 += v20 & 0xFFFFFFFFFFFFFFF8;
        v61 = vdupq_n_s32(v74);
        v62 = (float *)(v58 + v11 + 32);
        v63 = v20 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v64 = v62 - 8;
          vst2q_f32(v64, *(float32x4x2_t *)v60.i8);
          vst2q_f32(v62, *(float32x4x2_t *)v60.i8);
          v62 += 16;
          v63 -= 8;
        }
        while (v63);
        if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8))
          return swift_release();
      }
    }
    else
    {
      v21 = v74;
    }
    v65 = v19 - v18;
    v66 = (_DWORD *)(v11 + 8 * v18 + 4);
    do
    {
      *(v66 - 1) = v3;
      *v66 = v21;
      v66 += 2;
      --v65;
    }
    while (v65);
    return swift_release();
  }
  if (!v8)
    return swift_release();
  if (v8 < 0x18)
  {
    v12 = 0;
    v13 = v74;
LABEL_51:
    v47 = v8 - v12;
    v48 = (_DWORD *)(v11 + 8 * v12 + 4);
    do
    {
      *(v48 - 1) = v3;
      *v48 = v13;
      v48 += 2;
      --v47;
    }
    while (v47);
    return swift_release();
  }
  v12 = 0;
  v40 = 8 * (v8 - 1);
  v13 = v74;
  if (v11 + v40 < v11)
    goto LABEL_51;
  if (v11 + 4 + v40 < v11 + 4 || (v8 - 1) >> 61 != 0)
    goto LABEL_51;
  v12 = v8 & 0xFFFFFFFFFFFFFFF8;
  v42 = vdupq_n_s32(v3);
  v43 = vdupq_n_s32(v74);
  v44 = (float *)(v11 + 32);
  v45 = v8 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v46 = v44 - 8;
    vst2q_f32(v46, *(float32x4x2_t *)v42.i8);
    vst2q_f32(v44, *(float32x4x2_t *)v42.i8);
    v44 += 16;
    v45 -= 8;
  }
  while (v45);
  if (v8 != v12)
    goto LABEL_51;
  return swift_release();
}

uint64_t sub_1B218ADEC(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  __int16 v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  int v106;
  _QWORD v107[3];
  char v108;
  uint64_t v109;
  __int16 v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  uint64_t v117;

  v7 = (uint64_t *)a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[1];
  v11 = a1[2];
  swift_retain();
  v12 = (int *)sub_1B1A12038((uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1E6386C78, v7, v8, v9, v11);
  sub_1B1A10AA4(*(_QWORD *)(v10 + 40), (uint64_t)&type metadata for TextureCPURuntime, v107);
  if (LOBYTE(v107[0]) == 1)
  {
    a2[9] = &type metadata for TextureCPURuntime;
    a2[10] = &off_1E638FF20;
    v13 = sub_1B1A12038((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1E638FF20, v7, v8, v9, v11);
    if (v7)
    {
      if (v9)
      {
        v14 = *a4;
        v91 = *((_BYTE *)a4 + 9);
        v95 = *((_BYTE *)a4 + 8);
        v87 = *((_BYTE *)a4 + 10);
        v79 = a4[4];
        v83 = a4[2];
        v15 = a4[7];
        v71 = a4[6];
        v75 = a4[5];
        v16 = a4[8];
        v17 = v13 + 56;
        v18 = *((_DWORD *)a4 + 18);
        do
        {
          v19 = *v12++;
          v20 = *a3;
          v21 = a3[1] + (v19 << 11);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(_QWORD *)(v17 - 56) = v20;
          *(_QWORD *)(v17 - 48) = v21;
          *(_QWORD *)(v17 - 40) = 2048;
          *(_QWORD *)(v17 - 24) = v14;
          *(_BYTE *)(v17 - 16) = v95;
          *(_BYTE *)(v17 - 15) = v91;
          *(_BYTE *)(v17 - 14) = v87;
          *(_QWORD *)(v17 - 8) = v83;
          *(_QWORD *)v17 = 0;
          *(_QWORD *)(v17 + 16) = v75;
          *(_QWORD *)(v17 + 24) = v71;
          *(_QWORD *)(v17 + 32) = v15;
          *(_QWORD *)(v17 + 40) = v16;
          *(_DWORD *)(v17 + 48) = v18;
          *(_QWORD *)(v17 + 8) = v79;
          v17 += 120;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v37 = a1[6];
      v38 = a1[7];
      v39 = v38 - v37;
      if (v38 != v37)
      {
        v53 = *a4;
        v94 = *((_BYTE *)a4 + 9);
        v98 = *((_BYTE *)a4 + 8);
        v90 = *((_BYTE *)a4 + 10);
        v82 = a4[4];
        v86 = a4[2];
        v54 = a4[7];
        v74 = a4[6];
        v78 = a4[5];
        v55 = a4[8];
        v56 = *((_DWORD *)a4 + 18);
        v57 = &v12[v37];
        v58 = v13 + 120 * v37 + 56;
        do
        {
          v59 = *v57++;
          v60 = *a3;
          v61 = a3[1] + (v59 << 11);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(_QWORD *)(v58 - 56) = v60;
          *(_QWORD *)(v58 - 48) = v61;
          *(_QWORD *)(v58 - 40) = 2048;
          *(_QWORD *)(v58 - 24) = v53;
          *(_BYTE *)(v58 - 16) = v98;
          *(_BYTE *)(v58 - 15) = v94;
          *(_BYTE *)(v58 - 14) = v90;
          *(_QWORD *)(v58 - 8) = v86;
          *(_QWORD *)v58 = 0;
          *(_QWORD *)(v58 + 16) = v78;
          *(_QWORD *)(v58 + 24) = v74;
          *(_QWORD *)(v58 + 32) = v54;
          *(_QWORD *)(v58 + 40) = v55;
          *(_DWORD *)(v58 + 48) = v56;
          *(_QWORD *)(v58 + 8) = v82;
          v58 += 120;
          --v39;
        }
        while (v39);
      }
    }
    return swift_release();
  }
  else
  {
    v63 = v8;
    v22 = v9;
    v23 = v7;
    if (!v7)
      v22 = a1[7] - a1[6];
    RGTextureDescriptor.init()((uint64_t)&v99);
    memset(v107, 0, sizeof(v107));
    v108 = 0;
    v109 = v99;
    v110 = v100;
    v111 = v101;
    v112 = v102;
    v113 = v103;
    v114 = v104;
    v115 = v105;
    v116 = v106;
    v117 = MEMORY[0x1E0DEE9D8];
    v24 = a2[4];
    v25 = sub_1B2199950(v22, (uint64_t)v107, v24);
    v64 = v27;
    v65 = v26;
    swift_bridgeObjectRelease();
    v68 = v10;
    v66 = (_QWORD *)v24;
    v67 = (uint64_t)v25;
    if (v23)
    {
      v62 = v23;
      if (v9)
      {
        v28 = *a4;
        v92 = *((_BYTE *)a4 + 9);
        v96 = *((_BYTE *)a4 + 8);
        v88 = *((_BYTE *)a4 + 10);
        v80 = a4[4];
        v84 = a4[2];
        v72 = a4[6];
        v76 = a4[5];
        v29 = a4[8];
        v70 = a4[7];
        v30 = v25 + 7;
        v31 = v9;
        v32 = *((_DWORD *)a4 + 18);
        do
        {
          v33 = *v12++;
          v34 = *a3;
          v35 = a3[1] + (v33 << 11);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(v30 - 7) = v34;
          *(v30 - 6) = v35;
          *(v30 - 5) = 2048;
          *(v30 - 3) = v28;
          *((_BYTE *)v30 - 16) = v96;
          *((_BYTE *)v30 - 15) = v92;
          *((_BYTE *)v30 - 14) = v88;
          *(v30 - 1) = v84;
          *v30 = 0;
          v30[2] = v76;
          v30[3] = v72;
          v30[4] = v70;
          v30[5] = v29;
          *((_DWORD *)v30 + 12) = v32;
          v30[1] = v80;
          v30 += 15;
          --v31;
        }
        while (v31);
      }
      v36 = v67;
      sub_1B2184C70(v62, v63, v9, v67, v64);
    }
    else
    {
      v40 = a1[6];
      v41 = a1[7];
      v42 = v41 - v40;
      if (v41 != v40)
      {
        v43 = *a4;
        v93 = *((_BYTE *)a4 + 9);
        v97 = *((_BYTE *)a4 + 8);
        v89 = *((_BYTE *)a4 + 10);
        v81 = a4[4];
        v85 = a4[2];
        v44 = a4[7];
        v73 = a4[6];
        v77 = a4[5];
        v45 = a4[8];
        v46 = &v12[v40];
        v47 = v25 + 7;
        v48 = *((_DWORD *)a4 + 18);
        do
        {
          v49 = *v46++;
          v50 = *a3;
          v51 = a3[1] + (v49 << 11);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(v47 - 7) = v50;
          *(v47 - 6) = v51;
          *(v47 - 5) = 2048;
          *(v47 - 3) = v43;
          *((_BYTE *)v47 - 16) = v97;
          *((_BYTE *)v47 - 15) = v93;
          *((_BYTE *)v47 - 14) = v89;
          *(v47 - 1) = v85;
          *v47 = 0;
          v47[2] = v77;
          v47[3] = v73;
          v47[4] = v44;
          v47[5] = v45;
          *((_DWORD *)v47 + 12) = v48;
          v47[1] = v81;
          v47 += 15;
          --v42;
        }
        while (v42);
      }
      v36 = v67;
      sub_1B2184DC0(*(_QWORD *)(v68 + 232), *(_QWORD *)(v68 + 240), v67, v64);
    }
    ecs_stack_allocator_deallocate(v66, v36, 120 * v65);
    return swift_release();
  }
}

uint64_t sub_1B218B334(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int32x4_t *v32;
  int64x2_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int32x4_t *v48;
  int64x2_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  _DWORD *v53;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int32x4_t *v59;
  int64x2_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  _DWORD *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int32x4_t *v69;
  int64x2_t v70;
  unint64_t v71;
  int v72;
  _DWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  char v77;

  v6 = (uint64_t *)a1[11];
  v5 = a1[12];
  v7 = a1[13];
  v8 = a1[1];
  v9 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for ColorRampComponent, (uint64_t)&off_1E6390FE0, v6, v5, v7, v9);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for ColorRampRuntime, &v77);
  if (v77 == 1)
  {
    a2[9] = &type metadata for ColorRampRuntime;
    a2[10] = &off_1E6386C78;
    v10 = sub_1B1A12038((uint64_t)&type metadata for ColorRampRuntime, (uint64_t)&off_1E6386C78, v6, v5, v7, v9);
    if (!v6)
    {
      v21 = a1[6];
      v20 = a1[7];
      v22 = v20 - v21;
      if (v20 != v21)
      {
        v23 = a1[3];
        v24 = *a3;
        v25 = a1[6];
        if (v22 < 8)
          goto LABEL_19;
        v26 = v23 - v21 + v24;
        v27 = vdupq_n_s64(v21);
        v25 = v21 + (v22 & 0xFFFFFFFFFFFFFFF8);
        v28 = vaddq_s64(v27, (int64x2_t)xmmword_1B2294DB0);
        v29 = vaddq_s64(v27, (int64x2_t)xmmword_1B2244C80);
        v30 = vdupq_n_s64(v26);
        v31 = vdupq_n_s64(v26 + 4);
        v32 = (int32x4_t *)(v10 + 4 * v21 + 16);
        v33 = vdupq_n_s64(8uLL);
        v34 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v32[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v30, v29), (int32x4_t)vaddq_s64(v30, v28));
          *v32 = vuzp1q_s32((int32x4_t)vaddq_s64(v31, v29), (int32x4_t)vaddq_s64(v31, v28));
          v28 = vaddq_s64(v28, v33);
          v29 = vaddq_s64(v29, v33);
          v32 += 2;
          v34 -= 8;
        }
        while (v34);
        if (v22 != (v22 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_19:
          v35 = v25 + v23 + v24 - v21;
          v36 = v20 - v25;
          v37 = (_DWORD *)(v10 + 4 * v25);
          do
          {
            *v37++ = v35++;
            --v36;
          }
          while (v36);
        }
      }
      return swift_release();
    }
    if (v7)
    {
      v11 = a1[3];
      v12 = *a3;
      if (v7 >= 8)
      {
        v13 = v7 & 0xFFFFFFFFFFFFFFF8;
        v44 = vdupq_n_s64(v12 + v11);
        v45 = vdupq_n_s64(v12 + v11 + 4);
        v46 = (int64x2_t)xmmword_1B2294DB0;
        v47 = (int64x2_t)xmmword_1B2244C80;
        v48 = (int32x4_t *)(v10 + 16);
        v49 = vdupq_n_s64(8uLL);
        v50 = v7 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v48[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v44, v47), (int32x4_t)vaddq_s64(v44, v46));
          *v48 = vuzp1q_s32((int32x4_t)vaddq_s64(v45, v47), (int32x4_t)vaddq_s64(v45, v46));
          v46 = vaddq_s64(v46, v49);
          v47 = vaddq_s64(v47, v49);
          v48 += 2;
          v50 -= 8;
        }
        while (v50);
        if (v7 == v13)
          return swift_release();
      }
      else
      {
        v13 = 0;
      }
      v51 = v13 + v11 + v12;
      v52 = v7 - v13;
      v53 = (_DWORD *)(v10 + 4 * v13);
      do
      {
        *v53++ = v51++;
        --v52;
      }
      while (v52);
    }
    return swift_release();
  }
  v14 = v7;
  if (!v6)
    v7 = a1[7] - a1[6];
  v75 = (_QWORD *)a2[4];
  v15 = ecs_stack_allocator_allocate((uint64_t)v75, 4 * v7, 4);
  v16 = (unint64_t)v15;
  if (v7)
    memset(v15, 255, 4 * v7);
  if (!v6)
  {
    v38 = a1[6];
    v39 = a1[7];
    v40 = v39 - v38;
    if (v39 != v38)
    {
      v41 = a1[3];
      v42 = *a3;
      if (v40 >= 8)
      {
        v43 = v40 & 0xFFFFFFFFFFFFFFF8;
        v38 += v40 & 0xFFFFFFFFFFFFFFF8;
        v65 = vdupq_n_s64(v42 + v41);
        v66 = vdupq_n_s64(v42 + v41 + 4);
        v67 = (int64x2_t)xmmword_1B2294DB0;
        v68 = (int64x2_t)xmmword_1B2244C80;
        v69 = (int32x4_t *)(v16 + 16);
        v70 = vdupq_n_s64(8uLL);
        v71 = v40 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v69[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v65, v68), (int32x4_t)vaddq_s64(v65, v67));
          *v69 = vuzp1q_s32((int32x4_t)vaddq_s64(v66, v68), (int32x4_t)vaddq_s64(v66, v67));
          v67 = vaddq_s64(v67, v70);
          v68 = vaddq_s64(v68, v70);
          v69 += 2;
          v71 -= 8;
        }
        while (v71);
        if (v40 == v43)
          goto LABEL_42;
      }
      else
      {
        v43 = 0;
      }
      v72 = v43 + v41 + v42;
      v73 = (_DWORD *)(v16 + 4 * v43);
      v74 = v39 - v38;
      do
      {
        *v73++ = v72++;
        --v74;
      }
      while (v74);
    }
LABEL_42:
    sub_1B2185054(*(_QWORD *)(v8 + 232), *(_QWORD *)(v8 + 240), v16, v7);
    goto LABEL_43;
  }
  if (v14)
  {
    v17 = a1[3];
    v18 = *a3;
    if (v14 >= 8)
    {
      v19 = v14 & 0xFFFFFFFFFFFFFFF8;
      v55 = vdupq_n_s64(v18 + v17);
      v56 = vdupq_n_s64(v18 + v17 + 4);
      v57 = (int64x2_t)xmmword_1B2294DB0;
      v58 = (int64x2_t)xmmword_1B2244C80;
      v59 = (int32x4_t *)(v16 + 16);
      v60 = vdupq_n_s64(8uLL);
      v61 = v14 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v59[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v55, v58), (int32x4_t)vaddq_s64(v55, v57));
        *v59 = vuzp1q_s32((int32x4_t)vaddq_s64(v56, v58), (int32x4_t)vaddq_s64(v56, v57));
        v57 = vaddq_s64(v57, v60);
        v58 = vaddq_s64(v58, v60);
        v59 += 2;
        v61 -= 8;
      }
      while (v61);
      if (v14 == v19)
        goto LABEL_36;
    }
    else
    {
      v19 = 0;
    }
    v62 = v19 + v17 + v18;
    v63 = v14 - v19;
    v64 = (_DWORD *)(v16 + 4 * v19);
    do
    {
      *v64++ = v62++;
      --v63;
    }
    while (v63);
  }
LABEL_36:
  sub_1B2184F08(v6, v5, v14, v16, v7);
LABEL_43:
  ecs_stack_allocator_deallocate(v75, v16, 4 * v7);
  return swift_release();
}

uint64_t sub_1B218B7A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;

  v6 = (uint64_t *)a1[11];
  v5 = a1[12];
  v7 = a1[13];
  v8 = a1[1];
  v9 = a1[2];
  swift_retain();
  v10 = sub_1B1A12038((uint64_t)&type metadata for REMeshAssetPointCache, (uint64_t)&off_1E63A5D68, v6, v5, v7, v9);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for PointCacheRuntime, &v39);
  if (v39 == 1)
  {
    *(_QWORD *)(a2 + 72) = &type metadata for PointCacheRuntime;
    *(_QWORD *)(a2 + 80) = &off_1E638F3F0;
    v11 = sub_1B1A12038((uint64_t)&type metadata for PointCacheRuntime, (uint64_t)&off_1E638F3F0, v6, v5, v7, v9);
    v12 = (uint64_t *)v11;
    if (v6)
    {
      for (; v7; --v7)
      {
        sub_1B208F5F4(v10, v12);
        if (v2)
          break;
        v12 += 4;
        v10 += 24;
      }
    }
    else
    {
      v23 = a1[6];
      v24 = a1[7];
      v25 = v24 - v23;
      if (v24 != v23)
      {
        v26 = (uint64_t *)(v11 + 32 * v23);
        v27 = v10 + 24 * v23;
        do
        {
          sub_1B208F5F4(v27, v26);
          if (v2)
            break;
          v26 += 4;
          v27 += 24;
          --v25;
        }
        while (v25);
      }
    }
  }
  else
  {
    v36 = v5;
    v13 = a2;
    v14 = v8;
    v15 = v7;
    if (!v6)
      v15 = a1[7] - a1[6];
    v16 = sub_1B1B7EAB8(MEMORY[0x1E0DEE9D8]);
    v38 = *(_QWORD **)(v13 + 32);
    v17 = sub_1B21885F8(v15, (uint64_t)v16, 0x636143746E696F50, 0xEA00000000006568, 0, (uint64_t)v38);
    v19 = (unint64_t)v17;
    v37 = v20;
    if (v6)
    {
      v35 = v18;
      if (v7)
      {
        v21 = v17;
        v22 = v7;
        while (1)
        {
          sub_1B208F5F4(v10, v21);
          if (v2)
            break;
          v21 += 4;
          v10 += 24;
          if (!--v22)
            goto LABEL_14;
        }
      }
      else
      {
LABEL_14:
        sub_1B2185F40(v6, v36, v7, v19, v35);
      }
    }
    else
    {
      v28 = v18;
      v29 = a1[6];
      v30 = a1[7];
      v31 = v30 - v29;
      if (v30 == v29)
      {
LABEL_24:
        sub_1B218608C(*(_QWORD *)(v14 + 232), *(_QWORD *)(v14 + 240), v19, v28);
      }
      else
      {
        v32 = v10 + 24 * v29;
        v33 = v17;
        while (1)
        {
          sub_1B208F5F4(v32, v33);
          if (v2)
            break;
          v33 += 4;
          v32 += 24;
          if (!--v31)
            goto LABEL_24;
        }
      }
    }
    ecs_stack_allocator_deallocate(v38, v19, 32 * v37);
  }
  return swift_release();
}

uint64_t sub_1B218BA3C(_QWORD *a1, _QWORD *a2, char **a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  char v20;
  uint64_t v21;
  int v22;
  int v23;
  char *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  int v45;
  char *v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *j;
  uint64_t v55;
  uint64_t v57;
  BOOL v58;
  char v59;
  uint64_t v60;
  int v61;
  int v62;
  char *v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  BOOL v79;
  char v80;
  uint64_t v81;
  int v82;
  int v83;
  char *v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v101;

  v6 = (uint64_t *)a1[11];
  v5 = a1[12];
  v7 = a1[13];
  v8 = a1[1];
  v9 = a1[2];
  swift_retain();
  v95 = sub_1B1A12038((uint64_t)&type metadata for TexturePlaceholder, (uint64_t)&off_1E6396060, v6, v5, v7, v9);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for TextureGPURuntime, &v101);
  v99 = v8;
  if (v101 == 1)
  {
    a2[9] = &type metadata for TextureGPURuntime;
    a2[10] = &off_1E6390060;
    v10 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v6, v5, v7, v9);
    if (v6)
    {
      if (v7)
      {
        for (i = (_QWORD *)(v95 + 8); ; i += 2)
        {
          v13 = *v6++;
          v12 = v13;
          v15 = *v10++;
          v14 = v15;
          if (*((_DWORD *)i - 2) == -1 && *((_DWORD *)i - 1) == 0)
            break;
          if (v14)
          {
            v17 = *i;
LABEL_14:
            if (v17)
              v18 = v14 == v17;
            else
              v18 = 0;
            if (!v18)
              goto LABEL_6;
          }
LABEL_19:
          v19 = v6;
          v20 = *(_BYTE *)(v8 + 184);
          v21 = swift_retain();
          if ((v20 & 1) != 0)
            goto LABEL_96;
          v22 = *(_DWORD *)(*(_QWORD *)(v8 + 168) + 4 * v12);
          v23 = *(_DWORD *)(*(_QWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v22 + 8);
          swift_release();
          v24 = *a3;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *a3 = v24;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v24 = sub_1B1C63D98(0, *((_QWORD *)v24 + 2) + 1, 1, v24);
            *a3 = v24;
          }
          v27 = *((_QWORD *)v24 + 2);
          v26 = *((_QWORD *)v24 + 3);
          if (v27 >= v26 >> 1)
            v24 = sub_1B1C63D98(v26 > 1, v27 + 1, 1, v24);
          *((_QWORD *)v24 + 2) = v27 + 1;
          v28 = &v24[8 * v27];
          *((_DWORD *)v28 + 8) = v22;
          *((_DWORD *)v28 + 9) = v23;
          *a3 = v24;
          v8 = v99;
          v6 = v19;
LABEL_6:
          if (!--v7)
            return swift_release();
        }
        v17 = *i;
        if (!v14)
        {
          if (v17)
            goto LABEL_6;
          goto LABEL_19;
        }
        goto LABEL_14;
      }
      return swift_release();
    }
    v52 = a1[6];
    v53 = a1[7];
    if (v52 == v53)
      return swift_release();
    for (j = (_QWORD *)(v95 + 16 * v52 + 8); ; j += 2)
    {
      v55 = v10[v52];
      if (*((_DWORD *)j - 2) == -1 && *((_DWORD *)j - 1) == 0)
        break;
      if (v55)
      {
        v57 = *j;
LABEL_60:
        if (v57)
          v58 = v55 == v57;
        else
          v58 = 0;
        if (!v58)
          goto LABEL_52;
      }
LABEL_65:
      v59 = *(_BYTE *)(v8 + 184);
      v60 = swift_retain();
      if ((v59 & 1) != 0)
        goto LABEL_96;
      v61 = *(_DWORD *)(*(_QWORD *)(v8 + 168) + 4 * v52);
      v62 = *(_DWORD *)(*(_QWORD *)(v60 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v61 + 8);
      swift_release();
      v63 = *a3;
      v64 = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v63;
      if ((v64 & 1) == 0)
      {
        v63 = sub_1B1C63D98(0, *((_QWORD *)v63 + 2) + 1, 1, v63);
        *a3 = v63;
      }
      v66 = *((_QWORD *)v63 + 2);
      v65 = *((_QWORD *)v63 + 3);
      if (v66 >= v65 >> 1)
        v63 = sub_1B1C63D98(v65 > 1, v66 + 1, 1, v63);
      *((_QWORD *)v63 + 2) = v66 + 1;
      v67 = &v63[8 * v66];
      *((_DWORD *)v67 + 8) = v61;
      *((_DWORD *)v67 + 9) = v62;
      *a3 = v63;
      v8 = v99;
LABEL_52:
      if (v53 == ++v52)
        return swift_release();
    }
    v57 = *j;
    if (!v55)
    {
      if (v57)
        goto LABEL_52;
      goto LABEL_65;
    }
    goto LABEL_60;
  }
  v97 = v5;
  if (v6)
  {
    v90 = v6;
    v92 = (_QWORD *)a2[4];
    v93 = sub_1B2197120(v7, 0, (uint64_t)v92);
    v91 = v29;
    v89 = v30;
    v31 = v5;
    if (v7)
    {
      v32 = (_QWORD *)(v95 + 8);
      v33 = v6;
      v34 = v93;
      v35 = v7;
      while (1)
      {
        v37 = *v33++;
        v36 = v37;
        v39 = *v34++;
        v38 = v39;
        if (*((_DWORD *)v32 - 2) == -1 && *((_DWORD *)v32 - 1) == 0)
          break;
        if (v38)
        {
          v41 = *v32;
LABEL_37:
          if (v41)
            v42 = v38 == v41;
          else
            v42 = 0;
          if (!v42)
            goto LABEL_29;
        }
LABEL_42:
        v43 = *(_BYTE *)(v99 + 184);
        v44 = swift_retain();
        if ((v43 & 1) != 0)
          goto LABEL_96;
        v45 = *(_DWORD *)(*(_QWORD *)(v99 + 168) + 4 * v36);
        v96 = *(_DWORD *)(*(_QWORD *)(v44 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v45 + 8);
        swift_release();
        v46 = *a3;
        v47 = swift_isUniquelyReferenced_nonNull_native();
        *a3 = v46;
        if ((v47 & 1) == 0)
        {
          v46 = sub_1B1C63D98(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
          *a3 = v46;
        }
        v49 = *((_QWORD *)v46 + 2);
        v48 = *((_QWORD *)v46 + 3);
        if (v49 >= v48 >> 1)
          v46 = sub_1B1C63D98(v48 > 1, v49 + 1, 1, v46);
        *((_QWORD *)v46 + 2) = v49 + 1;
        v50 = &v46[8 * v49];
        *((_DWORD *)v50 + 8) = v45;
        *((_DWORD *)v50 + 9) = v96;
        *a3 = v46;
        v31 = v97;
LABEL_29:
        v32 += 2;
        if (!--v35)
          goto LABEL_48;
      }
      v41 = *v32;
      if (!v38)
      {
        if (v41)
          goto LABEL_29;
        goto LABEL_42;
      }
      goto LABEL_37;
    }
LABEL_48:
    v51 = (unint64_t)v93;
    sub_1B218343C(v90, v31, v7, (uint64_t)v93, v89);
LABEL_73:
    ecs_stack_allocator_deallocate(v92, v51, 8 * v91);
    return swift_release();
  }
  v68 = a1[6];
  v69 = a1[7];
  v92 = (_QWORD *)a2[4];
  v94 = sub_1B2197120(v69 - v68, 0, (uint64_t)v92);
  v91 = v70;
  v98 = v71;
  if (v69 == v68)
  {
LABEL_72:
    v51 = (unint64_t)v94;
    sub_1B2183588(*(_QWORD *)(v8 + 232), *(_QWORD *)(v8 + 240), (uint64_t)v94, v98);
    goto LABEL_73;
  }
  v73 = (_QWORD *)(v95 + 16 * v68 + 8);
  v74 = v94;
  while (1)
  {
    v76 = *v74++;
    v75 = v76;
    if (*((_DWORD *)v73 - 2) != -1 || *((_DWORD *)v73 - 1) != 0)
      break;
    v78 = *v73;
    if (v75)
      goto LABEL_85;
    if (!v78)
      goto LABEL_90;
LABEL_77:
    ++v68;
    v73 += 2;
    if (v69 == v68)
      goto LABEL_72;
  }
  if (!v75)
    goto LABEL_90;
  v78 = *v73;
LABEL_85:
  if (v78)
    v79 = v75 == v78;
  else
    v79 = 0;
  if (!v79)
    goto LABEL_77;
LABEL_90:
  v80 = *(_BYTE *)(v8 + 184);
  v81 = swift_retain();
  if ((v80 & 1) == 0)
  {
    v82 = *(_DWORD *)(*(_QWORD *)(v8 + 168) + 4 * v68);
    v83 = *(_DWORD *)(*(_QWORD *)(v81 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v82 + 8);
    swift_release();
    v84 = *a3;
    v85 = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v84;
    if ((v85 & 1) == 0)
    {
      v84 = sub_1B1C63D98(0, *((_QWORD *)v84 + 2) + 1, 1, v84);
      *a3 = v84;
    }
    v87 = *((_QWORD *)v84 + 2);
    v86 = *((_QWORD *)v84 + 3);
    if (v87 >= v86 >> 1)
      v84 = sub_1B1C63D98(v86 > 1, v87 + 1, 1, v84);
    *((_QWORD *)v84 + 2) = v87 + 1;
    v88 = &v84[8 * v87];
    *((_DWORD *)v88 + 8) = v82;
    *((_DWORD *)v88 + 9) = v83;
    *a3 = v84;
    v8 = v99;
    goto LABEL_77;
  }
LABEL_96:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B218C0C0(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  char v12;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;

  v4 = (uint64_t *)a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v8 = a1[1];
  v7 = a1[2];
  swift_retain();
  v34 = sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v4, v5, v6, v7);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for Seed, &v35);
  if (v35 == 1)
  {
    a2[9] = &type metadata for Seed;
    a2[10] = &off_1E63B9E88;
    v9 = sub_1B1A12038((uint64_t)&type metadata for Seed, (uint64_t)&off_1E63B9E88, v4, v5, v6, v7);
    if (v4)
    {
      if (v6)
      {
        v10 = (_BYTE *)(v9 + 4);
        v11 = (_BYTE *)(v34 + 72);
        do
        {
          *((_DWORD *)v10 - 1) = *((_QWORD *)v11 - 1);
          v12 = *v11;
          v11 += 88;
          *v10 = v12;
          v10 += 8;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      v23 = a1[6];
      v24 = a1[7] - v23;
      if (v24)
      {
        v25 = (_BYTE *)(v9 + 8 * v23 + 4);
        v26 = (_BYTE *)(v34 + 88 * v23 + 72);
        do
        {
          *((_DWORD *)v25 - 1) = *((_QWORD *)v26 - 1);
          v27 = *v26;
          v26 += 88;
          *v25 = v27;
          v25 += 8;
          --v24;
        }
        while (v24);
      }
    }
    return swift_release();
  }
  else
  {
    v14 = v6;
    if (!v4)
      v14 = a1[7] - a1[6];
    v33 = (_QWORD *)a2[4];
    v15 = ecs_stack_allocator_allocate((uint64_t)v33, 8 * v14, 4);
    v16 = (unint64_t)v15;
    if (v14)
    {
      v17 = (char *)v15 + 4;
      v18 = v14;
      do
      {
        *((_DWORD *)v17 - 1) = 0;
        *v17 = 0;
        v17 += 8;
        --v18;
      }
      while (v18);
    }
    if (v4)
    {
      if (v6)
      {
        v19 = (char *)v15 + 4;
        v20 = (_BYTE *)(v34 + 72);
        v21 = v6;
        do
        {
          *((_DWORD *)v19 - 1) = *((_QWORD *)v20 - 1);
          v22 = *v20;
          v20 += 88;
          *v19 = v22;
          v19 += 8;
          --v21;
        }
        while (v21);
      }
      sub_1B21861D0(v4, v5, v6, (uint64_t)v15, v14);
    }
    else
    {
      v28 = a1[6];
      v29 = a1[7] - v28;
      if (v29)
      {
        v30 = (char *)v15 + 4;
        v31 = (_BYTE *)(v34 + 88 * v28 + 72);
        do
        {
          *((_DWORD *)v30 - 1) = *((_QWORD *)v31 - 1);
          v32 = *v31;
          v31 += 88;
          *v30 = v32;
          v30 += 8;
          --v29;
        }
        while (v29);
      }
      sub_1B218637C(*(_QWORD *)(v8 + 232), *(_QWORD *)(v8 + 240), (uint64_t)v15, v14);
    }
    ecs_stack_allocator_deallocate(v33, v16, 8 * v14);
    return swift_release();
  }
}

uint64_t sub_1B218C32C(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v27;
  _DWORD *v28;
  _QWORD *v30;
  uint64_t v31;
  char v32;

  v4 = (uint64_t *)a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v8 = a1[1];
  v7 = a1[2];
  swift_retain();
  v31 = sub_1B1A12038((uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CDA8, v4, v5, v6, v7);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for Scale1, &v32);
  if (v32 == 1)
  {
    a2[9] = &type metadata for Scale1;
    a2[10] = &off_1E63BC288;
    v9 = (_DWORD *)sub_1B1A12038((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, v4, v5, v6, v7);
    if (v4)
    {
      if (v6)
      {
        v10 = (_DWORD *)(v31 + 12);
        do
        {
          if (*(v10 - 1) == -1 && *v10 == 0)
            *v9 = 1056964608;
          v10 += 10;
          ++v9;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      v19 = a1[6];
      v20 = a1[7] - v19;
      if (v20)
      {
        v24 = (_DWORD *)(v31 + 40 * v19 + 12);
        v25 = &v9[v19];
        do
        {
          if (*(v24 - 1) == -1 && *v24 == 0)
            *v25 = 1056964608;
          v24 += 10;
          ++v25;
          --v20;
        }
        while (v20);
      }
    }
    return swift_release();
  }
  else
  {
    v12 = v6;
    if (!v4)
      v12 = a1[7] - a1[6];
    v30 = (_QWORD *)a2[4];
    v13 = ecs_stack_allocator_allocate((uint64_t)v30, 4 * v12, 4);
    v14 = (unint64_t)v13;
    if (v12)
      memset_pattern16(v13, &xmmword_1B2244E30, 4 * v12);
    if (v4)
    {
      if (v6)
      {
        v15 = (_DWORD *)(v31 + 12);
        v16 = (_DWORD *)v14;
        v17 = v6;
        do
        {
          if (*(v15 - 1) == -1 && *v15 == 0)
            *v16 = 1056964608;
          v15 += 10;
          ++v16;
          --v17;
        }
        while (v17);
      }
      sub_1B2186510(v4, v5, v6, v14, v12);
    }
    else
    {
      v22 = a1[6];
      v23 = a1[7] - v22;
      if (v23)
      {
        v27 = (_DWORD *)(v31 + 40 * v22 + 12);
        v28 = (_DWORD *)v14;
        do
        {
          if (*(v27 - 1) == -1 && *v27 == 0)
            *v28 = 1056964608;
          v27 += 10;
          ++v28;
          --v23;
        }
        while (v23);
      }
      sub_1B218665C(*(_QWORD *)(v8 + 232), *(_QWORD *)(v8 + 240), v14, v12);
    }
    ecs_stack_allocator_deallocate(v30, v14, 4 * v12);
    return swift_release();
  }
}

uint64_t sub_1B218C5E0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[64];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireIOSurface, (uint64_t)&off_1E63ACCF8, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1E63A6E90;
    v9 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v5, v4, v6, v8);
    v10 = (_QWORD *)v9;
    if (v5)
    {
      if (v6)
      {
        v11 = a1[3];
        v12 = *a1;
        do
        {
          v13 = *v5;
          v14 = v5 + 1;
          v62 = v12;
          v63 = v7;
          v64 = v8;
          v65 = v11;
          v66 = v13;
          v15 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v16 = *(_QWORD *)(v15 + 128);
          if (!*(_QWORD *)(v16 + 16)
            || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v10 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v10 |= *(_QWORD *)v61;
          v10 += 8;
          ++v11;
          --v6;
          v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 != v36)
      {
        v40 = v8;
        v41 = a1[3];
        v42 = *a1;
        v43 = (_QWORD *)(v9 + (v35 << 6));
        do
        {
          v62 = v42;
          v63 = v7;
          v64 = v40;
          v65 = v41;
          v66 = v35;
          v44 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16)
            || (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v43 = 0;
          }
          ++v35;
          sub_1B20F2F40((uint64_t)v61);
          *v43 |= *(_QWORD *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    v55 = v4;
    v19 = v6;
    if (!v5)
      v19 = a1[7] - a1[6];
    v60 = v19;
    v67 = v8;
    v20 = a2[4];
    v21 = v19 << 6;
    v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    v23 = v60;
    if (v60)
    {
      v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((_BYTE *)v24 - 8) = -2;
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    v58 = v21;
    v57 = (_QWORD *)v20;
    v59 = (uint64_t)v22;
    if (v5)
    {
      v56 = v5;
      if (v6)
      {
        v25 = a1[3];
        v26 = *a1;
        v27 = v6;
        v28 = v22;
        do
        {
          v29 = *v5++;
          v62 = v26;
          v63 = v7;
          v64 = v67;
          v65 = v25;
          v66 = v29;
          v30 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v31 = *(_QWORD *)(v30 + 128);
          if (!*(_QWORD *)(v31 + 16)
            || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v28 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v28 |= *(_QWORD *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      v34 = v59;
      sub_1B21867A0(v56, v55, v6, v59, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      if (v38 != v39)
      {
        v48 = a1[3];
        v49 = *a1;
        v50 = v22;
        do
        {
          v62 = v49;
          v63 = v7;
          v64 = v67;
          v65 = v48;
          v66 = v38;
          v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v52 = *(_QWORD *)(v51 + 128);
          if (!*(_QWORD *)(v52 + 16)
            || (v53 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v50 = 0;
          }
          ++v38;
          sub_1B20F2F40((uint64_t)v61);
          *v50 |= *(_QWORD *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      v34 = v59;
      sub_1B218694C(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v59, v60);
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B218CA50(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[64];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureRequirePremultiplyWithLinearAlpha, (uint64_t)&off_1E63B92C0, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1E63A6E90;
    v9 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v5, v4, v6, v8);
    v10 = (_QWORD *)v9;
    if (v5)
    {
      if (v6)
      {
        v11 = a1[3];
        v12 = *a1;
        do
        {
          v13 = *v5;
          v14 = v5 + 1;
          v62 = v12;
          v63 = v7;
          v64 = v8;
          v65 = v11;
          v66 = v13;
          v15 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v16 = *(_QWORD *)(v15 + 128);
          if (!*(_QWORD *)(v16 + 16)
            || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v10 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v10 |= *(_QWORD *)v61;
          v10 += 8;
          ++v11;
          --v6;
          v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 != v36)
      {
        v40 = v8;
        v41 = a1[3];
        v42 = *a1;
        v43 = (_QWORD *)(v9 + (v35 << 6));
        do
        {
          v62 = v42;
          v63 = v7;
          v64 = v40;
          v65 = v41;
          v66 = v35;
          v44 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16)
            || (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v43 = 0;
          }
          ++v35;
          sub_1B20F2F40((uint64_t)v61);
          *v43 |= *(_QWORD *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    v55 = v4;
    v19 = v6;
    if (!v5)
      v19 = a1[7] - a1[6];
    v60 = v19;
    v67 = v8;
    v20 = a2[4];
    v21 = v19 << 6;
    v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    v23 = v60;
    if (v60)
    {
      v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((_BYTE *)v24 - 8) = -2;
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    v58 = v21;
    v57 = (_QWORD *)v20;
    v59 = (uint64_t)v22;
    if (v5)
    {
      v56 = v5;
      if (v6)
      {
        v25 = a1[3];
        v26 = *a1;
        v27 = v6;
        v28 = v22;
        do
        {
          v29 = *v5++;
          v62 = v26;
          v63 = v7;
          v64 = v67;
          v65 = v25;
          v66 = v29;
          v30 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v31 = *(_QWORD *)(v30 + 128);
          if (!*(_QWORD *)(v31 + 16)
            || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v28 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v28 |= *(_QWORD *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      v34 = v59;
      sub_1B21867A0(v56, v55, v6, v59, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      if (v38 != v39)
      {
        v48 = a1[3];
        v49 = *a1;
        v50 = v22;
        do
        {
          v62 = v49;
          v63 = v7;
          v64 = v67;
          v65 = v48;
          v66 = v38;
          v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v52 = *(_QWORD *)(v51 + 128);
          if (!*(_QWORD *)(v52 + 16)
            || (v53 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v50 = 0;
          }
          ++v38;
          sub_1B20F2F40((uint64_t)v61);
          *v50 |= *(_QWORD *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      v34 = v59;
      sub_1B218694C(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v59, v60);
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B218CEC0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[64];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireMipmapGeneration, (uint64_t)&off_1E63B5F20, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1E63A6E90;
    v9 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v5, v4, v6, v8);
    v10 = (_QWORD *)v9;
    if (v5)
    {
      if (v6)
      {
        v11 = a1[3];
        v12 = *a1;
        do
        {
          v13 = *v5;
          v14 = v5 + 1;
          v62 = v12;
          v63 = v7;
          v64 = v8;
          v65 = v11;
          v66 = v13;
          v15 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v16 = *(_QWORD *)(v15 + 128);
          if (!*(_QWORD *)(v16 + 16)
            || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v10 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v10 |= *(_QWORD *)v61;
          v10 += 8;
          ++v11;
          --v6;
          v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 != v36)
      {
        v40 = v8;
        v41 = a1[3];
        v42 = *a1;
        v43 = (_QWORD *)(v9 + (v35 << 6));
        do
        {
          v62 = v42;
          v63 = v7;
          v64 = v40;
          v65 = v41;
          v66 = v35;
          v44 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16)
            || (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v43 = 0;
          }
          ++v35;
          sub_1B20F2F40((uint64_t)v61);
          *v43 |= *(_QWORD *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    v55 = v4;
    v19 = v6;
    if (!v5)
      v19 = a1[7] - a1[6];
    v60 = v19;
    v67 = v8;
    v20 = a2[4];
    v21 = v19 << 6;
    v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    v23 = v60;
    if (v60)
    {
      v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((_BYTE *)v24 - 8) = -2;
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    v58 = v21;
    v57 = (_QWORD *)v20;
    v59 = (uint64_t)v22;
    if (v5)
    {
      v56 = v5;
      if (v6)
      {
        v25 = a1[3];
        v26 = *a1;
        v27 = v6;
        v28 = v22;
        do
        {
          v29 = *v5++;
          v62 = v26;
          v63 = v7;
          v64 = v67;
          v65 = v25;
          v66 = v29;
          v30 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v31 = *(_QWORD *)(v30 + 128);
          if (!*(_QWORD *)(v31 + 16)
            || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v28 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v28 |= *(_QWORD *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      v34 = v59;
      sub_1B21867A0(v56, v55, v6, v59, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      if (v38 != v39)
      {
        v48 = a1[3];
        v49 = *a1;
        v50 = v22;
        do
        {
          v62 = v49;
          v63 = v7;
          v64 = v67;
          v65 = v48;
          v66 = v38;
          v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v52 = *(_QWORD *)(v51 + 128);
          if (!*(_QWORD *)(v52 + 16)
            || (v53 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v50 = 0;
          }
          ++v38;
          sub_1B20F2F40((uint64_t)v61);
          *v50 |= *(_QWORD *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      v34 = v59;
      sub_1B218694C(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v59, v60);
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B218D330(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[64];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireMipmap, (uint64_t)&off_1E639F630, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1E63A6E90;
    v9 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v5, v4, v6, v8);
    v10 = (_QWORD *)v9;
    if (v5)
    {
      if (v6)
      {
        v11 = a1[3];
        v12 = *a1;
        do
        {
          v13 = *v5;
          v14 = v5 + 1;
          v62 = v12;
          v63 = v7;
          v64 = v8;
          v65 = v11;
          v66 = v13;
          v15 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v16 = *(_QWORD *)(v15 + 128);
          if (!*(_QWORD *)(v16 + 16)
            || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v10 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v10 |= *(_QWORD *)v61;
          v10 += 8;
          ++v11;
          --v6;
          v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 != v36)
      {
        v40 = v8;
        v41 = a1[3];
        v42 = *a1;
        v43 = (_QWORD *)(v9 + (v35 << 6));
        do
        {
          v62 = v42;
          v63 = v7;
          v64 = v40;
          v65 = v41;
          v66 = v35;
          v44 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16)
            || (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v43 = 0;
          }
          ++v35;
          sub_1B20F2F40((uint64_t)v61);
          *v43 |= *(_QWORD *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    v55 = v4;
    v19 = v6;
    if (!v5)
      v19 = a1[7] - a1[6];
    v60 = v19;
    v67 = v8;
    v20 = a2[4];
    v21 = v19 << 6;
    v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    v23 = v60;
    if (v60)
    {
      v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((_BYTE *)v24 - 8) = -2;
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    v58 = v21;
    v57 = (_QWORD *)v20;
    v59 = (uint64_t)v22;
    if (v5)
    {
      v56 = v5;
      if (v6)
      {
        v25 = a1[3];
        v26 = *a1;
        v27 = v6;
        v28 = v22;
        do
        {
          v29 = *v5++;
          v62 = v26;
          v63 = v7;
          v64 = v67;
          v65 = v25;
          v66 = v29;
          v30 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v31 = *(_QWORD *)(v30 + 128);
          if (!*(_QWORD *)(v31 + 16)
            || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v28 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v28 |= *(_QWORD *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      v34 = v59;
      sub_1B21867A0(v56, v55, v6, v59, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      if (v38 != v39)
      {
        v48 = a1[3];
        v49 = *a1;
        v50 = v22;
        do
        {
          v62 = v49;
          v63 = v7;
          v64 = v67;
          v65 = v48;
          v66 = v38;
          v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v52 = *(_QWORD *)(v51 + 128);
          if (!*(_QWORD *)(v52 + 16)
            || (v53 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v50 = 0;
          }
          ++v38;
          sub_1B20F2F40((uint64_t)v61);
          *v50 |= *(_QWORD *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      v34 = v59;
      sub_1B218694C(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v59, v60);
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B218D7A0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[64];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireCubemap, (uint64_t)&off_1E63A7010, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1E63A6E90;
    v9 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v5, v4, v6, v8);
    v10 = (_QWORD *)v9;
    if (v5)
    {
      if (v6)
      {
        v11 = a1[3];
        v12 = *a1;
        do
        {
          v13 = *v5;
          v14 = v5 + 1;
          v62 = v12;
          v63 = v7;
          v64 = v8;
          v65 = v11;
          v66 = v13;
          v15 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v16 = *(_QWORD *)(v15 + 128);
          if (!*(_QWORD *)(v16 + 16)
            || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v10 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v10 |= *(_QWORD *)v61;
          v10 += 8;
          ++v11;
          --v6;
          v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 != v36)
      {
        v40 = v8;
        v41 = a1[3];
        v42 = *a1;
        v43 = (_QWORD *)(v9 + (v35 << 6));
        do
        {
          v62 = v42;
          v63 = v7;
          v64 = v40;
          v65 = v41;
          v66 = v35;
          v44 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16)
            || (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v43 = 0;
          }
          ++v35;
          sub_1B20F2F40((uint64_t)v61);
          *v43 |= *(_QWORD *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    v55 = v4;
    v19 = v6;
    if (!v5)
      v19 = a1[7] - a1[6];
    v60 = v19;
    v67 = v8;
    v20 = a2[4];
    v21 = v19 << 6;
    v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    v23 = v60;
    if (v60)
    {
      v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((_BYTE *)v24 - 8) = -2;
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    v58 = v21;
    v57 = (_QWORD *)v20;
    v59 = (uint64_t)v22;
    if (v5)
    {
      v56 = v5;
      if (v6)
      {
        v25 = a1[3];
        v26 = *a1;
        v27 = v6;
        v28 = v22;
        do
        {
          v29 = *v5++;
          v62 = v26;
          v63 = v7;
          v64 = v67;
          v65 = v25;
          v66 = v29;
          v30 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v31 = *(_QWORD *)(v30 + 128);
          if (!*(_QWORD *)(v31 + 16)
            || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v28 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v28 |= *(_QWORD *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      v34 = v59;
      sub_1B21867A0(v56, v55, v6, v59, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      if (v38 != v39)
      {
        v48 = a1[3];
        v49 = *a1;
        v50 = v22;
        do
        {
          v62 = v49;
          v63 = v7;
          v64 = v67;
          v65 = v48;
          v66 = v38;
          v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v52 = *(_QWORD *)(v51 + 128);
          if (!*(_QWORD *)(v52 + 16)
            || (v53 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v50 = 0;
          }
          ++v38;
          sub_1B20F2F40((uint64_t)v61);
          *v50 |= *(_QWORD *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      v34 = v59;
      sub_1B218694C(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v59, v60);
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B218DC10(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[64];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireUnpremultiply, (uint64_t)&off_1E63B3A50, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1E63A6E90;
    v9 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v5, v4, v6, v8);
    v10 = (_QWORD *)v9;
    if (v5)
    {
      if (v6)
      {
        v11 = a1[3];
        v12 = *a1;
        do
        {
          v13 = *v5;
          v14 = v5 + 1;
          v62 = v12;
          v63 = v7;
          v64 = v8;
          v65 = v11;
          v66 = v13;
          v15 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v16 = *(_QWORD *)(v15 + 128);
          if (!*(_QWORD *)(v16 + 16)
            || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v10 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v10 |= *(_QWORD *)v61;
          v10 += 8;
          ++v11;
          --v6;
          v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 != v36)
      {
        v40 = v8;
        v41 = a1[3];
        v42 = *a1;
        v43 = (_QWORD *)(v9 + (v35 << 6));
        do
        {
          v62 = v42;
          v63 = v7;
          v64 = v40;
          v65 = v41;
          v66 = v35;
          v44 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16)
            || (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v43 = 0;
          }
          ++v35;
          sub_1B20F2F40((uint64_t)v61);
          *v43 |= *(_QWORD *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    v55 = v4;
    v19 = v6;
    if (!v5)
      v19 = a1[7] - a1[6];
    v60 = v19;
    v67 = v8;
    v20 = a2[4];
    v21 = v19 << 6;
    v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    v23 = v60;
    if (v60)
    {
      v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((_BYTE *)v24 - 8) = -2;
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    v58 = v21;
    v57 = (_QWORD *)v20;
    v59 = (uint64_t)v22;
    if (v5)
    {
      v56 = v5;
      if (v6)
      {
        v25 = a1[3];
        v26 = *a1;
        v27 = v6;
        v28 = v22;
        do
        {
          v29 = *v5++;
          v62 = v26;
          v63 = v7;
          v64 = v67;
          v65 = v25;
          v66 = v29;
          v30 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v31 = *(_QWORD *)(v30 + 128);
          if (!*(_QWORD *)(v31 + 16)
            || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v28 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v28 |= *(_QWORD *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      v34 = v59;
      sub_1B21867A0(v56, v55, v6, v59, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      if (v38 != v39)
      {
        v48 = a1[3];
        v49 = *a1;
        v50 = v22;
        do
        {
          v62 = v49;
          v63 = v7;
          v64 = v67;
          v65 = v48;
          v66 = v38;
          v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v52 = *(_QWORD *)(v51 + 128);
          if (!*(_QWORD *)(v52 + 16)
            || (v53 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v50 = 0;
          }
          ++v38;
          sub_1B20F2F40((uint64_t)v61);
          *v50 |= *(_QWORD *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      v34 = v59;
      sub_1B218694C(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v59, v60);
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B218E080(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[64];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireNonSRGB, (uint64_t)&off_1E63A70E8, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1E63A6E90;
    v9 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v5, v4, v6, v8);
    v10 = (_QWORD *)v9;
    if (v5)
    {
      if (v6)
      {
        v11 = a1[3];
        v12 = *a1;
        do
        {
          v13 = *v5;
          v14 = v5 + 1;
          v62 = v12;
          v63 = v7;
          v64 = v8;
          v65 = v11;
          v66 = v13;
          v15 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v16 = *(_QWORD *)(v15 + 128);
          if (!*(_QWORD *)(v16 + 16)
            || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v10 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v10 |= *(_QWORD *)v61;
          v10 += 8;
          ++v11;
          --v6;
          v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 != v36)
      {
        v40 = v8;
        v41 = a1[3];
        v42 = *a1;
        v43 = (_QWORD *)(v9 + (v35 << 6));
        do
        {
          v62 = v42;
          v63 = v7;
          v64 = v40;
          v65 = v41;
          v66 = v35;
          v44 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16)
            || (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v43 = 0;
          }
          ++v35;
          sub_1B20F2F40((uint64_t)v61);
          *v43 |= *(_QWORD *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    v55 = v4;
    v19 = v6;
    if (!v5)
      v19 = a1[7] - a1[6];
    v60 = v19;
    v67 = v8;
    v20 = a2[4];
    v21 = v19 << 6;
    v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    v23 = v60;
    if (v60)
    {
      v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((_BYTE *)v24 - 8) = -2;
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    v58 = v21;
    v57 = (_QWORD *)v20;
    v59 = (uint64_t)v22;
    if (v5)
    {
      v56 = v5;
      if (v6)
      {
        v25 = a1[3];
        v26 = *a1;
        v27 = v6;
        v28 = v22;
        do
        {
          v29 = *v5++;
          v62 = v26;
          v63 = v7;
          v64 = v67;
          v65 = v25;
          v66 = v29;
          v30 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v31 = *(_QWORD *)(v30 + 128);
          if (!*(_QWORD *)(v31 + 16)
            || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v28 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v28 |= *(_QWORD *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      v34 = v59;
      sub_1B21867A0(v56, v55, v6, v59, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      if (v38 != v39)
      {
        v48 = a1[3];
        v49 = *a1;
        v50 = v22;
        do
        {
          v62 = v49;
          v63 = v7;
          v64 = v67;
          v65 = v48;
          v66 = v38;
          v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v52 = *(_QWORD *)(v51 + 128);
          if (!*(_QWORD *)(v52 + 16)
            || (v53 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v50 = 0;
          }
          ++v38;
          sub_1B20F2F40((uint64_t)v61);
          *v50 |= *(_QWORD *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      v34 = v59;
      sub_1B218694C(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v59, v60);
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B218E4F0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[64];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireGPURepresentation, (uint64_t)&off_1E63B6428, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1E63A6E90;
    v9 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v5, v4, v6, v8);
    v10 = (_QWORD *)v9;
    if (v5)
    {
      if (v6)
      {
        v11 = a1[3];
        v12 = *a1;
        do
        {
          v13 = *v5;
          v14 = v5 + 1;
          v62 = v12;
          v63 = v7;
          v64 = v8;
          v65 = v11;
          v66 = v13;
          v15 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v16 = *(_QWORD *)(v15 + 128);
          if (!*(_QWORD *)(v16 + 16)
            || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v10 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v10 |= *(_QWORD *)v61;
          v10 += 8;
          ++v11;
          --v6;
          v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 != v36)
      {
        v40 = v8;
        v41 = a1[3];
        v42 = *a1;
        v43 = (_QWORD *)(v9 + (v35 << 6));
        do
        {
          v62 = v42;
          v63 = v7;
          v64 = v40;
          v65 = v41;
          v66 = v35;
          v44 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16)
            || (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v43 = 0;
          }
          ++v35;
          sub_1B20F2F40((uint64_t)v61);
          *v43 |= *(_QWORD *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    v55 = v4;
    v19 = v6;
    if (!v5)
      v19 = a1[7] - a1[6];
    v60 = v19;
    v67 = v8;
    v20 = a2[4];
    v21 = v19 << 6;
    v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    v23 = v60;
    if (v60)
    {
      v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((_BYTE *)v24 - 8) = -2;
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    v58 = v21;
    v57 = (_QWORD *)v20;
    v59 = (uint64_t)v22;
    if (v5)
    {
      v56 = v5;
      if (v6)
      {
        v25 = a1[3];
        v26 = *a1;
        v27 = v6;
        v28 = v22;
        do
        {
          v29 = *v5++;
          v62 = v26;
          v63 = v7;
          v64 = v67;
          v65 = v25;
          v66 = v29;
          v30 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v31 = *(_QWORD *)(v30 + 128);
          if (!*(_QWORD *)(v31 + 16)
            || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v28 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v28 |= *(_QWORD *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      v34 = v59;
      sub_1B21867A0(v56, v55, v6, v59, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      if (v38 != v39)
      {
        v48 = a1[3];
        v49 = *a1;
        v50 = v22;
        do
        {
          v62 = v49;
          v63 = v7;
          v64 = v67;
          v65 = v48;
          v66 = v38;
          v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v52 = *(_QWORD *)(v51 + 128);
          if (!*(_QWORD *)(v52 + 16)
            || (v53 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v50 = 0;
          }
          ++v38;
          sub_1B20F2F40((uint64_t)v61);
          *v50 |= *(_QWORD *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      v34 = v59;
      sub_1B218694C(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v59, v60);
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B218E960(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  unint64_t v48;
  char v50;

  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[1];
  v7 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureArrayFileAsset, (uint64_t)&off_1E63A69A0, v3, v4, v5, v7);
  sub_1B1A10AA4(*(_QWORD *)(v6 + 40), (uint64_t)&type metadata for TextureLoadPolicy, &v50);
  if (v50 == 1)
  {
    a2[9] = &type metadata for TextureLoadPolicy;
    a2[10] = &off_1E6390318;
    v8 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1E6390318, v3, v4, v5, v7);
    if (!v3)
    {
      v19 = a1[6];
      v18 = a1[7];
      v20 = v18 - v19;
      if (v18 != v19)
      {
        v21 = a1[6];
        if (v20 < 2)
          goto LABEL_22;
        v21 = v19 + (v20 & 0xFFFFFFFFFFFFFFFELL);
        v22 = (_BYTE *)(v8 + 4 * v19 + 5);
        v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 4) = 1;
          *v22 = 1;
          v22 += 8;
          v23 -= 2;
        }
        while (v23);
        if (v20 != (v20 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_22:
          v24 = (_BYTE *)(v8 + 4 * v21 + 1);
          v25 = v18 - v21;
          do
          {
            *v24 = 1;
            v24 += 4;
            --v25;
          }
          while (v25);
        }
      }
      return swift_release();
    }
    if (v5)
    {
      if (v5 == 1)
      {
        v9 = 0;
      }
      else
      {
        v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
        v31 = (_BYTE *)(v8 + 5);
        v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v31 - 4) = 1;
          *v31 = 1;
          v31 += 8;
          v32 -= 2;
        }
        while (v32);
        if (v5 == v9)
          return swift_release();
      }
      v33 = v5 - v9;
      v34 = (_BYTE *)(v8 + 4 * v9 + 1);
      do
      {
        *v34 = 1;
        v34 += 4;
        --v33;
      }
      while (v33);
    }
    return swift_release();
  }
  v10 = v5;
  v11 = v3;
  if (!v3)
    v5 = a1[7] - a1[6];
  v12 = (_QWORD *)a2[4];
  v13 = ecs_stack_allocator_allocate((uint64_t)v12, 4 * v5, 1);
  if (v5)
  {
    if (v5 < 8)
    {
      v14 = 0;
      goto LABEL_11;
    }
    v14 = 0;
    v30 = 4 * (v5 - 1);
    if ((_QWORD *)((char *)v13 + v30) < v13
      || (char *)v13 + v30 + 1 < (char *)v13 + 1
      || (char *)v13 + v30 + 2 < (char *)v13 + 2
      || (char *)v13 + v30 + 3 < (char *)v13 + 3
      || (v5 - 1) >> 62)
    {
      goto LABEL_11;
    }
    if (v5 >= 0x20)
    {
      v14 = v5 & 0xFFFFFFFFFFFFFFE0;
      v44 = v13 + 8;
      v45 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(v44 - 2) = xmmword_1B22C9B70;
        *(v44 - 1) = xmmword_1B22C9B70;
        *(v44 - 4) = xmmword_1B22C9B70;
        *(v44 - 3) = xmmword_1B22C9B70;
        v44[2] = xmmword_1B22C9B70;
        v44[3] = xmmword_1B22C9B70;
        *v44 = xmmword_1B22C9B70;
        v44[1] = xmmword_1B22C9B70;
        v44 += 8;
        v45 -= 32;
      }
      while (v45);
      if (v5 == v14)
        goto LABEL_13;
      if ((v5 & 0x18) == 0)
      {
LABEL_11:
        v15 = v5 - v14;
        v16 = (_DWORD *)v13 + v14;
        do
        {
          *v16++ = 16842752;
          --v15;
        }
        while (v15);
        goto LABEL_13;
      }
    }
    else
    {
      v14 = 0;
    }
    v46 = v14;
    v14 = v5 & 0xFFFFFFFFFFFFFFF8;
    v47 = (_OWORD *)((char *)v13 + 4 * v46);
    v48 = v46 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v47 = xmmword_1B22C9B70;
      v47[1] = xmmword_1B22C9B70;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    if (v5 != v14)
      goto LABEL_11;
  }
LABEL_13:
  if (!v11)
  {
    v26 = a1[6];
    v27 = a1[7];
    v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 >= 2)
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v26 += v28 & 0xFFFFFFFFFFFFFFFELL;
        v40 = (char *)v13 + 5;
        v41 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v40 - 4) = 1;
          *v40 = 1;
          v40 += 8;
          v41 -= 2;
        }
        while (v41);
        if (v28 == v29)
          goto LABEL_52;
      }
      else
      {
        v29 = 0;
      }
      v42 = (char *)v13 + 4 * v29 + 1;
      v43 = v27 - v26;
      do
      {
        *v42 = 1;
        v42 += 4;
        --v43;
      }
      while (v43);
    }
LABEL_52:
    sub_1B2186C8C(*(_QWORD *)(v6 + 232), *(_QWORD *)(v6 + 240), (uint64_t)v13, v5);
    goto LABEL_53;
  }
  if (v10)
  {
    if (v10 == 1)
    {
      v17 = 0;
    }
    else
    {
      v17 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v36 = (char *)v13 + 5;
      v37 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v36 - 4) = 1;
        *v36 = 1;
        v36 += 8;
        v37 -= 2;
      }
      while (v37);
      if (v10 == v17)
        goto LABEL_46;
    }
    v38 = (char *)v13 + 4 * v17 + 1;
    v39 = v10 - v17;
    do
    {
      *v38 = 1;
      v38 += 4;
      --v39;
    }
    while (v39);
  }
LABEL_46:
  sub_1B2186AE0(v11, v4, v10, (uint64_t)v13, v5);
LABEL_53:
  ecs_stack_allocator_deallocate(v12, (unint64_t)v13, 4 * v5);
  return swift_release();
}

uint64_t sub_1B218ED50(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  unint64_t v48;
  char v50;

  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[1];
  v7 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureArrayFileAsset, (uint64_t)&off_1E63A69A0, v3, v4, v5, v7);
  sub_1B1A10AA4(*(_QWORD *)(v6 + 40), (uint64_t)&type metadata for TextureLoadPolicy, &v50);
  if (v50 == 1)
  {
    a2[9] = &type metadata for TextureLoadPolicy;
    a2[10] = &off_1E6390318;
    v8 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1E6390318, v3, v4, v5, v7);
    if (!v3)
    {
      v19 = a1[6];
      v18 = a1[7];
      v20 = v18 - v19;
      if (v18 != v19)
      {
        v21 = a1[6];
        if (v20 < 2)
          goto LABEL_22;
        v21 = v19 + (v20 & 0xFFFFFFFFFFFFFFFELL);
        v22 = (_BYTE *)(v8 + 4 * v19 + 4);
        v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 4) = 1;
          *v22 = 1;
          v22 += 8;
          v23 -= 2;
        }
        while (v23);
        if (v20 != (v20 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_22:
          v24 = v18 - v21;
          v25 = (_BYTE *)(v8 + 4 * v21);
          do
          {
            *v25 = 1;
            v25 += 4;
            --v24;
          }
          while (v24);
        }
      }
      return swift_release();
    }
    if (v5)
    {
      if (v5 == 1)
      {
        v9 = 0;
      }
      else
      {
        v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
        v31 = (_BYTE *)(v8 + 4);
        v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v31 - 4) = 1;
          *v31 = 1;
          v31 += 8;
          v32 -= 2;
        }
        while (v32);
        if (v5 == v9)
          return swift_release();
      }
      v33 = v5 - v9;
      v34 = (_BYTE *)(v8 + 4 * v9);
      do
      {
        *v34 = 1;
        v34 += 4;
        --v33;
      }
      while (v33);
    }
    return swift_release();
  }
  v10 = v5;
  v11 = v3;
  if (!v3)
    v5 = a1[7] - a1[6];
  v12 = (_QWORD *)a2[4];
  v13 = ecs_stack_allocator_allocate((uint64_t)v12, 4 * v5, 1);
  if (v5)
  {
    if (v5 < 8)
    {
      v14 = 0;
      goto LABEL_11;
    }
    v14 = 0;
    v30 = 4 * (v5 - 1);
    if ((_QWORD *)((char *)v13 + v30) < v13
      || (char *)v13 + v30 + 1 < (char *)v13 + 1
      || (char *)v13 + v30 + 2 < (char *)v13 + 2
      || (char *)v13 + v30 + 3 < (char *)v13 + 3
      || (v5 - 1) >> 62)
    {
      goto LABEL_11;
    }
    if (v5 >= 0x20)
    {
      v14 = v5 & 0xFFFFFFFFFFFFFFE0;
      v44 = v13 + 8;
      v45 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(v44 - 2) = xmmword_1B22C9B70;
        *(v44 - 1) = xmmword_1B22C9B70;
        *(v44 - 4) = xmmword_1B22C9B70;
        *(v44 - 3) = xmmword_1B22C9B70;
        v44[2] = xmmword_1B22C9B70;
        v44[3] = xmmword_1B22C9B70;
        *v44 = xmmword_1B22C9B70;
        v44[1] = xmmword_1B22C9B70;
        v44 += 8;
        v45 -= 32;
      }
      while (v45);
      if (v5 == v14)
        goto LABEL_13;
      if ((v5 & 0x18) == 0)
      {
LABEL_11:
        v15 = v5 - v14;
        v16 = (_DWORD *)v13 + v14;
        do
        {
          *v16++ = 16842752;
          --v15;
        }
        while (v15);
        goto LABEL_13;
      }
    }
    else
    {
      v14 = 0;
    }
    v46 = v14;
    v14 = v5 & 0xFFFFFFFFFFFFFFF8;
    v47 = (_OWORD *)((char *)v13 + 4 * v46);
    v48 = v46 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v47 = xmmword_1B22C9B70;
      v47[1] = xmmword_1B22C9B70;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    if (v5 != v14)
      goto LABEL_11;
  }
LABEL_13:
  if (!v11)
  {
    v26 = a1[6];
    v27 = a1[7];
    v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 >= 2)
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v26 += v28 & 0xFFFFFFFFFFFFFFFELL;
        v40 = (char *)v13 + 4;
        v41 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v40 - 4) = 1;
          *v40 = 1;
          v40 += 8;
          v41 -= 2;
        }
        while (v41);
        if (v28 == v29)
          goto LABEL_52;
      }
      else
      {
        v29 = 0;
      }
      v42 = (char *)v13 + 4 * v29;
      v43 = v27 - v26;
      do
      {
        *v42 = 1;
        v42 += 4;
        --v43;
      }
      while (v43);
    }
LABEL_52:
    sub_1B2186C8C(*(_QWORD *)(v6 + 232), *(_QWORD *)(v6 + 240), (uint64_t)v13, v5);
    goto LABEL_53;
  }
  if (v10)
  {
    if (v10 == 1)
    {
      v17 = 0;
    }
    else
    {
      v17 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v36 = (char *)v13 + 4;
      v37 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v36 - 4) = 1;
        *v36 = 1;
        v36 += 8;
        v37 -= 2;
      }
      while (v37);
      if (v10 == v17)
        goto LABEL_46;
    }
    v38 = v10 - v17;
    v39 = (char *)v13 + 4 * v17;
    do
    {
      *v39 = 1;
      v39 += 4;
      --v38;
    }
    while (v38);
  }
LABEL_46:
  sub_1B2186AE0(v11, v4, v10, (uint64_t)v13, v5);
LABEL_53:
  ecs_stack_allocator_deallocate(v12, (unint64_t)v13, 4 * v5);
  return swift_release();
}

uint64_t sub_1B218F130(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  unint64_t v48;
  char v50;

  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[1];
  v7 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureFileAsset, (uint64_t)&off_1E638AD98, v3, v4, v5, v7);
  sub_1B1A10AA4(*(_QWORD *)(v6 + 40), (uint64_t)&type metadata for TextureLoadPolicy, &v50);
  if (v50 == 1)
  {
    a2[9] = &type metadata for TextureLoadPolicy;
    a2[10] = &off_1E6390318;
    v8 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1E6390318, v3, v4, v5, v7);
    if (!v3)
    {
      v19 = a1[6];
      v18 = a1[7];
      v20 = v18 - v19;
      if (v18 != v19)
      {
        v21 = a1[6];
        if (v20 < 2)
          goto LABEL_22;
        v21 = v19 + (v20 & 0xFFFFFFFFFFFFFFFELL);
        v22 = (_BYTE *)(v8 + 4 * v19 + 5);
        v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 4) = 1;
          *v22 = 1;
          v22 += 8;
          v23 -= 2;
        }
        while (v23);
        if (v20 != (v20 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_22:
          v24 = (_BYTE *)(v8 + 4 * v21 + 1);
          v25 = v18 - v21;
          do
          {
            *v24 = 1;
            v24 += 4;
            --v25;
          }
          while (v25);
        }
      }
      return swift_release();
    }
    if (v5)
    {
      if (v5 == 1)
      {
        v9 = 0;
      }
      else
      {
        v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
        v31 = (_BYTE *)(v8 + 5);
        v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v31 - 4) = 1;
          *v31 = 1;
          v31 += 8;
          v32 -= 2;
        }
        while (v32);
        if (v5 == v9)
          return swift_release();
      }
      v33 = v5 - v9;
      v34 = (_BYTE *)(v8 + 4 * v9 + 1);
      do
      {
        *v34 = 1;
        v34 += 4;
        --v33;
      }
      while (v33);
    }
    return swift_release();
  }
  v10 = v5;
  v11 = v3;
  if (!v3)
    v5 = a1[7] - a1[6];
  v12 = (_QWORD *)a2[4];
  v13 = ecs_stack_allocator_allocate((uint64_t)v12, 4 * v5, 1);
  if (v5)
  {
    if (v5 < 8)
    {
      v14 = 0;
      goto LABEL_11;
    }
    v14 = 0;
    v30 = 4 * (v5 - 1);
    if ((_QWORD *)((char *)v13 + v30) < v13
      || (char *)v13 + v30 + 1 < (char *)v13 + 1
      || (char *)v13 + v30 + 2 < (char *)v13 + 2
      || (char *)v13 + v30 + 3 < (char *)v13 + 3
      || (v5 - 1) >> 62)
    {
      goto LABEL_11;
    }
    if (v5 >= 0x20)
    {
      v14 = v5 & 0xFFFFFFFFFFFFFFE0;
      v44 = v13 + 8;
      v45 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(v44 - 2) = xmmword_1B22C9B70;
        *(v44 - 1) = xmmword_1B22C9B70;
        *(v44 - 4) = xmmword_1B22C9B70;
        *(v44 - 3) = xmmword_1B22C9B70;
        v44[2] = xmmword_1B22C9B70;
        v44[3] = xmmword_1B22C9B70;
        *v44 = xmmword_1B22C9B70;
        v44[1] = xmmword_1B22C9B70;
        v44 += 8;
        v45 -= 32;
      }
      while (v45);
      if (v5 == v14)
        goto LABEL_13;
      if ((v5 & 0x18) == 0)
      {
LABEL_11:
        v15 = v5 - v14;
        v16 = (_DWORD *)v13 + v14;
        do
        {
          *v16++ = 16842752;
          --v15;
        }
        while (v15);
        goto LABEL_13;
      }
    }
    else
    {
      v14 = 0;
    }
    v46 = v14;
    v14 = v5 & 0xFFFFFFFFFFFFFFF8;
    v47 = (_OWORD *)((char *)v13 + 4 * v46);
    v48 = v46 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v47 = xmmword_1B22C9B70;
      v47[1] = xmmword_1B22C9B70;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    if (v5 != v14)
      goto LABEL_11;
  }
LABEL_13:
  if (!v11)
  {
    v26 = a1[6];
    v27 = a1[7];
    v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 >= 2)
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v26 += v28 & 0xFFFFFFFFFFFFFFFELL;
        v40 = (char *)v13 + 5;
        v41 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v40 - 4) = 1;
          *v40 = 1;
          v40 += 8;
          v41 -= 2;
        }
        while (v41);
        if (v28 == v29)
          goto LABEL_52;
      }
      else
      {
        v29 = 0;
      }
      v42 = (char *)v13 + 4 * v29 + 1;
      v43 = v27 - v26;
      do
      {
        *v42 = 1;
        v42 += 4;
        --v43;
      }
      while (v43);
    }
LABEL_52:
    sub_1B2186C8C(*(_QWORD *)(v6 + 232), *(_QWORD *)(v6 + 240), (uint64_t)v13, v5);
    goto LABEL_53;
  }
  if (v10)
  {
    if (v10 == 1)
    {
      v17 = 0;
    }
    else
    {
      v17 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v36 = (char *)v13 + 5;
      v37 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v36 - 4) = 1;
        *v36 = 1;
        v36 += 8;
        v37 -= 2;
      }
      while (v37);
      if (v10 == v17)
        goto LABEL_46;
    }
    v38 = (char *)v13 + 4 * v17 + 1;
    v39 = v10 - v17;
    do
    {
      *v38 = 1;
      v38 += 4;
      --v39;
    }
    while (v39);
  }
LABEL_46:
  sub_1B2186AE0(v11, v4, v10, (uint64_t)v13, v5);
LABEL_53:
  ecs_stack_allocator_deallocate(v12, (unint64_t)v13, 4 * v5);
  return swift_release();
}

uint64_t sub_1B218F520(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  unint64_t v48;
  char v50;

  v3 = (uint64_t *)a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[1];
  v7 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureFileAsset, (uint64_t)&off_1E638AD98, v3, v4, v5, v7);
  sub_1B1A10AA4(*(_QWORD *)(v6 + 40), (uint64_t)&type metadata for TextureLoadPolicy, &v50);
  if (v50 == 1)
  {
    a2[9] = &type metadata for TextureLoadPolicy;
    a2[10] = &off_1E6390318;
    v8 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadPolicy, (uint64_t)&off_1E6390318, v3, v4, v5, v7);
    if (!v3)
    {
      v19 = a1[6];
      v18 = a1[7];
      v20 = v18 - v19;
      if (v18 != v19)
      {
        v21 = a1[6];
        if (v20 < 2)
          goto LABEL_22;
        v21 = v19 + (v20 & 0xFFFFFFFFFFFFFFFELL);
        v22 = (_BYTE *)(v8 + 4 * v19 + 4);
        v23 = v20 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v22 - 4) = 1;
          *v22 = 1;
          v22 += 8;
          v23 -= 2;
        }
        while (v23);
        if (v20 != (v20 & 0xFFFFFFFFFFFFFFFELL))
        {
LABEL_22:
          v24 = v18 - v21;
          v25 = (_BYTE *)(v8 + 4 * v21);
          do
          {
            *v25 = 1;
            v25 += 4;
            --v24;
          }
          while (v24);
        }
      }
      return swift_release();
    }
    if (v5)
    {
      if (v5 == 1)
      {
        v9 = 0;
      }
      else
      {
        v9 = v5 & 0xFFFFFFFFFFFFFFFELL;
        v31 = (_BYTE *)(v8 + 4);
        v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v31 - 4) = 1;
          *v31 = 1;
          v31 += 8;
          v32 -= 2;
        }
        while (v32);
        if (v5 == v9)
          return swift_release();
      }
      v33 = v5 - v9;
      v34 = (_BYTE *)(v8 + 4 * v9);
      do
      {
        *v34 = 1;
        v34 += 4;
        --v33;
      }
      while (v33);
    }
    return swift_release();
  }
  v10 = v5;
  v11 = v3;
  if (!v3)
    v5 = a1[7] - a1[6];
  v12 = (_QWORD *)a2[4];
  v13 = ecs_stack_allocator_allocate((uint64_t)v12, 4 * v5, 1);
  if (v5)
  {
    if (v5 < 8)
    {
      v14 = 0;
      goto LABEL_11;
    }
    v14 = 0;
    v30 = 4 * (v5 - 1);
    if ((_QWORD *)((char *)v13 + v30) < v13
      || (char *)v13 + v30 + 1 < (char *)v13 + 1
      || (char *)v13 + v30 + 2 < (char *)v13 + 2
      || (char *)v13 + v30 + 3 < (char *)v13 + 3
      || (v5 - 1) >> 62)
    {
      goto LABEL_11;
    }
    if (v5 >= 0x20)
    {
      v14 = v5 & 0xFFFFFFFFFFFFFFE0;
      v44 = v13 + 8;
      v45 = v5 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        *(v44 - 2) = xmmword_1B22C9B70;
        *(v44 - 1) = xmmword_1B22C9B70;
        *(v44 - 4) = xmmword_1B22C9B70;
        *(v44 - 3) = xmmword_1B22C9B70;
        v44[2] = xmmword_1B22C9B70;
        v44[3] = xmmword_1B22C9B70;
        *v44 = xmmword_1B22C9B70;
        v44[1] = xmmword_1B22C9B70;
        v44 += 8;
        v45 -= 32;
      }
      while (v45);
      if (v5 == v14)
        goto LABEL_13;
      if ((v5 & 0x18) == 0)
      {
LABEL_11:
        v15 = v5 - v14;
        v16 = (_DWORD *)v13 + v14;
        do
        {
          *v16++ = 16842752;
          --v15;
        }
        while (v15);
        goto LABEL_13;
      }
    }
    else
    {
      v14 = 0;
    }
    v46 = v14;
    v14 = v5 & 0xFFFFFFFFFFFFFFF8;
    v47 = (_OWORD *)((char *)v13 + 4 * v46);
    v48 = v46 - (v5 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      *v47 = xmmword_1B22C9B70;
      v47[1] = xmmword_1B22C9B70;
      v47 += 2;
      v48 += 8;
    }
    while (v48);
    if (v5 != v14)
      goto LABEL_11;
  }
LABEL_13:
  if (!v11)
  {
    v26 = a1[6];
    v27 = a1[7];
    v28 = v27 - v26;
    if (v27 != v26)
    {
      if (v28 >= 2)
      {
        v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
        v26 += v28 & 0xFFFFFFFFFFFFFFFELL;
        v40 = (char *)v13 + 4;
        v41 = v28 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(v40 - 4) = 1;
          *v40 = 1;
          v40 += 8;
          v41 -= 2;
        }
        while (v41);
        if (v28 == v29)
          goto LABEL_52;
      }
      else
      {
        v29 = 0;
      }
      v42 = (char *)v13 + 4 * v29;
      v43 = v27 - v26;
      do
      {
        *v42 = 1;
        v42 += 4;
        --v43;
      }
      while (v43);
    }
LABEL_52:
    sub_1B2186C8C(*(_QWORD *)(v6 + 232), *(_QWORD *)(v6 + 240), (uint64_t)v13, v5);
    goto LABEL_53;
  }
  if (v10)
  {
    if (v10 == 1)
    {
      v17 = 0;
    }
    else
    {
      v17 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v36 = (char *)v13 + 4;
      v37 = v10 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v36 - 4) = 1;
        *v36 = 1;
        v36 += 8;
        v37 -= 2;
      }
      while (v37);
      if (v10 == v17)
        goto LABEL_46;
    }
    v38 = v10 - v17;
    v39 = (char *)v13 + 4 * v17;
    do
    {
      *v39 = 1;
      v39 += 4;
      --v38;
    }
    while (v38);
  }
LABEL_46:
  sub_1B2186AE0(v11, v4, v10, (uint64_t)v13, v5);
LABEL_53:
  ecs_stack_allocator_deallocate(v12, (unint64_t)v13, 4 * v5);
  return swift_release();
}

uint64_t sub_1B218F900(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 v61[64];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v5 = (uint64_t *)a1[11];
  v4 = a1[12];
  v6 = a1[13];
  v7 = a1[1];
  v8 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for TextureRequireCPURepresentation, (uint64_t)&off_1E63B6350, v5, v4, v6, v8);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), (uint64_t)&type metadata for TextureLoadingOptions, v61);
  if (v61[0] == 1)
  {
    a2[9] = &type metadata for TextureLoadingOptions;
    a2[10] = &off_1E63A6E90;
    v9 = sub_1B1A12038((uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, v5, v4, v6, v8);
    v10 = (_QWORD *)v9;
    if (v5)
    {
      if (v6)
      {
        v11 = a1[3];
        v12 = *a1;
        do
        {
          v13 = *v5;
          v14 = v5 + 1;
          v62 = v12;
          v63 = v7;
          v64 = v8;
          v65 = v11;
          v66 = v13;
          v15 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v16 = *(_QWORD *)(v15 + 128);
          if (!*(_QWORD *)(v16 + 16)
            || (v17 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v18 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v15 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v10 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v10 |= *(_QWORD *)v61;
          v10 += 8;
          ++v11;
          --v6;
          v5 = v14;
        }
        while (v6);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      if (v35 != v36)
      {
        v40 = v8;
        v41 = a1[3];
        v42 = *a1;
        v43 = (_QWORD *)(v9 + (v35 << 6));
        do
        {
          v62 = v42;
          v63 = v7;
          v64 = v40;
          v65 = v41;
          v66 = v35;
          v44 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v45 = *(_QWORD *)(v44 + 128);
          if (!*(_QWORD *)(v45 + 16)
            || (v46 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v47 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v44 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v43 = 0;
          }
          ++v35;
          sub_1B20F2F40((uint64_t)v61);
          *v43 |= *(_QWORD *)v61;
          v43 += 8;
          ++v41;
        }
        while (v36 != v35);
      }
    }
    return swift_release();
  }
  else
  {
    v55 = v4;
    v19 = v6;
    if (!v5)
      v19 = a1[7] - a1[6];
    v60 = v19;
    v67 = v8;
    v20 = a2[4];
    v21 = v19 << 6;
    v22 = ecs_stack_allocator_allocate(v20, v19 << 6, 8);
    v23 = v60;
    if (v60)
    {
      v24 = v22 + 4;
      do
      {
        *(v24 - 3) = 0;
        *(v24 - 2) = 0;
        *(v24 - 4) = 98;
        *((_BYTE *)v24 - 8) = -2;
        v24[1] = 0;
        v24[2] = 0;
        *v24 = 0;
        *((_WORD *)v24 + 12) = 768;
        v24 += 8;
        --v23;
      }
      while (v23);
    }
    v58 = v21;
    v57 = (_QWORD *)v20;
    v59 = (uint64_t)v22;
    if (v5)
    {
      v56 = v5;
      if (v6)
      {
        v25 = a1[3];
        v26 = *a1;
        v27 = v6;
        v28 = v22;
        do
        {
          v29 = *v5++;
          v62 = v26;
          v63 = v7;
          v64 = v67;
          v65 = v25;
          v66 = v29;
          v30 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v31 = *(_QWORD *)(v30 + 128);
          if (!*(_QWORD *)(v31 + 16)
            || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v33 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v28 = 0;
          }
          sub_1B20F2F40((uint64_t)v61);
          *v28 |= *(_QWORD *)v61;
          v28 += 8;
          ++v25;
          --v27;
        }
        while (v27);
      }
      v34 = v59;
      sub_1B21867A0(v56, v55, v6, v59, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      if (v38 != v39)
      {
        v48 = a1[3];
        v49 = *a1;
        v50 = v22;
        do
        {
          v62 = v49;
          v63 = v7;
          v64 = v67;
          v65 = v48;
          v66 = v38;
          v51 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 16);
          v52 = *(_QWORD *)(v51 + 128);
          if (!*(_QWORD *)(v52 + 16)
            || (v53 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v54 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) != &type metadata for TextureLoadingOptions)
          {
            *v50 = 0;
          }
          ++v38;
          sub_1B20F2F40((uint64_t)v61);
          *v50 |= *(_QWORD *)v61;
          v50 += 8;
          ++v48;
        }
        while (v39 != v38);
      }
      v34 = v59;
      sub_1B218694C(*(_QWORD *)(v7 + 232), *(_QWORD *)(v7 + 240), v59, v60);
    }
    ecs_stack_allocator_deallocate(v57, v34, v58);
    return swift_release();
  }
}

uint64_t sub_1B218FD70(_QWORD *a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  __int16 v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  int v106;
  _QWORD v107[3];
  char v108;
  uint64_t v109;
  __int16 v110;
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  uint64_t v117;

  v7 = (uint64_t *)a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[1];
  v11 = a1[2];
  swift_retain();
  v12 = (int *)sub_1B1A12038((uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1E6374B40, v7, v8, v9, v11);
  sub_1B1A10AA4(*(_QWORD *)(v10 + 40), (uint64_t)&type metadata for TextureCPURuntime, v107);
  if (LOBYTE(v107[0]) == 1)
  {
    a2[9] = &type metadata for TextureCPURuntime;
    a2[10] = &off_1E638FF20;
    v13 = sub_1B1A12038((uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1E638FF20, v7, v8, v9, v11);
    if (v7)
    {
      if (v9)
      {
        v14 = *a4;
        v91 = *((_BYTE *)a4 + 9);
        v95 = *((_BYTE *)a4 + 8);
        v87 = *((_BYTE *)a4 + 10);
        v79 = a4[4];
        v83 = a4[2];
        v71 = a4[6];
        v75 = a4[5];
        v15 = a4[8];
        v67 = a4[7];
        v16 = v13 + 56;
        v17 = *((_DWORD *)a4 + 18);
        do
        {
          v20 = *a3;
          v18 = a3[1];
          if (*a3)
          {
            v18 += (uint64_t)*v12 << 9;
            v19 = 512;
          }
          else
          {
            v19 = a3[2];
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(_QWORD *)(v16 - 56) = v20;
          *(_QWORD *)(v16 - 48) = v18;
          *(_QWORD *)(v16 - 40) = v19;
          *(_QWORD *)(v16 - 24) = v14;
          *(_BYTE *)(v16 - 16) = v95;
          *(_BYTE *)(v16 - 15) = v91;
          *(_BYTE *)(v16 - 14) = v87;
          *(_QWORD *)(v16 - 8) = v83;
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v16 + 16) = v75;
          *(_QWORD *)(v16 + 24) = v71;
          *(_QWORD *)(v16 + 32) = v67;
          *(_QWORD *)(v16 + 40) = v15;
          *(_DWORD *)(v16 + 48) = v17;
          ++v12;
          *(_QWORD *)(v16 + 8) = v79;
          v16 += 120;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v35 = a1[6];
      v36 = a1[7];
      v37 = v36 - v35;
      if (v36 != v35)
      {
        v41 = *a4;
        v93 = *((_BYTE *)a4 + 9);
        v97 = *((_BYTE *)a4 + 8);
        v89 = *((_BYTE *)a4 + 10);
        v81 = a4[4];
        v85 = a4[2];
        v73 = a4[6];
        v77 = a4[5];
        v42 = a4[8];
        v69 = a4[7];
        v43 = *((_DWORD *)a4 + 18);
        v44 = &v12[v35];
        v45 = v13 + 120 * v35 + 56;
        do
        {
          v48 = *a3;
          v46 = a3[1];
          if (*a3)
          {
            v46 += (uint64_t)*v44 << 9;
            v47 = 512;
          }
          else
          {
            v47 = a3[2];
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(_QWORD *)(v45 - 56) = v48;
          *(_QWORD *)(v45 - 48) = v46;
          *(_QWORD *)(v45 - 40) = v47;
          *(_QWORD *)(v45 - 24) = v41;
          *(_BYTE *)(v45 - 16) = v97;
          *(_BYTE *)(v45 - 15) = v93;
          *(_BYTE *)(v45 - 14) = v89;
          *(_QWORD *)(v45 - 8) = v85;
          *(_QWORD *)v45 = 0;
          *(_QWORD *)(v45 + 16) = v77;
          *(_QWORD *)(v45 + 24) = v73;
          *(_QWORD *)(v45 + 32) = v69;
          *(_QWORD *)(v45 + 40) = v42;
          *(_DWORD *)(v45 + 48) = v43;
          ++v44;
          *(_QWORD *)(v45 + 8) = v81;
          v45 += 120;
          --v37;
        }
        while (v37);
      }
    }
  }
  else
  {
    v59 = v8;
    v64 = v10;
    v21 = v9;
    if (!v7)
      v21 = a1[7] - a1[6];
    RGTextureDescriptor.init()((uint64_t)&v99);
    memset(v107, 0, sizeof(v107));
    v108 = 0;
    v109 = v99;
    v110 = v100;
    v111 = v101;
    v112 = v102;
    v113 = v103;
    v114 = v104;
    v115 = v105;
    v116 = v106;
    v117 = MEMORY[0x1E0DEE9D8];
    v22 = a2[4];
    v23 = sub_1B2199950(v21, (uint64_t)v107, v22);
    v25 = v24;
    v60 = v26;
    swift_bridgeObjectRelease();
    v62 = (_QWORD *)v22;
    v63 = (uint64_t)v23;
    v61 = v25;
    if (v7)
    {
      v58 = v7;
      if (v9)
      {
        v27 = *a4;
        v92 = *((_BYTE *)a4 + 9);
        v96 = *((_BYTE *)a4 + 8);
        v88 = *((_BYTE *)a4 + 10);
        v80 = a4[4];
        v84 = a4[2];
        v72 = a4[6];
        v76 = a4[5];
        v66 = a4[8];
        v68 = a4[7];
        v28 = v23 + 7;
        v29 = v9;
        v30 = *((_DWORD *)a4 + 18);
        do
        {
          v33 = *a3;
          v31 = a3[1];
          if (*a3)
          {
            v31 += (uint64_t)*v12 << 9;
            v32 = 512;
          }
          else
          {
            v32 = a3[2];
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(v28 - 7) = v33;
          *(v28 - 6) = v31;
          *(v28 - 5) = v32;
          *(v28 - 3) = v27;
          *((_BYTE *)v28 - 16) = v96;
          *((_BYTE *)v28 - 15) = v92;
          *((_BYTE *)v28 - 14) = v88;
          *(v28 - 1) = v84;
          *v28 = 0;
          v28[2] = v76;
          v28[3] = v72;
          v28[4] = v68;
          v28[5] = v66;
          *((_DWORD *)v28 + 12) = v30;
          ++v12;
          v28[1] = v80;
          v28 += 15;
          --v29;
        }
        while (v29);
      }
      v34 = v63;
      sub_1B2184C70(v58, v59, v9, v63, v60);
    }
    else
    {
      v38 = a1[6];
      v39 = a1[7];
      v40 = v39 - v38;
      if (v39 != v38)
      {
        v50 = *a4;
        v94 = *((_BYTE *)a4 + 9);
        v98 = *((_BYTE *)a4 + 8);
        v90 = *((_BYTE *)a4 + 10);
        v82 = a4[4];
        v86 = a4[2];
        v74 = a4[6];
        v78 = a4[5];
        v51 = a4[8];
        v70 = a4[7];
        v52 = &v12[v38];
        v53 = v23 + 7;
        v54 = *((_DWORD *)a4 + 18);
        do
        {
          v57 = *a3;
          v55 = a3[1];
          if (*a3)
          {
            v55 += (uint64_t)*v52 << 9;
            v56 = 512;
          }
          else
          {
            v56 = a3[2];
          }
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          *(v53 - 7) = v57;
          *(v53 - 6) = v55;
          *(v53 - 5) = v56;
          *(v53 - 3) = v50;
          *((_BYTE *)v53 - 16) = v98;
          *((_BYTE *)v53 - 15) = v94;
          *((_BYTE *)v53 - 14) = v90;
          *(v53 - 1) = v86;
          *v53 = 0;
          v53[2] = v78;
          v53[3] = v74;
          v53[4] = v70;
          v53[5] = v51;
          *((_DWORD *)v53 + 12) = v54;
          ++v52;
          v53[1] = v82;
          v53 += 15;
          --v40;
        }
        while (v40);
      }
      v34 = v63;
      sub_1B2184DC0(*(_QWORD *)(v64 + 232), *(_QWORD *)(v64 + 240), v63, v60);
    }
    ecs_stack_allocator_deallocate(v62, v34, 120 * v61);
  }
  return swift_release();
}

uint64_t sub_1B2190320(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int32x4_t *v32;
  int64x2_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int32x4_t *v48;
  int64x2_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  _DWORD *v53;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int32x4_t *v59;
  int64x2_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  _DWORD *v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int32x4_t *v69;
  int64x2_t v70;
  unint64_t v71;
  int v72;
  _DWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  char v77;

  v6 = (uint64_t *)a1[11];
  v5 = a1[12];
  v7 = a1[13];
  v8 = a1[1];
  v9 = a1[2];
  swift_retain();
  sub_1B1A12038((uint64_t)&type metadata for CurveComponent, (uint64_t)&off_1E637EB48, v6, v5, v7, v9);
  sub_1B1A10AA4(*(_QWORD *)(v8 + 40), (uint64_t)&type metadata for CurveRuntime, &v77);
  if (v77 == 1)
  {
    a2[9] = &type metadata for CurveRuntime;
    a2[10] = &off_1E6374B40;
    v10 = sub_1B1A12038((uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1E6374B40, v6, v5, v7, v9);
    if (!v6)
    {
      v21 = a1[6];
      v20 = a1[7];
      v22 = v20 - v21;
      if (v20 != v21)
      {
        v23 = a1[3];
        v24 = *a3;
        v25 = a1[6];
        if (v22 < 8)
          goto LABEL_19;
        v26 = v23 - v21 + v24;
        v27 = vdupq_n_s64(v21);
        v25 = v21 + (v22 & 0xFFFFFFFFFFFFFFF8);
        v28 = vaddq_s64(v27, (int64x2_t)xmmword_1B2294DB0);
        v29 = vaddq_s64(v27, (int64x2_t)xmmword_1B2244C80);
        v30 = vdupq_n_s64(v26);
        v31 = vdupq_n_s64(v26 + 4);
        v32 = (int32x4_t *)(v10 + 4 * v21 + 16);
        v33 = vdupq_n_s64(8uLL);
        v34 = v22 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v32[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v30, v29), (int32x4_t)vaddq_s64(v30, v28));
          *v32 = vuzp1q_s32((int32x4_t)vaddq_s64(v31, v29), (int32x4_t)vaddq_s64(v31, v28));
          v28 = vaddq_s64(v28, v33);
          v29 = vaddq_s64(v29, v33);
          v32 += 2;
          v34 -= 8;
        }
        while (v34);
        if (v22 != (v22 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_19:
          v35 = v25 + v23 + v24 - v21;
          v36 = v20 - v25;
          v37 = (_DWORD *)(v10 + 4 * v25);
          do
          {
            *v37++ = v35++;
            --v36;
          }
          while (v36);
        }
      }
      return swift_release();
    }
    if (v7)
    {
      v11 = a1[3];
      v12 = *a3;
      if (v7 >= 8)
      {
        v13 = v7 & 0xFFFFFFFFFFFFFFF8;
        v44 = vdupq_n_s64(v12 + v11);
        v45 = vdupq_n_s64(v12 + v11 + 4);
        v46 = (int64x2_t)xmmword_1B2294DB0;
        v47 = (int64x2_t)xmmword_1B2244C80;
        v48 = (int32x4_t *)(v10 + 16);
        v49 = vdupq_n_s64(8uLL);
        v50 = v7 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v48[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v44, v47), (int32x4_t)vaddq_s64(v44, v46));
          *v48 = vuzp1q_s32((int32x4_t)vaddq_s64(v45, v47), (int32x4_t)vaddq_s64(v45, v46));
          v46 = vaddq_s64(v46, v49);
          v47 = vaddq_s64(v47, v49);
          v48 += 2;
          v50 -= 8;
        }
        while (v50);
        if (v7 == v13)
          return swift_release();
      }
      else
      {
        v13 = 0;
      }
      v51 = v13 + v11 + v12;
      v52 = v7 - v13;
      v53 = (_DWORD *)(v10 + 4 * v13);
      do
      {
        *v53++ = v51++;
        --v52;
      }
      while (v52);
    }
    return swift_release();
  }
  v14 = v7;
  if (!v6)
    v7 = a1[7] - a1[6];
  v75 = (_QWORD *)a2[4];
  v15 = ecs_stack_allocator_allocate((uint64_t)v75, 4 * v7, 4);
  v16 = (unint64_t)v15;
  if (v7)
    memset(v15, 255, 4 * v7);
  if (!v6)
  {
    v38 = a1[6];
    v39 = a1[7];
    v40 = v39 - v38;
    if (v39 != v38)
    {
      v41 = a1[3];
      v42 = *a3;
      if (v40 >= 8)
      {
        v43 = v40 & 0xFFFFFFFFFFFFFFF8;
        v38 += v40 & 0xFFFFFFFFFFFFFFF8;
        v65 = vdupq_n_s64(v42 + v41);
        v66 = vdupq_n_s64(v42 + v41 + 4);
        v67 = (int64x2_t)xmmword_1B2294DB0;
        v68 = (int64x2_t)xmmword_1B2244C80;
        v69 = (int32x4_t *)(v16 + 16);
        v70 = vdupq_n_s64(8uLL);
        v71 = v40 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v69[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v65, v68), (int32x4_t)vaddq_s64(v65, v67));
          *v69 = vuzp1q_s32((int32x4_t)vaddq_s64(v66, v68), (int32x4_t)vaddq_s64(v66, v67));
          v67 = vaddq_s64(v67, v70);
          v68 = vaddq_s64(v68, v70);
          v69 += 2;
          v71 -= 8;
        }
        while (v71);
        if (v40 == v43)
          goto LABEL_42;
      }
      else
      {
        v43 = 0;
      }
      v72 = v43 + v41 + v42;
      v73 = (_DWORD *)(v16 + 4 * v43);
      v74 = v39 - v38;
      do
      {
        *v73++ = v72++;
        --v74;
      }
      while (v74);
    }
LABEL_42:
    sub_1B2186F6C(*(_QWORD *)(v8 + 232), *(_QWORD *)(v8 + 240), v16, v7);
    goto LABEL_43;
  }
  if (v14)
  {
    v17 = a1[3];
    v18 = *a3;
    if (v14 >= 8)
    {
      v19 = v14 & 0xFFFFFFFFFFFFFFF8;
      v55 = vdupq_n_s64(v18 + v17);
      v56 = vdupq_n_s64(v18 + v17 + 4);
      v57 = (int64x2_t)xmmword_1B2294DB0;
      v58 = (int64x2_t)xmmword_1B2244C80;
      v59 = (int32x4_t *)(v16 + 16);
      v60 = vdupq_n_s64(8uLL);
      v61 = v14 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v59[-1] = vuzp1q_s32((int32x4_t)vaddq_s64(v55, v58), (int32x4_t)vaddq_s64(v55, v57));
        *v59 = vuzp1q_s32((int32x4_t)vaddq_s64(v56, v58), (int32x4_t)vaddq_s64(v56, v57));
        v57 = vaddq_s64(v57, v60);
        v58 = vaddq_s64(v58, v60);
        v59 += 2;
        v61 -= 8;
      }
      while (v61);
      if (v14 == v19)
        goto LABEL_36;
    }
    else
    {
      v19 = 0;
    }
    v62 = v19 + v17 + v18;
    v63 = v14 - v19;
    v64 = (_DWORD *)(v16 + 4 * v19);
    do
    {
      *v64++ = v62++;
      --v63;
    }
    while (v63);
  }
LABEL_36:
  sub_1B2186E20(v6, v5, v14, v16, v7);
LABEL_43:
  ecs_stack_allocator_deallocate(v75, v16, 4 * v7);
  return swift_release();
}

__n128 sub_1B2190790(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x2_t *v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  float32x2_t *v10;

  v2 = (uint64_t *)a1[11];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[2];
  sub_1B1A12038((uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1E63A8DD0, v2, v3, v4, v5);
  v6 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v2, v3, v4, v5);
  if (v2)
  {
    for (; v4; --v4)
    {
      result.n128_u64[0] = (unint64_t)vadd_f32(*v6, *v6);
      result.n128_f32[2] = v6[1].f32[0] + v6[1].f32[0];
      result.n128_u32[3] = 0;
      *(__n128 *)v6->f32 = result;
      v6 += 2;
    }
  }
  else
  {
    v8 = a1[6];
    v9 = a1[7] - v8;
    if (v9)
    {
      v10 = &v6[2 * v8];
      do
      {
        result.n128_u64[0] = (unint64_t)vadd_f32(*v10, *v10);
        result.n128_f32[2] = v10[1].f32[0] + v10[1].f32[0];
        result.n128_u32[3] = 0;
        *(__n128 *)v10->f32 = result;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

__n128 sub_1B2190884(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x2_t *v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  float32x2_t *v10;

  v2 = (uint64_t *)a1[11];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[2];
  sub_1B1A12038((uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1E63987F0, v2, v3, v4, v5);
  v6 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v2, v3, v4, v5);
  if (v2)
  {
    for (; v4; --v4)
    {
      result.n128_u64[0] = (unint64_t)vadd_f32(*v6, *v6);
      result.n128_f32[2] = v6[1].f32[0] + v6[1].f32[0];
      result.n128_u32[3] = 0;
      *(__n128 *)v6->f32 = result;
      v6 += 2;
    }
  }
  else
  {
    v8 = a1[6];
    v9 = a1[7] - v8;
    if (v9)
    {
      v10 = &v6[2 * v8];
      do
      {
        result.n128_u64[0] = (unint64_t)vadd_f32(*v10, *v10);
        result.n128_f32[2] = v10[1].f32[0] + v10[1].f32[0];
        result.n128_u32[3] = 0;
        *(__n128 *)v10->f32 = result;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

__n128 sub_1B2190978(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x2_t *v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  float32x2_t *v10;

  v2 = (uint64_t *)a1[11];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[2];
  sub_1B1A12038((uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1E63AE088, v2, v3, v4, v5);
  v6 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v2, v3, v4, v5);
  if (v2)
  {
    for (; v4; --v4)
    {
      result.n128_u64[0] = (unint64_t)vadd_f32(*v6, *v6);
      result.n128_f32[2] = v6[1].f32[0] + v6[1].f32[0];
      result.n128_u32[3] = 0;
      *(__n128 *)v6->f32 = result;
      v6 += 2;
    }
  }
  else
  {
    v8 = a1[6];
    v9 = a1[7] - v8;
    if (v9)
    {
      v10 = &v6[2 * v8];
      do
      {
        result.n128_u64[0] = (unint64_t)vadd_f32(*v10, *v10);
        result.n128_f32[2] = v10[1].f32[0] + v10[1].f32[0];
        result.n128_u32[3] = 0;
        *(__n128 *)v10->f32 = result;
        v10 += 2;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

float32x2_t *sub_1B2190A6C(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x2_t *result;
  _DWORD *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  float32x2_t *v14;
  __int128 v16;

  v2 = (uint64_t *)a1[11];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[2];
  v6 = sub_1B1A12038((uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CDA8, v2, v3, v4, v5);
  result = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v2, v3, v4, v5);
  if (v2)
  {
    if (v4)
    {
      v8 = (_DWORD *)(v6 + 12);
      do
      {
        if (*(v8 - 1) == -1 && *v8 == 0)
        {
          *(float32x2_t *)&v10 = vmul_f32(*result, (float32x2_t)0x3F0000003F000000);
          *((float *)&v10 + 2) = result[1].f32[0] * 0.5;
          HIDWORD(v10) = 0;
          *(_OWORD *)result->f32 = v10;
        }
        v8 += 10;
        result += 2;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    v11 = a1[6];
    v12 = a1[7] - v11;
    if (v12)
    {
      v13 = (_DWORD *)(v6 + 40 * v11 + 12);
      v14 = &result[2 * v11];
      do
      {
        if (*(v13 - 1) == -1 && *v13 == 0)
        {
          *(float32x2_t *)&v16 = vmul_f32(*v14, (float32x2_t)0x3F0000003F000000);
          *((float *)&v16 + 2) = v14[1].f32[0] * 0.5;
          HIDWORD(v16) = 0;
          *(_OWORD *)v14->f32 = v16;
        }
        v13 += 10;
        v14 += 2;
        --v12;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t sub_1B2190BC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void **v31;
  uint64_t v32;
  _BYTE *v33;
  void **v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t *v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;

  v4 = a1[1];
  v5 = swift_retain();
  v6 = (void **)sub_1B19F6584(v5, (uint64_t)a1);
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[2];
  v44 = (uint64_t *)a1[11];
  v10 = (_BYTE *)sub_1B1A12038((uint64_t)&type metadata for AudioAnalyzer, (uint64_t)&off_1E6379118, v44, v7, v8, v9);
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for AudioSpectrum, &v52);
  v42 = v4;
  if (v52 == 1)
  {
    a2[9] = &type metadata for AudioSpectrum;
    a2[10] = &off_1E63793F8;
    v11 = sub_1B1A12038((uint64_t)&type metadata for AudioSpectrum, (uint64_t)&off_1E63793F8, v44, v7, v8, v9);
    if (v44)
    {
      if (v8)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AudioPlayerComponent(0) - 8) + 72);
        do
        {
          sub_1B1BB4990(v6, v10, v11);
          if (v2)
            break;
          v11 += 64;
          v10 += 4;
          v6 = (void **)((char *)v6 + v12);
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v23 = a1[6];
      v22 = a1[7];
      v24 = v22 - v23;
      if (v22 != v23)
      {
        v28 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AudioPlayerComponent(0) - 8) + 72);
        v29 = v11 + (v23 << 6);
        v30 = &v10[4 * v23];
        v31 = (void **)((char *)v6 + v23 * v28);
        do
        {
          sub_1B1BB4990(v31, v30, v29);
          if (v2)
            break;
          v29 += 64;
          v30 += 4;
          v31 = (void **)((char *)v31 + v28);
          --v24;
        }
        while (v24);
      }
    }
  }
  else
  {
    v37 = v7;
    v13 = v8;
    if (!v44)
      v13 = a1[7] - a1[6];
    v14 = sub_1B2228B0C();
    *(_QWORD *)(v14 + 16) = 2048;
    bzero((void *)(v14 + 32), 0x2000uLL);
    v15 = sub_1B2228B0C();
    *(_QWORD *)(v15 + 16) = 2048;
    bzero((void *)(v15 + 32), 0x2000uLL);
    *(_QWORD *)&v45 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v45 + 1) = MEMORY[0x1E0DEE9D8];
    v46 = MEMORY[0x1E0DEE9D8];
    v47 = 0;
    v48 = v14;
    v49 = v15;
    v50 = 0;
    v51 = 1;
    v40 = (_QWORD *)a2[4];
    v41 = sub_1B21A043C(v13, &v45, (uint64_t)v40);
    v38 = v17;
    v39 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v44)
    {
      if (v8)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AudioPlayerComponent(0) - 8) + 72);
        v19 = v8;
        v20 = (uint64_t)v41;
        while (1)
        {
          sub_1B1BB4990(v6, v10, v20);
          if (v2)
            break;
          v20 += 64;
          v10 += 4;
          v6 = (void **)((char *)v6 + v18);
          if (!--v19)
            goto LABEL_15;
        }
        v21 = (unint64_t)v41;
      }
      else
      {
LABEL_15:
        v21 = (unint64_t)v41;
        sub_1B2183C0C(v44, v37, v8, (uint64_t)v41, v38);
      }
    }
    else
    {
      v26 = a1[6];
      v25 = a1[7];
      v27 = v25 - v26;
      if (v25 == v26)
      {
        v21 = (unint64_t)v41;
LABEL_28:
        sub_1B2183D58(*(_QWORD *)(v42 + 232), *(_QWORD *)(v42 + 240), v21, v38);
      }
      else
      {
        v32 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AudioPlayerComponent(0) - 8) + 72);
        v33 = &v10[4 * v26];
        v34 = (void **)((char *)v6 + v26 * v32);
        v21 = (unint64_t)v41;
        v35 = (uint64_t)v41;
        while (1)
        {
          sub_1B1BB4990(v34, v33, v35);
          if (v2)
            break;
          v35 += 64;
          v33 += 4;
          v34 = (void **)((char *)v34 + v32);
          if (!--v27)
            goto LABEL_28;
        }
      }
    }
    ecs_stack_allocator_deallocate(v40, v21, v39 << 6);
  }
  return swift_release();
}

uint64_t sub_1B2190F64(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  id *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id *v45;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  id *v53;
  uint64_t v54;
  char v55;

  v54 = a2;
  v3 = type metadata accessor for AudioPlayerComponent(0);
  v52 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (_QWORD **)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (uint64_t *)a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[1];
  v11 = a1[2];
  swift_retain();
  v12 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for AudioFileAsset, (uint64_t)&off_1E637DF38, v7, v8, v9, v11);
  v51 = v8;
  v13 = sub_1B1A12038((uint64_t)&type metadata for AudioController, (uint64_t)&off_1E6383488, v7, v8, v9, v11);
  v14 = v53;
  sub_1B1A10AA4(*(_QWORD *)(v10 + 40), v3, &v55);
  if (v55 != 1)
  {
    v47 = a1;
    v49 = v10;
    v50 = v7;
    v19 = v9;
    if (!v7)
      v19 = v47[7] - v47[6];
    *v6 = 0;
    v20 = (char *)v6 + *(int *)(v3 + 20);
    v21 = sub_1B2228110();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
    v22 = *(_QWORD *)(v54 + 32);
    v23 = *(_QWORD *)(v52 + 72);
    v24 = *(unsigned __int8 *)(v52 + 80) + 1;
    v48 = v23 * v19;
    v25 = (id *)ecs_stack_allocator_allocate(v22, v23 * v19, v24);
    v52 = v19;
    v53 = v25;
    if (v19)
    {
      v27 = v52;
      v26 = (uint64_t)v53;
      do
      {
        sub_1B1792810((uint64_t)v6, v26, type metadata accessor for AudioPlayerComponent);
        v26 += v23;
        --v27;
      }
      while (v27);
    }
    sub_1B1A04628((uint64_t)v6, type metadata accessor for AudioPlayerComponent);
    v28 = v50;
    if (v50)
    {
      v29 = (unint64_t)v53;
      if (v9)
      {
        v30 = v53;
        v31 = v9;
        while (1)
        {
          sub_1B1BB4264(v12, v13, v30);
          if (v14)
            break;
          v30 = (id *)((char *)v30 + v23);
          v13 += 3;
          v12 += 6;
          if (!--v31)
            goto LABEL_18;
        }
LABEL_31:
        ecs_stack_allocator_deallocate(*(_QWORD **)(v54 + 32), v29, v48);
        return swift_release();
      }
LABEL_18:
      v32 = v54;
      sub_1B2183E9C(v28, v51, v9, v29, v52);
    }
    else
    {
      v40 = v47[6];
      v41 = v47[7];
      v42 = v41 - v40;
      v29 = (unint64_t)v53;
      if (v41 != v40)
      {
        v43 = v13 + 3 * v40;
        v44 = &v12[6 * v40];
        v45 = v53;
        do
        {
          sub_1B1BB4264(v44, v43, v45);
          if (v14)
            goto LABEL_31;
          v45 = (id *)((char *)v45 + v23);
          v43 += 3;
          v44 += 6;
        }
        while (--v42);
      }
      v32 = v54;
      sub_1B2183FF8(*(_QWORD *)(v49 + 232), *(_QWORD *)(v49 + 240), v29, v52);
    }
    ecs_stack_allocator_deallocate(*(_QWORD **)(v32 + 32), v29, v48);
    return swift_release();
  }
  v15 = v54;
  *(_QWORD *)(v54 + 72) = v3;
  *(_QWORD *)(v15 + 80) = &off_1E639B140;
  v16 = sub_1B19F6584(v10, (uint64_t)a1);
  v17 = (id *)v16;
  if (v7)
  {
    if (v9)
    {
      v18 = *(_QWORD *)(v52 + 72);
      do
      {
        sub_1B1BB4264(v12, v13, v17);
        if (v14)
          break;
        v17 = (id *)((char *)v17 + v18);
        v13 += 3;
        v12 += 6;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    v33 = a1[6];
    v34 = a1[7];
    v35 = v34 - v33;
    if (v34 != v33)
    {
      v36 = *(_QWORD *)(v52 + 72);
      v37 = (id *)(v16 + v33 * v36);
      v38 = v13 + 3 * v33;
      v39 = &v12[6 * v33];
      do
      {
        sub_1B1BB4264(v39, v38, v37);
        if (v14)
          break;
        v37 = (id *)((char *)v37 + v36);
        v38 += 3;
        v39 += 6;
        --v35;
      }
      while (v35);
    }
  }
  return swift_release();
}

_OWORD *sub_1B2191314(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _BYTE v15[16];

  sub_1B1A025EC((uint64_t)a2 + 8, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1B2193D88);
  v6 = ecs_stack_allocator_allocate(a3, 32 * a1, 8);
  v7 = v6;
  if (a1)
  {
    v8 = a2[1];
    *v6 = *a2;
    v6[1] = v8;
    if (a1 != 1)
    {
      v9 = a2[1];
      v6[2] = *a2;
      v6[3] = v9;
      if (a1 != 2)
      {
        v10 = a2[1];
        v6[4] = *a2;
        v6[5] = v10;
        v11 = a1 - 3;
        if (a1 != 3)
        {
          v12 = v6 + 6;
          do
          {
            sub_1B1B40D5C((uint64_t)v15);
            v13 = a2[1];
            *v12 = *a2;
            v12[1] = v13;
            v12 += 2;
            --v11;
          }
          while (v11);
        }
        sub_1B1B40D5C((uint64_t)v15);
      }
      sub_1B1B40D5C((uint64_t)v15);
    }
    sub_1B1B40D5C((uint64_t)v15);
  }
  return v7;
}

uint64_t sub_1B21913EC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  float v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  float *v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  char v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  void (*v43)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  char v58;
  float v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  _BYTE *v67;
  float *v68;
  uint64_t v69;
  int v70;
  char v71;
  float v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _OWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v94[4];
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  float v98;

  sub_1B1A1B4F8(0, &qword_1ED4B9728, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for BasicAnimationRuntime);
  v6 = v5;
  v7 = a1[1];
  sub_1B1A1B4F8(0, (unint64_t *)&unk_1ED4B8980, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for BasicAnimation);
  v9 = v8;
  v11 = (uint64_t *)a1[11];
  v10 = a1[12];
  v12 = a1[13];
  v13 = a1[2];
  swift_retain();
  v85 = sub_1B1A12038(v9, (uint64_t)&off_1E637E158, v11, v10, v12, v13);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), v6, &v95);
  if (v95 != 1)
  {
    v88 = v10;
    v87 = v7;
    v28 = v12;
    if (!v11)
      v28 = a1[7] - a1[6];
    v95 = 0uLL;
    v96 = 0;
    v97 = 0xFFFFFFFFLL;
    v83 = (_QWORD *)a2[4];
    v84 = sub_1B2191314(v28, &v95, (uint64_t)v83);
    v81 = v30;
    v82 = v29;
    if (v11)
    {
      v80 = v11;
      v31 = v10;
      if (v12)
      {
        v32 = (_BYTE *)(v85 + 32);
        v33 = (float *)v84 + 7;
        v86 = MEMORY[0x1E0DEE9B8] + 8;
        v34 = v12;
        do
        {
          v35 = *((_QWORD *)v32 - 3);
          if (v35)
          {
            v36 = *((float *)v32 - 3);
            v37 = *(v32 - 8);
            v38 = *((float *)v32 - 1);
            v90 = *v32;
            v39 = *((_QWORD *)v32 - 4);
            *(_QWORD *)(v33 - 1) = v39;
            v40 = *(_QWORD *)(v35 + 80);
            v41 = *(_QWORD *)(v35 + 88);
            *(_QWORD *)(v33 - 5) = v40;
            *(_QWORD *)(v33 - 3) = v41;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v40)
            {
              if ((v37 & 1) != 0)
              {
                ObjectType = swift_getObjectType();
                v43 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 8);
                swift_unknownObjectRetain();
                v43(v94, v39, a3, ObjectType, v41);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v86, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                swift_dynamicCast();
                v36 = v98;
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(v33 - 7) = v36;
              if ((v90 & 1) != 0)
              {
                v44 = swift_getObjectType();
                (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v41 + 8))(v94, *(_QWORD *)(v33 - 1), a3, v44, v41);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                swift_dynamicCast();
                v38 = v98;
              }
              else
              {
                v98 = v38;
              }
              swift_release();
              swift_unknownObjectRelease();
              *(v33 - 6) = v38 - *(v33 - 7);
            }
            else
            {
              swift_release();
            }
            v31 = v88;
          }
          v32 += 40;
          v33 += 8;
          --v34;
        }
        while (v34);
      }
      v45 = v12;
      v46 = (unint64_t)v84;
      sub_1B21823B4(v80, v31, v45, (uint64_t)v84, v81);
      goto LABEL_37;
    }
    v50 = a1[6];
    v51 = a1[7];
    v52 = v51 - v50;
    if (v51 == v50)
    {
LABEL_36:
      v46 = (unint64_t)v84;
      sub_1B2182510(*(_QWORD *)(v87 + 232), *(_QWORD *)(v87 + 240), (uint64_t)v84, v81);
LABEL_37:
      ecs_stack_allocator_deallocate(v83, v46, 32 * v82);
      return swift_release();
    }
    v67 = (_BYTE *)(v85 + 40 * v50 + 32);
    v68 = (float *)v84 + 7;
    v92 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v69 = *((_QWORD *)v67 - 3);
      if (v69)
      {
        v70 = *((_DWORD *)v67 - 3);
        v71 = *(v67 - 8);
        v72 = *((float *)v67 - 1);
        v73 = *v67;
        v74 = *((_QWORD *)v67 - 4);
        *(_QWORD *)(v68 - 1) = v74;
        v75 = *(_QWORD *)(v69 + 80);
        v76 = *(_QWORD *)(v69 + 88);
        *(_QWORD *)(v68 - 5) = v75;
        *(_QWORD *)(v68 - 3) = v76;
        swift_retain();
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if (v75)
        {
          if ((v71 & 1) != 0)
          {
            v77 = swift_getObjectType();
            v78 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 8);
            swift_unknownObjectRetain();
            v78(v94, v74, a3, v77, v76);
            sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v92, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            swift_dynamicCast();
            *(v68 - 7) = v98;
            if ((v73 & 1) == 0)
              goto LABEL_58;
LABEL_60:
            v79 = swift_getObjectType();
            (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v76 + 8))(v94, *(_QWORD *)(v68 - 1), a3, v79, v76);
            sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            swift_dynamicCast();
            v72 = v98;
          }
          else
          {
            swift_unknownObjectRetain();
            *((_DWORD *)v68 - 7) = v70;
            if ((v73 & 1) != 0)
              goto LABEL_60;
LABEL_58:
            v98 = v72;
          }
          swift_release();
          swift_unknownObjectRelease();
          *(v68 - 6) = v72 - *(v68 - 7);
          goto LABEL_53;
        }
        swift_release();
      }
LABEL_53:
      v67 += 40;
      v68 += 8;
      if (!--v52)
        goto LABEL_36;
    }
  }
  a2[9] = v6;
  a2[10] = &off_1E639FC40;
  v14 = sub_1B1A12038(v6, (uint64_t)&off_1E639FC40, v11, v10, v12, v13);
  if (v11)
  {
    if (v12)
    {
      v15 = (_BYTE *)(v85 + 32);
      v16 = v14 + 28;
      v89 = MEMORY[0x1E0DEE9B8] + 8;
      while (1)
      {
        v17 = *((_QWORD *)v15 - 3);
        if (v17)
        {
          v18 = *((_DWORD *)v15 - 3);
          v19 = *(v15 - 8);
          v20 = *((float *)v15 - 1);
          v21 = *v15;
          v22 = *((_QWORD *)v15 - 4);
          *(_QWORD *)(v16 - 4) = v22;
          v23 = *(_QWORD *)(v17 + 80);
          v24 = *(_QWORD *)(v17 + 88);
          *(_QWORD *)(v16 - 20) = v23;
          *(_QWORD *)(v16 - 12) = v24;
          swift_retain();
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if (v23)
          {
            if ((v19 & 1) != 0)
            {
              v25 = swift_getObjectType();
              v26 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8);
              swift_unknownObjectRetain();
              v26(&v95, v22, a3, v25, v24);
              sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v89, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              swift_dynamicCast();
              *(_DWORD *)(v16 - 28) = v94[0];
              if ((v21 & 1) == 0)
                goto LABEL_11;
LABEL_13:
              v27 = swift_getObjectType();
              (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v24 + 8))(&v95, *(_QWORD *)(v16 - 4), a3, v27, v24);
              sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              swift_dynamicCast();
              v20 = *(float *)v94;
            }
            else
            {
              swift_unknownObjectRetain();
              *(_DWORD *)(v16 - 28) = v18;
              if ((v21 & 1) != 0)
                goto LABEL_13;
LABEL_11:
              *(float *)v94 = v20;
            }
            swift_release();
            swift_unknownObjectRelease();
            *(float *)(v16 - 24) = v20 - *(float *)(v16 - 28);
            goto LABEL_6;
          }
          swift_release();
        }
LABEL_6:
        v15 += 40;
        v16 += 32;
        if (!--v12)
          return swift_release();
      }
    }
    return swift_release();
  }
  v47 = a1[6];
  v48 = a1[7];
  v49 = v48 - v47;
  if (v48 != v47)
  {
    v54 = (_BYTE *)(v85 + 40 * v47 + 32);
    v55 = (_QWORD *)(v14 + 32 * v47 + 16);
    v91 = MEMORY[0x1E0DEE9B8] + 8;
    do
    {
      v56 = *((_QWORD *)v54 - 3);
      if (v56)
      {
        v57 = *((_DWORD *)v54 - 3);
        v58 = *(v54 - 8);
        v59 = *((float *)v54 - 1);
        v60 = *v54;
        v61 = *((_QWORD *)v54 - 4);
        v55[1] = v61;
        v62 = *(_QWORD *)(v56 + 80);
        v63 = *(_QWORD *)(v56 + 88);
        *(v55 - 1) = v62;
        *v55 = v63;
        swift_retain();
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if (v62)
        {
          if ((v58 & 1) != 0)
          {
            v64 = swift_getObjectType();
            v65 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 8);
            swift_unknownObjectRetain();
            v65(&v95, v61, a3, v64, v63);
            sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v91, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            swift_dynamicCast();
            *((_DWORD *)v55 - 4) = v94[0];
            if ((v60 & 1) == 0)
              goto LABEL_46;
LABEL_48:
            v66 = swift_getObjectType();
            (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v63 + 8))(&v95, v55[1], a3, v66, v63);
            sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            swift_dynamicCast();
            v59 = *(float *)v94;
          }
          else
          {
            swift_unknownObjectRetain();
            *((_DWORD *)v55 - 4) = v57;
            if ((v60 & 1) != 0)
              goto LABEL_48;
LABEL_46:
            *(float *)v94 = v59;
          }
          swift_release();
          swift_unknownObjectRelease();
          *((float *)v55 - 3) = v59 - *((float *)v55 - 4);
          goto LABEL_41;
        }
        swift_release();
      }
LABEL_41:
      v54 += 40;
      v55 += 4;
      --v49;
    }
    while (v49);
  }
  return swift_release();
}

uint64_t sub_1B2191C84(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B21913EC);
}

_QWORD *sub_1B2191CA0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  _BYTE v19[16];

  sub_1B1A025EC((uint64_t)(a2 + 1), (uint64_t)v19, (uint64_t (*)(_QWORD))sub_1B2193D88);
  v6 = ecs_stack_allocator_allocate(a3, 40 * a1, 8);
  v7 = v6;
  if (a1)
  {
    v8 = *a2;
    v9 = a2[1];
    v6[4] = *((_QWORD *)a2 + 4);
    *(_OWORD *)v6 = v8;
    *((_OWORD *)v6 + 1) = v9;
    if (a1 != 1)
    {
      v10 = *a2;
      v11 = a2[1];
      v6[9] = *((_QWORD *)a2 + 4);
      *(_OWORD *)(v6 + 7) = v11;
      *(_OWORD *)(v6 + 5) = v10;
      if (a1 != 2)
      {
        v12 = *a2;
        v13 = a2[1];
        v6[14] = *((_QWORD *)a2 + 4);
        *((_OWORD *)v6 + 5) = v12;
        *((_OWORD *)v6 + 6) = v13;
        v14 = a1 - 3;
        if (a1 != 3)
        {
          v15 = v6 + 15;
          do
          {
            sub_1B1B40D5C((uint64_t)v19);
            v16 = *((_QWORD *)a2 + 4);
            v17 = a2[1];
            *(_OWORD *)v15 = *a2;
            *((_OWORD *)v15 + 1) = v17;
            v15[4] = v16;
            v15 += 5;
            --v14;
          }
          while (v14);
        }
        sub_1B1B40D5C((uint64_t)v19);
      }
      sub_1B1B40D5C((uint64_t)v19);
    }
    sub_1B1B40D5C((uint64_t)v19);
  }
  return v7;
}

uint64_t sub_1B2191DA4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x2_t *v15;
  uint64_t v16;
  float32x2_t v17;
  float32x2_t v18;
  __int8 v19;
  float32x2_t v20;
  __int8 v21;
  float32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x2_t *v32;
  char *v33;
  uint64_t v34;
  float32x2_t v35;
  float32x2_t v36;
  __int8 v37;
  float32x2_t v38;
  float32x2_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ObjectType;
  void (*v43)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  float32x2_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  float32x2_t v58;
  char v59;
  float32x2_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  float32x2_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  float32x2_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int8 v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v96[4];
  __int128 v97[2];
  uint64_t v98;
  float32x2_t v99;

  sub_1B1A19DCC(0);
  v6 = v5;
  v7 = a1[1];
  sub_1B1A19CD8(0);
  v9 = v8;
  v11 = (uint64_t *)a1[11];
  v10 = a1[12];
  v12 = a1[13];
  v13 = a1[2];
  swift_retain();
  v87 = sub_1B1A12038(v9, (uint64_t)&off_1E637E158, v11, v10, v12, v13);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), v6, v97);
  if (LOBYTE(v97[0]) != 1)
  {
    v90 = v10;
    v89 = v7;
    v28 = v12;
    if (!v11)
      v28 = a1[7] - a1[6];
    memset(v97, 0, sizeof(v97));
    v98 = 0xFFFFFFFFLL;
    v85 = (_QWORD *)a2[4];
    v86 = sub_1B2191CA0(v28, v97, (uint64_t)v85);
    v83 = v30;
    v84 = v29;
    if (v11)
    {
      v82 = v11;
      v31 = v10;
      if (v12)
      {
        v32 = (float32x2_t *)(v87 + 24);
        v33 = (char *)v86 + 36;
        v88 = MEMORY[0x1E0DEE9B8] + 8;
        v34 = v12;
        do
        {
          v35 = v32[-2];
          if (v35)
          {
            v36 = *v32;
            v37 = v32[1].i8[0];
            v38 = v32[2];
            v92 = v32[3].i8[0];
            v39 = v32[-3];
            *(float32x2_t *)(v33 - 4) = v39;
            v40 = *(_QWORD *)(*(_QWORD *)&v35 + 80);
            v41 = *(_QWORD *)(*(_QWORD *)&v35 + 88);
            *(_QWORD *)(v33 - 20) = v40;
            *(_QWORD *)(v33 - 12) = v41;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v40)
            {
              if ((v37 & 1) != 0)
              {
                ObjectType = swift_getObjectType();
                v43 = *(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v41 + 8);
                swift_unknownObjectRetain();
                v43(v96, *(_QWORD *)&v39, a3, ObjectType, v41);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v88, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
                swift_dynamicCast();
                v36 = v99;
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(float32x2_t *)(v33 - 36) = v36;
              if ((v92 & 1) != 0)
              {
                v44 = swift_getObjectType();
                (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v41 + 8))(v96, *(_QWORD *)(v33 - 4), a3, v44, v41);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
                swift_dynamicCast();
                v38 = v99;
              }
              else
              {
                v99 = v38;
              }
              v45 = *(float32x2_t *)(v33 - 36);
              swift_release();
              swift_unknownObjectRelease();
              *(float32x2_t *)(v33 - 28) = vsub_f32(v38, v45);
            }
            else
            {
              swift_release();
            }
            v31 = v90;
          }
          v32 += 7;
          v33 += 40;
          --v34;
        }
        while (v34);
      }
      v46 = v12;
      v47 = (unint64_t)v86;
      sub_1B2182118(v82, v31, v46, (uint64_t)v86, v83);
      goto LABEL_37;
    }
    v51 = a1[6];
    v52 = a1[7];
    v53 = v52 - v51;
    if (v52 == v51)
    {
LABEL_36:
      v47 = (unint64_t)v86;
      sub_1B2182268(*(_QWORD *)(v89 + 232), *(_QWORD *)(v89 + 240), (uint64_t)v86, v83);
LABEL_37:
      ecs_stack_allocator_deallocate(v85, v47, 40 * v84);
      return swift_release();
    }
    v68 = v87 + 56 * v51 + 24;
    v69 = (char *)v86 + 36;
    v94 = MEMORY[0x1E0DEE9B8] + 8;
    while (1)
    {
      v70 = *(_QWORD *)(v68 - 16);
      if (v70)
      {
        v71 = *(_QWORD *)v68;
        v72 = *(_BYTE *)(v68 + 8);
        v73 = *(float32x2_t *)(v68 + 16);
        v74 = *(_BYTE *)(v68 + 24);
        v75 = *(_QWORD *)(v68 - 24);
        *(_QWORD *)(v69 - 4) = v75;
        v76 = *(_QWORD *)(v70 + 80);
        v77 = *(_QWORD *)(v70 + 88);
        *(_QWORD *)(v69 - 20) = v76;
        *(_QWORD *)(v69 - 12) = v77;
        swift_retain();
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if (v76)
        {
          if ((v72 & 1) != 0)
          {
            v78 = swift_getObjectType();
            v79 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 8);
            swift_unknownObjectRetain();
            v79(v96, v75, a3, v78, v77);
            sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v94, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
            swift_dynamicCast();
            *(float32x2_t *)(v69 - 36) = v99;
            if ((v74 & 1) == 0)
              goto LABEL_58;
LABEL_60:
            v80 = swift_getObjectType();
            (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v77 + 8))(v96, *(_QWORD *)(v69 - 4), a3, v80, v77);
            sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
            swift_dynamicCast();
            v73 = v99;
          }
          else
          {
            swift_unknownObjectRetain();
            *(_QWORD *)(v69 - 36) = v71;
            if ((v74 & 1) != 0)
              goto LABEL_60;
LABEL_58:
            v99 = v73;
          }
          v81 = *(float32x2_t *)(v69 - 36);
          swift_release();
          swift_unknownObjectRelease();
          *(float32x2_t *)(v69 - 28) = vsub_f32(v73, v81);
          goto LABEL_53;
        }
        swift_release();
      }
LABEL_53:
      v68 += 56;
      v69 += 40;
      if (!--v53)
        goto LABEL_36;
    }
  }
  a2[9] = v6;
  a2[10] = &off_1E639FC40;
  v14 = sub_1B1A12038(v6, (uint64_t)&off_1E639FC40, v11, v10, v12, v13);
  if (v11)
  {
    if (v12)
    {
      v15 = (float32x2_t *)(v87 + 24);
      v16 = v14 + 36;
      v91 = MEMORY[0x1E0DEE9B8] + 8;
      while (1)
      {
        v17 = v15[-2];
        if (v17)
        {
          v18 = *v15;
          v19 = v15[1].i8[0];
          v20 = v15[2];
          v21 = v15[3].i8[0];
          v22 = v15[-3];
          *(float32x2_t *)(v16 - 4) = v22;
          v23 = *(_QWORD *)(*(_QWORD *)&v17 + 80);
          v24 = *(_QWORD *)(*(_QWORD *)&v17 + 88);
          *(_QWORD *)(v16 - 20) = v23;
          *(_QWORD *)(v16 - 12) = v24;
          swift_retain();
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if (v23)
          {
            if ((v19 & 1) != 0)
            {
              v25 = swift_getObjectType();
              v26 = *(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v24 + 8);
              swift_unknownObjectRetain();
              v26(v97, *(_QWORD *)&v22, a3, v25, v24);
              sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v91, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
              swift_dynamicCast();
              v18 = (float32x2_t)v96[0];
              *(_QWORD *)(v16 - 36) = v96[0];
              if ((v21 & 1) == 0)
                goto LABEL_11;
LABEL_13:
              v27 = swift_getObjectType();
              (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v24 + 8))(v97, *(_QWORD *)(v16 - 4), a3, v27, v24);
              sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
              sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
              swift_dynamicCast();
              v20 = (float32x2_t)v96[0];
              v18 = *(float32x2_t *)(v16 - 36);
            }
            else
            {
              swift_unknownObjectRetain();
              *(float32x2_t *)(v16 - 36) = v18;
              if ((v21 & 1) != 0)
                goto LABEL_13;
LABEL_11:
              v96[0] = v20;
            }
            swift_release();
            swift_unknownObjectRelease();
            *(float32x2_t *)(v16 - 28) = vsub_f32(v20, v18);
            goto LABEL_6;
          }
          swift_release();
        }
LABEL_6:
        v15 += 7;
        v16 += 40;
        if (!--v12)
          return swift_release();
      }
    }
    return swift_release();
  }
  v48 = a1[6];
  v49 = a1[7];
  v50 = v49 - v48;
  if (v49 != v48)
  {
    v55 = v87 + 56 * v48 + 24;
    v56 = (_QWORD *)(v14 + 40 * v48 + 24);
    v93 = MEMORY[0x1E0DEE9B8] + 8;
    do
    {
      v57 = *(_QWORD *)(v55 - 16);
      if (v57)
      {
        v58 = *(float32x2_t *)v55;
        v59 = *(_BYTE *)(v55 + 8);
        v60 = *(float32x2_t *)(v55 + 16);
        v61 = *(_BYTE *)(v55 + 24);
        v62 = *(_QWORD *)(v55 - 24);
        v56[1] = v62;
        v63 = *(_QWORD *)(v57 + 80);
        v64 = *(_QWORD *)(v57 + 88);
        *(v56 - 1) = v63;
        *v56 = v64;
        swift_retain();
        swift_unknownObjectRetain();
        swift_unknownObjectRelease();
        if (v63)
        {
          if ((v59 & 1) != 0)
          {
            v65 = swift_getObjectType();
            v66 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 8);
            swift_unknownObjectRetain();
            v66(v97, v62, a3, v65, v64);
            sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v93, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
            swift_dynamicCast();
            v58 = (float32x2_t)v96[0];
            *(v56 - 3) = v96[0];
            if ((v61 & 1) == 0)
              goto LABEL_46;
LABEL_48:
            v67 = swift_getObjectType();
            (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v64 + 8))(v97, v56[1], a3, v67, v64);
            sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
            sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
            swift_dynamicCast();
            v60 = (float32x2_t)v96[0];
            v58 = (float32x2_t)*(v56 - 3);
          }
          else
          {
            swift_unknownObjectRetain();
            *(v56 - 3) = v58;
            if ((v61 & 1) != 0)
              goto LABEL_48;
LABEL_46:
            v96[0] = v60;
          }
          swift_release();
          swift_unknownObjectRelease();
          *(v56 - 2) = vsub_f32(v60, v58);
          goto LABEL_41;
        }
        swift_release();
      }
LABEL_41:
      v55 += 56;
      v56 += 5;
      --v50;
    }
    while (v50);
  }
  return swift_release();
}

uint64_t sub_1B21926F0(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B2191DA4);
}

uint64_t sub_1B219270C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  void (*v25)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int32 v98;
  uint64_t v99;
  float32x4_t v100;
  __int32 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t v106;
  uint64_t v107;
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  float32x4_t v115;
  char v116;
  float32x4_t v117;
  char v118;
  float32x4_t v119;
  uint64_t v120;
  float32x4_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  float32x4_t v125;
  char v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  __int128 v130[3];
  uint64_t v131;
  uint64_t v132;

  v132 = a3;
  sub_1B1A19C40(0);
  v6 = v5;
  v7 = a1[1];
  sub_1B1A19B68(0);
  v9 = v8;
  v11 = (uint64_t *)a1[11];
  v10 = a1[12];
  v12 = a1[13];
  v13 = a1[2];
  swift_retain();
  v113 = sub_1B1A12038(v9, (uint64_t)&off_1E637E158, v11, v10, v12, v13);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), v6, v130);
  if (LOBYTE(v130[0]) == 1)
  {
    a2[9] = v6;
    a2[10] = &off_1E639FC40;
    v14 = sub_1B1A12038(v6, (uint64_t)&off_1E639FC40, v11, v10, v12, v13);
    if (v11)
    {
      if (v12)
      {
        v15 = v14 + 52;
        v16 = v113 + 40;
        v95 = MEMORY[0x1E0DEE9B8] + 8;
        do
        {
          v17 = *(_QWORD *)(v16 - 32);
          if (v17)
          {
            v122 = v12;
            v19 = *(_QWORD *)(v16 - 8);
            v18 = *(_QWORD *)v16;
            v20 = *(_BYTE *)(v16 + 8);
            v102 = *(_QWORD *)(v16 + 24);
            v107 = *(_QWORD *)(v16 + 32);
            v114 = *(_BYTE *)(v16 + 40);
            v21 = *(_QWORD *)(v16 - 40);
            *(_QWORD *)(v15 - 4) = v21;
            v22 = *(_QWORD *)(v17 + 80);
            v23 = *(_QWORD *)(v17 + 88);
            *(_QWORD *)(v15 - 20) = v22;
            *(_QWORD *)(v15 - 12) = v23;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v22)
            {
              if ((v20 & 1) != 0)
              {
                ObjectType = swift_getObjectType();
                v25 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8);
                swift_unknownObjectRetain();
                v25(v130, v21, v132, ObjectType, v23);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v95, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
                swift_dynamicCast();
                v18 = v128.i64[1];
                v19 = v128.i64[0];
              }
              else
              {
                swift_unknownObjectRetain();
              }
              *(_QWORD *)(v15 - 52) = v19;
              *(_QWORD *)(v15 - 44) = v18;
              if ((v114 & 1) != 0)
              {
                v26 = swift_getObjectType();
                (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v23 + 8))(v130, *(_QWORD *)(v15 - 4), v132, v26, v23);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
                swift_dynamicCast();
                v108 = v128;
                v115 = *(float32x4_t *)(v15 - 52);
              }
              else
              {
                v27.i64[0] = v19;
                v27.i64[1] = v18;
                v115 = v27;
                v128.i64[0] = v102;
                v128.i64[1] = v107;
                v27.i64[0] = v102;
                v27.i64[1] = v107;
                v108 = v27;
              }
              v12 = v122;
              swift_release();
              swift_unknownObjectRelease();
              v28 = vsubq_f32(v108, v115);
              v28.i32[3] = v101;
              *(float32x4_t *)(v15 - 36) = v28;
            }
            else
            {
              swift_release();
              v12 = v122;
            }
          }
          v16 += 96;
          v15 += 64;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      v50 = a1[6];
      v51 = a1[7];
      v52 = v51 - v50;
      if (v51 != v50)
      {
        v57 = (float32x4_t *)(v14 + (v50 << 6));
        v58 = v113 + 96 * v50 + 40;
        v96 = MEMORY[0x1E0DEE9B8] + 8;
        do
        {
          v59 = *(_QWORD *)(v58 - 32);
          if (v59)
          {
            v61 = *(_QWORD *)(v58 - 8);
            v60 = *(_QWORD *)v58;
            v62 = *(_BYTE *)(v58 + 8);
            v104 = *(_QWORD *)(v58 + 24);
            v111 = *(_QWORD *)(v58 + 32);
            v118 = *(_BYTE *)(v58 + 40);
            v63 = *(_QWORD *)(v58 - 40);
            v57[3].i64[0] = v63;
            v65 = *(_QWORD *)(v59 + 80);
            v64 = *(_QWORD *)(v59 + 88);
            v57[2].i64[0] = v65;
            v57[2].i64[1] = v64;
            v124 = v64;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v65)
            {
              if ((v62 & 1) != 0)
              {
                v66 = swift_getObjectType();
                v67 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v124 + 8);
                swift_unknownObjectRetain();
                v67(v130, v63, v132, v66, v124);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v96, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
                swift_dynamicCast();
                v60 = v128.i64[1];
                v61 = v128.i64[0];
              }
              else
              {
                swift_unknownObjectRetain();
              }
              v57->i64[0] = v61;
              v57->i64[1] = v60;
              if ((v118 & 1) != 0)
              {
                v68 = swift_getObjectType();
                (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(v124 + 8))(v130, v57[3].i64[0], v132, v68);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
                swift_dynamicCast();
                v119 = v128;
                v125 = *v57;
              }
              else
              {
                v69.i64[0] = v61;
                v69.i64[1] = v60;
                v125 = v69;
                v128.i64[0] = v104;
                v128.i64[1] = v111;
                v69.i64[0] = v104;
                v69.i64[1] = v111;
                v119 = v69;
              }
              swift_release();
              swift_unknownObjectRelease();
              v70 = vsubq_f32(v119, v125);
              v70.i32[3] = v101;
              v57[1] = v70;
            }
            else
            {
              swift_release();
            }
          }
          v58 += 96;
          v57 += 4;
          --v52;
        }
        while (v52);
      }
    }
    return swift_release();
  }
  else
  {
    v94 = v10;
    v92 = v7;
    v123 = v12;
    if (!v11)
      v12 = a1[7] - a1[6];
    memset(v130, 0, sizeof(v130));
    v131 = 0xFFFFFFFFLL;
    v29 = (uint64_t)a2;
    v89 = (_QWORD *)a2[4];
    v90 = sub_1B21931C8(v12, v130, (uint64_t)v89);
    v93 = (uint64_t)a2;
    v87 = v31;
    v88 = v30;
    if (v11)
    {
      v86 = v11;
      v32 = v10;
      if (v123)
      {
        v33 = (char *)v90 + 52;
        v34 = v113 + 40;
        v91 = MEMORY[0x1E0DEE9B8] + 8;
        v35 = v123;
        do
        {
          v36 = *(_QWORD *)(v34 - 32);
          if (v36)
          {
            v37 = *(_QWORD *)(v34 - 8);
            v99 = *(_QWORD *)v34;
            v38 = *(_BYTE *)(v34 + 8);
            v103 = *(_QWORD *)(v34 + 24);
            v109 = *(_QWORD *)(v34 + 32);
            v116 = *(_BYTE *)(v34 + 40);
            v39 = *(_QWORD *)(v34 - 40);
            *(_QWORD *)(v33 - 4) = v39;
            v40 = *(_QWORD *)(v36 + 80);
            v41 = *(_QWORD *)(v36 + 88);
            *(_QWORD *)(v33 - 20) = v40;
            *(_QWORD *)(v33 - 12) = v41;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v40)
            {
              if ((v38 & 1) != 0)
              {
                v42 = swift_getObjectType();
                v43 = *(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 8);
                swift_unknownObjectRetain();
                v43(&v128, v39, v132, v42, v41);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v91, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
                swift_dynamicCast();
                v44 = v129;
              }
              else
              {
                v45.i64[0] = v37;
                v45.i64[1] = v99;
                v100 = v45;
                swift_unknownObjectRetain();
                v44 = v100;
              }
              *(float32x4_t *)(v33 - 52) = v44;
              if ((v116 & 1) != 0)
              {
                v46 = swift_getObjectType();
                (*(void (**)(float32x4_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v41 + 8))(&v128, *(_QWORD *)(v33 - 4), v132, v46, v41);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
                swift_dynamicCast();
                v47 = v129;
              }
              else
              {
                v129.i64[0] = v103;
                v129.i64[1] = v109;
                v47.i64[0] = v103;
                v47.i64[1] = v109;
              }
              v117 = v47;
              v110 = *(float32x4_t *)(v33 - 52);
              swift_release();
              swift_unknownObjectRelease();
              v48 = vsubq_f32(v117, v110);
              v48.i32[3] = v98;
              *(float32x4_t *)(v33 - 36) = v48;
            }
            else
            {
              swift_release();
            }
            v32 = v94;
          }
          v34 += 96;
          v33 += 64;
          --v35;
        }
        while (v35);
      }
      v49 = (unint64_t)v90;
      sub_1B2181E84(v86, v32, v123, (uint64_t)v90, v87, v93, (uint64_t (*)(_QWORD))sub_1B1A19C40);
    }
    else
    {
      v53 = a1[6];
      v54 = a1[7];
      v55 = v54 - v53;
      if (v54 != v53)
      {
        v71 = (char *)v90 + 52;
        v72 = v113 + 96 * v53 + 40;
        v97 = MEMORY[0x1E0DEE9B8] + 8;
        do
        {
          v73 = *(_QWORD *)(v72 - 32);
          if (v73)
          {
            v74 = *(_QWORD *)(v72 - 8);
            v105 = *(_QWORD *)v72;
            v75 = *(_BYTE *)(v72 + 8);
            v112 = *(_QWORD *)(v72 + 24);
            v120 = *(_QWORD *)(v72 + 32);
            v126 = *(_BYTE *)(v72 + 40);
            v76 = *(_QWORD *)(v72 - 40);
            *(_QWORD *)(v71 - 4) = v76;
            v77 = *(_QWORD *)(v73 + 80);
            v78 = *(_QWORD *)(v73 + 88);
            *(_QWORD *)(v71 - 20) = v77;
            *(_QWORD *)(v71 - 12) = v78;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v77)
            {
              if ((v75 & 1) != 0)
              {
                v79 = swift_getObjectType();
                v80 = *(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 8);
                swift_unknownObjectRetain();
                v80(&v128, v76, v132, v79, v78);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v97, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
                swift_dynamicCast();
                v81 = v129;
              }
              else
              {
                v82.i64[0] = v74;
                v82.i64[1] = v105;
                v106 = v82;
                swift_unknownObjectRetain();
                v81 = v106;
              }
              *(float32x4_t *)(v71 - 52) = v81;
              if ((v126 & 1) != 0)
              {
                v83 = swift_getObjectType();
                (*(void (**)(float32x4_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v78 + 8))(&v128, *(_QWORD *)(v71 - 4), v132, v83, v78);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
                swift_dynamicCast();
                v84 = v129;
              }
              else
              {
                v129.i64[0] = v112;
                v129.i64[1] = v120;
                v84.i64[0] = v112;
                v84.i64[1] = v120;
              }
              v121 = v84;
              v29 = v93;
              v127 = *(float32x4_t *)(v71 - 52);
              swift_release();
              swift_unknownObjectRelease();
              v85 = vsubq_f32(v121, v127);
              v85.i32[3] = v101;
              *(float32x4_t *)(v71 - 36) = v85;
            }
            else
            {
              swift_release();
              v29 = v93;
            }
          }
          v72 += 96;
          v71 += 64;
          --v55;
        }
        while (v55);
      }
      v49 = (unint64_t)v90;
      sub_1B2181FD0(*(_QWORD *)(v92 + 232), *(_QWORD *)(v92 + 240), (uint64_t)v90, v87, v29, (uint64_t (*)(_QWORD))sub_1B1A19C40);
    }
    ecs_stack_allocator_deallocate(v89, v49, v88 << 6);
    return swift_release();
  }
}

uint64_t sub_1B21931AC(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B219270C);
}

_QWORD *sub_1B21931C8(uint64_t a1, __int128 *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v23[16];

  sub_1B1A025EC((uint64_t)(a2 + 2), (uint64_t)v23, (uint64_t (*)(_QWORD))sub_1B2193D88);
  v6 = ecs_stack_allocator_allocate(a3, a1 << 6, 16);
  v7 = v6;
  if (a1)
  {
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    v6[6] = *((_QWORD *)a2 + 6);
    *((_OWORD *)v6 + 1) = v9;
    *((_OWORD *)v6 + 2) = v10;
    *(_OWORD *)v6 = v8;
    if (a1 != 1)
    {
      v11 = *a2;
      v12 = a2[1];
      v13 = a2[2];
      v6[14] = *((_QWORD *)a2 + 6);
      *((_OWORD *)v6 + 5) = v12;
      *((_OWORD *)v6 + 6) = v13;
      *((_OWORD *)v6 + 4) = v11;
      if (a1 != 2)
      {
        v14 = *a2;
        v15 = a2[1];
        v16 = a2[2];
        v6[22] = *((_QWORD *)a2 + 6);
        *((_OWORD *)v6 + 9) = v15;
        *((_OWORD *)v6 + 10) = v16;
        *((_OWORD *)v6 + 8) = v14;
        v17 = a1 - 3;
        if (a1 != 3)
        {
          v18 = v6 + 24;
          do
          {
            sub_1B1B40D5C((uint64_t)v23);
            v20 = a2[1];
            v19 = a2[2];
            v21 = *a2;
            v18[6] = *((_QWORD *)a2 + 6);
            *((_OWORD *)v18 + 1) = v20;
            *((_OWORD *)v18 + 2) = v19;
            *(_OWORD *)v18 = v21;
            v18 += 8;
            --v17;
          }
          while (v17);
        }
        sub_1B1B40D5C((uint64_t)v23);
      }
      sub_1B1B40D5C((uint64_t)v23);
    }
    sub_1B1B40D5C((uint64_t)v23);
  }
  return v7;
}

uint64_t sub_1B21932E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  void (*v25)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  float32x4_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  float32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  float32x4_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float32x4_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float32x4_t v104;
  char v105;
  uint64_t v106;
  float32x4_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  char v113;
  float32x4_t v114;
  char v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  uint64_t v119;
  float32x4_t v120;
  uint64_t v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  char v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  __int128 v129[3];
  uint64_t v130;
  uint64_t v131;

  v131 = a3;
  sub_1B1A19A6C(0);
  v6 = v5;
  v7 = a1[1];
  sub_1B1A199D4(0);
  v9 = v8;
  v11 = (uint64_t *)a1[11];
  v10 = a1[12];
  v12 = a1[13];
  v13 = a1[2];
  swift_retain();
  v110 = sub_1B1A12038(v9, (uint64_t)&off_1E637E158, v11, v10, v12, v13);
  sub_1B1A10AA4(*(_QWORD *)(v7 + 40), v6, v129);
  if (LOBYTE(v129[0]) == 1)
  {
    a2[9] = v6;
    a2[10] = &off_1E639FC40;
    v14 = sub_1B1A12038(v6, (uint64_t)&off_1E639FC40, v11, v10, v12, v13);
    if (v11)
    {
      if (v12)
      {
        v15 = v14 + 52;
        v16 = v110 + 40;
        v93 = MEMORY[0x1E0DEE9B8] + 8;
        do
        {
          v17 = *(_QWORD *)(v16 - 32);
          if (v17)
          {
            v119 = v12;
            v18 = *(_QWORD *)(v16 - 8);
            v19 = *(_QWORD *)v16;
            v20 = *(_BYTE *)(v16 + 8);
            v95 = *(_QWORD *)(v16 + 24);
            v100 = *(_QWORD *)(v16 + 32);
            v105 = *(_BYTE *)(v16 + 40);
            v21 = *(_QWORD *)(v16 - 40);
            *(_QWORD *)(v15 - 4) = v21;
            v22 = *(_QWORD *)(v17 + 80);
            v23 = *(_QWORD *)(v17 + 88);
            *(_QWORD *)(v15 - 20) = v22;
            *(_QWORD *)(v15 - 12) = v23;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v22)
            {
              if ((v20 & 1) != 0)
              {
                ObjectType = swift_getObjectType();
                v25 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 8);
                swift_unknownObjectRetain();
                v25(v129, v21, v131, ObjectType, v23);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v93, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
                swift_dynamicCast();
                v26 = v127;
              }
              else
              {
                v27.i64[0] = v18;
                v27.i64[1] = v19;
                v111 = v27;
                swift_unknownObjectRetain();
                v26 = v111;
              }
              v12 = v119;
              *(float32x4_t *)(v15 - 52) = v26;
              if ((v105 & 1) != 0)
              {
                v28 = swift_getObjectType();
                (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v23 + 8))(v129, *(_QWORD *)(v15 - 4), v131, v28, v23);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
                swift_dynamicCast();
                v120 = v127;
                v26 = *(float32x4_t *)(v15 - 52);
              }
              else
              {
                v127.i64[0] = v95;
                v127.i64[1] = v100;
                v29.i64[0] = v95;
                v29.i64[1] = v100;
                v120 = v29;
              }
              v112 = v26;
              swift_release();
              swift_unknownObjectRelease();
              *(float32x4_t *)(v15 - 36) = vsubq_f32(v120, v112);
            }
            else
            {
              swift_release();
              v12 = v119;
            }
          }
          v16 += 96;
          v15 += 64;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      v50 = a1[6];
      v51 = a1[7];
      v52 = v51 - v50;
      if (v51 != v50)
      {
        v57 = v14 + (v50 << 6) + 52;
        v58 = v110 + 96 * v50 + 40;
        v98 = MEMORY[0x1E0DEE9B8] + 8;
        do
        {
          v59 = *(_QWORD *)(v58 - 32);
          if (v59)
          {
            v60 = *(_QWORD *)(v58 - 8);
            v122 = *(_QWORD *)v58;
            v61 = *(_BYTE *)(v58 + 8);
            v102 = *(_QWORD *)(v58 + 24);
            v108 = *(_QWORD *)(v58 + 32);
            v115 = *(_BYTE *)(v58 + 40);
            v62 = *(_QWORD *)(v58 - 40);
            *(_QWORD *)(v57 - 4) = v62;
            v63 = *(_QWORD *)(v59 + 80);
            v64 = *(_QWORD *)(v59 + 88);
            *(_QWORD *)(v57 - 20) = v63;
            *(_QWORD *)(v57 - 12) = v64;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v63)
            {
              if ((v61 & 1) != 0)
              {
                v65 = swift_getObjectType();
                v66 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 8);
                swift_unknownObjectRetain();
                v66(v129, v62, v131, v65, v64);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v98, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
                swift_dynamicCast();
                v67 = v127;
              }
              else
              {
                v68.i64[0] = v60;
                v68.i64[1] = v122;
                v123 = v68;
                swift_unknownObjectRetain();
                v67 = v123;
              }
              *(float32x4_t *)(v57 - 52) = v67;
              if ((v115 & 1) != 0)
              {
                v69 = swift_getObjectType();
                (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v64 + 8))(v129, *(_QWORD *)(v57 - 4), v131, v69, v64);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
                swift_dynamicCast();
                v116 = v127;
                v67 = *(float32x4_t *)(v57 - 52);
              }
              else
              {
                v127.i64[0] = v102;
                v127.i64[1] = v108;
                v70.i64[0] = v102;
                v70.i64[1] = v108;
                v116 = v70;
              }
              v124 = v67;
              swift_release();
              swift_unknownObjectRelease();
              *(float32x4_t *)(v57 - 36) = vsubq_f32(v116, v124);
            }
            else
            {
              swift_release();
            }
          }
          v58 += 96;
          v57 += 64;
          --v52;
        }
        while (v52);
      }
    }
    return swift_release();
  }
  else
  {
    v94 = v10;
    v91 = v7;
    v121 = v12;
    if (!v11)
      v12 = a1[7] - a1[6];
    memset(v129, 0, sizeof(v129));
    v130 = 0xFFFFFFFFLL;
    v30 = (uint64_t)a2;
    v88 = (_QWORD *)a2[4];
    v89 = sub_1B21931C8(v12, v129, (uint64_t)v88);
    v92 = (uint64_t)a2;
    v86 = v32;
    v87 = v31;
    if (v11)
    {
      v85 = v11;
      v33 = v10;
      if (v121)
      {
        v34 = v110 + 40;
        v35 = (char *)v89 + 52;
        v90 = MEMORY[0x1E0DEE9B8] + 8;
        v36 = v121;
        do
        {
          v37 = *(_QWORD *)(v34 - 32);
          if (v37)
          {
            v38 = *(_QWORD *)(v34 - 8);
            v96 = *(_QWORD *)v34;
            v39 = *(_BYTE *)(v34 + 8);
            v101 = *(_QWORD *)(v34 + 24);
            v106 = *(_QWORD *)(v34 + 32);
            v113 = *(_BYTE *)(v34 + 40);
            v40 = *(_QWORD *)(v34 - 40);
            *(_QWORD *)(v35 - 4) = v40;
            v41 = *(_QWORD *)(v37 + 80);
            v42 = *(_QWORD *)(v37 + 88);
            *(_QWORD *)(v35 - 20) = v41;
            *(_QWORD *)(v35 - 12) = v42;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v41)
            {
              if ((v39 & 1) != 0)
              {
                v43 = swift_getObjectType();
                v44 = *(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 8);
                swift_unknownObjectRetain();
                v44(&v127, v40, v131, v43, v42);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v90, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
                swift_dynamicCast();
                v45 = v128;
              }
              else
              {
                v46.i64[0] = v38;
                v46.i64[1] = v96;
                v97 = v46;
                swift_unknownObjectRetain();
                v45 = v97;
              }
              *(float32x4_t *)(v35 - 52) = v45;
              if ((v113 & 1) != 0)
              {
                v47 = swift_getObjectType();
                (*(void (**)(float32x4_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v42 + 8))(&v127, *(_QWORD *)(v35 - 4), v131, v47, v42);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
                swift_dynamicCast();
                v48 = v128;
              }
              else
              {
                v128.i64[0] = v101;
                v128.i64[1] = v106;
                v48.i64[0] = v101;
                v48.i64[1] = v106;
              }
              v114 = v48;
              v107 = *(float32x4_t *)(v35 - 52);
              swift_release();
              swift_unknownObjectRelease();
              *(float32x4_t *)(v35 - 36) = vsubq_f32(v114, v107);
            }
            else
            {
              swift_release();
            }
            v33 = v94;
          }
          v34 += 96;
          v35 += 64;
          --v36;
        }
        while (v36);
      }
      v49 = (unint64_t)v89;
      sub_1B2181E84(v85, v33, v121, (uint64_t)v89, v86, v92, (uint64_t (*)(_QWORD))sub_1B1A19A6C);
    }
    else
    {
      v53 = a1[6];
      v54 = a1[7];
      v55 = v54 - v53;
      if (v54 != v53)
      {
        v71 = v110 + 96 * v53 + 40;
        v72 = (char *)v89 + 52;
        v99 = MEMORY[0x1E0DEE9B8] + 8;
        do
        {
          v73 = *(_QWORD *)(v71 - 32);
          if (v73)
          {
            v74 = *(_QWORD *)(v71 - 8);
            v103 = *(_QWORD *)v71;
            v75 = *(_BYTE *)(v71 + 8);
            v109 = *(_QWORD *)(v71 + 24);
            v117 = *(_QWORD *)(v71 + 32);
            v125 = *(_BYTE *)(v71 + 40);
            v76 = *(_QWORD *)(v71 - 40);
            *(_QWORD *)(v72 - 4) = v76;
            v77 = *(_QWORD *)(v73 + 80);
            v78 = *(_QWORD *)(v73 + 88);
            *(_QWORD *)(v72 - 20) = v77;
            *(_QWORD *)(v72 - 12) = v78;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (v77)
            {
              if ((v75 & 1) != 0)
              {
                v79 = swift_getObjectType();
                v80 = *(void (**)(float32x4_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 8);
                swift_unknownObjectRetain();
                v80(&v127, v76, v131, v79, v78);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v99, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
                swift_dynamicCast();
                v81 = v128;
              }
              else
              {
                v82.i64[0] = v74;
                v82.i64[1] = v103;
                v104 = v82;
                swift_unknownObjectRetain();
                v81 = v104;
              }
              *(float32x4_t *)(v72 - 52) = v81;
              if ((v125 & 1) != 0)
              {
                v83 = swift_getObjectType();
                (*(void (**)(float32x4_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(v78 + 8))(&v127, *(_QWORD *)(v72 - 4), v131, v83, v78);
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
                sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
                swift_dynamicCast();
                v84 = v128;
              }
              else
              {
                v128.i64[0] = v109;
                v128.i64[1] = v117;
                v84.i64[0] = v109;
                v84.i64[1] = v117;
              }
              v118 = v84;
              v30 = v92;
              v126 = *(float32x4_t *)(v72 - 52);
              swift_release();
              swift_unknownObjectRelease();
              *(float32x4_t *)(v72 - 36) = vsubq_f32(v118, v126);
            }
            else
            {
              swift_release();
              v30 = v92;
            }
          }
          v71 += 96;
          v72 += 64;
          --v55;
        }
        while (v55);
      }
      v49 = (unint64_t)v89;
      sub_1B2181FD0(*(_QWORD *)(v91 + 232), *(_QWORD *)(v91 + 240), (uint64_t)v89, v86, v30, (uint64_t (*)(_QWORD))sub_1B1A19A6C);
    }
    ecs_stack_allocator_deallocate(v88, v49, v87 << 6);
    return swift_release();
  }
}

uint64_t sub_1B2193D6C(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B21932E0);
}

void sub_1B2193D88()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B8CA8)
  {
    sub_1B1AEC268(255, &qword_1ED4B8CA0);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B8CA8);
  }
}

uint64_t sub_1B2193DF0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  _QWORD *v95;
  uint64_t j;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  char v142;
  uint64_t v143;
  _QWORD *v144;
  char v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char v190;
  char *v191;
  char v192;
  char *v193;
  char v194;
  uint64_t v195;
  char v196;
  char *v197;
  char v198;
  uint64_t v199;
  char v200;
  char *v201;
  char v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  char v221;
  _OWORD v222[3];
  uint64_t v223;
  _QWORD *v224;

  sub_1B1A1B200(0);
  v4 = v3;
  v5 = a1[1];
  sub_1B1A1B168(0);
  v7 = v6;
  v8 = (uint64_t *)a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v11 = a1[2];
  swift_retain();
  v12 = sub_1B1A12038(v7, (uint64_t)&off_1E638CEA0, v8, v9, v10, v11);
  sub_1B1A10AA4(*(_QWORD *)(v5 + 40), v4, &v212);
  v169 = v5;
  if (v212 == 1)
  {
    a2[9] = v4;
    a2[10] = &off_1E63AD5B0;
    v13 = sub_1B1A12038(v4, (uint64_t)&off_1E63AD5B0, v8, v9, v10, v11);
    if (v8)
    {
      if (v10)
      {
        v14 = v10 - 1;
        for (i = (_QWORD *)(v13 + 32); ; i += 8)
        {
          v16 = *(_OWORD *)(v12 + 16);
          v212 = *(_OWORD *)v12;
          v213 = v16;
          v17 = *(_OWORD *)(v12 + 32);
          v18 = *(_OWORD *)(v12 + 48);
          v19 = *(_OWORD *)(v12 + 80);
          v216 = *(_OWORD *)(v12 + 64);
          v217 = v19;
          v214 = v17;
          v215 = v18;
          v20 = *(_OWORD *)(v12 + 96);
          v21 = *(_OWORD *)(v12 + 112);
          v22 = *(_OWORD *)(v12 + 128);
          v221 = *(_BYTE *)(v12 + 144);
          v219 = v21;
          v220 = v22;
          v218 = v20;
          v23 = *((_QWORD *)&v212 + 1);
          if (*((_QWORD *)&v212 + 1))
          {
            i[2] = v212;
            v24 = *(_QWORD *)(v23 + 80);
            v25 = *(_QWORD *)(v23 + 88);
            v206 = v14;
            v224 = i;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v224 = v24;
            v224[1] = v25;
            v26 = *((_QWORD *)&v213 + 1);
            v27 = v214;
            v28 = v215;
            sub_1B1A1B54C((uint64_t)&v212);
            v182 = sub_1B1F33A8C(v26, v27, *((uint64_t *)&v27 + 1), v28);
            v185 = v29;
            v176 = v30;
            v194 = v31;
            v32 = sub_1B1F33A8C(*((uint64_t *)&v215 + 1), v216, *((uint64_t *)&v216 + 1), v217);
            v174 = v33;
            v210 = v34;
            v190 = v35;
            v172 = sub_1B1F33A8C(*((uint64_t *)&v217 + 1), v218, *((uint64_t *)&v218 + 1), v219);
            v37 = v36;
            v39 = v38;
            v41 = v40;
            v42 = sub_1B1F33A8C(*((uint64_t *)&v219 + 1), v220, *((uint64_t *)&v220 + 1), v221);
            v191 = sub_1B1F33B48((uint64_t)v182, v176, v185, v194, (uint64_t)v32, v174, v210, v190, (uint64_t)v172, v37, v39, v41, (uint64_t)v42, v43, v44, v45);
            v195 = v46;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOBYTE(v26) = v213;
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v47 = sub_1B1F33E68((uint64_t)v191, v195, v26);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v212);
            swift_release();
            swift_release();
            i = v224;
            v14 = v206;
            *(v224 - 4) = v47;
          }
          if (!v14)
            break;
          --v14;
          v12 += 152;
        }
      }
    }
    else
    {
      v88 = a1[6];
      v89 = a1[7];
      if (v88 != v89)
      {
        v94 = v12 + 152 * v88;
        v95 = (_QWORD *)(v13 + (v88 << 6) + 32);
        for (j = ~v88 + v89; ; --j)
        {
          v97 = *(_OWORD *)(v94 + 16);
          v212 = *(_OWORD *)v94;
          v213 = v97;
          v98 = *(_OWORD *)(v94 + 32);
          v99 = *(_OWORD *)(v94 + 48);
          v100 = *(_OWORD *)(v94 + 80);
          v216 = *(_OWORD *)(v94 + 64);
          v217 = v100;
          v214 = v98;
          v215 = v99;
          v101 = *(_OWORD *)(v94 + 96);
          v102 = *(_OWORD *)(v94 + 112);
          v103 = *(_OWORD *)(v94 + 128);
          v221 = *(_BYTE *)(v94 + 144);
          v219 = v102;
          v220 = v103;
          v218 = v101;
          v104 = *((_QWORD *)&v212 + 1);
          if (*((_QWORD *)&v212 + 1))
          {
            v95[2] = v212;
            v105 = *(_QWORD *)(v104 + 80);
            v106 = *(_QWORD *)(v104 + 88);
            v208 = j;
            v224 = v95;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v224 = v105;
            v224[1] = v106;
            v107 = *((_QWORD *)&v213 + 1);
            v108 = v214;
            v109 = v215;
            sub_1B1A1B54C((uint64_t)&v212);
            v183 = sub_1B1F33A8C(v107, v108, *((uint64_t *)&v108 + 1), v109);
            v187 = v110;
            v178 = v111;
            v198 = v112;
            v175 = sub_1B1F33A8C(*((uint64_t *)&v215 + 1), v216, *((uint64_t *)&v216 + 1), v217);
            v114 = v113;
            v211 = v115;
            v192 = v116;
            v173 = sub_1B1F33A8C(*((uint64_t *)&v217 + 1), v218, *((uint64_t *)&v218 + 1), v219);
            v118 = v117;
            v120 = v119;
            LOBYTE(v107) = v121;
            v122 = sub_1B1F33A8C(*((uint64_t *)&v219 + 1), v220, *((uint64_t *)&v220 + 1), v221);
            v193 = sub_1B1F33B48((uint64_t)v183, v178, v187, v198, (uint64_t)v175, v114, v211, v192, (uint64_t)v173, v118, v120, v107, (uint64_t)v122, v123, v124, v125);
            v199 = v126;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOBYTE(v107) = v213;
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v127 = sub_1B1F33E68((uint64_t)v193, v199, v107);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v212);
            swift_release();
            swift_release();
            v95 = v224;
            j = v208;
            *(v224 - 4) = v127;
          }
          if (!j)
            break;
          v94 += 152;
          v95 += 8;
        }
      }
    }
  }
  else
  {
    v171 = v9;
    v168 = v10;
    if (!v8)
      v10 = a1[7] - a1[6];
    memset(v222, 0, sizeof(v222));
    v223 = 0xFFFFFFFFLL;
    v48 = (uint64_t)a2;
    v166 = (_QWORD *)a2[4];
    v167 = sub_1B2187F40(v10, (uint64_t)v222, (uint64_t)v166);
    v164 = v50;
    v165 = v49;
    if (v8)
    {
      v163 = v8;
      v51 = v9;
      if (v168)
      {
        v52 = v168;
        v53 = v167 + 4;
        do
        {
          v54 = *(_OWORD *)(v12 + 16);
          v212 = *(_OWORD *)v12;
          v213 = v54;
          v55 = *(_OWORD *)(v12 + 32);
          v56 = *(_OWORD *)(v12 + 48);
          v57 = *(_OWORD *)(v12 + 80);
          v216 = *(_OWORD *)(v12 + 64);
          v217 = v57;
          v214 = v55;
          v215 = v56;
          v58 = *(_OWORD *)(v12 + 96);
          v59 = *(_OWORD *)(v12 + 112);
          v60 = *(_OWORD *)(v12 + 128);
          v221 = *(_BYTE *)(v12 + 144);
          v219 = v59;
          v220 = v60;
          v218 = v58;
          v61 = *((_QWORD *)&v212 + 1);
          if (*((_QWORD *)&v212 + 1))
          {
            v53[2] = v212;
            v62 = *(_QWORD *)(v61 + 80);
            v63 = *(_QWORD *)(v61 + 88);
            v207 = v52;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v53 = v62;
            v53[1] = v63;
            v64 = *((_QWORD *)&v213 + 1);
            v65 = v214;
            v66 = v215;
            sub_1B1A1B54C((uint64_t)&v212);
            v186 = sub_1B1F33A8C(v64, v65, *((uint64_t *)&v65 + 1), v66);
            v188 = v67;
            v180 = v68;
            v202 = v69;
            v177 = sub_1B1F33A8C(*((uint64_t *)&v215 + 1), v216, *((uint64_t *)&v216 + 1), v217);
            v71 = v70;
            v224 = v72;
            v196 = v73;
            v74 = sub_1B1F33A8C(*((uint64_t *)&v217 + 1), v218, *((uint64_t *)&v218 + 1), v219);
            v76 = v75;
            v78 = v77;
            v80 = v79;
            v81 = sub_1B1F33A8C(*((uint64_t *)&v219 + 1), v220, *((uint64_t *)&v220 + 1), v221);
            v197 = sub_1B1F33B48((uint64_t)v186, v180, v188, v202, (uint64_t)v177, v71, (uint64_t)v224, v196, (uint64_t)v74, v76, v78, v80, (uint64_t)v81, v82, v83, v84);
            v203 = v85;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOBYTE(v76) = v213;
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v86 = sub_1B1F33E68((uint64_t)v197, v203, v76);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v212);
            swift_release();
            swift_release();
            v52 = v207;
            v51 = v171;
            *(v53 - 4) = v86;
          }
          v53 += 8;
          v12 += 152;
          --v52;
        }
        while (v52);
      }
      v87 = (unint64_t)v167;
      sub_1B2182668(v163, v51, v168, (uint64_t)v167, v164, (uint64_t)a2, (uint64_t (*)(_QWORD))sub_1B1A1B200);
    }
    else
    {
      v90 = a1[6];
      v91 = a1[7];
      v92 = v91 - v90;
      if (v91 != v90)
      {
        v128 = v167 + 4;
        v129 = v12 + 152 * v90;
        do
        {
          v130 = *(_OWORD *)(v129 + 16);
          v212 = *(_OWORD *)v129;
          v213 = v130;
          v131 = *(_OWORD *)(v129 + 32);
          v132 = *(_OWORD *)(v129 + 48);
          v133 = *(_OWORD *)(v129 + 80);
          v216 = *(_OWORD *)(v129 + 64);
          v217 = v133;
          v214 = v131;
          v215 = v132;
          v134 = *(_OWORD *)(v129 + 96);
          v135 = *(_OWORD *)(v129 + 112);
          v136 = *(_OWORD *)(v129 + 128);
          v221 = *(_BYTE *)(v129 + 144);
          v219 = v135;
          v220 = v136;
          v218 = v134;
          v137 = *((_QWORD *)&v212 + 1);
          if (*((_QWORD *)&v212 + 1))
          {
            v128[2] = v212;
            v138 = *(_QWORD *)(v137 + 80);
            v139 = *(_QWORD *)(v137 + 88);
            v209 = v92;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v128 = v138;
            v128[1] = v139;
            v140 = *((_QWORD *)&v213 + 1);
            v141 = v214;
            v142 = v215;
            sub_1B1A1B54C((uint64_t)&v212);
            v189 = sub_1B1F33A8C(v140, v141, *((uint64_t *)&v141 + 1), v142);
            v184 = v143;
            v224 = v144;
            v204 = v145;
            v146 = sub_1B1F33A8C(*((uint64_t *)&v215 + 1), v216, *((uint64_t *)&v216 + 1), v217);
            v179 = v147;
            v181 = (uint64_t)v146;
            v149 = v148;
            v200 = v150;
            v151 = sub_1B1F33A8C(*((uint64_t *)&v217 + 1), v218, *((uint64_t *)&v218 + 1), v219);
            v153 = v152;
            v155 = v154;
            LOBYTE(v140) = v156;
            v157 = sub_1B1F33A8C(*((uint64_t *)&v219 + 1), v220, *((uint64_t *)&v220 + 1), v221);
            v201 = sub_1B1F33B48((uint64_t)v189, v184, (uint64_t)v224, v204, v181, v179, v149, v200, (uint64_t)v151, v153, v155, v140, (uint64_t)v157, v158, v159, v160);
            v205 = v161;
            v48 = (uint64_t)a2;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            LOBYTE(v140) = v213;
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v162 = sub_1B1F33E68((uint64_t)v201, v205, v140);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v212);
            swift_release();
            swift_release();
            v92 = v209;
            *(v128 - 4) = v162;
          }
          v128 += 8;
          v129 += 152;
          --v92;
        }
        while (v92);
      }
      v87 = (unint64_t)v167;
      sub_1B21827B4(*(_QWORD *)(v169 + 232), *(_QWORD *)(v169 + 240), (uint64_t)v167, v164, v48, (uint64_t (*)(_QWORD))sub_1B1A1B200);
    }
    ecs_stack_allocator_deallocate(v166, v87, v165 << 6);
  }
  return swift_release();
}

uint64_t sub_1B21948A4(uint64_t a1, uint64_t a2)
{
  return sub_1B219529C(a1, a2, (void (*)(_QWORD *, _QWORD *))sub_1B2193DF0);
}

uint64_t sub_1B21948C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, &qword_1ED4B9998, (void (*)(uint64_t))type metadata accessor for KeyframeTimelineRuntime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B2194914(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t j;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  char *v168;
  uint64_t v169;
  char v170;
  char *v171;
  char v172;
  char *v173;
  char v174;
  uint64_t v175;
  char v176;
  char *v177;
  char v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  char v195;
  _OWORD v196[3];
  uint64_t v197;
  _QWORD *v198;

  sub_1B1A1B330(0);
  v4 = v3;
  v5 = a1[1];
  sub_1B1A1B298(0);
  v7 = v6;
  v9 = (uint64_t *)a1[11];
  v8 = a1[12];
  v10 = a1[13];
  v11 = a1[2];
  swift_retain();
  v12 = sub_1B1A12038(v7, (uint64_t)&off_1E638CEA0, v9, v8, v10, v11);
  sub_1B1A10AA4(*(_QWORD *)(v5 + 40), v4, &v186);
  v157 = v5;
  if (v186 == 1)
  {
    a2[9] = v4;
    a2[10] = &off_1E63AD5B0;
    v13 = sub_1B1A12038(v4, (uint64_t)&off_1E63AD5B0, v9, v8, v10, v11);
    if (v9)
    {
      if (v10)
      {
        v14 = v10 - 1;
        for (i = (_QWORD *)(v13 + 32); ; i += 8)
        {
          v16 = *(_OWORD *)(v12 + 16);
          v186 = *(_OWORD *)v12;
          v187 = v16;
          v17 = *(_OWORD *)(v12 + 32);
          v18 = *(_OWORD *)(v12 + 48);
          v19 = *(_OWORD *)(v12 + 80);
          v190 = *(_OWORD *)(v12 + 64);
          v191 = v19;
          v188 = v17;
          v189 = v18;
          v20 = *(_OWORD *)(v12 + 96);
          v21 = *(_OWORD *)(v12 + 112);
          v22 = *(_OWORD *)(v12 + 128);
          v195 = *(_BYTE *)(v12 + 144);
          v193 = v21;
          v194 = v22;
          v192 = v20;
          v23 = *((_QWORD *)&v186 + 1);
          if (*((_QWORD *)&v186 + 1))
          {
            i[2] = v186;
            v24 = *(_QWORD *)(v23 + 80);
            v25 = *(_QWORD *)(v23 + 88);
            v182 = v14;
            v198 = i;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v198 = v24;
            v198[1] = v25;
            v26 = *((_QWORD *)&v187 + 1);
            v27 = v188;
            v28 = v189;
            sub_1B1A1B54C((uint64_t)&v186);
            v159 = sub_1B1F33A8C(v26, v27, *((uint64_t *)&v27 + 1), v28);
            v163 = v29;
            v31 = v30;
            v174 = v32;
            v33 = sub_1B1F33A8C(*((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191);
            v35 = v34;
            v37 = v36;
            v167 = v38;
            v39 = sub_1B1F33A8C(*((uint64_t *)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193);
            v168 = sub_1B1F33F18((uint64_t)v159, v163, v31, v174, (uint64_t)v33, v35, v37, v167, (uint64_t)v39, v40, v41, v42);
            v175 = v43;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v44 = sub_1B1F341B0((uint64_t)v168, v175);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v186);
            swift_release();
            swift_release();
            i = v198;
            v14 = v182;
            *(v198 - 4) = v44;
          }
          if (!v14)
            break;
          --v14;
          v12 += 152;
        }
      }
    }
    else
    {
      v81 = a1[6];
      v82 = a1[7];
      if (v81 != v82)
      {
        v87 = v12 + 152 * v81;
        v88 = v13 + (v81 << 6) + 32;
        for (j = ~v81 + v82; ; --j)
        {
          v90 = *(_OWORD *)(v87 + 16);
          v186 = *(_OWORD *)v87;
          v187 = v90;
          v91 = *(_OWORD *)(v87 + 32);
          v92 = *(_OWORD *)(v87 + 48);
          v93 = *(_OWORD *)(v87 + 80);
          v190 = *(_OWORD *)(v87 + 64);
          v191 = v93;
          v188 = v91;
          v189 = v92;
          v94 = *(_OWORD *)(v87 + 96);
          v95 = *(_OWORD *)(v87 + 112);
          v96 = *(_OWORD *)(v87 + 128);
          v195 = *(_BYTE *)(v87 + 144);
          v193 = v95;
          v194 = v96;
          v192 = v94;
          v97 = *((_QWORD *)&v186 + 1);
          if (*((_QWORD *)&v186 + 1))
          {
            *(_QWORD *)(v88 + 16) = v186;
            v98 = *(_QWORD *)(v97 + 80);
            v99 = *(_QWORD *)(v97 + 88);
            v185 = j;
            v198 = (_QWORD *)v88;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v198 = v98;
            v198[1] = v99;
            v100 = *((_QWORD *)&v187 + 1);
            v101 = v188;
            v102 = v189;
            sub_1B1A1B54C((uint64_t)&v186);
            v161 = sub_1B1F33A8C(v100, v101, *((uint64_t *)&v101 + 1), v102);
            v165 = v103;
            v105 = v104;
            v178 = v106;
            v107 = sub_1B1F33A8C(*((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191);
            v109 = v108;
            v111 = v110;
            v170 = v112;
            v113 = sub_1B1F33A8C(*((uint64_t *)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193);
            v171 = sub_1B1F33F18((uint64_t)v161, v165, v105, v178, (uint64_t)v107, v109, v111, v170, (uint64_t)v113, v114, v115, v116);
            v179 = v117;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v118 = sub_1B1F341B0((uint64_t)v171, v179);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v186);
            swift_release();
            swift_release();
            v88 = (uint64_t)v198;
            j = v185;
            *(v198 - 4) = v118;
          }
          if (!j)
            break;
          v87 += 152;
          v88 += 64;
        }
      }
    }
  }
  else
  {
    v158 = v8;
    v45 = v10;
    if (!v9)
      v45 = a1[7] - a1[6];
    memset(v196, 0, sizeof(v196));
    v197 = 0xFFFFFFFFLL;
    v154 = (_QWORD *)a2[4];
    v155 = sub_1B2187F40(v45, (uint64_t)v196, (uint64_t)v154);
    v152 = v47;
    v153 = v46;
    if (v9)
    {
      v150 = v9;
      v151 = v10;
      v48 = v8;
      if (v10)
      {
        v49 = v155 + 4;
        v50 = v151;
        do
        {
          v51 = *(_OWORD *)(v12 + 16);
          v186 = *(_OWORD *)v12;
          v187 = v51;
          v52 = *(_OWORD *)(v12 + 32);
          v53 = *(_OWORD *)(v12 + 48);
          v54 = *(_OWORD *)(v12 + 80);
          v190 = *(_OWORD *)(v12 + 64);
          v191 = v54;
          v188 = v52;
          v189 = v53;
          v55 = *(_OWORD *)(v12 + 96);
          v56 = *(_OWORD *)(v12 + 112);
          v57 = *(_OWORD *)(v12 + 128);
          v195 = *(_BYTE *)(v12 + 144);
          v193 = v56;
          v194 = v57;
          v192 = v55;
          v58 = (_QWORD *)*((_QWORD *)&v186 + 1);
          if (*((_QWORD *)&v186 + 1))
          {
            v49[2] = v186;
            v59 = v58[10];
            v60 = v58[11];
            v198 = v58;
            v169 = v50;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v49 = v59;
            v49[1] = v60;
            v61 = *((_QWORD *)&v187 + 1);
            v62 = v188;
            v63 = v189;
            sub_1B1A1B54C((uint64_t)&v186);
            v160 = sub_1B1F33A8C(v61, v62, *((uint64_t *)&v62 + 1), v63);
            v164 = v64;
            v66 = v65;
            v183 = v67;
            v68 = sub_1B1F33A8C(*((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191);
            v70 = v69;
            v72 = v71;
            v176 = v73;
            v74 = sub_1B1F33A8C(*((uint64_t *)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193);
            v177 = sub_1B1F33F18((uint64_t)v160, v164, v66, v183, (uint64_t)v68, v70, v72, v176, (uint64_t)v74, v75, v76, v77);
            v184 = v78;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v79 = sub_1B1F341B0((uint64_t)v177, v184);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v186);
            swift_release();
            swift_release();
            v50 = v169;
            v48 = v158;
            *(v49 - 4) = v79;
          }
          v49 += 8;
          v12 += 152;
          --v50;
        }
        while (v50);
      }
      v80 = (unint64_t)v155;
      sub_1B2182668(v150, v48, v151, (uint64_t)v155, v152, (uint64_t)a2, (uint64_t (*)(_QWORD))sub_1B1A1B330);
    }
    else
    {
      v83 = a1[6];
      v84 = a1[7];
      v85 = (_QWORD *)(v84 - v83);
      if (v84 != v83)
      {
        v119 = v155 + 4;
        v120 = v12 + 152 * v83;
        do
        {
          v121 = *(_OWORD *)(v120 + 16);
          v186 = *(_OWORD *)v120;
          v187 = v121;
          v122 = *(_OWORD *)(v120 + 32);
          v123 = *(_OWORD *)(v120 + 48);
          v124 = *(_OWORD *)(v120 + 80);
          v190 = *(_OWORD *)(v120 + 64);
          v191 = v124;
          v188 = v122;
          v189 = v123;
          v125 = *(_OWORD *)(v120 + 96);
          v126 = *(_OWORD *)(v120 + 112);
          v127 = *(_OWORD *)(v120 + 128);
          v195 = *(_BYTE *)(v120 + 144);
          v193 = v126;
          v194 = v127;
          v192 = v125;
          v128 = *((_QWORD *)&v186 + 1);
          if (*((_QWORD *)&v186 + 1))
          {
            v119[2] = v186;
            v129 = *(_QWORD *)(v128 + 80);
            v130 = *(_QWORD *)(v128 + 88);
            v198 = v85;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v119 = v129;
            v119[1] = v130;
            v131 = *((_QWORD *)&v187 + 1);
            v132 = v188;
            v133 = v189;
            sub_1B1A1B54C((uint64_t)&v186);
            v162 = sub_1B1F33A8C(v131, v132, *((uint64_t *)&v132 + 1), v133);
            v166 = v134;
            v136 = v135;
            v180 = v137;
            v138 = sub_1B1F33A8C(*((uint64_t *)&v189 + 1), v190, *((uint64_t *)&v190 + 1), v191);
            v140 = v139;
            v142 = v141;
            v172 = v143;
            v144 = sub_1B1F33A8C(*((uint64_t *)&v191 + 1), v192, *((uint64_t *)&v192 + 1), v193);
            v173 = sub_1B1F33F18((uint64_t)v162, v166, v136, v180, (uint64_t)v138, v140, v142, v172, (uint64_t)v144, v145, v146, v147);
            v181 = v148;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v149 = sub_1B1F341B0((uint64_t)v173, v181);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v186);
            swift_release();
            swift_release();
            v85 = v198;
            *(v119 - 4) = v149;
          }
          v119 += 8;
          v120 += 152;
          v85 = (_QWORD *)((char *)v85 - 1);
        }
        while (v85);
      }
      v80 = (unint64_t)v155;
      sub_1B21827B4(*(_QWORD *)(v157 + 232), *(_QWORD *)(v157 + 240), (uint64_t)v155, v152, (uint64_t)a2, (uint64_t (*)(_QWORD))sub_1B1A1B330);
    }
    ecs_stack_allocator_deallocate(v154, v80, v153 << 6);
  }
  return swift_release();
}

uint64_t sub_1B2195280(uint64_t a1, uint64_t a2)
{
  return sub_1B219529C(a1, a2, (void (*)(_QWORD *, _QWORD *))sub_1B2194914);
}

uint64_t sub_1B219529C(uint64_t result, uint64_t a2, void (*a3)(_QWORD *, _QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[40];
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = v3;
  v30 = *(_OWORD *)result;
  v31 = *(_OWORD *)(result + 16);
  v32 = *(_QWORD *)(result + 32);
  v24 = *(_QWORD *)(result + 80);
  if (v24 >= 1)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    v7 = *(_QWORD *)(result + 56);
    v8 = *(_QWORD *)(result + 64);
    v9 = *(_QWORD **)(result + 72);
    v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v7)
    {
      v11 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v23 = v8;
      v21 = v5;
      sub_1B1D6631C(v5);
      v12 = (uint64_t *)(v6 + 24);
      v22 = v11;
      while (1)
      {
        v26 = v7;
        v13 = *((unsigned int *)v12 - 6);
        v14 = *((unsigned int *)v12 - 5);
        v15 = *((unsigned int *)v12 - 4);
        v28 = *v12;
        v29 = *(v12 - 1);
        v16 = v12[2];
        v27 = v12[1];
        v43 = v4;
        if (v11)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A000F0((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v18 = v9[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v14 - v13 + v15);
        v38[5] = v24;
        v38[6] = v13;
        v38[7] = v14;
        v38[8] = 0;
        v38[9] = 0;
        v39 = 1;
        v40 = v29;
        v41 = v28;
        v42 = v27;
        swift_retain();
        v20 = v43;
        a3(v38, v9);
        v4 = v20;
        if (v20)
          break;
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        v36 = v32;
        sub_1B1F05D48(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        v11 = v22;
        if ((v22 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        v7 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B1D66364(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      v34 = v32;
      sub_1B1F05D48(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if ((v22 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B1D66364(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B21955B0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __n128 v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __n128 v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  _QWORD *v77;
  uint64_t j;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  char v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  __n128 v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  char v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  __n128 v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _OWORD *v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  char v151;
  __int128 v152[2];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;

  sub_1B1A1B460(0);
  v4 = v3;
  v5 = a1[1];
  sub_1B1A1B3C8(0);
  v7 = v6;
  v9 = (uint64_t *)a1[11];
  v8 = a1[12];
  v10 = a1[13];
  v11 = a1[2];
  swift_retain();
  v12 = sub_1B1A12038(v7, (uint64_t)&off_1E638CEA0, v9, v8, v10, v11);
  sub_1B1A10AA4(*(_QWORD *)(v5 + 40), v4, &v142);
  v136 = v5;
  if (v142 == 1)
  {
    a2[9] = v4;
    a2[10] = &off_1E63AD5B0;
    v13 = sub_1B1A12038(v4, (uint64_t)&off_1E63AD5B0, v9, v8, v10, v11);
    if (v9)
    {
      if (v10)
      {
        v14 = v10 - 1;
        for (i = (_QWORD *)(v13 + 24); ; i += 6)
        {
          v16 = *(_OWORD *)(v12 + 16);
          v142 = *(_OWORD *)v12;
          v143 = v16;
          v17 = *(_OWORD *)(v12 + 32);
          v18 = *(_OWORD *)(v12 + 48);
          v19 = *(_OWORD *)(v12 + 80);
          v146 = *(_OWORD *)(v12 + 64);
          v147 = v19;
          v144 = v17;
          v145 = v18;
          v20 = *(_OWORD *)(v12 + 96);
          v21 = *(_OWORD *)(v12 + 112);
          v22 = *(_OWORD *)(v12 + 128);
          v151 = *(_BYTE *)(v12 + 144);
          v149 = v21;
          v150 = v22;
          v148 = v20;
          v23 = *((_QWORD *)&v142 + 1);
          if (*((_QWORD *)&v142 + 1))
          {
            i[2] = v142;
            v24 = *(_QWORD *)(v23 + 80);
            v25 = *(_QWORD *)(v23 + 88);
            v155 = v14;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *i = v24;
            i[1] = v25;
            v26 = *((_QWORD *)&v143 + 1);
            v27 = v144;
            v28 = v145;
            sub_1B1A1B54C((uint64_t)&v142);
            v29 = sub_1B1F33A8C(v26, v27, *((uint64_t *)&v27 + 1), v28);
            v31 = v30;
            v32 = sub_1B1F33A8C(*((uint64_t *)&v145 + 1), v146, *((uint64_t *)&v146 + 1), v147);
            v37 = sub_1B1F34244((uint64_t)v29, v31, (uint64_t)v32, v33, v34, v35, v36);
            v138 = v38;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v39 = sub_1B1F34478((uint64_t)v37, v138);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v142);
            swift_release();
            swift_release();
            v14 = v155;
            *(i - 3) = v39;
          }
          if (!v14)
            break;
          --v14;
          v12 += 152;
        }
      }
    }
    else
    {
      v70 = a1[6];
      v71 = a1[7];
      if (v70 != v71)
      {
        v76 = v12 + 152 * v70;
        v77 = (_QWORD *)(v13 + 48 * v70 + 24);
        for (j = ~v70 + v71; ; --j)
        {
          v79 = *(_OWORD *)(v76 + 16);
          v142 = *(_OWORD *)v76;
          v143 = v79;
          v80 = *(_OWORD *)(v76 + 32);
          v81 = *(_OWORD *)(v76 + 48);
          v82 = *(_OWORD *)(v76 + 80);
          v146 = *(_OWORD *)(v76 + 64);
          v147 = v82;
          v144 = v80;
          v145 = v81;
          v83 = *(_OWORD *)(v76 + 96);
          v84 = *(_OWORD *)(v76 + 112);
          v85 = *(_OWORD *)(v76 + 128);
          v151 = *(_BYTE *)(v76 + 144);
          v149 = v84;
          v150 = v85;
          v148 = v83;
          v86 = *((_QWORD *)&v142 + 1);
          if (*((_QWORD *)&v142 + 1))
          {
            v77[2] = v142;
            v87 = *(_QWORD *)(v86 + 80);
            v88 = *(_QWORD *)(v86 + 88);
            v155 = j;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v77 = v87;
            v77[1] = v88;
            v89 = *((_QWORD *)&v143 + 1);
            v90 = v144;
            v91 = v145;
            sub_1B1A1B54C((uint64_t)&v142);
            v92 = sub_1B1F33A8C(v89, v90, *((uint64_t *)&v90 + 1), v91);
            v94 = v93;
            v95 = sub_1B1F33A8C(*((uint64_t *)&v145 + 1), v146, *((uint64_t *)&v146 + 1), v147);
            v100 = sub_1B1F34244((uint64_t)v92, v94, (uint64_t)v95, v96, v97, v98, v99);
            v140 = v101;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v102 = sub_1B1F34478((uint64_t)v100, v140);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v142);
            swift_release();
            swift_release();
            j = v155;
            *(v77 - 3) = v102;
          }
          if (!j)
            break;
          v76 += 152;
          v77 += 6;
        }
      }
    }
  }
  else
  {
    v137 = v8;
    v134 = v10;
    if (!v9)
      v10 = a1[7] - a1[6];
    v153 = 0;
    memset(v152, 0, sizeof(v152));
    v154 = 0xFFFFFFFFLL;
    v132 = (_QWORD *)a2[4];
    v133 = sub_1B2188088(v10, v152, (uint64_t)v132);
    v130 = v41;
    v131 = v40;
    if (v9)
    {
      v129 = v9;
      v42 = v8;
      if (v134)
      {
        v43 = v134;
        v44 = (_QWORD *)v133 + 3;
        do
        {
          v45 = *(_OWORD *)(v12 + 16);
          v142 = *(_OWORD *)v12;
          v143 = v45;
          v46 = *(_OWORD *)(v12 + 32);
          v47 = *(_OWORD *)(v12 + 48);
          v48 = *(_OWORD *)(v12 + 80);
          v146 = *(_OWORD *)(v12 + 64);
          v147 = v48;
          v144 = v46;
          v145 = v47;
          v49 = *(_OWORD *)(v12 + 96);
          v50 = *(_OWORD *)(v12 + 112);
          v51 = *(_OWORD *)(v12 + 128);
          v151 = *(_BYTE *)(v12 + 144);
          v149 = v50;
          v150 = v51;
          v148 = v49;
          v52 = *((_QWORD *)&v142 + 1);
          if (*((_QWORD *)&v142 + 1))
          {
            v44[2] = v142;
            v53 = *(_QWORD *)(v52 + 80);
            v54 = *(_QWORD *)(v52 + 88);
            v155 = v52;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v44 = v53;
            v44[1] = v54;
            v55 = *((_QWORD *)&v143 + 1);
            v56 = v144;
            v57 = v145;
            sub_1B1A1B54C((uint64_t)&v142);
            v58 = sub_1B1F33A8C(v55, v56, *((uint64_t *)&v56 + 1), v57);
            v60 = v59;
            v61 = sub_1B1F33A8C(*((uint64_t *)&v145 + 1), v146, *((uint64_t *)&v146 + 1), v147);
            v66 = sub_1B1F34244((uint64_t)v58, v60, (uint64_t)v61, v62, v63, v64, v65);
            v139 = v67;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v68 = sub_1B1F34478((uint64_t)v66, v139);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v142);
            swift_release();
            swift_release();
            v42 = v137;
            *(v44 - 3) = v68;
          }
          v44 += 6;
          v12 += 152;
          --v43;
        }
        while (v43);
      }
      v69 = (unint64_t)v133;
      sub_1B21828FC(v129, v42, v134, (uint64_t)v133, v130);
    }
    else
    {
      v72 = a1[6];
      v73 = a1[7];
      v74 = v73 - v72;
      if (v73 != v72)
      {
        v103 = (_QWORD *)v133 + 3;
        v104 = v12 + 152 * v72;
        do
        {
          v105 = *(_OWORD *)(v104 + 16);
          v142 = *(_OWORD *)v104;
          v143 = v105;
          v106 = *(_OWORD *)(v104 + 32);
          v107 = *(_OWORD *)(v104 + 48);
          v108 = *(_OWORD *)(v104 + 80);
          v146 = *(_OWORD *)(v104 + 64);
          v147 = v108;
          v144 = v106;
          v145 = v107;
          v109 = *(_OWORD *)(v104 + 96);
          v110 = *(_OWORD *)(v104 + 112);
          v111 = *(_OWORD *)(v104 + 128);
          v151 = *(_BYTE *)(v104 + 144);
          v149 = v110;
          v150 = v111;
          v148 = v109;
          v112 = *((_QWORD *)&v142 + 1);
          if (*((_QWORD *)&v142 + 1))
          {
            v103[2] = v142;
            v113 = *(_QWORD *)(v112 + 80);
            v114 = *(_QWORD *)(v112 + 88);
            v155 = v74;
            swift_retain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            *v103 = v113;
            v103[1] = v114;
            v115 = *((_QWORD *)&v143 + 1);
            v116 = v144;
            v117 = v145;
            sub_1B1A1B54C((uint64_t)&v142);
            v118 = sub_1B1F33A8C(v115, v116, *((uint64_t *)&v116 + 1), v117);
            v120 = v119;
            v121 = sub_1B1F33A8C(*((uint64_t *)&v145 + 1), v146, *((uint64_t *)&v146 + 1), v147);
            v126 = sub_1B1F34244((uint64_t)v118, v120, (uint64_t)v121, v122, v123, v124, v125);
            v141 = v127;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            type metadata accessor for KeyframeTimelineRuntime();
            swift_allocObject();
            v128 = sub_1B1F34478((uint64_t)v126, v141);
            swift_bridgeObjectRelease();
            sub_1B1A1B624((uint64_t)&v142);
            swift_release();
            swift_release();
            v74 = v155;
            *(v103 - 3) = v128;
          }
          v103 += 6;
          v104 += 152;
          --v74;
        }
        while (v74);
      }
      v69 = (unint64_t)v133;
      sub_1B2182A4C(*(_QWORD *)(v136 + 232), *(_QWORD *)(v136 + 240), (uint64_t)v133, v130);
    }
    ecs_stack_allocator_deallocate(v132, v69, 48 * v131);
  }
  return swift_release();
}

uint64_t sub_1B2195D90(uint64_t a1, uint64_t a2)
{
  return sub_1B219529C(a1, a2, (void (*)(_QWORD *, _QWORD *))sub_1B21955B0);
}

uint64_t sub_1B2195DAC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  size_t v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  unsigned __int8 *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  unsigned __int8 *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  char v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _OWORD *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  char v137;
  __int128 v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  sub_1B1A1B4F8(0, &qword_1ED4B9AB0, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for KeyframeAnimationRuntime);
  v5 = v4;
  v6 = a1[1];
  sub_1B1A1B4F8(0, &qword_1ED4B9088, (uint64_t (*)(_QWORD, _QWORD, _UNKNOWN **))type metadata accessor for KeyframeAnimation);
  v8 = v7;
  v10 = (uint64_t *)a1[11];
  v9 = a1[12];
  v11 = a1[13];
  v12 = a1[2];
  swift_retain();
  v143 = sub_1B1A12038(v8, (uint64_t)&off_1E638CEA0, v10, v9, v11, v12);
  sub_1B1A10AA4(*(_QWORD *)(v6 + 40), v5, &v128);
  v123 = v6;
  v124 = v11;
  if (v128 != 1)
  {
    v122 = v9;
    v37 = v11;
    if (!v10)
      v37 = a1[7] - a1[6];
    v138 = 0uLL;
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0xFFFFFFFFLL;
    v38 = a2[4];
    v127 = sub_1B2188088(v37, &v138, v38);
    v119 = (_QWORD *)v38;
    v117 = v40;
    v118 = v39;
    if (v10)
    {
      v120 = v10;
      v41 = v9;
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v46 = v143 + 152 * i;
          v47 = *(_OWORD *)(v46 + 16);
          v128 = *(_OWORD *)v46;
          v129 = v47;
          v48 = *(_OWORD *)(v46 + 32);
          v49 = *(_OWORD *)(v46 + 48);
          v50 = *(_OWORD *)(v46 + 80);
          v132 = *(_OWORD *)(v46 + 64);
          v133 = v50;
          v130 = v48;
          v131 = v49;
          v51 = *(_OWORD *)(v46 + 96);
          v52 = *(_OWORD *)(v46 + 112);
          v53 = *(_OWORD *)(v46 + 128);
          v137 = *(_BYTE *)(v46 + 144);
          v135 = v52;
          v136 = v53;
          v134 = v51;
          v54 = *((_QWORD *)&v128 + 1);
          if (!*((_QWORD *)&v128 + 1))
            continue;
          v55 = &v127[3 * i];
          v55[5] = v128;
          v56 = *(_QWORD *)(v54 + 80);
          v57 = *(_QWORD *)(v54 + 88);
          swift_retain();
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          v55[3] = v56;
          v55[4] = v57;
          v58 = (char *)*((_QWORD *)&v129 + 1);
          v59 = *((_QWORD *)&v130 + 1);
          v60 = v130;
          if (*((_QWORD *)&v130 + 1))
          {
            v61 = *(_QWORD *)(*((_QWORD *)&v130 + 1) + 16);
            if (v61)
            {
              v62 = v131;
              if (*(_BYTE *)(*((_QWORD *)&v130 + 1) + 49) != 1)
              {
LABEL_34:
                sub_1B1A1B54C((uint64_t)&v128);
                v58 = sub_1B1F33020((uint64_t)v58, v60, v59, v62, 0.033333);
                v60 = v65;
                goto LABEL_25;
              }
              v63 = (unsigned __int8 *)(*((_QWORD *)&v130 + 1) + 73);
              while (--v61)
              {
                v64 = *v63;
                v63 += 24;
                if (v64 != 1)
                  goto LABEL_34;
              }
            }
            sub_1B1A1B54C((uint64_t)&v128);
            swift_bridgeObjectRetain();
          }
          else
          {
            sub_1B1A1B54C((uint64_t)&v128);
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_25:
          type metadata accessor for KeyframeTimelineRuntime();
          v43 = swift_allocObject();
          *(_BYTE *)(v43 + 80) = 1;
          *(_QWORD *)(v43 + 32) = 4;
          *(_QWORD *)(v43 + 48) = sub_1B1F32D60;
          *(_QWORD *)(v43 + 56) = 0;
          *(_QWORD *)(v43 + 64) = sub_1B1F32B70;
          *(_QWORD *)(v43 + 72) = 0;
          v44 = 4 * *((_QWORD *)v58 + 2);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v45 = (char *)swift_slowAlloc();
          memmove(v45, v58 + 32, v44);
          *(_QWORD *)(v43 + 16) = v45;
          *(_QWORD *)(v43 + 24) = &v45[v44];
          *(_QWORD *)(v43 + 40) = v60;
          swift_bridgeObjectRelease();
          sub_1B1A1B624((uint64_t)&v128);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          *(_QWORD *)&v127[3 * i] = v43;
          v11 = v124;
          v41 = v122;
        }
      }
      v66 = (unint64_t)v127;
      sub_1B2182B98(v120, v41, v11, (uint64_t)v127, v117);
LABEL_55:
      ecs_stack_allocator_deallocate(v119, v66, 48 * v118);
      return swift_release();
    }
    v91 = a1[6];
    v121 = a1[7];
    v66 = (unint64_t)v127;
    if (v91 == v121)
    {
LABEL_54:
      sub_1B2182CF8(*(_QWORD *)(v123 + 232), *(_QWORD *)(v123 + 240), v66, v117);
      goto LABEL_55;
    }
    v93 = 0;
    while (1)
    {
      v98 = v143 + 152 * v91;
      v99 = *(_OWORD *)(v98 + 16);
      v128 = *(_OWORD *)v98;
      v129 = v99;
      v100 = *(_OWORD *)(v98 + 32);
      v101 = *(_OWORD *)(v98 + 48);
      v102 = *(_OWORD *)(v98 + 80);
      v132 = *(_OWORD *)(v98 + 64);
      v133 = v102;
      v130 = v100;
      v131 = v101;
      v103 = *(_OWORD *)(v98 + 96);
      v104 = *(_OWORD *)(v98 + 112);
      v105 = *(_OWORD *)(v98 + 128);
      v137 = *(_BYTE *)(v98 + 144);
      v135 = v104;
      v136 = v105;
      v134 = v103;
      v106 = *((_QWORD *)&v128 + 1);
      if (!*((_QWORD *)&v128 + 1))
        goto LABEL_61;
      v107 = (_QWORD *)(v66 + 48 * v93);
      v107[5] = v128;
      v108 = *(_QWORD *)(v106 + 80);
      v109 = *(_QWORD *)(v106 + 88);
      swift_retain();
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v107[3] = v108;
      v107[4] = v109;
      v110 = (char *)*((_QWORD *)&v129 + 1);
      v111 = v130;
      if (*((_QWORD *)&v130 + 1))
      {
        v112 = *(_QWORD *)(*((_QWORD *)&v130 + 1) + 16);
        if (v112)
        {
          v113 = v131;
          if (*(_BYTE *)(*((_QWORD *)&v130 + 1) + 49) != 1)
          {
LABEL_69:
            sub_1B1A1B54C((uint64_t)&v128);
            v110 = sub_1B1F33020((uint64_t)v110, v111, *((uint64_t *)&v111 + 1), v113, 0.033333);
            v94 = v116;
            goto LABEL_60;
          }
          v114 = (unsigned __int8 *)(*((_QWORD *)&v130 + 1) + 73);
          while (--v112)
          {
            v115 = *v114;
            v114 += 24;
            if (v115 != 1)
              goto LABEL_69;
          }
        }
        sub_1B1A1B54C((uint64_t)&v128);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1B1A1B54C((uint64_t)&v128);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      v94 = v111;
LABEL_60:
      v66 = (unint64_t)v127;
      type metadata accessor for KeyframeTimelineRuntime();
      v95 = swift_allocObject();
      *(_BYTE *)(v95 + 80) = 1;
      *(_QWORD *)(v95 + 32) = 4;
      *(_QWORD *)(v95 + 48) = sub_1B1F32D60;
      *(_QWORD *)(v95 + 56) = 0;
      *(_QWORD *)(v95 + 64) = sub_1B1F32B70;
      *(_QWORD *)(v95 + 72) = 0;
      v96 = 4 * *((_QWORD *)v110 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v97 = (char *)swift_slowAlloc();
      memmove(v97, v110 + 32, v96);
      *(_QWORD *)(v95 + 16) = v97;
      *(_QWORD *)(v95 + 24) = &v97[v96];
      *(_QWORD *)(v95 + 40) = v94;
      swift_bridgeObjectRelease();
      sub_1B1A1B624((uint64_t)&v128);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)&v127[3 * v93] = v95;
LABEL_61:
      ++v91;
      ++v93;
      if (v91 == v121)
        goto LABEL_54;
    }
  }
  a2[9] = v5;
  a2[10] = &off_1E63AD5B0;
  v126 = sub_1B1A12038(v5, (uint64_t)&off_1E63AD5B0, v10, v9, v11, v12);
  if (!v10)
  {
    v67 = a1[6];
    v125 = a1[7];
    if (v67 == v125)
      return swift_release();
    while (1)
    {
      v71 = v143 + 152 * v67;
      v72 = *(_OWORD *)(v71 + 16);
      v128 = *(_OWORD *)v71;
      v129 = v72;
      v73 = *(_OWORD *)(v71 + 32);
      v74 = *(_OWORD *)(v71 + 48);
      v75 = *(_OWORD *)(v71 + 80);
      v132 = *(_OWORD *)(v71 + 64);
      v133 = v75;
      v130 = v73;
      v131 = v74;
      v76 = *(_OWORD *)(v71 + 96);
      v77 = *(_OWORD *)(v71 + 112);
      v78 = *(_OWORD *)(v71 + 128);
      v137 = *(_BYTE *)(v71 + 144);
      v135 = v77;
      v136 = v78;
      v134 = v76;
      v79 = *((_QWORD *)&v128 + 1);
      if (!*((_QWORD *)&v128 + 1))
        goto LABEL_42;
      v80 = (_QWORD *)(v126 + 48 * v67);
      v80[5] = v128;
      v81 = *(_QWORD *)(v79 + 80);
      v82 = *(_QWORD *)(v79 + 88);
      swift_retain();
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v80[3] = v81;
      v80[4] = v82;
      v83 = (char *)*((_QWORD *)&v129 + 1);
      v85 = *((_QWORD *)&v130 + 1);
      v84 = v130;
      if (*((_QWORD *)&v130 + 1))
      {
        v86 = *(_QWORD *)(*((_QWORD *)&v130 + 1) + 16);
        if (v86)
        {
          v87 = v131;
          if (*(_BYTE *)(*((_QWORD *)&v130 + 1) + 49) != 1)
          {
LABEL_50:
            sub_1B1A1B54C((uint64_t)&v128);
            v83 = sub_1B1F33020((uint64_t)v83, v84, v85, v87, 0.033333);
            v84 = v90;
            goto LABEL_41;
          }
          v88 = (unsigned __int8 *)(*((_QWORD *)&v130 + 1) + 73);
          while (--v86)
          {
            v89 = *v88;
            v88 += 24;
            if (v89 != 1)
              goto LABEL_50;
          }
        }
        sub_1B1A1B54C((uint64_t)&v128);
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1B1A1B54C((uint64_t)&v128);
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_41:
      type metadata accessor for KeyframeTimelineRuntime();
      v68 = swift_allocObject();
      *(_BYTE *)(v68 + 80) = 1;
      *(_QWORD *)(v68 + 32) = 4;
      *(_QWORD *)(v68 + 48) = sub_1B1F32D60;
      *(_QWORD *)(v68 + 56) = 0;
      *(_QWORD *)(v68 + 64) = sub_1B1F32B70;
      *(_QWORD *)(v68 + 72) = 0;
      v69 = 4 * *((_QWORD *)v83 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v70 = (char *)swift_slowAlloc();
      memmove(v70, v83 + 32, v69);
      *(_QWORD *)(v68 + 16) = v70;
      *(_QWORD *)(v68 + 24) = &v70[v69];
      *(_QWORD *)(v68 + 40) = v84;
      swift_bridgeObjectRelease();
      sub_1B1A1B624((uint64_t)&v128);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)(v126 + 48 * v67) = v68;
LABEL_42:
      if (++v67 == v125)
        return swift_release();
    }
  }
  if (v11)
  {
    for (j = 0; j != v11; ++j)
    {
      v17 = v143 + 152 * j;
      v18 = *(_OWORD *)(v17 + 16);
      v128 = *(_OWORD *)v17;
      v129 = v18;
      v19 = *(_OWORD *)(v17 + 32);
      v20 = *(_OWORD *)(v17 + 48);
      v21 = *(_OWORD *)(v17 + 80);
      v132 = *(_OWORD *)(v17 + 64);
      v133 = v21;
      v130 = v19;
      v131 = v20;
      v22 = *(_OWORD *)(v17 + 96);
      v23 = *(_OWORD *)(v17 + 112);
      v24 = *(_OWORD *)(v17 + 128);
      v137 = *(_BYTE *)(v17 + 144);
      v135 = v23;
      v136 = v24;
      v134 = v22;
      v25 = *((_QWORD *)&v128 + 1);
      if (!*((_QWORD *)&v128 + 1))
        continue;
      v26 = (_QWORD *)(v126 + 48 * j);
      v26[5] = v128;
      v27 = *(_QWORD *)(v25 + 80);
      v28 = *(_QWORD *)(v25 + 88);
      swift_retain();
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      v26[3] = v27;
      v26[4] = v28;
      v29 = (char *)*((_QWORD *)&v129 + 1);
      v31 = *((_QWORD *)&v130 + 1);
      v30 = v130;
      if (*((_QWORD *)&v130 + 1))
      {
        v32 = *(_QWORD *)(*((_QWORD *)&v130 + 1) + 16);
        if (v32)
        {
          v33 = v131;
          if (*(_BYTE *)(*((_QWORD *)&v130 + 1) + 49) != 1)
          {
LABEL_16:
            sub_1B1A1B54C((uint64_t)&v128);
            v29 = sub_1B1F33020((uint64_t)v29, v30, v31, v33, 0.033333);
            v30 = v36;
            goto LABEL_7;
          }
          v34 = (unsigned __int8 *)(*((_QWORD *)&v130 + 1) + 73);
          while (--v32)
          {
            v35 = *v34;
            v34 += 24;
            if (v35 != 1)
              goto LABEL_16;
          }
        }
        sub_1B1A1B54C((uint64_t)&v128);
        swift_bridgeObjectRetain();
      }
      else
      {
        sub_1B1A1B54C((uint64_t)&v128);
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_7:
      type metadata accessor for KeyframeTimelineRuntime();
      v14 = swift_allocObject();
      *(_BYTE *)(v14 + 80) = 1;
      *(_QWORD *)(v14 + 32) = 4;
      *(_QWORD *)(v14 + 48) = sub_1B1F32D60;
      *(_QWORD *)(v14 + 56) = 0;
      *(_QWORD *)(v14 + 64) = sub_1B1F32B70;
      *(_QWORD *)(v14 + 72) = 0;
      v15 = 4 * *((_QWORD *)v29 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16 = (char *)swift_slowAlloc();
      memmove(v16, v29 + 32, v15);
      *(_QWORD *)(v14 + 16) = v16;
      *(_QWORD *)(v14 + 24) = &v16[v15];
      *(_QWORD *)(v14 + 40) = v30;
      swift_bridgeObjectRelease();
      sub_1B1A1B624((uint64_t)&v128);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)(v126 + 48 * j) = v14;
      v11 = v124;
    }
  }
  return swift_release();
}

uint64_t sub_1B21967A8(uint64_t a1, uint64_t a2)
{
  return sub_1B219529C(a1, a2, (void (*)(_QWORD *, _QWORD *))sub_1B2195DAC);
}

uint64_t sub_1B21967C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  id v19;
  int v20;
  unsigned int v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  char *v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  char v57;
  char *v58;
  void *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  id v72;
  int v73;
  unsigned int v74;
  char *v75;
  char *v76;
  uint64_t v77;
  void *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  void *v85;
  _QWORD *v86;
  uint64_t v87;
  id v88;
  int v89;
  int v90;
  _QWORD *v91;
  char *v92;
  uint64_t v93;
  void *v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  void *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  char v118;

  v117 = a3;
  v114 = a2;
  v115 = (_QWORD *)sub_1B222826C();
  v113 = *(v115 - 1);
  MEMORY[0x1E0C80A78](v115, v4);
  v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t *)a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[1];
  v11 = a1[2];
  swift_retain();
  v12 = sub_1B1A12038((uint64_t)&type metadata for VideoCapture, (uint64_t)&off_1E6378AA0, v7, v8, v9, v11);
  v13 = v116;
  sub_1B1A10AA4(*(_QWORD *)(v10 + 40), (uint64_t)&type metadata for VideoCaptureRuntime, &v118);
  v111 = v10;
  v107 = v13;
  if (v118 == 1)
  {
    v14 = v114;
    v114[9] = &type metadata for VideoCaptureRuntime;
    v14[10] = &off_1E639AD40;
    v15 = sub_1B1A12038((uint64_t)&type metadata for VideoCaptureRuntime, (uint64_t)&off_1E639AD40, v7, v8, v9, v11);
    if (v7)
    {
      v16 = v117;
      if (v9)
      {
        v17 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        v18 = (_QWORD *)(v15 + 24);
        v112 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        v113 = OBJC_IVAR____TtC3VFX13EntityManager_updateQueue;
        do
        {
          v24 = *(_QWORD *)&v17[v16];
          if (v24)
          {
            v25 = *(void **)(v24 + 16);
            if ((*(_BYTE *)v12 & 1) != 0)
            {
              v116 = *(char **)(v16 + v113);
              v26 = *(unsigned __int8 *)(v12 + 1);
              v27 = *(unsigned __int8 *)(v12 + 2);
              v28 = *(_QWORD *)(v12 + 8);
              v29 = *(_QWORD *)(v12 + 16);
              v30 = (_QWORD *)*(v18 - 3);
              if (!v30
                || *((_BYTE *)v18 - 16) != 1
                || *((unsigned __int8 *)v18 - 15) != v26
                || ((v27 ^ *((unsigned __int8 *)v18 - 14)) & 1) != 0
                || (*(v18 - 1) != v28 || *v18 != v29) && (sub_1B2229D24() & 1) == 0)
              {
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *((_BYTE *)v18 - 16) = 1;
                *((_BYTE *)v18 - 15) = v26;
                *((_BYTE *)v18 - 14) = v27;
                *(v18 - 1) = v28;
                *v18 = v29;
                v19 = objc_allocWithZone((Class)type metadata accessor for VideoCaptureSession());
                v114 = v30;
                if (v27)
                  v20 = 0x10000;
                else
                  v20 = 0;
                v21 = v115 & 0xFF000000 | (v26 << 8) | v20 | 1;
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                v22 = v116;
                LODWORD(v115) = v21;
                v23 = sub_1B1BAB338(v25, v22, v21);

                *(v18 - 3) = v23;
                swift_unknownObjectRelease();
              }
              v16 = v117;
              v17 = v112;
            }
            else
            {
              v31 = (char *)*(v18 - 3);
              if (v31)
              {
                v32 = *(void **)&v31[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session];
                swift_unknownObjectRetain();
                objc_msgSend(v32, sel_stopRunning);
                swift_unknownObjectRelease();

                *(v18 - 3) = 0;
              }
            }
          }
          v18 += 4;
          v12 += 24;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v61 = a1[6];
      v62 = a1[7];
      v63 = v62 - v61;
      v64 = v117;
      if (v62 != v61)
      {
        v69 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        v70 = (_QWORD *)(v15 + 32 * v61 + 24);
        v71 = v12 + 24 * v61;
        v112 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        v113 = OBJC_IVAR____TtC3VFX13EntityManager_updateQueue;
        do
        {
          v77 = *(_QWORD *)&v69[v64];
          if (v77)
          {
            v78 = *(void **)(v77 + 16);
            if ((*(_BYTE *)v71 & 1) != 0)
            {
              v116 = *(char **)(v64 + v113);
              v79 = *(unsigned __int8 *)(v71 + 1);
              v80 = *(unsigned __int8 *)(v71 + 2);
              v81 = *(_QWORD *)(v71 + 8);
              v82 = *(_QWORD *)(v71 + 16);
              v83 = (_QWORD *)*(v70 - 3);
              if (!v83
                || *((_BYTE *)v70 - 16) != 1
                || *((unsigned __int8 *)v70 - 15) != v79
                || ((v80 ^ *((unsigned __int8 *)v70 - 14)) & 1) != 0
                || (*(v70 - 1) != v81 || *v70 != v82) && (sub_1B2229D24() & 1) == 0)
              {
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *((_BYTE *)v70 - 16) = 1;
                *((_BYTE *)v70 - 15) = v79;
                *((_BYTE *)v70 - 14) = v80;
                *(v70 - 1) = v81;
                *v70 = v82;
                v72 = objc_allocWithZone((Class)type metadata accessor for VideoCaptureSession());
                v114 = v83;
                if (v80)
                  v73 = 0x10000;
                else
                  v73 = 0;
                v74 = v115 & 0xFF000000 | (v79 << 8) | v73 | 1;
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                v75 = v116;
                LODWORD(v115) = v74;
                v76 = sub_1B1BAB338(v78, v75, v74);

                *(v70 - 3) = v76;
                swift_unknownObjectRelease();
              }
              v69 = v112;
              v64 = v117;
            }
            else
            {
              v84 = (char *)*(v70 - 3);
              if (v84)
              {
                v85 = *(void **)&v84[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session];
                swift_unknownObjectRetain();
                objc_msgSend(v85, sel_stopRunning);
                swift_unknownObjectRelease();

                *(v70 - 3) = 0;
              }
            }
          }
          v70 += 4;
          v71 += 24;
          --v63;
        }
        while (v63);
      }
    }
  }
  else
  {
    v33 = v113;
    v110 = v8;
    v34 = v9;
    v35 = v7;
    if (!v7)
      v34 = a1[7] - a1[6];
    sub_1B2228260();
    v36 = sub_1B2228224();
    v38 = v37;
    (*(void (**)(char *, _QWORD *))(v33 + 8))(v6, v115);
    v105 = (_QWORD *)v114[4];
    v106 = sub_1B21881B8(v34, 0, 0x10000u, v36, v38, (uint64_t)v105);
    v103 = v40;
    v104 = v39;
    v41 = v117;
    if (v35)
    {
      v102 = v35;
      v42 = v110;
      if (v9)
      {
        v43 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        v44 = v106 + 3;
        v108 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        v109 = OBJC_IVAR____TtC3VFX13EntityManager_updateQueue;
        v45 = v9;
        do
        {
          v50 = *(_QWORD *)(v41 + v43);
          if (v50)
          {
            v51 = *(void **)(v50 + 16);
            if ((*(_BYTE *)v12 & 1) != 0)
            {
              v52 = *(char **)(v41 + v109);
              v53 = *(unsigned __int8 *)(v12 + 1);
              v54 = *(unsigned __int8 *)(v12 + 2);
              v56 = *(char **)(v12 + 8);
              v55 = *(_QWORD *)(v12 + 16);
              v115 = (_QWORD *)*(v44 - 3);
              v116 = v52;
              if (!v115
                || *((_BYTE *)v44 - 16) != 1
                || *((unsigned __int8 *)v44 - 15) != v53
                || ((v54 ^ *((unsigned __int8 *)v44 - 14)) & 1) != 0
                || ((char *)*(v44 - 1) != v56 || *v44 != v55)
                && (v112 = v56, v57 = sub_1B2229D24(), v56 = v112, (v57 & 1) == 0))
              {
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *((_BYTE *)v44 - 16) = 1;
                *((_BYTE *)v44 - 15) = v53;
                *((_BYTE *)v44 - 14) = v54;
                *(v44 - 1) = v56;
                *v44 = v55;
                v112 = (char *)objc_allocWithZone((Class)type metadata accessor for VideoCaptureSession());
                if (v54)
                  v46 = 0x10000;
                else
                  v46 = 0;
                v47 = v113 & 0xFF000000 | (v53 << 8) | v46 | 1;
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                v48 = v116;
                LODWORD(v113) = v47;
                v49 = sub_1B1BAB338(v51, v48, v47);

                *(v44 - 3) = v49;
                swift_unknownObjectRelease();
              }
              v41 = v117;
              v42 = v110;
              v43 = v108;
            }
            else
            {
              v58 = (char *)*(v44 - 3);
              if (v58)
              {
                v59 = *(void **)&v58[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session];
                swift_unknownObjectRetain();
                objc_msgSend(v59, sel_stopRunning, v102, v103, v104);
                swift_unknownObjectRelease();

                *(v44 - 3) = 0;
              }
            }
          }
          v44 += 4;
          v12 += 24;
          --v45;
        }
        while (v45);
      }
      v60 = (unint64_t)v106;
      sub_1B21836CC(v102, v42, v9, (uint64_t)v106, v103);
    }
    else
    {
      v65 = a1[6];
      v66 = a1[7];
      v67 = v66 - v65;
      if (v66 != v65)
      {
        v116 = (char *)OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        v86 = v106 + 3;
        v87 = v12 + 24 * v65;
        v110 = OBJC_IVAR____TtC3VFX13EntityManager_updateQueue;
        do
        {
          v93 = *(_QWORD *)&v116[v41];
          if (v93)
          {
            v94 = *(void **)(v93 + 16);
            if ((*(_BYTE *)v87 & 1) != 0)
            {
              v115 = *(_QWORD **)(v41 + v110);
              v95 = *(unsigned __int8 *)(v87 + 1);
              v96 = *(unsigned __int8 *)(v87 + 2);
              v98 = *(_QWORD *)(v87 + 8);
              v97 = *(_QWORD *)(v87 + 16);
              v99 = (char *)*(v86 - 3);
              if (!v99
                || *((_BYTE *)v86 - 16) != 1
                || *((unsigned __int8 *)v86 - 15) != v95
                || ((v96 ^ *((unsigned __int8 *)v86 - 14)) & 1) != 0
                || (*(v86 - 1) != v98 || *v86 != v97) && (sub_1B2229D24() & 1) == 0)
              {
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *((_BYTE *)v86 - 16) = 1;
                *((_BYTE *)v86 - 15) = v95;
                *((_BYTE *)v86 - 14) = v96;
                *(v86 - 1) = v98;
                *v86 = v97;
                v88 = objc_allocWithZone((Class)type metadata accessor for VideoCaptureSession());
                v112 = v99;
                if (v96)
                  v89 = 0x10000;
                else
                  v89 = 0;
                v90 = v113 & 0xFF000000 | (v95 << 8) | v89 | 1;
                swift_unknownObjectRetain();
                swift_bridgeObjectRetain();
                v91 = v115;
                LODWORD(v113) = v90;
                v92 = sub_1B1BAB338(v94, v91, v90);

                *(v86 - 3) = v92;
                swift_unknownObjectRelease();
              }
              v41 = v117;
            }
            else
            {
              v100 = (char *)*(v86 - 3);
              if (v100)
              {
                v101 = *(void **)&v100[OBJC_IVAR____TtC3VFX19VideoCaptureSession_session];
                swift_unknownObjectRetain();
                objc_msgSend(v101, sel_stopRunning);
                swift_unknownObjectRelease();

                *(v86 - 3) = 0;
              }
            }
          }
          v86 += 4;
          v87 += 24;
          --v67;
        }
        while (v67);
      }
      v60 = (unint64_t)v106;
      sub_1B2183818(*(_QWORD *)(v111 + 232), *(_QWORD *)(v111 + 240), (uint64_t)v106, v103);
    }
    ecs_stack_allocator_deallocate(v105, v60, 32 * v104);
  }
  return swift_release();
}

uint64_t sub_1B2197104(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B21967C4);
}

_QWORD *sub_1B2197120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = ecs_stack_allocator_allocate(a3, 8 * a1, 8);
  v6 = v5;
  if (a1)
  {
    *v5 = a2;
    if (a1 != 1)
    {
      v5[1] = a2;
      if (a1 != 2)
      {
        v5[2] = a2;
        v7 = a1 - 3;
        if (a1 != 3)
        {
          v8 = v5 + 3;
          do
          {
            *v8++ = a2;
            swift_unknownObjectRetain();
            --v7;
          }
          while (v7);
        }
        swift_unknownObjectRetain();
      }
      swift_unknownObjectRetain();
    }
    swift_unknownObjectRetain();
  }
  return v6;
}

uint64_t sub_1B21971C8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;

  v4 = v3;
  v61 = a3;
  v62 = a2;
  v6 = (int *)type metadata accessor for MovieRuntime(0);
  v60 = (_QWORD *)*((_QWORD *)v6 - 1);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)a1[11];
  v10 = a1[12];
  v12 = a1[13];
  v13 = a1[1];
  v14 = a1[2];
  swift_retain();
  v15 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FD58, v11, v10, v12, v14);
  sub_1B1A10AA4(*(_QWORD *)(v13 + 40), (uint64_t)v6, &v63);
  if (v63 != 1)
  {
    v55 = v10;
    v57 = v13;
    v58 = v11;
    v21 = v12;
    if (!v11)
      v21 = a1[7] - a1[6];
    v22 = sub_1B2228110();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v9, 1, 1, v22);
    *(_QWORD *)&v9[v6[5]] = 0;
    *(_QWORD *)&v9[v6[6]] = 0;
    v23 = &v9[v6[7]];
    *(_QWORD *)v23 = 0;
    v23[8] = 1;
    v9[v6[8]] = 0;
    *(_QWORD *)&v9[v6[9]] = 0;
    *(_QWORD *)&v9[v6[10]] = 0;
    v24 = v6[11];
    type metadata accessor for IOSurfaceWrapper();
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = 0;
    *(_QWORD *)&v9[v24] = v25;
    *(_QWORD *)&v9[v6[12]] = 0;
    v26 = *(_QWORD *)(v62 + 32);
    v27 = v60[9];
    v28 = *((unsigned __int8 *)v60 + 80) + 1;
    v56 = v27 * v21;
    v29 = ecs_stack_allocator_allocate(v26, v27 * v21, v28);
    v59 = v21;
    v60 = v29;
    if (v21)
    {
      v31 = v59;
      v30 = (uint64_t)v60;
      do
      {
        sub_1B1792810((uint64_t)v9, v30, type metadata accessor for MovieRuntime);
        v30 += v27;
        --v31;
      }
      while (v31);
    }
    sub_1B1A04628((uint64_t)v9, type metadata accessor for MovieRuntime);
    v32 = v58;
    if (v58)
    {
      v33 = v61;
      if (v12)
      {
        v34 = (uint64_t)v60;
        v35 = v12;
        v36 = v55;
        while (1)
        {
          sub_1B1BB2DE4(v15, v34, v33);
          if (v4)
            break;
          v34 += v27;
          v15 += 7;
          if (!--v35)
            goto LABEL_27;
        }
        v50 = *(_QWORD **)(v62 + 32);
        v51 = (unint64_t)v60;
LABEL_35:
        ecs_stack_allocator_deallocate(v50, v51, v56);
        return swift_release();
      }
      v36 = v55;
LABEL_27:
      v48 = (uint64_t)v60;
      v49 = v62;
      sub_1B218395C(v32, v36, v12, (uint64_t)v60, v59);
    }
    else
    {
      v44 = a1[6];
      v45 = a1[7];
      v46 = v45 - v44;
      v47 = v61;
      if (v45 != v44)
      {
        v52 = &v15[7 * v44];
        v48 = (uint64_t)v60;
        v53 = (uint64_t)v60;
        while (1)
        {
          sub_1B1BB2DE4(v52, v53, v47);
          if (v4)
            break;
          v53 += v27;
          v52 += 7;
          if (!--v46)
            goto LABEL_32;
        }
        v50 = *(_QWORD **)(v62 + 32);
        v51 = v48;
        goto LABEL_35;
      }
      v48 = (uint64_t)v60;
LABEL_32:
      v49 = v62;
      sub_1B2183AB8(*(_QWORD *)(v57 + 232), *(_QWORD *)(v57 + 240), v48, v59);
    }
    ecs_stack_allocator_deallocate(*(_QWORD **)(v49 + 32), v48, v56);
    return swift_release();
  }
  v16 = v62;
  *(_QWORD *)(v62 + 72) = v6;
  *(_QWORD *)(v16 + 80) = &off_1E6375E38;
  v17 = sub_1B19F6560(v13, (uint64_t)a1);
  v18 = v17;
  if (v11)
  {
    v19 = v61;
    if (v12)
    {
      v20 = v60[9];
      do
      {
        sub_1B1BB2DE4(v15, v18, v19);
        if (v4)
          break;
        v18 += v20;
        v15 += 7;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    v37 = a1[6];
    v38 = a1[7];
    v39 = v38 - v37;
    v40 = v61;
    if (v38 != v37)
    {
      v41 = v60[9];
      v42 = v17 + v37 * v41;
      v43 = &v15[7 * v37];
      do
      {
        sub_1B1BB2DE4(v43, v42, v40);
        if (v4)
          break;
        v42 += v41;
        v43 += 7;
        --v39;
      }
      while (v39);
    }
  }
  return swift_release();
}

uint64_t sub_1B21975B8(uint64_t a1, uint64_t a2)
{
  return sub_1B21A0124(a1, a2, (void (*)(_QWORD *, _QWORD *, uint64_t))sub_1B21971C8);
}

uint64_t sub_1B21975D4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  _BYTE v37[40];
  _QWORD v38[10];
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v30 = *(_OWORD *)result;
  v31 = *(_OWORD *)(result + 16);
  v32 = *(_QWORD *)(result + 32);
  v25 = *(_QWORD *)(result + 80);
  if (v25 >= 1)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    v8 = *(_QWORD *)(result + 56);
    v7 = *(_QWORD *)(result + 64);
    v9 = *(_QWORD **)(result + 72);
    v10 = v9[4];
    swift_retain();
    ecs_stack_allocator_push_snapshot(v10);
    if (v8)
    {
      v23 = v7;
      v11 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v21 = v5;
      sub_1B1D6631C(v5);
      v12 = (uint64_t *)(v6 + 24);
      v22 = v11;
      v24 = a2;
      while (1)
      {
        v14 = *((unsigned int *)v12 - 6);
        v13 = *((unsigned int *)v12 - 5);
        v15 = *((unsigned int *)v12 - 4);
        v28 = *v12;
        v29 = *(v12 - 1);
        v26 = v8;
        v27 = v12[1];
        v16 = v12[2];
        v43 = v3;
        if (v11)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A000F0((uint64_t)(v9 + 6), (uint64_t)v37, (uint64_t)&qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext, (uint64_t)MEMORY[0x1E0DEB940], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_1B1A02758);
        v18 = v9[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v9[7] = v19;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        v38[0] = v23;
        v38[1] = v16;
        v38[2] = v9;
        v38[3] = v15;
        v38[4] = (v13 - v14 + v15);
        v38[5] = v25;
        v38[6] = v14;
        v38[7] = v13;
        v38[8] = 0;
        v38[9] = 0;
        v39 = 1;
        v40 = v29;
        v41 = v28;
        v42 = v27;
        swift_retain();
        v20 = v43;
        sub_1B219791C(v38, (uint64_t)v9, v24, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, &qword_1ED4BB3C0, (uint64_t)sub_1B19F63D4, (void (*)(uint64_t, uint64_t))sub_1B1CE6188);
        v3 = v20;
        if (v20)
          break;
        swift_release();
        v35[0] = v30;
        v35[1] = v31;
        v36 = v32;
        sub_1B1F05D48(v9, (unsigned __int16 **)v35, (uint64_t)v37);
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        v11 = v22;
        if ((v22 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v12 += 6;
        v8 = v26 - 1;
        if (v26 == 1)
        {
          sub_1B1D66364(v21);
          goto LABEL_15;
        }
      }
      swift_release();
      v33[0] = v30;
      v33[1] = v31;
      v34 = v32;
      sub_1B1F05D48(v9, (unsigned __int16 **)v33, (uint64_t)v37);
      sub_1B1F03804((char *)v16);
      ecs_stack_allocator_pop_snapshot(v10);
      if ((v22 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      sub_1B1D66364(v21);
      swift_release();
    }
LABEL_15:
    ecs_stack_allocator_pop_snapshot(v9[4]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B219791C(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6, unint64_t *a7, uint64_t a8, void (*a9)(uint64_t, uint64_t))
{
  unint64_t *v12;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  uint64_t (*v44)(uint64_t);
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t (*v67)(uint64_t);
  int *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  uint64_t (*v94)(uint64_t);
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  _BYTE v116[24];
  _QWORD v117[2];
  uint64_t v118;
  _QWORD v119[4];
  uint64_t (*v120)(uint64_t);

  v114 = a3;
  v115 = a8;
  v12 = a4;
  v109 = a2;
  v113 = a9;
  sub_1B1A1B6FC(0, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v15 = v14;
  v107 = *((_QWORD *)v14 - 1);
  MEMORY[0x1E0C80A78](v14, v16);
  v110 = (uint64_t)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v112 = (uint64_t)&v99 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v111 = (unint64_t *)((char *)&v99 - v23);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v99 - v26;
  v120 = a5;
  sub_1B1A1B6FC(0, a7, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v29 = v28;
  v30 = a1[1];
  v31 = swift_retain();
  v32 = ((uint64_t (*)(uint64_t, _QWORD *))v115)(v31, a1);
  sub_1B1A10AA4(*(_QWORD *)(v30 + 40), v29, v119);
  v115 = a6;
  v108 = v30;
  if (LOBYTE(v119[0]) != 1)
  {
    sub_1B1A025EC((uint64_t)(a1 + 11), (uint64_t)v116, (uint64_t (*)(_QWORD))sub_1B1B1F290);
    sub_1B1A025EC((uint64_t)v116, (uint64_t)v119, (uint64_t (*)(_QWORD))sub_1B1B1F290);
    v49 = a1;
    if (v119[0])
      v50 = v119[2];
    else
      v50 = a1[7] - a1[6];
    v54 = v112;
    v55 = *(_QWORD **)(v109 + 32);
    v56 = sub_1B21882E4(v50, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], (uint64_t)v55);
    v58 = v57;
    v103 = v59;
    sub_1B1A025EC((uint64_t)v116, (uint64_t)v117, (uint64_t (*)(_QWORD))sub_1B1B1F290);
    v111 = a7;
    v105 = v55;
    v106 = v56;
    v104 = v58;
    if (v117[0])
    {
      v101 = (uint64_t *)v117[0];
      v100 = v117[1];
      v102 = v118;
      if (v118)
      {
        v60 = (uint64_t)v106;
        v110 = *(_QWORD *)(v107 + 72);
        for (i = v102; i; --i)
        {
          v64 = *(_QWORD *)(v32 + v15[10]);
          v65 = v12;
          v66 = v12;
          v67 = v120;
          v68 = v15;
          v69 = v115;
          sub_1B1B1F2FC(v32, v54, v65, v120, v115);
          if (v64)
          {
            sub_1B1B1DCE0(v54, v66, v67, v69);
            v12 = v66;
            v15 = v68;
          }
          else
          {
            v70 = v54;
            v71 = *(_QWORD *)(v54 + v68[11]);
            swift_bridgeObjectRetain();
            sub_1B1B1DCE0(v70, v66, v67, v69);
            v12 = v66;
            v15 = v68;
            if (!v71)
              goto LABEL_21;
            swift_bridgeObjectRelease();
          }
          v62 = *(_QWORD *)(v32 + v15[15]);
          v63 = *(_QWORD *)(v114 + 16);
          swift_retain();
          swift_bridgeObjectRetain();
          v113(v63, v62);
          swift_bridgeObjectRelease();
          swift_release();
LABEL_21:
          v60 += 16;
          a7 = v111;
          v32 += v110;
          v54 = v112;
        }
      }
      v72 = (unint64_t)v106;
      sub_1B218414C(v101, v100, v102, (uint64_t)v106, v103, v109, a7, v120, v115);
LABEL_28:
      ecs_stack_allocator_deallocate(v105, v72, 16 * v104);
      return swift_release();
    }
    v73 = v49[6];
    v74 = v49[7];
    v75 = v74 - v73;
    if (v74 == v73)
    {
LABEL_27:
      v72 = (unint64_t)v106;
      sub_1B21842AC(*(_QWORD *)(v108 + 232), *(_QWORD *)(v108 + 240), (uint64_t)v106, v103, v109, v111, v120, v115);
      goto LABEL_28;
    }
    v86 = (uint64_t)v106;
    v112 = *(_QWORD *)(v107 + 72);
    v87 = v32 + v73 * v112;
    while (1)
    {
      v90 = *(_QWORD *)(v87 + v15[10]);
      v91 = v110;
      v92 = v12;
      v93 = v12;
      v94 = v120;
      v95 = v15;
      v96 = v115;
      sub_1B1B1F2FC(v87, v110, v92, v120, v115);
      if (v90)
      {
        sub_1B1B1DCE0(v91, v93, v94, v96);
        v12 = v93;
        v15 = v95;
      }
      else
      {
        v97 = v91;
        v98 = *(_QWORD *)(v91 + v95[11]);
        swift_bridgeObjectRetain();
        sub_1B1B1DCE0(v97, v93, v94, v96);
        v12 = v93;
        v15 = v95;
        if (!v98)
          goto LABEL_40;
        swift_bridgeObjectRelease();
      }
      v88 = *(_QWORD *)(v87 + v15[15]);
      v89 = *(_QWORD *)(v114 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v113(v89, v88);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_40:
      v86 += 16;
      v87 += v112;
      if (!--v75)
        goto LABEL_27;
    }
  }
  v112 = (uint64_t)v27;
  v33 = v109;
  *(_QWORD *)(v109 + 72) = v29;
  *(_QWORD *)(v33 + 80) = &off_1E63A95C8;
  v34 = (uint64_t *)a1[11];
  v35 = a1[13];
  v36 = sub_1B1A12038(v29, (uint64_t)&off_1E63A95C8, v34, a1[12], v35, a1[2]);
  v37 = v36;
  if (!v34)
  {
    v51 = a1[6];
    v52 = a1[7];
    v53 = v52 - v51;
    if (v52 == v51)
      return swift_release();
    v77 = v36 + 16 * v51;
    v115 = *(_QWORD *)(v107 + 72);
    v78 = v32 + v51 * v115;
    v79 = v120;
    while (1)
    {
      v82 = *(_QWORD *)(v78 + v15[10]);
      v83 = v111;
      sub_1B1B1F2FC(v78, (uint64_t)v111, v12, v79, a6);
      if (v82)
      {
        sub_1B1B1DCE0((uint64_t)v83, v12, v79, a6);
      }
      else
      {
        v84 = (uint64_t)v83;
        v85 = *(unint64_t *)((char *)v83 + v15[11]);
        swift_bridgeObjectRetain();
        sub_1B1B1DCE0(v84, v12, v79, a6);
        if (!v85)
          goto LABEL_33;
        swift_bridgeObjectRelease();
      }
      v80 = *(_QWORD *)(v78 + v15[15]);
      v81 = *(_QWORD *)(v114 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v113(v81, v80);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_33:
      v77 += 16;
      v78 += v115;
      if (!--v53)
        return swift_release();
    }
  }
  if (v35)
  {
    v111 = *(unint64_t **)(v107 + 72);
    do
    {
      v40 = *(_QWORD *)(v32 + v15[10]);
      v41 = v112;
      v42 = v12;
      v43 = v12;
      v44 = v120;
      v45 = v15;
      v46 = v115;
      sub_1B1B1F2FC(v32, v112, v42, v120, v115);
      if (v40)
      {
        sub_1B1B1DCE0(v41, v43, v44, v46);
        v12 = v43;
        v15 = v45;
      }
      else
      {
        v47 = v41;
        v48 = *(_QWORD *)(v41 + v45[11]);
        swift_bridgeObjectRetain();
        sub_1B1B1DCE0(v47, v43, v44, v46);
        v12 = v43;
        v15 = v45;
        if (!v48)
          goto LABEL_7;
        swift_bridgeObjectRelease();
      }
      v38 = *(_QWORD *)(v32 + v15[15]);
      v39 = *(_QWORD *)(v114 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      v113(v39, v38);
      swift_bridgeObjectRelease();
      swift_release();
LABEL_7:
      v37 += 16;
      v32 += (uint64_t)v111;
      --v35;
    }
    while (v35);
  }
  return swift_release();
}

