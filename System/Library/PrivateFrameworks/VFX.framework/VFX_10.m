uint64_t sub_1B1D06B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7, int a8, NSObject *a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  void *v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  id v41;
  _OWORD *v42;
  os_unfair_lock_s *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_signpost_type_t v65;
  char v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint8_t *v70;
  os_signpost_id_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  _QWORD v96[3];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[11];
  char v117;
  _BYTE v118[96];
  __int128 aBlock;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unsigned __int8 v125;

  LODWORD(v104) = a8;
  v114 = a2;
  v115 = (uint64_t)a6;
  v106 = a4;
  v107 = a5;
  v105 = a3;
  v113 = type metadata accessor for ShaderScript(0);
  v101 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v14);
  v102 = v15;
  v103 = (uint64_t)v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1B2228380();
  v17 = *(_QWORD *)(v16 - 8);
  v109 = v16;
  v110 = v17;
  MEMORY[0x1E0C80A78](v16, v18);
  v100 = (char *)v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v96 - v22;
  MEMORY[0x1E0C80A78](v24, v25);
  v112 = (char *)v96 - v26;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a11;
  *(_QWORD *)(v27 + 24) = a12;
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = sub_1B1D13E58;
  v28[3] = v27;
  v28[4] = a10;
  v29 = *(_QWORD *)(a1 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  v111 = a10;
  if (v29
    && ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig) & 1) == 0
     || (*(_BYTE *)(a1 + 2720) & 1) == 0))
  {
    sub_1B1B63B64();
    v36 = (void *)swift_allocError();
    *v37 = xmmword_1B228CCD0;
    if (!*(_QWORD *)(a11 + 16))
    {
LABEL_24:
      v43 = *(os_unfair_lock_s **)(a12 + 72);
      swift_retain();
      swift_retain();
      v44 = v36;
      os_unfair_lock_lock(v43);
      v45 = *(void **)(a11 + 16);
      *(_QWORD *)(a11 + 16) = v36;
      v46 = v36;

      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a12 + 72));
      goto LABEL_25;
    }
LABEL_7:
    swift_retain();
    swift_retain();
LABEL_25:
    dispatch_group_leave(v111);
    swift_release();
    swift_release();

    swift_release();
    swift_release_n();
    swift_release();
LABEL_26:
    swift_release();
    v47 = 0;
    goto LABEL_50;
  }
  v98 = v27;
  v30 = sub_1B1C9EAE8();
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9650, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v32 = v31;
  v33 = a7 + v31[9];
  v34 = *(_BYTE *)(v33 + 8);
  v108 = v28;
  v99 = v30;
  v35 = (v34 & 1) == 0 && v30 == *(_QWORD *)v33;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 72));
  v38 = *(_QWORD *)(a1 + 80);
  if (!*(_QWORD *)(v38 + 16) || (v39 = sub_1B1DC4138(v113, v115), (v40 & 1) == 0))
  {
    v124 = 0;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    aBlock = 0u;
    v125 = -1;
    goto LABEL_15;
  }
  sub_1B1C1A1D0(*(_QWORD *)(v38 + 56) + 96 * v39, (uint64_t)&aBlock);
  if (v125 == 255)
  {
LABEL_15:
    sub_1B1B1F3E4((uint64_t)&aBlock, &qword_1EEF63440, (uint64_t)&type metadata for CompilationStatus);
LABEL_16:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
    if (v35)
      goto LABEL_17;
    goto LABEL_32;
  }
  sub_1B1C1A1D0((uint64_t)&aBlock, (uint64_t)v118);
  sub_1B1B1F3E4((uint64_t)&aBlock, &qword_1EEF63440, (uint64_t)&type metadata for CompilationStatus);
  sub_1B1C1A1D0((uint64_t)v118, (uint64_t)v116);
  if (v117)
  {
    sub_1B1D12448((uint64_t)v116);
    sub_1B1D12448((uint64_t)v118);
    goto LABEL_16;
  }
  v48 = v116[0];
  sub_1B1D12448((uint64_t)v118);
  if (v48 != v99)
    v35 = 0;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
  if (v35)
  {
LABEL_17:
    if ((*(_BYTE *)(a7 + v32[10]) & 1) != 0)
    {
      v36 = *(void **)(a7 + v32[11]);
      v41 = v36;
    }
    else
    {
      sub_1B1B63B64();
      v36 = (void *)swift_allocError();
      *v42 = xmmword_1B2244C80;
    }
    if (!*(_QWORD *)(a11 + 16) && v36)
      goto LABEL_24;
    goto LABEL_7;
  }
  if (v48 == v99)
  {
    dispatch_group_leave(v111);
    swift_release();
    swift_release_n();
    swift_release();
    goto LABEL_26;
  }
LABEL_32:
  v96[2] = a12;
  sub_1B1D121E4(a7, (unint64_t *)&unk_1ED4B9650, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v97 = swift_allocBox();
  v50 = (_QWORD *)v49;
  *(_BYTE *)(v49 + 16) = 1;
  v51 = v113;
  v52 = v49 + *(int *)(v113 + 24);
  v53 = type metadata accessor for ScriptIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 1, 1, v53);
  *(_QWORD *)((char *)v50 + *(int *)(v51 + 28)) = &unk_1E639EA98;
  *v50 = 0;
  v50[1] = 0xE000000000000000;
  v54 = v32[9];
  *((_BYTE *)v50 + v32[10]) = 0;
  *(_QWORD *)((char *)v50 + v32[11]) = 0;
  v55 = (char *)v50 + v54;
  v56 = (_QWORD *)((char *)v50 + v32[12]);
  *v56 = 0;
  v56[1] = 0xE000000000000000;
  *(_QWORD *)((char *)v50 + v32[13]) = MEMORY[0x1E0DEE9D8];
  v57 = v99;
  *(_QWORD *)v55 = v99;
  v55[8] = 0;
  sub_1B1D136D4(v114, (uint64_t)v50, type metadata accessor for ShaderScript);
  sub_1B1D12220((uint64_t)v50, a7, (unint64_t *)&unk_1ED4B9650, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 72));
  *(_QWORD *)&aBlock = v57;
  v125 = 0;
  sub_1B20E1B28((uint64_t)&aBlock, v51, v115);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
  v58 = *(_QWORD *)(a1 + 16);
  swift_retain();
  if (v58)
  {
    v59 = v109;
    v60 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v23, v58 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v109);
    swift_release();
    v61 = v112;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v112, v23, v59);
  }
  else
  {
    v59 = v109;
    v61 = v112;
    if (qword_1ED4BA0E0 != -1)
      swift_once();
    v62 = sub_1B22283B0();
    sub_1B1B40EC8(v62, (uint64_t)qword_1ED4D0E48);
    sub_1B2228398();
    sub_1B2228368();
  }
  v96[0] = HIDWORD(v115);
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v111 = a9;
  v63 = sub_1B22283B0();
  sub_1B1B40EC8(v63, (uint64_t)qword_1ED4D0E48);
  v64 = sub_1B2228398();
  v65 = sub_1B2228FA4();
  v66 = sub_1B2229094();
  v96[1] = a11;
  if ((v66 & 1) != 0)
  {
    v67 = v110;
    v68 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
    v69 = v100;
    v68(v100, v112, v59);
    v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v70 = 0;
    v71 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v64, v65, v71, "buildScript", "", v70, 2u);
    MEMORY[0x1B5E23F88](v70, -1, -1);

    v72 = *(void (**)(char *, uint64_t))(v67 + 8);
    v61 = v112;
    v72(v69, v59);
  }
  else
  {

    v68 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
    v69 = v100;
  }
  v68(v69, v61, v59);
  sub_1B22283E0();
  swift_allocObject();
  v73 = sub_1B22283D4();
  v74 = v103;
  sub_1B1792810(v114, v103, type metadata accessor for ShaderScript);
  v75 = (*(unsigned __int8 *)(v101 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80);
  v76 = (v102 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
  v77 = (v76 + 27) & 0xFFFFFFFFFFFFFFF8;
  v78 = swift_allocObject();
  v79 = v113;
  *(_QWORD *)(v78 + 16) = a1;
  *(_QWORD *)(v78 + 24) = v79;
  v80 = v115;
  v113 = a1;
  v114 = v73;
  v81 = v96[0];
  *(_DWORD *)(v78 + 32) = v115;
  *(_DWORD *)(v78 + 36) = v81;
  *(_QWORD *)(v78 + 40) = v99;
  *(_QWORD *)(v78 + 48) = sub_1B1D12284;
  *(_QWORD *)(v78 + 56) = v108;
  *(_QWORD *)(v78 + 64) = v73;
  memcpy((void *)(v78 + 72), v111, 0x148uLL);
  sub_1B1A025EC(v74, v78 + v75, type metadata accessor for ShaderScript);
  v82 = (uint64_t *)(v78 + v76);
  v83 = v105;
  v84 = v106;
  *v82 = v105;
  v82[1] = v84;
  v82[2] = v107;
  v85 = (_DWORD *)(v78 + v77);
  *v85 = v80;
  v85[1] = v81;
  *(_QWORD *)(v78 + ((v77 + 15) & 0xFFFFFFFFFFFFFFF8)) = v97;
  if ((v104 & 1) != 0)
  {
    v115 = *(_QWORD *)(v113 + 40);
    v86 = swift_allocObject();
    *(_QWORD *)(v86 + 16) = sub_1B1D12D40;
    *(_QWORD *)(v86 + 24) = v78;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1D139FC((uint64_t)v111);
    sub_1B1C18F0C(v83, v84);
    v87 = qword_1ED4BF430;
    swift_retain();
    swift_retain();
    if (v87 != -1)
      swift_once();
    v88 = qword_1ED4BF658;
    swift_retain();
    if (v88 != -1)
      swift_once();
    v89 = qword_1ED4D0FD0;
    swift_retain();
    swift_release();
    v90 = (_QWORD *)swift_allocObject();
    v90[2] = v89;
    v90[3] = sub_1B1D13D9C;
    v90[4] = v86;
    *(_QWORD *)&v121 = sub_1B1D13E54;
    *((_QWORD *)&v121 + 1) = v90;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v120 = sub_1B17915D0;
    *((_QWORD *)&v120 + 1) = &unk_1E63EDF30;
    v91 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend((id)v115, sel_addOperationWithBlock_, v91);
    _Block_release(v91);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
  }
  else
  {
    v115 = *(_QWORD *)(v113 + 32);
    v92 = swift_allocObject();
    *(_QWORD *)(v92 + 16) = sub_1B1D12D40;
    *(_QWORD *)(v92 + 24) = v78;
    v93 = swift_allocObject();
    *(_QWORD *)(v93 + 16) = sub_1B1D13D9C;
    *(_QWORD *)(v93 + 24) = v92;
    *(_QWORD *)&v121 = sub_1B1D13D9C;
    *((_QWORD *)&v121 + 1) = v93;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v120 = sub_1B1CDBFCC;
    *((_QWORD *)&v120 + 1) = &unk_1E63EDEB8;
    v94 = _Block_copy(&aBlock);
    v104 = *((_QWORD *)&v121 + 1);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1D139FC((uint64_t)v111);
    sub_1B1C18F0C(v83, v84);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync((dispatch_queue_t)v115, v94);
    _Block_release(v94);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  v47 = 1;
LABEL_50:
  swift_release();
  return v47;
}

uint64_t sub_1B1D077D4(uint64_t a1, uint64_t a2, NSObject *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), unint64_t *a9, uint64_t a10, unint64_t *a11, unint64_t *a12, uint64_t a13, void (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *), uint64_t (*a15)(uint64_t), unsigned __int16 **a16, void (*a17)(uint64_t), void (*a18)(uint64_t))
{
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  int v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  int v59;
  int v60;
  __int128 v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_unfair_lock_s *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unsigned __int16 *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unsigned __int16 *v92;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v94;
  unint64_t v95;
  unsigned __int16 *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unsigned __int16 *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;
  size_t v108;
  char *v109;
  char *v110;
  char *v111;
  unsigned __int16 *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unsigned __int16 *v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unsigned __int16 *v125;
  char v126;
  unint64_t v127;
  unint64_t v128;
  unsigned __int16 *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  os_unfair_lock_s *v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t (*v154)(uint64_t);
  int v155;
  __int128 v156;
  _QWORD *v157;
  unsigned __int16 *v158;
  uint64_t (*v159)(uint64_t);
  uint64_t v160;
  uint64_t (*v161)(uint64_t);
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  os_unfair_lock_s *v168;
  unsigned __int16 *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  BOOL v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t (*v200)(uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  BOOL v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int8 *v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t (*v228)(uint64_t);
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  NSObject *v235;
  uint64_t v236;
  uint64_t v237;
  unsigned __int16 *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  void (*v246)(uint64_t);
  uint64_t v247;
  BOOL v248;
  unint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  unint64_t v253;
  char *v254;
  unsigned int v255;
  BOOL v256;
  int v257;
  uint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  unsigned int v263;
  int v264;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  unsigned __int16 *v271;
  unint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t result;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t (*v279)(uint64_t);
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  _QWORD *v299;
  unsigned __int16 *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  unsigned __int16 **v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  unsigned __int16 *v313;
  void (*v314)(uint64_t);
  void (*v315)(uint64_t);
  uint64_t v316;
  dispatch_group_t v317;
  uint64_t v318;
  _OWORD v319[2];
  uint64_t v320;
  _OWORD v321[2];
  uint64_t v322;
  _OWORD v323[2];
  uint64_t v324;
  _OWORD v325[2];
  uint64_t v326;
  uint64_t v327[12];
  uint64_t v328[12];
  uint64_t v329[12];
  uint64_t v330[12];
  uint64_t v331[5];
  char v332;
  _QWORD v333[7];
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  __int128 v345;
  uint64_t v346;
  char *v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD v352[7];
  uint64_t v353;
  uint64_t v354;
  _QWORD v355[7];
  uint64_t v356;
  uint64_t v357;
  _OWORD v358[2];
  uint64_t v359;
  _OWORD v360[2];
  uint64_t v361;
  _BYTE v362[40];
  uint64_t v363;

  v306 = a4;
  v288 = a2;
  v291 = a10;
  v289 = a9;
  v363 = *MEMORY[0x1E0C80C00];
  v279 = a8;
  v283 = a8(0);
  v278 = *(_QWORD *)(v283 - 8);
  MEMORY[0x1E0C80A78](v283, v23);
  v25 = (char *)&v276 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v276 - v28;
  v308 = a6;
  v309 = a1;
  v30 = *(_QWORD *)(a1 + 16);
  swift_retain_n();
  v307 = a7;
  swift_retain_n();
  swift_retain();
  v317 = a3;
  dispatch_group_enter(a3);
  v31 = *(_OWORD *)(a5 + 184);
  v325[0] = *(_OWORD *)(a5 + 168);
  v325[1] = v31;
  v310 = a5;
  v326 = *(_QWORD *)(a5 + 200);
  v292 = OBJC_IVAR____TtC3VFX13EntityManager_queryManager;
  v296 = v30;
  sub_1B1E8FCE4(v30, (uint64_t)v325, 0x200000000, v327);
  sub_1B1A18378((uint64_t)v327, (uint64_t)v355, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v295 = v25;
  if (v355[0])
  {
    LODWORD(v290) = v357 > 0;
    if (v357 >= 1)
    {
      v32 = v356;
      if (v356)
      {
        v33 = v355[5];
        sub_1B1A1B6FC(0, v289, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        v35 = v34;
        swift_retain();
        swift_retain();
        swift_retain();
        v36 = 48 * v32;
        v37 = (uint64_t *)(v33 + 40);
        do
        {
          v42 = *v37;
          v43 = *(os_unfair_lock_s **)(*v37 + 376);
          swift_retain();
          os_unfair_lock_lock(v43);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v42 + 344));
          v44 = *(_DWORD *)(v42 + 24);
          swift_retain();
          memset(v352, 0, 40);
          v346 = 0;
          v344 = 0u;
          v345 = 0u;
          v45 = sub_1B1DA4ED8(v44, v35, (uint64_t)&off_1E639EB98, 0, 0, (uint64_t)v352, (uint64_t)&v344);
          swift_release();
          sub_1B1A12E98((uint64_t)&v344);
          sub_1B1A12E98((uint64_t)v352);
          if (sub_1B1A10B20(v45))
          {
            sub_1B1A10BB0(v45);
          }
          else
          {
            v38 = *(_QWORD *)(v42 + 232);
            v39 = *(_QWORD *)(v42 + 240);
            v40 = *(unsigned __int8 *)(v42 + 120);
            v41 = *(unsigned int *)(v42 + 28);
            LOBYTE(v352[0]) = *(_BYTE *)(v42 + 32);
            sub_1B1FD8C68(v38, v39, v45, v40, v41 | ((unint64_t)LOBYTE(v352[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 376));
          swift_release();
          v37 += 6;
          v36 -= 48;
        }
        while (v36);
        sub_1B19ED748(v327);
        v25 = v295;
      }
    }
    sub_1B19ED748(v327);
  }
  else
  {
    LODWORD(v290) = 0;
  }
  v46 = *(_OWORD *)(v310 + 64);
  v323[0] = *(_OWORD *)(v310 + 48);
  v323[1] = v46;
  v324 = *(_QWORD *)(v310 + 80);
  sub_1B1E8FCE4(v296, (uint64_t)v323, 0x200000000, v328);
  sub_1B1A18378((uint64_t)v328, (uint64_t)v352, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v352[0])
  {
    if (v354 >= 1)
    {
      v47 = v353;
      if (v353)
      {
        v48 = v352[5];
        sub_1B1A1B6FC(0, a11, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        v50 = v49;
        swift_retain();
        swift_retain();
        swift_retain();
        v51 = 48 * v47;
        v52 = (uint64_t *)(v48 + 40);
        do
        {
          v57 = *v52;
          v58 = *(os_unfair_lock_s **)(*v52 + 376);
          swift_retain();
          os_unfair_lock_lock(v58);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v57 + 344));
          v59 = *(_DWORD *)(v57 + 24);
          swift_retain();
          v346 = 0;
          v344 = 0u;
          v345 = 0u;
          *(_QWORD *)&v340 = 0;
          v338 = 0u;
          v339 = 0u;
          v60 = sub_1B1DA4ED8(v59, 0, 0, v50, (uint64_t)&off_1E637D0A8, (uint64_t)&v344, (uint64_t)&v338);
          swift_release();
          sub_1B1A12E98((uint64_t)&v338);
          sub_1B1A12E98((uint64_t)&v344);
          if (sub_1B1A10B20(v60))
          {
            sub_1B1A10BB0(v60);
          }
          else
          {
            v53 = *(_QWORD *)(v57 + 232);
            v54 = *(_QWORD *)(v57 + 240);
            v55 = *(unsigned __int8 *)(v57 + 120);
            v56 = *(unsigned int *)(v57 + 28);
            LOBYTE(v344) = *(_BYTE *)(v57 + 32);
            sub_1B1FD8C68(v53, v54, v60, v55, v56 | ((unint64_t)v344 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v57 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v57 + 376));
          swift_release();
          v52 += 6;
          v51 -= 48;
        }
        while (v51);
        sub_1B19ED748(v328);
        v25 = v295;
      }
    }
    sub_1B19ED748(v328);
    LODWORD(v290) = 1;
  }
  v61 = *(_OWORD *)(v310 + 104);
  v321[0] = *(_OWORD *)(v310 + 88);
  v321[1] = v61;
  v322 = *(_QWORD *)(v310 + 120);
  sub_1B1E8FCE4(v296, (uint64_t)v321, 0x200000000, v329);
  sub_1B1A18378((uint64_t)v329, (uint64_t)&v344, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v277 = v29;
  if ((_QWORD)v344)
  {
    if (v351 >= 1 && (v299 = v348) != 0)
    {
      v315 = a18;
      v314 = a17;
      v298 = v347;
      v62 = (_QWORD *)v350;
      v303 = *(_QWORD *)(v350 + 32);
      LODWORD(v302) = *(unsigned __int8 *)(v349 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v297 = v350 + 48;
      v305 = (unsigned __int16 **)(v350 + 104);
      sub_1B1A1B6FC(0, a12, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v64 = v63;
      v319[0] = v344;
      v319[1] = v345;
      v320 = v346;
      v311 = v62;
      v293 = v62 + 8;
      v318 = (uint64_t)&v341;
      swift_retain();
      swift_retain();
      swift_retain();
      v65 = 0;
      v294 = 0;
      v312 = v64;
      do
      {
        v66 = &v298[48 * v65];
        v67 = *(unsigned int *)v66;
        v300 = (unsigned __int16 *)*((unsigned int *)v66 + 1);
        v301 = v65;
        v68 = *((_QWORD *)v66 + 3);
        v304 = (uint64_t *)*((_QWORD *)v66 + 2);
        v69 = *((_QWORD *)v66 + 5);
        v313 = (unsigned __int16 *)*((_QWORD *)v66 + 4);
        if ((_DWORD)v302)
        {
          v70 = *(os_unfair_lock_s **)(v69 + 376);
          swift_retain();
          os_unfair_lock_lock(v70);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v69 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v303);
        sub_1B1A18378(v297, (uint64_t)v362, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v71 = v311;
        v72 = v311[4];
        v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v71[6] = ecs_stack_allocator_allocate(v72, 48 * v73, 8);
        v71[7] = v73;
        v74 = v293;
        v293[1] = 0;
        v74[2] = 0;
        *v74 = 0;
        swift_release();
        v75 = v304;
        v76 = v313;
        v316 = sub_1B1A12038(v64, (uint64_t)&off_1E63A95C8, v304, v68, (uint64_t)v313, (uint64_t)v71);
        if (v75)
        {
          if (v76)
          {
            v77 = 0;
            do
            {
              while (1)
              {
                v78 = v75[(_QWORD)v77];
                v79 = (uint64_t *)(v316 + 16 * (_QWORD)v77);
                v80 = *v79;
                v81 = v79[1];
                v82 = swift_retain();
                sub_1B1CDC014(v82, v80, v81, v314, v315);
                swift_release();
                v83 = *(_QWORD *)(*(_QWORD *)(v69 + 40) + 16);
                v84 = *(_QWORD *)(v83 + 128);
                if (*(_QWORD *)(v84 + 16))
                {
                  v85 = sub_1B1DC3AC8(v64);
                  if ((v86 & 1) != 0)
                    break;
                }
                v77 = (unsigned __int16 *)((char *)v77 + 1);
                if (v77 == v313)
                  goto LABEL_48;
              }
              if (*(_QWORD *)(*(_QWORD *)(v83 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v84 + 56) + 8 * v85) + 32) == v64)
              {
                v331[0] = v64;
                v331[1] = (uint64_t)&off_1E63A95C8;
                v332 = 1;
                v88 = *v305;
                if (*((_QWORD *)*v305 + 2))
                {
                  swift_retain();
                  v300 = v88;
                  swift_bridgeObjectRetain();
                  sub_1B1792810((uint64_t)(v88 + 16), (uint64_t)v333, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                  sub_1B1BE90FC((uint64_t)v333, (uint64_t)&v338);
                  sub_1B1BE90FC((uint64_t)v331, v318);
                  __asm { BR              X9 }
                }
                swift_retain();
                v89 = *(_QWORD *)(v69 + 240) - *(_QWORD *)(v69 + 232);
                v90 = v311;
                v91 = ecs_stack_allocator_allocate(v311[4], 8 * v89, 8);
                *v91 = v78;
                sub_1B1BE90FC((uint64_t)v331, (uint64_t)&v338);
                *(_QWORD *)&v341 = v91;
                *((_QWORD *)&v341 + 1) = v89;
                v342 = 1;
                v92 = (unsigned __int16 *)v90[13];
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v90[13] = v92;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v92 = (unsigned __int16 *)sub_1B1C631A0(0, *((_QWORD *)v92 + 2) + 1, 1, v92);
                  *v305 = v92;
                }
                v95 = *((_QWORD *)v92 + 2);
                v94 = *((_QWORD *)v92 + 3);
                if (v95 >= v94 >> 1)
                {
                  v92 = (unsigned __int16 *)sub_1B1C631A0(v94 > 1, v95 + 1, 1, v92);
                  *v305 = v92;
                }
                *((_QWORD *)v92 + 2) = v95 + 1;
                v96 = &v92[36 * v95];
                *((_OWORD *)v96 + 2) = v338;
                v97 = v339;
                v98 = v340;
                v99 = v341;
                *((_QWORD *)v96 + 12) = v342;
                *((_OWORD *)v96 + 4) = v98;
                *((_OWORD *)v96 + 5) = v99;
                *((_OWORD *)v96 + 3) = v97;
                v87 = v313;
                sub_1B1B68F14((uint64_t)v331);
                swift_release();
              }
              else
              {
                v87 = v313;
              }
              v77 = (unsigned __int16 *)((char *)v77 + 1);
            }
            while (v77 != v87);
          }
        }
        else
        {
          v100 = v300;
          if ((_DWORD)v67 != (_DWORD)v300)
          {
            do
            {
              v112 = (unsigned __int16 *)(v67 + 1);
              v113 = (uint64_t *)(v316 + 16 * v67);
              v114 = *v113;
              v115 = v113[1];
              v116 = swift_retain();
              sub_1B1CDC014(v116, v114, v115, v314, v315);
              swift_release();
              v117 = *(_QWORD *)(*(_QWORD *)(v69 + 40) + 16);
              v118 = *(_QWORD *)(v117 + 128);
              if (*(_QWORD *)(v118 + 16))
              {
                v119 = sub_1B1DC3AC8(v64);
                if ((v120 & 1) != 0
                  && *(_QWORD *)(*(_QWORD *)(v117 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v118 + 56) + 8 * v119) + 32) == v64)
                {
                  v331[0] = v64;
                  v331[1] = (uint64_t)&off_1E63A95C8;
                  v332 = 1;
                  v121 = *v305;
                  if (*((_QWORD *)*v305 + 2))
                  {
                    swift_retain();
                    v313 = v121;
                    swift_bridgeObjectRetain();
                    sub_1B1792810((uint64_t)(v121 + 16), (uint64_t)v333, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                    sub_1B1BE90FC((uint64_t)v333, (uint64_t)&v338);
                    sub_1B1BE90FC((uint64_t)v331, v318);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v122 = *(_QWORD *)(v69 + 240) - *(_QWORD *)(v69 + 232);
                  v123 = v311;
                  v124 = ecs_stack_allocator_allocate(v311[4], 8 * v122, 8);
                  *v124 = v67;
                  sub_1B1BE90FC((uint64_t)v331, (uint64_t)&v338);
                  *(_QWORD *)&v341 = v124;
                  *((_QWORD *)&v341 + 1) = v122;
                  v342 = 1;
                  v125 = (unsigned __int16 *)v123[13];
                  v126 = swift_isUniquelyReferenced_nonNull_native();
                  v123[13] = v125;
                  if ((v126 & 1) == 0)
                  {
                    v125 = (unsigned __int16 *)sub_1B1C631A0(0, *((_QWORD *)v125 + 2) + 1, 1, v125);
                    *v305 = v125;
                  }
                  v128 = *((_QWORD *)v125 + 2);
                  v127 = *((_QWORD *)v125 + 3);
                  if (v128 >= v127 >> 1)
                  {
                    v125 = (unsigned __int16 *)sub_1B1C631A0(v127 > 1, v128 + 1, 1, v125);
                    *v305 = v125;
                  }
                  *((_QWORD *)v125 + 2) = v128 + 1;
                  v129 = &v125[36 * v128];
                  *((_OWORD *)v129 + 2) = v338;
                  v130 = v339;
                  v131 = v340;
                  v132 = v341;
                  *((_QWORD *)v129 + 12) = v342;
                  *((_OWORD *)v129 + 4) = v131;
                  *((_OWORD *)v129 + 5) = v132;
                  *((_OWORD *)v129 + 3) = v130;
                  sub_1B1B68F14((uint64_t)v331);
                  swift_release();
                }
              }
              ++v67;
            }
            while (v112 != v100);
          }
        }
LABEL_48:
        v101 = v311;
        v102 = v294;
        sub_1B1F05D48(v311, (unsigned __int16 **)v319, (uint64_t)v362);
        v294 = v102;
        v25 = v295;
        if (*(_QWORD *)(v101[13] + 16))
        {
          v103 = (_QWORD *)swift_bridgeObjectRetain();
          v104 = v311;
          sub_1B1F05034(v103, v69);
          swift_bridgeObjectRelease();
          v105 = swift_isUniquelyReferenced_nonNull_native();
          v106 = v104[13];
          if ((v105 & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v106 + 16));
          }
          else
          {
            v107 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v106 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v107 = (_QWORD *)swift_allocObject();
              v108 = j__malloc_size(v107);
              v107[2] = 0;
              v107[3] = 2 * ((uint64_t)(v108 - 32) / 72);
            }
            *v305 = (unsigned __int16 *)v107;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v311[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v109 = *(char **)(v69 + 232);
            v110 = *(char **)(v69 + 256);
            if (v109 == v110)
            {
              v111 = *(char **)(v69 + 240);
            }
            else
            {
              sub_1B1A1059C(v110, v109);
              v110 = *(char **)(v69 + 232);
              v111 = *(char **)(v69 + 240);
              if (v111 == v110)
              {
                v111 = 0;
                v110 = 0;
                *(_QWORD *)(v69 + 232) = 0;
                *(_QWORD *)(v69 + 240) = 0;
              }
            }
            *(_QWORD *)(v69 + 248) = v111;
            *(_QWORD *)(v69 + 256) = v110;
          }
        }
        ecs_stack_allocator_pop_snapshot(v303);
        if ((_DWORD)v302)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v69 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v69 + 376));
        }
        swift_release();
        v65 = v301 + 1;
      }
      while ((_QWORD *)(v301 + 1) != v299);
      sub_1B19ED748(v329);
    }
    else
    {
      v294 = 0;
    }
    v133 = v310;
    sub_1B19ED748(v329);
  }
  else
  {
    v294 = 0;
    v133 = v310;
  }
  v284 = a13;
  v134 = *(_OWORD *)(v133 + 144);
  v360[0] = *(_OWORD *)(v133 + 128);
  v360[1] = v134;
  v361 = *(_QWORD *)(v133 + 160);
  sub_1B1E8FCE4(v296, (uint64_t)v360, 0x200000000, v330);
  sub_1B1A18378((uint64_t)v330, (uint64_t)&v338, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v338)
  {
    v135 = v343;
    if (v343 >= 1)
    {
      v136 = *((_QWORD *)&v341 + 1);
      if (*((_QWORD *)&v341 + 1))
      {
        v137 = *((_QWORD *)&v340 + 1);
        sub_1B1A1B6FC(0, v289, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        v139 = v138;
        swift_retain();
        swift_retain();
        swift_retain();
        v140 = 48 * v136;
        v141 = (uint64_t *)(v137 + 40);
        do
        {
          v146 = *v141;
          v147 = *(os_unfair_lock_s **)(*v141 + 376);
          swift_retain();
          os_unfair_lock_lock(v147);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v146 + 344));
          v148 = *(_DWORD *)(v146 + 24);
          swift_retain();
          memset(v333, 0, 40);
          memset(v331, 0, sizeof(v331));
          v149 = sub_1B1DA4ED8(v148, 0, 0, v139, (uint64_t)&off_1E639EB98, (uint64_t)v333, (uint64_t)v331);
          swift_release();
          sub_1B1A12E98((uint64_t)v331);
          sub_1B1A12E98((uint64_t)v333);
          if (sub_1B1A10B20(v149))
          {
            sub_1B1A10BB0(v149);
          }
          else
          {
            v142 = *(_QWORD *)(v146 + 232);
            v143 = *(_QWORD *)(v146 + 240);
            v144 = *(unsigned __int8 *)(v146 + 120);
            v145 = *(unsigned int *)(v146 + 28);
            LOBYTE(v333[0]) = *(_BYTE *)(v146 + 32);
            sub_1B1FD8C68(v142, v143, v149, v144, v145 | ((unint64_t)LOBYTE(v333[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v146 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v146 + 376));
          swift_release();
          v141 += 6;
          v140 -= 48;
        }
        while (v140);
        sub_1B19ED748(v330);
      }
    }
    v151 = v310;
    sub_1B19ED748(v330);
    v153 = v290;
    if (v135 > 0)
      v153 = 1;
    v150 = v309;
    v25 = v295;
    v152 = v288;
    v154 = a15;
    if (v288)
      goto LABEL_91;
  }
  else
  {
    v150 = v309;
    v151 = v310;
    v152 = v288;
    v153 = v290;
    v154 = a15;
    if (v288)
    {
LABEL_91:
      v153 |= sub_1B1CE3320(v309, v152, v279, v289, v291, v284, a14);
      v150 = v309;
      v151 = v310;
    }
  }
  v155 = v153 | v154(v150);
  v156 = *(_OWORD *)(v151 + 224);
  v358[0] = *(_OWORD *)(v151 + 208);
  v358[1] = v156;
  v359 = *(_QWORD *)(v151 + 240);
  sub_1B1E8FCE4(v296, (uint64_t)v358, 0x200000000, v331);
  sub_1B1A18378((uint64_t)v331, (uint64_t)v333, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v333[0])
    goto LABEL_195;
  if (v337 < 1 || (v282 = v334) == 0)
  {
    sub_1B19ED748(v331);
LABEL_195:
    if ((v155 & 1) != 0)
    {
LABEL_196:
      v274 = swift_retain();
      sub_1B1CE43EC(v274);
      swift_release();
    }
    goto LABEL_197;
  }
  LODWORD(v318) = v155;
  v305 = a16;
  v157 = v336;
  v281 = v333[5];
  v293 = (_QWORD *)v336[4];
  v158 = (unsigned __int16 *)v333[0];
  LODWORD(v292) = *(unsigned __int8 *)(v335 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v159 = v279;
  sub_1B1A1B6FC(0, v289, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v285 = v160;
  v299 = (_QWORD *)(v296 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v300 = v158;
  v313 = (unsigned __int16 *)v157;
  v280 = v157 + 8;
  v298 = (char *)v158 + 41;
  swift_retain();
  v161 = v159;
  swift_retain();
  swift_retain();
  v162 = 0;
  do
  {
    v163 = (unsigned int *)(v281 + 48 * v162);
    v164 = *v163;
    v314 = (void (*)(uint64_t))v163[1];
    v165 = (uint64_t *)*((_QWORD *)v163 + 2);
    v166 = *((_QWORD *)v163 + 3);
    v167 = *((_QWORD *)v163 + 5);
    v303 = *((_QWORD *)v163 + 4);
    v304 = v165;
    v291 = v162;
    if ((_DWORD)v292)
    {
      v168 = *(os_unfair_lock_s **)(v167 + 376);
      swift_retain();
      os_unfair_lock_lock(v168);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v167 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot((uint64_t)v293);
    v169 = v313;
    v170 = *((_QWORD *)v313 + 6);
    v289 = (unint64_t *)*((_QWORD *)v313 + 7);
    v290 = v170;
    v171 = *((_QWORD *)v313 + 8);
    v287 = *((_QWORD *)v313 + 9);
    v288 = v171;
    v286 = *((_QWORD *)v313 + 10);
    v172 = *((_QWORD *)v313 + 4);
    v173 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v167 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v169 + 6) = ecs_stack_allocator_allocate(v172, 48 * v173, 8);
    *((_QWORD *)v169 + 7) = v173;
    v174 = v280;
    v280[1] = 0;
    v174[2] = 0;
    *v174 = 0;
    swift_release();
    v176 = v303;
    v175 = v304;
    v312 = sub_1B1A12038(v283, v284, v304, v166, v303, (uint64_t)v169);
    v311 = (_QWORD *)sub_1B1A12038(v285, (uint64_t)&off_1E639EB98, v175, v166, v176, (uint64_t)v169);
    v177 = v167;
    v297 = v167;
    if (v175)
    {
      if (v176)
      {
        v318 = 0;
        v178 = (uint64_t)v277;
        v179 = *(_QWORD *)(v278 + 72);
        v301 = *(_QWORD *)(*(_QWORD *)(v285 - 8) + 72);
        v302 = v179;
        while (1)
        {
          v180 = v304[v318];
          v181 = swift_retain();
          if ((*(_BYTE *)(v177 + 184) & 1) != 0)
            break;
          v182 = *(int *)(*(_QWORD *)(v177 + 168) + 4 * v180);
          v183 = *(_DWORD *)(*(_QWORD *)(v181 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v182 + 8);
          swift_release();
          v184 = (_DWORD)v182 == -1 && v183 == 0;
          if (v184
            || (v182 & 0x80000000) != 0
            || v299[1] <= v182
            || (v183 != -1 ? (v185 = *(_DWORD *)(*v299 + 12 * (int)v182 + 8) == v183) : (v185 = 1),
                !v185
             || (v186 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v296 + 80)
                                              + 8 * *(__int16 *)(*v299 + 12 * (int)v182 + 6)
                                              + 32)
                                  + 16),
                 v187 = *(_QWORD *)(v186 + 128),
                 !*(_QWORD *)(v187 + 16))
             || (v188 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone), (v189 & 1) == 0)
             || *(ValueMetadata **)(*(_QWORD *)(v186 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v187 + 56) + 8 * v188) + 32) != &type metadata for Tombstone))
          {
            dispatch_group_enter(v317);
            v190 = *(_QWORD *)(v177 + 48);
            v191 = *(_QWORD *)(v190 + 16);
            if (v191)
            {
              v192 = (_QWORD *)(v190 + 56);
              while ((ValueMetadata *)*(v192 - 3) != &type metadata for ScriptCompileOptions)
              {
                v192 += 5;
                if (!--v191)
                  goto LABEL_122;
              }
              v195 = (unsigned __int8 *)(*(_QWORD *)(v177 + 128) + *v192 + 24 * v180);
              v316 = *v195;
              v196 = *((_QWORD *)v195 + 2);
              v193 = *((_QWORD *)v195 + 1);
              swift_bridgeObjectRetain();
              v194 = v196;
              swift_bridgeObjectRetain();
            }
            else
            {
LABEL_122:
              v316 = 0;
              v193 = 0;
              v194 = 0;
            }
            sub_1B1792810(v312 + v302 * v318, v178, v161);
            v197 = v177;
            v198 = *(_BYTE *)(v177 + 184);
            v199 = swift_retain();
            if ((v198 & 1) != 0)
              break;
            v200 = v161;
            v201 = v178;
            v202 = *(unsigned int *)(*(_QWORD *)(v197 + 168) + 4 * v180);
            v315 = (void (*)(uint64_t))((char *)v311 + v301 * v318);
            v203 = *(unsigned int *)(*(_QWORD *)(v199 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                   + 12 * (int)v202
                                   + 8);
            swift_release();
            v314 = (void (*)(uint64_t))(v202 | (v203 << 32));
            v204 = v308;
            swift_retain();
            v205 = v307;
            swift_retain();
            v206 = v317;
            v207 = v316;
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), void (*)(uint64_t), _QWORD, uint64_t, NSObject *, uint64_t, uint64_t))v305)(v309, v201, v316, v193, v194, v314, v315, v306 & 1, v310, v206, v204, v205);

            swift_release();
            swift_release();
            sub_1B1B0BC78(v207, v193);
            sub_1B1A04628(v201, v200);
            v161 = v200;
            v178 = v201;
            v177 = v197;
            v176 = v303;
          }
          if (++v318 == v176)
          {
            LODWORD(v318) = 1;
            v25 = v295;
            goto LABEL_155;
          }
        }
LABEL_200:
        swift_release_n();
        swift_release_n();
        result = sub_1B2229688();
        __break(1u);
        return result;
      }
    }
    else
    {
      v208 = v164;
      if ((_DWORD)v164 != (_DWORD)v314)
      {
        v209 = *(uint64_t **)(v278 + 72);
        v303 = *(_QWORD *)(*(_QWORD *)(v285 - 8) + 72);
        v304 = v209;
        while (1)
        {
          v210 = swift_retain();
          if ((*(_BYTE *)(v177 + 184) & 1) != 0)
            goto LABEL_200;
          v211 = *(int *)(*(_QWORD *)(v177 + 168) + 4 * v208);
          v212 = *(_DWORD *)(*(_QWORD *)(v210 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v211 + 8);
          swift_release();
          v213 = (_DWORD)v211 == -1 && v212 == 0;
          if (v213
            || (v211 & 0x80000000) != 0
            || v299[1] <= v211
            || (v212 != -1 ? (v214 = *(_DWORD *)(*v299 + 12 * (int)v211 + 8) == v212) : (v214 = 1),
                !v214
             || (v215 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v296 + 80)
                                              + 8 * *(__int16 *)(*v299 + 12 * (int)v211 + 6)
                                              + 32)
                                  + 16),
                 v216 = *(_QWORD *)(v215 + 128),
                 !*(_QWORD *)(v216 + 16))
             || (v217 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone), (v218 & 1) == 0)
             || *(ValueMetadata **)(*(_QWORD *)(v215 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v216 + 56) + 8 * v217) + 32) != &type metadata for Tombstone))
          {
            dispatch_group_enter(v317);
            v219 = *(_QWORD *)(v177 + 48);
            v220 = *(_QWORD *)(v219 + 16);
            if (v220)
            {
              v221 = (_QWORD *)(v219 + 56);
              while ((ValueMetadata *)*(v221 - 3) != &type metadata for ScriptCompileOptions)
              {
                v221 += 5;
                if (!--v220)
                  goto LABEL_149;
              }
              v224 = (unsigned __int8 *)(*(_QWORD *)(v177 + 128) + *v221 + 24 * v208);
              v222 = *v224;
              v225 = *((_QWORD *)v224 + 2);
              v318 = *((_QWORD *)v224 + 1);
              swift_bridgeObjectRetain();
              v223 = v225;
              swift_bridgeObjectRetain();
            }
            else
            {
LABEL_149:
              v222 = 0;
              v318 = 0;
              v223 = 0;
            }
            sub_1B1792810(v312 + (_QWORD)v304 * v208, (uint64_t)v25, v161);
            v226 = *(_BYTE *)(v177 + 184);
            v227 = swift_retain();
            if ((v226 & 1) != 0)
              goto LABEL_200;
            v228 = v161;
            v229 = (uint64_t)v25;
            v230 = *(unsigned int *)(*(_QWORD *)(v177 + 168) + 4 * v208);
            v315 = (void (*)(uint64_t))((char *)v311 + v303 * v208);
            v231 = *(unsigned int *)(*(_QWORD *)(v227 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                   + 12 * (int)v230
                                   + 8);
            swift_release();
            v232 = v230 | (v231 << 32);
            v316 = v208;
            v233 = v308;
            swift_retain();
            v234 = v307;
            swift_retain();
            v235 = v317;
            v236 = v318;
            v237 = v232;
            v177 = v297;
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), _QWORD, uint64_t, NSObject *, uint64_t, uint64_t))v305)(v309, v229, v222, v318, v223, v237, v315, v306 & 1, v310, v235, v233, v234);

            v208 = v316;
            swift_release();
            swift_release();
            sub_1B1B0BC78(v222, v236);
            sub_1B1A04628(v229, v228);
            v161 = v228;
            v25 = (char *)v229;
          }
          if ((void (*)(uint64_t))++v208 == v314)
          {
            LODWORD(v318) = 1;
            break;
          }
        }
      }
    }
LABEL_155:
    v238 = v313;
    v239 = *((_QWORD *)v313 + 6);
    v240 = *((_QWORD *)v313 + 8);
    if (!v240)
    {
      v267 = *((_QWORD *)v313 + 7);
      v268 = (_QWORD *)*((_QWORD *)v313 + 4);
      v271 = v313;
      v269 = v291;
      v270 = v297;
      goto LABEL_192;
    }
    v241 = 0;
    v242 = *((_QWORD *)v313 + 6);
    do
    {
      v244 = (uint64_t *)(v239 + 48 * v241);
      v245 = *v244;
      v246 = (void (*)(uint64_t))v244[4];
      v247 = *((_QWORD *)v238 + 9);
      if (v247)
        v248 = v245 == v247;
      else
        v248 = 0;
      if (v248 || !v300[11])
        goto LABEL_157;
      v249 = v300[9];
      v250 = &v298[v300[8]];
      v251 = v244[2];
      v252 = v250;
      v253 = v249 >> 4;
      v254 = v298;
      if (v249 >= 0x10)
      {
        while (*(_QWORD *)v252 != v245)
        {
          ++v254;
          v252 += 16;
          if (!--v253)
            goto LABEL_172;
        }
        v255 = v254[v300[10]];
        v256 = v255 > 5;
        v257 = (1 << v255) & 0x23;
        if (v256 || v257 == 0)
        {
LABEL_157:
          v243 = swift_retain();
          v246(v243);
          swift_release();
          goto LABEL_158;
        }
      }
LABEL_172:
      if (swift_conformsToProtocol2())
        v259 = v251;
      else
        v259 = 0;
      if (v259)
      {
        v260 = v250;
        v261 = v249 >> 4;
        v262 = v298;
        if (v249 < 0x10)
          goto LABEL_157;
        while (*(_QWORD *)v260 != v259)
        {
          ++v262;
          v260 += 16;
          if (!--v261)
            goto LABEL_184;
        }
        v263 = v262[v300[10]];
        v256 = v263 > 5;
        v264 = (1 << v263) & 0x23;
        if (v256 || v264 == 0)
          goto LABEL_157;
LABEL_184:
        v266 = 16 * (v249 >> 4);
        while (*(_QWORD *)v250 != v259)
        {
          v250 += 16;
          v266 -= 16;
          if (!v266)
            goto LABEL_157;
        }
      }
LABEL_158:
      v238 = v313;
      ++v241;
      v239 = v242;
    }
    while (v241 != v240);
    v267 = *((_QWORD *)v313 + 7);
    v239 = *((_QWORD *)v313 + 6);
    v268 = (_QWORD *)*((_QWORD *)v313 + 4);
    v269 = v291;
    v270 = v297;
    v161 = v279;
    if (*((uint64_t *)v313 + 8) >= 1)
      swift_arrayDestroy();
    v25 = v295;
    v271 = v313;
LABEL_192:
    ecs_stack_allocator_deallocate(v268, v239, 48 * v267);
    v272 = v289;
    *((_QWORD *)v271 + 6) = v290;
    *((_QWORD *)v271 + 7) = v272;
    v273 = v287;
    *((_QWORD *)v271 + 8) = v288;
    *((_QWORD *)v271 + 9) = v273;
    *((_QWORD *)v271 + 10) = v286;
    sub_1B1F03804((char *)v270);
    ecs_stack_allocator_pop_snapshot((uint64_t)v293);
    if ((_DWORD)v292)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v270 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v270 + 376));
    }
    swift_release();
    v162 = v269 + 1;
  }
  while (v162 != v282);
  sub_1B19ED748(v331);
  sub_1B19ED748(v331);
  if ((v318 & 1) != 0)
    goto LABEL_196;
LABEL_197:
  dispatch_group_leave(v317);
  swift_release_n();
  swift_release_n();
  return swift_release();
}

void sub_1B1D096D0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void (*v33)();
  char v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t inited;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90[5];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97[8];
  __int128 v98;
  char v99;
  uint64_t v100;

  v89 = a7;
  v75 = a4;
  v84 = a3;
  v74 = a2;
  v73 = a1;
  sub_1B1D129B0();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v14 = v13;
  v88 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v81 = (uint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v87 = (uint64_t)&v68 - v19;
  sub_1B1D12A24();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A1B6FC(0, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v25 = v24;
  v86 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v100 = (uint64_t)&v68 - v27;
  v28 = *(_QWORD *)(a5 + 16);
  if (v28)
  {
    v71 = a6 + 80;
    v29 = a5;
    v30 = a5 + 32;
    v70 = v29;
    swift_bridgeObjectRetain();
    v80 = a6;
    v31 = v84;
    v85 = v25;
    v82 = v14;
    v72 = v12;
    while (1)
    {
      sub_1B1D12130(v30, (uint64_t)&v98);
      if ((v99 & 1) != 0)
        break;
      sub_1B1A02518(&v98, (uint64_t)v97);
      sub_1B19FA198((uint64_t)v97, (uint64_t)v90);
      sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8C70);
      v39 = swift_dynamicCast();
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
      if ((v39 & 1) == 0)
      {
        v40(v23, 1, 1, v25);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
        v32 = (uint64_t)v23;
        v33 = sub_1B1D12A24;
LABEL_4:
        sub_1B1A04628(v32, (uint64_t (*)(_QWORD))v33);
        goto LABEL_5;
      }
      v40(v23, 0, 1, v25);
      v41 = v100;
      sub_1B1D12190((uint64_t)v23, v100, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
      v42 = sub_1B1C98FC0();
      v43 = v41 + *(int *)(v14 + 36);
      if ((*(_BYTE *)(v43 + 8) & 1) == 0 && v42 == *(_QWORD *)v43)
      {
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v80 + 72));
        v44 = v100;
        v45 = v81;
        sub_1B1D12220(v100, v81, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        sub_1B1D136D4((uint64_t)v31, v45, type metadata accessor for ParticleInitScript);
        v46 = (uint64_t *)(v44 + *(int *)(v25 + 60));
        v47 = *v46;
        v48 = v46[1];
        v49 = (_QWORD *)v31[3];
        if (v49[2])
        {
          v50 = v49[5];
          v79 = v49[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          v79 = 0;
          v50 = 0;
        }
        LODWORD(v78) = *(unsigned __int8 *)v31;
        inited = v31[1];
        v76 = v31[2];
        sub_1B1CAF1D8(v47);
        v54 = v83;
        v55 = sub_1B1C99250();
        if (v54)
        {
          swift_bridgeObjectRelease();

          sub_1B1B28F18(v47);
          v79 = 0;
          v78 = 0;
        }
        else
        {
          v69 = v47;
          v83 = (void *)v48;
          sub_1B1C98CA0(v79, v50, v78, inited, v76, (uint64_t)v55, 1, *(_QWORD *)(v31[4] + 16) == 0, v90, 2u);
          v79 = v91;
          v78 = v92;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B1B28F18(v69);
        }
        v56 = v73;
        v83 = 0;
        v57 = *(_QWORD *)(v73 + 16);
        v58 = *(_BYTE *)(v73 + 184);
        swift_retain();
        v59 = v85;
        if ((v58 & 1) != 0)
        {
          sub_1B2229688();
          __break(1u);
          return;
        }
        v60 = *(_QWORD *)(v56 + 168);
        inited = type metadata accessor for ParticleInitScript(0);
        v61 = *(unsigned int *)(v60 + 4 * v74);
        v76 = *(unsigned int *)(*(_QWORD *)(v57 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v61 + 8);
        swift_release();
        v90[3] = v82;
        v62 = sub_1B1A137F4(v90);
        v63 = v81;
        sub_1B1D12220(v81, (uint64_t)v62, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        v64 = *(_QWORD *)(v100 + *(int *)(v59 + 36));
        v65 = *(_QWORD *)(v100 + *(int *)(v59 + 40));
        v90[4] = v64;
        v91 = v65;
        v92 = *(_QWORD *)(v100 + *(int *)(v85 + 44));
        sub_1B1A02758(0, &qword_1EEF5D958, (uint64_t)&type metadata for ParticleScriptRuntime, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        v95 = v66;
        v93 = v79;
        v94 = v78;
        v96 = 1;
        v67 = v61 | (v76 << 32);
        swift_retain();
        v25 = v85;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B20E1B28((uint64_t)v90, inited, v67);
        v14 = v82;
        sub_1B1D121E4(v63, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v80 + 72));
        v31 = v84;
        v12 = v72;
      }
      sub_1B1D121E4(v100, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
      *v89 = 1;
LABEL_5:
      v30 += 48;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    sub_1B1A02518(&v98, (uint64_t)v90);
    sub_1B19FA198((uint64_t)v90, (uint64_t)v97);
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8C70);
    v34 = swift_dynamicCast();
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56);
    if ((v34 & 1) != 0)
    {
      v35(v12, 0, 1, v14);
      v36 = v87;
      sub_1B1D12190((uint64_t)v12, v87, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      v37 = sub_1B1C98FC0();
      v38 = v36 + *(int *)(v14 + 36);
      if ((*(_BYTE *)(v38 + 8) & 1) != 0)
      {
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v90);
        goto LABEL_18;
      }
      v51 = v37;
      v52 = *(_QWORD *)v38;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v90);
      v31 = v84;
      if (v51 == v52)
      {
        v53 = v75;
        sub_1B1D121E4(v75, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        v31 = v84;
        v14 = v82;
        sub_1B1D12190(v87, v53, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      }
      else
      {
LABEL_18:
        sub_1B1D121E4(v87, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      }
      v25 = v85;
      *v89 = 1;
      goto LABEL_5;
    }
    v35(v12, 1, 1, v14);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v90);
    v32 = (uint64_t)v12;
    v33 = sub_1B1D129B0;
    goto LABEL_4;
  }
}

uint64_t sub_1B1D0A050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  int *v57;
  _UNKNOWN **v58;
  char v59;
  _OWORD v60[2];
  _OWORD v61[2];
  id v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  uint64_t v67;

  v67 = a6;
  v51 = a3;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v43 - v14;
  sub_1B1A1B6FC(0, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v17 = v16;
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v43 - v19;
  result = sub_1B1C1A1D0(a2, (uint64_t)v61);
  if (v66)
  {
    v50 = a4;
    if (v66 != 1)
    {
      sub_1B1D121E4(a1, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);

      sub_1B1A0DDAC(v61, v60);
      sub_1B1A02864((uint64_t)v60, (uint64_t)&v55);
      swift_dynamicCast();
      sub_1B1D12190((uint64_t)v15, a1, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      v57 = v12;
      v58 = &off_1E639EB98;
      v42 = sub_1B1A137F4(&v55);
      sub_1B1D12220(a1, (uint64_t)v42, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      v59 = 1;
      sub_1B20E19E8((uint64_t)&v55, v50, a5);
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v60);
    }
    v48 = v6;
    sub_1B1D121E4(a1, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v49 = v62;
    v46 = v63;
    v45 = v64;
    sub_1B1A0DDAC(v61, v60);
    sub_1B1A0DDAC(&v65, v54);
    *v20 = 0;
    v22 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v20 + 4) = MEMORY[0x1E0DEE9D8];
    v20[40] = 0;
    v23 = &v20[*(int *)(type metadata accessor for ParticleInitScript(0) + 36)];
    v24 = type metadata accessor for ScriptIndex();
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
    v47 = a5;
    v25(v23, 1, 1, v24);
    *((_QWORD *)v20 + 1) = 0xD0000000000000BFLL;
    *((_QWORD *)v20 + 2) = 0x80000001B232DFE0;
    *((_QWORD *)v20 + 3) = &unk_1E639F0F8;
    v26 = &v20[v12[9]];
    *(_QWORD *)v26 = 0;
    v26[8] = 1;
    v20[v12[10]] = 0;
    *(_QWORD *)&v20[v12[11]] = 0;
    v27 = &v20[v12[12]];
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0xE000000000000000;
    *(_QWORD *)&v20[v12[13]] = v22;
    v28 = v17[9];
    *(_QWORD *)&v20[v28] = 0;
    v29 = v17[10];
    *(_QWORD *)&v20[v29] = 0;
    v44 = a1;
    v30 = v17[11];
    *(_QWORD *)&v20[v30] = 0;
    *(_QWORD *)&v20[v17[12]] = 0;
    v20[v17[13]] = 0;
    v31 = &v20[v17[14]];
    *(_QWORD *)v31 = 0;
    v31[8] = 1;
    v32 = (uint64_t *)&v20[v17[15]];
    *v32 = 0;
    v32[1] = 0;
    sub_1B1A02864((uint64_t)v60, (uint64_t)&v55);
    swift_dynamicCast();
    v33 = v49;
    sub_1B1D12954((uint64_t)v15, (uint64_t)v20, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90);
    *(_QWORD *)&v20[v28] = v33;
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20[v30] = v45;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20[v29] = v46;
    sub_1B1A02864((uint64_t)v54, (uint64_t)&v55);
    swift_dynamicCast();
    v34 = v52;
    v35 = v53;
    sub_1B1B28F18(*v32);
    *v32 = v34;
    v32[1] = v35;
    v36 = v47;
    sub_1B1D12220((uint64_t)v20, v44, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v37 = v51;
    sub_1B1BF7C50((uint64_t)v20, v36);
    v57 = v17;
    v58 = &off_1E637D0A8;
    v38 = sub_1B1A137F4(&v55);
    sub_1B1D12220((uint64_t)v20, (uint64_t)v38, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v59 = 0;
    sub_1B20E19E8((uint64_t)&v55, v50, v36);
    v39 = sub_1B1D183D8(v36);
    if (v39)
    {
      sub_1B1CDC014(v37, v39, v40, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B21584);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1B1A02864((uint64_t)v54, (uint64_t)&v55);
    if (swift_dynamicCast())
    {
      v41 = v52;
      swift_bridgeObjectRelease();
      v55 = MEMORY[0x1E0DEE9D8];
      v56 = MEMORY[0x1E0DEE9D8];
      sub_1B1CE618C(v37, v41);
      swift_bridgeObjectRelease();
      sub_1B1BF7C5C(v55, v56, v36);
    }
    else
    {
      sub_1B1A02864((uint64_t)v54, (uint64_t)&v55);
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_10:
        sub_1B2094804(v36);
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v54);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v60);
        return sub_1B1D121E4((uint64_t)v20, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1B1D0A6F8(_QWORD *a1)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t result;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int64_t v54;
  __int128 v55;
  _OWORD v56[5];
  uint64_t v57;
  char v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  _BYTE v62[104];

  v2 = a1[2];
  v3 = (os_unfair_lock_s *)a1[9];
  swift_retain();
  os_unfair_lock_lock(v3);
  v49 = (uint64_t)a1;
  v50 = v2;
  v4 = a1[10];
  v53 = v4 + 64;
  v5 = 1 << *(_BYTE *)(v4 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v52 = (uint64_t *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v56;
  v10 = v62;
  v45 = v8 - 1;
  swift_bridgeObjectRetain();
  v11 = 0;
  v54 = v8;
  v46 = v8 - 6;
  if (!v7)
    goto LABEL_6;
LABEL_4:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v13 = v12 | (v11 << 6);
LABEL_5:
  v14 = *(_QWORD *)(v4 + 56);
  v15 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v13);
  v16 = v15[1];
  *(_QWORD *)&v55 = *v15;
  *((_QWORD *)&v55 + 1) = v16;
  sub_1B1C1A1D0(v14 + 96 * v13, (uint64_t)v9);
  while (1)
  {
    sub_1B1D125FC((uint64_t)&v55, (uint64_t)&v59);
    if (v62[88] == 255)
      break;
    v20 = v59;
    v21 = v61;
    v22 = v60;
    sub_1B1B99D74((uint64_t)v10, (uint64_t)&v55);
    if (v20 == type metadata accessor for ParticleInitScript(0))
    {
      v23 = v10;
      v24 = v9;
      if (((_DWORD)v22 != -1 || (_DWORD)v21) && (v22 & 0x80000000) == 0 && v52[1] > v22)
      {
        v51 = *v52;
        v25 = *v52 + 12 * (int)v22;
        v28 = *(_DWORD *)(v25 + 8);
        v27 = (_DWORD *)(v25 + 8);
        v26 = v28;
        if ((_DWORD)v21 == -1 || v26 == (_DWORD)v21)
        {
          sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
          v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 80)
                                                  + 8 * *(__int16 *)(v51 + 12 * (int)v22 + 6)
                                                  + 32)
                                      + 16)
                          + 128);
          if (*(_QWORD *)(v30 + 16))
          {
            v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 80) + 8 * *(__int16 *)(v51 + 12 * (int)v22 + 6) + 32)
                            + 16);
            v48 = v29;
            v31 = sub_1B1DC3AC8(v29);
            if ((v32 & 1) != 0
              && *(_QWORD *)(*(_QWORD *)(v47 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31) + 32) == v48)
            {
              v33 = *(_QWORD *)(v48 - 8);
              if (*(_QWORD *)(v33 + 64))
                v34 = *(_QWORD *)(v33 + 72);
              else
                v34 = 0;
              if ((_DWORD)v21 != -1 && *v27 != (_DWORD)v21
                || (v35 = *(_QWORD *)(*(_QWORD *)(v50 + 136) + 8 * *(int *)(v51 + 12 * (int)v22) + 32),
                    v36 = *(_QWORD *)(v35 + 48),
                    (v37 = *(_QWORD *)(v36 + 16)) == 0))
              {
LABEL_55:
                sub_1B2229430();
                sub_1B2228890();
                sub_1B1BC3C70();
                sub_1B2228890();
                swift_bridgeObjectRelease();
                sub_1B2228890();
                sub_1B2228890();
                sub_1B2228890();
                result = sub_1B2229688();
                __break(1u);
                return result;
              }
              v38 = (_QWORD *)(v36 + 56);
              while (*(v38 - 3) != v48)
              {
                v38 += 5;
                if (!--v37)
                  goto LABEL_55;
              }
              sub_1B1D0A050(*(_QWORD *)(v35 + 128) + *v38 + v34 * *(__int16 *)(v51 + 12 * (int)v22 + 4), (uint64_t)&v55, v50, v20, v22 | (unint64_t)(v21 << 32), v49);
            }
          }
        }
      }
      sub_1B1D12448((uint64_t)&v55);
      v9 = v24;
      v10 = v23;
      if (v7)
        goto LABEL_4;
    }
    else
    {
      sub_1B1D12448((uint64_t)&v55);
      if (v7)
        goto LABEL_4;
    }
LABEL_6:
    v17 = v11 + 1;
    if ((uint64_t)(v11 + 1) < v54)
    {
      v18 = *(_QWORD *)(v53 + 8 * v17);
      if (v18)
        goto LABEL_8;
      v19 = v11 + 2;
      if ((uint64_t)(v11 + 2) >= v54)
        goto LABEL_21;
      v18 = *(_QWORD *)(v53 + 8 * v19);
      if (v18)
        goto LABEL_11;
      v17 = v11 + 3;
      if ((uint64_t)(v11 + 3) >= v54)
        goto LABEL_40;
      v18 = *(_QWORD *)(v53 + 8 * v17);
      if (v18)
        goto LABEL_8;
      v19 = v11 + 4;
      if ((uint64_t)(v11 + 4) >= v54)
      {
LABEL_21:
        v11 = v17;
        goto LABEL_22;
      }
      v18 = *(_QWORD *)(v53 + 8 * v19);
      if (v18)
      {
LABEL_11:
        v17 = v19;
LABEL_8:
        v7 = (v18 - 1) & v18;
        v13 = __clz(__rbit64(v18)) + (v17 << 6);
        v11 = v17;
        goto LABEL_5;
      }
      v17 = v11 + 5;
      if ((uint64_t)(v11 + 5) >= v54)
      {
LABEL_40:
        v11 = v19;
      }
      else
      {
        v18 = *(_QWORD *)(v53 + 8 * v17);
        if (v18)
          goto LABEL_8;
        while (v46 != v11)
        {
          v18 = *(_QWORD *)(v4 + 112 + 8 * v11++);
          if (v18)
          {
            v17 = v11 + 5;
            goto LABEL_8;
          }
        }
        v11 = v45;
      }
    }
LABEL_22:
    v7 = 0;
    v57 = 0;
    v55 = 0u;
    memset(v56, 0, sizeof(v56));
    v58 = -1;
  }
  swift_release();
  v39 = *(_QWORD *)(*(_QWORD *)(v49 + 80) + 16);
  if (v39)
  {
    v40 = swift_bridgeObjectRetain();
    v41 = sub_1B1CF6D9C(v40, type metadata accessor for ParticleInitScript);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v49 + 80) = v41;
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(*(_QWORD *)(v49 + 80) + 16);
  }
  else
  {
    v42 = 0;
  }
  v43 = v39 != v42;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 72));
  swift_release();
  return v43;
}

uint64_t sub_1B1D0AC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7, int a8, NSObject *a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  void *v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  id v41;
  _OWORD *v42;
  os_unfair_lock_s *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_signpost_type_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint8_t *v64;
  os_signpost_id_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  dispatch_group_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  _QWORD v92[3];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  dispatch_group_t v108;
  uint64_t inited;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[11];
  char v113;
  _BYTE v114[96];
  __int128 aBlock;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  unsigned __int8 v121;

  LODWORD(v100) = a8;
  v110 = a2;
  v111 = (uint64_t)a6;
  v102 = a4;
  v103 = a5;
  v101 = a3;
  inited = type metadata accessor for ParticleInitScript(0);
  v97 = *(_QWORD *)(inited - 8);
  MEMORY[0x1E0C80A78](inited, v14);
  v98 = v15;
  v99 = (uint64_t)v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1B2228380();
  v17 = *(_QWORD *)(v16 - 8);
  v106 = v16;
  v107 = v17;
  MEMORY[0x1E0C80A78](v16, v18);
  v96 = (char *)v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v92 - v22;
  MEMORY[0x1E0C80A78](v24, v25);
  v105 = (char *)v92 - v26;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a11;
  *(_QWORD *)(v27 + 24) = a12;
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = sub_1B1D13E58;
  v28[3] = v27;
  v28[4] = a10;
  v29 = *(_QWORD *)(a1 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  v108 = a10;
  if (v29
    && ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig) & 1) == 0
     || (*(_BYTE *)(a1 + 2720) & 1) == 0))
  {
    sub_1B1B63B64();
    v36 = (void *)swift_allocError();
    *v37 = xmmword_1B228CCD0;
    if (!*(_QWORD *)(a11 + 16))
    {
LABEL_24:
      v43 = *(os_unfair_lock_s **)(a12 + 72);
      swift_retain();
      swift_retain();
      v44 = v36;
      os_unfair_lock_lock(v43);
      v45 = *(void **)(a11 + 16);
      *(_QWORD *)(a11 + 16) = v36;
      v46 = v36;

      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a12 + 72));
      goto LABEL_25;
    }
LABEL_7:
    swift_retain();
    swift_retain();
LABEL_25:
    dispatch_group_leave(v108);
    swift_release();
    swift_release();

    swift_release();
    swift_release_n();
    swift_release();
LABEL_26:
    swift_release();
    v47 = 0;
    goto LABEL_50;
  }
  v94 = v27;
  v30 = sub_1B1C98FC0();
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v32 = v31;
  v33 = a7 + v31[9];
  v34 = *(_BYTE *)(v33 + 8);
  v104 = v28;
  v95 = v30;
  v35 = (v34 & 1) == 0 && v30 == *(_QWORD *)v33;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 72));
  v38 = *(_QWORD *)(a1 + 80);
  if (!*(_QWORD *)(v38 + 16) || (v39 = sub_1B1DC4138(inited, v111), (v40 & 1) == 0))
  {
    v120 = 0;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    aBlock = 0u;
    v121 = -1;
    goto LABEL_15;
  }
  sub_1B1C1A1D0(*(_QWORD *)(v38 + 56) + 96 * v39, (uint64_t)&aBlock);
  if (v121 == 255)
  {
LABEL_15:
    sub_1B1B1F3E4((uint64_t)&aBlock, &qword_1EEF63440, (uint64_t)&type metadata for CompilationStatus);
LABEL_16:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
    if (v35)
      goto LABEL_17;
    goto LABEL_32;
  }
  sub_1B1C1A1D0((uint64_t)&aBlock, (uint64_t)v114);
  sub_1B1B1F3E4((uint64_t)&aBlock, &qword_1EEF63440, (uint64_t)&type metadata for CompilationStatus);
  sub_1B1C1A1D0((uint64_t)v114, (uint64_t)v112);
  if (v113)
  {
    sub_1B1D12448((uint64_t)v112);
    sub_1B1D12448((uint64_t)v114);
    goto LABEL_16;
  }
  v48 = v112[0];
  sub_1B1D12448((uint64_t)v114);
  if (v48 != v95)
    v35 = 0;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
  if (v35)
  {
LABEL_17:
    if ((*(_BYTE *)(a7 + v32[10]) & 1) != 0)
    {
      v36 = *(void **)(a7 + v32[11]);
      v41 = v36;
    }
    else
    {
      sub_1B1B63B64();
      v36 = (void *)swift_allocError();
      *v42 = xmmword_1B2244C80;
    }
    if (!*(_QWORD *)(a11 + 16) && v36)
      goto LABEL_24;
    goto LABEL_7;
  }
  if (v48 == v95)
  {
    dispatch_group_leave(v108);
    swift_release();
    swift_release_n();
    swift_release();
    goto LABEL_26;
  }
LABEL_32:
  v92[1] = a11;
  v92[2] = a12;
  sub_1B1D121E4(a7, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v93 = swift_allocBox();
  v50 = v49;
  sub_1B1CED1A8(v49);
  v51 = v50 + v32[9];
  v52 = v95;
  *(_QWORD *)v51 = v95;
  *(_BYTE *)(v51 + 8) = 0;
  sub_1B1D136D4(v110, v50, type metadata accessor for ParticleInitScript);
  sub_1B1D12220(v50, a7, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 72));
  *(_QWORD *)&aBlock = v52;
  v121 = 0;
  sub_1B20E1B28((uint64_t)&aBlock, inited, v111);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
  v53 = *(_QWORD *)(a1 + 16);
  swift_retain();
  if (v53)
  {
    v54 = v106;
    v55 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v23, v53 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v106);
    swift_release();
    v56 = v105;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v105, v23, v54);
  }
  else
  {
    v56 = v105;
    v54 = v106;
    if (qword_1ED4BA0E0 != -1)
      swift_once();
    v57 = sub_1B22283B0();
    sub_1B1B40EC8(v57, (uint64_t)qword_1ED4D0E48);
    sub_1B2228398();
    sub_1B2228368();
  }
  v92[0] = HIDWORD(v111);
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v108 = a9;
  v58 = sub_1B22283B0();
  sub_1B1B40EC8(v58, (uint64_t)qword_1ED4D0E48);
  v59 = sub_1B2228398();
  v60 = sub_1B2228FA4();
  if ((sub_1B2229094() & 1) != 0)
  {
    v61 = v107;
    v62 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
    v63 = v96;
    v62(v96, v56, v54);
    v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v64 = 0;
    v65 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v59, v60, v65, "buildScript", "", v64, 2u);
    MEMORY[0x1B5E23F88](v64, -1, -1);

    v66 = v63;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v63, v54);
  }
  else
  {

    v62 = *(void (**)(char *, char *, uint64_t))(v107 + 16);
    v66 = v96;
  }
  v62(v66, v56, v54);
  sub_1B22283E0();
  swift_allocObject();
  v67 = sub_1B22283D4();
  v68 = v99;
  sub_1B1792810(v110, v99, type metadata accessor for ParticleInitScript);
  v69 = (*(unsigned __int8 *)(v97 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  v70 = (v98 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
  v71 = (v70 + 27) & 0xFFFFFFFFFFFFFFF8;
  v72 = swift_allocObject();
  v73 = v108;
  v74 = inited;
  *(_QWORD *)(v72 + 16) = a1;
  *(_QWORD *)(v72 + 24) = v74;
  v75 = v111;
  inited = a1;
  v110 = v67;
  v76 = v92[0];
  *(_DWORD *)(v72 + 32) = v111;
  *(_DWORD *)(v72 + 36) = v76;
  *(_QWORD *)(v72 + 40) = v95;
  *(_QWORD *)(v72 + 48) = sub_1B1D12284;
  *(_QWORD *)(v72 + 56) = v104;
  *(_QWORD *)(v72 + 64) = v67;
  memcpy((void *)(v72 + 72), v73, 0x148uLL);
  sub_1B1A025EC(v68, v72 + v69, type metadata accessor for ParticleInitScript);
  v77 = (uint64_t *)(v72 + v70);
  v79 = v101;
  v78 = v102;
  *v77 = v101;
  v77[1] = v78;
  v77[2] = v103;
  v80 = (_DWORD *)(v72 + v71);
  *v80 = v75;
  v80[1] = v76;
  *(_QWORD *)(v72 + ((v71 + 15) & 0xFFFFFFFFFFFFFFF8)) = v93;
  if ((v100 & 1) != 0)
  {
    v111 = *(_QWORD *)(inited + 40);
    v81 = swift_allocObject();
    *(_QWORD *)(v81 + 16) = sub_1B1D12C0C;
    *(_QWORD *)(v81 + 24) = v72;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1D139FC((uint64_t)v108);
    sub_1B1C18F0C(v79, v78);
    v82 = qword_1ED4BF430;
    swift_retain();
    swift_retain();
    if (v82 != -1)
      swift_once();
    v83 = qword_1ED4BF658;
    swift_retain();
    v84 = v105;
    if (v83 != -1)
      swift_once();
    v85 = qword_1ED4D0FD0;
    swift_retain();
    swift_release();
    v86 = (_QWORD *)swift_allocObject();
    v86[2] = v85;
    v86[3] = sub_1B1D13D9C;
    v86[4] = v81;
    *(_QWORD *)&v117 = sub_1B1D13E54;
    *((_QWORD *)&v117 + 1) = v86;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v116 = sub_1B17915D0;
    *((_QWORD *)&v116 + 1) = &unk_1E63EDDC8;
    v87 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend((id)v111, sel_addOperationWithBlock_, v87);
    _Block_release(v87);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v84, v106);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
  }
  else
  {
    v111 = *(_QWORD *)(inited + 32);
    v88 = swift_allocObject();
    *(_QWORD *)(v88 + 16) = sub_1B1D12C0C;
    *(_QWORD *)(v88 + 24) = v72;
    v89 = swift_allocObject();
    *(_QWORD *)(v89 + 16) = sub_1B1D13D9C;
    *(_QWORD *)(v89 + 24) = v88;
    *(_QWORD *)&v117 = sub_1B1D13D9C;
    *((_QWORD *)&v117 + 1) = v89;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v116 = sub_1B1CDBFCC;
    *((_QWORD *)&v116 + 1) = &unk_1E63D2B68;
    v90 = _Block_copy(&aBlock);
    v100 = *((_QWORD *)&v117 + 1);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1D139FC((uint64_t)v108);
    sub_1B1C18F0C(v79, v78);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync((dispatch_queue_t)v111, v90);
    _Block_release(v90);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v105, v106);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  v47 = 1;
LABEL_50:
  swift_release();
  return v47;
}

void sub_1B1D0B8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)();
  char v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t updated;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90[5];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97[8];
  __int128 v98;
  char v99;
  uint64_t v100;

  v89 = a7;
  v75 = a4;
  v84 = a3;
  v74 = a2;
  v73 = a1;
  sub_1B1D126C0();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A1B6FC(0, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v14 = v13;
  v88 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v81 = (uint64_t)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v87 = (uint64_t)&v68 - v19;
  sub_1B1D12734();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A1B6FC(0, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v25 = v24;
  v86 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v100 = (uint64_t)&v68 - v27;
  v28 = *(_QWORD *)(a5 + 16);
  if (v28)
  {
    v71 = a6 + 80;
    v29 = a5;
    v30 = a5 + 32;
    v70 = v29;
    swift_bridgeObjectRetain();
    v80 = a6;
    v31 = v84;
    v85 = v25;
    v82 = v14;
    v72 = v12;
    while (1)
    {
      sub_1B1D12130(v30, (uint64_t)&v98);
      if ((v99 & 1) != 0)
        break;
      sub_1B1A02518(&v98, (uint64_t)v97);
      sub_1B19FA198((uint64_t)v97, (uint64_t)v90);
      sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8C70);
      v39 = swift_dynamicCast();
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
      if ((v39 & 1) == 0)
      {
        v40(v23, 1, 1, v25);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
        v32 = (uint64_t)v23;
        v33 = sub_1B1D12734;
LABEL_4:
        sub_1B1A04628(v32, (uint64_t (*)(_QWORD))v33);
        goto LABEL_5;
      }
      v40(v23, 0, 1, v25);
      v41 = v100;
      sub_1B1D12190((uint64_t)v23, v100, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
      v42 = sub_1B1C999A0();
      v43 = v41 + *(int *)(v14 + 36);
      if ((*(_BYTE *)(v43 + 8) & 1) == 0 && v42 == *(_QWORD *)v43)
      {
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v80 + 72));
        v44 = v100;
        v45 = v81;
        sub_1B1D12220(v100, v81, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        sub_1B1D136D4(v31, v45, type metadata accessor for ParticleUpdateScript);
        v46 = (uint64_t *)(v44 + *(int *)(v25 + 60));
        v47 = *v46;
        v48 = v46[1];
        v49 = *(_QWORD **)(v31 + 16);
        if (v49[2])
        {
          v50 = v49[5];
          v79 = v49[4];
          swift_bridgeObjectRetain();
        }
        else
        {
          v79 = 0;
          v50 = 0;
        }
        LODWORD(v78) = *(unsigned __int8 *)(v31 + 24);
        updated = *(_QWORD *)v31;
        v76 = *(_QWORD *)(v31 + 8);
        sub_1B1CAF1D8(v47);
        v54 = v83;
        v55 = sub_1B1C99C14();
        if (v54)
        {
          swift_bridgeObjectRelease();

          sub_1B1B28F18(v47);
          v79 = 0;
          v78 = 0;
        }
        else
        {
          v69 = v47;
          v83 = (void *)v48;
          sub_1B1C98CA0(v79, v50, v78, updated, v76, (uint64_t)v55, 0, *(_QWORD *)(*(_QWORD *)(v31 + 32) + 16) == 0, v90, 2u);
          v79 = v91;
          v78 = v92;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B1B28F18(v69);
        }
        v56 = v73;
        v83 = 0;
        v57 = *(_QWORD *)(v73 + 16);
        v58 = *(_BYTE *)(v73 + 184);
        swift_retain();
        v59 = v85;
        if ((v58 & 1) != 0)
        {
          sub_1B2229688();
          __break(1u);
          return;
        }
        v60 = *(_QWORD *)(v56 + 168);
        updated = type metadata accessor for ParticleUpdateScript(0);
        v61 = *(unsigned int *)(v60 + 4 * v74);
        v76 = *(unsigned int *)(*(_QWORD *)(v57 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v61 + 8);
        swift_release();
        v90[3] = v82;
        v62 = sub_1B1A137F4(v90);
        v63 = v81;
        sub_1B1D12220(v81, (uint64_t)v62, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        v64 = *(_QWORD *)(v100 + *(int *)(v59 + 36));
        v65 = *(_QWORD *)(v100 + *(int *)(v59 + 40));
        v90[4] = v64;
        v91 = v65;
        v92 = *(_QWORD *)(v100 + *(int *)(v85 + 44));
        sub_1B1A02758(0, &qword_1EEF5D958, (uint64_t)&type metadata for ParticleScriptRuntime, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        v95 = v66;
        v93 = v79;
        v94 = v78;
        v96 = 1;
        v67 = v61 | (v76 << 32);
        swift_retain();
        v25 = v85;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B20E1B28((uint64_t)v90, updated, v67);
        v14 = v82;
        sub_1B1D121E4(v63, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v80 + 72));
        v31 = v84;
        v12 = v72;
      }
      sub_1B1D121E4(v100, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
      *v89 = 1;
LABEL_5:
      v30 += 48;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    sub_1B1A02518(&v98, (uint64_t)v90);
    sub_1B19FA198((uint64_t)v90, (uint64_t)v97);
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8C70);
    v34 = swift_dynamicCast();
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56);
    if ((v34 & 1) != 0)
    {
      v35(v12, 0, 1, v14);
      v36 = v87;
      sub_1B1D12190((uint64_t)v12, v87, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      v37 = sub_1B1C999A0();
      v38 = v36 + *(int *)(v14 + 36);
      if ((*(_BYTE *)(v38 + 8) & 1) != 0)
      {
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v90);
        goto LABEL_18;
      }
      v51 = v37;
      v52 = *(_QWORD *)v38;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v90);
      v31 = v84;
      if (v51 == v52)
      {
        v53 = v75;
        sub_1B1D121E4(v75, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        v31 = v84;
        v14 = v82;
        sub_1B1D12190(v87, v53, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      }
      else
      {
LABEL_18:
        sub_1B1D121E4(v87, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      }
      v25 = v85;
      *v89 = 1;
      goto LABEL_5;
    }
    v35(v12, 1, 1, v14);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v90);
    v32 = (uint64_t)v12;
    v33 = sub_1B1D126C0;
    goto LABEL_4;
  }
}

uint64_t sub_1B1D0C220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  uint64_t v56;
  int *v57;
  _UNKNOWN **v58;
  char v59;
  _OWORD v60[2];
  _OWORD v61[2];
  id v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  uint64_t v67;

  v67 = a6;
  v51 = a3;
  sub_1B1A1B6FC(0, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v43 - v14;
  sub_1B1A1B6FC(0, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v17 = v16;
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v43 - v19;
  result = sub_1B1C1A1D0(a2, (uint64_t)v61);
  if (v66)
  {
    v50 = a4;
    if (v66 != 1)
    {
      sub_1B1D121E4(a1, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);

      sub_1B1A0DDAC(v61, v60);
      sub_1B1A02864((uint64_t)v60, (uint64_t)&v55);
      swift_dynamicCast();
      sub_1B1D12190((uint64_t)v15, a1, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      v57 = v12;
      v58 = &off_1E639EB98;
      v42 = sub_1B1A137F4(&v55);
      sub_1B1D12220(a1, (uint64_t)v42, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      v59 = 1;
      sub_1B20E19E8((uint64_t)&v55, v50, a5);
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v60);
    }
    v48 = v6;
    sub_1B1D121E4(a1, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v49 = v62;
    v46 = v63;
    v45 = v64;
    sub_1B1A0DDAC(v61, v60);
    sub_1B1A0DDAC(&v65, v54);
    v20[24] = 0;
    v22 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v20 + 4) = MEMORY[0x1E0DEE9D8];
    v20[40] = 0;
    v23 = &v20[*(int *)(type metadata accessor for ParticleUpdateScript(0) + 36)];
    v24 = type metadata accessor for ScriptIndex();
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
    v47 = a5;
    v25(v23, 1, 1, v24);
    *(_QWORD *)v20 = 0xD0000000000000C3;
    *((_QWORD *)v20 + 1) = 0x80000001B232E120;
    *((_QWORD *)v20 + 2) = &unk_1E639F158;
    v26 = &v20[v12[9]];
    *(_QWORD *)v26 = 0;
    v26[8] = 1;
    v20[v12[10]] = 0;
    *(_QWORD *)&v20[v12[11]] = 0;
    v27 = &v20[v12[12]];
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0xE000000000000000;
    *(_QWORD *)&v20[v12[13]] = v22;
    v28 = v17[9];
    *(_QWORD *)&v20[v28] = 0;
    v29 = v17[10];
    *(_QWORD *)&v20[v29] = 0;
    v44 = a1;
    v30 = v17[11];
    *(_QWORD *)&v20[v30] = 0;
    *(_QWORD *)&v20[v17[12]] = 0;
    v20[v17[13]] = 0;
    v31 = &v20[v17[14]];
    *(_QWORD *)v31 = 0;
    v31[8] = 1;
    v32 = (uint64_t *)&v20[v17[15]];
    *v32 = 0;
    v32[1] = 0;
    sub_1B1A02864((uint64_t)v60, (uint64_t)&v55);
    swift_dynamicCast();
    v33 = v49;
    sub_1B1D12954((uint64_t)v15, (uint64_t)v20, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
    *(_QWORD *)&v20[v28] = v33;
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20[v30] = v45;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20[v29] = v46;
    sub_1B1A02864((uint64_t)v54, (uint64_t)&v55);
    swift_dynamicCast();
    v34 = v52;
    v35 = v53;
    sub_1B1B28F18(*v32);
    *v32 = v34;
    v32[1] = v35;
    v36 = v47;
    sub_1B1D12220((uint64_t)v20, v44, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v37 = v51;
    sub_1B1BF7C38((uint64_t)v20, v36);
    v57 = v17;
    v58 = &off_1E637D0A8;
    v38 = sub_1B1A137F4(&v55);
    sub_1B1D12220((uint64_t)v20, (uint64_t)v38, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v59 = 0;
    sub_1B20E19E8((uint64_t)&v55, v50, v36);
    v39 = sub_1B1D183BC(v36);
    if (v39)
    {
      sub_1B1CDC014(v37, v39, v40, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B21584);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1B1A02864((uint64_t)v54, (uint64_t)&v55);
    if (swift_dynamicCast())
    {
      v41 = v52;
      swift_bridgeObjectRelease();
      v55 = MEMORY[0x1E0DEE9D8];
      v56 = MEMORY[0x1E0DEE9D8];
      sub_1B1CE618C(v37, v41);
      swift_bridgeObjectRelease();
      sub_1B1BF7C44(v55, v56, v36);
    }
    else
    {
      sub_1B1A02864((uint64_t)v54, (uint64_t)&v55);
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_10:
        sub_1B2094804(v36);
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v54);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v60);
        return sub_1B1D121E4((uint64_t)v20, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1B1D0C8C8(_QWORD *a1)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t result;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int64_t v54;
  __int128 v55;
  _OWORD v56[5];
  uint64_t v57;
  char v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  _BYTE v62[104];

  v2 = a1[2];
  v3 = (os_unfair_lock_s *)a1[9];
  swift_retain();
  os_unfair_lock_lock(v3);
  v49 = (uint64_t)a1;
  v50 = v2;
  v4 = a1[10];
  v53 = v4 + 64;
  v5 = 1 << *(_BYTE *)(v4 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v52 = (uint64_t *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v56;
  v10 = v62;
  v45 = v8 - 1;
  swift_bridgeObjectRetain();
  v11 = 0;
  v54 = v8;
  v46 = v8 - 6;
  if (!v7)
    goto LABEL_6;
LABEL_4:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v13 = v12 | (v11 << 6);
LABEL_5:
  v14 = *(_QWORD *)(v4 + 56);
  v15 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v13);
  v16 = v15[1];
  *(_QWORD *)&v55 = *v15;
  *((_QWORD *)&v55 + 1) = v16;
  sub_1B1C1A1D0(v14 + 96 * v13, (uint64_t)v9);
  while (1)
  {
    sub_1B1D125FC((uint64_t)&v55, (uint64_t)&v59);
    if (v62[88] == 255)
      break;
    v20 = v59;
    v21 = v61;
    v22 = v60;
    sub_1B1B99D74((uint64_t)v10, (uint64_t)&v55);
    if (v20 == type metadata accessor for ParticleUpdateScript(0))
    {
      v23 = v10;
      v24 = v9;
      if (((_DWORD)v22 != -1 || (_DWORD)v21) && (v22 & 0x80000000) == 0 && v52[1] > v22)
      {
        v51 = *v52;
        v25 = *v52 + 12 * (int)v22;
        v28 = *(_DWORD *)(v25 + 8);
        v27 = (_DWORD *)(v25 + 8);
        v26 = v28;
        if ((_DWORD)v21 == -1 || v26 == (_DWORD)v21)
        {
          sub_1B1A1B6FC(0, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
          v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 80)
                                                  + 8 * *(__int16 *)(v51 + 12 * (int)v22 + 6)
                                                  + 32)
                                      + 16)
                          + 128);
          if (*(_QWORD *)(v30 + 16))
          {
            v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 80) + 8 * *(__int16 *)(v51 + 12 * (int)v22 + 6) + 32)
                            + 16);
            v48 = v29;
            v31 = sub_1B1DC3AC8(v29);
            if ((v32 & 1) != 0
              && *(_QWORD *)(*(_QWORD *)(v47 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31) + 32) == v48)
            {
              v33 = *(_QWORD *)(v48 - 8);
              if (*(_QWORD *)(v33 + 64))
                v34 = *(_QWORD *)(v33 + 72);
              else
                v34 = 0;
              if ((_DWORD)v21 != -1 && *v27 != (_DWORD)v21
                || (v35 = *(_QWORD *)(*(_QWORD *)(v50 + 136) + 8 * *(int *)(v51 + 12 * (int)v22) + 32),
                    v36 = *(_QWORD *)(v35 + 48),
                    (v37 = *(_QWORD *)(v36 + 16)) == 0))
              {
LABEL_55:
                sub_1B2229430();
                sub_1B2228890();
                sub_1B1BC3C70();
                sub_1B2228890();
                swift_bridgeObjectRelease();
                sub_1B2228890();
                sub_1B2228890();
                sub_1B2228890();
                result = sub_1B2229688();
                __break(1u);
                return result;
              }
              v38 = (_QWORD *)(v36 + 56);
              while (*(v38 - 3) != v48)
              {
                v38 += 5;
                if (!--v37)
                  goto LABEL_55;
              }
              sub_1B1D0C220(*(_QWORD *)(v35 + 128) + *v38 + v34 * *(__int16 *)(v51 + 12 * (int)v22 + 4), (uint64_t)&v55, v50, v20, v22 | (unint64_t)(v21 << 32), v49);
            }
          }
        }
      }
      sub_1B1D12448((uint64_t)&v55);
      v9 = v24;
      v10 = v23;
      if (v7)
        goto LABEL_4;
    }
    else
    {
      sub_1B1D12448((uint64_t)&v55);
      if (v7)
        goto LABEL_4;
    }
LABEL_6:
    v17 = v11 + 1;
    if ((uint64_t)(v11 + 1) < v54)
    {
      v18 = *(_QWORD *)(v53 + 8 * v17);
      if (v18)
        goto LABEL_8;
      v19 = v11 + 2;
      if ((uint64_t)(v11 + 2) >= v54)
        goto LABEL_21;
      v18 = *(_QWORD *)(v53 + 8 * v19);
      if (v18)
        goto LABEL_11;
      v17 = v11 + 3;
      if ((uint64_t)(v11 + 3) >= v54)
        goto LABEL_40;
      v18 = *(_QWORD *)(v53 + 8 * v17);
      if (v18)
        goto LABEL_8;
      v19 = v11 + 4;
      if ((uint64_t)(v11 + 4) >= v54)
      {
LABEL_21:
        v11 = v17;
        goto LABEL_22;
      }
      v18 = *(_QWORD *)(v53 + 8 * v19);
      if (v18)
      {
LABEL_11:
        v17 = v19;
LABEL_8:
        v7 = (v18 - 1) & v18;
        v13 = __clz(__rbit64(v18)) + (v17 << 6);
        v11 = v17;
        goto LABEL_5;
      }
      v17 = v11 + 5;
      if ((uint64_t)(v11 + 5) >= v54)
      {
LABEL_40:
        v11 = v19;
      }
      else
      {
        v18 = *(_QWORD *)(v53 + 8 * v17);
        if (v18)
          goto LABEL_8;
        while (v46 != v11)
        {
          v18 = *(_QWORD *)(v4 + 112 + 8 * v11++);
          if (v18)
          {
            v17 = v11 + 5;
            goto LABEL_8;
          }
        }
        v11 = v45;
      }
    }
LABEL_22:
    v7 = 0;
    v57 = 0;
    v55 = 0u;
    memset(v56, 0, sizeof(v56));
    v58 = -1;
  }
  swift_release();
  v39 = *(_QWORD *)(*(_QWORD *)(v49 + 80) + 16);
  if (v39)
  {
    v40 = swift_bridgeObjectRetain();
    v41 = sub_1B1CF6D9C(v40, type metadata accessor for ParticleUpdateScript);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v49 + 80) = v41;
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(*(_QWORD *)(v49 + 80) + 16);
  }
  else
  {
    v42 = 0;
  }
  v43 = v39 != v42;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 72));
  swift_release();
  return v43;
}

uint64_t sub_1B1D0CE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7, int a8, NSObject *a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  void *v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  id v41;
  _OWORD *v42;
  os_unfair_lock_s *v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_signpost_type_t v64;
  char v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  uint8_t *v69;
  os_signpost_id_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  char *v111;
  uint64_t updated;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[11];
  char v116;
  _BYTE v117[96];
  __int128 aBlock;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  unsigned __int8 v124;

  LODWORD(v103) = a8;
  v113 = a2;
  v114 = (uint64_t)a6;
  v105 = a4;
  v106 = a5;
  v104 = a3;
  updated = type metadata accessor for ParticleUpdateScript(0);
  v100 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated, v14);
  v101 = v15;
  v102 = (uint64_t)v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1B2228380();
  v17 = *(_QWORD *)(v16 - 8);
  v108 = v16;
  v109 = v17;
  MEMORY[0x1E0C80A78](v16, v18);
  v99 = (char *)v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v95 - v22;
  MEMORY[0x1E0C80A78](v24, v25);
  v111 = (char *)v95 - v26;
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = a11;
  *(_QWORD *)(v27 + 24) = a12;
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = sub_1B1D13E58;
  v28[3] = v27;
  v28[4] = a10;
  v29 = *(_QWORD *)(a1 + 16);
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  v110 = a10;
  if (v29
    && ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig) & 1) == 0
     || (*(_BYTE *)(a1 + 2720) & 1) == 0))
  {
    sub_1B1B63B64();
    v36 = (void *)swift_allocError();
    *v37 = xmmword_1B228CCD0;
    if (!*(_QWORD *)(a11 + 16))
    {
LABEL_24:
      v43 = *(os_unfair_lock_s **)(a12 + 72);
      swift_retain();
      swift_retain();
      v44 = v36;
      os_unfair_lock_lock(v43);
      v45 = *(void **)(a11 + 16);
      *(_QWORD *)(a11 + 16) = v36;
      v46 = v36;

      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a12 + 72));
      goto LABEL_25;
    }
LABEL_7:
    swift_retain();
    swift_retain();
LABEL_25:
    dispatch_group_leave(v110);
    swift_release();
    swift_release();

    swift_release();
    swift_release_n();
    swift_release();
LABEL_26:
    swift_release();
    v47 = 0;
    goto LABEL_50;
  }
  v97 = v27;
  v30 = sub_1B1C999A0();
  sub_1B1A1B6FC(0, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v32 = v31;
  v33 = a7 + v31[9];
  v34 = *(_BYTE *)(v33 + 8);
  v107 = v28;
  v98 = v30;
  v35 = (v34 & 1) == 0 && v30 == *(_QWORD *)v33;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 72));
  v38 = *(_QWORD *)(a1 + 80);
  if (!*(_QWORD *)(v38 + 16) || (v39 = sub_1B1DC4138(updated, v114), (v40 & 1) == 0))
  {
    v123 = 0;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    aBlock = 0u;
    v124 = -1;
    goto LABEL_15;
  }
  sub_1B1C1A1D0(*(_QWORD *)(v38 + 56) + 96 * v39, (uint64_t)&aBlock);
  if (v124 == 255)
  {
LABEL_15:
    sub_1B1B1F3E4((uint64_t)&aBlock, &qword_1EEF63440, (uint64_t)&type metadata for CompilationStatus);
LABEL_16:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
    if (v35)
      goto LABEL_17;
    goto LABEL_32;
  }
  sub_1B1C1A1D0((uint64_t)&aBlock, (uint64_t)v117);
  sub_1B1B1F3E4((uint64_t)&aBlock, &qword_1EEF63440, (uint64_t)&type metadata for CompilationStatus);
  sub_1B1C1A1D0((uint64_t)v117, (uint64_t)v115);
  if (v116)
  {
    sub_1B1D12448((uint64_t)v115);
    sub_1B1D12448((uint64_t)v117);
    goto LABEL_16;
  }
  v48 = v115[0];
  sub_1B1D12448((uint64_t)v117);
  if (v48 != v98)
    v35 = 0;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
  if (v35)
  {
LABEL_17:
    if ((*(_BYTE *)(a7 + v32[10]) & 1) != 0)
    {
      v36 = *(void **)(a7 + v32[11]);
      v41 = v36;
    }
    else
    {
      sub_1B1B63B64();
      v36 = (void *)swift_allocError();
      *v42 = xmmword_1B2244C80;
    }
    if (!*(_QWORD *)(a11 + 16) && v36)
      goto LABEL_24;
    goto LABEL_7;
  }
  if (v48 == v98)
  {
    dispatch_group_leave(v110);
    swift_release();
    swift_release_n();
    swift_release();
    goto LABEL_26;
  }
LABEL_32:
  v95[2] = a12;
  sub_1B1D121E4(a7, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v96 = swift_allocBox();
  v50 = (_QWORD *)v49;
  *(_BYTE *)(v49 + 24) = 0;
  *(_QWORD *)(v49 + 32) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v49 + 40) = 0;
  v51 = updated;
  v52 = v49 + *(int *)(updated + 36);
  v53 = type metadata accessor for ScriptIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 1, 1, v53);
  *v50 = 0xD0000000000000C3;
  v50[1] = 0x80000001B232E120;
  v50[2] = &unk_1E639E588;
  v54 = (char *)v50 + v32[9];
  *((_BYTE *)v50 + v32[10]) = 0;
  *(_QWORD *)((char *)v50 + v32[11]) = 0;
  v55 = (_QWORD *)((char *)v50 + v32[12]);
  *v55 = 0;
  v55[1] = 0xE000000000000000;
  *(_QWORD *)((char *)v50 + v32[13]) = MEMORY[0x1E0DEE9D8];
  v56 = v98;
  *(_QWORD *)v54 = v98;
  v54[8] = 0;
  sub_1B1D136D4(v113, (uint64_t)v50, type metadata accessor for ParticleUpdateScript);
  sub_1B1D12220((uint64_t)v50, a7, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 72));
  *(_QWORD *)&aBlock = v56;
  v124 = 0;
  sub_1B20E1B28((uint64_t)&aBlock, v51, v114);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
  v57 = *(_QWORD *)(a1 + 16);
  swift_retain();
  if (v57)
  {
    v58 = v108;
    v59 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v23, v57 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v108);
    swift_release();
    v60 = v111;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v111, v23, v58);
  }
  else
  {
    v58 = v108;
    v60 = v111;
    if (qword_1ED4BA0E0 != -1)
      swift_once();
    v61 = sub_1B22283B0();
    sub_1B1B40EC8(v61, (uint64_t)qword_1ED4D0E48);
    sub_1B2228398();
    sub_1B2228368();
  }
  v95[0] = HIDWORD(v114);
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v110 = a9;
  v62 = sub_1B22283B0();
  sub_1B1B40EC8(v62, (uint64_t)qword_1ED4D0E48);
  v63 = sub_1B2228398();
  v64 = sub_1B2228FA4();
  v65 = sub_1B2229094();
  v95[1] = a11;
  if ((v65 & 1) != 0)
  {
    v66 = v109;
    v67 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
    v68 = v99;
    v67(v99, v111, v58);
    v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v69 = 0;
    v70 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v63, v64, v70, "buildScript", "", v69, 2u);
    MEMORY[0x1B5E23F88](v69, -1, -1);

    v71 = *(void (**)(char *, uint64_t))(v66 + 8);
    v60 = v111;
    v71(v68, v58);
  }
  else
  {

    v67 = *(void (**)(char *, char *, uint64_t))(v109 + 16);
    v68 = v99;
  }
  v67(v68, v60, v58);
  sub_1B22283E0();
  swift_allocObject();
  v72 = sub_1B22283D4();
  v73 = v102;
  sub_1B1792810(v113, v102, type metadata accessor for ParticleUpdateScript);
  v74 = (*(unsigned __int8 *)(v100 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80);
  v75 = (v101 + v74 + 7) & 0xFFFFFFFFFFFFFFF8;
  v76 = (v75 + 27) & 0xFFFFFFFFFFFFFFF8;
  v77 = swift_allocObject();
  v78 = updated;
  *(_QWORD *)(v77 + 16) = a1;
  *(_QWORD *)(v77 + 24) = v78;
  v79 = v114;
  updated = a1;
  v113 = v72;
  v80 = v95[0];
  *(_DWORD *)(v77 + 32) = v114;
  *(_DWORD *)(v77 + 36) = v80;
  *(_QWORD *)(v77 + 40) = v98;
  *(_QWORD *)(v77 + 48) = sub_1B1D12284;
  *(_QWORD *)(v77 + 56) = v107;
  *(_QWORD *)(v77 + 64) = v72;
  memcpy((void *)(v77 + 72), v110, 0x148uLL);
  sub_1B1A025EC(v73, v77 + v74, type metadata accessor for ParticleUpdateScript);
  v81 = (uint64_t *)(v77 + v75);
  v82 = v104;
  v83 = v105;
  *v81 = v104;
  v81[1] = v83;
  v81[2] = v106;
  v84 = (_DWORD *)(v77 + v76);
  *v84 = v79;
  v84[1] = v80;
  *(_QWORD *)(v77 + ((v76 + 15) & 0xFFFFFFFFFFFFFFF8)) = v96;
  if ((v103 & 1) != 0)
  {
    v114 = *(_QWORD *)(updated + 40);
    v85 = swift_allocObject();
    *(_QWORD *)(v85 + 16) = sub_1B1D1291C;
    *(_QWORD *)(v85 + 24) = v77;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1D139FC((uint64_t)v110);
    sub_1B1C18F0C(v82, v83);
    v86 = qword_1ED4BF430;
    swift_retain();
    swift_retain();
    if (v86 != -1)
      swift_once();
    v87 = qword_1ED4BF658;
    swift_retain();
    if (v87 != -1)
      swift_once();
    v88 = qword_1ED4D0FD0;
    swift_retain();
    swift_release();
    v89 = (_QWORD *)swift_allocObject();
    v89[2] = v88;
    v89[3] = sub_1B1D13D9C;
    v89[4] = v85;
    *(_QWORD *)&v120 = sub_1B1D13E54;
    *((_QWORD *)&v120 + 1) = v89;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v119 = sub_1B17915D0;
    *((_QWORD *)&v119 + 1) = &unk_1E63EDC88;
    v90 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend((id)v114, sel_addOperationWithBlock_, v90);
    _Block_release(v90);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v111, v108);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
  }
  else
  {
    v114 = *(_QWORD *)(updated + 32);
    v91 = swift_allocObject();
    *(_QWORD *)(v91 + 16) = sub_1B1D1291C;
    *(_QWORD *)(v91 + 24) = v77;
    v92 = swift_allocObject();
    *(_QWORD *)(v92 + 16) = sub_1B1D13D9C;
    *(_QWORD *)(v92 + 24) = v91;
    *(_QWORD *)&v120 = sub_1B1D13D9C;
    *((_QWORD *)&v120 + 1) = v92;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v119 = sub_1B1CDBFCC;
    *((_QWORD *)&v119 + 1) = &unk_1E63EDC10;
    v93 = _Block_copy(&aBlock);
    v103 = *((_QWORD *)&v120 + 1);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1D139FC((uint64_t)v110);
    sub_1B1C18F0C(v82, v83);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync((dispatch_queue_t)v114, v93);
    _Block_release(v93);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v111, v108);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  v47 = 1;
LABEL_50:
  swift_release();
  return v47;
}

void sub_1B1D0DB18(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t, uint64_t, int *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[4];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  int *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  char *v76;
  uint64_t v77[11];
  char v78;
  char v79[8];
  __int128 v80;
  char v81;
  char *v82;

  v75 = a7;
  v68 = a6;
  v61 = a4;
  v69 = a3;
  v60 = a2;
  v59 = a1;
  sub_1B1D12048();
  MEMORY[0x1E0C80A78](v8, v9);
  v82 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A1B6FC(0, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v12 = v11;
  v74 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v67 = (uint64_t)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v73 = (uint64_t)v58 - v17;
  sub_1B1D120BC();
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A1B6FC(0, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v23 = v22;
  v72 = *((_QWORD *)v22 - 1);
  MEMORY[0x1E0C80A78](v22, v24);
  v71 = (char *)v58 - v25;
  v26 = *(_QWORD *)(a5 + 16);
  if (v26)
  {
    v58[2] = v68 + 80;
    v27 = a5 + 32;
    v58[1] = a5;
    swift_bridgeObjectRetain();
    v28 = v69;
    v70 = v23;
    v29 = (uint64_t)v71;
    v76 = v21;
    v66 = v12;
    while (1)
    {
      sub_1B1D12130(v27, (uint64_t)&v80);
      if ((v81 & 1) != 0)
        break;
      sub_1B1A02518(&v80, (uint64_t)v79);
      sub_1B19FA198((uint64_t)v79, (uint64_t)v77);
      sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8C70);
      v38 = swift_dynamicCast();
      v39 = *(void (**)(char *, uint64_t, uint64_t, int *))(v72 + 56);
      if ((v38 & 1) != 0)
      {
        v39(v21, 0, 1, v23);
        v40 = sub_1B1D12190((uint64_t)v21, v29, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        v41 = sub_1B1C9B394(v40);
        v42 = v29 + *(int *)(v12 + 36);
        if ((*(_BYTE *)(v42 + 8) & 1) == 0 && v41 == *(_QWORD *)v42)
        {
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v68 + 72));
          v43 = v67;
          sub_1B1D12220(v29, v67, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
          sub_1B1D136D4((uint64_t)v28, v43, type metadata accessor for TriggerScript);
          v44 = *v28;
          v45 = v59;
          v46 = *(_QWORD *)(v59 + 16);
          v47 = *(_BYTE *)(v59 + 184);
          swift_retain();
          if ((v47 & 1) != 0)
          {
            sub_1B2229688();
            __break(1u);
            return;
          }
          v48 = *(_QWORD *)(v45 + 168);
          v65 = type metadata accessor for TriggerScript(0);
          v64 = *(unsigned int *)(v48 + 4 * v60);
          v63 = *(unsigned int *)(*(_QWORD *)(v46 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v64 + 8);
          swift_bridgeObjectRetain();
          swift_release();
          v77[3] = v66;
          v49 = sub_1B1A137F4(v77);
          sub_1B1D12220(v43, (uint64_t)v49, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
          v23 = v70;
          v50 = v70[10];
          v29 = (uint64_t)v71;
          v51 = *(_QWORD *)&v71[v70[9]];
          v62 = v44;
          v52 = *(_QWORD *)&v71[v50];
          v77[4] = v51;
          v77[5] = v52;
          v77[6] = *(_QWORD *)&v71[v70[11]];
          sub_1B1A02758(0, &qword_1EEF5D958, (uint64_t)&type metadata for ParticleScriptRuntime, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          v77[10] = v53;
          v77[7] = v62;
          v77[8] = 0;
          v78 = 1;
          v54 = v64 | (v63 << 32);
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B20E1B28((uint64_t)v77, v65, v54);
          sub_1B1D121E4(v67, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v68 + 72));
          v28 = v69;
          v12 = v66;
          v21 = v76;
        }
        sub_1B1D121E4(v29, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v79);
        *v75 = 1;
      }
      else
      {
        v39(v21, 1, 1, v23);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v79);
        sub_1B1A04628((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1B1D120BC);
      }
LABEL_5:
      v27 += 48;
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    sub_1B1A02518(&v80, (uint64_t)v77);
    sub_1B19FA198((uint64_t)v77, (uint64_t)v79);
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4B8C70);
    v31 = swift_dynamicCast();
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56);
    if ((v31 & 1) == 0)
    {
      v30 = (uint64_t)v82;
      v32(v82, 1, 1, v12);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v77);
      sub_1B1A04628(v30, (uint64_t (*)(_QWORD))sub_1B1D12048);
LABEL_4:
      v21 = v76;
      goto LABEL_5;
    }
    v33 = (uint64_t)v82;
    v32(v82, 0, 1, v12);
    v34 = v73;
    v35 = sub_1B1D12190(v33, v73, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v36 = sub_1B1C9B394(v35);
    v37 = v34 + *(int *)(v12 + 36);
    if ((*(_BYTE *)(v37 + 8) & 1) != 0)
    {
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v77);
    }
    else
    {
      v55 = v36;
      v56 = *(_QWORD *)v37;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v77);
      v28 = v69;
      if (v55 == v56)
      {
        v57 = v61;
        sub_1B1D121E4(v61, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        sub_1B1D12190(v73, v57, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
LABEL_20:
        v23 = v70;
        *v75 = 1;
        v29 = (uint64_t)v71;
        goto LABEL_4;
      }
    }
    sub_1B1D121E4(v73, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    goto LABEL_20;
  }
}

uint64_t sub_1B1D0E2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t result;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  __CFString *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  int *v61;
  _UNKNOWN **v62;
  char v63;
  _OWORD v64[2];
  _OWORD v65[2];
  id v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  char v70;
  uint64_t v71;

  v71 = a4;
  v55 = a3;
  sub_1B1A1B6FC(0, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v12 = v11;
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v47 - v14;
  sub_1B1A1B6FC(0, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v17 = v16;
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v47 - v19;
  result = sub_1B1C1A1D0(a2, (uint64_t)v65);
  if (v70)
  {
    v54 = a6;
    if (v70 != 1)
    {
      sub_1B1D121E4(a1, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);

      sub_1B1A0DDAC(v65, v64);
      sub_1B1A02864((uint64_t)v64, (uint64_t)&v59);
      swift_dynamicCast();
      sub_1B1D12190((uint64_t)v15, a1, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      v61 = v12;
      v62 = &off_1E639EB98;
      v46 = sub_1B1A137F4(&v59);
      sub_1B1D12220(a1, (uint64_t)v46, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
      v63 = 1;
      sub_1B20E19E8((uint64_t)&v59, v71, a5);
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v64);
    }
    v52 = v6;
    v50 = a1;
    sub_1B1D121E4(a1, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v53 = v66;
    v49 = v67;
    v48 = v68;
    sub_1B1A0DDAC(v65, v64);
    sub_1B1A0DDAC(&v69, v58);
    v22 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)v20 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0xE000000000000000;
    v20[24] = 2;
    *((_QWORD *)v20 + 4) = &unk_1E639F258;
    *((_WORD *)v20 + 20) = 0;
    v23 = (int *)type metadata accessor for TriggerScript(0);
    v24 = v23[10];
    v51 = a5;
    v25 = &v20[v24];
    v26 = type metadata accessor for ScriptIndex();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
    *(_QWORD *)&v20[v23[12]] = 0;
    v27 = &v20[v23[13]];
    *(_DWORD *)v27 = 0;
    v27[4] = 1;
    *(_QWORD *)&v20[v23[11]] = CFSTR("VFXTriggerTypeKeyDown");
    v28 = &v20[v12[9]];
    *(_QWORD *)v28 = 0;
    v28[8] = 1;
    v20[v12[10]] = 0;
    *(_QWORD *)&v20[v12[11]] = 0;
    v29 = &v20[v12[12]];
    *(_QWORD *)v29 = 0;
    *((_QWORD *)v29 + 1) = 0xE000000000000000;
    *(_QWORD *)&v20[v12[13]] = v22;
    v30 = (uint64_t)v15;
    v31 = v17[9];
    *(_QWORD *)&v20[v31] = 0;
    v47 = v17[10];
    *(_QWORD *)&v20[v47] = 0;
    v32 = v17[11];
    *(_QWORD *)&v20[v32] = 0;
    *(_QWORD *)&v20[v17[12]] = 0;
    v20[v17[13]] = 0;
    v33 = &v20[v17[14]];
    *(_QWORD *)v33 = 0;
    v33[8] = 1;
    v34 = (uint64_t *)&v20[v17[15]];
    *v34 = 0;
    v34[1] = 0;
    sub_1B1A02864((uint64_t)v64, (uint64_t)&v59);
    v35 = CFSTR("VFXTriggerTypeKeyDown");
    v36 = v53;
    swift_dynamicCast();
    sub_1B1D12954(v30, (uint64_t)v20, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8);
    *(_QWORD *)&v20[v31] = v36;
    swift_retain();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20[v32] = v48;
    v37 = v47;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v20[v37] = v49;
    sub_1B1A02864((uint64_t)v58, (uint64_t)&v59);
    swift_dynamicCast();
    v38 = v56;
    v39 = v57;
    sub_1B1B28F18(*v34);
    *v34 = v38;
    v34[1] = v39;
    v40 = v51;
    sub_1B1D12220((uint64_t)v20, v50, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v41 = v55;
    sub_1B1BF7B1C((uint64_t)v20, v40);
    v61 = v17;
    v62 = &off_1E637D0A8;
    v42 = sub_1B1A137F4(&v59);
    sub_1B1D12220((uint64_t)v20, (uint64_t)v42, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v63 = 0;
    sub_1B20E19E8((uint64_t)&v59, v71, v40);
    v43 = sub_1B1D183A0(v40);
    if (v43)
    {
      sub_1B1CDC014(v41, v43, v44, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B1F4C0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1B1A02864((uint64_t)v58, (uint64_t)&v59);
    if (swift_dynamicCast())
    {
      v45 = v56;
      swift_bridgeObjectRelease();
      v59 = MEMORY[0x1E0DEE9D8];
      v60 = MEMORY[0x1E0DEE9D8];
      sub_1B1CE618C(v41, v45);
      swift_bridgeObjectRelease();
      sub_1B1BF7B28(v59, v60, v40);
    }
    else
    {
      sub_1B1A02864((uint64_t)v58, (uint64_t)&v59);
      if ((swift_dynamicCast() & 1) == 0)
      {
LABEL_10:
        sub_1B2094804(v40);
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v58);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v64);
        return sub_1B1D121E4((uint64_t)v20, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1B1D0E99C(_QWORD *a1)
{
  uint64_t v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t result;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int64_t v54;
  __int128 v55;
  _OWORD v56[5];
  uint64_t v57;
  char v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  _BYTE v62[104];

  v2 = a1[2];
  v3 = (os_unfair_lock_s *)a1[9];
  swift_retain();
  os_unfair_lock_lock(v3);
  v49 = (uint64_t)a1;
  v50 = v2;
  v4 = a1[10];
  v53 = v4 + 64;
  v5 = 1 << *(_BYTE *)(v4 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v4 + 64);
  v52 = (uint64_t *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = v56;
  v10 = v62;
  v45 = v8 - 1;
  swift_bridgeObjectRetain();
  v11 = 0;
  v54 = v8;
  v46 = v8 - 6;
  if (!v7)
    goto LABEL_6;
LABEL_4:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v13 = v12 | (v11 << 6);
LABEL_5:
  v14 = *(_QWORD *)(v4 + 56);
  v15 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v13);
  v16 = v15[1];
  *(_QWORD *)&v55 = *v15;
  *((_QWORD *)&v55 + 1) = v16;
  sub_1B1C1A1D0(v14 + 96 * v13, (uint64_t)v9);
  while (1)
  {
    sub_1B1D125FC((uint64_t)&v55, (uint64_t)&v59);
    if (v62[88] == 255)
      break;
    v20 = v59;
    v21 = v61;
    v22 = v60;
    sub_1B1B99D74((uint64_t)v10, (uint64_t)&v55);
    if (v20 == type metadata accessor for TriggerScript(0))
    {
      v23 = v10;
      v24 = v9;
      if (((_DWORD)v22 != -1 || (_DWORD)v21) && (v22 & 0x80000000) == 0 && v52[1] > v22)
      {
        v51 = *v52;
        v25 = *v52 + 12 * (int)v22;
        v28 = *(_DWORD *)(v25 + 8);
        v27 = (_DWORD *)(v25 + 8);
        v26 = v28;
        if ((_DWORD)v21 == -1 || v26 == (_DWORD)v21)
        {
          sub_1B1A1B6FC(0, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
          v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 80)
                                                  + 8 * *(__int16 *)(v51 + 12 * (int)v22 + 6)
                                                  + 32)
                                      + 16)
                          + 128);
          if (*(_QWORD *)(v30 + 16))
          {
            v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 80) + 8 * *(__int16 *)(v51 + 12 * (int)v22 + 6) + 32)
                            + 16);
            v48 = v29;
            v31 = sub_1B1DC3AC8(v29);
            if ((v32 & 1) != 0
              && *(_QWORD *)(*(_QWORD *)(v47 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31) + 32) == v48)
            {
              v33 = *(_QWORD *)(v48 - 8);
              if (*(_QWORD *)(v33 + 64))
                v34 = *(_QWORD *)(v33 + 72);
              else
                v34 = 0;
              if ((_DWORD)v21 != -1 && *v27 != (_DWORD)v21
                || (v35 = *(_QWORD *)(*(_QWORD *)(v50 + 136) + 8 * *(int *)(v51 + 12 * (int)v22) + 32),
                    v36 = *(_QWORD *)(v35 + 48),
                    (v37 = *(_QWORD *)(v36 + 16)) == 0))
              {
LABEL_55:
                sub_1B2229430();
                sub_1B2228890();
                sub_1B1BC3C70();
                sub_1B2228890();
                swift_bridgeObjectRelease();
                sub_1B2228890();
                sub_1B2228890();
                sub_1B2228890();
                result = sub_1B2229688();
                __break(1u);
                return result;
              }
              v38 = (_QWORD *)(v36 + 56);
              while (*(v38 - 3) != v48)
              {
                v38 += 5;
                if (!--v37)
                  goto LABEL_55;
              }
              sub_1B1D0E2B8(*(_QWORD *)(v35 + 128) + *v38 + v34 * *(__int16 *)(v51 + 12 * (int)v22 + 4), (uint64_t)&v55, v50, v20, v22 | (unint64_t)(v21 << 32), v49);
            }
          }
        }
      }
      sub_1B1D12448((uint64_t)&v55);
      v9 = v24;
      v10 = v23;
      if (v7)
        goto LABEL_4;
    }
    else
    {
      sub_1B1D12448((uint64_t)&v55);
      if (v7)
        goto LABEL_4;
    }
LABEL_6:
    v17 = v11 + 1;
    if ((uint64_t)(v11 + 1) < v54)
    {
      v18 = *(_QWORD *)(v53 + 8 * v17);
      if (v18)
        goto LABEL_8;
      v19 = v11 + 2;
      if ((uint64_t)(v11 + 2) >= v54)
        goto LABEL_21;
      v18 = *(_QWORD *)(v53 + 8 * v19);
      if (v18)
        goto LABEL_11;
      v17 = v11 + 3;
      if ((uint64_t)(v11 + 3) >= v54)
        goto LABEL_40;
      v18 = *(_QWORD *)(v53 + 8 * v17);
      if (v18)
        goto LABEL_8;
      v19 = v11 + 4;
      if ((uint64_t)(v11 + 4) >= v54)
      {
LABEL_21:
        v11 = v17;
        goto LABEL_22;
      }
      v18 = *(_QWORD *)(v53 + 8 * v19);
      if (v18)
      {
LABEL_11:
        v17 = v19;
LABEL_8:
        v7 = (v18 - 1) & v18;
        v13 = __clz(__rbit64(v18)) + (v17 << 6);
        v11 = v17;
        goto LABEL_5;
      }
      v17 = v11 + 5;
      if ((uint64_t)(v11 + 5) >= v54)
      {
LABEL_40:
        v11 = v19;
      }
      else
      {
        v18 = *(_QWORD *)(v53 + 8 * v17);
        if (v18)
          goto LABEL_8;
        while (v46 != v11)
        {
          v18 = *(_QWORD *)(v4 + 112 + 8 * v11++);
          if (v18)
          {
            v17 = v11 + 5;
            goto LABEL_8;
          }
        }
        v11 = v45;
      }
    }
LABEL_22:
    v7 = 0;
    v57 = 0;
    v55 = 0u;
    memset(v56, 0, sizeof(v56));
    v58 = -1;
  }
  swift_release();
  v39 = *(_QWORD *)(*(_QWORD *)(v49 + 80) + 16);
  if (v39)
  {
    v40 = swift_bridgeObjectRetain();
    v41 = sub_1B1CF6D9C(v40, type metadata accessor for TriggerScript);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v49 + 80) = v41;
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(*(_QWORD *)(v49 + 80) + 16);
  }
  else
  {
    v42 = 0;
  }
  v43 = v39 != v42;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 72));
  swift_release();
  return v43;
}

uint64_t sub_1B1D0EF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, NSObject *a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  uint64_t v33;
  char v34;
  BOOL v35;
  void *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  id v42;
  _OWORD *v43;
  os_unfair_lock_s *v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_signpost_type_t v65;
  char v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  uint8_t *v70;
  os_signpost_id_t v71;
  uint8_t *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  dispatch_group_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  dispatch_queue_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  dispatch_group_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD v122[11];
  char v123;
  _BYTE v124[96];
  __int128 aBlock;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  unsigned __int8 v131;

  LODWORD(v110) = a8;
  v121 = a6;
  v112 = a4;
  v113 = a5;
  v111 = a3;
  v119 = type metadata accessor for TriggerScript(0);
  v107 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119, v15);
  v108 = v16;
  v109 = (uint64_t)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_1B2228380();
  v117 = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v115, v17);
  v106 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v105 = (char *)&v100 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v116 = (char *)&v100 - v24;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a11;
  *(_QWORD *)(v25 + 24) = a12;
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = sub_1B1D12278;
  v26[3] = v25;
  v26[4] = a10;
  v27 = *(_QWORD *)(a1 + 16);
  v120 = a11;
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  v28 = a10;
  v118 = v28;
  if (v27
    && ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig) & 1) == 0
     || (*(_BYTE *)(a1 + 2720) & 1) == 0))
  {
    sub_1B1B63B64();
    v36 = (void *)swift_allocError();
    *v37 = xmmword_1B228CCD0;
    v38 = v120;
    if (!*(_QWORD *)(v120 + 16))
    {
LABEL_24:
      v44 = *(os_unfair_lock_s **)(a12 + 72);
      swift_retain();
      swift_retain();
      v45 = v36;
      os_unfair_lock_lock(v44);
      v46 = *(void **)(v38 + 16);
      *(_QWORD *)(v38 + 16) = v36;
      v47 = v36;

      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a12 + 72));
      goto LABEL_25;
    }
LABEL_7:
    swift_retain();
    swift_retain();
LABEL_25:
    dispatch_group_leave(v118);
    swift_release();
    swift_release();

    swift_release();
    swift_release_n();
    swift_release();
LABEL_26:
    swift_release();
    v48 = 0;
    goto LABEL_50;
  }
  v29 = a2;
  v30 = sub_1B1C9B394(v28);
  sub_1B1A1B6FC(0, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v32 = v31;
  v33 = a7 + v31[9];
  v34 = *(_BYTE *)(v33 + 8);
  v114 = v26;
  v104 = v25;
  v35 = (v34 & 1) == 0 && v30 == *(_QWORD *)v33;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 72));
  v39 = *(_QWORD *)(a1 + 80);
  if (!*(_QWORD *)(v39 + 16) || (v40 = sub_1B1DC4138(v119, v121), (v41 & 1) == 0))
  {
    v130 = 0;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    aBlock = 0u;
    v131 = -1;
    goto LABEL_15;
  }
  sub_1B1C1A1D0(*(_QWORD *)(v39 + 56) + 96 * v40, (uint64_t)&aBlock);
  if (v131 == 255)
  {
LABEL_15:
    sub_1B1B1F3E4((uint64_t)&aBlock, &qword_1EEF63440, (uint64_t)&type metadata for CompilationStatus);
LABEL_16:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
    if (v35)
      goto LABEL_17;
    goto LABEL_32;
  }
  sub_1B1C1A1D0((uint64_t)&aBlock, (uint64_t)v124);
  sub_1B1B1F3E4((uint64_t)&aBlock, &qword_1EEF63440, (uint64_t)&type metadata for CompilationStatus);
  sub_1B1C1A1D0((uint64_t)v124, (uint64_t)v122);
  if (v123)
  {
    sub_1B1D12448((uint64_t)v122);
    sub_1B1D12448((uint64_t)v124);
    goto LABEL_16;
  }
  v49 = v122[0];
  sub_1B1D12448((uint64_t)v124);
  if (v49 != v30)
    v35 = 0;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
  if (v35)
  {
LABEL_17:
    if ((*(_BYTE *)(a7 + v32[10]) & 1) != 0)
    {
      v36 = *(void **)(a7 + v32[11]);
      v42 = v36;
    }
    else
    {
      sub_1B1B63B64();
      v36 = (void *)swift_allocError();
      *v43 = xmmword_1B2244C80;
    }
    v38 = v120;
    if (!*(_QWORD *)(v120 + 16) && v36)
      goto LABEL_24;
    goto LABEL_7;
  }
  if (v49 == v30)
  {
    dispatch_group_leave(v118);
    swift_release();
    swift_release_n();
    swift_release();
    goto LABEL_26;
  }
LABEL_32:
  sub_1B1D121E4(a7, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v103 = swift_allocBox();
  v51 = v50;
  sub_1B1C958C0(v50);
  v52 = v51 + v32[9];
  *(_BYTE *)(v51 + v32[10]) = 0;
  *(_QWORD *)(v51 + v32[11]) = 0;
  v53 = (_QWORD *)(v51 + v32[12]);
  *v53 = 0;
  v53[1] = 0xE000000000000000;
  *(_QWORD *)(v51 + v32[13]) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)v52 = v30;
  *(_BYTE *)(v52 + 8) = 0;
  sub_1B1D136D4(v29, v51, type metadata accessor for TriggerScript);
  sub_1B1D12220(v51, a7, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + 72));
  *(_QWORD *)&aBlock = v30;
  v131 = 0;
  sub_1B20E1B28((uint64_t)&aBlock, v119, v121);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(a1 + 72));
  v54 = *(_QWORD *)(a1 + 16);
  swift_retain();
  v101 = v30;
  if (v54)
  {
    v55 = v117;
    v56 = v105;
    v57 = v115;
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v105, v54 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v115);
    swift_release();
    v58 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
    v59 = v116;
    v60 = v56;
    v61 = v57;
    v58(v116, v60, v57);
  }
  else
  {
    if (qword_1ED4BA0E0 != -1)
      swift_once();
    v62 = sub_1B22283B0();
    sub_1B1B40EC8(v62, (uint64_t)qword_1ED4D0E48);
    sub_1B2228398();
    v59 = v116;
    sub_1B2228368();
    v61 = v115;
  }
  v105 = (char *)HIDWORD(v121);
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v118 = a9;
  v63 = sub_1B22283B0();
  sub_1B1B40EC8(v63, (uint64_t)qword_1ED4D0E48);
  v64 = sub_1B2228398();
  v65 = sub_1B2228FA4();
  v66 = sub_1B2229094();
  v102 = a12;
  if ((v66 & 1) != 0)
  {
    v67 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
    v100 = v29;
    v68 = v117;
    v69 = v106;
    v67(v106, v59, v61);
    v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v70 = 0;
    v71 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v64, v65, v71, "buildScript", "", v70, 2u);
    v72 = v70;
    v59 = v116;
    MEMORY[0x1B5E23F88](v72, -1, -1);

    v73 = *(void (**)(char *, uint64_t))(v68 + 8);
    v29 = v100;
    v73(v69, v61);
  }
  else
  {

    v67 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
    v69 = v106;
  }
  v67(v69, v59, v61);
  sub_1B22283E0();
  swift_allocObject();
  v74 = sub_1B22283D4();
  v75 = v29;
  v76 = v109;
  sub_1B1792810(v75, v109, type metadata accessor for TriggerScript);
  v77 = (*(unsigned __int8 *)(v107 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
  v78 = (v108 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
  v79 = (v78 + 27) & 0xFFFFFFFFFFFFFFF8;
  v80 = swift_allocObject();
  v81 = v118;
  v82 = v119;
  *(_QWORD *)(v80 + 16) = a1;
  *(_QWORD *)(v80 + 24) = v82;
  v83 = v121;
  v108 = a1;
  v84 = (int)v105;
  *(_DWORD *)(v80 + 32) = v121;
  *(_DWORD *)(v80 + 36) = v84;
  *(_QWORD *)(v80 + 40) = v101;
  *(_QWORD *)(v80 + 48) = sub_1B1D12284;
  *(_QWORD *)(v80 + 56) = v114;
  *(_QWORD *)(v80 + 64) = v74;
  v119 = v74;
  memcpy((void *)(v80 + 72), v81, 0x148uLL);
  sub_1B1A025EC(v76, v80 + v77, type metadata accessor for TriggerScript);
  v85 = (uint64_t *)(v80 + v78);
  v87 = v111;
  v86 = v112;
  *v85 = v111;
  v85[1] = v86;
  v85[2] = v113;
  v88 = (_DWORD *)(v80 + v79);
  *v88 = v83;
  v88[1] = v84;
  *(_QWORD *)(v80 + ((v79 + 15) & 0xFFFFFFFFFFFFFFF8)) = v103;
  if ((v110 & 1) != 0)
  {
    v121 = *(_QWORD *)(v108 + 40);
    v89 = swift_allocObject();
    *(_QWORD *)(v89 + 16) = sub_1B1D12414;
    *(_QWORD *)(v89 + 24) = v80;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1D139FC((uint64_t)v118);
    sub_1B1C18F0C(v87, v86);
    v90 = qword_1ED4BF430;
    swift_retain();
    swift_retain();
    if (v90 != -1)
      swift_once();
    v91 = qword_1ED4BF658;
    swift_retain();
    if (v91 != -1)
      swift_once();
    v92 = qword_1ED4D0FD0;
    swift_retain();
    swift_release();
    v93 = (_QWORD *)swift_allocObject();
    v93[2] = v92;
    v93[3] = sub_1B1D13D9C;
    v93[4] = v89;
    *(_QWORD *)&v127 = sub_1B1D1243C;
    *((_QWORD *)&v127 + 1) = v93;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v126 = sub_1B17915D0;
    *((_QWORD *)&v126 + 1) = &unk_1E63EDB20;
    v94 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend((id)v121, sel_addOperationWithBlock_, v94);
    _Block_release(v94);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v117 + 8))(v116, v115);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
  }
  else
  {
    v110 = *(dispatch_queue_t *)(v108 + 32);
    v95 = (_QWORD *)swift_allocObject();
    v95[2] = sub_1B1D12414;
    v95[3] = v80;
    v96 = v95;
    v121 = (uint64_t)v95;
    v97 = swift_allocObject();
    *(_QWORD *)(v97 + 16) = sub_1B1A0FDB0;
    *(_QWORD *)(v97 + 24) = v96;
    *(_QWORD *)&v127 = sub_1B1A0FDB0;
    *((_QWORD *)&v127 + 1) = v97;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v126 = sub_1B1CDBFCC;
    *((_QWORD *)&v126 + 1) = &unk_1E63D4790;
    v98 = _Block_copy(&aBlock);
    v109 = *((_QWORD *)&v127 + 1);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1D139FC((uint64_t)v118);
    sub_1B1C18F0C(v87, v86);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v110, v98);
    _Block_release(v98);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v117 + 8))(v116, v115);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  v48 = 1;
LABEL_50:
  swift_release();
  return v48;
}

uint64_t sub_1B1D0FBA8(uint64_t a1, uint64_t a2, NSObject *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), unint64_t *a9, uint64_t a10, unint64_t *a11, unint64_t *a12, uint64_t a13, void (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *), uint64_t (*a15)(uint64_t), unsigned __int16 **a16, void (*a17)(uint64_t), void (*a18)(uint64_t))
{
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  int v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  int v59;
  int v60;
  __int128 v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_unfair_lock_s *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  unsigned __int16 *v76;
  unsigned __int16 *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unsigned __int16 *v87;
  unsigned __int16 *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  unsigned __int16 *v92;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v94;
  unint64_t v95;
  unsigned __int16 *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unsigned __int16 *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;
  size_t v108;
  char *v109;
  char *v110;
  char *v111;
  unsigned __int16 *v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unsigned __int16 *v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unsigned __int16 *v125;
  char v126;
  unint64_t v127;
  unint64_t v128;
  unsigned __int16 *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  os_unfair_lock_s *v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t (*v154)(uint64_t);
  int v155;
  __int128 v156;
  _QWORD *v157;
  unsigned __int16 *v158;
  uint64_t (*v159)(uint64_t);
  uint64_t v160;
  uint64_t (*v161)(uint64_t);
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  os_unfair_lock_s *v168;
  unsigned __int16 *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  BOOL v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int8 *v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t (*v200)(uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  BOOL v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned __int8 *v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t (*v228)(uint64_t);
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  NSObject *v235;
  uint64_t v236;
  uint64_t v237;
  unsigned __int16 *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  void (*v246)(uint64_t);
  uint64_t v247;
  BOOL v248;
  unint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  unint64_t v253;
  char *v254;
  unsigned int v255;
  BOOL v256;
  int v257;
  uint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  unsigned int v263;
  int v264;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  unsigned __int16 *v271;
  unint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t result;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t (*v279)(uint64_t);
  _QWORD *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  _QWORD *v299;
  unsigned __int16 *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  unsigned __int16 **v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  unsigned __int16 *v313;
  void (*v314)(uint64_t);
  void (*v315)(uint64_t);
  uint64_t v316;
  dispatch_group_t v317;
  uint64_t v318;
  _OWORD v319[2];
  uint64_t v320;
  _OWORD v321[2];
  uint64_t v322;
  _OWORD v323[2];
  uint64_t v324;
  _OWORD v325[2];
  uint64_t v326;
  uint64_t v327[12];
  uint64_t v328[12];
  uint64_t v329[12];
  uint64_t v330[12];
  uint64_t v331[5];
  char v332;
  _QWORD v333[7];
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  __int128 v345;
  uint64_t v346;
  char *v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _QWORD v352[7];
  uint64_t v353;
  uint64_t v354;
  _QWORD v355[7];
  uint64_t v356;
  uint64_t v357;
  _OWORD v358[2];
  uint64_t v359;
  _OWORD v360[2];
  uint64_t v361;
  _BYTE v362[40];
  uint64_t v363;

  v306 = a4;
  v288 = a2;
  v291 = a10;
  v289 = a9;
  v363 = *MEMORY[0x1E0C80C00];
  v279 = a8;
  v283 = a8(0);
  v278 = *(_QWORD *)(v283 - 8);
  MEMORY[0x1E0C80A78](v283, v23);
  v25 = (char *)&v276 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v276 - v28;
  v308 = a6;
  v309 = a1;
  v30 = *(_QWORD *)(a1 + 16);
  swift_retain_n();
  v307 = a7;
  swift_retain_n();
  swift_retain();
  v317 = a3;
  dispatch_group_enter(a3);
  v31 = *(_OWORD *)(a5 + 184);
  v325[0] = *(_OWORD *)(a5 + 168);
  v325[1] = v31;
  v310 = a5;
  v326 = *(_QWORD *)(a5 + 200);
  v292 = OBJC_IVAR____TtC3VFX13EntityManager_queryManager;
  v296 = v30;
  sub_1B1E8FCE4(v30, (uint64_t)v325, 0x200000000, v327);
  sub_1B1A18378((uint64_t)v327, (uint64_t)v355, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v295 = v25;
  if (v355[0])
  {
    LODWORD(v290) = v357 > 0;
    if (v357 >= 1)
    {
      v32 = v356;
      if (v356)
      {
        v33 = v355[5];
        sub_1B1A1B6FC(0, v289, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        v35 = v34;
        swift_retain();
        swift_retain();
        swift_retain();
        v36 = 48 * v32;
        v37 = (uint64_t *)(v33 + 40);
        do
        {
          v42 = *v37;
          v43 = *(os_unfair_lock_s **)(*v37 + 376);
          swift_retain();
          os_unfair_lock_lock(v43);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v42 + 344));
          v44 = *(_DWORD *)(v42 + 24);
          swift_retain();
          memset(v352, 0, 40);
          v346 = 0;
          v344 = 0u;
          v345 = 0u;
          v45 = sub_1B1DA4ED8(v44, v35, (uint64_t)&off_1E639EB98, 0, 0, (uint64_t)v352, (uint64_t)&v344);
          swift_release();
          sub_1B1A12E98((uint64_t)&v344);
          sub_1B1A12E98((uint64_t)v352);
          if (sub_1B1A10B20(v45))
          {
            sub_1B1A10BB0(v45);
          }
          else
          {
            v38 = *(_QWORD *)(v42 + 232);
            v39 = *(_QWORD *)(v42 + 240);
            v40 = *(unsigned __int8 *)(v42 + 120);
            v41 = *(unsigned int *)(v42 + 28);
            LOBYTE(v352[0]) = *(_BYTE *)(v42 + 32);
            sub_1B1FD8C68(v38, v39, v45, v40, v41 | ((unint64_t)LOBYTE(v352[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 376));
          swift_release();
          v37 += 6;
          v36 -= 48;
        }
        while (v36);
        sub_1B19ED748(v327);
        v25 = v295;
      }
    }
    sub_1B19ED748(v327);
  }
  else
  {
    LODWORD(v290) = 0;
  }
  v46 = *(_OWORD *)(v310 + 64);
  v323[0] = *(_OWORD *)(v310 + 48);
  v323[1] = v46;
  v324 = *(_QWORD *)(v310 + 80);
  sub_1B1E8FCE4(v296, (uint64_t)v323, 0x200000000, v328);
  sub_1B1A18378((uint64_t)v328, (uint64_t)v352, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v352[0])
  {
    if (v354 >= 1)
    {
      v47 = v353;
      if (v353)
      {
        v48 = v352[5];
        sub_1B1A1B6FC(0, a11, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        v50 = v49;
        swift_retain();
        swift_retain();
        swift_retain();
        v51 = 48 * v47;
        v52 = (uint64_t *)(v48 + 40);
        do
        {
          v57 = *v52;
          v58 = *(os_unfair_lock_s **)(*v52 + 376);
          swift_retain();
          os_unfair_lock_lock(v58);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v57 + 344));
          v59 = *(_DWORD *)(v57 + 24);
          swift_retain();
          v346 = 0;
          v344 = 0u;
          v345 = 0u;
          *(_QWORD *)&v340 = 0;
          v338 = 0u;
          v339 = 0u;
          v60 = sub_1B1DA4ED8(v59, 0, 0, v50, (uint64_t)&off_1E637D0A8, (uint64_t)&v344, (uint64_t)&v338);
          swift_release();
          sub_1B1A12E98((uint64_t)&v338);
          sub_1B1A12E98((uint64_t)&v344);
          if (sub_1B1A10B20(v60))
          {
            sub_1B1A10BB0(v60);
          }
          else
          {
            v53 = *(_QWORD *)(v57 + 232);
            v54 = *(_QWORD *)(v57 + 240);
            v55 = *(unsigned __int8 *)(v57 + 120);
            v56 = *(unsigned int *)(v57 + 28);
            LOBYTE(v344) = *(_BYTE *)(v57 + 32);
            sub_1B1FD8C68(v53, v54, v60, v55, v56 | ((unint64_t)v344 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v57 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v57 + 376));
          swift_release();
          v52 += 6;
          v51 -= 48;
        }
        while (v51);
        sub_1B19ED748(v328);
        v25 = v295;
      }
    }
    sub_1B19ED748(v328);
    LODWORD(v290) = 1;
  }
  v61 = *(_OWORD *)(v310 + 104);
  v321[0] = *(_OWORD *)(v310 + 88);
  v321[1] = v61;
  v322 = *(_QWORD *)(v310 + 120);
  sub_1B1E8FCE4(v296, (uint64_t)v321, 0x200000000, v329);
  sub_1B1A18378((uint64_t)v329, (uint64_t)&v344, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v277 = v29;
  if ((_QWORD)v344)
  {
    if (v351 >= 1 && (v299 = v348) != 0)
    {
      v315 = a18;
      v314 = a17;
      v298 = v347;
      v62 = (_QWORD *)v350;
      v303 = *(_QWORD *)(v350 + 32);
      LODWORD(v302) = *(unsigned __int8 *)(v349 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v297 = v350 + 48;
      v305 = (unsigned __int16 **)(v350 + 104);
      sub_1B1A1B6FC(0, a12, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
      v64 = v63;
      v319[0] = v344;
      v319[1] = v345;
      v320 = v346;
      v311 = v62;
      v293 = v62 + 8;
      v318 = (uint64_t)&v341;
      swift_retain();
      swift_retain();
      swift_retain();
      v65 = 0;
      v294 = 0;
      v312 = v64;
      do
      {
        v66 = &v298[48 * v65];
        v67 = *(unsigned int *)v66;
        v300 = (unsigned __int16 *)*((unsigned int *)v66 + 1);
        v301 = v65;
        v68 = *((_QWORD *)v66 + 3);
        v304 = (uint64_t *)*((_QWORD *)v66 + 2);
        v69 = *((_QWORD *)v66 + 5);
        v313 = (unsigned __int16 *)*((_QWORD *)v66 + 4);
        if ((_DWORD)v302)
        {
          v70 = *(os_unfair_lock_s **)(v69 + 376);
          swift_retain();
          os_unfair_lock_lock(v70);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v69 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v303);
        sub_1B1A18378(v297, (uint64_t)v362, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v71 = v311;
        v72 = v311[4];
        v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v69 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v71[6] = ecs_stack_allocator_allocate(v72, 48 * v73, 8);
        v71[7] = v73;
        v74 = v293;
        v293[1] = 0;
        v74[2] = 0;
        *v74 = 0;
        swift_release();
        v75 = v304;
        v76 = v313;
        v316 = sub_1B1A12038(v64, (uint64_t)&off_1E63A95C8, v304, v68, (uint64_t)v313, (uint64_t)v71);
        if (v75)
        {
          if (v76)
          {
            v77 = 0;
            do
            {
              while (1)
              {
                v78 = v75[(_QWORD)v77];
                v79 = (uint64_t *)(v316 + 16 * (_QWORD)v77);
                v80 = *v79;
                v81 = v79[1];
                v82 = swift_retain();
                sub_1B1CDC014(v82, v80, v81, v314, v315);
                swift_release();
                v83 = *(_QWORD *)(*(_QWORD *)(v69 + 40) + 16);
                v84 = *(_QWORD *)(v83 + 128);
                if (*(_QWORD *)(v84 + 16))
                {
                  v85 = sub_1B1DC3AC8(v64);
                  if ((v86 & 1) != 0)
                    break;
                }
                v77 = (unsigned __int16 *)((char *)v77 + 1);
                if (v77 == v313)
                  goto LABEL_48;
              }
              if (*(_QWORD *)(*(_QWORD *)(v83 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v84 + 56) + 8 * v85) + 32) == v64)
              {
                v331[0] = v64;
                v331[1] = (uint64_t)&off_1E63A95C8;
                v332 = 1;
                v88 = *v305;
                if (*((_QWORD *)*v305 + 2))
                {
                  swift_retain();
                  v300 = v88;
                  swift_bridgeObjectRetain();
                  sub_1B1792810((uint64_t)(v88 + 16), (uint64_t)v333, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                  sub_1B1BE90FC((uint64_t)v333, (uint64_t)&v338);
                  sub_1B1BE90FC((uint64_t)v331, v318);
                  __asm { BR              X9 }
                }
                swift_retain();
                v89 = *(_QWORD *)(v69 + 240) - *(_QWORD *)(v69 + 232);
                v90 = v311;
                v91 = ecs_stack_allocator_allocate(v311[4], 8 * v89, 8);
                *v91 = v78;
                sub_1B1BE90FC((uint64_t)v331, (uint64_t)&v338);
                *(_QWORD *)&v341 = v91;
                *((_QWORD *)&v341 + 1) = v89;
                v342 = 1;
                v92 = (unsigned __int16 *)v90[13];
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v90[13] = v92;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v92 = (unsigned __int16 *)sub_1B1C631A0(0, *((_QWORD *)v92 + 2) + 1, 1, v92);
                  *v305 = v92;
                }
                v95 = *((_QWORD *)v92 + 2);
                v94 = *((_QWORD *)v92 + 3);
                if (v95 >= v94 >> 1)
                {
                  v92 = (unsigned __int16 *)sub_1B1C631A0(v94 > 1, v95 + 1, 1, v92);
                  *v305 = v92;
                }
                *((_QWORD *)v92 + 2) = v95 + 1;
                v96 = &v92[36 * v95];
                *((_OWORD *)v96 + 2) = v338;
                v97 = v339;
                v98 = v340;
                v99 = v341;
                *((_QWORD *)v96 + 12) = v342;
                *((_OWORD *)v96 + 4) = v98;
                *((_OWORD *)v96 + 5) = v99;
                *((_OWORD *)v96 + 3) = v97;
                v87 = v313;
                sub_1B1B68F14((uint64_t)v331);
                swift_release();
              }
              else
              {
                v87 = v313;
              }
              v77 = (unsigned __int16 *)((char *)v77 + 1);
            }
            while (v77 != v87);
          }
        }
        else
        {
          v100 = v300;
          if ((_DWORD)v67 != (_DWORD)v300)
          {
            do
            {
              v112 = (unsigned __int16 *)(v67 + 1);
              v113 = (uint64_t *)(v316 + 16 * v67);
              v114 = *v113;
              v115 = v113[1];
              v116 = swift_retain();
              sub_1B1CDC014(v116, v114, v115, v314, v315);
              swift_release();
              v117 = *(_QWORD *)(*(_QWORD *)(v69 + 40) + 16);
              v118 = *(_QWORD *)(v117 + 128);
              if (*(_QWORD *)(v118 + 16))
              {
                v119 = sub_1B1DC3AC8(v64);
                if ((v120 & 1) != 0
                  && *(_QWORD *)(*(_QWORD *)(v117 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v118 + 56) + 8 * v119) + 32) == v64)
                {
                  v331[0] = v64;
                  v331[1] = (uint64_t)&off_1E63A95C8;
                  v332 = 1;
                  v121 = *v305;
                  if (*((_QWORD *)*v305 + 2))
                  {
                    swift_retain();
                    v313 = v121;
                    swift_bridgeObjectRetain();
                    sub_1B1792810((uint64_t)(v121 + 16), (uint64_t)v333, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                    sub_1B1BE90FC((uint64_t)v333, (uint64_t)&v338);
                    sub_1B1BE90FC((uint64_t)v331, v318);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v122 = *(_QWORD *)(v69 + 240) - *(_QWORD *)(v69 + 232);
                  v123 = v311;
                  v124 = ecs_stack_allocator_allocate(v311[4], 8 * v122, 8);
                  *v124 = v67;
                  sub_1B1BE90FC((uint64_t)v331, (uint64_t)&v338);
                  *(_QWORD *)&v341 = v124;
                  *((_QWORD *)&v341 + 1) = v122;
                  v342 = 1;
                  v125 = (unsigned __int16 *)v123[13];
                  v126 = swift_isUniquelyReferenced_nonNull_native();
                  v123[13] = v125;
                  if ((v126 & 1) == 0)
                  {
                    v125 = (unsigned __int16 *)sub_1B1C631A0(0, *((_QWORD *)v125 + 2) + 1, 1, v125);
                    *v305 = v125;
                  }
                  v128 = *((_QWORD *)v125 + 2);
                  v127 = *((_QWORD *)v125 + 3);
                  if (v128 >= v127 >> 1)
                  {
                    v125 = (unsigned __int16 *)sub_1B1C631A0(v127 > 1, v128 + 1, 1, v125);
                    *v305 = v125;
                  }
                  *((_QWORD *)v125 + 2) = v128 + 1;
                  v129 = &v125[36 * v128];
                  *((_OWORD *)v129 + 2) = v338;
                  v130 = v339;
                  v131 = v340;
                  v132 = v341;
                  *((_QWORD *)v129 + 12) = v342;
                  *((_OWORD *)v129 + 4) = v131;
                  *((_OWORD *)v129 + 5) = v132;
                  *((_OWORD *)v129 + 3) = v130;
                  sub_1B1B68F14((uint64_t)v331);
                  swift_release();
                }
              }
              ++v67;
            }
            while (v112 != v100);
          }
        }
LABEL_48:
        v101 = v311;
        v102 = v294;
        sub_1B1F05D48(v311, (unsigned __int16 **)v319, (uint64_t)v362);
        v294 = v102;
        v25 = v295;
        if (*(_QWORD *)(v101[13] + 16))
        {
          v103 = (_QWORD *)swift_bridgeObjectRetain();
          v104 = v311;
          sub_1B1F05034(v103, v69);
          swift_bridgeObjectRelease();
          v105 = swift_isUniquelyReferenced_nonNull_native();
          v106 = v104[13];
          if ((v105 & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v106 + 16));
          }
          else
          {
            v107 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v106 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v107 = (_QWORD *)swift_allocObject();
              v108 = j__malloc_size(v107);
              v107[2] = 0;
              v107[3] = 2 * ((uint64_t)(v108 - 32) / 72);
            }
            *v305 = (unsigned __int16 *)v107;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v311[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v109 = *(char **)(v69 + 232);
            v110 = *(char **)(v69 + 256);
            if (v109 == v110)
            {
              v111 = *(char **)(v69 + 240);
            }
            else
            {
              sub_1B1A1059C(v110, v109);
              v110 = *(char **)(v69 + 232);
              v111 = *(char **)(v69 + 240);
              if (v111 == v110)
              {
                v111 = 0;
                v110 = 0;
                *(_QWORD *)(v69 + 232) = 0;
                *(_QWORD *)(v69 + 240) = 0;
              }
            }
            *(_QWORD *)(v69 + 248) = v111;
            *(_QWORD *)(v69 + 256) = v110;
          }
        }
        ecs_stack_allocator_pop_snapshot(v303);
        if ((_DWORD)v302)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v69 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v69 + 376));
        }
        swift_release();
        v65 = v301 + 1;
      }
      while ((_QWORD *)(v301 + 1) != v299);
      sub_1B19ED748(v329);
    }
    else
    {
      v294 = 0;
    }
    v133 = v310;
    sub_1B19ED748(v329);
  }
  else
  {
    v294 = 0;
    v133 = v310;
  }
  v284 = a13;
  v134 = *(_OWORD *)(v133 + 144);
  v360[0] = *(_OWORD *)(v133 + 128);
  v360[1] = v134;
  v361 = *(_QWORD *)(v133 + 160);
  sub_1B1E8FCE4(v296, (uint64_t)v360, 0x200000000, v330);
  sub_1B1A18378((uint64_t)v330, (uint64_t)&v338, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v338)
  {
    v135 = v343;
    if (v343 >= 1)
    {
      v136 = *((_QWORD *)&v341 + 1);
      if (*((_QWORD *)&v341 + 1))
      {
        v137 = *((_QWORD *)&v340 + 1);
        sub_1B1A1B6FC(0, v289, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
        v139 = v138;
        swift_retain();
        swift_retain();
        swift_retain();
        v140 = 48 * v136;
        v141 = (uint64_t *)(v137 + 40);
        do
        {
          v146 = *v141;
          v147 = *(os_unfair_lock_s **)(*v141 + 376);
          swift_retain();
          os_unfair_lock_lock(v147);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v146 + 344));
          v148 = *(_DWORD *)(v146 + 24);
          swift_retain();
          memset(v333, 0, 40);
          memset(v331, 0, sizeof(v331));
          v149 = sub_1B1DA4ED8(v148, 0, 0, v139, (uint64_t)&off_1E639EB98, (uint64_t)v333, (uint64_t)v331);
          swift_release();
          sub_1B1A12E98((uint64_t)v331);
          sub_1B1A12E98((uint64_t)v333);
          if (sub_1B1A10B20(v149))
          {
            sub_1B1A10BB0(v149);
          }
          else
          {
            v142 = *(_QWORD *)(v146 + 232);
            v143 = *(_QWORD *)(v146 + 240);
            v144 = *(unsigned __int8 *)(v146 + 120);
            v145 = *(unsigned int *)(v146 + 28);
            LOBYTE(v333[0]) = *(_BYTE *)(v146 + 32);
            sub_1B1FD8C68(v142, v143, v149, v144, v145 | ((unint64_t)LOBYTE(v333[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v146 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v146 + 376));
          swift_release();
          v141 += 6;
          v140 -= 48;
        }
        while (v140);
        sub_1B19ED748(v330);
      }
    }
    v151 = v310;
    sub_1B19ED748(v330);
    v153 = v290;
    if (v135 > 0)
      v153 = 1;
    v150 = v309;
    v25 = v295;
    v152 = v288;
    v154 = a15;
    if (v288)
      goto LABEL_91;
  }
  else
  {
    v150 = v309;
    v151 = v310;
    v152 = v288;
    v153 = v290;
    v154 = a15;
    if (v288)
    {
LABEL_91:
      v153 |= sub_1B1CE3320(v309, v152, v279, v289, v291, v284, a14);
      v150 = v309;
      v151 = v310;
    }
  }
  v155 = v153 | v154(v150);
  v156 = *(_OWORD *)(v151 + 224);
  v358[0] = *(_OWORD *)(v151 + 208);
  v358[1] = v156;
  v359 = *(_QWORD *)(v151 + 240);
  sub_1B1E8FCE4(v296, (uint64_t)v358, 0x200000000, v331);
  sub_1B1A18378((uint64_t)v331, (uint64_t)v333, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v333[0])
    goto LABEL_195;
  if (v337 < 1 || (v282 = v334) == 0)
  {
    sub_1B19ED748(v331);
LABEL_195:
    if ((v155 & 1) != 0)
    {
LABEL_196:
      v274 = swift_retain();
      sub_1B1CE43EC(v274);
      swift_release();
    }
    goto LABEL_197;
  }
  LODWORD(v318) = v155;
  v305 = a16;
  v157 = v336;
  v281 = v333[5];
  v293 = (_QWORD *)v336[4];
  v158 = (unsigned __int16 *)v333[0];
  LODWORD(v292) = *(unsigned __int8 *)(v335 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v159 = v279;
  sub_1B1A1B6FC(0, v289, v279, v291, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v285 = v160;
  v299 = (_QWORD *)(v296 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v300 = v158;
  v313 = (unsigned __int16 *)v157;
  v280 = v157 + 8;
  v298 = (char *)v158 + 41;
  swift_retain();
  v161 = v159;
  swift_retain();
  swift_retain();
  v162 = 0;
  do
  {
    v163 = (unsigned int *)(v281 + 48 * v162);
    v164 = *v163;
    v314 = (void (*)(uint64_t))v163[1];
    v165 = (uint64_t *)*((_QWORD *)v163 + 2);
    v166 = *((_QWORD *)v163 + 3);
    v167 = *((_QWORD *)v163 + 5);
    v303 = *((_QWORD *)v163 + 4);
    v304 = v165;
    v291 = v162;
    if ((_DWORD)v292)
    {
      v168 = *(os_unfair_lock_s **)(v167 + 376);
      swift_retain();
      os_unfair_lock_lock(v168);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v167 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot((uint64_t)v293);
    v169 = v313;
    v170 = *((_QWORD *)v313 + 6);
    v289 = (unint64_t *)*((_QWORD *)v313 + 7);
    v290 = v170;
    v171 = *((_QWORD *)v313 + 8);
    v287 = *((_QWORD *)v313 + 9);
    v288 = v171;
    v286 = *((_QWORD *)v313 + 10);
    v172 = *((_QWORD *)v313 + 4);
    v173 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v167 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    *((_QWORD *)v169 + 6) = ecs_stack_allocator_allocate(v172, 48 * v173, 8);
    *((_QWORD *)v169 + 7) = v173;
    v174 = v280;
    v280[1] = 0;
    v174[2] = 0;
    *v174 = 0;
    swift_release();
    v176 = v303;
    v175 = v304;
    v312 = sub_1B1A12038(v283, v284, v304, v166, v303, (uint64_t)v169);
    v311 = (_QWORD *)sub_1B1A12038(v285, (uint64_t)&off_1E639EB98, v175, v166, v176, (uint64_t)v169);
    v177 = v167;
    v297 = v167;
    if (v175)
    {
      if (v176)
      {
        v318 = 0;
        v178 = (uint64_t)v277;
        v179 = *(_QWORD *)(v278 + 72);
        v301 = *(_QWORD *)(*(_QWORD *)(v285 - 8) + 72);
        v302 = v179;
        while (1)
        {
          v180 = v304[v318];
          v181 = swift_retain();
          if ((*(_BYTE *)(v177 + 184) & 1) != 0)
            break;
          v182 = *(int *)(*(_QWORD *)(v177 + 168) + 4 * v180);
          v183 = *(_DWORD *)(*(_QWORD *)(v181 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v182 + 8);
          swift_release();
          v184 = (_DWORD)v182 == -1 && v183 == 0;
          if (v184
            || (v182 & 0x80000000) != 0
            || v299[1] <= v182
            || (v183 != -1 ? (v185 = *(_DWORD *)(*v299 + 12 * (int)v182 + 8) == v183) : (v185 = 1),
                !v185
             || (v186 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v296 + 80)
                                              + 8 * *(__int16 *)(*v299 + 12 * (int)v182 + 6)
                                              + 32)
                                  + 16),
                 v187 = *(_QWORD *)(v186 + 128),
                 !*(_QWORD *)(v187 + 16))
             || (v188 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone), (v189 & 1) == 0)
             || *(ValueMetadata **)(*(_QWORD *)(v186 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v187 + 56) + 8 * v188) + 32) != &type metadata for Tombstone))
          {
            dispatch_group_enter(v317);
            v190 = *(_QWORD *)(v177 + 48);
            v191 = *(_QWORD *)(v190 + 16);
            if (v191)
            {
              v192 = (_QWORD *)(v190 + 56);
              while ((ValueMetadata *)*(v192 - 3) != &type metadata for ScriptCompileOptions)
              {
                v192 += 5;
                if (!--v191)
                  goto LABEL_122;
              }
              v195 = (unsigned __int8 *)(*(_QWORD *)(v177 + 128) + *v192 + 24 * v180);
              v316 = *v195;
              v196 = *((_QWORD *)v195 + 2);
              v193 = *((_QWORD *)v195 + 1);
              swift_bridgeObjectRetain();
              v194 = v196;
              swift_bridgeObjectRetain();
            }
            else
            {
LABEL_122:
              v316 = 0;
              v193 = 0;
              v194 = 0;
            }
            sub_1B1792810(v312 + v302 * v318, v178, v161);
            v197 = v177;
            v198 = *(_BYTE *)(v177 + 184);
            v199 = swift_retain();
            if ((v198 & 1) != 0)
              break;
            v200 = v161;
            v201 = v178;
            v202 = *(unsigned int *)(*(_QWORD *)(v197 + 168) + 4 * v180);
            v315 = (void (*)(uint64_t))((char *)v311 + v301 * v318);
            v203 = *(unsigned int *)(*(_QWORD *)(v199 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                   + 12 * (int)v202
                                   + 8);
            swift_release();
            v314 = (void (*)(uint64_t))(v202 | (v203 << 32));
            v204 = v308;
            swift_retain();
            v205 = v307;
            swift_retain();
            v206 = v317;
            v207 = v316;
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), void (*)(uint64_t), _QWORD, uint64_t, NSObject *, uint64_t, uint64_t))v305)(v309, v201, v316, v193, v194, v314, v315, v306 & 1, v310, v206, v204, v205);

            swift_release();
            swift_release();
            sub_1B1B0BC78(v207, v193);
            sub_1B1A04628(v201, v200);
            v161 = v200;
            v178 = v201;
            v177 = v197;
            v176 = v303;
          }
          if (++v318 == v176)
          {
            LODWORD(v318) = 1;
            v25 = v295;
            goto LABEL_155;
          }
        }
LABEL_200:
        swift_release_n();
        swift_release_n();
        result = sub_1B2229688();
        __break(1u);
        return result;
      }
    }
    else
    {
      v208 = v164;
      if ((_DWORD)v164 != (_DWORD)v314)
      {
        v209 = *(uint64_t **)(v278 + 72);
        v303 = *(_QWORD *)(*(_QWORD *)(v285 - 8) + 72);
        v304 = v209;
        while (1)
        {
          v210 = swift_retain();
          if ((*(_BYTE *)(v177 + 184) & 1) != 0)
            goto LABEL_200;
          v211 = *(int *)(*(_QWORD *)(v177 + 168) + 4 * v208);
          v212 = *(_DWORD *)(*(_QWORD *)(v210 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v211 + 8);
          swift_release();
          v213 = (_DWORD)v211 == -1 && v212 == 0;
          if (v213
            || (v211 & 0x80000000) != 0
            || v299[1] <= v211
            || (v212 != -1 ? (v214 = *(_DWORD *)(*v299 + 12 * (int)v211 + 8) == v212) : (v214 = 1),
                !v214
             || (v215 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v296 + 80)
                                              + 8 * *(__int16 *)(*v299 + 12 * (int)v211 + 6)
                                              + 32)
                                  + 16),
                 v216 = *(_QWORD *)(v215 + 128),
                 !*(_QWORD *)(v216 + 16))
             || (v217 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone), (v218 & 1) == 0)
             || *(ValueMetadata **)(*(_QWORD *)(v215 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v216 + 56) + 8 * v217) + 32) != &type metadata for Tombstone))
          {
            dispatch_group_enter(v317);
            v219 = *(_QWORD *)(v177 + 48);
            v220 = *(_QWORD *)(v219 + 16);
            if (v220)
            {
              v221 = (_QWORD *)(v219 + 56);
              while ((ValueMetadata *)*(v221 - 3) != &type metadata for ScriptCompileOptions)
              {
                v221 += 5;
                if (!--v220)
                  goto LABEL_149;
              }
              v224 = (unsigned __int8 *)(*(_QWORD *)(v177 + 128) + *v221 + 24 * v208);
              v222 = *v224;
              v225 = *((_QWORD *)v224 + 2);
              v318 = *((_QWORD *)v224 + 1);
              swift_bridgeObjectRetain();
              v223 = v225;
              swift_bridgeObjectRetain();
            }
            else
            {
LABEL_149:
              v222 = 0;
              v318 = 0;
              v223 = 0;
            }
            sub_1B1792810(v312 + (_QWORD)v304 * v208, (uint64_t)v25, v161);
            v226 = *(_BYTE *)(v177 + 184);
            v227 = swift_retain();
            if ((v226 & 1) != 0)
              goto LABEL_200;
            v228 = v161;
            v229 = (uint64_t)v25;
            v230 = *(unsigned int *)(*(_QWORD *)(v177 + 168) + 4 * v208);
            v315 = (void (*)(uint64_t))((char *)v311 + v303 * v208);
            v231 = *(unsigned int *)(*(_QWORD *)(v227 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                   + 12 * (int)v230
                                   + 8);
            swift_release();
            v232 = v230 | (v231 << 32);
            v316 = v208;
            v233 = v308;
            swift_retain();
            v234 = v307;
            swift_retain();
            v235 = v317;
            v236 = v318;
            v237 = v232;
            v177 = v297;
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), _QWORD, uint64_t, NSObject *, uint64_t, uint64_t))v305)(v309, v229, v222, v318, v223, v237, v315, v306 & 1, v310, v235, v233, v234);

            v208 = v316;
            swift_release();
            swift_release();
            sub_1B1B0BC78(v222, v236);
            sub_1B1A04628(v229, v228);
            v161 = v228;
            v25 = (char *)v229;
          }
          if ((void (*)(uint64_t))++v208 == v314)
          {
            LODWORD(v318) = 1;
            break;
          }
        }
      }
    }
LABEL_155:
    v238 = v313;
    v239 = *((_QWORD *)v313 + 6);
    v240 = *((_QWORD *)v313 + 8);
    if (!v240)
    {
      v267 = *((_QWORD *)v313 + 7);
      v268 = (_QWORD *)*((_QWORD *)v313 + 4);
      v271 = v313;
      v269 = v291;
      v270 = v297;
      goto LABEL_192;
    }
    v241 = 0;
    v242 = *((_QWORD *)v313 + 6);
    do
    {
      v244 = (uint64_t *)(v239 + 48 * v241);
      v245 = *v244;
      v246 = (void (*)(uint64_t))v244[4];
      v247 = *((_QWORD *)v238 + 9);
      if (v247)
        v248 = v245 == v247;
      else
        v248 = 0;
      if (v248 || !v300[11])
        goto LABEL_157;
      v249 = v300[9];
      v250 = &v298[v300[8]];
      v251 = v244[2];
      v252 = v250;
      v253 = v249 >> 4;
      v254 = v298;
      if (v249 >= 0x10)
      {
        while (*(_QWORD *)v252 != v245)
        {
          ++v254;
          v252 += 16;
          if (!--v253)
            goto LABEL_172;
        }
        v255 = v254[v300[10]];
        v256 = v255 > 5;
        v257 = (1 << v255) & 0x23;
        if (v256 || v257 == 0)
        {
LABEL_157:
          v243 = swift_retain();
          v246(v243);
          swift_release();
          goto LABEL_158;
        }
      }
LABEL_172:
      if (swift_conformsToProtocol2())
        v259 = v251;
      else
        v259 = 0;
      if (v259)
      {
        v260 = v250;
        v261 = v249 >> 4;
        v262 = v298;
        if (v249 < 0x10)
          goto LABEL_157;
        while (*(_QWORD *)v260 != v259)
        {
          ++v262;
          v260 += 16;
          if (!--v261)
            goto LABEL_184;
        }
        v263 = v262[v300[10]];
        v256 = v263 > 5;
        v264 = (1 << v263) & 0x23;
        if (v256 || v264 == 0)
          goto LABEL_157;
LABEL_184:
        v266 = 16 * (v249 >> 4);
        while (*(_QWORD *)v250 != v259)
        {
          v250 += 16;
          v266 -= 16;
          if (!v266)
            goto LABEL_157;
        }
      }
LABEL_158:
      v238 = v313;
      ++v241;
      v239 = v242;
    }
    while (v241 != v240);
    v267 = *((_QWORD *)v313 + 7);
    v239 = *((_QWORD *)v313 + 6);
    v268 = (_QWORD *)*((_QWORD *)v313 + 4);
    v269 = v291;
    v270 = v297;
    v161 = v279;
    if (*((uint64_t *)v313 + 8) >= 1)
      swift_arrayDestroy();
    v25 = v295;
    v271 = v313;
LABEL_192:
    ecs_stack_allocator_deallocate(v268, v239, 48 * v267);
    v272 = v289;
    *((_QWORD *)v271 + 6) = v290;
    *((_QWORD *)v271 + 7) = v272;
    v273 = v287;
    *((_QWORD *)v271 + 8) = v288;
    *((_QWORD *)v271 + 9) = v273;
    *((_QWORD *)v271 + 10) = v286;
    sub_1B1F03804((char *)v270);
    ecs_stack_allocator_pop_snapshot((uint64_t)v293);
    if ((_DWORD)v292)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v270 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v270 + 376));
    }
    swift_release();
    v162 = v269 + 1;
  }
  while (v162 != v282);
  sub_1B19ED748(v331);
  sub_1B19ED748(v331);
  if ((v318 & 1) != 0)
    goto LABEL_196;
LABEL_197:
  dispatch_group_leave(v317);
  swift_release_n();
  swift_release_n();
  return swift_release();
}

void sub_1B1D11AA4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BYTE v10[328];
  _BYTE v11[328];
  _BYTE v12[328];
  _BYTE v13[328];
  _BYTE v14[328];
  _BYTE v15[328];
  _BYTE v16[328];
  _BYTE __dst[328];

  dispatch_group_enter(a1);
  memcpy(__dst, (const void *)(a2 + 96), sizeof(__dst));
  sub_1B1D0FBA8(a2, a3, a1, 1, (uint64_t)__dst, a4, a5, type metadata accessor for EmitterScript, &qword_1ED4B9670, (uint64_t)&off_1ED4BC418, (unint64_t *)&unk_1ED4B88E0, &qword_1ED4B9950, (uint64_t)&off_1E637A0A8, sub_1B1CFEB10, (uint64_t (*)(uint64_t))sub_1B1CFFB34, (unsigned __int16 **)sub_1B1D000CC, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B21584);
  memcpy(v16, (const void *)(a2 + 424), sizeof(v16));
  sub_1B1D0FBA8(a2, a3, a1, 1, (uint64_t)v16, a4, a5, type metadata accessor for GraphScript, &qword_1ED4B9648, (uint64_t)&off_1ED4BBD80, (unint64_t *)&unk_1ED4B88B0, (unint64_t *)&unk_1ED4B9920, (uint64_t)&off_1E6370AB0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))sub_1B1D00CDC, (uint64_t (*)(uint64_t))sub_1B1D01B14, (unsigned __int16 **)sub_1B1D020AC, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B21584);
  memcpy(v15, (const void *)(a2 + 752), sizeof(v15));
  sub_1B1D0FBA8(a2, a3, a1, 1, (uint64_t)v15, a4, a5, type metadata accessor for SimpleScript, (unint64_t *)&unk_1ED4B9660, (uint64_t)&off_1ED4BC1D8, (unint64_t *)&unk_1ED4B88D0, (unint64_t *)&unk_1ED4B9940, (uint64_t)&off_1E63777B8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))sub_1B1D02CBC, (uint64_t (*)(uint64_t))sub_1B1D03AEC, (unsigned __int16 **)sub_1B1D04084, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B21584);
  memcpy(v14, (const void *)(a2 + 1080), sizeof(v14));
  sub_1B1D077D4(a2, a3, a1, 1, (uint64_t)v14, a4, a5, type metadata accessor for MetalFunctionScript, (unint64_t *)&unk_1ED4BB270, (uint64_t)&off_1ED4BF0F8, (unint64_t *)&qword_1ED4BB240, (unint64_t *)&unk_1ED4BB3B0, (uint64_t)&off_1E63982A0, sub_1B1D04C94, (uint64_t (*)(uint64_t))sub_1B1CE3E4C, (unsigned __int16 **)sub_1B1D055A0, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B21584);
  memcpy(v13, (const void *)(a2 + 1408), sizeof(v13));
  sub_1B1D077D4(a2, a3, a1, 1, (uint64_t)v13, a4, a5, type metadata accessor for ShaderScript, (unint64_t *)&unk_1ED4B9650, (uint64_t)&off_1ED4BC090, (unint64_t *)&qword_1ED4B88C0, (unint64_t *)&unk_1ED4B9930, (uint64_t)&off_1E63774F8, sub_1B1D061B0, (uint64_t (*)(uint64_t))sub_1B1CE38AC, (unsigned __int16 **)sub_1B1D06B3C, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B21584);
  memcpy(v12, (const void *)(a2 + 1736), sizeof(v12));
  sub_1B1D0FBA8(a2, a3, a1, 1, (uint64_t)v12, a4, a5, type metadata accessor for ParticleInitScript, (unint64_t *)&unk_1ED4B9630, (uint64_t)&off_1ED4BCD90, &qword_1ED4B8890, (unint64_t *)&unk_1ED4B9900, (uint64_t)&off_1E6394B78, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))sub_1B1D096D0, (uint64_t (*)(uint64_t))sub_1B1D0A6F8, (unsigned __int16 **)sub_1B1D0AC90, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B21584);
  memcpy(v11, (const void *)(a2 + 2064), sizeof(v11));
  sub_1B1D0FBA8(a2, a3, a1, 1, (uint64_t)v11, a4, a5, type metadata accessor for ParticleUpdateScript, &qword_1ED4B9640, (uint64_t)&off_1ED4BD280, &qword_1ED4B88A0, (unint64_t *)&unk_1ED4B9910, (uint64_t)&off_1E639E488, sub_1B1D0B8A0, (uint64_t (*)(uint64_t))sub_1B1D0C8C8, (unsigned __int16 **)sub_1B1D0CE60, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B21584);
  memcpy(v10, (const void *)(a2 + 2392), sizeof(v10));
  sub_1B1D0FBA8(a2, a3, a1, 1, (uint64_t)v10, a4, a5, type metadata accessor for TriggerScript, &qword_1ED4BB350, (uint64_t)&off_1ED4BEFD8, &qword_1ED4BB250, &qword_1ED4BB3C0, (uint64_t)&off_1E637DA80, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))sub_1B1D0DB18, (uint64_t (*)(uint64_t))sub_1B1D0E99C, (unsigned __int16 **)sub_1B1D0EF34, (void (*)(uint64_t))sub_1B1B21584, (void (*)(uint64_t))sub_1B1B1F4C0);
  dispatch_group_leave(a1);
}

uint64_t sub_1B1D11FD0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_1B1D11FE4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1B1AEC268(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1B1D12048()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D940)
  {
    sub_1B1A1B6FC(255, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D940);
  }
}

void sub_1B1D120BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D948)
  {
    sub_1B1A1B6FC(255, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D948);
  }
}

uint64_t sub_1B1D12130(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  __int128 v5;

  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a1 + 2;
  v4 = v3 == 1;
  v5 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v5;
  (**(void (***)(uint64_t))(v5 - 8))(a2);
  *(_BYTE *)(a2 + 40) = v4;
  return a2;
}

uint64_t sub_1B1D12190(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  sub_1B1A1B6FC(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t sub_1B1D121E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_1B1A1B6FC(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_1B1D12220(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;

  sub_1B1A1B6FC(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

void sub_1B1D12278(void *a1)
{
  uint64_t v1;

  sub_1B1CF08BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1D12288()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for TriggerScript(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v5 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v0 + v3 + v1[10];
  v7 = type metadata accessor for ScriptIndex();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7)
    && swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_1B222826C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }

  if (*(_QWORD *)(v0 + v4 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1D12414()
{
  return sub_1B1D13010(type metadata accessor for TriggerScript, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD *, char *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1CED688);
}

uint64_t sub_1B1D12428()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D1243C()
{
  uint64_t v0;

  return sub_1B1D434C4(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_1B1D12448(uint64_t a1)
{
  destroy for CompilationStatus(a1);
  return a1;
}

void *sub_1B1D12474(void *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 3:
    case 4:
    case 5:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    case 2:

LABEL_4:
      result = (void *)swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B1D124DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

unint64_t sub_1B1D12534()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF58530;
  if (!qword_1EEF58530)
  {
    type metadata accessor for MTLLibraryError(255);
    result = MEMORY[0x1B5E23E74](&unk_1B226C5B0, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF58530);
  }
  return result;
}

unint64_t sub_1B1D1257C()
{
  unint64_t result;

  result = qword_1EEF5D960;
  if (!qword_1EEF5D960)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B2B6C, &type metadata for CodeLoader.Error);
    atomic_store(result, (unint64_t *)&qword_1EEF5D960);
  }
  return result;
}

void sub_1B1D125C0(uint64_t a1, unint64_t a2)
{
  void *v2;

  if (a2 >> 62 == 1)
  {
    v2 = (void *)(a2 & 0x3FFFFFFFFFFFFFFFLL);
    swift_bridgeObjectRelease();

  }
  else if (!(a2 >> 62))
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B1D125FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, (unint64_t *)&unk_1ED4B9680, (uint64_t (*)(uint64_t))sub_1B1D12658, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1D12658()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4B9678)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4B9678);
  }
}

void sub_1B1D126C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D980)
  {
    sub_1B1A1B6FC(255, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D980);
  }
}

void sub_1B1D12734()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B88A8)
  {
    sub_1B1A1B6FC(255, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B88A8);
  }
}

uint64_t sub_1B1D127B0()
{
  uint64_t v0;
  uint64_t updated;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  updated = type metadata accessor for ParticleUpdateScript(0);
  v2 = *(_QWORD *)(updated - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v0 + v3 + *(int *)(updated + 36);
  v6 = type metadata accessor for ScriptIndex();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6)
    && swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_1B222826C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  if (*(_QWORD *)(v0 + v4 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

void sub_1B1D1291C()
{
  sub_1B1D1392C(type metadata accessor for ParticleUpdateScript, &qword_1ED4B9640, (uint64_t)&off_1ED4BD280, (void (*)(uint64_t *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1CE79D8);
}

uint64_t sub_1B1D12940()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D12954(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;

  sub_1B1A1B6FC(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a2, a1, v7);
  return a2;
}

void sub_1B1D129B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D990)
  {
    sub_1B1A1B6FC(255, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D990);
  }
}

void sub_1B1D12A24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B8898)
  {
    sub_1B1A1B6FC(255, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B8898);
  }
}

uint64_t sub_1B1D12AA0()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  inited = type metadata accessor for ParticleInitScript(0);
  v2 = *(_QWORD *)(inited - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v0 + v3 + *(int *)(inited + 36);
  v6 = type metadata accessor for ScriptIndex();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6)
    && swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_1B222826C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  if (*(_QWORD *)(v0 + v4 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

void sub_1B1D12C0C()
{
  sub_1B1D1392C(type metadata accessor for ParticleInitScript, (unint64_t *)&unk_1ED4B9630, (uint64_t)&off_1ED4BCD90, (void (*)(uint64_t *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1CE8694);
}

uint64_t sub_1B1D12C30()
{
  return swift_deallocObject();
}

void sub_1B1D12C44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D9A0)
  {
    sub_1B1A1B6FC(255, (unint64_t *)&unk_1ED4B9650, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D9A0);
  }
}

void sub_1B1D12CB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7818)
  {
    sub_1B1A1B6FC(255, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7818);
  }
}

uint64_t sub_1B1D12D34()
{
  return sub_1B1D12E88(type metadata accessor for ShaderScript);
}

uint64_t sub_1B1D12D40()
{
  return sub_1B1D13010(type metadata accessor for ShaderScript, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD *, char *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1CEEE84);
}

uint64_t sub_1B1D12D54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1D12D78()
{
  return swift_deallocObject();
}

void sub_1B1D12D8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5E9E0)
  {
    sub_1B1A1B6FC(255, (unint64_t *)&unk_1ED4BB270, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5E9E0);
  }
}

void sub_1B1D12E00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D9C0)
  {
    sub_1B1A1B6FC(255, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D9C0);
  }
}

uint64_t sub_1B1D12E7C()
{
  return sub_1B1D12E88(type metadata accessor for MetalFunctionScript);
}

uint64_t sub_1B1D12E88(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v6 = v1 + v4 + *(int *)(v2 + 24);
  v7 = type metadata accessor for ScriptIndex();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7)
    && swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = sub_1B222826C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + v5 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1D12FFC()
{
  return sub_1B1D13010(type metadata accessor for MetalFunctionScript, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD *, char *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1CEFA4C);
}

uint64_t sub_1B1D13010(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD *, char *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  char *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a1(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a2(*((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), *((_QWORD *)v2 + 5), *((_QWORD *)v2 + 6), *((_QWORD *)v2 + 7), *((_QWORD *)v2 + 8), (_QWORD *)v2 + 9, &v2[v5], *(_QWORD *)&v2[v6], *(_QWORD *)&v2[v6 + 8], *(_QWORD *)&v2[v6 + 16], *(_QWORD *)&v2[(v6 + 27) & 0xFFFFFFFFFFFFFFF8], *(_QWORD *)&v2[(((v6 + 27) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8]);
}

uint64_t sub_1B1D130B0()
{
  return swift_deallocObject();
}

void sub_1B1D130C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D9D0)
  {
    sub_1B1A1B6FC(255, (unint64_t *)&unk_1ED4B9660, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D9D0);
  }
}

void sub_1B1D13138()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D9D8)
  {
    sub_1B1A1B6FC(255, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D9D8);
  }
}

uint64_t sub_1B1D131B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for SimpleScript(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v0 + v3 + *(int *)(v1 + 36);
  v6 = type metadata accessor for ScriptIndex();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6)
    && swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_1B222826C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  if (*(_QWORD *)(v0 + v4 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

void sub_1B1D13320()
{
  sub_1B1D1392C(type metadata accessor for SimpleScript, (unint64_t *)&unk_1ED4B9660, (uint64_t)&off_1ED4BC1D8, (void (*)(uint64_t *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1CEABF8);
}

uint64_t sub_1B1D13344()
{
  return swift_deallocObject();
}

void sub_1B1D13358()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D9E0)
  {
    sub_1B1A1B6FC(255, &qword_1ED4B9648, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D9E0);
  }
}

void sub_1B1D133CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D9E8)
  {
    sub_1B1A1B6FC(255, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D9E8);
  }
}

uint64_t sub_1B1D13448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for GraphScript(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v0 + v3 + *(int *)(v1 + 40);
  v6 = type metadata accessor for ScriptIndex();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6)
    && swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_1B222826C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  if (*(_QWORD *)(v0 + v4 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

void sub_1B1D135B4()
{
  sub_1B1D1392C(type metadata accessor for GraphScript, &qword_1ED4B9648, (uint64_t)&off_1ED4BBD80, (void (*)(uint64_t *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1CEB884);
}

uint64_t sub_1B1D135D8()
{
  return swift_deallocObject();
}

void sub_1B1D135EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D9F0)
  {
    sub_1B1A1B6FC(255, &qword_1ED4B9670, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D9F0);
  }
}

void sub_1B1D13660()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5D9F8)
  {
    sub_1B1A1B6FC(255, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5D9F8);
  }
}

uint64_t sub_1B1D136D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B1D1371C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1D1374C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_1B1D13778()
{
  uint64_t v0;
  NSObject *v1;

  v1 = *(NSObject **)(v0 + 32);
  (*(void (**)(void))(v0 + 16))();
  dispatch_group_leave(v1);
}

uint64_t sub_1B1D137A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for EmitterScript(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v0 + v3 + *(int *)(v1 + 32);
  v6 = type metadata accessor for ScriptIndex();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6)
    && swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_1B222826C();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v5, v7);
  }
  if (*(_QWORD *)(v0 + v4 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject();
}

void sub_1B1D13908()
{
  sub_1B1D1392C(type metadata accessor for EmitterScript, &qword_1ED4B9670, (uint64_t)&off_1ED4BC418, (void (*)(uint64_t *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1CEC510);
}

void sub_1B1D1392C(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(a1(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 400) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1B1CEE2EC(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(void (**)(void))(v4 + 48), *(_QWORD *)(v4 + 56), *(const char **)(v4 + 64), v4 + 72, v4 + v10, *(_QWORD *)(v4 + v11), *(_QWORD *)(v4 + v11 + 8), *(_QWORD *)(v4 + v11 + 16), *(_QWORD *)(v4 + ((v11 + 27) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v4 + ((((v11 + 27) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)), a2, a1, a3, a4);
}

uint64_t sub_1B1D139EC()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D139FC(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1B1D13A94()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1D13AC0(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t destroy for ScriptError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s3VFX11ScriptErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for ScriptError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScriptError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScriptError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ScriptError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

_QWORD *sub_1B1D13D68(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScriptError()
{
  return &type metadata for ScriptError;
}

uint64_t sub_1B1D13E5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;

  sub_1B1D1516C(0, &qword_1EEF5DA10, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D15128();
  sub_1B222A180();
  v12 = 0;
  sub_1B2229934();
  if (!v1)
  {
    v11 = 1;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B1D13F80(char *a1, char *a2)
{
  return sub_1B1F99390(*a1, *a2);
}

uint64_t sub_1B1D13F8C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6566694C7265766FLL;
  else
    return 0x726F74636166;
}

uint64_t sub_1B1D13FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1D1413C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1D13FE8()
{
  sub_1B1D15128();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D14010()
{
  sub_1B1D15128();
  return sub_1B222A1E0();
}

void sub_1B1D14038(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  float v5;

  v5 = sub_1B1D14680(a1);
  if (!v2)
  {
    *(float *)a2 = v5;
    *(_BYTE *)(a2 + 4) = v4 & 1;
  }
}

uint64_t sub_1B1D14068(_QWORD *a1)
{
  return sub_1B1D13E5C(a1);
}

uint64_t sub_1B1D14084()
{
  return type metadata accessor for Attach.System();
}

void sub_1B1D140A0(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1065353216;
  *(_BYTE *)(a1 + 4) = 0;
}

uint64_t type metadata accessor for Attach.System()
{
  return objc_opt_self();
}

const char *sub_1B1D140D4()
{
  return "AttachSystem.CPU";
}

uint64_t type metadata accessor for Attach.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D1410C()
{
  return "AttachSystem.GPU";
}

uint64_t sub_1B1D14120()
{
  return type metadata accessor for Attach.GPUSystem();
}

uint64_t sub_1B1D1413C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F74636166 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6566694C7265766FLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B1D14224@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t result;
  float32x4_t v14;
  char v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  simd_float4 v23;
  simd_float4x4 v24;
  simd_float4 v25;
  simd_float4 v26;
  simd_float4 v27;
  _BYTE v28[80];
  _BYTE v29[80];
  float32x4_t v30[4];
  char v31;
  simd_float4 v32[4];
  char v33;
  simd_float4x4 v34;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(v5 + 16);
  swift_retain();
  if (v6 == 1 && v7 == 0)
    goto LABEL_15;
  v9 = *(unsigned int *)(a1 + 36);
  v10 = *(int *)(a1 + 32);
  if ((_DWORD)v10 == -1 && (_DWORD)v9 == 0)
    goto LABEL_15;
  if ((v10 & 0x80000000) != 0)
    goto LABEL_15;
  if (*(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v10)
    goto LABEL_15;
  v12 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if ((_DWORD)v9 != -1 && *(_DWORD *)(v12 + 12 * (int)v10 + 8) != (_DWORD)v9)
    goto LABEL_15;
  sub_1B1D1ECB0(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *(int *)(v12 + 12 * (int)v10) + 32), *(_DWORD *)(v12 + 12 * (int)v10), *(_WORD *)(v12 + 12 * (int)v10 + 4), 64, v4, (uint64_t)v28);
  sub_1B1A18378((uint64_t)v28, (uint64_t)v32, &qword_1ED4B99A0, (uint64_t)&type metadata for LastFrameWorldTransform);
  if ((v33 & 1) != 0
    || (v26 = v32[1],
        v27 = v32[0],
        v23 = v32[3],
        v25 = v32[2],
        sub_1B1D15764((_QWORD *)(v10 | (unint64_t)(v9 << 32)), (uint64_t)v29),
        sub_1B1A18378((uint64_t)v29, (uint64_t)v30, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform),
        v31 == 1))
  {
LABEL_15:
    result = swift_release();
    v14 = 0uLL;
    v15 = 1;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
  }
  else
  {
    v19 = v30[0];
    v20 = v30[1];
    v21 = v30[2];
    v22 = v30[3];
    v34.columns[1] = v26;
    v34.columns[0] = v27;
    v34.columns[3] = v23;
    v34.columns[2] = v25;
    v24 = __invert_f4(v34);
    result = swift_release();
    v15 = 0;
    v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v24.columns[0].f32[0]), v20, *(float32x2_t *)v24.columns[0].f32, 1), v21, (float32x4_t)v24.columns[0], 2), v22, (float32x4_t)v24.columns[0], 3);
    v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v24.columns[1].f32[0]), v20, *(float32x2_t *)v24.columns[1].f32, 1), v21, (float32x4_t)v24.columns[1], 2), v22, (float32x4_t)v24.columns[1], 3);
    v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v24.columns[2].f32[0]), v20, *(float32x2_t *)v24.columns[2].f32, 1), v21, (float32x4_t)v24.columns[2], 2), v22, (float32x4_t)v24.columns[2], 3);
    v18 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v24.columns[3].f32[0]), v20, *(float32x2_t *)v24.columns[3].f32, 1), v21, (float32x4_t)v24.columns[3], 2), v22, (float32x4_t)v24.columns[3], 3);
  }
  *a2 = v14;
  a2[1] = v16;
  a2[2] = v17;
  a2[3] = v18;
  a2[4].i8[0] = v15;
  return result;
}

uint64_t sub_1B1D14448(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  float v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[4];
  float v27;
  float32x4_t v28[5];
  _OWORD v29[4];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 96);
  v22 = *(_OWORD *)(a1 + 80);
  v23 = v2;
  v3 = *(_OWORD *)(a1 + 128);
  v24 = *(_OWORD *)(a1 + 112);
  v25 = v3;
  v4 = *(_OWORD *)(a1 + 32);
  v19[0] = *(_OWORD *)(a1 + 16);
  v19[1] = v4;
  v5 = *(_OWORD *)(a1 + 64);
  v20 = *(_OWORD *)(a1 + 48);
  v21 = v5;
  v6 = *(_QWORD *)&v19[0];
  swift_retain();
  v7 = sub_1B1D182A4(*((unint64_t *)&v19[0] + 1));
  swift_release();
  sub_1B1D14224((uint64_t)v19, v28);
  result = sub_1B1AE09AC((uint64_t)v28, (uint64_t)v29);
  if ((v30 & 1) == 0)
  {
    v9 = *(float *)&v7;
    if ((v7 & 0xFF00000000) == 0x200000000)
      v9 = 1.0;
    v26[0] = v29[0];
    v26[1] = v29[1];
    v26[2] = v29[2];
    v26[3] = v29[3];
    v27 = v9;
    v10 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      ObjectType = swift_getObjectType();
      type metadata accessor for particle_attach_uniforms(0);
      sub_1B1F40E1C((uint64_t)v26, 1, ObjectType, v12, v13, v14, v15, v16);
    }
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1B226D240;
    *(_OWORD *)(v17 + 32) = xmmword_1B228D010;
    *(_BYTE *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 64) = HIDWORD(v7) & 1;
    *(_OWORD *)(v17 + 72) = 0u;
    *(_OWORD *)(v17 + 88) = 0u;
    *(_OWORD *)(v17 + 104) = 0u;
    *(_QWORD *)(v17 + 120) = 0;
    *(_BYTE *)(v17 + 128) = 13;
    v18 = v20;
    swift_retain();
    sub_1B1B1FC34(a1);
    sub_1B1FE6FB8(v18, v6, v10 == 0, v17, a1, 0x656C636974726170, 0xEF6863617474615FLL, 0);
    sub_1B1B1FC88(a1);
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    return swift_deallocClassInstance();
  }
  return result;
}

float sub_1B1D14680(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  uint64_t v12;
  char v13;
  char v14;

  sub_1B1D1516C(0, &qword_1EEF5DA00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D15128();
  sub_1B222A150();
  if (!v1)
  {
    v14 = 0;
    sub_1B22297F0();
    v2 = v10;
    v13 = 1;
    sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t *sub_1B1D147D8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  float32x2_t *v21;
  uint64_t v22;
  float32x2_t *v23;
  __int128 v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  float32x2_t *v37;
  float *v38;
  float v39;
  float v40;
  uint64_t v41;
  float *v42;
  float32x2_t *v43;
  float v44;
  float v45;
  char v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t v56;
  char v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t v72[4];
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76[8];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  float32x4_t v85[4];
  char v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  _BYTE v96[56];

  v2 = *(_QWORD *)a1;
  swift_retain();
  if ((sub_1B1E53374() & 1) != 0)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v3 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v77 = 0;
    swift_retain();
    sub_1B1F1AD70(v3, (uint64_t *)&v77, 0xD00000000000002DLL, 0x80000001B2338C80);
    swift_release();
    swift_release();
    return (uint64_t *)swift_release();
  }
  v4 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v5 = sub_1B1D182A4(v4);
  swift_release();
  v6 = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0x200000000)
    v6 = 1.0;
  v68 = v6;
  sub_1B1D14224(a1, v72);
  sub_1B1AE09AC((uint64_t)v72, (uint64_t)v85);
  if ((v86 & 1) != 0)
    return (uint64_t *)swift_release();
  v7 = 0;
  v56 = v85[0];
  v58 = v85[1];
  v60 = v85[2];
  v62 = v85[3];
  if ((v5 & 0x100000000) != 0)
  {
    v24 = *(_OWORD *)(a1 + 104);
    v93 = *(_OWORD *)(a1 + 88);
    v94 = v24;
    v95 = *(_QWORD *)(a1 + 120);
    sub_1B1B16EC8(2, 1, (uint64_t)&v73);
    v90 = v73;
    v91 = v74;
    v92 = v75;
    sub_1B1E8FCE4(v2, (uint64_t)&v90, 0x200000000, v76);
    sub_1B1A18378((uint64_t)v76, (uint64_t)&v77, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (!(_QWORD)v77)
      goto LABEL_49;
    if (v84 <= 0)
      goto LABEL_51;
    v55 = v81;
    if (!v81)
      goto LABEL_51;
    v25 = v83;
    v71 = v83[4];
    v26 = *(_BYTE *)(v82 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v87 = v77;
    v88 = v78;
    v89 = v79;
    v51 = (uint64_t)(v83 + 6);
    v53 = v80;
    v49 = v83 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    v27 = 0;
    v47 = v26;
    while (1)
    {
      v28 = (unsigned int *)(v53 + 48 * v27);
      v67 = *v28;
      v65 = v28[1];
      v29 = (uint64_t *)*((_QWORD *)v28 + 2);
      v30 = *((_QWORD *)v28 + 3);
      v32 = *((_QWORD *)v28 + 4);
      v31 = *((_QWORD *)v28 + 5);
      if ((v26 & 1) != 0)
      {
        v33 = v7;
        v34 = *(os_unfair_lock_s **)(v31 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v34);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v31 + 344));
        swift_release();
      }
      else
      {
        v33 = v7;
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v71);
      sub_1B1A18378(v51, (uint64_t)v96, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v35 = v25[4];
      v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v25[6] = ecs_stack_allocator_allocate(v35, 48 * v36, 8);
      v25[7] = v36;
      v49[1] = 0;
      v49[2] = 0;
      *v49 = 0;
      swift_release();
      v37 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v29, v30, v32, (uint64_t)v25);
      v38 = (float *)sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v29, v30, v32, (uint64_t)v25);
      if (v29)
      {
        v7 = v33;
        if (v32)
        {
          v26 = v47;
          do
          {
            v39 = *v38++;
            v40 = fminf(fmaxf(v39 / v68, 0.0), 1.0);
            *(float32x4_t *)v37->f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vmlaq_n_f32(vmulq_n_f32(v56, 1.0 - v40), (float32x4_t)xmmword_1B2244DB0, v40), COERCE_FLOAT(*(_OWORD *)v37->f32)), vmlaq_n_f32(vmulq_n_f32(v58, 1.0 - v40), (float32x4_t)xmmword_1B2244DD0, v40), *v37, 1), vmlaq_n_f32(vmulq_n_f32(v60, 1.0 - v40), (float32x4_t)xmmword_1B2244D90, v40), *(float32x4_t *)v37->f32, 2), vmlaq_n_f32(vmulq_n_f32(v62, 1.0 - v40), (float32x4_t)xmmword_1B2244E20, v40), *(float32x4_t *)v37->f32,
                                         3);
            v37 += 2;
            --v32;
          }
          while (v32);
          goto LABEL_47;
        }
      }
      else
      {
        v7 = v33;
        if ((_DWORD)v67 != (_DWORD)v65)
        {
          v41 = v65 - v67;
          v42 = &v38[v67];
          v43 = &v37[2 * v67];
          v26 = v47;
          do
          {
            v44 = *v42++;
            v45 = fminf(fmaxf(v44 / v68, 0.0), 1.0);
            *(float32x4_t *)v43->f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vmlaq_n_f32(vmulq_n_f32(v56, 1.0 - v45), (float32x4_t)xmmword_1B2244DB0, v45), COERCE_FLOAT(*(_OWORD *)v43->f32)), vmlaq_n_f32(vmulq_n_f32(v58, 1.0 - v45), (float32x4_t)xmmword_1B2244DD0, v45), *v43, 1), vmlaq_n_f32(vmulq_n_f32(v60, 1.0 - v45), (float32x4_t)xmmword_1B2244D90, v45), *(float32x4_t *)v43->f32, 2), vmlaq_n_f32(vmulq_n_f32(v62, 1.0 - v45), (float32x4_t)xmmword_1B2244E20, v45), *(float32x4_t *)v43->f32,
                                         3);
            v43 += 2;
            --v41;
          }
          while (v41);
          goto LABEL_47;
        }
      }
      v26 = v47;
LABEL_47:
      sub_1B1F05D48(v25, (unsigned __int16 **)&v87, (uint64_t)v96);
      sub_1B1F03804((char *)v31);
      ecs_stack_allocator_pop_snapshot(v71);
      if ((v26 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 376));
      }
      swift_release();
      if (++v27 == v55)
        goto LABEL_52;
    }
  }
  v8 = *(_OWORD *)(a1 + 104);
  v93 = *(_OWORD *)(a1 + 88);
  v94 = v8;
  v95 = *(_QWORD *)(a1 + 120);
  sub_1B1E40AF4(2, (uint64_t)&v73);
  v90 = v73;
  v91 = v74;
  v92 = v75;
  sub_1B1E8FCE4(v2, (uint64_t)&v90, 0x200000000, v76);
  sub_1B1A18378((uint64_t)v76, (uint64_t)&v77, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!(_QWORD)v77)
  {
LABEL_49:
    sub_1B19ED720((uint64_t)&v73);
    return (uint64_t *)swift_release();
  }
  if (v84 > 0)
  {
    v66 = v81;
    if (v81)
    {
      v64 = vmlaq_n_f32(vmulq_n_f32(v56, v68), (float32x4_t)xmmword_1B2244DB0, 1.0 - v68);
      v59 = vmlaq_n_f32(vmulq_n_f32(v58, v68), (float32x4_t)xmmword_1B2244DD0, 1.0 - v68);
      v61 = vmlaq_n_f32(vmulq_n_f32(v60, v68), (float32x4_t)xmmword_1B2244D90, 1.0 - v68);
      v63 = vmlaq_n_f32(vmulq_n_f32(v62, v68), (float32x4_t)xmmword_1B2244E20, 1.0 - v68);
      v9 = v83;
      v10 = v83[4];
      v11 = *(_BYTE *)(v82 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v87 = v77;
      v88 = v78;
      v89 = v79;
      v52 = (uint64_t)(v83 + 6);
      v54 = v80;
      v50 = v83 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      v12 = 0;
      v57 = v11;
      v48 = v10;
      while (1)
      {
        v13 = (unsigned int *)(v54 + 48 * v12);
        v70 = *v13;
        v69 = v13[1];
        v15 = (uint64_t *)*((_QWORD *)v13 + 2);
        v14 = *((_QWORD *)v13 + 3);
        v17 = *((_QWORD *)v13 + 4);
        v16 = *((_QWORD *)v13 + 5);
        if ((v11 & 1) != 0)
        {
          v18 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v18);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B1A18378(v52, (uint64_t)v96, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v19 = v9[4];
        v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
        v9[7] = v20;
        v50[1] = 0;
        v50[2] = 0;
        *v50 = 0;
        swift_release();
        v21 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v15, v14, v17, (uint64_t)v9);
        if (v15)
        {
          v11 = v57;
          if (v17)
          {
            v10 = v48;
            do
            {
              *(float32x4_t *)v21->f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v64, COERCE_FLOAT(*(_OWORD *)v21->f32)), v59, *v21, 1), v61, *(float32x4_t *)v21->f32, 2), v63, *(float32x4_t *)v21->f32, 3);
              v21 += 2;
              --v17;
            }
            while (v17);
            goto LABEL_28;
          }
        }
        else
        {
          v11 = v57;
          if ((_DWORD)v70 != (_DWORD)v69)
          {
            v22 = v69 - v70;
            v23 = &v21[2 * v70];
            v10 = v48;
            do
            {
              *(float32x4_t *)v23->f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v64, COERCE_FLOAT(*(_OWORD *)v23->f32)), v59, *v23, 1), v61, *(float32x4_t *)v23->f32, 2), v63, *(float32x4_t *)v23->f32, 3);
              v23 += 2;
              --v22;
            }
            while (v22);
            goto LABEL_28;
          }
        }
        v10 = v48;
LABEL_28:
        sub_1B1F05D48(v9, (unsigned __int16 **)&v87, (uint64_t)v96);
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v10);
        if ((v11 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        if (++v12 == v66)
          goto LABEL_52;
      }
    }
  }
LABEL_51:
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_52:
  sub_1B19ED720((uint64_t)&v73);
  swift_release();
  sub_1B19ED748(v76);
  return sub_1B19ED748(v76);
}

ValueMetadata *type metadata accessor for Attach()
{
  return &type metadata for Attach;
}

unint64_t sub_1B1D15128()
{
  unint64_t result;

  result = qword_1EEF5DA08;
  if (!qword_1EEF5DA08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228D1F8, &type metadata for Attach.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DA08);
  }
  return result;
}

void sub_1B1D1516C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1D15128();
    v7 = a3(a1, &type metadata for Attach.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for Attach.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1D15214 + 4 * byte_1B228D025[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1D15248 + 4 * byte_1B228D020[v4]))();
}

uint64_t sub_1B1D15248(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D15250(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D15258);
  return result;
}

uint64_t sub_1B1D15264(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D1526CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1D15270(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D15278(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Attach.CodingKeys()
{
  return &type metadata for Attach.CodingKeys;
}

unint64_t sub_1B1D15298()
{
  unint64_t result;

  result = qword_1EEF5DA18;
  if (!qword_1EEF5DA18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228D1D0, &type metadata for Attach.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DA18);
  }
  return result;
}

unint64_t sub_1B1D152E0()
{
  unint64_t result;

  result = qword_1EEF5DA20;
  if (!qword_1EEF5DA20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228D140, &type metadata for Attach.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DA20);
  }
  return result;
}

unint64_t sub_1B1D15328()
{
  unint64_t result;

  result = qword_1EEF5DA28;
  if (!qword_1EEF5DA28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228D168, &type metadata for Attach.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DA28);
  }
  return result;
}

uint64_t sub_1B1D1536C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0x2000000;
  result = 0x2000000;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D1E63C(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 4, v1);
  }
  return result;
}

uint64_t sub_1B1D15420(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 1;
  result = 1;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D1E5C0(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32));
    return 1;
  }
  return result;
}

uint64_t sub_1B1D154D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1C3EC(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 88, v2, a2);
  }
  else
  {
    *(_DWORD *)(a2 + 80) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t sub_1B1D1559C(unint64_t a1)
{
  return sub_1B1D18464(a1, (unint64_t *)&unk_1ED4B9920, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
}

uint64_t sub_1B1D155B8(unint64_t a1)
{
  return sub_1B1D1690C(a1, sub_1B1D1F1A4);
}

uint64_t sub_1B1D155C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1C584(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 40, v2, a2);
  }
  else
  {
    *(_OWORD *)a2 = xmmword_1B2244C80;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_1B1D1568C(unint64_t a1)
{
  return sub_1B1D1854C(a1, (uint64_t (*)(_QWORD))sub_1B1D1EAC8);
}

uint64_t sub_1B1D15698@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1C618(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 120, v2, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 112) = 0;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

_QWORD *sub_1B1D15764@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D17468(a1, (_QWORD *(*)(_OWORD *__return_ptr, _QWORD, __n128))sub_1B1D1E81C, a2);
}

double sub_1B1D15770@<D0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v5 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1C708(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v5 + 32), *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32), 36, v2, a2).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = (__n128)xmmword_1B228D250;
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u32[0] = 0;
  }
  return result;
}

uint64_t sub_1B1D15838(unint64_t a1)
{
  return sub_1B1D193B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1ED54);
}

unint64_t sub_1B1D15844(uint64_t a1)
{
  return sub_1B1D18E7C(a1, (uint64_t (*)(_QWORD))sub_1B1D1EEA4);
}

uint64_t sub_1B1D15850(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scale2; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D15930(unint64_t a1)
{
  return sub_1B1D193B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1EDC4);
}

uint64_t sub_1B1D1593C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Parent; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D15A1C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  unsigned int *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0x200000000;
  result = 0x200000000;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
    {
      v6 = (int *)(v5 + 12 * (int)a1);
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32);
      v8 = *(_QWORD *)(v7 + 48);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = *((__int16 *)v6 + 2);
        for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Seed; i += 5)
        {
          if (!--v9)
            return 0x200000000;
        }
        v12 = (unsigned int *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
        v13 = *v12;
        v14 = *((_BYTE *)v12 + 4) == 0;
        v15 = 0x100000000;
        if (v14)
          v15 = 0;
        return v15 | v13;
      }
    }
  }
  return result;
}

uint64_t sub_1B1D15B00@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D15B18(a1, type metadata accessor for GraphScript, a2);
}

uint64_t sub_1B1D15B0C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D15B18(a1, type metadata accessor for EmitterScript, a2);
}

uint64_t sub_1B1D15B18@<X0>(unint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;

  v7 = HIDWORD(a1);
  v8 = a2(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_QWORD *)(v9 + 64))
  {
    v10 = *(_QWORD *)(v9 + 72);
    if ((_DWORD)a1 != -1)
      goto LABEL_6;
  }
  else
  {
    v10 = 0;
    if ((_DWORD)a1 != -1)
      goto LABEL_6;
  }
  if (!(_DWORD)v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
LABEL_6:
  if ((uint64_t)(a1 << 32) < (uint64_t)0xFFFFFFFF00000001)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
  if ((int)a1 >= *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
  v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if ((_DWORD)v7 != -1 && *(_DWORD *)(v11 + 12 * (int)a1 + 8) != (_DWORD)v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, 1, 1, v8);
  v13 = (unsigned int *)(v11 + 12 * (int)a1);
  return sub_1B1D1DB68(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * (int)*v13 + 32), *v13 | ((unint64_t)*((unsigned __int16 *)v13 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v13+ 2) << 32), v10, v3, a2, a3);
}

uint64_t sub_1B1D15C40(unint64_t a1)
{
  return sub_1B1D1690C(a1, sub_1B1D1E9C8);
}

double sub_1B1D15C4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v5 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1C834(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v5 + 32), *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32), 48, v2, a2).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = xmmword_1B228D260;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 40) = 0;
  }
  return result;
}

double sub_1B1D15D18@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v5 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1CA98(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v5 + 32), *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32), 72, v2, a2).n128_u64[0];
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0x300000000;
    result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 52) = 0u;
  }
  return result;
}

_QWORD *sub_1B1D15DE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D17468(a1, (_QWORD *(*)(_OWORD *__return_ptr, _QWORD, __n128))sub_1B1D1E8C0, a2);
}

uint64_t sub_1B1D15DF4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;

  if (result == 0xFFFFFFFFLL)
  {
LABEL_2:
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 1;
    goto LABEL_3;
  }
  v3 = 0;
  v7 = 1;
  if (result << 32 < (uint64_t)0xFFFFFFFF00000001)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = 0;
  v6 = 0;
  if ((int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) != -1 && *(_DWORD *)(v8 + 12 * (int)result + 8) != HIDWORD(result))
      goto LABEL_2;
    v9 = (int *)(v8 + 12 * (int)result);
    v10 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v9 + 32);
    v11 = *(_QWORD *)(v10 + 48);
    v12 = *(_QWORD *)(v11 + 16);
    if (!v12)
      goto LABEL_2;
    v13 = *((__int16 *)v9 + 2);
    v14 = (_QWORD *)(v11 + 56);
    while ((ValueMetadata *)*(v14 - 3) != &type metadata for WorldAABB)
    {
      v14 += 5;
      if (!--v12)
        goto LABEL_2;
    }
    v7 = 0;
    v15 = (uint64_t *)(*(_QWORD *)(v10 + 128) + *v14 + 32 * v13);
    v3 = *v15;
    v4 = v15[1];
    v5 = v15[2];
    v6 = v15[3];
  }
LABEL_3:
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  return result;
}

uint64_t sub_1B1D15F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v6;
  _BYTE v7[248];

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v6 = (unsigned int *)(v4 + 12 * (int)a1);
    return sub_1B1D1CB54(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v6 + 32), *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v6+ 2) << 32), 248, v2, a2);
  }
  else
  {
    sub_1B1D20020((uint64_t)v7);
    return sub_1B1A18378((uint64_t)v7, a2, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
  }
}

uint64_t sub_1B1D15FEC@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1CC84(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 112, v2, (uint64_t)a2);
  }
  else
  {
    *(_OWORD *)((char *)a2 + 89) = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1B1D160B4(unint64_t a1)
{
  return sub_1B1D193B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1F298);
}

unint64_t sub_1B1D160C0(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 2;
  result = 2;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 != -1 && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != (_DWORD)v3)
      return 2;
    v6 = (int *)(v5 + 12 * (int)a1);
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32);
    v8 = *(_QWORD *)(v7 + 48);
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
      return 2;
    v10 = *((__int16 *)v6 + 2);
    v11 = (_QWORD *)(v8 + 56);
    result = 2;
    while ((ValueMetadata *)*(v11 - 3) != &type metadata for OrientationConstraint)
    {
      v11 += 5;
      if (!--v9)
        return result;
    }
    v12 = (unsigned __int8 *)(*(_QWORD *)(v7 + 128) + *v11 + 8 * v10);
    return *v12 | ((unint64_t)*((unsigned int *)v12 + 1) << 32);
  }
  return result;
}

uint64_t sub_1B1D1619C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraDepthOfField; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double sub_1B1D1627C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v5 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1CE78(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v5 + 32), *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32), 64, v2, a2).n128_u64[0];
  }
  else
  {
    *(_QWORD *)(a2 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_BYTE *)(a2 + 56) = 2;
  }
  return result;
}

unint64_t sub_1B1D16348(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0x300000000;
  result = 0x300000000;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D1F308(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 16, v1);
  }
  return result;
}

uint64_t sub_1B1D1640C(unint64_t a1)
{
  return sub_1B1D193B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1F378);
}

uint64_t sub_1B1D16418@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1CDB8(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 112, v2, a2);
  }
  else
  {
    *(_OWORD *)(a2 + 92) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 108) = 1;
  }
  return result;
}

uint64_t sub_1B1D164E8(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 4;
  result = 4;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
    {
      v6 = (int *)(v5 + 12 * (int)a1);
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32);
      v8 = *(_QWORD *)(v7 + 48);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = *((__int16 *)v6 + 2);
        for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraToneMapping; i += 5)
        {
          if (!--v9)
            return 4;
        }
        return *(unsigned __int8 *)(*(_QWORD *)(v7 + 128) + *i + v10);
      }
    }
  }
  return result;
}

uint64_t sub_1B1D165B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1CF18(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 32, v2, a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 23) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_1B1D16674@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1CFE4(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 64, v2, (uint64_t)a2);
  }
  else
  {
    *(_OWORD *)((char *)a2 + 41) = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t sub_1B1D16738(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D1F3E8(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 32, v1);
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B1D16820(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleMassInit; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D16900(unint64_t a1)
{
  return sub_1B1D1690C(a1, sub_1B1D1F464);
}

uint64_t sub_1B1D1690C(unint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = HIDWORD(a1);
  if ((_DWORD)a1 != -1 || (result = 0, (_DWORD)v4))
  {
    result = 0;
    if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
      && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if ((_DWORD)v4 == -1 || *(_DWORD *)(v6 + 12 * (int)a1 + 8) == (_DWORD)v4)
        return a2(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32));
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D169CC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D169F0(a1, (unint64_t *)&unk_1ED4BB270, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt, a2);
}

uint64_t sub_1B1D169F0@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v19;

  v13 = HIDWORD(a1);
  sub_1B1A1B6FC(0, a2, a3, a4, a5);
  v15 = *(_QWORD *)(v14 - 8);
  if (*(_QWORD *)(v15 + 64))
  {
    v16 = *(_QWORD *)(v15 + 72);
    if ((_DWORD)a1 != -1)
      goto LABEL_6;
  }
  else
  {
    v16 = 0;
    if ((_DWORD)a1 != -1)
      goto LABEL_6;
  }
  if (!(_DWORD)v13)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a6, 1, 1, v14);
LABEL_6:
  if ((uint64_t)(a1 << 32) < (uint64_t)0xFFFFFFFF00000001)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a6, 1, 1, v14);
  if ((int)a1 >= *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a6, 1, 1, v14);
  v17 = *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if ((_DWORD)v13 != -1 && *(_DWORD *)(v17 + 12 * (int)a1 + 8) != (_DWORD)v13)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a6, 1, 1, v14);
  v19 = (unsigned int *)(v17 + 12 * (int)a1);
  return sub_1B1D1D3EC(*(_QWORD *)(*(_QWORD *)(v6 + 136) + 8 * (int)*v19 + 32), *v19 | ((unint64_t)*((unsigned __int16 *)v19 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v19+ 2) << 32), v16, v6, a2, a3, a4, a6, a5);
}

uint64_t sub_1B1D16B3C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D169F0(a1, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime, a2);
}

uint64_t sub_1B1D16B60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1D0D0(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 24, v2, a2);
  }
  else
  {
    *(_OWORD *)a2 = xmmword_1B228D250;
    *(_BYTE *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

unint64_t sub_1B1D16C28(uint64_t a1)
{
  return sub_1B1D18E7C(a1, (uint64_t (*)(_QWORD))sub_1B1D1E730);
}

unint64_t sub_1B1D16C34(uint64_t a1)
{
  return sub_1B1D18E7C(a1, (uint64_t (*)(_QWORD))sub_1B1D1F4D4);
}

uint64_t sub_1B1D16C40@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B1D1973C(a1, (uint64_t (*)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t))sub_1B1D1D1A8, a2);
}

uint64_t sub_1B1D16C4C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnID; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D16D2C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0x200000000;
  result = 0x200000000;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D1F54C(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 8, v1) & 0xFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_1B1D16DE4(unint64_t a1)
{
  return sub_1B1D192B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1F5D4);
}

uint64_t sub_1B1D16DF0(unint64_t a1)
{
  return sub_1B1D193B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1F64C);
}

uint64_t sub_1B1D16DFC(unint64_t a1)
{
  return sub_1B1D192B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1F6BC);
}

double sub_1B1D16E08@<D0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  double result;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1D298(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32), 32, v2, a2).n128_u64[0];
  }
  else
  {
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u64[1] = 2;
  }
  return result;
}

double sub_1B1D16EC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v5 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1D34C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v5 + 32), *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32), 112, v2, a2).n128_u64[0];
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0x20000000000;
    result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 89) = 0u;
  }
  return result;
}

uint64_t sub_1B1D16F98@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D169F0(a1, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime, a2);
}

uint64_t sub_1B1D16FBC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D169F0(a1, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime, a2);
}

uint64_t sub_1B1D16FE0(unint64_t a1)
{
  return sub_1B1D192B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1F734);
}

uint64_t sub_1B1D16FEC(unint64_t a1)
{
  return sub_1B1D1854C(a1, (uint64_t (*)(_QWORD))sub_1B1D1F7AC);
}

uint64_t sub_1B1D16FF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1D4FC(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 104, v2, a2);
  }
  else
  {
    *(_QWORD *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

_QWORD *sub_1B1D170C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D18834(a1, (_QWORD *(*)(_OWORD *__return_ptr, _QWORD, __n128))sub_1B1D1F83C, a2);
}

uint64_t sub_1B1D170CC(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scheduling; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D171AC(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if ((_DWORD)a1 != -1 || (result = 0, (_DWORD)v3))
  {
    result = 0;
    if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
      && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
        return sub_1B1D1F024(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 32, v1);
      else
        return 0;
    }
  }
  return result;
}

unint64_t sub_1B1D17298(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned __int8 *v12;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 5;
  result = 5;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 != -1 && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != (_DWORD)v3)
      return 5;
    v6 = (int *)(v5 + 12 * (int)a1);
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32);
    v8 = *(_QWORD *)(v7 + 48);
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
      return 5;
    v10 = *((__int16 *)v6 + 2);
    v11 = (_QWORD *)(v8 + 56);
    result = 5;
    while ((ValueMetadata *)*(v11 - 3) != &type metadata for TextureRequireMask)
    {
      v11 += 5;
      if (!--v9)
        return result;
    }
    v12 = (unsigned __int8 *)(*(_QWORD *)(v7 + 128) + *v11 + 8 * v10);
    return *v12 | ((unint64_t)*((unsigned int *)v12 + 1) << 32);
  }
  return result;
}

uint64_t sub_1B1D17374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v6;
  _BYTE v7[224];

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v6 = (unsigned int *)(v4 + 12 * (int)a1);
    return sub_1B1D1D618(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v6 + 32), *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v6+ 2) << 32), 224, v2, a2);
  }
  else
  {
    sub_1B1D200CC((uint64_t)v7);
    return sub_1B1A18378((uint64_t)v7, a2, (unint64_t *)&unk_1ED4B8020, (uint64_t)&type metadata for EmitterShape);
  }
}

_QWORD *sub_1B1D1745C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D17468(a1, (_QWORD *(*)(_OWORD *__return_ptr, _QWORD, __n128))sub_1B1D1ECB0, a2);
}

_QWORD *sub_1B1D17468@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(_OWORD *__return_ptr, _QWORD, __n128)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[4];
  char v12;

  v5 = 0uLL;
  if (result != (_QWORD *)0xFFFFFFFFLL)
  {
    v6 = 1;
    if ((_QWORD)result << 32 < (int64_t)0xFFFFFFFF00000001
      || (int)result >= *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      goto LABEL_3;
    }
    v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v10 + 12 * (int)result + 8) == HIDWORD(result))
    {
      result = a2(v11, *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(v10 + 12 * (int)result) + 32), (__n128)0);
      v5 = v11[0];
      v7 = v11[1];
      v8 = v11[2];
      v9 = v11[3];
      v6 = v12;
      goto LABEL_4;
    }
  }
  v6 = 1;
LABEL_3:
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
LABEL_4:
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v7;
  *(_OWORD *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 48) = v9;
  *(_BYTE *)(a3 + 64) = v6;
  return result;
}

uint64_t sub_1B1D17554(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  unsigned int *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0x200000000;
  result = 0x200000000;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
    {
      v6 = (int *)(v5 + 12 * (int)a1);
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32);
      v8 = *(_QWORD *)(v7 + 48);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = *((__int16 *)v6 + 2);
        for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleDrag; i += 5)
        {
          if (!--v9)
            return 0x200000000;
        }
        v12 = (unsigned int *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
        v13 = *v12;
        v14 = *((_BYTE *)v12 + 4) == 0;
        v15 = 0x100000000;
        if (v14)
          v15 = 0;
        return v15 | v13;
      }
    }
  }
  return result;
}

uint64_t sub_1B1D17638(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D1F8D4(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 32, v1);
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B1D17710(unint64_t a1)
{
  return sub_1B1D192B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1F940);
}

uint64_t sub_1B1D1771C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleLifeInit; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 12 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double sub_1B1D17804@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  double result;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1D6D4(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32), 32, v2, (uint64_t)a2).n128_u64[0];
  }
  else
  {
    *a2 = 3;
    a2[1] = 0;
    a2[2] = 0;
    a2[3] = 0;
  }
  return result;
}

double sub_1B1D178C4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v5 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1D75C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v5 + 32), *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32), 48, v2, (uint64_t)a2).n128_u64[0];
  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
    *(_QWORD *)&result = 2;
    a2[2] = xmmword_1B226E520;
  }
  return result;
}

uint64_t sub_1B1D1798C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0x200000000;
  result = 0x200000000;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D1EB50(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 20, v1);
  }
  return result;
}

uint64_t sub_1B1D17A5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1D7F0(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 40, v2, a2);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 2;
    *(_BYTE *)(a2 + 36) = 0;
    *(_DWORD *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t sub_1B1D17B24(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAngleInit; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D17C04@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1D8AC(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 80, v2, a2);
  }
  else
  {
    *(_BYTE *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1D17CC8(unint64_t a1)
{
  return sub_1B1D192B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1F9B8);
}

double sub_1B1D17CD4@<D0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  double result;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1D98C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32), 36, v2, a2).n128_u64[0];
  }
  else
  {
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u64[1] = 2;
    a2[2].n128_u32[0] = 0;
  }
  return result;
}

uint64_t sub_1B1D17D98(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D1FA30(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 12, v1);
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B1D17E5C(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D1FAD4(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 24, v1);
    return 0;
  }
  return result;
}

uint64_t sub_1B1D17F28@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) == -1)
     || *(_DWORD *)(v3 + 12 * (int)result + 8) == HIDWORD(result)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)result);
    return sub_1B1D1DA6C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32), 40, v2, a2);
  }
  else
  {
    *(_DWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1D17FE8(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  unsigned int *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0x200000000;
  result = 0x200000000;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
    {
      v6 = (int *)(v5 + 12 * (int)a1);
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32);
      v8 = *(_QWORD *)(v7 + 48);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = *((__int16 *)v6 + 2);
        for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for OrientationOverVelocity; i += 5)
        {
          if (!--v9)
            return 0x200000000;
        }
        v12 = (unsigned int *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
        v13 = *v12;
        v14 = *((_BYTE *)v12 + 4) == 0;
        v15 = 0x100000000;
        if (v14)
          v15 = 0;
        return v15 | v13;
      }
    }
  }
  return result;
}

uint64_t sub_1B1D180CC(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleTextureFrameInit; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D181AC(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      && (v6 = (int *)(v5 + 12 * (int)a1),
          v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32),
          v8 = *(_QWORD *)(v7 + 48),
          (v9 = *(_QWORD *)(v8 + 16)) != 0))
    {
      v10 = *((__int16 *)v6 + 2);
      for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAngleVelocityInit; i += 5)
      {
        if (!--v9)
          return 0;
      }
      return *(_QWORD *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D1828C(unint64_t a1)
{
  return sub_1B1D192B8(a1, (uint64_t (*)(_QWORD))sub_1B1D1FC14);
}

_QWORD *sub_1B1D18298@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D191CC(a1, (_QWORD *(*)(_OWORD *__return_ptr, _QWORD, __n128, __n128))sub_1B1D1FC8C, a2);
}

uint64_t sub_1B1D182A4(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  unsigned int *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0x200000000;
  result = 0x200000000;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
    {
      v6 = (int *)(v5 + 12 * (int)a1);
      v7 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *v6 + 32);
      v8 = *(_QWORD *)(v7 + 48);
      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v10 = *((__int16 *)v6 + 2);
        for (i = (_QWORD *)(v8 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Attach; i += 5)
        {
          if (!--v9)
            return 0x200000000;
        }
        v12 = (unsigned int *)(*(_QWORD *)(v7 + 128) + *i + 8 * v10);
        v13 = *v12;
        v14 = *((_BYTE *)v12 + 4) == 0;
        v15 = 0x100000000;
        if (v14)
          v15 = 0;
        return v15 | v13;
      }
    }
  }
  return result;
}

uint64_t sub_1B1D18388@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D15B18(a1, type metadata accessor for ParticleUpdateScript, a2);
}

uint64_t sub_1B1D18394@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D15B18(a1, type metadata accessor for ParticleInitScript, a2);
}

uint64_t sub_1B1D183A0(unint64_t a1)
{
  return sub_1B1D18464(a1, &qword_1ED4BB3C0, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8);
}

uint64_t sub_1B1D183BC(unint64_t a1)
{
  return sub_1B1D18464(a1, (unint64_t *)&unk_1ED4B9910, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
}

uint64_t sub_1B1D183D8(unint64_t a1)
{
  return sub_1B1D18464(a1, (unint64_t *)&unk_1ED4B9900, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90);
}

uint64_t sub_1B1D183F4(unint64_t a1)
{
  return sub_1B1D18464(a1, (unint64_t *)&unk_1ED4B9930, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090);
}

uint64_t sub_1B1D18410(unint64_t a1)
{
  return sub_1B1D18464(a1, (unint64_t *)&unk_1ED4BB3B0, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8);
}

uint64_t sub_1B1D1842C(unint64_t a1)
{
  return sub_1B1D18464(a1, (unint64_t *)&unk_1ED4B9940, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8);
}

uint64_t sub_1B1D18448(unint64_t a1)
{
  return sub_1B1D18464(a1, &qword_1ED4B9950, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418);
}

uint64_t sub_1B1D18464(unint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = HIDWORD(a1);
  if ((_DWORD)a1 != -1 || (result = 0, (_DWORD)v6))
  {
    result = 0;
    if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
      && (int)a1 < *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if ((_DWORD)v6 == -1 || *(_DWORD *)(v8 + 12 * (int)a1 + 8) == (_DWORD)v6)
        return sub_1B1D1FD78(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *(int *)(v8 + 12 * (int)a1) + 32), *(_DWORD *)(v8 + 12 * (int)a1), *(_WORD *)(v8 + 12 * (int)a1 + 4), 16, v4, a2, a3, a4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D18540(unint64_t a1)
{
  return sub_1B1D1854C(a1, (uint64_t (*)(_QWORD))sub_1B1D1FE44);
}

uint64_t sub_1B1D1854C(unint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = HIDWORD(a1);
  if ((_DWORD)a1 != -1 || (result = 0, (_DWORD)v4))
  {
    result = 0;
    if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
      && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if ((_DWORD)v4 == -1 || *(_DWORD *)(v6 + 12 * (int)a1 + 8) == (_DWORD)v4)
        return a2(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32));
      else
        return 0;
    }
  }
  return result;
}

unint64_t sub_1B1D18620(uint64_t a1)
{
  return sub_1B1D18E7C(a1, (uint64_t (*)(_QWORD))sub_1B1D20054);
}

uint64_t sub_1B1D1862C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v6;
  _BYTE v7[656];

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v4 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v6 = (unsigned int *)(v4 + 12 * (int)a1);
    return sub_1B1D1DC3C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v6 + 32), *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v6+ 2) << 32), 656, v2, a2);
  }
  else
  {
    sub_1B1D2004C(v7);
    return sub_1B1A18378((uint64_t)v7, a2, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
  }
}

unint64_t sub_1B1D18714(uint64_t a1)
{
  return sub_1B1D18E7C(a1, (uint64_t (*)(_QWORD))sub_1B1D2010C);
}

uint64_t sub_1B1D18720@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D169F0(a1, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime, a2);
}

uint64_t sub_1B1D18744@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v4 = 0uLL;
  if (result != 0xFFFFFFFFLL)
  {
    v5 = 2;
    if (result << 32 < (uint64_t)0xFFFFFFFF00000001
      || (int)result >= *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      goto LABEL_3;
    }
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v7 + 12 * (int)result + 8) == HIDWORD(result))
    {
      result = sub_1B1D20184(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v7 + 12 * (int)result) + 32), *(_DWORD *)(v7 + 12 * (int)result), *(_WORD *)(v7 + 12 * (int)result + 4), 48, v2, (unint64_t *)v8);
      v4 = v8[0];
      v6 = v8[1];
      v5 = v9;
      goto LABEL_4;
    }
  }
  v5 = 2;
LABEL_3:
  v6 = 0uLL;
LABEL_4:
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v5;
  return result;
}

_QWORD *sub_1B1D1881C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D18834(a1, (_QWORD *(*)(_OWORD *__return_ptr, _QWORD, __n128))sub_1B1D202AC, a2);
}

_QWORD *sub_1B1D18828@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D18834(a1, (_QWORD *(*)(_OWORD *__return_ptr, _QWORD, __n128))sub_1B1D20338, a2);
}

_QWORD *sub_1B1D18834@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(_OWORD *__return_ptr, _QWORD, __n128)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[3];
  char v11;

  v5 = 0uLL;
  if (result != (_QWORD *)0xFFFFFFFFLL)
  {
    v6 = 2;
    if ((_QWORD)result << 32 < (int64_t)0xFFFFFFFF00000001
      || (int)result >= *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      goto LABEL_3;
    }
    v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v9 + 12 * (int)result + 8) == HIDWORD(result))
    {
      result = a2(v10, *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(v9 + 12 * (int)result) + 32), (__n128)0);
      v5 = v10[0];
      v7 = v10[1];
      v8 = v10[2];
      v6 = v11;
      goto LABEL_4;
    }
  }
  v6 = 2;
LABEL_3:
  v7 = 0uLL;
  v8 = 0uLL;
LABEL_4:
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v7;
  *(_OWORD *)(a3 + 32) = v8;
  *(_BYTE *)(a3 + 48) = v6;
  return result;
}

double sub_1B1D1891C@<D0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  double result;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v4 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1DD38(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v4 + 32), *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32), 28, v2, a2).n128_u64[0];
  }
  else
  {
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2[1].n128_u8[8] = 2;
  }
  return result;
}

uint64_t sub_1B1D189E0(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D203C4(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 32, v1);
    else
      return 0;
  }
  return result;
}

unint64_t sub_1B1D18AC8(uint64_t a1)
{
  return sub_1B1D18E7C(a1, (uint64_t (*)(_QWORD))sub_1B1D20438);
}

uint64_t sub_1B1D18AD4(unint64_t a1)
{
  return sub_1B1D18CB0(a1, (uint64_t (*)(_QWORD))sub_1B1D20538);
}

uint64_t sub_1B1D18AE0@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[3];

  v4 = 0uLL;
  if (result == 0xFFFFFFFFLL
    || result << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)result >= *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = 0uLL;
    v7 = 0uLL;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || (v6 = 0uLL, v7 = 0uLL, *(_DWORD *)(v5 + 12 * (int)result + 8) == HIDWORD(result)))
    {
      result = sub_1B1D1EBD4(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v5 + 12 * (int)result) + 32), *(_DWORD *)(v5 + 12 * (int)result), *(_WORD *)(v5 + 12 * (int)result + 4), 48, v2, (uint64_t)v8);
      v4 = v8[0];
      v6 = v8[1];
      v7 = v8[2];
    }
  }
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v7;
  return result;
}

uint64_t sub_1B1D18BBC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  char v11;

  v4 = 0uLL;
  if (result != 0xFFFFFFFFLL)
  {
    v5 = 0;
    v6 = 2;
    if (result << 32 < (uint64_t)0xFFFFFFFF00000001
      || (int)result >= *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      goto LABEL_3;
    }
    v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v8 + 12 * (int)result + 8) == HIDWORD(result))
    {
      result = sub_1B1D205E0(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v8 + 12 * (int)result) + 32), *(_DWORD *)(v8 + 12 * (int)result), *(_WORD *)(v8 + 12 * (int)result + 4), 48, v2, (uint64_t)v9);
      v4 = v9[0];
      v7 = v9[1];
      v5 = v10;
      v6 = v11;
      goto LABEL_4;
    }
  }
  v5 = 0;
  v6 = 2;
LABEL_3:
  v7 = 0uLL;
LABEL_4:
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 32) = v5;
  *(_BYTE *)(a2 + 40) = v6;
  return result;
}

uint64_t sub_1B1D18CA4(unint64_t a1)
{
  return sub_1B1D18CB0(a1, (uint64_t (*)(_QWORD))sub_1B1D2066C);
}

uint64_t sub_1B1D18CB0(unint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = HIDWORD(a1);
  if ((_DWORD)a1 != -1 || (result = 0, (_DWORD)v4))
  {
    result = 0;
    if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
      && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if ((_DWORD)v4 == -1 || *(_DWORD *)(v6 + 12 * (int)a1 + 8) == (_DWORD)v4)
        return a2(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32));
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_1B1D18D94(unint64_t a1)
{
  return sub_1B1D193B8(a1, (uint64_t (*)(_QWORD))sub_1B1D20710);
}

double sub_1B1D18DA0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v5 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1DEB8(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v5 + 32), *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32), 64, v2, a2).n128_u64[0];
  }
  else
  {
    *(_QWORD *)a2 = 3;
    result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_DWORD *)(a2 + 56) = 0;
  }
  return result;
}

unint64_t sub_1B1D18E70(uint64_t a1)
{
  return sub_1B1D18E7C(a1, (uint64_t (*)(_QWORD))sub_1B1D20810);
}

unint64_t sub_1B1D18E7C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;

  if (a1 == 0xFFFFFFFFLL)
  {
LABEL_2:
    v3 = 0;
    LOBYTE(v4) = 1;
    return v3 | ((unint64_t)v4 << 32);
  }
  v3 = 0;
  LOBYTE(v4) = 1;
  if (a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v6 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      v7 = a2(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32));
      v4 = HIDWORD(v7) & 1;
      v3 = v7;
      return v3 | ((unint64_t)v4 << 32);
    }
    goto LABEL_2;
  }
  return v3 | ((unint64_t)v4 << 32);
}

double sub_1B1D18F4C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v5 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1DF5C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v5 + 32), *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32), 48, v2, a2).n128_u64[0];
  }
  else
  {
    *(_QWORD *)a2 = 4;
    result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_DWORD *)(a2 + 40) = 0;
  }
  return result;
}

double sub_1B1D19018@<D0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  unsigned int *v5;

  if (a1 != 0xFFFFFFFFLL
    && a1 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a1) == -1)
     || *(_DWORD *)(v3 + 12 * (int)a1 + 8) == HIDWORD(a1)))
  {
    v5 = (unsigned int *)(v3 + 12 * (int)a1);
    *(_QWORD *)&result = sub_1B1D1DFFC(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v5 + 32), *v5 | ((unint64_t)*((unsigned __int16 *)v5 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 32), 44, v2, a2).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = (__n128)xmmword_1B228CCC0;
    a2[1].n128_u64[1] = 0;
    a2[2].n128_u64[0] = 0;
    a2[1].n128_u64[0] = 0;
    a2[2].n128_u32[2] = 0;
  }
  return result;
}

uint64_t sub_1B1D190E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D190FC(a1, (uint64_t (*)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t))sub_1B1D1E0A4, a2);
}

uint64_t sub_1B1D190F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D190FC(a1, (uint64_t (*)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t))sub_1B1D1E150, a2);
}

uint64_t sub_1B1D190FC@<X0>(uint64_t result@<X0>, uint64_t (*a2)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries),
         v5 = *(unsigned int *)(v4 + 12 * (int)result + 8),
         HIDWORD(result) == -1)
     || (_DWORD)v5 == HIDWORD(result)))
  {
    v6 = (unsigned int *)(v4 + 12 * (int)result);
    return a2(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * (int)*v6 + 32), *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v6+ 2) << 32), v5, 40, v3);
  }
  else
  {
    *(_BYTE *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

_QWORD *sub_1B1D191C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D191CC(a1, (_QWORD *(*)(_OWORD *__return_ptr, _QWORD, __n128, __n128))sub_1B1D20954, a2);
}

_QWORD *sub_1B1D191CC@<X0>(_QWORD *result@<X0>, _QWORD *(*a2)(_OWORD *__return_ptr, _QWORD, __n128, __n128)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  _OWORD v9[2];
  char v10;

  v5 = xmmword_1B2244C80;
  v6 = 0uLL;
  if (result == (_QWORD *)0xFFFFFFFFLL)
  {
LABEL_2:
    v7 = 0;
    goto LABEL_3;
  }
  v7 = 0;
  if ((_QWORD)result << 32 >= (int64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v8 + 12 * (int)result + 8) == HIDWORD(result))
    {
      result = a2(v9, *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(v8 + 12 * (int)result) + 32), (__n128)xmmword_1B2244C80, (__n128)0);
      v5 = v9[0];
      v6 = v9[1];
      v7 = v10;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
LABEL_3:
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  *(_BYTE *)(a3 + 32) = v7;
  return result;
}

uint64_t sub_1B1D192AC(unint64_t a1)
{
  return sub_1B1D192B8(a1, (uint64_t (*)(_QWORD))sub_1B1D20B1C);
}

uint64_t sub_1B1D192B8(unint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v4 == -1 || *(_DWORD *)(v6 + 12 * (int)a1 + 8) == (_DWORD)v4)
      return a2(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32));
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B1D193AC(unint64_t a1)
{
  return sub_1B1D193B8(a1, (uint64_t (*)(_QWORD))sub_1B1D20B94);
}

uint64_t sub_1B1D193B8(unint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  unint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v4 == -1 || *(_DWORD *)(v6 + 12 * (int)a1 + 8) == (_DWORD)v4)
      return a2(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v6 + 12 * (int)a1) + 32));
    else
      return 0;
  }
  return result;
}

uint64_t sub_1B1D1949C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v4 = xmmword_1B2244C80;
  v5 = 0uLL;
  if (result == 0xFFFFFFFFLL)
  {
LABEL_2:
    v6 = 0;
    goto LABEL_3;
  }
  v6 = 0;
  if (result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v7 + 12 * (int)result + 8) == HIDWORD(result))
    {
      result = sub_1B1D20C04(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v7 + 12 * (int)result) + 32), *(_DWORD *)(v7 + 12 * (int)result), *(_WORD *)(v7 + 12 * (int)result + 4), 40, v2, (uint64_t)v8);
      v5 = v8[0];
      v4 = v8[1];
      v6 = v9;
      goto LABEL_3;
    }
    goto LABEL_2;
  }
LABEL_3:
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t sub_1B1D19578@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v4 = 0uLL;
  if (result != 0xFFFFFFFFLL)
  {
    v5 = 0;
    if (result << 32 < (uint64_t)0xFFFFFFFF00000001
      || (int)result >= *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      goto LABEL_3;
    }
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v7 + 12 * (int)result + 8) == HIDWORD(result))
    {
      result = sub_1B1D1F0D0(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v7 + 12 * (int)result) + 32), *(_DWORD *)(v7 + 12 * (int)result), *(_WORD *)(v7 + 12 * (int)result + 4), 40, v2, v8);
      v4 = v8[0];
      v6 = v8[1];
      v5 = v9;
      goto LABEL_4;
    }
  }
  v5 = 0;
LABEL_3:
  v6 = 0uLL;
LABEL_4:
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 32) = v5;
  return result;
}

uint64_t sub_1B1D19650@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  char v4;
  __int128 v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 *v13;

  v3 = 0uLL;
  if (result == 0xFFFFFFFFLL)
    goto LABEL_2;
  v4 = 1;
  if (result << 32 < (uint64_t)0xFFFFFFFF00000001
    || (int)result >= *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    goto LABEL_3;
  }
  if ((v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(result) != -1)
    && *(_DWORD *)(v6 + 12 * (int)result + 8) != HIDWORD(result)
    || (v7 = (int *)(v6 + 12 * (int)result),
        v8 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v7 + 32),
        v9 = *(_QWORD *)(v8 + 48),
        (v10 = *(_QWORD *)(v9 + 16)) == 0))
  {
LABEL_2:
    v4 = 1;
LABEL_3:
    v5 = 0uLL;
    goto LABEL_4;
  }
  v11 = *((__int16 *)v7 + 2);
  v12 = (_QWORD *)(v9 + 56);
  while ((ValueMetadata *)*(v12 - 3) != &type metadata for RenderSettings)
  {
    v12 += 5;
    if (!--v10)
      goto LABEL_2;
  }
  v4 = 0;
  v13 = (__int128 *)(*(_QWORD *)(v8 + 128) + *v12 + 32 * v11);
  v3 = *v13;
  v5 = v13[1];
LABEL_4:
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_1B1D19730@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B1D1973C(a1, (uint64_t (*)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t))sub_1B1D1E1FC, a2);
}

uint64_t sub_1B1D1973C@<X0>(uint64_t result@<X0>, uint64_t (*a2)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t)@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    && ((v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries),
         v5 = *(unsigned int *)(v4 + 12 * (int)result + 8),
         HIDWORD(result) == -1)
     || (_DWORD)v5 == HIDWORD(result)))
  {
    v6 = (unsigned int *)(v4 + 12 * (int)result);
    return a2(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * (int)*v6 + 32), *v6 | ((unint64_t)*((unsigned __int16 *)v6 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v6+ 2) << 32), v5, 64, v3);
  }
  else
  {
    a3[2] = 0u;
    a3[3] = 0u;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1B1D19800(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == (_DWORD)v3)
      return sub_1B1D20CD4(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * (int)a1) + 32), *(_DWORD *)(v5 + 12 * (int)a1), *(_WORD *)(v5 + 12 * (int)a1 + 4), 16, v1);
    return 0;
  }
  return result;
}

void sub_1B1D198D0(char a1, void (*a2)(_BYTE *))
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  _QWORD v7[3];
  char v8;
  _BYTE v9[32];

  if ((a1 & 1) != 0)
  {
    v6 = 0;
    v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (!v5)
      goto LABEL_10;
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  if ((a1 & 2) == 0)
  {
    if (!v5)
    {
      v6 = 0;
      goto LABEL_10;
    }
    v6 = *(_BYTE *)(v5 + 80);
    goto LABEL_8;
  }
  v6 = v5 != 0;
  if (v5)
  {
LABEL_8:
    MEMORY[0x1B5E240CC](v5 + 48);
    v5 = *(_QWORD *)(v5 + 56);
  }
LABEL_10:
  swift_unknownObjectUnownedInit();
  v7[0] = v2;
  v7[2] = v5;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  v8 = v6;
  sub_1B1A02530((uint64_t)v7, (uint64_t)v9);
  a2(v9);
  sub_1B1A0256C((uint64_t)v9);
  sub_1B1E31340((a1 & 4) == 0);
}

uint64_t sub_1B1D199FC(uint64_t a1, double a2)
{
  void (*v3)(uint64_t, double);
  uint64_t v4;

  v3 = *(void (**)(uint64_t, double))(a1 + 32);
  v4 = swift_retain();
  v3(v4, a2);
  return swift_release();
}

uint64_t sub_1B1D19A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(unsigned int *)(v0 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity);
  v1 = *(unsigned int *)(v0 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4);
  if ((_DWORD)v1)
    v3 = 0;
  else
    v3 = v2 == 0xFFFFFFFFLL;
  v4 = v2 | (v1 << 32);
  if (v3)
    return 0;
  else
    return v4;
}

uint64_t sub_1B1D19A88(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t inited;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BYTE v32[32];

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned) == (result & 1))
    return result;
  v2 = v1;
  v3 = result;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned) = result & 1;
  type metadata accessor for RemapContext();
  inited = swift_initStackObject();
  v5 = MEMORY[0x1E0DEE9D8];
  sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
  v6 = sub_1B1B7DC84(v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 24) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(inited + 32) = v6;
  *(_BYTE *)(inited + 16) = 0;
  if (!swift_weakLoadStrong())
  {
    if (*(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager))
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  v25 = v2;
  sub_1B1DA67D0(*(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity), inited);
  swift_release();
  v7 = *(_QWORD *)(inited + 24);
  v8 = *(_QWORD *)(v7 + 64);
  v26 = v7 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v24 = OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager;
  v12 = 0;
  v27 = (unint64_t)(v9 + 63) >> 6;
  v28 = swift_bridgeObjectRetain();
  v13 = v3;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_29;
    }
    v18 = v12 + 1;
    if (v12 + 1 >= v27)
      goto LABEL_35;
    v19 = *(_QWORD *)(v26 + 8 * v18);
    if (!v19)
    {
      v18 = v12 + 2;
      if (v12 + 2 >= v27)
        goto LABEL_35;
      v19 = *(_QWORD *)(v26 + 8 * v18);
      if (!v19)
      {
        v18 = v12 + 3;
        if (v12 + 3 >= v27)
          goto LABEL_35;
        v19 = *(_QWORD *)(v26 + 8 * v18);
        if (!v19)
        {
          v18 = v12 + 4;
          if (v12 + 4 >= v27)
            goto LABEL_35;
          v19 = *(_QWORD *)(v26 + 8 * v18);
          if (!v19)
          {
            v18 = v12 + 5;
            if (v12 + 5 >= v27)
              goto LABEL_35;
            v19 = *(_QWORD *)(v26 + 8 * v18);
            if (!v19)
            {
              v18 = v12 + 6;
              if (v12 + 6 >= v27)
                goto LABEL_35;
              v19 = *(_QWORD *)(v26 + 8 * v18);
              if (!v19)
                break;
            }
          }
        }
      }
    }
LABEL_28:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v18 << 6);
    v12 = v18;
LABEL_29:
    v20 = (unsigned int *)(*(_QWORD *)(v28 + 48) + 8 * v17);
    v22 = *v20;
    v21 = v20[1];
    Strong = swift_weakLoadStrong();
    if (!Strong)
    {
      Strong = *(_QWORD *)(v25 + v24);
      if (Strong)
      {
        swift_retain();
      }
      else
      {
        type metadata accessor for EntityManager();
        swift_allocObject();
        Strong = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
      }
    }
    v15 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    if (v15)
    {
      v14 = *(_BYTE *)(v15 + 80);
      MEMORY[0x1B5E240CC](v15 + 48);
      v15 = *(_QWORD *)(v15 + 56);
    }
    else
    {
      v14 = 0;
    }
    v30 = 0;
    swift_unknownObjectUnownedInit();
    v29 = Strong;
    v30 = v15;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    v31 = v14;
    sub_1B1A02530((uint64_t)&v29, (uint64_t)v32);
    sub_1B1E2D4B8(v22 | (v21 << 32), v13 & 1);
    sub_1B1A0256C((uint64_t)v32);
    sub_1B1E31340(1);
    swift_release();
  }
  while (v27 - 7 != v12)
  {
    v19 = *(_QWORD *)(v28 + 120 + 8 * v12++);
    if (v19)
    {
      v18 = v12 + 6;
      goto LABEL_28;
    }
  }
LABEL_35:
  swift_release();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id VFXEntityObject.__allocating_init(_:sharedEntityManager:)(unint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return VFXEntityObject.init(_:sharedEntityManager:)(a1, a2);
}

id VFXEntityObject.init(_:sharedEntityManager:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  int v4;
  objc_class *v5;
  _BYTE *v6;
  int *v7;
  id v8;
  objc_super v10;
  _BYTE v11[32];

  v3 = HIDWORD(a1);
  if (a1)
    v4 = a1;
  else
    v4 = -1;
  sub_1B1A02864(a2, (uint64_t)v11);
  type metadata accessor for EntityManager();
  swift_dynamicCast();
  v5 = (objc_class *)type metadata accessor for VFXEntityObject();
  v6 = objc_allocWithZone(v5);
  swift_weakInit();
  *(_QWORD *)&v6[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager] = 0;
  v6[OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned] = 0;
  v7 = (int *)&v6[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
  *v7 = v4;
  v7[1] = v3;
  swift_weakAssign();
  v10.receiver = v6;
  v10.super_class = v5;
  v8 = objc_msgSendSuper2(&v10, sel_init);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a2);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v8;
}

uint64_t type metadata accessor for VFXEntityObject()
{
  return objc_opt_self();
}

id VFXEntityObject.__allocating_init(_:privateEntityManager:)(unint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return VFXEntityObject.init(_:privateEntityManager:)(a1, a2);
}

id VFXEntityObject.init(_:privateEntityManager:)(unint64_t a1, uint64_t a2)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  objc_class *v6;
  _BYTE *v7;
  uint64_t v8;
  int *v9;
  id v10;
  objc_super v12;
  uint64_t v13;
  _BYTE v14[32];

  v3 = HIDWORD(a1);
  if (a1)
    v4 = a1;
  else
    v4 = -1;
  sub_1B1A02864(a2, (uint64_t)v14);
  type metadata accessor for EntityManager();
  swift_dynamicCast();
  v5 = v13;
  v6 = (objc_class *)type metadata accessor for VFXEntityObject();
  v7 = objc_allocWithZone(v6);
  swift_weakInit();
  v8 = OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager;
  v7[OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned] = 0;
  v9 = (int *)&v7[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
  *v9 = v4;
  v9[1] = v3;
  *(_QWORD *)&v7[v8] = v5;
  v12.receiver = v7;
  v12.super_class = v6;
  v10 = objc_msgSendSuper2(&v12, sel_init);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a2);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v10;
}

uint64_t sub_1B1D1A148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t *))
{
  uint64_t v8;

  swift_unknownObjectRetain();
  sub_1B22292EC();
  swift_unknownObjectRelease();
  return a5(a3, &v8);
}

id VFXEntityObject.__deallocating_deinit()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t inited;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  id v60;
  void *v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void *v70;
  id v71;
  uint64_t v72;
  _QWORD *v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  id v77;
  _QWORD *v78;
  char v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  void *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  _QWORD *v92;
  objc_class *v93;
  _QWORD v95[5];
  id v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  uint64_t *v110;
  _BYTE *v111;
  uint64_t v112;
  __int128 v113;
  _QWORD v114[8];
  uint64_t aBlock;
  uint64_t v116;
  void *v117;
  void *v118;
  uint64_t (*v119)();
  _QWORD *v120;
  char v121;
  uint64_t v122;
  _BYTE v123[24];
  objc_super v124;

  v1 = sub_1B222847C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B22284AC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v104 = (char *)v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_95;
  v11 = Strong;
  v97 = v7;
  v98 = v6;
  v99 = v5;
  v100 = v2;
  v101 = v1;
  v12 = MEMORY[0x1E0DEE9D8];
  v13 = sub_1B1B95EBC(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for RemapContext();
  inited = swift_initStackObject();
  sub_1B1B95EBC(v12);
  v15 = sub_1B1B7DC84(v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 24) = v13;
  *(_QWORD *)(inited + 32) = v15;
  *(_BYTE *)(inited + 16) = 0;
  v103 = v0;
  sub_1B1DA67D0(*(_QWORD *)&v0[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity], inited);
  v102 = inited;
  v16 = *(_QWORD *)(inited + 24);
  v17 = *(_QWORD *)(v16 + 64);
  v107 = v16 + 64;
  v18 = 1 << *(_BYTE *)(v16 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v21 = OBJC_IVAR____TtC3VFX13EntityManager_replicationStream;
  v22 = (unint64_t)(v18 + 63) >> 6;
  v110 = &v116;
  v111 = v123;
  swift_bridgeObjectRetain();
  v112 = 0;
  v109 = v22;
  v95[0] = v22 - 7;
  v108 = v16;
  v106 = v21;
  while (1)
  {
    if (v20)
    {
      v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v25 = v24 | (v112 << 6);
      goto LABEL_25;
    }
    v26 = v112;
    v27 = v112 + 1;
    if (v112 + 1 >= v109)
      goto LABEL_93;
    v28 = *(_QWORD *)(v107 + 8 * v27);
    if (!v28)
    {
      v27 = v112 + 2;
      if (v112 + 2 >= v109)
        goto LABEL_93;
      v28 = *(_QWORD *)(v107 + 8 * v27);
      if (!v28)
      {
        v27 = v112 + 3;
        if (v112 + 3 >= v109)
          goto LABEL_93;
        v28 = *(_QWORD *)(v107 + 8 * v27);
        if (!v28)
        {
          v27 = v112 + 4;
          if (v112 + 4 >= v109)
            goto LABEL_93;
          v28 = *(_QWORD *)(v107 + 8 * v27);
          if (!v28)
          {
            v27 = v112 + 5;
            if (v112 + 5 >= v109)
              goto LABEL_93;
            v28 = *(_QWORD *)(v107 + 8 * v27);
            if (!v28)
            {
              v27 = v112 + 6;
              if (v112 + 6 >= v109)
              {
LABEL_93:
                swift_release();
                swift_release();
                v0 = v103;
                goto LABEL_94;
              }
              v28 = *(_QWORD *)(v107 + 8 * v27);
              if (!v28)
                break;
            }
          }
        }
      }
    }
LABEL_24:
    v20 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v27 << 6);
    v112 = v27;
LABEL_25:
    *(_QWORD *)&v23 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v25);
    v113 = v23;
    v29 = *(_QWORD *)(v11 + v21);
    if (v29)
    {
      v30 = *(_BYTE *)(v29 + 80);
      MEMORY[0x1B5E240CC](v29 + 48);
      v29 = *(_QWORD *)(v29 + 56);
    }
    else
    {
      v30 = 0;
    }
    v117 = 0;
    swift_unknownObjectUnownedInit();
    aBlock = v11;
    v117 = (void *)v29;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    LOBYTE(v118) = v30;
    sub_1B1A02530((uint64_t)&aBlock, (uint64_t)&v122);
    v31 = v113;
    v32 = DWORD1(v113);
    if ((_DWORD)v113 != -1 || DWORD1(v113) != 0)
    {
      v34 = v122;
      swift_unownedRetainStrong();
      swift_release();
      v35 = swift_unknownObjectUnownedLoadStrong();
      if (!v35)
      {
LABEL_53:
        swift_unownedRetainStrong();
        sub_1B1DA4B24(v31 | (v32 << 32));
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        if (v123[16] == 1)
        {
          swift_unownedRetainStrong();
          aBlock = v113;
          v121 = 4;
          v45 = *(_QWORD *)(v34 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
          if (v45 && *(_BYTE *)(v45 + 81) == 1 && *(_QWORD *)(v45 + 24) && swift_weakLoadStrong())
          {
            swift_retain();
            swift_unknownObjectRetain();
            swift_release();
            sub_1B1C18F3C((uint64_t)&aBlock, (uint64_t)v114);
            v46 = *(_QWORD **)(v45 + 16);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v45 + 16) = v46;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v46 = sub_1B1C62F04(0, v46[2] + 1, 1, v46);
              *(_QWORD *)(v45 + 16) = v46;
            }
            v49 = v46[2];
            v48 = v46[3];
            if (v49 >= v48 >> 1)
            {
              v46 = sub_1B1C62F04(v48 > 1, v49 + 1, 1, v46);
              *(_QWORD *)(v45 + 16) = v46;
            }
            v46[2] = v49 + 1;
            sub_1B1C18F78((uint64_t)v114, (uint64_t)&v46[8 * v49 + 4]);
            swift_release();
            swift_unknownObjectRelease();
          }
          swift_release();
          sub_1B1ADF058((uint64_t)&aBlock);
        }
        goto LABEL_66;
      }
      v36 = v35;
      if ((_DWORD)v31 == -1)
      {
        if (!(_DWORD)v32)
          goto LABEL_46;
        swift_retain();
      }
      else
      {
        v37 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
        swift_retain();
        if ((v31 & 0x80000000) == 0 && *(_QWORD *)(v34 + v37 + 8) > (int)v31)
        {
          v38 = *(_QWORD *)(v34 + v37);
          if ((_DWORD)v32 == -1 || *(_DWORD *)(v38 + 12 * (int)v31 + 8) == (_DWORD)v32)
          {
            v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 80)
                                                    + 8 * *(__int16 *)(v38 + 12 * (int)v31 + 6)
                                                    + 32)
                                        + 16)
                            + 32);
            swift_retain();
            swift_release();
            v41 = *(_QWORD *)(v40 + 16);
            if (v41)
              goto LABEL_47;
            goto LABEL_42;
          }
        }
      }
      swift_release();
LABEL_46:
      v40 = MEMORY[0x1E0DEE9D8];
      v41 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v41)
      {
LABEL_47:
        swift_bridgeObjectRetain();
        v42 = v40 + 40;
        while (((*(uint64_t (**)(void))(*(_QWORD *)v42 + 24))() & 1) == 0)
        {
          v42 += 16;
          if (!--v41)
          {
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease_n();
            goto LABEL_52;
          }
        }
        swift_bridgeObjectRelease_n();
        v43 = v36 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
        v44 = type metadata accessor for ScriptingConfiguration();
        ++*(_QWORD *)(v43 + *(int *)(v44 + 36));
        swift_unknownObjectRelease();
        goto LABEL_52;
      }
LABEL_42:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
LABEL_52:
      v16 = v108;
      v21 = v106;
      goto LABEL_53;
    }
LABEL_66:
    sub_1B1A0256C((uint64_t)&v122);
    v50 = *(_QWORD **)(v11 + v21);
    if (v50)
    {
      if (*(_QWORD *)(v50[2] + 16))
      {
        v51 = swift_weakLoadStrong();
        if (v51)
        {
          v52 = v51;
          v53 = v50[3];
          if (v53)
          {
            v54 = v50[4];
            v55 = MEMORY[0x1B5E240CC](v50 + 8);
            v56 = v50[9];
            v57 = v50[2];
            v50[2] = MEMORY[0x1E0DEE9D8];
            v58 = (_QWORD *)swift_allocObject();
            v58[2] = v52;
            v58[3] = v57;
            v58[4] = v53;
            v58[5] = v54;
            v58[6] = v55;
            v58[7] = v56;
            v59 = (void *)v50[11];
            v60 = v59;
            if (v59)
            {
              v61 = v60;
              *(_QWORD *)&v113 = objc_opt_self();
              v62 = swift_allocObject();
              *(_QWORD *)(v62 + 16) = sub_1B1D1EA74;
              *(_QWORD *)(v62 + 24) = v58;
              v119 = sub_1B1CB734C;
              v120 = (_QWORD *)v62;
              aBlock = MEMORY[0x1E0C809B0];
              v116 = 1107296256;
              v117 = sub_1B1D199FC;
              v118 = &unk_1E63D2A28;
              v63 = _Block_copy(&aBlock);
              swift_unknownObjectRetain_n();
              swift_retain();
              swift_retain();
              swift_unknownObjectRetain();
              v64 = v61;
              swift_retain();
              swift_release();
              v65 = v108;
              objc_msgSend((id)v113, sel_postCommandWithContext_object_applyBlock_, v64, 0, v63);
              swift_release();
              swift_release();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              v16 = v65;
              swift_release();
              _Block_release(v63);

              goto LABEL_72;
            }
            v66 = swift_allocObject();
            *(_QWORD *)(v66 + 16) = sub_1B1D1EA74;
            *(_QWORD *)(v66 + 24) = v58;
            *(_QWORD *)&v113 = v66;
            v67 = *(_QWORD *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
            v68 = v52;
            if (v67)
            {
              swift_unknownObjectRetain_n();
              swift_retain();
              swift_retain();
              swift_unknownObjectRetain();
              swift_retain();
              swift_retain();
              os_unfair_recursive_lock_lock_with_options();
              v21 = v106;
              v16 = v108;
              if (*(_BYTE *)(v67 + 120) == 1)
              {
                os_unfair_recursive_lock_unlock();
                swift_release();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_release();
                goto LABEL_91;
              }
              v105 = v55;
              v72 = swift_allocObject();
              *(_QWORD *)(v72 + 16) = sub_1B1CB734C;
              *(_QWORD *)(v72 + 24) = v113;
              v73 = *(_QWORD **)(v67 + 72);
              swift_retain();
              v74 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v67 + 72) = v73;
              if ((v74 & 1) == 0)
              {
                v73 = sub_1B1C62B5C(0, v73[2] + 1, 1, v73);
                *(_QWORD *)(v67 + 72) = v73;
              }
              v76 = v73[2];
              v75 = v73[3];
              v77 = (id)(v76 + 1);
              if (v76 >= v75 >> 1)
              {
                v96 = (id)(v76 + 1);
                v92 = sub_1B1C62B5C(v75 > 1, v76 + 1, 1, v73);
                v77 = v96;
                v73 = v92;
              }
              v73[2] = v77;
              v78 = &v73[2 * v76];
              v78[4] = sub_1B1A0FDB0;
              v78[5] = v72;
              *(_QWORD *)(v67 + 72) = v73;
              os_unfair_recursive_lock_unlock();
              os_unfair_recursive_lock_lock_with_options();
              v79 = *(_BYTE *)(v67 + 152);
              os_unfair_recursive_lock_unlock();
              if ((v79 & 1) != 0)
              {
                swift_release();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_release();
                goto LABEL_90;
              }
              v91 = *(_QWORD *)(v67 + 16);
              objc_msgSend(*(id *)(v91 + 16), sel_lock);
              *(_BYTE *)(v91 + 24) = 1;
              objc_msgSend(*(id *)(v91 + 16), sel_signal);
              objc_msgSend(*(id *)(v91 + 16), sel_unlock);
              swift_release();
              swift_release();
              swift_release();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_release();
              swift_release();
              v16 = v108;
LABEL_72:
              v21 = v106;
            }
            else
            {
              v69 = *(_BYTE *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated);
              v70 = *(void **)(v52 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated + 8);
              swift_unknownObjectRetain_n();
              swift_retain();
              swift_retain();
              swift_unknownObjectRetain();
              swift_retain();
              v71 = v70;
              objc_msgSend(v71, sel_lock);
              objc_msgSend(v71, sel_unlock);

              v21 = v106;
              v16 = v108;
              if ((v69 & 1) != 0)
              {
                swift_release();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                goto LABEL_91;
              }
              v105 = v55;
              v80 = *(void **)(v68 + OBJC_IVAR____TtC3VFX13EntityManager_asyncQueue);
              v81 = (_QWORD *)swift_allocObject();
              v81[2] = v68;
              v81[3] = sub_1B1CB734C;
              v81[4] = v113;
              v82 = qword_1ED4BF430;
              swift_retain();
              swift_retain();
              v96 = v80;
              if (v82 != -1)
                swift_once();
              v95[3] = v68;
              v83 = qword_1ED4BF658;
              swift_retain();
              if (v83 != -1)
                swift_once();
              v84 = qword_1ED4D0FD0;
              swift_retain();
              swift_release();
              v85 = (_QWORD *)swift_allocObject();
              v95[4] = v84;
              v85[2] = v84;
              v85[3] = sub_1B1D1EA88;
              v85[4] = v81;
              v119 = sub_1B1D1EA98;
              v120 = v85;
              aBlock = MEMORY[0x1E0C809B0];
              v116 = 1107296256;
              v117 = sub_1B17915D0;
              v118 = &unk_1E63D47B8;
              v86 = _Block_copy(&aBlock);
              swift_retain();
              swift_retain();
              v87 = v104;
              sub_1B2228494();
              v114[0] = MEMORY[0x1E0DEE9D8];
              v95[1] = sub_1B19E52CC((unint64_t *)&qword_1ED4B7290, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
              sub_1B179157C();
              sub_1B19E52CC((unint64_t *)&qword_1ED4B72B0, (uint64_t (*)(uint64_t))sub_1B179157C, MEMORY[0x1E0DEAF38]);
              v88 = v99;
              v95[2] = v81;
              v89 = v101;
              sub_1B2229364();
              v90 = v96;
              MEMORY[0x1B5E20AFC](0, v87, v88, v86);
              _Block_release(v86);
              swift_release();
              (*(void (**)(char *, uint64_t))(v100 + 8))(v88, v89);
              (*(void (**)(char *, uint64_t))(v97 + 8))(v87, v98);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_release();

              swift_release();
              swift_release();
LABEL_90:
              v16 = v108;
              v21 = v106;
LABEL_91:
              swift_release();
              swift_release();
              swift_release();
            }
          }
          else
          {
            swift_release();
            v16 = v108;
          }
        }
      }
    }
  }
  v0 = v103;
  while (v95[0] != v26)
  {
    v28 = *(_QWORD *)(v16 + 8 * v26++ + 120);
    if (v28)
    {
      v27 = v26 + 6;
      goto LABEL_24;
    }
  }
  swift_release();
  swift_release();
LABEL_94:
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_95:
  v93 = (objc_class *)type metadata accessor for VFXEntityObject();
  v124.receiver = v0;
  v124.super_class = v93;
  return objc_msgSendSuper2(&v124, sel_dealloc);
}

uint64_t sub_1B1D1B140@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Strong;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity);
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    Strong = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager);
    if (Strong)
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      Strong = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  result = swift_release();
  a1[3] = &type metadata for EntityInstance;
  *a1 = v3;
  a1[1] = Strong;
  return result;
}

id sub_1B1D1B204()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  _BYTE *v6;
  uint64_t v7;
  id v8;
  objc_super v10;

  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    Strong = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager);
    if (Strong)
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      Strong = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  type metadata accessor for EntityManager();
  swift_allocObject();
  v2 = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
  v3 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned);
  sub_1B1D19A88(0);
  v4 = sub_1B1F02F1C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity), Strong, 1, **(_QWORD **)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues));
  sub_1B1D19A88(v3);
  v5 = (objc_class *)type metadata accessor for VFXEntityObject();
  v6 = objc_allocWithZone(v5);
  swift_weakInit();
  v7 = OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager;
  v6[OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity] = v4;
  *(_QWORD *)&v6[v7] = v2;
  v10.receiver = v6;
  v10.super_class = v5;
  v8 = objc_msgSendSuper2(&v10, sel_init);
  swift_release();
  return v8;
}

uint64_t sub_1B1D1B3A0()
{
  uint64_t v0;
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    result = swift_release();
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned) & 1) == 0)
      return sub_1B1D19A88(1);
  }
  return result;
}

uint64_t sub_1B1D1B3E4(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t Strong;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  Strong = swift_weakLoadStrong();
  if (Strong && (v5 = Strong, result = swift_release(), v5 == a1))
  {
    if (v2[OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned] == 1)
      return sub_1B1D19A88(0);
  }
  else
  {
    v7 = swift_weakLoadStrong();
    swift_release();
    if (v7)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v8 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v16 = 0;
      swift_retain();
      sub_1B1F1AD70(v8, &v16, 0xD000000000000083, 0x80000001B2338DD0);
      swift_release();
      swift_release();
    }
    if (swift_weakLoadStrong())
    {
      swift_release();
      if ((v2[OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned] & 1) == 0)
        sub_1B1D19A88(1);
    }
    if (v2[OBJC_IVAR____TtC3VFX15VFXEntityObject__isTombstoned] == 1)
      sub_1B1D19A88(0);
    v9 = swift_weakLoadStrong();
    result = swift_release();
    if (v9)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v10 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v16 = 0;
      swift_retain();
      sub_1B1F1AD70(v10, &v16, 0xD00000000000002FLL, 0x80000001B2338DA0);
      swift_release();
      return swift_release();
    }
    else
    {
      v11 = (uint64_t *)&v2[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
      if (*(_DWORD *)&v2[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity] != -1
        || *(_DWORD *)&v2[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4] != 0)
      {
        v13 = swift_weakLoadStrong();
        if (!v13)
        {
          v13 = *(_QWORD *)&v2[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager];
          if (v13)
          {
            swift_retain();
          }
          else
          {
            type metadata accessor for EntityManager();
            swift_allocObject();
            v13 = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
          }
        }
        v14 = v2;
        swift_retain();
        v15 = sub_1B1E351C0(0, v13, (uint64_t)v14, a1);

        swift_release();
        swift_weakAssign();
        *(_QWORD *)&v14[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager] = 0;
        swift_release();
        result = swift_release();
        *v11 = v15;
      }
    }
  }
  return result;
}

uint64_t sub_1B1D1B7C8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t Strong;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4);
  v2 = *(int *)(v0 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity);
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    Strong = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager);
    if (Strong)
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      Strong = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  swift_release();
  swift_retain();
  v4 = (_DWORD)v2 == -1 && v1 == 0;
  if (v4
    || (v2 & 0x80000000) != 0
    || *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v2
    || ((v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager__entries), v1 != -1)
      ? (v6 = *(_DWORD *)(v5 + 12 * (int)v2 + 8) == v1)
      : (v6 = 1),
        !v6))
  {
    swift_release();
    return 0;
  }
  else
  {
    v7 = sub_1B1D1FE44(*(_QWORD *)(*(_QWORD *)(Strong + 136) + 8 * *(int *)(v5 + 12 * (int)v2) + 32), *(_DWORD *)(v5 + 12 * (int)v2), *(_WORD *)(v5 + 12 * (int)v2 + 4), 16, Strong);
    v9 = v8;
    swift_release();
    if (v9)
      return v7;
    else
      return 0;
  }
}

uint64_t sub_1B1D1B990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  id v8;
  uint64_t v9;
  char v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14[4];

  v5 = *(unsigned int *)(v2 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity);
  v6 = *(unsigned int *)(v2 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4);
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    Strong = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager);
    if (Strong)
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      Strong = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  swift_release();
  if (a2)
  {
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3A28]), sel_init);

    v14[0] = a1;
    v14[1] = a2;
    swift_retain();
    sub_1B1E2C434(0, Strong, v14, v5 | (v6 << 32));
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    swift_retain();
    if (v9)
    {
      v10 = *(_BYTE *)(v9 + 80);
      MEMORY[0x1B5E240CC](v9 + 48);
      v9 = *(_QWORD *)(v9 + 56);
    }
    else
    {
      v10 = 0;
    }
    swift_unknownObjectUnownedInit();
    v12[0] = Strong;
    v12[2] = v9;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    v13 = v10;
    sub_1B1A02530((uint64_t)v12, (uint64_t)v14);
    sub_1B1E2D290((uint64_t)&type metadata for VFXTag, (uint64_t)&off_1E63BD620, v5 | (v6 << 32));
    sub_1B1A0256C((uint64_t)v14);
    sub_1B1E31340(1);
  }
  return swift_release();
}

uint64_t (*sub_1B1D1BB7C(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = sub_1B1D1B7C8();
  a1[1] = v3;
  return sub_1B1D1BBB0;
}

uint64_t sub_1B1D1BBB0(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) == 0)
    return sub_1B1D1B990(*a1, v2);
  swift_bridgeObjectRetain();
  sub_1B1D1B990(v3, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D1BC10@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  int v3;
  int v4;
  id v5;
  id v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = (char *)sub_1B1D1B204();
  v3 = *(_DWORD *)&v2[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
  v4 = *(_DWORD *)&v2[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4];
  if (!swift_weakLoadStrong())
  {
    if (*(_QWORD *)&v2[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager])
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  swift_release();
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3A28]), sel_init);
  v6 = objc_msgSend(v5, sel_UUIDString);

  sub_1B222874C();
  if (v3 == -1 && v4 == 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = swift_retain();
    MEMORY[0x1E0C80A78](v8, v9);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1D1FECC);
    swift_bridgeObjectRelease();
    swift_release();
  }
  result = type metadata accessor for VFXEntityObject();
  a1[3] = result;
  *a1 = v2;
  return result;
}

uint64_t sub_1B1D1BE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t *v45;
  __int128 v46;
  _QWORD v47[5];
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;

  v2 = sub_1B1DB8BF0(a2);
  if (*(_QWORD *)(v2 + 16))
  {
    sub_1B1D20D50();
    v3 = sub_1B22296DC();
  }
  else
  {
    v3 = MEMORY[0x1E0DEE9E0];
  }
  v48[0] = v3;
  sub_1B1DCA004(v2, 1, v48);
  swift_bridgeObjectRelease();
  v4 = v48[0];
  type metadata accessor for VFXBridgingRemapAndResolveContext();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = v4;
  v41 = v5;
  v6 = *(unsigned int *)(v42 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity);
  v7 = *(unsigned int *)(v42 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4);
  v45 = (unint64_t *)(v42 + OBJC_IVAR____TtC3VFX15VFXEntityObject_entity);
  v44 = v42 + OBJC_IVAR____TtC3VFX15VFXEntityObject_referencedEntityManager;
  if (!swift_weakLoadStrong())
  {
    if (*(_QWORD *)(v42 + OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager))
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  swift_release();
  if ((_DWORD)v6 != -1 || (_DWORD)v7 != 0)
  {
    swift_retain();
    v9 = sub_1B1FE162C(v6 | (v7 << 32));
    swift_release();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
      goto LABEL_13;
LABEL_28:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v9 = MEMORY[0x1E0DEE9D8];
  v10 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v10)
    goto LABEL_28;
LABEL_13:
  v40 = OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager;
  v39[1] = v9;
  v11 = (__int128 *)(v9 + 32);
  do
  {
    v46 = *v11;
    v12 = *v45;
    if (!swift_weakLoadStrong())
    {
      if (*(_QWORD *)(v42 + v40))
      {
        swift_retain();
      }
      else
      {
        type metadata accessor for EntityManager();
        swift_allocObject();
        sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
      }
    }
    swift_release();
    v13 = v46;
    v14 = sub_1B2229124();
    v15 = *(_QWORD *)(v14 - 8);
    MEMORY[0x1E0C80A78](v14, v16);
    v18 = (char *)v39 - v17;
    v19 = *((_QWORD *)&v46 + 1);
    sub_1B1BC3998(v12, v13, (uint64_t)v39 - v17);
    v20 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v13) == 1)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
    else
    {
      *(_OWORD *)&v47[3] = v46;
      v21 = sub_1B1A137F4(v47);
      (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 32))(v21, v18, v13);
      sub_1B1A02518((__int128 *)v47, (uint64_t)v48);
      v23 = v49;
      v22 = v50;
      sub_1B19FC264((uint64_t)v48, v49);
      v24 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(*(_QWORD *)(v19 + 8) + 96);
      v25 = *(_QWORD *)(v22 + 8);
      v26 = swift_retain();
      v24(v26, &off_1E63B7538, v23, v25);
      swift_release();
      v27 = v49;
      *(_QWORD *)&v46 = v50;
      v28 = sub_1B19FA070(v48, v49);
      v29 = *v45;
      Strong = swift_weakLoadStrong();
      if (!Strong)
      {
        Strong = *(_QWORD *)(v42 + v40);
        if (Strong)
        {
          swift_retain();
        }
        else
        {
          type metadata accessor for EntityManager();
          swift_allocObject();
          Strong = sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
        }
      }
      swift_release();
      v31 = sub_1B2229124();
      v43 = v39;
      v32 = *(_QWORD *)(v31 - 8);
      v34 = MEMORY[0x1E0C80A78](v31, v33);
      v36 = (char *)v39 - v35;
      v37 = *(_QWORD *)(v27 - 8);
      (*(void (**)(char *, _QWORD *, uint64_t, double))(v37 + 16))((char *)v39 - v35, v28, v27, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v36, 0, 1, v27);
      sub_1B1BC3D48((uint64_t)v36, v29, Strong, v27, v46);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v31);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v48);
    }
    ++v11;
    --v10;
  }
  while (v10);
  swift_release();
  return swift_bridgeObjectRelease();
}

id VFXEntityObject.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VFXEntityObject.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1D1C3EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for EmitterDescription)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    v12 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 24);
    v13 = *(_QWORD *)(v8 + 32);
    v14 = *(unsigned __int8 *)(v8 + 40);
    v15 = *(unsigned __int8 *)(v8 + 41);
    v16 = *(unsigned __int8 *)(v8 + 42);
    v17 = *(unsigned __int8 *)(v8 + 43);
    v18 = *(unsigned __int8 *)(v8 + 44);
    v19 = *(unsigned __int8 *)(v8 + 45);
    v20 = *(_QWORD *)(v8 + 48);
    v21 = *(unsigned __int8 *)(v8 + 56);
    v22 = *(unsigned __int8 *)(v8 + 57);
    v23 = *(unsigned __int8 *)(v8 + 58);
    v24 = *(_QWORD *)(v8 + 64);
    v25 = *(unsigned __int8 *)(v8 + 72);
    v26 = *(unsigned __int16 *)(v8 + 74);
    v27 = *(unsigned __int8 *)(v8 + 76);
    v28 = *(unsigned __int8 *)(v8 + 77);
    v29 = *(_DWORD *)(v8 + 80);
    v30 = v15 == 0;
    v31 = 256;
    if (v30)
      v32 = 0;
    else
      v32 = 256;
    v33 = v32 | v14;
    v30 = v16 == 0;
    v34 = 0x10000;
    if (v30)
      v35 = 0;
    else
      v35 = 0x10000;
    v30 = v17 == 0;
    v36 = 0x1000000;
    if (v30)
      v36 = 0;
    v37 = v33 | v35 | v36;
    v38 = 0x100000000;
    if (v18)
      v39 = 0x100000000;
    else
      v39 = 0;
    if (v19)
      v40 = 0x10000000000;
    else
      v40 = 0;
    v41 = v37 | v39 | v40;
    if (!v22)
      v31 = 0;
    v42 = v31 | v21;
    if (!v23)
      v34 = 0;
    v43 = v42 | v34;
    if (!v27)
      v38 = 0;
    v44 = v25 | (v26 << 16) | v38;
    if (v28)
      v45 = 0x10000000000;
    else
      v45 = 0;
    *(_QWORD *)a5 = v9;
    *(_QWORD *)(a5 + 8) = v10;
    *(_QWORD *)(a5 + 16) = v12;
    *(_QWORD *)(a5 + 24) = v11;
    *(_QWORD *)(a5 + 32) = v13;
    *(_QWORD *)(a5 + 40) = v41;
    *(_QWORD *)(a5 + 48) = v20;
    *(_QWORD *)(a5 + 56) = v43;
    *(_QWORD *)(a5 + 64) = v24;
    *(_QWORD *)(a5 + 72) = v44 | v45;
    *(_DWORD *)(a5 + 80) = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_DWORD *)(a5 + 80) = 0;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  return result;
}

uint64_t sub_1B1D1C584@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for GraphComponent)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    return sub_1B19FC384((_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)+ *v7+ (a2 << 16 >> 48) * a3), a5);
  }
  else
  {
LABEL_5:
    *(_OWORD *)a5 = xmmword_1B2244C80;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  return result;
}

uint64_t sub_1B1D1C618@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for TextureCPURuntime)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v9 = *(_QWORD *)(v8 + 16);
    v10 = *(unsigned __int8 *)(v8 + 24);
    v11 = *(_QWORD *)(v8 + 32);
    v12 = *(_QWORD *)(v8 + 96);
    v13 = *(unsigned int *)(v8 + 104);
    v14 = *(_QWORD *)(v8 + 112);
    v15 = 0x10000;
    if (!*(_BYTE *)(v8 + 42))
      v15 = 0;
    v16 = *(unsigned __int16 *)(v8 + 40) | (unint64_t)v15;
    *(_OWORD *)a5 = *(_OWORD *)v8;
    *(_QWORD *)(a5 + 16) = v9;
    *(_QWORD *)(a5 + 24) = v10;
    *(_QWORD *)(a5 + 32) = v11;
    *(_QWORD *)(a5 + 40) = v16;
    v17 = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(a5 + 48) = *(_OWORD *)(v8 + 48);
    *(_OWORD *)(a5 + 64) = v17;
    *(_OWORD *)(a5 + 80) = *(_OWORD *)(v8 + 80);
    *(_QWORD *)(a5 + 96) = v12;
    *(_QWORD *)(a5 + 104) = v13;
    *(_QWORD *)(a5 + 112) = v14;
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a5 + 112) = 0;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  return result;
}

__n128 sub_1B1D1C708@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, __n128 *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  __n128 *v9;
  unsigned __int32 v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ProjectorParameters)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = (__n128 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                  + *v7
                  + (a2 << 16 >> 48) * a3);
    v10 = v9[2].n128_u32[0];
    v11 = 0x100000000;
    if (!v9->n128_u8[12])
      v11 = 0;
    v12 = v11 | v9->n128_u32[2];
    a5->n128_u64[0] = v9->n128_u64[0];
    a5->n128_u64[1] = v12;
    result = v9[1];
    a5[1] = result;
    a5[2].n128_u32[0] = v10;
  }
  else
  {
LABEL_5:
    result.n128_u64[0] = 0;
    *a5 = (__n128)xmmword_1B228D250;
    a5[1].n128_u64[0] = 0;
    a5[1].n128_u64[1] = 0;
    a5[2].n128_u32[0] = 0;
  }
  return result;
}

__n128 sub_1B1D1C7A8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleForceField)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v10 = *(_QWORD *)(v9 + 32);
    v11 = *(_DWORD *)(v9 + 40);
    result = *(__n128 *)v9;
    v12 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)a5 = *(_OWORD *)v9;
    *(_OWORD *)(a5 + 16) = v12;
    *(_QWORD *)(a5 + 32) = v10;
    *(_DWORD *)(a5 + 40) = v11;
    *(_BYTE *)(a5 + 44) = 0;
  }
  else
  {
LABEL_5:
    result.n128_u64[0] = 0;
    *(_OWORD *)(a5 + 28) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_BYTE *)(a5 + 44) = 1;
  }
  return result;
}

__n128 sub_1B1D1C834@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticlePositionOverTexture)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v10 = *(_DWORD *)(v9 + 40);
    v11 = *(unsigned int *)(v9 + 16);
    v12 = *(unsigned __int16 *)(v9 + 8) | ((unint64_t)*(unsigned int *)(v9 + 12) << 32);
    *(_QWORD *)a5 = *(_QWORD *)v9;
    *(_QWORD *)(a5 + 8) = v12;
    *(_QWORD *)(a5 + 16) = v11;
    result = *(__n128 *)(v9 + 24);
    *(__n128 *)(a5 + 24) = result;
    *(_DWORD *)(a5 + 40) = v10;
  }
  else
  {
LABEL_5:
    result.n128_u64[0] = 0;
    *(_OWORD *)a5 = xmmword_1B228D260;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_DWORD *)(a5 + 40) = 0;
  }
  return result;
}

__n128 sub_1B1D1C8D0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  __int16 v9;
  __int16 v10;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleFluidSolver2DEmitter)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                           + *v7
                           + (a2 << 16 >> 48) * a3);
    v9 = v8[24];
    if (v8[25])
      v10 = 256;
    else
      v10 = 0;
    *(_QWORD *)a5 = *v8 | ((unint64_t)*((unsigned int *)v8 + 1) << 32);
    result = *(__n128 *)(v8 + 8);
    *(__n128 *)(a5 + 8) = result;
    *(_WORD *)(a5 + 24) = v10 | v9;
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)a5 = 2;
    *(_WORD *)(a5 + 24) = 0;
  }
  return result;
}

uint64_t sub_1B1D1C970@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleFluidSolver2DSolver)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v9 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 32);
    v10 = *(_QWORD *)(v8 + 40);
    v12 = *(_BYTE *)(v8 + 80);
    v13 = 256;
    if (*(_BYTE *)(v8 + 9))
      v14 = 256;
    else
      v14 = 0;
    v15 = v14 | *(unsigned __int8 *)(v8 + 8) | ((unint64_t)*(unsigned __int8 *)(v8 + 10) << 16) | ((unint64_t)*(unsigned __int8 *)(v8 + 11) << 24) | ((unint64_t)*(unsigned int *)(v8 + 12) << 32);
    if (!*(_BYTE *)(v8 + 65))
      v13 = 0;
    v16 = v13 | *(unsigned __int8 *)(v8 + 64);
    v17 = 0x10000;
    if (!*(_BYTE *)(v8 + 66))
      v17 = 0;
    v18 = v16 | v17 | ((unint64_t)*(unsigned int *)(v8 + 68) << 32);
    v19 = *(unsigned __int8 *)(v8 + 72) | ((unint64_t)*(unsigned int *)(v8 + 76) << 32);
    *(_QWORD *)a5 = *(_QWORD *)v8;
    *(_QWORD *)(a5 + 8) = v15;
    *(_QWORD *)(a5 + 16) = v9;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = v11;
    *(_QWORD *)(a5 + 40) = v10;
    *(_OWORD *)(a5 + 48) = *(_OWORD *)(v8 + 48);
    *(_QWORD *)(a5 + 64) = v18;
    *(_QWORD *)(a5 + 72) = v19;
    *(_BYTE *)(a5 + 80) = v12;
    return swift_retain();
  }
  else
  {
LABEL_5:
    *(_QWORD *)a5 = 1;
    *(_OWORD *)(a5 + 8) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 65) = 0u;
  }
  return result;
}

__n128 sub_1B1D1CA98@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSizeOverTexture)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v10 = *(_QWORD *)(v9 + 56);
    v11 = *(_DWORD *)(v9 + 64);
    v12 = *(unsigned __int16 *)(v9 + 8) | ((unint64_t)*(unsigned __int8 *)(v9 + 12) << 32);
    v13 = *(unsigned int *)(v9 + 16) | ((unint64_t)*(unsigned __int8 *)(v9 + 20) << 32);
    *(_QWORD *)a5 = *(_QWORD *)v9;
    *(_QWORD *)(a5 + 8) = v12;
    *(_QWORD *)(a5 + 16) = v13;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)(v9 + 24);
    result = *(__n128 *)(v9 + 40);
    *(__n128 *)(a5 + 40) = result;
    *(_QWORD *)(a5 + 56) = v10;
    *(_DWORD *)(a5 + 64) = v11;
  }
  else
  {
LABEL_5:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0x300000000;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 52) = 0u;
  }
  return result;
}

uint64_t sub_1B1D1CB54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[15];
  uint64_t v24;
  _BYTE __dst[248];

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for MaterialRuntime)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v10 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                   + *v8
                   + (a2 << 16 >> 48) * a3);
    v11 = v10[3];
    v13 = *v10;
    v12 = v10[1];
    v23[2] = v10[2];
    v23[3] = v11;
    v23[0] = v13;
    v23[1] = v12;
    v14 = v10[7];
    v16 = v10[4];
    v15 = v10[5];
    v23[6] = v10[6];
    v23[7] = v14;
    v23[4] = v16;
    v23[5] = v15;
    v17 = v10[11];
    v19 = v10[8];
    v18 = v10[9];
    v23[10] = v10[10];
    v23[11] = v17;
    v23[8] = v19;
    v23[9] = v18;
    v21 = v10[13];
    v20 = v10[14];
    v22 = v10[12];
    v24 = *((_QWORD *)v10 + 30);
    v23[13] = v21;
    v23[14] = v20;
    v23[12] = v22;
    memmove(__dst, v10, 0xF8uLL);
    nullsub_16(__dst);
    sub_1B1A18378((uint64_t)__dst, a5, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
    return sub_1B1BBF168((uint64_t)v23);
  }
  else
  {
LABEL_5:
    sub_1B1D20020((uint64_t)__dst);
    return sub_1B1A18378((uint64_t)__dst, a5, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
  }
}

uint64_t sub_1B1D1CC84@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSizeOverLife)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                           + *v7
                           + (a2 << 16 >> 48) * a3);
    v9 = v8[8];
    v10 = *((_QWORD *)v8 + 2);
    v11 = *((_QWORD *)v8 + 3);
    v12 = *((_QWORD *)v8 + 4);
    v13 = v8[40];
    v14 = *((_QWORD *)v8 + 6);
    v15 = *((_QWORD *)v8 + 7);
    v16 = *((_QWORD *)v8 + 8);
    v17 = v8[72];
    v18 = *((_QWORD *)v8 + 10);
    v19 = *((_QWORD *)v8 + 11);
    v20 = *((_QWORD *)v8 + 12);
    v21 = v8[104];
    *(_QWORD *)a5 = *v8 | ((unint64_t)*((unsigned int *)v8 + 1) << 32);
    *(_QWORD *)(a5 + 8) = v9;
    *(_QWORD *)(a5 + 16) = v10;
    *(_QWORD *)(a5 + 24) = v11;
    *(_QWORD *)(a5 + 32) = v12;
    *(_QWORD *)(a5 + 40) = v13;
    *(_QWORD *)(a5 + 48) = v14;
    *(_QWORD *)(a5 + 56) = v15;
    *(_QWORD *)(a5 + 64) = v16;
    *(_QWORD *)(a5 + 72) = v17;
    *(_QWORD *)(a5 + 80) = v18;
    *(_QWORD *)(a5 + 88) = v19;
    *(_QWORD *)(a5 + 96) = v20;
    *(_BYTE *)(a5 + 104) = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_OWORD *)(a5 + 89) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1D1CDB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for CameraColorGrading)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v9 = *(_QWORD *)v8;
    v10 = *(unsigned int *)(v8 + 8);
    v12 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 24);
    v13 = *(unsigned int *)(v8 + 32);
    v15 = *(_QWORD *)(v8 + 48);
    v14 = *(_QWORD *)(v8 + 56);
    v16 = *(unsigned int *)(v8 + 64);
    v17 = *(_OWORD *)(v8 + 80);
    result = *(_QWORD *)(v8 + 96);
    LODWORD(v8) = *(_DWORD *)(v8 + 104);
    *(_QWORD *)a5 = v9;
    *(_QWORD *)(a5 + 8) = v10;
    *(_QWORD *)(a5 + 16) = v12;
    *(_QWORD *)(a5 + 24) = v11;
    *(_QWORD *)(a5 + 32) = v13;
    *(_QWORD *)(a5 + 40) = 0;
    *(_QWORD *)(a5 + 48) = v15;
    *(_QWORD *)(a5 + 56) = v14;
    *(_QWORD *)(a5 + 64) = v16;
    *(_QWORD *)(a5 + 72) = 0;
    *(_OWORD *)(a5 + 80) = v17;
    *(_QWORD *)(a5 + 96) = result;
    *(_DWORD *)(a5 + 104) = v8;
    *(_BYTE *)(a5 + 108) = 0;
  }
  else
  {
LABEL_5:
    *(_OWORD *)(a5 + 92) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_BYTE *)(a5 + 108) = 1;
  }
  return result;
}

__n128 sub_1B1D1CE78@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  unsigned int *v9;
  uint64_t v10;
  char v11;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for CameraBloom)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                        + *v7
                        + (a2 << 16 >> 48) * a3);
    result = *((__n128 *)v9 + 2);
    v10 = *((_QWORD *)v9 + 6);
    v11 = *((_BYTE *)v9 + 56);
    *(_QWORD *)a5 = *v9;
    *(_OWORD *)(a5 + 8) = *(_OWORD *)(v9 + 2);
    *(_QWORD *)(a5 + 24) = 0;
    *(__n128 *)(a5 + 32) = result;
    *(_QWORD *)(a5 + 48) = v10;
    *(_BYTE *)(a5 + 56) = v11;
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a5 + 48) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_BYTE *)(a5 + 56) = 2;
  }
  return result;
}

uint64_t sub_1B1D1CF18@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  int v13;
  uint64_t v14;
  __int16 v15;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for GraphScriptingConfig)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                            + *v7
                            + (a2 << 16 >> 48) * a3);
    v9 = *((_QWORD *)v8 + 1);
    v10 = *((_QWORD *)v8 + 2);
    v11 = *((unsigned __int8 *)v8 + 24);
    v12 = *((unsigned __int8 *)v8 + 25);
    v13 = *((unsigned __int8 *)v8 + 26);
    v14 = *v8;
    if (v12)
      v15 = 256;
    else
      v15 = 0;
    *(_QWORD *)a5 = v14;
    *(_QWORD *)(a5 + 8) = v9;
    *(_QWORD *)(a5 + 16) = v10;
    *(_BYTE *)(a5 + 26) = v13 != 0;
    *(_WORD *)(a5 + 24) = v15 | v11;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 23) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  return result;
}

uint64_t sub_1B1D1CFE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for GraphEntityComponentPropertyReferences)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    v14 = *(_QWORD *)(v8 + 32);
    v13 = *(_QWORD *)(v8 + 40);
    v15 = *(_QWORD *)(v8 + 48);
    LOBYTE(v8) = *(_BYTE *)(v8 + 56);
    *(_QWORD *)a5 = v9;
    *(_QWORD *)(a5 + 8) = v10;
    *(_QWORD *)(a5 + 16) = v11;
    *(_QWORD *)(a5 + 24) = v12;
    *(_QWORD *)(a5 + 32) = v14;
    *(_QWORD *)(a5 + 40) = v13;
    *(_QWORD *)(a5 + 48) = v15;
    *(_BYTE *)(a5 + 56) = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_OWORD *)(a5 + 41) = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  return result;
}

uint64_t sub_1B1D1D0D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSubSpawn)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v6 = *(_QWORD *)v10;
    v11 = 0x100000000;
    if (!*(_BYTE *)(v10 + 12))
      v11 = 0;
    v12 = v11 | *(unsigned int *)(v10 + 8);
    v13 = 0x10000000000;
    if (!*(_BYTE *)(v10 + 13))
      v13 = 0;
    v14 = 0x1000000000000;
    if (!*(_BYTE *)(v10 + 14))
      v14 = 0;
    v15 = v12 | v13 | v14;
    v16 = 0x100000000000000;
    if (!*(_BYTE *)(v10 + 15))
      v16 = 0;
    v9 = v15 | v16;
    v8 = *(unsigned int *)(v10 + 16) | ((unint64_t)*(unsigned __int8 *)(v10 + 20) << 32);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 0x200000000;
  }
  *(_QWORD *)a5 = v6;
  *(_QWORD *)(a5 + 8) = v9;
  *(_DWORD *)(a5 + 16) = v8;
  *(_BYTE *)(a5 + 20) = BYTE4(v8);
  return result;
}

uint64_t sub_1B1D1D1A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSubSpawn.State)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                  + *v7
                  + (a2 << 16 >> 48) * a3);
    v9 = v8[1];
    v10 = v8[2];
    v11 = v8[3];
    v12 = v8[4];
    v13 = v8[5];
    v14 = v8[6];
    v15 = v8[7];
    *a5 = *v8;
    a5[1] = v9;
    a5[2] = v10;
    a5[3] = v11;
    a5[4] = v12;
    a5[5] = v13;
    a5[6] = v14;
    a5[7] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *((_OWORD *)a5 + 2) = 0u;
    *((_OWORD *)a5 + 3) = 0u;
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
  }
  return result;
}

__n128 sub_1B1D1D298@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, __n128 *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleRibbonTrails)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (__n128 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                  + *v7
                  + (a2 << 16 >> 48) * a3);
    v9 = v8[1].n128_u8[0] | ((unint64_t)v8[1].n128_u32[1] << 32);
    v10 = 256;
    if (!v8[1].n128_u8[9])
      v10 = 0;
    v11 = v10 | v8[1].n128_u8[8];
    v12 = 0x10000;
    if (!v8[1].n128_u8[10])
      v12 = 0;
    v13 = v11 | v12 | ((unint64_t)v8[1].n128_u32[3] << 32);
    result = *v8;
    *a5 = *v8;
    a5[1].n128_u64[0] = v9;
    a5[1].n128_u64[1] = v13;
  }
  else
  {
LABEL_5:
    a5->n128_u64[0] = 0;
    a5->n128_u64[1] = 0;
    a5[1].n128_u64[0] = 0;
    a5[1].n128_u64[1] = 2;
  }
  return result;
}

__n128 sub_1B1D1D34C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleRibbonRenderer)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v10 = *(_QWORD *)(v9 + 96);
    v11 = *(_BYTE *)(v9 + 104);
    v12 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)a5 = *(_OWORD *)v9;
    *(_OWORD *)(a5 + 16) = v12;
    v13 = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(a5 + 48) = v13;
    result = *(__n128 *)(v9 + 64);
    v14 = *(_OWORD *)(v9 + 80);
    *(__n128 *)(a5 + 64) = result;
    *(_OWORD *)(a5 + 80) = v14;
    *(_QWORD *)(a5 + 96) = v10;
    *(_BYTE *)(a5 + 104) = v11;
  }
  else
  {
LABEL_5:
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0x20000000000;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 89) = 0u;
  }
  return result;
}

uint64_t sub_1B1D1D3EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, unint64_t *a5@<X5>, uint64_t (*a6)(uint64_t)@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t (*a9)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v14 = *(_QWORD *)(a1 + 48);
  sub_1B1A1B6FC(0, a5, a6, a7, a9);
  v16 = v15;
  v17 = *(_QWORD *)(v14 + 16);
  if (v17)
  {
    v18 = (_QWORD *)(v14 + 56);
    while (*(v18 - 3) != v15)
    {
      v18 += 5;
      if (!--v17)
        goto LABEL_5;
    }
    sub_1B1D12220(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v18 + (a2 << 16 >> 48) * a3, a8, a5, a6, a7, a9);
    v19 = 0;
  }
  else
  {
LABEL_5:
    v19 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a8, v19, 1, v16);
}

uint64_t sub_1B1D1D4FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for Material)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                           + *v7
                           + (a2 << 16 >> 48) * a3);
    v10 = *((_QWORD *)v8 + 1);
    v9 = *((_QWORD *)v8 + 2);
    v11 = *((_QWORD *)v8 + 7);
    v12 = v8[64];
    v13 = *((_QWORD *)v8 + 11);
    v14 = *((_QWORD *)v8 + 12);
    v15 = 0x100000000;
    if (!v8[44])
      v15 = 0;
    v16 = v15 | *((unsigned int *)v8 + 10);
    v17 = *((unsigned int *)v8 + 12) | ((unint64_t)v8[52] << 32);
    v18 = 0x10000000000;
    if (!v8[53])
      v18 = 0;
    *(_QWORD *)a5 = *v8;
    *(_QWORD *)(a5 + 8) = v10;
    *(_QWORD *)(a5 + 16) = v9;
    *(_OWORD *)(a5 + 24) = *(_OWORD *)(v8 + 24);
    *(_QWORD *)(a5 + 40) = v16;
    *(_QWORD *)(a5 + 48) = v17 | v18;
    *(_QWORD *)(a5 + 56) = v11;
    *(_QWORD *)(a5 + 64) = v12;
    *(_OWORD *)(a5 + 72) = *(_OWORD *)(v8 + 72);
    *(_QWORD *)(a5 + 88) = v13;
    *(_QWORD *)(a5 + 96) = v14;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a5 + 96) = 0;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1D1D618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE v10[224];

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for EmitterShape)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    memmove(v10, (const void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)+ *v8+ (a2 << 16 >> 48) * a3), 0xD1uLL);
    nullsub_16(v10);
  }
  else
  {
LABEL_5:
    sub_1B1D200CC((uint64_t)v10);
  }
  return sub_1B1A18378((uint64_t)v10, a5, (unint64_t *)&unk_1ED4B8020, (uint64_t)&type metadata for EmitterShape);
}

__n128 sub_1B1D1D6D4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSizeInit)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                           + *v7
                           + (a2 << 16 >> 48) * a3);
    v9 = *((_QWORD *)v8 + 3);
    *(_QWORD *)a5 = *v8 | ((unint64_t)*((unsigned int *)v8 + 1) << 32);
    result = *(__n128 *)(v8 + 8);
    *(__n128 *)(a5 + 8) = result;
    *(_QWORD *)(a5 + 24) = v9;
  }
  else
  {
LABEL_5:
    *(_QWORD *)a5 = 3;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 0;
  }
  return result;
}

__n128 sub_1B1D1D75C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for PerspectiveCamera)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v10 = *(_QWORD *)(v9 + 40);
    v11 = 256;
    if (!*(_BYTE *)(v9 + 33))
      v11 = 0;
    v12 = v11 | *(unsigned __int8 *)(v9 + 32);
    result = *(__n128 *)v9;
    v13 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)a5 = *(_OWORD *)v9;
    *(_OWORD *)(a5 + 16) = v13;
    *(_QWORD *)(a5 + 32) = v12;
    *(_QWORD *)(a5 + 40) = v10;
  }
  else
  {
LABEL_5:
    result.n128_u64[0] = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_QWORD *)(a5 + 32) = 2;
    *(_QWORD *)(a5 + 40) = 0;
  }
  return result;
}

uint64_t sub_1B1D1D7F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for WrapAroundCamera)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(_QWORD *)(v9 + 28);
    v12 = 256;
    if (!*(_BYTE *)(v9 + 25))
      v12 = 0;
    v13 = v12 | *(unsigned __int8 *)(v9 + 24) | (v11 << 32);
    v14 = 0x100000000;
    if (!*(_BYTE *)(v9 + 36))
      v14 = 0;
    v8 = v14 & 0xFFFFFFFF00000000 | HIDWORD(v11);
    *(_OWORD *)a5 = *(_OWORD *)v9;
    *(_QWORD *)(a5 + 16) = v10;
    *(_QWORD *)(a5 + 24) = v13;
  }
  else
  {
LABEL_5:
    v8 = 0;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 24) = 2;
  }
  *(_DWORD *)(a5 + 32) = v8;
  *(_BYTE *)(a5 + 36) = BYTE4(v8);
  return result;
}

uint64_t sub_1B1D1D8AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleColorInit)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                           + *v7
                           + (a2 << 16 >> 48) * a3);
    v9 = v8[12];
    v10 = *((unsigned int *)v8 + 4);
    v11 = v8[20];
    v13 = *((_QWORD *)v8 + 4);
    v12 = *((_QWORD *)v8 + 5);
    v14 = *((_QWORD *)v8 + 6);
    v15 = *((_QWORD *)v8 + 7);
    v16 = v8[64];
    v17 = *((unsigned int *)v8 + 2);
    v18 = *v8 | ((unint64_t)*((unsigned int *)v8 + 1) << 32);
    v19 = 0x100000000;
    if (v9)
      v20 = 0x100000000;
    else
      v20 = 0;
    v21 = v20 | v17;
    if (!v11)
      v19 = 0;
    *(_QWORD *)a5 = v18;
    *(_QWORD *)(a5 + 8) = v21;
    *(_QWORD *)(a5 + 16) = v19 | v10;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = v13;
    *(_QWORD *)(a5 + 40) = v12;
    *(_QWORD *)(a5 + 48) = v14;
    *(_QWORD *)(a5 + 56) = v15;
    *(_BYTE *)(a5 + 64) = v16;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_BYTE *)(a5 + 64) = 0;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

__n128 sub_1B1D1D98C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, __n128 *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 *v8;
  unint64_t v9;
  unsigned __int32 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for PointCacheEmitter)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (__n128 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                  + *v7
                  + (a2 << 16 >> 48) * a3);
    v9 = v8[1].n128_u64[0];
    v10 = v8[2].n128_u32[0];
    v11 = 256;
    if (!v8[1].n128_u8[9])
      v11 = 0;
    v12 = v11 | v8[1].n128_u8[8];
    v13 = 0x10000;
    if (!v8[1].n128_u8[10])
      v13 = 0;
    v14 = 0x1000000;
    if (!v8[1].n128_u8[11])
      v14 = 0;
    v15 = v12 | v13 | v14;
    v16 = 0x100000000;
    if (!v8[1].n128_u8[12])
      v16 = 0;
    v17 = v15 | v16 | ((unint64_t)v8[1].n128_u8[13] << 40);
    result = *v8;
    *a5 = *v8;
    a5[1].n128_u64[0] = v9;
    a5[1].n128_u64[1] = v17;
    a5[2].n128_u32[0] = v10;
  }
  else
  {
LABEL_5:
    a5->n128_u64[0] = 0;
    a5->n128_u64[1] = 0;
    a5[1].n128_u64[0] = 0;
    a5[1].n128_u64[1] = 2;
    a5[2].n128_u32[0] = 0;
  }
  return result;
}

uint64_t sub_1B1D1DA6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleColorOverLife)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                           + *v7
                           + (a2 << 16 >> 48) * a3);
    v9 = *((_QWORD *)v8 + 1);
    v10 = *((_QWORD *)v8 + 2);
    v11 = *v8 | ((unint64_t)*((unsigned int *)v8 + 1) << 32);
    v12 = 256;
    if (!v8[25])
      v12 = 0;
    v13 = v12 | v8[24];
    v14 = *((_DWORD *)v8 + 8);
    v15 = v13 | ((unint64_t)*((unsigned int *)v8 + 7) << 32);
    *(_QWORD *)a5 = v11;
    *(_QWORD *)(a5 + 8) = v9;
    *(_QWORD *)(a5 + 16) = v10;
    *(_QWORD *)(a5 + 24) = v15;
    *(_DWORD *)(a5 + 32) = v14;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_DWORD *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1D1DB30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_1B1D1DB68(a1, a2, a3, a4, type metadata accessor for ParticleInitScript, a5);
}

uint64_t sub_1B1D1DB4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_1B1D1DB68(a1, a2, a3, a4, type metadata accessor for ParticleUpdateScript, a5);
}

uint64_t sub_1B1D1DB68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(_QWORD)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v11 = *(_QWORD *)(a1 + 48);
  v12 = a5(0);
  v13 = v12;
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
  {
    v15 = (_QWORD *)(v11 + 56);
    while (*(v15 - 3) != v12)
    {
      v15 += 5;
      if (!--v14)
        goto LABEL_5;
    }
    sub_1B1792810(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v15 + (a2 << 16 >> 48) * a3, a6, a5);
    v16 = 0;
  }
  else
  {
LABEL_5:
    v16 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a6, v16, 1, v13);
}

uint64_t sub_1B1D1DC3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const void *v10;
  _BYTE v11[656];
  _BYTE __dst[656];

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for EmitterRuntime)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v10 = (const void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                       + *v8
                       + (a2 << 16 >> 48) * a3);
    memcpy(v11, v10, sizeof(v11));
    memmove(__dst, v10, 0x290uLL);
    nullsub_16(__dst);
    sub_1B1A18378((uint64_t)__dst, a5, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
    return sub_1B1C1FAFC((uint64_t)v11);
  }
  else
  {
LABEL_5:
    sub_1B1D2004C(__dst);
    return sub_1B1A18378((uint64_t)__dst, a5, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
  }
}

__n128 sub_1B1D1DD38@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, __n128 *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 *v8;
  unint64_t v9;
  unsigned __int8 v10;
  __n128 result;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleFlockingFlyTowardsArea)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (__n128 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                  + *v7
                  + (a2 << 16 >> 48) * a3);
    v9 = v8[1].n128_u64[0];
    v10 = v8[1].n128_u8[8];
    result = *v8;
    *a5 = *v8;
    a5[1].n128_u64[0] = v9;
    a5[1].n128_u8[8] = v10;
  }
  else
  {
LABEL_5:
    a5->n128_u64[0] = 0;
    a5->n128_u64[1] = 0;
    a5[1].n128_u64[0] = 0;
    a5[1].n128_u8[8] = 2;
  }
  return result;
}

uint64_t sub_1B1D1DDBC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[19];

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleFlockingSolver)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v10 = *(_OWORD *)(v8 + 16);
    v9 = *(_OWORD *)(v8 + 32);
    v18 = *(_OWORD *)v8;
    v19 = v10;
    v20 = v9;
    v12 = *(_OWORD *)(v8 + 64);
    v11 = *(_OWORD *)(v8 + 80);
    v13 = *(_OWORD *)(v8 + 48);
    *(_DWORD *)&v23[15] = *(_DWORD *)(v8 + 95);
    v22 = v12;
    *(_OWORD *)v23 = v11;
    v21 = v13;
    LOWORD(v8) = *(_WORD *)&v23[16];
    v14 = v23[18];
    v15 = v19;
    *(_OWORD *)a5 = v18;
    *(_OWORD *)(a5 + 16) = v15;
    v16 = v21;
    *(_OWORD *)(a5 + 32) = v20;
    *(_OWORD *)(a5 + 48) = v16;
    v17 = *(_OWORD *)v23;
    *(_OWORD *)(a5 + 64) = v22;
    *(_OWORD *)(a5 + 80) = v17;
    *(_BYTE *)(a5 + 98) = v14;
    *(_WORD *)(a5 + 96) = v8;
    return sub_1B1B7C5AC((uint64_t)&v18);
  }
  else
  {
LABEL_5:
    *(_QWORD *)a5 = 1;
    *(_OWORD *)(a5 + 8) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_OWORD *)(a5 + 72) = 0u;
    *(_OWORD *)(a5 + 83) = 0u;
  }
  return result;
}

__n128 sub_1B1D1DEB8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  __n128 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleGrowEmitter)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = (__n128 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                  + *v7
                  + (a2 << 16 >> 48) * a3);
    v10 = v9->n128_u8[0];
    result = v9[1];
    v11 = v9[2].n128_u64[0];
    v12 = v9[2].n128_u32[2];
    v13 = v9[3].n128_u64[0];
    LODWORD(v9) = v9[3].n128_u32[2];
    *(_QWORD *)a5 = v10;
    *(_QWORD *)(a5 + 8) = 0;
    *(__n128 *)(a5 + 16) = result;
    *(_QWORD *)(a5 + 32) = v11;
    *(_QWORD *)(a5 + 40) = v12;
    *(_QWORD *)(a5 + 48) = v13;
    *(_DWORD *)(a5 + 56) = (_DWORD)v9;
  }
  else
  {
LABEL_5:
    *(_QWORD *)a5 = 3;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a5 + 8) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_DWORD *)(a5 + 56) = 0;
  }
  return result;
}

__n128 sub_1B1D1DF5C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleColorOverTexture)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                           + *v7
                           + (a2 << 16 >> 48) * a3);
    v10 = *((_QWORD *)v9 + 1);
    v11 = v9[16];
    v12 = *((_DWORD *)v9 + 10);
    *(_QWORD *)a5 = *v9 | ((unint64_t)*((unsigned int *)v9 + 1) << 32);
    *(_QWORD *)(a5 + 8) = v10;
    *(_QWORD *)(a5 + 16) = v11;
    result = *(__n128 *)(v9 + 24);
    *(__n128 *)(a5 + 24) = result;
    *(_DWORD *)(a5 + 40) = v12;
  }
  else
  {
LABEL_5:
    *(_QWORD *)a5 = 4;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a5 + 8) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_DWORD *)(a5 + 40) = 0;
  }
  return result;
}

__n128 sub_1B1D1DFFC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, __n128 *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 result;
  __n128 *v9;
  unint64_t v10;
  unsigned __int32 v11;
  unint64_t v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSizeOverVelocity)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = (__n128 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                  + *v7
                  + (a2 << 16 >> 48) * a3);
    v10 = v9[2].n128_u64[0];
    v11 = v9[2].n128_u32[2];
    v12 = v9->n128_u8[8] | ((unint64_t)v9->n128_u32[3] << 32);
    a5->n128_u64[0] = v9->n128_u8[0] | ((unint64_t)v9->n128_u32[1] << 32);
    a5->n128_u64[1] = v12;
    result = v9[1];
    a5[1] = result;
    a5[2].n128_u64[0] = v10;
    a5[2].n128_u32[2] = v11;
  }
  else
  {
LABEL_5:
    result.n128_u64[0] = 0;
    *a5 = (__n128)xmmword_1B228CCC0;
    a5[1].n128_u64[1] = 0;
    a5[2].n128_u64[0] = 0;
    a5[1].n128_u64[0] = 0;
    a5[2].n128_u32[2] = 0;
  }
  return result;
}

uint64_t sub_1B1D1E0A4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleColorOverPosition)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                            + *v7
                            + (a2 << 16 >> 48) * a3);
    v9 = *((unsigned int *)v8 + 2);
    v10 = *((_QWORD *)v8 + 2);
    v11 = *((_QWORD *)v8 + 3);
    v12 = *((_BYTE *)v8 + 32);
    *(_QWORD *)a5 = *v8 | ((unint64_t)*((unsigned __int8 *)v8 + 4) << 32);
    *(_QWORD *)(a5 + 8) = v9;
    *(_QWORD *)(a5 + 16) = v10;
    *(_QWORD *)(a5 + 24) = v11;
    *(_BYTE *)(a5 + 32) = v12;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_BYTE *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1D1E150@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleColorOverVelocity)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128)
                           + *v7
                           + (a2 << 16 >> 48) * a3);
    v10 = *((_QWORD *)v8 + 1);
    v9 = *((_QWORD *)v8 + 2);
    v11 = *((_QWORD *)v8 + 3);
    v12 = v8[32];
    *(_QWORD *)a5 = *v8 | ((unint64_t)*((unsigned int *)v8 + 1) << 32);
    *(_QWORD *)(a5 + 8) = v10;
    *(_QWORD *)(a5 + 16) = v9;
    *(_QWORD *)(a5 + 24) = v11;
    *(_BYTE *)(a5 + 32) = v12;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_BYTE *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1D1E1FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  id v15;

  v5 = *(_QWORD *)(result + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for SceneFileAsset)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 136) + 8 * (int)a2 + 32) + 128) + *v7 + (a2 << 16 >> 48) * a3;
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 24);
    v12 = *(_QWORD *)(v8 + 48);
    v13 = *(_QWORD *)(v8 + 56);
    *(_QWORD *)a5 = *(_QWORD *)v8;
    *(_QWORD *)(a5 + 8) = v9;
    *(_QWORD *)(a5 + 16) = v10;
    *(_QWORD *)(a5 + 24) = v11;
    v14 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(a5 + 32) = v14;
    *(_QWORD *)(a5 + 48) = v12;
    *(_QWORD *)(a5 + 56) = v13;
    v15 = (id)v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1B1D1E2C8(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else if (a1)
  {
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
    result = sub_1B2228B0C();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B1D1E374(uint64_t a1)
{
  return sub_1B1D1E380(a1, (void (*)(_QWORD))sub_1B19ED84C);
}

uint64_t sub_1B1D1E380(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t result;

  if (a1 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else if (a1)
  {
    a2(0);
    result = sub_1B2228B0C();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B1D1E41C(uint64_t a1)
{
  return sub_1B1D1E380(a1, (void (*)(_QWORD))sub_1B1D20DF0);
}

uint64_t sub_1B1D1E428(uint64_t a1)
{
  return sub_1B1D1E380(a1, (void (*)(_QWORD))sub_1B1D20ED0);
}

uint64_t sub_1B1D1E434(uint64_t a1)
{
  return sub_1B1D1E458(a1);
}

uint64_t sub_1B1D1E440(uint64_t a1)
{
  return sub_1B1D1E458(a1);
}

uint64_t sub_1B1D1E44C(uint64_t a1)
{
  return sub_1B1D1E458(a1);
}

uint64_t sub_1B1D1E458(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else if (a1)
  {
    result = sub_1B2228B0C();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B1D1E4E8(uint64_t a1)
{
  uint64_t result;

  if (a1 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else if (a1)
  {
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = sub_1B2228B0C();
    *(_QWORD *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1B1D1E59C(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  return sub_1B1F56BA8(a1, *a2, a2[1], a3);
}

uint64_t sub_1B1D1E5C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 1;
  v3 = v1 + 56;
  result = 1;
  while (*(ValueMetadata **)(v3 - 24) != &type metadata for TextureGPURuntime)
  {
    v3 += 40;
    if (!--v2)
      return result;
  }
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1D1E63C(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  unsigned __int16 *v9;
  int v10;
  int v11;
  int v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0x2000000;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureLoadPolicy; i += 5)
  {
    if (!--v6)
      return 0x2000000;
  }
  v9 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  v10 = *((unsigned __int8 *)v9 + 3);
  v11 = *v9 | (*((unsigned __int8 *)v9 + 2) << 16);
  if (v10)
    v12 = 0x1000000;
  else
    v12 = 0;
  return v11 | v12;
}

unint64_t sub_1B1D1E6B8(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSpawnDelay)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = 0;
    v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v7 + a3 * a4);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

unint64_t sub_1B1D1E730(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleSpawnDuration)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = 0;
    v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v7 + a3 * a4);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_1B1D1E7A8(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  unsigned int *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0x200000000;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Seed; i += 5)
  {
    if (!--v6)
      return 0x200000000;
  }
  v9 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  v10 = *v9;
  v11 = *((_BYTE *)v9 + 4) == 0;
  v12 = 0x100000000;
  if (v11)
    v12 = 0;
  return v12 | v10;
}

uint64_t sub_1B1D1E81C@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for WorldTransform)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v17 = 0;
    v18 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v9 = *v18;
    v10 = v18[1];
    v11 = v18[2];
    v12 = v18[3];
    v13 = v18[4];
    v14 = v18[5];
    v15 = v18[6];
    v16 = v18[7];
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
  }
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = v11;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v13;
  *(_QWORD *)(a6 + 40) = v14;
  *(_QWORD *)(a6 + 48) = v15;
  *(_QWORD *)(a6 + 56) = v16;
  *(_BYTE *)(a6 + 64) = v17;
  return result;
}

uint64_t sub_1B1D1E8C0@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ProjectionMatrix)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v17 = 0;
    v18 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v9 = *v18;
    v10 = v18[1];
    v11 = v18[2];
    v12 = v18[3];
    v13 = v18[4];
    v14 = v18[5];
    v15 = v18[6];
    v16 = v18[7];
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
  }
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = v11;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v13;
  *(_QWORD *)(a6 + 40) = v14;
  *(_QWORD *)(a6 + 48) = v15;
  *(_QWORD *)(a6 + 56) = v16;
  *(_BYTE *)(a6 + 64) = v17;
  return result;
}

uint64_t sub_1B1D1E964(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Parent; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1E9C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for Children; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1D1EA38()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_1B1D1EA74()
{
  uint64_t v0;

  sub_1B1E31620(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_1B1D1EA88()
{
  uint64_t v0;

  return sub_1B1DACA4C(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1B1D1EA98()
{
  _QWORD *v0;

  return sub_1B1E8DB58(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1D1EAA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1D1EAC8(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Name; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1B1D1EB50(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0x200000000;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for OrthographicCamera; i += 5)
  {
    if (!--v6)
      return 0x200000000;
  }
  v9 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  v10 = *v9;
  v11 = *((unsigned __int8 *)v9 + 4);
  v12 = 0x100000000;
  if (!v11)
    v12 = 0;
  return v12 | v10;
}

uint64_t sub_1B1D1EBD4@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  id v16;
  __int128 v17;

  v7 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = 0uLL;
  if (v8)
  {
    v10 = (_QWORD *)(v7 + 56);
    while ((ValueMetadata *)*(v10 - 3) != &type metadata for TextureFileAsset)
    {
      v10 += 5;
      if (!--v8)
        goto LABEL_5;
    }
    v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v10 + a3 * a4);
    v11 = *v15;
    v12 = v15[1];
    v13 = v15[2];
    v14 = v15[3];
    v17 = *((_OWORD *)v15 + 2);
    v16 = (id)v17;
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v9 = v17;
  }
  else
  {
LABEL_5:
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  *(_QWORD *)a6 = v11;
  *(_QWORD *)(a6 + 8) = v12;
  *(_QWORD *)(a6 + 16) = v13;
  *(_QWORD *)(a6 + 24) = v14;
  *(_OWORD *)(a6 + 32) = v9;
  return result;
}

uint64_t sub_1B1D1ECB0@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for LastFrameWorldTransform)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v17 = 0;
    v18 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v9 = *v18;
    v10 = v18[1];
    v11 = v18[2];
    v12 = v18[3];
    v13 = v18[4];
    v14 = v18[5];
    v15 = v18[6];
    v16 = v18[7];
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
  }
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = v11;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v13;
  *(_QWORD *)(a6 + 40) = v14;
  *(_QWORD *)(a6 + 48) = v15;
  *(_QWORD *)(a6 + 56) = v16;
  *(_BYTE *)(a6 + 64) = v17;
  return result;
}

uint64_t sub_1B1D1ED54(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Position; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1EDC4(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Orientation; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1EE34(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scale3; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

unint64_t sub_1B1D1EEA4(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for Scale1)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = 0;
    v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v7 + a3 * a4);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_1B1D1EF1C(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Scale2; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1EF80@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for InverseWorldTransform)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v17 = 0;
    v18 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v9 = *v18;
    v10 = v18[1];
    v11 = v18[2];
    v12 = v18[3];
    v13 = v18[4];
    v14 = v18[5];
    v15 = v18[6];
    v16 = v18[7];
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 1;
  }
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = v11;
  *(_QWORD *)(a6 + 24) = v12;
  *(_QWORD *)(a6 + 32) = v13;
  *(_QWORD *)(a6 + 40) = v14;
  *(_QWORD *)(a6 + 48) = v15;
  *(_QWORD *)(a6 + 56) = v16;
  *(_BYTE *)(a6 + 64) = v17;
  return result;
}

uint64_t sub_1B1D1F024(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PointCacheRuntime; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1B1D1F0D0@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  v7 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (_QWORD *)(v7 + 56);
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for Skeleton)
    {
      v9 += 5;
      if (!--v8)
        goto LABEL_5;
    }
    v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v9 + a3 * a4);
    v10 = *v15;
    v11 = v15[1];
    v12 = v15[2];
    v13 = v15[3];
    v14 = v15[4];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  *a6 = v10;
  a6[1] = v11;
  a6[2] = v12;
  a6[3] = v13;
  a6[4] = v14;
  return result;
}

uint64_t sub_1B1D1F1A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for ScriptsHolder; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1D1F214@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for WorldAABB)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v13 = 0;
    v14 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v9 = *v14;
    v10 = v14[1];
    v11 = v14[2];
    v12 = v14[3];
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 1;
  }
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = v11;
  *(_QWORD *)(a6 + 24) = v12;
  *(_BYTE *)(a6 + 32) = v13;
  return result;
}

uint64_t sub_1B1D1F298(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for IBLRuntime; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

unint64_t sub_1B1D1F308(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  unsigned int *v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0x300000000;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraLensBlur; i += 5)
  {
    if (!--v6)
      return 0x300000000;
  }
  v9 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  return *v9 | ((unint64_t)*((unsigned __int8 *)v9 + 4) << 32);
}

uint64_t sub_1B1D1F378(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for CameraVignetting; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1F3E8(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56);
        (ValueMetadata *)*(i - 3) != &type metadata for TextureRequireAnimationRepresentation;
        i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1F464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  for (i = v1 + 56; *(ValueMetadata **)(i - 24) != &type metadata for MetalScriptReflection; i += 40)
  {
    if (!--v2)
      return 0;
  }
  return swift_bridgeObjectRetain();
}

unint64_t sub_1B1D1F4D4(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for ParticleContinuousSpawn)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = 0;
    v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v7 + a3 * a4);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_1B1D1F54C(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  unsigned int *v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0x200000000;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleSpawnOverDistance; i += 5)
  {
    if (!--v6)
      return 0x200000000;
  }
  v9 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  v10 = *v9;
  v11 = *((unsigned __int8 *)v9 + 4);
  v12 = *((unsigned __int8 *)v9 + 5);
  v13 = v11 == 0;
  v14 = 0x100000000;
  if (v13)
    v14 = 0;
  v15 = v14 | v10;
  v13 = v12 == 0;
  v16 = 0x10000000000;
  if (v13)
    v16 = 0;
  return v15 | v16;
}

uint64_t sub_1B1D1F5D4(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleVariableSpawn; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1F64C(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleBurstSpawn; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1F6BC(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePeriodicBurstSpawn; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1F734(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleOrientationInit; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1F7AC(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for MeshModel; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  swift_retain();
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1B1D1F83C@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ParticleNoise)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v14 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v9 = *v14;
    v7 = *((_QWORD *)v14 + 2);
    v10 = *((_QWORD *)v14 + 3);
    v15 = v14[8];
    v16 = *((unsigned __int8 *)v14 + 36);
    v12 = *((_QWORD *)v14 + 5);
    v13 = *((_BYTE *)v14 + 48);
    v11 = v15 | (v16 << 32);
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 2;
  }
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = v7;
  *(_QWORD *)(a6 + 24) = v10;
  *(_QWORD *)(a6 + 32) = v11;
  *(_QWORD *)(a6 + 40) = v12;
  *(_BYTE *)(a6 + 48) = v13;
  return result;
}

uint64_t sub_1B1D1F8D4(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleForce; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1F940(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleCollide; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1F9B8(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticlePivotInit; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1FA30(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for PointCacheSpawner; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4;
  return *(_QWORD *)v9;
}

uint64_t sub_1B1D1FAD4(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleVelocityInit; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1FB5C(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleOpacityOverLife; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1B1D1FC14(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleAngularVelocityInit; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D1FC8C@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int *v15;

  v7 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (_QWORD *)(v7 + 56);
    v10 = 1;
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for ParticleTextureFrameEvolution)
    {
      v9 += 5;
      if (!--v8)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        goto LABEL_8;
      }
    }
    v15 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v9 + a3 * a4);
    v11 = *v15;
    v10 = *((_QWORD *)v15 + 1);
    v12 = *((_QWORD *)v15 + 2);
    v13 = *((_QWORD *)v15 + 3);
    v14 = *((_BYTE *)v15 + 32);
    result = sub_1B1AF7674(v10);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v10 = 1;
  }
LABEL_8:
  *(_QWORD *)a6 = v11;
  *(_QWORD *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = v12;
  *(_QWORD *)(a6 + 24) = v13;
  *(_BYTE *)(a6 + 32) = v14;
  return result;
}

uint64_t sub_1B1D1FD78(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  uint64_t v16;

  v12 = *(_QWORD *)(a1 + 48);
  sub_1B1A1B6FC(0, a6, a7, a8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14)
    return 0;
  for (i = (_QWORD *)(v12 + 56); *(i - 3) != v13; i += 5)
  {
    if (!--v14)
      return 0;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v16;
}

uint64_t sub_1B1D1FE44(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for VFXTag; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  swift_bridgeObjectRetain();
  return v8;
}

_QWORD *sub_1B1D1FECC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F56BA8(a1, **(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1D1FEEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B1D1B7C8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B1D1FF14(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return sub_1B1D1B990(v1, v2);
}

uint64_t method lookup function for VFXEntityObject()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXEntityObject.objectID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of VFXEntityObject._entityInstance.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of VFXEntityObject.removeFromEntityManager()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of VFXEntityObject.tag.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of VFXEntityObject.tag.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of VFXEntityObject.tag.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of VFXEntityObject.copy(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

double sub_1B1D20020(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void sub_1B1D2004C(void *a1)
{
  bzero(a1, 0x290uLL);
}

unint64_t sub_1B1D20054(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for RenderingOrder)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = 0;
    v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v7 + a3 * a4);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

double sub_1B1D200CC(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0x20000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 193) = 0u;
  return result;
}

unint64_t sub_1B1D2010C(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for Opacity)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = 0;
    v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v7 + a3 * a4);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_1B1D20184@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    v9 = 2;
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ParticleFlockingAlignOrientation)
    {
      v8 += 5;
      if (!--v7)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        goto LABEL_8;
      }
    }
    v13 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v7 = v13[8];
    v11 = *((_QWORD *)v13 + 2);
    v12 = *((_QWORD *)v13 + 3);
    v10 = *v13 | ((unint64_t)*((unsigned int *)v13 + 1) << 32);
    v9 = v13[32] | ((unint64_t)*((unsigned int *)v13 + 9) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v9 = 2;
  }
LABEL_8:
  *a6 = v10;
  a6[1] = v7;
  a6[2] = v11;
  a6[3] = v12;
  a6[4] = v9;
  return result;
}

uint64_t sub_1B1D2022C@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int *v13;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ParticleFlockingAlignVelocityOnPlane)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v12 = 0;
    v13 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v9 = *v13;
    v10 = *((_QWORD *)v13 + 2);
    v11 = *((_QWORD *)v13 + 3);
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 1;
  }
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = v10;
  *(_QWORD *)(a6 + 24) = v11;
  *(_BYTE *)(a6 + 32) = v12;
  return result;
}

uint64_t sub_1B1D202AC@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int *v14;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ParticleFlockingConstrainToArea)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v14 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v9 = *v14;
    v7 = *((_QWORD *)v14 + 2);
    v10 = *((_QWORD *)v14 + 3);
    v11 = *((_QWORD *)v14 + 4);
    v12 = *((_QWORD *)v14 + 5);
    v13 = *((_BYTE *)v14 + 48);
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 2;
  }
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = v7;
  *(_QWORD *)(a6 + 24) = v10;
  *(_QWORD *)(a6 + 32) = v11;
  *(_QWORD *)(a6 + 40) = v12;
  *(_BYTE *)(a6 + 48) = v13;
  return result;
}

uint64_t sub_1B1D20338@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int *v14;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ParticleFlockingConstrainToPlane)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v14 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v9 = *v14;
    v7 = *((_QWORD *)v14 + 2);
    v10 = *((_QWORD *)v14 + 3);
    v11 = *((_QWORD *)v14 + 4);
    v12 = *((_QWORD *)v14 + 5);
    v13 = *((_BYTE *)v14 + 48);
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 2;
  }
  *(_QWORD *)a6 = v9;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = v7;
  *(_QWORD *)(a6 + 24) = v10;
  *(_QWORD *)(a6 + 32) = v11;
  *(_QWORD *)(a6 + 40) = v12;
  *(_BYTE *)(a6 + 48) = v13;
  return result;
}

uint64_t sub_1B1D203C4(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleFlockingSpeedControl; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

unint64_t sub_1B1D20438(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for IBLGenerator)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = 0;
    v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v7 + a3 * a4);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_1B1D204B0(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 1;
  v7 = (_QWORD *)(v5 + 56);
  v8 = 1;
  while ((ValueMetadata *)*(v7 - 3) != &type metadata for TextureCGImage)
  {
    v7 += 5;
    if (!--v6)
      return v8;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v7 + a3 * a4);
  v9 = (id)v8;
  return v8;
}

uint64_t sub_1B1D20538(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Bindings; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1B1D205E0@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;

  v6 = *(_QWORD *)(result + 48);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (_QWORD *)(v6 + 56);
    while ((ValueMetadata *)*(v8 - 3) != &type metadata for ParticleLocalBoxCollider)
    {
      v8 += 5;
      if (!--v7)
        goto LABEL_5;
    }
    v14 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v8 + a3 * a4);
    v7 = *v14;
    v9 = v14[1];
    v10 = v14[2];
    v11 = v14[3];
    v12 = v14[4];
    v13 = *((_BYTE *)v14 + 40);
  }
  else
  {
LABEL_5:
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 2;
  }
  *(_QWORD *)a6 = v7;
  *(_QWORD *)(a6 + 8) = v9;
  *(_QWORD *)(a6 + 16) = v10;
  *(_QWORD *)(a6 + 24) = v11;
  *(_QWORD *)(a6 + 32) = v12;
  *(_BYTE *)(a6 + 40) = v13;
  return result;
}

uint64_t sub_1B1D2066C(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for REMeshAssetPointCache; i += 5)
  {
    if (!--v6)
      return 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v8;
}

uint64_t sub_1B1D20710(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Vortex; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D20780(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleCopyData; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

unint64_t sub_1B1D20810(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (_QWORD *)(v5 + 56);
    while ((ValueMetadata *)*(v7 - 3) != &type metadata for DistanceConstraint)
    {
      v7 += 5;
      if (!--v6)
        goto LABEL_5;
    }
    v9 = 0;
    v8 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v7 + a3 * a4);
  }
  else
  {
LABEL_5:
    v8 = 0;
    v9 = 1;
  }
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_1B1D20888@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;

  v7 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (_QWORD *)(v7 + 56);
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for ParticleOpacityOverVelocity)
    {
      v9 += 5;
      if (!--v8)
        goto LABEL_5;
    }
    v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v9 + a3 * a4);
    v10 = *v15;
    v11 = v15[1];
    v12 = v15[2];
    v14 = *((_DWORD *)v15 + 8);
    v13 = *((unsigned __int8 *)v15 + 24) | ((unint64_t)*((unsigned int *)v15 + 7) << 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  *(_QWORD *)a6 = v10;
  *(_QWORD *)(a6 + 8) = v11;
  *(_QWORD *)(a6 + 16) = v12;
  *(_QWORD *)(a6 + 24) = v13;
  *(_DWORD *)(a6 + 32) = v14;
  return result;
}

uint64_t sub_1B1D20954@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int *v15;

  v7 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (_QWORD *)(v7 + 56);
    v10 = 1;
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for ParticleAngleEvolution)
    {
      v9 += 5;
      if (!--v8)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 0;
        goto LABEL_8;
      }
    }
    v15 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v9 + a3 * a4);
    v11 = *v15;
    v10 = *((_QWORD *)v15 + 1);
    v12 = *((_QWORD *)v15 + 2);
    v13 = *((_QWORD *)v15 + 3);
    v14 = *((_BYTE *)v15 + 32);
    result = sub_1B1AF7674(v10);
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v10 = 1;
  }
LABEL_8:
  *(_QWORD *)a6 = v11;
  *(_QWORD *)(a6 + 8) = v10;
  *(_QWORD *)(a6 + 16) = v12;
  *(_QWORD *)(a6 + 24) = v13;
  *(_BYTE *)(a6 + 32) = v14;
  return result;
}

uint64_t sub_1B1D20A40@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;

  v7 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (_QWORD *)(v7 + 56);
    while ((ValueMetadata *)*(v9 - 3) != &type metadata for ParticleOpacityEvolution)
    {
      v9 += 5;
      if (!--v8)
        goto LABEL_5;
    }
    v16 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v9 + a3 * a4);
    v10 = *v16;
    v11 = *((unsigned __int8 *)v16 + 8);
    v12 = v16[2];
    v13 = v16[3];
    v14 = v16[4];
    v15 = *((_BYTE *)v16 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
LABEL_5:
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  *(_QWORD *)a6 = v10;
  *(_QWORD *)(a6 + 8) = v11;
  *(_QWORD *)(a6 + 16) = v12;
  *(_QWORD *)(a6 + 24) = v13;
  *(_QWORD *)(a6 + 32) = v14;
  *(_BYTE *)(a6 + 40) = v15;
  return result;
}

uint64_t sub_1B1D20B1C(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ParticleTargetFromPositionInit; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D20B94(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for ModelRenderer; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

uint64_t sub_1B1D20C04@<X0>(uint64_t result@<X0>, int a2@<W1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;

  v7 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(v7 + 16);
  v9 = 0uLL;
  if (v8)
  {
    v10 = (_QWORD *)(v7 + 56);
    v11 = 1;
    while ((ValueMetadata *)*(v10 - 3) != &type metadata for SDFRuntimeData)
    {
      v10 += 5;
      if (!--v8)
      {
        v12 = 0;
        v13 = 0;
        goto LABEL_8;
      }
    }
    v14 = (__int128 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *v10 + a3 * a4);
    v15 = *v14;
    v12 = *((_QWORD *)v14 + 2);
    v11 = *((_QWORD *)v14 + 3);
    v13 = *((_QWORD *)v14 + 4);
    swift_unknownObjectRetain();
    result = swift_unknownObjectRetain();
    v9 = v15;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v11 = 1;
  }
LABEL_8:
  *(_OWORD *)a6 = v9;
  *(_QWORD *)(a6 + 16) = v12;
  *(_QWORD *)(a6 + 24) = v11;
  *(_QWORD *)(a6 + 32) = v13;
  return result;
}

uint64_t sub_1B1D20CD4(uint64_t a1, int a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return 0;
  for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for TextureRequireMipmap; i += 5)
  {
    if (!--v6)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 136) + 8 * a2 + 32) + 128) + *i + a3 * a4);
}

void sub_1B1D20D50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5E870)
  {
    sub_1B1D20DAC();
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5E870);
  }
}

unint64_t sub_1B1D20DAC()
{
  unint64_t result;

  result = qword_1EEF5DA50;
  if (!qword_1EEF5DA50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A3CC0, &type metadata for VFXBridgeableReference);
    atomic_store(result, (unint64_t *)&qword_1EEF5DA50);
  }
  return result;
}

void sub_1B1D20DF0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5DA58)
  {
    sub_1B1D20E54();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5DA58);
  }
}

void sub_1B1D20E54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA260)
  {
    sub_1B222826C();
    sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA260);
  }
}

void sub_1B1D20ED0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5CF58)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5CF58);
  }
}

uint64_t sub_1B1D20F40(void *a1)
{
  id v2;
  void *v3;

  sub_1B2229430();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(a1, sel_label);
  if (v2)
  {
    v3 = v2;
    sub_1B222874C();

  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 34;
}

uint64_t sub_1B1D21098()
{
  void **v0;

  return sub_1B1D20F40(*v0);
}

uint64_t sub_1B1D210A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD v12[2];
  __int128 v13;

  v1 = sub_1B222A0FC();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1EEF5DA60, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEDFC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v12 - v8;
  v12[1] = *(_QWORD *)v0;
  v13 = *(_OWORD *)(v0 + 8);
  v12[0] = MEMORY[0x1E0DEE9D8];
  v10 = sub_1B222A0E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E0DEDFE8], v1);
  sub_1B1791524(0, &qword_1EEF5DA68, (uint64_t (*)(uint64_t))sub_1B1D2319C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1D2325C();
  swift_unknownObjectRetain();
  return sub_1B222A114();
}

BOOL sub_1B1D21218(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_1B1D21248()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PrivateHeap()
{
  return objc_opt_self();
}

uint64_t sub_1B1D21294(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = (_DWORD *)swift_slowAlloc();
  *v11 = 0;
  *(_QWORD *)(v5 + 32) = "BufferPool";
  *(_QWORD *)(v5 + 40) = 10;
  *(_BYTE *)(v5 + 48) = 2;
  v12 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v5 + 56) = v11;
  *(_QWORD *)(v5 + 64) = v12;
  *(_QWORD *)(v5 + 72) = v12;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = v12;
  *(_BYTE *)(v5 + 136) = 1;
  *(_QWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 88) = a1;
  *(_QWORD *)(v5 + 96) = a2;
  swift_unknownObjectRetain();
  v13 = swift_slowAlloc();
  *(_QWORD *)(v5 + 144) = v13;
  *(_QWORD *)(v5 + 152) = 1;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)v13 = 0;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 120;
  bzero((void *)(v14 + 32), 0x3C0uLL);
  swift_unknownObjectRelease();
  *(_QWORD *)(v5 + 120) = v14;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 128) = a5;
  return v5;
}

uint64_t sub_1B1D2139C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  if (v1)
    MEMORY[0x1B5E23F88](v1, -1, -1);
  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 56), -1, -1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1D213FC()
{
  sub_1B1D2139C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BufferPool()
{
  return objc_opt_self();
}

uint64_t sub_1B1D2143C(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = (char *)a1[15];
  v3 = *((_QWORD *)v2 + 2);
  if (v3)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    a1[15] = v2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v2 = sub_1B1FFECF0((uint64_t)v2);
    bzero(v2 + 32, 8 * v3);
    a1[15] = v2;
  }
  v5 = a1[19];
  if (v5)
  {
    v6 = 0;
    do
    {
      v7 = a1[18] + v6;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)v7 = 0;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_OWORD *)(v7 + 64) = 0u;
      *(_OWORD *)(v7 + 80) = 0u;
      swift_unknownObjectRelease();
      v6 += 96;
      --v5;
    }
    while (v5);
  }
  v8 = swift_retain();
  sub_1B1D22460(v8, (uint64_t)a1);
  swift_release();
  v9 = MEMORY[0x1E0DEE9D8];
  a1[9] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  a1[8] = v9;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D21518()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 72);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_retain();
  v4 = sub_1B1D22998(0, v3, v1);
  v6 = v5;
  result = swift_release();
  if ((v6 & 1) == 0)
  {
    if (*(_BYTE *)(v1 + 24) == 1)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v8 = *(_QWORD *)(v1 + 96);
      v11 = *(_QWORD *)(v1 + 88);
      v12 = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B22286C8();
      sub_1B1B40D84();
      sub_1B2228944();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v9 = v11;
      v10 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v11 = 0;
      swift_retain();
      sub_1B1F1AD70(v10, &v11, v9, v12);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    sub_1B1DBA0D4(v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B1D217B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t result;

  v2 = 1;
  v3 = 1 << -(char)__clz(a1 - 1);
  if (a1)
    v2 = v3;
  v4 = (a1 + 0x7FFFF) & 0x7FFFF;
  if (a1 + 0x7FFFF <= 0)
    v4 = -(-(a1 + 0x7FFFF) & 0x7FFFF);
  if (a1 + 0x7FFFF - v4 >= v2)
    v5 = v2;
  else
    v5 = a1 + 0x7FFFF - v4;
  v6 = objc_msgSend(*(id *)(v1 + 16), sel_newBufferWithLength_options_, v5, 0);
  if (v6)
  {
    v7 = v6;
    swift_bridgeObjectRetain();
    sub_1B22286C8();
    sub_1B1B40D84();
    sub_1B2228944();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v8 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_setLabel_, v8);

    swift_unknownObjectRetain();
    sub_1B1D22AFC(v1, v7);
    swift_unknownObjectRelease();
    ++*(_QWORD *)(v1 + 80);
    return (uint64_t)v7;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1D219D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 72);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v7 >= 4)
    {
      do
      {
LABEL_3:
        while (1)
        {
          sub_1B1D21518();
          v5 = *(_QWORD *)(v2 + 72);
          if (v5 >> 62)
            break;
          if (*(uint64_t *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10) <= 3)
            goto LABEL_9;
        }
        swift_bridgeObjectRetain();
        v6 = sub_1B22296AC();
        swift_bridgeObjectRelease();
      }
      while (v6 > 3);
    }
  }
  else if (*(uint64_t *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4)
  {
    goto LABEL_3;
  }
LABEL_9:
  v8 = *(_QWORD *)(v2 + 72);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1B22296AC();
    if (v9)
      goto LABEL_11;
LABEL_30:
    swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
    goto LABEL_31;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
    goto LABEL_30;
LABEL_11:
  v22 = MEMORY[0x1E0DEE9D8];
  sub_1B2229550();
  v10 = 0;
  if (a1 <= 0x80000)
    v11 = 0x80000;
  else
    v11 = a1;
  v21 = v11;
  v20 = 0x80000001B2339030;
  do
  {
    if ((v8 & 0xC000000000000001) != 0)
    {
      v14 = (void *)MEMORY[0x1B5E21018](v10, v8);
    }
    else
    {
      v14 = *(void **)(v8 + 8 * v10 + 32);
      swift_unknownObjectRetain();
    }
    if ((uint64_t)objc_msgSend(v14, sel_length, v20) < a1)
    {
      v12 = (void *)sub_1B2228728();
      objc_msgSend(v14, sel_setLabel_, v12);

      swift_unknownObjectRetain();
      sub_1B1D23318(v2, v14);
      v13 = a1;
LABEL_16:
      swift_unknownObjectRelease();
      sub_1B1D217B8(v13);
      swift_unknownObjectRelease();
      goto LABEL_17;
    }
    v15 = objc_msgSend(v14, sel_length);
    if ((uint64_t)v15 >= 0)
      v16 = (uint64_t)v15;
    else
      v16 = (uint64_t)v15 + 1;
    if (a1 < v16 >> 1 && (uint64_t)objc_msgSend(v14, sel_length) > 0x80000)
    {
      v17 = (void *)sub_1B2228728();
      objc_msgSend(v14, sel_setLabel_, v17);

      swift_unknownObjectRetain();
      sub_1B1D23318(v2, v14);
      v13 = v21;
      goto LABEL_16;
    }
LABEL_17:
    ++v10;
    sub_1B2229520();
    sub_1B2229568();
    sub_1B2229574();
    sub_1B2229538();
  }
  while (v9 != v10);
  v18 = v22;
  swift_bridgeObjectRelease();
LABEL_31:
  *(_QWORD *)(v2 + 72) = v18;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1B1D21D1C())()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int8x16_t v12;
  int64x2_t *v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t *v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 56));
  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(char **)(v0 + 120);
  v3 = *((_QWORD *)v1 + 2);
  v4 = *(_QWORD *)(v0 + 104);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 120) = v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v1 = sub_1B1FFECF0((uint64_t)v1);
  *(_QWORD *)&v1[8 * (v2 % v3) + 32] = v4;
  v6 = *(_QWORD *)(v0 + 112) + 1;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = v6;
  *(_QWORD *)(v0 + 120) = v1;
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *((_QWORD *)v1 + 2);
  if (!v8)
  {
    v9 = 0;
    goto LABEL_15;
  }
  v9 = *((_QWORD *)v1 + 4);
  v10 = v8 - 1;
  if (v8 != 1)
  {
    if (v8 >= 5)
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v12 = (int8x16_t)vdupq_n_s64(v9);
      v13 = (int64x2_t *)(v1 + 56);
      v14 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v12;
      do
      {
        v12 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v12, v13[-1]), v12, (int8x16_t)v13[-1]);
        v15 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v15, *v13), v15, *(int8x16_t *)v13);
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      v16 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v12, (int64x2_t)v15), v12, v15);
      v17 = vextq_s8(v16, v16, 8uLL).u64[0];
      v9 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v16.i64[0], v17), *(int8x8_t *)v16.i8, (int8x8_t)v17);
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_15;
    }
    else
    {
      v11 = 1;
    }
    v18 = v8 - v11;
    v19 = (int64_t *)&v1[8 * v11 + 32];
    do
    {
      v21 = *v19++;
      v20 = v21;
      if (v9 <= v21)
        v9 = v20;
      --v18;
    }
    while (v18);
  }
LABEL_15:
  swift_bridgeObjectRetain_n();
  sub_1B1D226E4(v0, v7);
  swift_bridgeObjectRelease();
  v22 = swift_allocObject();
  swift_weakInit();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v22;
  v23[3] = v7;
  v23[4] = v9;
  *(_QWORD *)(v0 + 64) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)v24 = 0;
  *(_OWORD *)(v24 + 32) = 0u;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  swift_unknownObjectRelease();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 56));
  return sub_1B1D2330C;
}

uint64_t sub_1B1D21EF0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(result + 56));
    v7 = swift_bridgeObjectRetain();
    sub_1B19F5FC4(v7);
    swift_bridgeObjectRetain();
    v8 = swift_retain();
    sub_1B1D2359C(v8, a2, v6);
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B1D219D4(a3);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 56));
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1D21F94(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 56));
  v3 = *(_QWORD *)(v1 + 72);
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRelease();
    sub_1B1D21518();
    v8 = sub_1B1D217B8(a1);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  v4 = sub_1B22296AC();
  if (!v4)
    goto LABEL_9;
LABEL_3:
  v5 = v4 + 3;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      v6 = (void *)MEMORY[0x1B5E21018](v5 - 4, v3);
    }
    else
    {
      v6 = *(void **)(v3 + 8 * v5);
      swift_unknownObjectRetain();
    }
    v7 = objc_msgSend(v6, sel_length);
    swift_unknownObjectRelease();
    if ((uint64_t)v7 >= a1)
      break;
    if (--v5 == 3)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  v8 = sub_1B1DBA0D4(v5 - 4);
LABEL_11:
  v9 = v8;
  v10 = swift_unknownObjectRetain();
  MEMORY[0x1B5E2064C](v10);
  if (*(_QWORD *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  sub_1B2228AD0();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 56));
  return v9;
}

void *sub_1B1D22108(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  char *v10;
  id v11;

  if (a2)
    v4 = a3 - (_QWORD)a2;
  else
    v4 = 0;
  v5 = (void *)sub_1B1D22DA8(a1, v4);
  v7 = v6;
  v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode);
  v9 = 0;
  if (v8 != (id)2)
  {
    v10 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v11 = v5;
    v9 = &v10[v7];
  }
  memcpy(v9, a2, v4);
  return v5;
}

uint64_t initializeWithCopy for BufferPool.PaddedConstantBuffer(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BufferPool.PaddedConstantBuffer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for BufferPool.PaddedConstantBuffer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for BufferPool.PaddedConstantBuffer(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BufferPool.PaddedConstantBuffer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BufferPool.PaddedConstantBuffer()
{
  return &type metadata for BufferPool.PaddedConstantBuffer;
}

uint64_t initializeBufferWithCopyOfBuffer for BufferSlice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BufferSlice(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for BufferSlice(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for BufferSlice()
{
  return &type metadata for BufferSlice;
}

uint64_t sub_1B1D22460(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 24) == 1)
  {
    v3 = result;
    if (qword_1ED4BF430 != -1)
      swift_once();
    v4 = *(_QWORD *)(v3 + 96);
    v7 = *(_QWORD *)(v3 + 88);
    v8 = v4;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B22286C8();
    sub_1B1B40D84();
    sub_1B2228944();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229430();
    sub_1B2228890();
    if (*(_QWORD *)(a2 + 72) >> 62)
    {
      swift_bridgeObjectRetain();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v5 = v7;
    v6 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v7 = 0;
    swift_retain();
    sub_1B1F1AD70(v6, &v7, v5, v8);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1D226E4(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 24) == 1)
  {
    v3 = result;
    if (qword_1ED4BF430 != -1)
      swift_once();
    v4 = *(_QWORD *)(v3 + 96);
    v7 = *(_QWORD *)(v3 + 88);
    v8 = v4;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B22286C8();
    sub_1B1B40D84();
    sub_1B2228944();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229430();
    sub_1B2228890();
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v5 = v7;
    v6 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v7 = 0;
    swift_retain();
    sub_1B1F1AD70(v6, &v7, v5, v8);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1D22998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;

  if (a1 == a2)
    return 0;
  v3 = a1;
  if (a1 + 1 != a2)
  {
    v3 = a1;
    v6 = a1;
    v7 = a1;
    do
    {
      v8 = *(_QWORD *)(a3 + 72);
      if ((v8 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v9 = (void *)MEMORY[0x1B5E21018](v6 + 1, v8);
        swift_bridgeObjectRelease();
      }
      else
      {
        v9 = *(void **)(v8 + 8 * v6 + 40);
        swift_unknownObjectRetain();
      }
      v10 = objc_msgSend(v9, sel_length);
      swift_unknownObjectRelease();
      v11 = *(_QWORD *)(a3 + 72);
      if ((v11 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v12 = (void *)MEMORY[0x1B5E21018](v7, v11);
        swift_bridgeObjectRelease();
      }
      else
      {
        v12 = *(void **)(v11 + 8 * v7 + 32);
        swift_unknownObjectRetain();
      }
      v13 = objc_msgSend(v12, sel_length);
      swift_unknownObjectRelease();
      if ((uint64_t)v10 < (uint64_t)v13)
      {
        v3 = v6 + 1;
        v7 = v6 + 1;
      }
      ++v6;
    }
    while (a2 - 1 != v6);
  }
  return v3;
}

uint64_t sub_1B1D22AFC(uint64_t result, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(result + 24) == 1)
  {
    v3 = result;
    if (qword_1ED4BF430 != -1)
      swift_once();
    v4 = *(_QWORD *)(v3 + 96);
    v8 = *(_QWORD *)(v3 + 88);
    v9 = v4;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B22286C8();
    sub_1B1B40D84();
    sub_1B2228944();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229430();
    sub_1B2228890();
    v5 = objc_msgSend(a2, sel_label);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    objc_msgSend(a2, sel_length);
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v6 = v8;
    v7 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v8 = 0;
    swift_retain();
    sub_1B1F1AD70(v7, &v8, v6, v9);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1D22DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v3 = (_QWORD *)v2;
  v6 = *(_QWORD *)(v2 + 144) + 96 * a1;
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16);
  if (*(_BYTE *)(v2 + 24) == 1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v9 = *(_QWORD *)(v2 + 96);
    v20 = v3[11];
    v21 = v9;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B22286C8();
    sub_1B1B40D84();
    sub_1B2228944();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    if (v3[9] >> 62)
    {
      swift_bridgeObjectRetain();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v10 = v20;
    v11 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v20 = 0;
    swift_retain();
    sub_1B1F1AD70(v11, &v20, v10, v21);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  v12 = v3[16];
  if (v12 <= ((a2 + v12 - 1) & -v12))
    v13 = (a2 + v12 - 1) & -v12;
  else
    v13 = v3[16];
  v3[13] += v13;
  if (v8 < v13 + v7)
  {
    v14 = sub_1B1D21F94(v13 + v7);
    v15 = v3[18];
    v16 = objc_msgSend((id)swift_unknownObjectRetain(), sel_length);
    v17 = v15 + 96 * a1;
    *(_QWORD *)v17 = v14;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = v16;
    *(_OWORD *)(v17 + 32) = 0u;
    *(_OWORD *)(v17 + 48) = 0u;
    *(_OWORD *)(v17 + 64) = 0u;
    *(_OWORD *)(v17 + 80) = 0u;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  v18 = (uint64_t *)(v3[18] + 96 * a1);
  result = *v18;
  v18[1] += v13;
  return result;
}

void sub_1B1D2319C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5DA70)
  {
    sub_1B1D23208();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5DA70);
  }
}

void sub_1B1D23208()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA2B0)
  {
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA2B0);
  }
}

unint64_t sub_1B1D2325C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5DA80;
  if (!qword_1EEF5DA80)
  {
    sub_1B1791524(255, &qword_1EEF5DA68, (uint64_t (*)(uint64_t))sub_1B1D2319C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5DA80);
  }
  return result;
}

uint64_t sub_1B1D232BC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1D232E0()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1D2330C()
{
  uint64_t v0;

  return sub_1B1D21EF0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1B1D23318(uint64_t result, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(result + 24) == 1)
  {
    v3 = result;
    if (qword_1ED4BF430 != -1)
      swift_once();
    v4 = *(_QWORD *)(v3 + 96);
    v7 = *(_QWORD *)(v3 + 88);
    v8 = v4;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B22286C8();
    sub_1B1B40D84();
    sub_1B2228944();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229430();
    sub_1B2228890();
    objc_msgSend(a2, sel_length);
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v5 = v7;
    v6 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v7 = 0;
    swift_retain();
    sub_1B1F1AD70(v6, &v7, v5, v8);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1D2359C(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(result + 24) == 1)
  {
    v5 = result;
    if (qword_1ED4BF430 != -1)
      swift_once();
    v6 = *(_QWORD *)(v5 + 96);
    v9 = *(_QWORD *)(v5 + 88);
    v10 = v6;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B22286C8();
    sub_1B1B40D84();
    sub_1B2228944();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2229430();
    sub_1B2228890();
    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    if (*(_QWORD *)(a3 + 72) >> 62)
    {
      swift_bridgeObjectRetain();
      sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v7 = v9;
    v8 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v9 = 0;
    swift_retain();
    sub_1B1F1AD70(v8, &v9, v7, v10);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1D2389C@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[10];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = 0xD000000000000015;
  v6[0] = 0xD000000000000015;
  v6[1] = 0x80000001B2339120;
  v6[2] = 0;
  v6[3] = 0;
  if ((a1 & 0x4000) != 0)
    v3 = 0xD00000000000001ELL;
  v6[4] = MEMORY[0x1E0DEE9D8];
  v6[5] = v3;
  v4 = 0x80000001B2339160;
  if ((a1 & 0x4000) == 0)
    v4 = 0x80000001B2339140;
  v6[6] = v4;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = MEMORY[0x1E0DEE9D8];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  nullsub_16(v6);
  return sub_1B19F66A0((uint64_t)v6, a2, &qword_1ED4B8CF8);
}

id sub_1B1D23958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21[3];
  _BYTE v22[48];
  _OWORD v23[2];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a3;
  v5 = *(_DWORD *)(a3 + 36);
  v6 = *(int *)(a3 + 32);
  swift_retain();
  v7 = (_DWORD)v6 == -1 && v5 == 0;
  if (v7
    || (v6 & 0x80000000) != 0
    || *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v6
    || (v8 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v5 != -1)
    && *(_DWORD *)(v8 + 12 * (int)v6 + 8) != v5
    || (sub_1B1D1F214(*(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *(int *)(v8 + 12 * (int)v6) + 32), *(_DWORD *)(v8 + 12 * (int)v6), *(_WORD *)(v8 + 12 * (int)v6 + 4), 32, v4, (uint64_t)v22), sub_1B19F66A0((uint64_t)v22, (uint64_t)v23, &qword_1ED4BA220), (v24 & 1) != 0))
  {
    swift_release();
    return 0;
  }
  else
  {
    v19 = v23[1];
    v20 = v23[0];
    v11 = *v3;
    v12 = v3[1];
    v13 = v3[2];
    swift_retain();
    v9 = (id)sub_1B1D22DA8(0, 64);
    v15 = v14;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v21[0] = 0;
      v21[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v16 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v21[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v16, v21, 0xD000000000000049, 0x80000001B23390D0);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      v17 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v9 = v9;
      v18 = &v17[v15];
      *(_OWORD *)v18 = v20;
      *((_OWORD *)v18 + 1) = v19;
      *((_QWORD *)v18 + 4) = v11;
      *((_QWORD *)v18 + 5) = v12;
      *((_QWORD *)v18 + 6) = v13;
      swift_release();
    }
    swift_release();
  }
  return v9;
}

uint64_t sub_1B1D23C2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D23C64 + 4 * byte_1B228D3F0[a1]))(0x656E68746F6F6D73, 0xEA00000000007373);
}

unint64_t sub_1B1D23C64()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1D23CDC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  sub_1B1D245C8(0, &qword_1EEF5DAA0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v10[-v7];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D24584();
  sub_1B222A180();
  v10[15] = 0;
  sub_1B2229934();
  if (!v1)
  {
    v10[14] = 1;
    sub_1B2229934();
    v10[13] = 2;
    sub_1B2229934();
    v10[12] = 3;
    sub_1B2229934();
    v10[11] = 4;
    sub_1B2229934();
    v10[10] = 5;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1B1D23E98(char *a1)
{
  sub_1B1F96EF0(*a1);
}

uint64_t sub_1B1D23EA4()
{
  unsigned __int8 *v0;

  return sub_1B1D23C2C(*v0);
}

uint64_t sub_1B1D23EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1D24018(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1D23ED0()
{
  sub_1B1D24584();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D23EF8()
{
  sub_1B1D24584();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D23F20()
{
  return 0x100000000;
}

uint64_t sub_1B1D23F3C()
{
  uint64_t v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = sub_1B20C3C0C(7);
  *(_QWORD *)(v0 + 88) = sub_1B1D2389C;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

double sub_1B1D23F98@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  uint64_t v6;

  sub_1B1D2436C(a1, &v5);
  if (!v2)
  {
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B1D23FD8(_QWORD *a1)
{
  return sub_1B1D23CDC(a1);
}

double sub_1B1D23FEC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1B228D5E0;
  result = 524288.0;
  *(_QWORD *)(a1 + 16) = 0x4120000000000000;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSurfaceRenderer()
{
  return &type metadata for ParticleSurfaceRenderer;
}

uint64_t sub_1B1D24018(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E68746F6F6D73 && a2 == 0xEA00000000007373;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001B232CE90 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B232E270 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B232E290 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001B232E2B0 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001B232E2D0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1B1D24274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[14];

  *(_QWORD *)(a1 + 16) = 4;
  *(_QWORD *)(a2 + 32) = 14;
  *(_OWORD *)(a2 + 16) = xmmword_1B2246910;
  v2 = *(_QWORD *)(*(_QWORD *)a2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 240);
    swift_retain();
    swift_retain();
    sub_1B1FAE1BC(1u, 3, v3, v2, 1u, 3, (uint64_t)v6);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  v4 = swift_unknownObjectRetain();
  sub_1B1D2C354(v4, 0, 0, 0, 11, 0);
  return swift_unknownObjectRelease_n();
}

uint64_t sub_1B1D2436C@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  sub_1B1D245C8(0, &qword_1EEF5DA90, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v24 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D24584();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v30 = 0;
  sub_1B22297F0();
  v12 = v11;
  v29 = 1;
  sub_1B22297F0();
  v14 = v13;
  v28 = 2;
  sub_1B22297F0();
  v16 = v15;
  v27 = 3;
  sub_1B22297F0();
  v18 = v17;
  v26 = 4;
  sub_1B22297F0();
  v20 = v19;
  v25 = 5;
  sub_1B22297F0();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v16;
  a2[3] = v18;
  a2[4] = v20;
  a2[5] = v22;
  return result;
}

unint64_t sub_1B1D24584()
{
  unint64_t result;

  result = qword_1EEF5DA98;
  if (!qword_1EEF5DA98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228D58C, &type metadata for ParticleSurfaceRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DA98);
  }
  return result;
}

void sub_1B1D245C8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1D24584();
    v7 = a3(a1, &type metadata for ParticleSurfaceRenderer.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleSurfaceRenderer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B1D24670 + 4 * byte_1B228D3FB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B1D246A4 + 4 * byte_1B228D3F6[v4]))();
}

uint64_t sub_1B1D246A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D246AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D246B4);
  return result;
}

uint64_t sub_1B1D246C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D246C8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B1D246CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D246D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSurfaceRenderer.CodingKeys()
{
  return &type metadata for ParticleSurfaceRenderer.CodingKeys;
}

unint64_t sub_1B1D246F4()
{
  unint64_t result;

  result = qword_1EEF5DAA8;
  if (!qword_1EEF5DAA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228D564, &type metadata for ParticleSurfaceRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DAA8);
  }
  return result;
}

unint64_t sub_1B1D2473C()
{
  unint64_t result;

  result = qword_1EEF5DAB0;
  if (!qword_1EEF5DAB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228D4D4, &type metadata for ParticleSurfaceRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DAB0);
  }
  return result;
}

unint64_t sub_1B1D24784()
{
  unint64_t result;

  result = qword_1EEF5DAB8;
  if (!qword_1EEF5DAB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228D4FC, &type metadata for ParticleSurfaceRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DAB8);
  }
  return result;
}

uint64_t sub_1B1D247C8()
{
  return swift_initClassMetadata2();
}

BOOL sub_1B1D2480C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))() == 0xFFFFFFFFLL;
}

uint64_t sub_1B1D24830(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[144];

  v2 = MEMORY[0x1E0C80A78](a1, v1);
  (*(void (**)(_BYTE *, double))(v4 + 16))(&v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)], v2);
  return swift_dynamicCast();
}

BOOL sub_1B1D248B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void (*v20)(_BYTE *, uint64_t, uint64_t, double);
  uint64_t v21;
  int v22;
  _BOOL8 v23;
  _BYTE v25[144];

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v25[-v11];
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v25[-v15];
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v20 = *(void (**)(_BYTE *, uint64_t, uint64_t, double))(v6 + 16);
  v20(&v25[-v21], v3, a1, v19);
  v22 = swift_dynamicCast();
  ((void (*)(_BYTE *, uint64_t, uint64_t))v20)(v16, v3, a1);
  if (v22)
  {
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v16, a1);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v12, v16, a1);
    if ((swift_dynamicCast() & 1) == 0)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))v20)(v8, v3, a1);
      v23 = 0;
      goto LABEL_6;
    }
  }
  ((void (*)(_BYTE *, uint64_t, uint64_t))v20)(v8, v3, a1);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2) == 0xFFFFFFFFLL;
LABEL_6:
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, a1);
  return v23;
}

uint64_t sub_1B1D24A64(uint64_t result, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  os_unfair_lock_s *v13;

  v4 = v3;
  v6 = result;
  if (result != 0xFFFFFFFFLL
    && result << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)result < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(result) == -1 || *(_DWORD *)(v7 + 12 * (int)result + 8) == HIDWORD(result))
    {
      v8 = (int *)(v7 + 12 * (int)result);
      v9 = *((__int16 *)v8 + 2);
      v10 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *v8 + 32);
      if (*(_QWORD *)(v10 + 232) <= v9 && *(_QWORD *)(v10 + 240) > v9)
      {
        v12 = **(_QWORD **)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        v13 = *(os_unfair_lock_s **)(v10 + 344);
        swift_retain();
        os_unfair_lock_lock(v13);
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(v12 + 32));
        swift_retain();
        sub_1B1D2CD08(v12, v10, v9, v2, v6, a2);
        swift_release();
        if (!v4)
          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v12 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1B1D24BB0()
{
  return 4;
}

void *sub_1B1D24BB8(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return sub_1B1D24C70(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD))type metadata accessor for particle_primitive_material_constants, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A8F70);
}

void *sub_1B1D24C14(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  return sub_1B1D24C70(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD))type metadata accessor for particle_box_material_constants, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398990);
}

void *sub_1B1D24C70(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t a8)
{
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  char *v32;
  id v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[5];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v8 = a1[3];
  v47[2] = a1[2];
  v47[3] = v8;
  v47[4] = a1[4];
  v9 = a1[1];
  v47[0] = *a1;
  v47[1] = v9;
  v10 = *(_QWORD **)(a2 + 16);
  if (!v10)
    return 0;
  v15 = v10[22];
  if (v15 <= 0)
  {
    v15 = v10[25];
    if (v15 < 1)
      return 0;
  }
  swift_retain();
  swift_retain();
  v16 = (void *)sub_1B1D22DA8(0, v15);
  v18 = v17;
  v41 = v19;
  swift_unknownObjectRetain();
  swift_release();
  if (v10[21])
  {
    v20 = (void *)v10[21];
  }
  else
  {
    v20 = (void *)v10[24];
    if (!v20)
    {
      v30 = a1[3];
      v44 = a1[2];
      v45 = v30;
      v46 = a1[4];
      v31 = a1[1];
      v42 = *a1;
      v43 = v31;
      objc_msgSend(v16, sel_storageMode);
      v32 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v33 = v16;
      v34 = &v32[v18];
      v35 = v45;
      *((_OWORD *)v34 + 2) = v44;
      *((_OWORD *)v34 + 3) = v35;
      *((_OWORD *)v34 + 4) = v46;
      v36 = v43;
      *(_OWORD *)v34 = v42;
      *((_OWORD *)v34 + 1) = v36;
      swift_release();
      return v16;
    }
    swift_unknownObjectRetain();
  }
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  if (objc_msgSend(v20, sel_encodedLength) != (id)v15)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v22 = sub_1B2228E90();
    *(_QWORD *)&v42 = 1;
    sub_1B1F1AAF0(v22, 0xD00000000000002ELL, 0x80000001B23393C0, (uint64_t *)&v42);
    swift_release();
  }
  sub_1B1F9C328((uint64_t)v16, v18, v41, 0);
  v23 = a6(0);
  sub_1B1F9C340((uint64_t)v47, 0, ObjectType, v23);
  v24 = *a4;
  v25 = *(unsigned __int8 *)(a5 + 28);
  swift_retain();
  v26 = sub_1B1D28BA8(a3, v24, v25, a7, a8);
  v28 = v27;
  swift_release();
  sub_1B1F9C3D8(v28, 200);
  sub_1B1F9C214(v26, 201, (unint64_t *)(a2 + 136));
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v16;
}

void *sub_1B1D24F6C(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  char *v23;
  id v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[5];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = a1[3];
  v33[2] = a1[2];
  v33[3] = v2;
  v33[4] = a1[4];
  v3 = a1[1];
  v33[0] = *a1;
  v33[1] = v3;
  v4 = *(_QWORD **)(a2 + 16);
  if (!v4)
    return 0;
  v7 = v4[22];
  if (v7 <= 0)
  {
    v7 = v4[25];
    if (v7 < 1)
      return 0;
  }
  swift_retain();
  swift_retain();
  v8 = (void *)sub_1B1D22DA8(0, v7);
  v10 = v9;
  v12 = v11;
  swift_unknownObjectRetain();
  swift_release();
  if (v4[21])
  {
    v13 = (void *)v4[21];
  }
  else
  {
    v13 = (void *)v4[24];
    if (!v13)
    {
      v21 = a1[3];
      v30 = a1[2];
      v31 = v21;
      v32 = a1[4];
      v22 = a1[1];
      v28 = *a1;
      v29 = v22;
      objc_msgSend(v8, sel_storageMode);
      v23 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v24 = v8;
      v25 = &v23[v10];
      v26 = v31;
      *((_OWORD *)v25 + 2) = v30;
      *((_OWORD *)v25 + 3) = v26;
      *((_OWORD *)v25 + 4) = v32;
      v27 = v29;
      *(_OWORD *)v25 = v28;
      *((_OWORD *)v25 + 1) = v27;
      swift_release();
      return v8;
    }
    swift_unknownObjectRetain();
  }
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  if (objc_msgSend(v13, sel_encodedLength) != (id)v7)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v15 = sub_1B2228E90();
    *(_QWORD *)&v28 = 1;
    sub_1B1F1AAF0(v15, 0xD00000000000002ELL, 0x80000001B23393C0, (uint64_t *)&v28);
    swift_release();
  }
  sub_1B1F9C328((uint64_t)v8, v10, v12, 0);
  type metadata accessor for particle_line_material_constants(0);
  sub_1B1F9C340((uint64_t)v33, 0, ObjectType, v16);
  swift_retain();
  v17 = sub_1B1D28D1C();
  v19 = v18;
  swift_release();
  sub_1B1F9C3D8(v19, 200);
  sub_1B1F9C214(v17, 201, (unint64_t *)(a2 + 136));
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v8;
}

void *sub_1B1D2526C(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  id v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[6];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = a1[3];
  v37[2] = a1[2];
  v37[3] = v2;
  v3 = a1[5];
  v37[4] = a1[4];
  v37[5] = v3;
  v4 = a1[1];
  v37[0] = *a1;
  v37[1] = v4;
  v5 = *(_QWORD **)(a2 + 16);
  if (!v5)
    return 0;
  v8 = v5[22];
  if (v8 <= 0)
  {
    v8 = v5[25];
    if (v8 < 1)
      return 0;
  }
  swift_retain();
  swift_retain();
  v9 = (void *)sub_1B1D22DA8(0, v8);
  v11 = v10;
  v30 = v12;
  swift_unknownObjectRetain();
  swift_release();
  if (v5[21])
  {
    v13 = (void *)v5[21];
  }
  else
  {
    v13 = (void *)v5[24];
    if (!v13)
    {
      v21 = a1[3];
      v33 = a1[2];
      v34 = v21;
      v22 = a1[5];
      v35 = a1[4];
      v36 = v22;
      v23 = a1[1];
      v31 = *a1;
      v32 = v23;
      objc_msgSend(v9, sel_storageMode);
      v24 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v25 = v9;
      v26 = &v24[v11];
      v27 = v34;
      *((_OWORD *)v26 + 2) = v33;
      *((_OWORD *)v26 + 3) = v27;
      v28 = v36;
      *((_OWORD *)v26 + 4) = v35;
      *((_OWORD *)v26 + 5) = v28;
      v29 = v32;
      *(_OWORD *)v26 = v31;
      *((_OWORD *)v26 + 1) = v29;
      swift_release();
      return v9;
    }
    swift_unknownObjectRetain();
  }
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  if (objc_msgSend(v13, sel_encodedLength) != (id)v8)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v15 = sub_1B2228E90();
    *(_QWORD *)&v31 = 1;
    sub_1B1F1AAF0(v15, 0xD00000000000002ELL, 0x80000001B23393C0, (uint64_t *)&v31);
    swift_release();
  }
  sub_1B1F9C328((uint64_t)v9, v11, v30, 0);
  type metadata accessor for particle_point_material_constants(0);
  sub_1B1F9C340((uint64_t)v37, 0, ObjectType, v16);
  swift_retain();
  v17 = sub_1B1D28FBC();
  v19 = v18;
  swift_release();
  sub_1B1F9C3D8(v19, 200);
  sub_1B1F9C214(v17, 201, (unint64_t *)(a2 + 136));
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v9;
}

void *sub_1B1D2555C(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  char *v23;
  id v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[5];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = a1[3];
  v33[2] = a1[2];
  v33[3] = v2;
  v33[4] = a1[4];
  v3 = a1[1];
  v33[0] = *a1;
  v33[1] = v3;
  v4 = *(_QWORD **)(a2 + 16);
  if (!v4)
    return 0;
  v7 = v4[22];
  if (v7 <= 0)
  {
    v7 = v4[25];
    if (v7 < 1)
      return 0;
  }
  swift_retain();
  swift_retain();
  v8 = (void *)sub_1B1D22DA8(0, v7);
  v10 = v9;
  v12 = v11;
  swift_unknownObjectRetain();
  swift_release();
  if (v4[21])
  {
    v13 = (void *)v4[21];
  }
  else
  {
    v13 = (void *)v4[24];
    if (!v13)
    {
      v21 = a1[3];
      v30 = a1[2];
      v31 = v21;
      v32 = a1[4];
      v22 = a1[1];
      v28 = *a1;
      v29 = v22;
      objc_msgSend(v8, sel_storageMode);
      v23 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v24 = v8;
      v25 = &v23[v10];
      v26 = v31;
      *((_OWORD *)v25 + 2) = v30;
      *((_OWORD *)v25 + 3) = v26;
      *((_OWORD *)v25 + 4) = v32;
      v27 = v29;
      *(_OWORD *)v25 = v28;
      *((_OWORD *)v25 + 1) = v27;
      swift_release();
      return v8;
    }
    swift_unknownObjectRetain();
  }
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  if (objc_msgSend(v13, sel_encodedLength) != (id)v7)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v15 = sub_1B2228E90();
    *(_QWORD *)&v28 = 1;
    sub_1B1F1AAF0(v15, 0xD00000000000002ELL, 0x80000001B23393C0, (uint64_t *)&v28);
    swift_release();
  }
  sub_1B1F9C328((uint64_t)v8, v10, v12, 0);
  type metadata accessor for particle_primitive_material_constants(0);
  sub_1B1F9C340((uint64_t)v33, 0, ObjectType, v16);
  swift_retain();
  v17 = sub_1B1D292DC();
  v19 = v18;
  swift_release();
  sub_1B1F9C3D8(v19, 200);
  sub_1B1F9C214(v17, 201, (unint64_t *)(a2 + 136));
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v8;
}

void sub_1B1D2585C()
{
  sub_1B1D2EC90(0, &qword_1EEF5DAE8, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9088);
}

uint64_t sub_1B1D25894(float *a1, uint64_t a2)
{
  return sub_1B1D259E8(a1, a2) & 1;
}

uint64_t sub_1B1D258B0(float *a1, uint64_t a2)
{
  float v3;
  uint64_t result;
  float v5;
  float v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float v11;
  float v12;
  float v13;
  char v14;
  char v15;
  char v16;
  int v17;

  v3 = *a1;
  result = 1;
  if (LODWORD(v3) != *(_DWORD *)a2
    || *((_DWORD *)a1 + 1) != *(_DWORD *)(a2 + 4)
    || ((*((unsigned __int8 *)a1 + 20) ^ *(unsigned __int8 *)(a2 + 20)) & 1) != 0
    || ((*((unsigned __int8 *)a1 + 21) ^ *(unsigned __int8 *)(a2 + 21)) & 1) != 0)
  {
    return result;
  }
  v5 = a1[2];
  v6 = a1[4];
  v7 = *((unsigned __int8 *)a1 + 22);
  v8 = *((_DWORD *)a1 + 6);
  v9 = *((unsigned __int8 *)a1 + 28);
  v10 = *((unsigned __int8 *)a1 + 29);
  v11 = a1[8];
  v12 = *(float *)(a2 + 8);
  v13 = *(float *)(a2 + 16);
  if (*((_BYTE *)a1 + 12) == 1)
  {
    if (v5 == 0.0)
    {
      if (v12 == 0.0)
        v16 = *(_BYTE *)(a2 + 12);
      else
        v16 = 0;
      if ((v16 & 1) == 0)
        return 1;
    }
    else
    {
      if (LODWORD(v5) == 1)
      {
        if (LODWORD(v12) == 1)
          v14 = *(_BYTE *)(a2 + 12);
        else
          v14 = 0;
        if ((v14 & 1) != 0)
          goto LABEL_12;
        return 1;
      }
      if (LODWORD(v12) > 1)
        v17 = *(unsigned __int8 *)(a2 + 12);
      else
        v17 = 0;
      if (v17 != 1)
        return 1;
    }
LABEL_12:
    result = 1;
    if (v6 != v13)
      return result;
    goto LABEL_19;
  }
  if (v5 == v12)
    v15 = *(_BYTE *)(a2 + 12);
  else
    v15 = 1;
  result = 1;
  if ((v15 & 1) == 0 && v6 == v13)
  {
LABEL_19:
    if (v7 == *(unsigned __int8 *)(a2 + 22)
      && v8 == *(_DWORD *)(a2 + 24)
      && v9 == *(unsigned __int8 *)(a2 + 28)
      && ((v10 ^ *(unsigned __int8 *)(a2 + 29)) & 1) == 0)
    {
      return (v11 > 0.0) ^ (*(float *)(a2 + 32) > 0.0);
    }
  }
  return result;
}

uint64_t sub_1B1D259E8(float *a1, uint64_t a2)
{
  float v3;
  uint64_t result;
  float v5;
  float v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float v11;
  float v12;
  float v13;
  char v14;
  char v15;
  char v16;
  int v17;

  v3 = *a1;
  result = 1;
  if (LODWORD(v3) != *(_DWORD *)a2
    || *((_DWORD *)a1 + 1) != *(_DWORD *)(a2 + 4)
    || ((*((unsigned __int8 *)a1 + 30) ^ *(unsigned __int8 *)(a2 + 30)) & 1) != 0
    || ((*((unsigned __int8 *)a1 + 31) ^ *(unsigned __int8 *)(a2 + 31)) & 1) != 0)
  {
    return result;
  }
  v5 = a1[2];
  v6 = a1[4];
  v7 = *((unsigned __int8 *)a1 + 20);
  v8 = *((_DWORD *)a1 + 6);
  v9 = *((unsigned __int8 *)a1 + 28);
  v10 = *((unsigned __int8 *)a1 + 29);
  v11 = a1[8];
  v12 = *(float *)(a2 + 8);
  v13 = *(float *)(a2 + 16);
  if (*((_BYTE *)a1 + 12) == 1)
  {
    if (v5 == 0.0)
    {
      if (v12 == 0.0)
        v16 = *(_BYTE *)(a2 + 12);
      else
        v16 = 0;
      if ((v16 & 1) == 0)
        return 1;
    }
    else
    {
      if (LODWORD(v5) == 1)
      {
        if (LODWORD(v12) == 1)
          v14 = *(_BYTE *)(a2 + 12);
        else
          v14 = 0;
        if ((v14 & 1) != 0)
          goto LABEL_12;
        return 1;
      }
      if (LODWORD(v12) > 1)
        v17 = *(unsigned __int8 *)(a2 + 12);
      else
        v17 = 0;
      if (v17 != 1)
        return 1;
    }
LABEL_12:
    result = 1;
    if (v6 != v13)
      return result;
    goto LABEL_19;
  }
  if (v5 == v12)
    v15 = *(_BYTE *)(a2 + 12);
  else
    v15 = 1;
  result = 1;
  if ((v15 & 1) == 0 && v6 == v13)
  {
LABEL_19:
    if (v7 == *(unsigned __int8 *)(a2 + 20)
      && v8 == *(_DWORD *)(a2 + 24)
      && v9 == *(unsigned __int8 *)(a2 + 28)
      && ((v10 ^ *(unsigned __int8 *)(a2 + 29)) & 1) == 0)
    {
      return (v11 > 0.0) ^ (*(float *)(a2 + 32) > 0.0);
    }
  }
  return result;
}

void sub_1B1D25B24()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB48, (uint64_t)&type metadata for ParticleAOSphereRenderer, (uint64_t)&off_1E63ADA10);
}

void sub_1B1D25B5C()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB60, (uint64_t)&type metadata for ParticleGaussianRenderer, (uint64_t)&off_1E63AE320);
}

void sub_1B1D25B94()
{
  sub_1B1D2EC90(0, &qword_1ED4B9C38, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D168);
}

void sub_1B1D25BCC()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB38, (uint64_t)&type metadata for ParticleSurfaceRenderer, (uint64_t)&off_1E63AC680);
}

id sub_1B1D25C04(unint64_t a1)
{
  void *v2;
  void *v3;
  char *v4;
  id v5;
  char v7;

  v2 = (void *)sub_1B20F26A4(a1, &v7);
  v3 = v2;
  if (!v2)
    return 0;
  v4 = (char *)objc_msgSend(v2, sel_pixelFormat);
  if ((unint64_t)(v4 - 160) >= 0x3B || ((0x7FDF1FF7CFD54FFuLL >> (v4 + 96)) & 1) == 0)
    sub_1B1FD568C((uint64_t)&type metadata for TextureRequireUnpremultiply, (uint64_t)&off_1E63B3A80, a1);
  v5 = objc_msgSend(v3, sel_textureType);
  swift_unknownObjectRelease();
  return v5;
}

void sub_1B1D25CD8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63A4038;
}

uint64_t sub_1B1D25CE8()
{
  sub_1B1D2D91C();
  return sub_1B2228A70();
}

uint64_t sub_1B1D25D44()
{
  sub_1B1D2D91C();
  return sub_1B22289F8();
}

uint64_t sub_1B1D25D90@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1B1D2D908(*a1);
  *a2 = result;
  return result;
}

void sub_1B1D25DB8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63AC000;
}

uint64_t sub_1B1D25DC8()
{
  sub_1B1D2D960();
  return sub_1B2228A70();
}

uint64_t sub_1B1D25E24()
{
  sub_1B1D2D960();
  return sub_1B22289F8();
}

uint64_t sub_1B1D25E70(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t result;
  uint64_t (*v49)(uint64_t, uint64_t);
  void (*v50)(char *, uint64_t);
  unsigned __int8 *v51;
  int v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  double v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  float (*v69)(uint64_t, uint64_t);
  float v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  float v95;
  BOOL v96;
  int v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  __n128 v111;
  _BOOL4 v112;
  unsigned int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BOOL4 v117;
  _BOOL4 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  __int16 v135;
  float v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  char *v145;
  int v146;
  char *v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  char v151;
  int v152;
  uint64_t v153;
  uint64_t ObjectType;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  _BOOL8 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _BOOL8 v180;
  _BOOL8 v181;
  _BOOL8 v182;
  __int16 v183;
  uint64_t v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  __int16 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  char *v204;
  _QWORD *v205;
  uint64_t v206;
  char *v207;
  unint64_t v208;
  unint64_t v209;
  char *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  _QWORD *v222;
  uint64_t v223;
  char *v224;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v226;
  char v227;
  unint64_t v228;
  unint64_t v229;
  char v230;
  uint64_t v231;
  unint64_t v232;
  char v233;
  _QWORD *v234;
  uint64_t v235;
  char *v236;
  _QWORD *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char v243;
  char v244;
  char *v245;
  _BOOL4 v247;
  uint64_t v249;
  unint64_t v250;
  int64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _BOOL4 v259;
  uint64_t v260;
  unsigned int v261;
  int v262;
  _BOOL4 v263;
  uint64_t v264;
  uint64_t v265;
  _BOOL4 v266;
  uint64_t v267;
  uint64_t v268;
  _BOOL4 v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  id v273;
  int v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  char *v285;
  void (*v286)(char *, uint64_t);
  uint64_t v287;
  int64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  char *v298;
  _QWORD *v299;
  uint64_t v300;
  char *v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t *v306;
  uint64_t v307;
  char *v308;
  int64x2_t v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  int v324;
  uint64_t v325;
  _QWORD v326[3];
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  unint64_t v337;
  uint64_t v338;
  __int128 v339;
  char v340;
  _QWORD v341[3];
  uint64_t v342;
  uint64_t v343;
  char v344[8];
  uint64_t v345;
  int v346;
  _DWORD v347[5];
  int v348;
  char v349;
  float v350;
  __int16 v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  int64_t v357;
  _BYTE v358[32];
  uint64_t v359;
  _BYTE v360[248];
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int64_t v373;
  uint64_t v374;

  v299 = a3;
  v300 = a4;
  v374 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v285 = (char *)&v249 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v279 = (char *)&v249 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v298 = (char *)&v249 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v297 = (char *)&v249 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v305 = (char *)&v249 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v281 = (uint64_t)&v249 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v301 = (char *)&v249 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v304 = (uint64_t)&v249 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v249 - v37;
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v249 - v41;
  v306 = v43;
  v44 = *(_QWORD *)(*v43 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  v290 = *v43;
  swift_retain();
  v294 = v44;
  if (!v44)
    return swift_release();
  v277 = a5;
  v293 = a1;
  v45 = *(_QWORD *)(a1 + 16);
  v46 = *(char **)(v12 + 16);
  v307 = v7;
  v308 = v46;
  ((void (*)(char *, uint64_t, uint64_t))v46)(v42, v7, a6);
  if (v45)
  {
    v47 = v294;
    swift_retain();
    v289 = v45;
  }
  else
  {
    v49 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 72);
    v47 = v294;
    swift_retain();
    v289 = v49(a6, a7);
  }
  v257 = v12;
  v50 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_retain();
  v291 = a6;
  v286 = v50;
  v50(v42, a6);
  v51 = (unsigned __int8 *)(v47 + 536);
  v52 = *(unsigned __int8 *)(v47 + 537);
  v53 = v289;
  if (v52 == 1)
  {
    v54 = *(_WORD *)(v289 + 80);
    if ((v54 & 2) == 0)
      *(_WORD *)(v289 + 80) = v54 | 2;
  }
  v55 = v293;
  swift_retain();
  swift_release();
  *(_QWORD *)(v55 + 16) = v53;
  v56 = *(_BYTE *)(v290 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare);
  v57 = v308;
  v280 = (uint64_t)(v51 + 1);
  if ((v56 & 1) != 0)
  {
    v276 = 1;
    v58 = v291;
    v59 = v306;
    v60 = v307;
  }
  else
  {
    v58 = v291;
    v59 = v306;
    v60 = v307;
    if ((v51[1] & 1) != 0 || (*(_BYTE *)(v294 + 539) & 1) != 0)
      v61 = 1;
    else
      v61 = *(unsigned __int8 *)(v294 + 540);
    v276 = v61;
  }
  v282 = v59[1];
  v303 = sub_1B1FD568C((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C78, v282);
  LODWORD(v278) = *v51;
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(a7 + 64))(v58, a7))
    v275 = 1;
  else
    v275 = sub_1B1E53380();
  v62 = sub_1B1D20020((uint64_t)v360);
  ((void (*)(char *, uint64_t, uint64_t, double))v57)(v38, v60, v58, v62);
  sub_1B1D2DC30();
  if ((swift_dynamicCast() & 1) == 0)
  {
    v359 = 0;
    memset(v358, 0, sizeof(v358));
  }
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  sub_1B20C3C0C(0);
  v63 = sub_1B1C6C500(MEMORY[0x1E0DEE9D8]);
  v344[0] = 2;
  memset(v347, 0, sizeof(v347));
  v346 = -1;
  v351 = 3;
  v352 = 7;
  v353 = 0;
  v292 = v63;
  v356 = v63;
  v288 = v64;
  v357 = v64;
  v65 = v289;
  swift_retain();
  swift_release();
  v345 = v65;
  v66 = *(uint64_t (**)(uint64_t, uint64_t))(a7 + 32);
  v67 = v291;
  v302 = v66(v291, a7);
  v348 = v302;
  v265 = HIDWORD(v302) & 1;
  v349 = BYTE4(v302) & 1;
  v68 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 48))(v67, a7);
  v355 = v68;
  v69 = *(float (**)(uint64_t, uint64_t))(a7 + 40);
  v70 = v69(v67, a7);
  v350 = v70;
  v295 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 56))(v67, a7);
  v354 = v295;
  ((void (*)(uint64_t, uint64_t, uint64_t))v57)(v304, v60, v67);
  LODWORD(v287) = swift_dynamicCast();
  if ((_DWORD)v287)
  {
    HIBYTE(v351) = 1;
    v352 = 7;
    v353 = 1;
  }
  v296 = v68;
  v71 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(v67, a7);
  v283 = HIDWORD(v71);
  v284 = v71;
  sub_1B1D2DC84((uint64_t)v358, (uint64_t)&v329);
  if (!*((_QWORD *)&v330 + 1))
  {
    sub_1B1D2DCD8((uint64_t)&v329);
    ((void (*)(uint64_t, uint64_t, uint64_t))v57)(v281, v60, v67);
    v304 = swift_dynamicCast();
    v274 = 0;
    v270 = 0;
    v271 = 0;
    v280 = 0;
    v281 = 0;
    v272 = 0;
    v273 = 0;
    v82 = 1;
    v83 = v289;
    v84 = v290;
    v85 = v293;
    v86 = v305;
    goto LABEL_43;
  }
  sub_1B1A02518(&v329, (uint64_t)v341);
  v72 = v342;
  v73 = v343;
  sub_1B19FA070(v341, v342);
  v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 32))(v72, v73);
  v273 = sub_1B1D25C04(v74);
  v76 = v75;
  v77 = v342;
  v78 = v343;
  sub_1B19FA070(v341, v342);
  v304 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 56))(v77, v78);
  v79 = v342;
  v80 = v343;
  sub_1B19FA070(v341, v342);
  v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 80))(v79, v80);
  sub_1B19FA198((uint64_t)v341, (uint64_t)&v329);
  if ((v81 & 1) != 0)
  {
    v281 = 0;
  }
  else
  {
    v87 = *((_QWORD *)&v330 + 1);
    v88 = v331;
    sub_1B19FA070(&v329, *((uint64_t *)&v330 + 1));
    v281 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 56))(v87, v88);
  }
  v89 = v301;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v329);
  v67 = v291;
  v90 = v66(v291, a7);
  sub_1B19FA198((uint64_t)v341, (uint64_t)v326);
  if ((v90 & 0x1FFFFFFFFLL) == 0x100000000)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v326);
    ((void (*)(char *, uint64_t, uint64_t))v308)(v89, v60, v67);
    v84 = v290;
    v85 = v293;
LABEL_34:
    v286(v89, v67);
    goto LABEL_35;
  }
  v91 = v327;
  v92 = v328;
  sub_1B19FA070(v326, v327);
  v93 = *(float (**)(uint64_t, uint64_t))(v92 + 224);
  v94 = v92;
  v67 = v291;
  v95 = v93(v91, v94);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v326);
  ((void (*)(char *, uint64_t, uint64_t))v308)(v89, v60, v67);
  v84 = v290;
  v85 = v293;
  if (v95 <= 0.0)
    goto LABEL_34;
  v96 = sub_1B1D248B0(v67, a7);
  v286(v89, v67);
  if (v96)
  {
    if ((*(_BYTE *)v280 & 1) != 0)
      v97 = 1;
    else
      v97 = *(unsigned __int8 *)(v294 + 539);
    v274 = v97 ^ 1;
    goto LABEL_36;
  }
LABEL_35:
  v274 = 0;
LABEL_36:
  v98 = v69(v67, a7);
  sub_1B19FA198((uint64_t)v341, (uint64_t)&v318);
  if (v98 >= 0.0)
  {
    v280 = 1;
  }
  else
  {
    v99 = *((_QWORD *)&v319 + 1);
    v100 = v320;
    sub_1B19FA070(&v318, *((uint64_t *)&v319 + 1));
    v280 = sub_1B1D27E50(v99, v100);
  }
  v83 = v289;
  v82 = v76 & 1;
  v272 = (v76 >> 8) & 1;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v318);
  v101 = v342;
  v102 = v343;
  sub_1B19FA070(v341, v342);
  v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 32))(v101, v102);
  if (sub_1B1FD568C((uint64_t)&type metadata for TextureRequireAnimationRepresentation, (uint64_t)&off_1E63B8930, v103))
  {
    v104 = v342;
    v105 = v343;
    sub_1B19FA070(v341, v342);
    v270 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 176))(v104, v105);
    v106 = v342;
    v107 = v343;
    sub_1B19FA070(v341, v342);
    v271 = (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 200))(v106, v107);
  }
  else
  {
    v270 = 255;
    v271 = 0;
  }
  v57 = v308;
  v86 = v305;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v341);
LABEL_43:
  ((void (*)(char *, uint64_t, uint64_t))v57)(v86, v60, v67);
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      v111.n128_u32[0] = HIDWORD(v330);
      v112 = *((float *)&v330 + 3) > 0.0;
      ((void (*)(char *, uint64_t, __n128))v286)(v86, v67, v111);
      v108 = 0;
      v110 = 5;
      v113 = v284;
      v269 = v112;
      if ((_DWORD)v284 == -1)
      {
        v114 = v283;
        if (!(_DWORD)v283)
        {
          v262 = v82;
          sub_1B1A18378((uint64_t)v360, (uint64_t)v341, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
          v254 = 0;
          v283 = 0;
          v258 = 0;
          v261 = 0;
          v259 = 0;
          v263 = 0;
LABEL_51:
          v301 = 0;
          LODWORD(v305) = 0;
          v266 = 0;
          v267 = 0;
          v268 = 0;
          v260 = 5;
LABEL_65:
          v256 = 2;
          v278 = 0xFFFFFFFFLL;
          v255 = 3;
          v264 = 7;
          v253 = v287;
          v284 = v83;
          goto LABEL_91;
        }
        v117 = 0;
        v118 = 0;
        goto LABEL_71;
      }
      v117 = 0;
      v118 = 0;
      goto LABEL_69;
    }
    if ((swift_dynamicCast() & 1) != 0 || (swift_dynamicCast() & 1) != 0 || swift_dynamicCast())
    {
      v301 = (char *)(v278 ^ 1);
      v286(v86, v67);
      v108 = 0;
      v110 = 5;
      LODWORD(v305) = 1;
      v113 = v284;
      if ((_DWORD)v284 == -1)
      {
        v114 = v283;
        if (!(_DWORD)v283)
        {
          v262 = v82;
          sub_1B1A18378((uint64_t)v360, (uint64_t)v341, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
          v254 = 0;
          v283 = 0;
          v258 = 0;
          v261 = 0;
          v259 = 0;
          v263 = 0;
          v269 = 0;
          v266 = 0;
          v267 = 0;
          v268 = 0;
          v260 = 5;
          LODWORD(v305) = 1;
          goto LABEL_65;
        }
        v117 = 0;
        v118 = 0;
        v269 = 0;
        v266 = 0;
        goto LABEL_76;
      }
      v117 = 0;
      v118 = 0;
      v269 = 0;
      v266 = 0;
LABEL_73:
      v267 = 0;
      v268 = 0;
      goto LABEL_74;
    }
    if (!swift_dynamicCast())
    {
      if (swift_dynamicCast())
      {
        if ((_BYTE)v333)
        {
          v117 = 0;
          v263 = 0;
        }
        else
        {
          v247 = DWORD1(v333) != -1 || DWORD2(v333) != 0;
          v263 = v247;
          v117 = HIDWORD(v333) != -1 || (_DWORD)v334 != 0;
        }
        v286(v305, v67);
        v108 = 0;
        v110 = 5;
        v113 = v284;
        if ((_DWORD)v284 != -1)
        {
          v269 = 0;
          v301 = 0;
          LODWORD(v305) = 0;
          v266 = 0;
          v267 = 0;
          v268 = 0;
          v118 = v263;
          goto LABEL_74;
        }
        v114 = v283;
        if ((_DWORD)v283)
        {
          v269 = 0;
          v301 = 0;
          LODWORD(v305) = 0;
          v266 = 0;
          v267 = 0;
          v268 = 0;
          v118 = v263;
          goto LABEL_77;
        }
        v259 = v117;
        v262 = v82;
        sub_1B1A18378((uint64_t)v360, (uint64_t)v341, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
        v254 = 0;
        v283 = 0;
        v258 = 0;
        v261 = 0;
        goto LABEL_204;
      }
      v245 = v86;
LABEL_184:
      v286(v245, v67);
      v108 = 0;
      v110 = 5;
      v113 = v284;
      if ((_DWORD)v284 != -1)
      {
        v117 = 0;
        v118 = 0;
        v269 = 0;
LABEL_69:
        v301 = 0;
        LODWORD(v305) = 0;
        v266 = 0;
        goto LABEL_73;
      }
      v114 = v283;
      if ((_DWORD)v283)
      {
        v117 = 0;
        v118 = 0;
        v269 = 0;
LABEL_71:
        v301 = 0;
        LODWORD(v305) = 0;
        v266 = 0;
LABEL_76:
        v267 = 0;
        v268 = 0;
        goto LABEL_77;
      }
      v262 = v82;
      sub_1B1A18378((uint64_t)v360, (uint64_t)v341, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
      v254 = 0;
      v283 = 0;
      v258 = 0;
      v261 = 0;
      v259 = 0;
      v263 = 0;
LABEL_204:
      v269 = 0;
      goto LABEL_51;
    }
    v315 = v329;
    v316 = v330;
    v317 = v331;
    v240 = sub_1B1D16FEC(v329);
    if (v241)
    {
      if (v240)
      {
        if ((_DWORD)v284 == -1 && !(_DWORD)v283)
        {
          v242 = sub_1B2148B28(v241);
          v244 = v243;
          swift_bridgeObjectRelease();
          swift_release();
          if ((v244 & 1) != 0)
          {
            v283 = 0;
            v284 = 0xFFFFFFFFLL;
          }
          else
          {
            v283 = HIDWORD(v242);
            v284 = v242;
          }
          v84 = v290;
          goto LABEL_183;
        }
        swift_release();
      }
      swift_bridgeObjectRelease();
    }
LABEL_183:
    v245 = v305;
    goto LABEL_184;
  }
  v108 = BYTE9(v335);
  v109 = v337;
  v267 = BYTE12(v333);
  v268 = v335;
  if (BYTE1(v338) == 1)
  {
    v110 = BYTE2(v338);
    v303 = v338 | v303;
    if ((v304 & 1) == 0)
    {
LABEL_46:
      v108 = 0;
      goto LABEL_55;
    }
  }
  else
  {
    v303 = v338 | v303;
    v110 = 5;
    if ((v304 & 1) == 0)
      goto LABEL_46;
  }
  v115 = sub_1B20F26A4(*((unint64_t *)&v336 + 1), v326);
  swift_unknownObjectRelease();
  if (v115)
  {
    v116 = sub_1B20F26A4(v109, v326);
    swift_unknownObjectRelease();
    v266 = v116 != 0;
    v281 = v266 | v281;
    goto LABEL_56;
  }
LABEL_55:
  v266 = 0;
LABEL_56:
  v286(v305, v67);
  v117 = 0;
  v113 = v284;
  if ((_DWORD)v284 != -1)
  {
    v118 = 0;
    v269 = 0;
    v301 = 0;
    LODWORD(v305) = 0;
LABEL_74:
    v114 = v283;
    goto LABEL_77;
  }
  v114 = v283;
  if (!(_DWORD)v283)
  {
    v260 = v110;
    v261 = v108;
    v262 = v82;
    sub_1B1A18378((uint64_t)v360, (uint64_t)v341, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
    v254 = 0;
    v283 = 0;
    v258 = 0;
    v259 = 0;
    v263 = 0;
    v269 = 0;
    v301 = 0;
    LODWORD(v305) = 0;
    goto LABEL_65;
  }
  v118 = 0;
  v269 = 0;
  v301 = 0;
  LODWORD(v305) = 0;
LABEL_77:
  v119 = v113 | (v114 << 32);
  if ((sub_1B1DA4E70(v119) & 1) == 0)
    v119 = sub_1B2131F3C();
  sub_1B1D16FF8(v119, (uint64_t)&v361);
  v284 = v362;
  if (!v362)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_83;
  }
  v262 = v82;
  v263 = v118;
  v259 = v117;
  v260 = v110;
  v261 = v108;
  v120 = v361;
  v121 = v364;
  v278 = v363;
  v283 = v365;
  v122 = v367;
  v302 = v366;
  v264 = v368;
  v252 = v369;
  v123 = v372;
  v295 = v370;
  v296 = v371;
  v124 = v373;
  sub_1B1D15F04(v119, (uint64_t)&v318);
  sub_1B1A18378((uint64_t)&v318, (uint64_t)v326, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
  sub_1B1A18378((uint64_t)v326, (uint64_t)&v329, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
  if (sub_1B1B3C438((uint64_t *)&v329) == 1)
  {
    swift_release();
    sub_1B1D2DD24(v120, v284);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_83:
    swift_release();
    return sub_1B1D2DCD8((uint64_t)v358);
  }
  v255 = HIDWORD(v122);
  v125 = v302;
  v126 = HIDWORD(v278);
  v304 = v120 == 0;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v251 = v124;
  v127 = v123;
  v128 = v284;
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v83 = v289;
  swift_release();
  v256 = v120;
  v344[0] = v120;
  v345 = v128;
  v346 = v278;
  v347[0] = v126;
  v258 = v121;
  *(_QWORD *)&v347[1] = v121;
  *(_QWORD *)&v347[3] = v283;
  v348 = v125;
  v265 = HIDWORD(v125) & 1;
  v349 = BYTE4(v125) & 1;
  v250 = v122;
  v350 = *(float *)&v122;
  LOBYTE(v351) = v255;
  v253 = (v122 >> 40) & 1;
  v254 = v126;
  HIBYTE(v351) = BYTE5(v122) & 1;
  v352 = v264;
  LODWORD(v287) = v252 & 1;
  v353 = v252 & 1;
  v354 = v295;
  v355 = v296;
  v292 = v127;
  v356 = v127;
  v129 = v251;
  v357 = v251;
  v130 = *(_QWORD *)(v83 + 88);
  v131 = *(_QWORD *)(v83 + 96);
  v133 = *(_QWORD *)(v128 + 88);
  v132 = *(_QWORD *)(v128 + 96);
  v134 = (_QWORD *)swift_allocObject();
  v134[2] = v133;
  v134[3] = v132;
  v134[4] = v130;
  v134[5] = v131;
  *(_QWORD *)(v83 + 88) = sub_1B1D2DD9C;
  *(_QWORD *)(v83 + 96) = v134;
  swift_retain_n();
  swift_retain_n();
  sub_1B1D2DEE4(v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DDA8);
  swift_release();
  v135 = *(_WORD *)(v128 + 80);
  v136 = *(float *)&v250;
  if ((v135 & 0x20) != 0)
  {
    v137 = *(_WORD *)(v83 + 80);
    if ((v137 & 0x20) == 0)
    {
      *(_WORD *)(v83 + 80) = v137 | 0x20;
      v135 = *(_WORD *)(v284 + 80);
    }
  }
  v70 = v136;
  sub_1B1D2DEE4(v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1CC617C);
  swift_release();
  swift_release();
  v138 = v256;
  if ((v135 & 0x10) != 0)
  {
    v139 = *(_WORD *)(v83 + 80);
    if ((v139 & 0x10) == 0)
      *(_WORD *)(v83 + 80) = v139 | 0x10;
  }
  v140 = v292;
  sub_1B1D2DD24(v138, v284);
  v280 = v280 | (v136 >= 0.0);
  sub_1B1A18378((uint64_t)v326, (uint64_t)v341, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
  v288 = v129;
  v292 = v140;
  v84 = v290;
  v67 = v291;
  v85 = v293;
LABEL_91:
  v141 = sub_1B1FDF780(v306[4], v84);
  if (v141)
    v142 = v141;
  else
    v142 = MEMORY[0x1E0DEE9D8];
  v143 = *(_WORD *)(v83 + 80);
  v144 = v307;
  v145 = v308;
  ((void (*)(char *, uint64_t, uint64_t))v308)(v297, v307, v67);
  v146 = swift_dynamicCast();
  v147 = v298;
  ((void (*)(char *, uint64_t, uint64_t))v145)(v298, v144, v67);
  if (v146)
  {
    v286(v147, v67);
    v148 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v257 + 32))(v279, v147, v67);
    v149 = swift_dynamicCast();
    if ((v143 & 0x30) == 0x10)
      v148 = 1;
    else
      v148 = v149;
  }
  v150 = MEMORY[0x1E0DEE9D8];
  v151 = v280;
  v152 = v302;
  v153 = v258;
  if (v258)
  {
    ObjectType = swift_getObjectType();
    LOBYTE(v361) = v256;
    v362 = v284;
    v363 = __PAIR64__(v254, v278);
    v364 = v153;
    v365 = v283;
    LODWORD(v366) = v152;
    BYTE4(v366) = v265;
    *(float *)&v367 = v70;
    BYTE4(v367) = v255;
    BYTE5(v367) = v253;
    v368 = v264;
    LOBYTE(v369) = v287;
    v370 = v295;
    v371 = v296;
    v372 = v292;
    v373 = v288;
    v155 = (*(uint64_t (**)(uint64_t *, uint64_t))(v283 + 32))(&v361, ObjectType);
  }
  else
  {
    v155 = MEMORY[0x1E0DEE9D8];
  }
  v156 = v294;
  v157 = v307;
  *(_QWORD *)&v329 = v155;
  sub_1B19F5058(v142);
  v158 = v329;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v159 = swift_allocObject();
  v160 = v303 & 1;
  *(_OWORD *)(v159 + 16) = xmmword_1B2284610;
  *(_OWORD *)(v159 + 32) = xmmword_1B228D5F0;
  *(_BYTE *)(v159 + 48) = 0;
  *(_QWORD *)(v159 + 64) = v160;
  *(_OWORD *)(v159 + 72) = 0u;
  *(_OWORD *)(v159 + 88) = 0u;
  *(_OWORD *)(v159 + 104) = 0u;
  *(_QWORD *)(v159 + 120) = 0;
  *(_BYTE *)(v159 + 128) = 13;
  v161 = v273;
  LODWORD(v162) = v262 ^ 1;
  if (v273 == (id)2)
    v163 = v162;
  else
    v163 = 0;
  *(_OWORD *)(v159 + 144) = xmmword_1B228D600;
  *(_BYTE *)(v159 + 160) = 0;
  *(_QWORD *)(v159 + 176) = v163;
  *(_OWORD *)(v159 + 184) = 0uLL;
  *(_OWORD *)(v159 + 200) = 0uLL;
  *(_OWORD *)(v159 + 216) = 0uLL;
  *(_QWORD *)(v159 + 232) = 0;
  *(_BYTE *)(v159 + 240) = 13;
  if (v161 == (id)7)
    v164 = v162;
  else
    v164 = 0;
  *(_OWORD *)(v159 + 256) = xmmword_1B228D610;
  *(_BYTE *)(v159 + 272) = 0;
  *(_QWORD *)(v159 + 288) = v164;
  *(_QWORD *)(v159 + 344) = 0;
  *(_OWORD *)(v159 + 312) = 0uLL;
  *(_OWORD *)(v159 + 328) = 0uLL;
  *(_OWORD *)(v159 + 296) = 0uLL;
  *(_BYTE *)(v159 + 352) = 13;
  if (v161 == (id)3)
    v165 = v162;
  else
    v165 = 0;
  *(_OWORD *)(v159 + 368) = xmmword_1B228D620;
  *(_BYTE *)(v159 + 384) = 0;
  *(_QWORD *)(v159 + 400) = v165;
  *(_OWORD *)(v159 + 408) = 0uLL;
  *(_OWORD *)(v159 + 424) = 0uLL;
  *(_OWORD *)(v159 + 440) = 0uLL;
  *(_QWORD *)(v159 + 456) = 0;
  *(_BYTE *)(v159 + 464) = 13;
  if (v161 == (id)5)
    v162 = v162;
  else
    v162 = 0;
  *(_OWORD *)(v159 + 480) = xmmword_1B228D630;
  *(_BYTE *)(v159 + 496) = 0;
  *(_QWORD *)(v159 + 512) = v162;
  *(_QWORD *)(v159 + 568) = 0;
  *(_OWORD *)(v159 + 536) = 0uLL;
  *(_OWORD *)(v159 + 552) = 0uLL;
  *(_OWORD *)(v159 + 520) = 0uLL;
  *(_BYTE *)(v159 + 576) = 13;
  v166 = v272;
  *(_OWORD *)(v159 + 592) = xmmword_1B228D640;
  *(_BYTE *)(v159 + 608) = 0;
  *(_QWORD *)(v159 + 624) = v166;
  *(_OWORD *)(v159 + 632) = 0uLL;
  *(_OWORD *)(v159 + 648) = 0uLL;
  *(_OWORD *)(v159 + 664) = 0uLL;
  *(_QWORD *)(v159 + 680) = 0;
  *(_BYTE *)(v159 + 688) = 13;
  v167 = v304 & 1;
  *(_OWORD *)(v159 + 704) = xmmword_1B228D650;
  *(_BYTE *)(v159 + 720) = 0;
  *(_QWORD *)(v159 + 736) = v167;
  *(_OWORD *)(v159 + 744) = 0uLL;
  *(_OWORD *)(v159 + 760) = 0uLL;
  *(_OWORD *)(v159 + 776) = 0uLL;
  *(_QWORD *)(v159 + 792) = 0;
  *(_BYTE *)(v159 + 800) = 13;
  v168 = v281 & 1;
  *(_OWORD *)(v159 + 816) = xmmword_1B228D660;
  *(_BYTE *)(v159 + 832) = 0;
  *(_QWORD *)(v159 + 848) = v168;
  *(_QWORD *)(v159 + 904) = 0;
  *(_OWORD *)(v159 + 872) = 0uLL;
  *(_OWORD *)(v159 + 888) = 0uLL;
  *(_OWORD *)(v159 + 856) = 0uLL;
  *(_BYTE *)(v159 + 912) = 13;
  v169 = (char)v270;
  *(_OWORD *)(v159 + 928) = xmmword_1B228D670;
  *(_BYTE *)(v159 + 944) = 0;
  *(_QWORD *)(v159 + 960) = v169;
  *(_QWORD *)(v159 + 1016) = 0;
  *(_OWORD *)(v159 + 984) = 0uLL;
  *(_OWORD *)(v159 + 1000) = 0uLL;
  *(_OWORD *)(v159 + 968) = 0uLL;
  *(_BYTE *)(v159 + 1024) = 14;
  v170 = v271 & 1;
  *(_OWORD *)(v159 + 1040) = xmmword_1B228D680;
  *(_BYTE *)(v159 + 1056) = 0;
  *(_QWORD *)(v159 + 1072) = v170;
  *(_QWORD *)(v159 + 1128) = 0;
  *(_OWORD *)(v159 + 1096) = 0uLL;
  *(_OWORD *)(v159 + 1112) = 0uLL;
  *(_OWORD *)(v159 + 1080) = 0uLL;
  *(_BYTE *)(v159 + 1136) = 13;
  v171 = v274;
  *(_OWORD *)(v159 + 1152) = xmmword_1B228D690;
  *(_BYTE *)(v159 + 1168) = 0;
  *(_QWORD *)(v159 + 1184) = v171;
  *(_QWORD *)(v159 + 1240) = 0;
  *(_OWORD *)(v159 + 1208) = 0uLL;
  *(_OWORD *)(v159 + 1224) = 0uLL;
  *(_OWORD *)(v159 + 1192) = 0uLL;
  *(_BYTE *)(v159 + 1248) = 13;
  *(_OWORD *)(v159 + 1264) = xmmword_1B228D6A0;
  *(_BYTE *)(v159 + 1280) = 0;
  *(_QWORD *)(v159 + 1296) = v151 & 1;
  *(_QWORD *)(v159 + 1352) = 0;
  *(_OWORD *)(v159 + 1320) = 0uLL;
  *(_OWORD *)(v159 + 1336) = 0uLL;
  *(_OWORD *)(v159 + 1304) = 0uLL;
  *(_BYTE *)(v159 + 1360) = 13;
  v172 = v275 & 1;
  *(_OWORD *)(v159 + 1376) = xmmword_1B228D6B0;
  *(_BYTE *)(v159 + 1392) = 0;
  *(_QWORD *)(v159 + 1408) = v172;
  *(_QWORD *)(v159 + 1464) = 0;
  *(_OWORD *)(v159 + 1432) = 0uLL;
  *(_OWORD *)(v159 + 1448) = 0uLL;
  *(_OWORD *)(v159 + 1416) = 0uLL;
  *(_BYTE *)(v159 + 1472) = 13;
  v173 = v266;
  *(_OWORD *)(v159 + 1488) = xmmword_1B228D6C0;
  *(_BYTE *)(v159 + 1504) = 0;
  *(_QWORD *)(v159 + 1520) = v173;
  *(_QWORD *)(v159 + 1576) = 0;
  *(_OWORD *)(v159 + 1544) = 0uLL;
  *(_OWORD *)(v159 + 1560) = 0uLL;
  *(_OWORD *)(v159 + 1528) = 0uLL;
  *(_BYTE *)(v159 + 1584) = 13;
  v174 = (char)v260;
  *(_OWORD *)(v159 + 1600) = xmmword_1B228D6D0;
  *(_BYTE *)(v159 + 1616) = 0;
  *(_QWORD *)(v159 + 1632) = v174;
  *(_QWORD *)(v159 + 1688) = 0;
  *(_OWORD *)(v159 + 1656) = 0uLL;
  *(_OWORD *)(v159 + 1672) = 0uLL;
  *(_OWORD *)(v159 + 1640) = 0uLL;
  *(_BYTE *)(v159 + 1696) = 14;
  v175 = (char)v267;
  *(_OWORD *)(v159 + 1712) = xmmword_1B228D6E0;
  *(_BYTE *)(v159 + 1728) = 0;
  *(_QWORD *)(v159 + 1744) = v175;
  *(_QWORD *)(v159 + 1800) = 0;
  *(_OWORD *)(v159 + 1768) = 0uLL;
  *(_OWORD *)(v159 + 1784) = 0uLL;
  *(_OWORD *)(v159 + 1752) = 0uLL;
  *(_BYTE *)(v159 + 1808) = 14;
  v176 = (char)v268;
  *(_OWORD *)(v159 + 1824) = xmmword_1B228D6F0;
  *(_BYTE *)(v159 + 1840) = 0;
  *(_QWORD *)(v159 + 1856) = v176;
  *(_QWORD *)(v159 + 1912) = 0;
  *(_OWORD *)(v159 + 1880) = 0uLL;
  *(_OWORD *)(v159 + 1896) = 0uLL;
  *(_OWORD *)(v159 + 1864) = 0uLL;
  *(_BYTE *)(v159 + 1920) = 14;
  *(_OWORD *)(v159 + 1936) = xmmword_1B228D700;
  *(_BYTE *)(v159 + 1952) = 0;
  *(_OWORD *)(v159 + 2016) = 0uLL;
  *(_OWORD *)(v159 + 2000) = 0uLL;
  *(_OWORD *)(v159 + 1984) = 0uLL;
  *(_OWORD *)(v159 + 1968) = 0uLL;
  *(_BYTE *)(v159 + 2032) = 13;
  v177 = v261;
  *(_OWORD *)(v159 + 2048) = xmmword_1B228D710;
  *(_BYTE *)(v159 + 2064) = 0;
  *(_QWORD *)(v159 + 2080) = v177;
  *(_QWORD *)(v159 + 2136) = 0;
  *(_OWORD *)(v159 + 2104) = 0uLL;
  *(_OWORD *)(v159 + 2120) = 0uLL;
  *(_OWORD *)(v159 + 2088) = 0uLL;
  *(_BYTE *)(v159 + 2144) = 13;
  v178 = v305;
  *(_OWORD *)(v159 + 2160) = xmmword_1B228D720;
  *(_BYTE *)(v159 + 2176) = 0;
  *(_QWORD *)(v159 + 2192) = v178;
  *(_QWORD *)(v159 + 2248) = 0;
  *(_OWORD *)(v159 + 2216) = 0uLL;
  *(_OWORD *)(v159 + 2232) = 0uLL;
  *(_OWORD *)(v159 + 2200) = 0uLL;
  *(_BYTE *)(v159 + 2256) = 13;
  v179 = v301 & 1;
  *(_OWORD *)(v159 + 2272) = xmmword_1B228D730;
  *(_BYTE *)(v159 + 2288) = 0;
  *(_QWORD *)(v159 + 2304) = v179;
  *(_QWORD *)(v159 + 2360) = 0;
  *(_OWORD *)(v159 + 2328) = 0uLL;
  *(_OWORD *)(v159 + 2344) = 0uLL;
  *(_OWORD *)(v159 + 2312) = 0uLL;
  *(_BYTE *)(v159 + 2368) = 13;
  v180 = v269;
  *(_OWORD *)(v159 + 2384) = xmmword_1B228D740;
  *(_BYTE *)(v159 + 2400) = 0;
  *(_QWORD *)(v159 + 2416) = v180;
  *(_QWORD *)(v159 + 2472) = 0;
  *(_OWORD *)(v159 + 2440) = 0uLL;
  *(_OWORD *)(v159 + 2456) = 0uLL;
  *(_OWORD *)(v159 + 2424) = 0uLL;
  *(_BYTE *)(v159 + 2480) = 13;
  v181 = v263;
  *(_OWORD *)(v159 + 2496) = xmmword_1B228D750;
  *(_BYTE *)(v159 + 2512) = 0;
  *(_QWORD *)(v159 + 2528) = v181;
  *(_QWORD *)(v159 + 2584) = 0;
  *(_OWORD *)(v159 + 2552) = 0uLL;
  *(_OWORD *)(v159 + 2568) = 0uLL;
  *(_OWORD *)(v159 + 2536) = 0uLL;
  *(_BYTE *)(v159 + 2592) = 13;
  v182 = v259;
  *(_OWORD *)(v159 + 2608) = xmmword_1B228D760;
  *(_BYTE *)(v159 + 2624) = 0;
  *(_QWORD *)(v159 + 2640) = v182;
  *(_QWORD *)(v159 + 2696) = 0;
  *(_OWORD *)(v159 + 2664) = 0uLL;
  *(_OWORD *)(v159 + 2680) = 0uLL;
  *(_OWORD *)(v159 + 2648) = 0uLL;
  *(_BYTE *)(v159 + 2704) = 13;
  *(_OWORD *)(v159 + 2720) = xmmword_1B228D770;
  *(_BYTE *)(v159 + 2736) = 0;
  *(_QWORD *)(v159 + 2752) = v148;
  *(_QWORD *)(v159 + 2808) = 0;
  *(_OWORD *)(v159 + 2776) = 0uLL;
  *(_OWORD *)(v159 + 2792) = 0uLL;
  *(_OWORD *)(v159 + 2760) = 0uLL;
  *(_BYTE *)(v159 + 2816) = 13;
  *(_QWORD *)&v329 = v158;
  sub_1B19F5058(v159);
  if (v171)
  {
    v183 = *(_WORD *)(v85 + 130);
    if ((v183 & 4) == 0)
      *(_WORD *)(v85 + 130) = v183 | 4;
  }
  v184 = v291;
  if ((_DWORD)v305)
  {
    v185 = *(_WORD *)(v85 + 130);
    if ((v185 & 2) == 0)
      *(_WORD *)(v85 + 130) = v185 | 2;
  }
  v186 = v329;
  if ((v301 & 1) != 0)
  {
    v187 = *(_WORD *)(v85 + 130);
    if ((v187 & 1) == 0)
      *(_WORD *)(v85 + 130) = v187 | 1;
  }
  if ((v304 & 1) != 0)
  {
    v188 = *(_WORD *)(v289 + 80);
    if ((v188 & 8) == 0)
      *(_WORD *)(v289 + 80) = v188 | 8;
  }
  v189 = sub_1B1FDF998(v282, v290);
  if (v189)
    v190 = v189;
  else
    v190 = v150;
  LODWORD(v284) = sub_1B20C3174((uint64_t)v344, v85, v190, v186, v299, v300, v277, v276);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (*)(char *, uint64_t, uint64_t))v308)(v285, v157, v184);
  if (!swift_dynamicCast() || BYTE8(v335) != 1)
  {
LABEL_160:
    v286(v285, v184);
    if ((v284 & 1) != 0)
    {
      sub_1B2094804(v282);
      sub_1B1D2DEE4(v341, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1CC617C);
      swift_release();
      swift_release();
    }
    else
    {
      sub_1B1A18378((uint64_t)v341, (uint64_t)&v329, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
      if (sub_1B1B3C438((uint64_t *)&v329) != 1)
      {
        *(_OWORD *)(v85 + 208) = v339;
        *(_BYTE *)(v85 + 224) = v340;
        v318 = v331;
        v319 = v332;
        v320 = v333;
        v321 = v334;
        v322 = v335;
        v323 = v336;
        v324 = v337;
        v325 = v338;
        sub_1B1A18378((uint64_t)v341, (uint64_t)v326, &qword_1ED4B8CB0, (uint64_t)&type metadata for MaterialRuntime);
        sub_1B1BBF168((uint64_t)v326);
        sub_1B1EC7248((uint64_t)&v318);
        sub_1B1D2DEE4(v341, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1CC617C);
        sub_1B1D2DEE4(v341, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1CC617C);
      }
      swift_release();
      swift_release();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    return sub_1B1D2DCD8((uint64_t)v358);
  }
  v191 = *(_QWORD *)(v85 + 8);
  v192 = *(_QWORD *)(v191 + 64);
  v287 = v191 + 64;
  v193 = 1 << *(_BYTE *)(v191 + 32);
  v194 = -1;
  if (v193 < 64)
    v194 = ~(-1 << v193);
  v195 = v194 & v192;
  v196 = (unint64_t)(v193 + 63) >> 6;
  v197 = swift_bridgeObjectRetain();
  v198 = 0;
  v288 = v196;
  v283 = v196 - 5;
  v292 = v197;
  v281 = v197 + 104;
  while (1)
  {
    if (v195)
    {
      v208 = __clz(__rbit64(v195));
      v195 &= v195 - 1;
      v308 = v198;
      v209 = v208 | ((_QWORD)v198 << 6);
    }
    else
    {
      v210 = v198 + 1;
      v184 = v291;
      if ((uint64_t)(v198 + 1) >= v288)
        goto LABEL_159;
      v211 = *(_QWORD *)(v287 + 8 * (_QWORD)v210);
      if (!v211)
      {
        v210 = v198 + 2;
        if ((uint64_t)(v198 + 2) >= v288)
          goto LABEL_159;
        v211 = *(_QWORD *)(v287 + 8 * (_QWORD)v210);
        if (!v211)
        {
          v210 = v198 + 3;
          if ((uint64_t)(v198 + 3) >= v288)
            goto LABEL_159;
          v211 = *(_QWORD *)(v287 + 8 * (_QWORD)v210);
          if (!v211)
          {
            v210 = v198 + 4;
            if ((uint64_t)(v198 + 4) >= v288)
              goto LABEL_159;
            v211 = *(_QWORD *)(v287 + 8 * (_QWORD)v210);
            if (!v211)
            {
              while ((char *)v283 != v198)
              {
                v211 = *(_QWORD *)(v281 + 8 * (_QWORD)v198++);
                if (v211)
                {
                  v210 = v198 + 4;
                  goto LABEL_149;
                }
              }
LABEL_159:
              swift_release();
              goto LABEL_160;
            }
          }
        }
      }
LABEL_149:
      v195 = (v211 - 1) & v211;
      v209 = __clz(__rbit64(v211)) + ((_QWORD)v210 << 6);
      v308 = v210;
    }
    v212 = *(_QWORD *)(v292 + 56);
    v213 = *(_QWORD *)(v292 + 48) + 96 * v209;
    v214 = *(_OWORD *)(v213 + 48);
    v311 = *(_OWORD *)(v213 + 32);
    v312 = v214;
    v215 = *(_OWORD *)(v213 + 80);
    v313 = *(_OWORD *)(v213 + 64);
    v314 = v215;
    v216 = *(_OWORD *)(v213 + 16);
    v309 = *(int64x2_t *)v213;
    v310 = v216;
    v217 = *(_QWORD *)(v212 + 112 * v209);
    v218 = *(_QWORD *)(v156 + 248);
    v220 = *(_QWORD *)(v218 + 272);
    v219 = *(_QWORD *)(v218 + 280);
    LODWORD(v295) = *(unsigned __int8 *)(v218 + 288);
    v221 = *(char **)(v218 + 304);
    v296 = *(_QWORD *)(v218 + 296);
    v297 = v221;
    v222 = *(_QWORD **)(v218 + 320);
    v298 = *(char **)(v218 + 312);
    v299 = v222;
    LODWORD(v300) = *(_DWORD *)(v218 + 328);
    LODWORD(v301) = *(_DWORD *)(v218 + 332);
    v223 = *(_QWORD *)(v218 + 344);
    v302 = *(_QWORD *)(v218 + 336);
    v303 = v223;
    v224 = *(char **)(v218 + 360);
    v304 = *(_QWORD *)(v218 + 352);
    v305 = v224;
    LODWORD(v306) = *(_DWORD *)(v218 + 368);
    LODWORD(v307) = *(_DWORD *)(v218 + 372);
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v326[0] = *(_QWORD *)(v85 + 8);
    v226 = v326[0];
    *(_QWORD *)(v85 + 8) = 0x8000000000000000;
    sub_1B1DC3F84(&v309);
    v229 = v228;
    v230 = v227;
    v231 = *(_QWORD *)(v226 + 16) + ((v227 & 1) == 0);
    if (*(_QWORD *)(v226 + 24) < v231)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v234 = (_QWORD *)v326[0];
      if ((v227 & 1) == 0)
        goto LABEL_134;
    }
    else
    {
      sub_1B1EAED60();
      v234 = (_QWORD *)v326[0];
      if ((v230 & 1) == 0)
      {
LABEL_134:
        v234[(v229 >> 6) + 8] |= 1 << v229;
        v199 = v234[6] + 96 * v229;
        v200 = v312;
        *(_OWORD *)(v199 + 32) = v311;
        *(_OWORD *)(v199 + 48) = v200;
        v201 = v314;
        *(_OWORD *)(v199 + 64) = v313;
        *(_OWORD *)(v199 + 80) = v201;
        v202 = v310;
        *(int64x2_t *)v199 = v309;
        *(_OWORD *)(v199 + 16) = v202;
        v203 = v234[7] + 112 * v229;
        *(_QWORD *)v203 = v217;
        *(_QWORD *)(v203 + 8) = v220;
        *(_QWORD *)(v203 + 16) = v219;
        *(_BYTE *)(v203 + 24) = v295;
        v204 = v297;
        *(_QWORD *)(v203 + 32) = v296;
        *(_QWORD *)(v203 + 40) = v204;
        v205 = v299;
        *(_QWORD *)(v203 + 48) = v298;
        *(_QWORD *)(v203 + 56) = v205;
        LODWORD(v205) = (_DWORD)v301;
        *(_DWORD *)(v203 + 64) = v300;
        *(_DWORD *)(v203 + 68) = (_DWORD)v205;
        v206 = v303;
        *(_QWORD *)(v203 + 72) = v302;
        *(_QWORD *)(v203 + 80) = v206;
        v207 = v305;
        *(_QWORD *)(v203 + 88) = v304;
        *(_QWORD *)(v203 + 96) = v207;
        LODWORD(v207) = v307;
        *(_DWORD *)(v203 + 104) = (_DWORD)v306;
        *(_DWORD *)(v203 + 108) = (_DWORD)v207;
        ++v234[2];
        goto LABEL_135;
      }
    }
LABEL_156:
    v235 = v234[7] + 112 * v229;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(_QWORD *)v235 = v217;
    *(_QWORD *)(v235 + 8) = v220;
    *(_QWORD *)(v235 + 16) = v219;
    *(_BYTE *)(v235 + 24) = v295;
    v236 = v297;
    *(_QWORD *)(v235 + 32) = v296;
    *(_QWORD *)(v235 + 40) = v236;
    v237 = v299;
    *(_QWORD *)(v235 + 48) = v298;
    *(_QWORD *)(v235 + 56) = v237;
    LODWORD(v237) = (_DWORD)v301;
    *(_DWORD *)(v235 + 64) = v300;
    *(_DWORD *)(v235 + 68) = (_DWORD)v237;
    v238 = v303;
    *(_QWORD *)(v235 + 72) = v302;
    *(_QWORD *)(v235 + 80) = v238;
    v239 = v305;
    *(_QWORD *)(v235 + 88) = v304;
    *(_QWORD *)(v235 + 96) = v239;
    LODWORD(v239) = v307;
    *(_DWORD *)(v235 + 104) = (_DWORD)v306;
    *(_DWORD *)(v235 + 108) = (_DWORD)v239;
LABEL_135:
    v85 = v293;
    *(_QWORD *)(v293 + 8) = v234;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v156 = v294;
    v198 = v308;
  }
  sub_1B1E9D000(v231, isUniquelyReferenced_nonNull_native);
  sub_1B1DC3F84(&v309);
  if ((v230 & 1) == (v233 & 1))
  {
    v229 = v232;
    v234 = (_QWORD *)v326[0];
    if ((v230 & 1) == 0)
      goto LABEL_134;
    goto LABEL_156;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

BOOL sub_1B1D27E50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  unsigned int v11;
  _BOOL8 v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(uint64_t (**)(uint64_t))(v9 + 152);
  v11 = v10(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  v12 = v11 <= 0xFF && ((unsigned int (*)(uint64_t, uint64_t))v10)(a1, a2) > 0xA;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  return v12;
}

uint64_t sub_1B1D27F14@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t *__return_ptr)@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[10];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[176];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52[22];
  uint64_t v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[184];

  a2(v52);
  sub_1B1A18378((uint64_t)v52, (uint64_t)&v70, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
  if (sub_1B1D2DF60((uint64_t)&v70) == 1)
  {
    a3(&v54, a1);
    sub_1B1A18378((uint64_t)&v54, (uint64_t)v53, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
    sub_1B1A18378((uint64_t)v53, (uint64_t)v86, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
    return sub_1B1A18378((uint64_t)v86, a4, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
  }
  v49 = v82;
  v50 = v83;
  v31 = v85;
  v51 = v84;
  v47 = v80;
  v48 = v81;
  v7 = v70;
  v8 = v71;
  v9 = v72;
  v10 = v73;
  v11 = v74;
  v12 = v75;
  v32 = v76;
  v33 = v77;
  v34 = v78;
  v35 = v79;
  if (v71)
  {
    sub_1B1B410E4(v70, v71);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    if (v10)
    {
      v54 = v7;
      v55 = v8;
      v56 = v9;
      v57 = v10;
      v58 = v11;
      v59 = v12;
      v60 = v32;
      v61 = v33;
      v62 = v34;
      v63 = v35;
      v66 = v49;
      v67 = v50;
      v65 = v48;
      v64 = v47;
      v68 = v51;
      v69 = v31;
      nullsub_16(&v54);
      v13 = &v54;
LABEL_8:
      sub_1B1A18378((uint64_t)v13, (uint64_t)v86, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
      return sub_1B1A18378((uint64_t)v86, a4, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
    }
  }
  a3(v53, a1);
  sub_1B1A18378((uint64_t)v53, (uint64_t)v46, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
  sub_1B1A18378((uint64_t)v53, (uint64_t)&v54, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
  if (sub_1B1D2DF60((uint64_t)&v54) == 1)
  {
    sub_1B1D2DF84(v52);
    v13 = (uint64_t *)v46;
    goto LABEL_8;
  }
  v24 = a4;
  v14 = v54;
  v15 = v55;
  v16 = v64;
  v17 = v65;
  v18 = v66;
  v19 = v67;
  v20 = v68;
  v30 = *((_QWORD *)&v67 + 1);
  v21 = *((_QWORD *)&v68 + 1);
  v23 = *((_QWORD *)&v69 + 1);
  v28 = v55;
  v29 = v54;
  v26 = v57;
  v27 = v56;
  v25 = v58;
  if (!(_QWORD)v31)
  {
    *(_QWORD *)&v31 = v69;
    swift_bridgeObjectRetain();
    v15 = v28;
    v14 = v29;
  }
  sub_1B1B410E4(v14, v15);
  sub_1B1B410E4(v16, *((uint64_t *)&v16 + 1));
  sub_1B1B410E4(*((uint64_t *)&v18 + 1), v19);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1B410E4(v12, v32);
  sub_1B1D2DF84(v53);
  sub_1B1D2DF84(v52);
  v36[0] = v29;
  v36[1] = v28;
  v36[2] = v27;
  v36[3] = v26;
  v36[4] = v25;
  v36[5] = v12;
  v36[6] = v32;
  v36[7] = v33;
  v36[8] = v34;
  v36[9] = v35;
  v37 = v16;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v41 = v30;
  v42 = v20;
  v43 = v21;
  v44 = v31;
  v45 = v23;
  nullsub_16(v36);
  sub_1B1A18378((uint64_t)v36, (uint64_t)v86, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
  a4 = v24;
  return sub_1B1A18378((uint64_t)v86, a4, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
}

uint64_t sub_1B1D28374(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D283A8 + 4 * byte_1B228D7C0[a1]))(0x65727574786574, 0xE700000000000000);
}

uint64_t sub_1B1D283A8()
{
  return 0x676E69746867696CLL;
}

uint64_t sub_1B1D283C0()
{
  return 0x72616C7563657073;
}

uint64_t sub_1B1D283D8()
{
  return 0x646F4D646E656C62;
}

uint64_t sub_1B1D28568()
{
  return 0x73656E6B63696874;
}

unint64_t sub_1B1D28588()
{
  return 0xD000000000000018;
}

unint64_t sub_1B1D285A0()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1B1D285BC()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1B1D285D8()
{
  return 0xD000000000000015;
}

unint64_t sub_1B1D285F4()
{
  return 0xD000000000000019;
}

uint64_t sub_1B1D28610()
{
  return 0x6C656E6E616863;
}

unint64_t sub_1B1D28624()
{
  return 0xD000000000000013;
}

unint64_t sub_1B1D2863C()
{
  return 0xD000000000000019;
}

void sub_1B1D28658()
{
  JUMPOUT(0x1B1D2866CLL);
}

uint64_t sub_1B1D28678()
{
  return 0x6F436E6F62626972;
}

uint64_t sub_1B1D286B4()
{
  return 0x656C69666F7270;
}

uint64_t sub_1B1D286C8()
{
  return 0x4D65727574786574;
}

uint64_t sub_1B1D286E8()
{
  return 0x65764F64696F7661;
}

uint64_t sub_1B1D2870C()
{
  return 0x6143656C62616E65;
}

uint64_t sub_1B1D28728()
{
  return 0x6E69676542706163;
}

uint64_t sub_1B1D2874C()
{
  return 0x6554646E45706163;
}

uint64_t sub_1B1D28770(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1D28374(*a1);
  v5 = v4;
  if (v3 == sub_1B1D28374(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1D287F8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D28374(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D28858()
{
  unsigned __int8 *v0;

  sub_1B1D28374(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D28898()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D28374(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D288F4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D2CEC8();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D28920@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1D28374(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1D28948()
{
  unsigned __int8 *v0;

  return sub_1B1D28374(*v0);
}

uint64_t sub_1B1D28950@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D2CEC8();
  *a1 = result;
  return result;
}

void sub_1B1D28974(_BYTE *a1@<X8>)
{
  *a1 = 36;
}

uint64_t sub_1B1D28980()
{
  sub_1B1B668A0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D289A8()
{
  sub_1B1B668A0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D289D0()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t result;
  _QWORD v11[5];

  v11[3] = &type metadata for ParticleQuadRenderer;
  v11[4] = &off_1E639D050;
  v1 = (_OWORD *)swift_allocObject();
  v11[0] = v1;
  v2 = v0[7];
  v1[7] = v0[6];
  v1[8] = v2;
  *(_OWORD *)((char *)v1 + 139) = *(_OWORD *)((char *)v0 + 123);
  v3 = v0[3];
  v1[3] = v0[2];
  v1[4] = v3;
  v4 = v0[5];
  v1[5] = v0[4];
  v1[6] = v4;
  v5 = v0[1];
  v1[1] = *v0;
  v1[2] = v5;
  v6 = *(_QWORD *)((char *)sub_1B19FA070(v11, (uint64_t)&type metadata for ParticleQuadRenderer) + 36);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
  v7 = (void *)sub_1B20F26A4(v6, v11);
  v8 = v7;
  if (!v7)
    return (uint64_t)v8;
  v9 = (unint64_t)objc_msgSend(v7, sel_textureType);
  if (v9 <= 7 && (((1 << v9) & 0x2D) != 0 || v9 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v8;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D28BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t result;
  _QWORD v14[5];

  v14[3] = a4;
  v14[4] = a5;
  v7 = swift_allocObject();
  v14[0] = v7;
  v8 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)v5;
  *(_OWORD *)(v7 + 32) = v8;
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v5 + 32);
  v9 = *sub_1B19FA070(v14, a4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
  v10 = (void *)sub_1B20F26A4(v9, v14);
  v11 = v10;
  if (!v10)
    return (uint64_t)v11;
  v12 = (unint64_t)objc_msgSend(v10, sel_textureType);
  if (v12 <= 7 && (((1 << v12) & 0x2D) != 0 || v12 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v11;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D28D1C()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  unint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t result;
  _QWORD v8[5];

  v8[3] = &type metadata for ParticleLineRenderer;
  v8[4] = &off_1E639C5C0;
  v1 = (_OWORD *)swift_allocObject();
  v8[0] = v1;
  v2 = v0[1];
  v1[1] = *v0;
  v1[2] = v2;
  *(_OWORD *)((char *)v1 + 44) = *(_OWORD *)((char *)v0 + 28);
  v3 = *(_QWORD *)((char *)sub_1B19FA070(v8, (uint64_t)&type metadata for ParticleLineRenderer) + 36);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  v4 = (void *)sub_1B20F26A4(v3, v8);
  v5 = v4;
  if (!v4)
    return (uint64_t)v5;
  v6 = (unint64_t)objc_msgSend(v4, sel_textureType);
  if (v6 <= 7 && (((1 << v6) & 0x2D) != 0 || v6 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v5;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D28E9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t result;
  char v8;

  v4 = (void *)sub_1B20F26A4(a4, &v8);
  v5 = v4;
  if (!v4)
    return (uint64_t)v5;
  v6 = (unint64_t)objc_msgSend(v4, sel_textureType);
  if (v6 <= 7 && (((1 << v6) & 0x2D) != 0 || v6 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v5;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D28FBC()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  unint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t result;
  _QWORD v8[5];

  v8[3] = &type metadata for ParticlePointRenderer;
  v8[4] = &off_1E63A4C10;
  v1 = (_OWORD *)swift_allocObject();
  v8[0] = v1;
  v2 = v0[1];
  v1[1] = *v0;
  v1[2] = v2;
  v1[3] = v0[2];
  v3 = *sub_1B19FA070(v8, (uint64_t)&type metadata for ParticlePointRenderer);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  v4 = (void *)sub_1B20F26A4(v3, v8);
  v5 = v4;
  if (!v4)
    return (uint64_t)v5;
  v6 = (unint64_t)objc_msgSend(v4, sel_textureType);
  if (v6 <= 7 && (((1 << v6) & 0x2D) != 0 || v6 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v5;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D2913C()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  unint64_t v5;
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t result;
  _QWORD v10[5];

  v10[3] = &type metadata for ParticleRibbonRenderer;
  v10[4] = &off_1E63A8940;
  v1 = (_OWORD *)swift_allocObject();
  v10[0] = v1;
  v2 = v0[5];
  v1[5] = v0[4];
  v1[6] = v2;
  *(_OWORD *)((char *)v1 + 105) = *(_OWORD *)((char *)v0 + 89);
  v3 = v0[1];
  v1[1] = *v0;
  v1[2] = v3;
  v4 = v0[3];
  v1[3] = v0[2];
  v1[4] = v4;
  v5 = *sub_1B19FA070(v10, (uint64_t)&type metadata for ParticleRibbonRenderer);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
  v6 = (void *)sub_1B20F26A4(v5, v10);
  v7 = v6;
  if (!v6)
    return (uint64_t)v7;
  v8 = (unint64_t)objc_msgSend(v6, sel_textureType);
  if (v8 <= 7 && (((1 << v8) & 0x2D) != 0 || v8 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v7;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D292DC()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  unint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  uint64_t result;
  _QWORD v8[5];

  v8[3] = &type metadata for ParticlePrimitiveRenderer;
  v8[4] = &off_1E63B0930;
  v1 = swift_allocObject();
  v8[0] = v1;
  v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 45) = *(_QWORD *)(v0 + 29);
  v3 = *sub_1B19FA070(v8, (uint64_t)&type metadata for ParticlePrimitiveRenderer);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  v4 = (void *)sub_1B20F26A4(v3, v8);
  v5 = v4;
  if (!v4)
    return (uint64_t)v5;
  v6 = (unint64_t)objc_msgSend(v4, sel_textureType);
  if (v6 <= 7 && (((1 << v6) & 0x2D) != 0 || v6 == 7))
  {
    swift_unknownObjectRetain();
    return (uint64_t)v5;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D2945C(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  double v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  _BYTE v47[160];
  uint64_t v48[21];
  int v49;
  int v50;
  char v51;

  v45 = *v1;
  v3 = *(_QWORD *)(v45 + 80);
  v4 = sub_1B2229124();
  v44 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v38 - v6;
  v8 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v14)
    return swift_release();
  v40 = v4;
  v41 = v1;
  v46 = a1;
  v42 = v12;
  v43 = v8;
  sub_1B1A18378(v14 + 624, (uint64_t)v47, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  sub_1B1A18378((uint64_t)v47, (uint64_t)v48, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  if (sub_1B1B3C438(v48) == 1)
  {
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  v15 = v48[1];
  ObjectType = swift_getObjectType();
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 144);
  swift_unknownObjectRetain();
  swift_retain();
  v18 = v17(ObjectType, v15);
  swift_unknownObjectRelease();
  v19 = BYTE4(v18) == 2 && (_DWORD)v18 == 0;
  v20 = (uint64_t)v46;
  if (!v19)
  {
    sub_1B1BE9FDC((int *)v46 + 10, (uint64_t)&v49);
    sub_1B1BE9FDC(&v49, (uint64_t)&v50);
    if (BYTE4(v18))
    {
      if (BYTE4(v18) == 1 || (v51 & 1) == 0)
        goto LABEL_17;
    }
    else if ((v51 & 1) != 0 || v50 != (_DWORD)v18)
    {
      goto LABEL_17;
    }
  }
  v22 = *(_QWORD *)(v20 + 8);
  if (sub_1B1FD568C((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C6040, v22))
  {
    v24 = swift_retain();
    v39 = sub_1B1F2173C(v24);
    v26 = v25;
    swift_release();
    if ((v26 & 1) == 0 && (sub_1B1DA6B50(*(_QWORD *)(v20 + 32), v39) & 1) == 0)
    {
LABEL_17:
      swift_release();
      return swift_release();
    }
  }
  v39 = 0;
  v27 = *(_QWORD *)(*(_QWORD *)(v13 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                  + 8 * *(_QWORD *)thread_worker_index(v23)
                  + 8);
  v28 = *(_QWORD *)(v45 + 88);
  sub_1B1FD6C70(v22, v3, (uint64_t)v7);
  v29 = v43;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v7, 1, v3) == 1)
  {
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v40);
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v42, v7, v3);
  v30 = sub_1B1DA6018(v22);
  v31 = sub_1B2094F98(v22);
  if (v30 == *((_DWORD *)v41 + 4))
  {
    v33 = v42;
    v34 = v27;
    if ((v31 & 1) == 0)
      goto LABEL_25;
  }
  else
  {
    v31 = sub_1B1CCC8C0(v13, v22);
    v33 = v42;
    v34 = v27;
  }
  MEMORY[0x1E0C80A78](v31, v32);
  *(&v38 - 8) = v3;
  *(&v38 - 7) = v28;
  v35 = v46;
  *(&v38 - 6) = (uint64_t)v33;
  *(&v38 - 5) = (uint64_t)v35;
  *(&v38 - 4) = v14;
  *(&v38 - 3) = v13;
  v37 = v34;
  sub_1B1D24A64(v22, (void (*)(uint64_t))sub_1B1D2D9A4);
  v20 = (uint64_t)v46;
  v36 = sub_1B1DA6018(v22);
  v33 = v42;
  *((_DWORD *)v41 + 4) = v36;
LABEL_25:
  sub_1B1D29A54(v20, v14, v13, v34, 0, v3, v28);
  if (*(_BYTE *)(v14 + 537) == 1 && (unint64_t)qword_1EEF61320 <= 0x2540BE409)
    sub_1B1D29A54(v20, v14, v13, v34, 1, v3, v28);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v33, v3);
}

uint64_t sub_1B1D29914(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _OWORD v26[15];
  uint64_t v27;

  v14 = *(_OWORD *)(a1 + 208);
  v26[12] = *(_OWORD *)(a1 + 192);
  v26[13] = v14;
  v26[14] = *(_OWORD *)(a1 + 224);
  v27 = *(_QWORD *)(a1 + 240);
  v15 = *(_OWORD *)(a1 + 144);
  v26[8] = *(_OWORD *)(a1 + 128);
  v26[9] = v15;
  v16 = *(_OWORD *)(a1 + 176);
  v26[10] = *(_OWORD *)(a1 + 160);
  v26[11] = v16;
  v17 = *(_OWORD *)(a1 + 80);
  v26[4] = *(_OWORD *)(a1 + 64);
  v26[5] = v17;
  v18 = *(_OWORD *)(a1 + 112);
  v26[6] = *(_OWORD *)(a1 + 96);
  v26[7] = v18;
  v19 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v19;
  v20 = *(_OWORD *)(a1 + 48);
  v26[2] = *(_OWORD *)(a1 + 32);
  v26[3] = v20;
  sub_1B1BBF28C((uint64_t)v26);
  v21 = MEMORY[0x1E0DEE9D8];
  v22 = sub_1B1B955E4(MEMORY[0x1E0DEE9D8]);
  v23 = sub_1B1B956CC(v21);
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 48) = v21;
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = v21;
  *(_QWORD *)(a1 + 72) = v21;
  *(_QWORD *)(a1 + 80) = v21;
  *(_QWORD *)(a1 + 88) = v21;
  *(_QWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 112) = v21;
  *(_QWORD *)(a1 + 120) = v21;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v21;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 208) = xmmword_1B226D240;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return sub_1B1D25E70(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t *sub_1B1D29A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  __int128 v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  uint64_t *result;
  int v36;
  _DWORD v37[4];
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[160];
  uint64_t v50[20];
  uint64_t v51[12];
  _OWORD v52[12];
  _QWORD v53[12];
  _OWORD v54[2];
  uint64_t v55;

  v46 = a6;
  v47 = a7;
  v13 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
  v14 = *(unsigned int *)(a1 + 36);
  v15 = *(int *)(a1 + 32);
  swift_retain();
  swift_retain();
  v16 = (_DWORD)v15 == -1 && (_DWORD)v14 == 0;
  if (v16
    || (v15 & 0x80000000) != 0
    || *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v15
    || ((v17 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v14 != -1)
      ? (v18 = *(_DWORD *)(v17 + 12 * (int)v15 + 8) == (_DWORD)v14)
      : (v18 = 1),
        !v18 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 136) + 8 * *(int *)(v17 + 12 * (int)v15) + 32) + 120) == 1))
  {
    v42 = v13;
    v43 = a4;
    v44 = v7;
    v45 = a5;
    v19 = *(_OWORD *)(a1 + 64);
    v54[0] = *(_OWORD *)(a1 + 48);
    v54[1] = v19;
    v55 = *(_QWORD *)(a1 + 80);
    sub_1B1A18378(a2 + 624, (uint64_t)v49, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    sub_1B1A18378((uint64_t)v49, (uint64_t)v50, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    if (sub_1B1B3C438(v50) == 1)
    {
      result = (uint64_t *)sub_1B2229688();
      __break(1u);
    }
    else
    {
      v20 = v50[1];
      ObjectType = swift_getObjectType();
      v22 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 144);
      sub_1B1B7C5AC((uint64_t)v54);
      swift_unknownObjectRetain();
      v23 = v22(ObjectType, v20);
      swift_unknownObjectRelease();
      v24 = sub_1B1D2A3AC(DWORD2(v54[0]) | ((unint64_t)BYTE12(v54[0]) << 32), v23 & 0xFFFFFFFFFFLL);
      if ((~v24 & 0xFF00000000) == 0)
      {
        sub_1B19ED720((uint64_t)v54);
        swift_release();
        return (uint64_t *)swift_release();
      }
      v25 = v15;
      sub_1B1E8FCE4(a3, (uint64_t)v54, v24 & 0xFFFFFFFFFFLL, v51);
      v40 = (_DWORD *)v51[8];
      v41 = v51[11];
      sub_1B1A18378((uint64_t)v51, (uint64_t)v53, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (v53[0])
        v26 = v53[10];
      else
        v26 = 0;
      sub_1B1BEE528(a1);
      v27 = sub_1B1FF1344(v25 | (v14 << 32), a3, a1, v26);
      v29 = v28;
      sub_1B1B4F21C(a1);
      if ((v29 & 1) != 0 || v27 < 1)
      {
LABEL_26:
        sub_1B19ED748(v51);
        goto LABEL_27;
      }
      v39 = *(_QWORD *)(a1 + 8);
      v30 = sub_1B1D16C4C(v39);
      v32 = v31;
      if ((v31 & 1) != 0)
      {
        v41 = 0;
LABEL_25:
        v40 = v37;
        MEMORY[0x1E0C80A78](v30, v31);
        if ((sub_1B1A74648(v39, (void (*)(uint64_t))sub_1B1D2D9C8) & 1) == 0)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          swift_retain();
          v36 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v48 = 0;
          swift_retain();
          sub_1B1F1AD70(v36, &v48, 0xD000000000000018, 0x80000001B23391D0);
          swift_release();
          sub_1B19ED748(v51);
          swift_release();
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      v38 = v30;
      sub_1B1A18378((uint64_t)v51, (uint64_t)v52, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (!*(_QWORD *)&v52[0])
      {
LABEL_27:
        swift_release();
        sub_1B19ED720((uint64_t)v54);
        return (uint64_t *)swift_release();
      }
      v37[3] = v32;
      v52[8] = v52[2];
      v52[9] = v52[3];
      v52[10] = v52[4];
      v52[11] = v52[5];
      v52[6] = v52[0];
      v52[7] = v52[1];
      swift_retain();
      swift_retain();
      swift_retain();
      v41 = sub_1B1D2A18C(v38);
      v34 = v33;
      v30 = (uint64_t)sub_1B19ED748(v51);
      if ((v34 & 1) == 0)
        goto LABEL_25;
      swift_release();
      sub_1B19ED720((uint64_t)v54);
      swift_release();
      return sub_1B19ED748(v51);
    }
  }
  else
  {
    swift_release();
    return (uint64_t *)swift_release();
  }
  return result;
}

uint64_t sub_1B1D29FAC()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticleDefaultRenderSystem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParticleDefaultRenderSystem);
}

uint64_t sub_1B1D29FC8()
{
  uint64_t result;

  result = swift_allocObject();
  *(_DWORD *)(result + 16) = -2;
  return result;
}

const char *sub_1B1D29FF8()
{
  return "ParticleRendererPrepare";
}

uint64_t sub_1B1D2A00C()
{
  return qword_1EEF5DE38;
}

uint64_t sub_1B1D2A018()
{
  sub_1B1D2EC0C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D2A040()
{
  sub_1B1D2EC0C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D2A068()
{
  sub_1B222A06C();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D2A09C()
{
  sub_1B222A06C();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D2A0CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1D2EBB4();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D2EC0C();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1D2A18C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  if ((uint64_t)v1[10] < 1)
    return 0;
  v2 = v1[7];
  if (!v2)
    return 0;
  v3 = 0;
  v4 = v1[5];
  v5 = v4 + 48 * v2;
  v6 = -2;
  while (2)
  {
    v7 = 0;
    while (2)
    {
      v8 = v6;
      while (2)
      {
        for (v4 += 48; ; v4 += 48)
        {
          v9 = *(_QWORD *)(v4 - 8);
          v6 = *(_DWORD *)(v9 + 24);
          if (v8 != v6)
            break;
          if (v4 == v5)
          {
            if ((v7 & 1) == 0)
              return 0;
            return v3;
          }
        }
        if ((v7 & 1) != 0)
        {
          v7 = 1;
          v8 = *(_DWORD *)(v9 + 24);
          if (v4 != v5)
            continue;
          return v3;
        }
        break;
      }
      v11 = *(_QWORD *)(v9 + 40);
      v12 = v1[8];
      v13 = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 40 * *(int *)(v11 + 204) + 32);
      v14 = *(_QWORD *)(v13 + 16);
      if (!v14)
      {
        v17 = 0;
        goto LABEL_23;
      }
      v15 = *(_QWORD *)(v12 + 136) + 32;
      if (v14 == 1)
      {
        v16 = 0;
        v17 = 0;
LABEL_21:
        v24 = v14 - v16;
        v25 = (int *)(v13 + 4 * v16 + 32);
        do
        {
          v26 = *v25++;
          v17 += *(_QWORD *)(*(_QWORD *)(v15 + 8 * v26) + 240) - *(_QWORD *)(*(_QWORD *)(v15 + 8 * v26) + 232);
          --v24;
        }
        while (v24);
        goto LABEL_23;
      }
      v18 = 0;
      v19 = 0;
      v16 = v14 & 0x7FFFFFFFFFFFFFFELL;
      v20 = (int *)(v13 + 36);
      v21 = v14 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v22 = *(_QWORD *)(v15 + 8 * *(v20 - 1));
        v23 = *(_QWORD *)(v15 + 8 * *v20);
        v18 += *(_QWORD *)(v22 + 240) - *(_QWORD *)(v22 + 232);
        v19 += *(_QWORD *)(v23 + 240) - *(_QWORD *)(v23 + 232);
        v20 += 2;
        v21 -= 2;
      }
      while (v21);
      v17 = v19 + v18;
      if (v14 != v16)
        goto LABEL_21;
LABEL_23:
      v27 = *(_QWORD *)(v11 + 112);
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v29 = *(_QWORD *)(v11 + 96);
        v30 = (_QWORD *)(v27 + 56);
        while ((ValueMetadata *)*(v30 - 3) != &type metadata for ParticleClassSpawnID)
        {
          v30 += 5;
          if (!--v28)
            goto LABEL_31;
        }
        if (*(_QWORD *)(v29 + *v30) == a1)
        {
          v7 = 1;
          if (v4 != v5)
            continue;
          return v3;
        }
      }
      break;
    }
LABEL_31:
    v31 = 0;
    v3 += v17;
    if (v4 != v5)
      continue;
    return v31;
  }
}

uint64_t sub_1B1D2A3AC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!(_DWORD)a1 && BYTE4(a1) == 2)
  {
    if ((_DWORD)a2)
      v2 = 0;
    else
      v2 = BYTE4(a2) == 2;
    v3 = a2 & 0xFFFFFFFFFFLL;
    v4 = 0x200000000;
    goto LABEL_7;
  }
  if (BYTE4(a2))
  {
    if (BYTE4(a2) == 2)
      return a1 & 0xFFFFFFFFFFLL;
  }
  else
  {
    v3 = 0xFF00000000;
    if (!BYTE4(a1))
    {
      v4 = a1;
      v2 = (_DWORD)a1 == (_DWORD)a2;
LABEL_7:
      if (v2)
        return v4;
      return v3;
    }
    if (BYTE4(a1) != 1)
      return v3;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D2A484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, char a13, uint64_t a14, uint64_t a15, char a16, char a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t);
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  float v80;
  int8x16_t *v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t result;
  uint64_t v108;
  void (*v109)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  float32x4_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  int v129;
  float32x4_t v130;
  float v131;
  char *v132;
  id v133;
  char *v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  unint64_t v141;
  char v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  _BOOL4 v153;
  _BOOL8 v154;
  int v155;
  uint64_t v158;
  int v159;
  int v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  void *v165;
  char *v166;
  char *v167;
  char *v168;
  int v169;
  id v170;
  __int128 v171;
  char *v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  __int128 v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  void *v182;
  char *v183;
  char *v184;
  char *v185;
  int v186;
  char *v187;
  id v188;
  char *v189;
  int v190;
  id v191;
  char *v192;
  void *v193;
  void *v194;
  _BOOL4 v195;
  unsigned __int8 v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  double v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  float32x4_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  unint64_t v225;
  _QWORD *v226;
  uint64_t (*v227)(uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  _QWORD v237[2];
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  _OWORD v248[6];
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257[82];
  uint64_t v258[82];
  _BYTE v259[80];
  _OWORD v260[6];
  _OWORD v261[6];
  float v262[4];
  _OWORD v263[3];
  char v264;
  _QWORD v265[4];
  char v266;
  unint64_t v267[82];
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  char v271;
  _QWORD v272[4];
  char v273;
  _QWORD v274[4];
  char v275;
  _QWORD v276[4];
  char v277;
  _QWORD v278[4];
  char v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char v289;
  _OWORD v290[2];
  char v291;
  _QWORD v292[4];
  char v293;
  _QWORD v294[4];
  char v295;
  _OWORD v296[8];
  uint64_t v297;
  float32x2x2_t v298;

  MEMORY[0x1E0C80A78](a1, a2);
  v230 = v23;
  v231 = v22;
  v232 = v24;
  v26 = v25;
  v226 = v27;
  v224 = v28;
  v30 = v29;
  v297 = *MEMORY[0x1E0C80C00];
  v235 = a20;
  v31 = *(_QWORD *)(a20 - 8);
  MEMORY[0x1E0C80A78](v29, v32);
  v34 = (char *)&v214 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v222 = (char *)&v214 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v214 - v40;
  v233 = v42;
  v43 = *(_QWORD *)(v42 + 176);
  swift_retain();
  v44 = sub_1B1F2381C((uint64_t)&type metadata for DrawCallPool, (uint64_t)&off_1E6374C20, v43);
  v234 = v21;
  swift_release();
  v223 = v34;
  v227 = v26;
  if (!v44)
  {
    type metadata accessor for DrawCall();
    swift_allocObject();
    v44 = sub_1B1D604AC();
  }
  sub_1B1D5EACC();
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v46 = v235;
  v225 = (unint64_t)v45;
  v45(v41, v231, v235);
  v47 = swift_dynamicCast();
  v229 = a21;
  if ((v47 & 1) == 0)
  {
    *(_QWORD *)(v44 + 264) = v30[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v67 = a21;
    v68 = *(uint64_t (**)(uint64_t, uint64_t))(a21 + 24);
    LODWORD(v227) = v68(v46, a21) != 0xFFFFFFFFLL;
    v69 = v68(v46, a21);
    goto LABEL_13;
  }
  v228 = v44;
  v48 = v30;
  v49 = v234;
  v50 = v267[3];
  v51 = v267[4];
  v52 = sub_1B1D16FEC(v267[0]);
  if (!v53)
    return swift_release();
  v54 = v52;
  v55 = v228;
  if (!v52)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (v50 < 0 || (v56 = *(_QWORD *)(v52 + 40), v50 >= *(_QWORD *)(v56 + 16)))
  {
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v57 = (_OWORD *)(v56 + (v50 << 7));
  v58 = v57[2];
  v59 = v57[3];
  v60 = v57[5];
  v296[2] = v57[4];
  v296[3] = v60;
  v296[0] = v58;
  v296[1] = v59;
  v61 = v57[6];
  v62 = v57[7];
  v63 = v57[9];
  v296[6] = v57[8];
  v296[7] = v63;
  v296[4] = v61;
  v296[5] = v62;
  swift_retain();
  sub_1B1D2DA60((uint64_t)v296);
  sub_1B1D61CEC(v54, v55, v224);
  sub_1B1D65E38((uint64_t)v296, v55, v51);
  v64 = *(_QWORD *)(v54 + 24);
  v234 = v49;
  v30 = v48;
  if (v64)
  {
    if (*(_QWORD *)(*v48 + 16) && (sub_1B1DC3AC8(*(_QWORD *)(v54 + 16)), (v65 & 1) != 0))
      v66 = swift_bridgeObjectRetain();
    else
      v66 = (uint64_t)sub_1B1B956CC(MEMORY[0x1E0DEE9D8]);
    v148 = v229;
    *(_QWORD *)(v228 + 264) = v66;
    swift_retain();
  }
  else
  {
    *(_QWORD *)(v55 + 264) = v48[1];
    swift_bridgeObjectRetain();
    v148 = v229;
  }
  swift_bridgeObjectRelease();
  sub_1B1D2DA94((uint64_t)v296);
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  v67 = v148;
  v68 = *(uint64_t (**)(uint64_t, uint64_t))(v148 + 24);
  LODWORD(v227) = 1;
  v44 = v228;
  v69 = v68(v235, v67);
LABEL_13:
  v71 = v233;
  v70 = v234;
  LODWORD(v228) = sub_1B1FDFA54(v69, v233);
  v234 = v70;
  *(_QWORD *)(v44 + 152) = v30[27];
  *(_QWORD *)(v44 + 144) = v30[26];
  *(_BYTE *)(v44 + 256) = *((_BYTE *)v30 + 224);
  *(_BYTE *)(v44 + 257) = *((_BYTE *)v30 + 226);
  v72 = *((_OWORD *)v30 + 7);
  v248[4] = *((_OWORD *)v30 + 6);
  v248[5] = v72;
  v249 = *((_OWORD *)v30 + 8);
  v73 = *((_OWORD *)v30 + 3);
  v248[0] = *((_OWORD *)v30 + 2);
  v248[1] = v73;
  v75 = *((_OWORD *)v30 + 4);
  v74 = *((_OWORD *)v30 + 5);
  v226 = v30;
  v248[2] = v75;
  v248[3] = v74;
  v221 = v44 + 272;
  sub_1B1EC7248((uint64_t)v248);
  v76 = v68(v235, v67);
  swift_retain();
  v77 = v76;
  v78 = v234;
  sub_1B1FF15C0(v77, v71, v44);
  swift_release();
  v79 = *(_QWORD **)(v232 + 8);
  sub_1B1D15764(v79, (uint64_t)v259);
  sub_1B1A18378((uint64_t)v259, (uint64_t)v262, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  v80 = 1.0;
  if ((v264 & 1) == 0)
  {
    v298 = vld2_f32(v262);
    v81 = (int8x16_t *)v263;
    v82 = *v81;
    v83 = (int8x16_t)v263[1];
    v84 = (int8x16_t)v263[2];
    v85 = (float32x4_t)vextq_s8(v83, v83, 8uLL);
    v86 = (float32x4_t)vextq_s8(v84, v84, 0xCuLL);
    v87 = (float32x4_t)vextq_s8(v83, v83, 0xCuLL);
    v88 = (float32x4_t)vextq_s8(v84, v84, 8uLL);
    v89 = (float32x4_t)vextq_s8(v84, v84, 4uLL);
    v90 = (float32x4_t)vextq_s8(v83, v83, 4uLL);
    v91 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v82, v82, 8uLL), vmlaq_f32(vmulq_f32(v86, vnegq_f32(v90)), v89, v87)), vmlaq_f32(vmulq_f32(v88, vnegq_f32(v87)), v86, v85), (float32x4_t)vextq_s8(v82, v82, 4uLL)), vmlaq_f32(vmulq_f32(v89, vnegq_f32(v85)), v88, v90), (float32x4_t)vextq_s8(v82, v82, 0xCuLL));
    v82.i64[0] = vextq_s8(v91, v91, 8uLL).u64[0];
    v80 = vaddv_f32(vsub_f32(vmul_f32(v298.val[0], (float32x2_t)vzip1_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v82.i8)), vmul_f32(v298.val[1], (float32x2_t)vzip2_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v82.i8))));
  }
  *(_BYTE *)(v44 + 176) = v80 < 0.0;
  v92 = v230;
  v234 = v78;
  if ((v227 & v228 & 1) == 0)
  {
    v224 = *((_QWORD *)&v249 + 1);
    v93 = v226;
    v226[17] = MEMORY[0x1E0DEE9D8];
    v94 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v229 + 88))(v93, v92, v232, v235);
    if (!v94)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      v93[17] = v224;
      goto LABEL_26;
    }
    v97 = v94;
    v98 = v95;
    v99 = v96;
    v100 = v93[17];
    if (v100 >> 62)
    {
      swift_bridgeObjectRetain();
      v213 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (!v213)
        goto LABEL_20;
    }
    else if (!*(_QWORD *)((v100 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_20:
      if ((v228 & 1) == 0)
      {
        v294[0] = v97;
        v294[1] = v98;
        v294[2] = v99;
        v294[3] = 0;
        v295 = 0;
        swift_unknownObjectRetain();
        sub_1B1D2C700((uint64_t)v294, 2, 0);
        swift_unknownObjectRelease();
        swift_unknownObjectRetain();
        sub_1B1D2C700((uint64_t)v294, 2, 0);
        swift_unknownObjectRelease();
        swift_unknownObjectRetain();
        sub_1B1D2C700((uint64_t)v294, 2, 0);
        swift_unknownObjectRelease();
      }
      v92 = v230;
      if ((v227 & 1) == 0)
      {
        v292[0] = v97;
        v292[1] = v98;
        v292[2] = v99;
        v292[3] = 0;
        v293 = 0;
        swift_unknownObjectRetain();
        sub_1B1D2C700((uint64_t)v292, 2, 0);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      v93 = v226;
      goto LABEL_25;
    }
    v101 = swift_bridgeObjectRetain();
    sub_1B19F5FD0(v101);
    goto LABEL_20;
  }
LABEL_26:
  v224 = a9;
  if ((BYTE2(v249) & 7) != 0)
  {
    v290[0] = xmmword_1B228D780;
    v290[1] = xmmword_1B228D790;
    v291 = 0x80;
    sub_1B1D2C700((uint64_t)v290, 6, 0);
  }
  v102 = v233;
  v103 = sub_1B1D18620((uint64_t)v79);
  v104 = v232;
  if ((v103 & 0x100000000) == 0 || (v103 = sub_1B1D18620(*(_QWORD *)(v232 + 32)), (v103 & 0x100000000) == 0))
    *(_DWORD *)(v44 + 24) = v103;
  v105 = sub_1B1E5371C();
  v106 = sub_1B1C357CC(v105);
  sub_1B1A18378(v224, (uint64_t)v261, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v261[0])
  {
    v245 = v261[3];
    v246 = v261[4];
    v247 = v261[5];
    v242 = v261[0];
    v243 = v261[1];
    v244 = v261[2];
    sub_1B1E538F0(v104, v106, v106, v92);
  }
  sub_1B1D1862C(*(_QWORD *)(v104 + 32), (uint64_t)&v250);
  sub_1B1A18378((uint64_t)&v250, (uint64_t)v257, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
  sub_1B1A18378((uint64_t)v257, (uint64_t)v258, &qword_1ED4B8A80, (uint64_t)&type metadata for EmitterRuntime);
  if (sub_1B1B3C438(v258) == 1)
    return swift_release();
  memcpy(v267, v258, sizeof(v267));
  v237[0] = v102;
  v237[1] = a10;
  v217 = a10;
  v238 = xmmword_1B2244C80;
  v239 = 0u;
  v240 = 0u;
  v241 = 0u;
  v108 = v229;
  v109 = *(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(v229 + 80);
  swift_retain();
  v110 = v231;
  v109(v44, v237, v92, v235, v108);
  v111 = v258[45];
  v228 = v44;
  if (v258[45])
  {
    v219 = v258[46];
    v220 = v258[47];
    v112 = LOBYTE(v258[34]);
    v113 = v258[56];
    if (!LOBYTE(v258[34]))
      v113 = 0;
    v114 = v258[35];
    v115 = v258[36];
    v116 = v258[38];
    v117 = v258[36] + v258[38] * v113;
    if (v240 == 0)
    {
      v285 = v258[35];
      v286 = v117;
      v287 = v258[38];
      v288 = 0;
      v289 = 0;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)&v285, 4, 0);
      swift_unknownObjectRelease();
      v278[0] = v111;
      v278[1] = v219;
      v278[2] = v220;
      v278[3] = 0;
      v279 = 0;
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)v278, 5, 0);
      swift_unknownObjectRelease();
      v118 = v258[56];
      if (!v112)
        v118 = 0;
      v280 = v114;
      v281 = v115 + v118 * v116;
      v282 = v116;
      v283 = 0;
      v284 = 0;
      v44 = v228;
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)&v280, 4, 0);
      swift_unknownObjectRelease();
      swift_unknownObjectRetain();
      v119 = v278;
    }
    else
    {
      v285 = v258[35];
      v286 = v117;
      v287 = v258[38];
      v288 = 0;
      v44 = v228;
      v289 = 0;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)&v285, 4, 0);
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)&v285, 4, 0);
      swift_unknownObjectRelease();
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)&v285, 4, 0);
      swift_unknownObjectRelease_n();
      v280 = v111;
      v281 = v219;
      v282 = v220;
      v283 = 0;
      v284 = 0;
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)&v280, 5, 0);
      swift_unknownObjectRelease();
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)&v280, 5, 0);
      swift_unknownObjectRelease();
      swift_unknownObjectRetain();
      v119 = &v280;
    }
    sub_1B1D2C700((uint64_t)v119, 5, 0);
    swift_unknownObjectRelease_n();
    v110 = v231;
  }
  *(double *)v120.i64 = sub_1B1E52BDC();
  v218 = v120;
  v215 = v122;
  v216 = v121;
  v214 = v123;
  swift_retain();
  v124 = (void *)sub_1B1D22DA8(0, 80);
  v126 = v125;
  v219 = v127;
  v128 = objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode);
  v220 = (uint64_t)v124;
  if (v128 == (id)2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v250 = 0;
    *((_QWORD *)&v250 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v129 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v250 = 0;
    swift_retain();
    sub_1B1F1AD70(v129, (uint64_t *)&v250, 0xD000000000000036, 0x80000001B2339320);
    swift_release();
    swift_release();
    swift_release();
    v110 = v231;
    v44 = v228;
    v124 = (void *)v220;
  }
  else
  {
    v130 = vmulq_f32(v218, v218);
    v131 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 2), vaddq_f32(v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.f32, 1))).f32[0]);
    v132 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v133 = v124;
    v134 = &v132[v126];
    v135 = v216;
    *(float32x4_t *)v134 = v218;
    *((_OWORD *)v134 + 1) = v135;
    v136 = v214;
    *((_OWORD *)v134 + 2) = v215;
    *((_OWORD *)v134 + 3) = v136;
    *((float *)v134 + 16) = v131;
    *(_QWORD *)(v134 + 68) = *(_QWORD *)&v260[0];
    *((_DWORD *)v134 + 19) = DWORD2(v260[0]);
    swift_release();
  }
  v137 = v219;
  if ((v227 & 1) == 0)
  {
    v276[0] = v124;
    v276[1] = v126;
    v276[2] = v219;
    v276[3] = 0;
    v277 = 0;
    swift_unknownObjectRetain();
    sub_1B1D2C700((uint64_t)v276, 3, 0);
    swift_unknownObjectRelease();
  }
  v274[0] = v124;
  v274[1] = v126;
  v274[2] = v137;
  v274[3] = 0;
  v275 = 0;
  swift_unknownObjectRetain();
  sub_1B1D2C700((uint64_t)v274, 3, 0);
  swift_unknownObjectRelease();
  v138 = v235;
  v227 = *(uint64_t (**)(uint64_t, uint64_t))(v229 + 64);
  if (((unsigned __int8 (*)(uint64_t))v227)(v235) || (sub_1B1E53380() & 1) != 0)
  {
    v139 = v258[22];
    v140 = v227(v138, v229);
    if (!*(_QWORD *)(v139 + 16) || (v141 = sub_1B1DC4B3C(v140), (v142 & 1) == 0))
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v147 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v250 = 0;
      swift_retain();
      sub_1B1F1AD70(v147, (uint64_t *)&v250, 0xD00000000000001BLL, 0x80000001B23391F0);
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      sub_1B1C1F7D0(v257);
      goto LABEL_158;
    }
    v143 = (uint64_t *)(*(_QWORD *)(v139 + 56) + 24 * v141);
    v145 = *v143;
    v144 = v143[1];
    v146 = v143[2];
    ((void (*)(char *, uint64_t, uint64_t))v225)(v222, v110, v235);
    swift_unknownObjectRetain();
    if ((swift_dynamicCast() & 1) != 0)
    {
      *(_QWORD *)(v44 + 32) = v145;
      *(_QWORD *)(v44 + 40) = v144;
      *(_QWORD *)(v44 + 48) = v146;
      swift_unknownObjectRelease();
      *(_QWORD *)(v44 + 56) = 1;
      *(_QWORD *)(v44 + 64) = v217;
    }
    else
    {
      v272[0] = v145;
      v272[1] = v144;
      v272[2] = v146;
      v272[3] = 0;
      v273 = 0;
      if (v240 != 0)
      {
        swift_unknownObjectRetain();
        sub_1B1D2C700((uint64_t)v272, 9, 0);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)v272, 9, 0);
      swift_unknownObjectRelease_n();
    }
    v138 = v235;
  }
  ((void (*)(char *, uint64_t, uint64_t))v225)(v223, v110, v138);
  if ((swift_dynamicCast() & 1) != 0 && v256 <= 1 && !*((_QWORD *)&v255 + 1))
  {
    if (!v258[24])
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v155 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v250 = 0;
      swift_retain();
      sub_1B1F1AD70(v155, (uint64_t *)&v250, 0xD000000000000017, 0x80000001B2339300);
      swift_release();
      swift_unknownObjectRelease();
      goto LABEL_157;
    }
    v149 = v254;
    v150 = DWORD1(v254);
    v151 = DWORD2(v254);
    LODWORD(v225) = HIDWORD(v254);
    v152 = v255;
    v268 = v258[24];
    v269 = *(_OWORD *)&v258[25];
    v270 = 0;
    v271 = 0;
    swift_unknownObjectRetain();
    sub_1B1D2C700((uint64_t)&v268, 13, 0);
    swift_unknownObjectRelease();
    *(_QWORD *)(v44 + 136) = 0x100000001;
    if (v149)
    {
      v153 = 0;
      v154 = 0;
    }
    else
    {
      v154 = v150 != -1 || v151 != 0;
      v153 = (_DWORD)v225 != -1 || v152 != 0;
    }
    *(_QWORD *)&v238 = v154 + v153 + v238;
  }
  *(_QWORD *)(v44 + 392) = 0;
  *(_QWORD *)(v44 + 400) = 0;
  *(_QWORD *)(v44 + 384) = 0;
  swift_unknownObjectRelease();
  v159 = v240;
  v160 = DWORD2(v240);
  if (v240 == 0)
  {
    if ((v258[34] & 1) != 0)
    {
      if (*(_QWORD *)(v44 + 32))
      {
        v161 = *(_QWORD *)(v44 + 64);
        if ((v161 & 0x8000000000000000) == 0 && !HIDWORD(v161))
        {
          v162 = *(_QWORD *)(v44 + 120);
          if ((v162 & 0x8000000000000000) == 0 && !HIDWORD(v162))
          {
            v163 = *(_QWORD *)(v44 + 72);
            if ((v163 & 0x8000000000000000) == 0 && !HIDWORD(v163))
            {
              v164 = *(_QWORD *)(v44 + 128);
              if ((v164 & 0x8000000000000000) == 0)
              {
                v225 = *(_QWORD *)(v44 + 64);
                if (!HIDWORD(v164))
                {
                  v222 = *(char **)(v44 + 112);
                  swift_retain();
                  v165 = (void *)sub_1B1D22DA8(0, 20);
                  v167 = v166;
                  v223 = v168;
                  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
                  {
                    v222 = v167;
                    if (qword_1ED4BF430 != -1)
                      swift_once();
                    *(_QWORD *)&v260[0] = 0;
                    *((_QWORD *)&v260[0] + 1) = 0xE000000000000000;
                    swift_retain();
                    sub_1B2229430();
                    swift_bridgeObjectRelease();
                    v169 = sub_1B2228E90();
                    if (qword_1ED4BF658 != -1)
                      swift_once();
                    *(_QWORD *)&v260[0] = 0;
                    swift_retain();
                    sub_1B1F1AD70(v169, (uint64_t *)v260, 0xD00000000000004FLL, 0x80000001B23392B0);
                    swift_release();
                    swift_release();
                    swift_release();
                    *(_QWORD *)&v250 = v165;
                    v170 = v165;
                    LODWORD(v225) = 1;
LABEL_134:
                    v173 = v222;
LABEL_138:
                    v175 = v223;
                    goto LABEL_139;
                  }
                  v187 = v167;
                  v188 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v170 = v165;
                  v189 = &v187[(_QWORD)v188];
                  *(_DWORD *)v189 = v225;
                  *((_DWORD *)v189 + 1) = v162;
                  v190 = (int)v222;
                  *((_DWORD *)v189 + 2) = v163;
                  *((_DWORD *)v189 + 3) = v190;
                  *((_DWORD *)v189 + 4) = v164;
                  swift_release();
                  *(_QWORD *)&v250 = v170;
                  LODWORD(v225) = 1;
                  goto LABEL_137;
                }
              }
            }
          }
        }
      }
      else
      {
        v178 = *(_QWORD *)(v44 + 104);
        if ((v178 & 0x8000000000000000) == 0 && !HIDWORD(v178))
        {
          v179 = *(_QWORD *)(v44 + 120);
          if ((v179 & 0x8000000000000000) == 0 && !HIDWORD(v179))
          {
            v180 = *(_QWORD *)(v44 + 112);
            if ((v180 & 0x8000000000000000) == 0 && !HIDWORD(v180))
            {
              v181 = *(_QWORD *)(v44 + 128);
              if ((v181 & 0x8000000000000000) == 0)
              {
                v225 = *(_QWORD *)(v44 + 104);
                if (!HIDWORD(v181))
                {
                  swift_retain();
                  v182 = (void *)sub_1B1D22DA8(0, 16);
                  v184 = v183;
                  v223 = v185;
                  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
                  {
                    v222 = v184;
                    if (qword_1ED4BF430 != -1)
                      swift_once();
                    *(_QWORD *)&v260[0] = 0;
                    *((_QWORD *)&v260[0] + 1) = 0xE000000000000000;
                    swift_retain();
                    sub_1B2229430();
                    swift_bridgeObjectRelease();
                    v186 = sub_1B2228E90();
                    if (qword_1ED4BF658 != -1)
                      swift_once();
                    *(_QWORD *)&v260[0] = 0;
                    swift_retain();
                    sub_1B1F1AD70(v186, (uint64_t *)v260, 0xD000000000000048, 0x80000001B2339260);
                    swift_release();
                    swift_release();
                    swift_release();
                    LODWORD(v225) = 0;
                    v170 = v182;
                    *(_QWORD *)&v250 = v182;
                    goto LABEL_134;
                  }
                  v187 = v184;
                  v191 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v170 = v182;
                  v192 = &v187[(_QWORD)v191];
                  *(_DWORD *)v192 = v225;
                  *((_DWORD *)v192 + 1) = v179;
                  *((_DWORD *)v192 + 2) = v180;
                  *((_DWORD *)v192 + 3) = v181;
                  swift_release();
                  LODWORD(v225) = 0;
                  *(_QWORD *)&v250 = v170;
LABEL_137:
                  v173 = v187;
                  goto LABEL_138;
                }
              }
            }
          }
        }
      }
      sub_1B222967C();
      __break(1u);
      goto LABEL_163;
    }
  }
  else
  {
    LODWORD(v171) = v241 + DWORD2(v241) * v217;
    DWORD1(v171) = 1;
    *((_QWORD *)&v171 + 1) = 1;
    *(_OWORD *)(v44 + 224) = v171;
    *(_OWORD *)(v44 + 240) = xmmword_1B228D7A0;
    if (LOBYTE(v258[34]) == 1)
    {
      LODWORD(v225) = *(_QWORD *)(v44 + 32) != 0;
      swift_retain();
      v170 = (id)sub_1B1D22DA8(0, 12);
      v173 = v172;
      v175 = v174;
      swift_unknownObjectRetain();
      swift_release();
      *(_QWORD *)&v250 = v170;
LABEL_139:
      *((_QWORD *)&v250 + 1) = v173;
      *(_QWORD *)&v251 = v175;
      v193 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
      v194 = (void *)sub_1B2228728();
      objc_msgSend(v193, sel_pushDebugGroup_, v194);

      sub_1B1D2C00C((uint64_t)v193, (uint64_t)v237, (uint64_t)v267, v44, (uint64_t)&v250, v225);
      objc_msgSend(v193, sel_popDebugGroup);
      swift_unknownObjectRelease();
      *(_QWORD *)(v44 + 384) = v170;
      *(_QWORD *)(v44 + 392) = v173;
      *(_QWORD *)(v44 + 400) = v175;
      swift_unknownObjectRelease();
      goto LABEL_140;
    }
  }
  v176 = v217;
  *(_QWORD *)(v44 + 104) = v239 + *((_QWORD *)&v239 + 1) * v217;
  LODWORD(v177) = v159 + v160 * v176;
  DWORD1(v177) = 1;
  *(_QWORD *)(v44 + 120) = v238 + *((_QWORD *)&v238 + 1) * v176;
  *((_QWORD *)&v177 + 1) = 1;
  *(_OWORD *)(v44 + 208) = v177;
LABEL_140:
  if (!a13)
  {
    v225 = a12;
    v195 = a12 == 0;
LABEL_144:
    LODWORD(v223) = v195;
    if (qword_1ED4B7D30 != -1)
      swift_once();
    v196 = a19;
    *(_QWORD *)&v250 = qword_1ED4D09E0;
    MEMORY[0x1E0C80A78](qword_1ED4D09E0, v158);
    v197 = v233;
    v198 = v230;
    v199 = *(_QWORD **)(v233 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F22244((uint64_t)&_s21DrawCallEntityClassesVN, (uint64_t)&off_1E637A388, v199, (void (*)(uint64_t))sub_1B1D2DA40);
    swift_release();
    v201 = v250;
    v202 = v228;
    if ((a16 & 1) == 0)
    {
      v234 = v250;
      LODWORD(v222) = a19;
      if ((a17 & 1) != 0 && v227(v235, v229))
      {
        v203 = sub_1B1BA7CEC(a18);
        if (v203)
        {
          v265[0] = v203;
          v265[1] = v204;
          v265[2] = v205;
          v265[3] = 0;
          v266 = 0;
          swift_unknownObjectRetain();
          sub_1B1D2C700((uint64_t)v265, 9, 0);
          swift_unknownObjectRelease();
        }
        sub_1B1A18378(v224, (uint64_t)v260, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
        v206 = v232;
        if (*(_QWORD *)&v260[0])
        {
          v252 = v260[2];
          v253 = v260[3];
          v254 = v260[4];
          v255 = v260[5];
          v250 = v260[0];
          v251 = v260[1];
          swift_retain();
          v207 = v233;
          swift_retain();
          v208 = v234;
          swift_retain();
          v209 = v230;
          swift_retain();
          sub_1B1BEE528(v206);
          v236 = (char)v223;
          sub_1B1BEDBE8((unsigned __int16 **)&v250, v207, v208, v225 | ((unint64_t)v223 << 32), a14, a15, v202, v209, v206, (uint64_t)v226, v222 & 1);
          sub_1B1B4F21C(v206);
          swift_unknownObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          sub_1B1C1F7D0(v257);
          swift_release();
        }
        else
        {
          swift_release();
          swift_unknownObjectRelease();
          sub_1B1C1F7D0(v257);
        }
        goto LABEL_158;
      }
      v210 = a15 - a14;
      if (a15 - a14 == a18)
        v210 = v217;
      *(_QWORD *)(v202 + 120) = v210;
      *(_QWORD *)(v202 + 128) = a14;
      v198 = v230;
      v197 = v233;
      v201 = v234;
      v196 = v222;
    }
    v211 = *(_QWORD *)(*(_QWORD *)(v197 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                     + 8 * *(_QWORD *)thread_worker_index(v200)
                     + 8);
    swift_retain();
    swift_retain();
    swift_retain();
    v212 = v232;
    sub_1B1BEE528(v232);
    LOBYTE(v250) = (_BYTE)v223;
    sub_1B1F0C978(0, v201, 1, v225 | ((unint64_t)v223 << 32), 1, v211, v197, v212, v202, v198, v226, v196 & 1);
    swift_release();
    swift_release();
    sub_1B1B4F21C(v212);
    swift_release();
    swift_unknownObjectRelease();
LABEL_157:
    swift_release();
    sub_1B1C1F7D0(v257);
LABEL_158:
    swift_release();
    return swift_release();
  }
  if (a13 == 2)
  {
    v225 = 0;
    v195 = 1;
    goto LABEL_144;
  }
LABEL_163:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1D2C00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  _BYTE v37[8];
  uint64_t v38;

  if (*(_OWORD *)(a2 + 48) == 0)
  {
    v9 = 520;
    if ((a6 & 1) != 0)
      v9 = 528;
    v10 = *(_QWORD *)(a3 + v9);
    if (v10)
    {
      ObjectType = swift_getObjectType();
      v12 = *(_QWORD *)(a3 + 368) + 28;
      swift_unknownObjectRetain();
      v13 = swift_unknownObjectRetain();
      sub_1B1F40DEC(v13, v12, 4, 0);
      swift_unknownObjectRelease();
      v36[0] = vuzp1q_s32(*(int32x4_t *)(a2 + 16), *(int32x4_t *)(a2 + 32));
      type metadata accessor for indirect_draw_arguments_uniforms(0);
      sub_1B1F40E1C((uint64_t)v36, 1, ObjectType, v14, v15, v16, v17, v18);
      v19 = *(_QWORD *)(a5 + 8);
      v20 = *(_QWORD *)(a5 + 16);
      v21 = swift_unknownObjectRetain();
      sub_1B1F40DEC(v21, v19, v20, 0);
      swift_unknownObjectRelease();
      sub_1B1F40E74(v10);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_1B1D2DAC8(a3 + 536, (uint64_t)v37);
    sub_1B1D2DAC8((uint64_t)v37, (uint64_t)&v38);
    v23 = v38;
    if (v38)
    {
      v24 = swift_getObjectType();
      v25 = *(_QWORD *)(a3 + 368) + 28;
      sub_1B1B40D5C((uint64_t)v37);
      v26 = swift_unknownObjectRetain();
      sub_1B1F40DEC(v26, v25, 4, 0);
      swift_unknownObjectRelease();
      v27 = *(_OWORD *)(a4 + 240);
      *(int32x2_t *)&v36[0] = vmovn_s64(*(int64x2_t *)(a2 + 48));
      v36[1] = v27;
      type metadata accessor for indirect_draw_mesh_arguments_uniforms(0);
      sub_1B1F40E1C((uint64_t)v36, 1, v24, v28, v29, v30, v31, v32);
      v33 = *(_QWORD *)(a5 + 8);
      v34 = *(_QWORD *)(a5 + 16);
      v35 = swift_unknownObjectRetain();
      sub_1B1F40DEC(v35, v33, v34, 0);
      swift_unknownObjectRelease();
      sub_1B1F40E74(v23);
      sub_1B1B40274((uint64_t)v37);
    }
  }
}

uint64_t type metadata accessor for ParticleRibbonLengthUpdate.System()
{
  return objc_opt_self();
}

const char *sub_1B1D2C22C()
{
  return "ParticleRibbonSystem";
}

uint64_t sub_1B1D2C240()
{
  return qword_1EEF5DE30;
}

uint64_t sub_1B1D2C24C()
{
  return type metadata accessor for ParticleRibbonLengthUpdate.System();
}

void sub_1B1D2C268()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB78, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4D28);
}

uint64_t sub_1B1D2C2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  void (*v5)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v7;

  ObjectType = swift_getObjectType();
  v7 = 0xFFFFFFFFLL;
  v5 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(a2 + 8);
  v5(&v7, 0, ObjectType, a2);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v5)(v2, 0, ObjectType, a2);
}

void sub_1B1D2C31C()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB80, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398AA8);
}

uint64_t sub_1B1D2C354(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v7 = v6;
  v14 = (_QWORD *)*v7;
  v15 = sub_1B1D2CA70(a5, *v7);
  if ((v16 & 1) != 0)
  {
    sub_1B1CC60E4(a1, a2, a3, a4);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B1C67B84(0, v14[2] + 1, 1, v14);
      v14 = (_QWORD *)result;
    }
    v30 = v14[2];
    v29 = v14[3];
    if (v30 >= v29 >> 1)
    {
      result = (uint64_t)sub_1B1C67B84(v29 > 1, v30 + 1, 1, v14);
      v14 = (_QWORD *)result;
    }
    v14[2] = v30 + 1;
    v31 = &v14[5 * v30];
    v31[4] = a1;
    v31[5] = a2;
    v31[6] = a3;
    *((_BYTE *)v31 + 56) = a4;
    v31[8] = a5;
    *v7 = (uint64_t)v14;
  }
  else
  {
    v17 = v15;
    if (v14[5 * v15 + 8] == a5)
    {
      v33 = a5;
      v18 = a1;
      v19 = a2;
      v20 = a3;
      if ((a6 & 1) != 0)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)&v35 = 0;
        *((_QWORD *)&v35 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v34 = v35;
        sub_1B2228890();
        sub_1B22295EC();
        sub_1B2228890();
        *((_QWORD *)&v35 + 1) = v19;
        v36 = a3;
        v37 = a4;
        sub_1B22295EC();
        sub_1B2228890();
        *(_QWORD *)&v35 = v33;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v21 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v35 = 0;
        swift_retain();
        sub_1B1F1AD70(v21, (uint64_t *)&v35, v34, *((uint64_t *)&v34 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      v32 = v7;
      v22 = a4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = sub_1B1FFEF24(v14);
      v23 = &v14[5 * v17];
      v24 = v23[4];
      v25 = v23[5];
      v26 = v23[6];
      v27 = *((_BYTE *)v23 + 56);
      sub_1B1CC60E4(v18, v19, v20, v22);
      result = sub_1B1CC62AC(v24, v25, v26, v27);
      v23[4] = v18;
      v23[5] = v19;
      v23[6] = v20;
      *((_BYTE *)v23 + 56) = v22;
      v23[8] = v33;
      *v32 = (uint64_t)v14;
    }
    else
    {
      *(_QWORD *)&v35 = a1;
      *((_QWORD *)&v35 + 1) = a2;
      v36 = a3;
      v37 = a4;
      v38 = a5;
      sub_1B1CC60E4(a1, a2, a3, a4);
      return (uint64_t)sub_1B1C91660(v17, v17, (uint64_t)&v35);
    }
  }
  return result;
}

uint64_t sub_1B1D2C700(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  __int128 v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  __int128 v33;
  _QWORD v34[4];
  char v35;
  __int128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;

  sub_1B1D2DB70(a1, (uint64_t)v34);
  v7 = v34[0];
  v8 = v34[1];
  v10 = v34[2];
  v9 = v34[3];
  v11 = v35;
  v32 = v3;
  v12 = (_QWORD *)*v3;
  v13 = sub_1B1D2CAF4(a2, *v3);
  if ((v14 & 1) != 0)
  {
    sub_1B1D2DBAC(a1);
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1B1C67CD8(0, v12[2] + 1, 1, v12);
      v12 = (_QWORD *)result;
    }
    v30 = v12[2];
    v29 = v12[3];
    if (v30 >= v29 >> 1)
    {
      result = (uint64_t)sub_1B1C67CD8(v29 > 1, v30 + 1, 1, v12);
      v12 = (_QWORD *)result;
    }
    v12[2] = v30 + 1;
    v31 = &v12[6 * v30];
    v31[4] = v7;
    v31[5] = v8;
    v31[6] = v10;
    v31[7] = v9;
    *((_BYTE *)v31 + 64) = v11;
    v31[9] = a2;
    *v3 = (uint64_t)v12;
  }
  else
  {
    v15 = v13;
    v16 = &v12[6 * v13];
    if (v16[9] == a2)
    {
      if ((a3 & 1) != 0)
      {
        v17 = v13;
        v18 = v16 + 4;
        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)&v36 = 0;
        *((_QWORD *)&v36 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v33 = v36;
        sub_1B2228890();
        v19 = *((_BYTE *)v18 + 32);
        v20 = *((_OWORD *)v18 + 1);
        v36 = *(_OWORD *)v18;
        v37 = v20;
        v38 = v19;
        sub_1B22295EC();
        sub_1B2228890();
        sub_1B1D2DB70(a1, (uint64_t)&v36);
        sub_1B22295EC();
        sub_1B2228890();
        *(_QWORD *)&v36 = a2;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v21 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v36 = 0;
        swift_retain();
        sub_1B1F1AD70(v21, (uint64_t *)&v36, v33, *((uint64_t *)&v33 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v15 = v17;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = sub_1B1FFEF4C(v12);
      v22 = &v12[6 * v15];
      v23 = v22[4];
      v24 = v22[5];
      v22 += 4;
      v25 = v22[2];
      v26 = v22[3];
      v27 = *((_BYTE *)v22 + 32);
      sub_1B1D2DBAC(a1);
      sub_1B1D2DC08(v23, v24, v25, v26, v27);
      result = sub_1B1D2DB70(a1, (uint64_t)v22);
      v22[5] = a2;
      *v32 = (uint64_t)v12;
    }
    else
    {
      *(_QWORD *)&v36 = v7;
      *((_QWORD *)&v36 + 1) = v8;
      *(_QWORD *)&v37 = v10;
      *((_QWORD *)&v37 + 1) = v9;
      v38 = v11;
      v39 = a2;
      sub_1B1D2DBAC(a1);
      return (uint64_t)sub_1B1C917D0(v15, v15, &v36);
    }
  }
  return result;
}

uint64_t sub_1B1D2CA70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    result = 0;
    v5 = v2 - 1;
    do
    {
      while (1)
      {
        v6 = result + (v5 - result) / 2;
        v7 = *(_QWORD *)(a2 + 32 + 40 * v6 + 32);
        if (v7 >= a1)
          break;
        result = v6 + 1;
        if (v5 < v6 + 1)
          goto LABEL_7;
      }
      if (v7 <= a1)
      {
        result += (v5 - result) / 2;
        return result;
      }
      v5 = v6 - 1;
    }
    while (v6 - 1 >= result);
LABEL_7:
    if (result < v2)
      return result;
  }
  return 0;
}

uint64_t sub_1B1D2CAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    result = 0;
    v5 = v2 - 1;
    do
    {
      while (1)
      {
        v6 = result + (v5 - result) / 2;
        v7 = *(_QWORD *)(a2 + 32 + 48 * v6 + 40);
        if (v7 >= a1)
          break;
        result = v6 + 1;
        if (v5 < v6 + 1)
          goto LABEL_7;
      }
      if (v7 <= a1)
      {
        result += (v5 - result) / 2;
        return result;
      }
      v5 = v6 - 1;
    }
    while (v6 - 1 >= result);
LABEL_7:
    if (result < v2)
      return result;
  }
  return 0;
}

void sub_1B1D2CB78()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB88, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&off_1E639C6D8);
}

uint64_t sub_1B1D2CBB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  void (*v5)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v7;

  ObjectType = swift_getObjectType();
  v7 = 0xFFFFFFFFLL;
  v5 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(a2 + 8);
  v5(&v7, 0, ObjectType, a2);
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v5)(v2 + 36, 0, ObjectType, a2);
}

void sub_1B1D2CC28()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB40, (uint64_t)&type metadata for ParticleVolumetricRenderer, (uint64_t)&off_1E63B2230);
}

void sub_1B1D2CC60()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB58, (uint64_t)&type metadata for ParticleDecalRenderer, (uint64_t)&off_1E63A4758);
}

void sub_1B1D2CC98()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB90, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0A48);
}

void sub_1B1D2CCD0()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB50, (uint64_t)&type metadata for ParticleAOBoxRenderer, (uint64_t)&off_1E63A3B38);
}

uint64_t sub_1B1D2CD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t *v10;

  if (!sub_1B1E36538((uint64_t)&type metadata for MaterialRuntime))
  {
    v10 = ecs_stack_allocator_allocate(*(_QWORD *)(a1 + 32), 8, 8);
    *v10 = a3;
    sub_1B1A11C8C((uint64_t)&type metadata for MaterialRuntime, (uint64_t)&off_1E6384348, v10, 1, 1);
  }
  return sub_1B1DB743C(a5, a6);
}

uint64_t sub_1B1D2CDE0()
{
  return 10;
}

uint64_t sub_1B1D2CDE8()
{
  return 33;
}

uint64_t sub_1B1D2CDF0()
{
  return 34;
}

void sub_1B1D2CDF8()
{
  sub_1B1D2EC90(0, &qword_1EEF5DB98, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8A70);
}

uint64_t sub_1B1D2CE30()
{
  return 30;
}

uint64_t sub_1B1D2CE38()
{
  return 6;
}

uint64_t sub_1B1D2CE40()
{
  return 11;
}

uint64_t sub_1B1D2CE48()
{
  return 5;
}

uint64_t sub_1B1D2CE50()
{
  return 31;
}

uint64_t sub_1B1D2CE58()
{
  return 9;
}

uint64_t sub_1B1D2CE60()
{
  return 14;
}

uint64_t sub_1B1D2CE68()
{
  return 17;
}

uint64_t sub_1B1D2CE70()
{
  return 18;
}

uint64_t sub_1B1D2CE78()
{
  return 19;
}

uint64_t sub_1B1D2CE80()
{
  return 20;
}

uint64_t sub_1B1D2CE88()
{
  return 7;
}

void sub_1B1D2CE90()
{
  sub_1B1D2EC90(0, &qword_1EEF5DAE0, (uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CD00);
}

uint64_t sub_1B1D2CEC8()
{
  unint64_t v0;

  v0 = sub_1B2229F64();
  swift_bridgeObjectRelease();
  if (v0 >= 0x24)
    return 36;
  else
    return v0;
}

void *sub_1B1D2CF18(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v11;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  id v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[9];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = a1[7];
  v51[6] = a1[6];
  v51[7] = v7;
  v51[8] = a1[8];
  v8 = a1[3];
  v51[2] = a1[2];
  v51[3] = v8;
  v9 = a1[5];
  v51[4] = a1[4];
  v51[5] = v9;
  v10 = a1[1];
  v51[0] = *a1;
  v51[1] = v10;
  v11 = *(_QWORD **)(a2 + 16);
  if (!v11)
    return 0;
  v14 = v11[22];
  if (v14 <= 0)
  {
    v14 = v11[25];
    if (v14 < 1)
      return 0;
  }
  swift_retain();
  swift_retain();
  v15 = (void *)sub_1B1D22DA8(0, v14);
  v17 = v16;
  v19 = v18;
  swift_unknownObjectRetain();
  swift_release();
  if (v11[21])
  {
    v20 = (void *)v11[21];
  }
  else
  {
    v20 = (void *)v11[24];
    if (!v20)
    {
      v29 = a1[7];
      v48 = a1[6];
      v49 = v29;
      v50 = a1[8];
      v30 = a1[3];
      v44 = a1[2];
      v45 = v30;
      v31 = a1[5];
      v46 = a1[4];
      v47 = v31;
      v32 = a1[1];
      v42 = *a1;
      v43 = v32;
      objc_msgSend(v15, sel_storageMode);
      v33 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v34 = v15;
      v35 = &v33[v17];
      v36 = v49;
      *((_OWORD *)v35 + 6) = v48;
      *((_OWORD *)v35 + 7) = v36;
      *((_OWORD *)v35 + 8) = v50;
      v37 = v45;
      *((_OWORD *)v35 + 2) = v44;
      *((_OWORD *)v35 + 3) = v37;
      v38 = v47;
      *((_OWORD *)v35 + 4) = v46;
      *((_OWORD *)v35 + 5) = v38;
      v39 = v43;
      *(_OWORD *)v35 = v42;
      *((_OWORD *)v35 + 1) = v39;
      swift_release();
      return v15;
    }
    swift_unknownObjectRetain();
  }
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  if (objc_msgSend(v20, sel_encodedLength) != (id)v14)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v22 = sub_1B2228E90();
    *(_QWORD *)&v42 = 1;
    sub_1B1F1AAF0(v22, 0xD00000000000002ELL, 0x80000001B23393C0, (uint64_t *)&v42);
    swift_release();
  }
  sub_1B1F9C328((uint64_t)v15, v17, v19, 0);
  type metadata accessor for particle_quad_material_constants(0);
  sub_1B1F9C340((uint64_t)v51, 0, ObjectType, v23);
  swift_retain();
  v40 = sub_1B1D289D0();
  v25 = v24;
  swift_release();
  sub_1B1F9C3D8(v25, 200);
  sub_1B1F9C214(v40, 201, (unint64_t *)(a2 + 136));
  v26 = sub_1B20F26A4(*(_QWORD *)(a7 + 120), &v42);
  sub_1B1F9C214(v26, 230, (unint64_t *)(a2 + 136));
  swift_unknownObjectRelease();
  v27 = sub_1B20F26A4(*(_QWORD *)(a7 + 128), &v42);
  sub_1B1F9C214(v27, 231, (unint64_t *)(a2 + 136));
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v15;
}

void *sub_1B1D2D2B0(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  id v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[7];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = a1[5];
  v43[4] = a1[4];
  v43[5] = v6;
  v43[6] = a1[6];
  v7 = a1[1];
  v43[0] = *a1;
  v43[1] = v7;
  v8 = a1[3];
  v43[2] = a1[2];
  v43[3] = v8;
  v9 = *(_QWORD **)(a2 + 16);
  if (!v9)
    return 0;
  v12 = v9[22];
  if (v12 <= 0)
  {
    v12 = v9[25];
    if (v12 < 1)
      return 0;
  }
  swift_retain();
  swift_retain();
  v13 = (void *)sub_1B1D22DA8(0, v12);
  v15 = v14;
  v35 = v16;
  swift_unknownObjectRetain();
  swift_release();
  if (v9[21])
  {
    v17 = (void *)v9[21];
  }
  else
  {
    v17 = (void *)v9[24];
    if (!v17)
    {
      v25 = a1[5];
      v40 = a1[4];
      v41 = v25;
      v42 = a1[6];
      v26 = a1[1];
      v36 = *a1;
      v37 = v26;
      v27 = a1[3];
      v38 = a1[2];
      v39 = v27;
      objc_msgSend(v13, sel_storageMode);
      v28 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v29 = v13;
      v30 = &v28[v15];
      v31 = v41;
      *((_OWORD *)v30 + 4) = v40;
      *((_OWORD *)v30 + 5) = v31;
      *((_OWORD *)v30 + 6) = v42;
      v32 = v37;
      *(_OWORD *)v30 = v36;
      *((_OWORD *)v30 + 1) = v32;
      v33 = v39;
      *((_OWORD *)v30 + 2) = v38;
      *((_OWORD *)v30 + 3) = v33;
      swift_release();
      return v13;
    }
    swift_unknownObjectRetain();
  }
  ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  if (objc_msgSend(v17, sel_encodedLength) != (id)v12)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v19 = sub_1B2228E90();
    *(_QWORD *)&v36 = 1;
    sub_1B1F1AAF0(v19, 0xD00000000000002ELL, 0x80000001B23393C0, (uint64_t *)&v36);
    swift_release();
  }
  sub_1B1F9C328((uint64_t)v13, v15, v35, 0);
  type metadata accessor for particle_ribbon_material_constants(0);
  sub_1B1F9C340((uint64_t)v43, 0, ObjectType, v20);
  swift_retain();
  v21 = sub_1B1D2913C();
  v23 = v22;
  swift_release();
  sub_1B1F9C3D8(v23, 200);
  sub_1B1F9C214(v21, 201, (unint64_t *)(a2 + 136));
  sub_1B20CA588((uint64_t)v17, (unint64_t *)(a2 + 136), a6);
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

void sub_1B1D2D5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v29;
  int v31;

  v12 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
  v13 = sub_1B1B47F88();
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = v16 - v15;
  v29 = (_QWORD *)a1;
  if (v16 != v15)
  {
    v18 = v14;
    v19 = *(_QWORD *)(a1 + 24) + a2;
    v20 = (_OWORD *)(v13 + 32 * v15 + 16);
    v21 = (uint64_t *)(v12 + 8 * v15);
    do
    {
      *(_QWORD *)(a3 + 120) = 1;
      *(_QWORD *)(a3 + 128) = v19;
      v24 = *(_OWORD *)(a4 + 16 * v19);
      HIDWORD(v24) = v31;
      if ((v18 & 1) == 0)
      {
        v25 = v24;
        HIDWORD(v25) = 1.0;
        *(v20 - 1) = v25;
        *v20 = xmmword_1B228D7B0;
      }
      v22 = *(_QWORD *)(a5 + 176);
      swift_retain();
      v23 = sub_1B1F2381C((uint64_t)&type metadata for DrawCallPool, (uint64_t)&off_1E6374C20, v22);
      swift_release();
      if (!v23)
      {
        type metadata accessor for DrawCall();
        swift_allocObject();
        v23 = sub_1B1D604AC();
      }
      sub_1B1D60088(a3);
      *v21++ = v23;
      swift_release();
      ++v19;
      v20 += 2;
      --v17;
    }
    while (v17);
  }
  sub_1B1D5EBC4(a5, a6, *(_QWORD *)(a7 + 32), 0, *(unsigned __int8 *)(a8 + 227), a9 & 1, v29);
}

void sub_1B1D2D78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float *v25;

  if (a3)
  {
    v13 = 0;
    v14 = a5 + 12;
    v15 = 1;
    while (1)
    {
      v16 = *(unsigned int *)(a4 + 8 * v13 + 4);
      if ((_DWORD)v16 == -1)
      {
        v23 = *a6;
        *(float *)(a5 + 8 * v13) = *a6;
        v24 = *a7;
        *(float *)(a5 + 8 * *a7 + 4) = COERCE_FLOAT(*(_QWORD *)(a5 + 8 * *a7)) / v23;
        if (v24 != v13)
        {
          v25 = (float *)(v14 + 8 * v24);
          do
          {
            ++v24;
            *v25 = COERCE_FLOAT(*(_QWORD *)(v25 - 1)) / v23;
            v25 += 2;
          }
          while (v13 != v24);
        }
        *a7 = v15;
        v22 = 0.0;
      }
      else
      {
        v17 = *(_DWORD *)(a4 + 8 * v13);
        if (v17 == -1)
          v17 = v13;
        v18 = *(float32x4_t *)(a1 + 16 * v17);
        v19 = *(float32x4_t *)(a1 + 16 * v13);
        v20 = *(float32x4_t *)(a1 + 16 * v16);
        if (*(_DWORD *)(a4 + 8 * v16 + 4) != -1)
          LODWORD(v16) = *(_DWORD *)(a4 + 8 * v16 + 4);
        v21 = *(float32x4_t *)(a1 + 16 * v16);
        *(float *)(a5 + 8 * v13) = *a6;
        v22 = catmull_rom_spline_arclength(v18, v19, v20, v21, 0.0, 1.0) + *a6;
      }
      *a6 = v22;
      if (v15 == a3)
        break;
      ++v15;
      ++v13;
      if (v15 == 0x100000001)
      {
        sub_1B222967C();
        __break(1u);
        return;
      }
    }
  }
}

uint64_t sub_1B1D2D908(uint64_t result)
{
  if (result >= 5u)
    return 5;
  else
    return result;
}

unint64_t sub_1B1D2D91C()
{
  unint64_t result;

  result = qword_1ED4B9818;
  if (!qword_1ED4B9818)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DE38, &type metadata for ParticleAnimationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B9818);
  }
  return result;
}

unint64_t sub_1B1D2D960()
{
  unint64_t result;

  result = qword_1ED4B9A00;
  if (!qword_1ED4B9A00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DE00, &type metadata for ParticleOrientationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B9A00);
  }
  return result;
}

uint64_t sub_1B1D2D9A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1D29914(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1D2D9C8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;

  v3 = *(unsigned int *)(v1 + 112) | ((unint64_t)*(unsigned __int8 *)(v1 + 116) << 32);
  return sub_1B1D2A484(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 104), v3, SBYTE4(v3), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128), *(_BYTE *)(v1 + 136), *(_BYTE *)(v1 + 137), *(_QWORD *)(v1 + 144), *(_BYTE *)(v1 + 152),
           *(_QWORD *)(v1 + 16),
           *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1D2DA40(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B1D61AB0(a1, *(_BYTE *)(v1 + 16), *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE **)(v1 + 40));
}

uint64_t sub_1B1D2DA60(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1D2DA94(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1B1D2DAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, &qword_1EEF5DAC8, (void (*)(uint64_t))sub_1B1D2DB1C);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B1D2DB1C()
{
  unint64_t result;

  result = qword_1EEF5DAD0;
  if (!qword_1EEF5DAD0)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5DAD0);
  }
  return result;
}

uint64_t sub_1B1D2DB70(uint64_t a1, uint64_t a2)
{
  initializeWithTake for MeshBuffer(a2, a1);
  return a2;
}

uint64_t sub_1B1D2DBAC(uint64_t a1)
{
  sub_1B1D2DBE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t sub_1B1D2DBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  unsigned int v5;
  uint64_t result;

  v5 = a5 >> 6;
  if (v5 == 2)
    return swift_bridgeObjectRetain();
  if (v5 <= 1)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t sub_1B1D2DC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  unsigned int v5;
  uint64_t result;

  v5 = a5 >> 6;
  if (v5 == 2)
    return swift_bridgeObjectRelease();
  if (v5 <= 1)
    return swift_unknownObjectRelease();
  return result;
}

unint64_t sub_1B1D2DC30()
{
  unint64_t result;

  result = qword_1ED4B9C40;
  if (!qword_1ED4B9C40)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B9C40);
  }
  return result;
}

uint64_t sub_1B1D2DC84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, &qword_1ED4B9C50, (void (*)(uint64_t))sub_1B1D2DC30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1D2DCD8(uint64_t a1)
{
  uint64_t v2;

  sub_1B1792854(0, &qword_1ED4B9C50, (void (*)(uint64_t))sub_1B1D2DC30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1D2DD24(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B1D2DD70()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1D2DD9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1D27F14(a1, *(void (**)(uint64_t *__return_ptr))(v2 + 16), *(void (**)(uint64_t *__return_ptr, uint64_t))(v2 + 32), a2);
}

uint64_t sub_1B1D2DDA8(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;

  if (result)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v5 = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_unknownObjectRetain();
  }
  return result;
}

_QWORD *sub_1B1D2DEE4(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26],
    a1[27],
    a1[28],
    a1[29],
    a1[30]);
  return a1;
}

uint64_t sub_1B1D2DF60(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t *sub_1B1D2DF84(uint64_t *a1)
{
  sub_1B1D2DFE4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t sub_1B1D2DFE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2 != 1)
  {
    sub_1B1B41238(result, a2);
    sub_1B1B41238(a6, a7);
    sub_1B1B41238(a11, a12);
    sub_1B1B41238(a16, a17);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t *sub_1B1D2E0D4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  void *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  uint64_t v54[8];
  _OWORD v55[6];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69[7];

  v2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 104);
  v66 = *(_OWORD *)(a1 + 88);
  v67 = v3;
  v68 = *(_QWORD *)(a1 + 120);
  swift_retain();
  sub_1B1B170F4(1, 2, (uint64_t)v52);
  v64[0] = v52[0];
  v64[1] = v52[1];
  v65 = v53;
  sub_1B1E8FCE4(v2, (uint64_t)v64, 0x200000000, v54);
  sub_1B1A18378((uint64_t)v54, (uint64_t)v55, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v55[0])
  {
LABEL_31:
    sub_1B19ED720((uint64_t)v52);
    return (uint64_t *)swift_release();
  }
  v58 = v55[2];
  v59 = v55[3];
  v60 = v55[4];
  v61 = v55[5];
  v56 = v55[0];
  v57 = v55[1];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = 0;
  v6 = sub_1B1FDFB30(v4, v2);
  if (v6 >= 2)
  {
    v10 = (void *)v6;
    v11 = v7;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      v13 = 0;
    }
    else
    {
      v14 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v15 = v10;
      v13 = (uint64_t)v14 + v11;
    }
    v16 = v61;
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                + 8 * *(_QWORD *)thread_worker_index(v12)
                                + 8)
                    + 32);
    ecs_stack_allocator_push_snapshot(v17);
    v39 = v17;
    v18 = ecs_stack_allocator_allocate(v17, 8 * v16, 8);
    v51 = 0;
    v50 = 0;
    swift_retain();
    swift_retain();
    swift_retain();
    v40 = v18;
    sub_1B1BEE55C((unsigned __int16 **)&v56, v16, v13, (uint64_t)v18, (float *)&v50, &v51);
    sub_1B19ED748(v54);
    if (v16 > 0)
    {
      v45 = *((_QWORD *)&v59 + 1);
      if (*((_QWORD *)&v59 + 1))
      {
        v38 = v10;
        v19 = (_QWORD *)*((_QWORD *)&v60 + 1);
        v20 = *(_QWORD *)(*((_QWORD *)&v60 + 1) + 32);
        v21 = *(unsigned __int8 *)(v60 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v62[0] = v56;
        v62[1] = v57;
        v63 = v58;
        v42 = *((_QWORD *)&v60 + 1) + 48;
        v43 = *((_QWORD *)&v58 + 1);
        v41 = (_QWORD *)(*((_QWORD *)&v60 + 1) + 64);
        swift_retain();
        swift_retain();
        swift_retain();
        v22 = 0;
        v44 = v21;
        do
        {
          v23 = (unsigned int *)(v43 + 48 * v22);
          v47 = *v23;
          v46 = v23[1];
          v48 = v23[2];
          v49 = v5;
          v24 = (uint64_t *)*((_QWORD *)v23 + 2);
          v25 = *((_QWORD *)v23 + 3);
          v27 = *((_QWORD *)v23 + 4);
          v26 = *((_QWORD *)v23 + 5);
          if (v21)
          {
            v28 = *(os_unfair_lock_s **)(v26 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v28);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v20);
          sub_1B1A18378(v42, (uint64_t)v69, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v29 = v19[4];
          v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v19[6] = ecs_stack_allocator_allocate(v29, 48 * v30, 8);
          v19[7] = v30;
          v41[1] = 0;
          v41[2] = 0;
          *v41 = 0;
          swift_release();
          sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v24, v25, v27, (uint64_t)v19);
          v31 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for ParticleRibbonLength, (uint64_t)&off_1E639D480, v24, v25, v27, (uint64_t)v19);
          if (v24)
          {
            v5 = v49;
            if (v27)
            {
              v32 = &v40[v48];
              do
              {
                v33 = *v32++;
                *v31++ = v33;
                --v27;
              }
              while (v27);
            }
          }
          else
          {
            v5 = v49;
            if ((_DWORD)v47 != (_DWORD)v46)
            {
              v34 = &v40[v48];
              v35 = v46 - v47;
              v36 = &v31[v47];
              do
              {
                v37 = *v34++;
                *v36++ = v37;
                --v35;
              }
              while (v35);
            }
          }
          sub_1B1F05D48(v19, (unsigned __int16 **)v62, (uint64_t)v69);
          sub_1B1F03804((char *)v26);
          ecs_stack_allocator_pop_snapshot(v20);
          v21 = v44;
          if ((v44 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 376));
          }
          swift_release();
          ++v22;
        }
        while (v22 != v45);
        sub_1B19ED748(v54);
        v10 = v38;
      }
    }
    ecs_stack_allocator_pop_snapshot(v39);
    sub_1B1D2E668((uint64_t)v10);
    sub_1B1D2E668((uint64_t)v10);
    sub_1B19ED748(v54);
    goto LABEL_31;
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v8 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v69[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v8, v69, 0xD000000000000017, 0x80000001B2339300);
  swift_release();
  sub_1B19ED720((uint64_t)v52);
  swift_release();
  swift_release();
  return sub_1B19ED748(v54);
}

uint64_t sub_1B1D2E668(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t sub_1B1D2E678()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D2E688()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for ParticleRibbonLengthUpdate()
{
  return &type metadata for ParticleRibbonLengthUpdate;
}

uint64_t getEnumTagSinglePayload for ParticleDefaultRendererableCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDD)
    goto LABEL_17;
  if (a2 + 35 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 35) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 35;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 35;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 35;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x24;
  v8 = v6 - 36;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleDefaultRendererableCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 35 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 35) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDC)
    return ((uint64_t (*)(void))((char *)&loc_1B1D2E784 + 4 * byte_1B228D7E9[v4]))();
  *a1 = a2 + 35;
  return ((uint64_t (*)(void))((char *)sub_1B1D2E7B8 + 4 * byte_1B228D7E4[v4]))();
}

uint64_t sub_1B1D2E7B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D2E7C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D2E7C8);
  return result;
}

uint64_t sub_1B1D2E7D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D2E7DCLL);
  *(_BYTE *)result = a2 + 35;
  return result;
}

uint64_t sub_1B1D2E7E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D2E7E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleDefaultRendererableCodingKeys()
{
  return &type metadata for ParticleDefaultRendererableCodingKeys;
}

ValueMetadata *type metadata accessor for FluidRenderer()
{
  return &type metadata for FluidRenderer;
}

uint64_t storeEnumTagSinglePayload for ParticleOrientationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B1D2E860 + 4 * byte_1B228D7F3[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B1D2E894 + 4 * byte_1B228D7EE[v4]))();
}

uint64_t sub_1B1D2E894(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D2E89C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D2E8A4);
  return result;
}

uint64_t sub_1B1D2E8B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D2E8B8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B1D2E8BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D2E8C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleOrientationMode()
{
  return &type metadata for ParticleOrientationMode;
}

uint64_t storeEnumTagSinglePayload for ParticleAnimationMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1D2E92C + 4 * byte_1B228D7FD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1D2E960 + 4 * byte_1B228D7F8[v4]))();
}

uint64_t sub_1B1D2E960(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D2E968(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D2E970);
  return result;
}

uint64_t sub_1B1D2E97C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D2E984);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1D2E988(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D2E990(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAnimationMode()
{
  return &type metadata for ParticleAnimationMode;
}

uint64_t sub_1B1D2E9AC()
{
  return sub_1B1B4DEE4(&qword_1EEF5DAF0, &qword_1EEF5DAF8, (uint64_t)&type metadata for ParticleAnimationMode);
}

unint64_t sub_1B1D2E9DC()
{
  unint64_t result;

  result = qword_1EEF5DB00;
  if (!qword_1EEF5DB00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DAD0, &type metadata for ParticleAnimationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5DB00);
  }
  return result;
}

uint64_t sub_1B1D2EA20()
{
  return sub_1B1B4DEE4(&qword_1EEF5DB08, &qword_1EEF5DB10, (uint64_t)&type metadata for ParticleOrientationMode);
}

unint64_t sub_1B1D2EA50()
{
  unint64_t result;

  result = qword_1EEF5DB18;
  if (!qword_1EEF5DB18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DB70, &type metadata for ParticleOrientationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5DB18);
  }
  return result;
}

unint64_t sub_1B1D2EA98()
{
  unint64_t result;

  result = qword_1EEF5DB20;
  if (!qword_1EEF5DB20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DB98, &type metadata for FluidRenderer);
    atomic_store(result, (unint64_t *)&qword_1EEF5DB20);
  }
  return result;
}

unint64_t sub_1B1D2EAE0()
{
  unint64_t result;

  result = qword_1EEF5DB28;
  if (!qword_1EEF5DB28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DD38, &type metadata for ParticleDefaultRendererableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DB28);
  }
  return result;
}

unint64_t sub_1B1D2EB28()
{
  unint64_t result;

  result = qword_1ED4B9D30;
  if (!qword_1ED4B9D30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DC70, &type metadata for ParticleDefaultRendererableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D30);
  }
  return result;
}

unint64_t sub_1B1D2EB70()
{
  unint64_t result;

  result = qword_1ED4B9D28;
  if (!qword_1ED4B9D28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DC98, &type metadata for ParticleDefaultRendererableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D28);
  }
  return result;
}

void sub_1B1D2EBB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5DB68)
  {
    sub_1B1D2EC0C();
    v0 = sub_1B22299C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5DB68);
  }
}

unint64_t sub_1B1D2EC0C()
{
  unint64_t result;

  result = qword_1EEF5DB70;
  if (!qword_1EEF5DB70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DECC, &type metadata for FluidRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DB70);
  }
  return result;
}

uint64_t sub_1B1D2EC50()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D2EC60()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D2EC70()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D2EC80()
{
  return swift_deallocObject();
}

void sub_1B1D2EC90(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = type metadata accessor for ParticleDefaultRenderSystem(0, a3, a4, a4);
    if (!v6)
      atomic_store(v5, a2);
  }
}

ValueMetadata *type metadata accessor for FluidRenderer.CodingKeys()
{
  return &type metadata for FluidRenderer.CodingKeys;
}

unint64_t sub_1B1D2ECEC()
{
  unint64_t result;

  result = qword_1EEF5DBA0;
  if (!qword_1EEF5DBA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DE7C, &type metadata for FluidRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DBA0);
  }
  return result;
}

unint64_t sub_1B1D2ED34()
{
  unint64_t result;

  result = qword_1EEF5DBA8;
  if (!qword_1EEF5DBA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DEA4, &type metadata for FluidRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DBA8);
  }
  return result;
}

uint64_t initializeWithCopy for Query(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Query(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for Query(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for Query()
{
  return &type metadata for Query;
}

float sub_1B1D2EEA8(int a1, float a2, float a3)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;

  if (a1 < 0)
    v4 = 0.0;
  else
    v4 = (float)a1;
  v5 = fminf(a3, 1.01);
  v6 = powf(v5, v4);
  v7 = 1.0 - v6;
  v8 = (float)((float)(v6 * 0.5) + (float)(v7 / v7)) * a2;
  v9 = logf(1.0 - (float)((float)(1.0 - v5) * v8));
  v10 = floorf(v9 / logf(v5));
  v11 = (float)(1.0 - powf(v5, v10)) / v7;
  v12 = powf(v5, v10 + 1.0);
  v13 = (float)(v8 - (float)((float)(v11 + (float)((float)(1.0 - v12) / v7)) * 0.5))
      / (float)((float)((float)(1.0 - v12) / v7) - (float)((float)(v11 + (float)((float)(1.0 - v12) / v7)) * 0.5));
  return powf(1.0 / v5, v4 - v10) * (float)(1.0 - (float)(v13 * v13));
}

uint64_t sub_1B1D2EF9C()
{
  sub_1B1D2F1D0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D2EFC4()
{
  sub_1B1D2F1D0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D2EFEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D2F094(a1, a2, a3, &qword_1EEF5DBB0, (void (*)(void))sub_1B1D2F1D0);
}

uint64_t sub_1B1D2F018()
{
  sub_1B1D2F26C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D2F040()
{
  sub_1B1D2F26C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D2F068(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D2F094(a1, a2, a3, &qword_1EEF5DBC0, (void (*)(void))sub_1B1D2F26C);
}

uint64_t sub_1B1D2F094(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  sub_1B1D2F214(0, a4, a5);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v14 - v11;
  sub_1B19FA070(a1, a1[3]);
  a5();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

double sub_1B1D2F16C()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for Anchored;
  *(_QWORD *)(v0 + 40) = &off_1E63BE2E0;
  return result;
}

ValueMetadata *type metadata accessor for Anchored()
{
  return &type metadata for Anchored;
}

ValueMetadata *type metadata accessor for ParticleAnchored()
{
  return &type metadata for ParticleAnchored;
}

unint64_t sub_1B1D2F1D0()
{
  unint64_t result;

  result = qword_1EEF5DBB8;
  if (!qword_1EEF5DBB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E180, &type metadata for Anchored.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DBB8);
  }
  return result;
}

void sub_1B1D2F214(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = sub_1B22299C4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1B1D2F26C()
{
  unint64_t result;

  result = qword_1EEF5DBC8;
  if (!qword_1EEF5DBC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E130, &type metadata for ParticleAnchored.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DBC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleAnchored.CodingKeys()
{
  return &type metadata for ParticleAnchored.CodingKeys;
}

ValueMetadata *type metadata accessor for Anchored.CodingKeys()
{
  return &type metadata for Anchored.CodingKeys;
}

unint64_t sub_1B1D2F2D4()
{
  unint64_t result;

  result = qword_1EEF5DBD0;
  if (!qword_1EEF5DBD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E0E0, &type metadata for ParticleAnchored.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DBD0);
  }
  return result;
}

unint64_t sub_1B1D2F31C()
{
  unint64_t result;

  result = qword_1EEF5DBD8;
  if (!qword_1EEF5DBD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E108, &type metadata for ParticleAnchored.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DBD8);
  }
  return result;
}

unint64_t sub_1B1D2F364()
{
  unint64_t result;

  result = qword_1EEF5DBE0;
  if (!qword_1EEF5DBE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E090, &type metadata for Anchored.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DBE0);
  }
  return result;
}

unint64_t sub_1B1D2F3AC()
{
  unint64_t result;

  result = qword_1EEF5DBE8;
  if (!qword_1EEF5DBE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E0B8, &type metadata for Anchored.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DBE8);
  }
  return result;
}

__objc2_class *sub_1B1D2F3F0@<X0>(__objc2_class *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  if (*(_QWORD *)(v3 + 24)
    && (v6 = (uint64_t)result,
        result = (__objc2_class *)object_getClass(*(id *)(v3 + 24)),
        result == _TtC3VFX16CustomParameters))
  {
    sub_1B1F7AB8C(v6, a2, (uint64_t)&v7);
    if (v8)
    {
      return (__objc2_class *)sub_1B1A0DDAC(&v7, (_OWORD *)a3);
    }
    else
    {
      *(_QWORD *)(a3 + 24) = MEMORY[0x1E0DEB418];
      *(_QWORD *)a3 = 0;
      return (__objc2_class *)sub_1B1B1F3E4((uint64_t)&v7, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    }
  }
  else
  {
    *(_QWORD *)(a3 + 24) = MEMORY[0x1E0DEB418];
    *(_QWORD *)a3 = 0;
  }
  return result;
}

uint64_t sub_1B1D2F4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;

  v6 = *(void **)(v3 + 24);
  if (v6 && object_getClass(v6) == (Class)_TtC3VFX16CustomParameters)
  {
    swift_unknownObjectRetain();
    sub_1B1F7ACC0(a2, a3, a1);
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
}

uint64_t sub_1B1D2F534(uint64_t a1, char a2)
{
  return a2 & 1 | (a1 > 2020);
}

uint64_t sub_1B1D2F548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  if (qword_1EEF56F08 != -1)
    swift_once();
  v3 = qword_1EEFD4FA0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = sub_1B1C6A62C(v1, v2, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1AB293C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B19F4BEC((unint64_t)v4);
  return v3;
}

uint64_t sub_1B1D2F600(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;

  v9 = *(_QWORD *)(v4 + 88);
  v10 = MEMORY[0x1B5E20388]();
  if (*(_QWORD *)(v9 + 16) && (v12 = sub_1B1DC3B00(v10, v11), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v12);
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1EEF56F08 != -1)
      swift_once();
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRetain();
    v14 = sub_1B1D33D74(v15, a1, a2, a3, a4);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1B1D2F6F0(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  uint64_t v3;
  void *v4;
  uint64_t v9;

  v4 = *(void **)(v3 + 24);
  if (!v4 || object_getClass(v4) != (Class)_TtC3VFX16CustomParameters)
    return 0;
  swift_unknownObjectRetain();
  v9 = sub_1B1F7B494(a1, a2, a3);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t *sub_1B1D2F76C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  char v69;
  uint64_t *result;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91[8];
  _OWORD v92[2];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _OWORD v102[2];
  uint64_t v103;
  _BYTE v104[40];
  uint64_t v105;
  int v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v111 = qword_1ED4D09F8;
  v112 = 0;
  v113 = 2;
  v114 = 0;
  v115 = 2;
  v116 = 0;
  swift_retain();
  sub_1B1E40CEC(2, (uint64_t)&v85);
  swift_release();
  v105 = v85;
  v106 = v86;
  v107 = v87;
  v108 = v88 | 1;
  v109 = v89;
  v110 = v90;
  sub_1B1E8FCE4(a1, (uint64_t)&v105, 0x200000000, v91);
  sub_1B1A18378((uint64_t)v91, (uint64_t)v92, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v92[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)&v85);
  v99 = v92[0];
  v100 = v92[1];
  v101 = v93;
  if (v98 <= 0)
  {
    sub_1B19ED720((uint64_t)&v85);
    return sub_1B19ED748(v91);
  }
  v75 = v95;
  if (!v95)
  {
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_74:
    sub_1B19ED720((uint64_t)&v85);
    sub_1B19ED748(v91);
    return sub_1B19ED748(v91);
  }
  v74 = v94;
  v2 = v97[4];
  v78 = *(_BYTE *)(v96 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v82 = v97;
  v71 = v97 + 8;
  v72 = (uint64_t)(v97 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v3 = 0;
  v4 = 0;
  v73 = v2;
  while (1)
  {
    v5 = (unsigned int *)(v74 + 48 * v3);
    v6 = *v5;
    v79 = v5[1];
    v8 = (uint64_t *)*((_QWORD *)v5 + 2);
    v7 = *((_QWORD *)v5 + 3);
    v9 = *((_QWORD *)v5 + 4);
    v10 = *((_QWORD *)v5 + 5);
    v76 = v4;
    v77 = v3;
    if ((v78 & 1) != 0)
    {
      v11 = *(os_unfair_lock_s **)(v10 + 376);
      swift_retain();
      os_unfair_lock_lock(v11);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v2);
    sub_1B1A18378(v72, (uint64_t)v104, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v12 = v82[4];
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v82[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
    v82[7] = v13;
    v71[1] = 0;
    v71[2] = 0;
    *v71 = 0;
    swift_release();
    v14 = sub_1B1A12038((uint64_t)&type metadata for MaterialRuntime, (uint64_t)&off_1E6384348, v8, v7, v9, (uint64_t)v82);
    v81 = v14;
    if (v8)
    {
      if (v9)
      {
        v15 = 0;
        while (1)
        {
          v16 = v8[v15];
          v17 = *(_QWORD *)(v10 + 192);
          swift_retain();
          if (v17)
          {
            v18 = *(_QWORD *)(v10 + 208);
            v19 = 8 * (v16 >> 6);
            *(_QWORD *)(v17 + v19) |= 1 << v16;
            *(_QWORD *)(v18 + v19) &= ~(1 << v16);
          }
          if (*(_BYTE *)(*(_QWORD *)(v10 + 40) + 213) == 1)
          {
            v20 = *(_QWORD *)(v10 + 48);
            v21 = *(_QWORD *)(v20 + 16);
            if (v21)
            {
              v22 = (uint64_t *)(v20 + 56);
              while ((ValueMetadata *)*(v22 - 3) != &type metadata for PropagateDirtiness)
              {
                v22 += 5;
                if (!--v21)
                  goto LABEL_23;
              }
              v23 = *v22;
            }
            else
            {
LABEL_23:
              v23 = 0;
            }
            v24 = *(_QWORD *)(v10 + 128);
            v25 = *(_BYTE *)(v10 + 184);
            v26 = swift_retain();
            if ((v25 & 1) != 0)
              goto LABEL_76;
            v27 = v24 + v23;
            v28 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v16);
            v29 = (unsigned int *)(v27 + 8 * v16);
            v30 = *(unsigned int *)(*(_QWORD *)(v26 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v28 + 8);
            swift_release();
            v32 = *v29;
            v31 = v29[1];
            if ((_DWORD)v32 == -1 && (_DWORD)v31 == 0)
            {
              swift_release();
              v14 = v81;
            }
            else
            {
              v80 = v28;
              v34 = v82[11];
              sub_1B222A06C();
              sub_1B222A09C();
              sub_1B222A09C();
              v35 = sub_1B222A0C0();
              v36 = -1 << *(_BYTE *)(v34 + 32);
              v37 = v35 & ~v36;
              if (((*(_QWORD *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
              {
                v38 = ~v36;
                while (1)
                {
                  v39 = *(_QWORD *)(v34 + 48) + 16 * v37;
                  v41 = *(_DWORD *)(v39 + 8);
                  v40 = *(_DWORD *)(v39 + 12);
                  if (v41 == (_DWORD)v32 && v40 == (_DWORD)v31)
                    break;
                  v37 = (v37 + 1) & v38;
                  if (((*(_QWORD *)(v34 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
                    goto LABEL_37;
                }
                swift_release();
              }
              else
              {
LABEL_37:
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v83 = v82[11];
                v82[11] = 0x8000000000000000;
                sub_1B1B8F344(v80 | (unint64_t)(v30 << 32), v32 | (v31 << 32), v37, isUniquelyReferenced_nonNull_native);
                v82[11] = v83;
                swift_release();
                swift_bridgeObjectRelease();
              }
              v14 = v81;
            }
          }
          else
          {
            swift_release();
          }
          *(_QWORD *)(v14 + 248 * v15++ + 232) = 0;
          if (v15 == v9)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
    if ((_DWORD)v6 != (_DWORD)v79)
      break;
LABEL_42:
    v102[0] = v99;
    v102[1] = v100;
    v103 = v101;
    v4 = v76;
    sub_1B1F05D48(v82, (unsigned __int16 **)v102, (uint64_t)v104);
    sub_1B1F03804((char *)v10);
    v2 = v73;
    ecs_stack_allocator_pop_snapshot(v73);
    if ((v78 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
    }
    swift_release();
    v3 = v77 + 1;
    if (v77 + 1 == v75)
      goto LABEL_74;
  }
  while (1)
  {
    v44 = *(_QWORD *)(v10 + 192);
    swift_retain();
    if (v44)
    {
      v45 = *(_QWORD *)(v10 + 208);
      v46 = 8 * (v6 >> 6);
      *(_QWORD *)(v44 + v46) |= 1 << v6;
      *(_QWORD *)(v45 + v46) &= ~(1 << v6);
    }
    if (*(_BYTE *)(*(_QWORD *)(v10 + 40) + 213) != 1)
      goto LABEL_44;
    v47 = *(_QWORD *)(v10 + 48);
    v48 = *(_QWORD *)(v47 + 16);
    if (v48)
    {
      v49 = (uint64_t *)(v47 + 56);
      while ((ValueMetadata *)*(v49 - 3) != &type metadata for PropagateDirtiness)
      {
        v49 += 5;
        if (!--v48)
          goto LABEL_53;
      }
      v50 = *v49;
    }
    else
    {
LABEL_53:
      v50 = 0;
    }
    v51 = *(_QWORD *)(v10 + 128);
    v52 = *(_BYTE *)(v10 + 184);
    v53 = swift_retain();
    if ((v52 & 1) != 0)
      break;
    v54 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v6);
    v55 = (unsigned int *)(v51 + v50 + 8 * v6);
    v56 = *(unsigned int *)(*(_QWORD *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v54 + 8);
    swift_release();
    v58 = *v55;
    v57 = v55[1];
    if ((_DWORD)v58 == -1 && (_DWORD)v57 == 0)
    {
LABEL_44:
      swift_release();
    }
    else
    {
      v60 = v82[11];
      sub_1B222A06C();
      sub_1B222A09C();
      sub_1B222A09C();
      v61 = sub_1B222A0C0();
      v62 = -1 << *(_BYTE *)(v60 + 32);
      v63 = v61 & ~v62;
      if (((*(_QWORD *)(v60 + 56 + ((v63 >> 3) & 0xFFFFFFFFFFFFF8)) >> v63) & 1) != 0)
      {
        v64 = ~v62;
        while (1)
        {
          v65 = *(_QWORD *)(v60 + 48) + 16 * v63;
          v67 = *(_DWORD *)(v65 + 8);
          v66 = *(_DWORD *)(v65 + 12);
          if (v67 == (_DWORD)v58 && v66 == (_DWORD)v57)
            break;
          v63 = (v63 + 1) & v64;
          if (((*(_QWORD *)(v60 + 56 + ((v63 >> 3) & 0xFFFFFFFFFFFFF8)) >> v63) & 1) == 0)
            goto LABEL_67;
        }
        swift_release();
      }
      else
      {
LABEL_67:
        v69 = swift_isUniquelyReferenced_nonNull_native();
        v84 = v82[11];
        v82[11] = 0x8000000000000000;
        sub_1B1B8F344(v54 | (unint64_t)(v56 << 32), v58 | (v57 << 32), v63, v69);
        v82[11] = v84;
        swift_release();
        swift_bridgeObjectRelease();
      }
      v14 = v81;
    }
    *(_QWORD *)(v14 + 248 * v6++ + 232) = 0;
    if (v6 == v79)
      goto LABEL_42;
  }
LABEL_76:
  result = (uint64_t *)sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1D2FF68(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63DAE98;
}

uint64_t sub_1B1D2FF78()
{
  sub_1B1D35464();
  return sub_1B2228A70();
}

uint64_t sub_1B1D2FFD4()
{
  sub_1B1D35464();
  return sub_1B22289F8();
}

uint64_t *sub_1B1D30020@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1B1D30038(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C1A30;
}

uint64_t sub_1B1D30048()
{
  sub_1B1D33EDC();
  return sub_1B2228A58();
}

uint64_t sub_1B1D300A4()
{
  sub_1B1D33EDC();
  return sub_1B22289E0();
}

uint64_t sub_1B1D300F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D3011C + 4 * byte_1B228E1D0[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_1B1D3011C()
{
  return 0x646F4D646E656C62;
}

uint64_t sub_1B1D30138()
{
  return 0x68536D6F74737563;
}

uint64_t sub_1B1D30158()
{
  return 0x6574656D61726170;
}

uint64_t sub_1B1D30178()
{
  return 0x65646F4D6C6C7563;
}

unint64_t sub_1B1D30190()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1D301AC()
{
  return 0x6D6F436874706564;
}

uint64_t sub_1B1D301CC()
{
  return 0x6972576874706564;
}

uint64_t sub_1B1D301E8()
{
  return 0x66666F747563;
}

uint64_t sub_1B1D301FC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D30228 + 4 * byte_1B228E1D9[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_1B1D30228()
{
  return 0x646F4D646E656C62;
}

uint64_t sub_1B1D30244()
{
  return 0x68536D6F74737563;
}

uint64_t sub_1B1D30264()
{
  return 0x6574656D61726170;
}

uint64_t sub_1B1D30284()
{
  return 0x65646F4D6C6C7563;
}

unint64_t sub_1B1D3029C()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1D302B8()
{
  return 0x6D6F436874706564;
}

uint64_t sub_1B1D302D8()
{
  return 0x6972576874706564;
}

uint64_t sub_1B1D302F4()
{
  return 0x66666F747563;
}

void sub_1B1D30308(char *a1)
{
  sub_1B1F99A90(*a1);
}

uint64_t sub_1B1D30314()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1DB3AD0((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

void sub_1B1D30358(uint64_t a1)
{
  char *v1;

  sub_1B1DB3AD0(a1, *v1);
}

uint64_t sub_1B1D30360()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1DB3AD0((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

uint64_t sub_1B1D303A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D33F20();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D303CC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1D300F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1D303F4()
{
  unsigned __int8 *v0;

  return sub_1B1D301FC(*v0);
}

uint64_t sub_1B1D303FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D33F20();
  *a1 = result;
  return result;
}

void sub_1B1D30420(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1B1D3042C()
{
  sub_1B1D34FC8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D30454()
{
  sub_1B1D34FC8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D3047C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  _QWORD v13[4];
  char v14;
  int v15;

  v3 = v1;
  sub_1B1D3500C(0, &qword_1EEF5DC10, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D34FC8();
  sub_1B222A180();
  LOBYTE(v13[0]) = *(_BYTE *)v3;
  v14 = 0;
  sub_1B1A70CFC();
  sub_1B2229958();
  if (!v2)
  {
    sub_1B1AE6738((int *)(v3 + 40), (uint64_t)&v15);
    sub_1B1AE6738(&v15, (uint64_t)v13);
    v14 = 1;
    sub_1B1A72118();
    sub_1B2229958();
    LOBYTE(v13[0]) = 8;
    sub_1B2229934();
    v13[0] = *(_QWORD *)(v3 + 16);
    v14 = 2;
    sub_1B1A0895C();
    sub_1B2229958();
    v13[0] = *(_QWORD *)(v3 + 80);
    v14 = 4;
    type metadata accessor for MTLCullMode(0);
    sub_1B19E52CC(&qword_1EEF58C80, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode, (uint64_t)&protocol conformance descriptor for MTLCullMode);
    sub_1B2229958();
    if (*(_BYTE *)(v3 + 53) == 1)
    {
      LOBYTE(v13[0]) = 5;
      sub_1B222991C();
      v13[0] = *(_QWORD *)(v3 + 56);
      v14 = 6;
      type metadata accessor for MTLCompareFunction(0);
      sub_1B19E52CC(&qword_1EEF58C90, (uint64_t (*)(uint64_t))type metadata accessor for MTLCompareFunction, (uint64_t)&protocol conformance descriptor for MTLCompareFunction);
      sub_1B2229958();
      LOBYTE(v13[0]) = 7;
      sub_1B222991C();
    }
    v12 = *(_QWORD *)(v3 + 24);
    if (v12)
    {
      v13[3] = swift_getObjectType();
      v13[0] = v12;
      v14 = 3;
      sub_1B1CBB904();
      swift_unknownObjectRetain();
      sub_1B2229958();
      sub_1B1CBB948((uint64_t)v13);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

unint64_t sub_1B1D307C4()
{
  int *v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  char v13;
  int v14;

  v1 = v0;
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  v2 = sub_1B222A0C0() - 0x61C8864680B583EBLL;
  sub_1B1AE6738(v1 + 10, (uint64_t)&v14);
  sub_1B1AE6738(&v14, (uint64_t)&v12);
  if (v13)
    v3 = v12 - 0x61C8864680B583EBLL;
  else
    v3 = 0x9E3779B97F4A7C18;
  v4 = ((v2 >> 2) + (v2 << 6) + v3) ^ v2;
  if (*((float *)v1 + 12) < 0.0)
    v5 = 0x9E3779B97F4A7C15;
  else
    v5 = 0x9E3779B97F4A7C16;
  v6 = (v5 + (v4 << 6) + (v4 >> 2)) ^ v4;
  v7 = (*(unsigned __int8 *)v1 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583EBLL) ^ v6;
  if ((*((_BYTE *)v1 + 53) & 1) != 0)
    v8 = 0x9E3779B97F4A7C16;
  else
    v8 = 0x9E3779B97F4A7C15;
  result = (v8 + (v7 << 6) + (v7 >> 2)) ^ v7;
  if ((*((_BYTE *)v1 + 53) & 1) != 0)
  {
    if ((v1[16] & 1) != 0)
      v11 = 0x9E3779B97F4A7C16;
    else
      v11 = 0x9E3779B97F4A7C15;
    v10 = ((result << 6) - 0x61C8864680B583EBLL + (result >> 2) + *((_QWORD *)v1 + 7)) ^ result;
    return (v11 + (v10 << 6) + (v10 >> 2)) ^ v10;
  }
  return result;
}

__n128 sub_1B1D308F0@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  sub_1B1D34624(a1, v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B1D3094C(_QWORD *a1)
{
  return sub_1B1D3047C(a1);
}

uint64_t sub_1B1D30994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8))(v3 + 16, 4, ObjectType, a2);
  v8 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v3 + 24))
  {
    v9 = swift_getObjectType();
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2, v9, v8);
    result = swift_unknownObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(v3 + 24) = v10;
  *(_QWORD *)(v3 + 32) = v8;
  return result;
}

double sub_1B1D30A28@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v2 = sub_1B20C3C0C(0);
  v3 = sub_1B1C6C500(MEMORY[0x1E0DEE9D8]);
  *(_BYTE *)a1 = 2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_BYTE *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 48) = -1082130432;
  *(_WORD *)(a1 + 52) = 3;
  *(_QWORD *)(a1 + 56) = 7;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 72) = xmmword_1B226D240;
  *(_QWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 96) = v5;
  return result;
}

void *sub_1B1D30AD0(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, uint64_t a5, BOOL *a6)
{
  void *result;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[8];
  char v25;
  id v26;
  unint64_t v27;
  _QWORD v28[4];
  char v29;
  char v30;
  _BYTE v31[48];

  sub_1B1B9A484(a1, (uint64_t)v24);
  if (v25 < 0)
  {
    v25 &= ~0x80u;
    v13 = v24[0];
    sub_1B1B2A894(a2 + 24, (uint64_t)v31);
    sub_1B1B2A894((uint64_t)v31, (uint64_t)v28);
    if (v29)
      v14 = (id)v28[0];
    else
      v14 = 0;
    result = (void *)sub_1B20F26A4(v13, &v26);
    if (result)
    {
      v15 = result;
      if (objc_msgSend(result, sel_textureType) == v14)
      {
        swift_unknownObjectRetain();
        v16 = (uint64_t)v15;
      }
      else
      {
        v21 = (uint64_t)v14;
        if (qword_1ED4BF430 != -1)
          swift_once();
        v26 = 0;
        v27 = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        v22 = (uint64_t)v26;
        v23 = v27;
        sub_1B2228890();
        v26 = *(id *)(a2 + 16);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v26 = objc_msgSend(v15, sel_textureType);
        type metadata accessor for MTLTextureType(0);
        sub_1B22295EC();
        sub_1B2228890();
        sub_1B1B2A894((uint64_t)v31, (uint64_t)&v26);
        sub_1B22295EC();
        sub_1B2228890();
        v17 = v22;
        v18 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v22 = 0;
        swift_retain();
        sub_1B1F1AD70(v18, &v22, v17, v23);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        if (!*(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
          return (void *)swift_unknownObjectRelease();
        swift_retain();
        v16 = sub_1B20F28F4(v21);
        swift_release();
      }
      v19 = sub_1B1FD568C((uint64_t)&type metadata for MovieFileAsset, (uint64_t)&off_1E637FDE0, v13);
      swift_unknownObjectRelease();
      *a6 = v19;
    }
    else
    {
      if (!*(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
        return result;
      swift_retain();
      v16 = sub_1B20F28F4((uint64_t)v14);
      swift_release();
    }
    v20 = *(_QWORD *)(a2 + 16);
    swift_unknownObjectRetain();
    MEMORY[0x1B5E2064C](objc_msgSend(a3, sel_setTexture_atIndex_, v16, v20));
    if (*(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
    return (void *)swift_unknownObjectRelease();
  }
  sub_1B1B2A86C((uint64_t)v24, (uint64_t)&v26);
  result = (void *)sub_1B1B2A86C((uint64_t)&v26, (uint64_t)v28);
  if (v30 != 14 || LODWORD(v28[0]) != -1)
  {
    sub_1B1AE7408(a2);
    swift_unknownObjectRetain();
    sub_1B1B2AFD8((uint64_t)&v26);
    swift_unknownObjectRelease();
    return (void *)sub_1B1BA80C0(a2);
  }
  return result;
}

uint64_t sub_1B1D30EEC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;

  v2 = v1;
  v4 = v1[2];
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = v2[7];
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v11 = v2[12];
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v14 = v2[17];
  swift_getObjectType();
  v15 = sub_1B204D6E4();
  v16 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  sub_1B1E8F784(a1, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v15, v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t *sub_1B1D3115C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BOOL4 v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t ObjectType;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  void (*v76)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _BOOL4 v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  float v90;
  int v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  void (*v118)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  char v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  uint64_t v143;
  uint64_t v144[8];
  uint64_t v145[8];
  _OWORD v146[2];
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  _QWORD v156[7];
  uint64_t v157;
  uint64_t v158;
  _OWORD v159[2];
  uint64_t v160;
  _BYTE v161[40];
  _OWORD v162[6];
  uint64_t v163;
  _OWORD v164[6];
  uint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  _OWORD v180[2];
  uint64_t v181;
  _OWORD v182[2];
  uint64_t v183;

  v2 = a1;
  result = *(uint64_t **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (result)
  {
    v4 = *(_OWORD *)(v1 + 32);
    v182[0] = *(_OWORD *)(v1 + 16);
    v182[1] = v4;
    v183 = *(_QWORD *)(v1 + 48);
    v129 = result;
    swift_retain();
    sub_1B1E8FCE4(v2, (uint64_t)v182, 0x200000000, v144);
    sub_1B1A18378((uint64_t)v144, (uint64_t)v156, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v134 = v2;
    if (v156[0])
    {
      if (v158 >= 1)
      {
        v5 = v157;
        if (v157)
        {
          v6 = v156[5];
          swift_retain();
          swift_retain();
          swift_retain();
          v7 = 48 * v5;
          v8 = (uint64_t *)(v6 + 40);
          do
          {
            v13 = *v8;
            v14 = *(os_unfair_lock_s **)(*v8 + 376);
            swift_retain();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
            v15 = *(_DWORD *)(v13 + 24);
            swift_retain();
            *(_QWORD *)&v175 = 0;
            v174 = 0u;
            v173 = 0u;
            *(_QWORD *)&v168 = 0;
            v166 = 0u;
            v167 = 0u;
            v16 = sub_1B1DA4ED8(v15, (uint64_t)&type metadata for MaterialRuntime, (uint64_t)&off_1E6384348, 0, 0, (uint64_t)&v173, (uint64_t)&v166);
            swift_release();
            sub_1B1A12E98((uint64_t)&v166);
            sub_1B1A12E98((uint64_t)&v173);
            if (sub_1B1A10B20(v16))
            {
              sub_1B1A10BB0(v16);
            }
            else
            {
              v9 = *(_QWORD *)(v13 + 232);
              v10 = *(_QWORD *)(v13 + 240);
              v11 = *(unsigned __int8 *)(v13 + 120);
              v12 = *(unsigned int *)(v13 + 28);
              LOBYTE(v173) = *(_BYTE *)(v13 + 32);
              sub_1B1FD8C68(v9, v10, v16, v11, v12 | ((unint64_t)v173 << 32), 0, 0, 0);
            }
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
            swift_release();
            v8 += 6;
            v7 -= 48;
          }
          while (v7);
          sub_1B19ED748(v144);
          v2 = v134;
        }
      }
      sub_1B19ED748(v144);
    }
    v17 = *(_OWORD *)(v128 + 72);
    v180[0] = *(_OWORD *)(v128 + 56);
    v180[1] = v17;
    v181 = *(_QWORD *)(v128 + 88);
    sub_1B1E8FCE4(v2, (uint64_t)v180, 0x200000000, v145);
    sub_1B1A18378((uint64_t)v145, (uint64_t)v146, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (!*(_QWORD *)&v146[0])
      return (uint64_t *)swift_release();
    v153 = v146[0];
    v154 = v146[1];
    v155 = v147;
    if (v152 <= 0)
    {
      swift_release();
    }
    else
    {
      v125 = v149;
      if (v149)
      {
        v124 = v148;
        v18 = v151[4];
        v19 = *(_BYTE *)(v150 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v130 = v151;
        v122 = v151 + 8;
        v123 = (uint64_t)(v151 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v20 = 0;
        v21 = 0;
        v120 = v19;
        v121 = v18;
        while (1)
        {
          v22 = (unsigned int *)(v124 + 48 * v20);
          v23 = *v22;
          v137 = v22[1];
          v25 = (uint64_t *)*((_QWORD *)v22 + 2);
          v24 = *((_QWORD *)v22 + 3);
          v27 = *((_QWORD *)v22 + 4);
          v26 = *((_QWORD *)v22 + 5);
          v126 = v21;
          v127 = v20;
          if ((v19 & 1) != 0)
          {
            v28 = *(os_unfair_lock_s **)(v26 + 376);
            swift_retain();
            os_unfair_lock_lock(v28);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 344));
          }
          else
          {
            swift_retain();
          }
          v143 = v26;
          ecs_stack_allocator_push_snapshot(v18);
          sub_1B1A18378(v123, (uint64_t)v161, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v29 = v130[4];
          v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v130[6] = ecs_stack_allocator_allocate(v29, 48 * v30, 8);
          v130[7] = v30;
          v122[1] = 0;
          v122[2] = 0;
          *v122 = 0;
          swift_release();
          v31 = sub_1B1A12038((uint64_t)&type metadata for Material, (uint64_t)&off_1E63C1AA0, v25, v24, v27, (uint64_t)v130);
          v32 = v26;
          v33 = sub_1B1A12038((uint64_t)&type metadata for MaterialRuntime, (uint64_t)&off_1E6384348, v25, v24, v27, (uint64_t)v130);
          v34 = v33;
          if (!v25)
            break;
          if (v27)
          {
            v35 = (unsigned int *)(v31 + 40);
            while (1)
            {
              v37 = *v25++;
              v36 = v37;
              swift_retain();
              if ((*(_BYTE *)(v32 + 184) & 1) != 0)
                goto LABEL_105;
              swift_release();
              v38 = *(_QWORD *)(v32 + 16);
              v39 = *(unsigned __int8 *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager_currentState);
              swift_retain();
              v40 = v39 != 4 || *(_QWORD *)(v38 + 216) > (uint64_t)*(unsigned __int8 *)(v38 + 225);
              v41 = v35 - 10;
              swift_retain();
              swift_release();
              v42 = *(_QWORD *)(v32 + 192);
              if (!v42 || (*(_QWORD *)(v42 + 8 * (v36 >> 6)) & (1 << v36)) == 0)
              {
                swift_release();
                v68 = 0;
                goto LABEL_54;
              }
              v139 = v27;
              v141 = (unsigned __int8 *)(v35 - 10);
              if (v40)
                *(_QWORD *)(*(_QWORD *)(v32 + 208) + 8 * (v36 >> 6)) |= 1 << v36;
              swift_release();
              *(_QWORD *)(v34 + 216) = *((_QWORD *)v35 + 5);
              *(_QWORD *)(v34 + 208) = *((_QWORD *)v35 + 4);
              v135 = *((unsigned __int8 *)v35 - 40);
              v138 = *(_QWORD *)(v34 + 232);
              v43 = *v35;
              v44 = *((unsigned __int8 *)v35 + 4);
              v45 = *((float *)v35 + 2);
              v46 = *((unsigned __int8 *)v35 + 13);
              v131 = *((_QWORD *)v35 + 2);
              v132 = *((unsigned __int8 *)v35 + 24);
              sub_1B222A06C();
              sub_1B222A09C();
              sub_1B222A09C();
              v47 = sub_1B222A0C0() - 0x61C8864680B583EBLL;
              v48 = v43 - 0x61C8864680B583EBLL;
              if (!v44)
                v48 = 0x9E3779B97F4A7C18;
              v49 = ((v47 >> 2) + (v47 << 6) + v48) ^ v47;
              if (v45 < 0.0)
                v50 = 0x9E3779B97F4A7C15;
              else
                v50 = 0x9E3779B97F4A7C16;
              v51 = (v50 + (v49 << 6) + (v49 >> 2)) ^ v49;
              v52 = (v135 - 0x61C8864680B583EBLL + (v51 << 6) + (v51 >> 2)) ^ v51;
              if (v46)
                v53 = 0x9E3779B97F4A7C16;
              else
                v53 = 0x9E3779B97F4A7C15;
              v54 = (v53 + (v52 << 6) + (v52 >> 2)) ^ v52;
              if (v46 == 1)
              {
                v55 = (v131 - 0x61C8864680B583EBLL + (v54 << 6) + (v54 >> 2)) ^ v54;
                if (v132)
                  v56 = 0x9E3779B97F4A7C16;
                else
                  v56 = 0x9E3779B97F4A7C15;
                v54 = (v56 + (v55 << 6) + (v55 >> 2)) ^ v55;
              }
              v27 = v139;
              v2 = v134;
              v32 = v143;
              if (v138 != v54)
                goto LABEL_50;
              v41 = v35 - 10;
              if ((*(_WORD *)(*((_QWORD *)v35 - 4) + 80) & 0x40) != 0)
              {
                if (*((_QWORD *)v35 - 2))
                {
                  v57 = *((_QWORD *)v35 - 1);
                  ObjectType = swift_getObjectType();
                  v59 = *(_OWORD *)(v35 + 10);
                  v164[4] = *(_OWORD *)(v35 + 6);
                  v164[5] = v59;
                  v165 = *((_QWORD *)v35 + 7);
                  v60 = *(_OWORD *)(v35 - 6);
                  v164[0] = *(_OWORD *)v141;
                  v164[1] = v60;
                  v61 = *(_OWORD *)(v35 + 2);
                  v164[2] = *(_OWORD *)(v35 - 2);
                  v164[3] = v61;
                  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v57 + 32))(v164, ObjectType, v57);
                  sub_1B1D34200();
                  v62 = sub_1B2228B84();
                  swift_bridgeObjectRelease();
                  if (*(_QWORD *)(v34 + 240) != v62)
                    break;
                }
              }
LABEL_52:
              v68 = 1;
LABEL_54:
              if (*(_BYTE *)(*((_QWORD *)v35 - 4) + 209) == 1
                && ((v68 & 1) != 0 || *(_BYTE *)(v34 + 225) == 1)
                && *((_QWORD *)v35 - 2))
              {
                v69 = *((_QWORD *)v35 - 1);
                v70 = swift_getObjectType();
                v72 = *((_OWORD *)v41 + 1);
                v71 = *((_OWORD *)v41 + 2);
                v162[0] = *(_OWORD *)v41;
                v162[1] = v72;
                v162[2] = v71;
                v74 = *((_OWORD *)v41 + 4);
                v73 = *((_OWORD *)v41 + 5);
                v75 = *((_OWORD *)v41 + 3);
                v163 = *((_QWORD *)v41 + 12);
                v162[4] = v74;
                v162[5] = v73;
                v162[3] = v75;
                v76 = *(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 40);
                swift_unknownObjectRetain();
                sub_1B1D34160((uint64_t)v162);
                v77 = v70;
                v32 = v143;
                v76(v162, v34, v2, v77, v69);
                swift_unknownObjectRelease();
                sub_1B1D341B0((uint64_t)v162);
              }
              v35 += 26;
              v34 += 248;
              if (!--v27)
                goto LABEL_60;
            }
            *(_QWORD *)(v34 + 240) = v62;
LABEL_50:
            v63 = *(_BYTE *)(v143 + 184);
            v64 = swift_retain();
            if ((v63 & 1) != 0)
              goto LABEL_105;
            v65 = *(unsigned int *)(*(_QWORD *)(v143 + 168) + 4 * v36);
            v66 = *(unsigned int *)(*(_QWORD *)(v64 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v65 + 8);
            swift_release();
            v67 = v65 | (v66 << 32);
            v41 = v35 - 10;
            sub_1B1D31E1C(v67, v141, v34, v129, v134, (uint64_t)v130);
            goto LABEL_52;
          }
LABEL_60:
          v159[0] = v153;
          v159[1] = v154;
          v160 = v155;
          v21 = v126;
          sub_1B1F05D48(v130, (unsigned __int16 **)v159, (uint64_t)v161);
          sub_1B1F03804((char *)v32);
          v18 = v121;
          ecs_stack_allocator_pop_snapshot(v121);
          v79 = v32;
          v19 = v120;
          if ((v120 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v79 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v79 + 376));
          }
          swift_release();
          v20 = v127 + 1;
          if (v127 + 1 == v125)
            goto LABEL_102;
        }
        v78 = v137;
        if ((_DWORD)v23 == (_DWORD)v137)
          goto LABEL_60;
        v80 = (unsigned int *)(v31 + 104 * v23 + 40);
        v81 = v33 + 248 * v23;
        while (1)
        {
          swift_retain();
          if ((*(_BYTE *)(v32 + 184) & 1) != 0)
          {
LABEL_105:
            result = (uint64_t *)sub_1B2229688();
            __break(1u);
            return result;
          }
          swift_release();
          v82 = *(_QWORD *)(v32 + 16);
          v83 = *(unsigned __int8 *)(v82 + OBJC_IVAR____TtC3VFX13EntityManager_currentState);
          swift_retain();
          v84 = v83 != 4 || *(_QWORD *)(v82 + 216) > (uint64_t)*(unsigned __int8 *)(v82 + 225);
          v85 = v80 - 10;
          swift_retain();
          swift_release();
          v86 = *(_QWORD *)(v32 + 192);
          if (!v86 || (*(_QWORD *)(v86 + 8 * (v23 >> 6)) & (1 << v23)) == 0)
          {
            swift_release();
            v110 = 0;
            goto LABEL_94;
          }
          v142 = (unsigned __int8 *)(v80 - 10);
          if (v84)
            *(_QWORD *)(*(_QWORD *)(v32 + 208) + 8 * (v23 >> 6)) |= 1 << v23;
          swift_release();
          *(_QWORD *)(v81 + 216) = *((_QWORD *)v80 + 5);
          *(_QWORD *)(v81 + 208) = *((_QWORD *)v80 + 4);
          v140 = *(_QWORD *)(v81 + 232);
          v87 = *((unsigned __int8 *)v80 - 40);
          v88 = *v80;
          v89 = *((unsigned __int8 *)v80 + 4);
          v90 = *((float *)v80 + 2);
          v91 = *((unsigned __int8 *)v80 + 13);
          v133 = *((_QWORD *)v80 + 2);
          v136 = *((unsigned __int8 *)v80 + 24);
          sub_1B222A06C();
          sub_1B222A09C();
          sub_1B222A09C();
          v92 = sub_1B222A0C0() - 0x61C8864680B583EBLL;
          v93 = v88 - 0x61C8864680B583EBLL;
          if (!v89)
            v93 = 0x9E3779B97F4A7C18;
          v94 = ((v92 >> 2) + (v92 << 6) + v93) ^ v92;
          if (v90 < 0.0)
            v95 = 0x9E3779B97F4A7C15;
          else
            v95 = 0x9E3779B97F4A7C16;
          v96 = (v95 + (v94 << 6) + (v94 >> 2)) ^ v94;
          v97 = (v87 - 0x61C8864680B583EBLL + (v96 << 6) + (v96 >> 2)) ^ v96;
          if (v91)
            v98 = 0x9E3779B97F4A7C16;
          else
            v98 = 0x9E3779B97F4A7C15;
          v99 = (v98 + (v97 << 6) + (v97 >> 2)) ^ v97;
          if (v91 == 1)
          {
            v100 = (v133 - 0x61C8864680B583EBLL + (v99 << 6) + (v99 >> 2)) ^ v99;
            if (v136)
              v101 = 0x9E3779B97F4A7C16;
            else
              v101 = 0x9E3779B97F4A7C15;
            v99 = (v101 + (v100 << 6) + (v100 >> 2)) ^ v100;
          }
          v78 = v137;
          v2 = v134;
          v32 = v143;
          if (v140 != v99)
            goto LABEL_90;
          v85 = v80 - 10;
          if ((*(_WORD *)(*((_QWORD *)v80 - 4) + 80) & 0x40) != 0)
          {
            if (*((_QWORD *)v80 - 2))
            {
              v102 = *((_QWORD *)v80 - 1);
              v103 = swift_getObjectType();
              v176 = *(_OWORD *)(v80 + 2);
              v177 = *(_OWORD *)(v80 + 6);
              v178 = *(_OWORD *)(v80 + 10);
              v179 = *((_QWORD *)v80 + 7);
              v173 = *(_OWORD *)v142;
              v174 = *(_OWORD *)(v80 - 6);
              v175 = *(_OWORD *)(v80 - 2);
              (*(void (**)(__int128 *, uint64_t, uint64_t))(v102 + 32))(&v173, v103, v102);
              sub_1B1D34200();
              v104 = sub_1B2228B84();
              swift_bridgeObjectRelease();
              if (*(_QWORD *)(v81 + 240) != v104)
                break;
            }
          }
LABEL_92:
          v110 = 1;
LABEL_94:
          if (*(_BYTE *)(*((_QWORD *)v80 - 4) + 209) == 1
            && ((v110 & 1) != 0 || *(_BYTE *)(v81 + 225) == 1)
            && *((_QWORD *)v80 - 2))
          {
            v111 = *((_QWORD *)v80 - 1);
            v112 = swift_getObjectType();
            v114 = *((_OWORD *)v85 + 1);
            v113 = *((_OWORD *)v85 + 2);
            v166 = *(_OWORD *)v85;
            v167 = v114;
            v168 = v113;
            v116 = *((_OWORD *)v85 + 4);
            v115 = *((_OWORD *)v85 + 5);
            v117 = *((_OWORD *)v85 + 3);
            v172 = *((_QWORD *)v85 + 12);
            v171 = v115;
            v169 = v117;
            v170 = v116;
            v118 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 40);
            swift_unknownObjectRetain();
            sub_1B1D34160((uint64_t)&v166);
            v119 = v112;
            v32 = v143;
            v118(&v166, v81, v2, v119, v111);
            swift_unknownObjectRelease();
            sub_1B1D341B0((uint64_t)&v166);
          }
          ++v23;
          v80 += 26;
          v81 += 248;
          if (v78 == v23)
            goto LABEL_60;
        }
        *(_QWORD *)(v81 + 240) = v104;
LABEL_90:
        v105 = *(_BYTE *)(v143 + 184);
        v106 = swift_retain();
        if ((v105 & 1) != 0)
          goto LABEL_105;
        v107 = *(unsigned int *)(*(_QWORD *)(v143 + 168) + 4 * v23);
        v108 = *(unsigned int *)(*(_QWORD *)(v106 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v107 + 8);
        swift_release();
        v109 = v107 | (v108 << 32);
        v85 = v80 - 10;
        sub_1B1D31E1C(v109, v142, v81, v129, v134, (uint64_t)v130);
        goto LABEL_92;
      }
      swift_retain();
      swift_retain();
      swift_retain();
LABEL_102:
      swift_release();
      sub_1B19ED748(v145);
    }
    return sub_1B19ED748(v145);
  }
  return result;
}

uint64_t sub_1B1D31E1C(unint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t (*v35)();
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  void *v39;
  __objc2_class *Class;
  id v41;
  unint64_t v42;
  __int16 v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  unint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __objc2_class *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t ObjectType;
  int v67;
  uint64_t v68;
  int v69;
  unsigned __int8 v70;
  int v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  uint64_t v74;
  unsigned __int8 v75;
  _QWORD *v76;
  _BOOL8 v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  unsigned int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_unfair_lock_s *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v138;
  int v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  unsigned int *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  os_unfair_lock_s *v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  int v180;
  uint64_t i;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  int v205;
  unint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  void *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t result;
  _BYTE v244[4];
  int v245;
  uint64_t v246;
  unsigned __int8 *v247;
  uint64_t v248;
  _QWORD *v249;
  _BYTE *v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  unint64_t v264;
  uint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  _OWORD v268[15];
  uint64_t v269;
  uint64_t v270[12];
  uint64_t v271[12];
  _OWORD v272[2];
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  _OWORD v282[2];
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  _OWORD v292[2];
  uint64_t v293;
  _OWORD v294[2];
  uint64_t v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  _BYTE v303[40];
  _OWORD v304[2];
  uint64_t v305;
  _BYTE v306[40];
  _OWORD v307[2];
  uint64_t v308;
  char v309[8];
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  unsigned __int8 v315;
  int v316;
  unsigned __int8 v317;
  unsigned __int8 v318;
  uint64_t v319;
  unsigned __int8 v320;
  __int128 v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324[3];

  v252 = a3;
  v265 = a4;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7818, (uint64_t (*)(uint64_t))sub_1B1D34244, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v244[-v12];
  sub_1B1D34244(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v17);
  v19 = &v244[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = *(_BYTE **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v20)
    return swift_release();
  if ((*(_BYTE *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) & 1) != 0
    || (v20[537] & 1) != 0
    || (v20[539] & 1) != 0)
  {
    v21 = 1;
  }
  else
  {
    v21 = v20[540];
  }
  LODWORD(v262) = v21;
  v22 = *a2;
  v266 = a1;
  v263 = (_QWORD *)a6;
  v250 = v20;
  if (v22)
  {
    if (v22 == 1)
    {
      type metadata accessor for RenderPipelineFactory();
      swift_allocObject();
      swift_retain();
      v23 = sub_1B20C3C0C(196);
      *(_QWORD *)(v23 + 88) = sub_1B21321C0;
      *(_QWORD *)(v23 + 96) = 0;
      swift_release();
      swift_release();
      *((_QWORD *)a2 + 1) = v23;
      v24 = *((_QWORD *)a2 + 3);
      if (v24)
      {
        v25 = *((_QWORD *)a2 + 4);
        if (object_getClass(*((id *)a2 + 3)) == (Class)_TtC3VFX16PrelitParameters)
          goto LABEL_68;
      }
      type metadata accessor for PrelitParameters();
      v35 = type metadata accessor for PrelitParameters;
      v36 = swift_allocObject();
      *(_QWORD *)&v37 = 0xFFFFFFFFLL;
      *((_QWORD *)&v37 + 1) = 0xFFFFFFFFLL;
      *(_OWORD *)(v36 + 16) = v37;
      *(_BYTE *)(v36 + 32) = 0;
      swift_unknownObjectRelease();
      v38 = (unint64_t *)&unk_1EEF5DBF8;
      v39 = &unk_1B22C0FC4;
LABEL_32:
      v25 = sub_1B19E52CC(v38, (uint64_t (*)(uint64_t))v35, (uint64_t)v39);
      *((_QWORD *)a2 + 3) = v36;
      *((_QWORD *)a2 + 4) = v25;
      Class = (__objc2_class *)object_getClass((id)v36);
      if (!v36 || Class != _TtC3VFX16CustomParameters)
      {
LABEL_66:
        v62 = sub_1B1C6C500(MEMORY[0x1E0DEE9D8]);
        v64 = v65;
        goto LABEL_67;
      }
LABEL_65:
      swift_unknownObjectRetain();
      v62 = sub_1B1F7B1A8();
      v64 = v63;
      swift_release();
LABEL_67:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *((_QWORD *)a2 + 11) = v62;
      *((_QWORD *)a2 + 12) = v64;
      v24 = v36;
      goto LABEL_68;
    }
    sub_1B1D18720(*((_QWORD *)a2 + 2), (uint64_t)v13);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) == 1)
    {
      swift_retain();
      sub_1B1D342A0((uint64_t)v13);
LABEL_61:
      v24 = *((_QWORD *)a2 + 3);
      if (!v24
        || (v25 = *((_QWORD *)a2 + 4),
            object_getClass(*((id *)a2 + 3)) != (Class)_TtC3VFX16CustomParameters))
      {
        type metadata accessor for CustomParameters();
        v36 = swift_allocObject();
        v60 = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(v36 + 16) = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(v36 + 24) = v60;
        *(_QWORD *)(v36 + 32) = v60;
        swift_unknownObjectRelease();
        v25 = sub_1B19E52CC(&qword_1EEF5DBF0, (uint64_t (*)(uint64_t))type metadata accessor for CustomParameters, (uint64_t)&unk_1B22A6808);
        *((_QWORD *)a2 + 3) = v36;
        *((_QWORD *)a2 + 4) = v25;
        v61 = (__objc2_class *)object_getClass((id)v36);
        if (!v36 || v61 != _TtC3VFX16CustomParameters)
          goto LABEL_66;
        goto LABEL_65;
      }
      goto LABEL_68;
    }
    sub_1B1D342F4((uint64_t)v13, (uint64_t)v19);
    v27 = *(_QWORD *)&v19[*(int *)(v15 + 44)];
    if (!v27)
    {
      swift_retain();
      sub_1B1D34338((uint64_t)v19);
LABEL_60:
      a1 = v266;
      goto LABEL_61;
    }
    type metadata accessor for RenderPipelineFactory();
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v28 = sub_1B20C3C0C(128);
    v29 = v28;
    v30 = *(_WORD *)(v28 + 80);
    if ((v30 & 8) == 0)
      *(_WORD *)(v28 + 80) = v30 | 8;
    if (v27 >> 62)
    {
      swift_bridgeObjectRetain();
      v31 = sub_1B22296AC();
      v247 = a2;
      if (v31)
      {
LABEL_22:
        v246 = a5;
        v32 = 0;
        v33 = v27 & 0xC000000000000001;
        while (1)
        {
          if (v33)
          {
            v34 = (void *)MEMORY[0x1B5E21018](v32, v27);
          }
          else
          {
            v34 = *(void **)(v27 + 8 * v32 + 32);
            swift_unknownObjectRetain();
          }
          if (objc_msgSend(v34, sel_functionType) == (id)1)
            break;
          swift_unknownObjectRelease();
          if (v31 == ++v32)
          {
            swift_bridgeObjectRelease();
            v267 = 0xD000000000000010;
            v264 = 0x80000001B23394A0;
            goto LABEL_38;
          }
        }
        swift_bridgeObjectRelease();
        v41 = objc_msgSend(v34, sel_name);
        v267 = sub_1B222874C();
        v264 = v42;
        swift_unknownObjectRelease();

        v43 = *(_WORD *)(v29 + 80);
        if ((v43 & 0x20) == 0)
          *(_WORD *)(v29 + 80) = v43 | 0x20;
LABEL_38:
        swift_bridgeObjectRetain();
        v44 = 0;
        while (1)
        {
          if (v33)
          {
            v45 = (void *)MEMORY[0x1B5E21018](v44, v27);
          }
          else
          {
            v45 = *(void **)(v27 + 8 * v44 + 32);
            swift_unknownObjectRetain();
          }
          if (objc_msgSend(v45, sel_functionType) == (id)2)
            break;
          swift_unknownObjectRelease();
          if (v31 == ++v44)
          {
            swift_bridgeObjectRelease_n();
            v46 = 0xD000000000000015;
            v47 = 0x80000001B23394C0;
            a5 = v246;
            goto LABEL_49;
          }
        }
        swift_bridgeObjectRelease_n();
        v48 = objc_msgSend(v45, sel_name);
        v46 = sub_1B222874C();
        v47 = v49;
        swift_unknownObjectRelease();

        v50 = *(_WORD *)(v29 + 80);
        a5 = v246;
        if ((v50 & 0x10) == 0)
          *(_WORD *)(v29 + 80) = v50 | 0x10;
LABEL_49:
        v51 = *(_QWORD *)&v19[*(int *)(v15 + 36)];
        if (!v51)
        {
          v53 = 0;
          v54 = 0;
          v55 = 0;
LABEL_59:
          sub_1B1D34338((uint64_t)v19);
          v57 = swift_allocObject();
          v58 = v264;
          *(_QWORD *)(v57 + 16) = v267;
          *(_QWORD *)(v57 + 24) = v58;
          *(_QWORD *)(v57 + 32) = 0;
          *(_QWORD *)(v57 + 40) = v53;
          v59 = MEMORY[0x1E0DEE9D8];
          *(_QWORD *)(v57 + 48) = MEMORY[0x1E0DEE9D8];
          *(_QWORD *)(v57 + 56) = v46;
          *(_QWORD *)(v57 + 64) = v47;
          *(_QWORD *)(v57 + 72) = 0;
          *(_QWORD *)(v57 + 80) = v54;
          *(_QWORD *)(v57 + 88) = v59;
          *(_OWORD *)(v57 + 96) = 0u;
          *(_OWORD *)(v57 + 112) = 0u;
          *(_OWORD *)(v57 + 128) = 0u;
          *(_OWORD *)(v57 + 144) = 0u;
          *(_OWORD *)(v57 + 160) = 0u;
          *(_QWORD *)(v57 + 176) = v55;
          *(_QWORD *)(v57 + 184) = 0;
          *(_QWORD *)(v29 + 88) = sub_1B1D34430;
          *(_QWORD *)(v29 + 96) = v57;
          swift_release();
          a2 = v247;
          swift_release();
          *((_QWORD *)a2 + 1) = v29;
          goto LABEL_60;
        }
        v261 = v46;
        v52 = *(_WORD *)(v29 + 80);
        if ((v52 & 0x20) != 0)
        {
          v53 = *(_QWORD *)(v51 + 72);
          swift_unknownObjectRetain();
          if ((v52 & 0x10) != 0)
            goto LABEL_52;
        }
        else
        {
          v53 = 0;
          if ((v52 & 0x10) != 0)
          {
LABEL_52:
            v54 = *(_QWORD *)(v51 + 72);
            swift_unknownObjectRetain();
LABEL_56:
            v56 = qword_1ED4B7848;
            swift_retain();
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_unknownObjectRetain();
            if (v56 != -1)
              swift_once();
            v55 = qword_1ED4B8CF0;
            swift_bridgeObjectRetain();
            swift_release();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            v46 = v261;
            goto LABEL_59;
          }
        }
        v54 = 0;
        goto LABEL_56;
      }
    }
    else
    {
      v31 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v247 = a2;
      if (v31)
        goto LABEL_22;
    }
    swift_bridgeObjectRelease_n();
    v267 = 0xD000000000000010;
    v46 = 0xD000000000000015;
    v47 = 0x80000001B23394C0;
    v264 = 0x80000001B23394A0;
    goto LABEL_49;
  }
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  swift_retain();
  v26 = sub_1B20C3C0C(140);
  *(_QWORD *)(v26 + 88) = sub_1B2137D90;
  *(_QWORD *)(v26 + 96) = 0;
  swift_release();
  swift_release();
  *((_QWORD *)a2 + 1) = v26;
  v24 = *((_QWORD *)a2 + 3);
  if (!v24
    || (v25 = *((_QWORD *)a2 + 4), object_getClass(*((id *)a2 + 3)) != (Class)_TtC3VFX13PBRParameters))
  {
    type metadata accessor for PBRParameters();
    v35 = type metadata accessor for PBRParameters;
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1B226E4E0;
    *(_QWORD *)(v36 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 40) = 16777473;
    *(_BYTE *)(v36 + 44) = 1;
    *(_OWORD *)(v36 + 48) = xmmword_1B2244EC0;
    *(_QWORD *)(v36 + 64) = 0;
    *(_QWORD *)(v36 + 72) = 0;
    *(_QWORD *)(v36 + 80) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 88) = 16777473;
    *(_BYTE *)(v36 + 92) = 1;
    *(_OWORD *)(v36 + 96) = xmmword_1B2244EC0;
    *(_QWORD *)(v36 + 112) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 120) = 16777473;
    *(_BYTE *)(v36 + 124) = 1;
    *(_DWORD *)(v36 + 128) = 1056964608;
    *(_OWORD *)(v36 + 144) = xmmword_1B2244EC0;
    *(_QWORD *)(v36 + 160) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 168) = 16777473;
    *(_BYTE *)(v36 + 172) = 1;
    *(_DWORD *)(v36 + 176) = 0;
    *(_OWORD *)(v36 + 192) = xmmword_1B2244EC0;
    *(_QWORD *)(v36 + 208) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 216) = 16777473;
    *(_BYTE *)(v36 + 220) = 1;
    *(_DWORD *)(v36 + 224) = 1065353216;
    *(_OWORD *)(v36 + 240) = xmmword_1B2244EC0;
    *(_QWORD *)(v36 + 256) = 0xFFFFFFFFLL;
    *(_DWORD *)(v36 + 264) = 16777473;
    *(_BYTE *)(v36 + 268) = 1;
    *(_DWORD *)(v36 + 272) = 1065353216;
    *(_OWORD *)(v36 + 288) = xmmword_1B2244EC0;
    *(_WORD *)(v36 + 304) = 0;
    swift_unknownObjectRelease();
    v38 = (unint64_t *)&qword_1EEF5DC00;
    v39 = &unk_1B22C1674;
    goto LABEL_32;
  }
LABEL_68:
  ObjectType = swift_getObjectType();
  v68 = *((_QWORD *)a2 + 1);
  v69 = *((_DWORD *)a2 + 10);
  v70 = a2[44];
  v71 = *((_DWORD *)a2 + 12);
  v72 = a2[52];
  v73 = a2[53];
  v74 = *((_QWORD *)a2 + 7);
  v75 = a2[64];
  v309[0] = *a2;
  v67 = v309[0];
  v310 = v68;
  v311 = *((_QWORD *)a2 + 2);
  v312 = v24;
  v313 = v25;
  v314 = v69;
  v315 = v70;
  v316 = v71;
  v317 = v72;
  v318 = v73;
  v319 = v74;
  v320 = v75;
  v321 = *(_OWORD *)(a2 + 72);
  v322 = *(_OWORD *)(a2 + 88);
  v76 = (_QWORD *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 32))(v309, ObjectType, v25);
  v77 = v67 == 2;
  swift_bridgeObjectRetain();
  v78 = v76;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v78 = sub_1B1C64EC0(0, v76[2] + 1, 1, v76);
  v267 = HIDWORD(a1);
  v80 = v78[2];
  v79 = v78[3];
  if (v80 >= v79 >> 1)
    v78 = sub_1B1C64EC0(v79 > 1, v80 + 1, 1, v78);
  v78[2] = v80 + 1;
  v81 = &v78[14 * v80];
  *((_OWORD *)v81 + 2) = xmmword_1B228D770;
  *((_BYTE *)v81 + 48) = 0;
  v81[8] = v77;
  *(_OWORD *)(v81 + 9) = 0u;
  *(_OWORD *)(v81 + 11) = 0u;
  *(_OWORD *)(v81 + 13) = 0u;
  v81[15] = 0;
  *((_BYTE *)v81 + 128) = 13;
  swift_bridgeObjectRelease();
  v82 = v252;
  v83 = *(_OWORD *)(v252 + 208);
  v268[12] = *(_OWORD *)(v252 + 192);
  v268[13] = v83;
  v268[14] = *(_OWORD *)(v252 + 224);
  v269 = *(_QWORD *)(v252 + 240);
  v84 = *(_OWORD *)(v252 + 144);
  v268[8] = *(_OWORD *)(v252 + 128);
  v268[9] = v84;
  v85 = *(_OWORD *)(v252 + 176);
  v268[10] = *(_OWORD *)(v252 + 160);
  v268[11] = v85;
  v86 = *(_OWORD *)(v252 + 80);
  v268[4] = *(_OWORD *)(v252 + 64);
  v268[5] = v86;
  v87 = *(_OWORD *)(v252 + 112);
  v268[6] = *(_OWORD *)(v252 + 96);
  v268[7] = v87;
  v88 = *(_OWORD *)(v252 + 16);
  v268[0] = *(_OWORD *)v252;
  v268[1] = v88;
  v89 = *(_OWORD *)(v252 + 48);
  v268[2] = *(_OWORD *)(v252 + 32);
  v268[3] = v89;
  sub_1B1BBF28C((uint64_t)v268);
  v90 = MEMORY[0x1E0DEE9D8];
  v91 = sub_1B1B955E4(MEMORY[0x1E0DEE9D8]);
  v92 = sub_1B1B956CC(v90);
  *(_QWORD *)v82 = v91;
  *(_QWORD *)(v82 + 8) = v92;
  *(_QWORD *)(v82 + 16) = 0;
  *(_QWORD *)(v82 + 24) = 0;
  *(_QWORD *)(v82 + 32) = v90;
  *(_QWORD *)(v82 + 40) = v90;
  *(_QWORD *)(v82 + 48) = v90;
  *(_QWORD *)(v82 + 56) = v90;
  *(_QWORD *)(v82 + 64) = v90;
  *(_QWORD *)(v82 + 72) = v90;
  *(_QWORD *)(v82 + 80) = v90;
  *(_QWORD *)(v82 + 88) = v90;
  *(_QWORD *)(v82 + 96) = v90;
  *(_QWORD *)(v82 + 104) = v90;
  *(_QWORD *)(v82 + 112) = v90;
  *(_QWORD *)(v82 + 120) = v90;
  *(_DWORD *)(v82 + 128) = 0;
  *(_QWORD *)(v82 + 136) = v90;
  *(_OWORD *)(v82 + 176) = 0u;
  *(_OWORD *)(v82 + 192) = 0u;
  *(_OWORD *)(v82 + 144) = 0u;
  *(_OWORD *)(v82 + 160) = 0u;
  *(_OWORD *)(v82 + 208) = xmmword_1B226D240;
  *(_DWORD *)(v82 + 224) = 0;
  *(_QWORD *)(v82 + 232) = 0;
  *(_QWORD *)(v82 + 240) = 0;
  v93 = sub_1B1FDF998(a1, a5);
  v264 = 0;
  if (v93)
    v90 = v93;
  swift_retain();
  v249 = v78;
  v94 = sub_1B20C3174((uint64_t)a2, v82, v90, (uint64_t)v78, v265, a5, (uint64_t)v263, (char)v262);
  swift_bridgeObjectRelease();
  swift_release();
  v95 = v251;
  v96 = *(_OWORD *)(v251 + 112);
  v307[0] = *(_OWORD *)(v251 + 96);
  v307[1] = v96;
  v308 = *(_QWORD *)(v251 + 128);
  v248 = OBJC_IVAR____TtC3VFX13EntityManager_queryManager;
  sub_1B1E8FCE4(a5, (uint64_t)v307, 0x200000000, v270);
  sub_1B1A18378((uint64_t)v270, (uint64_t)v282, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v282[0])
  {
LABEL_137:
    v162 = *(_OWORD *)(v95 + 152);
    v304[0] = *(_OWORD *)(v95 + 136);
    v304[1] = v162;
    v305 = *(_QWORD *)(v95 + 168);
    sub_1B1E8FCE4(a5, (uint64_t)v304, 0x200000000, v271);
    sub_1B1A18378((uint64_t)v271, (uint64_t)v272, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v272[0])
    {
      v279 = v272[0];
      v280 = v272[1];
      v281 = v273;
      if (v278 >= 1 && (v258 = v275) != 0)
      {
        v245 = v94;
        v246 = a5;
        v247 = a2;
        v257 = v274;
        v163 = v277[4];
        v164 = *(unsigned __int8 *)(v276 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v262 = v277;
        v263 = v277 + 11;
        v253 = v277 + 8;
        v254 = v277 + 6;
        swift_retain();
        swift_retain();
        swift_retain();
        v165 = 0;
        v166 = v266;
        v255 = v164;
        v256 = v163;
        do
        {
          v167 = (unsigned int *)(v257 + 48 * v165);
          v169 = *v167;
          v168 = v167[1];
          v265 = (uint64_t *)*((_QWORD *)v167 + 2);
          v170 = *((_QWORD *)v167 + 3);
          v171 = *((_QWORD *)v167 + 4);
          v172 = *((_QWORD *)v167 + 5);
          v261 = v165;
          v259 = v168;
          v260 = v170;
          if (v164)
          {
            v173 = *(os_unfair_lock_s **)(v172 + 376);
            swift_retain();
            os_unfair_lock_lock(v173);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v172 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v163);
          sub_1B1A18378((uint64_t)v254, (uint64_t)v303, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v174 = v262;
          v175 = v262[4];
          v176 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v172 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v174[6] = ecs_stack_allocator_allocate(v175, 48 * v176, 8);
          v174[7] = v176;
          v177 = v253;
          v253[1] = 0;
          v177[2] = 0;
          *v177 = 0;
          swift_release();
          v178 = v265;
          v179 = sub_1B1A12038((uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, v265, v260, v171, (uint64_t)v174);
          if (v178)
          {
            v180 = v267;
            if (v171)
            {
              for (i = 0; i != v171; ++i)
              {
                v182 = v179 + 144 * i;
                v184 = *(_DWORD *)(v182 + 28);
                v183 = *(_DWORD *)(v182 + 32);
                if (v184 == (_DWORD)v166 && v183 == v180)
                {
                  v186 = v265[i];
                  v187 = *(_QWORD *)(v172 + 192);
                  swift_retain();
                  if (v187)
                  {
                    v188 = *(_QWORD *)(v172 + 208);
                    v189 = 8 * (v186 >> 6);
                    *(_QWORD *)(v187 + v189) |= 1 << v186;
                    *(_QWORD *)(v188 + v189) &= ~(1 << v186);
                  }
                  if (*(_BYTE *)(*(_QWORD *)(v172 + 40) + 213) == 1)
                  {
                    v190 = *(_QWORD *)(v172 + 48);
                    v191 = *(_QWORD *)(v190 + 16);
                    if (v191)
                    {
                      v192 = (uint64_t *)(v190 + 56);
                      while ((ValueMetadata *)*(v192 - 3) != &type metadata for PropagateDirtiness)
                      {
                        v192 += 5;
                        if (!--v191)
                          goto LABEL_163;
                      }
                      v193 = *v192;
                    }
                    else
                    {
LABEL_163:
                      v193 = 0;
                    }
                    v194 = *(_QWORD *)(v172 + 128);
                    v195 = *(_BYTE *)(v172 + 184);
                    v196 = swift_retain();
                    if ((v195 & 1) != 0)
                      goto LABEL_218;
                    v197 = v194 + v193;
                    v198 = *(_DWORD *)(*(_QWORD *)(v172 + 168) + 4 * v186);
                    v199 = (unsigned int *)(v197 + 8 * v186);
                    v200 = *(unsigned int *)(*(_QWORD *)(v196 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)v198
                                           + 8);
                    swift_release();
                    v201 = *v199;
                    v202 = v199[1];
                    if ((_DWORD)v201 != -1 || (_DWORD)v202 != 0)
                      sub_1B1B8A6C8(&v296, v198 | (unint64_t)(v200 << 32), v201 | (v202 << 32));
                    swift_release();
                    v166 = v266;
                  }
                  else
                  {
                    swift_release();
                  }
                  v180 = v267;
                }
              }
            }
          }
          else
          {
            v204 = v259;
            v205 = v267;
            if ((_DWORD)v169 != (_DWORD)v259)
            {
              do
              {
                v207 = v179 + 144 * v169;
                v209 = *(_DWORD *)(v207 + 28);
                v208 = *(_DWORD *)(v207 + 32);
                if (v209 == (_DWORD)v166 && v208 == v205)
                {
                  v211 = *(_QWORD *)(v172 + 192);
                  swift_retain();
                  if (v211)
                  {
                    v212 = *(_QWORD *)(v172 + 208);
                    v213 = 8 * (v169 >> 6);
                    *(_QWORD *)(v211 + v213) |= 1 << v169;
                    *(_QWORD *)(v212 + v213) &= ~(1 << v169);
                  }
                  if (*(_BYTE *)(*(_QWORD *)(v172 + 40) + 213) == 1)
                  {
                    v214 = *(_QWORD *)(v172 + 48);
                    v215 = *(_QWORD *)(v214 + 16);
                    if (v215)
                    {
                      v216 = (uint64_t *)(v214 + 56);
                      while ((ValueMetadata *)*(v216 - 3) != &type metadata for PropagateDirtiness)
                      {
                        v216 += 5;
                        if (!--v215)
                          goto LABEL_189;
                      }
                      v217 = *v216;
                    }
                    else
                    {
LABEL_189:
                      v217 = 0;
                    }
                    v218 = *(_QWORD *)(v172 + 128);
                    v219 = *(_BYTE *)(v172 + 184);
                    v220 = swift_retain();
                    if ((v219 & 1) != 0)
                      goto LABEL_218;
                    v221 = v218 + v217;
                    v222 = *(_DWORD *)(*(_QWORD *)(v172 + 168) + 4 * v169);
                    v223 = (unsigned int *)(v221 + 8 * v169);
                    v224 = *(unsigned int *)(*(_QWORD *)(v220 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)v222
                                           + 8);
                    swift_release();
                    v225 = *v223;
                    v226 = v223[1];
                    if ((_DWORD)v225 != -1 || (_DWORD)v226 != 0)
                      sub_1B1B8A6C8(&v296, v222 | (unint64_t)(v224 << 32), v225 | (v226 << 32));
                    swift_release();
                    v166 = v266;
                    v205 = v267;
                  }
                  else
                  {
                    swift_release();
                  }
                }
                ++v169;
              }
              while (v169 != v204);
            }
          }
          v294[0] = v279;
          v294[1] = v280;
          v295 = v281;
          v206 = v264;
          sub_1B1F05D48(v262, (unsigned __int16 **)v294, (uint64_t)v303);
          v264 = v206;
          sub_1B1F03804((char *)v172);
          v163 = v256;
          ecs_stack_allocator_pop_snapshot(v256);
          v164 = v255;
          if ((v255 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v172 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v172 + 376));
          }
          swift_release();
          v165 = v261 + 1;
        }
        while (v261 + 1 != v258);
        sub_1B19ED748(v271);
        a5 = v246;
        a2 = v247;
        LOBYTE(v94) = v245;
      }
      else
      {
        v166 = v266;
      }
      sub_1B19ED748(v271);
      if ((v94 & 1) == 0)
        goto LABEL_203;
    }
    else
    {
      v166 = v266;
      if ((v94 & 1) == 0)
      {
LABEL_203:
        if ((v94 & 4) == 0)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return swift_release();
        }
        v228 = *((_OWORD *)a2 + 5);
        v300 = *((_OWORD *)a2 + 4);
        v301 = v228;
        v302 = *((_QWORD *)a2 + 12);
        v229 = *((_OWORD *)a2 + 1);
        v296 = *(_OWORD *)a2;
        v297 = v229;
        v230 = *((_OWORD *)a2 + 3);
        v298 = *((_OWORD *)a2 + 2);
        v299 = v230;
        v231 = (void *)*((_QWORD *)&v297 + 1);
        v232 = sub_1B1D307C4();
        v233 = v252;
        *(_QWORD *)(v252 + 232) = v232;
        sub_1B1D34200();
        v234 = sub_1B2228B84();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v233 + 240) = v234;
        if (v231 && object_getClass(v231) == (Class)_TtC3VFX16CustomParameters)
        {
          swift_unknownObjectRetain();
          v235 = swift_bridgeObjectRetain();
          v236 = sub_1B1F7B60C(v235);
          swift_bridgeObjectRelease();
          if ((v236 & 1) != 0)
          {
            v237 = a5 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
            v238 = type metadata accessor for ScriptingConfiguration();
            ++*(_QWORD *)(v237 + *(int *)(v238 + 36));
          }
          swift_unknownObjectRelease();
        }
        if (sub_1B1FD568C((uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374040, v166))
        {
          v323 = v302;
          v324[0] = *((_QWORD *)&v301 + 1);
          if (v231 && object_getClass(v231) == (Class)_TtC3VFX16CustomParameters)
          {
            swift_unknownObjectRetain();
            v239 = sub_1B1F7B1A8();
            v241 = v242;
            swift_unknownObjectRelease();
          }
          else
          {
            v239 = sub_1B1C6C500(MEMORY[0x1E0DEE9D8]);
            v241 = v240;
          }
          sub_1B1B28C6C((uint64_t)v324);
          sub_1B1B28C6C((uint64_t)&v323);
          *((_QWORD *)a2 + 11) = v239;
          *((_QWORD *)a2 + 12) = v241;
          swift_retain();
          sub_1B1E2C574(0, a5, a5, v166, (uint64_t)a2);
        }
LABEL_216:
        swift_release();
        return swift_release();
      }
    }
    swift_bridgeObjectRelease();
    sub_1B2094804(v166);
    goto LABEL_216;
  }
  v289 = v282[0];
  v290 = v282[1];
  v291 = v283;
  if (v288 < 1 || (v258 = v285) == 0)
  {
LABEL_136:
    sub_1B19ED748(v270);
    goto LABEL_137;
  }
  v245 = v94;
  v246 = a5;
  v247 = a2;
  v257 = v284;
  v97 = v287[4];
  v98 = *(unsigned __int8 *)(v286 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v262 = v287;
  v263 = v287 + 11;
  v253 = v287 + 8;
  v254 = v287 + 6;
  swift_retain();
  swift_retain();
  swift_retain();
  v99 = 0;
  v100 = v266;
  v255 = v98;
  v256 = v97;
  while (1)
  {
    v101 = (unsigned int *)(v257 + 48 * v99);
    v103 = *v101;
    v102 = v101[1];
    v265 = (uint64_t *)*((_QWORD *)v101 + 2);
    v104 = *((_QWORD *)v101 + 3);
    v105 = *((_QWORD *)v101 + 4);
    v106 = *((_QWORD *)v101 + 5);
    v261 = v99;
    v259 = v102;
    v260 = v104;
    if (v98)
    {
      v107 = *(os_unfair_lock_s **)(v106 + 376);
      swift_retain();
      os_unfair_lock_lock(v107);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v106 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v97);
    sub_1B1A18378((uint64_t)v254, (uint64_t)v306, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v108 = v262;
    v109 = v262[4];
    v110 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v106 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v108[6] = ecs_stack_allocator_allocate(v109, 48 * v110, 8);
    v108[7] = v110;
    v111 = v253;
    v253[1] = 0;
    v111[2] = 0;
    *v111 = 0;
    swift_release();
    v112 = v265;
    v113 = sub_1B1A12038((uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CDA8, v265, v260, v105, (uint64_t)v108);
    if (v112)
    {
      v114 = v267;
      if (v105)
      {
        v115 = 0;
        while (1)
        {
          v116 = v113 + 40 * v115;
          v118 = *(_DWORD *)(v116 + 8);
          v117 = *(_DWORD *)(v116 + 12);
          if (v118 == v100 && v117 == v114)
          {
            v120 = v265[v115];
            v121 = *(_QWORD *)(v106 + 192);
            swift_retain();
            if (v121)
            {
              v122 = *(_QWORD *)(v106 + 208);
              v123 = 8 * (v120 >> 6);
              *(_QWORD *)(v121 + v123) |= 1 << v120;
              *(_QWORD *)(v122 + v123) &= ~(1 << v120);
            }
            if (*(_BYTE *)(*(_QWORD *)(v106 + 40) + 213) == 1)
            {
              v124 = *(_QWORD *)(v106 + 48);
              v125 = *(_QWORD *)(v124 + 16);
              if (v125)
              {
                v126 = (uint64_t *)(v124 + 56);
                while ((ValueMetadata *)*(v126 - 3) != &type metadata for PropagateDirtiness)
                {
                  v126 += 5;
                  if (!--v125)
                    goto LABEL_100;
                }
                v127 = *v126;
              }
              else
              {
LABEL_100:
                v127 = 0;
              }
              v128 = *(_QWORD *)(v106 + 128);
              v129 = *(_BYTE *)(v106 + 184);
              v130 = swift_retain();
              if ((v129 & 1) != 0)
                goto LABEL_218;
              v131 = v128 + v127;
              v132 = *(_DWORD *)(*(_QWORD *)(v106 + 168) + 4 * v120);
              v133 = (unsigned int *)(v131 + 8 * v120);
              v134 = *(unsigned int *)(*(_QWORD *)(v130 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                     + 12 * (int)v132
                                     + 8);
              swift_release();
              v135 = *v133;
              v136 = v133[1];
              if ((_DWORD)v135 != -1 || (_DWORD)v136 != 0)
                sub_1B1B8A6C8(&v296, v132 | (unint64_t)(v134 << 32), v135 | (v136 << 32));
              swift_release();
              v100 = v266;
            }
            else
            {
              swift_release();
            }
            v114 = v267;
          }
          if (++v115 == v105)
            goto LABEL_110;
        }
      }
      goto LABEL_110;
    }
    v138 = v259;
    v139 = v267;
    if ((_DWORD)v103 != (_DWORD)v259)
      break;
LABEL_110:
    v292[0] = v289;
    v292[1] = v290;
    v293 = v291;
    v140 = v264;
    sub_1B1F05D48(v262, (unsigned __int16 **)v292, (uint64_t)v306);
    v264 = v140;
    sub_1B1F03804((char *)v106);
    v97 = v256;
    ecs_stack_allocator_pop_snapshot(v256);
    v98 = v255;
    if ((v255 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v106 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v106 + 376));
    }
    swift_release();
    v99 = v261 + 1;
    if (v261 + 1 == v258)
    {
      sub_1B19ED748(v270);
      a5 = v246;
      a2 = v247;
      v95 = v251;
      v94 = v245;
      goto LABEL_136;
    }
  }
  while (1)
  {
    v141 = v113 + 40 * v103;
    v143 = *(_DWORD *)(v141 + 8);
    v142 = *(_DWORD *)(v141 + 12);
    if (v143 != v100 || v142 != v139)
      goto LABEL_113;
    v145 = *(_QWORD *)(v106 + 192);
    swift_retain();
    if (v145)
    {
      v146 = *(_QWORD *)(v106 + 208);
      v147 = 8 * (v103 >> 6);
      *(_QWORD *)(v145 + v147) |= 1 << v103;
      *(_QWORD *)(v146 + v147) &= ~(1 << v103);
    }
    if (*(_BYTE *)(*(_QWORD *)(v106 + 40) + 213) == 1)
      break;
    swift_release();
LABEL_113:
    if (++v103 == v138)
      goto LABEL_110;
  }
  v148 = *(_QWORD *)(v106 + 48);
  v149 = *(_QWORD *)(v148 + 16);
  if (v149)
  {
    v150 = (uint64_t *)(v148 + 56);
    while ((ValueMetadata *)*(v150 - 3) != &type metadata for PropagateDirtiness)
    {
      v150 += 5;
      if (!--v149)
        goto LABEL_126;
    }
    v151 = *v150;
  }
  else
  {
LABEL_126:
    v151 = 0;
  }
  v152 = *(_QWORD *)(v106 + 128);
  v153 = *(_BYTE *)(v106 + 184);
  v154 = swift_retain();
  if ((v153 & 1) == 0)
  {
    v155 = v152 + v151;
    v156 = *(_DWORD *)(*(_QWORD *)(v106 + 168) + 4 * v103);
    v157 = (unsigned int *)(v155 + 8 * v103);
    v158 = *(unsigned int *)(*(_QWORD *)(v154 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v156 + 8);
    swift_release();
    v159 = *v157;
    v160 = v157[1];
    if ((_DWORD)v159 != -1 || (_DWORD)v160 != 0)
      sub_1B1B8A6C8(&v296, v156 | (unint64_t)(v158 << 32), v159 | (v160 << 32));
    swift_release();
    v100 = v266;
    v139 = v267;
    goto LABEL_113;
  }
LABEL_218:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D335BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[11];

  v4 = *(_OWORD *)(a1 + 144);
  v10[8] = *(_OWORD *)(a1 + 128);
  v10[9] = v4;
  v10[10] = *(_OWORD *)(a1 + 160);
  v5 = *(_OWORD *)(a1 + 80);
  v10[4] = *(_OWORD *)(a1 + 64);
  v10[5] = v5;
  v6 = *(_OWORD *)(a1 + 112);
  v10[6] = *(_OWORD *)(a1 + 96);
  v10[7] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v7;
  v8 = *(_OWORD *)(a1 + 48);
  v10[2] = *(_OWORD *)(a1 + 32);
  v10[3] = v8;
  nullsub_16(v10);
  sub_1B1D34438((uint64_t *)a1);
  return sub_1B1A18378((uint64_t)v10, a2, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
}

uint64_t sub_1B1D33640(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _UNKNOWN **v21;
  char v22;

  v4 = a3;
  v6 = HIDWORD(a3);
  v7 = *(_QWORD *)(a4 + 24);
  v8 = *(_QWORD *)(a4 + 32);
  KeyPath = swift_getKeyPath();
  v14 = v4;
  v15 = v6;
  v16 = a2;
  sub_1B1D34520(0);
  v20 = v10;
  v21 = &off_1E639B2E0;
  v17 = KeyPath;
  v18 = v7;
  v19 = v8;
  v22 = 11;
  swift_unknownObjectRetain();
  sub_1B1E2DB30((uint64_t)&v14);
  sub_1B1ADF058((uint64_t)&v14);
  v11 = swift_getKeyPath();
  v14 = v4;
  v15 = v6;
  v16 = a2;
  sub_1B1AE8F68();
  v20 = v12;
  v21 = &off_1E639B2E0;
  v17 = v11;
  LOBYTE(v18) = 1;
  v22 = 11;
  sub_1B1E2DB30((uint64_t)&v14);
  return sub_1B1ADF058((uint64_t)&v14);
}

uint64_t type metadata accessor for MaterialSystem()
{
  return objc_opt_self();
}

uint64_t destroy for Material()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Material(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v4;
  swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Material(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = v5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithCopy for WorldCounters(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Material(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  *(_BYTE *)(a1 + 53) = *(_BYTE *)(a2 + 53);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Material(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Material(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Material()
{
  return &type metadata for Material;
}

uint64_t sub_1B1D33AA4()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  __int128 v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[40];
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v50 = qword_1ED4D09F8;
  v51 = 0;
  v52 = 2;
  v53 = 0;
  v54 = 2;
  v55 = 0;
  swift_retain();
  sub_1B1E3A638(1, (uint64_t)v15);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for MaterialRuntime;
  *(_QWORD *)(inited + 40) = &off_1E6384378;
  sub_1B1B44110(v16, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v15);
  v2 = v16[1];
  *(_OWORD *)(v0 + 16) = v16[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v17;
  v44 = qword_1ED4D09F8;
  v45 = 0;
  v46 = 2;
  v47 = 0;
  v48 = 2;
  v49 = 0;
  swift_retain();
  sub_1B1B11F54(4, 2, (uint64_t)v18);
  swift_release();
  v3 = v18[1];
  *(_OWORD *)(v0 + 56) = v18[0];
  *(_OWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v0 + 88) = v19;
  v38 = qword_1ED4D09F8;
  v39 = 0;
  v40 = 2;
  v41 = 0;
  v42 = 2;
  v43 = 0;
  swift_retain();
  sub_1B1E3A830(1, (uint64_t)&v20);
  swift_release();
  v4 = v21;
  v5 = v22;
  v6 = v24;
  v7 = v25;
  v8 = v23 | 0x20;
  *(_QWORD *)(v0 + 96) = v20;
  *(_DWORD *)(v0 + 104) = v4;
  *(_BYTE *)(v0 + 108) = v5;
  *(_QWORD *)(v0 + 112) = v8;
  *(_BYTE *)(v0 + 120) = v6;
  *(_QWORD *)(v0 + 128) = v7;
  v32 = qword_1ED4D09F8;
  v33 = 0;
  v34 = 2;
  v35 = 0;
  v36 = 2;
  v37 = 0;
  swift_retain();
  sub_1B1E3AA28(1, (uint64_t)&v26);
  swift_release();
  v9 = v27;
  v10 = v28;
  v11 = v30;
  v12 = v31;
  v13 = v29 | 0x20;
  *(_QWORD *)(v0 + 136) = v26;
  *(_DWORD *)(v0 + 144) = v9;
  *(_BYTE *)(v0 + 148) = v10;
  *(_QWORD *)(v0 + 152) = v13;
  *(_BYTE *)(v0 + 160) = v11;
  *(_QWORD *)(v0 + 168) = v12;
  return v0;
}

uint64_t sub_1B1D33D28()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1D33AA4();
  return v0;
}

const char *sub_1B1D33D5C()
{
  return "MaterialSystem";
}

uint64_t sub_1B1D33D74(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;

  if (!(a1 >> 62))
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_3;
LABEL_25:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v10 = sub_1B22296AC();
  if (!v10)
    goto LABEL_25;
LABEL_3:
  v11 = 0;
  v12 = a2 >> 16;
  v13 = a3 >> 16;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v14 = MEMORY[0x1B5E21018](v11, a1);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8 * v11 + 32);
      swift_retain();
    }
    v15 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    v17 = (v16 & 0x2000000000000000) != 0 ? HIBYTE(v16) & 0xF : v15 & 0xFFFFFFFFFFFFLL;
    v18 = v15 == a4 && v16 == a5;
    v19 = v18 && v12 == 0;
    v20 = v19 && v17 == v13;
    if (v20 || (sub_1B22299F4() & 1) != 0)
      break;
    swift_release();
    if (v10 == ++v11)
      goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_1B1D33EDC()
{
  unint64_t result;

  result = qword_1ED4BA0D0;
  if (!qword_1ED4BA0D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E6B0, &type metadata for Material.Kind);
    atomic_store(result, (unint64_t *)&qword_1ED4BA0D0);
  }
  return result;
}

uint64_t sub_1B1D33F20()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

uint64_t sub_1B1D33F68(_WORD *a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL8 v10;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  result = swift_allocObject();
  v3 = (unsigned __int16)a1[54];
  v4 = (unsigned __int16)a1[58];
  v5 = (unsigned __int16)a1[62];
  v6 = (unsigned __int16)a1[66];
  v7 = (unsigned __int16)a1[70];
  v8 = (unsigned __int16)a1[74];
  v9 = (unsigned __int16)a1[78];
  v10 = a1[50] != 0;
  *(_OWORD *)(result + 16) = xmmword_1B228E6F0;
  *(_OWORD *)(result + 32) = xmmword_1B228E700;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 64) = v10;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_QWORD *)(result + 120) = 0;
  *(_BYTE *)(result + 128) = 13;
  *(_OWORD *)(result + 144) = xmmword_1B228E710;
  *(_BYTE *)(result + 160) = 0;
  *(_QWORD *)(result + 176) = v3 != 0;
  *(_QWORD *)(result + 232) = 0;
  *(_OWORD *)(result + 216) = 0u;
  *(_OWORD *)(result + 200) = 0u;
  *(_OWORD *)(result + 184) = 0u;
  *(_BYTE *)(result + 240) = 13;
  *(_OWORD *)(result + 256) = xmmword_1B228E720;
  *(_BYTE *)(result + 272) = 0;
  *(_QWORD *)(result + 288) = v4 != 0;
  *(_OWORD *)(result + 296) = 0u;
  *(_OWORD *)(result + 312) = 0u;
  *(_OWORD *)(result + 328) = 0u;
  *(_QWORD *)(result + 344) = 0;
  *(_BYTE *)(result + 352) = 13;
  *(_OWORD *)(result + 368) = xmmword_1B228E730;
  *(_BYTE *)(result + 384) = 0;
  *(_QWORD *)(result + 400) = v5 != 0;
  *(_QWORD *)(result + 456) = 0;
  *(_OWORD *)(result + 424) = 0u;
  *(_OWORD *)(result + 440) = 0u;
  *(_OWORD *)(result + 408) = 0u;
  *(_BYTE *)(result + 464) = 13;
  *(_OWORD *)(result + 480) = xmmword_1B228E740;
  *(_BYTE *)(result + 496) = 0;
  *(_QWORD *)(result + 512) = v8 != 0;
  *(_OWORD *)(result + 520) = 0u;
  *(_OWORD *)(result + 536) = 0u;
  *(_OWORD *)(result + 552) = 0u;
  *(_QWORD *)(result + 568) = 0;
  *(_BYTE *)(result + 576) = 13;
  *(_OWORD *)(result + 592) = xmmword_1B228E750;
  *(_BYTE *)(result + 608) = 0;
  *(_QWORD *)(result + 624) = v9 != 0;
  *(_OWORD *)(result + 632) = 0u;
  *(_OWORD *)(result + 648) = 0u;
  *(_OWORD *)(result + 664) = 0u;
  *(_QWORD *)(result + 680) = 0;
  *(_BYTE *)(result + 688) = 13;
  *(_OWORD *)(result + 704) = xmmword_1B228E760;
  *(_BYTE *)(result + 720) = 0;
  *(_QWORD *)(result + 736) = v6 != 0;
  *(_QWORD *)(result + 792) = 0;
  *(_OWORD *)(result + 760) = 0u;
  *(_OWORD *)(result + 776) = 0u;
  *(_OWORD *)(result + 744) = 0u;
  *(_BYTE *)(result + 800) = 13;
  *(_OWORD *)(result + 816) = xmmword_1B228E770;
  *(_BYTE *)(result + 832) = 0;
  *(_QWORD *)(result + 848) = v7 != 0;
  *(_QWORD *)(result + 904) = 0;
  *(_OWORD *)(result + 872) = 0u;
  *(_OWORD *)(result + 888) = 0u;
  *(_OWORD *)(result + 856) = 0u;
  *(_BYTE *)(result + 912) = 13;
  return result;
}

uint64_t sub_1B1D34160(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1B1D341B0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return a1;
}

unint64_t sub_1B1D34200()
{
  unint64_t result;

  result = qword_1ED4B8DB8;
  if (!qword_1ED4B8DB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286B3C, &type metadata for FunctionConstant);
    atomic_store(result, (unint64_t *)&qword_1ED4B8DB8);
  }
  return result;
}

void sub_1B1D34244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED4B88C0)
  {
    v2 = type metadata accessor for ShaderScript(255);
    v4 = type metadata accessor for ScriptRuntime(a1, v2, (uint64_t)&off_1ED4BC090, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED4B88C0);
  }
}

uint64_t sub_1B1D342A0(uint64_t a1)
{
  uint64_t v2;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7818, (uint64_t (*)(uint64_t))sub_1B1D34244, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1D342F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1D34244(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1D34338(uint64_t a1)
{
  uint64_t v2;

  sub_1B1D34244(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1D34374()
{
  _QWORD *v0;

  if (v0[3])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[8])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[13])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[18])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1D34430@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B1D335BC(v1 + 16, a1);
}

uint64_t *sub_1B1D34438(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[10];
  v5 = a1[11];
  v7 = a1[16];
  v8 = a1[15];
  sub_1B1B410E4(*a1, a1[1]);
  sub_1B1B410E4(v2, v3);
  sub_1B1B410E4(v4, v5);
  sub_1B1B410E4(v8, v7);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void sub_1B1D34520(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1ED4B9448)
  {
    sub_1B1D345A0(255, &qword_1ED4B9B58, &qword_1ED4B9B50);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for Material, v2, (uint64_t)&off_1E63C1AA0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1ED4B9448);
  }
}

void sub_1B1D345A0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1B1AEC268(255, a3);
    v4 = sub_1B2229124();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1B1D345FC(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1B1D34604()
{
  return sub_1B1D34F28();
}

uint64_t sub_1B1D34624@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  _QWORD *v15;
  float v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)@<X0>(__int16@<W0>, uint64_t@<X8>);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  float v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  float v59;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[2];
  unsigned __int8 v71;
  char v72;
  char v73;

  v61 = a2;
  sub_1B1D3500C(0, &qword_1ED4BAC80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v53 - v8;
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v62 = sub_1B20C3C0C(0);
  v73 = 1;
  v72 = 0;
  v71 = 0;
  v64 = sub_1B1C6C500(MEMORY[0x1E0DEE9D8]);
  v65 = v10;
  v11 = a1[3];
  v63 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B1D34FC8();
  sub_1B222A150();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v63);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v12 = v6;
  LOBYTE(v68) = 0;
  sub_1B1A70CB8();
  sub_1B22297B4();
  if (LOBYTE(v70[0]) == 3)
    v14 = 2;
  else
    v14 = LOBYTE(v70[0]);
  LOBYTE(v68) = 1;
  sub_1B1A720D4();
  sub_1B22297B4();
  v15 = v63;
  v60 = v14;
  if (BYTE5(v70[0]))
    v16 = 0.0;
  else
    v16 = *(float *)v70;
  v73 = BYTE5(v70[0]) | BYTE4(v70[0]) & 1;
  LOBYTE(v68) = 2;
  sub_1B1A08878();
  sub_1B22297B4();
  v17 = v5;
  v59 = v16;
  if (BYTE8(v70[0]))
    v18 = -1;
  else
    v18 = v70[0];
  if (BYTE8(v70[0]))
    v19 = 0;
  else
    v19 = DWORD1(v70[0]);
  type metadata accessor for MTLCullMode(0);
  LOBYTE(v68) = 4;
  sub_1B19E52CC(&qword_1ED4BA620, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode, (uint64_t)&protocol conformance descriptor for MTLCullMode);
  sub_1B22297B4();
  v58 = v18;
  if (BYTE8(v70[0]))
    v20 = 2;
  else
    v20 = *(_QWORD *)&v70[0];
  LOBYTE(v70[0]) = 8;
  v21 = sub_1B222979C();
  v57 = v20;
  if ((v21 & 0x100000000) != 0)
    v22 = -1.0;
  else
    v22 = *(float *)&v21;
  LOBYTE(v70[0]) = 5;
  v23 = sub_1B2229784();
  if (v23 == 2)
  {
    v72 = 0;
LABEL_25:
    v24 = 7;
    goto LABEL_26;
  }
  v72 = v23 & 1;
  if ((v23 & 1) == 0)
    goto LABEL_25;
  type metadata accessor for MTLCompareFunction(0);
  LOBYTE(v68) = 6;
  sub_1B19E52CC(&qword_1EEF58C88, (uint64_t (*)(uint64_t))type metadata accessor for MTLCompareFunction, (uint64_t)&protocol conformance descriptor for MTLCompareFunction);
  sub_1B2229814();
  v24 = *(_QWORD *)&v70[0];
  LOBYTE(v70[0]) = 7;
  v71 = sub_1B22297D8() & 1;
LABEL_26:
  v56 = v19;
  if (!v60)
  {
    swift_allocObject();
    v25 = sub_1B20C3C0C(140);
    v26 = v25;
    v27 = sub_1B2137D90;
    goto LABEL_30;
  }
  if (v60 == 1)
  {
    swift_allocObject();
    v25 = sub_1B20C3C0C(196);
    v26 = v25;
    v27 = sub_1B21321C0;
LABEL_30:
    *(_QWORD *)(v25 + 88) = v27;
    *(_QWORD *)(v25 + 96) = 0;
    swift_release();
    goto LABEL_32;
  }
  swift_allocObject();
  v26 = sub_1B20C3C0C(128);
LABEL_32:
  swift_release();
  v28 = v15[3];
  v29 = v15[4];
  sub_1B19FA070(v15, v28);
  if (!sub_1B2067B64(2021, v28, v29))
  {
    LOBYTE(v66) = 3;
    sub_1B1CBB7F4();
    sub_1B22297B4();
    v30 = v12;
    v55 = v24;
    if (!*((_QWORD *)&v69 + 1))
    {
      sub_1B1B1F3E4((uint64_t)&v68, &qword_1EEF5DC08, (uint64_t)&type metadata for AnyCoder);
      goto LABEL_34;
    }
    v70[0] = v68;
    v70[1] = v69;
    sub_1B1A02864((uint64_t)v70, (uint64_t)&v68);
    sub_1B1AEC268(0, &qword_1ED4B9B50);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v54 = v67;
      v62 = (uint64_t)v66;
      if (object_getClass(v66) == (Class)_TtC3VFX16CustomParameters && v62)
      {
        swift_unknownObjectRetain();
        v31 = sub_1B1F7B1A8();
        v33 = v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
LABEL_49:
        sub_1B1CBB948((uint64_t)v70);
        v64 = v31;
        v65 = v33;
LABEL_50:
        v30 = v12;
        v15 = v63;
        goto LABEL_51;
      }
    }
    else
    {
      v54 = 0;
      v62 = 0;
    }
    v31 = sub_1B1C6C500(MEMORY[0x1E0DEE9D8]);
    v33 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  v55 = v24;
  v30 = v12;
  if (!v60)
  {
    type metadata accessor for PBRParameters();
    LOBYTE(v68) = 3;
    sub_1B19E52CC(&qword_1EEF63E60, (uint64_t (*)(uint64_t))type metadata accessor for PBRParameters, (uint64_t)&unk_1B22C16B8);
    sub_1B22297B4();
    v62 = *(_QWORD *)&v70[0];
    if (!*(_QWORD *)&v70[0])
    {
      v34 = swift_allocObject();
      __asm { FMOV            V0.4S, #1.0 }
      *(_OWORD *)(v34 + 16) = _Q0;
      *(_QWORD *)(v34 + 32) = 0xFFFFFFFFLL;
      *(_DWORD *)(v34 + 40) = 16777473;
      *(_BYTE *)(v34 + 44) = 1;
      *(_OWORD *)(v34 + 48) = xmmword_1B2244EC0;
      *(_QWORD *)(v34 + 64) = 0;
      *(_QWORD *)(v34 + 72) = 0;
      *(_QWORD *)(v34 + 80) = 0xFFFFFFFFLL;
      *(_DWORD *)(v34 + 88) = 16777473;
      *(_BYTE *)(v34 + 92) = 1;
      *(_OWORD *)(v34 + 96) = xmmword_1B2244EC0;
      *(_QWORD *)(v34 + 112) = 0xFFFFFFFFLL;
      *(_DWORD *)(v34 + 120) = 16777473;
      *(_BYTE *)(v34 + 124) = 1;
      *(_DWORD *)(v34 + 128) = 1065353216;
      *(_OWORD *)(v34 + 144) = xmmword_1B2244EC0;
      *(_QWORD *)(v34 + 160) = 0xFFFFFFFFLL;
      *(_DWORD *)(v34 + 168) = 16777473;
      *(_BYTE *)(v34 + 172) = 1;
      *(_DWORD *)(v34 + 176) = 1065353216;
      *(_OWORD *)(v34 + 192) = xmmword_1B2244EC0;
      *(_QWORD *)(v34 + 208) = 0xFFFFFFFFLL;
      *(_DWORD *)(v34 + 216) = 16777473;
      *(_BYTE *)(v34 + 220) = 1;
      *(_DWORD *)(v34 + 224) = 1065353216;
      *(_OWORD *)(v34 + 240) = xmmword_1B2244EC0;
      *(_QWORD *)(v34 + 256) = 0xFFFFFFFFLL;
      *(_DWORD *)(v34 + 264) = 16777473;
      *(_BYTE *)(v34 + 268) = 1;
      *(_DWORD *)(v34 + 272) = 1065353216;
      *(_OWORD *)(v34 + 288) = xmmword_1B2244EC0;
      v62 = v34;
      *(_WORD *)(v34 + 304) = 0;
    }
    v54 = sub_1B19E52CC((unint64_t *)&qword_1EEF5DC00, (uint64_t (*)(uint64_t))type metadata accessor for PBRParameters, (uint64_t)&unk_1B22C1674);
    goto LABEL_50;
  }
LABEL_34:
  v54 = 0;
  v62 = 0;
LABEL_51:
  v41 = v15[3];
  v42 = v15[4];
  sub_1B19FA070(v15, v41);
  LOBYTE(v41) = sub_1B2067B64(2047, v41, v42);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v17);
  v43 = v41 | v73;
  v44 = v59;
  if ((v41 & 1) != 0)
  {
    v45 = v65;
    if ((v73 & 1) == 0)
    {
      v22 = v59;
      v43 = 1;
      v73 = 1;
      v44 = 0.0;
    }
  }
  else
  {
    v45 = v65;
  }
  v46 = v72;
  LODWORD(v65) = v71;
  v47 = v62;
  swift_unknownObjectRetain();
  v48 = v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  result = swift_release();
  v49 = v26;
  v50 = v61;
  *v61 = v60;
  *((_QWORD *)v50 + 1) = v49;
  v51 = v56;
  *((_DWORD *)v50 + 4) = v58;
  *((_DWORD *)v50 + 5) = v51;
  v52 = v54;
  *((_QWORD *)v50 + 3) = v47;
  *((_QWORD *)v50 + 4) = v52;
  *((float *)v50 + 10) = v44;
  v50[44] = v43 & 1;
  *((float *)v50 + 12) = v22;
  v50[52] = 3;
  v50[53] = v46;
  *((_QWORD *)v50 + 7) = v55;
  v50[64] = v65;
  *((_QWORD *)v50 + 9) = 1;
  *((_QWORD *)v50 + 10) = v57;
  *((_QWORD *)v50 + 11) = v48;
  *((_QWORD *)v50 + 12) = v45;
  return result;
}

uint64_t sub_1B1D34F28()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  v2 = *(void **)(v0 + 24);
  if (v2 && object_getClass(v2) == (Class)_TtC3VFX16CustomParameters)
  {
    swift_unknownObjectRetain();
    v7 = sub_1B1F7B1A8();
    v9 = v8;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 88) = v7;
    *(_QWORD *)(v1 + 96) = v9;
  }
  else
  {
    v3 = sub_1B1C6C500(MEMORY[0x1E0DEE9D8]);
    v5 = v4;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 88) = v3;
    *(_QWORD *)(v1 + 96) = v5;
  }
  return result;
}

unint64_t sub_1B1D34FC8()
{
  unint64_t result;

  result = qword_1ED4BA0B8;
  if (!qword_1ED4BA0B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E660, &type metadata for Material.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA0B8);
  }
  return result;
}

void sub_1B1D3500C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1D34FC8();
    v7 = a3(a1, &type metadata for Material.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t getEnumTagSinglePayload for ScriptScheduling(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Material.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B1D35144 + 4 * byte_1B228E1E7[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B1D35178 + 4 * byte_1B228E1E2[v4]))();
}

uint64_t sub_1B1D35178(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D35180(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D35188);
  return result;
}

uint64_t sub_1B1D35194(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D3519CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B1D351A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D351A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Material.CodingKeys()
{
  return &type metadata for Material.CodingKeys;
}

ValueMetadata *type metadata accessor for Layer()
{
  return &type metadata for Layer;
}

uint64_t _s3VFX8MaterialV4KindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1D35224 + 4 * byte_1B228E1F1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1D35258 + 4 * byte_1B228E1EC[v4]))();
}

uint64_t sub_1B1D35258(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D35260(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D35268);
  return result;
}

uint64_t sub_1B1D35274(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D3527CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1D35280(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D35288(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Material.Kind()
{
  return &type metadata for Material.Kind;
}

uint64_t sub_1B1D352A4()
{
  return sub_1B1B4DEE4(&qword_1EEF5DC18, &qword_1EEF5DC20, (uint64_t)&type metadata for Material.Kind);
}

unint64_t sub_1B1D352D4()
{
  unint64_t result;

  result = qword_1EEF5DC28;
  if (!qword_1EEF5DC28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E420, &type metadata for Material.Kind);
    atomic_store(result, (unint64_t *)&qword_1EEF5DC28);
  }
  return result;
}

unint64_t sub_1B1D3531C()
{
  unint64_t result;

  result = qword_1EEF5DC30;
  if (!qword_1EEF5DC30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E4D8, &type metadata for Layer);
    atomic_store(result, (unint64_t *)&qword_1EEF5DC30);
  }
  return result;
}

uint64_t sub_1B1D35360()
{
  return sub_1B1B4DEE4(&qword_1EEF5DC38, &qword_1EEF5DC40, (uint64_t)&type metadata for Layer);
}

unint64_t sub_1B1D35390()
{
  unint64_t result;

  result = qword_1EEF5DC48;
  if (!qword_1EEF5DC48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E638, &type metadata for Material.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DC48);
  }
  return result;
}

unint64_t sub_1B1D353D8()
{
  unint64_t result;

  result = qword_1ED4BA0C8;
  if (!qword_1ED4BA0C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E570, &type metadata for Material.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA0C8);
  }
  return result;
}

unint64_t sub_1B1D35420()
{
  unint64_t result;

  result = qword_1ED4BA0C0;
  if (!qword_1ED4BA0C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E598, &type metadata for Material.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA0C0);
  }
  return result;
}

unint64_t sub_1B1D35464()
{
  unint64_t result;

  result = qword_1EEF5DC50;
  if (!qword_1EEF5DC50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E538, &type metadata for Layer);
    atomic_store(result, (unint64_t *)&qword_1EEF5DC50);
  }
  return result;
}

uint64_t sub_1B1D354A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_1B22287A0();
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = *(_QWORD *)(v0 + 16);
  if (*(_QWORD *)v0)
  {
    v4 = *(_QWORD *)(v0 + 8) - *(_QWORD *)v0;
    if (v3 >= v4)
      return 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    if ((v3 & 0x8000000000000000) == 0)
      return v5;
  }
  sub_1B1DB9B80(*(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 16), v4, *(_QWORD *)v0);
  sub_1B2228794();
  sub_1B1D3568C();
  sub_1B19E52CC(&qword_1EEF5DC70, (uint64_t (*)(uint64_t))sub_1B1D3568C, MEMORY[0x1E0DEDE38]);
  v5 = sub_1B2228770();
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1B2228830();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = v3 + v7 + 1;
  }
  return v5;
}

uint64_t sub_1B1D355F8(uint64_t a1)
{
  if ((sub_1B2229D24() & 1) == 0
    && (sub_1B22285F0() & 1) != 0
    && (sub_1B1EE7710(10, 0xE100000000000000) & 0xFFFFFF80) == 0)
  {
    sub_1B1EE7710(10, 0xE100000000000000);
  }
  return a1;
}

void sub_1B1D3568C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5DC58)
  {
    sub_1B1D35704();
    sub_1B19E52CC(&qword_1EEF5DC68, (uint64_t (*)(uint64_t))sub_1B1D35704, MEMORY[0x1E0DEA5E8]);
    v0 = sub_1B222A03C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5DC58);
  }
}

void sub_1B1D35704()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5DC60)
  {
    v0 = sub_1B22286F8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5DC60);
  }
}

unint64_t *initializeBufferWithCopyOfBuffer for TypeConstraint(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1B19F8CD0(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for TypeConstraint(unint64_t *a1)
{
  return sub_1B19F8D00(*a1);
}

unint64_t *assignWithCopy for TypeConstraint(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1B19F8CD0(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1B19F8D00(v4);
  return a1;
}

unint64_t *assignWithTake for TypeConstraint(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1B19F8D00(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TypeConstraint(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7C && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 124);
  v3 = (((*(_QWORD *)a1 >> 57) >> 4) | (8 * ((*(_QWORD *)a1 >> 57) & 8 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7B)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TypeConstraint(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7B)
  {
    *(_QWORD *)result = a2 - 124;
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7C)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B1D358A4(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 61;
  if (v1 <= 3)
    return v1;
  else
    return (*a1 >> 3) + 4;
}

_QWORD *sub_1B1D358C0(_QWORD *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_1B1D358D0(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 4)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 61;
  }
  else
  {
    v2 = 8 * (a2 - 4);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for TypeConstraint()
{
  return &type metadata for TypeConstraint;
}

void sub_1B1D3590C(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1D35938(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if (a2 >> 61 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 24);
  sub_1B19F8CD0(v2);
  sub_1B19F8CD0(v3);
  v4 = ((uint64_t (*)(unint64_t, unint64_t))sub_1B1D3590C)(v2, v3);
  sub_1B19F8D00(v3);
  sub_1B19F8D00(v2);
  return v4 & 1;
}

uint64_t sub_1B1D35B14(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = a1 >> 61;
  if (a1 >> 61 == 2)
    return *(_QWORD *)(a1 + 16);
  if ((_DWORD)v1 == 1)
  {
    v2 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    if ((_DWORD)v1)
      return 0;
    v2 = *(_QWORD *)(a1 + 24);
  }
  sub_1B19F8CD0(v2);
  v3 = sub_1B1D35B14(v2);
  sub_1B19F8D00(v2);
  return v3;
}

void sub_1B1D35B98(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1D35BD4(uint64_t a1)
{
  return sub_1B1D363CC(*(_QWORD *)(a1 + 16));
}

void sub_1B1D35C64()
{
  JUMPOUT(0x1B1D35C4CLL);
}

void sub_1B1D35C7C()
{
  JUMPOUT(0x1B1D35C4CLL);
}

void sub_1B1D35C94()
{
  JUMPOUT(0x1B1D35C4CLL);
}

void sub_1B1D35CA8()
{
  JUMPOUT(0x1B1D35C4CLL);
}

void sub_1B1D35CBC()
{
  JUMPOUT(0x1B1D35C4CLL);
}

void sub_1B1D35CD0()
{
  JUMPOUT(0x1B1D35C4CLL);
}

void sub_1B1D35CEC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1D35D20(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;

  if (v2 >> 60 != 3 || *(_QWORD *)(a2 + 16) != *(_QWORD *)(v2 + 16))
    return 0;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
  sub_1B19F8CD0(v3);
  sub_1B1B632F0(v4);
  v5 = ((uint64_t (*)(unint64_t, unint64_t))sub_1B1D35CEC)(v4, v3);
  sub_1B19F8D00(v3);
  sub_1B1B28D2C(v4);
  return v5 & 1;
}

uint64_t sub_1B1D3602C(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = a2 >> 61;
  if (!(a2 >> 61))
  {
    v3 = (unint64_t *)(a2 + 24);
    goto LABEL_5;
  }
  if ((_DWORD)v2 == 1)
  {
    v3 = (unint64_t *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 16);
LABEL_5:
    v4 = *v3;
    if (a1 >> 60 == 3)
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(a1 + 24);
      sub_1B1B632F0(v6);
    }
    else
    {
      v5 = 0;
      v6 = 0xF000000000000007;
    }
    sub_1B19F8CD0(v4);
    v7 = sub_1B1D3602C(v6, v4);
    sub_1B19F8D00(v4);
    sub_1B1BE2B14(v5, v6);
    return v7;
  }
  if ((_DWORD)v2 == 2)
  {
    v7 = *(_QWORD *)(a2 + 16);
    sub_1B1B632F0(a1);
    return v7;
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1D36198(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

unint64_t sub_1B1D361C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  sub_1B222A078();
  sub_1B222A078();
  sub_1B19F8CD0(v3);
  ((void (*)(uint64_t, unint64_t))sub_1B1D36198)(v2, v3);
  return sub_1B19F8D00(v3);
}

unint64_t sub_1B1D36278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  sub_1B222A078();
  sub_1B1B632F0(v3);
  sub_1B1D78044(v2, v3);
  return sub_1B1B28D2C(v3);
}

void sub_1B1D362AC()
{
  JUMPOUT(0x1B1D36208);
}

void sub_1B1D362B4()
{
  JUMPOUT(0x1B1D36208);
}

void sub_1B1D362BC()
{
  JUMPOUT(0x1B1D36208);
}

void sub_1B1D362C4()
{
  JUMPOUT(0x1B1D36208);
}

void sub_1B1D362CC()
{
  JUMPOUT(0x1B1D36208);
}

void sub_1B1D362D4()
{
  JUMPOUT(0x1B1D36208);
}

void sub_1B1D362DC()
{
  JUMPOUT(0x1B1D36208);
}

void sub_1B1D362E4()
{
  JUMPOUT(0x1B1D36208);
}

uint64_t sub_1B1D362EC()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D36198((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

void sub_1B1D36330(uint64_t a1)
{
  uint64_t *v1;

  sub_1B1D36198(a1, *v1);
}

uint64_t sub_1B1D36338()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D36198((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

void sub_1B1D36378(uint64_t *a1)
{
  sub_1B1D3590C(*a1);
}

unint64_t sub_1B1D36388()
{
  unint64_t result;

  result = qword_1EEF5DC78[0];
  if (!qword_1EEF5DC78[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228E7C8, &type metadata for TypeConstraint);
    atomic_store(result, qword_1EEF5DC78);
  }
  return result;
}

uint64_t sub_1B1D363CC(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;
  uint64_t v5;

  v2 = sub_1B1B95DF4((uint64_t)&unk_1E63827D0);
  sub_1B1BCF93C();
  swift_arrayDestroy();
  if (v2[2] && (v3 = sub_1B1DC3AC8(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(v2[7] + 16 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 63;
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t static SelfBuildInfo.RC_ProjectSourceVersion.getter()
{
  return 0x38312E302E343831;
}

uint64_t static SelfBuildInfo.gitDescribe.getter()
{
  return 0x6E776F6E6B6E753CLL;
}

uint64_t static SelfBuildInfo.XCODE_PRODUCT_BUILD_VERSION.getter()
{
  return 0x6730373136413631;
}

ValueMetadata *type metadata accessor for SelfBuildInfo()
{
  return &type metadata for SelfBuildInfo;
}

uint64_t sub_1B1D364C0@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[10];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6[0] = 0xD000000000000013;
  v6[1] = 0x80000001B2339550;
  v6[2] = 0;
  v6[3] = 0;
  if ((a1 & 0x4800) == 0x4000)
    v3 = 0xD00000000000001CLL;
  else
    v3 = 0xD000000000000013;
  v6[4] = MEMORY[0x1E0DEE9D8];
  v6[5] = v3;
  v4 = 0x80000001B2339570;
  if ((a1 & 0x4800) == 0x4000)
    v4 = 0x80000001B2339590;
  v6[6] = v4;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = MEMORY[0x1E0DEE9D8];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  nullsub_16(v6);
  return sub_1B19F66A0((uint64_t)v6, a2, &qword_1ED4B8CF8);
}

void *sub_1B1D36584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  _BYTE v16[80];
  _OWORD v17[4];
  char v18;
  _OWORD v19[4];
  float v20;
  __int128 v21;

  v5 = *(_QWORD **)(a3 + 8);
  swift_retain();
  sub_1B1D15764(v5, (uint64_t)v16);
  swift_release();
  sub_1B19F66A0((uint64_t)v16, (uint64_t)v17, qword_1ED4B8BB0);
  if ((v18 & 1) != 0)
  {
    v6 = xmmword_1B2244E20;
    v7 = xmmword_1B2244D90;
    v8 = xmmword_1B2244DD0;
    v9 = xmmword_1B2244DB0;
  }
  else
  {
    v9 = v17[0];
    v8 = v17[1];
    v7 = v17[2];
    v6 = v17[3];
  }
  v10 = *(_DWORD *)(v3 + 24);
  if (v10 - 11 > 0xF4)
  {
    v13 = *(float *)(v3 + 16);
    if (v13 > -1.0)
      v14 = *(float *)(v3 + 16);
    else
      v14 = -1.0;
    if (v13 >= 0.0)
      v11 = v14;
    else
      v11 = -1.0;
  }
  else
  {
    v11 = 1.0 / (float)v10;
    v12 = *(float *)(v3 + 16);
    if (v12 >= 0.0 && v12 > v11)
      v11 = *(float *)(v3 + 16);
  }
  v19[0] = v9;
  v19[1] = v8;
  v19[2] = v7;
  v19[3] = v6;
  v20 = v11;
  v21 = *(_OWORD *)(v3 + 32);
  return sub_1B1D2526C(v19, a1);
}

uint64_t sub_1B1D366B4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 21) = result;
  return result;
}

uint64_t sub_1B1D366BC(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 22) = result;
  return result;
}

double (*sub_1B1D366C4())(_QWORD)
{
  return nullsub_16;
}

_QWORD *sub_1B1D366D4()
{
  _QWORD *v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = (_QWORD *)sub_1B20C3C0C(4);
  v0[2] = 1;
  v0[11] = sub_1B1D364C0;
  v0[12] = 0;
  swift_release();
  return v0;
}

double sub_1B1D36730(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a2 + 40) = 1;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a2 + 16) = xmmword_1B2246910;
  return result;
}

void *sub_1B1D3674C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D36584(a1, a2, a3);
}

double sub_1B1D36784@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = -1082130432;
  *(_WORD *)(a1 + 20) = 256;
  *(_BYTE *)(a1 + 22) = 0;
  *(_DWORD *)(a1 + 24) = 256;
  *(_WORD *)(a1 + 28) = 256;
  result = 131072.0;
  *(_OWORD *)(a1 + 32) = xmmword_1B228E840;
  return result;
}

double sub_1B1D367C4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  *(float *)&result = sub_1B1D368C0(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B1D36804(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t result;
  _OWORD v12[3];

  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v12 - v8;
  v10 = v1[1];
  v12[0] = *v1;
  v12[1] = v10;
  v12[2] = v1[2];
  result = sub_1B1B643C0(a1, (uint64_t)v12 - v8);
  if (!v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return result;
}

float sub_1B1D368C0@<S0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  float result;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;
  int v17;
  char v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  char v23;
  float v24;
  __int16 v25;
  char v26;
  int v27;
  __int16 v28;
  __int128 v29;

  sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v21 - v9;
  v21 = 0xFFFFFFFFLL;
  v22 = 1;
  v23 = 1;
  v24 = -1.0;
  v25 = 256;
  v26 = 0;
  v27 = 256;
  v28 = 256;
  v29 = xmmword_1B228E840;
  sub_1B1B65430(a1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (!v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v12 = v22;
    v13 = v23;
    result = v24;
    v14 = v25;
    v15 = HIBYTE(v25);
    v16 = v26;
    v17 = v27;
    v18 = v28;
    v19 = HIBYTE(v28);
    v20 = v29;
    *(_QWORD *)a2 = v21;
    *(_DWORD *)(a2 + 8) = v12;
    *(_BYTE *)(a2 + 12) = v13;
    *(float *)(a2 + 16) = result;
    *(_BYTE *)(a2 + 20) = v14;
    *(_BYTE *)(a2 + 21) = v15;
    *(_BYTE *)(a2 + 22) = v16;
    *(_DWORD *)(a2 + 24) = v17;
    *(_BYTE *)(a2 + 28) = v18;
    *(_BYTE *)(a2 + 29) = v19;
    *(_OWORD *)(a2 + 32) = v20;
  }
  return result;
}

__n128 initializeWithCopy for ParticlePointRenderer(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticlePointRenderer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 20);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticlePointRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticlePointRenderer()
{
  return &type metadata for ParticlePointRenderer;
}

uint64_t sub_1B1D36ADC(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  char v55[48];
  uint64_t v56;

  v44 = *(_QWORD *)(a1 + 16);
  v42 = *(_QWORD *)(a2 + 16);
  if (v42 >= v44)
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  v56 = MEMORY[0x1E0DEE9D8];
  sub_1B2029FFC(0, v4, 0);
  v5 = v56;
  v38 = a2;
  v39 = a1;
  if (v4)
  {
    v40 = a2 + 32;
    v41 = a1 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = 0;
    v43 = 0;
    v7 = 0;
    while (1)
    {
      v48 = v4;
      v49 = v5;
      if ((v6 & 1) != 0)
      {
        v47 = v7;
        v8 = 0;
        v9 = 0;
        v54 = 0;
        v10 = 0uLL;
        v53 = 0u;
        v45 = 1;
      }
      else
      {
        v11 = v44;
        if (v7 != v44)
        {
          v11 = v7 + 1;
          if (v43 != v42)
          {
            v17 = *(_QWORD *)(v41 + 16 * v7 + 8);
            v18 = (uint64_t *)(v40 + 40 * v43);
            v20 = *v18;
            v19 = v18[1];
            v21 = v18[2];
            v22 = v18[3];
            v23 = v18[4];
            ++v43;
            *(_QWORD *)&v51 = *(_QWORD *)(v41 + 16 * v7);
            *((_QWORD *)&v51 + 1) = v17;
            *(_QWORD *)&v52 = v20;
            *((_QWORD *)&v52 + 1) = v19;
            *(_QWORD *)&v53 = v21;
            *((_QWORD *)&v53 + 1) = v22;
            v54 = v23;
            swift_bridgeObjectRetain();
            sub_1B19FA2B4(v20, v19);
            v45 = 0;
            v8 = *((_QWORD *)&v51 + 1);
            v9 = v51;
            v47 = v11;
            goto LABEL_12;
          }
        }
        v8 = 0;
        v9 = 0;
        v54 = 0;
        v10 = 0uLL;
        v53 = 0u;
        v45 = 1;
        v47 = v11;
      }
      v51 = v10;
      v52 = v10;
LABEL_12:
      sub_1B19FA278((uint64_t)&v52, (uint64_t)v55);
      v12 = v52;
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B1E03DBC();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v13 = v9;
      swift_bridgeObjectRelease();
      sub_1B19F9FEC(v12, *((unint64_t *)&v12 + 1));
      v5 = v49;
      v56 = v49;
      v15 = *(_QWORD *)(v49 + 16);
      v14 = *(_QWORD *)(v49 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1B2029FFC(v14 > 1, v15 + 1, 1);
        v5 = v56;
      }
      *(_QWORD *)(v5 + 16) = v15 + 1;
      v16 = v5 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v13;
      *(_QWORD *)(v16 + 40) = v8;
      v7 = v47;
      v4 = v48 - 1;
      v6 = v45;
      if (v48 == 1)
      {
        v24 = v44;
        v25 = v42;
        if ((v45 & 1) != 0)
          goto LABEL_25;
        goto LABEL_20;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = 0;
  v43 = 0;
  v24 = v44;
  v25 = v42;
LABEL_20:
  if (v7 != v24 && v43 != v25)
  {
    v28 = ~v43 + v25;
    v29 = (uint64_t *)(v39 + 16 * v7 + 40);
    v30 = (uint64_t *)(v38 + 40 * v43 + 32);
    v31 = ~v7 + v24;
    do
    {
      v46 = v28;
      v32 = *(v29 - 1);
      v33 = *v29;
      sub_1B19FA278((uint64_t)v30, (uint64_t)&v51);
      v34 = *v30;
      v50 = v30[1];
      swift_bridgeObjectRetain_n();
      sub_1B19F8C58(&v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      sub_1B2228890();
      sub_1B1E03DBC();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B19F9FEC(v34, v50);
      v56 = v5;
      v36 = *(_QWORD *)(v5 + 16);
      v35 = *(_QWORD *)(v5 + 24);
      if (v36 >= v35 >> 1)
      {
        sub_1B2029FFC(v35 > 1, v36 + 1, 1);
        v5 = v56;
      }
      *(_QWORD *)(v5 + 16) = v36 + 1;
      v37 = v5 + 16 * v36;
      *(_QWORD *)(v37 + 32) = v32;
      *(_QWORD *)(v37 + 40) = v33;
      if (!v31)
        break;
      v30 += 5;
      v28 = v46 - 1;
      v29 += 2;
      --v31;
    }
    while (v46);
  }
LABEL_25:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t sub_1B1D36EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1D36ADC(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0xD000000000000011;
}

uint64_t sub_1B1D37038(uint64_t result, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = (_QWORD *)v3[5];
  v5 = v4[2];
  if (!v5)
    return result;
  v8 = result;
  v9 = v4[4] == result && v4[5] == a2;
  if (v9 || (result = sub_1B2229D24(), (result & 1) != 0))
  {
    v10 = 0;
LABEL_8:
    v11 = (_QWORD *)v3[6];
    sub_1B19F8C58(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v3[6] = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = sub_1B1FFEEE8(v11);
      v3[6] = v11;
    }
    sub_1B1D3AF48((uint64_t)a3, (uint64_t)&v11[5 * v10 + 4]);
    v13 = v3[7];
    if ((v13 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v21 = MEMORY[0x1B5E21018](v10, v13);
      swift_bridgeObjectRelease();
      v22 = *(_QWORD *)(v21 + 56);
      v23 = *(_QWORD *)(v21 + 64);
      sub_1B19FA278((uint64_t)a3, v21 + 56);
      sub_1B19F8C58(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      sub_1B19F9FEC(v22, v23);
      return swift_unknownObjectRelease();
    }
    else
    {
      v14 = *(_QWORD *)(v13 + 8 * v10 + 32);
      v15 = *(_QWORD *)(v14 + 56);
      v16 = *(_QWORD *)(v14 + 64);
      sub_1B19FA278((uint64_t)a3, v14 + 56);
      sub_1B19F8C58(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
      return sub_1B19F9FEC(v15, v16);
    }
  }
  if (v5 == 1)
    return result;
  v17 = v4[6] == v8 && v4[7] == a2;
  if (v17 || (result = sub_1B2229D24(), (result & 1) != 0))
  {
    v10 = 1;
    goto LABEL_8;
  }
  v18 = v4 + 9;
  v19 = 2;
  while (v5 != v19)
  {
    v10 = v19;
    if (*(v18 - 1) != v8 || *v18 != a2)
    {
      result = sub_1B2229D24();
      v19 = v10 + 1;
      v18 += 2;
      if ((result & 1) == 0)
        continue;
    }
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1B1D3724C()
{
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return 1599362383;
}

_QWORD *sub_1B1D372EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v18;
  char *v19;
  _QWORD *i;
  BOOL v21;
  uint64_t v22;

  v3 = *(_QWORD **)(v2 + 40);
  v4 = (_QWORD *)v3[2];
  if (v4)
  {
    v7 = v3[4] == a1 && v3[5] == a2;
    if (v7 || (sub_1B2229D24() & 1) != 0)
      goto LABEL_7;
    if (v4 != (_QWORD *)1)
    {
      v18 = v3[6] == a1 && v3[7] == a2;
      if (v18 || (sub_1B2229D24() & 1) != 0)
        goto LABEL_7;
      if (v4 == (_QWORD *)2)
        return 0;
      if (v3[8] == a1 && v3[9] == a2 || (sub_1B2229D24() & 1) != 0)
      {
LABEL_7:
        v8 = sub_1B1DB99B0(a1, a2, v3);
        swift_bridgeObjectRetain();
        v22 = sub_1B1D3724C();
        v10 = v9;
        v11 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 40 * v8);
        v12 = v11[4];
        v13 = v11[5];
        v14 = v11[6];
        v15 = v11[7];
        v16 = v11[8];
        _s11ParameterInCMa();
        v4 = (_QWORD *)swift_allocObject();
        swift_weakInit();
        swift_weakAssign();
        v4[3] = a1;
        v4[4] = a2;
        v4[5] = v22;
        v4[6] = v10;
        v4[7] = v12;
        v4[8] = v13;
        v4[9] = v14;
        v4[10] = v15;
        v4[11] = v16;
        sub_1B19FA2B4(v12, v13);
        return v4;
      }
      v19 = (char *)v4 - 3;
      if (v4 != (_QWORD *)3)
      {
        for (i = v3 + 11; ; i += 2)
        {
          v21 = *(i - 1) == a1 && *i == a2;
          if (v21 || (sub_1B2229D24() & 1) != 0)
            break;
          v4 = 0;
          if (!--v19)
            return v4;
        }
        goto LABEL_7;
      }
    }
    return 0;
  }
  return v4;
}

uint64_t sub_1B1D374B8(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v5;
  _QWORD *v6;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t Strong;
  __objc2_class **v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  char v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v236;
  int v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  const char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  int *v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t *v253;
  __int128 v254;
  _QWORD *v255;
  unint64_t v256;
  __int128 *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  unsigned int v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  _QWORD *v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  _QWORD *v274;
  _QWORD *v275;
  uint64_t v276[5];
  _QWORD v277[5];
  _OWORD v278[2];
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  unint64_t v283;
  unint64_t v284;
  _QWORD v285[5];
  char v286[8];
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  __int128 v292;
  uint64_t v293;

  v6 = v5;
  v237 = a5;
  v244 = a4;
  sub_1B1B1F358();
  v250 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v249 = (char *)&v236 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1B222820C();
  v247 = *(_QWORD *)(v13 - 8);
  v248 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v246 = (char *)&v236 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = *(unsigned __int8 *)(*a1 + 24);
  v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v275 = sub_1B1B80504(MEMORY[0x1E0DEE9D8]);
  swift_retain();
  v240 = a2;
  v253 = a1;
  sub_1B1D3A888(a2, (uint64_t)a1, (uint64_t *)&v275, a3);
  v260 = 0;
  v251 = a3;
  swift_release();
  v17 = v6[5];
  v18 = *(_QWORD *)(v17 + 16);
  v255 = v6;
  v256 = v18;
  if (v18)
  {
    v252 = v17 + 32;
    v245 = (const char *)v17;
    swift_bridgeObjectRetain_n();
    v19 = 0;
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v21 = v6[5];
      v22 = *(_QWORD *)(v21 + 16);
      if (!v22)
        goto LABEL_5;
      v23 = (const char *)(v252 + 16 * v19);
      v24 = *(_QWORD **)v23;
      v25 = (_QWORD *)*((_QWORD *)v23 + 1);
      v26 = *(_QWORD *)(v21 + 32) == *(_QWORD *)v23 && *(_QWORD *)(v21 + 40) == (_QWORD)v25;
      v263 = v20;
      v264 = v24;
      if (!v26)
      {
        if ((sub_1B2229D24() & 1) == 0)
        {
          v20 = v263;
          if (v22 == 1)
            goto LABEL_5;
          v24 = v264;
          v53 = *(_QWORD **)(v21 + 48) == v264 && *(_QWORD *)(v21 + 56) == (_QWORD)v25;
          if (!v53 && (sub_1B2229D24() & 1) == 0)
          {
            v20 = v263;
            if (v22 == 2)
              goto LABEL_5;
            v24 = v264;
            if ((*(_QWORD **)(v21 + 64) != v264 || *(_QWORD **)(v21 + 72) != v25) && (sub_1B2229D24() & 1) == 0)
            {
              v54 = v22 - 3;
              if (v22 == 3)
              {
LABEL_47:
                v20 = v263;
                goto LABEL_5;
              }
              v55 = (_QWORD *)(v21 + 88);
              while (1)
              {
                v24 = v264;
                if ((_QWORD *)*(v55 - 1) == v264 && *v55 == (_QWORD)v25)
                  break;
                v262 = v54;
                if ((sub_1B2229D24() & 1) != 0)
                  break;
                v55 += 2;
                v54 = v262 - 1;
                if (v262 == 1)
                  goto LABEL_47;
              }
            }
          }
        }
        if ((sub_1B2229D24() & 1) == 0)
        {
          v57 = 0;
          v58 = (_QWORD *)(v21 + 56);
          v59 = 1;
          while (v22 != v59)
          {
            ++v57;
            if ((_QWORD *)*(v58 - 1) == v24 && *v58 == (_QWORD)v25)
            {
              v27 = v57;
              goto LABEL_14;
            }
            v27 = v59++;
            v58 += 2;
            if ((sub_1B2229D24() & 1) != 0)
              goto LABEL_14;
          }
        }
      }
      v27 = 0;
LABEL_14:
      v259 = v19;
      *(_QWORD *)&v279 = 1599362383;
      *((_QWORD *)&v279 + 1) = 0xE400000000000000;
      v28 = v6[4];
      *(_QWORD *)&v292 = v6[3];
      *((_QWORD *)&v292 + 1) = v28;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v29 = v279;
      v30 = v25;
      v31 = (_QWORD *)(v6[6] + 40 * v27);
      v33 = v31[4];
      v32 = v31[5];
      v261 = *((_QWORD *)&v279 + 1);
      v262 = v32;
      v34 = v31[6];
      v35 = v31[7];
      v36 = v31[8];
      _s11ParameterInCMa();
      v37 = (_QWORD *)swift_allocObject();
      v257 = (__int128 *)swift_weakInit();
      swift_weakAssign();
      v37[3] = v24;
      v37[4] = v30;
      v39 = v261;
      v38 = v262;
      v258 = v30;
      *(_QWORD *)&v254 = v29;
      v37[5] = v29;
      v37[6] = v39;
      v37[7] = v33;
      v37[8] = v38;
      v37[9] = v34;
      v37[10] = v35;
      v37[11] = v36;
      v40 = v275;
      v41 = v275[2];
      sub_1B19FA2B4(v33, v38);
      v20 = v263;
      if (v41)
      {
        swift_bridgeObjectRetain();
        v42 = sub_1B1DC3B00(v254, v39);
        if ((v43 & 1) != 0)
        {
          v44 = *(_QWORD *)(v40[7] + 8 * v42);
          swift_retain();
          swift_bridgeObjectRelease();
          v45 = sub_1B1D372EC((uint64_t)v264, (uint64_t)v258);
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = sub_1B1C66CA0(0, v20[2] + 1, 1, v20);
          v19 = v259;
          v47 = v20[2];
          v46 = v20[3];
          if (v47 >= v46 >> 1)
            v20 = sub_1B1C66CA0(v46 > 1, v47 + 1, 1, v20);
          v20[2] = v47 + 1;
          v48 = &v20[2 * v47];
          v48[4] = v45;
          v48[5] = v44;
          swift_setDeallocating();
          swift_weakDestroy();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B19F9FEC(v37[7], v37[8]);
          swift_deallocClassInstance();
          swift_bridgeObjectRelease();
LABEL_28:
          swift_release();
          goto LABEL_4;
        }
        swift_bridgeObjectRelease();
      }
      v19 = v259;
      if ((*(_BYTE *)(*v253 + 161) & 1) != 0)
      {
        v49 = sub_1B1D372EC((uint64_t)v264, (uint64_t)v258);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = sub_1B1C66CA0(0, v20[2] + 1, 1, v20);
        v51 = v20[2];
        v50 = v20[3];
        if (v51 >= v50 >> 1)
          v20 = sub_1B1C66CA0(v50 > 1, v51 + 1, 1, v20);
        v20[2] = v51 + 1;
        v52 = &v20[2 * v51];
        v52[4] = v49;
        v52[5] = 0;
        swift_setDeallocating();
        swift_weakDestroy();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B19F9FEC(v37[7], v37[8]);
        swift_deallocClassInstance();
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      swift_setDeallocating();
      swift_weakDestroy();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B19F9FEC(v37[7], v37[8]);
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();
LABEL_4:
      v6 = v255;
LABEL_5:
      if (++v19 == v256)
      {
        swift_bridgeObjectRelease_n();
        v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        goto LABEL_59;
      }
    }
  }
  v20 = v16;
LABEL_59:
  v274 = v16;
  v258 = sub_1B1FB74F8();
  v263 = v20;
  if (!v258)
  {
LABEL_70:
    v81 = v20[2];
    if (v81)
      goto LABEL_71;
    goto LABEL_74;
  }
  v61 = v258[2];
  if (v61)
  {
    v62 = (uint64_t)(v258 + 13);
    v63 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v259 = MEMORY[0x1E0DEE9B8] + 8;
    do
    {
      v65 = *(_QWORD *)(v62 - 72);
      v64 = *(_QWORD *)(v62 - 64);
      sub_1B1A0DCD4(v62, (uint64_t)&v292);
      sub_1B1A0DDAC(&v292, &v279);
      swift_dynamicCast();
      sub_1B1E0E85C(v289, v290, v276);
      v67 = v276[0];
      v66 = v276[1];
      v264 = (_QWORD *)v276[2];
      v261 = v276[4];
      v262 = v276[3];
      v68 = sub_1B2228920();
      swift_bridgeObjectRetain();
      if ((v68 & 1) != 0)
      {
        sub_1B2228830();
        sub_1B2228854();
        v69 = sub_1B2228974();
        v71 = v70;
        v73 = v72;
        v75 = v74;
        swift_bridgeObjectRelease();
        v65 = MEMORY[0x1B5E20388](v69, v71, v73, v75);
        v64 = v76;
        swift_bridgeObjectRelease();
        v63 = v274;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v63 = sub_1B1C67F04(0, v63[2] + 1, 1, v63);
      v78 = v63[2];
      v77 = v63[3];
      if (v78 >= v77 >> 1)
        v63 = sub_1B1C67F04(v77 > 1, v78 + 1, 1, v63);
      v63[2] = v78 + 1;
      v79 = &v63[8 * v78];
      v79[4] = v65;
      v79[5] = v64;
      v79[6] = v67;
      v79[7] = v66;
      v80 = v262;
      v79[8] = v264;
      v79[9] = v80;
      v79[10] = v261;
      *((_BYTE *)v79 + 88) = 0;
      v62 += 104;
      v274 = v63;
      --v61;
    }
    while (v61);
    swift_bridgeObjectRelease();
    v20 = v263;
    goto LABEL_70;
  }
  swift_bridgeObjectRelease();
  v81 = v20[2];
  if (v81)
  {
LABEL_71:
    swift_bridgeObjectRetain();
    v82 = v20 + 5;
    do
    {
      swift_retain();
      v83 = swift_retain();
      sub_1B1D3AC94(v83, &v274);
      swift_release();
      swift_release();
      v82 += 2;
      --v81;
    }
    while (v81);
    swift_bridgeObjectRelease();
  }
LABEL_74:
  v84 = v253;
  v85 = *(_QWORD *)(*v253 + 120);
  if (v85 >> 62)
  {
    swift_bridgeObjectRetain();
    v86 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v86 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v87 = v260;
  if (v86 < 1)
    goto LABEL_218;
  v272 = 0;
  v273 = 0xE000000000000000;
  v88 = v20[2];
  if (v88)
  {
    v89 = (_QWORD *)(swift_bridgeObjectRetain() + 40);
    do
    {
      if (*v89)
      {
        Strong = swift_weakLoadStrong();
        if (Strong)
        {
          v91 = (__objc2_class **)Strong;
          swift_retain();
          swift_retain();
          sub_1B1DE28D0(v84, v91, 1);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      v89 += 2;
      --v88;
    }
    while (v88);
    swift_bridgeObjectRelease();
  }
  v271 = MEMORY[0x1E0DEE9D8];
  v236 = *v84;
  v92 = *(_QWORD *)(v236 + 112);
  if (v92 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v93 = sub_1B22296AC();
    if (v93)
      goto LABEL_86;
  }
  else
  {
    v93 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v93)
    {
LABEL_86:
      v94 = 0;
      do
      {
        if ((v92 & 0xC000000000000001) != 0)
        {
          v95 = MEMORY[0x1B5E21018](v94, v92);
        }
        else
        {
          v95 = *(_QWORD *)(v92 + 8 * v94 + 32);
          swift_retain();
        }
        ++v94;
        *(_QWORD *)&v279 = v95;
        sub_1B1D3989C((uint64_t)&v279, &v271);
        swift_release();
      }
      while (v93 != v94);
      swift_bridgeObjectRelease_n();
      v96 = v271;
      if (!(v271 >> 62))
        goto LABEL_92;
      goto LABEL_166;
    }
  }
  swift_bridgeObjectRelease_n();
  v96 = MEMORY[0x1E0DEE9D8];
  if (!(MEMORY[0x1E0DEE9D8] >> 62))
  {
LABEL_92:
    v97 = *(_QWORD **)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    goto LABEL_93;
  }
LABEL_166:
  swift_bridgeObjectRetain_n();
  v97 = (_QWORD *)sub_1B22296AC();
LABEL_93:
  v260 = v87;
  if (v97)
  {
    v98 = 0;
    v264 = (_QWORD *)(v96 & 0xC000000000000001);
    v99 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v252 = (unint64_t)"};out = &#TEMP#[0]";
    v245 = "CodeGenContext.typeAsCode: ";
    v238 = 0x80000001B232B920;
    v239 = 0x80000001B232B900;
    v254 = xmmword_1B226D240;
    v256 = v96;
    v258 = v97;
    while (1)
    {
      v262 = (uint64_t)v99;
      if (v264)
      {
        v100 = MEMORY[0x1B5E21018](v98, v96);
      }
      else
      {
        v100 = *(_QWORD *)(v96 + 8 * (_QWORD)v98 + 32);
        swift_retain();
      }
      swift_bridgeObjectRetain();
      v101 = sub_1B1FC0A9C();
      v103 = v102;
      swift_bridgeObjectRelease();
      sub_1B19FA278(v100 + 56, (uint64_t)v285);
      if (v265)
      {
        if (v265 != 1)
        {
          *(_QWORD *)&v279 = 8287;
          *((_QWORD *)&v279 + 1) = 0xE200000000000000;
          sub_1B19F8C58(v285, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          sub_1B2228890();
          sub_1B2228890();
          sub_1B19FA278((uint64_t)v285, (uint64_t)&v292);
          if (*((_QWORD *)&v292 + 1) >= 0x3BuLL)
          {
            v261 = v103;
            if (*(_QWORD *)(v293 + 16) && (sub_1B1DC3C04(2u), (v124 & 1) != 0))
            {
              swift_bridgeObjectRetain();
            }
            else
            {
              if (qword_1ED4BF430 != -1)
                swift_once();
              v283 = 0;
              v284 = 0xE000000000000000;
              v259 = qword_1ED4D0FB0;
              swift_retain();
              sub_1B2229430();
              swift_bridgeObjectRelease();
              v283 = 0xD00000000000001BLL;
              v284 = v252 | 0x8000000000000000;
              swift_bridgeObjectRetain();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B2228890();
              sub_1B2228890();
              v136 = v283;
              v137 = v284;
              v138 = sub_1B2228E9C();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v139 = qword_1ED4D0FD0;
              v140 = qword_1ED4BF688;
              swift_retain();
              if (v140 != -1)
                swift_once();
              sub_1B1B42948();
              v141 = swift_allocObject();
              *(_OWORD *)(v141 + 16) = v254;
              *(_QWORD *)(v141 + 56) = MEMORY[0x1E0DEA968];
              *(_QWORD *)(v141 + 64) = sub_1B1B1F47C();
              *(_QWORD *)(v141 + 32) = v136;
              *(_QWORD *)(v141 + 40) = v137;
              swift_bridgeObjectRetain();
              sub_1B222835C();
              swift_bridgeObjectRelease();
              swift_retain();
              LODWORD(v243) = v138;
              v142 = v246;
              sub_1B2228200();
              v143 = (uint64_t)v249;
              v144 = v250[12];
              v242 = v136;
              v145 = v250[16];
              v146 = v250[20];
              v257 = (__int128 *)v139;
              v147 = &v249[v146];
              (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v249, v142, v248);
              *(_BYTE *)(v143 + v144) = v243;
              *(_QWORD *)(v143 + v145) = 0;
              *(_QWORD *)v147 = v242;
              *((_QWORD *)v147 + 1) = v137;
              swift_bridgeObjectRetain();
              sub_1B2228428();
              swift_release();
              sub_1B1B429AC(v143);
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              v96 = v256;
              v97 = v258;
            }
          }
          else
          {
            sub_1B1C454D0((uint64_t)v285);
          }
          sub_1B2228890();
          swift_bridgeObjectRelease();
          goto LABEL_141;
        }
        v104 = 0;
        v105 = *(_QWORD *)(v100 + 64);
        v106 = 0xE000000000000000;
        if (v105 <= 0x26 && ((1 << v105) & 0x43A0000000) != 0)
        {
          v106 = 0xE700000000000000;
          v104 = 0x20646165726874;
        }
        *(_QWORD *)&v279 = v104;
        *((_QWORD *)&v279 + 1) = v106;
        sub_1B19FA278((uint64_t)v285, (uint64_t)v286);
        if (v287 >= 0x3B)
        {
          v259 = v101;
          v107 = *(_QWORD *)(v288 + 16);
          sub_1B19F8C58(v285, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          if (!v107 || (sub_1B1DC3C04(1u), (v108 & 1) == 0))
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v283 = 0;
            v284 = 0xE000000000000000;
            v243 = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v283 = 0xD00000000000001BLL;
            v284 = v252 | 0x8000000000000000;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v109 = v283;
            v110 = v284;
            v111 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v257 = (__int128 *)v100;
            v261 = v103;
            v112 = qword_1ED4D0FD0;
            v113 = qword_1ED4BF688;
            swift_retain();
            if (v113 != -1)
              swift_once();
            sub_1B1B42948();
            v114 = swift_allocObject();
            *(_OWORD *)(v114 + 16) = v254;
            *(_QWORD *)(v114 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v114 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v114 + 32) = v109;
            *(_QWORD *)(v114 + 40) = v110;
            swift_bridgeObjectRetain();
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v241 = v111;
            v115 = v246;
            sub_1B2228200();
            v116 = v250[12];
            v117 = v250[16];
            v118 = v250[20];
            v119 = v109;
            v120 = (uint64_t)v249;
            v242 = v112;
            v121 = &v249[v118];
            (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v249, v115, v248);
            *(_BYTE *)(v120 + v116) = v241;
            *(_QWORD *)(v120 + v117) = 0;
            *(_QWORD *)v121 = v119;
            *((_QWORD *)v121 + 1) = v110;
LABEL_131:
            swift_bridgeObjectRetain();
            sub_1B2228428();
            swift_release();
            sub_1B1B429AC(v120);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            v96 = v256;
            v97 = v258;
            goto LABEL_132;
          }
LABEL_120:
          swift_bridgeObjectRetain();
          v97 = v258;
          goto LABEL_132;
        }
        sub_1B19F8C58(v285, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        sub_1B1C45B38((uint64_t)v285);
      }
      else
      {
        *(_QWORD *)&v279 = 0x2074736E6F63;
        *((_QWORD *)&v279 + 1) = 0xE600000000000000;
        sub_1B19FA278((uint64_t)v285, (uint64_t)&v289);
        if (v290 >= 0x3B)
        {
          v259 = v101;
          v122 = *(_QWORD *)(v291 + 16);
          sub_1B19F8C58(v285, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
          if (!v122 || (sub_1B1DC3C04(0), (v123 & 1) == 0))
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v283 = 0;
            v284 = 0xE000000000000000;
            v243 = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v283 = 0xD00000000000001BLL;
            v284 = v239;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2228890();
            v125 = v283;
            v126 = v284;
            v127 = sub_1B2228E9C();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v257 = (__int128 *)v100;
            v261 = v103;
            v128 = qword_1ED4D0FD0;
            v129 = qword_1ED4BF688;
            swift_retain();
            if (v129 != -1)
              swift_once();
            sub_1B1B42948();
            v130 = swift_allocObject();
            *(_OWORD *)(v130 + 16) = v254;
            *(_QWORD *)(v130 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v130 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v130 + 32) = v125;
            *(_QWORD *)(v130 + 40) = v126;
            swift_bridgeObjectRetain();
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v241 = v127;
            v131 = v246;
            sub_1B2228200();
            v132 = v250[12];
            v242 = v128;
            v133 = v250[16];
            v134 = v125;
            v120 = (uint64_t)v249;
            v135 = &v249[v250[20]];
            (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v249, v131, v248);
            *(_BYTE *)(v120 + v132) = v241;
            *(_QWORD *)(v120 + v133) = 0;
            *(_QWORD *)v135 = v134;
            *((_QWORD *)v135 + 1) = v126;
            goto LABEL_131;
          }
          goto LABEL_120;
        }
        sub_1B19F8C58(v285, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        sub_1B1C460C0((uint64_t)v285);
      }
LABEL_132:
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
LABEL_141:
      sub_1B19F8C58(v285, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
      swift_bridgeObjectRelease();
      v148 = v279;
      v99 = (_QWORD *)v262;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v99 = sub_1B1C63044(0, v99[2] + 1, 1, v99);
      v150 = v99[2];
      v149 = v99[3];
      if (v150 >= v149 >> 1)
        v99 = sub_1B1C63044(v149 > 1, v150 + 1, 1, v99);
      v98 = (_QWORD *)((char *)v98 + 1);
      v99[2] = v150 + 1;
      *(_OWORD *)&v99[2 * v150 + 4] = v148;
      swift_release();
      if (v97 == v98)
        goto LABEL_150;
    }
  }
  v99 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_150:
  swift_bridgeObjectRelease_n();
  v151 = *(_QWORD *)(v236 + 120);
  if (!(v151 >> 62))
  {
    v152 = *(_QWORD *)((v151 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    v262 = (uint64_t)v99;
    if (v152)
      goto LABEL_152;
LABEL_168:
    v264 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_169;
  }
  swift_bridgeObjectRetain_n();
  v152 = sub_1B22296AC();
  v262 = (uint64_t)v99;
  if (!v152)
    goto LABEL_168;
LABEL_152:
  v153 = 0;
  v264 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    if ((v151 & 0xC000000000000001) != 0)
    {
      v154 = MEMORY[0x1B5E21018](v153, v151);
    }
    else
    {
      v154 = *(_QWORD *)(v151 + 8 * v153 + 32);
      swift_retain();
    }
    swift_bridgeObjectRetain();
    v155 = sub_1B1FC0A9C();
    v157 = v156;
    swift_bridgeObjectRelease();
    sub_1B19FA278(v154 + 56, (uint64_t)&v283);
    sub_1B19F8C58(&v283, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v158 = sub_1B1C4C1B4(v155, v157, (uint64_t)&v283, v265);
    v160 = v159;
    sub_1B19F8C58(&v283, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v161 = v264;
    else
      v161 = sub_1B1C63044(0, v264[2] + 1, 1, v264);
    v163 = v161[2];
    v162 = v161[3];
    if (v163 >= v162 >> 1)
      v161 = sub_1B1C63044(v162 > 1, v163 + 1, 1, v161);
    ++v153;
    v161[2] = v163 + 1;
    v264 = v161;
    v164 = &v161[2 * v163];
    v164[4] = v158;
    v164[5] = v160;
    swift_release();
  }
  while (v152 != v153);
LABEL_169:
  swift_bridgeObjectRelease_n();
  if ((v244 & 1) != 0 && (v237 & 1) != 0)
  {
    *((_QWORD *)&v280 + 1) = MEMORY[0x1E0DEA968];
    *(_QWORD *)&v279 = 0;
    *((_QWORD *)&v279 + 1) = 0xE000000000000000;
    v165 = v251;
    sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v279, v278);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v279);
    sub_1B1A0DDAC(v278, &v279);
    swift_dynamicCast();
    v166 = sub_1B1FC0A9C();
    v168 = v167;
    v169 = (uint64_t)v255;
  }
  else
  {
    v169 = (uint64_t)v255;
    swift_bridgeObjectRetain();
    v166 = sub_1B1FC0A9C();
    v168 = v170;
    v165 = v251;
  }
  swift_bridgeObjectRelease();
  v171 = *v253;
  v172 = *(_QWORD *)(*v253 + 48);
  if ((v244 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v173 = v262;
    swift_bridgeObjectRetain();
    v174 = v264;
    swift_bridgeObjectRetain();
    sub_1B1C3A3C4(v166, v168, v172, v173, (uint64_t)v174, 0, 0, 1, 1, v265);
  }
  else
  {
    v175 = *(_BYTE *)(v171 + 41);
    swift_bridgeObjectRetain();
    v176 = v262;
    swift_bridgeObjectRetain();
    v177 = v264;
    swift_bridgeObjectRetain();
    sub_1B1C39FB4(v166, v168, v172, v176, (uint64_t)v177, 0, 0, 0, 1, v175, v265);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v178 = *(_QWORD **)(v171 + 128);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v171 + 128) = v178;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v178 = sub_1B1C63044(0, v178[2] + 1, 1, v178);
    *(_QWORD *)(v171 + 128) = v178;
  }
  v181 = v178[2];
  v180 = v178[3];
  if (v181 >= v180 >> 1)
  {
    v178 = sub_1B1C63044(v180 > 1, v181 + 1, 1, v178);
    *(_QWORD *)(v171 + 128) = v178;
  }
  v178[2] = v181 + 1;
  v182 = &v178[2 * v181];
  v182[4] = 0;
  v182[5] = 0xE000000000000000;
  swift_release();
  v183 = *(_QWORD *)(v171 + 112);
  if (v183 >> 62)
  {
    swift_bridgeObjectRetain();
    v184 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v184 = *(_QWORD *)((v183 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v185 = v271;
  if (v271 >> 62)
  {
    swift_bridgeObjectRetain();
    v186 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v186 = *(_QWORD *)((v271 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v256 = v185;
  v257 = (__int128 *)(v171 + 24);
  if (v186 >= v184)
    goto LABEL_196;
  v187 = *(_QWORD *)(v171 + 112);
  if (v187 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v188 = sub_1B22296AC();
    if (v188)
    {
LABEL_187:
      v189 = 0;
      do
      {
        if ((v187 & 0xC000000000000001) != 0)
        {
          v190 = MEMORY[0x1B5E21018](v189, v187);
        }
        else
        {
          v190 = *(_QWORD *)(v187 + 8 * v189 + 32);
          swift_retain();
        }
        ++v189;
        *(_QWORD *)&v279 = v190;
        v191 = v260;
        sub_1B1D39A80((uint64_t *)&v279, (uint64_t)&v271, (uint64_t)&v272, v165, v265, v253);
        v260 = v191;
        swift_release();
      }
      while (v188 != v189);
    }
  }
  else
  {
    v188 = *(_QWORD *)((v187 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v188)
      goto LABEL_187;
  }
  swift_bridgeObjectRelease_n();
LABEL_196:
  v192 = v257[1];
  v279 = *v257;
  v280 = v192;
  v193 = v257[3];
  v281 = v257[2];
  v282 = v193;
  v194 = *(_QWORD *)(v171 + 88);
  v195 = *(_QWORD *)(v171 + 96);
  swift_retain();
  sub_1B1D3AEF8((uint64_t)&v279);
  swift_bridgeObjectRetain();
  v196 = sub_1B1B7DF34(MEMORY[0x1E0DEE9D8]);
  v197 = *(_BYTE *)(v171 + 161);
  _s7ContextC14GenerationDataCMa();
  swift_allocObject();
  v198 = (_QWORD *)sub_1B1DEAFE0(v165, &v279, v194, v195, (uint64_t)v196, v197);
  v270 = v198;
  sub_1B1DDE510((uint64_t)&v270, v169, v240);
  v258 = v198;
  v199 = v198[16];
  if (*(_QWORD *)(v199 + 16))
  {
    *(_QWORD *)&v278[0] = v199;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B19FA230();
    swift_bridgeObjectRetain();
    v200 = sub_1B2228644();
    v202 = v201;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v278[0] = v200;
    *((_QWORD *)&v278[0] + 1) = v202;
    sub_1B2228890();
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v259 = v171;
  *(_QWORD *)&v278[0] = *(_QWORD *)(v171 + 128);
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v204 = v203;
  v205 = (uint64_t *)sub_1B19FA230();
  swift_bridgeObjectRetain();
  v253 = v205;
  *(_QWORD *)&v254 = v204;
  sub_1B2228644();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v206 = v263;
  v207 = v263[2];
  if (v207)
  {
    swift_bridgeObjectRetain();
    v208 = v206 + 5;
    v209 = v259;
    do
    {
      v218 = *v208;
      if (*v208)
      {
        v261 = v207;
        v219 = (_QWORD *)*(v208 - 1);
        v220 = v219[4];
        v268 = v219[3];
        v269 = v220;
        v266 = 46;
        v267 = 0xE100000000000000;
        sub_1B1A06460();
        swift_retain_n();
        swift_retain();
        swift_bridgeObjectRetain();
        if ((sub_1B2229274() & 1) != 0)
        {
          swift_bridgeObjectRetain();
          v221 = swift_bridgeObjectRetain();
          v222 = v260;
          sub_1B1D3AAB0(v221);
          v260 = v222;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        sub_1B19FA278((uint64_t)(v219 + 7), (uint64_t)v277);
        v210 = v219[5];
        v211 = v219[6];
        sub_1B19FA278(v218 + 56, (uint64_t)v278);
        swift_retain();
        sub_1B19F8C58(v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        swift_bridgeObjectRetain();
        sub_1B19F8C58(v278, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
        swift_bridgeObjectRetain();
        v212 = sub_1B1FC0A9C();
        v214 = v213;
        swift_release();
        swift_bridgeObjectRelease();
        swift_retain();
        v215 = sub_1B1DFBC64(v277, v210, v211, (uint64_t)v278, v212, v214, v265, 0, v209);
        v217 = v216;
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B19F8C58(v278, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        swift_bridgeObjectRelease();
        sub_1B19F8C58(v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
        swift_bridgeObjectRelease();
        v268 = v215;
        v269 = v217;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release_n();
        v207 = v261;
      }
      v208 += 2;
      --v207;
    }
    while (v207);
    swift_bridgeObjectRelease();
    v169 = (uint64_t)v255;
  }
  v223 = v258;
  v258[16] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  sub_1B1DDE504((uint64_t)&v270, v169, v240);
  sub_1B1DDE2C8((uint64_t *)&v270, v169);
  v224 = v223[16];
  if (*(_QWORD *)(v224 + 16))
  {
    v268 = v224;
    swift_bridgeObjectRetain();
    v225 = sub_1B2228644();
    v227 = v226;
    swift_bridgeObjectRelease();
    v268 = v225;
    v269 = v227;
    sub_1B2228890();
  }
  v228 = (_QWORD *)v259;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v228[21] + 16))
  {
    v268 = v228[21];
    swift_bridgeObjectRetain();
    v229 = sub_1B2228644();
    v231 = v230;
    swift_bridgeObjectRelease();
    v268 = v229;
    v269 = v231;
    sub_1B2228890();
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if ((v244 & 1) != 0)
  {
    if (v265 > 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v232 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v232 & 1) == 0)
      {
        v268 = 8200317;
        v269 = 0xE300000000000000;
        sub_1B2228890();
        swift_bridgeObjectRelease();
      }
    }
  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v233 = swift_allocObject();
  *(_OWORD *)(v233 + 16) = xmmword_1B226D240;
  v234 = v273;
  *(_QWORD *)(v233 + 32) = v272;
  *(_QWORD *)(v233 + 40) = v234;
  v228[16] = v233;
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  v228[14] = v256;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_218:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D396B0(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v7 = *a1;
  v6 = a1[1];
  v9 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  if (*(_BYTE *)(*(_QWORD *)a2 + 65) != 1)
  {
    swift_retain();
    goto LABEL_8;
  }
  if (!v10)
  {
LABEL_8:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v19 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    if (v19)
    {
      swift_bridgeObjectRetain();
      sub_1B1DC3B00(1701536102, 0xE400000000000000);
      v20 = v12;
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return swift_bridgeObjectRelease_n();
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
  }
LABEL_9:
  v14 = *(_QWORD *)(a4 + 264);
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_14;
  swift_bridgeObjectRetain();
  v15 = sub_1B1DC3B00(v9, v8);
  if ((v16 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    v17 = 0;
    goto LABEL_15;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_15:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *a3;
  *a3 = 0x8000000000000000;
  sub_1B1B881C0(v17, v7, v6, isUniquelyReferenced_nonNull_native);
  *a3 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B1D3989C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _OWORD v10[2];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v13 = 0;
  v14 = 0xE000000000000000;
  swift_weakLoadStrong();
  v12 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v11 = 0;
  *((_QWORD *)&v11 + 1) = 0xE000000000000000;
  sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v11, v10);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v11);
  sub_1B1A0DDAC(v10, &v11);
  swift_dynamicCast();
  swift_release();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v4 = v13;
  v3 = v14;
  swift_weakLoadStrong();
  v5 = sub_1B1FB3620();
  swift_release();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v6 = swift_bridgeObjectRetain();
    v7 = sub_1B1D3A2E8(v6, v4, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    result = swift_release();
    if (v7)
      return result;
  }
  v9 = swift_retain();
  MEMORY[0x1B5E2064C](v9);
  if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1B2228AF4();
  sub_1B2228B30();
  return sub_1B2228AD0();
}

uint64_t sub_1B1D39A80(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a1;
  swift_weakLoadStrong();
  v7 = MEMORY[0x1E0DEA968];
  v24 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = 0xE000000000000000;
  sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v23, v22);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v23);
  sub_1B1A0DDAC(v22, &v23);
  swift_dynamicCast();
  swift_release();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_weakLoadStrong();
  v24 = v7;
  *(_QWORD *)&v23 = 0;
  *((_QWORD *)&v23 + 1) = 0xE000000000000000;
  sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v23, v22);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v23);
  sub_1B1A0DDAC(v22, &v23);
  swift_dynamicCast();
  swift_release();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v8 = swift_bridgeObjectRetain();
  v9 = sub_1B1D3A1C0(v8, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRetain();
  v10 = swift_bridgeObjectRetain();
  v11 = sub_1B1D3A2E8(v10, 0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (v9)
  {
    v12 = v9;
  }
  else
  {
    swift_retain();
    v12 = v11;
  }
  v14 = *(_QWORD *)(v6 + 40);
  v13 = *(_QWORD *)(v6 + 48);
  if (v14 == *(_QWORD *)(v12 + 40) && v13 == *(_QWORD *)(v12 + 48) || (sub_1B2229D24() & 1) != 0)
  {
    swift_retain();
    swift_release();
  }
  else
  {
    sub_1B19FA278(v6 + 56, (uint64_t)v22);
    sub_1B19FA278(v12 + 56, (uint64_t)&v23);
    swift_retain();
    sub_1B19F8C58(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    swift_bridgeObjectRetain();
    sub_1B19F8C58(&v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    swift_retain();
    swift_bridgeObjectRetain();
    v15 = sub_1B1FC0A9C();
    v17 = v16;
    swift_release();
    swift_bridgeObjectRelease();
    v18 = *a6;
    swift_retain();
    v25 = sub_1B1DFBC64(v22, v14, v13, (uint64_t)&v23, v15, v17, a5, 1, v18);
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B19F8C58(&v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    swift_bridgeObjectRelease();
    sub_1B19F8C58(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_release();
}

uint64_t sub_1B1D39EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  _OWORD v7[2];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v10 = 0;
  v11 = 0xE000000000000000;
  swift_weakLoadStrong();
  v9 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v8 = 0;
  *((_QWORD *)&v8 + 1) = 0xE000000000000000;
  sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v8, v7);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v8);
  sub_1B1A0DDAC(v7, &v8);
  swift_dynamicCast();
  swift_release();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if (v10 == a2 && v11 == a3)
    v5 = 1;
  else
    v5 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1B1D3A06C(uint64_t a1)
{
  uint64_t v2;
  char v4[40];

  swift_allocObject();
  sub_1B19FA198(a1, (uint64_t)v4);
  v2 = sub_1B1FB9F2C(v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  return v2;
}

uint64_t sub_1B1D3A0E0()
{
  sub_1B1FBAA08();
  return swift_deallocClassInstance();
}

uint64_t _s11ContextExitCMa()
{
  return objc_opt_self();
}

unint64_t sub_1B1D3A11C()
{
  return sub_1B1D36EC0();
}

uint64_t sub_1B1D3A13C()
{
  sub_1B2228854();
  return sub_1B2228974();
}

uint64_t sub_1B1D3A1C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;

  if (!(a1 >> 62))
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1B22296AC();
  if (!v7)
    goto LABEL_10;
LABEL_3:
  v8 = 0;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v9 = MEMORY[0x1B5E21018](v8, a1);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 8 * v8 + 32);
      swift_retain();
    }
    v12 = v9;
    v10 = sub_1B1D39EE0((uint64_t)&v12, a2, a3);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return v9;
    }
    if ((v10 & 1) != 0)
      break;
    swift_release();
    if (v7 == ++v8)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B1D3A2E8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[3];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[4];
  _OWORD v43[2];
  uint64_t v44;
  unint64_t v45;
  _QWORD v46[6];
  uint64_t v47;

  v3 = a3;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = a3;
    v6 = sub_1B22296AC();
    if (v6)
      goto LABEL_3;
LABEL_39:
    swift_bridgeObjectRelease();
    return 0;
  }
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_39;
LABEL_3:
  v47 = v3;
  v7 = 0;
  v30 = MEMORY[0x1E0DEE9B8] + 8;
  v31 = v6;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v8 = MEMORY[0x1B5E21018](v7, a1);
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8 * v7 + 32);
      swift_retain();
    }
    v44 = 0;
    v45 = 0xE000000000000000;
    Strong = swift_weakLoadStrong();
    v42[3] = MEMORY[0x1E0DEA968];
    v42[0] = 0;
    v42[1] = 0xE000000000000000;
    v10 = *(_QWORD *)(Strong + 16);
    if (v10)
    {
      if (!*(_QWORD *)(v10 + 16))
        goto LABEL_9;
    }
    else
    {
      *(_QWORD *)(Strong + 16) = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
      v10 = *(_QWORD *)(Strong + 16);
      if (!*(_QWORD *)(v10 + 16))
      {
LABEL_9:
        if (v10)
          goto LABEL_10;
LABEL_15:
        *(_QWORD *)(Strong + 16) = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(1701667182, 0xE400000000000000);
    v13 = v12;
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      goto LABEL_22;
    if (!*(_QWORD *)(Strong + 16))
      goto LABEL_15;
LABEL_10:
    sub_1B1A02864((uint64_t)v42, (uint64_t)v43);
    memset((char *)v35 + 8, 0, 32);
    *(_QWORD *)&v32 = 1701667182;
    *((_QWORD *)&v32 + 1) = 0xE400000000000000;
    sub_1B1E0E5B0(v43, v46);
    sub_1B19FA278((uint64_t)v46, (uint64_t)&v33);
    sub_1B1B1F3E4((uint64_t)v35 + 8, (unint64_t *)&qword_1ED4BB150, v30);
    sub_1B1A0DDAC(v43, (_OWORD *)((char *)v35 + 8));
    v38 = v34;
    v39 = v35[0];
    v40 = v35[1];
    v41 = *(_QWORD *)&v35[2];
    v36 = v32;
    v37 = v33;
    if (*((_QWORD *)&v32 + 1))
    {
      v34 = v38;
      v35[0] = v39;
      v35[1] = v40;
      *(_QWORD *)&v35[2] = v41;
      v32 = v36;
      v33 = v37;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v43[0] = *(_QWORD *)(Strong + 16);
      *(_QWORD *)(Strong + 16) = 0x8000000000000000;
      sub_1B1B8440C((uint64_t)&v32, 1701667182, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(Strong + 16) = *(_QWORD *)&v43[0];
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B1F3E4((uint64_t)&v36, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
      swift_bridgeObjectRetain();
      v14 = sub_1B1DC3B00(1701667182, 0xE400000000000000);
      v16 = v15;
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
      {
        v17 = swift_isUniquelyReferenced_nonNull_native();
        v18 = *(_QWORD *)(Strong + 16);
        *(_QWORD *)&v43[0] = v18;
        *(_QWORD *)(Strong + 16) = 0x8000000000000000;
        if ((v17 & 1) == 0)
        {
          sub_1B1EA805C();
          v18 = *(_QWORD *)&v43[0];
        }
        swift_bridgeObjectRelease();
        v19 = *(_QWORD *)(v18 + 56) + 88 * v14;
        v20 = *(_OWORD *)(v19 + 16);
        v32 = *(_OWORD *)v19;
        v33 = v20;
        v22 = *(_OWORD *)(v19 + 48);
        v21 = *(_OWORD *)(v19 + 64);
        v23 = *(_OWORD *)(v19 + 32);
        *(_QWORD *)&v35[2] = *(_QWORD *)(v19 + 80);
        v35[0] = v22;
        v35[1] = v21;
        v34 = v23;
        sub_1B1EA4748(v14, v18);
        *(_QWORD *)(Strong + 16) = v18;
        swift_bridgeObjectRelease();
      }
      else
      {
        memset(v35, 0, 40);
        v33 = 0u;
        v34 = 0u;
        v32 = 0u;
      }
      sub_1B1B1F3E4((uint64_t)&v32, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
    }
LABEL_22:
    v24 = *(_QWORD *)(Strong + 16);
    if (!v24)
      goto LABEL_30;
    if (!*(_QWORD *)(v24 + 16))
    {
      v41 = 0;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v36 = 0u;
      swift_bridgeObjectRetain();
LABEL_29:
      sub_1B1B1F3E4((uint64_t)&v36, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
      swift_bridgeObjectRelease();
LABEL_30:
      memset(v43, 0, sizeof(v43));
      goto LABEL_31;
    }
    swift_bridgeObjectRetain();
    v25 = sub_1B1DC3B00(1701667182, 0xE400000000000000);
    if ((v26 & 1) == 0)
    {
      v41 = 0;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v36 = 0u;
      goto LABEL_29;
    }
    sub_1B19F8F0C(*(_QWORD *)(v24 + 56) + 88 * v25, (uint64_t)&v36);
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_29;
    sub_1B19F8F0C((uint64_t)&v36, (uint64_t)&v32);
    sub_1B1B1F3E4((uint64_t)&v36, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
    swift_bridgeObjectRelease();
    sub_1B1A0DCD4((uint64_t)v35 + 8, (uint64_t)v43);
    sub_1B1A203C4((uint64_t)&v32);
LABEL_31:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v42);
    sub_1B1A0DDAC(v43, &v36);
    swift_dynamicCast();
    swift_release();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    if (v44 == a2 && v45 == v47)
      break;
    v27 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0)
      goto LABEL_37;
    swift_release();
    if (v31 == ++v7)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
LABEL_37:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1D3A888(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27[5];
  uint64_t v28;

  v28 = a4;
  v5 = v4;
  v26 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = 0;
  if (!v11)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  v15 = v14 | (v13 << 6);
  while (1)
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v15);
    v19 = *v18;
    v20 = v18[1];
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 24 * v15);
    v22 = *v21;
    v23 = v21[1];
    v24 = v21[2];
    v27[0] = v19;
    v27[1] = v20;
    v27[2] = v22;
    v27[3] = v23;
    v27[4] = v24;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1D396B0(v27, a2, a3, v28);
    if (v5)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_4;
LABEL_5:
    v16 = v13 + 1;
    if (v13 + 1 >= v12)
      return swift_release();
    v17 = *(_QWORD *)(v26 + 8 * v16);
    if (!v17)
    {
      v16 = v13 + 2;
      if (v13 + 2 >= v12)
        return swift_release();
      v17 = *(_QWORD *)(v26 + 8 * v16);
      if (!v17)
      {
        v16 = v13 + 3;
        if (v13 + 3 >= v12)
          return swift_release();
        v17 = *(_QWORD *)(v26 + 8 * v16);
        if (!v17)
        {
          v16 = v13 + 4;
          if (v13 + 4 >= v12)
            return swift_release();
          v17 = *(_QWORD *)(v26 + 8 * v16);
          if (!v17)
          {
            v16 = v13 + 5;
            if (v13 + 5 >= v12)
              return swift_release();
            v17 = *(_QWORD *)(v26 + 8 * v16);
            if (!v17)
            {
              while (v12 - 6 != v13)
              {
                v17 = *(_QWORD *)(a1 + 8 * v13++ + 112);
                if (v17)
                {
                  v16 = v13 + 5;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v13 = v16;
  }
}

uint64_t sub_1B1D3AAB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  unint64_t v16;

  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    return 0;
  v1 = 0;
  for (i = a1 + 80; ; i += 64)
  {
    v4 = *(_QWORD *)(i - 48);
    v3 = *(_QWORD *)(i - 40);
    v5 = *(_QWORD *)(i - 32);
    v6 = *(_QWORD *)(i - 24);
    swift_bridgeObjectRetain();
    v16 = v6;
    sub_1B19FA2B4(v5, v6);
    sub_1B1A06460();
    v7 = (_QWORD *)sub_1B2229280();
    if (v7[2])
    {
      v9 = v7[4];
      v8 = v7[5];
      v11 = v7[6];
      v10 = v7[7];
      swift_bridgeObjectRetain();
    }
    else
    {
      v9 = 0;
      v8 = 0;
      v11 = 0;
      v10 = 0;
    }
    swift_bridgeObjectRelease();
    v12 = (v3 & 0x2000000000000000) != 0 ? HIBYTE(v3) & 0xF : v4 & 0xFFFFFFFFFFFFLL;
    if (v4 == v11 && v10 == v3 && !(v9 >> 16) && v12 == v8 >> 16)
      break;
    v13 = sub_1B22299F4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B19F9FEC(v5, v16);
    if ((v13 & 1) != 0)
      return v1;
    if (v15 == ++v1)
      return 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B19F9FEC(v5, v16);
  return v1;
}

uint64_t sub_1B1D3AC94(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t result;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;

  sub_1B1A06460();
  swift_bridgeObjectRetain();
  if ((sub_1B2229274() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1B1D3AAB0(v4);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v7 & 1) != 0)
  {
LABEL_8:
    swift_retain();
    sub_1B1E8E440(a1);
    return swift_release();
  }
  v8 = v5 << 6;
  v9 = *a2 + (v5 << 6);
  v10 = *(_QWORD *)(v9 + 48);
  v11 = *(_QWORD *)(v9 + 56);
  v12 = *(_BYTE *)(v9 + 88);
  swift_bridgeObjectRetain();
  sub_1B19FA2B4(v10, v11);
  swift_bridgeObjectRelease();
  result = sub_1B19F9FEC(v10, v11);
  if ((v12 & 1) != 0)
    return result;
  v14 = (_QWORD *)*a2;
  v15 = (_QWORD *)(*a2 + v8);
  v16 = v15[5];
  v27 = v15[4];
  v17 = v15[6];
  v18 = v15[7];
  v20 = v15[8];
  v19 = v15[9];
  v21 = v15[10];
  swift_bridgeObjectRetain();
  v28 = v18;
  sub_1B19FA2B4(v17, v18);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v14 = sub_1B1FFEF60(v14);
  *((_BYTE *)v14 + v8 + 88) = 1;
  *a2 = v14;
  v23 = sub_1B1D3724C();
  v25 = v24;
  _s11ParameterInCMa();
  v26 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  v26[3] = v27;
  v26[4] = v16;
  v26[5] = v23;
  v26[6] = v25;
  v26[7] = v17;
  v26[8] = v28;
  v26[9] = v20;
  v26[10] = v19;
  v26[11] = v21;
  swift_retain();
  sub_1B1E8E440((uint64_t)v26);
  swift_release();
  return swift_release();
}

uint64_t sub_1B1D3AEF8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1D3AF48(uint64_t a1, uint64_t a2)
{
  _s12MetadataTypeOwta(a2, a1);
  return a2;
}

uint64_t _s12ChunkFiltersVwet(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t _s12ChunkFiltersVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

ValueMetadata *_s12ChunkFiltersVMa()
{
  return &_s12ChunkFiltersVN;
}

uint64_t sub_1B1D3B018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a7 + 8) + 88))(a2, a3, a6, *(_QWORD *)(a7 + 8));
  if ((result & 1) != 0)
  {
    v10 = v7[24];
    if (v10)
    {
      v11 = v7[26];
      v12 = 8 * (a1 >> 6);
      *(_QWORD *)(v10 + v12) |= 1 << a1;
      *(_QWORD *)(v11 + v12) &= ~(1 << a1);
    }
    return sub_1B1FE2568(v7[5], (uint64_t)v7, a1);
  }
  return result;
}

unint64_t sub_1B1D3B0BC(char a1)
{
  _QWORD *v1;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  int8x16_t *v9;
  int8x16_t *v10;
  unint64_t v11;
  int8x16_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;

  result = v1[24];
  if (result && a1 == 1)
  {
    v4 = v1[26];
    v5 = v1[27] + 63;
    if (v5 <= 127)
      v6 = 1;
    else
      v6 = v5 >> 6;
    if (v6 < 6 || (result + 8 * v6 > v4 ? (v7 = v4 + 8 * v6 > result) : (v7 = 0), v7))
    {
      v8 = 0;
    }
    else
    {
      v8 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      v9 = (int8x16_t *)(v4 + 16);
      v10 = (int8x16_t *)(result + 16);
      v11 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v12 = vorrq_s8(*v10, *v9);
        v9[-1] = vorrq_s8(v10[-1], v9[-1]);
        *v9 = v12;
        v9 += 2;
        v10 += 2;
        v11 -= 4;
      }
      while (v11);
      if (v6 == v8)
        return result;
    }
    v13 = v6 - v8;
    v14 = 8 * v8;
    v15 = (uint64_t *)(result + 8 * v8);
    v16 = (_QWORD *)(v4 + v14);
    do
    {
      v17 = *v15++;
      *v16++ |= v17;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_1B1D3B184(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  v7 = 1 << result;
  v8 = 8 * (result >> 6);
  *(_QWORD *)(a5 + v8) |= 1 << result;
  if (a4 == 3 && a2 == 2 && !a3)
    *(_QWORD *)(a7 + v8) |= v7;
  else
    *(_QWORD *)(a7 + v8) &= ~v7;
  return result;
}

uint64_t sub_1B1D3B1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 + 8) + 88))(a2, a3, a4);
  if ((result & 1) != 0)
  {
    v8 = v5[24];
    if (v8)
    {
      v9 = v5[26];
      v10 = 8 * (a1 >> 6);
      *(_QWORD *)(v8 + v10) |= 1 << a1;
      *(_QWORD *)(v9 + v10) &= ~(1 << a1);
    }
    return sub_1B1FE2568(v5[5], (uint64_t)v5, a1);
  }
  return result;
}

BOOL sub_1B1D3B27C(uint64_t a1, char a2)
{
  _QWORD *v2;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  BOOL v13;

  v5 = *(unsigned __int8 *)(v2[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState);
  v6 = swift_retain();
  if (v5 == 4)
  {
    v7 = *(_BYTE *)(v6 + 225);
    v8 = *(_QWORD *)(v6 + 216);
    swift_release();
    v9 = v8 > 1;
    if ((v7 & 1) == 0)
      v9 = v8 > 0;
    v10 = v2[24];
    if (v10)
      goto LABEL_5;
    return 0;
  }
  swift_release();
  v9 = 1;
  v10 = v2[24];
  if (!v10)
    return 0;
LABEL_5:
  v11 = *(_QWORD *)(v10 + 8 * (a1 >> 6)) & (1 << a1);
  result = v11 != 0;
  if (a2 != 2)
    v9 = a2 == 1;
  if (v11)
    v13 = !v9;
  else
    v13 = 1;
  if (!v13)
  {
    *(_QWORD *)(v2[26] + 8 * (a1 >> 6)) |= 1 << a1;
    return 1;
  }
  return result;
}

uint64_t sub_1B1D3B360()
{
  return swift_initClassMetadata2();
}

BOOL sub_1B1D3B3B0()
{
  uint64_t v0;

  sub_1B222826C();
  swift_getFunctionTypeMetadata1();
  sub_1B1D3B59C();
  swift_bridgeObjectRetain();
  v0 = sub_1B2228578();
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t sub_1B1D3B43C()
{
  sub_1B222826C();
  swift_getFunctionTypeMetadata1();
  sub_1B1D3B59C();
  sub_1B22285A8();
  return sub_1B222859C();
}

uint64_t sub_1B1D3B4B0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EventSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventSource);
}

uint64_t sub_1B1D3B4E8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1B1D3B528()
{
  return sub_1B1D3B438() & 1;
}

uint64_t sub_1B1D3B54C()
{
  return sub_1B1D3B43C();
}

uint64_t sub_1B1D3B56C()
{
  uint64_t v0;

  sub_1B19E5A18(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DelegateEventSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelegateEventSource);
}

unint64_t sub_1B1D3B59C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4B7B38;
  if (!qword_1ED4B7B38)
  {
    v1 = sub_1B222826C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB09C8], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4B7B38);
  }
  return result;
}

uint64_t sub_1B1D3B5E4()
{
  return sub_1B222841C();
}

id sub_1B1D3B604()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 24);
  objc_msgSend(v1, sel_lock);
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_1B1D3BB0C(v0 + 32, (uint64_t)&v11);
    if (v12)
    {
      sub_1B1A02518(&v11, (uint64_t)v13);
      v2 = v14;
      v3 = v15;
      sub_1B19FA070(v13, v14);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3) & 1) == 0)
      {
        v4 = v14;
        v5 = v15;
        sub_1B19FC264((uint64_t)v13, v14);
        (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
    }
    else
    {
      sub_1B1A04628((uint64_t)&v11, (uint64_t (*)(_QWORD))sub_1B1D3BB50);
    }
    sub_1B1D3BB0C(v0 + 72, (uint64_t)&v11);
    if (v12)
    {
      sub_1B1A02518(&v11, (uint64_t)v13);
      v6 = v14;
      v7 = v15;
      sub_1B19FA070(v13, v14);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7) & 1) == 0)
      {
        v8 = v14;
        v9 = v15;
        sub_1B19FC264((uint64_t)v13, v14);
        (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
    }
    else
    {
      sub_1B1A04628((uint64_t)&v11, (uint64_t (*)(_QWORD))sub_1B1D3BB50);
    }
  }
  return objc_msgSend(v1, sel_unlock);
}

id (*sub_1B1D3B778(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_1B1D3B78C;
}

id sub_1B1D3B78C(uint64_t a1, char a2)
{
  id result;

  if ((a2 & 1) == 0)
    return sub_1B1D3B604();
  return result;
}

id sub_1B1D3B7B0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id (*v3)(uint64_t, char);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id (*v7)(uint64_t, char);
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v1 = *(void **)(v0 + 24);
  objc_msgSend(v1, sel_lock);
  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    v3 = sub_1B1D3B778(v11);
    v4 = *(_QWORD *)(v2 + 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v2 + 32);
      sub_1B19FC264(v2, *(_QWORD *)(v2 + 24));
      (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
    }
    v3((uint64_t)v11, 0);
    v7 = sub_1B1D3B778(v11);
    v8 = *(_QWORD *)(v6 + 64);
    if (v8)
    {
      v9 = *(_QWORD *)(v6 + 72);
      sub_1B19FC264(v6 + 40, *(_QWORD *)(v6 + 64));
      (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
    }
    v7((uint64_t)v11, 0);
    *(_BYTE *)(v0 + 16) = 1;
  }
  return objc_msgSend(v1, sel_unlock);
}

uint64_t sub_1B1D3B8A8()
{
  uint64_t v0;

  sub_1B1A04628(v0 + 32, (uint64_t (*)(_QWORD))sub_1B1D3BBF8);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CancelTuple()
{
  return objc_opt_self();
}

id sub_1B1D3B8FC()
{
  return sub_1B1D3B7B0();
}

id sub_1B1D3B91C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = *(void **)(v0 + 24);
  objc_msgSend(v2, sel_lock);
  if ((*(_BYTE *)(v0 + 16) & 1) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = *(_QWORD **)(v1 + 32);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + 32) = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v5 = sub_1B1FFEDE0(v5);
          *(_QWORD *)(v1 + 32) = v5;
        }
        v7 = &v5[5 * i];
        v8 = v7[7];
        v9 = v7[8];
        sub_1B19FC264((uint64_t)(v7 + 4), v8);
        (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
        objc_msgSend(v2, sel_lock);
        if (*(_BYTE *)(v1 + 16) == 1)
        {
          v10 = *(_QWORD **)(v1 + 32);
          v11 = v10[2];
          if (v11)
          {
            v12 = 0;
            do
            {
              v13 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v1 + 32) = v10;
              if ((v13 & 1) == 0)
              {
                v10 = sub_1B1FFEDE0(v10);
                *(_QWORD *)(v1 + 32) = v10;
              }
              v14 = v10[v12 + 7];
              v15 = v10[v12 + 8];
              sub_1B19FC264((uint64_t)&v10[v12 + 4], v14);
              (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
              v10 = *(_QWORD **)(v1 + 32);
              v12 += 5;
              --v11;
            }
            while (v11);
          }
        }
        objc_msgSend(v2, sel_unlock);
      }
    }
    *(_BYTE *)(v1 + 16) = 1;
  }
  return objc_msgSend(v2, sel_unlock);
}

uint64_t sub_1B1D3BA94()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CancelList()
{
  return objc_opt_self();
}

uint64_t sub_1B1D3BAE0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 16);
}

id sub_1B1D3BAEC()
{
  return sub_1B1D3B91C();
}

uint64_t sub_1B1D3BB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1D3BB50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1B1D3BB50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5DD80)
  {
    sub_1B1D3BBA4();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5DD80);
  }
}

unint64_t sub_1B1D3BBA4()
{
  unint64_t result;

  result = qword_1EEF5CB40;
  if (!qword_1EEF5CB40)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5CB40);
  }
  return result;
}

void sub_1B1D3BBF8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5DD88)
  {
    sub_1B1D3BB50();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5DD88);
  }
}

uint64_t sub_1B1D3BC5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  char v10;

  v2 = *(unsigned int *)(v1 + 28);
  v3 = *(unsigned int *)(v1 + 32);
  if ((_DWORD)v2 != -1 || (_DWORD)v3 != 0)
    return sub_1B20F26A4(v2 | (v3 << 32), &v10);
  if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
    return 0;
  v6 = *(_QWORD *)(v1 + 8);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_BYTE *)(v1 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_1B1E4D65C(v6, v7, v8);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v9;
}

uint64_t sub_1B1D3BD38(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F95E84(*a1, *a2);
}

uint64_t sub_1B1D3BD44()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D3BDEC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D3BE70()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D3BF14@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D3D200();
  *a1 = result;
  return result;
}

void sub_1B1D3BF40(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEB000000006E6F69;
  v4 = 0xE400000000000000;
  v5 = 1886216562;
  if (v2 != 1)
  {
    v5 = 0x4173746365666661;
    v4 = 0xEC0000006168706CLL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7469736F706D6F63;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B1D3BFA8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1886216562;
  if (*v0 != 1)
    v1 = 0x4173746365666661;
  if (*v0)
    return v1;
  else
    return 0x7469736F706D6F63;
}

uint64_t sub_1B1D3C00C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D3D200();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D3C030()
{
  sub_1B1D3DAF4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D3C058()
{
  sub_1B1D3DAF4();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1D3C080(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  float *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  char v89[4];
  uint64_t v90;
  uint64_t v91;
  char v92;
  unsigned __int8 v93;
  int v94;
  unsigned int v95;
  _OWORD v96[2];
  uint64_t v97;
  _OWORD v98[2];
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  int64x2_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[40];
  _QWORD v118[8];
  _OWORD v119[2];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _BYTE v129[40];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  __int16 v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int16 v144;
  char v145;
  char v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  swift_retain();
  v3 = a1[1];
  swift_retain();
  sub_1B1D17F28(v3, (uint64_t)&v130);
  swift_release();
  v4 = v131;
  if (v131)
  {
    v5 = v134;
    v7 = v132;
    v6 = v133;
    v87 = v130;
    v8 = (v133 >> 8) & 1;
    v9 = HIDWORD(v133);
  }
  else
  {
    sub_1B1D3D02C((uint64_t)v89);
    v87 = v89[0];
    v4 = v90;
    v7 = v91;
    v6 = v92;
    LODWORD(v8) = v93;
    LODWORD(v9) = v94;
    v5 = v95;
  }
  if ((_DWORD)v9 != -1 || (_DWORD)v5 != 0)
  {
    sub_1B20F03D8(v9 | (unint64_t)(v5 << 32), &v103);
    v12 = v103.i64[1];
    v11 = v103.i64[0];
    v13 = v104;
    v14 = v105;
    v15 = v106;
    v16 = v107;
    v17 = v108;
    v18 = v109;
    v19 = v110;
    v20 = v111;
    v21 = v112;
    v22 = v113;
    v23 = v114;
    v24 = v115;
    v25 = v116;
    if (v116)
      goto LABEL_9;
LABEL_34:
    swift_release();
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
    goto LABEL_34;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1E4D26C(v4, v7, v6, (uint64_t)&v103);
  v32 = v103;
  v68 = v104;
  v70 = v105;
  v72 = v106;
  v74 = v107;
  v63 = v108;
  v65 = v109;
  v59 = v111;
  v61 = v110;
  v33 = v112;
  v34 = v113;
  v35 = v114;
  v36 = v2;
  v37 = v115;
  v38 = v116;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v63;
  v18 = v65;
  v25 = v38;
  v24 = v37;
  v2 = v36;
  v23 = v35;
  v22 = v34;
  v21 = v33;
  v20 = v59;
  v19 = v61;
  v12 = v32.i64[1];
  v13 = v68;
  v11 = v32.i64[0];
  v14 = v70;
  v15 = v72;
  v16 = v74;
  if (!v25)
    goto LABEL_34;
LABEL_9:
  v57 = v2;
  v130 = v11;
  v131 = v12;
  v80 = v11;
  v132 = v13;
  LOBYTE(v133) = v14 & 1;
  v134 = v15;
  v135 = v16;
  v136 = BYTE2(v16) & 1;
  v137 = v17;
  v138 = v18;
  v139 = v19;
  v140 = v20;
  v141 = v21;
  v142 = v22;
  v143 = v23;
  v144 = v24;
  v145 = BYTE2(v24);
  v146 = BYTE3(v24);
  v147 = v25;
  v71 = v15;
  v73 = v16;
  v67 = v13;
  v69 = v14;
  v66 = v12;
  v26 = v22;
  v27 = v23;
  v28 = v25;
  v29 = v18;
  v30 = v17;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1EDFE20((uint64_t)&v130, 1, 1, (uint64_t)v117);
  v54 = v27;
  v55 = v26;
  v56 = v21;
  v58 = v20;
  v60 = v19;
  v62 = v30;
  v64 = v29;
  sub_1B1A0866C(v80, v66, v67, v69, v71, v73, v30, v29, v19, v20, v21, v26, v27, v24, v28);
  sub_1B1D3D1A4((uint64_t)v117, (uint64_t)&v126);
  if (*((_QWORD *)&v127 + 1) == 1)
  {
    sub_1B1A0866C(v80, v66, v67, v69, v71, v73, v30, v29, v19, v20, v21, v26, v27, v24, v28);
    swift_release();
    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  else
  {
    v53 = v24;
    v100 = v126;
    v101 = v127;
    v102 = v128;
    v39 = *(_OWORD *)(v86 + 32);
    v98[0] = *(_OWORD *)(v86 + 16);
    v98[1] = v39;
    v99 = *(_QWORD *)(v86 + 48);
    sub_1B1E8FCE4(v57, (uint64_t)v98, 0x200000000, v118);
    sub_1B19F66A0((uint64_t)v118, (uint64_t)v119, (unint64_t *)&qword_1ED4B7DE0);
    if (*(_QWORD *)&v119[0])
    {
      if (v125 <= 0)
      {
        sub_1B1A086DC(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
        sub_1B1A0866C(v80, v66, v67, v69, v71, v73, v30, v29, v19, v20, v21, v26, v27, v24, v28);
        swift_release();
        sub_1B1A086DC(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        swift_bridgeObjectRelease();
      }
      else
      {
        v79 = v122;
        if (v122)
        {
          v40 = *(_BYTE *)(v123 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v84 = v124[4];
          v85 = v124;
          v96[0] = v119[0];
          v96[1] = v119[1];
          v97 = v120;
          v77 = (uint64_t)(v124 + 6);
          v78 = v121;
          v76 = v124 + 8;
          swift_retain();
          swift_retain();
          swift_retain();
          v41 = 0;
          v42 = 0;
          v43 = v87;
          v75 = v40;
          do
          {
            v83 = v41;
            v44 = (unsigned int *)(v78 + 48 * v41);
            v82 = *v44;
            v81 = v44[1];
            v46 = (uint64_t *)*((_QWORD *)v44 + 2);
            v45 = *((_QWORD *)v44 + 3);
            v47 = *((_QWORD *)v44 + 4);
            v48 = *((_QWORD *)v44 + 5);
            v88 = v42;
            if ((v40 & 1) != 0)
            {
              v49 = *(os_unfair_lock_s **)(v48 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v49);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v48 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v84);
            sub_1B19F66A0(v77, (uint64_t)v129, &qword_1ED4B7FB0);
            v50 = v85[4];
            v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v85[6] = ecs_stack_allocator_allocate(v50, 48 * v51, 8);
            v85[7] = v51;
            v76[1] = 0;
            v76[2] = 0;
            *v76 = 0;
            swift_release();
            sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v46, v45, v47, (uint64_t)v85);
            v52 = (float *)sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, v46, v45, v47, (uint64_t)v85);
            if (v46)
            {
              v40 = v75;
              v42 = v88;
              if (v47)
              {
                (*((void (**)(__int128 *, float))&v101 + 1))(&v100, *v52);
                if ((_DWORD)v8)
                  __asm { BR              X8 }
                __asm { BR              X8 }
              }
            }
            else
            {
              v40 = v75;
              v42 = v88;
              if ((_DWORD)v82 != v81)
              {
                (*((void (**)(__int128 *, float))&v101 + 1))(&v100, v52[v82]);
                if ((_DWORD)v8)
                  __asm { BR              X8 }
                __asm { BR              X8 }
              }
            }
            sub_1B1F05D48(v85, (unsigned __int16 **)v96, (uint64_t)v129);
            sub_1B1F03804((char *)v48);
            ecs_stack_allocator_pop_snapshot(v84);
            if ((v40 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v48 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v48 + 376));
            }
            swift_release();
            v41 = v83 + 1;
          }
          while (v83 + 1 != v79);
          sub_1B1A0866C(v80, v66, v67, v69, v71, v73, v62, v64, v60, v58, v56, v55, v54, v53, v28);
          swift_release();
        }
        else
        {
          sub_1B1A086DC(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
          sub_1B1A0866C(v80, v66, v67, v69, v71, v73, v30, v29, v19, v20, v21, v26, v27, v24, v28);
          swift_release();
        }
        sub_1B1A086DC(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      return sub_1B1A086DC(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      sub_1B1A0866C(v80, v66, v67, v69, v71, v73, v30, v29, v19, v20, v21, v26, v27, v24, v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (_QWORD *)swift_release();
    }
  }
}

uint64_t type metadata accessor for ParticleColorOverLife.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1D3CC4C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  _QWORD v14[2];
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5DD90, (uint64_t (*)(void))sub_1B1D3DAF4, (uint64_t)&type metadata for ParticleColorOverLife.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v14 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D3DAF4();
  sub_1B222A180();
  v14[0] = *(_QWORD *)v3;
  v16 = 0;
  sub_1B1BA05CC();
  sub_1B2229958();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + 8);
    v12 = *(_BYTE *)(v3 + 24);
    v18 = *(_QWORD *)(v3 + 16);
    v17 = v11;
    v14[0] = v11;
    v14[1] = v18;
    v15 = v12;
    v16 = 1;
    sub_1B1D3DB7C(v3);
    sub_1B1D3DBB0();
    sub_1B2229958();
    sub_1B1B28C6C((uint64_t)&v17);
    sub_1B1B28C6C((uint64_t)&v18);
    LOBYTE(v14[0]) = 2;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1D3CE10(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 104);
  v8 = *(_OWORD *)(a1 + 88);
  v9 = v3;
  v10 = *(_QWORD *)(a1 + 120);
  sub_1B19F11C4((uint64_t)v6);
  sub_1B1B4F21C(a1);
  v4 = v6[1];
  *(_OWORD *)(v2 + 16) = v6[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B1D3CE94()
{
  return "ParticleColorOverLife";
}

double sub_1B1D3CEA8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  int v7;

  sub_1B1D3D754(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B1D3CEEC(_QWORD *a1)
{
  return sub_1B1D3CC4C(a1);
}

uint64_t sub_1B1D3CF24()
{
  return sub_1B1D3D248();
}

uint64_t sub_1B1D3CF5C()
{
  return type metadata accessor for ParticleColorOverLife.System();
}

uint64_t sub_1B1D3CF78(_BYTE *a1, _BYTE *a2)
{
  return (*a1 != 0) ^ (*a2 != 0);
}

double sub_1B1D3CF98@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  int v5;

  sub_1B1D3D02C((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = v5;
  return result;
}

uint64_t type metadata accessor for ParticleColorOverLife.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D3CFFC()
{
  return "ParticleColorOverLife.GPU";
}

uint64_t sub_1B1D3D010()
{
  return type metadata accessor for ParticleColorOverLife.GPUSystem();
}

double sub_1B1D3D02C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  simd_float4 v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  sub_1B1791524(0, (unint64_t *)&unk_1ED4BAF80, (uint64_t (*)(uint64_t))sub_1B1C71C08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CAD0;
  v3 = _simd_pow_f4((simd_float4)xmmword_1B228EE30, (simd_float4)xmmword_1B2268F30);
  v3.i32[3] = 0;
  *(simd_float4 *)(v2 + 32) = v3;
  *(_DWORD *)(v2 + 48) = 0;
  v4 = _simd_pow_f4((simd_float4)xmmword_1B228EE40, (simd_float4)xmmword_1B2268F30);
  v4.i32[3] = 1.0;
  *(simd_float4 *)(v2 + 64) = v4;
  *(_DWORD *)(v2 + 80) = 1048576000;
  v5 = _simd_pow_f4((simd_float4)xmmword_1B228EE50, (simd_float4)xmmword_1B2268F30);
  v5.i32[3] = 1.0;
  *(simd_float4 *)(v2 + 96) = v5;
  *(_DWORD *)(v2 + 112) = 1056964608;
  v6 = _simd_pow_f4((simd_float4)xmmword_1B228EE60, (simd_float4)xmmword_1B2268F30);
  v6.i32[3] = 1.0;
  *(simd_float4 *)(v2 + 128) = v6;
  *(_DWORD *)(v2 + 144) = 1061158912;
  v7 = _simd_pow_f4((simd_float4)xmmword_1B228EE70, (simd_float4)xmmword_1B2268F30);
  v7.i32[3] = 0;
  *(simd_float4 *)(v2 + 160) = v7;
  *(_DWORD *)(v2 + 176) = 1065353216;
  v8 = sub_1B1C512B4(v2);
  swift_setDeallocating();
  swift_deallocClassInstance();
  v9 = sub_1B2145310(v8);
  v11 = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 1065353216;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v11;
  *(_WORD *)(a1 + 24) = 257;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_1B1D3D1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, &qword_1ED4BB3F0, (uint64_t (*)(uint64_t))type metadata accessor for __vfx_sampler1d, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1D3D200()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B1D3D248()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t result;
  _QWORD *v3;

  v1 = *v0;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  result = swift_allocObject();
  if (v1)
  {
    *(_OWORD *)(result + 16) = xmmword_1B226CD10;
    *(_QWORD *)(result + 32) = &type metadata for TransientOriginColor;
    *(_QWORD *)(result + 40) = &off_1E639F7A8;
    *(_QWORD *)(result + 48) = &type metadata for Color;
    v3 = (_QWORD *)(result + 56);
  }
  else
  {
    *(_OWORD *)(result + 16) = xmmword_1B226D240;
    *(_QWORD *)(result + 32) = &type metadata for Color;
    v3 = (_QWORD *)(result + 40);
  }
  *v3 = &off_1E63BA190;
  return result;
}

uint64_t sub_1B1D3D2FC(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  void *v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  int v57;
  int v58;

  v2 = *(_OWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 112);
  v4 = *(_OWORD *)(a1 + 128);
  v48 = *(_OWORD *)(a1 + 96);
  v49 = v3;
  v50 = v4;
  v5 = *(_OWORD *)(a1 + 32);
  v43 = *(_OWORD *)(a1 + 16);
  v44 = v5;
  v6 = *(_OWORD *)(a1 + 64);
  v45 = *(_OWORD *)(a1 + 48);
  v46 = v6;
  v47 = v2;
  v7 = v43;
  swift_retain();
  sub_1B1D17F28(*((uint64_t *)&v43 + 1), (uint64_t)&v29);
  swift_release();
  v8 = v31;
  if (v31)
  {
    v9 = v34;
    v11 = v32;
    v10 = v33;
    v12 = v29;
    v13 = v30;
    v14 = (v33 >> 8) & 1;
    v15 = HIDWORD(v33);
  }
  else
  {
    sub_1B1D3D02C((uint64_t)v35);
    v12 = v35[0];
    v13 = v36;
    v8 = v37;
    v11 = v38;
    v10 = v39;
    LOBYTE(v14) = v40;
    LODWORD(v15) = v41;
    v9 = v42;
  }
  v51 = v12;
  v52 = v13;
  v53 = v8;
  v54 = v11;
  v55 = v10;
  v56 = v14;
  v57 = v15;
  v58 = v9;
  sub_1B1E5371C();
  v16 = sub_1B1E36538((uint64_t)&type metadata for ParticleAge);
  swift_release();
  if (v16 && (sub_1B1E5371C(), v17 = sub_1B1E36538((uint64_t)&type metadata for ParticleLifetime), swift_release(), v17))
  {
    v29 = v13;
    LOBYTE(v30) = v12;
    LOBYTE(v31) = v14;
    v18 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      ObjectType = swift_getObjectType();
      type metadata accessor for particle_color_over_life_uniforms(0);
      sub_1B1F40E1C((uint64_t)&v29, 1, ObjectType, v20, v21, v22, v23, v24);
    }
    v25 = swift_retain();
    v26 = sub_1B1D3BC5C(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
    if (v26)
    {
      if (v18)
        objc_msgSend(v18, sel_setTexture_atIndex_, v26, 0);
      v28 = v45;
      swift_retain();
      sub_1B1B1FC34(a1);
      sub_1B1FE6FB8(v28, v7, v18 == 0, 0, a1, 0xD000000000000018, 0x80000001B23396D0, 0);
      sub_1B1B1FC88(a1);
      swift_unknownObjectRelease();
      return swift_release();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ParticleColorOverLife(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleColorOverLife(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for ParticleColorOverLife(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ParticleColorOverLife(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleColorOverLife(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 36))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleColorOverLife(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 36) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverLife()
{
  return &type metadata for ParticleColorOverLife;
}

uint64_t sub_1B1D3D754@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  uint64_t v14;
  uint64_t v15;
  __int32 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  simd_float4 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  char v31;

  v24 = a2;
  sub_1B19F8E54(0, &qword_1ED4BABE0, (uint64_t (*)(void))sub_1B1D3DAF4, (uint64_t)&type metadata for ParticleColorOverLife.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v25 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v23 - v6;
  sub_1B1791524(0, (unint64_t *)&unk_1ED4BAF80, (uint64_t (*)(uint64_t))sub_1B1C71C08, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226CAD0;
  v27 = (simd_float4)xmmword_1B2268F30;
  v9 = _simd_pow_f4((simd_float4)xmmword_1B228EE30, (simd_float4)xmmword_1B2268F30);
  v9.i32[3] = 0;
  *(simd_float4 *)(v8 + 32) = v9;
  *(_DWORD *)(v8 + 48) = 0;
  v10 = _simd_pow_f4((simd_float4)xmmword_1B228EE40, v27);
  v10.i32[3] = 1.0;
  *(simd_float4 *)(v8 + 64) = v10;
  *(_DWORD *)(v8 + 80) = 1048576000;
  v11 = _simd_pow_f4((simd_float4)xmmword_1B228EE50, v27);
  v11.i32[3] = 1.0;
  *(simd_float4 *)(v8 + 96) = v11;
  *(_DWORD *)(v8 + 112) = 1056964608;
  v12 = _simd_pow_f4((simd_float4)xmmword_1B228EE60, v27);
  v12.i32[3] = 1.0;
  *(simd_float4 *)(v8 + 128) = v12;
  *(_DWORD *)(v8 + 144) = 1061158912;
  v13 = _simd_pow_f4((simd_float4)xmmword_1B228EE70, v27);
  v13.i32[3] = 0;
  *(simd_float4 *)(v8 + 160) = v13;
  *(_DWORD *)(v8 + 176) = 1065353216;
  v14 = sub_1B1C512B4(v8);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B2145310(v14);
  swift_bridgeObjectRelease();
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D3DAF4();
  v15 = v26;
  sub_1B222A150();
  if (v15)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
    sub_1B1BA0588();
    sub_1B2229814();
    v16 = v28;
    v17 = HIDWORD(v28);
    v31 = 1;
    sub_1B1D3DB38();
    sub_1B2229814();
    v27.i32[0] = v16;
    v19 = v28;
    v18 = v29;
    LODWORD(v26) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v28) = 2;
    v20 = sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v25);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v22 = v24;
    *v24 = v27.i8[0];
    *((_DWORD *)v22 + 1) = v17;
    *((_QWORD *)v22 + 1) = v19;
    *((_QWORD *)v22 + 2) = v18;
    v22[24] = v26;
    v22[25] = v20 & 1;
    *(_QWORD *)(v22 + 28) = 0xFFFFFFFFLL;
  }
  return result;
}

unint64_t sub_1B1D3DAF4()
{
  unint64_t result;

  result = qword_1ED4B9828;
  if (!qword_1ED4B9828)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228EDD4, &type metadata for ParticleColorOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9828);
  }
  return result;
}

unint64_t sub_1B1D3DB38()
{
  unint64_t result;

  result = qword_1ED4BA180;
  if (!qword_1ED4BA180)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9B3C, &type metadata for ColorRamp);
    atomic_store(result, (unint64_t *)&qword_1ED4BA180);
  }
  return result;
}

uint64_t sub_1B1D3DB7C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_1B1D3DBB0()
{
  unint64_t result;

  result = qword_1EEF5F580;
  if (!qword_1EEF5F580)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9B14, &type metadata for ColorRamp);
    atomic_store(result, (unint64_t *)&qword_1EEF5F580);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleColorOverLife.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1D3DC40 + 4 * byte_1B228EB75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1D3DC74 + 4 * byte_1B228EB70[v4]))();
}

uint64_t sub_1B1D3DC74(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D3DC7C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D3DC84);
  return result;
}

uint64_t sub_1B1D3DC90(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D3DC98);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1D3DC9C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D3DCA4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverLife.CodingKeys()
{
  return &type metadata for ParticleColorOverLife.CodingKeys;
}

unint64_t sub_1B1D3DCC4()
{
  unint64_t result;

  result = qword_1EEF5DD98;
  if (!qword_1EEF5DD98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228EDAC, &type metadata for ParticleColorOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DD98);
  }
  return result;
}

unint64_t sub_1B1D3DD0C()
{
  unint64_t result;

  result = qword_1ED4B9838;
  if (!qword_1ED4B9838)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228ECE4, &type metadata for ParticleColorOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9838);
  }
  return result;
}

unint64_t sub_1B1D3DD54()
{
  unint64_t result;

  result = qword_1ED4B9830;
  if (!qword_1ED4B9830)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228ED0C, &type metadata for ParticleColorOverLife.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9830);
  }
  return result;
}

void sub_1B1D3DD98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t updated;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t FrameWorldTransformSystem_vfx1;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t started;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t active;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t FrameWorldTransformSystem;
  uint64_t v104;
  uint64_t v105;

  v1 = a1;
  if ((a1 & 1) != 0)
  {
    v2 = type metadata accessor for EventDisposeSystem();
    sub_1B204CE78(v2, (uint64_t)&off_1E6391E38, 1, 0);
    v3 = type metadata accessor for InputClearSystem();
    sub_1B204CE78(v3, (uint64_t)&off_1E6387D18, 1, 0);
    v4 = type metadata accessor for HiddenSystem();
    sub_1B204CE78(v4, (uint64_t)&off_1E63758F0, 1, 0);
    updated = type metadata accessor for PrepareUpdateSystem();
    sub_1B204CE78(updated, (uint64_t)&off_1E6399DA8, 1, 0);
    v6 = type metadata accessor for RotateActionSystem();
    sub_1B204CE78(v6, (uint64_t)&off_1E6395C38, 1, 1);
    v7 = type metadata accessor for SineMoveSystem();
    sub_1B204CE78(v7, (uint64_t)&off_1E6381C30, 1, 1);
    v8 = type metadata accessor for RenderGraphSystem();
    sub_1B204CE78(v8, (uint64_t)&off_1E638F9F8, 1, 0);
    v9 = type metadata accessor for RenderGraphSystemCleanup();
    sub_1B204CE78(v9, (uint64_t)&off_1E63AF2D8, 1, 0);
    if ((v1 & 0xC0000000) == 0)
    {
      v10 = type metadata accessor for PreUpdateCameraSystem();
      sub_1B204CE78(v10, (uint64_t)&off_1E63748A8, 1, 0);
      v11 = type metadata accessor for PreRenderCameraSystem();
      sub_1B204CE78(v11, (uint64_t)&off_1E63748A8, 1, 0);
    }
    v12 = type metadata accessor for AnimationComputeLocalTimeSystem();
    sub_1B204CE78(v12, (uint64_t)&off_1E63B5FF0, 1, 1);
    v13 = type metadata accessor for BasicAnimationSystem();
    sub_1B204CE78(v13, (uint64_t)&off_1E639B1F8, 1, 1);
    v14 = type metadata accessor for KeyframeAnimationSystem();
    sub_1B204CE78(v14, (uint64_t)&off_1E63AA8C8, 1, 1);
    v15 = type metadata accessor for HierarchySystem();
    if ((v1 & 0x80000000) != 0)
      v15 = type metadata accessor for SimplifiedHierarchySystem();
    v16 = v15;
    sub_1B204CE78(v15, (uint64_t)&off_1E6383CC8, 1, 0);
    v17 = type metadata accessor for SmoothMotionSystem();
    sub_1B204CE78(v17, (uint64_t)&off_1E6395E98, 1, 1);
    sub_1B204D098(v17, (uint64_t)&off_1E6395E98, v16, (uint64_t)&off_1E6383CC8);
    v18 = type metadata accessor for StaticToFixedSystem();
    sub_1B204CE78(v18, (uint64_t)&off_1E639A980, 1, 0);
    if ((v1 & 0x80000000) == 0)
    {
      FrameWorldTransformSystem_vfx1 = type metadata accessor for LastFrameWorldTransformSystem_vfx1();
      sub_1B204CE78(FrameWorldTransformSystem_vfx1, (uint64_t)&off_1E63B4CD8, 1, 1);
      sub_1B204D098(v16, (uint64_t)&off_1E6383CC8, FrameWorldTransformSystem_vfx1, (uint64_t)&off_1E63B4CD8);
    }
    v20 = type metadata accessor for SkeletonAnimationSystem();
    sub_1B204CE78(v20, (uint64_t)&off_1E63ACC48, 1, 0);
    v21 = type metadata accessor for SkeletonSystem();
    sub_1B204CE78(v21, (uint64_t)&off_1E6381C80, 1, 0);
    sub_1B204D098(v21, (uint64_t)&off_1E6381C80, v16, (uint64_t)&off_1E6383CC8);
    v22 = type metadata accessor for SkinningSystem();
    sub_1B204CE78(v22, (uint64_t)&off_1E6381E38, 1, 0);
    v23 = type metadata accessor for UpdateWorldAABBSystem();
    sub_1B204CE78(v23, (uint64_t)&off_1E63A72E8, 1, 1);
    v24 = type metadata accessor for LODSystem();
    sub_1B204D098(v23, (uint64_t)&off_1E63A72E8, v24, (uint64_t)&off_1E63C4090);
    sub_1B204D098(v23, (uint64_t)&off_1E63A72E8, v16, (uint64_t)&off_1E6383CC8);
    if ((v1 & 0x10000000000) == 0)
    {
LABEL_3:
      if ((v1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((a1 & 0x10000000000) == 0)
  {
    goto LABEL_3;
  }
  v25 = type metadata accessor for GraphAuthoringSystem();
  sub_1B204CE78(v25, (uint64_t)&off_1E639B5C8, 1, 0);
  v26 = type metadata accessor for ReplicationStreamSystem();
  sub_1B204CE78(v26, (uint64_t)&off_1E63ACA90, 1, 0);
  if ((v1 & 4) == 0)
  {
LABEL_4:
    if ((v1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  started = type metadata accessor for StartCaptureSystem();
  sub_1B204CE78(started, (uint64_t)&off_1E6395EE8, 1, 0);
  v28 = type metadata accessor for StopCaptureSystem();
  sub_1B204CE78(v28, (uint64_t)&off_1E638FD60, 1, 0);
  if ((v1 & 8) == 0)
  {
LABEL_5:
    if ((v1 & 0x400) == 0)
      goto LABEL_29;
    goto LABEL_19;
  }
LABEL_16:
  v29 = type metadata accessor for ResourceUsageSystem();
  sub_1B204CE78(v29, (uint64_t)&off_1E639A5C0, 1, 0);
  v105 = type metadata accessor for MeshReferenceSystem();
  sub_1B204CE78(v105, (uint64_t)&off_1E6397F50, 1, 0);
  v30 = type metadata accessor for ColorRampSystem();
  sub_1B204CE78(v30, (uint64_t)&off_1E6383658, 1, 0);
  v31 = type metadata accessor for GraphScriptRunner();
  sub_1B204D098(v30, (uint64_t)&off_1E6383658, v31, (uint64_t)&off_1E638C7E8);
  v32 = type metadata accessor for CurveSystem();
  sub_1B204CE78(v32, (uint64_t)&off_1E636FF58, 1, 0);
  sub_1B204D098(v32, (uint64_t)&off_1E636FF58, v31, (uint64_t)&off_1E638C7E8);
  v33 = type metadata accessor for AssetCatalogSystem();
  sub_1B204CE78(v33, (uint64_t)&off_1E6390898, 1, 0);
  v34 = type metadata accessor for TextureSystem();
  sub_1B204CE78(v34, (uint64_t)&off_1E637D760, 1, 0);
  v35 = type metadata accessor for TextureClientPlaceholderSystem();
  sub_1B204CE78(v35, (uint64_t)&off_1E63B5EC8, 1, 0);
  sub_1B204D098(v34, (uint64_t)&off_1E637D760, v31, (uint64_t)&off_1E638C7E8);
  v36 = type metadata accessor for MovieSystem();
  sub_1B204CE78(v36, (uint64_t)&off_1E6371398, 1, 0);
  v37 = type metadata accessor for AudioSystem();
  sub_1B204CE78(v37, (uint64_t)&off_1E636F800, 1, 0);
  v38 = type metadata accessor for ShaderFileSystem();
  sub_1B204CE78(v38, (uint64_t)&off_1E638AC10, 1, 0);
  v39 = type metadata accessor for MaterialSystem();
  sub_1B204CE78(v39, (uint64_t)&off_1E637FB30, 1, 0);
  v40 = type metadata accessor for ScriptCompilerSystem();
  sub_1B204D098(v39, (uint64_t)&off_1E637FB30, v40, (uint64_t)&off_1E639F2E0);
  sub_1B204D098(v39, (uint64_t)&off_1E637FB30, v31, (uint64_t)&off_1E638C7E8);
  sub_1B204D098(v39, (uint64_t)&off_1E637FB30, v34, (uint64_t)&off_1E637D760);
  v41 = type metadata accessor for SceneKitAssetSystem();
  sub_1B204CE78(v41, (uint64_t)&off_1E639A8B0, 1, 0);
  v42 = type metadata accessor for TextureDownloadSystem();
  sub_1B204CE78(v42, (uint64_t)&off_1E63A6BA8, 1, 0);
  sub_1B204D098(v42, (uint64_t)&off_1E63A6BA8, v34, (uint64_t)&off_1E637D760);
  v43 = type metadata accessor for TextureDiscardSystem();
  sub_1B204CE78(v43, (uint64_t)&off_1E639F360, 1, 0);
  v104 = type metadata accessor for PointCacheGeneratorSystem();
  sub_1B204CE78(v104, (uint64_t)&off_1E63B1130, 1, 0);
  v44 = v1;
  v1 = type metadata accessor for PrimitiveGeneratorSystem();
  sub_1B204CE78(v1, (uint64_t)&off_1E63AF228, 1, 0);
  v45 = type metadata accessor for SceneFileSystem();
  sub_1B204CE78(v45, (uint64_t)&off_1E6385528, 1, 0);
  v46 = type metadata accessor for MeshFileSystem();
  sub_1B204CE78(v46, (uint64_t)&off_1E637FB80, 1, 0);
  sub_1B204D098(v46, (uint64_t)&off_1E637FB80, v105, (uint64_t)&off_1E6397F50);
  sub_1B204D098(v46, (uint64_t)&off_1E637FB80, v1, (uint64_t)&off_1E63AF228);
  if ((v44 & 0x40000000) == 0)
  {
    v47 = type metadata accessor for IBLGeneratorSystem();
    sub_1B204CE78(v47, (uint64_t)&off_1E63920F0, 1, 0);
    sub_1B204D098(v47, (uint64_t)&off_1E63920F0, v34, (uint64_t)&off_1E637D760);
  }
  v48 = type metadata accessor for SDFFileSystem();
  sub_1B204CE78(v48, (uint64_t)&off_1E637CE30, 1, 0);
  v49 = type metadata accessor for SDFGeneratorSystem();
  sub_1B204CE78(v49, (uint64_t)&off_1E6395C88, 1, 0);
  sub_1B204D098(v49, (uint64_t)&off_1E6395C88, v34, (uint64_t)&off_1E637D760);
  v50 = type metadata accessor for VideoCaptureSystem();
  sub_1B204CE78(v50, (uint64_t)&off_1E6396CF0, 1, 0);
  sub_1B204D098(v42, (uint64_t)&off_1E63A6BA8, v49, (uint64_t)&off_1E6395C88);
  sub_1B204D098(v105, (uint64_t)&off_1E6397F50, v45, (uint64_t)&off_1E6385528);
  sub_1B204D098(v39, (uint64_t)&off_1E637FB30, v105, (uint64_t)&off_1E6397F50);
  sub_1B204D098(v39, (uint64_t)&off_1E637FB30, v46, (uint64_t)&off_1E637FB80);
  sub_1B204D098(v39, (uint64_t)&off_1E637FB30, v1, (uint64_t)&off_1E63AF228);
  sub_1B204D098(v34, (uint64_t)&off_1E637D760, v105, (uint64_t)&off_1E6397F50);
  sub_1B204D098(v34, (uint64_t)&off_1E637D760, v46, (uint64_t)&off_1E637FB80);
  sub_1B204D098(v104, (uint64_t)&off_1E63B1130, v42, (uint64_t)&off_1E63A6BA8);
  sub_1B204D098(v104, (uint64_t)&off_1E63B1130, v46, (uint64_t)&off_1E637FB80);
  sub_1B204D098(v104, (uint64_t)&off_1E63B1130, v105, (uint64_t)&off_1E6397F50);
  LODWORD(v1) = v44;
  if ((v44 & 0x400) == 0)
  {
LABEL_29:
    if ((v1 & 0x8000) == 0)
      goto LABEL_30;
    goto LABEL_35;
  }
LABEL_19:
  v51 = type metadata accessor for EmitterPrepareRuntime();
  sub_1B204CE78(v51, (uint64_t)&off_1E63A01D0, 1, 0);
  active = type metadata accessor for SetActiveSystem();
  sub_1B204D098(v51, (uint64_t)&off_1E63A01D0, active, (uint64_t)&off_1E6385690);
  v53 = type metadata accessor for ParticleSubSpawnAddStateSystem();
  sub_1B204CE78(v53, (uint64_t)&off_1E63B5A90, 1, 1);
  v54 = type metadata accessor for EmitterWarmup();
  sub_1B204CE78(v54, (uint64_t)&off_1E637A220, 1, 1);
  if ((v1 & 0x80000000) != 0)
  {
    v56 = type metadata accessor for ParticleSubSpawnSystemPostInit();
    sub_1B204CE78(v56, (uint64_t)&off_1E63A92C8, 1, 1);
    v55 = type metadata accessor for ParticleSubSpawnSystemPostUpdate();
  }
  else
  {
    v55 = type metadata accessor for ParticleSubSpawnSystem();
  }
  sub_1B204CE78(v55, (uint64_t)&off_1E63A92C8, 1, 1);
  v57 = type metadata accessor for TransientPushSystem();
  sub_1B204CE78(v57, (uint64_t)&off_1E639AC68, 1, 1);
  v58 = type metadata accessor for ForceFieldSystem();
  sub_1B204CE78(v58, (uint64_t)&off_1E6387540, 1, 1);
  v59 = type metadata accessor for ParticleEmitterTransport();
  sub_1B204CE78(v59, (uint64_t)&off_1E63AE210, 1, 0);
  v60 = type metadata accessor for ParticleFluidSolver2DSolverSystem();
  sub_1B204CE78(v60, (uint64_t)&off_1E63B72E8, 1, 1);
  v61 = type metadata accessor for EmitterCullingSystem();
  sub_1B204CE78(v61, (uint64_t)&off_1E639B3D0, 1, 1);
  v62 = type metadata accessor for UpdateWorldAABBSystem();
  sub_1B204D098(v61, (uint64_t)&off_1E639B3D0, v62, (uint64_t)&off_1E63A72E8);
  v63 = type metadata accessor for ScriptCompilerSystem();
  sub_1B204CE78(v63, (uint64_t)&off_1E639F2E0, 1, 0);
  if ((v1 & 8) != 0)
  {
    v64 = type metadata accessor for ShaderFileSystem();
    sub_1B204D098(v63, (uint64_t)&off_1E639F2E0, v64, (uint64_t)&off_1E638AC10);
  }
  v65 = type metadata accessor for GraphScriptRunner();
  sub_1B204CE78(v65, (uint64_t)&off_1E638C7E8, 1, 1);
  sub_1B204D098(v65, (uint64_t)&off_1E638C7E8, v63, (uint64_t)&off_1E639F2E0);
  v66 = type metadata accessor for TriggerScriptRunnerSystem();
  sub_1B204CE78(v66, (uint64_t)&off_1E63B1208, 1, 1);
  sub_1B204D098(v66, (uint64_t)&off_1E63B1208, v63, (uint64_t)&off_1E639F2E0);
  v67 = type metadata accessor for KernelScriptReflectionSystem();
  sub_1B204CE78(v67, (uint64_t)&off_1E63B3EC0, 1, 0);
  sub_1B204D098(v67, (uint64_t)&off_1E63B3EC0, v63, (uint64_t)&off_1E639F2E0);
  sub_1B204CE78(active, (uint64_t)&off_1E6385690, 1, 0);
  sub_1B204D098(active, (uint64_t)&off_1E6385690, v65, (uint64_t)&off_1E638C7E8);
  if ((v1 & 0xC0000000) == 0)
  {
    v68 = type metadata accessor for ParticleGPUDownload();
    sub_1B204CE78(v68, (uint64_t)&off_1E6398CE8, 1, 0);
  }
  v69 = type metadata accessor for RendererPostUpdateSystem();
  sub_1B204CE78(v69, (uint64_t)&off_1E63AF628, 1, 0);
  if ((v1 & 0xC0000000) == 0)
  {
    v70 = type metadata accessor for ParticleGPUDownload();
    sub_1B204D098(v69, (uint64_t)&off_1E63AF628, v70, (uint64_t)&off_1E6398CE8);
  }
  v71 = type metadata accessor for LookAtSystem();
  sub_1B204CE78(v71, (uint64_t)&off_1E6375DE0, 1, 1);
  v72 = type metadata accessor for ParticleSortSystem();
  sub_1B204CE78(v72, (uint64_t)&off_1E6394CA8, 1, 0);
  if ((v1 & 0xC0000000) != 0)
    goto LABEL_29;
  v73 = type metadata accessor for PreRenderCameraSystem();
  sub_1B204D098(v72, (uint64_t)&off_1E6394CA8, v73, (uint64_t)&off_1E63748A8);
  if ((v1 & 0x8000) == 0)
  {
LABEL_30:
    if ((v1 & 0x100000) == 0)
      goto LABEL_31;
    goto LABEL_42;
  }
LABEL_35:
  v74 = type metadata accessor for DrawCallDisposeSystem();
  sub_1B204CE78(v74, (uint64_t)&off_1E63A0180, 1, 0);
  v75 = type metadata accessor for LODSystem();
  sub_1B204CE78(v75, (uint64_t)&off_1E63C4090, 1, 0);
  v76 = type metadata accessor for CullingSystem();
  sub_1B204CE78(v76, (uint64_t)&off_1E6379990, 1, 0);
  if ((v1 & 0xC0000000) == 0)
  {
    v77 = type metadata accessor for PreRenderCameraSystem();
    sub_1B204D098(v76, (uint64_t)&off_1E6379990, v77, (uint64_t)&off_1E63748A8);
  }
  v78 = type metadata accessor for UpdateWorldAABBSystem();
  sub_1B204D098(v76, (uint64_t)&off_1E6379990, v78, (uint64_t)&off_1E63A72E8);
  v79 = type metadata accessor for PrepareRenderSystem();
  sub_1B204CE78(v79, (uint64_t)&off_1E6399D58, 1, 0);
  v80 = type metadata accessor for GlobalsSystem();
  sub_1B204CE78(v80, (uint64_t)&off_1E637B038, 1, 0);
  v81 = type metadata accessor for PrepareLightsSystem();
  sub_1B204D098(v80, (uint64_t)&off_1E637B038, v81, (uint64_t)&off_1E6399D08);
  if ((v1 & 0x40000000) == 0)
  {
    sub_1B204CE78(v81, (uint64_t)&off_1E6399D08, 1, 0);
    sub_1B204D098(v81, (uint64_t)&off_1E6399D08, v79, (uint64_t)&off_1E6399D58);
  }
  if ((v1 & 0xC0000000) == 0)
  {
    v82 = type metadata accessor for ParticleSortSystem();
    sub_1B204D098(v82, (uint64_t)&off_1E6394CA8, v81, (uint64_t)&off_1E6399D08);
  }
  v83 = type metadata accessor for MeshRenderSystem();
  sub_1B204CE78(v83, (uint64_t)&off_1E6387F48, 1, 0);
  sub_1B204D098(v83, (uint64_t)&off_1E6387F48, v76, (uint64_t)&off_1E6379990);
  v84 = type metadata accessor for DebugVFXSystem();
  sub_1B204CE78(v84, (uint64_t)&off_1E637EF78, 1, 0);
  v85 = type metadata accessor for DebugInfoSystem();
  sub_1B204CE78(v85, (uint64_t)&off_1E6383908, 1, 0);
  if ((v1 & 0x100000) == 0)
  {
LABEL_31:
    if ((v1 & 0x200000) == 0)
      goto LABEL_32;
    goto LABEL_43;
  }
LABEL_42:
  v86 = type metadata accessor for SceneKitSystem();
  sub_1B204CE78(v86, (uint64_t)&off_1E6380F88, 1, 0);
  v87 = type metadata accessor for ShadowSystem();
  sub_1B204CE78(v87, (uint64_t)&off_1E63775F0, 1, 0);
  v88 = type metadata accessor for MeshRenderSystem();
  sub_1B204D098(v87, (uint64_t)&off_1E63775F0, v88, (uint64_t)&off_1E6387F48);
  v89 = type metadata accessor for OpaqueRenderPass();
  sub_1B204CE78(v89, (uint64_t)&off_1E6388168, 1, 0);
  v90 = type metadata accessor for TransparentRenderPass();
  sub_1B204CE78(v90, (uint64_t)&off_1E63A7298, 1, 0);
  v91 = type metadata accessor for DebugCullingSystem();
  sub_1B204CE78(v91, (uint64_t)&off_1E6391228, 0, 0);
  v92 = type metadata accessor for SkyboxSystem();
  sub_1B204CE78(v92, (uint64_t)&off_1E63778A0, 1, 0);
  v93 = type metadata accessor for DeferredRendering();
  sub_1B204CE78(v93, (uint64_t)&off_1E638BD38, 1, 0);
  v94 = v1;
  v1 = type metadata accessor for DepthPrepareSystem();
  sub_1B204CE78(v1, (uint64_t)&off_1E63913C0, 1, 0);
  sub_1B204D098(v86, (uint64_t)&off_1E6380F88, v92, (uint64_t)&off_1E63778A0);
  sub_1B204D098(v1, (uint64_t)&off_1E63913C0, v93, (uint64_t)&off_1E638BD38);
  sub_1B204D098(v92, (uint64_t)&off_1E63778A0, v93, (uint64_t)&off_1E638BD38);
  v95 = type metadata accessor for DebugDrawingSystem();
  sub_1B204CE78(v95, (uint64_t)&off_1E6391278, 1, 0);
  v96 = type metadata accessor for WireframeLayerSystem();
  sub_1B204CE78(v96, (uint64_t)&off_1E639FB90, 0, 0);
  v97 = type metadata accessor for DebugVFXSystem();
  v98 = type metadata accessor for PostProcessSystem();
  sub_1B204D098(v97, (uint64_t)&off_1E637EF78, v98, (uint64_t)&off_1E638F8B8);
  sub_1B204D098(v91, (uint64_t)&off_1E6391228, v98, (uint64_t)&off_1E638F8B8);
  sub_1B204D098(v95, (uint64_t)&off_1E6391278, v98, (uint64_t)&off_1E638F8B8);
  LODWORD(v1) = v94;
  sub_1B204D098(v96, (uint64_t)&off_1E639FB90, v98, (uint64_t)&off_1E638F8B8);
  if ((v94 & 0x200000) == 0)
  {
LABEL_32:
    if ((v1 & 0x80000000) == 0)
      return;
LABEL_44:
    FrameWorldTransformSystem = type metadata accessor for LastFrameWorldTransformSystem();
    sub_1B204CE78(FrameWorldTransformSystem, (uint64_t)&off_1E63B4CD8, 1, 1);
    return;
  }
LABEL_43:
  v99 = type metadata accessor for CompositeSystem();
  sub_1B204CE78(v99, (uint64_t)&off_1E6383858, 1, 0);
  v100 = type metadata accessor for BloomPassSystem();
  sub_1B204CE78(v100, (uint64_t)&off_1E6383608, 1, 0);
  v101 = type metadata accessor for LensBlurPassSystem();
  sub_1B204CE78(v101, (uint64_t)&off_1E6392140, 1, 0);
  v102 = type metadata accessor for PostProcessSystem();
  sub_1B204CE78(v102, (uint64_t)&off_1E638F8B8, 1, 0);
  sub_1B204D098(v101, (uint64_t)&off_1E6392140, v99, (uint64_t)&off_1E6383858);
  sub_1B204D098(v100, (uint64_t)&off_1E6383608, v101, (uint64_t)&off_1E6392140);
  sub_1B204D098(v102, (uint64_t)&off_1E638F8B8, v100, (uint64_t)&off_1E6383608);
  if ((v1 & 0x80000000) != 0)
    goto LABEL_44;
}

uint64_t sub_1B1D3EF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for TypeRegistry();
  v0 = swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 16) = sub_1B1B7E86C(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 24) = sub_1B1B7E86C(v1);
  *(_QWORD *)(v0 + 32) = sub_1B1B7E984(v1);
  sub_1B1D3EF88();
  off_1ED4B84E0 = (_UNKNOWN *)v0;
  swift_retain();
  result = swift_release();
  qword_1ED4B84D8 = v0;
  return result;
}

uint64_t sub_1B1D3EF88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1B1D4035C();
  v0 = sub_1B22287AC();
  v2 = sub_1B1A0608C(v0, v1, 0, 1);
  swift_bridgeObjectRelease();
  if (!v2 || ((result = swift_conformsToProtocol2()) != 0 ? (v4 = v2) : (v4 = 0), !v4))
  {
    sub_1B1E75000();
    sub_1B1E75060();
    sub_1B1D40394();
    sub_1B1A05BC8((uint64_t)&type metadata for OldEvent, (uint64_t)&unk_1E6378578);
    sub_1B1D40F98();
    swift_arrayDestroy();
    v5 = MEMORY[0x1E0DEE9D8];
    sub_1B1A05BC8((uint64_t)&type metadata for NewEvent, MEMORY[0x1E0DEE9D8]);
    sub_1B1A05BC8((uint64_t)&type metadata for NullEntityComponent, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Name, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SetActive, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Skybox, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Navigation, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleContinuousSpawn, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleVariableSpawn, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleBurstSpawn, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticlePeriodicBurstSpawn, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSpawnOverDistance, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSubSpawn, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleGrowEmitter, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for EmitterShape, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSizeInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAngleInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleLifeInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleMassInit, v5);
    sub_1B1AED5E4(0, &qword_1ED4B9310, (uint64_t)&type metadata for LinearFactor, (uint64_t)&off_1E6375C90, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ParticleFloat3Init);
    sub_1B1A05BC8(v6, v5);
    sub_1B1AED5E4(0, &qword_1ED4B9318, (uint64_t)&type metadata for AngularFactor, (uint64_t)&off_1E6378E90, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ParticleFloat3Init);
    sub_1B1A05BC8(v7, v5);
    sub_1B1AED5E4(0, &qword_1ED4B9308, (uint64_t)&type metadata for ParticleTarget, (uint64_t)&off_1E63802C8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ParticleFloat3Init);
    sub_1B1A05BC8(v8, (uint64_t)&unk_1E63783B0);
    swift_arrayDestroy();
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleVelocityInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAngularVelocityInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleOrientationInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAngleVelocityInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleColorInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticlePivotInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleTextureFrameInit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticlePositionOverTexture, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleColorOverPosition, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleColorOverLife, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleColorOverVelocity, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleColorOverTexture, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleOpacityEvolution, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleOpacityOverLife, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleOpacityOverVelocity, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSizeOverLife, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSizeOverVelocity, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSizeOverTexture, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for OrientationConstraint, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for OrientationOverVelocity, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAngleEvolution, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleTextureFrameEvolution, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAffectedByGravity, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleGravityForce, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleForce, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Anchored, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAnchored, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleRibbonTrails, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleFlockingAlignOrientation, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleFlockingConstrainToArea, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleFlockingConstrainToPlane, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleFlockingFlyTowardsArea, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleFlockingSolver, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleFlockingSpeedControl, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAffectedByGlobalFluidSolver2DEmitter, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleGlobalFluidSolver2DEmitter, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleFluidSolver2DEmitter, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAffectedByGlobalFluidSolver2DSolver, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleGlobalFluidSolver2DSolver, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleFluidSolver2DSolver, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleDrag, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleCopyData, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleNoise, (uint64_t)&unk_1E63783E8);
    swift_arrayDestroy();
    sub_1B1A05BC8((uint64_t)&type metadata for ProjectorParameters, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleCollide, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticlePlaneCollider, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSphereCollider, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleBoxCollider, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleCylinderCollider, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSDFCollider, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleMeshCollider, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSphereAttractor, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSDFAttractor, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for KillShape, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleKillable, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ForceField, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleForceField, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleGlobalForce, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAffectedByGlobalForce, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Vortex, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleTargetFromPosition, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for DistanceConstraint, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Attach, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleLocalBoxCollider, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticlePointRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleLineRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleQuadRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleBoxRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSphereRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSurfaceRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleVolumetricRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticlePrimitiveRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAOSphereRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAOBoxRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleGaussianRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleDecalRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleVoxelRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for FluidRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleMeshRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleRibbonRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for MeshModel, (uint64_t)&unk_1E6378420);
    swift_arrayDestroy();
    sub_1B1A05BC8((uint64_t)&type metadata for ModelRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for GenericLOD, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for LODRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for LODState, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PointOfCulling, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for FrustumCulled, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for LODCulled, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleLegacyRenderer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Color, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for DirectionalLight, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PointLight, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for AmbientLight, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SpotLight, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Shadow, (uint64_t)&unk_1E6378458);
    swift_arrayDestroy();
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleRoughness, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleMetalness, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleEmission, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleTarget, (uint64_t)&unk_1E6378490);
    swift_arrayDestroy();
    sub_1B1A05BC8((uint64_t)&type metadata for UserData1, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for UserData2, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for UserData3, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for UserData4, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for NeighborCount, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAngle, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAngleVelocity, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleTextureFrame, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Mass, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleID, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleAge, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleLifetime, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticlePivot, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleCustomEmitter, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for LocalAABB, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for WorldAABB, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for IBLGenerator, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for IBLRuntime, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PointOfView, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ProjectionMatrix, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PerspectiveCamera, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for OrthographicCamera, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CameraDepthOfField, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CameraLensBlur, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CameraBloom, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CameraVignetting, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CameraColorGrading, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CameraToneMapping, v5);
    v9 = type metadata accessor for SDFFileAsset();
    sub_1B1A05BC8(v9, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SDFRuntimeData, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SDFTextureGenerator, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for RenderSettings, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SceneFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for MeshFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for MeshReferenceAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for MeshImportOptions, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureSource, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for UnmanagedFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CSVFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for MovieFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureArrayFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureClient, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureNamedAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRenderTarget, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureShaderAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureLoadingOptions, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireMipmap, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireMipmapGeneration, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireCubemap, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireNonSRGB, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireUnpremultiply, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequirePremultiplyWithLinearAlpha, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireSizeLimit, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireAnimationRepresentation, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireCPURepresentation, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireGPURepresentation, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireMask, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureRequireIOSurface, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureLoadPolicy, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureGPURepresentationDoNotUpload, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TextureFileData, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CALayerFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for RenderGraphTextureTarget, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for TexturePlaceholder, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for AudioFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for AudioAnalyzer, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for AudioController, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for AudioSpectrum, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Parent, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Children, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Hidden, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for WorldTransform, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for InverseWorldTransform, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for NotInHierarchy, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParentedToScene, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SpaceOverride, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for LastFrameWorldTransform, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Static, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Fixed, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Beamed, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for RotateAction, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SineMoveAction, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SineYAction, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Scale1, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Scale2, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Scale3, (uint64_t)&unk_1E63784C8);
    swift_arrayDestroy();
    v10 = type metadata accessor for VFXObjectTag();
    sub_1B1A05BC8(v10, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for VFXTag, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for VFXAssetTag, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for VFXBridgeTag, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for VFXParentAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Prefab, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for EmbeddedAssets, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Seed, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for EmitterDescription, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for EmitterRuntime, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for DebugSelectedCamera, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSpawnDelay, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSpawnDuration, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleRespawn, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Rect2D, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for DiscShape, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for RoundedRectShape, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for StrokeColor, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for StrokeWidth, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Shadow, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Velocity2D, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ZOrder, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for HZOrder, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for LookAt, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SmoothMotion, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for RenderingOrder, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ProjectorParameters, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleCollisionEvent, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSpawnID, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for GrowEmitterRuntime, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ClampBox, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CodeGenerationComponent, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CodeGenerationInitialized, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for GraphScriptingConfig, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for GraphScriptGroup, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for GraphComponent, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for GraphSideStorage, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Bindings, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ColorRampComponent, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for CurveComponent, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for WrapAroundCamera, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Position, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Normal, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Velocity, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for AngularVelocity, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Orientation, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SubEntity, (uint64_t)&unk_1E6378500);
    swift_arrayDestroy();
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleSetID, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PropagateDirtiness, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PrimitiveGenerator, v5);
    v11 = type metadata accessor for SceneKitAsset(0);
    sub_1B1A05BC8(v11, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for SceneKitAssetInstance, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for ShaderFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for VideoCapture, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PointCacheFileAsset, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PointCacheFromModel, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PointCacheGenerator, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PointCacheEmitter, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for PointCacheSpawner, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for REMeshAssetPointCache, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Material, (uint64_t)&unk_1E6378538);
    swift_arrayDestroy();
    sub_1B1A05BC8((uint64_t)&type metadata for MaterialParameters, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for AnimationTimeSource, v5);
    sub_1B1AED5E4(0, &qword_1ED4B9088, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for KeyframeAnimation);
    sub_1B1A05BC8(v12, v5);
    sub_1B1A1B3C8(0);
    sub_1B1A05BC8(v13, v5);
    sub_1B1A1B298(0);
    sub_1B1A05BC8(v14, v5);
    sub_1B1A1B168(0);
    sub_1B1A05BC8(v15, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Authoring, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for DoNotSave, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for DoNotExport, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for Scheduling, v5);
    sub_1B1A05BC8((uint64_t)&type metadata for IsSubEntityOf, v5);
    sub_1B1D40580();
    sub_1B1A05BC8((uint64_t)&type metadata for ParticleClassSpawnID, v5);
    sub_1B1D40678();
    return sub_1B1D407F4();
  }
  return result;
}

unint64_t sub_1B1D4035C()
{
  unint64_t result;

  result = qword_1ED4BA0E8;
  if (!qword_1ED4BA0E8)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BA0E8);
  }
  return result;
}

uint64_t sub_1B1D40394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7E0);
  v1 = MEMORY[0x1E0DEE9D8];
  sub_1B1A05BC8(v0, MEMORY[0x1E0DEE9D8]);
  v2 = sub_1B1B9DAD4(0, &qword_1ED4BB470);
  sub_1B1A05BC8(v2, v1);
  v3 = sub_1B1B9DAD4(0, &qword_1ED4BB3F8);
  sub_1B1A05BC8(v3, v1);
  v4 = sub_1B1B9DAD4(0, &qword_1ED4BB448);
  sub_1B1A05BC8(v4, v1);
  v5 = sub_1B1B9DAD4(0, &qword_1ED4BB400);
  sub_1B1A05BC8(v5, v1);
  v6 = sub_1B1B9DAD4(0, &qword_1ED4BB438);
  sub_1B1A05BC8(v6, v1);
  v7 = sub_1B1B9DAD4(0, &qword_1ED4BB440);
  sub_1B1A05BC8(v7, v1);
  v8 = sub_1B1B9DAD4(0, &qword_1ED4BB430);
  sub_1B1A05BC8(v8, v1);
  v9 = sub_1B1B9DAD4(0, &qword_1ED4BB420);
  sub_1B1A05BC8(v9, v1);
  v10 = sub_1B1B9DAD4(0, &qword_1ED4BB408);
  sub_1B1A05BC8(v10, v1);
  v11 = sub_1B1B9DAD4(0, &qword_1ED4BB428);
  sub_1B1A05BC8(v11, v1);
  v12 = sub_1B1B9DAD4(0, &qword_1ED4BB410);
  sub_1B1A05BC8(v12, v1);
  v13 = sub_1B1B9DAD4(0, &qword_1ED4BB468);
  sub_1B1A05BC8(v13, v1);
  v14 = sub_1B1B9DAD4(0, (unint64_t *)&unk_1ED4BB450);
  sub_1B1A05BC8(v14, v1);
  type metadata accessor for VFXCameraToneMappingMode(0);
  return sub_1B1A05BC8(v15, v1);
}

uint64_t sub_1B1D40580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t updated;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for EmitterScript(0);
  v1 = MEMORY[0x1E0DEE9D8];
  sub_1B1A05BC8(v0, MEMORY[0x1E0DEE9D8]);
  updated = type metadata accessor for ParticleUpdateScript(0);
  sub_1B1A05BC8(updated, (uint64_t)&unk_1E6378370);
  sub_1B1D40F98();
  swift_arrayDestroy();
  inited = type metadata accessor for ParticleInitScript(0);
  sub_1B1A05BC8(inited, (uint64_t)&unk_1E63782F8);
  swift_arrayDestroy();
  v4 = type metadata accessor for GraphScript(0);
  sub_1B1A05BC8(v4, v1);
  v5 = type metadata accessor for SimpleScript(0);
  sub_1B1A05BC8(v5, v1);
  v6 = type metadata accessor for MetalFunctionScript(0);
  sub_1B1A05BC8(v6, (uint64_t)&unk_1E6378330);
  swift_arrayDestroy();
  v7 = type metadata accessor for ShaderScript(0);
  sub_1B1A05BC8(v7, v1);
  v8 = type metadata accessor for TriggerScript(0);
  return sub_1B1A05BC8(v8, v1);
}

uint64_t sub_1B1D40678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = MEMORY[0x1E0DEE9D8];
  sub_1B1A05BC8((uint64_t)&type metadata for InputStream, MEMORY[0x1E0DEE9D8]);
  sub_1B1A05BC8((uint64_t)&type metadata for DefaultMaterialInstance, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for AssetManagerInstance, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for CurvesState, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ColorRampsState, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for AssetCatalog, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for EffectsRegistry, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for DiagnosticsTrackerInstance, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for SceneAssetRegistryInstance, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for SceneWorldAABB, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for kClusterState, v0);
  sub_1B1A05BC8((uint64_t)&_s21DrawCallEntityClassesVN, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for NoiseGlobalTexture, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for WorldFromScene, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for MeshRenderSystemState, v0);
  v1 = type metadata accessor for VectorRenderSystemRenderPipelineStates();
  sub_1B1A05BC8(v1, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for FluidRenderSystemState, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for FrameConstantsStorage, v0);
  v2 = type metadata accessor for ScriptingConfiguration();
  sub_1B1A05BC8(v2, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for RERendererConfiguration, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ShadowState, v0);
  return sub_1B1A05BC8((uint64_t)&type metadata for LightsUniforms, v0);
}

uint64_t sub_1B1D407F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v0 = MEMORY[0x1E0DEE9D8];
  sub_1B1A05BC8(MEMORY[0x1E0DEA968], MEMORY[0x1E0DEE9D8]);
  sub_1B1A05BC8(MEMORY[0x1E0DEAFA0], v0);
  sub_1B1A05BC8(MEMORY[0x1E0DEDE70], v0);
  sub_1B1A05BC8(MEMORY[0x1E0DEE068], v0);
  v1 = MEMORY[0x1E0DEE0F8];
  sub_1B1A05BC8(MEMORY[0x1E0DEE0F8], v0);
  sub_1B1A05BC8(MEMORY[0x1E0DEE190], v0);
  v2 = MEMORY[0x1E0DEB418];
  sub_1B1A05BC8(MEMORY[0x1E0DEB418], v0);
  sub_1B1A05BC8(MEMORY[0x1E0DEDA70], v0);
  sub_1B1A05BC8(MEMORY[0x1E0DEDBC8], v0);
  v3 = MEMORY[0x1E0DEDC60];
  sub_1B1A05BC8(MEMORY[0x1E0DEDC60], v0);
  sub_1B1A05BC8(MEMORY[0x1E0DEB070], v0);
  v4 = MEMORY[0x1E0DEB188];
  sub_1B1A05BC8(MEMORY[0x1E0DEB188], v0);
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, v4, MEMORY[0x1E0DEDD20]);
  sub_1B1A05BC8(v6, v0);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1A05BC8(v8, v0);
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, v4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A05BC8(v10, v0);
  type metadata accessor for simd_float2x2(0);
  sub_1B1A05BC8(v11, v0);
  type metadata accessor for simd_float2x3(0);
  sub_1B1A05BC8(v12, v0);
  type metadata accessor for simd_float2x4(0);
  sub_1B1A05BC8(v13, v0);
  type metadata accessor for simd_float3x2(0);
  sub_1B1A05BC8(v14, v0);
  type metadata accessor for simd_float3x3(0);
  sub_1B1A05BC8(v15, v0);
  type metadata accessor for simd_float3x4(0);
  sub_1B1A05BC8(v16, v0);
  type metadata accessor for simd_float4x2(0);
  sub_1B1A05BC8(v17, v0);
  type metadata accessor for simd_float4x3(0);
  sub_1B1A05BC8(v18, v0);
  type metadata accessor for simd_float4x4(0);
  sub_1B1A05BC8(v19, v0);
  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, v1, v7);
  sub_1B1A05BC8(v20, v0);
  v21 = MEMORY[0x1E0DEDB58];
  sub_1B1A05BC8(MEMORY[0x1E0DEDB58], v0);
  sub_1B19F8E54(0, &qword_1ED4BB088, (uint64_t (*)(void))sub_1B19F8E10, v21, v5);
  sub_1B1A05BC8(v22, v0);
  sub_1B19F8E54(0, &qword_1ED4BB0A8, (uint64_t (*)(void))sub_1B19F8E10, v21, v7);
  sub_1B1A05BC8(v23, v0);
  sub_1B19F8E54(0, &qword_1ED4BB0F0, (uint64_t (*)(void))sub_1B19F8E10, v21, v9);
  sub_1B1A05BC8(v24, v0);
  type metadata accessor for simd_quatf(0);
  sub_1B1A05BC8(v25, v0);
  sub_1B1A05BC8(MEMORY[0x1E0DEABD0], v0);
  v26 = MEMORY[0x1E0DEB848];
  sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5B8, v2, MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  sub_1B1A05BC8(v27, v0);
  sub_1B1AED5E4(0, &qword_1ED4BA5C8, v3, MEMORY[0x1E0DEDC78], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v26);
  sub_1B1A05BC8(v28, v0);
  sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5A8, v4, MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v26);
  sub_1B1A05BC8(v29, v0);
  type metadata accessor for TextureDescriptor(0);
  sub_1B1A05BC8(v30, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ColorRamp, v0);
  sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, v4, (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
  sub_1B1A05BC8(v31, v0);
  type metadata accessor for MTLPixelFormat(0);
  sub_1B1A05BC8(v32, v0);
  type metadata accessor for MTLStorageMode(0);
  sub_1B1A05BC8(v33, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for KernelReference, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for Entity, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for Material.Kind, v0);
  v34 = type metadata accessor for PBRParameters();
  sub_1B1A05BC8(v34, v0);
  v35 = type metadata accessor for PrelitParameters();
  sub_1B1A05BC8(v35, v0);
  v36 = type metadata accessor for CustomParameters();
  sub_1B1A05BC8(v36, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for BlendMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for FilterMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for TextureMipFilterMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for AddressMode, v0);
  type metadata accessor for MTLCullMode(0);
  v38 = v37;
  sub_1B1A05BC8(v37, v0);
  type metadata accessor for MTLCompareFunction(0);
  v40 = v39;
  sub_1B1A05BC8(v39, v0);
  type metadata accessor for MTLWinding(0);
  sub_1B1A05BC8(v41, v0);
  type metadata accessor for VFXForceFieldType(0);
  sub_1B1A05BC8(v42, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for Composition.Operation, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for LensBlurQuality, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for PointCache.Distribution, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for FlockingSizeMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for TextureChannel, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for AddressMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for BlendMode, v0);
  type metadata accessor for VFXCameraProjectionDirection(0);
  sub_1B1A05BC8(v43, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticleSortMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticleAnimationMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for Composition.Operation, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticleColorOverPosition.GradientMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ScaleMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticleColorInit.Mode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for Material.Kind, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for KillShape.Shape, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticleQuadRenderer.Shape, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticleOrientationMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for FluidSolver2DSolverSetupType, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for FluidSolver2DSolverBorderType, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for FlockingLocalAxis, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ToneMappingOperator, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for MotionDistribution, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for EmitterDescription.PhysicsSimulation, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for NoiseKind, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for EmitterShape.Shape, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ShapeDistribution, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for EmitterShape.Direction, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for EmissionOrder, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticlePrimitiveRenderer.Shape, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for EasingFunction, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for FillMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for EvolutionMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for VideoCapture.OrientationMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for OrientationConstraint.Mode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ProjectionDirection, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticleSubSpawn.Mode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for EntitySpace, v0);
  sub_1B1A05BC8(v38, v0);
  sub_1B1A05BC8(v40, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for FilterMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for TextureMipFilterMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for PrimitiveGenerator.PrimitiveType, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticleRibbonTextureMode, v0);
  sub_1B1A05BC8((uint64_t)&type metadata for ParticleRibbonProfile, v0);
  return sub_1B1A05BC8((uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis, v0);
}

void sub_1B1D40F98()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BA568)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BA568);
  }
}

uint64_t sub_1B1D41000()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SceneAssetRegistry()
{
  return objc_opt_self();
}

uint64_t sub_1B1D41054(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25[2];

  v7 = v6;
  swift_weakInit();
  v13 = (_QWORD *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__rootNode);
  *v13 = 0;
  v13[1] = 0;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_loaded) = 0;
  v14 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_idToEntity;
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v7 + v14) = sub_1B1B80C7C(MEMORY[0x1E0DEE9D8]);
  v16 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_entityToId;
  *(_QWORD *)(v7 + v16) = sub_1B1B98344(v15);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_counter) = 0;
  swift_weakAssign();
  v17 = v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_asset;
  v18 = sub_1B2228110();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, a2, v18);
  v20 = v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_options;
  *(_QWORD *)v20 = a3;
  *(_BYTE *)(v20 + 8) = a4 & 1;
  *(_BYTE *)(v20 + 9) = HIBYTE(a4) & 1;
  v21 = (_QWORD *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_sceneIdentifier);
  *v21 = a5;
  v21[1] = a6;
  strcpy((char *)v25, "registry for ");
  HIWORD(v25[1]) = -4864;
  sub_1B222805C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  type metadata accessor for EntityManager();
  swift_allocObject();
  v22 = sub_1B1DA6CC4(v25[0], v25[1], 1, 0);
  *(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__entityManager) = v22;
  v23 = *(_QWORD *)(swift_weakLoadStrong() + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a2, v18);
  *(_QWORD *)(v22 + OBJC_IVAR____TtC3VFX13EntityManager_renderer) = v23;
  swift_release();
  swift_release();
  return v7;
}

uint64_t sub_1B1D4127C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v22;
  uint64_t v23;

  v5 = v4;
  v9 = a1;
  v10 = 1701080942;
  v11 = HIDWORD(a1);
  if (a1 != 0xFFFFFFFF)
  {
    swift_retain();
    if ((v9 & 0x80000000) == 0
      && v9 < *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
      && ((v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v11 == -1)
       || *(_DWORD *)(v12 + 12 * v9 + 8) == (_DWORD)v11))
    {
      v22 = sub_1B1D1EAC8(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v12 + 12 * v9) + 32), *(_DWORD *)(v12 + 12 * v9), *(_WORD *)(v12 + 12 * v9 + 4), 16, a2);
      v13 = v23;
      swift_release();
      if (v13)
      {
        v10 = v22;
        goto LABEL_8;
      }
    }
    else
    {
      swift_release();
    }
  }
  v13 = 0xE400000000000000;
LABEL_8:
  v14 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_idToEntity;
  if (*(_QWORD *)(*(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_idToEntity) + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(v10, v13);
    v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      if (a4)
      {
        swift_bridgeObjectRetain();
        if ((sub_1B2228914() & 1) != 0)
        {
          if (!*(_QWORD *)(*(_QWORD *)(v5 + v14) + 16))
            goto LABEL_22;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B1DC3B00(a3, a4);
          if ((v17 & 1) == 0)
          {
LABEL_20:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
          swift_bridgeObjectRelease_n();
        }
        swift_bridgeObjectRelease();
      }
      v18 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_counter;
      ++*(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_counter);
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      a3 = v10;
      if (*(_QWORD *)(*(_QWORD *)(v5 + v14) + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B1DC3B00(v10, v13);
        if ((v19 & 1) != 0)
        {
          while (1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ++*(_QWORD *)(v5 + v18);
            swift_bridgeObjectRetain();
            sub_1B2228890();
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            a3 = v10;
            swift_bridgeObjectRelease();
            if (!*(_QWORD *)(*(_QWORD *)(v5 + v14) + 16))
              goto LABEL_22;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_1B1DC3B00(v10, v13);
            if ((v20 & 1) == 0)
              goto LABEL_20;
          }
        }
        goto LABEL_20;
      }
LABEL_22:
      swift_bridgeObjectRelease();
      return a3;
    }
  }
  return v10;
}

uint64_t sub_1B1D415A8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;

  v8 = sub_1B1D4127C(a1, a2, a5, a6);
  v10 = v9;
  v11 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_idToEntity;
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(a4 + v11);
  *(_QWORD *)(a4 + v11) = 0x8000000000000000;
  sub_1B1B88BD4(a1, v8, v10, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a4 + v11) = v16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_entityToId;
  v14 = swift_isUniquelyReferenced_nonNull_native();
  v17 = *(_QWORD *)(a4 + v13);
  *(_QWORD *)(a4 + v13) = 0x8000000000000000;
  sub_1B1B88AC4(v8, v10, a1, v14);
  *(_QWORD *)(a4 + v13) = v17;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D4169C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_entityToId);
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = result;
    result = sub_1B1DC3CA4(result);
    if ((v6 & 1) != 0)
    {
      v7 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * result);
      v9 = *v7;
      v8 = v7[1];
      if (v5 != 0xFFFFFFFF)
      {
        swift_retain();
        v10 = sub_1B1D16FEC(v5);
        v12 = v11;
        swift_bridgeObjectRetain();
        swift_release();
        if (v12)
        {
          if (v10)
          {
            *(_QWORD *)(v10 + 56) = v9;
            *(_QWORD *)(v10 + 64) = v8;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          v13 = swift_retain();
          MEMORY[0x1E0C80A78](v13, v14);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1D4251C);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }
        else
        {
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B1D41854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_asset;
  v2 = sub_1B2228110();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1D418F8()
{
  return type metadata accessor for SceneAssetRegistryEntry();
}

uint64_t type metadata accessor for SceneAssetRegistryEntry()
{
  uint64_t result;

  result = qword_1EEF5DDB0;
  if (!qword_1EEF5DDB0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B1D4193C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2228110();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1B1D41A04(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  swift_retain();
  result = swift_release();
  *a1 = a2;
  return result;
}

void sub_1B1D41A4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  unint64_t v56;
  char v57;
  char v58;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  ValueMetadata *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126[6];

  v3 = v2;
  sub_1B1B1F358();
  v7 = v6;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1B222820C();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1B2228110();
  v20 = MEMORY[0x1E0C80A78](v16, v17);
  v22 = (char *)&v102 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_loaded) & 1) == 0)
  {
    v108 = a1;
    v102 = v15;
    v103 = v12;
    v104 = v11;
    v105 = v10;
    v106 = v7;
    *(_BYTE *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_loaded) = 1;
    v110 = v19;
    v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16);
    v111 = v18;
    v23(v22, v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_asset, v18, v20);
    v24 = OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__entityManager;
    v25 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__entityManager);
    v26 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_options);
    v27 = *(_BYTE *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry_options + 8);
    swift_retain();
    v28 = sub_1B201FA98(v22, v25, v26, v27);
    v30 = v29;
    v32 = v31;
    swift_release();
    if (v32)
      v33 = v28;
    else
      v33 = 0;
    if (v32)
      v34 = v30;
    else
      v34 = 0;
    v35 = MEMORY[0x1E0DEE9D8];
    if (v32)
      v35 = v32;
    v118 = v35;
    v36 = (unint64_t *)(v3 + OBJC_IVAR____TtC3VFX23SceneAssetRegistryEntry__rootNode);
    *v36 = v33;
    v36[1] = v34;
    v121 = v24;
    v37 = *(_QWORD *)(v3 + v24);
    v38 = **(_QWORD **)(v37 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    swift_retain();
    LOBYTE(v126[0]) = 1;
    v39 = sub_1B217DB20(0x100000000uLL, v38, (__n128)0, (__n128)xmmword_1B2244E20, 1.0);
    swift_release();
    v126[0] = 0x656372756F736572;
    v126[1] = 0xE900000000000073;
    v40 = (_DWORD)v39 == -1 && HIDWORD(v39) == 0;
    v117 = v37;
    v120 = v39;
    v114 = HIDWORD(v39);
    if (!v40)
    {
      v41 = swift_retain();
      MEMORY[0x1E0C80A78](v41, v42);
      *(&v102 - 4) = (char *)v126;
      *(&v102 - 3) = (char *)v39;
      *(&v102 - 2) = (char *)v37;
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED8D8);
      swift_release();
    }
    v43 = v36[1];
    v44 = v118;
    if (v43)
      sub_1B1E86820(*v36, v43, v120, v117);
    v109 = v22;
    v45 = *(_QWORD *)(v44 + 16);
    v112 = v36;
    if (v45)
    {
      v107 = a2;
      v113 = &v123;
      swift_bridgeObjectRetain();
      v47 = 0;
      v115 = 0x80000001B23397E0;
      *(_QWORD *)&v116 = 0xD00000000000002FLL;
      v48 = v117;
      while (1)
      {
        *(_QWORD *)&v46 = *(_QWORD *)(v44 + 8 * v47 + 32);
        v49 = *(_QWORD *)(v3 + v121);
        v50 = v46;
        v119 = v46;
        v51 = DWORD1(v46);
        v52 = v46;
        if ((sub_1B1E866DC(v120, v48, v46) & 1) == 0)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          swift_retain();
          v65 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v126[0] = 0;
          swift_retain();
          sub_1B1F1AD70(v65, v126, v116, v115);
          swift_release();
          swift_release();
          goto LABEL_22;
        }
        v53 = v3;
        v54 = v50 == -1 && v51 == 0;
        v55 = v54;
        if (!v54)
        {
          swift_retain();
          v56 = sub_1B1D1593C(v52);
          v58 = v57;
          swift_release();
          if ((v58 & 1) == 0 && ((_DWORD)v56 != -1 || HIDWORD(v56) != 0))
          {
            if ((_DWORD)v56 == (_DWORD)v120 && HIDWORD(v56) == (_DWORD)v114)
            {
              v3 = v53;
              v48 = v117;
              v44 = v118;
              goto LABEL_22;
            }
            swift_retain();
            sub_1B1E87898(v52, v56);
            swift_release();
          }
        }
        swift_retain();
        v61 = v120;
        v62 = sub_1B1DA4E70(v120);
        swift_release();
        if ((v62 & 1) != 0)
        {
          v126[0] = __PAIR64__(v114, v61);
          if (!v55)
          {
            v63 = swift_retain();
            MEMORY[0x1E0C80A78](v63, v64);
            *(&v102 - 4) = (char *)v126;
            *(&v102 - 3) = (char *)v119;
            *(&v102 - 2) = (char *)v49;
            sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1D42500);
            swift_release();
          }
          swift_retain();
          sub_1B1E87D28(v52, v61);
          swift_release();
        }
        else if ((v55 & 1) == 0)
        {
          v66 = *(_QWORD *)(v49 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
          swift_retain();
          if (v66)
          {
            v67 = *(_BYTE *)(v66 + 80);
            MEMORY[0x1B5E240CC](v66 + 48);
            v66 = *(_QWORD *)(v66 + 56);
          }
          else
          {
            v67 = 0;
          }
          v3 = v53;
          v124 = 0;
          swift_unknownObjectUnownedInit();
          v122 = v49;
          v124 = v66;
          swift_unknownObjectUnownedAssign();
          swift_unownedRetain();
          swift_unknownObjectRelease();
          v125 = v67;
          sub_1B1A02530((uint64_t)&v122, (uint64_t)v126);
          sub_1B1E2D290((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v52);
          sub_1B1A0256C((uint64_t)v126);
          sub_1B1E31340(1);
          swift_release();
          goto LABEL_21;
        }
        v3 = v53;
LABEL_21:
        v48 = v117;
        v44 = v118;
        sub_1B1E86B90(v52, v49);
LABEL_22:
        if (v45 == ++v47)
        {
          swift_bridgeObjectRelease();
          v36 = v112;
          a2 = v107;
          break;
        }
      }
    }
    v68 = v36[1];
    if (v68)
    {
      v69 = *v36;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B1E880E0(v69, v68, v3, v108, a2);
      swift_release();
      swift_bridgeObjectRelease();
    }
    if (v45)
    {
      v120 = v3;
      swift_bridgeObjectRetain();
      v70 = 0;
      v71 = 0;
      *(_QWORD *)&v119 = 0;
      v72 = (unsigned int *)(v44 + 36);
      v73 = &qword_1ED4B8000;
      v116 = xmmword_1B226D240;
      v117 = 0x80000001B2339810;
      v74 = v45;
      while (1)
      {
        v75 = (int)*(v72 - 1);
        v76 = *v72;
        v77 = *(_QWORD *)(v120 + v121);
        if ((_DWORD)v75 == -1)
        {
          if (!(_DWORD)v76)
            goto LABEL_61;
          swift_retain();
        }
        else
        {
          v78 = v73[192];
          swift_retain();
          if ((v75 & 0x80000000) == 0 && *(_QWORD *)(v77 + v78 + 8) > v75)
          {
            v79 = *(_QWORD *)(v77 + v78);
            if ((_DWORD)v76 == -1 || *(_DWORD *)(v79 + 12 * (int)v75 + 8) == (_DWORD)v76)
            {
              v80 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v77 + 80) + 8 * *(__int16 *)(v79 + 12 * (int)v75 + 6) + 32)
                              + 16);
              v81 = *(_QWORD *)(v80 + 128);
              if (*(_QWORD *)(v81 + 16) && (v82 = sub_1B1DC3AC8((uint64_t)&type metadata for MeshModel), (v83 & 1) != 0))
              {
                v84 = *(ValueMetadata **)(*(_QWORD *)(v80 + 24)
                                        + 16 * *(_QWORD *)(*(_QWORD *)(v81 + 56) + 8 * v82)
                                        + 32);
                swift_release();
                v73 = &qword_1ED4B8000;
                if (v84 == &type metadata for MeshModel)
                {
                  if ((_QWORD)v119)
                  {
                    if (qword_1ED4BF430 != -1)
                      swift_once();
                    v115 = qword_1ED4D0FB0;
                    swift_retain();
                    LODWORD(v119) = sub_1B2228EA8();
                    if (qword_1ED4BF658 != -1)
                      swift_once();
                    v85 = qword_1ED4D0FD0;
                    v86 = qword_1ED4BF688;
                    swift_retain();
                    if (v86 != -1)
                      swift_once();
                    sub_1B1B42948();
                    v87 = swift_allocObject();
                    *(_OWORD *)(v87 + 16) = v116;
                    *(_QWORD *)(v87 + 56) = MEMORY[0x1E0DEA968];
                    *(_QWORD *)(v87 + 64) = sub_1B1B1F47C();
                    *(_QWORD *)(v87 + 32) = 0xD00000000000005ELL;
                    *(_QWORD *)(v87 + 40) = v117;
                    sub_1B222835C();
                    swift_bridgeObjectRelease();
                    swift_retain();
                    v88 = v102;
                    sub_1B2228200();
                    v113 = (uint64_t *)v106[12];
                    v108 = v106[16];
                    v89 = v106[20];
                    v90 = (uint64_t)v105;
                    v114 = v85;
                    v91 = &v105[v89];
                    (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v105, v88, v104);
                    *((_BYTE *)v113 + v90) = v119;
                    *(_QWORD *)(v90 + v108) = 0;
                    *(_QWORD *)v91 = 0xD00000000000005ELL;
                    *((_QWORD *)v91 + 1) = v117;
                    sub_1B2228428();
                    swift_release();
                    sub_1B1B429AC(v90);
                    swift_release();
                    swift_release();
                    v73 = &qword_1ED4B8000;
                  }
                  v70 = v75 | (unint64_t)(v76 << 32);
                  v71 = v77;
                  *(_QWORD *)&v119 = v77;
                }
              }
              else
              {
                swift_release();
                v73 = &qword_1ED4B8000;
              }
              goto LABEL_61;
            }
          }
        }
        swift_release();
LABEL_61:
        v72 += 2;
        if (!--v74)
        {
          v92 = v118;
          swift_bridgeObjectRelease();
          v36 = v112;
          if ((_QWORD)v119)
          {
            v93 = v112[1];
            if (v93)
              sub_1B1E86820(*v112, v93, v70, v119);
          }
          v94 = (unsigned int *)(v92 + 36);
          v3 = v120;
          while (1)
          {
            v95 = *(v94 - 1);
            v96 = *v94;
            if (v71)
            {
              v97 = (_DWORD)v95 == (_DWORD)v70 && (_DWORD)v96 == HIDWORD(v70);
              v98 = v70;
              v99 = v71;
              if (v97)
                goto LABEL_87;
            }
            else
            {
              v99 = v36[1];
              if (!v99)
                goto LABEL_87;
              v98 = *v36;
            }
            sub_1B1E86820(v98, v99, v95 | (v96 << 32), *(_QWORD *)(v3 + v121));
LABEL_87:
            v94 += 2;
            if (!--v45)
              goto LABEL_97;
          }
        }
      }
    }
LABEL_97:
    swift_bridgeObjectRelease();
    v100 = v36[1];
    if (v100)
    {
      v101 = *v36;
      swift_retain();
      sub_1B1E88254(v101, v100, v3);
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v110 + 8))(v109, v111);
  }
}

_QWORD *sub_1B1D42500(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1E87880(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_1B1D4251C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F57A68(a1, **(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 24), *(_QWORD *)(v1 + 24));
}

ValueMetadata *type metadata accessor for SceneAssetRegistryInstance()
{
  return &type metadata for SceneAssetRegistryInstance;
}

uint64_t sub_1B1D42550()
{
  sub_1B1D426AC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D42578()
{
  sub_1B1D426AC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D425A0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D2F094(a1, a2, a3, &qword_1EEF5DDC0, (void (*)(void))sub_1B1D426AC);
}

uint64_t sub_1B1D425CC()
{
  sub_1B1D426F0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D425F4()
{
  sub_1B1D426F0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D4261C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D2F094(a1, a2, a3, &qword_1EEF5DDD0, (void (*)(void))sub_1B1D426F0);
}

double sub_1B1D42648()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleAffectedByGravity;
  *(_QWORD *)(v0 + 40) = &off_1E63AFC60;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGravity()
{
  return &type metadata for ParticleAffectedByGravity;
}

ValueMetadata *type metadata accessor for ParticleGravityForce()
{
  return &type metadata for ParticleGravityForce;
}

unint64_t sub_1B1D426AC()
{
  unint64_t result;

  result = qword_1EEF5DDC8;
  if (!qword_1EEF5DDC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F204, &type metadata for ParticleAffectedByGravity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DDC8);
  }
  return result;
}

unint64_t sub_1B1D426F0()
{
  unint64_t result;

  result = qword_1EEF5DDD8;
  if (!qword_1EEF5DDD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F1B4, &type metadata for ParticleGravityForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DDD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleGravityForce.CodingKeys()
{
  return &type metadata for ParticleGravityForce.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGravity.CodingKeys()
{
  return &type metadata for ParticleAffectedByGravity.CodingKeys;
}

unint64_t sub_1B1D42758()
{
  unint64_t result;

  result = qword_1EEF5DDE0;
  if (!qword_1EEF5DDE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F164, &type metadata for ParticleGravityForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DDE0);
  }
  return result;
}

unint64_t sub_1B1D427A0()
{
  unint64_t result;

  result = qword_1EEF5DDE8;
  if (!qword_1EEF5DDE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F18C, &type metadata for ParticleGravityForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DDE8);
  }
  return result;
}

unint64_t sub_1B1D427E8()
{
  unint64_t result;

  result = qword_1EEF5DDF0;
  if (!qword_1EEF5DDF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F114, &type metadata for ParticleAffectedByGravity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DDF0);
  }
  return result;
}

unint64_t sub_1B1D42830()
{
  unint64_t result;

  result = qword_1EEF5DDF8;
  if (!qword_1EEF5DDF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F13C, &type metadata for ParticleAffectedByGravity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DDF8);
  }
  return result;
}

uint64_t sub_1B1D42874(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if (qword_1EEF5DE00 == a1)
    return 0x72466E696765622ELL;
  if (qword_1EEF5DE08 == a1)
    return 0x616470556572702ELL;
  if (qword_1EEF5DE10 == a1)
    return 0x6C616974696E692ELL;
  if (qword_1EEF5DE18 == a1)
    return 0x6574616470752ELL;
  if (qword_1EEF5DE20 == a1)
    return 0x64705574736F702ELL;
  if (qword_1EEF5DE28 == a1)
    return 0x646E6572202D2D3CLL;
  if (qword_1EEF5DE30 == a1)
    return 0x65526E696765622ELL;
  if (qword_1EEF5DE38 == a1)
    return 0xD000000000000011;
  result = 0x4F7265646E65722ELL;
  if (qword_1EEF5DE40 != a1)
  {
    if (qword_1EEF5DE48 == a1)
    {
      return 0x61704F74736F702ELL;
    }
    else if (qword_1EEF5DE50 == a1)
    {
      return 0xD000000000000012;
    }
    else if (qword_1EEF5DE58 == a1)
    {
      return 0x584674736F702ELL;
    }
    else if (qword_1EEF5DE60 != a1)
    {
      if (qword_1EEF5DE68 == a1)
      {
        return 0x6975676D692ELL;
      }
      else if (qword_1EEF5DE70 == a1)
      {
        return 0x6E655274736F702ELL;
      }
      else if (qword_1EEF5DE78 == a1)
      {
        return 0x69636570736E752ELL;
      }
      else
      {
        if (qword_1EEF5DE00 <= 100 * (a1 / 100))
          v3 = 100 * (a1 / 100);
        else
          v3 = qword_1EEF5DE00;
        if (v3 <= a1)
        {
          v4 = sub_1B2229A0C();
          sub_1B2228890();
          sub_1B1D42874(v3);
        }
        else
        {
          v4 = sub_1B1D42874(v3);
          sub_1B2228890();
          sub_1B2229A0C();
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        return v4;
      }
    }
  }
  return result;
}

BOOL sub_1B1D42C28(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1B1D42C3C(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1B1D42C50(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1B1D42C64(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t sub_1B1D42C78()
{
  uint64_t *v0;

  return sub_1B1D42874(*v0);
}

uint64_t sub_1B1D42C80()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GenericComponentSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for SystemStage()
{
  return &type metadata for SystemStage;
}

unint64_t sub_1B1D42CD8()
{
  unint64_t result;

  result = qword_1EEF5DE80;
  if (!qword_1EEF5DE80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F2B0, &type metadata for SystemStage);
    atomic_store(result, (unint64_t *)&qword_1EEF5DE80);
  }
  return result;
}

uint64_t sub_1B1D42D1C(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(v1 + 40);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t sub_1B1D42D58()
{
  uint64_t result;

  type metadata accessor for GenericComponentSystem();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = "Default";
  *(_QWORD *)(result + 24) = 7;
  *(_BYTE *)(result + 32) = 2;
  *(_QWORD *)(result + 40) = nullsub_16;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

uint64_t ResizingMode.init(rawValue:)(unsigned __int8 a1)
{
  unsigned __int8 v1;

  if (a1 <= 2u)
    v1 = a1;
  else
    v1 = 0;
  return v1 | ((a1 > 2u) << 8);
}

void *static ResizingMode.allCases.getter()
{
  return &unk_1E6376608;
}

unint64_t sub_1B1D42DE0()
{
  unint64_t result;

  result = qword_1EEF5DE90;
  if (!qword_1EEF5DE90)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for ResizingMode, &type metadata for ResizingMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5DE90);
  }
  return result;
}

uint64_t sub_1B1D42E24()
{
  return sub_1B19E52CC(&qword_1EEF5DE98, (uint64_t (*)(uint64_t))sub_1B1D42E50, MEMORY[0x1E0DEAF50]);
}

void sub_1B1D42E50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5DEA0)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5DEA0);
  }
}

void sub_1B1D42EA4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6376630;
}

uint64_t sub_1B1D42EB8()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for VFXError()
{
  return sub_1B1D42ED0();
}

uint64_t sub_1B1D42ED0()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s3VFX8VFXErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1B1D42EB8();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for VFXError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  sub_1B1D42EB8();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1B1D42ED0();
  return a1;
}

uint64_t assignWithTake for VFXError(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1B1D42ED0();
  return a1;
}

ValueMetadata *type metadata accessor for VFXError()
{
  return &type metadata for VFXError;
}

ValueMetadata *type metadata accessor for ResizingMode()
{
  return &type metadata for ResizingMode;
}

void sub_1B1D42FD8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;

  v1 = MEMORY[0x1B5E240CC](v0 + 16);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(void **)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect);
    v7 = v3;

    if (v3)
    {
      v4 = (void *)MEMORY[0x1B5E240CC](&v7[OBJC_IVAR____TtC3VFX9VFXEffect_scene]);

      if (v4)
      {
        sub_1B1F43C48();
        v5 = swift_allocObject();
        *(_QWORD *)(v5 + 16) = v7;
        *(_BYTE *)(v5 + 24) = 0;
        v6 = v7;
        sub_1B1DA6294((uint64_t)sub_1B179196C, v5);

        swift_release();
        swift_release();
      }
      else
      {

      }
    }
  }
}

uint64_t sub_1B1D430D4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1D43278()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;

  Strong = swift_weakLoadStrong();
  v1 = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    if (v2)
    {
      swift_retain();
      swift_release();
      v1 = *(_QWORD *)(v2 + 312);
      swift_unknownObjectRetain();
      swift_release();
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return v1;
}

uint64_t sub_1B1D434C4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1B1D435F8(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  char *v12;
  uint64_t v13;
  int *v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v2 = v1;
  if (a1)
  {
    v4 = (void *)MEMORY[0x1B5E240CC](&a1[OBJC_IVAR____TtC3VFX9VFXEffect_scene]);

    if (v4)
    {
      sub_1B1F43C48();
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = a1;
      *(_BYTE *)(v5 + 24) = 0;
      v6 = a1;
      sub_1B1DA6294((uint64_t)sub_1B1D449CC, v5);
      swift_release();
      swift_release();
    }
  }
  v7 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect;
  v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect);
  if (v8)
    v9 = (void *)MEMORY[0x1B5E240CC](v8 + OBJC_IVAR____TtC3VFX9VFXEffect_scene);
  else
    v9 = 0;
  v10 = *(void **)(v2 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene) = v9;
  v11 = v9;

  sub_1B1D44088();
  v12 = *(char **)(v2 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView);
  v13 = *(_QWORD *)(v2 + v7);
  if (!v13 || (v14 = (int *)(v13 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID), *((_BYTE *)v14 + 4) == 1))
    v14 = &dword_1EEFD58F0;
  *(_DWORD *)&v12[OBJC_IVAR____TtC3VFX11VFXCoreView_effectID] = *v14;
  v15 = v12;
  sub_1B1E50590();

  v16 = *(char **)(v2 + v7);
  if (v16)
  {
    v17 = (void *)MEMORY[0x1B5E240CC](&v16[OBJC_IVAR____TtC3VFX9VFXEffect_scene]);
    v20 = v16;

    if (v17)
    {
      sub_1B1F43C48();
      v18 = swift_allocObject();
      *(_QWORD *)(v18 + 16) = v20;
      *(_BYTE *)(v18 + 24) = 1;
      v19 = v20;
      sub_1B1DA6294((uint64_t)sub_1B1D449CC, v18);

      swift_release();
      swift_release();
    }
    else
    {

    }
  }
}

void sub_1B1D4385C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  int v9;

  v2 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView) = a1;

  v4 = *(_QWORD *)(v1 + v2);
  if (v4)
    v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  else
    v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView)
                 + OBJC_IVAR____TtC3VFX11VFXCoreView_renderOutput);
  if (v6)
  {
    v7 = v4 == 0;
    if (v4)
      v8 = v5;
    else
      v8 = -1;
    if (v7)
      v9 = 0;
    else
      v9 = HIDWORD(v5);
    *(_DWORD *)(v6 + 24) = v8;
    *(_DWORD *)(v6 + 28) = v9;
  }
}

void sub_1B1D43A54(double a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  double v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  char *v23;
  id v24;

  v2 = *(char **)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView);
  v3 = OBJC_IVAR____TtC3VFX11VFXCoreView_scaleFactor;
  *(double *)&v2[OBJC_IVAR____TtC3VFX11VFXCoreView_scaleFactor] = a1;
  v4 = v2;
  v5 = objc_msgSend(v4, sel_window);
  if (v5)
  {
    v24 = v5;
    v6 = (void *)objc_opt_self();
    objc_msgSend(v6, sel_begin);
    objc_msgSend(v6, sel_setDisableActions_, 1);
    v7 = *(double *)&v2[v3];
    v8 = objc_msgSend(v24, sel_screen);
    objc_msgSend(v8, sel_nativeScale);
    v10 = v9;

    objc_msgSend(v4, sel_setContentScaleFactor_, v7 * v10);
    objc_msgSend(v4, sel_bounds);
    v12 = v11;
    v14 = v13;
    objc_msgSend(v4, sel_contentScaleFactor);
    v16 = v12 * v15;
    objc_msgSend(v4, sel_contentScaleFactor);
    v18 = v14 * v17;
    v19 = ceil(v16);
    v20 = ceil(v18);
    v21 = (double *)&v4[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize];
    if (*(double *)&v4[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize] != v19
      || *(double *)&v4[OBJC_IVAR____TtC3VFX11VFXCoreView_drawableSize + 8] != v20)
    {
      *v21 = v19;
      v21[1] = v20;
      sub_1B1E50590();
    }
    objc_msgSend(v6, sel_commit);

    v23 = (char *)v24;
  }
  else
  {
    v23 = v4;
  }

}

void sub_1B1D43C38(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  char *v3;
  char *v4;

  v2 = *(char **)(v1 + OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView);
  v3 = &v2[OBJC_IVAR____TtC3VFX11VFXCoreView_preferredFramesPerSecond];
  *(_QWORD *)v3 = a1 & ~(a1 >> 63);
  v3[8] = a1 < 1;
  v4 = v2;
  sub_1B1E50590();

}

char *sub_1B1D43CEC(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  id v19;
  objc_super v21;

  v5 = v4;
  v10 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_delegateImpl;
  type metadata accessor for VFXViewLegacy.VFXViewDelagate();
  v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v5[v10] = v11;
  v12 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
  v13 = objc_allocWithZone((Class)type metadata accessor for VFXCoreView());
  v14 = v5;
  *(_QWORD *)&v5[v12] = sub_1B1E50D54(0, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v14[OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView] = 0;

  v21.receiver = v14;
  v21.super_class = (Class)type metadata accessor for VFXViewLegacy();
  v15 = (char *)objc_msgSendSuper2(&v21, sel_initWithFrame_, a1, a2, a3, a4);
  v16 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
  v17 = *(void **)&v15[OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView];
  v18 = v15;
  v19 = v17;
  objc_msgSend(v18, sel_bounds);
  objc_msgSend(v19, sel_setFrame_);

  objc_msgSend(v18, sel_addSubview_, *(_QWORD *)&v15[v16]);
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(*(_QWORD *)&v15[v16] + OBJC_IVAR____TtC3VFX11VFXCoreView_delegate + 8) = &off_1E637DC08;
  swift_unknownObjectWeakAssign();
  objc_msgSend(*(id *)&v15[v16], sel_setAutoresizingMask_, 18);

  return v18;
}

char *sub_1B1D43EC4(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  id v14;
  objc_super v16;

  v2 = v1;
  v4 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_delegateImpl;
  type metadata accessor for VFXViewLegacy.VFXViewDelagate();
  v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v2[v4] = v5;
  v6 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
  v7 = objc_allocWithZone((Class)type metadata accessor for VFXCoreView());
  v8 = v2;
  *(_QWORD *)&v2[v6] = sub_1B1E50D54(0, 0.0, 0.0, 0.0, 0.0);
  *(_QWORD *)&v8[OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC3VFX13VFXViewLegacy_effect] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC3VFX13VFXViewLegacy_pointOfView] = 0;

  v16.receiver = v8;
  v16.super_class = (Class)type metadata accessor for VFXViewLegacy();
  v9 = (char *)objc_msgSendSuper2(&v16, sel_initWithCoder_, a1);
  v10 = v9;
  if (v9)
  {
    v11 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
    v12 = *(void **)&v9[OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView];
    v13 = v9;
    v14 = v12;
    objc_msgSend(v13, sel_bounds);
    objc_msgSend(v14, sel_setFrame_);

    objc_msgSend(v13, sel_addSubview_, *(_QWORD *)&v10[v11]);
    swift_unknownObjectWeakAssign();
    *(_QWORD *)(*(_QWORD *)&v10[v11] + OBJC_IVAR____TtC3VFX11VFXCoreView_delegate + 8) = &off_1E637DC08;
    swift_unknownObjectWeakAssign();
    objc_msgSend(*(id *)&v10[v11], sel_setAutoresizingMask_, 18);

  }
  return v10;
}

void sub_1B1D44088()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  v1 = *(char **)&v0[OBJC_IVAR____TtC3VFX13VFXViewLegacy_scene];
  if (v1)
  {
    v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
    swift_weakAssign();
    v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
    v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v4;
    *(_BYTE *)(v5 + 24) = v3 != 0;
    *(_QWORD *)(v5 + 32) = v0;
    if (v3)
    {
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = sub_1B1D4492C;
      *(_QWORD *)(v6 + 24) = v5;
      v7 = v1;
      swift_retain();
      v8 = v0;
      swift_retain();
      sub_1B1DA6294((uint64_t)sub_1B1A0FDB0, v6);
      swift_release();

      swift_release();
    }
    else
    {
      v9 = v1;
      swift_retain();
      v10 = v0;
      swift_retain();
      sub_1B1D9D97C(v2, sub_1B1D4492C, v5);
      swift_release();

    }
    swift_release();
  }
}

void sub_1B1D44238(uint64_t a1, char a2, void *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD aBlock[6];
  __int128 v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  v6 = sub_1B222847C();
  v7 = *(void **)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1B22284AC();
  v12 = *(_QWORD *)(v11 - 8);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1B5E240CC](a1 + 16, v14);
  if (v17)
  {
    v18 = (void *)v17;
    v36 = v11;
    v37 = v7;
    v19 = *(_QWORD *)(v17 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
    v20 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
    if (*(_QWORD *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
    {
      swift_retain();
    }
    else
    {
      *((_QWORD *)&v39 + 1) = 0;
      LODWORD(v39) = 0;
      BYTE4(v39) = 0;
      v40 = 1;
      v41 = 0;
      v42 = 1;
      v43 = 0;
      v44 = 257;
      v45 = 260;
      v46 = 0;
      v47 = 0;
      type metadata accessor for Renderer();
      swift_allocObject();
      swift_retain();
      *(_QWORD *)(v19 + v20) = sub_1B1BA3100(0, 0, &v39);
      swift_release();
    }
    sub_1B179207C();
    if (*(_QWORD *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8))
    {
      v35 = v12;
      if ((a2 & 1) != 0)
      {
LABEL_11:
        v24 = *(_QWORD *)(v19 + v20);
        v25 = (_QWORD *)swift_allocObject();
        v25[2] = a3;
        v25[3] = v19;
        v25[4] = v24;
        v26 = (void *)objc_opt_self();
        swift_retain_n();
        swift_retain();
        v27 = a3;
        if (objc_msgSend(v26, sel_isMainThread))
        {
          v28 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
          swift_weakAssign();
          v29 = *(void **)&v27[v28];
          swift_retain();
          v37 = v29;
          sub_1B1E502A8();

          swift_release();
          swift_release();
          swift_release();

        }
        else
        {
          sub_1B17914E8();
          v34 = sub_1B2228F44();
          v30 = swift_allocObject();
          *(_QWORD *)(v30 + 16) = sub_1B1D44970;
          *(_QWORD *)(v30 + 24) = v25;
          aBlock[4] = sub_1B1D13D9C;
          aBlock[5] = v30;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1B17915D0;
          aBlock[3] = &unk_1E63D47E0;
          v31 = _Block_copy(aBlock);
          swift_retain();
          swift_release();
          sub_1B2228494();
          aBlock[0] = MEMORY[0x1E0DEE9D8];
          sub_1B19E52CC((unint64_t *)&qword_1ED4B7290, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
          sub_1B179157C();
          sub_1B19E52CC((unint64_t *)&qword_1ED4B72B0, (uint64_t (*)(uint64_t))sub_1B179157C, MEMORY[0x1E0DEAF38]);
          sub_1B2229364();
          v32 = (void *)v34;
          MEMORY[0x1B5E20AFC](0, v16, v10, v31);
          _Block_release(v31);
          swift_release();
          swift_release();
          swift_release();

          (*((void (**)(char *, uint64_t))v37 + 1))(v10, v6);
          (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
        }
        return;
      }
    }
    else
    {
      sub_1B1F4CBCC();
      v35 = v12;
      if ((a2 & 1) != 0)
        goto LABEL_11;
    }
    v21 = OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread;
    if (!*(_QWORD *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread))
    {
      type metadata accessor for RuntimeThread();
      swift_allocObject();
      v22 = swift_retain();
      v23 = sub_1B1E67A6C(v22, 0, 0);
      swift_release();
      *(_QWORD *)(v19 + v21) = v23;
      swift_release();
    }
    goto LABEL_11;
  }
}

void sub_1B1D44698(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = OBJC_IVAR____TtC3VFX13VFXViewLegacy_coreView;
  swift_weakAssign();
  v3 = *(void **)(a1 + v2);
  swift_retain();
  v4 = v3;
  sub_1B1E502A8();

}

id sub_1B1D447E0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXViewLegacy();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for VFXViewLegacy()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VFXViewLegacy.VFXViewDelagate()
{
  return objc_opt_self();
}

uint64_t sub_1B1D448B8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1B1D448DC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1D44900()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_1B1D4492C()
{
  uint64_t v0;

  sub_1B1D44238(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1B1D4493C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_1B1D44970()
{
  uint64_t v0;

  sub_1B1D44698(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1B1D4497C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1D449A0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1D449C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B20C060C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1B1D449F0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1B1D44A10(_OWORD *a1@<X8>)
{
  __int128 v2;

  *(double *)&v2 = sub_1B1D45A4C();
  *a1 = xmmword_1B2244E20;
  a1[1] = v2;
}

_QWORD *sub_1B1D44A3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  int v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  unsigned int v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  os_unfair_lock_s *v66;
  uint64_t v67;
  uint64_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t j;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  BOOL v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  unsigned int v89;
  int v90;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  unsigned int v96;
  int v97;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v104;
  _QWORD *v105;
  size_t v106;
  char *v107;
  char *v108;
  char *v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x4_t v136;
  int v137;
  float32x4_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unsigned __int16 *v143;
  _QWORD *v144;
  _QWORD v145[8];
  _QWORD v146[12];
  _QWORD v147[7];
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD v152[7];
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD v167[2];
  uint64_t v168;
  _OWORD v169[2];
  uint64_t v170;

  v2 = v1;
  v3 = *(_OWORD *)(v1 + 32);
  v169[0] = *(_OWORD *)(v1 + 16);
  v169[1] = v3;
  v170 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v169, 0x200000000, v145);
  sub_1B19ED688((uint64_t)v145, (uint64_t)v152);
  if (v152[0])
  {
    if (v154 >= 1)
    {
      v4 = v153;
      if (v153)
      {
        v5 = v152[5];
        swift_retain();
        swift_retain();
        swift_retain();
        v6 = 48 * v4;
        v7 = (uint64_t *)(v5 + 40);
        do
        {
          v12 = *v7;
          v13 = *(os_unfair_lock_s **)(*v7 + 376);
          swift_retain();
          os_unfair_lock_lock(v13);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          v14 = *(_DWORD *)(v12 + 24);
          swift_retain();
          v157 = 0;
          v155 = 0u;
          v156 = 0u;
          memset(v147, 0, 40);
          v15 = sub_1B1DA4ED8(v14, (uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, 0, 0, (uint64_t)&v155, (uint64_t)v147);
          swift_release();
          sub_1B1A12E98((uint64_t)v147);
          sub_1B1A12E98((uint64_t)&v155);
          if (sub_1B1A10B20(v15))
          {
            sub_1B1A10BB0(v15);
          }
          else
          {
            v8 = *(_QWORD *)(v12 + 232);
            v9 = *(_QWORD *)(v12 + 240);
            v10 = *(unsigned __int8 *)(v12 + 120);
            v11 = *(unsigned int *)(v12 + 28);
            LOBYTE(v155) = *(_BYTE *)(v12 + 32);
            sub_1B1FD8C68(v8, v9, v15, v10, v11 | ((unint64_t)v155 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          swift_release();
          v7 += 6;
          v6 -= 48;
        }
        while (v6);
        sub_1B1A086DC(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    sub_1B1A086DC(v145, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v16 = *(_OWORD *)(v2 + 72);
  v167[0] = *(_OWORD *)(v2 + 56);
  v167[1] = v16;
  v168 = *(_QWORD *)(v2 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v167, 0x200000000, v146);
  v17 = sub_1B19ED688((uint64_t)v146, (uint64_t)v147);
  v143 = (unsigned __int16 *)v147[0];
  if (v147[0])
  {
    v119 = v151;
    if (v151 > 0)
    {
      v141 = v148;
      if (v148)
      {
        v140 = v147[5];
        v19 = v150;
        v20 = v150[4];
        v117 = v149;
        v137 = *(unsigned __int8 *)(v149 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        sub_1B1A086DC(v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
        v139 = v19 + 8;
        v142 = (char *)v143 + 41;
        swift_retain();
        swift_retain();
        swift_retain();
        v21 = 0;
        v144 = v19;
        v115 = v20;
        while (1)
        {
          v22 = (unsigned int *)(v140 + 48 * v21);
          v23 = *v22;
          v24 = v22[1];
          v25 = v22[2];
          v26 = *((_QWORD *)v22 + 3);
          v129 = v21;
          v131 = *((_QWORD *)v22 + 2);
          v28 = *((_QWORD *)v22 + 4);
          v27 = *((_QWORD *)v22 + 5);
          if (v137)
          {
            v29 = *(os_unfair_lock_s **)(v27 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v29);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v20);
          v123 = v19[7];
          v125 = v19[6];
          v121 = v19[8];
          v133 = v19[10];
          v135 = v19[9];
          v30 = v19[4];
          v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v144[6] = ecs_stack_allocator_allocate(v30, 48 * v31, 8);
          v144[7] = v31;
          v19 = v144;
          v139[1] = 0;
          v139[2] = 0;
          *v139 = 0;
          swift_release();
          *(_QWORD *)&v155 = v117;
          v127 = v27;
          *((_QWORD *)&v155 + 1) = v27;
          *(_QWORD *)&v156 = v144;
          *((_QWORD *)&v156 + 1) = v25;
          v157 = (v24 - v23 + v25);
          v158 = v119;
          v159 = v23;
          v160 = v24;
          v161 = 0;
          v162 = 0;
          v163 = 1;
          v164 = v131;
          v165 = v26;
          v166 = v28;
          sub_1B1D45654(&v155);
          v32 = v144[6];
          v33 = v144[8];
          if (!v33)
          {
            v59 = v144[7];
            v60 = (_QWORD *)v144[4];
            v61 = v129;
            goto LABEL_56;
          }
          for (i = 0; i != v33; ++i)
          {
            v36 = (uint64_t *)(v32 + 48 * i);
            v37 = *v36;
            v38 = (void (*)(uint64_t))v36[4];
            v39 = v19[9];
            if (v39)
              v40 = v37 == v39;
            else
              v40 = 0;
            if (v40 || !v143[11])
              goto LABEL_21;
            v41 = v143[9];
            v42 = &v142[v143[8]];
            v43 = v36[2];
            v44 = v42;
            v45 = v41 >> 4;
            v46 = (char *)v143 + 41;
            if (v41 >= 0x10)
            {
              while (*(_QWORD *)v44 != v37)
              {
                ++v46;
                v44 += 16;
                if (!--v45)
                  goto LABEL_36;
              }
              v47 = v46[v143[10]];
              v48 = v47 > 5;
              v49 = (1 << v47) & 0x23;
              if (v48 || v49 == 0)
              {
LABEL_21:
                v35 = swift_retain();
                v38(v35);
                swift_release();
                goto LABEL_22;
              }
            }
LABEL_36:
            if (swift_conformsToProtocol2())
              v51 = v43;
            else
              v51 = 0;
            if (v51)
            {
              if (v41 < 0x10)
                goto LABEL_21;
              v52 = v42;
              v53 = v41 >> 4;
              v54 = (char *)v143 + 41;
              while (*(_QWORD *)v52 != v51)
              {
                ++v54;
                v52 += 16;
                if (!--v53)
                  goto LABEL_49;
              }
              v55 = v54[v143[10]];
              v48 = v55 > 5;
              v56 = (1 << v55) & 0x23;
              if (v48 || v56 == 0)
                goto LABEL_21;
LABEL_49:
              v58 = 16 * (v41 >> 4);
              while (*(_QWORD *)v42 != v51)
              {
                v42 += 16;
                v58 -= 16;
                if (!v58)
                  goto LABEL_21;
              }
            }
LABEL_22:
            v19 = v144;
          }
          v59 = v144[7];
          v32 = v144[6];
          v60 = (_QWORD *)v144[4];
          v61 = v129;
          if ((uint64_t)v144[8] >= 1)
            swift_arrayDestroy();
LABEL_56:
          ecs_stack_allocator_deallocate(v60, v32, 48 * v59);
          v19[6] = v125;
          v19[7] = v123;
          v19[8] = v121;
          v19[9] = v135;
          v19[10] = v133;
          sub_1B1F03804((char *)v127);
          v20 = v115;
          ecs_stack_allocator_pop_snapshot(v115);
          if ((v137 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v127 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v127 + 376));
          }
          swift_release();
          v21 = v61 + 1;
          if (v21 == v141)
          {
            sub_1B1A086DC(v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            sub_1B1A086DC(v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            v136 = (float32x4_t)xmmword_1B226DDC0;
            v138 = (float32x4_t)xmmword_1B2244E20;
            v62 = v19[4];
            v63 = *(unsigned __int8 *)(v117 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v120 = v19 + 13;
            sub_1B1A086DC(v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
            sub_1B1A086DC(v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
            v64 = 0;
            v116 = v62;
            v118 = v63;
            while (1)
            {
              v65 = *(_QWORD *)(v140 + 48 * v64 + 40);
              if (v63)
              {
                v66 = *(os_unfair_lock_s **)(v65 + 376);
                swift_retain_n();
                os_unfair_lock_lock(v66);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v65 + 344));
                swift_release();
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v62);
              v124 = v19[6];
              v132 = v19[8];
              v134 = v19[7];
              v128 = v19[10];
              v130 = v19[9];
              v67 = v19[4];
              v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v65 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v19[6] = ecs_stack_allocator_allocate(v67, 48 * v68, 8);
              v19[7] = v68;
              v139[1] = 0;
              v139[2] = 0;
              *v139 = 0;
              swift_release();
              v69 = *(float32x4_t *)(v65 + 272);
              v70 = *(float32x4_t *)(v65 + 288);
              v126 = v65;
              v71 = vminnmq_f32(vsubq_f32(v138, v136), vsubq_f32(v69, v70));
              v72 = vmaxnmq_f32(vaddq_f32(v138, v136), vaddq_f32(v69, v70));
              v73.i64[0] = 0x3F0000003F000000;
              v73.i64[1] = 0x3F0000003F000000;
              v136 = vmulq_f32(vsubq_f32(v72, v71), v73);
              v138 = vmulq_f32(vaddq_f32(v71, v72), v73);
              v74 = v19[6];
              v75 = v19[8];
              if (!v75)
              {
                v100 = v19[7];
                v101 = (_QWORD *)v19[4];
                goto LABEL_102;
              }
              v122 = v64;
              for (j = 0; j != v75; ++j)
              {
                v78 = (uint64_t *)(v74 + 48 * j);
                v79 = *v78;
                v80 = (void (*)(uint64_t))v78[4];
                v81 = v19[9];
                if (v81)
                  v82 = v79 == v81;
                else
                  v82 = 0;
                if (v82 || !v143[11])
                  goto LABEL_66;
                v83 = v143[9];
                v84 = &v142[v143[8]];
                v85 = v78[2];
                v86 = v84;
                v87 = v83 >> 4;
                v88 = (char *)v143 + 41;
                if (v83 >= 0x10)
                {
                  while (*(_QWORD *)v86 != v79)
                  {
                    ++v88;
                    v86 += 16;
                    if (!--v87)
                      goto LABEL_81;
                  }
                  v89 = v88[v143[10]];
                  v48 = v89 > 5;
                  v90 = (1 << v89) & 0x23;
                  if (v48 || v90 == 0)
                  {
LABEL_66:
                    v77 = swift_retain();
                    v80(v77);
                    swift_release();
                    goto LABEL_67;
                  }
                }
LABEL_81:
                if (swift_conformsToProtocol2())
                  v92 = v85;
                else
                  v92 = 0;
                if (v92)
                {
                  if (v83 < 0x10)
                    goto LABEL_66;
                  v93 = v84;
                  v94 = v83 >> 4;
                  v95 = (char *)v143 + 41;
                  while (*(_QWORD *)v93 != v92)
                  {
                    ++v95;
                    v93 += 16;
                    if (!--v94)
                      goto LABEL_94;
                  }
                  v96 = v95[v143[10]];
                  v48 = v96 > 5;
                  v97 = (1 << v96) & 0x23;
                  if (v48 || v97 == 0)
                    goto LABEL_66;
LABEL_94:
                  v99 = 16 * (v83 >> 4);
                  while (*(_QWORD *)v84 != v92)
                  {
                    v84 += 16;
                    v99 -= 16;
                    if (!v99)
                      goto LABEL_66;
                  }
                }
LABEL_67:
                v19 = v144;
              }
              v100 = v144[7];
              v74 = v144[6];
              v101 = (_QWORD *)v144[4];
              if ((uint64_t)v144[8] >= 1)
                swift_arrayDestroy();
              v62 = v116;
              v63 = v118;
              v64 = v122;
LABEL_102:
              ecs_stack_allocator_deallocate(v101, v74, 48 * v100);
              v19[6] = v124;
              v19[7] = v134;
              v19[8] = v132;
              v19[9] = v130;
              v19[10] = v128;
              if (*(_QWORD *)(v19[13] + 16))
              {
                v102 = (_QWORD *)swift_bridgeObjectRetain();
                sub_1B1F05034(v102, v126);
                swift_bridgeObjectRelease();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v104 = v19[13];
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  sub_1B1C92670(0, *(_QWORD *)(v104 + 16));
                }
                else
                {
                  v105 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                  if (*(_QWORD *)(v104 + 24) >= 2uLL)
                  {
                    sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                    v105 = (_QWORD *)swift_allocObject();
                    v106 = j__malloc_size(v105);
                    v105[2] = 0;
                    v105[3] = 2 * ((uint64_t)(v106 - 32) / 72);
                  }
                  *v120 = v105;
                  swift_bridgeObjectRelease();
                }
                if (*(unsigned __int8 *)(v19[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
                {
                  v107 = *(char **)(v126 + 232);
                  v108 = *(char **)(v126 + 256);
                  if (v107 == v108)
                  {
                    v109 = *(char **)(v126 + 240);
                  }
                  else
                  {
                    sub_1B1A1059C(v108, v107);
                    v108 = *(char **)(v126 + 232);
                    v109 = *(char **)(v126 + 240);
                    if (v109 == v108)
                    {
                      v109 = 0;
                      v108 = 0;
                      *(_QWORD *)(v126 + 232) = 0;
                      *(_QWORD *)(v126 + 240) = 0;
                    }
                  }
                  *(_QWORD *)(v126 + 248) = v109;
                  *(_QWORD *)(v126 + 256) = v108;
                }
              }
              ecs_stack_allocator_pop_snapshot(v62);
              if ((v63 & 1) != 0)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v126 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v126 + 376));
              }
              swift_release();
              if (++v64 == v141)
              {
                sub_1B1A086DC(v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
                v17 = (uint64_t)sub_1B1A086DC(v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
                goto LABEL_117;
              }
            }
          }
        }
      }
    }
  }
LABEL_117:
  MEMORY[0x1E0C80A78](v17, v18);
  v110 = *(_QWORD **)(a1 + 176);
  MEMORY[0x1E0C80A78](v111, v112);
  swift_retain();
  sub_1B1F22244((uint64_t)&type metadata for SceneWorldAABB, (uint64_t)&off_1E6380FD8, v110, (void (*)(uint64_t))sub_1B1D45A58);
  swift_release();
  return sub_1B1A086DC(v146, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t sub_1B1D45654(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  float32x4_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t *v16;
  int32x2_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  v2 = (uint64_t *)a1[11];
  v3 = a1[12];
  v4 = a1[13];
  v5 = (float32x4_t *)a1[1];
  v6 = a1[2];
  v7 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v2, v3, v4, v6);
  v8 = sub_1B1A12038((uint64_t)&type metadata for LocalAABB, (uint64_t)&off_1E63C4128, v2, v3, v4, v6);
  result = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v2, v3, v4, v6);
  v10 = a1[6];
  v11 = a1[7] - v10;
  if (v11)
  {
    v14 = (float32x4_t *)(v7 + (v10 << 6) + 32);
    v15 = (32 * v10) | 0x10;
    v16 = (float32x4_t *)(result + v15);
    v17 = (int32x2_t *)(v8 + v15);
    v12 = (float32x4_t)xmmword_1B2244E20;
    v13 = (float32x4_t)xmmword_1B226DDC0;
    v18.i64[0] = 0x3F0000003F000000;
    v18.i64[1] = 0x3F0000003F000000;
    do
    {
      v19 = v14[-2];
      v20 = v14[-1];
      v21 = *v14;
      v22 = v14[1];
      v14 += 4;
      v23 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v22, v21, *(float32x4_t *)v17[-2].i8, 2), v20, (float32x2_t)v17[-2], 1), v19, COERCE_FLOAT(*(_OWORD *)v17[-2].i8));
      v23.i32[3] = HIDWORD(*(_OWORD *)v17[-2].i8);
      v24 = *(float32x4_t *)v17->i8;
      v24.i32[1] = *(_OWORD *)v17->i8;
      v24.i32[2] = v24.i32[1];
      v25 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*v17, 1), *(int32x4_t *)v17->i8), vabsq_f32(v20)), v24, vabsq_f32(v19)), (float32x4_t)vzip2q_s32(vtrn1q_s32(*(int32x4_t *)v17->i8, *(int32x4_t *)v17->i8), *(int32x4_t *)v17->i8), vabsq_f32(v21));
      v16[-1] = v23;
      *v16 = v25;
      v26 = vminnmq_f32(vsubq_f32(v12, v13), vsubq_f32(v23, v25));
      v27 = vmaxnmq_f32(vaddq_f32(v13, v12), vaddq_f32(v25, v23));
      v12 = vmulq_f32(vaddq_f32(v26, v27), v18);
      v13 = vmulq_f32(vsubq_f32(v27, v26), v18);
      v16 += 2;
      v17 += 4;
      --v11;
    }
    while (v11);
  }
  else
  {
    v12 = (float32x4_t)xmmword_1B2244E20;
    v13 = (float32x4_t)xmmword_1B226DDC0;
  }
  v5[17] = v12;
  v5[18] = v13;
  v5[19].i32[0] = v5[7].i32[1];
  return result;
}

uint64_t type metadata accessor for UpdateWorldAABBSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1D45804()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  uint64_t v3;
  __int128 v4;
  _BYTE v6[40];
  _OWORD v7[2];
  uint64_t v8;
  _BYTE v9[40];
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v18 = qword_1ED4D09F8;
  v19 = 0;
  v20 = 2;
  v21 = 0;
  v22 = 2;
  v23 = 0;
  swift_retain();
  sub_1B19EEF80((uint64_t)v6);
  swift_release();
  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAE50, (void (*)(uint64_t))sub_1B19F66EC);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for WorldAABB;
  *(_QWORD *)(inited + 40) = &off_1E63C6040;
  sub_1B1B44110(v7, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v6);
  v2 = v7[1];
  *(_OWORD *)(v0 + 16) = v7[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v8;
  v12 = qword_1ED4D09F8;
  v13 = 0;
  v14 = 2;
  v15 = 0;
  v16 = 2;
  v17 = 0;
  swift_retain();
  sub_1B1A14FFC(1, 1, 2, (uint64_t)v9);
  swift_release();
  v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v3 + 32) = &type metadata for Fixed;
  *(_QWORD *)(v3 + 40) = &off_1E63BA508;
  sub_1B1B44110(v10, v3);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v9);
  v4 = v10[1];
  *(_OWORD *)(v0 + 56) = v10[0];
  *(_OWORD *)(v0 + 72) = v4;
  *(_QWORD *)(v0 + 88) = v11;
  return v0;
}

uint64_t sub_1B1D459F4()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1D45804();
  return v0;
}

const char *sub_1B1D45A28()
{
  return "UpdateWorldAABB";
}

uint64_t sub_1B1D45A3C()
{
  return qword_1EEF5DE18 + 50;
}

double sub_1B1D45A4C()
{
  return -9.41755707e297;
}

uint64_t sub_1B1D45A58()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

ValueMetadata *type metadata accessor for SceneWorldAABB()
{
  return &type metadata for SceneWorldAABB;
}

uint64_t *sub_1B1D45A88(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26[12];
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29[8];
  _QWORD v30[7];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;

  v3 = *(_OWORD *)(v1 + 32);
  v64[0] = *(_OWORD *)(v1 + 16);
  v64[1] = v3;
  v65 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v64, 0x200000000, v26);
  sub_1B1A18378((uint64_t)v26, (uint64_t)&v34, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v34)
  {
    v53 = v34;
    v54 = v35;
    v55 = v36;
    v56 = v37;
    v57 = v38;
    v58 = v39;
    v59 = v40;
    v60 = v41;
    v61 = v42;
    v62 = v43;
    v63 = v44;
    sub_1B21870CC((uint64_t)&v53);
    sub_1B19ED748(v26);
  }
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v47 = qword_1ED4D09F8;
  v48 = 0;
  v49 = 2;
  v50 = 0;
  v51 = 2;
  v52 = 0;
  swift_retain();
  sub_1B1E3C3C0(1, (uint64_t)v27);
  swift_release();
  v45[0] = v27[0];
  v45[1] = v27[1];
  v46 = v28;
  sub_1B1E8FCE4(a1, (uint64_t)v45, 0x200000000, v29);
  sub_1B1A18378((uint64_t)v29, (uint64_t)v30, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v30[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v27);
  if (v33 >= 1)
  {
    v4 = v31;
    if (v31)
    {
      v5 = v30[5];
      v6 = v32;
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 48 * v4;
      v8 = (uint64_t *)(v5 + 40);
      do
      {
        v13 = *v8;
        v14 = *(os_unfair_lock_s **)(*v8 + 376);
        swift_retain();
        os_unfair_lock_lock(v14);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        if ((*(_BYTE *)(v6 + 112) & 1) == 0)
        {
          v15 = *(_QWORD *)(v13 + 232);
          v16 = *(_QWORD *)(v13 + 240);
          if (v16 != v15)
          {
            v17 = *(_QWORD *)(v13 + 192);
            if (v17)
            {
              v18 = *(_QWORD *)(v13 + 208);
              sub_1B19FA4BC(v15, v16, v17);
              sub_1B19FA6EC(v15, v16, v18);
            }
            sub_1B1FE2814(*(_QWORD *)(v13 + 40), v13, v15, v16);
          }
        }
        v19 = *(_DWORD *)(v13 + 24);
        swift_retain();
        v25 = 0;
        memset(v24, 0, sizeof(v24));
        v23 = 0;
        memset(v22, 0, sizeof(v22));
        v20 = sub_1B1DA4ED8(v19, 0, 0, (uint64_t)&type metadata for ShaderFileAsset, (uint64_t)&off_1E6385810, (uint64_t)v24, (uint64_t)v22);
        swift_release();
        sub_1B1A12E98((uint64_t)v22);
        sub_1B1A12E98((uint64_t)v24);
        if (sub_1B1A10B20(v20))
        {
          sub_1B1A10BB0(v20);
        }
        else
        {
          v9 = *(_QWORD *)(v13 + 232);
          v10 = *(_QWORD *)(v13 + 240);
          v11 = *(unsigned __int8 *)(v13 + 120);
          v12 = *(unsigned int *)(v13 + 28);
          LOBYTE(v24[0]) = *(_BYTE *)(v13 + 32);
          sub_1B1FD8C68(v9, v10, v20, v11, v12 | ((unint64_t)LOBYTE(v24[0]) << 32), 0, 0, 0);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
        swift_release();
        v8 += 6;
        v7 -= 48;
      }
      while (v7);
      sub_1B19ED748(v29);
    }
  }
  sub_1B19ED720((uint64_t)v27);
  return sub_1B19ED748(v29);
}

double sub_1B1D45E2C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v6;

  *(_QWORD *)&v6 = 0;
  *((_QWORD *)&v6 + 1) = 0xE000000000000000;
  sub_1B2082C6C(a1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0xE000000000000000;
    *(_OWORD *)(a2 + 32) = 0uLL;
  }
  return result;
}

void sub_1B1D45EBC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  switch(a1)
  {
    case 4:
      v1 = &qword_1ED4BB080;
      v2 = MEMORY[0x1E0DEB188];
      v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
      goto LABEL_5;
    case 5:
      v1 = (unint64_t *)&qword_1ED4BB0A0;
      v2 = MEMORY[0x1E0DEB188];
      v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
      goto LABEL_5;
    case 6:
      v1 = (unint64_t *)&qword_1ED4BB0E0;
      v2 = MEMORY[0x1E0DEB188];
      v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_5:
      sub_1B19F8E54(0, v1, (uint64_t (*)(void))sub_1B19F8DCC, v2, v3);
      break;
    case 7:
      type metadata accessor for simd_float2x2(0);
      break;
    case 8:
      type metadata accessor for simd_float2x3(0);
      break;
    case 9:
      type metadata accessor for simd_float2x4(0);
      break;
    case 10:
      type metadata accessor for simd_float3x2(0);
      break;
    case 11:
      type metadata accessor for simd_float3x3(0);
      break;
    case 12:
      type metadata accessor for simd_float3x4(0);
      break;
    case 13:
      type metadata accessor for simd_float4x2(0);
      break;
    case 14:
      type metadata accessor for simd_float4x3(0);
      break;
    case 15:
      type metadata accessor for simd_float4x4(0);
      break;
    default:
      return;
  }
}

BOOL sub_1B1D46034(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1B1D496A0((uint64_t)v7, (uint64_t)v8);
}

uint64_t sub_1B1D46078(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v18 = a3;
  v19 = a5;
  v17 = a4;
  sub_1B19F8E54(0, &qword_1EEF5DF48, (uint64_t (*)(void))sub_1B1D4BD94, (uint64_t)&type metadata for MetalFunctionReflection.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v17 - v12;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D4BD94();
  sub_1B222A180();
  v21 = a2;
  v20 = 0;
  sub_1B1D4BDD8();
  sub_1B1D4BE7C(&qword_1EEF5DF50, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEA0B8]);
  sub_1B2229958();
  if (!v5)
  {
    v14 = v17;
    v15 = v19;
    v21 = v18;
    v20 = 1;
    sub_1B1A02758(0, &qword_1EEF5DF30, (uint64_t)&type metadata for MetalFunctionReflection.Arg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1D4BED8(&qword_1EEF5DF58, (uint64_t (*)(void))sub_1B1D4BF54, MEMORY[0x1E0DEAF10]);
    sub_1B2229958();
    v21 = v14;
    v20 = 2;
    sub_1B2229958();
    v21 = v15;
    v20 = 3;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1B1D462A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D462D4 + 4 * byte_1B228F5F3[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_1B1D462D4()
{
  return 0x7865646E69;
}

uint64_t sub_1B1D462E8()
{
  return 0x79747265706F7270;
}

uint64_t sub_1B1D46330()
{
  return 0x5465727574786574;
}

uint64_t sub_1B1D46350()
{
  return 0x74657366666FLL;
}

uint64_t sub_1B1D46364(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D46390 + 4 * byte_1B228F5FA[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_1B1D46390()
{
  return 0x7865646E69;
}

uint64_t sub_1B1D463A4()
{
  return 0x79747265706F7270;
}

uint64_t sub_1B1D463EC()
{
  return 0x5465727574786574;
}

uint64_t sub_1B1D4640C()
{
  return 0x74657366666FLL;
}

void sub_1B1D46420(char *a1)
{
  sub_1B1F96A20(*a1);
}

uint64_t sub_1B1D4642C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D46464 + 4 * byte_1B228F601[*v0]))(0x5373726566667562, 0xEB00000000657A69);
}

uint64_t sub_1B1D46464()
{
  return 0x737475706E69;
}

uint64_t sub_1B1D46478()
{
  return 0x7374757074756FLL;
}

uint64_t sub_1B1D46490()
{
  return 0x74754F7475706E69;
}

uint64_t sub_1B1D464B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1D49714(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1D464D4()
{
  sub_1B1D4BD94();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D464FC()
{
  sub_1B1D4BD94();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D46524@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1B1D4B4F8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1B1D46550(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1D46078(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1B1D4656C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  if ((sub_1B1D48E74(*a1, *a2) & 1) != 0 && (sub_1B1CC984C(v2, v5) & 1) != 0 && (sub_1B1CC984C(v4, v7) & 1) != 0)
    return sub_1B1CC984C(v3, v6);
  else
    return 0;
}

void sub_1B1D465F4(char *a1)
{
  sub_1B1F96B94(*a1);
}

void sub_1B1D46600()
{
  char *v0;

  sub_1B1DB502C(0, *v0);
}

void sub_1B1D4660C(uint64_t a1)
{
  char *v1;

  sub_1B1DB3DD4(a1, *v1);
}

void sub_1B1D46614(uint64_t a1)
{
  char *v1;

  sub_1B1DB502C(a1, *v1);
}

uint64_t sub_1B1D4661C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D498F4();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D46648@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1D462A8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1D46670()
{
  unsigned __int8 *v0;

  return sub_1B1D46364(*v0);
}

uint64_t sub_1B1D46678@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D498F4();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D4669C()
{
  sub_1B1D4BB78();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D466C4()
{
  sub_1B1D4BB78();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D466EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[16];
  uint64_t v15;
  char v16;
  char v17;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5DEE0, (uint64_t (*)(void))sub_1B1D4BB78, (uint64_t)&type metadata for MetalFunctionReflection.Arg.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v14[-v9 - 16];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D4BB78();
  sub_1B222A180();
  LOBYTE(v13) = 0;
  sub_1B2229940();
  if (!v2)
  {
    sub_1B1D4BBBC(v3 + 8, (uint64_t)v14);
    sub_1B1D4BBBC((uint64_t)v14, (uint64_t)&v15);
    if ((v16 & 1) == 0)
    {
      LOBYTE(v13) = 5;
      sub_1B222994C();
    }
    LOBYTE(v13) = 1;
    sub_1B2229940();
    v12 = *(_QWORD *)(v3 + 40);
    LOBYTE(v13) = 4;
    swift_bridgeObjectRetain();
    sub_1B2229910();
    swift_bridgeObjectRelease();
    v13 = *(_OWORD *)(v12 + 144);
    v17 = 3;
    sub_1B1CBB97C();
    sub_1B2229958();
    *(_QWORD *)&v13 = *(_QWORD *)(v12 + 40);
    v17 = 2;
    sub_1B1B6AEE0();
    sub_1B2229958();
    LOBYTE(v13) = 6;
    sub_1B2229940();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1D46974@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1B1D4B7E0(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1B1D469B4(_QWORD *a1)
{
  return sub_1B1D466EC(a1);
}

_QWORD *sub_1B1D469EC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1B1B7ECF8(MEMORY[0x1E0DEE9D8]);
  *a1 = result;
  return result;
}

uint64_t sub_1B1D46A18(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;

  v2 = v1;
  v4 = v1[3];
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = v2[8];
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v11 = v2[13];
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v14 = v2[18];
  swift_getObjectType();
  v15 = sub_1B204D6E4();
  v16 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  sub_1B1E8F784(a1, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v15, v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t sub_1B1D46C88(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __int128 v5;
  id v6;
  uint64_t v7[12];
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;

  v2 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = result;
    v4 = *(void **)(v2 + 16);
    v6 = (id)MEMORY[0x1E0DEE9E0];
    v5 = *(_OWORD *)(v1 + 40);
    v30[0] = *(_OWORD *)(v1 + 24);
    v30[1] = v5;
    v31 = *(_QWORD *)(v1 + 56);
    swift_unknownObjectRetain();
    swift_retain();
    sub_1B1E8FCE4(v3, (uint64_t)v30, 0x200000000, v7);
    sub_1B1A18378((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (v8)
    {
      v19 = v8;
      v20 = v9;
      v21 = v10;
      v22 = v11;
      v23 = v12;
      v24 = v13;
      v25 = v14;
      v26 = v15;
      v27 = v16;
      v28 = v17;
      v29 = v18;
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      sub_1B21995C4((uint64_t)&v19, v4, v1, v2, &v6);
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      sub_1B19ED748(v7);
    }
    swift_retain();
    swift_retain();
    sub_1B1E2C6BC(2, v3, v3, v1, (uint64_t *)&v6);
    swift_release();
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B1D46E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  ValueMetadata *v57;
  uint64_t v58;
  BOOL v59;
  int *v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t Strong;
  _QWORD *v68;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  os_unfair_lock_s *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t KeyPath;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  BOOL v145;
  int *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  char v165;
  _QWORD *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  char v171;
  _QWORD *v172;
  char v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE v213[64];
  int v214;
  int v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _UNKNOWN **v219;
  char v220;
  _QWORD v221[3];
  char v222;
  uint64_t v223[8];
  uint64_t v224[8];
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  _OWORD v236[2];
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  _OWORD v246[2];
  uint64_t v247;
  _OWORD v248[2];
  uint64_t v249;
  _BYTE v250[40];
  _OWORD v251[10];
  uint64_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  uint64_t v263;
  _OWORD v264[2];
  uint64_t v265;
  _BYTE v266[40];
  _OWORD v267[2];
  uint64_t v268;
  char *v269;

  v5 = v4;
  v6 = a2;
  v7 = *(_OWORD *)(a3 + 160);
  v267[0] = *(_OWORD *)(a3 + 144);
  v267[1] = v7;
  v268 = *(_QWORD *)(a3 + 176);
  sub_1B1E8FCE4(a2, (uint64_t)v267, 0x200000000, v223);
  sub_1B1A18378((uint64_t)v223, (uint64_t)v236, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v236[0])
  {
    v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_34;
  }
  v243 = v236[0];
  v244 = v236[1];
  v245 = v237;
  if (v242 < 1 || (v199 = v239) == 0)
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_33;
  }
  v184 = v6;
  v8 = v241;
  v194 = v238;
  v209 = v241[4];
  v206 = *(unsigned __int8 *)(v240 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v190 = v241 + 8;
  v192 = (uint64_t)(v241 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v9 = 0;
  v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v196 = v8;
  while (1)
  {
    v11 = (unsigned int *)(v194 + 48 * v9);
    v12 = *v11;
    v13 = v11[1];
    v15 = (uint64_t *)*((_QWORD *)v11 + 2);
    v14 = *((_QWORD *)v11 + 3);
    v17 = *((_QWORD *)v11 + 4);
    v16 = (char *)*((_QWORD *)v11 + 5);
    v202 = v5;
    v205 = v9;
    if (v206)
    {
      v18 = (os_unfair_lock_s *)*((_QWORD *)v16 + 47);
      swift_retain();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*((os_unfair_lock_t *)v16 + 43));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v209);
    sub_1B1A18378(v192, (uint64_t)v266, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 5) + 16) + 32) + 16);
    v20 = v8[4];
    v269 = v16;
    v21 = v19 + 1;
    v22 = 48 * (v19 + 1);
    swift_retain();
    v8[6] = ecs_stack_allocator_allocate(v20, v22, 8);
    v8[7] = v21;
    v23 = v269;
    v190[1] = 0;
    v190[2] = 0;
    *v190 = 0;
    swift_release();
    v24 = sub_1B1A12038((uint64_t)&type metadata for MetalScriptReflection, (uint64_t)&off_1E63A3588, v15, v14, v17, (uint64_t)v8);
    if (!v15)
    {
      if ((_DWORD)v12 != (_DWORD)v13)
      {
        while (1)
        {
          v35 = swift_retain();
          if ((v23[184] & 1) != 0)
            goto LABEL_189;
          v36 = *(_DWORD *)(*((_QWORD *)v23 + 21) + 4 * v12);
          v37 = *(_DWORD *)(*(_QWORD *)(v35 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v36 + 8);
          swift_release();
          v38 = *(_QWORD *)(v24 + 8 * v12);
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v39 = v10;
          else
            v39 = sub_1B1C68684(0, v10[2] + 1, 1, v10);
          v41 = v39[2];
          v40 = v39[3];
          if (v41 >= v40 >> 1)
            v39 = sub_1B1C68684(v40 > 1, v41 + 1, 1, v39);
          ++v12;
          v39[2] = v41 + 1;
          v10 = v39;
          v42 = &v39[2 * v41];
          *((_DWORD *)v42 + 8) = v36;
          *((_DWORD *)v42 + 9) = v37;
          v42[5] = v38;
          v23 = v269;
          if (v13 == v12)
            goto LABEL_20;
        }
      }
      goto LABEL_20;
    }
    if (v17)
      break;
LABEL_20:
    v246[0] = v243;
    v246[1] = v244;
    v247 = v245;
    v8 = v196;
    sub_1B1F05D48(v196, (unsigned __int16 **)v246, (uint64_t)v266);
    v5 = v202;
    sub_1B1F03804(v23);
    ecs_stack_allocator_pop_snapshot(v209);
    if ((v206 & 1) != 0)
    {
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v23 + 43));
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v23 + 47));
    }
    swift_release();
    v9 = v205 + 1;
    if (v205 + 1 == v199)
    {
      sub_1B19ED748(v223);
      v6 = v184;
LABEL_33:
      sub_1B19ED748(v223);
      v43 = v10;
LABEL_34:
      v44 = v43[2];
      if (!v44)
        goto LABEL_74;
      v185 = v6;
      v203 = v5;
      v45 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
      v269 = (char *)&v225 + 8;
      while (2)
      {
        v47 = *((unsigned int *)v45 - 2);
        v46 = *((unsigned int *)v45 - 1);
        v48 = *v45;
        sub_1B1D4BCB0(a1, (uint64_t)&v225);
        if ((_DWORD)v47 == -1 && (_DWORD)v46 == 0)
        {
          swift_bridgeObjectRetain();
          goto LABEL_37;
        }
        v50 = v225;
        swift_unownedRetainStrong();
        if ((v47 & 0x80000000) == 0
          && *(_QWORD *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v47
          && ((v51 = *(_QWORD *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v46 == -1)
           || *(_DWORD *)(v51 + 12 * (int)v47 + 8) == (_DWORD)v46))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v50 + 80) + 8 * *(__int16 *)(v51 + 12 * (int)v47 + 6) + 32)
                          + 16);
          v54 = *(_QWORD *)(v53 + 128);
          if (*(_QWORD *)(v54 + 16)
            && (v55 = sub_1B1DC3AC8((uint64_t)&type metadata for MetalScriptReflection), (v56 & 1) != 0))
          {
            v57 = *(ValueMetadata **)(*(_QWORD *)(v53 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v55) + 32);
            swift_bridgeObjectRetain();
            swift_release();
            v52 = v57 != &type metadata for MetalScriptReflection;
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_release();
            v52 = 1;
          }
          swift_unownedRetainStrong();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_release();
          swift_unownedRetainStrong();
          v52 = 1;
          if ((v47 & 0x80000000) != 0)
            goto LABEL_58;
        }
        if (*(_QWORD *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v47)
        {
          v58 = *(_QWORD *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          if ((_DWORD)v46 == -1 || *(_DWORD *)(v58 + 12 * (int)v47 + 8) == (_DWORD)v46)
          {
            v59 = v52;
            v60 = (int *)(v58 + 12 * (int)v47);
            v24 = *(_QWORD *)(*(_QWORD *)(v50 + 136) + 8 * *v60 + 32);
            v61 = *((_WORD *)v60 + 2);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
            sub_1B1C0F5F4(v24, v61, v48, v50, v47 | (v46 << 32));
            if (v203)
              goto LABEL_190;
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
            v52 = v59;
          }
        }
LABEL_58:
        swift_release();
        swift_unownedRetainStrong();
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        if (BYTE8(v226) == 1)
        {
          swift_unownedRetainStrong();
          *(_QWORD *)&v253 = __PAIR64__(v46, v47);
          *((_QWORD *)&v253 + 1) = v50;
          sub_1B1D4BD38(0, v62, v63, v64);
          *((_QWORD *)&v255 + 1) = v65;
          *(_QWORD *)&v256 = &off_1E6383838;
          *(_QWORD *)&v254 = v48;
          BYTE8(v254) = v52;
          BYTE8(v256) = 12;
          v66 = *(_QWORD *)(v50 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
          if (v66 && (*(_BYTE *)(v66 + 81) & 1) != 0 && *(_QWORD *)(v66 + 24))
          {
            Strong = swift_weakLoadStrong();
            swift_bridgeObjectRetain();
            if (Strong)
            {
              swift_retain();
              swift_unknownObjectRetain();
              swift_release();
              sub_1B1C18F3C((uint64_t)&v253, (uint64_t)v251);
              v68 = *(_QWORD **)(v66 + 16);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v66 + 16) = v68;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v68 = sub_1B1C62F04(0, v68[2] + 1, 1, v68);
                *(_QWORD *)(v66 + 16) = v68;
              }
              v71 = v68[2];
              v70 = v68[3];
              if (v71 >= v70 >> 1)
              {
                v68 = sub_1B1C62F04(v70 > 1, v71 + 1, 1, v68);
                *(_QWORD *)(v66 + 16) = v68;
              }
              v68[2] = v71 + 1;
              sub_1B1C18F78((uint64_t)v251, (uint64_t)&v68[8 * v71 + 4]);
              swift_release();
              swift_unknownObjectRelease();
              swift_release();
LABEL_72:
              sub_1B1ADF058((uint64_t)&v253);
              goto LABEL_37;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          swift_release();
          goto LABEL_72;
        }
LABEL_37:
        sub_1B1A0256C((uint64_t)&v225);
        swift_bridgeObjectRelease();
        v45 += 2;
        if (--v44)
          continue;
        break;
      }
      swift_bridgeObjectRelease();
      v5 = v203;
      v6 = v185;
LABEL_74:
      v72 = *(_OWORD *)(a3 + 120);
      v264[0] = *(_OWORD *)(a3 + 104);
      v264[1] = v72;
      v265 = *(_QWORD *)(a3 + 136);
      sub_1B1E8FCE4(v6, (uint64_t)v264, 0x200000000, v224);
      sub_1B1A18378((uint64_t)v224, (uint64_t)&v225, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if ((_QWORD)v225)
      {
        v233 = v225;
        v234 = v226;
        v235 = v227;
        if (v232 > 0)
        {
          v189 = v229;
          if (v229)
          {
            v187 = v228;
            v73 = v231[4];
            v193 = *(unsigned __int8 *)(v230 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v195 = v231;
            v182 = v231 + 8;
            v183 = (uint64_t)(v231 + 6);
            swift_retain();
            swift_retain();
            swift_retain();
            v74 = 0;
            v186 = v73;
            while (1)
            {
              v191 = v74;
              v75 = (unsigned int *)(v187 + 48 * v74);
              v77 = *v75;
              v76 = v75[1];
              v79 = (uint64_t *)*((_QWORD *)v75 + 2);
              v78 = *((_QWORD *)v75 + 3);
              v80 = (char *)*((_QWORD *)v75 + 5);
              v207 = *((_QWORD *)v75 + 4);
              if (v193)
              {
                v81 = (os_unfair_lock_s *)*((_QWORD *)v80 + 47);
                swift_retain();
                os_unfair_lock_lock(v81);
                os_unfair_lock_lock(*((os_unfair_lock_t *)v80 + 43));
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v73);
              sub_1B1A18378(v183, (uint64_t)v250, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
              v82 = v195[4];
              v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v80 + 5) + 16) + 32) + 16) + 1;
              swift_retain();
              v195[6] = ecs_stack_allocator_allocate(v82, 48 * v83, 8);
              v195[7] = v83;
              v182[1] = 0;
              v182[2] = 0;
              *v182 = 0;
              swift_release();
              v84 = v79;
              v85 = sub_1B1A12038((uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&off_1E6396640, v79, v78, v207, (uint64_t)v195);
              v269 = v80;
              v210 = v85;
              v204 = v5;
              if (!v84)
                break;
              v86 = a4;
              if (v207)
              {
                v87 = v207;
                v88 = 0;
                v200 = v84;
                while (1)
                {
                  v89 = *v86;
                  if (!*(_QWORD *)(*v86 + 16))
                    goto LABEL_87;
                  v90 = v84[v88];
                  v91 = sub_1B1DC3CA4(*(_QWORD *)(v85 + 168 * v88));
                  if ((v92 & 1) == 0)
                    goto LABEL_87;
                  v93 = (uint64_t *)(*(_QWORD *)(v89 + 56) + 32 * v91);
                  v95 = *v93;
                  v94 = v93[1];
                  v96 = v93[2];
                  v97 = v93[3];
                  sub_1B1D4BCB0(a1, (uint64_t)v221);
                  KeyPath = swift_getKeyPath();
                  v99 = *((_QWORD *)v80 + 2);
                  v24 = v80[184];
                  swift_retain();
                  if ((v24 & 1) != 0)
                    goto LABEL_189;
                  v100 = *(_DWORD *)(*((_QWORD *)v80 + 21) + 4 * v90);
                  v101 = *(_DWORD *)(*(_QWORD *)(v99 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v100 + 8);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_release();
                  if (v100 != -1 || v101 != 0)
                  {
                    v103 = v221[0];
                    swift_unownedRetainStrong();
                    swift_release();
                    if (swift_unknownObjectUnownedLoadStrong())
                      swift_unknownObjectRelease();
                    swift_unownedRetainStrong();
                    if (v100 < 0
                      || *(_QWORD *)(v103 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v100
                      || ((v104 = *(_QWORD *)(v103 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v101 != -1)
                        ? (v105 = *(_DWORD *)(v104 + 12 * v100 + 8) == v101)
                        : (v105 = 1),
                          !v105
                       || (v106 = (int *)(v104 + 12 * v100),
                           v107 = *(_QWORD *)(*(_QWORD *)(v103 + 136) + 8 * *v106 + 32),
                           v108 = *(_QWORD *)(v107 + 48),
                           (v109 = *(_QWORD *)(v108 + 16)) == 0)))
                    {
LABEL_108:
                      swift_release();
LABEL_109:
                      v112 = swift_unknownObjectUnownedLoadStrong();
                      swift_release();
                      v80 = v269;
                      if (v112)
                        swift_unknownObjectRelease();
                      goto LABEL_86;
                    }
                    v110 = *((__int16 *)v106 + 2);
                    v111 = (_QWORD *)(v108 + 56);
                    while ((ValueMetadata *)*(v111 - 3) != &type metadata for TextureShaderAsset)
                    {
                      v111 += 5;
                      if (!--v109)
                        goto LABEL_108;
                    }
                    v113 = (_QWORD *)(*(_QWORD *)(v107 + 128) + *v111 + 168 * v110);
                    v197 = v113[15];
                    v172 = v113;
                    v178 = v113[14];
                    v180 = v113[16];
                    v177 = v113[13];
                    v174 = v103;
                    v114 = v178;
                    if ((sub_1B1D48E74(v177, v95) & 1) != 0
                      && (sub_1B1CC984C(v178, v94) & 1) != 0
                      && (sub_1B1CC984C(v197, v96) & 1) != 0
                      && (sub_1B1CC984C(v180, v97) & 1) != 0)
                    {
                      swift_retain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      v115 = swift_bridgeObjectRetain();
                      v116 = v197;
                      v117 = v177;
                      v171 = 0;
                    }
                    else
                    {
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_retain();
                      v171 = 1;
                      v117 = v95;
                      v114 = v94;
                      v116 = v96;
                      v115 = v97;
                    }
                    v172[13] = v117;
                    v172[14] = v114;
                    v172[15] = v116;
                    v172[16] = v115;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    v251[7] = *((_OWORD *)v172 + 7);
                    v251[8] = *((_OWORD *)v172 + 8);
                    v251[9] = *((_OWORD *)v172 + 9);
                    v252 = v172[20];
                    v251[3] = *((_OWORD *)v172 + 3);
                    v251[4] = *((_OWORD *)v172 + 4);
                    v251[5] = *((_OWORD *)v172 + 5);
                    v251[6] = *((_OWORD *)v172 + 6);
                    v251[0] = *(_OWORD *)v172;
                    v251[1] = *((_OWORD *)v172 + 1);
                    v251[2] = *((_OWORD *)v172 + 2);
                    v172[19] = sub_1B20F9F48();
                    v172[20] = v118;
                    swift_release();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v171 & 1) == 0)
                      goto LABEL_109;
                    if (swift_unknownObjectUnownedLoadStrong())
                      swift_unknownObjectRelease();
                    if (v222 == 1)
                      break;
                  }
                  swift_release();
                  v80 = v269;
LABEL_86:
                  v84 = v200;
                  sub_1B1A0256C((uint64_t)v221);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v85 = v210;
                  v86 = a4;
                  v87 = v207;
LABEL_87:
                  if (++v88 == v87)
                    goto LABEL_135;
                }
                swift_unownedRetainStrong();
                v214 = v100;
                v215 = v101;
                v216 = v174;
                sub_1B1B0B8A4();
                v218 = v119;
                v219 = &off_1E639B2E0;
                v120 = (_QWORD *)swift_allocObject();
                v217 = v120;
                v120[2] = KeyPath;
                v120[3] = v95;
                v120[4] = v94;
                v120[5] = v96;
                v120[6] = v97;
                v220 = 11;
                v121 = *(_QWORD *)(v174 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
                if (v121)
                {
                  v80 = v269;
                  if ((*(_BYTE *)(v121 + 81) & 1) != 0 && *(_QWORD *)(v121 + 24))
                  {
                    v122 = swift_weakLoadStrong();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_retain();
                    if (v122)
                    {
                      swift_retain();
                      swift_unknownObjectRetain();
                      swift_release();
                      sub_1B1C18F3C((uint64_t)&v214, (uint64_t)v213);
                      v123 = *(_QWORD **)(v121 + 16);
                      v124 = swift_isUniquelyReferenced_nonNull_native();
                      v125 = v123;
                      *(_QWORD *)(v121 + 16) = v123;
                      if ((v124 & 1) == 0)
                      {
                        v125 = sub_1B1C62F04(0, v123[2] + 1, 1, v123);
                        *(_QWORD *)(v121 + 16) = v125;
                      }
                      v127 = v125[2];
                      v126 = v125[3];
                      v128 = v127 + 1;
                      if (v127 >= v126 >> 1)
                      {
                        v129 = sub_1B1C62F04(v126 > 1, v127 + 1, 1, v125);
                        v128 = v127 + 1;
                        v125 = v129;
                        *(_QWORD *)(v121 + 16) = v129;
                      }
                      v125[2] = v128;
                      sub_1B1C18F78((uint64_t)v213, (uint64_t)&v125[8 * v127 + 4]);
                      swift_release();
                      swift_unknownObjectRelease();
                      swift_release();
                      goto LABEL_133;
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_retain();
                  }
                  swift_release();
                }
                else
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_release();
                  v80 = v269;
                }
LABEL_133:
                sub_1B1ADF058((uint64_t)&v214);
                swift_release();
                goto LABEL_86;
              }
LABEL_135:
              v248[0] = v233;
              v248[1] = v234;
              v249 = v235;
              sub_1B1F05D48(v195, (unsigned __int16 **)v248, (uint64_t)v250);
              v5 = v204;
              sub_1B1F03804(v80);
              v73 = v186;
              ecs_stack_allocator_pop_snapshot(v186);
              if ((v193 & 1) != 0)
              {
                os_unfair_lock_unlock(*((os_unfair_lock_t *)v80 + 43));
                os_unfair_lock_unlock(*((os_unfair_lock_t *)v80 + 47));
              }
              swift_release();
              v74 = v191 + 1;
              if (v191 + 1 == v189)
              {
                sub_1B19ED748(v224);
                goto LABEL_187;
              }
            }
            v130 = a4;
            if ((_DWORD)v77 == (_DWORD)v76)
              goto LABEL_135;
            v198 = v76;
            while (2)
            {
              v131 = *v130;
              if (!*(_QWORD *)(*v130 + 16))
                goto LABEL_140;
              v132 = sub_1B1DC3CA4(*(_QWORD *)(v85 + 168 * v77));
              if ((v133 & 1) == 0)
                goto LABEL_140;
              v134 = (uint64_t *)(*(_QWORD *)(v131 + 56) + 32 * v132);
              v135 = *v134;
              v136 = v134[1];
              v137 = v134[2];
              v138 = v134[3];
              sub_1B1D4BCB0(a1, (uint64_t)v221);
              v139 = swift_getKeyPath();
              v140 = *((_QWORD *)v80 + 2);
              v24 = v80[184];
              swift_retain();
              if ((v24 & 1) != 0)
                goto LABEL_189;
              v141 = *(_DWORD *)(*((_QWORD *)v80 + 21) + 4 * v77);
              v142 = *(_DWORD *)(*(_QWORD *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v141 + 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_release();
              if (v141 == -1 && !v142)
                goto LABEL_138;
              v208 = v142;
              v143 = v221[0];
              swift_unownedRetainStrong();
              swift_release();
              if (swift_unknownObjectUnownedLoadStrong())
                swift_unknownObjectRelease();
              swift_unownedRetainStrong();
              if ((v141 & 0x80000000) == 0
                && *(_QWORD *)(v143 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v141
                && ((v144 = *(_QWORD *)(v143 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v208 != -1)
                  ? (v145 = *(_DWORD *)(v144 + 12 * v141 + 8) == v208)
                  : (v145 = 1),
                    v145
                 && (v146 = (int *)(v144 + 12 * v141),
                     v147 = *(_QWORD *)(*(_QWORD *)(v143 + 136) + 8 * *v146 + 32),
                     v148 = *(_QWORD *)(v147 + 48),
                     (v149 = *(_QWORD *)(v148 + 16)) != 0)))
              {
                v150 = *((__int16 *)v146 + 2);
                v151 = (_QWORD *)(v148 + 56);
                while ((ValueMetadata *)*(v151 - 3) != &type metadata for TextureShaderAsset)
                {
                  v151 += 5;
                  if (!--v149)
                    goto LABEL_159;
                }
                v153 = (_QWORD *)(*(_QWORD *)(v147 + 128) + *v151 + 168 * v150);
                v154 = v153[14];
                v201 = v153[15];
                v175 = v153;
                v179 = v153[13];
                v181 = v153[16];
                v176 = v143;
                if ((sub_1B1D48E74(v179, v135) & 1) != 0
                  && (v155 = v154, (sub_1B1CC984C(v154, v136) & 1) != 0)
                  && (sub_1B1CC984C(v201, v137) & 1) != 0
                  && (sub_1B1CC984C(v181, v138) & 1) != 0)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  v156 = swift_bridgeObjectRetain();
                  v157 = v201;
                  v173 = 0;
                  v158 = v179;
                }
                else
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_retain();
                  v173 = 1;
                  v158 = v135;
                  v155 = v136;
                  v157 = v137;
                  v156 = v138;
                }
                v175[13] = v158;
                v175[14] = v155;
                v175[15] = v157;
                v175[16] = v156;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v260 = *((_OWORD *)v175 + 7);
                v261 = *((_OWORD *)v175 + 8);
                v262 = *((_OWORD *)v175 + 9);
                v263 = v175[20];
                v256 = *((_OWORD *)v175 + 3);
                v257 = *((_OWORD *)v175 + 4);
                v258 = *((_OWORD *)v175 + 5);
                v259 = *((_OWORD *)v175 + 6);
                v253 = *(_OWORD *)v175;
                v254 = *((_OWORD *)v175 + 1);
                v255 = *((_OWORD *)v175 + 2);
                v175[19] = sub_1B20F9F48();
                v175[20] = v159;
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v173 & 1) != 0)
                {
                  if (swift_unknownObjectUnownedLoadStrong())
                    swift_unknownObjectRelease();
                  if (v222 == 1)
                  {
                    swift_unownedRetainStrong();
                    v214 = v141;
                    v215 = v208;
                    v216 = v176;
                    sub_1B1B0B8A4();
                    v218 = v160;
                    v219 = &off_1E639B2E0;
                    v161 = (_QWORD *)swift_allocObject();
                    v217 = v161;
                    v161[2] = v139;
                    v161[3] = v135;
                    v161[4] = v136;
                    v161[5] = v137;
                    v161[6] = v138;
                    v220 = 11;
                    v162 = *(_QWORD *)(v176 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
                    if (!v162)
                    {
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_retain();
                      goto LABEL_184;
                    }
                    v80 = v269;
                    if ((*(_BYTE *)(v162 + 81) & 1) != 0 && *(_QWORD *)(v162 + 24))
                    {
                      v163 = swift_weakLoadStrong();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_retain();
                      if (v163)
                      {
                        swift_retain();
                        swift_unknownObjectRetain();
                        swift_release();
                        sub_1B1C18F3C((uint64_t)&v214, (uint64_t)v213);
                        v164 = *(_QWORD **)(v162 + 16);
                        v165 = swift_isUniquelyReferenced_nonNull_native();
                        v166 = v164;
                        *(_QWORD *)(v162 + 16) = v164;
                        if ((v165 & 1) == 0)
                        {
                          v166 = sub_1B1C62F04(0, v164[2] + 1, 1, v164);
                          *(_QWORD *)(v162 + 16) = v166;
                        }
                        v168 = v166[2];
                        v167 = v166[3];
                        v169 = v168 + 1;
                        if (v168 >= v167 >> 1)
                        {
                          v170 = sub_1B1C62F04(v167 > 1, v168 + 1, 1, v166);
                          v169 = v168 + 1;
                          v166 = v170;
                          *(_QWORD *)(v162 + 16) = v170;
                        }
                        v166[2] = v169;
                        sub_1B1C18F78((uint64_t)v213, (uint64_t)&v166[8 * v168 + 4]);
                        swift_release();
                        swift_unknownObjectRelease();
LABEL_184:
                        swift_release();
                        v80 = v269;
LABEL_185:
                        sub_1B1ADF058((uint64_t)&v214);
                        swift_release();
LABEL_139:
                        v85 = v210;
                        sub_1B1A0256C((uint64_t)v221);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v130 = a4;
                        v76 = v198;
LABEL_140:
                        if (++v77 == v76)
                          goto LABEL_135;
                        continue;
                      }
                    }
                    else
                    {
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      swift_retain();
                    }
                    swift_release();
                    goto LABEL_185;
                  }
LABEL_138:
                  swift_release();
                  v80 = v269;
                  goto LABEL_139;
                }
              }
              else
              {
LABEL_159:
                swift_release();
              }
              break;
            }
            v152 = swift_unknownObjectUnownedLoadStrong();
            swift_release();
            v80 = v269;
            if (v152)
              swift_unknownObjectRelease();
            goto LABEL_139;
          }
        }
LABEL_187:
        sub_1B19ED748(v224);
      }
      swift_bridgeObjectRelease();
      return;
    }
  }
  while (1)
  {
    v26 = *v15++;
    v25 = v26;
    v27 = swift_retain();
    if ((v23[184] & 1) != 0)
      break;
    v28 = *(_DWORD *)(*((_QWORD *)v23 + 21) + 4 * v25);
    v29 = *(_DWORD *)(*(_QWORD *)(v27 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v28 + 8);
    swift_release();
    v30 = *(_QWORD *)v24;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      v31 = v10;
    else
      v31 = sub_1B1C68684(0, v10[2] + 1, 1, v10);
    v33 = v31[2];
    v32 = v31[3];
    if (v33 >= v32 >> 1)
      v31 = sub_1B1C68684(v32 > 1, v33 + 1, 1, v31);
    v31[2] = v33 + 1;
    v10 = v31;
    v34 = &v31[2 * v33];
    *((_DWORD *)v34 + 8) = v28;
    *((_DWORD *)v34 + 9) = v29;
    v34[5] = v30;
    v24 += 8;
    --v17;
    v23 = v269;
    if (!v17)
      goto LABEL_20;
  }
LABEL_189:
  sub_1B2229688();
  __break(1u);
LABEL_190:
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
  __break(1u);
}

uint64_t sub_1B1D485B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[14];
  v3 = a1[15];
  v4 = a1[16];
  *a2 = a1[13];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1D485FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1B20F2B14(v1, v2, v3, v4);
}

uint64_t sub_1B1D48664()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KernelScriptReflectionSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1D486C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v1 = v0;
  v2 = sub_1B2228F38();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B2228F14();
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = sub_1B22284AC();
  MEMORY[0x1E0C80A78](v9, v10);
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B72D0);
  sub_1B22284A0();
  sub_1B2228F08();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0DEF8D0], v2);
  *(_QWORD *)(v1 + 16) = sub_1B2228F5C();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v66 = qword_1ED4D09F8;
  v67 = 0;
  v68 = 2;
  v69 = 0;
  v70 = 2;
  v71 = 0;
  swift_retain();
  sub_1B1E3E2C4(1, (uint64_t)&v28);
  swift_release();
  v11 = v29;
  v12 = v30;
  v13 = v32;
  v14 = v31 | 4;
  *(_QWORD *)(v1 + 24) = v28;
  *(_DWORD *)(v1 + 32) = v11;
  *(_BYTE *)(v1 + 36) = v12;
  *(_QWORD *)(v1 + 40) = v14;
  *(_BYTE *)(v1 + 48) = 2;
  *(_QWORD *)(v1 + 56) = v13;
  v60 = qword_1ED4D09F8;
  v61 = 0;
  v62 = 2;
  v63 = 0;
  v64 = 2;
  v65 = 0;
  swift_retain();
  sub_1B1B149FC(1, 1, (uint64_t)&v33);
  swift_release();
  v15 = v34;
  v16 = v35;
  v17 = v37;
  v18 = v36 | 4;
  *(_QWORD *)(v1 + 64) = v33;
  *(_DWORD *)(v1 + 72) = v15;
  *(_BYTE *)(v1 + 76) = v16;
  *(_QWORD *)(v1 + 80) = v18;
  *(_BYTE *)(v1 + 88) = 2;
  *(_QWORD *)(v1 + 96) = v17;
  v54 = qword_1ED4D09F8;
  v55 = 0;
  v56 = 2;
  v57 = 0;
  v58 = 2;
  v59 = 0;
  swift_retain();
  sub_1B1E3A248(1, (uint64_t)&v38);
  swift_release();
  v19 = v39;
  v20 = v40;
  v21 = v42;
  v22 = v41 | 4;
  *(_QWORD *)(v1 + 104) = v38;
  *(_DWORD *)(v1 + 112) = v19;
  *(_BYTE *)(v1 + 116) = v20;
  *(_QWORD *)(v1 + 120) = v22;
  *(_BYTE *)(v1 + 128) = 2;
  *(_QWORD *)(v1 + 136) = v21;
  v48 = qword_1ED4D09F8;
  v49 = 0;
  v50 = 2;
  v51 = 0;
  v52 = 2;
  v53 = 0;
  swift_retain();
  sub_1B1E3F7E4(1, (uint64_t)&v43);
  swift_release();
  v23 = v44;
  v24 = v45;
  v25 = v47;
  v26 = v46 | 4;
  *(_QWORD *)(v1 + 144) = v43;
  *(_DWORD *)(v1 + 152) = v23;
  *(_BYTE *)(v1 + 156) = v24;
  *(_QWORD *)(v1 + 160) = v26;
  *(_BYTE *)(v1 + 168) = 2;
  *(_QWORD *)(v1 + 176) = v25;
  return v1;
}

uint64_t sub_1B1D48A18()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1D486C8();
  return v0;
}

const char *sub_1B1D48A4C()
{
  return "MetalScriptReflection";
}

uint64_t sub_1B1D48A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t type metadata accessor for ShaderFileSystem()
{
  return objc_opt_self();
}

_QWORD *initializeWithCopy for MetalFunctionReflection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MetalFunctionReflection(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MetalFunctionReflection(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MetalFunctionReflection()
{
  return &type metadata for MetalFunctionReflection;
}

ValueMetadata *type metadata accessor for ShaderFileAsset()
{
  return &type metadata for ShaderFileAsset;
}

ValueMetadata *type metadata accessor for MetalScriptReflection()
{
  return &type metadata for MetalScriptReflection;
}

uint64_t *sub_1B1D48CB0(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t *result;
  uint64_t v4[12];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;

  v2 = *(_OWORD *)(v1 + 32);
  v27[0] = *(_OWORD *)(v1 + 16);
  v27[1] = v2;
  v28 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v27, 0x200000000, v4);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v4, (uint64_t)&v5, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v5)
  {
    v16 = v5;
    v17 = v6;
    v18 = v7;
    v19 = v8;
    v20 = v9;
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v24 = v13;
    v25 = v14;
    v26 = v15;
    sub_1B21870CC((uint64_t)&v16);
    return sub_1B19ED748(v4);
  }
  return result;
}

uint64_t sub_1B1D48D80()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v11 = qword_1ED4D09F8;
  v12 = 0;
  v13 = 2;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  swift_retain();
  sub_1B1E3C3C0(1, (uint64_t)&v6);
  swift_release();
  v1 = v7;
  v2 = v8;
  v3 = v10;
  v4 = v9 | 4;
  *(_QWORD *)(v0 + 16) = v6;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  return v0;
}

const char *sub_1B1D48E5C()
{
  return "ShaderFileSystem";
}

uint64_t sub_1B1D48E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_20;
    }
    v12 = v4 + 1;
    if (v4 + 1 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    if (!v13)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v12);
      if (!v13)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v12);
        if (!v13)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v12);
          if (!v13)
            break;
        }
      }
    }
LABEL_19:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v4 = v12;
LABEL_20:
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    v15 = sub_1B1DC3AC8(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11));
    if ((v16 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v15) != v14)
      return 0;
  }
  while (v9 - 5 != v4)
  {
    v13 = *(_QWORD *)(a1 + 104 + 8 * v4++);
    if (v13)
    {
      v12 = v4 + 4;
      goto LABEL_19;
    }
  }
  return 1;
}

uint64_t sub_1B1D48FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  _QWORD *v23;
  char v25;
  uint64_t v27;
  int64_t v28;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  v27 = a1 + 112;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    v11 = v4 + 1;
    if (v4 + 1 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    if (!v12)
    {
      v11 = v4 + 2;
      if (v4 + 2 >= v28)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v11);
      if (!v12)
      {
        v11 = v4 + 3;
        if (v4 + 3 >= v28)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v11);
        if (!v12)
        {
          v11 = v4 + 4;
          if (v4 + 4 >= v28)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v11);
          if (!v12)
          {
            v11 = v4 + 5;
            if (v4 + 5 >= v28)
              return 1;
            v12 = *(_QWORD *)(v5 + 8 * v11);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v4 = v11;
LABEL_23:
    v13 = 16 * v10;
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v13);
    v19 = *v17;
    v18 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = sub_1B1DC3B00(v15, v16);
    v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v23 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v20);
    if (*v23 == v19 && v23[1] == v18)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
        return 0;
    }
  }
  while (v28 - 6 != v4)
  {
    v12 = *(_QWORD *)(v27 + 8 * v4++);
    if (v12)
    {
      v11 = v4 + 5;
      goto LABEL_22;
    }
  }
  return 1;
}

uint64_t sub_1B1D491F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;

  if (a1 == a2)
    return 1;
  v51 = v2;
  v52 = v3;
  v5 = a1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v30 = a1 + 64;
  v31 = (unint64_t)(v7 + 63) >> 6;
  v29 = a1 + 112;
  while (v9)
  {
    v34 = (v9 - 1) & v9;
    v35 = v6;
    v10 = __clz(__rbit64(v9)) | (v6 << 6);
LABEL_22:
    v13 = *(_QWORD *)(v5 + 56) + 80 * v10;
    v15 = *(_QWORD *)v13;
    v14 = *(_QWORD *)(v13 + 8);
    v17 = *(_QWORD *)(v13 + 16);
    v16 = *(_QWORD *)(v13 + 24);
    v19 = *(_QWORD *)(v13 + 32);
    v18 = *(_QWORD *)(v13 + 40);
    v20 = *(_QWORD *)(v13 + 56);
    v33 = *(_QWORD *)(v13 + 48);
    v21 = *(char *)(v13 + 64);
    v22 = sub_1B1DC3AC8(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v10));
    if ((v23 & 1) == 0)
      return 0;
    v24 = *(_QWORD *)(a2 + 56) + 80 * v22;
    v25 = *(char *)(v24 + 64);
    if (v25 < 0)
    {
      result = 0;
      if ((v21 & 0x80000000) == 0)
        return result;
      v5 = a1;
      v9 = v34;
      v6 = v35;
      if (*(_QWORD *)v24 != v15)
        return result;
    }
    else
    {
      v26 = *(_QWORD *)(v24 + 56);
      v36 = *(_QWORD *)v24;
      v37 = *(_OWORD *)(v24 + 8);
      v38 = *(_OWORD *)(v24 + 24);
      v39 = *(_OWORD *)(v24 + 40);
      v40 = v26;
      v41 = v25;
      if (v21 < 0)
        return 0;
      v42 = v15;
      v43 = v14;
      v44 = v17;
      v45 = v16;
      v46 = v19;
      v47 = v18;
      v48 = v33;
      v49 = v20;
      v50 = v21;
      sub_1B1B2A920((uint64_t)&v36);
      v5 = a1;
      v9 = v34;
      v6 = v35;
      if ((v27 & 1) == 0)
        return 0;
    }
  }
  v11 = v6 + 1;
  if (v6 + 1 >= v31)
    return 1;
  v12 = *(_QWORD *)(v30 + 8 * v11);
  if (v12)
    goto LABEL_21;
  v11 = v6 + 2;
  if (v6 + 2 >= v31)
    return 1;
  v12 = *(_QWORD *)(v30 + 8 * v11);
  if (v12)
    goto LABEL_21;
  v11 = v6 + 3;
  if (v6 + 3 >= v31)
    return 1;
  v12 = *(_QWORD *)(v30 + 8 * v11);
  if (v12)
    goto LABEL_21;
  v11 = v6 + 4;
  if (v6 + 4 >= v31)
    return 1;
  v12 = *(_QWORD *)(v30 + 8 * v11);
  if (v12)
    goto LABEL_21;
  v11 = v6 + 5;
  if (v6 + 5 >= v31)
    return 1;
  v12 = *(_QWORD *)(v30 + 8 * v11);
  if (v12)
  {
LABEL_21:
    v34 = (v12 - 1) & v12;
    v35 = v11;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    goto LABEL_22;
  }
  while (v31 - 6 != v6)
  {
    v12 = *(_QWORD *)(v29 + 8 * v6++);
    if (v12)
    {
      v11 = v6 + 5;
      goto LABEL_21;
    }
  }
  return 1;
}

uint64_t sub_1B1D49464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int32x2_t v14;
  unint64_t v15;
  char v16;
  int32x2_t v17;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (v4 + 1 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    if (!v13)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v12);
      if (!v13)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v12);
        if (!v13)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v12);
          if (!v13)
          {
            v12 = v4 + 5;
            if (v4 + 5 >= v9)
              return 1;
            v13 = *(_QWORD *)(v5 + 8 * v12);
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v4 = v12;
LABEL_22:
    v14 = *(int32x2_t *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    v15 = sub_1B1DC3AC8(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v11));
    if ((v16 & 1) != 0)
    {
      v17 = vceq_s32(*(int32x2_t *)(*(_QWORD *)(a2 + 56) + 8 * v15), v14);
      if ((v17.i32[0] & v17.i32[1] & 1) != 0)
        continue;
    }
    return 0;
  }
  while (v9 - 6 != v4)
  {
    v13 = *(_QWORD *)(a1 + 112 + 8 * v4++);
    if (v13)
    {
      v12 = v4 + 5;
      goto LABEL_21;
    }
  }
  return 1;
}

uint64_t sub_1B1D495F0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

BOOL sub_1B1D496A0(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24) && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
    return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
  return 0;
}

uint64_t sub_1B1D49714(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x5373726566667562 && a2 == 0xEB00000000657A69;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737475706E69 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7374757074756FLL && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74754F7475706E69 && a2 == 0xEC00000073747570)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B1D498F4()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

__n128 sub_1B1D4993C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  __n128 result;
  __int128 v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;

  switch(a2)
  {
    case 2:
      v12 = (_QWORD *)a3[2];
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = sub_1B1C64968(0, v12[2] + 1, 1, v12);
      v13 = v12[2];
      v14 = v12[3];
      v15 = v13 + 1;
      if (v13 >= v14 >> 1)
      {
        v34 = v13 + 1;
        v27 = v12;
        v28 = v12[2];
        v29 = sub_1B1C64968(v14 > 1, v13 + 1, 1, v27);
        v13 = v28;
        v15 = v34;
        v12 = v29;
      }
      v12[2] = v15;
      v16 = &v12[6 * v13];
      result = *(__n128 *)a1;
      v17 = *(_OWORD *)(a1 + 32);
      *((_OWORD *)v16 + 3) = *(_OWORD *)(a1 + 16);
      *((_OWORD *)v16 + 4) = v17;
      *((__n128 *)v16 + 2) = result;
      a3[2] = v12;
      break;
    case 1:
      v18 = (_QWORD *)a3[3];
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = sub_1B1C64968(0, v18[2] + 1, 1, v18);
      v19 = v18[2];
      v20 = v18[3];
      v21 = v19 + 1;
      if (v19 >= v20 >> 1)
      {
        v35 = v19 + 1;
        v30 = v18;
        v31 = v18[2];
        v32 = sub_1B1C64968(v20 > 1, v19 + 1, 1, v30);
        v19 = v31;
        v21 = v35;
        v18 = v32;
      }
      v18[2] = v21;
      v22 = &v18[6 * v19];
      result = *(__n128 *)a1;
      v23 = *(_OWORD *)(a1 + 32);
      *((_OWORD *)v22 + 3) = *(_OWORD *)(a1 + 16);
      *((_OWORD *)v22 + 4) = v23;
      *((__n128 *)v22 + 2) = result;
      a3[3] = v18;
      break;
    case 0:
      v5 = (_QWORD *)a3[1];
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_1B1C64968(0, v5[2] + 1, 1, v5);
      v6 = v5[2];
      v7 = v5[3];
      v8 = v6 + 1;
      if (v6 >= v7 >> 1)
      {
        v33 = v6 + 1;
        v24 = v5;
        v25 = v5[2];
        v26 = sub_1B1C64968(v7 > 1, v6 + 1, 1, v24);
        v6 = v25;
        v8 = v33;
        v5 = v26;
      }
      v5[2] = v8;
      v9 = &v5[6 * v6];
      result = *(__n128 *)a1;
      v11 = *(_OWORD *)(a1 + 32);
      *((_OWORD *)v9 + 3) = *(_OWORD *)(a1 + 16);
      *((_OWORD *)v9 + 4) = v11;
      *((__n128 *)v9 + 2) = result;
      a3[1] = v5;
      break;
  }
  return result;
}

void sub_1B1D49B50(void *a1, id *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  id v48;
  ValueMetadata *v49;
  ValueMetadata *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  char v64;
  id v65;
  id v66;
  char isUniquelyReferenced_nonNull_native;
  void *v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  unint64_t v72;
  id v73;
  id v74;
  id v75;
  id *v76;
  id v77;
  id v78;
  id v79;
  BOOL v80;
  id v81;
  uint64_t v82;
  uint64_t v83;

  v4 = swift_dynamicCastObjCProtocolConditional();
  if (v4)
  {
    v5 = (void *)v4;
    swift_unknownObjectRetain();
    v6 = objc_msgSend(v5, sel_bufferStructType);
    if (v6)
    {
      v76 = a2;
      v68 = v6;
      v7 = objc_msgSend(v6, sel_members);
      sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B79E0);
      v8 = sub_1B2228AB8();

      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        v9 = sub_1B22296AC();
        swift_bridgeObjectRelease();
        if (v9)
        {
LABEL_5:
          v10 = 0;
          v71 = v5;
          v72 = v8 & 0xC000000000000001;
          v11 = &selRef_clipWithAnimation_name_;
          v69 = v9;
          v70 = v8;
          do
          {
            if (v72)
              v12 = (id)MEMORY[0x1B5E21018](v10, v8);
            else
              v12 = *(id *)(v8 + 8 * v10 + 32);
            v13 = v12;
            v14 = objc_msgSend(v12, v11[176]);
            v15 = MEMORY[0x1E0DEB188];
            switch((unint64_t)v14)
            {
              case 3uLL:
                goto LABEL_23;
              case 4uLL:
                sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
                goto LABEL_22;
              case 5uLL:
                sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
                goto LABEL_22;
              case 6uLL:
                sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
                goto LABEL_22;
              case 7uLL:
                type metadata accessor for simd_float2x2(0);
                goto LABEL_22;
              case 8uLL:
                type metadata accessor for simd_float2x3(0);
                goto LABEL_22;
              case 9uLL:
                type metadata accessor for simd_float2x4(0);
                goto LABEL_22;
              case 0xAuLL:
                type metadata accessor for simd_float3x2(0);
                goto LABEL_22;
              case 0xBuLL:
                type metadata accessor for simd_float3x3(0);
                goto LABEL_22;
              case 0xCuLL:
                type metadata accessor for simd_float3x4(0);
                goto LABEL_22;
              case 0xDuLL:
                type metadata accessor for simd_float4x2(0);
                goto LABEL_22;
              case 0xEuLL:
                type metadata accessor for simd_float4x3(0);
                goto LABEL_22;
              case 0xFuLL:
                type metadata accessor for simd_float4x4(0);
LABEL_22:
                v15 = v16;
                goto LABEL_23;
              case 0x1DuLL:
                v15 = MEMORY[0x1E0DEB418];
                goto LABEL_23;
              case 0x21uLL:
                v15 = MEMORY[0x1E0DEBB98];
                goto LABEL_23;
              case 0x35uLL:
                v15 = MEMORY[0x1E0DEAFA0];
LABEL_23:
                v17 = objc_msgSend(v5, sel_name);
                v18 = sub_1B222874C();
                v20 = v19;

                v78 = (id)v18;
                v79 = v20;
                sub_1B2228890();
                v21 = objc_msgSend(v13, sel_name);
                sub_1B222874C();

                sub_1B2228890();
                swift_bridgeObjectRelease();
                v22 = v18;
                if (objc_msgSend(v13, v11[176]) == (id)58)
                  v23 = 8;
                else
                  v23 = 1;
                type metadata accessor for PropertyDescription();
                v24 = swift_allocObject();
                *(_QWORD *)(v24 + 104) = 0;
                *(_QWORD *)(v24 + 80) = 0;
                *(_QWORD *)(v24 + 88) = 0;
                *(_BYTE *)(v24 + 112) = 1;
                *(_QWORD *)(v24 + 128) = 0;
                *(_QWORD *)(v24 + 136) = 0;
                *(_QWORD *)(v24 + 120) = 0;
                v25 = MEMORY[0x1E0DEE9D8];
                *(_QWORD *)(v24 + 160) = MEMORY[0x1E0DEE9D8];
                *(_QWORD *)(v24 + 216) = 0;
                v26 = sub_1B1BF4F40();
                *(_QWORD *)(v24 + 16) = v22;
                *(_QWORD *)(v24 + 24) = v20;
                *(_QWORD *)(v24 + 32) = v26;
                *(_QWORD *)(v24 + 40) = v15;
                *(_QWORD *)(v24 + 48) = 0;
                *(_BYTE *)(v24 + 56) = 1;
                *(_WORD *)(v24 + 58) = 1024;
                *(_DWORD *)(v24 + 184) = 0;
                *(_BYTE *)(v24 + 188) = 1;
                *(_DWORD *)(v24 + 192) = 0;
                *(_BYTE *)(v24 + 196) = 1;
                *(_QWORD *)(v24 + 200) = 0x1000100000000;
                *(_BYTE *)(v24 + 208) = 1;
                *(_QWORD *)(v24 + 96) = 0;
                *(_WORD *)(v24 + 210) = 0;
                *(_QWORD *)(v24 + 64) = 0;
                *(_QWORD *)(v24 + 72) = 0;
                *(_QWORD *)(v24 + 144) = v23;
                *(_QWORD *)(v24 + 152) = 0;
                *(_QWORD *)(v24 + 168) = 0;
                *(_QWORD *)(v24 + 176) = 0;
                *(_QWORD *)(v24 + 160) = v25;
                swift_bridgeObjectRelease();
                v27 = (void *)swift_dynamicCastObjCProtocolConditional();
                v28 = v27;
                if (v27)
                  v29 = objc_msgSend(v27, sel_textureType);
                else
                  v29 = 0;
                v30 = objc_msgSend(v13, sel_offset);
                v31 = a1;
                v32 = objc_msgSend(a1, sel_type);
                v33 = objc_msgSend(v31, sel_index);
                swift_retain();
                v34 = v31;
                v35 = objc_msgSend(v31, sel_access);
                if (v35 == (id)2)
                {
                  v40 = v76[2];
                  swift_retain();
                  v74 = v30;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v40 = sub_1B1C64968(0, v40[2] + 1, 1, v40);
                  v42 = v40[2];
                  v41 = v40[3];
                  if (v42 >= v41 >> 1)
                    v40 = sub_1B1C64968(v41 > 1, v42 + 1, 1, v40);
                  v40[2] = v42 + 1;
                  v43 = &v40[6 * v42];
                  v43[4] = v32;
                  v43[5] = v29;
                  *((_BYTE *)v43 + 48) = v28 == 0;
                  v43[7] = v33;
                  v43[8] = v74;
                  v43[9] = v24;
                  swift_release_n();

                  v76[2] = v40;
                }
                else if (v35 == (id)1)
                {
                  v44 = v76[3];
                  swift_retain();
                  v75 = v30;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v44 = sub_1B1C64968(0, v44[2] + 1, 1, v44);
                  v46 = v44[2];
                  v45 = v44[3];
                  if (v46 >= v45 >> 1)
                    v44 = sub_1B1C64968(v45 > 1, v46 + 1, 1, v44);
                  v44[2] = v46 + 1;
                  v47 = &v44[6 * v46];
                  v47[4] = v32;
                  v47[5] = v29;
                  *((_BYTE *)v47 + 48) = v28 == 0;
                  v47[7] = v33;
                  v47[8] = v75;
                  v47[9] = v24;
                  swift_release_n();

                  v76[3] = v44;
                }
                else if (v35)
                {
                  swift_release_n();

                }
                else
                {
                  v36 = v76[1];
                  swift_retain();
                  v73 = v30;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v36 = sub_1B1C64968(0, v36[2] + 1, 1, v36);
                  v38 = v36[2];
                  v37 = v36[3];
                  if (v38 >= v37 >> 1)
                    v36 = sub_1B1C64968(v37 > 1, v38 + 1, 1, v36);
                  v36[2] = v38 + 1;
                  v39 = &v36[6 * v38];
                  v39[4] = v32;
                  v39[5] = v29;
                  *((_BYTE *)v39 + 48) = v28 == 0;
                  v39[7] = v33;
                  v39[8] = v73;
                  v39[9] = v24;
                  swift_release_n();

                  v76[1] = v36;
                }
                a1 = v34;
                v8 = v70;
                v5 = v71;
                v9 = v69;
                v11 = &selRef_clipWithAnimation_name_;
                break;
              default:

                break;
            }
            ++v10;
          }
          while (v9 != v10);
        }
      }
      else
      {
        v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v9)
          goto LABEL_5;
      }
      swift_bridgeObjectRelease();
      v65 = objc_msgSend(a1, sel_index);
      v66 = objc_msgSend(v5, sel_bufferDataSize);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v78 = *v76;
      *v76 = (id)0x8000000000000000;
      sub_1B1B84208((uint64_t)v66, (uint64_t)v65, isUniquelyReferenced_nonNull_native);
      *v76 = v78;
      swift_unknownObjectRelease();

      swift_bridgeObjectRelease();
      return;
    }
    swift_unknownObjectRelease();
  }
  v48 = objc_msgSend(a1, sel_type);
  if (v48 == (id)2)
  {
    v50 = &type metadata for Entity;
  }
  else
  {
    if (v48)
      return;
    sub_1B1D45EBC((uint64_t)objc_msgSend(a1, sel_bufferDataType));
    if (!v49)
      return;
    v50 = v49;
  }
  v51 = objc_msgSend(a1, sel_name);
  v52 = sub_1B222874C();
  v54 = v53;

  if (objc_msgSend(a1, sel_type) == (id)2)
    v55 = 8;
  else
    v55 = 1;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  v56 = sub_1B1BF5168(v52, v54, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, v55, 0, (uint64_t)v50, 0, 0, 0,
          MEMORY[0x1E0DEE9D8]);
  v57 = (void *)swift_dynamicCastObjCProtocolConditional();
  v58 = v57;
  if (v57)
    v59 = objc_msgSend(v57, sel_textureType);
  else
    v59 = 0;
  v78 = objc_msgSend(a1, sel_type);
  v79 = v59;
  v80 = v58 == 0;
  v81 = objc_msgSend(a1, sel_index);
  v82 = 0;
  v83 = v56;
  v60 = swift_dynamicCastObjCProtocolConditional();
  if (v60)
  {
    v61 = (void *)v60;
    swift_unknownObjectRetain();
    swift_retain();
    v62 = objc_msgSend(a1, sel_index);
    v63 = objc_msgSend(v61, sel_bufferDataSize);
    v64 = swift_isUniquelyReferenced_nonNull_native();
    v77 = *a2;
    *a2 = (id)0x8000000000000000;
    sub_1B1B84208((uint64_t)v63, (uint64_t)v62, v64);
    *a2 = v77;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  sub_1B1D4993C((uint64_t)&v78, (uint64_t)objc_msgSend(a1, sel_access), a2);
  swift_release_n();
}

uint64_t sub_1B1D4A5E4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, void *a5, uint64_t a6, id *a7)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t i;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t j;
  void *v44;
  id v45;
  id v46;
  id v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id *v66;
  char isUniquelyReferenced_nonNull_native;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id *v76;
  char v77;
  _QWORD *v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  unsigned int v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  id v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t result;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  unint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  int *v123;
  id v124;
  unint64_t v125;
  id *v126;
  id *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  id v133;
  void *v134;
  uint64_t v135;
  id v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140[2];

  v116 = a6;
  v124 = a5;
  v112 = a2;
  v115 = a1;
  v140[1] = *(id *)MEMORY[0x1E0C80C00];
  sub_1B1B1F358();
  v123 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v122 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_1B222820C();
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121, v13);
  v119 = (char *)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  v127 = a4;
  *a4 = (id)MEMORY[0x1E0DEE9E0];
  sub_1B1D4BC54(0);
  v16 = *(_QWORD *)(a3 + *(int *)(v15 + 44));
  if (v16)
    v17 = v16;
  else
    v17 = MEMORY[0x1E0DEE9D8];
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v18)
      goto LABEL_6;
    return swift_bridgeObjectRelease();
  }
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v18)
    return swift_bridgeObjectRelease();
LABEL_6:
  v19 = 0;
  v128 = v17 & 0xC000000000000001;
  v113 = v17 + 32;
  v118 = 0x80000001B2339CA0;
  v117 = xmmword_1B226D240;
  v114 = 0x80000001B2339C70;
  v125 = v17;
  v126 = a7;
  v129 = v18;
  while (1)
  {
    v135 = v19;
    if (v128)
    {
      v20 = (void *)MEMORY[0x1B5E21018]();
    }
    else
    {
      v20 = *(void **)(v113 + 8 * v19);
      swift_unknownObjectRetain();
    }
    if (objc_msgSend(v20, sel_functionType) == (id)3)
    {
      v136 = 0;
      v140[0] = 0;
      v21 = objc_msgSend(v124, sel_newComputePipelineStateWithFunction_options_reflection_error_, v20, 3, &v136, v140);
      v22 = v136;
      if (v21)
      {
        v23 = v140[0];
        v24 = v22;
        swift_unknownObjectRelease();
        if (!v24)
          goto LABEL_48;
        v136 = (id)MEMORY[0x1E0DEE9E0];
        v137 = MEMORY[0x1E0DEE9D8];
        v138 = MEMORY[0x1E0DEE9D8];
        v139 = MEMORY[0x1E0DEE9D8];
        v25 = v24;
        v26 = objc_msgSend(v25, sel_bindings);
        sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7980);
        v27 = sub_1B2228AB8();

        if (v27 >> 62)
        {
          swift_bridgeObjectRetain();
          v28 = sub_1B22296AC();
          swift_bridgeObjectRelease();
          v133 = v25;
          if (v28)
          {
LABEL_17:
            for (i = 0; i != v28; ++i)
            {
              if ((v27 & 0xC000000000000001) != 0)
              {
                v30 = (void *)MEMORY[0x1B5E21018](i, v27);
              }
              else
              {
                v30 = *(void **)(v27 + 8 * i + 32);
                swift_unknownObjectRetain();
              }
              sub_1B1D49B50(v30, &v136);
              swift_unknownObjectRelease();
            }
          }
        }
        else
        {
          v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
          v133 = v25;
          if (v28)
            goto LABEL_17;
        }
        swift_bridgeObjectRelease();
        v58 = objc_msgSend(v20, sel_name);
        v59 = sub_1B222874C();
        v61 = v60;

        v63 = (uint64_t)v136;
        v62 = v137;
        v65 = v138;
        v64 = v139;
        v66 = v127;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v140[0] = *v66;
        *v66 = (id)0x8000000000000000;
        sub_1B1B88F4C(v63, v62, v65, v64, v59, v61, isUniquelyReferenced_nonNull_native);
        *v66 = v140[0];
        v31 = v133;

LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a7 = v126;
        goto LABEL_47;
      }
      v35 = v140[0];
      v31 = v22;
      v34 = (void *)sub_1B2227FB4();

      swift_willThrow();
LABEL_35:
      v134 = 0;

      if (qword_1ED4BF430 != -1)
        swift_once();
      v136 = 0;
      v137 = 0xE000000000000000;
      v131 = qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      v140[0] = v20;
      sub_1B19F8F48(0, (unint64_t *)&unk_1ED4BA650);
      sub_1B22295EC();
      sub_1B2228890();
      v140[0] = v34;
      sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
      sub_1B22295EC();
      v47 = v136;
      v48 = v137;
      v49 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v132 = v34;
      v133 = v20;
      v50 = qword_1ED4D0FD0;
      v51 = qword_1ED4BF688;
      swift_retain();
      if (v51 != -1)
        swift_once();
      sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = v117;
      *(_QWORD *)(v52 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v52 + 64) = sub_1B1B1F47C();
      *(_QWORD *)(v52 + 32) = v47;
      *(_QWORD *)(v52 + 40) = v48;
      swift_bridgeObjectRetain();
      sub_1B222835C();
      swift_bridgeObjectRelease();
      swift_retain();
      v53 = v119;
      sub_1B2228200();
      v54 = (uint64_t)v122;
      v55 = v123[12];
      v130 = v50;
      v56 = v123[16];
      v57 = &v122[v123[20]];
      (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v122, v53, v121);
      *(_BYTE *)(v54 + v55) = v49;
      *(_QWORD *)(v54 + v56) = 0;
      *(_QWORD *)v57 = v47;
      *((_QWORD *)v57 + 1) = v48;
      swift_bridgeObjectRetain();
      sub_1B2228428();
      swift_release();
      sub_1B1B429AC(v54);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      swift_unknownObjectRelease();
      a7 = v126;
      goto LABEL_8;
    }
    v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B68]), sel_init);
    objc_msgSend(v31, sel_setFragmentFunction_, v20);
    v32 = v134;
    v33 = sub_1B1B2EC54(0xD000000000000023, v114, 0, MEMORY[0x1E0DEE9D8], 0);
    if (v32)
    {
      v34 = v32;
      goto LABEL_35;
    }
    v134 = 0;
    objc_msgSend(v31, sel_setVertexFunction_, v33);
    swift_unknownObjectRelease();
    v136 = 0;
    v140[0] = 0;
    v36 = objc_msgSend(v124, sel_newRenderPipelineStateWithDescriptor_options_reflection_error_, v31, 3, &v136, v140);
    v37 = v136;
    if (!v36)
    {
      v45 = v140[0];
      v46 = v37;
      v34 = (void *)sub_1B2227FB4();

      swift_willThrow();
      goto LABEL_35;
    }
    v38 = v140[0];
    v39 = v37;
    swift_unknownObjectRelease();
    if (v39)
    {
      v136 = (id)MEMORY[0x1E0DEE9E0];
      v137 = MEMORY[0x1E0DEE9D8];
      v138 = MEMORY[0x1E0DEE9D8];
      v139 = MEMORY[0x1E0DEE9D8];
      v132 = v39;
      v40 = objc_msgSend(v132, sel_fragmentBindings);
      sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7980);
      v41 = sub_1B2228AB8();

      if (v41 >> 62)
      {
        swift_bridgeObjectRetain();
        v42 = sub_1B22296AC();
        swift_bridgeObjectRelease();
        v133 = v31;
        if (v42)
          goto LABEL_29;
      }
      else
      {
        v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
        v133 = v31;
        if (v42)
        {
LABEL_29:
          for (j = 0; j != v42; ++j)
          {
            if ((v41 & 0xC000000000000001) != 0)
            {
              v44 = (void *)MEMORY[0x1B5E21018](j, v41);
            }
            else
            {
              v44 = *(void **)(v41 + 8 * j + 32);
              swift_unknownObjectRetain();
            }
            sub_1B1D49B50(v44, &v136);
            swift_unknownObjectRelease();
          }
        }
      }
      swift_bridgeObjectRelease();
      v68 = objc_msgSend(v20, sel_name);
      v69 = sub_1B222874C();
      v71 = v70;

      v72 = (uint64_t)v136;
      v73 = v137;
      v74 = v138;
      v75 = v139;
      v76 = v127;
      v77 = swift_isUniquelyReferenced_nonNull_native();
      v140[0] = *v76;
      *v76 = (id)0x8000000000000000;
      sub_1B1B88F4C(v72, v73, v74, v75, v69, v71, v77);
      *v76 = v140[0];

      v31 = v132;
      goto LABEL_46;
    }
LABEL_47:

LABEL_48:
    v78 = *v127;
    v79 = *((_BYTE *)*v127 + 32);
    v80 = 1 << v79;
    v81 = *((_QWORD *)*v127 + 8);
    v82 = v115;
    if (v81)
    {
      v83 = 0;
    }
    else
    {
      v101 = v79 & 0x3F;
      if (v101 < 7)
        goto LABEL_7;
      v81 = v78[9];
      if (v81)
      {
        v83 = 1;
        v82 = v115;
      }
      else
      {
        if (v101 < 8)
          goto LABEL_7;
        v81 = v78[10];
        if (v81)
        {
          v83 = 2;
          v82 = v115;
        }
        else
        {
          v81 = v78[11];
          v82 = v115;
          if (!v81)
          {
            v107 = 0;
            v108 = (unint64_t)(v80 + 63) >> 6;
            if (v108 <= 4)
              v108 = 4;
            v109 = v108 - 4;
            while (v109 != v107)
            {
              v81 = v78[v107++ + 12];
              if (v81)
              {
                v83 = v107 + 3;
                goto LABEL_50;
              }
            }
            goto LABEL_7;
          }
          v83 = 3;
        }
      }
    }
LABEL_50:
    v84 = __clz(__rbit64(v81)) + (v83 << 6);
    if (v84 != v80)
      break;
LABEL_7:
    swift_unknownObjectRelease();
LABEL_8:
    v19 = v135 + 1;
    if (v135 + 1 == v129)
      return swift_bridgeObjectRelease();
  }
  v85 = (uint64_t *)(v78[6] + 16 * v84);
  v87 = *v85;
  v86 = v85[1];
  v88 = *(_QWORD *)(v82 + 16);
  v89 = *(_BYTE *)(v82 + 184);
  v90 = v82;
  swift_retain();
  if ((v89 & 1) == 0)
  {
    v91 = *(unsigned int *)(*(_QWORD *)(v90 + 168) + 4 * v112);
    v92 = *(unsigned int *)(*(_QWORD *)(v88 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                          + 12 * *(int *)(*(_QWORD *)(v90 + 168) + 4 * v112)
                          + 8);
    swift_bridgeObjectRetain();
    swift_release();
    v93 = *v127;
    if (*((_QWORD *)*v127 + 2))
    {
      v94 = sub_1B1DC3B00(v87, v86);
      if ((v95 & 1) != 0)
      {
        v96 = v93[7] + 32 * v94;
        v97 = *(void **)v96;
        v132 = *(id *)(v96 + 8);
        v133 = v97;
        v99 = *(_QWORD *)(v96 + 16);
        v98 = *(_QWORD *)(v96 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v100 = swift_isUniquelyReferenced_nonNull_native();
        v136 = *a7;
        *a7 = (id)0x8000000000000000;
        sub_1B1B88E00((uint64_t)v133, (uint64_t)v132, v99, v98, v91 | (v92 << 32), v100);
        *a7 = v136;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    v102 = sub_1B1DC3CA4(v91 | (v92 << 32));
    if ((v103 & 1) != 0)
    {
      v104 = v102;
      v105 = swift_isUniquelyReferenced_nonNull_native();
      v106 = *a7;
      v136 = *a7;
      *a7 = (id)0x8000000000000000;
      if ((v105 & 1) == 0)
      {
        sub_1B1EB0268();
        v106 = v136;
      }
      sub_1B1EA6AB8(v104, (uint64_t)v106);
      *a7 = v106;
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D4B2C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;

  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v11 = v10[4];
      v12 = *(_QWORD *)(v11 + 16) == a1 && *(_QWORD *)(v11 + 24) == a2;
      if (v12 || (sub_1B2229D24() & 1) != 0)
        break;
      v10 += 6;
      if (!--v9)
        goto LABEL_9;
    }
    v21 = 0;
    goto LABEL_20;
  }
LABEL_9:
  v13 = *(_QWORD *)(a4 + 16);
  if (v13)
  {
    v10 = (uint64_t *)(a4 + 40);
    while (1)
    {
      v14 = v10[4];
      v15 = *(_QWORD *)(v14 + 16) == a1 && *(_QWORD *)(v14 + 24) == a2;
      if (v15 || (sub_1B2229D24() & 1) != 0)
        break;
      v10 += 6;
      if (!--v13)
        goto LABEL_17;
    }
    v21 = 2;
LABEL_20:
    v17 = *((unsigned __int8 *)v10 + 8);
    v13 = *(v10 - 1);
    v16 = *v10;
    v18 = v10[2];
    v19 = v10[3];
    result = swift_retain();
    goto LABEL_21;
  }
LABEL_17:
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  result = 0;
  v21 = 0;
LABEL_21:
  *(_QWORD *)a5 = v13;
  *(_QWORD *)(a5 + 8) = v16;
  *(_QWORD *)(a5 + 16) = v17;
  *(_QWORD *)(a5 + 24) = v18;
  *(_QWORD *)(a5 + 32) = v19;
  *(_QWORD *)(a5 + 40) = result;
  *(_BYTE *)(a5 + 48) = v21;
  return result;
}

uint64_t sub_1B1D4B3E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;

  v9 = *(_QWORD *)(a3 + 16);
  if (v9)
  {
    v10 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v11 = v10[4];
      v12 = *(_QWORD *)(v11 + 16) == a1 && *(_QWORD *)(v11 + 24) == a2;
      if (v12 || (sub_1B2229D24() & 1) != 0)
        break;
      v10 += 6;
      if (!--v9)
        goto LABEL_9;
    }
    v21 = 1;
    goto LABEL_20;
  }
LABEL_9:
  v13 = *(_QWORD *)(a4 + 16);
  if (v13)
  {
    v10 = (uint64_t *)(a4 + 40);
    while (1)
    {
      v14 = v10[4];
      v15 = *(_QWORD *)(v14 + 16) == a1 && *(_QWORD *)(v14 + 24) == a2;
      if (v15 || (sub_1B2229D24() & 1) != 0)
        break;
      v10 += 6;
      if (!--v13)
        goto LABEL_17;
    }
    v21 = 2;
LABEL_20:
    v17 = *((unsigned __int8 *)v10 + 8);
    v13 = *(v10 - 1);
    v16 = *v10;
    v18 = v10[2];
    v19 = v10[3];
    result = swift_retain();
    goto LABEL_21;
  }
LABEL_17:
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  result = 0;
  v21 = 0;
LABEL_21:
  *(_QWORD *)a5 = v13;
  *(_QWORD *)(a5 + 8) = v16;
  *(_QWORD *)(a5 + 16) = v17;
  *(_QWORD *)(a5 + 24) = v18;
  *(_QWORD *)(a5 + 32) = v19;
  *(_QWORD *)(a5 + 40) = result;
  *(_BYTE *)(a5 + 48) = v21;
  return result;
}

uint64_t sub_1B1D4B4F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_1B19F8E54(0, &qword_1EEF5DF10, (uint64_t (*)(void))sub_1B1D4BD94, (uint64_t)&type metadata for MetalFunctionReflection.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D4BD94();
  sub_1B222A150();
  if (v1)
  {
    v10 = MEMORY[0x1E0DEE9E0];
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B1D4BDD8();
    v13 = 0;
    sub_1B1D4BE7C(&qword_1EEF5DF28, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEA0D8]);
    sub_1B2229814();
    v10 = v14;
    sub_1B1A02758(0, &qword_1EEF5DF30, (uint64_t)&type metadata for MetalFunctionReflection.Arg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v13 = 1;
    v11 = sub_1B1D4BED8(&qword_1EEF5DF38, (uint64_t (*)(void))sub_1B1D4BE38, MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    v13 = 2;
    v12 = v11;
    sub_1B2229814();
    v13 = 3;
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v10;
}

uint64_t sub_1B1D4B7E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  sub_1B19F8E54(0, &qword_1EEF5DED0, (uint64_t (*)(void))sub_1B1D4BB78, (uint64_t)&type metadata for MetalFunctionReflection.Arg.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v26 - v9;
  v11 = a1[3];
  v32 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B1D4BB78();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v32);
  v12 = v7;
  LOBYTE(v34) = 0;
  v13 = v6;
  v14 = sub_1B22297FC();
  LOBYTE(v34) = 5;
  v15 = sub_1B2229808();
  LOBYTE(v34) = 1;
  v31 = sub_1B22297FC();
  LOBYTE(v34) = 4;
  v29 = sub_1B22297CC();
  v30 = v17;
  LOBYTE(v36) = 3;
  sub_1B1CBB838();
  sub_1B2229814();
  v27 = v35;
  v28 = v34;
  v33 = 2;
  sub_1B1B6AE04();
  sub_1B2229814();
  v26 = v36;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  v18 = sub_1B1BF5168(v29, v30, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, v28, v27, v26, 0, 0, 0,
          MEMORY[0x1E0DEE9D8]);
  LOBYTE(v34) = 6;
  v30 = v18;
  swift_retain();
  v19 = sub_1B22297A8();
  v21 = v20;
  v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23 = v19;
  v22(v10, v13);
  if ((v21 & 1) != 0)
    v24 = 0;
  else
    v24 = v23;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v32);
  v25 = v30;
  result = swift_release();
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v15;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v31;
  *(_QWORD *)(a2 + 32) = v24;
  *(_QWORD *)(a2 + 40) = v25;
  return result;
}

unint64_t sub_1B1D4BB78()
{
  unint64_t result;

  result = qword_1EEF5DED8;
  if (!qword_1EEF5DED8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228FB18, &type metadata for MetalFunctionReflection.Arg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DED8);
  }
  return result;
}

uint64_t sub_1B1D4BBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1D4BC00();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1D4BC00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5DEE8)
  {
    type metadata accessor for MTLTextureType(255);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5DEE8);
  }
}

void sub_1B1D4BC54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1ED4BB240)
  {
    v2 = type metadata accessor for MetalFunctionScript(255);
    v4 = type metadata accessor for ScriptRuntime(a1, v2, (uint64_t)&off_1ED4BF0F8, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1ED4BB240);
  }
}

uint64_t sub_1B1D4BCB0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ReplicationStreamBuilder(a2, a1);
  return a2;
}

uint64_t sub_1B1D4BCF4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1B1D4BD38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_1EEF5DF00)
  {
    v4 = type metadata accessor for ComponentWriter(0, (uint64_t)&type metadata for MetalScriptReflection, (uint64_t)&off_1E63A3588, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EEF5DF00);
  }
}

unint64_t sub_1B1D4BD94()
{
  unint64_t result;

  result = qword_1EEF5DF18;
  if (!qword_1EEF5DF18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228FAC8, &type metadata for MetalFunctionReflection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DF18);
  }
  return result;
}

void sub_1B1D4BDD8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA270)
  {
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA270);
  }
}

unint64_t sub_1B1D4BE38()
{
  unint64_t result;

  result = qword_1EEF5DF40;
  if (!qword_1EEF5DF40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F898, &type metadata for MetalFunctionReflection.Arg);
    atomic_store(result, (unint64_t *)&qword_1EEF5DF40);
  }
  return result;
}

uint64_t sub_1B1D4BE7C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    sub_1B1D4BDD8();
    v8[0] = a2;
    v8[1] = a2;
    result = MEMORY[0x1B5E23E74](a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1D4BED8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, &qword_1EEF5DF30, (uint64_t)&type metadata for MetalFunctionReflection.Arg, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1D4BF54()
{
  unint64_t result;

  result = qword_1EEF5DF60;
  if (!qword_1EEF5DF60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F870, &type metadata for MetalFunctionReflection.Arg);
    atomic_store(result, (unint64_t *)&qword_1EEF5DF60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MetalFunctionReflection.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1D4BFE4 + 4 * byte_1B228F60A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1D4C018 + 4 * byte_1B228F605[v4]))();
}

uint64_t sub_1B1D4C018(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D4C020(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D4C028);
  return result;
}

uint64_t sub_1B1D4C034(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D4C03CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1D4C040(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D4C048(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetalFunctionReflection.CodingKeys()
{
  return &type metadata for MetalFunctionReflection.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MetalFunctionReflection.Arg.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B1D4C0B0 + 4 * byte_1B228F614[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B1D4C0E4 + 4 * byte_1B228F60F[v4]))();
}

uint64_t sub_1B1D4C0E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D4C0EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D4C0F4);
  return result;
}

uint64_t sub_1B1D4C100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D4C108);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B1D4C10C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D4C114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetalFunctionReflection.Arg.CodingKeys()
{
  return &type metadata for MetalFunctionReflection.Arg.CodingKeys;
}

uint64_t initializeWithCopy for MetalFunctionReflection.Arg(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MetalFunctionReflection.Arg(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MetalFunctionReflection.Arg(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MetalFunctionReflection.Arg()
{
  return &type metadata for MetalFunctionReflection.Arg;
}

unint64_t sub_1B1D4C230()
{
  unint64_t result;

  result = qword_1EEF5DF70;
  if (!qword_1EEF5DF70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F9E8, &type metadata for MetalFunctionReflection.Arg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DF70);
  }
  return result;
}

unint64_t sub_1B1D4C278()
{
  unint64_t result;

  result = qword_1EEF5DF78;
  if (!qword_1EEF5DF78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228FAA0, &type metadata for MetalFunctionReflection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DF78);
  }
  return result;
}

unint64_t sub_1B1D4C2C0()
{
  unint64_t result;

  result = qword_1EEF5DF80;
  if (!qword_1EEF5DF80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228FA10, &type metadata for MetalFunctionReflection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DF80);
  }
  return result;
}

unint64_t sub_1B1D4C308()
{
  unint64_t result;

  result = qword_1EEF5DF88;
  if (!qword_1EEF5DF88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228FA38, &type metadata for MetalFunctionReflection.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DF88);
  }
  return result;
}

unint64_t sub_1B1D4C350()
{
  unint64_t result;

  result = qword_1EEF5DF90;
  if (!qword_1EEF5DF90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F920, &type metadata for MetalFunctionReflection.Arg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DF90);
  }
  return result;
}

unint64_t sub_1B1D4C398()
{
  unint64_t result;

  result = qword_1EEF5DF98;
  if (!qword_1EEF5DF98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228F948, &type metadata for MetalFunctionReflection.Arg.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5DF98);
  }
  return result;
}

uint64_t sub_1B1D4C3DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>, float32x4_t a5@<Q1>, float32x4_t a6@<Q2>, float32x4_t a7@<Q3>, float32x4_t a8@<Q4>, float32x4_t a9@<Q5>, float32x4_t a10@<Q6>, float32x4_t a11@<Q7>)
{
  uint64_t v11;
  float32x2_t v13;
  uint64_t v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float v51;
  float32x4_t v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v59;
  int8x16_t v60;
  float v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  uint64_t v65;
  int32x2_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int32x2_t v91;
  float32x2_t v92;
  float32x2_t v93;
  int32x2_t v94;
  float32x2_t v95;
  float32x2_t v96;
  int32x2_t v97;
  float32x2_t v98;
  float32x2_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x2_t v103;
  float32x2_t v104;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v112;
  float32x4_t v114;
  float32x4_t v116;
  int8x16_t v118;
  float32x4_t v120;
  int8x16_t v122;
  float32x4_t v124;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  simd_float4 v130;
  int8x16_t v131;
  int8x16_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  _BYTE v136[160];
  _QWORD v137[10];
  _BYTE v138[80];
  simd_float4x4 v139;
  simd_float4x4 v140;

  sub_1B1AE09AC(a1, (uint64_t)v137);
  v13 = (float32x2_t)v137[0];
  v14 = v137[1];
  v15 = (float32x2_t)v137[2];
  v16 = v137[3];
  v18 = (float32x2_t)v137[4];
  v17 = v137[5];
  v20 = (float32x2_t)v137[6];
  v19 = v137[7];
  v108 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, a4.f32[0]), a9, *(float32x2_t *)a4.f32, 1), a10, a4, 2), a11, a4, 3);
  v107 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, a5.f32[0]), a9, *(float32x2_t *)a5.f32, 1), a10, a5, 2), a11, a5, 3);
  v106 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, a6.f32[0]), a9, *(float32x2_t *)a6.f32, 1), a10, a6, 2), a11, a6, 3);
  v120 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, a7.f32[0]), a9, *(float32x2_t *)a7.f32, 1), a10, a7, 2), a11, a7, 3);
  sub_1B1AE09AC(a1, (uint64_t)v138);
  v21 = v120;
  v22 = v106;
  v23 = v107;
  v24 = v108;
  if ((v138[64] & 1) == 0)
  {
    *(float32x2_t *)v25.f32 = v13;
    v25.i64[1] = v14;
    *(float32x2_t *)v26.f32 = v15;
    v26.i64[1] = v16;
    *(float32x2_t *)v27.f32 = v18;
    v27.i64[1] = v17;
    *(float32x2_t *)v28.f32 = v20;
    v28.i64[1] = v19;
    v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, v13.f32[0]), a9, v13, 1), a10, v25, 2), a11, v25, 3);
    v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, v15.f32[0]), a9, v15, 1), a10, v26, 2), a11, v26, 3);
    v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, v18.f32[0]), a9, v18, 1), a10, v27, 2), a11, v27, 3);
    v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, v20.f32[0]), a9, v20, 1), a10, v28, 2), a11, v28, 3);
  }
  v29 = (int32x4_t)vmulq_f32(a4, a4);
  v30 = vmulq_f32(a5, a5);
  v31 = (int32x4_t)vmulq_f32(a6, a6);
  v32 = vzip2q_s32(v29, v31);
  v33 = (float32x4_t)vzip1q_s32(vzip1q_s32(v29, v31), (int32x4_t)v30);
  v34 = (float32x4_t)vtrn2q_s32(v29, (int32x4_t)v30);
  v34.i32[2] = v31.i32[1];
  v35 = vaddq_f32((float32x4_t)vzip1q_s32(v32, vdupq_laneq_s32((int32x4_t)v30, 2)), vaddq_f32(v33, v34));
  v30.i64[0] = 0x80000000800000;
  v30.i64[1] = 0x80000000800000;
  v36 = (int8x16_t)vcgeq_f32(v30, v35);
  v35.i32[3] = 0;
  v37 = vrsqrteq_f32(v35);
  v38 = vmulq_f32(v37, vrsqrtsq_f32(v35, vmulq_f32(v37, v37)));
  v39 = (int32x4_t)v36;
  v39.i32[3] = 0;
  v40 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v39), (int8x16_t)v35, (int8x16_t)vmulq_f32(v38, vrsqrtsq_f32(v35, vmulq_f32(v38, v38))));
  v41 = vmulq_n_f32(a4, v40.f32[0]);
  v42 = vmulq_lane_f32(a5, *(float32x2_t *)v40.f32, 1);
  v43 = vmulq_laneq_f32(a6, v40, 2);
  v44 = (int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43);
  v45 = (int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42);
  v46 = (int32x4_t)v41;
  if (v36.i32[0])
  {
    v47 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v44, (int8x16_t)v43, 0xCuLL), vnegq_f32(v42)), v43, (float32x4_t)vextq_s8(v45, (int8x16_t)v42, 0xCuLL));
    v46 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), v47, 0xCuLL);
  }
  v48 = (int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41);
  v49 = v42;
  if (v36.i32[1])
  {
    v50 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v48, (int8x16_t)v41, 0xCuLL), vnegq_f32(v43)), v41, (float32x4_t)vextq_s8(v44, (int8x16_t)v43, 0xCuLL));
    v49 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), v50, 0xCuLL);
  }
  if (v36.i32[2])
  {
    v36 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v45, (int8x16_t)v42, 0xCuLL), vnegq_f32(v41)), v42, (float32x4_t)vextq_s8(v48, (int8x16_t)v41, 0xCuLL));
    v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), v36, 0xCuLL);
  }
  v51 = (float)(*(float *)v46.i32 + v49.f32[1]) + v43.f32[2];
  if (v51 <= 0.0)
  {
    if (*(float *)v46.i32 < v49.f32[1] || *(float *)v46.i32 < v43.f32[2])
    {
      if (v49.f32[1] <= v43.f32[2])
      {
        v53 = sqrtf((float)((float)(v43.f32[2] + 1.0) - *(float *)v46.i32) - v49.f32[1]);
        *(float32x2_t *)v56.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v46, (int32x4_t)v49), *(float32x2_t *)v43.f32);
        v103 = (float32x2_t)__PAIR64__(v46.u32[1], LODWORD(v53));
        v104 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 0);
        *(float32x2_t *)v55.f32 = vsub_f32(*(float32x2_t *)v46.i8, v104);
        v104.f32[0] = v53;
        v104.i32[0] = vmul_f32(v103, v104).u32[0];
        v104.i32[1] = v55.i32[1];
        *(float32x2_t *)&v56.u32[2] = v104;
        goto LABEL_11;
      }
      v61 = sqrtf((float)((float)(v49.f32[1] + 1.0) - *(float *)v46.i32) - v43.f32[2]);
      *(int32x2_t *)v36.i8 = vdup_laneq_s32((int32x4_t)v49, 2);
      v59 = v36;
      *(float *)v59.i32 = v61;
      v59.i32[0] = vmul_f32(*(float32x2_t *)v59.i8, (float32x2_t)__PAIR64__(v43.u32[1], LODWORD(v61))).u32[0];
      v59.i32[1] = vadd_f32(*(float32x2_t *)&v36, *(float32x2_t *)&v43).i32[1];
      v60 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.i8, 1), v49);
      v66 = (int32x2_t)vsubq_f32(v43, (float32x4_t)vdupq_laneq_s32(v46, 2)).u64[0];
      v57 = (float32x4_t)vextq_s8(vextq_s8(v60, v60, 4uLL), v59, 0xCuLL);
      v57.i32[3] = v66.i32[0];
    }
    else
    {
      v61 = sqrtf((float)((float)(*(float *)v46.i32 + 1.0) - v49.f32[1]) - v43.f32[2]);
      v62 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.f32, 0);
      v63 = vadd_f32(*(float32x2_t *)v46.i8, v62);
      v62.f32[0] = v61;
      v57.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v46.u32[1], LODWORD(v61)), v62).u32[0];
      v57.i32[1] = v63.i32[1];
      v64 = (float32x2_t)vzip2q_s32(v46, (int32x4_t)v49).u64[0];
      LODWORD(v65) = vadd_f32(v64, *(float32x2_t *)v43.f32).u32[0];
      v66 = (int32x2_t)vsub_f32(v64, *(float32x2_t *)v43.f32);
      HIDWORD(v65) = v66.i32[1];
      v57.i64[1] = v65;
    }
    *(float *)v66.i32 = 0.5 / v61;
    v56 = (float32x4_t)vdupq_lane_s32(v66, 0);
    goto LABEL_20;
  }
  v52 = (float32x4_t)vzip2q_s32((int32x4_t)v49, vuzp1q_s32((int32x4_t)v49, (int32x4_t)v43));
  v52.i32[2] = v46.i32[1];
  v53 = sqrtf(v51 + 1.0);
  v54 = (float32x4_t)vtrn2q_s32((int32x4_t)v43, vzip2q_s32((int32x4_t)v43, v46));
  v54.i32[2] = v49.i32[0];
  v56 = vsubq_f32(v52, v54);
  v52.f32[3] = v53;
  v54.f32[3] = v53;
  v55 = vmulq_f32(v52, v54);
  v56.i32[3] = v55.i32[3];
LABEL_11:
  v55.f32[0] = 0.5 / v53;
  v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
LABEL_20:
  v67 = vabsq_f32(vaddq_f32(vmulq_f32(v56, v57), (float32x4_t)xmmword_1B2245B70));
  v68.i64[0] = 0x3400000034000000;
  v68.i64[1] = 0x3400000034000000;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v68, v67)))) & 1) != 0
    || (*(_DWORD *)(v11 + 20) & 0x7FFFFFFF) != 0
    || (*(_DWORD *)(a2 + 16) & 0x7FFFFFFF) != 0)
  {
    v69 = (int8x16_t)vmulq_f32(v108, v108);
    v70 = (int8x16_t)vmulq_f32(v107, v107);
    v71 = (int8x16_t)vmulq_f32(v106, v106);
    v72 = (float32x4_t)vtrn2q_s32((int32x4_t)v69, (int32x4_t)v70);
    v72.i32[2] = v71.i32[1];
    v124 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2);
    v73 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v69, (int32x4_t)v71), (int32x4_t)v124), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v69, (int32x4_t)v71), (int32x4_t)v70), v72));
    v74.i64[0] = 0x80000000800000;
    v74.i64[1] = 0x80000000800000;
    v75 = vcgeq_f32(v74, v73);
    v73.i32[3] = 0;
    v76 = vrsqrteq_f32(v73);
    v77 = vmulq_f32(v76, vrsqrtsq_f32(v73, vmulq_f32(v76, v76)));
    v78 = v75;
    v78.i32[3] = 0;
    v79 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v78), (int8x16_t)v73, (int8x16_t)vmulq_f32(v77, vrsqrtsq_f32(v73, vmulq_f32(v77, v77))));
    v80 = vmulq_n_f32(v108, v79.f32[0]);
    v81 = vmulq_lane_f32(v107, *(float32x2_t *)v79.f32, 1);
    v82 = vmulq_laneq_f32(v106, v79, 2);
    v83 = (int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82);
    v84 = (int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81);
    v85 = (int8x16_t)v80;
    if (v75.i32[0])
    {
      v86 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v83, (int8x16_t)v82, 0xCuLL), vnegq_f32(v81)), v82, (float32x4_t)vextq_s8(v84, (int8x16_t)v81, 0xCuLL));
      v85 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), v86, 0xCuLL);
    }
    v122 = v85;
    v87 = (int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80);
    v88 = (int8x16_t)v81;
    if (v75.i32[1])
    {
      v89 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v87, (int8x16_t)v80, 0xCuLL), vnegq_f32(v82)), v80, (float32x4_t)vextq_s8(v83, (int8x16_t)v82, 0xCuLL));
      v88 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), v89, 0xCuLL);
    }
    v118 = v88;
    v126 = v21;
    if (v75.i32[2])
    {
      v90 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v84, (int8x16_t)v81, 0xCuLL), vnegq_f32(v80)), v81, (float32x4_t)vextq_s8(v87, (int8x16_t)v80, 0xCuLL));
      v82 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), v90, 0xCuLL);
    }
    v116 = v82;
    v91 = (int32x2_t)vadd_f32(*(float32x2_t *)v69.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL));
    v91.i32[0] = vadd_f32((float32x2_t)v91, (float32x2_t)vdup_lane_s32(v91, 1)).u32[0];
    v92 = vrsqrte_f32((float32x2_t)v91.u32[0]);
    v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v92, v92)));
    v91.i32[0] = vmul_f32(v93, vrsqrts_f32((float32x2_t)v91.u32[0], vmul_f32(v93, v93))).u32[0];
    v94 = (int32x2_t)vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL));
    v94.i32[0] = vadd_f32((float32x2_t)v94, (float32x2_t)vdup_lane_s32(v94, 1)).u32[0];
    v139.columns[0] = (simd_float4)vmulq_n_f32(v108, *(float *)v91.i32);
    v95 = vrsqrte_f32((float32x2_t)v94.u32[0]);
    v96 = vmul_f32(v95, vrsqrts_f32((float32x2_t)v94.u32[0], vmul_f32(v95, v95)));
    v94.i32[0] = vmul_f32(v96, vrsqrts_f32((float32x2_t)v94.u32[0], vmul_f32(v96, v96))).u32[0];
    v97 = (int32x2_t)vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL));
    v139.columns[1] = (simd_float4)vmulq_n_f32(v107, *(float *)v94.i32);
    v97.i32[0] = vadd_f32((float32x2_t)v97, (float32x2_t)vdup_lane_s32(v97, 1)).u32[0];
    v98 = vrsqrte_f32((float32x2_t)v97.u32[0]);
    v99 = vmul_f32(v98, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v98, v98)));
    v139.columns[2] = (simd_float4)vmulq_n_f32(v106, vmul_f32(v99, vrsqrts_f32((float32x2_t)v97.u32[0], vmul_f32(v99, v99))).f32[0]);
    v139.columns[3] = (simd_float4)v120;
    v112 = (float32x4_t)v70;
    v114 = (float32x4_t)v71;
    v109 = (float32x4_t)v69;
    v140 = __invert_f4(v139);
    v100 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 2), vaddq_f32(v109, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 1)));
    v100.f32[0] = sqrtf(v100.f32[0]);
    v100.i32[1] = sqrtf(vaddq_f32(v124, vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).f32[0]);
    v100.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).f32[0]);
    v101.i64[0] = 0x3F0000003F000000;
    v101.i64[1] = 0x3F0000003F000000;
    v127 = (float32x4_t)v140.columns[0];
    v128 = (float32x4_t)v140.columns[1];
    v129 = (float32x4_t)v140.columns[2];
    v130 = v140.columns[3];
    v131 = v122;
    v132 = v118;
    v133 = v116;
    v134 = vmulq_f32(v100, v101);
    v135 = vsubq_f32(v120, v126);
    sub_1B1D4FCB0((uint64_t)&v127);
  }
  else
  {
    v127 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v120, (float32x4_t)0, v106), (float32x4_t)0, v107), (float32x4_t)0, v108);
    v128 = vmlaq_f32(vmlaq_f32(vmulq_f32(vabsq_f32(v107), (float32x4_t)xmmword_1B227E550), (float32x4_t)xmmword_1B227E550, vabsq_f32(v108)), (float32x4_t)xmmword_1B227E550, vabsq_f32(v106));
    v129 = vsubq_f32(v127, vmlaq_f32(vmlaq_f32(vmlaq_f32(v21, (float32x4_t)0, v22), (float32x4_t)0, v23), (float32x4_t)0, v24));
    sub_1B1D4FCBC((uint64_t)&v127);
  }
  sub_1B1D4FC70((uint64_t)&v127, (uint64_t)v136);
  return sub_1B1D4FC70((uint64_t)v136, a3);
}

float sub_1B1D4CA90()
{
  uint64_t v0;

  return *(float *)v0;
}

void sub_1B1D4CA98(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_1B1D4CAA0(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

double sub_1B1D4CAA8@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_1B228FB70;
  *(_QWORD *)(a1 + 16) = 255;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  return result;
}

uint64_t sub_1B1D4CAC8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  _BYTE v10[16];

  sub_1B1D4F120(0, &qword_1EEF5CA00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v10[-v7];
  result = sub_1B1C36710(a1, (uint64_t)&v10[-v7]);
  if (!v1)
  {
    v10[15] = 10;
    sub_1B222991C();
    v10[14] = 11;
    sub_1B2229934();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

double sub_1B1D4CBC4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];

  sub_1B1D4EF60(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B1D4CBFC(_QWORD *a1)
{
  return sub_1B1D4CAC8(a1);
}

double sub_1B1D4CC2C()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1B46B1C((uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEFD54E0 = v1[0];
  *(_OWORD *)algn_1EEFD54F0 = v1[1];
  qword_1EEFD5500 = v2;
  return result;
}

uint64_t *sub_1B1D4CCCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  int i;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39[8];
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  _BYTE v52[40];
  _OWORD v53[2];
  uint64_t v54;

  if (qword_1EEF57348 != -1)
    swift_once();
  v53[0] = xmmword_1EEFD54E0;
  v53[1] = *(_OWORD *)algn_1EEFD54F0;
  v54 = qword_1EEFD5500;
  v5 = a2 & 0xFFFFFFFFFFLL;
  sub_1B1E8FCE4(a1, (uint64_t)v53, a2 & 0xFFFFFFFFFFLL, v39);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v39, (uint64_t)v40, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v40[0])
  {
    v47 = v40[0];
    v48 = v40[1];
    v49 = v41;
    if (v46 >= 1)
    {
      v32 = v43;
      if (v43)
      {
        v30 = v42;
        v7 = v45[4];
        i = *(unsigned __int8 *)(v44 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v38 = v45;
        v27 = v45 + 8;
        v28 = (uint64_t)(v45 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v9 = 0;
        v29 = i;
        v31 = v7;
        v26 = v2;
        do
        {
          v10 = (unsigned int *)(v30 + 48 * v9);
          v34 = *v10;
          v11 = *((_QWORD *)v10 + 3);
          v13 = *((_QWORD *)v10 + 4);
          v12 = *((_QWORD *)v10 + 5);
          v35 = (uint64_t *)*((_QWORD *)v10 + 2);
          v36 = v9;
          v33 = v10[1];
          if (i)
          {
            v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          sub_1B1A18378(v28, (uint64_t)v52, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v15 = v38[4];
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          v17 = v12;
          swift_retain();
          v38[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v38[7] = v16;
          v27[1] = 0;
          v27[2] = 0;
          *v27 = 0;
          swift_release();
          v18 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1E63987F0, v35, v11, v13, (uint64_t)v38);
          v19 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v35, v11, v13, (uint64_t)v38);
          v37 = v17;
          v20 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v35, v11, v13, (uint64_t)v38);
          v21 = v20;
          if (v35)
          {
            for (i = v29; v13; --v13)
            {
              sub_1B1D4F17C(v18, v19, v21, v26, v5, a1);
              v21 += 64;
              v19 += 4;
              v18 += 4;
            }
          }
          else
          {
            i = v29;
            if ((_DWORD)v34 != (_DWORD)v33)
            {
              v22 = v33 - v34;
              v23 = v20 + (v34 << 6);
              v24 = &v19[4 * v34];
              v25 = &v18[4 * v34];
              do
              {
                sub_1B1D4F17C(v25, v24, v23, v26, v5, a1);
                v23 += 64;
                v24 += 4;
                v25 += 4;
                --v22;
              }
              while (v22);
            }
          }
          v50[0] = v47;
          v50[1] = v48;
          v51 = v49;
          sub_1B1F05D48(v38, (unsigned __int16 **)v50, (uint64_t)v52);
          sub_1B1F03804((char *)v37);
          v7 = v31;
          ecs_stack_allocator_pop_snapshot(v31);
          if ((i & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 376));
          }
          swift_release();
          v9 = v36 + 1;
        }
        while (v36 + 1 != v32);
        sub_1B19ED748(v39);
      }
    }
    return sub_1B19ED748(v39);
  }
  return result;
}

uint64_t sub_1B1D4D110(__int128 *a1, __int128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, float32x4_t a6, float32x4_t a7, __n128 a8, float a9)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int32 v27;
  int v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t *v47;
  float32x4_t v48;
  float32x4_t *v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float v59;
  float v60;
  unsigned int v61;
  uint64_t v63;
  float32x4_t v66;
  int8x16_t v67;
  char v71;
  __int32 v72;
  int v75;
  char v76;
  __int128 v77;
  uint64_t v78;
  ValueMetadata *v79;
  _UNKNOWN **v80;
  __n128 v81;
  _QWORD v82[6];
  float v83;
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t *)*((_QWORD *)a1 + 11);
  v12 = *((_QWORD *)a1 + 12);
  v13 = *((_QWORD *)a1 + 13);
  v15 = *((_QWORD *)a1 + 1);
  v14 = *((_QWORD *)a1 + 2);
  v16 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v11, v12, v13, v14);
  v17 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v11, v12, v13, v14);
  v63 = sub_1B1B47B28();
  v71 = v18;
  v77 = *a2;
  v81 = a8;
  v91 = a1[6];
  v19 = a1[4];
  v90 = a1[5];
  v89 = v19;
  v20 = a1[2];
  v88 = a1[3];
  v21 = a1[1];
  v85 = *a1;
  v79 = &type metadata for CollisionProperties;
  v80 = &off_1E6397A08;
  v78 = *((_QWORD *)a2 + 2);
  v22 = *(_QWORD *)(a3 + 16);
  v86 = v21;
  v87 = v20;
  v24 = *((_QWORD *)a1 + 6);
  v23 = *((_QWORD *)a1 + 7);
  v25 = *(_QWORD *)(v14 + 32);
  swift_retain();
  v92 = ecs_stack_allocator_allocate(v25, 8 * (v23 - v24), 8);
  v93 = v23 - v24;
  v94 = 0;
  sub_1B19FA198((uint64_t)&v77, (uint64_t)v82);
  v83 = a9;
  v82[5] = v22;
  sub_1B1A10AA4(*(_QWORD *)(v15 + 40), (uint64_t)&type metadata for Anchored, &v76);
  v84 = v76;
  swift_retain();
  v26 = ecs_stack_allocator_allocate(v25, 80 * (v23 - v24), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v77);
  v30 = a6;
  v29 = a7;
  v31 = a9;
  v95 = v26;
  v96 = v23 - v24;
  v97 = 0;
  if (v23 != v24)
  {
    __asm
    {
      FMOV            V21.4S, #-1.0
      FMOV            V22.4S, #1.0
    }
    v39 = (float32x4_t)xmmword_1B2245780;
    v66 = _Q22;
    v67 = _Q21;
    do
    {
      v47 = (float32x4_t *)(v17 + 16 * v24);
      v48 = vmulq_n_f32(*v47, v31);
      v49 = (float32x4_t *)(v16 + 16 * v24);
      v50 = vsubq_f32(*v49, v48);
      v51 = vcgezq_f32(v48);
      v51.i32[3] = 0;
      v52 = vabsq_f32(v48);
      v52.i32[3] = 0;
      v53 = vdivq_f32(_Q22, vmaxnmq_f32(v52, v39));
      v54 = vmulq_f32(v29, v53);
      v55 = vnegq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v51), (int8x16_t)_Q22, _Q21));
      v56 = vmulq_f32(vsubq_f32(v50, v30), vmulq_f32(v53, v55));
      v57 = (int8x16_t)vsubq_f32(v56, v54);
      v58 = vaddq_f32(v54, v56);
      v59 = fmaxf(fmaxf(*(float *)v57.i32, *(float *)&v57.i32[2]), *(float *)&v57.i32[1]);
      v60 = fminf(fminf(v58.f32[0], v58.f32[2]), v58.f32[1]);
      if (v59 <= v60 && v60 >= 0.0)
      {
        if (*(_BYTE *)(a5 + 24))
        {
          v59 = v60;
          v61 = -1;
        }
        else
        {
          v61 = 0;
        }
        if (v59 >= 0.0 && v59 <= 1.0)
        {
          v75 = v28;
          if ((v71 & 1) != 0)
          {
            v41 = 0;
            v42 = 0;
          }
          else
          {
            v40 = (uint64_t *)(v63 + 16 * v24);
            v41 = *v40;
            v42 = v40[1];
          }
          v43 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v61), (int8x16_t)vnegq_f32(v58), v57);
          v44 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL), v43), (int8x16_t)0, (int8x16_t)_Q22), vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL), (int8x16_t)v43, 8uLL), v43), (int8x16_t)0, (int8x16_t)_Q22),
                    v55));
          v45 = (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v43), (int8x16_t)vcgezq_f32(v43));
          v45.i32[3] = 0;
          v46 = vaddq_f32(v50, vmulq_n_f32(v48, v59));
          v46.i32[3] = v27;
          v72 = v27;
          sub_1B2021194(v24, v49, v47, v41, v42, v71 & 1, v46, vmulq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32(v45), (int8x16_t)_Q22)), v59);
          v27 = v72;
          _Q22 = v66;
          _Q21 = v67;
          v29 = a7;
          v31 = a9;
          v30 = a6;
          v39 = (float32x4_t)xmmword_1B2245780;
          v28 = v75;
        }
      }
      ++v24;
    }
    while (v24 != v23);
  }
  sub_1B1D4DCB4((uint64_t)&v81, a4 | ((HIDWORD(a4) & 1) << 32), (void (*)(_QWORD *))sub_1B1C39120);
  return sub_1B1C390B0((uint64_t)&v81);
}

uint64_t sub_1B1D4D4E8(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, float a7)
{
  __int128 v7;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int32 v26;
  float32x4_t v27;
  char v28;
  uint64_t v29;
  float v30;
  int v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v75;
  float v76;
  float v77;
  float v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;
  float v83;
  float v84;
  float v85;
  int32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float v93;
  int8x16_t v94;
  unsigned int v95;
  float32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;
  float32x4_t v99;
  float v100;
  float v101;
  float v102;
  float v105;
  float v106;
  float v107;
  float v110;
  BOOL v111;
  float v112;
  float v115;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  uint64_t v123;
  uint64_t v124;
  uint64_t v127;
  int8x16_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  char v133;
  uint64_t v134;
  __int32 v135;
  char v136;
  float32x4_t v137;
  char v139;
  __int128 v140;
  uint64_t v141;
  ValueMetadata *v142;
  _UNKNOWN **v143;
  __int128 v144;
  _QWORD v145[6];
  float v146;
  char v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  v11 = (uint64_t *)*((_QWORD *)a1 + 11);
  v12 = *((_QWORD *)a1 + 12);
  v13 = *((_QWORD *)a1 + 13);
  v14 = *((_QWORD *)a1 + 1);
  v15 = *((_QWORD *)a1 + 2);
  v123 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v11, v12, v13, v15);
  v124 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v11, v12, v13, v15);
  v127 = sub_1B1B47B28();
  v136 = v16;
  v134 = sub_1B1B47B98();
  v133 = v17;
  v140 = *a2;
  v144 = *(_OWORD *)(a3 + 128);
  v18 = a1[3];
  v150 = a1[2];
  v19 = *a1;
  v149 = a1[1];
  v148 = v19;
  v154 = a1[6];
  v20 = a1[4];
  v153 = a1[5];
  v152 = v20;
  v142 = &type metadata for CollisionProperties;
  v143 = &off_1E6397A08;
  v141 = *((_QWORD *)a2 + 2);
  v21 = *(_QWORD *)(a4 + 16);
  v151 = v18;
  v22 = *((_QWORD *)a1 + 6);
  v23 = *((_QWORD *)a1 + 7);
  v24 = *(_QWORD *)(v15 + 32);
  swift_retain();
  v155 = ecs_stack_allocator_allocate(v24, 8 * (v23 - v22), 8);
  v156 = v23 - v22;
  v157 = 0;
  sub_1B19FA198((uint64_t)&v140, (uint64_t)v145);
  v146 = a7;
  v145[5] = v21;
  sub_1B1A10AA4(*(_QWORD *)(v14 + 40), (uint64_t)&type metadata for Anchored, &v139);
  v147 = v139;
  swift_retain();
  v25 = ecs_stack_allocator_allocate(v24, 80 * (v23 - v22), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v140);
  v28 = v133;
  v29 = v134;
  v30 = a7;
  v158 = v25;
  v159 = v23 - v22;
  v160 = 0;
  if (v23 != v22)
  {
    v32 = v136 & 1;
    v33 = *(float *)(a4 + 80) * 0.5;
    v35 = *(float32x4_t *)a3;
    v34 = *(float32x4_t *)(a3 + 16);
    v36 = *(float32x4_t *)(a3 + 32);
    v37 = *(float32x4_t *)(a3 + 48);
    v38 = 16 * v22;
    __asm
    {
      FMOV            V15.4S, #-1.0
      FMOV            V23.4S, #1.0
    }
    v44 = (float32x4_t)xmmword_1B2245780;
    v45.i64[0] = 0x8000000080000000;
    v45.i64[1] = 0x8000000080000000;
    v46 = 0uLL;
    v131 = v34;
    v132 = *(float32x4_t *)a3;
    v129 = v37;
    v130 = v36;
    v128 = _Q15;
    v137 = _Q23;
    do
    {
      v52 = vmulq_n_f32(*(float32x4_t *)(v124 + 16 * v22), v30);
      v53 = vsubq_f32(*(float32x4_t *)(v123 + 16 * v22), v52);
      v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v53.f32[0]), v34, *(float32x2_t *)v53.f32, 1), v36, v53, 2), v37, v53, 3);
      v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, v52.f32[0]), v34, *(float32x2_t *)v52.f32, 1), v36, v52, 2), v37, v52, 3);
      v56 = *(float *)(a6 + 20);
      if (v56 > 0.0 || (*(_DWORD *)(a4 + 80) & 0x7FFFFFFF) != 0)
      {
        if ((v28 & 1) != 0)
          v57 = _Q23;
        else
          v57 = *(float32x4_t *)(v29 + 16 * v22);
        v27.f32[0] = v33 * fmaxf(fmaxf(v57.f32[0], v57.f32[2]), v57.f32[1]);
        v58 = vaddq_f32(*(float32x4_t *)(a3 + 112), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
        v59 = vcgezq_f32(v55);
        v59.i32[3] = 0;
        v60 = vabsq_f32(v55);
        v60.i32[3] = 0;
        v61 = vdivq_f32(_Q23, vmaxnmq_f32(v60, v44));
        v62 = vmulq_f32(v61, v58);
        v63 = vmulq_f32(v54, vmulq_f32(v61, vnegq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v59), (int8x16_t)_Q23, _Q15))));
        v66 = vsubq_f32(v63, v62);
        v64 = vaddq_f32(v63, v62);
        v65 = fmaxf(fmaxf(v66.f32[0], v66.f32[2]), v66.f32[1]);
        v66.f32[0] = fminf(fminf(v64.f32[0], v64.f32[2]), v64.f32[1]);
        if (v65 <= v66.f32[0] && v66.f32[0] >= 0.0)
        {
          v66.f32[0] = v56 + v27.f32[0];
          v67 = vmlaq_n_f32(v54, v55, v65);
          v68 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v67), (int8x16_t)vcgtzq_f32(v67)), vorrq_s8(vandq_s8((int8x16_t)v67, v45), (int8x16_t)_Q23), (int8x16_t)v46);
          v27 = vmulq_f32(v54, v68);
          _Q16 = vmulq_f32(v55, v68);
          v66.f32[0] = fminf(v66.f32[0], fminf(fminf(v58.f32[0], v58.f32[2]), v58.f32[1]));
          v70 = vsubq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 0));
          v71 = vsubq_f32(vmulq_f32(v67, v68), v70);
          v72 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v71, (int8x16_t)v71, 0xCuLL), (int8x16_t)v71, 8uLL);
          v71.i32[3] = 0;
          v72.i32[3] = 0;
          v73 = vmaxnmq_f32(v71, v72);
          if (fminf(fminf(v73.f32[0], v73.f32[2]), v73.f32[1]) < 0.0 && v65 >= 0.0 && v65 <= 1.0)
          {
LABEL_56:
            v117 = vmlaq_f32(vmulq_n_f32(_Q16, v65), v68, v27);
            v97 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v117), (int8x16_t)vcgtzq_f32(v117)), vorrq_s8(vandq_s8((int8x16_t)v117, v45), (int8x16_t)_Q23), (int8x16_t)v46);
            v118 = vsubq_f32(vabsq_f32(v117), v70);
            v118.i32[3] = 0;
            v119 = vmaxnmq_f32(v118, v46);
            v27 = vmulq_f32(v119, v119);
            v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v27, 2), vadd_f32(*(float32x2_t *)v27.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.f32, 1))).u32[0];
            *(float32x2_t *)v117.f32 = vrsqrte_f32((float32x2_t)v27.u32[0]);
            *(float32x2_t *)v117.f32 = vmul_f32(*(float32x2_t *)v117.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32)));
            *(float32x2_t *)v27.f32 = vmul_f32(*(float32x2_t *)v117.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v117.f32, *(float32x2_t *)v117.f32)));
            v99 = vmulq_n_f32(v119, v27.f32[0]);
LABEL_57:
            v120 = vmulq_f32(v97, v99);
            if (v65 >= 0.0 && v65 <= 1.0)
            {
              if (v32)
              {
                v48 = 0;
                v49 = 0;
              }
              else
              {
                v47 = (uint64_t *)(v127 + 16 * v22);
                v48 = *v47;
                v49 = v47[1];
              }
              v50 = vaddq_f32(v53, vmulq_n_f32(v52, v65));
              v51 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a3 + 64), v120.f32[0]), *(float32x4_t *)(a3 + 80), *(float32x2_t *)v120.f32, 1), *(float32x4_t *)(a3 + 96), v120, 2);
              v51.i32[3] = v26;
              v50.i32[3] = HIDWORD(v7);
              v135 = v26;
              sub_1B2021194(v22, (float32x4_t *)(v123 + v38), (float32x4_t *)(v124 + v38), v48, v49, v32, v50, v51, v65);
              v26 = v135;
              _Q23 = v137;
              v30 = a7;
              v29 = v134;
              v28 = v133;
              v34 = v131;
              v35 = v132;
              v37 = v129;
              v36 = v130;
              _Q15 = v128;
              v44 = (float32x4_t)xmmword_1B2245780;
              v45.i64[0] = 0x8000000080000000;
              v45.i64[1] = 0x8000000080000000;
              v46 = 0uLL;
            }
            goto LABEL_6;
          }
          v75 = vmulq_f32(_Q16, _Q16);
          v76 = vaddv_f32(*(float32x2_t *)v75.f32);
          v77 = v75.f32[2] + v76;
          if ((float)(v75.f32[2] + v76) >= 0.00000011921)
          {
            v78 = v66.f32[0] * v66.f32[0];
            v79 = vsubq_f32(v27, v70);
            v80 = vmulq_f32(_Q16, v79);
            v81 = vmulq_f32(v79, v79);
            v82 = vaddv_f32(*(float32x2_t *)v80.f32);
            v83 = v80.f32[2] + v82;
            v84 = vaddv_f32(*(float32x2_t *)v81.f32);
            v85 = (float)(v83 * v83) - (float)(v77 * (float)((float)(v81.f32[2] + v84) - v78));
            if (v85 <= 0.0)
              v65 = 1.0e10;
            else
              v65 = (float)((float)-v83 - sqrtf(v85)) / v77;
            v100 = v80.f32[1] + v80.f32[2];
            v101 = (float)(v100 * v100)
                 - (float)((float)(v75.f32[1] + v75.f32[2]) * (float)((float)(v81.f32[1] + v81.f32[2]) - v78));
            if (v101 > 0.0)
            {
              v102 = (float)((float)-v100 - sqrtf(v101)) / (float)(v75.f32[1] + v75.f32[2]);
              _NF = fabsf(vmlas_n_f32(v27.f32[0], v102, _Q16.f32[0])) < v70.f32[0] && v102 < v65;
              if (_NF && v102 >= 0.0)
                v65 = v102;
            }
            v105 = v75.f32[2] + v75.f32[0];
            v106 = v80.f32[2] + v80.f32[0];
            v107 = (float)(v106 * v106) - (float)(v105 * (float)((float)(v81.f32[2] + v81.f32[0]) - v78));
            if (v107 <= 0.0)
            {
              v44 = (float32x4_t)xmmword_1B2245780;
              _Q23 = v137;
              v45.i64[0] = 0x8000000080000000;
              v45.i64[1] = 0x8000000080000000;
              v46 = 0uLL;
            }
            else
            {
              _S21 = (float)((float)-v106 - sqrtf(v107)) / v105;
              __asm { FMLA            S22, S21, V16.S[1] }
              v110 = fabsf(_S22);
              v111 = _NF && v110 < v70.f32[1];
              v44 = (float32x4_t)xmmword_1B2245780;
              _Q23 = v137;
              v45.i64[0] = 0x8000000080000000;
              v45.i64[1] = 0x8000000080000000;
              v46 = 0uLL;
              if (v111)
                v65 = _S21;
            }
            v112 = (float)(v82 * v82) - (float)(v76 * (float)(v84 - v78));
            if (v112 <= 0.0)
              goto LABEL_54;
            _S17 = (float)((float)-v82 - sqrtf(v112)) / v76;
            __asm { FMLA            S18, S17, V16.S[2] }
            v115 = fabsf(_S18);
            if (_NF && v115 < v70.f32[2])
            {
              v65 = _S17;
              if (_S17 < 0.0)
                goto LABEL_6;
            }
            else
            {
LABEL_54:
              if (v65 < 0.0)
                goto LABEL_6;
            }
            if (v65 <= 1.0)
              goto LABEL_56;
          }
        }
      }
      else
      {
        v86 = vcgezq_f32(v55);
        v86.i32[3] = 0;
        v87 = vabsq_f32(v55);
        v87.i32[3] = 0;
        v88 = vdivq_f32(_Q23, vmaxnmq_f32(v87, v44));
        v89 = vmulq_f32(*(float32x4_t *)(a3 + 112), v88);
        v90 = vnegq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v86), (int8x16_t)_Q23, _Q15));
        v91 = vmulq_f32(v54, vmulq_f32(v88, v90));
        v92 = (int8x16_t)vsubq_f32(v91, v89);
        v27 = vaddq_f32(v89, v91);
        v65 = fmaxf(fmaxf(*(float *)v92.i32, *(float *)&v92.i32[2]), *(float *)&v92.i32[1]);
        v93 = fminf(fminf(v27.f32[0], v27.f32[2]), v27.f32[1]);
        if (v65 <= v93 && v93 >= 0.0)
        {
          if (*(_BYTE *)(a6 + 24))
            v65 = v93;
          v94 = (int8x16_t)vnegq_f32(v27);
          if (*(_BYTE *)(a6 + 24))
            v95 = -1;
          else
            v95 = 0;
          v96 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v95), v94, v92);
          v97 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), (int8x16_t)v96, 0xCuLL), v96), (int8x16_t)v46, (int8x16_t)_Q23), vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v96, (int8x16_t)v96, 0xCuLL), (int8x16_t)v96, 8uLL), v96), (int8x16_t)v46, (int8x16_t)_Q23),
                    v90));
          v27 = (float32x4_t)vcgezq_f32(v96);
          v98 = (int32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v96), (int8x16_t)v27);
          v98.i32[3] = 0;
          v99 = (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32(v98), (int8x16_t)_Q23);
          goto LABEL_57;
        }
      }
LABEL_6:
      ++v22;
      v38 += 16;
    }
    while (v23 != v22);
  }
  sub_1B1D4DCB4((uint64_t)&v144, a5 | ((HIDWORD(a5) & 1) << 32), (void (*)(_QWORD *))sub_1B1D4FE74);
  return sub_1B1C390B0((uint64_t)&v144);
}

uint64_t sub_1B1D4DCB4(uint64_t a1, unint64_t a2, void (*a3)(_QWORD *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];
  _QWORD v11[30];

  v5 = sub_1B1C390E4(a1, (uint64_t)v11);
  if (v11[28])
  {
    MEMORY[0x1E0C80A78](v5, v11[7]);
    v10[2] = v11;
    sub_1B1F08D20(0, v6, 1, a2 | ((HIDWORD(a2) & 1) << 32), v7, a3, (uint64_t)v10, v8);
    ecs_stack_allocator_deallocate(*(_QWORD **)(v11[11] + 32), v11[26], 80 * v11[27]);
  }
  sub_1B2021E28(v11);
  return sub_1B1C390B0((uint64_t)v11);
}

uint64_t *sub_1B1D4DD7C(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *result;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  unsigned __int8 *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  float32x4_t *v33;
  float v34;
  float v35;
  __int128 v36;
  __int128 v37;
  float v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  int v51;
  __int128 *v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  _QWORD *v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  float v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  uint64_t v85;
  int v86;
  char v87;
  uint64_t v88;
  uint64_t ObjectType;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  float v110;
  unsigned __int8 *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  float32x4_t *v117;
  float v118;
  float v119;
  __int128 v120;
  __int128 v121;
  float v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  float v134;
  int v135;
  __int128 *v136;
  uint64_t v137;
  float v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float v149;
  _QWORD *v150;
  uint64_t v151;
  float v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  float v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  uint64_t v169;
  int v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  float v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned __int8 *v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  char v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  float v209;
  float v210;
  float v211;
  float v212;
  uint64_t v213;
  int v214;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  _OWORD v234[2];
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  _OWORD v238[6];
  int v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  _OWORD v244[2];
  uint64_t v245;
  unsigned int v246;
  char v247;
  uint64_t v248;
  unint64_t v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  __int128 v259;
  int v260;
  char v261;
  float v262;
  float v263;
  uint64_t v264[8];
  _BYTE v265[160];
  _BYTE v266[160];
  _BYTE v267[57];
  _BYTE v268[152];
  _OWORD v269[2];
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  _BYTE v276[40];
  _OWORD v277[3];
  uint64_t v278;
  uint64_t v279;
  char v280;
  _OWORD v281[3];
  uint64_t v282;
  uint64_t v283;
  char v284;
  uint64_t v285;

  v285 = *MEMORY[0x1E0C80C00];
  if (qword_1EEF57348 != -1)
    swift_once();
  v244[0] = xmmword_1EEFD54E0;
  v244[1] = *(_OWORD *)algn_1EEFD54F0;
  v245 = qword_1EEFD5500;
  v9 = *(_OWORD *)(a3 + 96);
  v238[2] = *(_OWORD *)(a3 + 80);
  v238[3] = v9;
  v10 = *(_OWORD *)(a3 + 128);
  v238[4] = *(_OWORD *)(a3 + 112);
  v238[5] = v10;
  v11 = *(_OWORD *)(a3 + 32);
  v236 = *(_OWORD *)(a3 + 16);
  v237 = v11;
  v12 = *(_OWORD *)(a3 + 64);
  v238[0] = *(_OWORD *)(a3 + 48);
  v238[1] = v12;
  sub_1B1BE9FDC((int *)v238 + 2, (uint64_t)&v239);
  sub_1B1BE9FDC(&v239, (uint64_t)&v246);
  if (v247)
    v13 = 0x200000000;
  else
    v13 = v246;
  sub_1B1E8FCE4(a2, (uint64_t)v244, v13, v264);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v264, (uint64_t)v269, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v269[0])
  {
    v231 = v269[0];
    v232 = v269[1];
    v233 = v270;
    if (v275 >= 1)
    {
      v197 = v272;
      if (v272)
      {
        v196 = v271;
        v200 = v274[4];
        v199 = *(unsigned __int8 *)(v273 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v201 = v274;
        v194 = v274 + 8;
        v195 = (uint64_t)(v274 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v15 = 0;
        do
        {
          v198 = v15;
          v16 = (unsigned int *)(v196 + 48 * v15);
          v17 = *v16;
          v222 = v16[1];
          v18 = (uint64_t *)*((_QWORD *)v16 + 2);
          v19 = *((_QWORD *)v16 + 3);
          v20 = *((_QWORD *)v16 + 5);
          v213 = *((_QWORD *)v16 + 4);
          if (v199)
          {
            v21 = *(os_unfair_lock_s **)(v20 + 376);
            swift_retain();
            os_unfair_lock_lock(v21);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v20 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v200);
          sub_1B1A18378(v195, (uint64_t)v276, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v22 = v201[4];
          v202 = v20;
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v201[6] = ecs_stack_allocator_allocate(v22, 48 * v23, 8);
          v201[7] = v23;
          v194[1] = 0;
          v194[2] = 0;
          *v194 = 0;
          swift_release();
          v24 = v213;
          v230 = sub_1B1A12038((uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1E63987F0, v18, v19, v213, (uint64_t)v201);
          v221 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v18, v19, v213, (uint64_t)v201);
          v220 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v18, v19, v213, (uint64_t)v201);
          if (v18)
          {
            if (v213)
            {
              v25 = 0;
              v26 = *(float *)(a1 + 12);
              v209 = *(float *)(a1 + 8);
              v211 = *(float *)(a1 + 4);
              v223 = *(_DWORD *)(a1 + 20);
              do
              {
                v32 = v230 + 32 * v25;
                if ((*(_DWORD *)(v32 + 16) & v223) != 0)
                {
                  v33 = (float32x4_t *)(v221 + (v25 << 6));
                  v34 = fminf(fmaxf(v211 + *(float *)(v32 + 4), 0.0), 1.0);
                  v35 = fminf(fmaxf(v209 + *(float *)(v32 + 8), 0.0), 1.0);
                  v36 = *(_OWORD *)v32;
                  v37 = *(_OWORD *)(v32 + 16);
                  v38 = 1.0 - fminf(fmaxf(v26 + *(float *)(v32 + 12), 0.0), 1.0);
                  v39 = v220 + (v25 << 6);
                  v240 = v36;
                  v241 = v37;
                  v40 = *v33;
                  v41 = v33[1];
                  v42 = v33[2];
                  v43 = v33[3];
                  v44 = *(_OWORD *)v39;
                  v45 = *(_OWORD *)(v39 + 16);
                  v46 = *(_OWORD *)(v39 + 32);
                  v49 = v39 + 48;
                  v47 = *(_QWORD *)(v39 + 48);
                  v48 = *(_QWORD *)(v49 + 8);
                  v277[0] = v44;
                  v277[1] = v45;
                  v277[2] = v46;
                  v278 = v47;
                  v279 = v48;
                  v280 = 0;
                  sub_1B1D4C3DC((uint64_t)v277, a1, (uint64_t)v265, v40, v41, v42, v43, a4, a5, a6, a7);
                  v50 = *(float *)(a1 + 16);
                  sub_1B1D4FC70((uint64_t)v265, (uint64_t)v267);
                  v51 = sub_1B1D4FCA8((uint64_t)v267);
                  nullsub_16(v267);
                  v224 = *v52;
                  v228 = v52[1];
                  v226 = v52[2];
                  if (v51 == 1)
                  {
                    v205 = v52[3];
                    v207 = v52[7];
                    v203 = v52[8];
                    v53 = v236;
                    v54 = *(float *)(v236 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                    v55 = SLODWORD(v238[0]);
                    v56 = DWORD1(v238[0]);
                    swift_retain();
                    if ((_DWORD)v55 == -1 && !(_DWORD)v56)
                      goto LABEL_90;
                    v57 = v55;
                    if ((v55 & 0x80000000) != 0)
                      goto LABEL_90;
                    v58 = (uint64_t *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                    if (*(_QWORD *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v55)
                      goto LABEL_90;
                    v59 = *v58;
                    v60 = *v58 + 12 * (int)v55;
                    v61 = *(__int16 *)(v60 + 4);
                    if ((_DWORD)v56 != -1 && *(_DWORD *)(v60 + 8) != (_DWORD)v56)
                      goto LABEL_90;
                    v62 = *(_QWORD *)(*(_QWORD *)(v53 + 136) + 8 * *(int *)(v59 + 12 * (int)v55) + 32);
                    v63 = *(_QWORD *)(v62 + 48);
                    v64 = *(_QWORD *)(v63 + 16);
                    if (!v64)
                      goto LABEL_90;
                    v65 = v50 * 0.5;
                    v66 = (_QWORD *)(v63 + 56);
                    while ((ValueMetadata *)*(v66 - 3) != &type metadata for EmitterDescription)
                    {
                      v66 += 5;
                      if (!--v64)
                        goto LABEL_90;
                    }
                    v80 = *(float *)(*(_QWORD *)(v62 + 128) + *v66 + 88 * v61 + 52);
                    swift_release();
                    v81 = *v33;
                    v82 = v33[1];
                    v83 = v33[2];
                    v84 = v33[3];
                    v85 = v230 + 32 * v25;
                    v86 = *(_DWORD *)(v85 + 20);
                    v87 = *(_BYTE *)(v85 + 24);
                    *(float *)&v248 = v54 * v80;
                    *((float *)&v248 + 1) = v35;
                    v250 = v203;
                    v251 = v224;
                    v252 = v228;
                    v253 = v226;
                    v254 = v205;
                    v255 = v81;
                    v256 = v82;
                    v257 = v83;
                    v258 = v84;
                    v259 = v207;
                    *(float *)&v249 = v38;
                    v260 = v86;
                    v261 = v87;
                    v262 = v34;
                    v263 = v65;
                    v88 = *(_QWORD *)a3;
                    if (*(_QWORD *)a3)
                    {
                      ObjectType = swift_getObjectType();
                      type metadata accessor for particle_obb_collider_uniforms(0);
                      sub_1B1F40E1C((uint64_t)&v248, 1, ObjectType, v90, v91, v92, v93, v94);
                    }
                    v27 = (unsigned __int8 *)(v85 + 24);
                    v28 = v88 == 0;
                    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                    v29 = swift_allocObject();
                    *(_OWORD *)(v29 + 16) = xmmword_1B226D240;
                    v30 = *v27;
                    *(_OWORD *)(v29 + 32) = xmmword_1B228FB80;
                    *(_BYTE *)(v29 + 48) = 0;
                    *(_QWORD *)(v29 + 64) = v30;
                    *(_QWORD *)(v29 + 120) = 0;
                    *(_OWORD *)(v29 + 104) = 0u;
                    *(_OWORD *)(v29 + 88) = 0u;
                    *(_OWORD *)(v29 + 72) = 0u;
                    *(_BYTE *)(v29 + 128) = 13;
                    swift_retain();
                    sub_1B1B1FC34(a3);
                    v31 = sub_1B1FE6EFC(v57 | (v56 << 32), v53, v28, v29, a3, 0xD000000000000015, 0x80000001B2339D00, 0);
                    sub_1B1B1FC88(a3);
                    if ((v31 & 1) == 0)
                      goto LABEL_90;
                  }
                  else
                  {
                    v67 = v236;
                    v68 = *(float *)(v236 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                    v69 = SLODWORD(v238[0]);
                    v70 = DWORD1(v238[0]);
                    swift_retain();
                    if ((_DWORD)v69 == -1 && !(_DWORD)v70)
                      goto LABEL_90;
                    v71 = v69;
                    if ((v69 & 0x80000000) != 0)
                      goto LABEL_90;
                    v72 = (uint64_t *)(v67 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                    if (*(_QWORD *)(v67 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v69)
                      goto LABEL_90;
                    v73 = *v72;
                    v74 = *v72 + 12 * (int)v69;
                    v75 = *(__int16 *)(v74 + 4);
                    if ((_DWORD)v70 != -1 && *(_DWORD *)(v74 + 8) != (_DWORD)v70)
                      goto LABEL_90;
                    v76 = *(_QWORD *)(*(_QWORD *)(v67 + 136) + 8 * *(int *)(v73 + 12 * (int)v69) + 32);
                    v77 = *(_QWORD *)(v76 + 48);
                    v78 = *(_QWORD *)(v77 + 16);
                    if (!v78)
                      goto LABEL_90;
                    v79 = (_QWORD *)(v77 + 56);
                    while ((ValueMetadata *)*(v79 - 3) != &type metadata for EmitterDescription)
                    {
                      v79 += 5;
                      if (!--v78)
                        goto LABEL_90;
                    }
                    v95 = *(float *)(*(_QWORD *)(v76 + 128) + *v79 + 88 * v75 + 52);
                    swift_release();
                    v96 = v230 + 32 * v25;
                    v97 = *(_BYTE *)(v96 + 24);
                    *(float *)&v248 = v68 * v95;
                    *((float *)&v248 + 1) = v35;
                    *(float *)&v249 = v38;
                    v250 = v224;
                    v251 = v226;
                    v252 = v228;
                    LOBYTE(v253) = v97;
                    *((float *)&v253 + 1) = v34;
                    v98 = *(_QWORD *)a3;
                    if (*(_QWORD *)a3)
                    {
                      v99 = swift_getObjectType();
                      type metadata accessor for particle_aabb_collider_uniforms(0);
                      sub_1B1F40E1C((uint64_t)&v248, 1, v99, v100, v101, v102, v103, v104);
                    }
                    v105 = (unsigned __int8 *)(v96 + 24);
                    v106 = v98 == 0;
                    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                    v107 = swift_allocObject();
                    *(_OWORD *)(v107 + 16) = xmmword_1B226D240;
                    v108 = *v105;
                    *(_OWORD *)(v107 + 32) = xmmword_1B228FB80;
                    *(_BYTE *)(v107 + 48) = 0;
                    *(_QWORD *)(v107 + 64) = v108;
                    *(_QWORD *)(v107 + 120) = 0;
                    *(_OWORD *)(v107 + 104) = 0u;
                    *(_OWORD *)(v107 + 88) = 0u;
                    *(_OWORD *)(v107 + 72) = 0u;
                    *(_BYTE *)(v107 + 128) = 13;
                    swift_retain();
                    sub_1B1B1FC34(a3);
                    v109 = sub_1B1FE6EFC(v71 | (v70 << 32), v67, v106, v107, a3, 0xD000000000000016, 0x80000001B2339D20, 0);
                    sub_1B1B1FC88(a3);
                    if ((v109 & 1) == 0)
                      goto LABEL_90;
                  }
                  v24 = v213;
                  swift_release();
                  swift_setDeallocating();
                  swift_arrayDestroy();
                  swift_deallocClassInstance();
                }
                ++v25;
              }
              while (v25 != v24);
            }
          }
          else if ((_DWORD)v17 != (_DWORD)v222)
          {
            v110 = *(float *)(a1 + 12);
            v210 = *(float *)(a1 + 8);
            v212 = *(float *)(a1 + 4);
            v214 = *(_DWORD *)(a1 + 20);
            do
            {
              v116 = v230 + 32 * v17;
              if ((*(_DWORD *)(v116 + 16) & v214) != 0)
              {
                v117 = (float32x4_t *)(v221 + (v17 << 6));
                v118 = fminf(fmaxf(v212 + *(float *)(v116 + 4), 0.0), 1.0);
                v119 = fminf(fmaxf(v210 + *(float *)(v116 + 8), 0.0), 1.0);
                v120 = *(_OWORD *)v116;
                v121 = *(_OWORD *)(v116 + 16);
                v122 = 1.0 - fminf(fmaxf(v110 + *(float *)(v116 + 12), 0.0), 1.0);
                v123 = v220 + (v17 << 6);
                v242 = v120;
                v243 = v121;
                v124 = *v117;
                v125 = v117[1];
                v126 = v117[2];
                v127 = v117[3];
                v128 = *(_OWORD *)v123;
                v129 = *(_OWORD *)(v123 + 16);
                v130 = *(_OWORD *)(v123 + 32);
                v133 = v123 + 48;
                v131 = *(_QWORD *)(v123 + 48);
                v132 = *(_QWORD *)(v133 + 8);
                v281[0] = v128;
                v281[1] = v129;
                v281[2] = v130;
                v282 = v131;
                v283 = v132;
                v284 = 0;
                sub_1B1D4C3DC((uint64_t)v281, a1, (uint64_t)v266, v124, v125, v126, v127, a4, a5, a6, a7);
                v134 = *(float *)(a1 + 16);
                sub_1B1D4FC70((uint64_t)v266, (uint64_t)v268);
                v135 = sub_1B1D4FCA8((uint64_t)v268);
                nullsub_16(v268);
                v225 = *v136;
                v229 = v136[1];
                v227 = v136[2];
                if (v135 == 1)
                {
                  v206 = v136[3];
                  v208 = v136[7];
                  v204 = v136[8];
                  v137 = v236;
                  v138 = *(float *)(v236 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                  v139 = SLODWORD(v238[0]);
                  v140 = DWORD1(v238[0]);
                  swift_retain();
                  if ((_DWORD)v139 == -1 && !(_DWORD)v140)
                    goto LABEL_90;
                  v141 = v139;
                  if ((v139 & 0x80000000) != 0)
                    goto LABEL_90;
                  v142 = (uint64_t *)(v137 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                  if (*(_QWORD *)(v137 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v139)
                    goto LABEL_90;
                  v143 = *v142;
                  v144 = *v142 + 12 * (int)v139;
                  v145 = *(__int16 *)(v144 + 4);
                  if ((_DWORD)v140 != -1 && *(_DWORD *)(v144 + 8) != (_DWORD)v140)
                    goto LABEL_90;
                  v146 = *(_QWORD *)(*(_QWORD *)(v137 + 136) + 8 * *(int *)(v143 + 12 * (int)v139) + 32);
                  v147 = *(_QWORD *)(v146 + 48);
                  v148 = *(_QWORD *)(v147 + 16);
                  if (!v148)
                    goto LABEL_90;
                  v149 = v134 * 0.5;
                  v150 = (_QWORD *)(v147 + 56);
                  while ((ValueMetadata *)*(v150 - 3) != &type metadata for EmitterDescription)
                  {
                    v150 += 5;
                    if (!--v148)
                      goto LABEL_90;
                  }
                  v164 = *(float *)(*(_QWORD *)(v146 + 128) + *v150 + 88 * v145 + 52);
                  swift_release();
                  v165 = *v117;
                  v166 = v117[1];
                  v167 = v117[2];
                  v168 = v117[3];
                  v169 = v230 + 32 * v17;
                  v170 = *(_DWORD *)(v169 + 20);
                  v171 = *(_BYTE *)(v169 + 24);
                  *(float *)&v248 = v138 * v164;
                  *((float *)&v248 + 1) = v119;
                  v250 = v204;
                  v251 = v225;
                  v252 = v229;
                  v253 = v227;
                  v254 = v206;
                  v255 = v165;
                  v256 = v166;
                  v257 = v167;
                  v258 = v168;
                  v259 = v208;
                  *(float *)&v249 = v122;
                  v260 = v170;
                  v261 = v171;
                  v262 = v118;
                  v263 = v149;
                  v172 = *(_QWORD *)a3;
                  if (*(_QWORD *)a3)
                  {
                    v173 = swift_getObjectType();
                    type metadata accessor for particle_obb_collider_uniforms(0);
                    sub_1B1F40E1C((uint64_t)&v248, 1, v173, v174, v175, v176, v177, v178);
                  }
                  v111 = (unsigned __int8 *)(v169 + 24);
                  v112 = v172 == 0;
                  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                  v113 = swift_allocObject();
                  *(_OWORD *)(v113 + 16) = xmmword_1B226D240;
                  v114 = *v111;
                  *(_OWORD *)(v113 + 32) = xmmword_1B228FB80;
                  *(_BYTE *)(v113 + 48) = 0;
                  *(_QWORD *)(v113 + 64) = v114;
                  *(_QWORD *)(v113 + 120) = 0;
                  *(_OWORD *)(v113 + 104) = 0u;
                  *(_OWORD *)(v113 + 88) = 0u;
                  *(_OWORD *)(v113 + 72) = 0u;
                  *(_BYTE *)(v113 + 128) = 13;
                  swift_retain();
                  sub_1B1B1FC34(a3);
                  v115 = sub_1B1FE6EFC(v141 | (v140 << 32), v137, v112, v113, a3, 0xD000000000000015, 0x80000001B2339D00, 0);
                  sub_1B1B1FC88(a3);
                  if ((v115 & 1) == 0)
                    goto LABEL_90;
                }
                else
                {
                  v151 = v236;
                  v152 = *(float *)(v236 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                  v153 = SLODWORD(v238[0]);
                  v154 = DWORD1(v238[0]);
                  swift_retain();
                  if ((_DWORD)v153 == -1 && !(_DWORD)v154)
                    goto LABEL_90;
                  v155 = v153;
                  if ((v153 & 0x80000000) != 0)
                    goto LABEL_90;
                  v156 = (uint64_t *)(v151 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                  if (*(_QWORD *)(v151 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v153)
                    goto LABEL_90;
                  v157 = *v156;
                  v158 = *v156 + 12 * (int)v153;
                  v159 = *(__int16 *)(v158 + 4);
                  if ((_DWORD)v154 != -1 && *(_DWORD *)(v158 + 8) != (_DWORD)v154)
                    goto LABEL_90;
                  v160 = *(_QWORD *)(*(_QWORD *)(v151 + 136) + 8 * *(int *)(v157 + 12 * (int)v153) + 32);
                  v161 = *(_QWORD *)(v160 + 48);
                  v162 = *(_QWORD *)(v161 + 16);
                  if (!v162)
                    goto LABEL_90;
                  v163 = (_QWORD *)(v161 + 56);
                  while ((ValueMetadata *)*(v163 - 3) != &type metadata for EmitterDescription)
                  {
                    v163 += 5;
                    if (!--v162)
                      goto LABEL_90;
                  }
                  v179 = *(float *)(*(_QWORD *)(v160 + 128) + *v163 + 88 * v159 + 52);
                  swift_release();
                  v180 = v230 + 32 * v17;
                  v181 = *(_BYTE *)(v180 + 24);
                  *(float *)&v248 = v152 * v179;
                  *((float *)&v248 + 1) = v119;
                  *(float *)&v249 = v122;
                  v250 = v225;
                  v251 = v227;
                  v252 = v229;
                  LOBYTE(v253) = v181;
                  *((float *)&v253 + 1) = v118;
                  v182 = *(_QWORD *)a3;
                  if (*(_QWORD *)a3)
                  {
                    v183 = swift_getObjectType();
                    type metadata accessor for particle_aabb_collider_uniforms(0);
                    sub_1B1F40E1C((uint64_t)&v248, 1, v183, v184, v185, v186, v187, v188);
                  }
                  v189 = (unsigned __int8 *)(v180 + 24);
                  v190 = v182 == 0;
                  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                  v191 = swift_allocObject();
                  *(_OWORD *)(v191 + 16) = xmmword_1B226D240;
                  v192 = *v189;
                  *(_OWORD *)(v191 + 32) = xmmword_1B228FB80;
                  *(_BYTE *)(v191 + 48) = 0;
                  *(_QWORD *)(v191 + 64) = v192;
                  *(_QWORD *)(v191 + 120) = 0;
                  *(_OWORD *)(v191 + 104) = 0u;
                  *(_OWORD *)(v191 + 88) = 0u;
                  *(_OWORD *)(v191 + 72) = 0u;
                  *(_BYTE *)(v191 + 128) = 13;
                  swift_retain();
                  sub_1B1B1FC34(a3);
                  v193 = sub_1B1FE6EFC(v155 | (v154 << 32), v151, v190, v191, a3, 0xD000000000000016, 0x80000001B2339D20, 0);
                  sub_1B1B1FC88(a3);
                  if ((v193 & 1) == 0)
                  {
LABEL_90:
                    v248 = 0;
                    v249 = 0xE000000000000000;
                    sub_1B2229430();
                    sub_1B2228890();
                    sub_1B1BC3C70();
                    sub_1B2228890();
                    swift_bridgeObjectRelease();
                    sub_1B2228890();
                    sub_1B2228890();
                    sub_1B2228890();
                    sub_1B2229688();
                    __break(1u);
                  }
                }
                swift_release();
                swift_setDeallocating();
                swift_arrayDestroy();
                swift_deallocClassInstance();
              }
              ++v17;
            }
            while (v17 != v222);
          }
          v234[0] = v231;
          v234[1] = v232;
          v235 = v233;
          sub_1B1F05D48(v201, (unsigned __int16 **)v234, (uint64_t)v276);
          sub_1B1F03804((char *)v202);
          ecs_stack_allocator_pop_snapshot(v200);
          if ((v199 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v202 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v202 + 376));
          }
          swift_release();
          v15 = v198 + 1;
        }
        while (v198 + 1 != v197);
        sub_1B19ED748(v264);
      }
    }
    return sub_1B19ED748(v264);
  }
  return result;
}

uint64_t sub_1B1D4EF60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  int v24;

  sub_1B1D4F120(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v19 - v9;
  v21 = xmmword_1B228FB70;
  v22 = 255;
  v23 = 0;
  v24 = 0;
  sub_1B1C36F38(a1, 0);
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v20 = 10;
  v23 = sub_1B22297D8() & 1;
  v12 = a1[3];
  v13 = a1[4];
  sub_1B19FA070(a1, v12);
  if (sub_1B2067BAC(1042, v12, v13))
  {
    v20 = 11;
    sub_1B22297F0();
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v15 = HIDWORD(v22);
  }
  v16 = v22;
  v17 = v23;
  v18 = v24;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_OWORD *)a2 = v21;
  *(_DWORD *)(a2 + 16) = v16;
  *(_DWORD *)(a2 + 20) = v15;
  *(_BYTE *)(a2 + 24) = v17;
  *(_DWORD *)(a2 + 28) = v18;
  return result;
}

void sub_1B1D4F120(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1C389CC();
    v7 = a3(a1, &type metadata for ParticleCollidableCodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t *sub_1B1D4F17C(uint64_t *result, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  int v7;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  int v22;
  char v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  BOOL v36;
  int v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t i;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  int v75;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  __int128 v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  unsigned int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  os_unfair_lock_s *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  void (*v113)(uint64_t);
  uint64_t v114;
  BOOL v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  uint64_t v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  int v141;
  _QWORD *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __n128 v153;
  uint64_t v154;
  float32x4_t v155;
  uint64_t v156;
  float32x4_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int16 *v178;
  unsigned __int16 *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  _QWORD *v185;
  _BYTE v186[160];
  _OWORD v187[2];
  uint64_t v188;
  _QWORD v189[7];
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _BYTE v194[160];
  float32x4_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  float v205;
  int v206;
  __int128 v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _OWORD v220[2];
  uint64_t v221;
  _OWORD v222[3];
  uint64_t v223;
  uint64_t v224;
  char v225;
  _DWORD v226[12];
  char v227;
  float v228;

  v175 = (uint64_t)result;
  v6 = *((_DWORD *)result + 4);
  v7 = *(_DWORD *)(a4 + 84);
  if ((v7 & v6) == 0)
    return result;
  v10 = *((float *)result + 7);
  v11 = a5;
  v13 = *(float *)(a4 + 76);
  v12 = *(float *)(a4 + 80);
  if ((a5 & 0xFE00000000) != 0)
    v11 = 0;
  v173 = v11;
  v15 = *((float *)result + 2);
  v14 = *((float *)result + 3);
  v17 = *(float *)(a4 + 68);
  v16 = *(float *)(a4 + 72);
  v19 = *(float *)result;
  v18 = *((float *)result + 1);
  v20 = *(float *)(a4 + 64);
  *(_QWORD *)&v204 = __PAIR64__(COERCE_UNSIGNED_INT(fminf(fmaxf(v18 + v17, 0.0), 1.0)), COERCE_UNSIGNED_INT(fminf(fmaxf(*(float *)result + v20, 0.0), 1.0)));
  DWORD2(v204) = fminf(fmaxf(v15 + v16, 0.0), 1.0);
  *((float *)&v204 + 3) = 1.0 - fminf(fmaxf(v14 + v13, 0.0), 1.0);
  v205 = v10 + v12;
  v206 = v7 & v6;
  v21 = *(float *)(a4 + 160);
  v22 = *((_DWORD *)result + 5);
  v23 = *((_BYTE *)result + 24);
  *(float *)&v226[6] = v19;
  *(float *)&v226[7] = v18;
  *(float *)&v226[8] = v15;
  *(float *)&v226[9] = v14;
  v226[10] = v6;
  v226[11] = v22;
  v227 = v23;
  v228 = v10;
  v24 = *a2;
  v25 = a2[1];
  v26 = a2[2];
  v27 = a2[3];
  v28 = *(_OWORD *)(a3 + 16);
  v29 = *(_OWORD *)(a3 + 32);
  v31 = *(_QWORD *)(a3 + 48);
  v30 = *(_QWORD *)(a3 + 56);
  v222[0] = *(_OWORD *)a3;
  v222[1] = v28;
  v222[2] = v29;
  v223 = v31;
  v224 = v30;
  v225 = 0;
  v32 = *(float32x4_t *)(a4 + 96);
  v33 = *(float32x4_t *)(a4 + 112);
  v34 = *(float32x4_t *)(a4 + 128);
  v35 = *(float32x4_t *)(a4 + 144);
  *(float *)v226 = v20;
  *(float *)&v226[1] = v17;
  *(float *)&v226[2] = v16;
  *(float *)&v226[3] = v13;
  *(float *)&v226[4] = v12;
  v226[5] = v7;
  if ((_DWORD)a5)
    v36 = (a5 & 0xFE00000000) != 0;
  else
    v36 = 1;
  v172 = v36;
  sub_1B1D4C3DC((uint64_t)v222, (uint64_t)v226, (uint64_t)v186, v24, v25, v26, v27, v32, v33, v34, v35);
  sub_1B1D4FC70((uint64_t)v186, (uint64_t)v194);
  v37 = sub_1B1D4FCA8((uint64_t)v194);
  nullsub_16(v194);
  v174 = a4;
  if (v37 != 1)
  {
    v155 = *((float32x4_t *)v38 + 1);
    v157 = *(float32x4_t *)v38;
    v153 = *((__n128 *)v38 + 2);
    v92 = *(_OWORD *)(a4 + 40);
    v187[0] = *(_OWORD *)(a4 + 24);
    v187[1] = v92;
    v188 = *(_QWORD *)(a4 + 56);
    sub_1B1E8FCE4(a6, (uint64_t)v187, 0x200000000, v189);
    result = (uint64_t *)sub_1B1A18378((uint64_t)v189, (uint64_t)&v207, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v179 = (unsigned __int16 *)v207;
    if (!(_QWORD)v207)
      return result;
    v151 = v216;
    if (v216 < 1 || (v149 = v213) == 0)
    {
      v140 = v189;
      return sub_1B19ED748(v140);
    }
    v93 = 0;
    v147 = v211;
    v94 = v215;
    v95 = *(unsigned __int8 *)(v214 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v96 = v215[4];
    v142 = v215 + 8;
    v177 = v207 + 41;
    v141 = v95;
    v185 = v215;
    v144 = v96;
    v145 = v214;
    while (1)
    {
      v165 = v93;
      v97 = (unsigned int *)(v147 + 48 * v93);
      v98 = *v97;
      v99 = v97[1];
      v100 = v97[2];
      v101 = *((_QWORD *)v97 + 2);
      v102 = *((_QWORD *)v97 + 3);
      v103 = *((_QWORD *)v97 + 5);
      v182 = *((_QWORD *)v97 + 4);
      if (v95)
      {
        v104 = *(os_unfair_lock_s **)(v103 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v104);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v103 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v96);
      v159 = v94[7];
      v161 = v94[6];
      v169 = v94[9];
      v171 = v94[8];
      v167 = v94[10];
      v105 = v94[4];
      v106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v103 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v185[6] = ecs_stack_allocator_allocate(v105, 48 * v106, 8);
      v185[7] = v106;
      v94 = v185;
      v142[1] = 0;
      v142[2] = 0;
      *v142 = 0;
      swift_release();
      v195.i64[0] = v145;
      v195.i64[1] = v103;
      v163 = v103;
      *(_QWORD *)&v196 = v185;
      *((_QWORD *)&v196 + 1) = v100;
      *(_QWORD *)&v197 = (v99 - v98 + v100);
      *((_QWORD *)&v197 + 1) = v151;
      *(_QWORD *)&v198 = v98;
      *((_QWORD *)&v198 + 1) = v99;
      v199 = 0uLL;
      LOBYTE(v200) = 1;
      *((_QWORD *)&v200 + 1) = v101;
      *(_QWORD *)&v201 = v102;
      LOBYTE(v220[0]) = v172;
      *((_QWORD *)&v201 + 1) = v182;
      sub_1B1D4D110((__int128 *)&v195, &v204, v174, v173 | ((unint64_t)v172 << 32), v175, v157, v155, v153, v21);
      v107 = v185[6];
      v183 = v185[8];
      if (v183)
        break;
      v133 = v185[7];
      v134 = (_QWORD *)v185[4];
      v136 = v103;
      v135 = v165;
      v95 = v141;
      v138 = v159;
      v137 = v161;
LABEL_100:
      ecs_stack_allocator_deallocate(v134, v107, 48 * v133);
      v94[6] = v137;
      v94[7] = v138;
      v94[8] = v171;
      v94[9] = v169;
      v94[10] = v167;
      sub_1B1F03804((char *)v136);
      v96 = v144;
      ecs_stack_allocator_pop_snapshot(v144);
      if ((v95 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v136 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v136 + 376));
      }
      swift_release();
      v93 = v135 + 1;
      if (v93 == v149)
      {
        v140 = v189;
        return sub_1B19ED748(v140);
      }
    }
    v108 = 0;
    while (1)
    {
      v110 = v107;
      v111 = (uint64_t *)(v107 + 48 * v108);
      v112 = *v111;
      v113 = (void (*)(uint64_t))v111[4];
      v114 = v94[9];
      if (v114)
        v115 = v112 == v114;
      else
        v115 = 0;
      if (!v115 && v179[11])
      {
        v116 = v179[9];
        v117 = (_QWORD *)(v177 + v179[8]);
        v118 = v111[2];
        v119 = v117;
        v120 = v116 >> 4;
        v121 = v177;
        if (v116 < 0x10)
          goto LABEL_80;
        while (*v119 != v112)
        {
          ++v121;
          v119 += 2;
          if (!--v120)
            goto LABEL_80;
        }
        v122 = *(unsigned __int8 *)(v121 + v179[10]);
        v74 = v122 > 5;
        v123 = (1 << v122) & 0x23;
        if (!v74 && v123 != 0)
        {
LABEL_80:
          if (swift_conformsToProtocol2())
            v125 = v118;
          else
            v125 = 0;
          if (!v125)
            goto LABEL_66;
          if (v116 >= 0x10)
          {
            v126 = v117;
            v127 = v116 >> 4;
            v128 = v177;
            while (*v126 != v125)
            {
              ++v128;
              v126 += 2;
              if (!--v127)
                goto LABEL_93;
            }
            v129 = *(unsigned __int8 *)(v128 + v179[10]);
            v74 = v129 > 5;
            v130 = (1 << v129) & 0x23;
            if (!v74 && v130 != 0)
            {
LABEL_93:
              v132 = 16 * (v116 >> 4);
              while (*v117 != v125)
              {
                v117 += 2;
                v132 -= 16;
                if (!v132)
                  goto LABEL_65;
              }
              goto LABEL_66;
            }
          }
        }
      }
LABEL_65:
      v109 = swift_retain();
      v113(v109);
      swift_release();
LABEL_66:
      ++v108;
      v94 = v185;
      v107 = v110;
      if (v108 == v183)
      {
        v133 = v185[7];
        v107 = v185[6];
        v134 = (_QWORD *)v185[4];
        v136 = v163;
        v135 = v165;
        v95 = v141;
        v138 = v159;
        v137 = v161;
        if ((uint64_t)v185[8] >= 1)
        {
          v139 = v185[6];
          swift_arrayDestroy();
          v107 = v139;
        }
        goto LABEL_100;
      }
    }
  }
  v39 = v38[7];
  v201 = v38[6];
  v202 = v39;
  v203 = v38[8];
  v40 = v38[3];
  v197 = v38[2];
  v198 = v40;
  v41 = v38[5];
  v199 = v38[4];
  v200 = v41;
  v42 = v38[1];
  v195 = *(float32x4_t *)v38;
  v196 = v42;
  v43 = *(_OWORD *)(a4 + 40);
  v220[0] = *(_OWORD *)(a4 + 24);
  v220[1] = v43;
  v221 = *(_QWORD *)(a4 + 56);
  sub_1B1E8FCE4(a6, (uint64_t)v220, 0x200000000, v187);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v187, (uint64_t)v189, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v178 = (unsigned __int16 *)v189[0];
  if (!v189[0])
    return result;
  v156 = v193;
  if (v193 < 1 || (v154 = v190) == 0)
  {
    v140 = (uint64_t *)v187;
    return sub_1B19ED748(v140);
  }
  v44 = 0;
  v152 = v189[5];
  v45 = v192;
  v46 = *(unsigned __int8 *)(v191 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v47 = v192[4];
  v146 = v192 + 8;
  v176 = v189[0] + 41;
  v143 = v46;
  v184 = v192;
  v148 = v47;
  v150 = v191;
  while (2)
  {
    v164 = v44;
    v48 = (unsigned int *)(v152 + 48 * v44);
    v49 = *v48;
    v50 = v48[1];
    v51 = v48[2];
    v52 = *((_QWORD *)v48 + 2);
    v53 = *((_QWORD *)v48 + 3);
    v54 = *((_QWORD *)v48 + 5);
    v180 = *((_QWORD *)v48 + 4);
    if (v46)
    {
      v55 = *(os_unfair_lock_s **)(v54 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v55);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v54 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v47);
    v158 = v45[7];
    v160 = v45[6];
    v168 = v45[9];
    v170 = v45[8];
    v166 = v45[10];
    v56 = v45[4];
    v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v184[6] = ecs_stack_allocator_allocate(v56, 48 * v57, 8);
    v184[7] = v57;
    v45 = v184;
    v146[1] = 0;
    v146[2] = 0;
    *v146 = 0;
    swift_release();
    *(_QWORD *)&v207 = v150;
    v162 = v54;
    *((_QWORD *)&v207 + 1) = v54;
    v208 = v184;
    v209 = v51;
    v210 = (v50 - v49 + v51);
    v211 = v156;
    v212 = v49;
    v213 = v50;
    v214 = 0;
    v215 = 0;
    LOBYTE(v216) = 1;
    v217 = v52;
    v218 = v53;
    v219 = v180;
    sub_1B1D4D4E8(&v207, &v204, (uint64_t)&v195, v174, v173 | ((unint64_t)v172 << 32), v175, v21);
    v58 = v184[6];
    v181 = v184[8];
    if (!v181)
    {
      v85 = v184[7];
      v86 = (_QWORD *)v184[4];
      v88 = v54;
      v87 = v164;
      v46 = v143;
      v90 = v158;
      v89 = v160;
      goto LABEL_53;
    }
    for (i = 0; i != v181; ++i)
    {
      v61 = v58;
      v62 = (uint64_t *)(v58 + 48 * i);
      v63 = *v62;
      v64 = (void (*)(uint64_t))v62[4];
      v65 = v45[9];
      if (v65)
        v66 = v63 == v65;
      else
        v66 = 0;
      if (v66 || !v178[11])
        goto LABEL_18;
      v67 = v178[9];
      v68 = (_QWORD *)(v176 + v178[8]);
      v69 = v62[2];
      v70 = v68;
      v71 = v67 >> 4;
      v72 = v176;
      if (v67 >= 0x10)
      {
        while (*v70 != v63)
        {
          ++v72;
          v70 += 2;
          if (!--v71)
            goto LABEL_33;
        }
        v73 = *(unsigned __int8 *)(v72 + v178[10]);
        v74 = v73 > 5;
        v75 = (1 << v73) & 0x23;
        if (v74 || v75 == 0)
        {
LABEL_18:
          v60 = swift_retain();
          v64(v60);
          swift_release();
          goto LABEL_19;
        }
      }
LABEL_33:
      if (swift_conformsToProtocol2())
        v77 = v69;
      else
        v77 = 0;
      if (v77)
      {
        if (v67 < 0x10)
          goto LABEL_18;
        v78 = v68;
        v79 = v67 >> 4;
        v80 = v176;
        while (*v78 != v77)
        {
          ++v80;
          v78 += 2;
          if (!--v79)
            goto LABEL_46;
        }
        v81 = *(unsigned __int8 *)(v80 + v178[10]);
        v74 = v81 > 5;
        v82 = (1 << v81) & 0x23;
        if (v74 || v82 == 0)
          goto LABEL_18;
LABEL_46:
        v84 = 16 * (v67 >> 4);
        while (*v68 != v77)
        {
          v68 += 2;
          v84 -= 16;
          if (!v84)
            goto LABEL_18;
        }
      }
LABEL_19:
      v45 = v184;
      v58 = v61;
    }
    v85 = v184[7];
    v58 = v184[6];
    v86 = (_QWORD *)v184[4];
    v88 = v162;
    v87 = v164;
    v46 = v143;
    v90 = v158;
    v89 = v160;
    if ((uint64_t)v184[8] >= 1)
    {
      v91 = v184[6];
      swift_arrayDestroy();
      v58 = v91;
    }
LABEL_53:
    ecs_stack_allocator_deallocate(v86, v58, 48 * v85);
    v45[6] = v89;
    v45[7] = v90;
    v45[8] = v170;
    v45[9] = v168;
    v45[10] = v166;
    sub_1B1F03804((char *)v88);
    v47 = v148;
    ecs_stack_allocator_pop_snapshot(v148);
    if ((v46 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v88 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v88 + 376));
    }
    swift_release();
    v44 = v87 + 1;
    if (v44 != v154)
      continue;
    break;
  }
  v140 = (uint64_t *)v187;
  return sub_1B19ED748(v140);
}

uint64_t sub_1B1D4FC70(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  v6 = *(_OWORD *)(a1 + 96);
  v7 = *(_OWORD *)(a1 + 112);
  v8 = *(_OWORD *)(a1 + 128);
  *(_BYTE *)(a2 + 144) = *(_BYTE *)(a1 + 144);
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 96) = v6;
  return a2;
}

uint64_t sub_1B1D4FCA8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

uint64_t sub_1B1D4FCB0(uint64_t result)
{
  *(_BYTE *)(result + 144) = 1;
  return result;
}

uint64_t sub_1B1D4FCBC(uint64_t result)
{
  *(_BYTE *)(result + 144) = 0;
  return result;
}

__n128 initializeWithCopy for ParticleBoxCollider.Features(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleBoxCollider.Features(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 145))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 144);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleBoxCollider.Features(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 145) = 0;
    if (a2)
      *(_BYTE *)(result + 144) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1D4FDAC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 144) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleBoxCollider.Features()
{
  return &type metadata for ParticleBoxCollider.Features;
}

__n128 initializeWithCopy for ParticleBoxCollider(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleBoxCollider()
{
  return &type metadata for ParticleBoxCollider;
}

uint64_t getEnumTagSinglePayload for ParticleBoxCollider.OBBFeature(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ParticleBoxCollider.OBBFeature(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 144) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleBoxCollider.OBBFeature()
{
  return &type metadata for ParticleBoxCollider.OBBFeature;
}

ValueMetadata *type metadata accessor for ParticleBoxCollider.AABBFeature()
{
  return &type metadata for ParticleBoxCollider.AABBFeature;
}

double sub_1B1D4FE74(uint64_t a1)
{
  return sub_1B1C39120(a1);
}

uint64_t sub_1B1D4FE88@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[10];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6[0] = 0xD000000000000011;
  v6[1] = 0x80000001B2339D40;
  v6[2] = 0;
  v6[3] = 0;
  if ((a1 & 0x4800) == 0x4000)
    v3 = 0xD00000000000001ALL;
  else
    v3 = 0xD000000000000011;
  v6[4] = MEMORY[0x1E0DEE9D8];
  v6[5] = v3;
  v4 = 0x80000001B2339D60;
  if ((a1 & 0x4800) == 0x4000)
    v4 = 0x80000001B2339D80;
  v6[6] = v4;
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = MEMORY[0x1E0DEE9D8];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  nullsub_16(v6);
  return sub_1B19F66A0((uint64_t)v6, a2, &qword_1ED4B8CF8);
}

void *sub_1B1D4FF4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  _BYTE v19[80];
  _OWORD v20[4];
  char v21;
  _OWORD v22[4];
  float v23;
  int v24;

  v7 = (_QWORD *)a3[1];
  swift_retain();
  sub_1B1D15764(v7, (uint64_t)v19);
  swift_release();
  sub_1B19F66A0((uint64_t)v19, (uint64_t)v20, qword_1ED4B8BB0);
  if ((v21 & 1) != 0)
  {
    v8 = xmmword_1B2244E20;
    v9 = xmmword_1B2244D90;
    v10 = xmmword_1B2244DD0;
    v11 = xmmword_1B2244DB0;
  }
  else
  {
    v11 = v20[0];
    v10 = v20[1];
    v9 = v20[2];
    v8 = v20[3];
  }
  v12 = *(_DWORD *)(v3 + 24);
  if (v12 - 11 > 0xF4)
  {
    v15 = *(float *)(v3 + 16);
    if (v15 > -1.0)
      v16 = *(float *)(v3 + 16);
    else
      v16 = -1.0;
    if (v15 >= 0.0)
      v13 = v16;
    else
      v13 = -1.0;
  }
  else
  {
    v13 = 1.0 / (float)v12;
    v14 = *(float *)(v3 + 16);
    if (v14 >= 0.0 && v14 > v13)
      v13 = *(float *)(v3 + 16);
  }
  v17 = *(_DWORD *)(v3 + 32);
  v22[0] = v11;
  v22[1] = v10;
  v22[2] = v9;
  v22[3] = v8;
  v23 = v13;
  v24 = v17;
  return sub_1B1D24C14(v22, a1, a2, a3, v3);
}

uint64_t sub_1B1D50078()
{
  uint64_t v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = sub_1B20C3C0C(4);
  *(_QWORD *)(v0 + 88) = sub_1B1D4FE88;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

void *sub_1B1D500CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1B1D4FF4C(a1, a2, a3);
}

double sub_1B1D50104@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  int v7;

  *(float *)&result = sub_1B1D50204(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B1D50148(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t result;
  _OWORD v12[2];
  int v13;

  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v12 - v8;
  v10 = *(_OWORD *)(v1 + 16);
  v12[0] = *(_OWORD *)v1;
  v12[1] = v10;
  v13 = *(_DWORD *)(v1 + 32);
  result = sub_1B1B646A0(a1, (uint64_t)v12 - v8);
  if (!v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return result;
}

float sub_1B1D50204@<S0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  float result;
  int v12;
  char v13;
  char v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  float v25;
  char v26;
  int v27;
  uint64_t v28;

  sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v21 - v9;
  v22 = 0xFFFFFFFFLL;
  v23 = 0;
  v24 = 1;
  v25 = -1.0;
  v26 = 0;
  v27 = 256;
  v28 = 16843008;
  sub_1B1B658AC(a1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (!v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v12 = v23;
    v13 = v24;
    result = v25;
    v14 = v26;
    v15 = v27;
    v16 = v28;
    v17 = BYTE1(v28);
    v18 = BYTE2(v28);
    v19 = BYTE3(v28);
    v20 = HIDWORD(v28);
    *(_QWORD *)a2 = v22;
    *(_DWORD *)(a2 + 8) = v12;
    *(_BYTE *)(a2 + 12) = v13;
    *(float *)(a2 + 16) = result;
    *(_BYTE *)(a2 + 20) = v14;
    *(_DWORD *)(a2 + 24) = v15;
    *(_BYTE *)(a2 + 28) = v16;
    *(_BYTE *)(a2 + 29) = v17;
    *(_BYTE *)(a2 + 30) = v18;
    *(_BYTE *)(a2 + 31) = v19;
    *(_DWORD *)(a2 + 32) = v20;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleBoxRenderer()
{
  return &type metadata for ParticleBoxRenderer;
}

uint64_t sub_1B1D50364(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  uint64_t *v14;
  uint64_t v15;

  v6 = a1;
  v15 = 0;
  if (qword_1EEF572D0 != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1, a2);
  v12[2] = a2;
  v13 = a3 & 1;
  v14 = &v15;
  sub_1B1C5A714((uint64_t)sub_1B1D52D14, (uint64_t)v12, v7, v8, v9, MEMORY[0x1E0DEE9D8]);
  if (!v3)
  {
    v10 = sub_1B1C6A11C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v6 + 24) = v10;
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t sub_1B1D50480()
{
  return 0x65536D6F646E6152;
}

double sub_1B1D5049C@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;

  sub_1B1BCF75C((unint64_t)&unk_1E6380540, v4);
  swift_arrayDestroy();
  v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

_QWORD *sub_1B1D504F8(_QWORD *a1)
{
  *(_QWORD *)(swift_allocObject() + OBJC_IVAR____TtC3VFX14RandomSeedNode_entity) = *(_QWORD *)((char *)a1
                                                                                             + OBJC_IVAR____TtC3VFX14RandomSeedNode_entity);
  return sub_1B1BCE388(a1);
}

void sub_1B1D50540()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1D5056C()
{
  return type metadata accessor for RandomSeedNode(0);
}

uint64_t type metadata accessor for RandomSeedNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5DFA0);
}

uint64_t sub_1B1D50588()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1D505C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8))(v2 + OBJC_IVAR____TtC3VFX14RandomSeedNode_entity, 0, ObjectType, a2);
}

uint64_t sub_1B1D50618()
{
  return sub_1B1D52AE4();
}

uint64_t sub_1B1D50638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B1C27668(0, &qword_1ED4BAD88);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B226D240;
  v2 = OBJC_IVAR____TtC3VFX14RandomSeedNode_entity;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v0 + v2);
  *(_QWORD *)(v1 + 32) = v3 | 0xC000000000000000;
  *(_BYTE *)(v1 + 40) = 3;
  *(_QWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 56) = 1;
  return v1;
}

uint64_t sub_1B1D506D0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;

  if (a1 == 0x8000000000000050)
    return 0x646E61725F786676;
  v1 = 0xD000000000000013;
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B2286450;
  sub_1B1D76C18(v2 | 0x1000000000000000);
  v4 = v3;
  swift_release();
  if ((v4 & 1) != 0)
    return v1;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B22847D0;
  sub_1B1D76C18(v5 | 0x1000000000000000);
  v7 = v6;
  swift_release();
  if ((v7 & 1) != 0)
    return v1;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B22847C0;
  sub_1B1D76C18(v8 | 0x1000000000000000);
  v10 = v9;
  swift_release();
  if ((v10 & 1) != 0)
    return v1;
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1D50870()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1D508B8()
{
  return type metadata accessor for RandomNode(0);
}

uint64_t type metadata accessor for RandomNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5DFB0);
}

void sub_1B1D508D4()
{
  sub_1B2229688();
  __break(1u);
}

unint64_t sub_1B1D5091C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x8000000000000038;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  sub_1B1C27668(0, (unint64_t *)&unk_1EEF5C7D0);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 64) = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  *(_OWORD *)(v5 + 32) = xmmword_1B22847F0;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = swift_allocObject();
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  *(_QWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  result = sub_1B1B632F0(v8);
  *a1 = v3;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1E63850F8;
  a1[3] = (uint64_t)&unk_1E63850C8;
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v5;
  return result;
}

_QWORD *sub_1B1D50A6C(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v3;
  sub_1B1B632F0(v3);
  v4 = sub_1B1BCE388(a1);
  (*(void (**)(_QWORD *))(*v4 + 288))(v4);
  return v4;
}

void sub_1B1D50ACC()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1D50B14(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[7];

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B222A138();
  if (!v2)
  {
    sub_1B19FA070(v5, v5[3]);
    sub_1B1D52CD0();
    sub_1B2229D6C();
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v5[6];
    sub_1B1B28D2C(v4);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  }
  return result;
}

void sub_1B1D50BE0()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_1B1D50C0C()
{
  uint64_t v0;

  return sub_1B1B28D2C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type));
}

uint64_t sub_1B1D50C1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1B28D2C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type));
  return swift_deallocClassInstance();
}

uint64_t sub_1B1D50C90()
{
  return type metadata accessor for RandomTypedNode(0);
}

uint64_t type metadata accessor for RandomTypedNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5DFC0);
}

uint64_t sub_1B1D50CAC()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1D50CEC(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  sub_1B19FC264((uint64_t)v3, v4);
  sub_1B1D52A9C();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B1D50D9C(_QWORD *a1)
{
  return sub_1B1D50B14(a1);
}

uint64_t sub_1B1D50DB0()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  sub_1B1B632F0(v1);
  sub_1B1D763B0(v1);
  sub_1B1B28D2C(v1);
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0x6D6F646E6152;
}

uint64_t sub_1B1D50F2C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 32);
  sub_1B1BCCD2C(*(_QWORD *)(v0 + 24));
  sub_1B1B632F0(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = sub_1B1D506D0(v1);
  sub_1B1B28D2C(v1);
  sub_1B2228890();
  return v2;
}

uint64_t sub_1B1D50FC0()
{
  return type metadata accessor for Random01Node(0);
}

uint64_t type metadata accessor for Random01Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5DFD0);
}

uint64_t sub_1B1D50FE0()
{
  uint64_t result;

  result = 0x6E556D6F646E6152;
  sub_1B1D512BC();
  return result;
}

uint64_t sub_1B1D50FFC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 32);
  sub_1B1BCCD2C(*(_QWORD *)(v0 + 24));
  sub_1B1B632F0(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D506D0(v1);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B2286450;
  v3 = v2 | 0x1000000000000000;
  sub_1B1B632F0(v1);
  sub_1B1D76C18(v3);
  LOBYTE(v3) = v4;
  swift_release();
  sub_1B1B28D2C(v1);
  if ((v3 & 1) != 0)
    goto LABEL_4;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B22847D0;
  v6 = v5 | 0x1000000000000000;
  sub_1B1B632F0(v1);
  sub_1B1D76C18(v6);
  LOBYTE(v6) = v7;
  swift_release();
  sub_1B1B28D2C(v1);
  if ((v6 & 1) != 0)
    goto LABEL_4;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B22847C0;
  v9 = v8 | 0x1000000000000000;
  sub_1B1B632F0(v1);
  sub_1B1D76C18(v9);
  LOBYTE(v9) = v10;
  swift_release();
  sub_1B1B28D2C(v1);
  if ((v9 & 1) != 0)
  {
LABEL_4:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1B28D2C(v1);
    return 0xD000000000000015;
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1D51288()
{
  return type metadata accessor for RandomUnitVectorNode(0);
}

uint64_t type metadata accessor for RandomUnitVectorNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5DFE0);
}

uint64_t sub_1B1D512A4()
{
  uint64_t result;

  result = 0x6E496D6F646E6152;
  sub_1B1D512BC();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1B1D512BC()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  sub_1B1B632F0(v1);
  sub_1B1D763B0(v1);
  sub_1B1B28D2C(v1);
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
}

uint64_t sub_1B1D51410@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t DynamicType;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  uint64_t result;
  __int128 v23;
  uint64_t v24;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226CD10;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x8000000000000038;
  *(_QWORD *)(v3 + 32) = v4 | 0x6000000000000000;
  v5 = swift_allocObject();
  v6 = OBJC_IVAR____TtC3VFX15RandomTypedNode_type;
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type);
  *(_QWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v3 + 40) = v5 | 0x6000000000000000;
  sub_1B1C27668(0, (unint64_t *)&unk_1EEF5C7D0);
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 64) = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v8 + 16) = xmmword_1B226CD10;
  *(_OWORD *)(v8 + 32) = xmmword_1B22847F0;
  *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000040;
  sub_1B1B632F0(v7);
  sub_1B1B632F0(v7);
  sub_1B1D76C18(v7);
  v10 = v9;
  swift_release();
  sub_1B1B28D2C(v7);
  if ((v10 & 1) != 0)
  {
    sub_1B1C8AC7C(0, &qword_1ED4BA5C8);
    v12 = v11;
    v23 = xmmword_1B2244C80;
  }
  else
  {
    sub_1B1C8AC7C(0, (unint64_t *)&qword_1ED4BA5A8);
    v12 = v13;
    *(_QWORD *)&v23 = 0x3F80000000000000;
  }
  v24 = v12;
  sub_1B19FA070(&v23, v12);
  DynamicType = swift_getDynamicType();
  v15 = sub_1B1D76F30(DynamicType);
  if ((~v15 & 0xF000000000000007) != 0)
  {
    v16 = v15;
    sub_1B1A02864((uint64_t)&v23, v8 + 80);
    *(_QWORD *)(v8 + 72) = v16;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v23);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1B226D240;
    v18 = *(_QWORD *)(v1 + v6);
    *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000040;
    sub_1B1B632F0(v18);
    sub_1B1D76C18(v18);
    v20 = v19;
    swift_release();
    sub_1B1B28D2C(v18);
    if ((v20 & 1) != 0)
      v21 = 0x8000000000000040;
    else
      v21 = 0x8000000000000050;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v21;
    *(_QWORD *)(v17 + 32) = result | 0x6000000000000000;
    *a1 = v3;
    a1[1] = v17;
    a1[2] = (uint64_t)&unk_1E638F9C8;
    a1[3] = (uint64_t)&unk_1E638F988;
    a1[4] = MEMORY[0x1E0DEE9D8];
    a1[5] = v8;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

unint64_t sub_1B1D51778()
{
  return 0xD00000000000005ELL;
}

uint64_t sub_1B1D51794()
{
  return type metadata accessor for RandomInRangeNode(0);
}

uint64_t type metadata accessor for RandomInRangeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5DFF0);
}

uint64_t sub_1B1D517B0()
{
  return swift_updateClassMetadata2();
}

unint64_t sub_1B1D517E4()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1B1D51800@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DynamicType;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[4];

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000038;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x8000000000000050;
  *(_QWORD *)(v2 + 40) = v4 | 0x6000000000000000;
  sub_1B1C27668(0, (unint64_t *)&unk_1EEF5C7D0);
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 64) = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v5 + 16) = xmmword_1B226CD10;
  *(_OWORD *)(v5 + 32) = xmmword_1B22847F0;
  v12[3] = MEMORY[0x1E0DEB188];
  LODWORD(v12[0]) = 1065353216;
  sub_1B19FA070(v12, MEMORY[0x1E0DEB188]);
  DynamicType = swift_getDynamicType();
  v7 = sub_1B1D76F30(DynamicType);
  if ((~v7 & 0xF000000000000007) != 0)
  {
    v8 = v7;
    sub_1B1A02864((uint64_t)v12, v5 + 80);
    *(_QWORD *)(v5 + 72) = v8;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
    v10 = swift_allocObject();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B22847D0;
    *(_QWORD *)(v10 + 16) = result | 0x1000000000000000;
    *(_QWORD *)(v9 + 32) = v10 | 0x6000000000000000;
    *a1 = v2;
    a1[1] = v9;
    a1[2] = (uint64_t)&unk_1E63B5E28;
    a1[3] = (uint64_t)&unk_1E63B5DE8;
    a1[4] = MEMORY[0x1E0DEE9D8];
    a1[5] = v5;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1D51A78()
{
  uint64_t v0;

  sub_1B2229430();
  sub_1B2228890();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22847D0;
  sub_1B1D506D0(v0 | 0x1000000000000000);
  swift_release();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  return 0;
}

uint64_t sub_1B1D51BA4()
{
  return type metadata accessor for RandomPositionInsideSphereNode(0);
}

uint64_t type metadata accessor for RandomPositionInsideSphereNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5E000);
}

unint64_t sub_1B1D51BC4()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1D51BE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t DynamicType;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD v15[4];

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000038;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v4 + 16) = v5 | 0x1000000000000000;
  *(_QWORD *)(v2 + 40) = v4 | 0x6000000000000000;
  sub_1B1C27668(0, (unint64_t *)&unk_1EEF5C7D0);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 64) = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v6 + 16) = xmmword_1B226CD10;
  *(_OWORD *)(v6 + 32) = xmmword_1B22847F0;
  sub_1B1D52C68();
  v8 = v7;
  v15[3] = v7;
  v15[0] = swift_allocObject();
  *(_OWORD *)(v15[0] + 16) = xmmword_1B2244F70;
  sub_1B19FA070(v15, v8);
  DynamicType = swift_getDynamicType();
  v10 = sub_1B1D76F30(DynamicType);
  if ((~v10 & 0xF000000000000007) != 0)
  {
    v11 = v10;
    sub_1B1A02864((uint64_t)v15, v6 + 80);
    *(_QWORD *)(v6 + 72) = v11;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1B226D240;
    v13 = swift_allocObject();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B22847D0;
    *(_QWORD *)(v13 + 16) = result | 0x1000000000000000;
    *(_QWORD *)(v12 + 32) = v13 | 0x6000000000000000;
    *a1 = v2;
    a1[1] = v12;
    a1[2] = (uint64_t)&unk_1E63B4A98;
    a1[3] = (uint64_t)&unk_1E63B4A58;
    a1[4] = MEMORY[0x1E0DEE9D8];
    a1[5] = v6;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

unint64_t sub_1B1D51E9C(char a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v4;

  if ((a1 & 1) != 0)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v1 = 0x7325202A20302E32;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v1 = 0xD000000000000010;
  }
  v4 = v1;
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B22847D0;
  sub_1B1D506D0(v2 | 0x1000000000000000);
  swift_release();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return v4;
}

uint64_t sub_1B1D51FB8()
{
  return type metadata accessor for RandomPositionInsideCubeNode(0);
}

uint64_t type metadata accessor for RandomPositionInsideCubeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5E010);
}

unint64_t sub_1B1D51FD4()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1D51FF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000050;
  *(_QWORD *)(v5 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v5;
  a1[2] = (uint64_t)&unk_1E639E950;
  a1[3] = (uint64_t)&unk_1E639E920;
  v7 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v7;
  return result;
}

unint64_t sub_1B1D52110()
{
  return 0xD000000000000014;
}

uint64_t sub_1B1D5212C()
{
  return type metadata accessor for PerlinNoiseFloatNode(0);
}

uint64_t type metadata accessor for PerlinNoiseFloatNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5E020);
}

unint64_t sub_1B1D52148()
{
  return 0xD000000000000011;
}

double sub_1B1D52164@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v5 = swift_allocObject();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v5 + 16) = v6 | 0x1000000000000000;
  *(_QWORD *)(v2 + 40) = v5 | 0x6000000000000000;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  v8 = swift_allocObject();
  v9 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v9 + 16) = xmmword_1B2286450;
  *(_QWORD *)(v8 + 16) = v9 | 0x1000000000000000;
  *(_QWORD *)(v7 + 32) = v8 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v7;
  a1[2] = (uint64_t)&unk_1E63A58F8;
  a1[3] = (uint64_t)&unk_1E63A58B8;
  v11 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v11;
  return result;
}

unint64_t sub_1B1D522E4()
{
  return 0xD000000000000018;
}

uint64_t sub_1B1D52300()
{
  return type metadata accessor for PerlinNoiseFloat2Node(0);
}

uint64_t type metadata accessor for PerlinNoiseFloat2Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5E030);
}

unint64_t sub_1B1D5231C()
{
  return 0xD000000000000011;
}

__n128 sub_1B1D52338@<Q0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  uint64_t v13;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v5 = swift_allocObject();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v5 + 16) = v6 | 0x1000000000000000;
  *(_QWORD *)(v2 + 40) = v5 | 0x6000000000000000;
  v7 = swift_allocObject();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v7 + 16) = v8 | 0x1000000000000000;
  *(_QWORD *)(v2 + 48) = v7 | 0x6000000000000000;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
  v10 = swift_allocObject();
  v11 = swift_allocObject();
  result = (__n128)xmmword_1B22847D0;
  *(_OWORD *)(v11 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v10 + 16) = v11 | 0x1000000000000000;
  *(_QWORD *)(v9 + 32) = v10 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v9;
  a1[2] = (uint64_t)&unk_1E63A5978;
  a1[3] = (uint64_t)&unk_1E63A5928;
  v13 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v13;
  return result;
}

unint64_t sub_1B1D524F0()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1B1D5250C()
{
  return type metadata accessor for PerlinNoiseFloat3Node(0);
}

uint64_t type metadata accessor for PerlinNoiseFloat3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5E040);
}

unint64_t sub_1B1D52528()
{
  return 0xD000000000000011;
}

double sub_1B1D52544@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B227BE30;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v5 = swift_allocObject();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v5 + 16) = v6 | 0x1000000000000000;
  *(_QWORD *)(v2 + 40) = v5 | 0x6000000000000000;
  v7 = swift_allocObject();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v7 + 16) = v8 | 0x1000000000000000;
  *(_QWORD *)(v2 + 48) = v7 | 0x6000000000000000;
  v9 = swift_allocObject();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v9 + 16) = v10 | 0x1000000000000000;
  *(_QWORD *)(v2 + 56) = v9 | 0x6000000000000000;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B226D240;
  v12 = swift_allocObject();
  v13 = swift_allocObject();
  *(_QWORD *)&result = 4;
  *(_OWORD *)(v13 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v12 + 16) = v13 | 0x1000000000000000;
  *(_QWORD *)(v11 + 32) = v12 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v11;
  a1[2] = (uint64_t)&unk_1E63A5A08;
  a1[3] = (uint64_t)&unk_1E63A59A8;
  v15 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v15;
  return result;
}

unint64_t sub_1B1D5273C()
{
  return 0xD000000000000020;
}

uint64_t sub_1B1D52758()
{
  return type metadata accessor for PerlinNoiseFloat4Node(0);
}

uint64_t type metadata accessor for PerlinNoiseFloat4Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5E050);
}

uint64_t sub_1B1D52774()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D52784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __objc2_class **v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;

  v38 = a5;
  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for GraphError();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (uint64_t *)((char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(__objc2_class ***)(v17 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
  type metadata accessor for RandomTypedNode(0);
  if (!swift_dynamicCastClass()
    && *v18 != _TtC3VFX30RandomPositionInsideSphereNode
    && *v18 != _TtC3VFX28RandomPositionInsideCubeNode)
  {
LABEL_13:
    *v38 = v17;
    return swift_retain();
  }
  if ((a3 & 1) == 0)
  {
    v20 = *a4;
    if (!*a4)
    {
      type metadata accessor for RandomSeedNode(0);
      v21 = (_QWORD *)swift_allocObject();
      *(_QWORD *)((char *)v21 + OBJC_IVAR____TtC3VFX14RandomSeedNode_entity) = a2;
      v22 = MEMORY[0x1E0DEE9D8];
      v21[2] = MEMORY[0x1E0DEE9D8];
      v21[3] = 0;
      v21[4] = 0;
      sub_1B2228260();
      v23 = sub_1B222826C();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v12, 1, 1, v23);
      type metadata accessor for AuthoringNode();
      swift_allocObject();
      v20 = sub_1B20E4E94((uint64_t)v21, v22, (uint64_t)v12, 0, 0xF000000000000000);
      swift_release();
    }
    *a4 = v20;
    swift_retain();
    swift_release();
    v24 = *a4;
    v25 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
    v26 = *(_QWORD **)(v17 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v17 + v25) = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v26 = sub_1B1FFEED4(v26);
      *(_QWORD *)(v17 + v25) = v26;
    }
    v26[4] = v24;
    v26[5] = 0;
    swift_release();
    goto LABEL_13;
  }
  sub_1B1BE2940();
  swift_allocError();
  v30 = v29;
  *v16 = v17;
  v31 = (char *)v16 + v13[5];
  v32 = v17 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
  v33 = sub_1B222826C();
  v34 = *(_QWORD *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v31, v32, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  v35 = (char *)v16 + v13[6];
  *(_QWORD *)v35 = 2;
  v35[8] = -96;
  v36 = (_QWORD *)((char *)v16 + v13[7]);
  *v36 = 0xD000000000000011;
  v36[1] = 0x80000001B233A2C0;
  sub_1B1BE2988((uint64_t)v16, v30);
  swift_retain();
  return swift_willThrow();
}

unint64_t sub_1B1D52A9C()
{
  unint64_t result;

  result = qword_1EEF5E060;
  if (!qword_1EEF5E060)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B14B8, &type metadata for AnyType);
    atomic_store(result, (unint64_t *)&qword_1EEF5E060);
  }
  return result;
}

uint64_t sub_1B1D52AE4()
{
  sub_1B2229430();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0;
}

uint64_t sub_1B1D52C20()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1D52C44()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

void sub_1B1D52C68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BB0A0)
  {
    sub_1B19F8DCC();
    v0 = sub_1B222A024();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BB0A0);
  }
}

uint64_t sub_1B1D52CC0()
{
  return swift_deallocObject();
}

unint64_t sub_1B1D52CD0()
{
  unint64_t result;

  result = qword_1EEF5E068;
  if (!qword_1EEF5E068)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B14E0, &type metadata for AnyType);
    atomic_store(result, (unint64_t *)&qword_1EEF5E068);
  }
  return result;
}

uint64_t sub_1B1D52D14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1D52784(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), *(uint64_t **)(v2 + 32), a2);
}

uint64_t sub_1B1D52D34(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  return result;
}

double sub_1B1D52D3C@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_1B228FB70;
  *(_QWORD *)(a1 + 16) = 0xFF00000000;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

double sub_1B1D52D58@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  _BYTE v5[25];

  sub_1B1D541FC(a1, (uint64_t)v5);
  if (!v2)
  {
    *a2 = *(_OWORD *)v5;
    result = *(double *)&v5[9];
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v5[9];
  }
  return result;
}

uint64_t sub_1B1D52D98(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  _BYTE v11[16];
  _BYTE v12[25];

  sub_1B1D4F120(0, &qword_1EEF5CA00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v11[-v8];
  *(_OWORD *)v12 = *v1;
  *(_OWORD *)&v12[9] = *(_OWORD *)((char *)v1 + 9);
  result = sub_1B1C368E0(a1, (uint64_t)&v11[-v8]);
  if (!v2)
  {
    v11[15] = 10;
    sub_1B222991C();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

double sub_1B1D52E78()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1A16F48(1, 1, 1, (uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEFD5518 = v1[0];
  unk_1EEFD5528 = v1[1];
  qword_1EEFD5538 = v2;
  return result;
}

uint64_t *sub_1B1D52F24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  int i;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x2_t *v19;
  float32x2_t *v20;
  uint64_t v21;
  float32x2_t *v22;
  uint64_t v23;
  float32x2_t *v24;
  float32x2_t *v25;
  float32x2_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40[8];
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _BYTE v53[40];
  _OWORD v54[2];
  uint64_t v55;

  v5 = *(float *)(v2 + 160);
  if (qword_1EEF57350 != -1)
    swift_once();
  v54[0] = xmmword_1EEFD5518;
  v54[1] = unk_1EEFD5528;
  v55 = qword_1EEFD5538;
  v6 = a2 & 0xFFFFFFFFFFLL;
  sub_1B1E8FCE4(a1, (uint64_t)v54, a2 & 0xFFFFFFFFFFLL, v40);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v40, (uint64_t)v41, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v41[0])
  {
    v48 = v41[0];
    v49 = v41[1];
    v50 = v42;
    if (v47 >= 1)
    {
      v33 = v44;
      if (v44)
      {
        v31 = v43;
        v8 = v46[4];
        i = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v39 = v46;
        v28 = v46 + 8;
        v29 = (uint64_t)(v46 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v10 = 0;
        v30 = i;
        v32 = v8;
        v27 = v2;
        do
        {
          v11 = (unsigned int *)(v31 + 48 * v10);
          v35 = *v11;
          v12 = *((_QWORD *)v11 + 3);
          v14 = *((_QWORD *)v11 + 4);
          v13 = *((_QWORD *)v11 + 5);
          v36 = (uint64_t *)*((_QWORD *)v11 + 2);
          v37 = v10;
          v34 = v11[1];
          if (i)
          {
            v15 = *(os_unfair_lock_s **)(v13 + 376);
            swift_retain();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v8);
          sub_1B19F66A0(v29, (uint64_t)v53, &qword_1ED4B7FB0);
          v16 = v39[4];
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
          v18 = v13;
          swift_retain();
          v39[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v39[7] = v17;
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          swift_release();
          v19 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1E63A8DD0, v36, v12, v14, (uint64_t)v39);
          v20 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v36, v12, v14, (uint64_t)v39);
          v38 = v18;
          v21 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v36, v12, v14, (uint64_t)v39);
          v22 = (float32x2_t *)v21;
          if (v36)
          {
            for (i = v30; v14; --v14)
            {
              sub_1B1D5438C(v19, v20, v22, v27, v6, a1, v5);
              v22 += 8;
              v20 += 8;
              v19 = (float32x2_t *)((char *)v19 + 28);
            }
          }
          else
          {
            i = v30;
            if ((_DWORD)v35 != (_DWORD)v34)
            {
              v23 = v34 - v35;
              v24 = (float32x2_t *)(v21 + (v35 << 6));
              v25 = &v20[8 * v35];
              v26 = (float32x2_t *)((char *)v19 + 28 * v35);
              do
              {
                sub_1B1D5438C(v26, v25, v24, v27, v6, a1, v5);
                v24 += 8;
                v25 += 8;
                v26 = (float32x2_t *)((char *)v26 + 28);
                --v23;
              }
              while (v23);
            }
          }
          v51[0] = v48;
          v51[1] = v49;
          v52 = v50;
          sub_1B1F05D48(v39, (unsigned __int16 **)v51, (uint64_t)v53);
          sub_1B1F03804((char *)v38);
          v8 = v32;
          ecs_stack_allocator_pop_snapshot(v32);
          if ((i & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 376));
          }
          swift_release();
          v10 = v37 + 1;
        }
        while (v37 + 1 != v33);
        sub_1B19ED748(v40);
      }
    }
    return sub_1B19ED748(v40);
  }
  return result;
}

uint64_t sub_1B1D53380(__int128 *a1, __int128 *a2, uint64_t a3, unint64_t a4, uint64_t a5, float32x4_t a6, __n128 a7, float a8, float a9)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int32 v28;
  __int32 v29;
  __int128 v30;
  float32x4_t v31;
  float32x4_t v32;
  float v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  uint64_t v40;
  float32x4_t v41;
  __int32 v42;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  float v53;
  float32x4_t v54;
  float v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float32x4_t v60;
  float v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t *v68;
  __int32 v70;
  uint64_t v71;
  char v73;
  __int32 v74;
  __int32 v76;
  uint64_t v77;
  __int32 v78;
  __int128 v80;
  uint64_t v82;
  char v84;
  __int128 v85;
  uint64_t v86;
  ValueMetadata *v87;
  _UNKNOWN **v88;
  __n128 v89;
  _QWORD v90[6];
  float v91;
  char v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;

  v12 = (uint64_t *)*((_QWORD *)a1 + 11);
  v13 = *((_QWORD *)a1 + 12);
  v14 = *((_QWORD *)a1 + 13);
  v15 = *((_QWORD *)a1 + 2);
  v77 = *((_QWORD *)a1 + 1);
  v16 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v12, v13, v14, v15);
  v17 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v12, v13, v14, v15);
  v71 = sub_1B1B47B28();
  v73 = v18;
  v82 = sub_1B1B47B98();
  v20 = v19;
  v85 = *a2;
  v89 = a7;
  v99 = a1[6];
  v21 = a1[4];
  v98 = a1[5];
  v97 = v21;
  v22 = a1[2];
  v96 = a1[3];
  v23 = a1[1];
  v93 = *a1;
  v87 = &type metadata for CollisionProperties;
  v88 = &off_1E6397A08;
  v86 = *((_QWORD *)a2 + 2);
  v24 = *(_QWORD *)(a3 + 16);
  v94 = v23;
  v95 = v22;
  v26 = *((_QWORD *)a1 + 6);
  v25 = *((_QWORD *)a1 + 7);
  a7.n128_u64[0] = *(_QWORD *)(v15 + 32);
  swift_retain();
  v100 = ecs_stack_allocator_allocate(a7.n128_i64[0], 8 * (v25 - v26), 8);
  v101 = v25 - v26;
  v102 = 0;
  sub_1B19FA198((uint64_t)&v85, (uint64_t)v90);
  v91 = a9;
  v90[5] = v24;
  sub_1B1A10AA4(*(_QWORD *)(v77 + 40), (uint64_t)&type metadata for Anchored, &v84);
  v92 = v84;
  swift_retain();
  v27 = ecs_stack_allocator_allocate(a7.n128_i64[0], 80 * (v25 - v26), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v85);
  v32 = a6;
  v103 = v27;
  v104 = v25 - v26;
  v105 = 0;
  if (v25 != v26)
  {
    v34 = *(float *)(a3 + 80) * 0.5;
    v35 = 16 * v26;
    do
    {
      v42 = v31.i32[3];
      if ((v20 & 1) != 0)
      {
        __asm { FMOV            V4.4S, #1.0 }
        HIDWORD(_Q4) = HIDWORD(v30);
        v30 = _Q4;
      }
      else
      {
        _Q4 = *(_OWORD *)(v82 + 16 * v26);
      }
      v48 = vmulq_n_f32(*(float32x4_t *)(v17 + 16 * v26), a9);
      v49 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v26), v48);
      v31 = v49;
      v31.i32[3] = v42;
      v50 = vmulq_f32(v48, v48);
      v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0];
      if (v51 >= 0.00000011921)
      {
        v52 = vsubq_f32(v31, v32);
        v53 = v34 * fmaxf(fmaxf(*(float *)&_Q4, *((float *)&_Q4 + 2)), *((float *)&_Q4 + 1));
        if (*(_BYTE *)(a5 + 24))
          v53 = -v53;
        v54 = vmulq_f32(v48, v52);
        LODWORD(v55) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).u32[0];
        v56 = vmulq_f32(v52, v52);
        v57 = vmlas_n_f32(-(float)(v51* (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0]- (float)((float)(v53 + a8) * (float)(v53 + a8)))), v55, v55);
        if (v57 >= 0.0)
        {
          v58 = sqrtf(v57);
          if (!*(_BYTE *)(a5 + 24))
            v58 = -v58;
          v59 = (float)(v58 - v55) / v51;
          if (v59 >= 0.0 && v59 <= 1.0)
          {
            v60 = vmlaq_n_f32(v49, v48, v59);
            v60.i32[3] = v29;
            if (*(_BYTE *)(a5 + 24))
              v61 = -1.0;
            else
              v61 = 1.0;
            v62 = vsubq_f32(v60, v32);
            v63 = (int32x4_t)vmulq_f32(v62, v62);
            v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1))).u32[0];
            v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
            v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
            v66 = vmulq_n_f32(vmulq_n_f32(v62, vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).f32[0]), v61);
            v67 = v66;
            v67.i32[3] = v28;
            v78 = v31.i32[3];
            v80 = v30;
            v74 = v28;
            v76 = v60.i32[3];
            if (*(_BYTE *)(a5 + 24))
            {
              if ((v73 & 1) != 0)
              {
                v37 = 0;
                v38 = 0;
              }
              else
              {
                v36 = (uint64_t *)(v71 + 16 * v26);
                v37 = *v36;
                v38 = v36[1];
              }
              v39 = vaddq_f32(v60, vmulq_f32(v66, (float32x4_t)vdupq_n_s32(0x3C23D70Au)));
              v39.i32[3] = v70;
              v40 = v26;
              v41 = v39;
            }
            else
            {
              if ((v73 & 1) != 0)
              {
                v37 = 0;
                v38 = 0;
              }
              else
              {
                v68 = (uint64_t *)(v71 + 16 * v26);
                v37 = *v68;
                v38 = v68[1];
              }
              v40 = v26;
              v41 = v60;
            }
            sub_1B2021194(v40, (float32x4_t *)(v16 + v35), (float32x4_t *)(v17 + v35), v37, v38, v73 & 1, v41, v67, v59);
            v28 = v74;
            v29 = v76;
            v30 = v80;
            v32 = a6;
            v31.i32[3] = v78;
          }
        }
      }
      ++v26;
      v35 += 16;
    }
    while (v25 != v26);
  }
  sub_1B1C38184((uint64_t)&v89, a4 | ((HIDWORD(a4) & 1) << 32));
  return sub_1B1C390B0((uint64_t)&v89);
}

uint64_t *sub_1B1D537E8(int a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *result;
  int v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x2_t *v39;
  float32x2_t *v40;
  int v41;
  float v42;
  float v43;
  float v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  unint64_t v48;
  float v49;
  __n128 v50;
  float32x4_t v51;
  char v52;
  uint64_t v53;
  uint64_t ObjectType;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x2_t *v63;
  float32x2_t *v64;
  int v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  unint64_t v70;
  float v71;
  unint64_t v72;
  float v73;
  __n128 v74;
  float32x4_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unsigned __int32 v94;
  __int32 v95;
  int v96;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  unsigned __int32 v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  unsigned __int32 v111;
  unsigned __int32 v112;
  float32x4_t v113;
  uint64_t v114;
  float32x4_t v115;
  __n128 v116;
  float32x4_t v117;
  __n128 v118;
  uint64_t v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  uint64_t v124;
  unint64_t v125;
  __n128 v126;
  float32x4_t v127;
  float v128;
  char v129;
  float v130;
  uint64_t v131[8];
  _OWORD v132[2];
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  _OWORD v142[2];
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[6];
  int v147;
  _BYTE v148[40];
  _OWORD v149[2];
  uint64_t v150;
  unsigned int v151;
  char v152;

  if (qword_1EEF57350 != -1)
    swift_once();
  v149[0] = xmmword_1EEFD5518;
  v149[1] = unk_1EEFD5528;
  v150 = qword_1EEFD5538;
  v16 = *(_OWORD *)(a3 + 96);
  v146[2] = *(_OWORD *)(a3 + 80);
  v146[3] = v16;
  v17 = *(_OWORD *)(a3 + 128);
  v146[4] = *(_OWORD *)(a3 + 112);
  v146[5] = v17;
  v18 = *(_OWORD *)(a3 + 32);
  v144 = *(_OWORD *)(a3 + 16);
  v145 = v18;
  v19 = *(_OWORD *)(a3 + 64);
  v146[0] = *(_OWORD *)(a3 + 48);
  v146[1] = v19;
  sub_1B1BE9FDC((int *)v146 + 2, (uint64_t)&v147);
  sub_1B1BE9FDC(&v147, (uint64_t)&v151);
  if (v152)
    v20 = 0x200000000;
  else
    v20 = v151;
  sub_1B1E8FCE4(a2, (uint64_t)v149, v20, v131);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v131, (uint64_t)v132, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v132[0])
  {
    v139 = v132[0];
    v140 = v132[1];
    v141 = v133;
    if (v138 >= 1)
    {
      v90 = v135;
      if (v135)
      {
        v89 = v134;
        v22 = *(unsigned __int8 *)(v136 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v23 = v137[4];
        v93 = v137;
        v85 = v137 + 8;
        v86 = (uint64_t)(v137 + 6);
        v24 = a7 * 0.5;
        swift_retain();
        swift_retain();
        swift_retain();
        v25 = 0;
        v96 = a1;
        v88 = v22;
        v87 = v23;
        do
        {
          v26 = (unsigned int *)(v89 + 48 * v25);
          v27 = (uint64_t *)*((_QWORD *)v26 + 2);
          v28 = *((_QWORD *)v26 + 3);
          v30 = *((_QWORD *)v26 + 4);
          v29 = *((_QWORD *)v26 + 5);
          v92 = v25;
          v119 = *v26;
          v114 = v26[1];
          if (v22)
          {
            v31 = *(os_unfair_lock_s **)(v29 + 376);
            swift_retain();
            os_unfair_lock_lock(v31);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v23);
          sub_1B19F66A0(v86, (uint64_t)v148, &qword_1ED4B7FB0);
          v32 = v93[4];
          v33 = v29;
          v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v93[6] = ecs_stack_allocator_allocate(v32, 48 * v34, 8);
          v93[7] = v34;
          v85[1] = 0;
          v85[2] = 0;
          *v85 = 0;
          swift_release();
          v35 = sub_1B1A12038((uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1E63A8DD0, v27, v28, v30, (uint64_t)v93);
          v36 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v27, v28, v30, (uint64_t)v93);
          v91 = v33;
          v37 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v27, v28, v30, (uint64_t)v93);
          if (v27)
          {
            if (v30)
            {
              v38 = v35 + 12;
              v39 = (float32x2_t *)(v37 + 32);
              v40 = (float32x2_t *)(v36 + 32);
              v41 = v96;
              do
              {
                if ((*(_DWORD *)(v38 + 8) & v41) != 0)
                {
                  v42 = *(float *)(v38 - 8);
                  v43 = *(float *)(v38 - 4);
                  v44 = *(float *)v38;
                  v115 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v39[-4].f32)), a9, v39[-4], 1), a10, *(float32x4_t *)v39[-4].f32, 2), a11, *(float32x4_t *)v39[-4].f32, 3);
                  v108 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v39[-2].f32)), a9, v39[-2], 1), a10, *(float32x4_t *)v39[-2].f32, 2), a11, *(float32x4_t *)v39[-2].f32, 3);
                  v103 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v39[2].f32)), a9, v39[2], 1), a10, *(float32x4_t *)v39[2].f32, 2), a11, *(float32x4_t *)v39[2].f32, 3);
                  v105 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v39->f32)), a9, *v39, 1), a10, *(float32x4_t *)v39->f32, 2), a11, *(float32x4_t *)v39->f32, 3);
                  v120 = sub_1B1BF2918((float32x4_t)xmmword_1B22821D0, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v40[-4].f32)), a9, v40[-4], 1), a10, *(float32x4_t *)v40[-4].f32, 2), a11, *(float32x4_t *)v40[-4].f32, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v40[-2].f32)), a9, v40[-2], 1), a10, *(float32x4_t *)v40[-2].f32, 2), a11, *(float32x4_t *)v40[-2].f32, 3),
                           vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v40->f32)), a9, *v40, 1), a10, *(float32x4_t *)v40->f32, 2), a11, *(float32x4_t *)v40->f32, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v40[2].f32)), a9, v40[2], 1), a10, *(float32x4_t *)v40[2].f32, 2), a11, *(float32x4_t *)v40[2].f32, 3));
                  v116 = sub_1B1BF2918((float32x4_t)xmmword_1B22821D0, v115, v108, v105, v103);
                  v45 = v144;
                  v46 = *(_QWORD *)&v146[0];
                  v47 = *(float *)(v144 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                  swift_retain();
                  v48 = sub_1B1FDF838(v46, v45);
                  if ((v48 & 0x100000000) != 0)
                    goto LABEL_36;
                  v49 = *(float *)&v48;
                  v50 = v120;
                  v111 = v120.n128_u32[3];
                  v51 = vsubq_f32((float32x4_t)v120, (float32x4_t)v116);
                  v50.n128_u32[3] = v112;
                  v121 = v50;
                  v51.i32[3] = v113.i32[3];
                  v113 = v51;
                  swift_release();
                  v52 = *(_BYTE *)(v38 + 12);
                  *(float *)&v124 = v47 * v49;
                  HIDWORD(v124) = fminf(fmaxf(v43 + a5, 0.0), 1.0);
                  *(float *)&v125 = 1.0 - fminf(fmaxf(v44 + a6, 0.0), 1.0);
                  *(_DWORD *)((unint64_t)&v124 | 0xC) = v111;
                  v126 = v121;
                  v127 = v113;
                  v128 = fminf(fmaxf(v42 + a4, 0.0), 1.0);
                  v129 = v52;
                  v130 = v24;
                  v53 = *(_QWORD *)a3;
                  if (*(_QWORD *)a3)
                  {
                    ObjectType = swift_getObjectType();
                    type metadata accessor for particle_sphere_collider_uniforms(0);
                    v55 = ObjectType;
                    v41 = v96;
                    sub_1B1F40E1C((uint64_t)&v124, 1, v55, v56, v57, v58, v59, v60);
                  }
                  swift_retain();
                  sub_1B1B1FC34(a3);
                  sub_1B1FE6FB8(v46, v45, v53 == 0, 0, a3, 0xD000000000000018, 0x80000001B233A2E0, 0);
                  sub_1B1B1FC88(a3);
                  swift_release();
                  v112 = v121.n128_u32[3];
                }
                v38 += 28;
                v39 += 8;
                v40 += 8;
                --v30;
              }
              while (v30);
            }
          }
          else if ((_DWORD)v119 != (_DWORD)v114)
          {
            v61 = v114 - v119;
            v62 = v35 + 28 * v119 + 12;
            v63 = (float32x2_t *)(v37 + (v119 << 6) + 32);
            v64 = (float32x2_t *)(v36 + (v119 << 6) + 32);
            v65 = v96;
            do
            {
              if ((*(_DWORD *)(v62 + 8) & v65) != 0)
              {
                v66 = *(float *)(v62 - 8);
                v67 = *(float *)(v62 - 4);
                v68 = *(float *)v62;
                v117 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v63[-4].f32)), a9, v63[-4], 1), a10, *(float32x4_t *)v63[-4].f32, 2), a11, *(float32x4_t *)v63[-4].f32, 3);
                v109 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v63[-2].f32)), a9, v63[-2], 1), a10, *(float32x4_t *)v63[-2].f32, 2), a11, *(float32x4_t *)v63[-2].f32, 3);
                v104 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v63[2].f32)), a9, v63[2], 1), a10, *(float32x4_t *)v63[2].f32, 2), a11, *(float32x4_t *)v63[2].f32, 3);
                v106 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v63->f32)), a9, *v63, 1), a10, *(float32x4_t *)v63->f32, 2), a11, *(float32x4_t *)v63->f32, 3);
                v122 = sub_1B1BF2918((float32x4_t)xmmword_1B22821D0, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v64[-4].f32)), a9, v64[-4], 1), a10, *(float32x4_t *)v64[-4].f32, 2), a11, *(float32x4_t *)v64[-4].f32, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v64[-2].f32)), a9, v64[-2], 1), a10, *(float32x4_t *)v64[-2].f32, 2), a11, *(float32x4_t *)v64[-2].f32, 3),
                         vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v64->f32)), a9, *v64, 1), a10, *(float32x4_t *)v64->f32, 2), a11, *(float32x4_t *)v64->f32, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a8, COERCE_FLOAT(*(_OWORD *)v64[2].f32)), a9, v64[2], 1), a10, *(float32x4_t *)v64[2].f32, 2), a11, *(float32x4_t *)v64[2].f32, 3));
                v118 = sub_1B1BF2918((float32x4_t)xmmword_1B22821D0, v117, v109, v106, v104);
                v69 = v144;
                v70 = *(_QWORD *)&v146[0];
                v71 = *(float *)(v144 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                swift_retain();
                v72 = sub_1B1FDF838(v70, v69);
                if ((v72 & 0x100000000) != 0)
                {
LABEL_36:
                  v124 = 0;
                  v125 = 0xE000000000000000;
                  sub_1B2229430();
                  sub_1B2228890();
                  sub_1B1BC3C70();
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  sub_1B2228890();
                  sub_1B2228890();
                  sub_1B2228890();
                  result = (uint64_t *)sub_1B2229688();
                  __break(1u);
                  return result;
                }
                v73 = *(float *)&v72;
                v74 = v122;
                v107 = v122.n128_u32[3];
                v75 = vsubq_f32((float32x4_t)v122, (float32x4_t)v118);
                v74.n128_u32[3] = v94;
                v123 = v74;
                v75.i32[3] = v95;
                v110 = v75;
                swift_release();
                v76 = *(_BYTE *)(v62 + 12);
                *(float *)&v124 = v71 * v73;
                HIDWORD(v124) = fminf(fmaxf(v67 + a5, 0.0), 1.0);
                *(float *)&v125 = 1.0 - fminf(fmaxf(v68 + a6, 0.0), 1.0);
                *(_DWORD *)((unint64_t)&v124 | 0xC) = v107;
                v126 = v123;
                v127 = v110;
                v128 = fminf(fmaxf(v66 + a4, 0.0), 1.0);
                v129 = v76;
                v130 = v24;
                v77 = *(_QWORD *)a3;
                if (*(_QWORD *)a3)
                {
                  v78 = swift_getObjectType();
                  type metadata accessor for particle_sphere_collider_uniforms(0);
                  v79 = v78;
                  v65 = v96;
                  sub_1B1F40E1C((uint64_t)&v124, 1, v79, v80, v81, v82, v83, v84);
                }
                swift_retain();
                sub_1B1B1FC34(a3);
                sub_1B1FE6FB8(v70, v69, v77 == 0, 0, a3, 0xD000000000000018, 0x80000001B233A2E0, 0);
                sub_1B1B1FC88(a3);
                swift_release();
                v95 = v110.i32[3];
                v94 = v123.n128_u32[3];
              }
              v62 += 28;
              v63 += 8;
              v64 += 8;
              --v61;
            }
            while (v61);
          }
          v22 = v88;
          v23 = v87;
          v142[0] = v139;
          v142[1] = v140;
          v143 = v141;
          sub_1B1F05D48(v93, (unsigned __int16 **)v142, (uint64_t)v148);
          sub_1B1F03804((char *)v91);
          ecs_stack_allocator_pop_snapshot(v87);
          if ((v88 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v91 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v91 + 376));
          }
          swift_release();
          v25 = v92 + 1;
        }
        while (v92 + 1 != v90);
        sub_1B19ED748(v131);
      }
    }
    return sub_1B19ED748(v131);
  }
  return result;
}

uint64_t sub_1B1D541FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  char v20;

  sub_1B1D4F120(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v17 - v9;
  v17 = xmmword_1B228FB70;
  v18 = 0xFF00000000;
  v19 = 0;
  sub_1B1C371B4(a1, 0);
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v12 = a1[3];
  v13 = a1[4];
  sub_1B19FA070(a1, v12);
  if (sub_1B2067BAC(2024, v12, v13))
  {
    v20 = 10;
    v14 = sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v14 = v19;
  }
  v15 = v18;
  v16 = HIDWORD(v18);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_OWORD *)a2 = v17;
  *(_DWORD *)(a2 + 16) = v15;
  *(_DWORD *)(a2 + 20) = v16;
  *(_BYTE *)(a2 + 24) = v14 & 1;
  return result;
}

float32x2_t *sub_1B1D5438C(float32x2_t *result, float32x2_t *a2, float32x2_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int v7;
  float32x2_t *v11;
  float v12;
  float v13;
  float v14;
  float32x2_t v15;
  uint64_t v16;
  BOOL v17;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t i;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t v98;
  uint64_t v99;
  float32x4_t v100;
  unsigned __int16 *v101;
  float32x4_t v102;
  uint64_t v103;
  uint64_t v104;
  float32x4_t v105;
  __n128 v106;
  _QWORD *v107;
  uint64_t v108[12];
  _QWORD v109[7];
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  __int128 v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  float v128;
  int v129;
  _OWORD v130[2];
  uint64_t v131;
  uint64_t v132;

  v7 = *(_DWORD *)(a4 + 84) & result[2].i32[1];
  if (v7)
  {
    v11 = result;
    v12 = result[2].f32[0] + *(float *)(a4 + 80);
    v13 = 1.0 - fminf(fmaxf(result[1].f32[1] + *(float *)(a4 + 76), 0.0), 1.0);
    v14 = fminf(fmaxf(result[1].f32[0] + *(float *)(a4 + 72), 0.0), 1.0);
    v15 = vadd_f32(*result, *(float32x2_t *)(a4 + 64));
    v16 = a5;
    v17 = (a5 & 0xFE00000000) != 0;
    if ((a5 & 0xFE00000000) != 0)
      v16 = 0;
    v89 = v16;
    __asm { FMOV            V4.2S, #1.0 }
    *(float32x2_t *)&v127 = vminnm_f32(vmaxnm_f32(v15, 0), _D4);
    *((_QWORD *)&v127 + 1) = __PAIR64__(LODWORD(v13), LODWORD(v14));
    v128 = v12;
    v129 = v7;
    v22 = *(float32x4_t *)(a4 + 96);
    v23 = *(float32x4_t *)(a4 + 112);
    v24 = *(float32x4_t *)(a4 + 128);
    v25 = *(float32x4_t *)(a4 + 144);
    v26 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2->f32)), v23, *a2, 1), v24, *(float32x4_t *)a2->f32, 2), v25, *(float32x4_t *)a2->f32, 3);
    v27 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2[2].f32)), v23, a2[2], 1), v24, *(float32x4_t *)a2[2].f32, 2), v25, *(float32x4_t *)a2[2].f32, 3);
    v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2[4].f32)), v23, a2[4], 1), v24, *(float32x4_t *)a2[4].f32, 2), v25, *(float32x4_t *)a2[4].f32, 3);
    v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a2[6].f32)), v23, a2[6], 1), v24, *(float32x4_t *)a2[6].f32, 2), v25, *(float32x4_t *)a2[6].f32, 3);
    v105 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3->f32)), v23, *a3, 1), v24, *(float32x4_t *)a3->f32, 2), v25, *(float32x4_t *)a3->f32, 3);
    v102 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3[2].f32)), v23, a3[2], 1), v24, *(float32x4_t *)a3[2].f32, 2), v25, *(float32x4_t *)a3[2].f32, 3);
    v98 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3[6].f32)), v23, a3[6], 1), v24, *(float32x4_t *)a3[6].f32, 2), v25, *(float32x4_t *)a3[6].f32, 3);
    v100 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)a3[4].f32)), v23, a3[4], 1), v24, *(float32x4_t *)a3[4].f32, 2), v25, *(float32x4_t *)a3[4].f32, 3);
    if (_ZF)
      v17 = 1;
    v88 = v17;
    v90 = sub_1B1BF2918((float32x4_t)xmmword_1B22821D0, v26, v27, v28, v29);
    v106 = sub_1B1BF2918((float32x4_t)xmmword_1B22821D0, v105, v102, v100, v98);
    v130[0] = *(_OWORD *)(a4 + 24);
    v130[1] = *(_OWORD *)(a4 + 40);
    v131 = *(_QWORD *)(a4 + 56);
    sub_1B1E8FCE4(a6, (uint64_t)v130, 0x200000000, v108);
    result = (float32x2_t *)sub_1B19F66A0((uint64_t)v108, (uint64_t)v109, (unint64_t *)&qword_1ED4B7DE0);
    v101 = (unsigned __int16 *)v109[0];
    if (v109[0])
    {
      v86 = v113;
      v87 = (uint64_t)v11;
      if (v113 >= 1)
      {
        v85 = v110;
        if (v110)
        {
          v30 = 0;
          v83 = (__n128)vsubq_f32((float32x4_t)v90, (float32x4_t)v106);
          v82 = v109[5];
          v81 = v111;
          v31 = *(unsigned __int8 *)(v111 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v97 = v112[4];
          v79 = v112 + 8;
          v99 = v109[0] + 41;
          v80 = v31;
          v84 = a4;
          v107 = v112;
          do
          {
            v32 = (unsigned int *)(v82 + 48 * v30);
            v33 = *v32;
            v34 = v32[1];
            v35 = v32[2];
            v36 = *((_QWORD *)v32 + 2);
            v37 = *((_QWORD *)v32 + 4);
            v38 = *((_QWORD *)v32 + 5);
            v95 = v30;
            v103 = *((_QWORD *)v32 + 3);
            if (v31)
            {
              v39 = *(os_unfair_lock_s **)(v38 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v39);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v38 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v97);
            v40 = v107;
            v91 = v107[6];
            v93 = v107[8];
            v94 = v107[7];
            v132 = v107[9];
            v96 = v107[10];
            v41 = v107[4];
            v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v107[6] = ecs_stack_allocator_allocate(v41, 48 * v42, 8);
            v107[7] = v42;
            v79[1] = 0;
            v79[2] = 0;
            *v79 = 0;
            swift_release();
            *(_QWORD *)&v114 = v81;
            *((_QWORD *)&v114 + 1) = v38;
            v92 = v38;
            v115 = v107;
            v116 = v35;
            v117 = (v34 - v33 + v35);
            v118 = v86;
            v119 = v33;
            v120 = v34;
            v121 = 0;
            v122 = 0;
            v123 = 1;
            v124 = v36;
            v125 = v103;
            v126 = v37;
            sub_1B1D53380(&v114, &v127, v84, v89 | ((unint64_t)v88 << 32), v87, (float32x4_t)v90, v83, v90.n128_f32[3], a7);
            v43 = v107[6];
            v104 = v107[8];
            if (!v104)
            {
              v70 = v107[7];
              v71 = (_QWORD *)v107[4];
              v73 = v94;
              v72 = v95;
              v77 = v91;
              v76 = v38;
              v74 = v93;
              goto LABEL_53;
            }
            for (i = 0; i != v104; ++i)
            {
              v46 = v43;
              v47 = (uint64_t *)(v43 + 48 * i);
              v48 = *v47;
              v49 = (void (*)(uint64_t))v47[4];
              v50 = v40[9];
              if (v50)
                _ZF = v48 == v50;
              else
                _ZF = 0;
              if (_ZF || !v101[11])
                goto LABEL_17;
              v52 = v101[9];
              v53 = (_QWORD *)(v99 + v101[8]);
              v54 = v47[2];
              v55 = v53;
              v56 = v52 >> 4;
              v57 = v99;
              if (v52 >= 0x10)
              {
                while (*v55 != v48)
                {
                  ++v57;
                  v55 += 2;
                  if (!--v56)
                    goto LABEL_32;
                }
                v58 = *(unsigned __int8 *)(v57 + v101[10]);
                v59 = v58 > 5;
                v60 = (1 << v58) & 0x23;
                if (v59 || v60 == 0)
                {
LABEL_17:
                  v45 = swift_retain();
                  v49(v45);
                  swift_release();
                  goto LABEL_18;
                }
              }
LABEL_32:
              if (swift_conformsToProtocol2())
                v62 = v54;
              else
                v62 = 0;
              if (v62)
              {
                if (v52 < 0x10)
                  goto LABEL_17;
                v63 = v53;
                v64 = v52 >> 4;
                v65 = v99;
                while (*v63 != v62)
                {
                  ++v65;
                  v63 += 2;
                  if (!--v64)
                    goto LABEL_45;
                }
                v66 = *(unsigned __int8 *)(v65 + v101[10]);
                v59 = v66 > 5;
                v67 = (1 << v66) & 0x23;
                if (v59 || v67 == 0)
                  goto LABEL_17;
LABEL_45:
                v69 = 16 * (v52 >> 4);
                while (*v53 != v62)
                {
                  v53 += 2;
                  v69 -= 16;
                  if (!v69)
                    goto LABEL_17;
                }
              }
LABEL_18:
              v40 = v107;
              v43 = v46;
            }
            v70 = v107[7];
            v43 = v107[6];
            v71 = (_QWORD *)v107[4];
            v73 = v94;
            v72 = v95;
            v74 = v93;
            if ((uint64_t)v107[8] >= 1)
            {
              v75 = v107[6];
              swift_arrayDestroy();
              v43 = v75;
            }
            v77 = v91;
            v76 = v92;
LABEL_53:
            ecs_stack_allocator_deallocate(v71, v43, 48 * v70);
            v40[6] = v77;
            v40[7] = v73;
            v78 = v132;
            v40[8] = v74;
            v40[9] = v78;
            v40[10] = v96;
            sub_1B1F03804((char *)v76);
            ecs_stack_allocator_pop_snapshot(v97);
            v31 = v80;
            if ((v80 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v76 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v76 + 376));
            }
            swift_release();
            v30 = v72 + 1;
          }
          while (v30 != v85);
        }
      }
      return (float32x2_t *)sub_1B19ED748(v108);
    }
  }
  return result;
}

__n128 initializeWithCopy for ParticleSphereCollider(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSphereCollider()
{
  return &type metadata for ParticleSphereCollider;
}

_QWORD *sub_1B1D54A18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  char *v25;
  id v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  _QWORD *v57;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  BOOL v101;
  id v102;
  void *v103;
  id v104;
  id v105;
  void *v106;
  id v107;
  _QWORD *v108;
  char v109;
  unint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  char v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t *v119;
  _QWORD *result;
  id v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  char *v132;
  _QWORD *v133;
  void (*v134)(char *, uint64_t, uint64_t);
  char *v135;
  char *v136;
  int64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t *v143;
  id v144[11];

  v143 = a2;
  v144[9] = *(id *)MEMORY[0x1E0C80C00];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v132 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v125 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v125 - v12;
  v14 = sub_1B2228110();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v136 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v127 = (char *)&v125 - v20;
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v25 = (char *)&v125 - v24;
  v128 = OBJC_IVAR____TtC3VFX16AssetFileManager_lock;
  objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC3VFX16AssetFileManager_lock), sel_lock, v23);
  v133 = sub_1B1B7FC54(MEMORY[0x1E0DEE9D8]);
  v26 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v142 = a1;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v130 = a1 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory;
  v134 = v27;
  ((void (*)(char *))v27)(v25);
  sub_1B22280D4();
  v131 = *(void (**)(char *, uint64_t))(v15 + 8);
  v131(v25, v14);
  v28 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v144[0] = 0;
  v29 = objc_msgSend(v26, sel_contentsOfDirectoryAtPath_error_, v28, v144);

  v30 = v144[0];
  if (v29)
  {
    v31 = sub_1B2228AB8();

  }
  else
  {
    v32 = v30;
    v33 = (void *)sub_1B2227FB4();

    swift_willThrow();
    v129 = 0;
    v31 = MEMORY[0x1E0DEE9D8];
  }
  v34 = *(char **)(v31 + 16);
  v35 = &unk_1EEF5E000;
  v138 = v15;
  v139 = v14;
  v141 = v34;
  if (v34)
  {
    v125 = v13;
    v36 = 0;
    v140 = OBJC_IVAR____TtC3VFX16AssetFileManager_allReferencesWithTemporaryCopy;
    v126 = v31;
    v137 = v31 + 32;
    v135 = v9;
    while (1)
    {
      v37 = (uint64_t *)(v137 + 16 * v36);
      v38 = *v37;
      v39 = v37[1];
      v40 = *(_QWORD *)(v142 + v140);
      if (*(_QWORD *)(v40 + 16))
      {
        swift_bridgeObjectRetain_n();
        v41 = sub_1B1DC3B00(v38, v39);
        if ((v42 & 1) != 0)
        {
          v134(v9, *(_QWORD *)(v40 + 56) + *(_QWORD *)(v15 + 72) * v41, v14);
          v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
          v43(v9, 0, 1, v14);
        }
        else
        {
          v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
          v43(v9, 1, 1, v14);
        }
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) != 1)
        {
          swift_bridgeObjectRelease();
          sub_1B1B1DC9C((uint64_t)v9, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
          goto LABEL_7;
        }
      }
      else
      {
        v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v43(v9, 1, 1, v14);
        swift_bridgeObjectRetain();
      }
      sub_1B1B1DC9C((uint64_t)v9, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      v44 = *v143;
      if (*(_QWORD *)(*v143 + 16))
      {
        sub_1B222A06C();
        swift_bridgeObjectRetain();
        sub_1B2228824();
        v45 = sub_1B222A0C0();
        v46 = -1 << *(_BYTE *)(v44 + 32);
        v47 = v45 & ~v46;
        if (((*(_QWORD *)(v44 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) != 0)
        {
          v48 = *(_QWORD *)(v44 + 48);
          v49 = (_QWORD *)(v48 + 16 * v47);
          v50 = *v49 == v38 && v49[1] == v39;
          if (v50 || (sub_1B2229D24() & 1) != 0)
          {
LABEL_21:
            swift_bridgeObjectRelease();
            v51 = (uint64_t)v132;
            v52 = v139;
            v134(v132, v130, v139);
            v43((char *)v51, 0, 1, v52);
            sub_1B2228044();
            sub_1B1B1DC9C(v51, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
            v53 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
            v54 = (void *)sub_1B2228074();
            v144[0] = 0;
            v55 = objc_msgSend(v53, sel_initWithURL_options_error_, v54, 0, v144);

            if (!v55)
            {
              v121 = v144[0];
              v122 = sub_1B2227FB4();

              v129 = v122;
              swift_willThrow();
              swift_bridgeObjectRelease();
              v131(v136, v139);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return objc_msgSend(*(id *)(v142 + v128), sel_unlock, v125, v126);
            }
            v56 = v144[0];
            v57 = v133;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v144[0] = v57;
            v59 = sub_1B1DC3B00(v38, v39);
            v61 = v60;
            v62 = v57[2] + ((v60 & 1) == 0);
            if (v57[3] >= v62)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                sub_1B1EAC16C();
            }
            else
            {
              sub_1B1E97E6C(v62, isUniquelyReferenced_nonNull_native);
              v63 = sub_1B1DC3B00(v38, v39);
              if ((v61 & 1) != (v64 & 1))
              {
LABEL_100:
                result = (_QWORD *)sub_1B2229FC4();
                __break(1u);
                return result;
              }
              v59 = v63;
            }
            v65 = v144[0];
            v133 = v144[0];
            if ((v61 & 1) != 0)
            {
              v66 = *((_QWORD *)v144[0] + 7);

              *(_QWORD *)(v66 + 8 * v59) = v55;
            }
            else
            {
              *((_QWORD *)v144[0] + (v59 >> 6) + 8) |= 1 << v59;
              v67 = (uint64_t *)(v65[6] + 16 * v59);
              *v67 = v38;
              v67[1] = v39;
              *(_QWORD *)(v65[7] + 8 * v59) = v55;
              ++v65[2];
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v14 = v139;
            v131(v136, v139);
            goto LABEL_41;
          }
          v68 = ~v46;
          while (1)
          {
            v47 = (v47 + 1) & v68;
            if (((*(_QWORD *)(v44 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
              break;
            v69 = (_QWORD *)(v48 + 16 * v47);
            v70 = *v69 == v38 && v69[1] == v39;
            if (v70 || (sub_1B2229D24() & 1) != 0)
              goto LABEL_21;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 = v139;
LABEL_41:
        v15 = v138;
        v9 = v135;
        goto LABEL_7;
      }
      swift_bridgeObjectRelease();
      v15 = v138;
      v14 = v139;
LABEL_7:
      if ((char *)++v36 == v141)
      {
        swift_bridgeObjectRelease();
        v13 = v125;
        v35 = (_QWORD *)&unk_1EEF5E000;
        goto LABEL_44;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_44:
  v71 = *(_QWORD *)(v142 + OBJC_IVAR____TtC3VFX16AssetFileManager_referencesToWrite);
  v72 = *(_QWORD *)(v71 + 56);
  v136 = (char *)(v71 + 56);
  v73 = 1 << *(_BYTE *)(v71 + 32);
  if (v73 < 64)
    v74 = ~(-1 << v73);
  else
    v74 = -1;
  v75 = v74 & v72;
  v135 = (char *)v35[22];
  v76 = (unint64_t)(v73 + 63) >> 6;
  v140 = v71;
  swift_bridgeObjectRetain();
  v77 = 0;
  v137 = v76;
  v132 = (char *)(v76 - 5);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          do
          {
            if (v75)
            {
              v78 = __clz(__rbit64(v75));
              v75 &= v75 - 1;
              v79 = v78 | ((_QWORD)v77 << 6);
            }
            else
            {
              v80 = v77 + 1;
              if ((uint64_t)(v77 + 1) >= v137)
                goto LABEL_96;
              v81 = *(_QWORD *)&v136[8 * (_QWORD)v80];
              if (!v81)
              {
                v80 = v77 + 2;
                if ((uint64_t)(v77 + 2) >= v137)
                  goto LABEL_96;
                v81 = *(_QWORD *)&v136[8 * (_QWORD)v80];
                if (!v81)
                {
                  v80 = v77 + 3;
                  if ((uint64_t)(v77 + 3) >= v137)
                    goto LABEL_96;
                  v81 = *(_QWORD *)&v136[8 * (_QWORD)v80];
                  if (!v81)
                  {
                    v80 = v77 + 4;
                    if ((uint64_t)(v77 + 4) >= v137)
                      goto LABEL_96;
                    v81 = *(_QWORD *)&v136[8 * (_QWORD)v80];
                    if (!v81)
                    {
                      while (v132 != v77)
                      {
                        v81 = *(_QWORD *)(v140 + 8 * (_QWORD)v77++ + 96);
                        if (v81)
                        {
                          v80 = v77 + 4;
                          goto LABEL_62;
                        }
                      }
LABEL_96:
                      swift_release();
                      objc_msgSend(*(id *)(v142 + v128), sel_unlock);
                      return v133;
                    }
                  }
                }
              }
LABEL_62:
              v75 = (v81 - 1) & v81;
              v79 = __clz(__rbit64(v81)) + ((_QWORD)v80 << 6);
              v77 = v80;
            }
            v82 = *v143;
          }
          while (!*(_QWORD *)(*v143 + 16));
          v83 = (uint64_t *)(*(_QWORD *)(v140 + 48) + 16 * v79);
          v84 = *v83;
          v85 = v83[1];
          sub_1B222A06C();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B2228824();
          v86 = sub_1B222A0C0();
          v87 = -1 << *(_BYTE *)(v82 + 32);
          v88 = v86 & ~v87;
          if (((*(_QWORD *)(v82 + 56 + ((v88 >> 3) & 0xFFFFFFFFFFFFF8)) >> v88) & 1) != 0)
            break;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v141 = v77;
        v89 = v13;
        v90 = *(_QWORD *)(v82 + 48);
        v91 = (_QWORD *)(v90 + 16 * v88);
        v92 = *v91 == v84 && v91[1] == v85;
        if (v92 || (sub_1B2229D24() & 1) != 0)
          break;
        v99 = ~v87;
        while (1)
        {
          v88 = (v88 + 1) & v99;
          if (((*(_QWORD *)(v82 + 56 + ((v88 >> 3) & 0xFFFFFFFFFFFFF8)) >> v88) & 1) == 0)
            break;
          v100 = (_QWORD *)(v90 + 16 * v88);
          v101 = *v100 == v84 && v100[1] == v85;
          if (v101 || (sub_1B2229D24() & 1) != 0)
            goto LABEL_70;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v13 = v89;
        v77 = v141;
      }
LABEL_70:
      swift_bridgeObjectRelease();
      v13 = v89;
      v93 = *(_QWORD *)&v135[v142];
      v95 = v138;
      v94 = v139;
      if (!*(_QWORD *)(v93 + 16))
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v138 + 56))(v13, 1, 1, v139);
        goto LABEL_76;
      }
      swift_bridgeObjectRetain();
      v96 = sub_1B1DC3B00(v84, v85);
      if ((v97 & 1) != 0)
      {
        v134(v13, *(_QWORD *)(v93 + 56) + *(_QWORD *)(v95 + 72) * v96, v94);
        v98 = 0;
      }
      else
      {
        v98 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v13, v98, 1, v94);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v13, 1, v94) != 1)
        break;
LABEL_76:
      swift_bridgeObjectRelease();
      sub_1B1B1DC9C((uint64_t)v13, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      v77 = v141;
    }
    (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v127, v13, v94);
    v102 = objc_allocWithZone(MEMORY[0x1E0CB3650]);
    v103 = (void *)sub_1B2228074();
    v144[0] = 0;
    v104 = objc_msgSend(v102, sel_initWithURL_options_error_, v103, 0, v144);

    if (!v104)
      break;
    v105 = v144[0];
    v106 = (void *)sub_1B2228728();
    objc_msgSend(v104, sel_setPreferredFilename_, v106);

    v107 = v104;
    v108 = v133;
    v109 = swift_isUniquelyReferenced_nonNull_native();
    v144[0] = v108;
    v110 = sub_1B1DC3B00(v84, v85);
    v112 = v111;
    v113 = v108[2] + ((v111 & 1) == 0);
    if (v108[3] >= v113)
    {
      v116 = v109;
      v77 = v141;
      if ((v116 & 1) == 0)
        sub_1B1EAC16C();
    }
    else
    {
      sub_1B1E97E6C(v113, v109);
      v114 = sub_1B1DC3B00(v84, v85);
      v77 = v141;
      if ((v112 & 1) != (v115 & 1))
        goto LABEL_100;
      v110 = v114;
    }
    v117 = v144[0];
    v133 = v144[0];
    if ((v112 & 1) != 0)
    {
      v118 = *((_QWORD *)v144[0] + 7);

      *(_QWORD *)(v118 + 8 * v110) = v107;
    }
    else
    {
      *((_QWORD *)v144[0] + (v110 >> 6) + 8) |= 1 << v110;
      v119 = (uint64_t *)(v117[6] + 16 * v110);
      *v119 = v84;
      v119[1] = v85;
      *(_QWORD *)(v117[7] + 8 * v110) = v107;
      ++v117[2];
      swift_bridgeObjectRetain();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v131(v127, v139);
  }
  v123 = v144[0];
  v124 = sub_1B2227FB4();

  v129 = v124;
  swift_willThrow();
  swift_bridgeObjectRelease();
  v131(v127, v139);
  swift_bridgeObjectRelease();
  swift_release();
  return objc_msgSend(*(id *)(v142 + v128), sel_unlock, v125, v126);
}

uint64_t sub_1B1D55748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v21 - v10;
  v12 = MEMORY[0x1B5E240CC](v3 + OBJC_IVAR____TtC3VFX24AssetManagerPathResolver_assetManager, v9);
  if (v12)
  {
    v13 = (void *)v12;
    LOBYTE(v21) = 1;
    sub_1B1D55BF8(a1, a2, 0x100000000, (uint64_t)v11);

    v14 = sub_1B2228110();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14) != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3, v11, v14);
  }
  else
  {
    v17 = sub_1B2228110();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v11, 1, 1, v17);
  }
  sub_1B1B1DC9C((uint64_t)v11, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  if (qword_1ED4BF430 != -1)
    swift_once();
  v21 = 0;
  v22 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  v18 = v21;
  v19 = v22;
  v20 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v21 = 0;
  swift_retain();
  sub_1B1F1AD70(v20, &v21, v18, v19);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return sub_1B2228050();
}

id sub_1B1D559BC()
{
  return sub_1B1D567F4(type metadata accessor for AssetManagerPathResolver);
}

uint64_t type metadata accessor for AssetManagerPathResolver()
{
  return objc_opt_self();
}

char *sub_1B1D559FC()
{
  char *v0;
  uint64_t v1;
  char *v2;
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  objc_super v8;
  objc_super v9;

  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX12AssetManager_pathResolver] = 0;
  v1 = OBJC_IVAR____TtC3VFX12AssetManager_effectIDToAssetsDirectory;
  *(_QWORD *)&v0[v1] = sub_1B1B985C0(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX12AssetManager_authoringFileManager] = 0;
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for AssetManager();
  v2 = (char *)objc_msgSendSuper2(&v9, sel_init);
  v3 = (objc_class *)type metadata accessor for AssetManagerPathResolver();
  v4 = objc_allocWithZone(v3);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v8.receiver = v4;
  v8.super_class = v3;
  v5 = objc_msgSendSuper2(&v8, sel_init);
  v6 = *(void **)&v2[OBJC_IVAR____TtC3VFX12AssetManager_pathResolver];
  *(_QWORD *)&v2[OBJC_IVAR____TtC3VFX12AssetManager_pathResolver] = v5;

  return v2;
}

uint64_t sub_1B1D55BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  void (*v48)(char *, unint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  void (*v54)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v76 = a3;
  v78 = a4;
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1B1791524(0, &qword_1EEF5E0C8, (uint64_t (*)(uint64_t))sub_1B1D56E8C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v73 = (uint64_t)&v69 - v9;
  v10 = sub_1B2228110();
  v11 = *(_QWORD **)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v71 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v75 = (uint64_t)&v69 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v70 = (char *)&v69 - v19;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, v20, v6);
  MEMORY[0x1E0C80A78](v21, v22);
  v72 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v74 = (char *)&v69 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v69 - v29;
  v31 = sub_1B2228008();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  v35 = (char *)&v69 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = a1;
  v82 = a2;
  v79 = 47;
  v80 = 0xE100000000000000;
  sub_1B1A2044C();
  sub_1B1A20490();
  if ((sub_1B222862C() & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v35, *MEMORY[0x1E0CAFD68], v31);
    v36 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v11[7];
    v36(v30, 1, 1, v10);
    swift_bridgeObjectRetain();
    v37 = v78;
    sub_1B22280F8();
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v36)(v37, 0, 1, v10);
  }
  v39 = a2;
  v40 = v10;
  v41 = v11;
  v42 = v77;
  v43 = v78;
  if ((v76 & 0x100000000) == 0 && dword_1EEFD58F0 != (_DWORD)v76)
  {
    v44 = *(_QWORD *)(v77 + OBJC_IVAR____TtC3VFX12AssetManager_effectIDToAssetsDirectory);
    if (*(_QWORD *)(v44 + 16) && (LOBYTE(v81) = 0, v45 = sub_1B1DC41BC(v76), (v46 & 1) != 0))
    {
      v47 = *(_QWORD *)(v44 + 56) + v11[9] * v45;
      v48 = (void (*)(char *, unint64_t, uint64_t))v11[2];
      v49 = (uint64_t)v74;
      v48(v74, v47, v40);
      v50 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v41[7];
      v50(v49, 0, 1, v40);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v41[6])(v49, 1, v40) != 1)
      {
        v51 = v70;
        ((void (*)(char *, uint64_t, uint64_t))v41[4])(v70, v49, v40);
        v52 = v75;
        sub_1B2228098();
        sub_1B2227FE4();
        v53 = (void (*)(uint64_t, uint64_t))v41[1];
        v53(v52, v40);
        v53((uint64_t)v51, v40);
        return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v50)(v43, 0, 1, v40);
      }
    }
    else
    {
      v54 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v11[7];
      v49 = (uint64_t)v74;
      v54(v74, 1, 1, v40);
    }
    sub_1B1B1DC9C(v49, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  }
  if (*(_QWORD *)(v42 + OBJC_IVAR____TtC3VFX12AssetManager_authoringFileManager))
  {
    swift_retain();
    v55 = v75;
    sub_1B1D561C0(a1, v39, v75);
    sub_1B2227FE4();
    swift_release();
    ((void (*)(uint64_t, uint64_t))v41[1])(v55, v40);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v41[7])(v43, 0, 1, v40);
  }
  v56 = swift_bridgeObjectRetain();
  v57 = v73;
  sub_1B1DCC3F4(v56, v73);
  swift_bridgeObjectRelease();
  sub_1B1D56E8C();
  v59 = v58;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v57, 1, v58) == 1)
  {
    sub_1B1B1DC9C(v57, &qword_1EEF5E0C8, (uint64_t (*)(uint64_t))sub_1B1D56E8C);
    v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v41[7];
    v61 = (uint64_t)v72;
    v60(v72, 1, 1, v40);
  }
  else
  {
    v62 = v57 + *(int *)(v59 + 48);
    v63 = (void (*)(char *, uint64_t, uint64_t))v41[4];
    v61 = (uint64_t)v72;
    v63(v72, v62, v40);
    v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v41[7];
    v60((char *)v61, 0, 1, v40);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v41[6])(v61, 1, v40) != 1)
    {
      v66 = v71;
      v63(v71, v61, v40);
      v67 = v75;
      sub_1B2228098();
      sub_1B2227FE4();
      v68 = (void (*)(uint64_t, uint64_t))v41[1];
      v68(v67, v40);
      v68((uint64_t)v66, v40);
      v64 = v43;
      v65 = 0;
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60)(v64, v65, 1, v40);
    }
  }
  sub_1B1B1DC9C(v61, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v64 = v43;
  v65 = 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v60)(v64, v65, 1, v40);
}

id sub_1B1D561C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v8 = sub_1B2228110();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, v13, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v26 - v17;
  v27 = OBJC_IVAR____TtC3VFX16AssetFileManager_lock;
  objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC3VFX16AssetFileManager_lock), sel_lock, v16);
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX16AssetFileManager_referencesToWrite);
  swift_bridgeObjectRetain();
  v20 = sub_1B1B0F1AC(a1, a2, v19);
  swift_bridgeObjectRelease();
  if ((v20 & 1) != 0)
  {
    v21 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX16AssetFileManager_allReferencesWithTemporaryCopy);
    if (*(_QWORD *)(v21 + 16))
    {
      swift_bridgeObjectRetain();
      v22 = sub_1B1DC3B00(a1, a2);
      if ((v23 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, *(_QWORD *)(v21 + 56) + *(_QWORD *)(v9 + 72) * v22, v8);
        v24 = 0;
      }
      else
      {
        v24 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v18, v24, 1, v8);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v8) != 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v18, v8);
        return objc_msgSend(*(id *)(v4 + v27), sel_unlock);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v18, 1, 1, v8);
    }
    sub_1B1B1DC9C((uint64_t)v18, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory, v8);
  sub_1B2228098();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return objc_msgSend(*(id *)(v4 + v27), sel_unlock);
}

uint64_t sub_1B1D56410(unsigned int a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  int v38;
  uint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t, uint64_t);
  void (*v41)(char *, unint64_t, uint64_t);
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;

  v42 = a1;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v39 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v39 - v15;
  v17 = sub_1B2228110();
  v18 = *(_QWORD *)(v17 - 8);
  v20.n128_f64[0] = MEMORY[0x1E0C80A78](v17, v19);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX12AssetManager_effectIDToAssetsDirectory);
  if (*(_QWORD *)(v23 + 16) && (v47 = 0, v24 = sub_1B1DC41BC(a2), (v25 & 1) != 0))
  {
    v26 = *(_QWORD *)(v18 + 72);
    v27 = *(_QWORD *)(v23 + 56) + v26 * v24;
    v41 = *(void (**)(char *, unint64_t, uint64_t))(v18 + 16);
    v41(v16, v27, v17);
    v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56);
    v28(v16, 0, 1, v17);
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    if (v29(v16, 1, v17) != 1)
    {
      v40 = v28;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v16, v17);
      v30 = *(_QWORD *)(v43 + OBJC_IVAR____TtC3VFX12AssetManager_effectIDToAssetsDirectory);
      if (*(_QWORD *)(v30 + 16))
      {
        v45 = 0;
        v31 = v42;
        v32 = sub_1B1DC41BC(v42);
        if ((v33 & 1) != 0)
        {
          v34 = *(_QWORD *)(v30 + 56) + v32 * v26;
          v35 = (void (*)(char *, char *, uint64_t))v41;
          v41(v12, v34, v17);
          v36 = v40;
          v40(v12, 0, 1, v17);
          if (v29(v12, 1, v17) != 1)
          {
            (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
            return sub_1B1B1DC9C((uint64_t)v12, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
          }
          goto LABEL_17;
        }
        v36 = v40;
        v40(v12, 1, 1, v17);
      }
      else
      {
        v36 = v40;
        v40(v12, 1, 1, v17);
        v31 = v42;
      }
      v35 = (void (*)(char *, char *, uint64_t))v41;
LABEL_17:
      sub_1B1B1DC9C((uint64_t)v12, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
      v35(v8, v22, v17);
      v36(v8, 0, 1, v17);
      v44 = 0;
      sub_1B20E12E8((uint64_t)v8, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v22, v17);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v18 + 56))(v16, 1, 1, v17, v20);
  }
  sub_1B1B1DC9C((uint64_t)v16, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v38 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v46 = 0;
  swift_retain();
  sub_1B1F1AD70(v38, &v46, 0xD000000000000034, 0x80000001B233A460);
  swift_release();
  return swift_release();
}

id sub_1B1D567E8()
{
  return sub_1B1D567F4(type metadata accessor for AssetManager);
}

id sub_1B1D567F4(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for AssetManager()
{
  return objc_opt_self();
}

uint64_t sub_1B1D5688C(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  id v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41[2];

  v2 = v1;
  v41[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = sub_1B222826C();
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1B2228110();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v36 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v36 - v19;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX16AssetFileManager_isPerformingChangesLevel) = 0;
  v21 = OBJC_IVAR____TtC3VFX16AssetFileManager_lock;
  *(_QWORD *)(v2 + v21) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  v37 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 16);
  v40 = a1;
  v37(v2 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory, a1, v8);
  v22 = (void *)objc_opt_self();
  v23 = objc_msgSend(v22, sel_defaultManager);
  v24 = objc_msgSend(v23, sel_temporaryDirectory);

  sub_1B22280C8();
  sub_1B2228098();
  v25 = *(void (**)(char *, uint64_t))(v9 + 8);
  v25(v12, v8);
  sub_1B2228260();
  sub_1B2228224();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v39);
  sub_1B2228098();
  swift_bridgeObjectRelease();
  v25(v16, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v2 + OBJC_IVAR____TtC3VFX16AssetFileManager_temporaryDirectory, v20, v8);
  v26 = objc_msgSend(v22, sel_defaultManager);
  v37((uint64_t)v20, (char *)(v2 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory), v8);
  sub_1B22280D4();
  v25(v20, v8);
  v27 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v41[0] = 0;
  v28 = objc_msgSend(v26, sel_contentsOfDirectoryAtPath_error_, v27, v41);

  v29 = v41[0];
  if (v28)
  {
    v30 = sub_1B2228AB8();

  }
  else
  {
    v31 = v29;
    v32 = (void *)sub_1B2227FB4();

    swift_willThrow();
    v30 = MEMORY[0x1E0DEE9D8];
  }
  v33 = sub_1B1F4E8C4(v30);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX16AssetFileManager_referencesToWrite) = v33;
  v34 = sub_1B1B8092C(MEMORY[0x1E0DEE9D8]);
  v25(v40, v8);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX16AssetFileManager_allReferencesWithTemporaryCopy) = v34;
  return v2;
}

uint64_t sub_1B1D56C2C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  id v12[2];

  v1 = v0;
  v12[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v3 = v0 + OBJC_IVAR____TtC3VFX16AssetFileManager_temporaryDirectory;
  v4 = (void *)sub_1B2228074();
  v12[0] = 0;
  v5 = objc_msgSend(v2, sel_removeItemAtURL_error_, v4, v12);

  if (v5)
  {
    v6 = v12[0];
  }
  else
  {
    v7 = v12[0];
    v8 = (void *)sub_1B2227FB4();

    swift_willThrow();
  }
  v9 = sub_1B2228110();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v3, v9);
  v10(v1 + OBJC_IVAR____TtC3VFX16AssetFileManager_persistedDirectory, v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1D56D8C()
{
  sub_1B1D56C2C();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1D56DB0()
{
  return type metadata accessor for AssetFileManager();
}

uint64_t type metadata accessor for AssetFileManager()
{
  uint64_t result;

  result = qword_1EEF5E0B8;
  if (!qword_1EEF5E0B8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B1D56DF4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2228110();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_1B1D56E8C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5E0D0)
  {
    sub_1B19F900C(255, &qword_1ED4BB048);
    sub_1B2228110();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5E0D0);
  }
}

uint64_t sub_1B1D56F0C(uint64_t a1, char a2)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _OWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101[8];
  _OWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _BYTE v109[40];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v65 = MEMORY[0x1E0DEE9E8];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v95 = qword_1ED4D09F8;
  v96 = 0;
  v97 = 2;
  v98 = 0;
  v99 = 2;
  v100 = 0;
  swift_retain();
  sub_1B1E408FC(1, (uint64_t)&v66);
  swift_release();
  v4 = v66;
  v5 = v67;
  v6 = v68;
  v7 = v70;
  v8 = v71;
  v9 = v69 | 1;
  if ((a2 & 1) != 0)
  {
    v89 = v66;
    v90 = v67;
    v91 = v68;
    v92 = v69 | 1;
    v93 = v70;
    v94 = v71;
    sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226D240;
    *(_QWORD *)(inited + 32) = &type metadata for DoNotExport;
    *(_QWORD *)(inited + 40) = &off_1E6370218;
    swift_retain();
    sub_1B1B44110(&v72, inited);
    swift_setDeallocating();
    sub_1B19ED720((uint64_t)&v66);
    sub_1B19ED720((uint64_t)&v66);
    v4 = v72;
    v5 = v73;
    v6 = v74;
    v9 = v75;
    v7 = v76;
    v8 = v77;
  }
  v83 = v4;
  v84 = v5;
  v85 = v6;
  v86 = v9;
  v87 = v7;
  v88 = v8;
  swift_retain();
  sub_1B1E8FCE4(a1, (uint64_t)&v83, 0x200000000, v101);
  sub_1B19F66A0((uint64_t)v101, (uint64_t)v102, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v102[0])
  {
    v78 = v102[0];
    v79 = v102[1];
    v60 = v104;
    v80 = v103;
    v12 = v105;
    v11 = v106;
    v13 = v108;
    v63 = v107;
    swift_release();
    if (v13 > 0 && v12)
    {
      v14 = v63[4];
      v15 = *(unsigned __int8 *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v81[0] = v78;
      v81[1] = v79;
      v82 = v80;
      swift_retain();
      swift_retain();
      swift_retain();
      v16 = 0;
      v58 = v14;
      v59 = v12;
      v57 = v15;
      do
      {
        v17 = (unsigned int *)(v60 + 48 * v16);
        v18 = *v17;
        v19 = (uint64_t *)*((_QWORD *)v17 + 2);
        v20 = *((_QWORD *)v17 + 3);
        v22 = *((_QWORD *)v17 + 4);
        v21 = *((_QWORD *)v17 + 5);
        v61 = v17[1];
        v62 = v16;
        if (v15)
        {
          v23 = *(os_unfair_lock_s **)(v21 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v23);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v21 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v14);
        sub_1B19F66A0((uint64_t)(v63 + 6), (uint64_t)v109, &qword_1ED4B7FB0);
        v24 = v63[4];
        v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v63[6] = ecs_stack_allocator_allocate(v24, 48 * v25, 8);
        v63[7] = v25;
        v63[9] = 0;
        v63[10] = 0;
        v63[8] = 0;
        swift_release();
        v26 = sub_1B1A12038((uint64_t)&type metadata for VirtualFileAsset, (uint64_t)&off_1E638B060, v19, v20, v22, (uint64_t)v63);
        if (v19)
        {
          if (v22)
          {
            v27 = (uint64_t *)(v26 + 24);
            do
            {
              v29 = *(v27 - 1);
              v28 = *v27;
              swift_bridgeObjectRetain_n();
              sub_1B1B8B368(&v64, v29, v28);
              swift_bridgeObjectRelease();
              v30 = *(_QWORD *)(*(_QWORD *)(v21 + 40) + 16);
              v31 = *(_QWORD *)(v30 + 128);
              if (*(_QWORD *)(v31 + 16)
                && (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for MeshFileAsset), (v33 & 1) != 0)
                && *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) == &type metadata for MeshFileAsset)
              {
                v34 = (void *)sub_1B2228728();
                v35 = objc_msgSend(v34, sel_stringByDeletingPathExtension);

                sub_1B222874C();
                v36 = (void *)sub_1B2228728();
                v37 = (void *)sub_1B2228728();
                v38 = objc_msgSend(v36, sel_stringByAppendingPathExtension_, v37);

                if (v38)
                {
                  v29 = sub_1B222874C();
                  v40 = v39;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();

                  v28 = v40;
                }
                else
                {
                  swift_bridgeObjectRelease();

                }
                sub_1B1B8B368(&v64, v29, v28);
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
              }
              v27 += 6;
              --v22;
            }
            while (v22);
          }
        }
        else if ((_DWORD)v18 != (_DWORD)v61)
        {
          v41 = (uint64_t *)(v26 + 48 * v18 + 24);
          v42 = v61 - v18;
          do
          {
            v44 = *(v41 - 1);
            v43 = *v41;
            swift_bridgeObjectRetain_n();
            sub_1B1B8B368(&v64, v44, v43);
            swift_bridgeObjectRelease();
            v45 = *(_QWORD *)(*(_QWORD *)(v21 + 40) + 16);
            v46 = *(_QWORD *)(v45 + 128);
            if (*(_QWORD *)(v46 + 16)
              && (v47 = sub_1B1DC3AC8((uint64_t)&type metadata for MeshFileAsset), (v48 & 1) != 0)
              && *(ValueMetadata **)(*(_QWORD *)(v45 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v46 + 56) + 8 * v47) + 32) == &type metadata for MeshFileAsset)
            {
              v49 = (void *)sub_1B2228728();
              v50 = objc_msgSend(v49, sel_stringByDeletingPathExtension);

              sub_1B222874C();
              v51 = (void *)sub_1B2228728();
              v52 = (void *)sub_1B2228728();
              v53 = objc_msgSend(v51, sel_stringByAppendingPathExtension_, v52);

              if (v53)
              {
                v44 = sub_1B222874C();
                v55 = v54;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                v43 = v55;
              }
              else
              {
                swift_bridgeObjectRelease();

              }
              sub_1B1B8B368(&v64, v44, v43);
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            v41 += 6;
            --v42;
          }
          while (v42);
        }
        sub_1B1F05D48(v63, (unsigned __int16 **)v81, (uint64_t)v109);
        sub_1B1F03804((char *)v21);
        v14 = v58;
        ecs_stack_allocator_pop_snapshot(v58);
        v15 = v57;
        if ((v57 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 376));
        }
        swift_release();
        v16 = v62 + 1;
      }
      while (v62 + 1 != v59);
      sub_1B19ED748(v101);
      sub_1B19ED748(v101);
    }
    else
    {
      sub_1B19ED748(v101);
    }
  }
  else
  {
    swift_release();
  }
  swift_release();
  return v65;
}

uint64_t sub_1B1D57678()
{
  uint64_t v0;

  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + 32), -1, -1);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Bitset()
{
  return objc_opt_self();
}

uint64_t sub_1B1D576C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = 0;
    v3 = *(uint64_t **)(v0 + 32);
    do
    {
      v4 = *v3++;
      v2 = v4 - v2 + 32 * v2;
      --v1;
    }
    while (v1);
  }
  return sub_1B222A0A8();
}

uint64_t sub_1B1D57744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x16_t *v20;
  uint64_t v21;
  unint64_t v22;
  int8x16_t *v23;
  int64x2_t v24;
  unint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  int8x8_t *v28;
  int8x8_t v29;
  uint8x8_t v30;
  uint64_t v32;

  v1 = v0;
  v32 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  sub_1B2029FFC(0, 0, 0);
  v2 = *(_QWORD *)(v0 + 24);
  if (v2 <= 0)
  {
    swift_release();
  }
  else
  {
    v3 = *(unint64_t **)(v1 + 32);
    v4 = *v3;
    swift_retain();
    v5 = 0;
    v6 = 0;
    v7 = 99;
    v8 = v4;
    if (!v4)
      goto LABEL_4;
LABEL_3:
    for (i = __clz(__rbit64(v8)) + v5; ; i = __clz(__rbit64(v11)) + (v10 << 6))
    {
      sub_1B1CC921C();
      v13 = sub_1B22292D4();
      v15 = v14;
      v17 = *(_QWORD *)(v32 + 16);
      v16 = *(_QWORD *)(v32 + 24);
      if (v17 >= v16 >> 1)
        sub_1B2029FFC(v16 > 1, v17 + 1, 1);
      *(_QWORD *)(v32 + 16) = v17 + 1;
      v18 = v32 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v13;
      *(_QWORD *)(v18 + 40) = v15;
      if (!v7)
        break;
      v5 = i + 1;
      v6 = (uint64_t)(i + 1) >> 6;
      v2 = *(_QWORD *)(v1 + 24);
      if (v6 >= v2)
        break;
      v3 = *(unint64_t **)(v1 + 32);
      --v7;
      v8 = v3[v6] >> (v5 & 0x3F);
      if (v8)
        goto LABEL_3;
LABEL_4:
      v10 = v6 + 1;
      if (v6 + 1 >= v2)
        break;
      v11 = v3[v10];
      if (!v11)
      {
        v10 = v6 + 2;
        if (v6 + 2 >= v2)
          break;
        v11 = v3[v10];
        if (!v11)
        {
          v10 = v6 + 3;
          if (v6 + 3 >= v2)
            break;
          v11 = v3[v10];
          if (!v11)
          {
            v12 = v6 + 4;
            while (v2 != v12)
            {
              v11 = v3[v12++];
              if (v11)
              {
                v10 = v12 - 1;
                goto LABEL_14;
              }
            }
            break;
          }
        }
      }
LABEL_14:
      ;
    }
    swift_release_n();
  }
  sub_1B19FA1DC();
  sub_1B1A1F838((unint64_t *)&qword_1ED4BA4A0, 255, (uint64_t (*)(uint64_t))sub_1B19FA1DC, MEMORY[0x1E0DEAF20]);
  sub_1B2228644();
  swift_release();
  v19 = *(_QWORD *)(v1 + 24);
  if (v19)
  {
    v20 = *(int8x16_t **)(v1 + 32);
    if (v19 >= 4)
    {
      v22 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      v23 = v20 + 1;
      v24 = 0uLL;
      v25 = v19 & 0xFFFFFFFFFFFFFFFCLL;
      v26 = 0uLL;
      do
      {
        v24 = (int64x2_t)vpadalq_u32((uint64x2_t)v24, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v23[-1]))));
        v26 = (int64x2_t)vpadalq_u32((uint64x2_t)v26, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v23))));
        v23 += 2;
        v25 -= 4;
      }
      while (v25);
      v21 = vaddvq_s64(vaddq_s64(v26, v24));
      if (v19 == v22)
      {
LABEL_31:
        if (v21 >= 100)
          sub_1B2228890();
        goto LABEL_33;
      }
    }
    else
    {
      v21 = 0;
      v22 = 0;
    }
    v27 = v19 - v22;
    v28 = (int8x8_t *)v20 + v22;
    do
    {
      v29 = *v28++;
      v30 = (uint8x8_t)vcnt_s8(v29);
      v30.i16[0] = vaddlv_u8(v30);
      v21 += v30.u32[0];
      --v27;
    }
    while (v27);
    goto LABEL_31;
  }
LABEL_33:
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 123;
}

void sub_1B1D57A64(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = -1;
}

_QWORD *sub_1B1D57A74()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = sub_1B1C69F24(*v0);
  swift_release();
  return v1;
}

uint64_t sub_1B1D57AA8(_QWORD *a1, int64_t *a2, uint64_t a3)
{
  return sub_1B19F67EC(a1, a2, a3);
}

BOOL sub_1B1D57AC8(uint64_t *a1, uint64_t *a2)
{
  return sub_1B1D57D14(*a1, *a2);
}

uint64_t sub_1B1D57AD4()
{
  return sub_1B1D57744();
}

uint64_t sub_1B1D57AF4()
{
  sub_1B222A06C();
  sub_1B1D576C4();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D57B34()
{
  return sub_1B1D576C4();
}

uint64_t sub_1B1D57B54()
{
  sub_1B222A06C();
  sub_1B1D576C4();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D57B90@<X0>(int64x2_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  swift_allocObject();
  v4 = sub_1B1D57DF0(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1B1D57BE4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A1F838(&qword_1EEF5E0D8, a2, (uint64_t (*)(uint64_t))type metadata accessor for Bitset, (uint64_t)&unk_1B22900CC);
}

unint64_t sub_1B1D57C14()
{
  unint64_t result;

  result = qword_1EEF5E0E0;
  if (!qword_1EEF5E0E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229015C, &type metadata for BitsetIterator);
    atomic_store(result, (unint64_t *)&qword_1EEF5E0E0);
  }
  return result;
}

unint64_t sub_1B1D57C58()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *v0;
  v2 = v0[1] + 1;
  v0[1] = v2;
  v3 = v2 >> 6;
  v4 = *(_QWORD *)(v1 + 24);
  if (v2 >> 6 < v4)
  {
    v5 = *(_QWORD *)(v1 + 32);
    v6 = *(_QWORD *)(v5 + 8 * v3) >> v2;
    if (v6)
    {
      result = __clz(__rbit64(v6)) + v2;
LABEL_4:
      v0[1] = result;
      return result;
    }
    v8 = v3 + 1;
    if (v3 + 1 < v4)
    {
      v9 = *(_QWORD *)(v5 + 8 * v8);
      if (v9)
      {
LABEL_11:
        result = __clz(__rbit64(v9)) + (v8 << 6);
        goto LABEL_4;
      }
      v10 = v3 + 2;
      while (v4 != v10)
      {
        v9 = *(_QWORD *)(v5 + 8 * v10++);
        if (v9)
        {
          v8 = v10 - 1;
          goto LABEL_11;
        }
      }
    }
  }
  return 0;
}

unint64_t sub_1B1D57CE8@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;
  char v3;

  result = sub_1B1D57C58();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

BOOL sub_1B1D57D14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  _BOOL8 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3 >= v2)
  {
    if (v2 < v3)
    {
      v8 = *(_QWORD *)(a2 + 32);
      if (*(_QWORD *)(v8 + 8 * v2))
        return 0;
      v9 = ~v2 + v3;
      v10 = (uint64_t *)(v8 + 8 * v2 + 8);
      while (v9)
      {
        v11 = *v10++;
        --v9;
        if (v11)
          return 0;
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v4 + 8 * v3))
      return 0;
    v5 = ~v3 + v2;
    v6 = (uint64_t *)(v4 + 8 * v3 + 8);
    while (v5)
    {
      v7 = *v6++;
      --v5;
      if (v7)
        return 0;
    }
  }
  if (v2 >= v3)
    v12 = *(_QWORD *)(a2 + 24);
  else
    v12 = *(_QWORD *)(a1 + 24);
  if (!v12)
    return 1;
  v13 = *(_QWORD **)(a2 + 32);
  v14 = *(_QWORD **)(a1 + 32);
  if (*v13 != *v14)
    return 0;
  v15 = v13 + 1;
  v16 = v14 + 1;
  v17 = v12 - 1;
  do
  {
    result = v17 == 0;
    if (!v17)
      break;
    v20 = *v15++;
    v19 = v20;
    v21 = *v16++;
    --v17;
  }
  while (v19 == v21);
  return result;
}

uint64_t sub_1B1D57DF0(int64x2_t *a1)
{
  uint64_t v1;
  unint64_t v3;
  int8x8_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  int8x16_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64_t v12;
  unint64_t v13;
  int8x8_t *v14;
  int8x8_t v15;
  int8x8_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int64x2_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;

  *(_OWORD *)(v1 + 16) = xmmword_1B2290000;
  v3 = a1[1].u64[0];
  if (!v3)
  {
    v6 = 1;
    goto LABEL_15;
  }
  if (v3 < 4)
  {
    v4 = 0;
    v5 = 0;
    goto LABEL_8;
  }
  v5 = v3 & 0x7FFFFFFFFFFFFFFCLL;
  v7 = a1 + 3;
  v8 = 0uLL;
  v9 = v3 & 0x7FFFFFFFFFFFFFFCLL;
  v10 = 0uLL;
  do
  {
    v8 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v8, v7[-1]), v8, (int8x16_t)v7[-1]);
    v10 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v10, *v7), v10, *(int8x16_t *)v7);
    v7 += 2;
    v9 -= 4;
  }
  while (v9);
  v11 = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v8, (int64x2_t)v10), v8, v10);
  v12 = vextq_s8(v11, v11, 8uLL).u64[0];
  v4 = vbsl_s8((int8x8_t)vcgtd_s64(v11.i64[0], v12), *(int8x8_t *)v11.i8, (int8x8_t)v12);
  if (v3 != v5)
  {
LABEL_8:
    v13 = v3 - v5;
    v14 = (int8x8_t *)&a1[2] + v5;
    do
    {
      v16 = *v14++;
      v15 = v16;
      if (*(_QWORD *)&v4 <= *(_QWORD *)&v16)
        v4 = v15;
      --v13;
    }
    while (v13);
  }
  v17 = *(_QWORD *)&v4 + 63;
  v18 = *(_QWORD *)&v4 + 126;
  if (v17 < 0)
    v17 = v18;
  v6 = (v17 >> 6) + 1;
LABEL_15:
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 24) = v6;
  *(_QWORD *)(v1 + 32) = swift_slowAlloc();
  v19 = *(_QWORD *)(v1 + 24);
  if (v19)
  {
    for (i = 0; i != v19; ++i)
      *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * i) = 0;
  }
  if (v3)
  {
    v21 = 0;
    v22 = a1 + 2;
    do
    {
      v23 = v22->i64[v21];
      v24 = v23 >> 6;
      v25 = *(_QWORD *)(v1 + 24);
      if (v23 >> 6 >= v25)
      {
        v26 = v24 + 1;
        if (*(_QWORD *)(v1 + 16) <= v24)
        {
          v27 = swift_slowAlloc();
          v29 = *(_QWORD *)(v1 + 24);
          v28 = *(_QWORD *)(v1 + 32);
          if (v29)
          {
            v30 = 0;
            if (v29 < 4)
              goto LABEL_30;
            if ((unint64_t)(v27 - v28) < 0x20)
              goto LABEL_30;
            v30 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            v31 = (__int128 *)(v28 + 16);
            v32 = (_OWORD *)(v27 + 16);
            v33 = v29 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              v34 = *v31;
              *(v32 - 1) = *(v31 - 1);
              *v32 = v34;
              v31 += 2;
              v32 += 2;
              v33 -= 4;
            }
            while (v33);
            if (v29 != v30)
            {
LABEL_30:
              v35 = v29 - v30;
              v36 = 8 * v30;
              v37 = (_QWORD *)(v27 + 8 * v30);
              v38 = (uint64_t *)(v28 + v36);
              do
              {
                v39 = *v38++;
                *v37++ = v39;
                --v35;
              }
              while (v35);
            }
          }
          MEMORY[0x1B5E23F88](v28, -1, -1);
          *(_QWORD *)(v1 + 32) = v27;
          *(_QWORD *)(v1 + 16) = 2 * v26;
          v25 = *(_QWORD *)(v1 + 24);
        }
        for (; v26 != v25; ++v25)
          *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v25) = 0;
        *(_QWORD *)(v1 + 24) = v26;
      }
      ++v21;
      *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * v24) |= 1 << v23;
    }
    while (v21 != v3);
  }
  return v1;
}

ValueMetadata *type metadata accessor for BitsetIterator()
{
  return &type metadata for BitsetIterator;
}

uint64_t sub_1B1D58054()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1B1D5805C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D580DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v8 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1D58200(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

__n128 sub_1B1D5839C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t sub_1B1D583D0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t sub_1B1D584D4(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 145))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1B1D5851C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 144) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 145) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 145) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for KeyframeAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeAnimation);
}

__n128 initializeWithCopy for AnimationTimeSource(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AnimationTimeSource(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 58))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 20);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationTimeSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 58) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimeSource()
{
  return &type metadata for AnimationTimeSource;
}

void sub_1B1D58664(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1B1D58698()
{
  float v0;

  sinf(v0 * -3.1416);
}

void sub_1B1D588FC()
{
  JUMPOUT(0x1B1D58828);
}

void sub_1B1D5890C()
{
  JUMPOUT(0x1B1D58828);
}

void sub_1B1D58938()
{
  JUMPOUT(0x1B1D58828);
}

void sub_1B1D58944()
{
  JUMPOUT(0x1B1D58828);
}

double sub_1B1D58AB0(float32x4_t a1)
{
  int8x16_t v2;
  float v3;
  float v5;
  float v7;
  float v13;
  double v14;
  float v15;
  double v16;
  int v17;
  float v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  float v24;

  _Q2 = a1;
  v2 = (int8x16_t)vmulq_f32(a1, a1);
  v3 = vaddv_f32(vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)));
  if (v3 == 0.0)
    return 0.0;
  v5 = _Q2.f32[3];
  _S9 = _Q2.f32[1];
  v7 = _Q2.f32[2];
  __asm { FMLA            S1, S9, V2.S[3] }
  v13 = _S1 / v3;
  v14 = (float)(_S1 / v3);
  if (v14 <= 0.4999)
  {
    if (v14 >= -0.4999)
    {
      v19 = *(float *)&v2.i32[1];
      v20 = v2.i64[1];
      v21 = _Q2.f32[0];
      v22 = *(float *)v2.i32;
      v24 = atan2f((float)((float)(_Q2.f32[0] * _Q2.f32[3]) + (float)(_Q2.f32[1] * _Q2.f32[2]))+ (float)((float)(_Q2.f32[0] * _Q2.f32[3]) + (float)(_Q2.f32[1] * _Q2.f32[2])), *(float *)&v2.i32[3]+ (float)(*(float *)&v2.i32[2] + (float)((float)-*(float *)v2.i32 - *(float *)&v2.i32[1])));
      v23 = asinf(v13 + v13);
      atan2f((float)((float)(v7 * v5) + (float)(v21 * _S9)) + (float)((float)(v7 * v5) + (float)(v21 * _S9)), *((float *)&v20 + 1) + (float)((float)(v22 - v19) - *(float *)&v20));
      return COERCE_DOUBLE(__PAIR64__(LODWORD(v23), LODWORD(v24)));
    }
    v18 = atan2f(_Q2.f32[0], _Q2.f32[3]);
    *(float *)&v16 = v18 + v18;
    v17 = -1077342245;
  }
  else
  {
    v15 = atan2f(_Q2.f32[0], _Q2.f32[3]);
    *(float *)&v16 = v15 + v15;
    v17 = 1070141403;
  }
  HIDWORD(v16) = v17;
  return v16;
}

void sub_1B1D58C08(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63BFA48;
}

uint64_t sub_1B1D58C18()
{
  sub_1B1D5BAD0();
  return sub_1B2228A58();
}

uint64_t sub_1B1D58C74()
{
  sub_1B1D5BAD0();
  return sub_1B22289E0();
}

void sub_1B1D58CC0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E637B180;
}

uint64_t sub_1B1D58CD0()
{
  sub_1B1D5E5D0();
  return sub_1B2228A58();
}

uint64_t sub_1B1D58D2C()
{
  sub_1B1D5E5D0();
  return sub_1B22289E0();
}

void sub_1B1D58D78(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v3;

  v3 = BYTE4(a3);
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  __asm { BR              X10 }
}

uint64_t sub_1B1D58DDC()
{
  uint64_t v0;
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229B98();
  if (!v0)
  {
    sub_1B19FC264((uint64_t)v2, v3);
    sub_1B2229B8C();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

unint64_t sub_1B1D591F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v5;

  result = sub_1B1D5B6F0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 12) = BYTE4(v5);
  }
  return result;
}

void sub_1B1D59224(_QWORD *a1)
{
  uint64_t v1;

  sub_1B1D58D78(a1, *(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32));
}

uint64_t sub_1B1D59248(uint64_t a1)
{
  return sub_1B1D5AE2C(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32));
}

void sub_1B1D59270(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E637EFC8;
}

uint64_t sub_1B1D59280(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D592B4 + 4 * byte_1B22901D0[a1]))(0x6E6F697461727564, 0xE800000000000000);
}

uint64_t sub_1B1D592B4()
{
  return 0x6465657073;
}

uint64_t sub_1B1D592C8()
{
  return 0x6D69546E69676562;
}

uint64_t sub_1B1D593E8()
{
  return 0x657669746361;
}

uint64_t sub_1B1D593FC()
{
  return 0x6574656C706D6F63;
}

uint64_t sub_1B1D5941C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  uint64_t v13[2];
  char v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5E108, (uint64_t (*)(void))sub_1B1D5C080, (uint64_t)&type metadata for AnimationTimeSource.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D5C080();
  sub_1B222A180();
  LOBYTE(v12[0]) = 0;
  sub_1B2229934();
  if (!v2)
  {
    LOBYTE(v12[0]) = 1;
    sub_1B2229934();
    LOBYTE(v12[0]) = 2;
    sub_1B2229934();
    LOBYTE(v12[0]) = 3;
    sub_1B2229934();
    LOBYTE(v12[0]) = 4;
    sub_1B2229934();
    LOBYTE(v12[0]) = 5;
    sub_1B222991C();
    LOBYTE(v12[0]) = *(_BYTE *)(v3 + 21);
    v14 = 6;
    sub_1B1A71B9C();
    sub_1B2229958();
    LOBYTE(v12[0]) = *(_BYTE *)(v3 + 22);
    v14 = 7;
    sub_1B2229958();
    sub_1B1B07C6C((uint64_t *)(v3 + 24), v13);
    sub_1B1B07C6C(v13, v12);
    v14 = 8;
    sub_1B1A7207C();
    sub_1B2229958();
    v12[0] = *(_QWORD *)(v3 + 40);
    v14 = 9;
    sub_1B1A0895C();
    sub_1B2229958();
    LOBYTE(v12[0]) = 10;
    sub_1B2229934();
    LOBYTE(v12[0]) = 11;
    sub_1B2229934();
    LOBYTE(v12[0]) = 12;
    sub_1B222991C();
    LOBYTE(v12[0]) = 13;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1D597A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1D59280(*a1);
  v5 = v4;
  if (v3 == sub_1B1D59280(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1D59828()
{
  unsigned __int8 *v0;

  return sub_1B1D59280(*v0);
}

uint64_t sub_1B1D59830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1D5B0DC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B1D59854(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_1B1D59860()
{
  sub_1B1D5C080();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D59888()
{
  sub_1B1D5C080();
  return sub_1B222A1E0();
}

double sub_1B1D598B0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _BYTE v7[26];

  sub_1B1D5BC30(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = *(_OWORD *)v7;
    result = *(double *)&v7[10];
    *(_OWORD *)((char *)a2 + 42) = *(_OWORD *)&v7[10];
  }
  return result;
}

uint64_t sub_1B1D598FC(_QWORD *a1)
{
  return sub_1B1D5941C(a1);
}

double sub_1B1D5993C@<D0>(uint64_t a1@<X8>)
{
  double result;

  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)a1 = _D0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 15) = 0;
  *(_BYTE *)(a1 + 36) = 7;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 1;
  return result;
}

uint64_t sub_1B1D59974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for BasicAnimation(0, a1, a2, a3);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56);
  v8(a4 + *(int *)(v6 + 40), 1, 1, a1);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a4 + *(int *)(v6 + 44), 1, 1, a1);
}

void sub_1B1D59A00(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t ObjectType;

  v3 = v2[1];
  if (v3)
  {
    v5 = *v2;
    ObjectType = swift_getObjectType();
    swift_retain();
    sub_1B1F02EF0(v5, 0, ObjectType, a2);
    swift_release();
    *v2 = v5;
    v2[1] = v3;
  }
}

uint64_t sub_1B1D59A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_1B1D59974(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

double sub_1B1D59A84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  double result;

  v6 = *(void (**)(void))(a2 + 32);
  v6();
  v8 = type metadata accessor for BasicAnimationRuntime(0, a1, a2, v7);
  ((void (*)(uint64_t, uint64_t))v6)(a1, a2);
  v9 = (_QWORD *)(a3 + *(int *)(v8 + 40));
  *v9 = 0;
  v9[1] = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a3 + *(int *)(v8 + 44)) = 0xFFFFFFFFLL;
  return result;
}

double sub_1B1D59B00@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1D59A84(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void sub_1B1D59B0C(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &unk_1E638CDB0;
  *(_QWORD *)(a1 + 32) = &unk_1E638CC98;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 56) = &unk_1E638CCC0;
  *(_QWORD *)(a1 + 64) = &unk_1E638CCE8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 88) = &unk_1E638CD10;
  *(_QWORD *)(a1 + 96) = &unk_1E638CD38;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 120) = &unk_1E638CD60;
  *(_QWORD *)(a1 + 128) = &unk_1E638CD88;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 1;
}

uint64_t sub_1B1D59B8C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_1B1D59BD8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D59C08 + 4 * byte_1B22901DE[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_1B1D59C08()
{
  return 0x656E696C656D6974;
}

uint64_t sub_1B1D59C28()
{
  return 0x656E696C656D6974;
}

uint64_t sub_1B1D59C48()
{
  return 0x656E696C656D6974;
}

uint64_t sub_1B1D59C68()
{
  return 0x656E696C656D6974;
}

uint64_t sub_1B1D59C84()
{
  return 0x6C6F707265746E69;
}

uint64_t sub_1B1D59CA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D59CD8 + 4 * byte_1B22901E4[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_1B1D59CD8()
{
  return 0x656E696C656D6974;
}

uint64_t sub_1B1D59CF8()
{
  return 0x656E696C656D6974;
}

uint64_t sub_1B1D59D18()
{
  return 0x656E696C656D6974;
}

uint64_t sub_1B1D59D38()
{
  return 0x656E696C656D6974;
}

uint64_t sub_1B1D59D54()
{
  return 0x6C6F707265746E69;
}

uint64_t sub_1B1D59D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2290A78, a3);
  return sub_1B1F1DDE8();
}

uint64_t sub_1B1D59DC4(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2290880, a1);
  return sub_1B2228A28();
}

uint64_t sub_1B1D59E10()
{
  MEMORY[0x1B5E23E74](&unk_1B2290880);
  return sub_1B2228A40();
}

uint64_t sub_1B1D59E60()
{
  MEMORY[0x1B5E23E74](&unk_1B2290880);
  return sub_1B2228A34();
}

uint64_t sub_1B1D59EB0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D59B8C();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D59EE4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1D59BD8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1D59F10()
{
  unsigned __int8 *v0;

  return sub_1B1D59CA8(*v0);
}

uint64_t sub_1B1D59F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = sub_1B1D59BD4(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  *a4 = result;
  return result;
}

uint64_t sub_1B1D59F48@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D2CE38();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D59F70(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2290A78, a1);
  return sub_1B222A1D4();
}

uint64_t sub_1B1D59FA4(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2290A78, a1);
  return sub_1B222A1E0();
}

uint64_t sub_1B1D59FD8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];
  char v20;

  v6 = v4;
  v8 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 16);
  v9 = type metadata accessor for KeyframeAnimation.CodingKeys(255, v17, v8, a4);
  MEMORY[0x1B5E23E74](&unk_1B2290A78, v9);
  v10 = sub_1B22299C4();
  v18 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v17 - v12;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A180();
  v14 = *(_QWORD *)(v6 + 8);
  if (v14)
  {
    v15 = HIDWORD(*(_QWORD *)v6);
    LODWORD(v19[0]) = *(_QWORD *)v6;
    DWORD1(v19[0]) = v15;
    *((_QWORD *)&v19[0] + 1) = v14;
    v20 = 0;
    sub_1B1C1F16C();
    swift_retain();
    sub_1B2229958();
    if (v5)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v10);
      return swift_release();
    }
    swift_release();
  }
  LOBYTE(v19[0]) = *(_BYTE *)(v6 + 16);
  v20 = 5;
  sub_1B1D5BBA8();
  sub_1B2229958();
  if (!v5)
  {
    v19[0] = *(_OWORD *)(v6 + 24);
    *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(v6 + 33);
    v20 = 1;
    sub_1B1D5BBEC();
    sub_1B2229958();
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    if (swift_dynamicCastMetatype())
    {
      v19[0] = *(_OWORD *)(v6 + 56);
      *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(v6 + 65);
      v20 = 2;
      sub_1B2229958();
    }
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    if (swift_dynamicCastMetatype())
    {
      v19[0] = *(_OWORD *)(v6 + 56);
      *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(v6 + 65);
      v20 = 2;
      sub_1B2229958();
      v19[0] = *(_OWORD *)(v6 + 88);
      *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(v6 + 97);
      v20 = 3;
      sub_1B2229958();
    }
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    if (swift_dynamicCastMetatype())
    {
      v19[0] = *(_OWORD *)(v6 + 56);
      *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(v6 + 65);
      v20 = 2;
      sub_1B2229958();
      v19[0] = *(_OWORD *)(v6 + 88);
      *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(v6 + 97);
      v20 = 3;
      sub_1B2229958();
      v19[0] = *(_OWORD *)(v6 + 120);
      *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(v6 + 129);
      v20 = 4;
      sub_1B2229958();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v13, v10);
}

uint64_t sub_1B1D5A424@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  char v22;
  char *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  void *v33;
  void *v34;
  char v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  void *v47;
  int v48;
  int v49;
  int v50;
  void *v51;
  void *v52;
  void *v53;
  __int128 v54;
  int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  char v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  char v84;
  _BYTE v85[7];
  void *v86;
  void *v87;
  uint64_t v88;
  char v89;
  _BYTE v90[7];
  void *v91;
  void *v92;
  uint64_t v93;
  char v94;
  _BYTE v95[7];
  void *v96;
  __int128 v97;
  char v98;
  _BYTE v99[7];
  _BYTE v100[7];
  _BYTE v101[7];
  _DWORD v102[3];
  uint64_t v103;

  v58 = a5;
  v7 = type metadata accessor for KeyframeAnimation.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1B5E23E74](&unk_1B2290A78, v7);
  v64 = sub_1B2229898();
  v8 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v9);
  v11 = (char *)&v45 - v10;
  v12 = a1[3];
  v60 = a1;
  sub_1B19FA070(a1, v12);
  sub_1B222A150();
  if (v5)
  {
    v59 = v5;
    v64 = 0;
    v61 = 0;
    v103 = 0;
    v62 = &unk_1E638CB50;
    v63 = &unk_1E638CC68;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v60);
    v78 = 0;
    v79 = 0;
    LOBYTE(v80) = 0;
    *(_DWORD *)((char *)&v80 + 1) = v102[0];
    HIDWORD(v80) = *(_DWORD *)((char *)v102 + 3);
    v81 = v63;
    v82 = v62;
    v83 = v103;
    v84 = 1;
    *(_DWORD *)v85 = *(_DWORD *)v101;
    *(_DWORD *)&v85[3] = *(_DWORD *)&v101[3];
    v86 = &unk_1E638CB78;
    v87 = &unk_1E638CBA0;
    v88 = v61;
    v89 = 1;
    *(_DWORD *)v90 = *(_DWORD *)v100;
    *(_DWORD *)&v90[3] = *(_DWORD *)&v100[3];
    v91 = &unk_1E638CBC8;
    v92 = &unk_1E638CBF0;
    v93 = v64;
    v94 = 1;
    *(_DWORD *)v95 = *(_DWORD *)v99;
    *(_DWORD *)&v95[3] = *(_DWORD *)&v99[3];
    v96 = &unk_1E638CC18;
    *(_QWORD *)&v97 = &unk_1E638CC40;
    *((_QWORD *)&v97 + 1) = 0;
    v98 = 1;
    return sub_1B1A1B624((uint64_t)&v78);
  }
  else
  {
    v57 = v8;
    LOBYTE(v65) = 1;
    v13 = sub_1B1D5BB20();
    v14 = v64;
    sub_1B2229814();
    *(_QWORD *)&v54 = v13;
    v17 = (void *)v78;
    v16 = v79;
    v55 = v81;
    v103 = v80;
    swift_bridgeObjectRetain();
    v63 = v17;
    swift_bridgeObjectRetain();
    v62 = v16;
    swift_bridgeObjectRetain();
    v78 = sub_1B2229880();
    LOBYTE(v65) = 2;
    v18 = sub_1B2228B6C();
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF38], v18);
    v19 = MEMORY[0x1B5E23E74](&unk_1B2290A50, v7);
    v59 = v18;
    *((_QWORD *)&v54 + 1) = v19;
    LOBYTE(v16) = sub_1B22289B0();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      LOBYTE(v65) = 2;
      sub_1B2229814();
      v56 = (void *)v78;
      v53 = v79;
      v61 = v80;
      v50 = v81;
    }
    else
    {
      v61 = 0;
      v56 = &unk_1E638CB78;
      v50 = 1;
      v53 = &unk_1E638CBA0;
    }
    v78 = sub_1B2229880();
    LOBYTE(v65) = 3;
    v20 = sub_1B22289B0();
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
    {
      LOBYTE(v65) = 3;
      sub_1B2229814();
      v21 = v11;
      v51 = v79;
      v52 = (void *)v78;
      v64 = v80;
      v48 = v81;
    }
    else
    {
      v21 = v11;
      v64 = 0;
      v48 = 1;
      v51 = &unk_1E638CBF0;
      v52 = &unk_1E638CBC8;
    }
    v78 = sub_1B2229880();
    LOBYTE(v65) = 4;
    v22 = sub_1B22289B0();
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
    {
      LOBYTE(v65) = 4;
      sub_1B2229814();
      v23 = v21;
      v24 = (void *)v78;
      *(_QWORD *)&v54 = v79;
      v25 = v80;
      v49 = v81;
    }
    else
    {
      v23 = v21;
      v25 = 0;
      v24 = &unk_1E638CC18;
      v49 = 1;
      *(_QWORD *)&v54 = &unk_1E638CC40;
    }
    LOBYTE(v65) = 5;
    sub_1B1D5BB64();
    sub_1B22297B4();
    v26 = v53;
    v27 = v64;
    v28 = v78;
    if (v78 == 3)
      v28 = 0;
    v46 = v28;
    v75 = 0;
    sub_1B1C1EBD4();
    sub_1B2229814();
    v64 = v27;
    v47 = v24;
    *((_QWORD *)&v54 + 1) = v25;
    v59 = 0;
    v29 = v76;
    v30 = v77;
    v31 = v57;
    v32 = v23;
    v33 = v51;
    v34 = v52;
    v57 = v76;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v14);
    *(_QWORD *)&v65 = v29;
    *((_QWORD *)&v65 + 1) = v30;
    v35 = v46;
    LOBYTE(v66) = v46;
    v36 = v62;
    v37 = v63;
    *((_QWORD *)&v66 + 1) = v63;
    *(_QWORD *)&v67 = v62;
    *((_QWORD *)&v67 + 1) = v103;
    LOBYTE(v68) = v55;
    *((_QWORD *)&v68 + 1) = v56;
    *(_QWORD *)&v69 = v26;
    v52 = v34;
    v53 = v26;
    v38 = v103;
    *((_QWORD *)&v69 + 1) = v61;
    LOBYTE(v29) = v50;
    LOBYTE(v70) = v50;
    *((_QWORD *)&v70 + 1) = v34;
    *(_QWORD *)&v71 = v33;
    *((_QWORD *)&v71 + 1) = v64;
    LOBYTE(v33) = v48;
    LOBYTE(v72) = v48;
    v39 = v47;
    *((_QWORD *)&v72 + 1) = v47;
    v73 = v54;
    v74 = v49;
    swift_retain();
    sub_1B1A1B54C((uint64_t)&v65);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v60);
    v78 = v57;
    v79 = v30;
    LOBYTE(v80) = v35;
    *(_DWORD *)((char *)&v80 + 1) = v102[0];
    HIDWORD(v80) = *(_DWORD *)((char *)v102 + 3);
    v81 = v37;
    v82 = v36;
    v83 = v38;
    v84 = v55;
    *(_DWORD *)v85 = *(_DWORD *)v101;
    *(_DWORD *)&v85[3] = *(_DWORD *)&v101[3];
    v86 = v56;
    v87 = v53;
    v88 = v61;
    v89 = v29;
    *(_DWORD *)v90 = *(_DWORD *)v100;
    *(_DWORD *)&v90[3] = *(_DWORD *)&v100[3];
    v91 = v52;
    v92 = v51;
    v93 = v64;
    v94 = (char)v33;
    *(_DWORD *)v95 = *(_DWORD *)v99;
    *(_DWORD *)&v95[3] = *(_DWORD *)&v99[3];
    v96 = v39;
    v97 = v54;
    v98 = v49;
    result = sub_1B1A1B624((uint64_t)&v78);
    v40 = v72;
    v41 = v58;
    *(_OWORD *)(v58 + 96) = v71;
    *(_OWORD *)(v41 + 112) = v40;
    *(_OWORD *)(v41 + 128) = v73;
    *(_BYTE *)(v41 + 144) = v74;
    v42 = v68;
    *(_OWORD *)(v41 + 32) = v67;
    *(_OWORD *)(v41 + 48) = v42;
    v43 = v70;
    *(_OWORD *)(v41 + 64) = v69;
    *(_OWORD *)(v41 + 80) = v43;
    v44 = v66;
    *(_OWORD *)v41 = v65;
    *(_OWORD *)(v41 + 16) = v44;
  }
  return result;
}

double sub_1B1D5ACF0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[9];
  char v12;

  sub_1B1D5A424(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3, (uint64_t)v11);
  if (!v4)
  {
    v7 = v11[7];
    *(_OWORD *)(a4 + 96) = v11[6];
    *(_OWORD *)(a4 + 112) = v7;
    *(_OWORD *)(a4 + 128) = v11[8];
    *(_BYTE *)(a4 + 144) = v12;
    v8 = v11[3];
    *(_OWORD *)(a4 + 32) = v11[2];
    *(_OWORD *)(a4 + 48) = v8;
    v9 = v11[5];
    *(_OWORD *)(a4 + 64) = v11[4];
    *(_OWORD *)(a4 + 80) = v9;
    result = *(double *)v11;
    v10 = v11[1];
    *(_OWORD *)a4 = v11[0];
    *(_OWORD *)(a4 + 16) = v10;
  }
  return result;
}

uint64_t sub_1B1D5AD68(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1D59FD8(a1, a2, a3, a4);
}

uint64_t sub_1B1D5AD80()
{
  return sub_1B1D5E388(&qword_1EEF5E0E8, &qword_1EEF5E0F0);
}

double sub_1B1D5ADAC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  double result;

  v7 = type metadata accessor for KeyframeAnimationRuntime(0, a1, a2, a3);
  *a4 = 0;
  a4[1] = 0;
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  v8 = (_QWORD *)((char *)a4 + *(int *)(v7 + 44));
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)((char *)a4 + *(int *)(v7 + 48)) = 0xFFFFFFFFLL;
  return result;
}

double sub_1B1D5AE20@<D0>(uint64_t a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  return sub_1B1D5ADAC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

uint64_t sub_1B1D5AE2C(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_1B1D5AE4C + 4 * byte_1B22901EA[BYTE4(a2)]))();
}

BOOL sub_1B1D5AE4C@<W0>(float a1@<W0>, float a2@<W2>, int a3@<W8>)
{
  return !a3 && a1 == a2;
}

uint64_t sub_1B1D5B0DC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465657073 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D69546E69676562 && a2 == 0xE900000000000065 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7366664F656D6974 && a2 == 0xEA00000000007465 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F43746165706572 && a2 == 0xEB00000000746E75 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657665726F747561 && a2 == 0xEC00000073657372 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x77726F466C6C6966 && a2 == 0xEF65646F4D647261 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B233A550 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7546676E69736165 && a2 == 0xEE006E6F6974636ELL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x746E65726170 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x69546C61626F6C67 && a2 == 0xEA0000000000656DLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6D69546C61636F6CLL && a2 == 0xE900000000000065 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x657669746361 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6574656C706D6F63 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

unint64_t sub_1B1D5B6F0(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[40];
  _BYTE v14[24];
  uint64_t v15;

  v3 = (unint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v1)
  {
LABEL_3:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B19FC264((uint64_t)v14, v15);
    v4 = sub_1B2229A90();
    v3 = v4;
    switch(v4)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
        break;
      case 16:
      case 19:
      case 20:
      case 21:
        sub_1B19FC264((uint64_t)v14, v15);
        sub_1B2229A84();
        v3 = v8;
        break;
      case 17:
      case 18:
        sub_1B19FC264((uint64_t)v14, v15);
        v6 = sub_1B2229AB4();
        sub_1B19FC264((uint64_t)v14, v15);
        sub_1B2229A84();
        v3 = v6 | ((unint64_t)v7 << 32);
        break;
      case 22:
        sub_1B19FC264((uint64_t)v14, v15);
        sub_1B2229A84();
        v10 = v9;
        sub_1B19FC264((uint64_t)v14, v15);
        sub_1B2229A84();
        v12 = v11;
        sub_1B19FC264((uint64_t)v14, v15);
        sub_1B2229AB4();
        v3 = v10 | ((unint64_t)v12 << 32);
        break;
      default:
        sub_1B19FA198((uint64_t)v14, (uint64_t)v13);
        sub_1B22294CC();
        swift_allocError();
        sub_1B222949C();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
        swift_willThrow();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
        goto LABEL_3;
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

unint64_t sub_1B1D5BAD0()
{
  unint64_t result;

  result = qword_1ED4BA098;
  if (!qword_1ED4BA098)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2290AC8, &type metadata for FillMode);
    atomic_store(result, (unint64_t *)&qword_1ED4BA098);
  }
  return result;
}

uint64_t type metadata accessor for KeyframeAnimation.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeAnimation.CodingKeys);
}

unint64_t sub_1B1D5BB20()
{
  unint64_t result;

  result = qword_1ED4B8DF0;
  if (!qword_1ED4B8DF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1FC4, &type metadata for KeyframeTimeline);
    atomic_store(result, (unint64_t *)&qword_1ED4B8DF0);
  }
  return result;
}

unint64_t sub_1B1D5BB64()
{
  unint64_t result;

  result = qword_1ED4B8730;
  if (!qword_1ED4B8730)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2290A28, &type metadata for Interpolation);
    atomic_store(result, (unint64_t *)&qword_1ED4B8730);
  }
  return result;
}

unint64_t sub_1B1D5BBA8()
{
  unint64_t result;

  result = qword_1EEF5E0F8;
  if (!qword_1EEF5E0F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2290A00, &type metadata for Interpolation);
    atomic_store(result, (unint64_t *)&qword_1EEF5E0F8);
  }
  return result;
}

unint64_t sub_1B1D5BBEC()
{
  unint64_t result;

  result = qword_1EEF5E100;
  if (!qword_1EEF5E100)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1F9C, &type metadata for KeyframeTimeline);
    atomic_store(result, (unint64_t *)&qword_1EEF5E100);
  }
  return result;
}

uint64_t sub_1B1D5BC30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  char v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int8 v38;
  int v39;
  char v40;

  sub_1B19F8E54(0, &qword_1ED4BABB0, (uint64_t (*)(void))sub_1B1D5C080, (uint64_t)&type metadata for AnimationTimeSource.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v35 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v31 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D5C080();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v6;
  LOBYTE(v36) = 0;
  sub_1B22297F0();
  v12 = v11;
  LOBYTE(v36) = 1;
  sub_1B22297F0();
  v14 = v13;
  LOBYTE(v36) = 2;
  sub_1B22297F0();
  v16 = v15;
  LOBYTE(v36) = 3;
  sub_1B22297F0();
  v18 = v17;
  LOBYTE(v36) = 4;
  sub_1B22297F0();
  v20 = v19;
  LOBYTE(v36) = 5;
  v39 = sub_1B22297D8();
  v40 = 6;
  sub_1B1A71B58();
  sub_1B2229814();
  v21 = v36;
  v40 = 7;
  sub_1B2229814();
  v22 = v36;
  v40 = 8;
  sub_1B1A72038();
  sub_1B2229814();
  v34 = v36;
  v32 = v38;
  v33 = v37;
  v40 = 9;
  sub_1B1A08878();
  sub_1B2229814();
  v23 = v36;
  LOBYTE(v36) = 10;
  sub_1B22297F0();
  v25 = v24;
  LOBYTE(v36) = 11;
  sub_1B22297F0();
  v27 = v26;
  LOBYTE(v36) = 12;
  v28 = sub_1B22297D8();
  LOBYTE(v36) = 13;
  v29 = sub_1B22297D8();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v35);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)a2 = v12;
  *(_DWORD *)(a2 + 4) = v14;
  *(_DWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a2 + 12) = v18;
  *(_DWORD *)(a2 + 16) = v20;
  *(_BYTE *)(a2 + 20) = v39 & 1;
  *(_BYTE *)(a2 + 21) = v21;
  *(_BYTE *)(a2 + 22) = v22;
  *(_QWORD *)(a2 + 24) = v34;
  *(_DWORD *)(a2 + 32) = v33;
  *(_BYTE *)(a2 + 36) = v32;
  *(_QWORD *)(a2 + 40) = v23;
  *(_DWORD *)(a2 + 48) = v25;
  *(_DWORD *)(a2 + 52) = v27;
  *(_BYTE *)(a2 + 56) = v28 & 1;
  *(_BYTE *)(a2 + 57) = v29 & 1;
  return result;
}

unint64_t sub_1B1D5C080()
{
  unint64_t result;

  result = qword_1ED4B9378;
  if (!qword_1ED4B9378)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22909B0, &type metadata for AnimationTimeSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9378);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnimationTimeSource.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationTimeSource.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1B1D5C1A0 + 4 * byte_1B229021E[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1B1D5C1D4 + 4 * byte_1B2290219[v4]))();
}

uint64_t sub_1B1D5C1D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D5C1DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D5C1E4);
  return result;
}

uint64_t sub_1B1D5C1F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D5C1F8);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1B1D5C1FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D5C204(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimeSource.CodingKeys()
{
  return &type metadata for AnimationTimeSource.CodingKeys;
}

uint64_t sub_1B1D5C220(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B1D5C26C + 4 * byte_1B2290228[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B1D5C2A0 + 4 * byte_1B2290223[v4]))();
}

uint64_t sub_1B1D5C2A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D5C2A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D5C2B0);
  return result;
}

uint64_t sub_1B1D5C2BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D5C2C4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B1D5C2C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D5C2D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D5C2DC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B1D5C374(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  _OWORD *v17;
  _OWORD *v18;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64) + 7;
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    v13 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v12 = *v13;
    v14 = ((unint64_t)v12 + v6 + 8) & ~v6;
    v15 = ((unint64_t)v13 + v6 + 8) & ~v6;
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v16(v14, v15, v4);
    v17 = (_OWORD *)((v7 + v14) & 0xFFFFFFFFFFFFF8);
    v18 = (_OWORD *)((v7 + v15) & 0xFFFFFFFFFFFFF8);
    *v17 = *v18;
    *(_QWORD *)(((unint64_t)v17 + 19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t sub_1B1D5C488(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1 + 15;
  swift_release();
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_unknownObjectRelease();
}

_QWORD *sub_1B1D5C4EC(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t, unint64_t, uint64_t);
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;

  v5 = *a2;
  v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
  swift_retain();
  v12(v10, v11, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_OWORD *)((v13 + v10) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_OWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  *(_QWORD *)(((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *sub_1B1D5C5A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  v6 = (unint64_t)a1 + 15;
  swift_retain();
  swift_release();
  *(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 8 + (v6 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  v10 = (v8 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (_QWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v12[1] = v14;
  v15 = (_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

_QWORD *sub_1B1D5C690(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)v4 + v7 + 8) & ~v7;
  v9 = ((unint64_t)v5 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v8, v9);
  v10 = *(_QWORD *)(v6 + 64) + 7;
  v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  *v11 = *v12;
  *(_QWORD *)(((unint64_t)v11 + 19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_1B1D5C734(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  v6 = (_QWORD *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *(_QWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v6 + v8 + 8) & ~v8;
  v10 = (v8 + 8 + (v5 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  (*(void (**)(uint64_t, unint64_t))(v7 + 40))(v9, v10);
  v11 = *(_QWORD *)(v7 + 64) + 7;
  v12 = (_QWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  swift_unknownObjectRelease();
  v12[1] = v14;
  v15 = (_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

uint64_t sub_1B1D5C804(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if (v5 > 0x7FFFFFFE)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                    + v7
                                                                    + 8) & ~v7);
    }
    else
    {
      v12 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
  }
  else
  {
    if (((((((*(_QWORD *)(v4 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1B1D5C898 + 4 * byte_1B229022D[v10]))();
  }
}

void sub_1B1D5C930(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 16) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_1B1D5CA40()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1B1D5CAC8);
}

void sub_1B1D5CA48(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1B1D5CA50);
  JUMPOUT(0x1B1D5CAC8);
}

void sub_1B1D5CA9C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1D5CAC8);
}

void sub_1B1D5CAA4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1D5CAC8);
}

uint64_t sub_1B1D5CAAC@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *(_WORD *)((char *)v6 + v7) = 0;
  if (!a1)
    goto LABEL_6;
  if (a2 <= 0x7FFFFFFE)
  {
    if (a1 > 0x7FFFFFFE)
      JUMPOUT(0x1B1D5CAB8);
    *v6 = a1;
LABEL_6:
    JUMPOUT(0x1B1D5CAC8);
  }
  return (*(uint64_t (**)(unint64_t))(v4 + 56))(((((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                + v5
                                                                + 8) & a3);
}

uint64_t type metadata accessor for KeyframeAnimationRuntime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyframeAnimationRuntime);
}

uint64_t sub_1B1D5CAEC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2229124();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1B1D5CB6C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);
  void *v19;
  const void *v20;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + v6;
  v10 = v6 & 0x100000;
  if (v7 > 7 || v10 != 0 || ((v8 + v7 + ((v7 + 17) & ~v7)) & ~v7) + v8 > 0x18)
  {
    v13 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    v14 = ~v7;
    v15 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v15;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v16 = (void *)((a1 + v7 + 17) & ~v7);
    v17 = (const void *)(((unint64_t)a2 + v7 + 17) & ~v7);
    v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    if (v18(v17, 1, v4))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
    }
    v19 = (void *)(((unint64_t)v16 + v9) & v14);
    v20 = (const void *)(((unint64_t)v17 + v9) & v14);
    if (v18(v20, 1, v4))
    {
      memcpy(v19, v20, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v19, v20, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t sub_1B1D5CD04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = a1 + v6 + 17;
  v8 = ~v6;
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v9(v7 & ~v6, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7 & ~v6, v4);
  v10 = (v7 | v6) + *(_QWORD *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84))
    ++v10;
  v11 = v10 & v8;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v10 & v8, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v11, v4);
  return result;
}

uint64_t sub_1B1D5CDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  int v11;
  size_t v12;
  size_t v13;
  size_t v14;
  void *v15;
  const void *v16;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = v7 + 17 + a1;
  v18 = ~v7;
  v9 = v7 + 17 + a2;
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_retain();
  v19 = v10;
  if (v10((const void *)(v9 & ~v7), 1, v5))
  {
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
    if (v11)
      v13 = *(_QWORD *)(v6 + 64);
    else
      v13 = v12 + 1;
    memcpy((void *)(v8 & ~v7), (const void *)(v9 & ~v7), v13);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8 & ~v7, v9 & ~v7, v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
    v11 = *(_DWORD *)(v6 + 84);
    v12 = *(_QWORD *)(v6 + 64);
  }
  if (v11)
    v14 = v12;
  else
    v14 = v12 + 1;
  v15 = (void *)(((v8 | v7) + v14) & v18);
  v16 = (const void *)(((v9 | v7) + v14) & v18);
  if (v19(v16, 1, v5))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1B1D5CF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  size_t v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v8 + 17 + a1;
  v21 = ~v8;
  v10 = v8 + 17 + a2;
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11((void *)(v9 & ~v8), 1, v6);
  v13 = v11((void *)(v10 & ~v8), 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9 & ~v8, v10 & ~v8, v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9 & ~v8, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v9 & ~v8, v10 & ~v8, v6);
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9 & ~v8, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy((void *)(v9 & ~v8), (const void *)(v10 & ~v8), v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = (void *)(((v9 | v8) + v15) & v21);
  v17 = (void *)(((v10 | v8) + v15) & v21);
  v18 = v11(v16, 1, v6);
  v19 = v11(v17, 1, v6);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v16, v17, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v16, v6);
    goto LABEL_18;
  }
  if (v19)
  {
LABEL_18:
    memcpy(v16, v17, v15);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v16, v17, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
  return a1;
}

uint64_t sub_1B1D5D160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  void *v13;
  const void *v14;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = v6 + 17 + a1;
  v8 = v6 + 17 + a2;
  v16 = ~v6;
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17(v8 & ~v6, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = *(_QWORD *)(v5 + 64);
    else
      v11 = v10 + 1;
    memcpy((void *)(v7 & ~v6), (const void *)(v8 & ~v6), v11);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7 & ~v6, v8 & ~v6, v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7 & ~v6, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = (void *)(((v7 | v6) + v12) & v16);
  v14 = (const void *)(((v8 | v6) + v12) & v16);
  if (v17((uint64_t)v14, 1, v4))
  {
    memcpy(v13, v14, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v13, v14, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
  }
  return a1;
}

uint64_t sub_1B1D5D2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  size_t v14;
  size_t v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v8 + 17 + a1;
  v21 = ~v8;
  v10 = v8 + 17 + a2;
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v12 = v11((void *)(v9 & ~v8), 1, v6);
  v13 = v11((void *)(v10 & ~v8), 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9 & ~v8, v10 & ~v8, v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9 & ~v8, 0, 1, v6);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v9 & ~v8, v10 & ~v8, v6);
      goto LABEL_10;
    }
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9 & ~v8, v6);
  }
  if (*(_DWORD *)(v7 + 84))
    v14 = *(_QWORD *)(v7 + 64);
  else
    v14 = *(_QWORD *)(v7 + 64) + 1;
  memcpy((void *)(v9 & ~v8), (const void *)(v10 & ~v8), v14);
LABEL_10:
  if (*(_DWORD *)(v7 + 84))
    v15 = *(_QWORD *)(v7 + 64);
  else
    v15 = *(_QWORD *)(v7 + 64) + 1;
  v16 = (void *)(((v9 | v8) + v15) & v21);
  v17 = (void *)(((v10 | v8) + v15) & v21);
  v18 = v11(v16, 1, v6);
  v19 = v11(v17, 1, v6);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v16, v17, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v16, v6);
    goto LABEL_18;
  }
  if (v19)
  {
LABEL_18:
    memcpy(v16, v17, v15);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v16, v17, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
  return a1;
}

uint64_t sub_1B1D5D4CC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = ((v8 + v9 + ((v9 + 17) & ~v9)) & ~v9) + v8;
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v6 > 0x7FFFFFFE)
      {
        v18 = (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v9 + 17) & ~v9);
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 8);
        if (v17 >= 0xFFFFFFFF)
          LODWORD(v17) = -1;
        if ((v17 + 1) >= 2)
          return v17;
        else
          return 0;
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void sub_1B1D5D664(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((v11
        + *(unsigned __int8 *)(v7 + 80)
        + ((*(unsigned __int8 *)(v7 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_1B1D5D8D8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1B1D5D8E0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_1B1D5D900()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1B1D5D910()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1B1D5D918()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for BasicAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BasicAnimation);
}

uint64_t sub_1B1D5D930()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B1D5D9B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *, uint64_t *, uint64_t);
  unint64_t v17;
  _OWORD *v18;
  _OWORD *v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  v11 = ((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    v15 = ~v8;
    v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v16(a1, a2, *(_QWORD *)(a3 + 16));
    v17 = ((unint64_t)a2 + v9) & v15;
    v16((uint64_t *)(((unint64_t)v4 + v9) & v15), (uint64_t *)v17, v5);
    v18 = (_OWORD *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFF8);
    v19 = (_OWORD *)((v10 + v17) & 0xFFFFFFFFFFFFF8);
    *v18 = *v19;
    *(_QWORD *)(((unint64_t)v18 + 19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v19 + 19) & 0xFFFFFFFFFFFFF8);
    swift_unknownObjectRetain();
  }
  return v4;
}

uint64_t sub_1B1D5DAC0(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(void (**)(unint64_t, uint64_t))(v4 + 8);
  v5(a1, v3);
  v5((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1D5DB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = (_OWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v13 = (_OWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFF8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1B1D5DBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v12[1] = v14;
  v15 = (_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

uint64_t sub_1B1D5DC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = (_OWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFF8);
  v13 = (_OWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B1D5DD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v8 + v9 + a1) & ~v9;
  v11 = (v8 + v9 + a2) & ~v9;
  v7(v10, v11, v5);
  v12 = (_QWORD *)((v8 + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_QWORD *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  swift_unknownObjectRelease();
  v12[1] = v14;
  v15 = (_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

uint64_t sub_1B1D5DDF8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = v7 + v8;
  v10 = v7 + 7;
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v15 = *(_QWORD *)((v10 + ((v9 + a1) & ~v8)) & 0xFFFFFFFFFFFFF8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      if ((v15 + 1) >= 2)
        return v15;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v6 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1B1D5DE8C + 4 * byte_1B229024E[v13]))();
  }
}

void sub_1B1D5DF20(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v11 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if ((((((_DWORD)v7 + 7 + (((_DWORD)v7 + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v9 = a3 - v6 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if ((((((_DWORD)v7 + 7 + (((_DWORD)v7 + (_DWORD)v8) & ~(_DWORD)v8)) & 0xFFFFFFF8) + 19) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v12 = ~v6 + a2;
    bzero(a1, ((((v7 + 7 + ((v7 + v8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1B1D5E030()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1B1D5E0B8);
}

void sub_1B1D5E038(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1B1D5E040);
  JUMPOUT(0x1B1D5E0B8);
}

void sub_1B1D5E08C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1D5E0B8);
}

void sub_1B1D5E094()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1D5E0B8);
}

uint64_t sub_1B1D5E09C@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)(v8 + v9) = 0;
  if (!a1)
    goto LABEL_6;
  if (a2 < 0x7FFFFFFE)
  {
    v4 = (_QWORD *)((v7 + ((v6 + v8) & a3)) & 0xFFFFFFFFFFFFFFF8);
    if (a1 > 0x7FFFFFFE)
      JUMPOUT(0x1B1D5E0A8);
    *v4 = a1;
LABEL_6:
    JUMPOUT(0x1B1D5E0B8);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v8);
}

uint64_t type metadata accessor for BasicAnimationRuntime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BasicAnimationRuntime);
}

uint64_t storeEnumTagSinglePayload for Interpolation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1D5E128 + 4 * byte_1B2290262[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1D5E15C + 4 * byte_1B229025D[v4]))();
}

uint64_t sub_1B1D5E15C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D5E164(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D5E16CLL);
  return result;
}

uint64_t sub_1B1D5E178(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D5E180);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1D5E184(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D5E18C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Interpolation()
{
  return &type metadata for Interpolation;
}

_QWORD *initializeBufferWithCopyOfBuffer for EasingFunction(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EasingFunction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EasingFunction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 249;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1D5E24C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 12) <= 6u)
    return *(unsigned __int8 *)(a1 + 12);
  else
    return (*(_DWORD *)a1 + 7);
}

uint64_t sub_1B1D5E264(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(_QWORD *)result = a2 - 7;
    *(_DWORD *)(result + 8) = 0;
    LOBYTE(a2) = 7;
  }
  *(_BYTE *)(result + 12) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EasingFunction()
{
  return &type metadata for EasingFunction;
}

uint64_t storeEnumTagSinglePayload for FillMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1D5E2DC + 4 * byte_1B229026C[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1D5E310 + 4 * byte_1B2290267[v4]))();
}

uint64_t sub_1B1D5E310(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D5E318(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D5E320);
  return result;
}

uint64_t sub_1B1D5E32C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D5E334);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1D5E338(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D5E340(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FillMode()
{
  return &type metadata for FillMode;
}

uint64_t sub_1B1D5E35C()
{
  return sub_1B1D5E388(&qword_1EEF5E110, &qword_1EEF5E118);
}

uint64_t sub_1B1D5E388(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    sub_1B1D5E43C(255, a2);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1D5E3CC()
{
  unint64_t result;

  result = qword_1EEF5E120;
  if (!qword_1EEF5E120)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2290688, &type metadata for FillMode);
    atomic_store(result, (unint64_t *)&qword_1EEF5E120);
  }
  return result;
}

uint64_t sub_1B1D5E410()
{
  return sub_1B1D5E388(&qword_1EEF5E128, &qword_1EEF5E130);
}

void sub_1B1D5E43C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1B2228B6C();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t sub_1B1D5E484()
{
  unint64_t result;

  result = qword_1EEF5E138;
  if (!qword_1EEF5E138)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2290788, &type metadata for Interpolation);
    atomic_store(result, (unint64_t *)&qword_1EEF5E138);
  }
  return result;
}

void sub_1B1D5E4C8()
{
  JUMPOUT(0x1B5E23E74);
}

unint64_t sub_1B1D5E4DC()
{
  unint64_t result;

  result = qword_1EEF5E140[0];
  if (!qword_1EEF5E140[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2290988, &type metadata for AnimationTimeSource.CodingKeys);
    atomic_store(result, qword_1EEF5E140);
  }
  return result;
}

unint64_t sub_1B1D5E524()
{
  unint64_t result;

  result = qword_1ED4B9388;
  if (!qword_1ED4B9388)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22908F8, &type metadata for AnimationTimeSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9388);
  }
  return result;
}

unint64_t sub_1B1D5E56C()
{
  unint64_t result;

  result = qword_1ED4B9380;
  if (!qword_1ED4B9380)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2290920, &type metadata for AnimationTimeSource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9380);
  }
  return result;
}

void sub_1B1D5E5B0()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1D5E5C0()
{
  JUMPOUT(0x1B5E23E74);
}

unint64_t sub_1B1D5E5D0()
{
  unint64_t result;

  result = qword_1ED4B8728;
  if (!qword_1ED4B8728)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2290710, &type metadata for Interpolation);
    atomic_store(result, (unint64_t *)&qword_1ED4B8728);
  }
  return result;
}

uint64_t sub_1B1D5E618(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_BYTE *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _BYTE v40[32];
  uint64_t v41;

  v29 = a5;
  v30 = a8;
  v10 = v9;
  v35 = a1;
  v36 = a2;
  v28 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v37 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v12);
  v14 = (char *)&v26 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v38 = v8;
  v39 = (char *)&v26 - v19;
  v20 = sub_1B2228D70();
  if (!v20)
    return sub_1B2228B00();
  v21 = v20;
  v27 = v17;
  v41 = sub_1B2228518();
  v34 = sub_1B22295A4();
  sub_1B2229544();
  sub_1B2228D4C();
  v22 = AssociatedTypeWitness;
  v23 = v33;
  while (1)
  {
    v24 = (void (*)(_BYTE *, _QWORD))sub_1B2228E24();
    (*(void (**)(char *))(v23 + 16))(v14);
    v24(v40, 0);
    v35(v14, v37);
    if (v10)
      break;
    v10 = 0;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v22);
    sub_1B222958C();
    sub_1B2228D94();
    if (!--v21)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v27);
      return v41;
    }
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v39, v27);
  swift_release();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v30, v37, v29);
}

void *sub_1B1D5E8D8(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  id v10;

  v4 = a3 << 6;
  v5 = (void *)sub_1B1D22DA8(a1, a3 << 6);
  v7 = v6;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    v8 = 0;
  }
  else
  {
    v9 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v10 = v5;
    v8 = &v9[v7];
  }
  memcpy(v8, a2, v4);
  return v5;
}

void *sub_1B1D5E978(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  id v10;

  v4 = 16 * a3;
  v5 = (void *)sub_1B1D22DA8(a1, 16 * a3);
  v7 = v6;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    v8 = 0;
  }
  else
  {
    v9 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v10 = v5;
    v8 = &v9[v7];
  }
  memcpy(v8, a2, v4);
  return v5;
}

void *sub_1B1D5EA18(uint64_t a1, uint64_t a2, __n128 a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __n128 *v13;

  v3 = (void *)sub_1B1D22DA8(a1, 16 * a2);
  v5 = v4;
  v7 = v6;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) != (id)2)
  {
    v8 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v9 = v3;
    if (v7 >= 0)
      v10 = v7;
    else
      v10 = v7 + 15;
    if (v8)
      v11 = (unint64_t)(v7 + 15) >= 0x1F;
    else
      v11 = 0;
    if (v11)
    {
      v12 = v10 >> 4;
      v13 = (__n128 *)&v8[v5];
      do
      {
        *v13++ = a3;
        --v12;
      }
      while (v12);
    }
  }
  return v3;
}

uint64_t sub_1B1D5EACC()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    if (((v1[537] & 1) != 0 || (v1[539] & 1) != 0 || v1[540] == 1) && v1[538] == 1)
    {
      swift_retain();
      sub_1B1D2C354(6, 0xD000000000000018, 0x80000001B232AC80, 1, 14, 0);
      return swift_release();
    }
  }
  else
  {
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

void sub_1B1D5EBC4(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, int a6, _QWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v51 = a6;
  v54 = a5;
  v55 = a1;
  v11 = a2 + 537;
  v12 = sub_1B222826C();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = a2;
  v49 = *(unsigned __int8 *)(a2 + 537);
  if ((v49 & 1) != 0 || (*(_BYTE *)(v11 + 2) & 1) != 0 || *(_BYTE *)(v11 + 3) == 1)
  {
    v53 = v11;
    v48 = v15;
    v18 = (uint64_t *)a7[11];
    v19 = a7[12];
    v20 = a3;
    v21 = a7[13];
    v22 = a7[2];
    v47 = sub_1B1A12038((uint64_t)&type metadata for VFXDrawCallHandler, (uint64_t)&off_1E63969B0, v18, v19, v21, v22);
    v23 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v18, v19, v21, v22);
    if ((a4 & 1) != 0 || (v52 = sub_1B1D18540(v20), !v24))
    {
      v26 = a4;
      sub_1B2228260();
      v52 = sub_1B2228224();
      v25 = v27;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v48);
    }
    else
    {
      v25 = v24;
      v26 = a4;
    }
    v28 = *(_BYTE *)(v53 + 3) ^ 1;
    if (*(_BYTE *)(v53 + 3))
      v29 = 1065353216;
    else
      v29 = 0;
    LODWORD(v53) = v29;
    if ((v28 & 1) == 0 && (v26 & 1) == 0)
    {
      v30 = sub_1B1D18714(v20);
      v28 = 0;
      if ((v30 & 0x100000000) != 0)
        v31 = 1065353216;
      else
        v31 = v30;
      LODWORD(v53) = v31;
    }
    v32 = a7[6];
    v33 = a7[7];
    v34 = v33 - v32;
    if (v33 != v32)
    {
      v35 = v54 == 1;
      v36 = (uint64_t *)(v23 + 8 * v32);
      v37 = v47 + 56 * v32 + 24;
      v38 = 8 * (char)v54;
      do
      {
        v45 = *v36;
        *(_DWORD *)(v37 + 8) = v35;
        if ((v51 & 1) != 0)
        {
          v40 = 0xED00006574697257;
          v39 = 0x6874706544584656;
        }
        else
        {
          v39 = *(_QWORD *)&aOpaque_6[v38];
          v40 = *(_QWORD *)((char *)&unk_1B22913D8 + v38);
        }
        *(_QWORD *)(v37 - 24) = v39;
        *(_QWORD *)(v37 - 16) = v40;
        swift_retain();
        swift_bridgeObjectRelease();
        *(_BYTE *)(v37 + 13) = (*(_BYTE *)(v45 + 370) & 4) != 0;
        *(_BYTE *)(v37 + 14) = *(_BYTE *)(v45 + 257);
        *(_QWORD *)(v37 + 16) = v52;
        *(_QWORD *)(v37 + 24) = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v41 = swift_allocObject();
        swift_weakInit();
        v42 = swift_allocObject();
        swift_weakInit();
        v43 = swift_allocObject();
        *(_QWORD *)(v43 + 16) = v41;
        *(_QWORD *)(v43 + 24) = v42;
        *(_DWORD *)(v43 + 32) = v53;
        *(_BYTE *)(v43 + 36) = v28;
        *(_BYTE *)(v43 + 37) = v54;
        *(_BYTE *)(v43 + 38) = v49;
        *(_QWORD *)(v43 + 40) = v45;
        v44 = *(_QWORD *)(v37 - 8);
        *(_QWORD *)(v37 - 8) = sub_1B1D65FC4;
        *(_QWORD *)v37 = v43;
        sub_1B19E5A18(v44);
        ++v36;
        v37 += 56;
        --v34;
      }
      while (v34);
    }
    swift_bridgeObjectRelease();
  }
}

void sub_1B1D5EEF4()
{
  swift_getTupleTypeMetadata2();
  JUMPOUT(0x1B5E20700);
}

uint64_t sub_1B1D5EF34()
{
  return sub_1B2228D28();
}

uint64_t sub_1B1D5EF44()
{
  return sub_1B2228D40();
}

uint64_t sub_1B1D5EF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[32];

  v4 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata2, v7);
  v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = &v23[-v13];
  v16 = *(_QWORD *)(a1 + *(int *)(v15 + 48));
  v17 = *(_QWORD *)(v4 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, double))(v17 + 32))(&v23[-v13], a1, v4, v12);
  *(_QWORD *)&v14[*(int *)(TupleTypeMetadata2 + 48)] = v16;
  v18 = *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v9, v14, v4);
  *(_QWORD *)&v9[v18] = v16;
  sub_1B2228B6C();
  v19 = (void (*)(_BYTE *, _QWORD))sub_1B2228BA8();
  v21 = v20;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v17 + 40))(v20, v9, v4);
  *(_QWORD *)(v21 + *(int *)(TupleTypeMetadata2 + 48)) = v16;
  v19(v23, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v14, TupleTypeMetadata2);
}

void (*sub_1B1D5F0AC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  swift_getTupleTypeMetadata2();
  sub_1B2228B6C();
  v2[4] = sub_1B2228BA8();
  return sub_1B1D5F13C;
}

void sub_1B1D5F13C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t sub_1B1D5F16C()
{
  sub_1B217BCDC();
  return swift_bridgeObjectRelease();
}

void (*sub_1B1D5F1A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4))(_QWORD *a1)
{
  _QWORD *v8;

  v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = sub_1B216D7B4(v8, a2, a3, a4);
  return sub_1B19FAAD0;
}

uint64_t sub_1B1D5F20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2290EB8, a3);
  return sub_1B22286BC();
}

uint64_t sub_1B1D5F280()
{
  MEMORY[0x1B5E23E74](&unk_1B2290F88);
  return sub_1B2228D1C();
}

_QWORD *sub_1B1D5F2D0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D5F63C(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB508]);
}

uint64_t sub_1B1D5F2DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2290F88, a3);
  return sub_1B2228D28();
}

uint64_t sub_1B1D5F340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MEMORY[0x1B5E23E74](&unk_1B2290F88, a4);
  return sub_1B2228D04();
}

uint64_t sub_1B1D5F3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B2290F88, a3);
  return sub_1B2228D40();
}

void sub_1B1D5F3F8()
{
  sub_1B1D5EEF4();
}

uint64_t sub_1B1D5F418(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*sub_1B1D5F428(uint64_t *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  size_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  v6 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  a1[1] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v8 = (char *)malloc(v7);
  a1[2] = (uint64_t)v8;
  v9 = (char *)malloc(v7);
  a1[3] = (uint64_t)v9;
  sub_1B2228BB4();
  v10 = *(_QWORD *)&v9[*(int *)(TupleTypeMetadata2 + 48)];
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v8, v9, v4);
  *(_QWORD *)&v8[*(int *)(TupleTypeMetadata2 + 48)] = v10;
  return sub_1B1D5F500;
}

void sub_1B1D5F500(_QWORD *a1)
{
  void *v1;
  void *v2;

  v2 = (void *)a1[2];
  v1 = (void *)a1[3];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v2, *a1);
  free(v1);
  free(v2);
}

uint64_t sub_1B1D5F538@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v6;

  v6 = MEMORY[0x1B5E23E74](&unk_1B2290F18);
  return sub_1B216DA28(a1, a2, v6, a3);
}

uint64_t sub_1B1D5F580(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2290F88, a1);
  return sub_1B2228D34();
}

uint64_t sub_1B1D5F5E0()
{
  MEMORY[0x1B5E23E74](&unk_1B2290F88);
  return sub_1B2228D10();
}

_QWORD *sub_1B1D5F630(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D5F63C(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))MEMORY[0x1E0DEB500]);
}

_QWORD *sub_1B1D5F63C(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;

  v7 = MEMORY[0x1B5E23E74](&unk_1B2290F88);
  result = a4(&v9, a1, a2, v7, MEMORY[0x1E0DEB458]);
  *a1 = v9;
  return result;
}

void sub_1B1D5F6A0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t sub_1B1D5F6AC(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2291138, a1);
  return sub_1B2228DA0();
}

uint64_t sub_1B1D5F6E0(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B2291138, a1);
  return sub_1B2228DAC();
}

uint64_t sub_1B1D5F718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];
  uint64_t v11;

  v11 = a1;
  v10[2] = a2;
  v4 = type metadata accessor for IndexedArray(0, a2, a3, a4);
  v5 = MEMORY[0x1B5E23E74](&unk_1B2291138, v4);
  v6 = MEMORY[0x1E0DEA968];
  v11 = sub_1B1D5E618((void (*)(char *, char *))sub_1B1D662DC, (uint64_t)v10, v4, MEMORY[0x1E0DEA968], MEMORY[0x1E0DEDCE8], v5, MEMORY[0x1E0DEDD18], v7);
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, v6, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  v8 = sub_1B2228644();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1D5F7FC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  sub_1B2228890();
  swift_getTupleTypeMetadata2();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  result = sub_1B2229CDC();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

uint64_t sub_1B1D5F8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1B1D5F718(*v4, *(_QWORD *)(a1 + 16), a3, a4);
}

uint64_t sub_1B1D5F8EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v4 = sub_1B222A0FC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&qword_1EEF5DA60, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEDFC8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v17 - v11;
  v17[1] = a1;
  v17[0] = MEMORY[0x1E0DEE9D8];
  v13 = sub_1B222A0E4();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  type metadata accessor for IndexedArray(0, a2, v14, v15);
  sub_1B1791524(0, &qword_1EEF5DA68, (uint64_t (*)(uint64_t))sub_1B1D2319C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1D2325C();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0DEDFE8], v4);
  swift_bridgeObjectRetain();
  return sub_1B222A114();
}

uint64_t sub_1B1D5FA70(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1D5F8EC(*v1, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1B1D5FA80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1D5FB0C()
{
  sub_1B1D66BB8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D5FB34()
{
  sub_1B1D66BB8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D5FB5C@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t result;
  uint64_t v13;

  sub_1B1D66BFC(0, &qword_1EEF5E1E8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D66BB8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v11 = sub_1B2229838();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v11;
  return result;
}

uint64_t sub_1B1D5FC84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1D66BFC(0, &qword_1EEF5E1F8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D66BB8();
  sub_1B222A180();
  sub_1B222997C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1B1D5FD74(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1B1D5FD7C@<X0>(_QWORD *a1@<X8>)
{
  if (qword_1ED4B7948 != -1)
    swift_once();
  *a1 = qword_1ED4D09B0;
  return swift_retain();
}

void sub_1B1D5FDCC(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v5 = *a1;
  if (qword_1ED4BF578 != -1)
    swift_once();
  v6 = *(_QWORD *)(v2 + 264);
  v7 = 0uLL;
  if (*(_QWORD *)(v6 + 16))
  {
    v8 = *((_QWORD *)a1 + 11);
    v25 = dword_1ED4BF580 & v5;
    v26 = *(_OWORD *)(a1 + 2);
    v27 = *(_OWORD *)(a1 + 6);
    v28 = *(_OWORD *)(a1 + 10);
    v29 = *(_OWORD *)(a1 + 14);
    v30 = *(_OWORD *)(a1 + 18);
    v31 = v8;
    sub_1B1DC3F84((int64x2_t *)&v25);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(v6 + 56) + 112 * v9;
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_QWORD *)(v11 + 16);
      v15 = *(unsigned __int8 *)(v11 + 24);
      v23 = *(_OWORD *)(v11 + 48);
      v24 = *(_OWORD *)(v11 + 32);
      v21 = *(_OWORD *)(v11 + 88);
      v22 = *(_OWORD *)(v11 + 72);
      v16 = *(_QWORD *)(v11 + 64);
      v17 = *(_QWORD *)(v11 + 104);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v19 = v21;
      v18 = v22;
      v20 = v23;
      v7 = v24;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v20 = 0uLL;
      v18 = 0uLL;
      v19 = 0uLL;
      v7 = 0uLL;
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v20 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
  }
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v20;
  *(_QWORD *)(a2 + 64) = v16;
  *(_OWORD *)(a2 + 72) = v18;
  *(_OWORD *)(a2 + 88) = v19;
  *(_QWORD *)(a2 + 104) = v17;
}

uint64_t sub_1B1D5FF54()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for DrawCall();
  v0 = swift_allocObject();
  result = sub_1B1D604AC();
  qword_1ED4D09B0 = v0;
  return result;
}

uint64_t sub_1B1D5FF8C()
{
  uint64_t v0;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = 3;
  *(_DWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 1;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_BYTE *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 200) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  swift_unknownObjectRelease();
  *(_BYTE *)(v0 + 256) = 0;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 264) + 16))
  {
    swift_isUniquelyReferenced_nonNull_native();
    v2 = *(_QWORD *)(v0 + 264);
    *(_QWORD *)(v0 + 264) = 0x8000000000000000;
    sub_1B1D66814();
    sub_1B2229634();
    *(_QWORD *)(v0 + 264) = v2;
    swift_bridgeObjectRelease();
  }
  sub_1B1EC7DB8(1);
  *(_QWORD *)(v0 + 392) = 0;
  *(_QWORD *)(v0 + 400) = 0;
  *(_QWORD *)(v0 + 384) = 0;
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1D60088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v1 + 24) = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 48) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v1 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(v1 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(v1 + 96) = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(v1 + 104) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(v1 + 112) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(v1 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(v1 + 128) = *(_QWORD *)(a1 + 128);
  *(_DWORD *)(v1 + 136) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(v1 + 140) = *(_DWORD *)(a1 + 140);
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(v1 + 152) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(v1 + 160) = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(v1 + 168) = *(_QWORD *)(a1 + 168);
  *(_BYTE *)(v1 + 176) = *(_BYTE *)(a1 + 176);
  v5 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)(v1 + 184) = *(_OWORD *)(a1 + 184);
  *(_QWORD *)(v1 + 200) = v5;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(v1 + 208) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(v1 + 224) = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(v1 + 240) = *(_OWORD *)(a1 + 240);
  *(_BYTE *)(v1 + 256) = *(_BYTE *)(a1 + 256);
  *(_QWORD *)(v1 + 264) = *(_QWORD *)(a1 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a1 + 280);
  v7 = *(_QWORD *)(a1 + 288);
  v8 = *(_QWORD *)(a1 + 296);
  v9 = *(_QWORD *)(a1 + 304);
  v10 = *(_QWORD *)(a1 + 312);
  v12 = *(_QWORD *)(a1 + 320);
  v11 = *(_QWORD *)(a1 + 328);
  v14 = *(_QWORD *)(a1 + 336);
  v13 = *(_QWORD *)(a1 + 344);
  v18 = *(_QWORD *)(a1 + 352);
  v15 = *(_DWORD *)(a1 + 368);
  v19 = *(_QWORD *)(a1 + 360);
  v20 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(v1 + 272) = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(v1 + 280) = v6;
  *(_QWORD *)(v1 + 288) = v7;
  *(_QWORD *)(v1 + 296) = v8;
  *(_QWORD *)(v1 + 304) = v9;
  *(_QWORD *)(v1 + 312) = v10;
  *(_QWORD *)(v1 + 320) = v12;
  *(_QWORD *)(v1 + 328) = v11;
  *(_QWORD *)(v1 + 336) = v14;
  *(_QWORD *)(v1 + 344) = v13;
  *(_QWORD *)(v1 + 352) = v18;
  *(_QWORD *)(v1 + 360) = v19;
  *(_DWORD *)(v1 + 368) = v15;
  *(_QWORD *)(v1 + 376) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a1 + 400);
  *(_OWORD *)(v1 + 384) = *(_OWORD *)(a1 + 384);
  *(_QWORD *)(v1 + 400) = v16;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1D6038C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DrawCall()
{
  return objc_opt_self();
}

uint64_t sub_1B1D604AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = 3;
  *(_DWORD *)(v0 + 24) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_QWORD *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = 1;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_BYTE *)(v0 + 176) = 0;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 242) = 0u;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 264) = sub_1B1B956CC(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 272) = v1;
  *(_QWORD *)(v0 + 280) = v1;
  *(_QWORD *)(v0 + 288) = v1;
  *(_QWORD *)(v0 + 296) = v1;
  *(_QWORD *)(v0 + 304) = v1;
  *(_QWORD *)(v0 + 312) = v1;
  *(_QWORD *)(v0 + 320) = v1;
  *(_QWORD *)(v0 + 328) = v1;
  *(_QWORD *)(v0 + 336) = v1;
  *(_QWORD *)(v0 + 344) = v1;
  *(_QWORD *)(v0 + 352) = v1;
  *(_QWORD *)(v0 + 360) = v1;
  *(_DWORD *)(v0 + 368) = 0;
  *(_QWORD *)(v0 + 376) = v1;
  *(_QWORD *)(v0 + 384) = 0;
  *(_QWORD *)(v0 + 392) = 0;
  *(_QWORD *)(v0 + 400) = 0;
  return v0;
}

id sub_1B1D60544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[4];
  unsigned __int8 v15;

  v2 = v1;
  sub_1B1D2DB70(v2, (uint64_t)v13);
  sub_1B1D2DB70(v2, (uint64_t)v14);
  if (v15 >> 6 > 1u)
  {
    v15 &= 0x3Fu;
    v6 = LOBYTE(v14[0]);
    v8 = v14[1];
    v7 = v14[2];
    sub_1B1D65D24(a1 + 40, (uint64_t)&v10);
    if (v11)
    {
      sub_1B1A02518(&v10, (uint64_t)v12);
      if (v7)
      {
        v9 = (void **)sub_1B19FA070(v12, v12[3]);
        v4 = sub_1B1F4D310(v6, v8, v7, *v9);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
        return v4;
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
    }
    else
    {
      sub_1B1D65D88((uint64_t)&v10);
    }
    __asm { BR              X9 }
  }
  v4 = (id)v14[0];
  swift_unknownObjectRetain();
  return v4;
}

void sub_1B1D60660()
{
  uint64_t v0;
  uint64_t v1;

  if (!v0)
    goto LABEL_11;
  if (v1 == 0x6E6F43746867696CLL && v0 == 0xEE0073746E617473 || (sub_1B2229D24() & 1) != 0)
  {
    sub_1B1E8BEA0();
    goto LABEL_12;
  }
  if (v1 == 0x74736E6F436C6269 && v0 == 0xEC00000073746E61 || (sub_1B2229D24() & 1) != 0)
  {
    sub_1B1E8C084();
  }
  else
  {
LABEL_11:
    sub_1B2229688();
    __break(1u);
  }
LABEL_12:
  JUMPOUT(0x1B1D605A4);
}

void sub_1B1D608F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1D60930()
{
  uint64_t v0;

  swift_unknownObjectRetain();
  return v0;
}

void sub_1B1D60E04()
{
  JUMPOUT(0x1B1D60E60);
}

void sub_1B1D60E10()
{
  JUMPOUT(0x1B1D60E60);
}

void sub_1B1D60E1C()
{
  JUMPOUT(0x1B1D60E60);
}

void sub_1B1D60E28()
{
  JUMPOUT(0x1B1D60E60);
}

void sub_1B1D60E34()
{
  JUMPOUT(0x1B1D60E60);
}

void sub_1B1D60E40()
{
  JUMPOUT(0x1B1D60E60);
}

void sub_1B1D60E4C()
{
  JUMPOUT(0x1B1D60E60);
}

uint64_t sub_1B1D60ED0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;

  v4 = v3;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    if (sub_1B22296AC())
    {
      v11 = sub_1B1D64D54(a1);
      swift_bridgeObjectRelease();
      v9 = (uint64_t)(v11 + 4);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v9 = -8;
    }
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
    swift_bridgeObjectRetain();
  }
  objc_msgSend(v4, sel_useResources_count_usage_stages_, v9, v8, a2, a3);
  return swift_unknownObjectRelease();
}

void sub_1B1D60FC0(uint64_t a1, int *a2, uint64_t *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  unint64_t *v42;
  int32x4_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71[4];
  uint64_t v72;
  int v73[4];
  int v74[4];
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  _QWORD v82[14];
  _QWORD v83[14];
  _OWORD v84[7];
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  sub_1B1A18378((uint64_t)a3, (uint64_t)v82, (unint64_t *)&unk_1ED4B8420, (uint64_t)&type metadata for RenderStates);
  v12 = v82[0];
  v13 = v82[1];
  sub_1B1A18378((uint64_t)a3, (uint64_t)v83, (unint64_t *)&unk_1ED4B8420, (uint64_t)&type metadata for RenderStates);
  if (v83[0])
    goto LABEL_2;
  v26 = *a2;
  if (qword_1ED4BF578 != -1)
    swift_once();
  v27 = *(_QWORD *)(a1 + 264);
  if (*(_QWORD *)(v27 + 16))
  {
    v28 = *((_QWORD *)a2 + 11);
    v85 = dword_1ED4BF580 & v26;
    v86 = *(_OWORD *)(a2 + 2);
    v87 = *(_OWORD *)(a2 + 6);
    v88 = *(_OWORD *)(a2 + 10);
    v89 = *(_OWORD *)(a2 + 14);
    v90 = *(_OWORD *)(a2 + 18);
    v91 = v28;
    sub_1B1DC3F84((int64x2_t *)&v85);
    if ((v30 & 1) != 0)
    {
      v31 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 112 * v29);
      v12 = *v31;
      v13 = v31[1];
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
LABEL_2:
      ObjectType = swift_getObjectType();
      sub_1B1D66084(a3);
      objc_msgSend(a4, sel_setRenderPipelineState_, v12);
      objc_msgSend(a4, sel_setDepthStencilState_, v13);
      if (*(_BYTE *)(a1 + 176))
        v15 = *(_QWORD *)(a1 + 144) == 0;
      else
        v15 = *(_QWORD *)(a1 + 144);
      objc_msgSend(a4, sel_setFrontFacingWinding_, v15);
      objc_msgSend(a4, sel_setCullMode_, *(_QWORD *)(a1 + 152));
      objc_msgSend(a4, sel_setTriangleFillMode_, *(_QWORD *)(a1 + 160));
      if ((*(_BYTE *)(*(_QWORD *)a5 + 24) & 8) != 0)
        objc_msgSend(a4, sel_setDepthClipMode_, *(_QWORD *)(a1 + 168));
      objc_msgSend(a4, sel_setStencilFrontReferenceValue_backReferenceValue_, *(unsigned int *)(a1 + 136), *(unsigned int *)(a1 + 140));
      v16 = *(_OWORD *)(a1 + 352);
      v84[4] = *(_OWORD *)(a1 + 336);
      v84[5] = v16;
      v84[6] = *(_OWORD *)(a1 + 368);
      v17 = *(_OWORD *)(a1 + 288);
      v84[0] = *(_OWORD *)(a1 + 272);
      v84[1] = v17;
      v18 = *(_OWORD *)(a1 + 320);
      if (*(int *)(a1 + 240) <= 0)
        v19 = 3;
      else
        v19 = 26;
      v84[2] = *(_OWORD *)(a1 + 304);
      v84[3] = v18;
      sub_1B1D66100((uint64_t)v84);
      sub_1B1D64F30(v84, a4, a5, v19);
      sub_1B1D661D4((uint64_t)v84);
      v20 = *(_QWORD *)(a1 + 184);
      if (v20)
      {
        v21 = *(_QWORD *)(a1 + 192);
        swift_unknownObjectRetain();
        objc_msgSend(a4, sel_setTessellationFactorBuffer_offset_instanceStride_, v20, v21, 0);
        v23 = *(_QWORD *)(a1 + 104);
        v22 = *(_QWORD *)(a1 + 112);
        v24 = *(_QWORD *)(a1 + 32);
        if (v24)
        {
          swift_unknownObjectRetain();
          v25 = *(_QWORD *)(a1 + 40);
        }
        else
        {
          v25 = 0;
        }
        objc_msgSend(a4, sel_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_, 0, v22, v23, v24, v25, *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v42 = qword_1EEF61000;
        goto LABEL_43;
      }
      v32 = *(_QWORD *)(a1 + 384);
      if (v32)
      {
        v33 = *(_QWORD *)(a1 + 392);
        v34 = *(_OWORD *)(a1 + 240);
        v35 = v34;
        if ((int)v34 >= 1)
        {
          v36 = *(int *)(a1 + 224);
          v37 = *(int *)(a1 + 228);
          v38 = *(int *)(a1 + 232);
          *(_OWORD *)v71 = v34;
          swift_unknownObjectRetain();
          sub_1B1BA8088(v36, v37, v38, &v80);
          *(_OWORD *)v73 = v80;
          v39 = v81;
          sub_1B1BA8088(v35, v71[1], v71[2], &v80);
          v40 = v81;
          v41 = v80;
          v80 = *(_OWORD *)v73;
          v81 = v39;
          v78 = v41;
          v79 = v40;
          objc_msgSend(a4, sel_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_, v32, v33, &v80, &v78);
          swift_unknownObjectRelease();
          v42 = qword_1EEF61000;
          goto LABEL_43;
        }
        v52 = *(_QWORD *)(a1 + 32);
        if (v52)
          objc_msgSend(a4, sel_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset_, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 56), v52, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
        else
          objc_msgSend(a4, sel_drawPrimitives_indirectBuffer_indirectBufferOffset_, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 384), *(_QWORD *)(a1 + 392));
      }
      else
      {
        v43 = *(int32x4_t *)(a1 + 240);
        if (v43.i32[0] < 1)
        {
          if ((*((_BYTE *)a2 + 1) & 0x20) != 0 && (v53 = *(_QWORD *)(a1 + 80)) != 0)
          {
            v68 = *(_QWORD *)(a1 + 88);
            v69 = *(_QWORD *)(a1 + 96);
            v70 = *(_QWORD *)(a1 + 56);
            v54 = 4;
            if (!v70)
              v54 = 2;
            v75 = *(_QWORD *)(a1 + 96) / v54;
            swift_unknownObjectRetain();
          }
          else
          {
            v55 = *(_QWORD *)(a1 + 40);
            v56 = *(_QWORD *)(a1 + 48);
            v57 = *(_QWORD *)(a1 + 64);
            v58 = swift_unknownObjectRetain();
            if (!v58)
            {
              objc_msgSend(a4, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance_, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
              v42 = qword_1EEF61000;
              v65 = qword_1EEF61320;
              if ((unint64_t)qword_1EEF61320 < 0x2540BE40ALL || !a6)
                goto LABEL_44;
              swift_getObjectType();
              v66 = *(_QWORD *)(a1 + 120) * *(_QWORD *)(a1 + 104);
              swift_unknownObjectRetain();
              objc_msgSend(a6, sel_setStatsVertexCount_, (char *)objc_msgSend(a6, sel_statsVertexCount) + v66 * sub_1B1F4D024());
              v67 = *(_QWORD *)(a1 + 104);
              switch(*(_QWORD *)(a1 + 16))
              {
                case 0:
                  break;
                case 1:
                  v67 /= 2;
                  break;
                case 2:
                  --v67;
                  break;
                case 3:
                  v67 /= 3;
                  break;
                case 4:
                  v67 -= 2;
                  break;
                default:
                  v67 = 0;
                  break;
              }
              objc_msgSend(a6, sel_setStatsPrimitiveCount_, (char *)objc_msgSend(a6, sel_statsPrimitiveCount) + *(_QWORD *)(a1 + 120) * v67 * sub_1B1F4D024());
              swift_unknownObjectRelease();
LABEL_43:
              v65 = v42[100];
LABEL_44:
              if (v65 >= 0x2540BE40ALL)
              {
                if (a6)
                {
                  objc_msgSend(a6, sel_setStatsDrawcallCount_, (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_statsDrawcallCount) + 1);
                  swift_unknownObjectRelease();
                }
              }
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              return;
            }
            LODWORD(v69) = v56;
            v70 = *(_QWORD *)(a1 + 56);
            v53 = v58;
            v75 = v57;
            v68 = v55;
          }
          v59 = *(_QWORD *)(a1 + 16);
          v60 = *(_QWORD *)(a1 + 120);
          v72 = *(_QWORD *)(a1 + 112);
          v61 = *(_QWORD *)(a1 + 128);
          swift_unknownObjectRetain();
          sub_1B20BFD40(v59, v75, v70, v53, v68, v69, v60, v72, v61, ObjectType);
          v42 = qword_1EEF61000;
          if ((unint64_t)qword_1EEF61320 >= 0x2540BE40ALL && a6)
          {
            swift_getObjectType();
            v62 = *(_QWORD *)(a1 + 120) * *(_QWORD *)(a1 + 64);
            swift_unknownObjectRetain();
            objc_msgSend(a6, sel_setStatsVertexCount_, (char *)objc_msgSend(a6, sel_statsVertexCount) + v62 * sub_1B1F4D024());
            v63 = v75;
            switch(*(_QWORD *)(a1 + 16))
            {
              case 0:
                break;
              case 1:
                if (v75 >= 0)
                  v64 = v75;
                else
                  v64 = v75 + 1;
                v63 = v64 >> 1;
                break;
              case 2:
                v63 = v75 - 1;
                break;
              case 3:
                v63 = v75 / 3;
                break;
              case 4:
                v63 = v75 - 2;
                break;
              default:
                v63 = 0;
                break;
            }
            objc_msgSend(a6, sel_setStatsPrimitiveCount_, (char *)objc_msgSend(a6, sel_statsPrimitiveCount) + *(_QWORD *)(a1 + 120) * v63 * sub_1B1F4D024());
            swift_unknownObjectRelease();
          }
          swift_unknownObjectRelease_n();
          goto LABEL_43;
        }
        v44 = sub_1B1FA0708(*(int32x4_t *)(a1 + 208), v43);
        v46 = v45;
        v48 = v47;
        sub_1B1BA8088(*(int *)(a1 + 224), *(int *)(a1 + 228), *(int *)(a1 + 232), &v80);
        *(_OWORD *)v74 = v80;
        v49 = v81;
        sub_1B1BA8088(*(int *)(a1 + 240), *(int *)(a1 + 244), *(int *)(a1 + 248), &v80);
        v50 = v81;
        v51 = v80;
        *(_QWORD *)&v80 = v44;
        *((_QWORD *)&v80 + 1) = v46;
        v81 = v48;
        v78 = *(_OWORD *)v74;
        v79 = v49;
        v76 = v51;
        v77 = v50;
        objc_msgSend(a4, sel_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup_, &v80, &v78, &v76);
      }
      v42 = qword_1EEF61000;
      goto LABEL_43;
    }
  }
}

uint64_t sub_1B1D617C0(char a1, char a2)
{
  uint64_t v2;
  uint64_t inited;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  __int128 v24;
  ValueMetadata *v25;
  _UNKNOWN **v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAD80, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for DrawCallComponent;
  *(_QWORD *)(inited + 40) = &off_1E638BEB8;
  *(_QWORD *)(inited + 48) = &type metadata for WorldAABB;
  *(_QWORD *)(inited + 56) = &off_1E63C5FC8;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v6 = (char *)inited;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_1B1C62F18(0, 3, 1, (char *)inited);
    v8 = *((_QWORD *)v6 + 2);
    v7 = *((_QWORD *)v6 + 3);
    if (v8 >= v7 >> 1)
      v6 = sub_1B1C62F18(v7 > 1, v8 + 1, 1, v6);
    *((_QWORD *)v6 + 2) = v8 + 1;
    v9 = &v6[16 * v8];
    *((_QWORD *)v9 + 4) = &type metadata for VFXDrawCallHandler;
    *((_QWORD *)v9 + 5) = &off_1E63969B0;
    swift_bridgeObjectRelease();
    inited = (uint64_t)v6;
  }
  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v10 + 56) = &type metadata for AnonymousEntity;
  *(_QWORD *)(v10 + 64) = &off_1E63832E0;
  v11 = sub_1B1C63184(1, 2, 1, (_QWORD *)v10);
  v25 = &type metadata for DrawCallLayer;
  v26 = &off_1E6379C28;
  LOBYTE(v24) = a1;
  v11[2] = 2;
  sub_1B1A02518(&v24, (uint64_t)(v11 + 9));
  v12 = v2 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  v13 = sub_1B1DADA68(inited);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_1B1DAD000(v13, v11);
  v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = sub_1B1DA8760(v14);
  if ((v18 & 1) != 0 || (v19 = sub_1B1DA87D4(v16, v17), (v19 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = sub_1B1DA8838(v14, v16, (uint64_t)v13, (uint64_t)v11);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v20 = v19;
  }
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + 8 * v20 + 32);
  v22 = *(os_unfair_lock_s **)(v12 + 24);
  swift_retain();
  os_unfair_lock_unlock(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21;
}

void sub_1B1D61AA0(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9E0];
}

uint64_t sub_1B1D61AB0(uint64_t *a1, char a2, uint64_t *a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v10;

  swift_retain();
  swift_retain();
  v10 = sub_1B1E8D7FC(a2, a1, a4, a2, a5);
  swift_release();
  swift_release();
  *a3 = v10;
  return swift_release();
}

uint64_t sub_1B1D61B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[7];

  v9 = *(_QWORD *)(a5 + 176);
  swift_retain();
  swift_retain();
  v10 = sub_1B1F2381C((uint64_t)&type metadata for DrawCallPool, (uint64_t)&off_1E6374C20, v9);
  swift_release();
  if (!v10)
  {
    type metadata accessor for DrawCall();
    v10 = swift_allocObject();
    sub_1B1D604AC();
  }
  swift_release();
  swift_retain();
  sub_1B1D5EACC();
  swift_release();
  sub_1B1D61CEC(a1, v10, a4);
  sub_1B1D65E38(a2, v10, 0);
  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(*(_QWORD *)a3 + 16) && (sub_1B1DC3AC8(*(_QWORD *)(a1 + 16)), (v11 & 1) != 0))
      v12 = swift_bridgeObjectRetain();
    else
      v12 = (uint64_t)sub_1B1B956CC(MEMORY[0x1E0DEE9D8]);
    *(_QWORD *)(v10 + 264) = v12;
  }
  else
  {
    *(_QWORD *)(v10 + 264) = *(_QWORD *)(a3 + 8);
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v10 + 152) = *(_QWORD *)(a3 + 216);
  *(_QWORD *)(v10 + 144) = *(_QWORD *)(a3 + 208);
  *(_BYTE *)(v10 + 256) = *(_BYTE *)(a3 + 224);
  *(_BYTE *)(v10 + 257) = *(_BYTE *)(a3 + 226);
  v13 = *(_OWORD *)(a3 + 112);
  v17[4] = *(_OWORD *)(a3 + 96);
  v17[5] = v13;
  v17[6] = *(_OWORD *)(a3 + 128);
  v14 = *(_OWORD *)(a3 + 48);
  v17[0] = *(_OWORD *)(a3 + 32);
  v17[1] = v14;
  v15 = *(_OWORD *)(a3 + 80);
  v17[2] = *(_OWORD *)(a3 + 64);
  v17[3] = v15;
  sub_1B1EC7248((uint64_t)v17);
  return v10;
}

uint64_t sub_1B1D61CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  _QWORD v30[4];
  char v31;
  _BYTE v32[32];
  char v33;
  _QWORD *v34;

  v34 = (_QWORD *)(a2 + 272);
  v6 = *(_QWORD **)(a2 + 272);
  v7 = v6[2];
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + v7;
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 272) = v6;
  if (!(_DWORD)result || v8 > v6[3] >> 1)
  {
    if (v7 <= v8)
      v10 = v8;
    else
      v10 = v7;
    result = (uint64_t)sub_1B1C67CD8(result, v10, 0, v6);
    v6 = (_QWORD *)result;
  }
  *v34 = v6;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    v13 = 0;
    v14 = 32;
    do
    {
      v16 = *(_OWORD *)(v11 + v14);
      v17 = *(_OWORD *)(v11 + v14 + 16);
      v33 = *(_BYTE *)(v11 + v14 + 32);
      *(_OWORD *)v32 = v16;
      *(_OWORD *)&v32[16] = v17;
      v18 = *(_QWORD *)(a3 + 848);
      v19 = *(_QWORD *)(v18 + 16);
      swift_retain();
      if (v19 && (v20 = sub_1B1DC488C((uint64_t)v32), (v21 & 1) != 0))
      {
        v22 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 40 * v20);
        v24 = *v22;
        v23 = v22[1];
        v25 = v22[2];
        sub_1B1B40D5C((uint64_t)v32);
        swift_unknownObjectRetain();
        swift_release();
        v30[0] = v24;
        v30[1] = v23;
        v30[2] = v25;
        v30[3] = 0;
        v31 = 0;
        swift_unknownObjectRetain();
        sub_1B1D2C700((uint64_t)v30, v13 + 21, 1);
        sub_1B1B40274((uint64_t)v32);
        swift_unknownObjectRelease_n();
      }
      else
      {
        v15 = *(_QWORD *)v32;
        swift_unknownObjectRetain();
        swift_release();
        v26 = v15;
        v27 = *(_OWORD *)&v32[8];
        v28 = 0;
        v29 = 0;
        swift_unknownObjectRetain();
        sub_1B1D2C700((uint64_t)&v26, v13 + 21, 1);
        sub_1B1B40274((uint64_t)v32);
        sub_1B1B40274((uint64_t)v32);
      }
      ++v13;
      v14 += 40;
    }
    while (v12 != v13);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1D61ED8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, const void *a8, uint64_t a9, char a10, uint64_t a11, unint64_t a12)
{
  uint64_t result;
  uint64_t v13;
  _BOOL4 v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  result = *a1;
  if (result)
  {
    v13 = *(_QWORD *)(result + 40);
    v73 = *(_QWORD *)(v13 + 16);
    if (v73)
    {
      v72 = v13 + 32;
      v67 = HIDWORD(a5);
      v16 = (_DWORD)a5 == -1 && HIDWORD(a5) == 0;
      v71 = v16;
      v69 = a5 << 32;
      v66 = a5;
      v68 = (int)a5;
      v65 = result;
      swift_retain();
      swift_bridgeObjectRetain();
      v17 = 0;
      while (1)
      {
        v18 = (__int128 *)(v72 + (v17 << 7));
        v19 = *v18;
        v20 = v18[1];
        v21 = v18[3];
        v77 = v18[2];
        v78 = v21;
        v75 = v19;
        v76 = v20;
        v22 = v18[4];
        v23 = v18[5];
        v24 = v18[7];
        v81 = v18[6];
        v82 = v24;
        v79 = v22;
        v80 = v23;
        swift_retain();
        if (v71 || v69 < 0 || v68 >= *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
        {
          sub_1B1D2DA60((uint64_t)&v75);
          swift_release();
        }
        else
        {
          v25 = *(_DWORD *)(*(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v68 + 8);
          sub_1B1D2DA60((uint64_t)&v75);
          swift_release();
          if ((_DWORD)v67 == -1)
          {
            v26 = v66;
            v27 = -1;
            goto LABEL_45;
          }
          if (v25 == (_DWORD)v67)
          {
            v26 = v66;
            v27 = v67;
            goto LABEL_45;
          }
        }
        v27 = 0;
        v26 = -1;
        if ((*((_QWORD *)&v76 + 1) & 0x8000000000000000) == 0)
        {
          v28 = a1[1];
          if (*((uint64_t *)&v76 + 1) < *(_QWORD *)(v28 + 16))
          {
            v29 = v28 + 8 * *((_QWORD *)&v76 + 1);
            v26 = *(_DWORD *)(v29 + 32);
            v27 = *(_DWORD *)(v29 + 36);
          }
        }
        swift_retain();
        if (v26 == -1 && !v27 || v26 < 0 || *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v26)
        {
          swift_release();
LABEL_30:
          swift_retain();
          v31 = *(_QWORD **)(a3 + 176);
          swift_retain();
          os_unfair_recursive_lock_lock_with_options();
          v32 = v31[6];
          v33 = *(_QWORD *)(v32 + 16);
          if (!v33)
            goto LABEL_40;
          v34 = 0;
          v35 = (_QWORD *)(v32 + 56);
          v36 = 24;
          while ((ValueMetadata *)*(v35 - 3) != &type metadata for DefaultMaterialInstance)
          {
            ++v34;
            v36 += 32;
            v35 += 5;
            if (v33 == v34)
              goto LABEL_40;
          }
          if (v34 < 0x40 && ((v31[15] >> v34) & 1) != 0)
          {
            v37 = (unsigned int *)(v31[2] + *v35);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v31[4] + v36));
            os_unfair_recursive_lock_unlock();
            v39 = *v37;
            v38 = v37[1];
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31[4] + v36));
            swift_release();
            v74 = __PAIR64__(v38, v39);
            if (v39 != -1 || v38)
            {
              swift_release();
LABEL_44:
              v26 = v74;
              v27 = HIDWORD(v74);
              goto LABEL_45;
            }
          }
          else
          {
LABEL_40:
            os_unfair_recursive_lock_unlock();
            swift_release();
          }
          type metadata accessor for PBRParameters();
          v40 = swift_allocObject();
          *(_OWORD *)(v40 + 16) = xmmword_1B226E4E0;
          *(_QWORD *)(v40 + 32) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 40) = 16777473;
          *(_BYTE *)(v40 + 44) = 1;
          *(_OWORD *)(v40 + 48) = xmmword_1B2244EC0;
          *(_QWORD *)(v40 + 64) = 0;
          *(_QWORD *)(v40 + 72) = 0;
          *(_QWORD *)(v40 + 80) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 88) = 16777473;
          *(_BYTE *)(v40 + 92) = 1;
          *(_OWORD *)(v40 + 96) = xmmword_1B2244EC0;
          *(_QWORD *)(v40 + 112) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 120) = 16777473;
          *(_BYTE *)(v40 + 124) = 1;
          *(_DWORD *)(v40 + 128) = 1056964608;
          *(_OWORD *)(v40 + 144) = xmmword_1B2244EC0;
          *(_QWORD *)(v40 + 160) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 168) = 16777473;
          *(_BYTE *)(v40 + 172) = 1;
          *(_DWORD *)(v40 + 176) = 0;
          *(_OWORD *)(v40 + 192) = xmmword_1B2244EC0;
          *(_QWORD *)(v40 + 208) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 216) = 16777473;
          *(_BYTE *)(v40 + 220) = 1;
          *(_DWORD *)(v40 + 224) = 1065353216;
          *(_OWORD *)(v40 + 240) = xmmword_1B2244EC0;
          *(_QWORD *)(v40 + 256) = 0xFFFFFFFFLL;
          *(_DWORD *)(v40 + 264) = 16777473;
          *(_BYTE *)(v40 + 268) = 1;
          *(_DWORD *)(v40 + 272) = 1065353216;
          *(_OWORD *)(v40 + 288) = xmmword_1B2244EC0;
          *(_WORD *)(v40 + 304) = 0;
          type metadata accessor for RenderPipelineFactory();
          v41 = swift_allocObject();
          *(_QWORD *)(v41 + 16) = 3;
          *(_QWORD *)(v41 + 24) = 0;
          *(_QWORD *)(v41 + 32) = 0;
          *(_QWORD *)(v41 + 40) = 2;
          *(_QWORD *)(v41 + 48) = 0;
          *(_QWORD *)(v41 + 56) = 0;
          *(_QWORD *)(v41 + 64) = 0;
          *(_QWORD *)(v41 + 72) = 15;
          *(_WORD *)(v41 + 80) = 0;
          *(_QWORD *)(v41 + 88) = sub_1B20C3BC4;
          *(_QWORD *)(v41 + 96) = 0;
          if (qword_1ED4B8D00 != -1)
            swift_once();
          v42 = qword_1ED4D0C10;
          v43 = *(_QWORD *)algn_1ED4D0C18;
          v44 = qword_1ED4D0C20;
          v45 = qword_1ED4D0C28;
          v46 = xmmword_1ED4D0C30;
          v47 = byte_1ED4D0C40;
          *(_QWORD *)(v41 + 104) = qword_1ED4D0C10;
          *(_QWORD *)(v41 + 112) = v43;
          *(_QWORD *)(v41 + 120) = v44;
          *(_QWORD *)(v41 + 128) = v45;
          *(_OWORD *)(v41 + 136) = v46;
          *(_BYTE *)(v41 + 152) = v47;
          *(_QWORD *)(v41 + 160) = v42;
          *(_QWORD *)(v41 + 168) = v43;
          *(_QWORD *)(v41 + 176) = v44;
          *(_QWORD *)(v41 + 184) = v45;
          *(_OWORD *)(v41 + 192) = v46;
          *(_WORD *)(v41 + 208) = v47;
          *(_WORD *)(v41 + 80) = 140;
          *(_QWORD *)(v41 + 88) = sub_1B2137D90;
          *(_QWORD *)(v41 + 96) = 0;
          swift_unknownObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_unknownObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_release();
          v48 = sub_1B2180BAC(0x100000000uLL, **(_QWORD **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues), 0, v41, 0x100000000uLL, 0xD000000000000018, 0x80000001B2338140, -1.0);
          swift_release();
          swift_retain();
          sub_1B1FEC0E4(v48, a3, v40);
          v49 = swift_release_n();
          v74 = v48;
          MEMORY[0x1E0C80A78](v49, v50);
          v51 = *(_QWORD **)(a3 + 176);
          swift_retain();
          sub_1B1F22244((uint64_t)&type metadata for DefaultMaterialInstance, (uint64_t)&off_1E63AA418, v51, (void (*)(uint64_t))sub_1B1CC6B1C);
          swift_release();
          swift_release();
          goto LABEL_44;
        }
        v30 = *(_DWORD *)(*(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v26 + 8);
        swift_release();
        if (v27 != -1 && v30 != v27)
          goto LABEL_30;
LABEL_45:
        swift_retain();
        if ((v26 != -1 || v27) && (v26 & 0x80000000) == 0)
        {
          v52 = (uint64_t *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          if (*(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v26)
          {
            v53 = *v52;
            v54 = *v52 + 12 * v26;
            v55 = *(__int16 *)(v54 + 4);
            if (v27 == -1 || *(_DWORD *)(v54 + 8) == v27)
            {
              v56 = *(_QWORD *)(*(_QWORD *)(a3 + 136) + 8 * *(int *)(v53 + 12 * v26) + 32);
              v57 = *(_QWORD *)(v56 + 48);
              v58 = *(_QWORD *)(v57 + 16);
              if (v58)
              {
                v59 = (_QWORD *)(v57 + 56);
                while ((ValueMetadata *)*(v59 - 3) != &type metadata for MaterialRuntime)
                {
                  v59 += 5;
                  if (!--v58)
                    goto LABEL_11;
                }
                sub_1B1D626FC(*(_QWORD *)(v56 + 128) + *v59 + 248 * v55, a2, a3, a4, a6, a7, a8, a9, a10 & 1, v65, (uint64_t)&v75, a11, a12 | ((HIDWORD(a12) & 1) << 32));
              }
            }
          }
        }
LABEL_11:
        swift_release();
        ++v17;
        sub_1B1D2DA94((uint64_t)&v75);
        if (v17 == v73)
        {
          swift_release();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B1D626FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t result;
  __n128 v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t *v63;
  int v64;
  __n128 v65;
  __n128 v66;
  uint64_t v67;
  void *v68;
  __n128 v69;
  uint64_t v70;
  _BYTE v71[160];
  uint64_t v72[4];
  char v73;
  _QWORD v74[4];
  char v75;
  _QWORD v76[4];
  char v77;
  _QWORD v78[4];
  char v79;
  _QWORD v80[4];
  char v81;

  v18 = *(unsigned __int8 *)(a1 + 227);
  swift_retain();
  swift_retain();
  if (qword_1ED4B7D30 != -1)
    swift_once();
  v72[0] = qword_1ED4D09E0;
  MEMORY[0x1E0C80A78](qword_1ED4D09E0, v19);
  v64 = v18;
  v20 = *(_QWORD **)(a3 + 176);
  swift_retain();
  swift_retain();
  sub_1B1F22244((uint64_t)&_s21DrawCallEntityClassesVN, (uint64_t)&off_1E637A388, v20, (void (*)(uint64_t))sub_1B1D2DA40);
  swift_release();
  swift_release();
  swift_release();
  v67 = v72[0];
  v21 = *(_QWORD *)(a4 + 24);
  swift_retain();
  v63 = (float32x4_t *)a5;
  v68 = sub_1B1D5E8D8(v21, (const void *)a5, a6);
  v60 = v23;
  v61 = v22;
  swift_release();
  v24 = *(_QWORD *)(a4 + 24);
  swift_retain();
  if ((a9 & 1) != 0 || a8 < 1)
  {
    v25 = a3;
    __asm { FMOV            V0.4S, #1.0 }
    v26 = sub_1B1D5EA18(v24, a6, _Q0);
  }
  else
  {
    v25 = a3;
    v26 = sub_1B1D5E978(v24, a7, a8);
  }
  v57 = v28;
  v59 = v27;
  v55 = (uint64_t)v26;
  swift_release();
  v34 = sub_1B1D61B3C(a10, a11, a1, a2, v25);
  v35 = a4;
  v36 = v34;
  if (v64)
  {
    *(_QWORD *)(v34 + 120) = 1;
    swift_unknownObjectRetain();
    v37 = v55;
    swift_unknownObjectRetain();
    sub_1B1D2DA60(a11);
    v38 = v25;
    sub_1B1F0E4D4(0, v67, 1, a13 | ((HIDWORD(a13) & 1) << 32), a12, v35, a5, (int32x4_t *)a11, v36, (uint64_t)v68, v61, v60, 64, v55, v59, v57, 16, a2, v25,
      v64);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B1D2DA94(a11);
    v39 = v35;
    v40 = v38;
  }
  else
  {
    *(_QWORD *)(v34 + 120) = a12;
    v80[0] = v68;
    v80[1] = v61;
    v80[2] = v60;
    v80[3] = 0;
    v81 = 0;
    swift_unknownObjectRetain();
    sub_1B1D2C700((uint64_t)v80, 4, 0);
    swift_unknownObjectRelease();
    v37 = v55;
    v78[0] = v55;
    v78[1] = v59;
    v78[2] = v57;
    v78[3] = 0;
    v79 = 0;
    swift_unknownObjectRetain();
    sub_1B1D2C700((uint64_t)v78, 5, 0);
    swift_unknownObjectRelease();
    v41 = *(float32x4_t *)(a5 + 16);
    v42 = *(float32x4_t *)(a5 + 32);
    v43 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(a5 + 48), v42, *(float32x4_t *)(a11 + 96), 2), v41, *(float32x2_t *)(a11 + 96), 1), *(float32x4_t *)a5, COERCE_FLOAT(*(_OWORD *)(a11 + 96)));
    v43.i32[3] = HIDWORD(*(_OWORD *)(a11 + 96));
    v65 = (__n128)v43;
    v44 = *(float32x4_t *)(a11 + 112);
    v44.i32[1] = v44.i32[0];
    v44.i32[2] = *(_OWORD *)(a11 + 112);
    v54 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)(a11 + 112), 1), *(int32x4_t *)(a11 + 112)), vabsq_f32(v41)), v44, vabsq_f32(*(float32x4_t *)a5)), (float32x4_t)vzip2q_s32(vtrn1q_s32(*(int32x4_t *)(a11 + 112), *(int32x4_t *)(a11 + 112)), *(int32x4_t *)(a11 + 112)), vabsq_f32(v42));
    swift_retain();
    sub_1B1F0D800(0, v67, 1, a13 | ((HIDWORD(a13) & 1) << 32), 1, v35, v36, a2, v65, v54, v25, 0);
    swift_release();
    v40 = v25;
    v39 = v35;
  }
  swift_retain();
  sub_1B1A18378(a2 + 624, (uint64_t)v71, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  sub_1B1A18378((uint64_t)v71, (uint64_t)v72, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  if (sub_1B1B3C438(v72) == 1)
  {
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v45 = v73;
    swift_release();
    if ((v45 & 1) != 0)
    {
      v46 = sub_1B1D61B3C(a10, a11, a1, a2, v40);
      *(_QWORD *)(v46 + 120) = a12;
      v76[0] = v68;
      v76[1] = v61;
      v76[2] = v60;
      v76[3] = 0;
      v77 = 0;
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)v76, 4, 0);
      swift_unknownObjectRelease();
      v74[0] = v37;
      v74[1] = v59;
      v74[2] = v57;
      v74[3] = 0;
      v75 = 0;
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)v74, 5, 0);
      swift_unknownObjectRelease();
      swift_retain();
      swift_retain();
      v70 = qword_1ED4D09E0;
      MEMORY[0x1E0C80A78](qword_1ED4D09E0, v47);
      v48 = *(_QWORD **)(v40 + 176);
      swift_retain();
      swift_retain();
      sub_1B1F22244((uint64_t)&_s21DrawCallEntityClassesVN, (uint64_t)&off_1E637A388, v48, (void (*)(uint64_t))sub_1B1D66DCC);
      swift_release();
      swift_release();
      swift_release();
      v49 = v63[1];
      v50 = v63[2];
      v51 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v63[3], v50, *(float32x4_t *)(a11 + 96), 2), v49, *(float32x2_t *)(a11 + 96), 1), *v63, COERCE_FLOAT(*(_OWORD *)(a11 + 96)));
      v51.i32[3] = HIDWORD(*(_OWORD *)(a11 + 96));
      v69 = (__n128)v51;
      v52 = *(float32x4_t *)(a11 + 112);
      v52.i32[1] = v52.i32[0];
      v52.i32[2] = *(_OWORD *)(a11 + 112);
      v66 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)(a11 + 112), 1), *(int32x4_t *)(a11 + 112)), vabsq_f32(v49)), v52, vabsq_f32(*v63)), (float32x4_t)vzip2q_s32(vtrn1q_s32(*(int32x4_t *)(a11 + 112), *(int32x4_t *)(a11 + 112)), *(int32x4_t *)(a11 + 112)), vabsq_f32(v50));
      swift_retain();
      sub_1B1F0F274(0, v70, 1, a13 | ((HIDWORD(a13) & 1) << 32), 1, v39, v46, v69, v66);
      swift_release();
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return swift_release_n();
    }
    else
    {
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t *sub_1B1D62E5C(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7[12];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  uint64_t v30;

  v3 = *(_OWORD *)(v1 + 32);
  v29[0] = *(_OWORD *)(v1 + 16);
  v29[1] = v3;
  v30 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v29, 0x200000000, v7);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v8)
  {
    v16 = v10;
    v17 = v11;
    v18 = v12;
    v19 = v13;
    v14 = v8;
    v15 = v9;
    v21 = DWORD2(v8);
    v20 = v8;
    v22 = BYTE12(v8);
    v23 = v9;
    v24 = BYTE8(v9);
    v25 = v10;
    v26 = v11;
    v27 = v12;
    v28 = v13;
    MEMORY[0x1E0C80A78](result, v5);
    v6 = *(_QWORD **)(a1 + 176);
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for DrawCallPool, (uint64_t)&off_1E6374C20, v6, (void (*)(uint64_t))sub_1B1D66304);
    swift_release();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1BEAAFC(0);
    sub_1B19ED748(v7);
    return sub_1B19ED748(v7);
  }
  return result;
}

uint64_t sub_1B1D62FEC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;
  _BYTE v39[48];
  int v40;

  v3 = v2;
  v34 = *(_OWORD *)a2;
  v35 = *(_OWORD *)(a2 + 16);
  v30 = *(_QWORD *)(a2 + 40);
  v36 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD **)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  sub_1B1AB0B58(v8, 0);
  result = sub_1B2228AD0();
  if (v8 >= 1 && v7)
  {
    v11 = v9[4];
    v40 = *(unsigned __int8 *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v37[0] = v34;
    v37[1] = v35;
    v38 = v36;
    v27 = a2;
    sub_1B1D6631C(a2);
    v12 = 0;
    v28 = v11;
    v29 = v7;
    do
    {
      v13 = (unsigned int *)(v30 + 48 * v12);
      v32 = *v13;
      v31 = v13[1];
      v15 = (uint64_t *)*((_QWORD *)v13 + 2);
      v14 = *((_QWORD *)v13 + 3);
      v17 = *((_QWORD *)v13 + 4);
      v16 = *((_QWORD *)v13 + 5);
      v33 = v3;
      if (v40)
      {
        v18 = *(os_unfair_lock_s **)(v16 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v18);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v11);
      sub_1B1A18378((uint64_t)(v9 + 6), (uint64_t)v39, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v19 = v9[4];
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v9[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
      v9[7] = v20;
      v9[9] = 0;
      v9[10] = 0;
      v9[8] = 0;
      swift_release();
      v21 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v15, v14, v17, (uint64_t)v9);
      v22 = v21;
      if (v15)
      {
        for (; v17; --v17)
        {
          sub_1B1D5FF8C();
          v26 = swift_retain();
          MEMORY[0x1B5E2064C](v26);
          if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1B2228AF4();
          sub_1B2228B30();
          sub_1B2228AD0();
          v22 += 8;
        }
      }
      else if ((_DWORD)v32 != (_DWORD)v31)
      {
        v23 = v31 - v32;
        v24 = v21 + 8 * v32;
        do
        {
          sub_1B1D5FF8C();
          v25 = swift_retain();
          MEMORY[0x1B5E2064C](v25);
          if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1B2228AF4();
          sub_1B2228B30();
          sub_1B2228AD0();
          v24 += 8;
          --v23;
        }
        while (v23);
      }
      sub_1B1F05D48(v9, (unsigned __int16 **)v37, (uint64_t)v39);
      v3 = v33;
      sub_1B1F03804((char *)v16);
      v11 = v28;
      ecs_stack_allocator_pop_snapshot(v28);
      if ((v40 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      swift_release();
      ++v12;
    }
    while (v12 != v29);
    return sub_1B1D66364(v27);
  }
  return result;
}

uint64_t type metadata accessor for DrawCallDisposeSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for DrawCallComponent()
{
  return &type metadata for DrawCallComponent;
}

uint64_t sub_1B1D63368()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1E3C1C8(1, (uint64_t)v3);
  swift_release();
  v1 = v3[1];
  *(_OWORD *)(v0 + 16) = v3[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v4;
  return v0;
}

const char *sub_1B1D63424()
{
  return "DrawCall Dispose";
}

uint64_t sub_1B1D63438(void *a1, char a2, unsigned __int8 a3)
{
  unsigned int v6;
  id v7;
  unsigned int v8;
  int v9;
  int v10;
  float v11;
  BOOL v12;
  int v13;

  if (objc_msgSend(a1, sel_isDrawingBlur))
    v6 = 8256;
  else
    v6 = 0;
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_useDitherFade) & 1) != 0
    && objc_msgSend(a1, sel_useDitherFade))
  {
    v6 |= 0xCu;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_enableBreakthrough) & 1) != 0
    && objc_msgSend(a1, sel_enableBreakthrough))
  {
    v6 |= 0x20u;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_enableClipping) & 1) != 0
    && (objc_msgSend(a1, sel_enableClipping) & ((v6 & 2) == 0)) != 0)
  {
    v6 |= 2u;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_enableNearFieldVignetting) & 1) != 0
    && (objc_msgSend(a1, sel_enableNearFieldVignetting) & ((v6 & 0x200) == 0)) != 0)
  {
    v6 |= 0x200u;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_depthOnly) & 1) != 0
    && (objc_msgSend(a1, sel_depthOnly) & ((v6 & 0x800) == 0)) != 0)
  {
    v6 |= 0x800u;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_renderInGBuffer) & 1) != 0
    && objc_msgSend(a1, sel_renderInGBuffer))
  {
    v6 |= 0x4000u;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_renderMode) & 1) != 0)
  {
    v7 = objc_msgSend(a1, sel_renderMode);
    switch((unint64_t)v7)
    {
      case 1uLL:
        v6 |= 0x20000u;
        break;
      case 2uLL:
        v6 |= 0x40000u;
        break;
      case 3uLL:
        v6 |= 0x80000u;
        break;
      case 4uLL:
        v6 |= 0x100000u;
        break;
      case 5uLL:
        v6 |= 0x200000u;
        break;
      case 6uLL:
        v6 |= 0x400000u;
        break;
      case 7uLL:
        v6 |= 0x800000u;
        break;
      default:
        if (v7 == (id)8)
          v6 |= 0x1000000u;
        break;
    }
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_portalClippingMode) & 1) != 0)
  {
    v8 = objc_msgSend(a1, sel_portalClippingMode);
    v9 = v6 | 0x14000000;
    if (v8 != 2)
      v9 = v6;
    if (v8 == 1)
      v9 = v6 | 0xC000000;
    if (v8)
      v6 = v9;
  }
  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_isLayeredRendering) & 1) != 0
    && (objc_msgSend(a1, sel_isLayeredRendering) & ((v6 & 0x2000000) == 0)) != 0)
  {
    v6 |= 0x2000000u;
  }
  if (!a2 && (v6 & 0x800) == 0)
  {
    if ((objc_msgSend(a1, sel_respondsToSelector_, sel_fadeOpacity) & 1) != 0)
    {
      objc_msgSend(a1, sel_fadeOpacity);
      v10 = (v6 >> 12) & 1;
      if (v11 >= 1.0)
        v10 = 1;
      if (!v10)
        v6 |= 0x1000u;
    }
    if ((v6 & 0x1020) == 0x20)
      v6 |= 0x1000u;
  }
  v12 = a2 == 1 && (v6 & 0x2800) == 2048;
  v13 = v6 | 0x2000;
  if (!v12)
    v13 = v6;
  return (v13 & 0x400 | a3 & ((v13 & 1) == 0)) ^ 0x400 | v13;
}

uint64_t sub_1B1D63768(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v15;
  uint64_t Strong;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  char *v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int64x2_t v55;
  int64x2_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int64x2_t v78;
  __int128 v79;
  uint64_t v80;
  void *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  char v103;
  void *v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  unsigned __int8 v130;
  _QWORD v131[11];
  uint64_t v132;
  unsigned __int8 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  _DWORD v146[2];
  uint64_t v147;
  unsigned __int8 v148;
  _BYTE v149[7];
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int64x2_t v174;
  __int128 v175;
  _OWORD v176[3];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _QWORD v181[5];
  int64x2_t v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  _BYTE v191[112];
  _QWORD v192[3];
  unsigned __int8 v193;
  _BYTE v194[7];
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int v206;
  uint64_t v207;

  v207 = *MEMORY[0x1E0C80C00];
  result = swift_weakLoadStrong();
  if (result)
  {
    v15 = result;
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v17 = (_QWORD *)Strong;
      if ((a5 & 0x100000000) != 0 || (a5 & 0x7FFFFFFF) != 0)
      {
        v104 = a1;
        v128 = v15;
        *(_BYTE *)(*(_QWORD *)(Strong + 288) + 136) = 1;
        v18 = objc_msgSend(a2, sel_renderTargetInfo);
        swift_getObjectType();
        sub_1B1E708AC(v131);
        v19 = v131[0];
        v20 = v131[2];
        v121 = v131[3];
        v124 = v131[1];
        v21 = v131[6];
        v117 = v131[5];
        v129 = v17;
        v127 = a8;
        v111 = v131[4];
        v114 = v131[7];
        v22 = v131[10];
        v105 = v131[9];
        v108 = v131[8];
        swift_unknownObjectRelease();
        v103 = a7;
        v120 = a2;
        v23 = sub_1B1D63438(a2, a6, a7 & 1);
        v162 = v23;
        v163 = v19;
        v164 = v124;
        v165 = v20;
        v166 = v121;
        v167 = v111;
        v168 = v117;
        v169 = v21;
        v170 = v114;
        v171 = v108;
        v172 = v105;
        v173 = v22;
        v101 = a6;
        if (*(_QWORD *)(v129[99] + 8 * a6 + 32) == *(_QWORD *)(*(_QWORD *)(a8 + 264) + 16))
        {
          v24 = v23;
          sub_1B1D5FDCC(&v162, (uint64_t)v191);
          sub_1B1A18378((uint64_t)v191, (uint64_t)v192, (unint64_t *)&unk_1ED4B8420, (uint64_t)&type metadata for RenderStates);
          if (v192[0])
          {
            v100 = v192[1];
            v25 = v193;
            v146[0] = *(_DWORD *)v194;
            *(_DWORD *)((char *)v146 + 3) = *(_DWORD *)&v194[3];
            v26 = v196;
            v122 = v195;
            v125 = v192[2];
            v28 = v197;
            v27 = v198;
            v112 = v199;
            v115 = v200;
            v29 = v202;
            v118 = v201;
            v30 = v203;
            v31 = v204;
            v106 = v205;
            v109 = v206;
            v130 = v193;
            v96 = v192[0];
            if ((objc_msgSend(v120, sel_respondsToSelector_, sel_stencilInfo) & 1) != 0)
            {
              v147 = v125;
              v148 = v25;
              *(_DWORD *)v149 = v146[0];
              *(_DWORD *)&v149[3] = *(_DWORD *)((char *)v146 + 3);
              v150 = v122;
              v151 = v26;
              v152 = v28;
              v153 = v27;
              v154 = v112;
              v155 = v115;
              v156 = v118;
              v157 = v29;
              v158 = v30;
              v159 = v31;
              v160 = v106;
              v161 = v109;
              swift_unknownObjectRetain();
              v32 = v120;
              v33 = objc_msgSend(v120, sel_stencilInfo);
              sub_1B1F4D088(v33, (uint64_t)&v132);
              v34 = v129;
              v35 = v129[31];
              v36 = *(os_unfair_lock_s **)(v35 + 56);
              swift_retain();
              os_unfair_lock_lock(v36);
              sub_1B21300C4(v35, &v132, &v182);
              os_unfair_lock_unlock(v36);
              swift_release();
              v37 = v182.i64[0];
              *(_DWORD *)(v127 + 140) = objc_msgSend(v33, sel_backReferenceValue);
              LODWORD(v35) = objc_msgSend(v33, sel_frontReferenceValue);
              swift_unknownObjectRelease();
              *(_DWORD *)(v127 + 136) = v35;
              swift_unknownObjectRelease();
              v38 = v132;
              v130 = v133;
              v39 = v134;
              v27 = v137;
              v98 = v136;
              v99 = v135;
              v40 = v138;
              v41 = v139;
              v42 = v140;
              v29 = v141;
              v30 = v142;
              v31 = v143;
              v100 = v37;
              v43 = v144;
              v44 = v145;
            }
            else
            {
              v98 = v28;
              v99 = v26;
              swift_unknownObjectRetain();
              v34 = v129;
              v38 = v125;
              v41 = v115;
              v42 = v118;
              v40 = v112;
              v44 = v109;
              v43 = v106;
              v32 = v120;
              v39 = v122;
            }
            v123 = v39;
            v126 = v38;
            v97 = v27;
            v116 = v41;
            v119 = v42;
            v95 = v30;
            v94 = v31;
            v113 = v40;
            v110 = v44;
            v107 = v43;
            if ((v103 & 1) == 0)
            {
              objc_msgSend(objc_msgSend(v32, sel_renderTargetInfo), sel_vrrEnabled);
              swift_unknownObjectRelease();
            }
            v58 = **(_QWORD **)(v128 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
            v181[4] = &off_1E639A578;
            v181[3] = &type metadata for REExternalDataTable;
            v181[0] = v32;
            *(_OWORD *)((char *)v176 + 8) = 0u;
            *(_OWORD *)((char *)&v176[1] + 8) = 0u;
            v177 = xmmword_1B2246910;
            *((_QWORD *)&v176[2] + 1) = 0;
            v178 = 1uLL;
            *(_QWORD *)&v179 = 0;
            *((_QWORD *)&v179 + 1) = 1;
            v180 = 0uLL;
            LOBYTE(v176[0]) = v101;
            v174.i64[0] = (uint64_t)v34;
            v174.i64[1] = v128;
            *((_QWORD *)&v175 + 1) = 1;
            *(_QWORD *)&v175 = v58;
            swift_unknownObjectRetain();
            v59 = sub_1B1BBF08C((uint64_t)v181, (uint64_t)v176 + 8);
            v188 = v178;
            v189 = v179;
            v190 = v180;
            v184 = v176[0];
            v185 = v176[1];
            v186 = v176[2];
            v187 = v177;
            v182 = v174;
            v183 = v175;
            MEMORY[0x1E0C80A78](v59, v60);
            v102 = v61;
            v62 = *(_QWORD **)(v128 + 176);
            MEMORY[0x1E0C80A78](v63, v64);
            swift_retain();
            sub_1B1F21F8C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v62, (void (*)(uint64_t))sub_1B1B6932C);
            swift_release();
            v65 = v182.i64[1];
            swift_retain();
            v66 = swift_retain();
            MEMORY[0x1E0C80A78](v66, v67);
            v68 = *(_QWORD *)(v65 + 176);
            swift_retain();
            v69 = (void *)sub_1B1F22DA8((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v68, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1D66018);
            v71 = v70;
            v73 = v72;
            swift_release();
            swift_release();
            swift_release();
            if (v69)
            {
              swift_getObjectType();
              sub_1B2118518(v69, v71, v73, 0, 0, v102);
              swift_unknownObjectRelease();
            }
            v74 = v182.i64[1];
            swift_retain();
            v75 = swift_retain();
            MEMORY[0x1E0C80A78](v75, v76);
            v77 = *(_QWORD **)(v74 + 176);
            swift_retain();
            sub_1B1F21F8C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v77, (void (*)(uint64_t))sub_1B1D66034);
            swift_release();
            swift_release();
            swift_release();
            v78 = v174;
            v79 = v175;
            v80 = *(_QWORD *)&v176[0];
            v81 = *(void **)&v176[1];
            v90 = *((_QWORD *)&v176[0] + 1);
            v82 = v176[2];
            v93 = v177;
            v91 = *((_QWORD *)&v176[1] + 1);
            v92 = *((_QWORD *)&v177 + 1);
            swift_unknownObjectRetain();
            if (v78.i64[0])
            {
              swift_getObjectType();
              sub_1B2118518((id)v78.i64[0], v78.i64[1], v79, 0, 10, v102);
              swift_unknownObjectRelease();
            }
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            if (*((_QWORD *)&v79 + 1))
            {
              swift_getObjectType();
              sub_1B2118518(*((id *)&v79 + 1), v80, v90, 0, 11, v102);
              swift_unknownObjectRelease();
            }
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            if (v81)
            {
              swift_getObjectType();
              sub_1B2118518(v81, v91, v82, 0, 12, v102);
              swift_unknownObjectRelease();
            }
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            v83 = swift_unknownObjectRelease();
            if (*((_QWORD *)&v82 + 1))
            {
              swift_getObjectType();
              sub_1B2118518(*((id *)&v82 + 1), v93, v92, 0, 14, 2);
              sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
              v85 = swift_allocObject();
              *(_OWORD *)(v85 + 16) = xmmword_1B226E440;
              *(_QWORD *)(v85 + 32) = *((_QWORD *)&v82 + 1);
              v174.i64[0] = v85;
              sub_1B2228AD0();
              v86 = v174.i64[0];
              swift_unknownObjectRetain();
              sub_1B1D60ED0(v86, 1, 2);
              swift_unknownObjectRelease();
              v83 = swift_bridgeObjectRelease();
            }
            MEMORY[0x1E0C80A78](v83, v84);
            v87 = *(_QWORD **)(v128 + 176);
            MEMORY[0x1E0C80A78](v88, v89);
            swift_retain();
            sub_1B1F21F8C((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v87, (void (*)(uint64_t))sub_1B1D66DE4);
            swift_release();
            v174.i64[0] = v96;
            v174.i64[1] = v100;
            *(_QWORD *)&v175 = v126;
            *((_QWORD *)&v175 + 1) = v130;
            *(_QWORD *)&v176[0] = v123;
            *((_QWORD *)&v176[0] + 1) = v99;
            *(_QWORD *)&v176[1] = v98;
            *((_QWORD *)&v176[1] + 1) = v97;
            LODWORD(v176[2]) = v113;
            DWORD1(v176[2]) = v116;
            *((_QWORD *)&v176[2] + 1) = v119;
            *(_QWORD *)&v177 = v29;
            *((_QWORD *)&v177 + 1) = v95;
            *(_QWORD *)&v178 = v94;
            *((_QWORD *)&v178 + 1) = v107 | (unint64_t)(v110 << 32);
            swift_unknownObjectRetain();
            sub_1B1D60FC0(v127, &v162, v174.i64, v104, (uint64_t)&v182, v120);
            swift_release();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            sub_1B1BBF134(&v182);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            *(_BYTE *)(v129[36] + 136) = 0;
            return swift_release();
          }
          v45 = v24;
          if (qword_1ED4BF578 != -1)
          {
            swift_once();
            v45 = v24;
          }
          v46 = (char *)v129[98];
          v182.i32[0] = dword_1ED4BF580 & v45;
          v182.i64[1] = v19;
          *(_QWORD *)&v183 = v124;
          *((_QWORD *)&v183 + 1) = v20;
          *(_QWORD *)&v184 = v121;
          *((_QWORD *)&v184 + 1) = v111;
          *(_QWORD *)&v185 = v117;
          *((_QWORD *)&v185 + 1) = v21;
          *(_QWORD *)&v186 = v114;
          *((_QWORD *)&v186 + 1) = v108;
          *(_QWORD *)&v187 = v105;
          *((_QWORD *)&v187 + 1) = v22;
          if ((sub_1B1DB8F5C(&v182, (uint64_t)v46) & 1) == 0)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v129[98] = v46;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v46 = sub_1B1C664F0(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
              v129[98] = v46;
            }
            v49 = *((_QWORD *)v46 + 2);
            v48 = *((_QWORD *)v46 + 3);
            if (v49 >= v48 >> 1)
              v46 = sub_1B1C664F0(v48 > 1, v49 + 1, 1, v46);
            *((_QWORD *)v46 + 2) = v49 + 1;
            v50 = &v46[96 * v49];
            v51 = v183;
            *((int64x2_t *)v50 + 2) = v182;
            *((_OWORD *)v50 + 3) = v51;
            v52 = v184;
            v53 = v185;
            v54 = v187;
            *((_OWORD *)v50 + 6) = v186;
            *((_OWORD *)v50 + 7) = v54;
            *((_OWORD *)v50 + 4) = v52;
            *((_OWORD *)v50 + 5) = v53;
            v129[98] = v46;
            sub_1B1BA43F4();
            if (qword_1ED4BF430 != -1)
              swift_once();
            v174.i64[0] = 0;
            v174.i64[1] = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            sub_1B2228890();
            LOBYTE(v147) = v101;
            sub_1B22295EC();
            sub_1B2228890();
            LODWORD(v147) = v24;
            sub_1B22295EC();
            sub_1B2228890();
            v55 = v174;
            strcpy(v174.i8, "PassFormat: ");
            v174.i8[13] = 0;
            v174.i16[7] = -5120;
            sub_1B1B6B3DC();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            v174 = v55;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v56 = v174;
            v57 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v174.i64[0] = 0;
            swift_retain();
            sub_1B1F1AD70(v57, v174.i64, v56.i64[0], v56.i64[1]);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            sub_1B1D2F76C(v128);
          }
        }
        swift_release();
        *(_BYTE *)(v129[36] + 136) = 0;
      }
      else
      {
        swift_release();
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1D64718(uint64_t a1, void *a2, uint64_t a3, _DWORD *a4, char a5, uint64_t a6, char a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t aBlock;
  unint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, __n128);
  void *v36;
  void (*v37)(uint64_t, int, float32x4_t);
  uint64_t v38;
  _BYTE __dst[1152];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  sub_1B1E12A74();
  memcpy(__dst, (const void *)(a1 + 48), sizeof(__dst));
  v9 = sub_1B1E12D88();
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 1224);
  if (*(_QWORD *)(v11 + 16) && (v12 = sub_1B1DC3AC8(v9), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(v11 + 56) + 24 * v12;
    v15 = *(void **)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_QWORD *)(v14 + 16);
    swift_unknownObjectRetain();
    v18 = &selRef_clipWithAnimation_name_;
  }
  else
  {
    swift_retain();
    v15 = (void *)sub_1B1D22DA8(0, 1152);
    v16 = v19;
    v17 = v20;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      aBlock = 0;
      v34 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v21 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      aBlock = 0;
      swift_retain();
      sub_1B1F1AD70(v21, &aBlock, 0xD000000000000034, 0x80000001B233A830);
      swift_release();
      swift_release();
      swift_release();
      v18 = &selRef_clipWithAnimation_name_;
    }
    else
    {
      v18 = &selRef_clipWithAnimation_name_;
      v22 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v23 = v15;
      memcpy(&v22[v16], __dst, 0x480uLL);
      swift_release();
    }
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    aBlock = *(_QWORD *)(a1 + 1224);
    *(_QWORD *)(a1 + 1224) = 0x8000000000000000;
    sub_1B1B891C8((uint64_t)v15, v16, v17, v10, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a1 + 1224) = aBlock;
    swift_bridgeObjectRelease();
  }
  objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode);
  v25 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), v18[79]);
  v26 = v15;
  *a4 = *(_DWORD *)&v25[v16 + 832];
  sub_1B1E12EB4(a5 & 1);
  swift_getObjectType();
  sub_1B2118518(v26, v16, v17, 0, 1, a7);
  if ((unint64_t)qword_1EEF61320 >= 0x2540BE406)
  {
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = v26;
    *(_QWORD *)(v27 + 24) = v16;
    *(_QWORD *)(v27 + 32) = v17;
    *(_BYTE *)(v27 + 40) = a5 & 1;
    v37 = sub_1B1D662CC;
    v38 = v27;
    aBlock = MEMORY[0x1E0C809B0];
    v34 = 1107296256;
    v35 = sub_1B1D64B78;
    v36 = &unk_1E63D4808;
    v28 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_release();
    objc_msgSend(a2, sel_setLateLatchingPatchHandler_, v28);
    _Block_release(v28);
  }
  return swift_unknownObjectRelease_n();
}

void sub_1B1D64AF4(uint64_t a1, int a2, id a3, float32x4_t a4, uint64_t a5, uint64_t a6, char a7)
{
  char *v11;
  id v12;

  objc_msgSend(a3, sel_storageMode);
  v11 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  v12 = a3;
  sub_1B1E15C28((float32x4_t *)&v11[a5], a1, a7, a4);
}

uint64_t sub_1B1D64B78(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  void (*v6)(uint64_t, uint64_t, __n128);

  v6 = *(void (**)(uint64_t, uint64_t, __n128))(a1 + 32);
  swift_retain();
  v6(a2, a3, a4);
  return swift_release();
}

unint64_t sub_1B1D64BD0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t result;

  swift_getObjectType();
  sub_1B1D60ED0(a1[163], 1, a3);
  v5 = a1[182];
  if (v5)
    sub_1B1D60ED0(v5, 1, a3);
  result = a1[196];
  if (result)
    return sub_1B1D60ED0(result, 1, a3);
  return result;
}

uint64_t sub_1B1D64C5C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!(*a1 >> 62))
  {
    if (*(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_8:
    type metadata accessor for DrawCall();
    v5 = swift_allocObject();
    result = sub_1B1D604AC();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  v7 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_8;
LABEL_3:
  result = sub_1B1E5B05C();
  v5 = result;
  if (!result)
  {
    if (*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    result = sub_1B1DBA1A8(v6 - 1);
    v5 = result;
  }
LABEL_9:
  *a2 = v5;
  return result;
}

_QWORD *sub_1B1D64D54(unint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_3;
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_3:
  if (v2 < 1)
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v3 = (_QWORD *)swift_allocObject();
    v4 = j__malloc_size(v3);
    v5 = v4 - 32;
    if (v4 < 32)
      v5 = v4 - 25;
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  sub_1B1D64E54((uint64_t)(v3 + 4), v2, a1);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1B1D64E54(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    if (a2 >= 1)
    {
      swift_bridgeObjectRetain();
      sub_1B22296AC();
      sub_1B22296AC();
      sub_1B22296AC();
      sub_1B22296A0();
    }
  }
  else if (a2 >= 1)
  {
    sub_1B1C93F74();
    swift_arrayInitWithCopy();
  }
  return a3;
}

uint64_t sub_1B1D64F30(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t result;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE v132[40];
  _BYTE v133[40];
  _BYTE v134[40];
  _BYTE v135[48];

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = a1;
  if ((a4 & 1) != 0)
  {
    v131 = *a1;
    v8 = *(_QWORD *)(v131 + 16);
    if (v8)
    {
      v9 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
      do
      {
        while (1)
        {
          sub_1B1D2DB70((uint64_t)(v9 - 5), (uint64_t)v135);
          v11 = *v9;
          v9 += 6;
          v10 = v11;
          sub_1B1CAECD4((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DBE0);
          v12 = sub_1B1D60544(v5);
          if (v12)
            break;
          objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, 0, 0, v10);
          sub_1B1CAECD4((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DC08);
          if (!--v8)
            goto LABEL_7;
        }
        objc_msgSend(v6, sel_setVertexBuffer_offset_atIndex_, v12, v13, v10);
        sub_1B1CAECD4((uint64_t)v135, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DC08);
        swift_unknownObjectRelease();
        --v8;
      }
      while (v8);
LABEL_7:
      sub_1B1B28C6C((uint64_t)&v131);
      v7 = a1;
    }
    v130 = v7[1];
    v14 = *(_QWORD *)(v130 + 16);
    if (v14)
    {
      v15 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      do
      {
        v16 = *(v15 - 4);
        v17 = *(v15 - 3);
        v18 = *(v15 - 2);
        v19 = *v15;
        v20 = *((_BYTE *)v15 - 8);
        sub_1B1CC60E4(v16, v17, v18, v20);
        sub_1B1D608F4(v5, v16, v17, v18, v20);
        objc_msgSend(v6, sel_setVertexTexture_atIndex_, v21, v19);
        swift_unknownObjectRelease();
        sub_1B1CC62AC(v16, v17, v18, v20);
        v15 += 5;
        --v14;
      }
      while (v14);
      sub_1B1B28C6C((uint64_t)&v130);
      v4 = a4;
      v7 = a1;
    }
    v129 = v7[2];
    v22 = *(_QWORD *)(v129 + 16);
    if (v22)
    {
      v108 = v5 + 40;
      v23 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      do
      {
        v26 = *(v23 - 4);
        v25 = *(v23 - 3);
        v27 = *(v23 - 2);
        v28 = *((unsigned __int8 *)v23 - 8);
        v29 = *v23;
        if (v28 == 1)
        {
          sub_1B1D65D24(v108, (uint64_t)&v115);
          if (!v116)
          {
LABEL_85:
            swift_bridgeObjectRetain_n();
            sub_1B1D65D88((uint64_t)&v115);
            goto LABEL_84;
          }
          sub_1B1A02518(&v115, (uint64_t)&v117);
          if (!v27)
          {
LABEL_83:
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v117);
LABEL_84:
            v117 = 0;
            v118 = 0xE000000000000000;
            sub_1B2229430();
            sub_1B2228890();
            LOBYTE(v115) = v26;
            sub_1B22295EC();
            sub_1B2228890();
            goto LABEL_90;
          }
          v30 = (void *)*sub_1B19FA070(&v117, v119);
          swift_bridgeObjectRetain_n();
          v31 = (void *)sub_1B2228728();
          v24 = objc_msgSend(v30, sel_sampler::, v26, v31);

          sub_1B1D65DE4(v26, v25, v27, 1);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v117);
          LOBYTE(v28) = 1;
        }
        else
        {
          swift_unknownObjectRetain_n();
          v24 = (id)v26;
        }
        v23 += 5;
        objc_msgSend(a2, sel_setVertexSamplerState_atIndex_, v24, v29);
        swift_unknownObjectRelease();
        sub_1B1D65DE4(v26, v25, v27, v28);
        --v22;
      }
      while (v22);
      sub_1B1B28C6C((uint64_t)&v129);
      v5 = a3;
      v6 = a2;
      v4 = a4;
      v7 = a1;
    }
  }
  if ((v4 & 8) != 0)
  {
    v128 = v7[6];
    v32 = *(_QWORD *)(v128 + 16);
    if (v32)
    {
      v33 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
      do
      {
        while (1)
        {
          sub_1B1D2DB70((uint64_t)(v33 - 5), (uint64_t)v134);
          v35 = *v33;
          v33 += 6;
          v34 = v35;
          sub_1B1CAECD4((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DBE0);
          v36 = sub_1B1D60544(v5);
          if (v36)
            break;
          objc_msgSend(v6, sel_setObjectBuffer_offset_atIndex_, 0, 0, v34);
          sub_1B1CAECD4((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DC08);
          if (!--v32)
            goto LABEL_27;
        }
        objc_msgSend(v6, sel_setObjectBuffer_offset_atIndex_, v36, v37, v34);
        sub_1B1CAECD4((uint64_t)v134, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DC08);
        swift_unknownObjectRelease();
        --v32;
      }
      while (v32);
LABEL_27:
      sub_1B1B28C6C((uint64_t)&v128);
      v7 = a1;
    }
    v127 = v7[7];
    v38 = *(_QWORD *)(v127 + 16);
    if (v38)
    {
      v39 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      do
      {
        v40 = *(v39 - 4);
        v41 = *(v39 - 3);
        v42 = *(v39 - 2);
        v43 = *v39;
        v44 = *((_BYTE *)v39 - 8);
        sub_1B1CC60E4(v40, v41, v42, v44);
        sub_1B1D608F4(v5, v40, v41, v42, v44);
        objc_msgSend(v6, sel_setObjectTexture_atIndex_, v45, v43);
        swift_unknownObjectRelease();
        sub_1B1CC62AC(v40, v41, v42, v44);
        v39 += 5;
        --v38;
      }
      while (v38);
      sub_1B1B28C6C((uint64_t)&v127);
      v4 = a4;
      v7 = a1;
    }
    v126 = v7[8];
    v46 = *(_QWORD *)(v126 + 16);
    if (v46)
    {
      v109 = v5 + 40;
      v47 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      do
      {
        v26 = *(v47 - 4);
        v49 = *(v47 - 3);
        v50 = *(v47 - 2);
        v51 = *((unsigned __int8 *)v47 - 8);
        v52 = *v47;
        if (v51 == 1)
        {
          sub_1B1D65D24(v109, (uint64_t)&v115);
          if (!v116)
            goto LABEL_85;
          sub_1B1A02518(&v115, (uint64_t)&v117);
          if (!v50)
            goto LABEL_83;
          v53 = (void *)*sub_1B19FA070(&v117, v119);
          swift_bridgeObjectRetain_n();
          v54 = (void *)sub_1B2228728();
          v48 = objc_msgSend(v53, sel_sampler::, v26, v54);

          sub_1B1D65DE4(v26, v49, v50, 1);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v117);
          LOBYTE(v51) = 1;
        }
        else
        {
          swift_unknownObjectRetain_n();
          v48 = (id)v26;
        }
        v47 += 5;
        objc_msgSend(a2, sel_setObjectSamplerState_atIndex_, v48, v52);
        swift_unknownObjectRelease();
        sub_1B1D65DE4(v26, v49, v50, v51);
        --v46;
      }
      while (v46);
      sub_1B1B28C6C((uint64_t)&v126);
      v5 = a3;
      v6 = a2;
      v4 = a4;
      v7 = a1;
    }
  }
  if ((v4 & 0x10) != 0)
  {
    v125 = v7[9];
    v55 = *(_QWORD *)(v125 + 16);
    if (v55)
    {
      v56 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
      do
      {
        while (1)
        {
          sub_1B1D2DB70((uint64_t)(v56 - 5), (uint64_t)v133);
          v58 = *v56;
          v56 += 6;
          v57 = v58;
          sub_1B1CAECD4((uint64_t)v133, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DBE0);
          v59 = sub_1B1D60544(v5);
          if (v59)
            break;
          objc_msgSend(v6, sel_setMeshBuffer_offset_atIndex_, 0, 0, v57);
          sub_1B1CAECD4((uint64_t)v133, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DC08);
          if (!--v55)
            goto LABEL_47;
        }
        objc_msgSend(v6, sel_setMeshBuffer_offset_atIndex_, v59, v60, v57);
        sub_1B1CAECD4((uint64_t)v133, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DC08);
        swift_unknownObjectRelease();
        --v55;
      }
      while (v55);
LABEL_47:
      sub_1B1B28C6C((uint64_t)&v125);
      v7 = a1;
    }
    v124 = v7[10];
    v61 = *(_QWORD *)(v124 + 16);
    if (v61)
    {
      v62 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      do
      {
        v63 = *(v62 - 4);
        v64 = *(v62 - 3);
        v65 = *(v62 - 2);
        v66 = *v62;
        v67 = *((_BYTE *)v62 - 8);
        sub_1B1CC60E4(v63, v64, v65, v67);
        sub_1B1D608F4(v5, v63, v64, v65, v67);
        objc_msgSend(v6, sel_setMeshTexture_atIndex_, v68, v66);
        swift_unknownObjectRelease();
        sub_1B1CC62AC(v63, v64, v65, v67);
        v62 += 5;
        --v61;
      }
      while (v61);
      sub_1B1B28C6C((uint64_t)&v124);
      v4 = a4;
      v7 = a1;
    }
    v123 = v7[11];
    v69 = *(_QWORD *)(v123 + 16);
    if (v69)
    {
      v110 = v5 + 40;
      v70 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
      do
      {
        v26 = *(v70 - 4);
        v72 = *(v70 - 3);
        v73 = *(v70 - 2);
        LODWORD(v74) = *((unsigned __int8 *)v70 - 8);
        v75 = *v70;
        if ((_DWORD)v74 == 1)
        {
          sub_1B1D65D24(v110, (uint64_t)&v115);
          if (!v116)
            goto LABEL_85;
          v74 = v75;
          sub_1B1A02518(&v115, (uint64_t)&v117);
          if (!v73)
            goto LABEL_83;
          v76 = (void *)*sub_1B19FA070(&v117, v119);
          swift_bridgeObjectRetain_n();
          v77 = (void *)sub_1B2228728();
          v71 = objc_msgSend(v76, sel_sampler::, v26, v77);

          sub_1B1D65DE4(v26, v72, v73, 1);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v117);
          v75 = v74;
          LOBYTE(v74) = 1;
        }
        else
        {
          swift_unknownObjectRetain_n();
          v71 = (id)v26;
        }
        v70 += 5;
        objc_msgSend(a2, sel_setMeshSamplerState_atIndex_, v71, v75);
        swift_unknownObjectRelease();
        sub_1B1D65DE4(v26, v72, v73, v74);
        --v69;
        v5 = a3;
      }
      while (v69);
      sub_1B1B28C6C((uint64_t)&v123);
      v6 = a2;
      v4 = a4;
      v7 = a1;
    }
  }
  if ((v4 & 2) == 0)
    return sub_1B1D60ED0(v7[13], 1, v4);
  v122 = v7[3];
  v78 = *(_QWORD *)(v122 + 16);
  if (v78)
  {
    v79 = (uint64_t *)(swift_bridgeObjectRetain() + 72);
    do
    {
      while (1)
      {
        sub_1B1D2DB70((uint64_t)(v79 - 5), (uint64_t)v132);
        v81 = *v79;
        v79 += 6;
        v80 = v81;
        sub_1B1CAECD4((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DBE0);
        v82 = sub_1B1D60544(v5);
        if (v82)
          break;
        objc_msgSend(v6, sel_setFragmentBuffer_offset_atIndex_, 0, 0, v80);
        sub_1B1CAECD4((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DC08);
        if (!--v78)
          goto LABEL_67;
      }
      objc_msgSend(v6, sel_setFragmentBuffer_offset_atIndex_, v82, v83, v80);
      sub_1B1CAECD4((uint64_t)v132, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D2DC08);
      swift_unknownObjectRelease();
      --v78;
    }
    while (v78);
LABEL_67:
    sub_1B1B28C6C((uint64_t)&v122);
    v7 = a1;
  }
  v121 = v7[4];
  v84 = *(_QWORD *)(v121 + 16);
  if (v84)
  {
    v85 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
    do
    {
      v86 = *(v85 - 4);
      v87 = *(v85 - 3);
      v88 = *(v85 - 2);
      v89 = *v85;
      v90 = *((_BYTE *)v85 - 8);
      sub_1B1CC60E4(v86, v87, v88, v90);
      sub_1B1D608F4(v5, v86, v87, v88, v90);
      objc_msgSend(v6, sel_setFragmentTexture_atIndex_, v91, v89);
      swift_unknownObjectRelease();
      sub_1B1CC62AC(v86, v87, v88, v90);
      v85 += 5;
      --v84;
    }
    while (v84);
    sub_1B1B28C6C((uint64_t)&v121);
    v4 = a4;
    v7 = a1;
  }
  v120 = v7[5];
  v92 = *(_QWORD *)(v120 + 16);
  if (!v92)
    return sub_1B1D60ED0(v7[13], 1, v4);
  v111 = v5 + 40;
  v93 = (uint64_t *)(swift_bridgeObjectRetain() + 64);
  while (1)
  {
    v96 = *(v93 - 4);
    v95 = *(v93 - 3);
    v97 = *(v93 - 2);
    v98 = *((unsigned __int8 *)v93 - 8);
    v99 = *v93;
    if (v98 == 1)
      break;
    swift_unknownObjectRetain_n();
    v94 = (id)v96;
LABEL_75:
    v93 += 5;
    objc_msgSend(a2, sel_setFragmentSamplerState_atIndex_, v94, v99);
    swift_unknownObjectRelease();
    sub_1B1D65DE4(v96, v95, v97, v98);
    if (!--v92)
    {
      sub_1B1B28C6C((uint64_t)&v120);
      v4 = a4;
      v7 = a1;
      return sub_1B1D60ED0(v7[13], 1, v4);
    }
  }
  sub_1B1D65D24(v111, (uint64_t)&v115);
  if (!v116)
  {
    swift_bridgeObjectRetain_n();
    sub_1B1D65D88((uint64_t)&v115);
    goto LABEL_89;
  }
  sub_1B1A02518(&v115, (uint64_t)&v117);
  if (v97)
  {
    v100 = (void *)*sub_1B19FA070(&v117, v119);
    v101 = v96;
    swift_bridgeObjectRetain_n();
    v113 = v96;
    v102 = v97;
    v103 = v95;
    v104 = (void *)sub_1B2228728();
    v94 = objc_msgSend(v100, sel_sampler::, v101, v104);

    v95 = v103;
    v97 = v102;
    v96 = v113;
    sub_1B1D65DE4(v113, v95, v97, 1);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v117);
    goto LABEL_75;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v117);
LABEL_89:
  v117 = 0;
  v118 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  LOBYTE(v115) = v96;
  sub_1B22295EC();
  sub_1B2228890();
LABEL_90:
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D65D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4B7870, (unint64_t *)&unk_1ED4B7860, (uint64_t)&protocol descriptor for ExternalDataTable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1D65D88(uint64_t a1)
{
  uint64_t v2;

  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4B7870, (unint64_t *)&unk_1ED4B7860, (uint64_t)&protocol descriptor for ExternalDataTable, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1D65DE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return swift_bridgeObjectRelease();
  else
    return swift_unknownObjectRelease();
}

uint64_t sub_1B1D65DF4(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B1D65E20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E8C378(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1B1D65E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;

  *(_QWORD *)(a2 + 16) = *(_QWORD *)a1;
  *(int8x16_t *)(a2 + 104) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  if (a3 >= 1 && (v5 = *(_QWORD *)(a1 + 88), *(_QWORD *)(v5 + 16) >= (unint64_t)a3))
  {
    v9 = (uint64_t *)(v5 + 40 * a3);
    v10 = *v9;
    v11 = v9[1];
    *(_QWORD *)(a2 + 32) = *(v9 - 1);
    *(_QWORD *)(a2 + 40) = v10;
    *(_QWORD *)(a2 + 48) = v11;
    swift_unknownObjectRetain_n();
    swift_unknownObjectRelease();
    v12 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a2 + 56) = v12 != 2;
    result = swift_unknownObjectRelease();
    v8 = v11 / v12;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
    {
      *(_QWORD *)(a2 + 32) = v6;
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
      swift_unknownObjectRetain();
      result = swift_unknownObjectRelease();
      v8 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 80) != 2;
    }
    else
    {
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      result = swift_unknownObjectRelease();
      v8 = 0;
    }
  }
  *(_QWORD *)(a2 + 64) = v8;
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v15 = (_OWORD *)(v13 + 40 * v14);
    v16 = *v15;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v15 - 1);
    *(_OWORD *)(a2 + 88) = v16;
    swift_unknownObjectRetain();
    result = swift_unknownObjectRelease();
  }
  *(_QWORD *)(a2 + 72) = 0;
  return result;
}

uint64_t sub_1B1D65F6C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1D65F90()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1D65FC4(void *a1, void *a2)
{
  uint64_t v2;

  return sub_1B1D63768(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned int *)(v2 + 32) | ((unint64_t)*(unsigned __int8 *)(v2 + 36) << 32), *(_BYTE *)(v2 + 37), *(_BYTE *)(v2 + 38), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1B1D65FF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1D64718(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_DWORD **)(v1 + 32), *(_BYTE *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1B1D66018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1ECA1F4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1B1D66034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1ECB46C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_DWORD *)(v2 + 40), *(unsigned int *)(v2 + 44) | ((unint64_t)*(unsigned __int8 *)(v2 + 48) << 32), a2);
}

unint64_t sub_1B1D6606C(unint64_t *a1)
{
  uint64_t v1;

  return sub_1B1D64BD0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t *sub_1B1D66084(uint64_t *a1)
{
  sub_1B1D660D4(*a1);
  return a1;
}

uint64_t sub_1B1D660D4(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_1B1D66100(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1D661D4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1D662A8()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_1B1D662CC(uint64_t a1, int a2, float32x4_t a3)
{
  uint64_t v3;

  sub_1B1D64AF4(a1, a2, *(id *)(v3 + 16), a3, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_BYTE *)(v3 + 40));
}

uint64_t sub_1B1D662DC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B1D5F7FC(a1);
}

uint64_t type metadata accessor for IndexedArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IndexedArray);
}

uint64_t sub_1B1D66304(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1D62FEC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B1D6631C(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1B1D66364(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1B1D663AC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __n128 a6, __n128 a7)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;

  v10 = (uint64_t *)a1[11];
  v11 = a1[12];
  v12 = a1[13];
  v13 = a1[2];
  v14 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v10, v11, v12, v13);
  v15 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v10, v11, v12, v13);
  v16 = a1[6];
  v17 = (__n128 *)(v15 + 32 * v16);
  *v17 = a6;
  v17[1] = a7;
  *(_QWORD *)(v14 + 8 * v16) = a2;
  swift_retain();
  swift_release();
  swift_retain();
  swift_retain();
  sub_1B1D5EBC4(a4, a3, 0, 1, a5, 0, a1);
  swift_release();
  return swift_release();
}

uint64_t sub_1B1D664D0(_QWORD *a1, uint64_t a2, int32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15)
{
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  __int32 v55;
  uint64_t v57;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  _QWORD v64[4];
  char v65;
  _QWORD v66[4];
  char v67;
  uint64_t v68;

  v20 = (uint64_t *)a1[11];
  v19 = a1[12];
  v21 = a1[13];
  v22 = a1[2];
  v62 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v20, v19, v21, v22);
  v23 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v20, v19, v21, v22);
  v24 = a1[6];
  v25 = a1[7];
  v26 = v25 - v24;
  v48 = a1;
  if (v25 == v24)
  {
    v27 = a14;
  }
  else
  {
    v29 = a1[3];
    v31 = a3[6];
    v30 = a3[7];
    v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.i8, 0);
    v55 = v31.i32[3];
    v57 = a4;
    v52 = (float32x4_t)vdupq_laneq_s32(v31, 2);
    v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.i8, 1);
    v32 = (float32x4_t)v30;
    v32.i32[1] = v30.i32[0];
    v32.i32[2] = v30.i32[0];
    v51 = v32;
    v49 = (float32x4_t)vzip2q_s32(vtrn1q_s32(v30, v30), v30);
    v50 = (float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v30.i8, 1), v30);
    v33 = (float32x4_t *)(v23 + 32 * v24 + 16);
    v63 = (uint64_t *)(v62 + 8 * v24);
    v34 = (float32x4_t *)(a2 + (v29 << 6) + 32);
    v59 = a8;
    v35 = a7 - v29 * a8;
    v36 = a6 + v29 * a8;
    v37 = a11 - v29 * a12;
    v38 = a10 + v29 * a12;
    v27 = a14;
    do
    {
      v61 = v26;
      v39 = v34[-2];
      v40 = v34[-1];
      v41 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v34[1], *v34, v52), v40, v53), v39, v54);
      v41.i32[3] = v55;
      v42 = vmlaq_f32(vmlaq_f32(vmulq_f32(v50, vabsq_f32(v40)), v51, vabsq_f32(v39)), v49, vabsq_f32(*v34));
      v33[-1] = v41;
      *v33 = v42;
      v66[0] = a5;
      v66[1] = v36;
      v66[2] = v35;
      v66[3] = 0;
      v67 = 0;
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)v66, 4, 0);
      swift_unknownObjectRelease();
      v64[0] = a9;
      v64[1] = v38;
      v64[2] = v37;
      v64[3] = 0;
      v65 = 0;
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)v64, 5, 0);
      swift_unknownObjectRelease();
      v43 = v27;
      v44 = *(_QWORD *)(v27 + 176);
      swift_retain();
      swift_retain();
      v45 = v68;
      v46 = sub_1B1F2381C((uint64_t)&type metadata for DrawCallPool, (uint64_t)&off_1E6374C20, v44);
      v68 = v45;
      swift_release();
      if (!v46)
      {
        type metadata accessor for DrawCall();
        v46 = swift_allocObject();
        sub_1B1D604AC();
      }
      swift_release();
      v27 = v43;
      sub_1B1D60088(v57);
      *v63++ = v46;
      swift_release();
      v33 += 2;
      v34 += 4;
      v35 -= v59;
      v36 += v59;
      v37 -= a12;
      v38 += a12;
      v26 = v61 - 1;
    }
    while (v61 != 1);
  }
  swift_retain();
  swift_retain();
  sub_1B1D5EBC4(v27, a13, 0, 1, a15, 0, v48);
  swift_release();
  return swift_release();
}

void sub_1B1D66814()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7A20)
  {
    sub_1B1B9A28C();
    v0 = sub_1B2229640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7A20);
  }
}

ValueMetadata *type metadata accessor for DrawCallLayer()
{
  return &type metadata for DrawCallLayer;
}

uint64_t _s3VFX13DrawCallLayerVwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1D668D4 + 4 * byte_1B2290B71[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1D66908 + 4 * byte_1B2290B6C[v4]))();
}

uint64_t sub_1B1D66908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D66910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D66918);
  return result;
}

uint64_t sub_1B1D66924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D6692CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1D66930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D66938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s28DrawCallEntityClassesContextVMa()
{
  return &_s28DrawCallEntityClassesContextVN;
}

ValueMetadata *_s21DrawCallEntityClassesVMa()
{
  return &_s21DrawCallEntityClassesVN;
}

ValueMetadata *type metadata accessor for DrawCallPool()
{
  return &type metadata for DrawCallPool;
}

ValueMetadata *type metadata accessor for RenderingOrder()
{
  return &type metadata for RenderingOrder;
}

ValueMetadata *type metadata accessor for DrawCallGenerationContext()
{
  return &type metadata for DrawCallGenerationContext;
}

void sub_1B1D66994()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1D669A4()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1D669B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D66B18(a1, a2, a3, MEMORY[0x1E0DEB890]);
}

uint64_t sub_1B1D669C0(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2290EB8);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE28], a1, &v3);
}

uint64_t sub_1B1D66A08(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2290F18);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE30], a1, &v3);
}

void sub_1B1D66A50()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1D66A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D66B18(a1, a2, a3, MEMORY[0x1E0DEB8B8]);
}

uint64_t sub_1B1D66A6C(uint64_t a1)
{
  uint64_t v3;

  v3 = MEMORY[0x1B5E23E74](&unk_1B2290F88);
  return MEMORY[0x1B5E23E74](MEMORY[0x1E0DEDE40], a1, &v3);
}

unint64_t sub_1B1D66AB8()
{
  unint64_t result;

  result = qword_1EEF5E1D8;
  if (!qword_1EEF5E1D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22910C0, &type metadata for DrawCallLayer);
    atomic_store(result, (unint64_t *)&qword_1EEF5E1D8);
  }
  return result;
}

void sub_1B1D66AFC()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1D66B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1D66B18(a1, a2, a3, MEMORY[0x1E0DEB8C0]);
}

uint64_t sub_1B1D66B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  _QWORD v8[2];

  v6 = sub_1B19FB0D0();
  v8[0] = MEMORY[0x1E0DEB458];
  v8[1] = v6;
  return MEMORY[0x1B5E23E74](a4, a1, v8);
}

void sub_1B1D66B60()
{
  JUMPOUT(0x1B5E23E74);
}

unint64_t sub_1B1D66B74()
{
  unint64_t result;

  result = qword_1ED4B85A0;
  if (!qword_1ED4B85A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291088, &_s28DrawCallEntityClassesContextVN);
    atomic_store(result, (unint64_t *)&qword_1ED4B85A0);
  }
  return result;
}

unint64_t sub_1B1D66BB8()
{
  unint64_t result;

  result = qword_1EEF5E1F0;
  if (!qword_1EEF5E1F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229136C, &type metadata for RenderingOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E1F0);
  }
  return result;
}

void sub_1B1D66BFC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1D66BB8();
    v7 = a3(a1, &type metadata for RenderingOrder.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for RenderingOrder.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1D66C98 + 4 * byte_1B2290B76[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1D66CB8 + 4 * byte_1B2290B7B[v4]))();
}

_BYTE *sub_1B1D66C98(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1D66CB8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1D66CC0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1D66CC8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1D66CD0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1D66CD8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RenderingOrder.CodingKeys()
{
  return &type metadata for RenderingOrder.CodingKeys;
}

unint64_t sub_1B1D66CF8()
{
  unint64_t result;

  result = qword_1EEF5E200;
  if (!qword_1EEF5E200)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291344, &type metadata for RenderingOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E200);
  }
  return result;
}

unint64_t sub_1B1D66D40()
{
  unint64_t result;

  result = qword_1EEF5E208;
  if (!qword_1EEF5E208)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22912B4, &type metadata for RenderingOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E208);
  }
  return result;
}

unint64_t sub_1B1D66D88()
{
  unint64_t result;

  result = qword_1EEF5E210;
  if (!qword_1EEF5E210)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22912DC, &type metadata for RenderingOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E210);
  }
  return result;
}

uint64_t sub_1B1D66DCC(uint64_t *a1)
{
  return sub_1B1D2DA40(a1);
}

uint64_t sub_1B1D66DE4(uint64_t a1)
{
  return sub_1B1B6932C(a1);
}

uint64_t sub_1B1D66E04()
{
  _BYTE *v0;

  if (v0[4] == 1)
    return *v0 & 1;
  else
    return 1;
}

double sub_1B1D66E24(uint64_t a1, unsigned int a2, char a3)
{
  double result;
  uint32x4_t v4;

  result = 0.0;
  if (!a3)
  {
    v4.i64[0] = a1;
    v4.i64[1] = a2;
    *(_QWORD *)&result = vmaxq_u32(v4, (uint32x4_t)xmmword_1B226E590).u64[0];
  }
  return result;
}

uint64_t sub_1B1D66E50(unsigned int a1, uint64_t a2, char a3)
{
  unsigned int v3;

  if (a1 <= 1)
    v3 = 1;
  else
    v3 = a1;
  if (a3 == 1)
    return v3;
  else
    return 0;
}

BOOL sub_1B1D66E68()
{
  uint64_t v0;

  return *(_DWORD *)(v0 + 152) != -1 || *(_DWORD *)(v0 + 156) != 0;
}

double sub_1B1D66E8C(__n128 _Q0, float a2, float a3)
{
  float v9;
  __float2 v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  double result;
  __int32 v15;
  float v16;

  _S4 = -2.0;
  __asm { FMLA            S5, S4, V0.S[1] }
  v15 = LODWORD(_S5);
  v16 = _Q0.n128_f32[2];
  v9 = sqrtf(1.0 - (float)(_S5 * _S5));
  v10 = __sincosf_stret(vmlas_n_f32(a2, a3 - a2, _Q0.n128_f32[0]));
  v11.f32[0] = v9 * v10.__cosval;
  v11.i32[1] = v15;
  v11.f32[2] = v9 * v10.__sinval;
  v12 = vmulq_n_f32(v11, cbrtf(v16));
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(v12, v13).u64[0];
  return result;
}

double sub_1B1D66F78(float32x4_t a1, float a2, float a3)
{
  float v3;
  __float2 v4;
  float v5;
  __float2 v6;
  float32x4_t v7;
  float32x4_t v8;
  double result;

  v3 = vmlas_n_f32(a2, a3 - a2, a1.f32[0]);
  v4 = __sincosf_stret((float)(1.0 - a1.f32[1]) * 3.1416);
  v5 = fmaxf(v4.__sinval, 0.0000001);
  v6 = __sincosf_stret(v3);
  v7.f32[0] = v5 * v6.__cosval;
  v7.i32[1] = LODWORD(v4.__cosval);
  v8.i64[0] = 0x3F0000003F000000;
  v8.i64[1] = 0x3F0000003F000000;
  v7.f32[2] = v5 * v6.__sinval;
  *(_QWORD *)&result = vmulq_f32(vmulq_laneq_f32(v7, a1, 2), v8).u64[0];
  return result;
}

uint64_t sub_1B1D67074()
{
  sub_1B1D718FC();
  return sub_1B2228A70();
}

uint64_t sub_1B1D670D0()
{
  sub_1B1D718FC();
  return sub_1B22289F8();
}

void sub_1B1D6711C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63938A8;
}

double sub_1B1D6712C()
{
  uint64_t v0;
  __int128 v1;
  double result;

  sub_1B1A02758(0, &qword_1ED4BADC8, (uint64_t)&type metadata for ShapeDistribution, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E100;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 48) = 2;
  sub_1B1BF3ED8(0xAuLL, 0xAuLL, 0xAuLL);
  *(_OWORD *)(v0 + 64) = v1;
  *(_BYTE *)(v0 + 80) = 0;
  *(_QWORD *)&result = 100;
  *(_OWORD *)(v0 + 96) = xmmword_1B226E570;
  *(_BYTE *)(v0 + 112) = 1;
  qword_1ED4D0CD8 = v0;
  return result;
}

uint64_t sub_1B1D671C0(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _BYTE v7[24];
  uint64_t v8;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  if (a4)
  {
    if (a4 == 1)
    {
      sub_1B19FC264((uint64_t)v7, v8);
      sub_1B2229B98();
      if (!v4)
      {
        sub_1B19FC264((uint64_t)v7, v8);
        sub_1B2229BC8();
      }
    }
    else
    {
      sub_1B19FC264((uint64_t)v7, v8);
      sub_1B2229B98();
    }
  }
  else
  {
    sub_1B19FC264((uint64_t)v7, v8);
    sub_1B2229B98();
    if (!v4)
    {
      sub_1B19FC264((uint64_t)v7, v8);
      sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B1D71434((unint64_t *)&qword_1EEF5E228, MEMORY[0x1E0DEDD60]);
      sub_1B2229BA4();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
}

uint64_t sub_1B1D67374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1D6B10C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D6FD70);
}

uint64_t sub_1B1D67380@<X0>(uint64_t a1@<X8>)
{
  return sub_1B1D6B148((uint64_t (*)(void))sub_1B1D7121C, a1);
}

uint64_t sub_1B1D6739C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1D671C0(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

uint64_t sub_1B1D673B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B1D6B1AC(&qword_1ED4B9150, &qword_1ED4D0CD8, a1);
}

uint64_t sub_1B1D673D4()
{
  sub_1B1D718B8();
  return sub_1B2228A70();
}

uint64_t sub_1B1D67430()
{
  sub_1B1D718B8();
  return sub_1B22289F8();
}

void sub_1B1D6747C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6379E40;
}

uint64_t sub_1B1D6748C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  if (qword_1EEF57360 != -1)
    swift_once();
  v2 = qword_1EEFD5550;
  if (*(_QWORD *)(qword_1EEFD5550 + 16) && (v3 = sub_1B1DC3AC8(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = sub_1B19F4420(a1, 0.0);
    v7 = 0;
    do
    {
      v8 = v7 + 1;
      v9 = *(_QWORD *)(sub_1B1D6F7E0(v7 + 1, 2uLL, v6) + 32);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = (uint64_t)sub_1B1FFEF9C(v5);
      *(_QWORD *)(v5 + 8 * v7++ + 32) = v9;
    }
    while (a1 != v8);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = qword_1EEFD5550;
    qword_1EEFD5550 = 0x8000000000000000;
    sub_1B1B892F4(v5, a1, isUniquelyReferenced_nonNull_native);
    qword_1EEFD5550 = v12;
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_1B1D675C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;

  if (qword_1EEF57368 != -1)
    swift_once();
  v2 = qword_1EEFD5558;
  if (*(_QWORD *)(qword_1EEFD5558 + 16) && (v3 = sub_1B1DC3AC8(a1), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = sub_1B19F4348(a1, (__n128)0);
    v7 = 0;
    do
    {
      v8 = v7 + 1;
      v9 = sub_1B1D6F7E0(v7 + 1, 3uLL, *(int32x2_t *)&v6);
      v13 = *(_QWORD *)(v9 + 32);
      v12 = *(_DWORD *)(v9 + 40);
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = (uint64_t)sub_1B1FFEF10(v5);
      *(_QWORD *)&v6 = v13;
      *((_QWORD *)&v6 + 1) = v12;
      *(_OWORD *)(v5 + 16 * v7++ + 32) = v6;
    }
    while (a1 != v8);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = qword_1EEFD5558;
    qword_1EEFD5558 = 0x8000000000000000;
    sub_1B1B87EA0(v5, a1, isUniquelyReferenced_nonNull_native);
    qword_1EEFD5558 = v14;
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t *sub_1B1D67714(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, int32x4_t a5, double a6, double a7, double a8, __n128 a9, double a10, int32x4_t a11)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2 != a3)
  {
    v11 = *(unsigned __int8 *)(a4 + 16);
    v12 = *(_QWORD *)(a4 + 80);
    v13 = *(_QWORD *)(a4 + 96);
    v14 = *(_QWORD *)(a4 + 112);
    a5.i64[0] = 0x3F0000003F000000;
    do
    {
      if (!v11)
        __asm { BR              X6 }
      if (v11 == 1)
        __asm { BR              X6 }
      v15 = result[1];
      v16 = result[2] ^ *result;
      v17 = result[3] ^ v15;
      v18 = v16 ^ v15;
      v19 = v17 ^ *result;
      v20.f32[0] = (float)((9 * ((((unint64_t)(5 * v15) >> 32) >> 25) | (640 * v15))) & 0xFFFFFF)
                 * 0.000000059605;
      v21 = v19 ^ v16 ^ (v15 << 17);
      v22 = v18 ^ __ROR8__(v17, 19);
      *result = v22 ^ v19;
      result[1] = v21 ^ v18;
      result[2] = v21 ^ (v18 << 17);
      result[3] = __ROR8__(v22, 19);
      v20.f32[1] = (float)((9 * ((((unint64_t)(5 * v18) >> 32) >> 25) | (640 * v18))) & 0xFFFFFF)
                 * 0.000000059605;
      *(float32x2_t *)a11.i8 = vadd_f32(v20, (float32x2_t)0xBF000000BF000000);
      a11 = vzip1q_s32(a11, a5);
      a11.i32[1] = 0;
      a11.i32[3] = a9.n128_i32[3];
      v23 = 16 * a2;
      *(int32x4_t *)(v12 + v23) = a11;
      *(_OWORD *)(v13 + v23) = xmmword_1B2244DD0;
      *(float32x2_t *)(v14 + 8 * a2++) = v20;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_1B1D67A6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint32x4_t *a4, float a5, float a6, __n128 a7)
{
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint32x4_t v16;
  float v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  __float2 v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  float32x2_t v32;
  unsigned __int32 v33;
  __int32 v34;

  if (a2 != a3)
  {
    v10 = a2;
    v12 = a4[1].u8[0];
    v13 = a4[5].i64[0];
    v14 = a4[6].i64[0];
    v15 = a4[7].i64[0];
    v16 = *a4;
    v16.i32[3] = 0;
    v17 = a6 - a5;
    v18 = (int32x4_t)vmaxq_u32(v16, (uint32x4_t)xmmword_1B226E590);
    v19 = vmulq_lane_s32(v18, *(int32x2_t *)v18.i8, 1);
    do
    {
      v33 = a7.n128_u32[3];
      v34 = v19.i32[3];
      if (!v12)
        __asm { BR              X10 }
      if (v12 == 1)
        __asm { BR              X10 }
      v20 = a1[1];
      v21 = a1[2] ^ *a1;
      v22 = a1[3] ^ v20;
      v23 = v21 ^ v20;
      v24 = v22 ^ *a1;
      v25.f32[0] = (float)((9 * ((((unint64_t)(5 * v20) >> 32) >> 25) | (640 * v20))) & 0xFFFFFF)
                 * 0.000000059605;
      v26 = v24 ^ v21 ^ (v20 << 17);
      v27 = v23 ^ __ROR8__(v22, 19);
      *a1 = v27 ^ v24;
      a1[1] = v26 ^ v23;
      a1[2] = v26 ^ (v23 << 17);
      a1[3] = __ROR8__(v27, 19);
      v25.f32[1] = (float)((9 * ((((unint64_t)(5 * v23) >> 32) >> 25) | (640 * v23))) & 0xFFFFFF)
                 * 0.000000059605;
      v32 = v25;
      v28 = __sincosf_stret(vmlas_n_f32(a5, v17, v25.f32[0]));
      *(float32x2_t *)v19.i8 = vmul_f32((float32x2_t)__PAIR64__(v32.u32[1], LODWORD(v28.__cosval)), (float32x2_t)0x3F0000003F000000);
      v29 = (float32x4_t)v19;
      v29.i32[1] = vadd_f32(v32, (float32x2_t)0xBF000000BF000000).i32[1];
      v29.f32[2] = v28.__sinval * 0.5;
      v19.i32[1] = v29.i32[1];
      *(float *)&v19.i32[2] = v28.__sinval * 0.5;
      v19.i32[3] = v33;
      v30 = vmulq_f32(v29, (float32x4_t)xmmword_1B22913F0);
      v30.i32[3] = v34;
      v31 = 16 * v10;
      *(int32x4_t *)(v13 + v31) = v19;
      *(float32x4_t *)(v14 + v31) = v30;
      *(float32x2_t *)(v15 + 8 * v10) = v32;
      a7.n128_u32[3] = v33;
      v19.i32[3] = v34;
      ++v10;
    }
    while (v10 != a3);
  }
}

void sub_1B1D67E7C(uint64_t *a1, uint64_t a2, uint64_t a3, uint32x4_t *a4, float a5, float a6, float a7)
{
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint32x4_t v17;
  float v18;
  int32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t v26;
  uint64_t v27;
  uint64_t v28;
  __float2 v29;
  __float2 v30;
  float64x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  uint64_t v39;
  __int32 v40;
  float32x2_t v41;

  if (a2 != a3)
  {
    v11 = a2;
    v13 = a4[1].u8[0];
    v14 = a4[5].i64[0];
    v15 = a4[6].i64[0];
    v16 = a4[7].i64[0];
    v17 = *a4;
    v17.i32[3] = 0;
    v18 = a7 - a6;
    v19 = (int32x4_t)vmaxq_u32(v17, (uint32x4_t)xmmword_1B226E590);
    v20 = (float32x4_t)vmulq_lane_s32(v19, *(int32x2_t *)v19.i8, 1);
    do
    {
      v40 = v20.i32[3];
      if (!v13)
        __asm { BR              X10 }
      if (v13 == 1)
        __asm { BR              X10 }
      v21 = a1[1];
      v22 = a1[2] ^ *a1;
      v23 = a1[3] ^ v21;
      v24 = v22 ^ v21;
      v25 = v23 ^ *a1;
      v26.f32[0] = (float)((9 * ((((unint64_t)(5 * v21) >> 32) >> 25) | (640 * v21))) & 0xFFFFFF)
                 * 0.000000059605;
      v27 = v25 ^ v22 ^ (v21 << 17);
      v28 = v24 ^ __ROR8__(v23, 19);
      *a1 = v28 ^ v25;
      a1[1] = v27 ^ v24;
      a1[2] = v27 ^ (v24 << 17);
      a1[3] = __ROR8__(v28, 19);
      v26.f32[1] = (float)((9 * ((((unint64_t)(5 * v24) >> 32) >> 25) | (640 * v24))) & 0xFFFFFF)
                 * 0.000000059605;
      v41 = v26;
      v29 = __sincosf_stret(vmlas_n_f32(a6, v18, v26.f32[0]));
      v30 = __sincosf_stret(vmuls_lane_f32(6.2832, v41, 1));
      v31 = vmulq_n_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v29.__sinval), LODWORD(v29.__cosval))), (float)(v30.__cosval * a5) + 0.5);
      *(float32x2_t *)v20.f32 = vcvt_f32_f64(v31);
      v20.f32[2] = v30.__sinval * a5;
      v32.i64[0] = 0xBF000000BF000000;
      v32.i64[1] = 0xBF000000BF000000;
      v33 = vaddq_f32(v20, vmulq_f32((float32x4_t)__PAIR64__(LODWORD(v29.__sinval), LODWORD(v29.__cosval)), v32));
      v34 = vmulq_f32(v33, v33);
      v34.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).u64[0];
      v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0);
      v35.i32[3] = 0;
      v36 = vrsqrteq_f32(v35);
      v37 = vmulq_f32(v36, vrsqrtsq_f32(v35, vmulq_f32(v36, v36)));
      v38 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v34.f32[0] != 0.0)), 0x1FuLL));
      v38.i32[3] = 0;
      v20.i32[3] = v40;
      v39 = 16 * v11;
      *(float32x4_t *)(v14 + v39) = v20;
      *(int8x16_t *)(v15 + v39) = vbslq_s8((int8x16_t)vcltzq_s32(v38), (int8x16_t)vmulq_f32(vmulq_f32(v37, vrsqrtsq_f32(v35, vmulq_f32(v37, v37))), v33), (int8x16_t)v33);
      *(float32x2_t *)(v16 + 8 * v11++) = v41;
    }
    while (v11 != a3);
  }
}

void sub_1B1D68330(uint64_t *a1, uint64_t a2, uint64_t a3, uint32x4_t *a4, char a5, float a6, float a7)
{
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint32x4_t v16;
  float v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  __float2 v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int32 v41;

  if (a2 != a3)
  {
    v11 = a2;
    v13 = a4[1].u8[0];
    v39 = a4[5].i64[0];
    v14 = a4[6].i64[0];
    v15 = a4[7].i64[0];
    v16 = *a4;
    v16.i32[3] = 0;
    v17 = a7 - a6;
    v18 = (int32x4_t)vmaxq_u32(v16, (uint32x4_t)xmmword_1B226E590);
    v19 = vmulq_lane_s32(v18, *(int32x2_t *)v18.i8, 1);
    do
    {
      v41 = v19.i32[3];
      if (!v13)
        __asm { BR              X10 }
      if (v13 == 1)
        __asm { BR              X10 }
      v20 = a1[1];
      v21 = a1[2] ^ *a1;
      v22 = a1[3] ^ v20;
      v23 = v21 ^ v20;
      v24 = v22 ^ *a1;
      *(float *)&v27 = (float)((9 * ((((unint64_t)(5 * v20) >> 32) >> 25) | (640 * v20))) & 0xFFFFFF)
                     * 0.000000059605;
      v25 = v24 ^ v21 ^ (v20 << 17);
      v26 = v23 ^ __ROR8__(v22, 19);
      *a1 = v26 ^ v24;
      a1[1] = v25 ^ v23;
      a1[2] = v25 ^ (v23 << 17);
      a1[3] = __ROR8__(v26, 19);
      *((float *)&v27 + 1) = (float)((9 * ((((unint64_t)(5 * v23) >> 32) >> 25) | (640 * v23))) & 0xFFFFFF)
                           * 0.000000059605;
      v40 = v27;
      v28 = v11 + 1;
      v29 = sqrtf(*((float *)&v27 + 1));
      if ((a5 & 1) != 0)
        v30 = (float)((9 * ((((unint64_t)(5 * v23) >> 32) >> 25) | (640 * v23))) & 0xFFFFFF)
            * 0.000000059605;
      else
        v30 = v29;
      v31 = __sincosf_stret(vmlas_n_f32(a6, v17, *(float *)&v27));
      v32.i64[0] = LODWORD(v31.__cosval) | 0x3F00000000000000;
      v32.i64[1] = LODWORD(v31.__sinval) | 0x3F00000000000000;
      v33 = vmulq_f32(v32, v32);
      v33.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).u64[0];
      v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0);
      v34.i32[3] = 0;
      v35 = vrsqrteq_f32(v34);
      v36 = vmulq_f32(v35, vrsqrtsq_f32(v34, vmulq_f32(v35, v35)));
      v37 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v33.f32[0] != 0.0)), 0x1FuLL));
      v37.i32[3] = 0;
      *(float *)v19.i32 = v31.__cosval * (float)(v30 * 0.5);
      *(float *)&v19.i32[1] = 0.5 - v30;
      *(float *)&v19.i32[2] = v31.__sinval * (float)(v30 * 0.5);
      v19.i32[3] = v41;
      v38 = 16 * v11;
      *(int32x4_t *)(v39 + v38) = v19;
      *(int8x16_t *)(v14 + v38) = vbslq_s8((int8x16_t)vcltzq_s32(v37), (int8x16_t)vmulq_f32(v32, vmulq_f32(v36, vrsqrtsq_f32(v34, vmulq_f32(v36, v36)))), (int8x16_t)v32);
      *(_QWORD *)(v15 + 8 * v11++) = v40;
    }
    while (v28 != a3);
  }
}

void sub_1B1D687C0(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  uint32x4_t *v4;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  int32x4_t v25;

  if (a2 != a3)
  {
    v7 = a2;
    v9 = v4[1].u8[0];
    v23 = v4[6].i64[0];
    v24 = v4[5].i64[0];
    v10 = v4[7].i64[0];
    v11 = *v4;
    v11.i32[3] = 0;
    v12 = (int32x4_t)vmaxq_u32(v11, (uint32x4_t)xmmword_1B226E590);
    v13 = vmulq_laneq_s32(vmulq_lane_s32(v12, *(int32x2_t *)v12.i8, 1), v12, 2);
    do
    {
      if (!v9)
        __asm { BR              X10 }
      if (v9 == 1)
        __asm { BR              X10 }
      v14 = a1[1];
      v15 = a1[2] ^ *a1;
      v16 = a1[3] ^ v14;
      v17 = v15 ^ v14;
      v18 = v16 ^ *a1;
      *(float *)v13.i32 = (float)((9 * ((((unint64_t)(5 * v14) >> 32) >> 25) | (640 * v14))) & 0xFFFFFF)
                        * 0.000000059605;
      v19 = v18 ^ v15 ^ (v14 << 17);
      v20 = v17 ^ __ROR8__(v16, 19);
      *a1 = v20 ^ v18;
      a1[1] = v19 ^ v17;
      a1[2] = v19 ^ (v17 << 17);
      a1[3] = __ROR8__(v20, 19);
      *(float *)&v13.i32[1] = (float)((9 * ((((unint64_t)(5 * v17) >> 32) >> 25) | (640 * v17))) & 0xFFFFFF)
                            * 0.000000059605;
      v25 = v13;
      *(double *)v13.i64 = a4();
      v21 = 16 * v7;
      *(int32x4_t *)(v24 + v21) = v13;
      *(_OWORD *)(v23 + v21) = v22;
      v13.i64[1] = v25.i64[1];
      *(_QWORD *)(v10 + 8 * v7++) = v25.i64[0];
    }
    while (v7 != a3);
  }
}

void sub_1B1D689A8(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = a1 + 1;
  JUMPOUT(0x1B1D68904);
}

uint64_t *sub_1B1D68B64(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x2_t v26;

  if (a2 != a3)
  {
    v5 = *(unsigned __int8 *)(a4 + 16);
    v6 = *(_QWORD *)(a4 + 80);
    v7 = *(_QWORD *)(a4 + 96);
    v8 = *(_QWORD *)(a4 + 112);
    do
    {
      if (!v5)
        __asm { BR              X7 }
      if (v5 == 1)
        __asm { BR              X7 }
      v12 = result[1];
      v13 = result[2] ^ *result;
      v14 = result[3] ^ v12;
      v15 = v13 ^ v12;
      v16 = v14 ^ *result;
      *(float *)&v17 = (float)((9 * ((((unint64_t)(5 * v12) >> 32) >> 25) | (640 * v12))) & 0xFFFFFF)
                     * 0.000000059605;
      v18 = v16 ^ v13 ^ (v12 << 17);
      v19 = __ROR8__(v14, 19);
      v20 = v18 ^ v15;
      v21 = v15 ^ v19 ^ v16;
      *(float *)&v22 = (float)((9 * ((((unint64_t)(5 * v15) >> 32) >> 25) | (640 * v15))) & 0xFFFFFF)
                     * 0.000000059605;
      v23 = v18 ^ (v15 << 17) ^ v21;
      v24 = v20 ^ __ROR8__(v15 ^ v19, 19);
      *result = v24 ^ v21;
      result[1] = v23 ^ v20;
      result[2] = v23 ^ (v20 << 17);
      result[3] = __ROR8__(v24, 19);
      v25.i32[3] = 0;
      v25.i64[0] = __PAIR64__(v22, v17);
      v25.f32[2] = (float)((9 * ((((unint64_t)(5 * v20) >> 32) >> 25) | (640 * v20))) & 0xFFFFFF)
                 * 0.000000059605;
      v26 = vadd_f32((float32x2_t)__PAIR64__(v22, v17), (float32x2_t)0xBF000000BF000000);
      switch((int)vmuls_lane_f32(6.0, v25, 2))
      {
        case 0:
          LODWORD(v9) = 1056964608;
          *(float32x2_t *)((char *)&v9 + 4) = v26;
          v10 = xmmword_1B2244DB0;
          break;
        case 1:
          LODWORD(v9) = -1090519040;
          *(float32x2_t *)((char *)&v9 + 4) = v26;
          v10 = xmmword_1B2244DC0;
          break;
        case 2:
          *(_QWORD *)&v9 = v26.u32[0] | 0x3F00000000000000;
          DWORD2(v9) = v26.i32[1];
          v10 = xmmword_1B2244DD0;
          break;
        case 3:
          *(_QWORD *)&v9 = v26.u32[0] | 0xBF00000000000000;
          DWORD2(v9) = v26.i32[1];
          v10 = xmmword_1B2244DE0;
          break;
        case 4:
          DWORD2(v9) = 1056964608;
          *(float32x2_t *)&v9 = v26;
          v10 = xmmword_1B2244D90;
          break;
        default:
          DWORD2(v9) = -1090519040;
          *(float32x2_t *)&v9 = v26;
          v10 = xmmword_1B2244DF0;
          break;
      }
      HIDWORD(v9) = HIDWORD(v4);
      v11 = 16 * a2;
      *(_OWORD *)(v6 + v11) = v9;
      *(_OWORD *)(v7 + v11) = v10;
      *(_QWORD *)(v8 + 8 * a2++) = v25.i64[0];
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t *sub_1B1D69024(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, int8x16_t a8)
{
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  int8x16_t v14;
  unsigned __int32 v15;
  float v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  unsigned __int32 v35;
  float v36;
  float v37;

  if (a2 != a3)
  {
    v9 = *(unsigned __int8 *)(a4 + 16);
    v10 = *(_QWORD *)(a4 + 80);
    v11 = *(_QWORD *)(a4 + 96);
    v12 = *(_QWORD *)(a4 + 112);
    v13.i64[0] = 0xBF000000BF000000;
    v13.i64[1] = 0xBF000000BF000000;
    a8.i32[0] = 1.0;
    v14.i64[0] = 0x8000000080000000;
    v14.i64[1] = 0x8000000080000000;
    while (1)
    {
      if (!v9)
        __asm { BR              X6 }
      if (v9 == 1)
        __asm { BR              X6 }
      v20 = result[1];
      v21 = result[2] ^ *result;
      v22 = result[3] ^ v20;
      v23 = v21 ^ v20;
      v24 = v22 ^ *result;
      v25 = (float)((9 * ((((unint64_t)(5 * v20) >> 32) >> 25) | (640 * v20))) & 0xFFFFFF)
          * 0.000000059605;
      v26 = v24 ^ v21 ^ (v20 << 17);
      v27 = __ROR8__(v22, 19);
      v28 = v26 ^ v23;
      v29 = v23 ^ v27 ^ v24;
      v30 = v26 ^ (v23 << 17) ^ v29;
      v31 = v28 ^ __ROR8__(v23 ^ v27, 19);
      *result = v31 ^ v29;
      result[1] = v30 ^ v28;
      result[2] = v30 ^ (v28 << 17);
      result[3] = __ROR8__(v31, 19);
      v32.i32[3] = 0;
      v32.f32[0] = v25;
      v32.f32[1] = (float)((9 * ((((unint64_t)(5 * v23) >> 32) >> 25) | (640 * v23))) & 0xFFFFFF)
                 * 0.000000059605;
      v32.f32[2] = (float)((9 * ((((unint64_t)(5 * v28) >> 32) >> 25) | (640 * v28))) & 0xFFFFFF)
                 * 0.000000059605;
      v33 = vaddq_f32(v32, v13);
      v34 = (int8x16_t)vabsq_f32(v33);
      if (*(float *)v34.i32 >= *(float *)&v34.i32[1])
        break;
      if (*(float *)&v34.i32[1] < *(float *)&v34.i32[2])
        goto LABEL_4;
      v34.i32[0] = v33.i32[1];
      v35 = vbslq_s8(v14, a8, v34).u32[0];
      if (v33.f32[1] == 0.0)
        v36 = 0.0;
      else
        v36 = *(float *)&v35;
      v37 = v36;
      LODWORD(v18) = 0;
      *((_QWORD *)&v18 + 1) = 0;
      *((float *)&v18 + 1) = v37;
LABEL_8:
      v33.i32[3] = HIDWORD(v8);
      v19 = 16 * a2;
      *(float32x4_t *)(v10 + v19) = v33;
      *(_OWORD *)(v11 + v19) = v18;
      *(_QWORD *)(v12 + 8 * a2++) = v32.i64[0];
      if (a2 == a3)
        return result;
    }
    if (*(float *)v34.i32 >= *(float *)&v34.i32[2])
    {
      LODWORD(v18) = vbslq_s8(v14, a8, (int8x16_t)v33).u32[0];
      if (v33.f32[0] == 0.0)
        *(float *)&v18 = 0.0;
      DWORD1(v18) = 0;
      *((_QWORD *)&v18 + 1) = 0;
      goto LABEL_8;
    }
LABEL_4:
    v34.i32[0] = v33.i32[2];
    v15 = vbslq_s8(v14, a8, v34).u32[0];
    if (v33.f32[2] == 0.0)
      v16 = 0.0;
    else
      v16 = *(float *)&v15;
    *(float *)&v17 = v16;
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = v17;
    goto LABEL_8;
  }
  return result;
}

void sub_1B1D694A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint32x4_t *a4, char a5, float a6, float a7, __n128 a8)
{
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint32x4_t v17;
  float v18;
  int32x4_t v19;
  int32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x2_t v33;
  uint64_t v34;
  float v35;
  __float2 v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  float32x2_t v41;
  unsigned int v42;
  unsigned __int32 v43;
  __int32 v44;

  if (a2 != a3)
  {
    v12 = a2;
    v14 = a4[1].u8[0];
    v40 = a4[5].i64[0];
    v15 = a4[6].i64[0];
    v16 = a4[7].i64[0];
    v17 = *a4;
    v17.i32[3] = 0;
    v18 = a7 - a6;
    v19 = (int32x4_t)vmaxq_u32(v17, (uint32x4_t)xmmword_1B226E590);
    v20 = vmulq_lane_s32(v19, *(int32x2_t *)v19.i8, 1);
    do
    {
      v43 = a8.n128_u32[3];
      v44 = v20.i32[3];
      if (!v14)
        __asm { BR              X10 }
      if (v14 == 1)
        __asm { BR              X10 }
      v21 = a1[1];
      v22 = a1[2] ^ *a1;
      v23 = a1[3] ^ v21;
      v24 = v22 ^ v21;
      v25 = v23 ^ *a1;
      v26 = (float)((9 * ((((unint64_t)(5 * v21) >> 32) >> 25) | (640 * v21))) & 0xFFFFFF)
          * 0.000000059605;
      v27 = v25 ^ v22 ^ (v21 << 17);
      v28 = __ROR8__(v23, 19);
      v29 = v27 ^ v24;
      v30 = v24 ^ v28 ^ v25;
      v31 = v27 ^ (v24 << 17) ^ v30;
      v32 = v29 ^ __ROR8__(v24 ^ v28, 19);
      *a1 = v32 ^ v30;
      a1[1] = v31 ^ v29;
      a1[2] = v31 ^ (v29 << 17);
      a1[3] = __ROR8__(v32, 19);
      v33.f32[0] = v26;
      v34 = v12 + 1;
      v35 = sqrtf((float)((9 * ((((unint64_t)(5 * v29) >> 32) >> 25) | (640 * v29))) & 0xFFFFFF)* 0.000000059605);
      if ((a5 & 1) != 0)
        v35 = (float)((9 * ((((unint64_t)(5 * v29) >> 32) >> 25) | (640 * v29))) & 0xFFFFFF)
            * 0.000000059605;
      v33.f32[1] = (float)((9 * ((((unint64_t)(5 * v24) >> 32) >> 25) | (640 * v24))) & 0xFFFFFF)
                 * 0.000000059605;
      v41 = v33;
      *(float *)&v42 = v35 * 0.5;
      v36 = __sincosf_stret(vmlas_n_f32(a6, v18, v26));
      *(float32x2_t *)v20.i8 = vmul_f32((float32x2_t)__PAIR64__(v41.u32[1], LODWORD(v36.__cosval)), (float32x2_t)(v42 | 0xBF00000000000000));
      v37 = (float32x4_t)v20;
      v37.i32[1] = vadd_f32(v41, (float32x2_t)0xBF000000BF000000).i32[1];
      v37.f32[2] = v36.__sinval * *(float *)&v42;
      v20.i32[1] = v37.i32[1];
      *(float *)&v20.i32[2] = v36.__sinval * *(float *)&v42;
      v20.i32[3] = v43;
      v38 = vmulq_f32(v37, (float32x4_t)xmmword_1B22913F0);
      v38.i32[3] = v44;
      v39 = 16 * v12;
      *(int32x4_t *)(v40 + v39) = v20;
      *(float32x4_t *)(v15 + v39) = v38;
      *(float32x2_t *)(v16 + 8 * v12) = v41;
      a8.n128_u32[3] = v43;
      v20.i32[3] = v44;
      ++v12;
    }
    while (v34 != a3);
  }
}

void sub_1B1D69940(uint64_t *a1, uint64_t a2, uint64_t a3, uint32x4_t *a4, char a5, float a6, float a7, float a8)
{
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint32x4_t v18;
  float v19;
  int32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float32x2_t v34;
  uint64_t v35;
  float v36;
  float v37;
  __float2 v38;
  __float2 v39;
  float64x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  uint64_t v48;
  uint64_t v49;
  __int32 v50;
  float32x2_t v51;

  if (a2 != a3)
  {
    v13 = a2;
    v15 = a4[1].u8[0];
    v49 = a4[5].i64[0];
    v16 = a4[6].i64[0];
    v17 = a4[7].i64[0];
    v18 = *a4;
    v18.i32[3] = 0;
    v19 = a8 - a7;
    v20 = (int32x4_t)vmaxq_u32(v18, (uint32x4_t)xmmword_1B226E590);
    v21 = (float32x4_t)vmulq_lane_s32(v20, *(int32x2_t *)v20.i8, 1);
    do
    {
      v50 = v21.i32[3];
      if (!v15)
        __asm { BR              X10 }
      if (v15 == 1)
        __asm { BR              X10 }
      v22 = a1[1];
      v23 = a1[2] ^ *a1;
      v24 = a1[3] ^ v22;
      v25 = v23 ^ v22;
      v26 = v24 ^ *a1;
      v27 = (float)((9 * ((((unint64_t)(5 * v22) >> 32) >> 25) | (640 * v22))) & 0xFFFFFF)
          * 0.000000059605;
      v28 = v26 ^ v23 ^ (v22 << 17);
      v29 = __ROR8__(v24, 19);
      v30 = v28 ^ v25;
      v31 = v25 ^ v29 ^ v26;
      v32 = v28 ^ (v25 << 17) ^ v31;
      v33 = v30 ^ __ROR8__(v25 ^ v29, 19);
      *a1 = v33 ^ v31;
      a1[1] = v32 ^ v30;
      a1[2] = v32 ^ (v30 << 17);
      a1[3] = __ROR8__(v33, 19);
      v34.f32[0] = v27;
      v34.f32[1] = (float)((9 * ((((unint64_t)(5 * v25) >> 32) >> 25) | (640 * v25))) & 0xFFFFFF)
                 * 0.000000059605;
      v51 = v34;
      v35 = v13 + 1;
      v36 = sqrtf((float)((9 * ((((unint64_t)(5 * v30) >> 32) >> 25) | (640 * v30))) & 0xFFFFFF)* 0.000000059605);
      if ((a5 & 1) != 0)
        v37 = (float)((9 * ((((unint64_t)(5 * v30) >> 32) >> 25) | (640 * v30))) & 0xFFFFFF)
            * 0.000000059605;
      else
        v37 = v36;
      v38 = __sincosf_stret(vmuls_lane_f32(6.2832, v34, 1));
      v39 = __sincosf_stret(vmlas_n_f32(a7, v19, v51.f32[0]));
      v40 = vmulq_n_f64(vcvtq_f64_f32((float32x2_t)__PAIR64__(LODWORD(v39.__sinval), LODWORD(v39.__cosval))), (float)(v38.__cosval * (float)(v37 * a6)) + 0.5);
      *(float32x2_t *)v21.f32 = vcvt_f32_f64(v40);
      v21.f32[2] = v38.__sinval * (float)(v37 * a6);
      v41.i64[0] = 0xBF000000BF000000;
      v41.i64[1] = 0xBF000000BF000000;
      v42 = vaddq_f32(v21, vmulq_f32((float32x4_t)__PAIR64__(LODWORD(v39.__sinval), LODWORD(v39.__cosval)), v41));
      v43 = vmulq_f32(v42, v42);
      v43.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).u64[0];
      v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 0);
      v44.i32[3] = 0;
      v45 = vrsqrteq_f32(v44);
      v46 = vmulq_f32(v45, vrsqrtsq_f32(v44, vmulq_f32(v45, v45)));
      v47 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v43.f32[0] != 0.0)), 0x1FuLL));
      v47.i32[3] = 0;
      v21.i32[3] = v50;
      v48 = 16 * v13;
      *(float32x4_t *)(v49 + v48) = v21;
      *(int8x16_t *)(v16 + v48) = vbslq_s8((int8x16_t)vcltzq_s32(v47), (int8x16_t)vmulq_f32(vmulq_f32(v46, vrsqrtsq_f32(v44, vmulq_f32(v46, v46))), v42), (int8x16_t)v42);
      *(float32x2_t *)(v17 + 8 * v13++) = v51;
    }
    while (v35 != a3);
  }
}

void sub_1B1D69E80(uint64_t *a1, uint64_t a2, uint64_t a3, uint32x4_t *a4, char a5, float a6, float a7)
{
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint32x4_t v16;
  float v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  uint64_t v33;
  float32x2_t v34;
  int8x8_t v35;
  unsigned int v36;
  __float2 v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  uint64_t v47;
  uint64_t v48;
  int32x2_t v49;
  uint64_t v50;
  __int32 v51;

  if (a2 != a3)
  {
    v11 = a2;
    v13 = a4[1].u8[0];
    v48 = a4[5].i64[0];
    v14 = a4[6].i64[0];
    v15 = a4[7].i64[0];
    v16 = *a4;
    v16.i32[3] = 0;
    v17 = a7 - a6;
    v18 = (int32x4_t)vmaxq_u32(v16, (uint32x4_t)xmmword_1B226E590);
    v19 = vmulq_lane_s32(v18, *(int32x2_t *)v18.i8, 1);
    do
    {
      v51 = v19.i32[3];
      if (!v13)
        __asm { BR              X10 }
      if (v13 == 1)
        __asm { BR              X10 }
      v20 = a1[1];
      v21 = a1[2] ^ *a1;
      v22 = a1[3] ^ v20;
      v23 = v21 ^ v20;
      v24 = v22 ^ *a1;
      v25 = (float)((9 * ((((unint64_t)(5 * v20) >> 32) >> 25) | (640 * v20))) & 0xFFFFFF)
          * 0.000000059605;
      v26 = v24 ^ v21 ^ (v20 << 17);
      v27 = __ROR8__(v22, 19);
      v28 = v26 ^ v23;
      v29 = v23 ^ v27 ^ v24;
      v30 = v26 ^ (v23 << 17) ^ v29;
      v31 = v28 ^ __ROR8__(v23 ^ v27, 19);
      *a1 = v31 ^ v29;
      a1[1] = v30 ^ v28;
      a1[2] = v30 ^ (v28 << 17);
      a1[3] = __ROR8__(v31, 19);
      v32.i32[3] = 0;
      *(float *)v32.i32 = v25;
      *(float *)&v32.i32[1] = (float)((9 * ((((unint64_t)(5 * v23) >> 32) >> 25) | (640 * v23))) & 0xFFFFFF)
                            * 0.000000059605;
      *(float *)&v32.i32[2] = (float)((9 * ((((unint64_t)(5 * v28) >> 32) >> 25) | (640 * v28))) & 0xFFFFFF)
                            * 0.000000059605;
      v33 = v11 + 1;
      v34 = (float32x2_t)vextq_s8(v32, v32, 4uLL).u64[0];
      v35 = (int8x8_t)vsqrt_f32(v34);
      if ((a5 & 1) != 0)
        v36 = -1;
      else
        v36 = 0;
      v49 = (int32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v36), (int8x8_t)v34, v35);
      v50 = v32.i64[0];
      v37 = __sincosf_stret(vmlas_n_f32(a6, v17, *(float *)v32.i32));
      v38.i64[0] = LODWORD(v37.__cosval) | 0x3F00000000000000;
      v38.i64[1] = LODWORD(v37.__sinval) | 0x3F00000000000000;
      v39 = vmulq_f32(v38, v38);
      v39.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).u64[0];
      v40 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0);
      v40.i32[3] = 0;
      v41 = vmuls_lane_f32(0.5 * *(float *)v49.i32, (float32x2_t)v49, 1);
      v42 = vrsqrteq_f32(v40);
      v43 = vmulq_f32(v42, vrsqrtsq_f32(v40, vmulq_f32(v42, v42)));
      v44 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v39.f32[0] != 0.0)), 0x1FuLL));
      v44.i32[3] = 0;
      v45 = (float32x2_t)vdup_lane_s32(v49, 0);
      v46 = vsub_f32((float32x2_t)0x3F0000003F000000, v45);
      v45.f32[0] = v41;
      v19.i32[0] = vmul_f32(*(float32x2_t *)v38.f32, v45).u32[0];
      v19.i32[1] = v46.i32[1];
      *(float *)&v19.i32[2] = v37.__sinval * v41;
      v19.i32[3] = v51;
      v47 = 16 * v11;
      *(int32x4_t *)(v48 + v47) = v19;
      *(int8x16_t *)(v14 + v47) = vbslq_s8((int8x16_t)vcltzq_s32(v44), (int8x16_t)vmulq_f32(v38, vmulq_f32(v43, vrsqrtsq_f32(v40, vmulq_f32(v43, v43)))), (int8x16_t)v38);
      *(_QWORD *)(v15 + 8 * v11++) = v50;
    }
    while (v33 != a3);
  }
}

__n128 sub_1B1D6A398(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  uint64_t v4;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __n128 result;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;

  if (a2 != a3)
  {
    v7 = a2;
    v9 = *(unsigned __int8 *)(v4 + 16);
    v28 = *(_QWORD *)(v4 + 96);
    v29 = *(_QWORD *)(v4 + 80);
    v10 = *(_QWORD *)(v4 + 112);
    do
    {
      if (!v9)
        __asm { BR              X10 }
      if (v9 == 1)
        __asm { BR              X10 }
      v11 = a1[1];
      v12 = a1[2] ^ *a1;
      v13 = a1[3] ^ v11;
      v14 = v12 ^ v11;
      v15 = v13 ^ *a1;
      v16 = (float)((9 * ((((unint64_t)(5 * v11) >> 32) >> 25) | (640 * v11))) & 0xFFFFFF)
          * 0.000000059605;
      v17 = v15 ^ v12 ^ (v11 << 17);
      v18 = __ROR8__(v13, 19);
      v19 = v17 ^ v14;
      v20 = v14 ^ v18 ^ v15;
      v21 = v17 ^ (v14 << 17) ^ v20;
      v22 = v19 ^ __ROR8__(v14 ^ v18, 19);
      *a1 = v22 ^ v20;
      a1[1] = v21 ^ v19;
      a1[2] = v21 ^ (v19 << 17);
      a1[3] = __ROR8__(v22, 19);
      v23.n128_u32[3] = 0;
      v23.n128_f32[0] = v16;
      v23.n128_f32[1] = (float)((9 * ((((unint64_t)(5 * v14) >> 32) >> 25) | (640 * v14))) & 0xFFFFFF)
                      * 0.000000059605;
      v23.n128_f32[2] = (float)((9 * ((((unint64_t)(5 * v19) >> 32) >> 25) | (640 * v19))) & 0xFFFFFF)
                      * 0.000000059605;
      v30 = v23;
      *(double *)&v24 = a4();
      v25 = 16 * v7;
      *(_OWORD *)(v29 + v25) = v24;
      *(_OWORD *)(v28 + v25) = v26;
      result = v30;
      *(_QWORD *)(v10 + 8 * v7++) = v30.n128_u64[0];
    }
    while (v7 != a3);
  }
  return result;
}

void sub_1B1D6A5B8(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = a1 + 1;
  JUMPOUT(0x1B1D6A510);
}

uint64_t *sub_1B1D6A79C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *result;
  uint32x4_t v7;
  int32x2_t v8;
  int v9;
  unint64_t v10;
  uint32x4_t v11;
  int8x16_t v12;
  int32x2_t v13;
  unsigned int v14;
  __int32 v15;
  __int32 v16;
  __int32 v17;
  unsigned __int32 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float32x2_t v25;
  float32x2_t v26;
  unsigned int v27;
  float32x2_t v28;
  float32x2_t v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  float v33;
  float32x2_t v34;
  double v35;
  float v36;
  float32x2_t v37;
  double v38;
  float v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  __int128 v43;
  uint32x4_t v44;

  if (*(_BYTE *)(v3 + 16))
  {
    if (*(_BYTE *)(v3 + 16) != 1)
    {
      *(_DWORD *)(v3 + 40) = 1042983595;
      *(_DWORD *)(v3 + 56) = 1067030938;
    }
    return sub_1B1D68B64(a1, a2, a3, v3);
  }
  else
  {
    v44 = *(uint32x4_t *)v3;
    result = (uint64_t *)sub_1B1BF3ED8(2uLL, 2uLL, 2uLL);
    if (a2 != a3)
    {
      v10 = *(_QWORD *)(v3 + 64);
      if ((v10 & 0x8000000000000000) == 0 && !HIDWORD(v10))
      {
        v11 = v44;
        v11.i32[3] = 0;
        v7.i32[3] = 0;
        v12 = (int8x16_t)vmaxq_u32(v11, v7);
        *(float *)v8.i32 = (float)v12.u32[0];
        v13 = (int32x2_t)vcvt_f32_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 4uLL));
        v14 = v12.i32[2] * v12.i32[1];
        v15 = v12.i32[0] * v12.i32[2];
        v16 = v12.i32[0] * v12.i32[1];
        v17 = v12.i32[2] * v12.i32[1] + v12.i32[0] * v12.i32[2];
        v18 = 2 * (v17 + v12.i32[0] * v12.i32[1]);
        v19 = 2 * v12.i32[2] * v12.i32[1];
        v20 = *(_QWORD *)(v3 + 80);
        v21 = *(_QWORD *)(v3 + 96);
        v22 = *(_QWORD *)(v3 + 112);
        v23 = *(unsigned __int8 *)(v3 + 17);
        v24 = 2 * v17;
        v25 = (float32x2_t)vdup_n_s32(0x3F800008u);
        v26 = vdiv_f32(v25, (float32x2_t)vzip1_s32(v8, v13));
        v27 = v24 + v16;
        v28 = vdiv_f32(v25, (float32x2_t)v13);
        v13.i32[0] = v8.i32[0];
        v29 = vdiv_f32(v25, (float32x2_t)v13);
        v30 = v19 + v15;
        v31 = v10 % v18;
        v32 = (float)(v10 % v18);
        if (v10 % v18 >= v19)
        {
          v37.f32[0] = fminf((float)(v26.f32[0] * v32) - floorf(v26.f32[0] * v32), 1.0);
          v37.i32[1] = fminf((float)(v26.f32[1] * (float)((float)(v26.f32[0] * v32) - v37.f32[0]))- floorf(v26.f32[1] * (float)((float)(v26.f32[0] * v32) - v37.f32[0])), 1.0);
          v38 = COERCE_DOUBLE(vmla_f32(v37, (float32x2_t)0x3F0000003F000000, v26));
          if (v31 >= v27)
            v39 = 5.0;
          else
            v39 = 4.0;
          v40 = v29.f32[0] * v32;
          v41.f32[0] = fminf(v40 - floorf(v40), 1.0);
          v41.i32[1] = fminf((float)(v29.f32[1] * (float)(v40 - v41.f32[0]))- floorf(v29.f32[1] * (float)(v40 - v41.f32[0])), 1.0);
          v35 = COERCE_DOUBLE(vmla_f32(v41, (float32x2_t)0x3F0000003F000000, v29));
          if (v31 >= v30)
            v36 = 3.0;
          else
            v36 = 2.0;
          if (v31 >= v24)
          {
            v35 = v38;
            v36 = v39;
          }
        }
        else
        {
          v33 = v28.f32[0] * v32;
          v34.f32[0] = fminf(v33 - floorf(v33), 1.0);
          v34.i32[1] = fminf((float)(v28.f32[1] * (float)(v33 - v34.f32[0]))- floorf(v28.f32[1] * (float)(v33 - v34.f32[0])), 1.0);
          v35 = COERCE_DOUBLE(vmla_f32(v34, (float32x2_t)0x3F0000003F000000, v28));
          if (v31 >= v14)
            v36 = 1.0;
          else
            v36 = 0.0;
        }
        v42 = vadd_f32(*(float32x2_t *)&v35, (float32x2_t)0xBF000000BF000000);
        switch((int)v36)
        {
          case 0:
            *(_OWORD *)(v21 + 16 * a2) = xmmword_1B2244DB0;
            LODWORD(v43) = 1056964608;
            goto LABEL_27;
          case 1:
            *(_OWORD *)(v21 + 16 * a2) = xmmword_1B2244DC0;
            LODWORD(v43) = -1090519040;
LABEL_27:
            *(float32x2_t *)((char *)&v43 + 4) = v42;
            goto LABEL_30;
          case 2:
            *(_OWORD *)(v21 + 16 * a2) = xmmword_1B2244DD0;
            DWORD1(v43) = 1056964608;
            goto LABEL_25;
          case 3:
            *(_OWORD *)(v21 + 16 * a2) = xmmword_1B2244DE0;
            DWORD1(v43) = -1090519040;
LABEL_25:
            DWORD2(v43) = v42.i32[1];
            LODWORD(v43) = v42.i32[0];
            goto LABEL_30;
          case 4:
            *(_OWORD *)(v21 + 16 * a2) = xmmword_1B2244D90;
            DWORD2(v43) = 1056964608;
            goto LABEL_29;
          default:
            *(_OWORD *)(v21 + 16 * a2) = xmmword_1B2244DF0;
            DWORD2(v43) = -1090519040;
LABEL_29:
            *(float32x2_t *)&v43 = v42;
LABEL_30:
            HIDWORD(v43) = v9;
            *(_OWORD *)(v20 + 16 * a2) = v43;
            *(double *)(v22 + 8 * a2) = v35;
            __asm { BR              X6 }
            return result;
        }
      }
      result = (uint64_t *)sub_1B222967C();
      __break(1u);
    }
  }
  return result;
}

void sub_1B1D6AC44()
{
  qword_1ED4D0A20 = (uint64_t)&unk_1E6374D38;
}

uint64_t sub_1B1D6AC58(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v5[24];
  uint64_t v6;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  if ((a2 & 0x100000000) != 0)
    __asm { BR              X10 }
  sub_1B19FC264((uint64_t)v5, v6);
  sub_1B2229B98();
  if (!v2)
  {
    sub_1B19FC264((uint64_t)v5, v6);
    sub_1B2229B8C();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

uint64_t sub_1B1D6ADFC(unsigned int *a1, unsigned int *a2)
{
  return sub_1B1D6FB38(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32));
}

unint64_t sub_1B1D6AE30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1B1D71494(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t sub_1B1D6AE60(_QWORD *a1)
{
  unsigned int *v1;

  return sub_1B1D6AC58(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

uint64_t sub_1B1D6AE90@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B1D6B1AC(&qword_1ED4B7FC8, &qword_1ED4D0A20, a1);
}

double sub_1B1D6AEAC()
{
  uint64_t v0;
  double result;

  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BACC8, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226CAD0;
  *(_OWORD *)(v0 + 32) = xmmword_1B2244DD0;
  *(_BYTE *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 64) = xmmword_1B2244DD0;
  *(_BYTE *)(v0 + 80) = 1;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  *(_BYTE *)(v0 + 112) = 2;
  *(_OWORD *)(v0 + 128) = xmmword_1B2246910;
  *(_BYTE *)(v0 + 144) = 2;
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 160) = xmmword_1B226E520;
  *(_BYTE *)(v0 + 176) = 2;
  qword_1ED4D0A30 = v0;
  return result;
}

uint64_t sub_1B1D6AF40(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v4;
  _BYTE v7[24];
  uint64_t v8;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  if (a4 > 1u)
  {
    sub_1B19FC264((uint64_t)v7, v8);
    sub_1B2229B98();
  }
  else
  {
    sub_1B19FC264((uint64_t)v7, v8);
    sub_1B2229B98();
    if (!v4)
    {
      sub_1B19FC264((uint64_t)v7, v8);
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
      sub_1B2229BA4();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
}

uint64_t sub_1B1D6B100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1D6B10C(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1D6FBF0);
}

uint64_t sub_1B1D6B10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

uint64_t sub_1B1D6B12C@<X0>(uint64_t a1@<X8>)
{
  return sub_1B1D6B148((uint64_t (*)(void))sub_1B1D71630, a1);
}

uint64_t sub_1B1D6B148@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = a1();
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B1D6B174(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1D6AF40(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

uint64_t sub_1B1D6B190@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B1D6B1AC(&qword_1ED4B8000, &qword_1ED4D0A30, a1);
}

uint64_t sub_1B1D6B1AC@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1D6B1F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D6B230 + 4 * byte_1B22914DC[a1]))(0x4C72616C75676E61, 0xED00007374696D69);
}

uint64_t sub_1B1D6B230()
{
  return 0x6F69746365726964;
}

uint64_t sub_1B1D6B24C()
{
  return 0x7562697274736964;
}

uint64_t sub_1B1D6B26C()
{
  return 0x75536E4F74696D65;
}

uint64_t sub_1B1D6B290()
{
  return 0x7461746E6569726FLL;
}

uint64_t sub_1B1D6B2B0()
{
  return 0x6570616873;
}

uint64_t sub_1B1D6B2C4()
{
  return 0x6E69646165727073;
}

uint64_t sub_1B1D6B2E8()
{
  return 0x41746E65676E6174;
}

uint64_t sub_1B1D6B30C()
{
  return 0x46746E65676E6174;
}

uint64_t sub_1B1D6B32C()
{
  return 0x726F66736E617274;
}

uint64_t sub_1B1D6B350()
{
  return 0x797469636F6C6576;
}

uint64_t sub_1B1D6B374()
{
  return 0x65727574786574;
}

unint64_t sub_1B1D6B38C()
{
  return 0xD000000000000012;
}

void sub_1B1D6B434()
{
  JUMPOUT(0x1B1D6B448);
}

uint64_t sub_1B1D6B454(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D6B494 + 4 * byte_1B22914EF[a1]))(0x4C72616C75676E61, 0xED00007374696D69);
}

uint64_t sub_1B1D6B494()
{
  return 0x6F69746365726964;
}

uint64_t sub_1B1D6B4B0()
{
  return 0x7562697274736964;
}

uint64_t sub_1B1D6B4D0()
{
  return 0x75536E4F74696D65;
}

uint64_t sub_1B1D6B4F4()
{
  return 0x7461746E6569726FLL;
}

uint64_t sub_1B1D6B514()
{
  return 0x6570616873;
}

uint64_t sub_1B1D6B528()
{
  return 0x6E69646165727073;
}

uint64_t sub_1B1D6B54C()
{
  return 0x41746E65676E6174;
}

uint64_t sub_1B1D6B570()
{
  return 0x46746E65676E6174;
}

uint64_t sub_1B1D6B590()
{
  return 0x726F66736E617274;
}

uint64_t sub_1B1D6B5B4()
{
  return 0x797469636F6C6576;
}

uint64_t sub_1B1D6B5D8()
{
  return 0x65727574786574;
}

unint64_t sub_1B1D6B5F0()
{
  return 0xD000000000000012;
}

void sub_1B1D6B698()
{
  JUMPOUT(0x1B1D6B6ACLL);
}

uint64_t sub_1B1D6B6B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1D6B454(*a1);
  v5 = v4;
  if (v3 == sub_1B1D6B454(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1D6B740()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D6B1F0(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D6B7A0()
{
  unsigned __int8 *v0;

  sub_1B1D6B1F0(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D6B7E0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D6B1F0(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D6B83C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D701B4();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D6B868@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1D6B1F0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1D6B890()
{
  unsigned __int8 *v0;

  return sub_1B1D6B454(*v0);
}

uint64_t sub_1B1D6B898@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D701B4();
  *a1 = result;
  return result;
}

void sub_1B1D6B8BC(_BYTE *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_1B1D6B8C8()
{
  sub_1B1D72A78();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D6B8F0()
{
  sub_1B1D72A78();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D6B918(_QWORD *a1)
{
  __n128 *v1;
  uint64_t v2;
  __n128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  __n128 v16[2];
  __n128 v17[2];
  _BYTE v18[32];
  __n128 v19[2];
  int v20;
  char v21;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5E298, (uint64_t (*)(void))sub_1B1D72A78, (uint64_t)&type metadata for EmitterShape.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v15 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D72A78();
  sub_1B222A180();
  v16[0].n128_u64[0] = v3->n128_u64[1];
  v21 = 0;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  if (!v2)
  {
    sub_1B1AF1518(v3 + 3, v19);
    sub_1B1AF1518(v19, v16);
    v21 = 1;
    sub_1B1A721B4();
    sub_1B2229958();
    v16[0].n128_u8[0] = 3;
    sub_1B222991C();
    sub_1B1A18378((uint64_t)&v3[5], (uint64_t)v18, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
    sub_1B1A18378((uint64_t)v18, (uint64_t)v16, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
    v21 = 4;
    sub_1B1A02758(0, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1B1D72ABC(&qword_1EEF5E2A0, (uint64_t (*)(void))sub_1B1A721B4, MEMORY[0x1E0DEE988]);
    sub_1B2229958();
    sub_1B1AF2188((int *)v3, (uint64_t)&v20);
    sub_1B1AF2188(&v20, (uint64_t)v16);
    v21 = 5;
    sub_1B1A71F44();
    sub_1B2229958();
    v16[0].n128_u64[0] = v3[7].n128_u64[0];
    v21 = 6;
    sub_1B2229958();
    v16[0] = v3[8];
    v21 = 7;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v12 = v11;
    v13 = sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
    v15[1] = v12;
    sub_1B2229958();
    v15[0] = v13;
    v16[0].n128_u64[0] = v3[9].n128_u64[0];
    v21 = 8;
    sub_1B2229958();
    v16[0].n128_u8[0] = 9;
    sub_1B2229934();
    sub_1B1AF1518(v3 + 1, v17);
    sub_1B1AF1518(v17, v16);
    v21 = 2;
    sub_1B1A72250();
    sub_1B2229958();
    v16[0].n128_u64[0] = v3[6].n128_u64[1];
    v21 = 10;
    sub_1B2229958();
    v16[0].n128_u64[0] = v3[9].n128_u64[1];
    v21 = 11;
    sub_1B1A0895C();
    sub_1B2229958();
    v16[0].n128_u8[0] = v3[10].n128_u8[0];
    v21 = 12;
    sub_1B1A71D70();
    sub_1B2229958();
    v16[0] = v3[11];
    v21 = 13;
    sub_1B2229958();
    v16[0] = v3[12];
    v21 = 14;
    sub_1B2229958();
    v16[0].n128_u8[0] = 15;
    sub_1B222991C();
    v16[0].n128_u8[0] = v3[2].n128_u8[1];
    v21 = 16;
    sub_1B1A7192C();
    sub_1B2229958();
    v16[0].n128_u8[0] = v3[6].n128_u8[1];
    v21 = 17;
    sub_1B1A71890();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1D6BEFC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[13];
  char v12;

  sub_1B1D71940(a1, (uint64_t)v11);
  if (!v2)
  {
    v5 = v11[11];
    *(_OWORD *)(a2 + 160) = v11[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v11[12];
    *(_BYTE *)(a2 + 208) = v12;
    v6 = v11[7];
    *(_OWORD *)(a2 + 96) = v11[6];
    *(_OWORD *)(a2 + 112) = v6;
    v7 = v11[9];
    *(_OWORD *)(a2 + 128) = v11[8];
    *(_OWORD *)(a2 + 144) = v7;
    v8 = v11[3];
    *(_OWORD *)(a2 + 32) = v11[2];
    *(_OWORD *)(a2 + 48) = v8;
    v9 = v11[5];
    *(_OWORD *)(a2 + 64) = v11[4];
    *(_OWORD *)(a2 + 80) = v9;
    result = *(double *)v11;
    v10 = v11[1];
    *(_OWORD *)a2 = v11[0];
    *(_OWORD *)(a2 + 16) = v10;
  }
  return result;
}

uint64_t sub_1B1D6BF6C(_QWORD *a1)
{
  return sub_1B1D6B918(a1);
}

uint64_t sub_1B1D6BFD4()
{
  return sub_1B1D70204();
}

uint64_t sub_1B1D6C03C()
{
  return type metadata accessor for EmitterShape.CPUSystem();
}

uint64_t sub_1B1D6C058(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 96);
  v3 = *(float *)(a1 + 148);
  v4 = *(unsigned __int8 *)(a1 + 208);
  v6 = *(float *)(a2 + 104);
  v5 = *(float *)(a2 + 108);
  v8 = *(float *)(a2 + 144);
  v7 = *(float *)(a2 + 148);
  if (*(float *)(a1 + 104) == 0.0 && *(float *)(a1 + 108) == 0.0)
  {
    if (v6 != 0.0 || v5 != 0.0)
    {
      result = 1;
      if (v8 != 0.0 || v7 != 0.0)
        return result;
    }
  }
  else if (*(float *)(a1 + 144) == 0.0)
  {
    if (v6 == 0.0 && v5 == 0.0)
    {
      if (v3 != 0.0)
        return 1;
    }
    else if (v8 == 0.0)
    {
      if ((v3 != 0.0) == (v7 == 0.0))
        return 1;
    }
    else if (v3 == 0.0)
    {
      return 1;
    }
  }
  else if (v6 == 0.0)
  {
    if (v5 == 0.0)
      return 1;
    if (v8 == 0.0 && v7 == 0.0)
      return 1;
  }
  else if (v8 == 0.0 && v7 == 0.0)
  {
    return 1;
  }
  if (*(unsigned __int8 *)(a2 + 96) == 255)
  {
    if (v2 != 255)
      return 1;
  }
  else if (v2 == 255)
  {
    return 1;
  }
  return v4 ^ *(unsigned __int8 *)(a2 + 208);
}

uint64_t sub_1B1D6C190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8))(v2 + 152, 0, ObjectType, a2);
}

__n128 sub_1B1D6C1D8@<Q0>(uint64_t a1@<X8>)
{
  __n128 result;

  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 1;
  *(_QWORD *)(a1 + 8) = 0x40C90FDA00000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 2;
  *(_BYTE *)(a1 + 34) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 2;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 767;
  *(_OWORD *)(a1 + 100) = xmmword_1B2291400;
  *(_DWORD *)(a1 + 116) = 1050253722;
  *(_OWORD *)(a1 + 128) = xmmword_1B2244DD0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 160) = 2;
  __asm { FMOV            V0.4S, #1.0 }
  *(__n128 *)(a1 + 176) = result;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  return result;
}

double sub_1B1D6C268(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  __n128 *v3;
  double result;
  int8x16_t v5;
  float32x4_t v6;
  int8x16_t v7;
  int32x4_t v8;
  float32x2_t v9;
  float32x2_t v10;
  int32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  float32x4_t v18[3];
  __n128 v19[2];
  float32x4_t v20;
  char v21;

  sub_1B1C2F9CC(v18, a1, a2, a3);
  v16 = (int32x4_t)v18[1];
  v17 = (int32x4_t)v18[0];
  v15 = (int32x4_t)v18[2];
  sub_1B1AF1518(v3 + 3, v19);
  sub_1B1AF1518(v19, (__n128 *)&v20);
  result = 0.0;
  if (v21 == 1)
  {
    v7 = (int8x16_t)vabsq_f32(v20);
    if (*(float *)v7.i32 > 0.00000011921
      || (v7.i32[0] = vextq_s8(v7, v7, 8uLL).u32[0],
          *(int32x2_t *)v7.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v7.i8),
          (v7.i8[4] & 1) == 0)
      || (v7.i8[0] & 1) == 0)
    {
      v8 = (int32x4_t)vmulq_f32(v20, v20);
      v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
      v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
      v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
      *(_QWORD *)&result = vmulq_n_f32(v20, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]).u64[0];
    }
  }
  else if (!v21)
  {
    v5 = (int8x16_t)vabsq_f32(v20);
    if (*(float *)v5.i32 <= 0.00000011921
      && (v5.i32[0] = vextq_s8(v5, v5, 8uLL).u32[0],
          *(int32x2_t *)v5.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v5.i8),
          (v5.i8[4] & 1) != 0)
      && (v5.i8[0] & 1) != 0)
    {
      v6 = (float32x4_t)xmmword_1B2244D90;
    }
    else
    {
      v11 = (int32x4_t)vmulq_f32(v20, v20);
      v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
      v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
      v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
      v6 = vmulq_n_f32(v20, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
    }
    v14 = (float32x4_t)vtrn2q_s32(v17, v16);
    v14.i32[2] = v15.i32[1];
    *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v17, v15), v16), v6.f32[0]), v14, *(float32x2_t *)v6.f32, 1), (float32x4_t)vzip1q_s32(vzip2q_s32(v17, v15), vdupq_laneq_s32(v16, 2)), v6, 2).u64[0];
  }
  return result;
}

double sub_1B1D6C3E0(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v3;
  double result;
  int8x16_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v24;
  int32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  uint64_t v44;
  float32x4_t v45;
  float v46;
  float v48;
  float32x4_t v49;
  float32x2_t v50;
  float v51;
  float32x4_t v52;
  float v53;
  float32x4_t v54;
  float32x4_t v58[3];
  _BYTE v59[32];
  __n128 v60;
  unsigned __int8 v61;
  __n128 v62[2];
  float32x4_t v63;
  char v64;

  sub_1B1A18378(v3 + 80, (uint64_t)v59, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  sub_1B1A18378((uint64_t)v59, (uint64_t)&v60, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  result = 0.0;
  if (v61 != 255)
  {
    sub_1B1AF1518(&v60, v62);
    sub_1B1AF1518(v62, (__n128 *)&v63);
    if (v64 == 1)
    {
      v54 = v63;
      sub_1B1C2F9CC(v58, a1, a2, a3);
      v8 = (int8x16_t)vabsq_f32(v54);
      if (*(float *)v8.i32 <= 0.00000011921
        && (v8.i32[0] = vextq_s8(v8, v8, 8uLL).u32[0],
            *(int32x2_t *)v8.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v8.i8),
            (v8.i8[4] & 1) != 0)
        && (v8.i8[0] & 1) != 0)
      {
        v9 = (float32x4_t)xmmword_1B2244D90;
      }
      else
      {
        v25 = (int32x4_t)vmulq_f32(v54, v54);
        v25.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2), vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1))).u32[0];
        v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
        v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
        v9 = vmulq_n_f32(v54, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
      }
      v18 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v58[0], v9.f32[0]), v58[1], *(float32x2_t *)v9.f32, 1), v58[2], v9, 2);
      v28 = vmulq_f32(v18, v18);
      v28.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).u64[0];
      v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0);
      v29.i32[3] = 0;
      v30 = vrsqrteq_f32(v29);
      v31 = vmulq_f32(v30, vrsqrtsq_f32(v29, vmulq_f32(v30, v30)));
      v17 = vmulq_f32(v31, v31);
      v32 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v28.f32[0] != 0.0)), 0x1FuLL));
      v32.i32[3] = 0;
      v24 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v32), (int8x16_t)vmulq_f32(v18, vmulq_f32(v31, vrsqrtsq_f32(v29, v17))), (int8x16_t)v18);
    }
    else
    {
      result = 0.0;
      if (v64)
        return result;
      v6 = (int8x16_t)vabsq_f32(v63);
      if (*(float *)v6.i32 <= 0.00000011921
        && (v6.i32[0] = vextq_s8(v6, v6, 8uLL).u32[0],
            *(int32x2_t *)v6.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v6.i8),
            (v6.i8[4] & 1) != 0)
        && (v6.i8[0] & 1) != 0)
      {
        v7 = (float32x4_t)xmmword_1B2244D90;
      }
      else
      {
        v10 = (int32x4_t)vmulq_f32(v63, v63);
        v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
        v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
        v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
        v7 = vmulq_n_f32(v63, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
      }
      v13 = vmulq_f32(v7, v7);
      v13.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u64[0];
      v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
      v14.i32[3] = 0;
      v15 = vrsqrteq_f32(v14);
      v16 = vmulq_f32(v15, vrsqrtsq_f32(v14, vmulq_f32(v15, v15)));
      v17 = vmulq_f32(v16, v16);
      v18 = vmulq_f32(v16, vrsqrtsq_f32(v14, v17));
      v19 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v13.f32[0] != 0.0)), 0x1FuLL));
      v19.i32[3] = 0;
      __asm { FMOV            V3.4S, #1.0 }
      v24 = vmulq_f32(v7, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v19), (int8x16_t)v18, _Q3));
    }
    v17.i32[0] = v24.i32[2];
    v5.i32[0] = 1.0;
    v33.i64[0] = 0x8000000080000000;
    v33.i64[1] = 0x8000000080000000;
    v34 = *(float *)vbslq_s8(v33, v5, (int8x16_t)v17).i32;
    *(float *)v33.i32 = v24.f32[1] / (float)(fabsf(v24.f32[2]) + 1.0);
    v35 = vmuls_lane_f32(*(float *)v33.i32, *(float32x2_t *)v24.f32, 1);
    v36 = -(float)(v24.f32[0] * *(float *)v33.i32);
    v37 = v24.f32[2] + (float)(v34 * v35);
    v18.f32[0] = v34 * v36;
    v38 = 1.0 - v35;
    v39 = vmuls_lane_f32(-v34, *(float32x2_t *)v24.f32, 1);
    v40 = v24.f32[2] + (float)(v37 + v38);
    if (v40 <= 0.0)
    {
      if (v37 >= v38 && v37 >= v24.f32[2])
      {
        v51 = sqrtf((float)((float)(v37 + 1.0) - v38) - v24.f32[2]);
        v52.f32[0] = v51 * v51;
        v52.f32[1] = v36 + v18.f32[0];
        *(float32x2_t *)&v52.u32[2] = vsub_f32((float32x2_t)__PAIR64__(LODWORD(v39), v24.u32[0]), *(float32x2_t *)v24.f32);
        *(_QWORD *)&result = vmulq_n_f32(v52, 0.5 / v51).u64[0];
        return result;
      }
      if (v38 > v24.f32[2])
      {
        v48 = sqrtf((float)((float)(v38 + 1.0) - v37) - v24.f32[2]);
        v49.f32[0] = v36 + v18.f32[0];
        v50 = (float32x2_t)vrev64_s32(*(int32x2_t *)v24.f32);
        v49.f32[1] = v48 * v48;
        *(float32x2_t *)&v49.u32[2] = vadd_f32(v50, (float32x2_t)__PAIR64__(v50.u32[1], LODWORD(v39)));
        *(_QWORD *)&result = vmulq_n_f32(v49, 0.5 / v48).u64[0];
        return result;
      }
      v53 = sqrtf((float)((float)(v24.f32[2] + 1.0) - v37) - v38);
      v24.i32[0] = vsubq_f32(v24, v24).u32[0];
      v45.f32[1] = v24.f32[1] + v39;
      v45.f32[2] = v53 * v53;
      v45.f32[3] = v18.f32[0] - v36;
      v46 = 0.5 / v53;
    }
    else
    {
      v41 = (float32x2_t)vrev64_s32(*(int32x2_t *)v24.f32);
      *(int32x2_t *)v45.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32), 0);
      v45.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v41.u32[1], LODWORD(v39)), v41).u32[0];
      v42 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v40 + 1.0)), v18.u32[0]);
      v43 = vmul_f32(v42, v42);
      v42.f32[0] = v36;
      LODWORD(v44) = vsub_f32(*(float32x2_t *)v18.f32, v42).u32[0];
      HIDWORD(v44) = v43.i32[1];
      v45.i64[1] = v44;
      v46 = 0.5 / v42.f32[1];
    }
    *(_QWORD *)&result = vmulq_n_f32(v45, v46).u64[0];
  }
  return result;
}

#error "1B1D6C9AC: switch analysis failed: switch information is incomplete or incorrect (funcsize=2544)"

uint64_t *sub_1B1D6F2C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t *result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69[12];
  _QWORD v70[7];
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _QWORD v77[10];
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;

  v3 = *(_OWORD *)(a3 + 104);
  v75[0] = *(_OWORD *)(a3 + 88);
  v75[1] = v3;
  v76 = *(_QWORD *)(a3 + 120);
  sub_1B1E8FCE4(a2, (uint64_t)v75, 0x200000000, v69);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v69, (uint64_t)v70, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v68 = (unsigned __int16 *)v70[0];
  if (v70[0])
  {
    v56 = v74;
    if (v74 >= 1)
    {
      v55 = v71;
      if (v71)
      {
        v5 = 0;
        v54 = v70[5];
        v53 = v72;
        v6 = *(unsigned __int8 *)(v72 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v7 = v73[4];
        v50 = v73 + 8;
        v67 = v70[0] + 41;
        v52 = v6;
        v82 = v73;
        v51 = v7;
        do
        {
          v8 = (unsigned int *)(v54 + 48 * v5);
          v9 = *v8;
          v10 = v8[1];
          v11 = v8[2];
          v12 = *((_QWORD *)v8 + 2);
          v13 = *((_QWORD *)v8 + 3);
          v14 = *((_QWORD *)v8 + 5);
          v63 = v5;
          v64 = *((_QWORD *)v8 + 4);
          if (v6)
          {
            v15 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          v16 = v82;
          v60 = v82[7];
          v61 = v82[6];
          v59 = v82[8];
          v65 = v82[10];
          v66 = v82[9];
          v17 = v82[4];
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v16[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
          v16[7] = v18;
          v50[1] = 0;
          v50[2] = 0;
          *v50 = 0;
          swift_release();
          v77[0] = v53;
          v77[1] = v14;
          v62 = v14;
          v77[2] = v16;
          v77[3] = v11;
          v77[4] = (v10 - v9 + v11);
          v77[5] = v56;
          v77[6] = v9;
          v77[7] = v10;
          v77[8] = 0;
          v77[9] = 0;
          v78 = 1;
          v79 = v12;
          v80 = v13;
          v19 = v16;
          v81 = v64;
          sub_1B1D6C7E0(v77, a3, a1);
          v20 = v16[6];
          v21 = v19[8];
          if (!v21)
          {
            v47 = v19[7];
            v48 = (_QWORD *)v19[4];
            v49 = v63;
            goto LABEL_46;
          }
          for (i = 0; i != v21; ++i)
          {
            v24 = (uint64_t *)(v20 + 48 * i);
            v25 = *v24;
            v26 = (void (*)(uint64_t))v24[4];
            v27 = v19[9];
            if (v27)
              v28 = v25 == v27;
            else
              v28 = 0;
            if (v28 || !v68[11])
              goto LABEL_11;
            v29 = v68[9];
            v30 = (_QWORD *)(v67 + v68[8]);
            v31 = v24[2];
            v32 = v30;
            v33 = v29 >> 4;
            v34 = v67;
            if (v29 >= 0x10)
            {
              while (*v32 != v25)
              {
                ++v34;
                v32 += 2;
                if (!--v33)
                  goto LABEL_26;
              }
              v35 = *(unsigned __int8 *)(v34 + v68[10]);
              v36 = v35 > 5;
              v37 = (1 << v35) & 0x23;
              if (v36 || v37 == 0)
              {
LABEL_11:
                v23 = swift_retain();
                v26(v23);
                swift_release();
                goto LABEL_12;
              }
            }
LABEL_26:
            if (swift_conformsToProtocol2())
              v39 = v31;
            else
              v39 = 0;
            if (v39)
            {
              if (v29 < 0x10)
                goto LABEL_11;
              v40 = v30;
              v41 = v29 >> 4;
              v42 = v67;
              while (*v40 != v39)
              {
                ++v42;
                v40 += 2;
                if (!--v41)
                  goto LABEL_39;
              }
              v43 = *(unsigned __int8 *)(v42 + v68[10]);
              v36 = v43 > 5;
              v44 = (1 << v43) & 0x23;
              if (v36 || v44 == 0)
                goto LABEL_11;
LABEL_39:
              v46 = 16 * (v29 >> 4);
              while (*v30 != v39)
              {
                v30 += 2;
                v46 -= 16;
                if (!v46)
                  goto LABEL_11;
              }
            }
LABEL_12:
            v19 = v82;
          }
          v47 = v82[7];
          v20 = v82[6];
          v48 = (_QWORD *)v82[4];
          v49 = v63;
          if ((uint64_t)v82[8] >= 1)
            swift_arrayDestroy();
LABEL_46:
          ecs_stack_allocator_deallocate(v48, v20, 48 * v47);
          v19[6] = v61;
          v19[7] = v60;
          v19[8] = v59;
          v19[9] = v66;
          v19[10] = v65;
          sub_1B1F03804((char *)v62);
          v7 = v51;
          ecs_stack_allocator_pop_snapshot(v51);
          v6 = v52;
          if ((v52 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 376));
          }
          swift_release();
          v5 = v49 + 1;
        }
        while (v5 != v55);
      }
    }
    return sub_1B19ED748(v69);
  }
  return result;
}

uint64_t type metadata accessor for EmitterShape.CPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D6F764()
{
  return "EmitterShape.CPU";
}

uint64_t type metadata accessor for EmitterShape.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D6F79C()
{
  return "EmitterShape.GPU";
}

uint64_t sub_1B1D6F7B0()
{
  return type metadata accessor for EmitterShape.GPUSystem();
}

void sub_1B1D6F7CC()
{
  qword_1EEFD5548 = (uint64_t)&unk_1E63BB860;
}

uint64_t sub_1B1D6F7E0(uint64_t a1, unint64_t a2, int32x2_t a3)
{
  uint64_t v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  uint64_t v17;
  int64x2_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  unint64_t v33;

  a3.i32[0] = 0;
  v5 = sub_1B19F3E1C(a2, a3);
  v6.i32[0] = 0;
  v7 = sub_1B19F3E1C(a2, v6);
  v8 = sub_1B19F3D34(0, a2);
  v33 = a2;
  if (a2)
  {
    if (qword_1EEF57358 != -1)
      swift_once();
    v9 = qword_1EEFD5548;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v5 = (uint64_t)sub_1B1FFEEAC(v5);
    v10 = 0;
    do
    {
      *(float *)(v5 + 4 * v10 + 32) = 1.0 / (float)*(uint64_t *)(v9 + 32 + 8 * v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v7 = (uint64_t)sub_1B1FFEEAC(v7);
      *(_DWORD *)(v7 + 4 * v10 + 32) = 0;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v8 = (uint64_t)sub_1B1FFECF0(v8);
      *(_QWORD *)(v8 + 8 * v10++ + 32) = a1;
    }
    while (v33 != v10);
  }
  v32 = (char *)v5;
  v11 = *(_QWORD *)(v8 + 16);
  if (v11)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v32 = sub_1B1FFEEAC(v5);
    v12 = v32 + 32;
    while (v11 >= 4)
    {
      v13 = v11 & 0x7FFFFFFFFFFFFFFCLL;
      v15 = (int64x2_t *)(v8 + 48);
      v16 = 0uLL;
      v17 = v11 & 0x7FFFFFFFFFFFFFFCLL;
      v18 = 0uLL;
      do
      {
        v16 = vaddq_s64(v15[-1], v16);
        v18 = vaddq_s64(*v15, v18);
        v15 += 2;
        v17 -= 4;
      }
      while (v17);
      v14 = vaddvq_s64(vaddq_s64(v18, v16));
      if (v11 != v13)
        goto LABEL_22;
LABEL_24:
      if (v14 > 0)
      {
        if (v33)
        {
          if (qword_1EEF57358 != -1)
            swift_once();
          v22 = 0;
          v23 = qword_1EEFD5548 + 32;
          do
          {
            v24 = v8 + 8 * v22;
            v25 = *(_QWORD *)(v23 + 8 * v22);
            v26 = *(_QWORD *)(v24 + 32);
            v27 = *(float *)(v7 + 4 * v22 + 32);
            v28 = *(float *)&v12[4 * v22];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v7 = (uint64_t)sub_1B1FFEEAC(v7);
            *(float *)(v7 + 4 * v22 + 32) = v27 + (float)(v28 * (float)(v26 % v25));
            *(float *)&v12[4 * v22] = *(float *)&v12[4 * v22] / (float)*(uint64_t *)(v23 + 8 * v22);
            v29 = *(_QWORD *)(v24 + 32);
            v30 = *(_QWORD *)(v23 + 8 * v22);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v8 = (uint64_t)sub_1B1FFECF0(v8);
            *(_QWORD *)(v8 + 8 * v22++ + 32) = v29 / v30;
          }
          while (v33 != v22);
        }
        v11 = *(_QWORD *)(v8 + 16);
        if (v11)
          continue;
      }
      goto LABEL_35;
    }
    v13 = 0;
    v14 = 0;
LABEL_22:
    v19 = v11 - v13;
    v20 = (uint64_t *)(v8 + 8 * v13 + 32);
    do
    {
      v21 = *v20++;
      v14 += v21;
      --v19;
    }
    while (v19);
    goto LABEL_24;
  }
LABEL_35:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

_QWORD *sub_1B1D6FAF0()
{
  _QWORD *result;

  result = sub_1B1B96404(MEMORY[0x1E0DEE9D8]);
  qword_1EEFD5550 = (uint64_t)result;
  return result;
}

_QWORD *sub_1B1D6FB14()
{
  _QWORD *result;

  result = sub_1B1B96428(MEMORY[0x1E0DEE9D8]);
  qword_1EEFD5558 = (uint64_t)result;
  return result;
}

uint64_t sub_1B1D6FB38(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0x100000000) != 0)
    return ((uint64_t (*)(void))((char *)&loc_1B1D6FB64 + 4 * byte_1B2291518[a1]))();
  if ((a2 & 0x100000000) != 0)
    return 0;
  return *(float *)&a1 == *(float *)&a2;
}

BOOL sub_1B1D6FBF0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  BOOL v13;
  float v15;
  float v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  if (!a3)
  {
    if (!a6)
    {
      v10 = 0;
      *(_QWORD *)&v11 = a1;
      *((_QWORD *)&v11 + 1) = a2;
      *(_QWORD *)&v12 = a4;
      *((_QWORD *)&v12 + 1) = a5;
      while (1)
      {
        v17 = v11;
        v15 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
        v18 = v12;
        v16 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
        v13 = v15 == v16;
        if (v10 == 2)
          break;
        while (1)
        {
          ++v10;
          if (v13)
            break;
          if (v10 == 2)
            return 0;
          v13 = 0;
        }
      }
      return v15 == v16;
    }
    return 0;
  }
  if (a3 == 1)
  {
    if (a6 == 1)
    {
      v6 = 0;
      *(_QWORD *)&v7 = a1;
      *((_QWORD *)&v7 + 1) = a2;
      *(_QWORD *)&v8 = a4;
      *((_QWORD *)&v8 + 1) = a5;
      while (1)
      {
        v19 = v7;
        v15 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
        v20 = v8;
        v16 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
        v9 = v15 == v16;
        if (v6 == 2)
          break;
        while (1)
        {
          ++v6;
          if (v9)
            break;
          if (v6 == 2)
            return 0;
          v9 = 0;
        }
      }
      return v15 == v16;
    }
    return 0;
  }
  if (!(a1 | a2))
    return a6 == 2 && !(a5 | a4);
  if (a1 ^ 1 | a2)
  {
    if (a6 != 2 || a4 != 2)
      return 0;
  }
  else if (a6 != 2 || a4 != 1)
  {
    return 0;
  }
  return !a5;
}

BOOL sub_1B1D6FD70(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  BOOL v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;

  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1)
        return (_DWORD)a1 == (_DWORD)a4;
      return 0;
    }
    if (a6 == 2 && !(a5 | a4))
      return 1;
  }
  else if (!a6)
  {
    v7 = 0;
    *(_QWORD *)&v8 = a1;
    *((_QWORD *)&v8 + 1) = a2;
    *(_QWORD *)&v9 = a4;
    *((_QWORD *)&v9 + 1) = a5;
    while (1)
    {
      v13 = v8;
      v11 = *(_DWORD *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      v14 = v9;
      v12 = *(_DWORD *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
      v10 = v11 == v12;
      if (v7 == 2)
        break;
      while (1)
      {
        ++v7;
        if (v10)
          break;
        if (v7 == 2)
          return 0;
        v10 = 0;
      }
    }
    if (v11 == v12)
      return 1;
  }
  return 0;
}

void sub_1B1D6FE48(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1D6FEAC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int8x8_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int8x8_t v14;
  uint64_t v15;
  uint32x4_t v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int8x8_t v24;
  uint64_t v25;
  int8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (a3)
  {
    v15 = v9.u32[0];
    if (a3 != 1)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(int8x8_t *)v16.i8 = v9;
    v16.i64[1] = v14.u32[0];
    v17 = (int32x4_t)vmaxq_u32(v16, (uint32x4_t)xmmword_1B226E590);
    v15 = vmulq_laneq_s32(vmulq_lane_s32(v17, *(int32x2_t *)v17.i8, 1), v17, 2).u32[0];
  }
  v18 = -a5 % v15;
  if (a3 == 1)
    v19 = v13;
  else
    v19 = 0;
  if (!a3)
  {
    v31.i32[3] = 0;
    v31.f32[0] = (float)v9.u32[0];
    *(float32x2_t *)&v31.i32[1] = vcvt_f32_u32((uint32x2_t)vext_s8(v9, v14, 4uLL));
    v32 = vmaxnmq_f32(v31, (float32x4_t)xmmword_1B2244F70);
    __asm
    {
      FMOV            V0.4S, #1.0
      FMOV            V3.4S, #-1.0
    }
    v39 = vaddq_f32(v32, _Q3);
    v39.i32[3] = 0;
    v30 = vdivq_f32(_Q0, v32);
    v20 = vdivq_f32(v32, vmaxnmq_f32(v39, (float32x4_t)xmmword_1B2244F70));
    result = MEMORY[0x1E0DEE9D8];
LABEL_14:
    v28 = result;
    goto LABEL_15;
  }
  v20 = 0uLL;
  if (a3 != 1)
  {
    result = MEMORY[0x1E0DEE9D8];
    v30 = 0uLL;
    goto LABEL_14;
  }
  v40 = v12;
  v21 = v11;
  v22 = a8;
  v23 = a3;
  v24 = v14;
  v25 = v8;
  v26 = v9;
  v27 = -a5 % v15;
  v28 = sub_1B1D6748C(v19);
  result = sub_1B1D675C8(v19);
  v20 = 0uLL;
  v18 = v27;
  v9 = v26;
  v8 = v25;
  v14 = v24;
  a3 = v23;
  a8 = v22;
  v11 = v21;
  v12 = v40;
  v30 = 0uLL;
LABEL_15:
  *(int8x8_t *)v10 = v9;
  *(int8x8_t *)(v10 + 8) = v14;
  *(_BYTE *)(v10 + 16) = a3;
  *(_BYTE *)(v10 + 17) = v12;
  *(float32x4_t *)(v10 + 32) = v30;
  *(float32x4_t *)(v10 + 48) = v20;
  *(_QWORD *)(v10 + 64) = v18;
  *(_QWORD *)(v10 + 72) = v19;
  *(_QWORD *)(v10 + 80) = v42;
  *(_QWORD *)(v10 + 88) = v43;
  *(_QWORD *)(v10 + 96) = a8;
  *(_QWORD *)(v10 + 104) = v8;
  *(_QWORD *)(v10 + 112) = v11;
  *(_QWORD *)(v10 + 120) = v41;
  *(_QWORD *)(v10 + 128) = v28;
  *(_QWORD *)(v10 + 136) = result;
  return result;
}

uint64_t sub_1B1D701B4()
{
  unint64_t v0;

  v0 = sub_1B2229F64();
  swift_bridgeObjectRelease();
  if (v0 >= 0x13)
    return 19;
  else
    return v0;
}

uint64_t sub_1B1D70204()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[32];
  _BYTE v4[32];

  v2 = MEMORY[0x1E0DEE9D8];
  if ((*(float *)(v0 + 104) != 0.0 || *(float *)(v0 + 108) != 0.0)
    && (*(float *)(v0 + 144) != 0.0 || *(float *)(v0 + 148) != 0.0))
  {
    sub_1B1DA65C8((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0);
  }
  sub_1B1A18378(v0 + 80, (uint64_t)v3, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  sub_1B1A18378((uint64_t)v3, (uint64_t)v4, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction);
  if (v4[16] != 255)
    sub_1B1DA65C8((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540);
  if ((*(_BYTE *)(v0 + 208) & 1) != 0)
    sub_1B1DA65C8((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190);
  return v2;
}

uint64_t sub_1B1D70304(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  char v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  unint64_t v19;
  BOOL v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  __int128 v45;
  unsigned int v50;
  float v51;
  float v52;
  int v53;
  int v54;
  int v55;
  int v56;
  __int16 v57;
  int v58;
  uint64_t v59;
  int v60;
  char v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  char v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int8x16_t v105;
  float32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  float v109;
  float32x4_t v110;
  float v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  float v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x4_t v122;
  float32x2_t v123;
  uint64_t v124;
  int32x2_t v125;
  float32x4_t v126;
  float32x2_t v127;
  float32x2_t v128;
  unint64_t v129;
  char v130;
  __int128 v131;
  uint32x4_t v132;
  uint32x4_t v133;
  char v134;
  float v135;
  uint64_t v136;
  BOOL v137;
  uint32x4_t v138;
  int32x4_t v139;
  float32x4_t v140;
  char v141;
  int v142;
  __int128 v143;
  void *v144;
  uint64_t ObjectType;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v163;
  uint64_t v164;
  char v165;
  unsigned int v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  unsigned int v170;
  float32x4_t v171;
  uint64_t v172;
  float32x4_t v173;
  char v174;
  char v175;
  float32x4_t v176;
  __int128 v177;
  __int128 v178;
  char v179;
  char v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  int v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  BOOL v189;
  float32x4_t v190;
  uint64_t v191;
  uint32x4_t v192;
  uint64_t v193;
  int v194;
  float v195;
  int v196;
  uint64_t v197;
  void **v198;
  uint64_t v199;
  int v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  __int16 v205;
  char v206;
  __int128 v207;
  _OWORD v208[3];
  int v209;
  int v210;
  float v211;
  float v212;
  int v213;
  int v214;
  __int128 v215;
  int v216;
  int v217;
  __int128 v218;
  __int128 v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  __int128 v233;
  int v234;
  float v235;
  int v236;
  int v237;
  int v238;
  char v239;
  char v240;
  BOOL v241;
  _QWORD v242[2];
  _QWORD v243[2];
  _QWORD v244[2];
  _BYTE v245[224];
  _BYTE v246[224];
  _QWORD v247[10];
  _QWORD v248[10];
  _QWORD v249[10];
  _BYTE v250[80];
  _BYTE v251[80];
  _BYTE v252[80];
  float v253;
  char v254;
  __int16 v255;
  char v256;
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int8 v261;
  char v262;
  char v263;
  _BYTE v264[13];
  uint64_t v265;
  uint64_t v266;
  unsigned __int8 v267;
  _BYTE v268[15];
  uint64_t v269;
  uint64_t v270;
  unsigned __int8 v271;
  char v272;
  __int16 v273;
  int v274;
  float v275;
  float v276;
  int v277;
  int v278;
  uint64_t v279;
  __int128 v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  char v285;
  _BYTE v286[15];
  __int128 v287;
  __int128 v288;
  char v289;
  uint64_t v290;

  v290 = *MEMORY[0x1E0C80C00];
  v207 = *((_OWORD *)a1 + 1);
  v2 = a1[2];
  v3 = a1[6];
  swift_retain();
  v197 = v3;
  v193 = sub_1B1FE0FC0(v3, v2);
  v191 = v4;
  v6 = v5;
  v174 = v7;
  v198 = (void **)a1;
  sub_1B1E52E10();
  v9 = v8;
  swift_retain();
  sub_1B1D15764(*((_QWORD **)&v207 + 1), (uint64_t)v247);
  v10 = v247[0];
  v11 = v247[1];
  v12 = v247[2];
  v13 = v247[3];
  v14 = v247[4];
  v15 = v247[5];
  v16 = v247[6];
  v17 = v247[7];
  swift_release();
  sub_1B1A18378((uint64_t)v247, (uint64_t)v252, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v252[64] & 1) != 0)
  {
    v201 = (float32x4_t)xmmword_1B2244E20;
    v202 = (float32x4_t)xmmword_1B2244D90;
    v203 = (float32x4_t)xmmword_1B2244DD0;
    v204 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    v18.i64[0] = v10;
    v18.i64[1] = v11;
    v204 = v18;
    v18.i64[0] = v12;
    v18.i64[1] = v13;
    v203 = v18;
    v18.i64[0] = v14;
    v18.i64[1] = v15;
    v202 = v18;
    v18.i64[0] = v16;
    v18.i64[1] = v17;
    v201 = v18;
  }
  swift_retain();
  v19 = *((_QWORD *)&v207 + 1);
  v20 = sub_1B1FD568C((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA9D8, *((uint64_t *)&v207 + 1));
  swift_release();
  v21 = (__int128)v204;
  v22 = (__int128)v203;
  v23 = (__int128)v202;
  v24 = (__int128)v201;
  v189 = v20;
  if (v6 > v9)
  {
    v21 = (__int128)v204;
    v22 = (__int128)v203;
    v23 = (__int128)v202;
    v24 = (__int128)v201;
    if (v20)
    {
      swift_retain();
      sub_1B1D1745C(*((_QWORD **)&v207 + 1), (uint64_t)v248);
      v25 = v248[0];
      v26 = v248[1];
      v27 = v248[2];
      v28 = v248[3];
      v29 = v248[4];
      v30 = v248[5];
      v31 = v248[6];
      v32 = v248[7];
      swift_release();
      sub_1B1A18378((uint64_t)v248, (uint64_t)v251, &qword_1ED4B99A0, (uint64_t)&type metadata for LastFrameWorldTransform);
      if ((v251[64] & 1) != 0)
      {
        v24 = xmmword_1B2244E20;
        v23 = xmmword_1B2244D90;
        v22 = xmmword_1B2244DD0;
        v21 = xmmword_1B2244DB0;
      }
      else
      {
        *(_QWORD *)&v21 = v25;
        *((_QWORD *)&v21 + 1) = v26;
        *(_QWORD *)&v22 = v27;
        *((_QWORD *)&v22 + 1) = v28;
        *(_QWORD *)&v23 = v29;
        *((_QWORD *)&v23 + 1) = v30;
        *(_QWORD *)&v24 = v31;
        *((_QWORD *)&v24 + 1) = v32;
      }
      v19 = *((_QWORD *)&v207 + 1);
    }
  }
  v185 = v24;
  v186 = v23;
  v187 = v22;
  v188 = v21;
  swift_retain();
  sub_1B1D17374(v19, (uint64_t)v208);
  swift_release();
  sub_1B1A18378((uint64_t)v208, (uint64_t)v245, (unint64_t *)&unk_1ED4B8020, (uint64_t)&type metadata for EmitterShape);
  sub_1B1A18378((uint64_t)v245, (uint64_t)v246, (unint64_t *)&unk_1ED4B8020, (uint64_t)&type metadata for EmitterShape);
  if (sub_1B1D7242C((uint64_t)v246) == 1)
  {
    v33 = 0;
    v34 = 0.0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 1;
    v44 = xmmword_1B2244DD0;
    v45 = 0uLL;
    __asm { FMOV            V4.4S, #1.0 }
    v50 = -1;
    v51 = 1.0;
    v52 = 0.5;
    v53 = 255;
    v54 = 2;
    v55 = 0;
    v56 = 1050253722;
    v57 = -13107;
    v58 = 1045220557;
    v59 = 1086918618;
    v60 = 1086918618;
    v61 = 1;
    v62 = 0;
    v63 = 2;
    v64 = 0;
    v65 = 2;
    v66 = 0;
    v67 = 2;
  }
  else
  {
    sub_1B1A18378((uint64_t)v245, (uint64_t)&v253, (unint64_t *)&unk_1ED4B8020, (uint64_t)&type metadata for EmitterShape);
    v34 = v253;
    v43 = v254;
    v205 = v255;
    v206 = v256;
    v55 = v257;
    v60 = v258;
    v35 = v259;
    v36 = v260;
    v54 = v261;
    v37 = v262;
    v61 = v263;
    v244[0] = *(_QWORD *)v264;
    v38 = v265;
    *(_QWORD *)((char *)v244 + 5) = *(_QWORD *)&v264[5];
    v39 = v266;
    v63 = v267;
    v40 = v269;
    *(_QWORD *)((char *)v243 + 7) = *(_QWORD *)&v268[7];
    v243[0] = *(_QWORD *)v268;
    v41 = v270;
    v53 = v271;
    v65 = v272;
    v57 = v273;
    v62 = v274;
    v52 = v275;
    v51 = v276;
    v58 = v277;
    v59 = v279;
    v44 = v280;
    v56 = v278;
    v64 = v281;
    v66 = v282;
    v50 = v283;
    v42 = v284;
    v67 = v285;
    v242[0] = *(_QWORD *)v286;
    *(_QWORD *)((char *)v242 + 7) = *(_QWORD *)&v286[7];
    _Q4 = v287;
    v45 = v288;
    v33 = v289;
  }
  v253 = v34;
  v254 = v43;
  v255 = v205;
  v256 = v206;
  v184 = v55;
  v257 = v55;
  v258 = v60;
  v199 = v35;
  v259 = v35;
  v260 = v36;
  v166 = v36;
  v261 = v54;
  v262 = v37;
  v180 = v61;
  v263 = v61;
  *(_QWORD *)v264 = v244[0];
  *(_QWORD *)&v264[5] = *(_QWORD *)((char *)v244 + 5);
  v265 = v38;
  v163 = v40;
  v164 = v38;
  v266 = v39;
  v196 = v63;
  v267 = v63;
  *(_QWORD *)v268 = v243[0];
  *(_QWORD *)&v268[7] = *(_QWORD *)((char *)v243 + 7);
  v269 = v40;
  v270 = v41;
  v194 = v53;
  v271 = v53;
  v165 = v65;
  v272 = v65;
  v273 = v57;
  v274 = v62;
  v275 = v52;
  v276 = v51;
  v277 = v58;
  v279 = v59;
  v182 = v45;
  v183 = v44;
  v280 = v44;
  v278 = v56;
  v281 = v64;
  v282 = v66;
  v283 = v50;
  v284 = v42;
  v285 = v67;
  *(_QWORD *)v286 = v242[0];
  *(_QWORD *)&v286[7] = *(_QWORD *)((char *)v242 + 7);
  v181 = _Q4;
  v287 = _Q4;
  v288 = v45;
  v179 = v33;
  v289 = v33;
  *(double *)&v68 = sub_1B1D6C268(v204, v203, v202);
  v178 = v68;
  *(double *)&v69 = sub_1B1D6C3E0(v204, v203, v202);
  v177 = v69;
  v200 = v54;
  v195 = v34;
  if ((v174 & 1) != 0)
  {
    v170 = v50;
    v172 = v42;
    v175 = v43;
    sub_1B1E85B04(v19, 0, 0, 1, 0, 0, 1, 0, (uint64_t)v249, *(int32x2_t *)&v69, 0, 1);
    v70 = v249[0];
    v71 = v249[1];
    v72 = v249[2];
    v73 = v249[3];
    v74 = v249[4];
    v75 = v249[5];
    v76 = v249[6];
    v77 = v249[7];
    sub_1B1D72448((uint64_t)v249, (uint64_t)v250, (unint64_t *)&qword_1ED4B79B0, type metadata accessor for simd_float4x4);
    if ((v250[64] & 1) != 0)
    {
      v169 = (float32x4_t)xmmword_1B2244E20;
      v78 = (float32x4_t)xmmword_1B2244D90;
      v79 = (float32x4_t)xmmword_1B2244DD0;
      v80 = (float32x4_t)xmmword_1B2244DB0;
    }
    else
    {
      v80.i64[0] = v70;
      v80.i64[1] = v71;
      v79.i64[0] = v72;
      v79.i64[1] = v73;
      v78.i64[0] = v74;
      v78.i64[1] = v75;
      v85.i64[0] = v76;
      v85.i64[1] = v77;
      v169 = v85;
    }
    v54 = v200;
    v34 = v195;
    v43 = v175;
    v42 = v172;
    v50 = v170;
  }
  else
  {
    *(double *)v81.i64 = sub_1B1E52854();
    v80 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, v204.f32[0]), v82, *(float32x2_t *)v204.f32, 1), v83, v204, 2), v84, v204, 3);
    v79 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, v203.f32[0]), v82, *(float32x2_t *)v203.f32, 1), v83, v203, 2), v84, v203, 3);
    v78 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, v202.f32[0]), v82, *(float32x2_t *)v202.f32, 1), v83, v202, 2), v84, v202, 3);
    v169 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, v201.f32[0]), v82, *(float32x2_t *)v201.f32, 1), v83, v201, 2), v84, v201, 3);
  }
  v86 = (int32x4_t)vmulq_f32(v80, v80);
  v87 = vmulq_f32(v79, v79);
  v88 = (int32x4_t)vmulq_f32(v78, v78);
  v89 = vzip2q_s32(v86, v88);
  v90 = (float32x4_t)vzip1q_s32(vzip1q_s32(v86, v88), (int32x4_t)v87);
  v91 = (float32x4_t)vtrn2q_s32(v86, (int32x4_t)v87);
  v91.i32[2] = v88.i32[1];
  v92 = vaddq_f32((float32x4_t)vzip1q_s32(v89, vdupq_laneq_s32((int32x4_t)v87, 2)), vaddq_f32(v90, v91));
  v87.i64[0] = 0x80000000800000;
  v87.i64[1] = 0x80000000800000;
  v93 = vcgeq_f32(v87, v92);
  v92.i32[3] = 0;
  v94 = vrsqrteq_f32(v92);
  v95 = vmulq_f32(v94, vrsqrtsq_f32(v92, vmulq_f32(v94, v94)));
  v96 = v93;
  v96.i32[3] = 0;
  v97 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v96), (int8x16_t)v92, (int8x16_t)vmulq_f32(v95, vrsqrtsq_f32(v92, vmulq_f32(v95, v95))));
  v173 = v79;
  v176 = v80;
  v98 = vmulq_n_f32(v80, v97.f32[0]);
  v99 = vmulq_lane_f32(v79, *(float32x2_t *)v97.f32, 1);
  v171 = v78;
  v100 = vmulq_laneq_f32(v78, v97, 2);
  v101 = (int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100);
  v102 = (int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99);
  v103 = (int32x4_t)v98;
  if (v93.i32[0])
  {
    v104 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v101, (int8x16_t)v100, 0xCuLL), vnegq_f32(v99)), v100, (float32x4_t)vextq_s8(v102, (int8x16_t)v99, 0xCuLL));
    v103 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v104, v104), (int8x16_t)v104, 0xCuLL);
  }
  v105 = (int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98);
  v106 = v99;
  if (v93.i32[1])
  {
    v107 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v105, (int8x16_t)v98, 0xCuLL), vnegq_f32(v100)), v98, (float32x4_t)vextq_s8(v101, (int8x16_t)v100, 0xCuLL));
    v106 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v107, v107), (int8x16_t)v107, 0xCuLL);
  }
  if (v93.i32[2])
  {
    v108 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v102, (int8x16_t)v99, 0xCuLL), vnegq_f32(v98)), v99, (float32x4_t)vextq_s8(v105, (int8x16_t)v98, 0xCuLL));
    v100 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL);
  }
  v109 = (float)(*(float *)v103.i32 + v106.f32[1]) + v100.f32[2];
  if (v109 <= 0.0)
  {
    if (*(float *)v103.i32 < v106.f32[1] || *(float *)v103.i32 < v100.f32[2])
    {
      if (v106.f32[1] <= v100.f32[2])
      {
        v111 = sqrtf((float)((float)(v100.f32[2] + 1.0) - *(float *)v103.i32) - v106.f32[1]);
        *(float32x2_t *)v126.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v103, (int32x4_t)v106), *(float32x2_t *)v100.f32);
        v127 = (float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v111));
        v128 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 0);
        *(float32x2_t *)v114.f32 = vsub_f32(*(float32x2_t *)v103.i8, v128);
        v128.f32[0] = v111;
        v127.i32[0] = vmul_f32(v127, v128).u32[0];
        v127.i32[1] = v114.i32[1];
        *(float32x2_t *)&v126.u32[2] = v127;
        v168 = v126;
        goto LABEL_36;
      }
      v119 = sqrtf((float)((float)(v106.f32[1] + 1.0) - *(float *)v103.i32) - v100.f32[2]);
      *(int32x2_t *)v99.f32 = vdup_laneq_s32((int32x4_t)v106, 2);
      v116 = (int8x16_t)v99;
      *(float *)v116.i32 = v119;
      v116.i32[0] = vmul_f32(*(float32x2_t *)v116.i8, (float32x2_t)__PAIR64__(v100.u32[1], LODWORD(v119))).u32[0];
      v116.i32[1] = vadd_f32(*(float32x2_t *)&v99, *(float32x2_t *)&v100).i32[1];
      v117 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.i8, 1), v106);
      v125 = (int32x2_t)vsubq_f32(v100, (float32x4_t)vdupq_laneq_s32(v103, 2)).u64[0];
      v118 = vextq_s8(vextq_s8(v117, v117, 4uLL), v116, 0xCuLL);
      v118.i32[3] = v125.i32[0];
      v167 = (float32x4_t)v118;
    }
    else
    {
      v119 = sqrtf((float)((float)(*(float *)v103.i32 + 1.0) - v106.f32[1]) - v100.f32[2]);
      v120 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 0);
      v121 = vadd_f32(*(float32x2_t *)v103.i8, v120);
      v120.f32[0] = v119;
      v122.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v119)), v120).u32[0];
      v122.i32[1] = v121.i32[1];
      v123 = (float32x2_t)vzip2q_s32(v103, (int32x4_t)v106).u64[0];
      LODWORD(v124) = vadd_f32(v123, *(float32x2_t *)v100.f32).u32[0];
      v125 = (int32x2_t)vsub_f32(v123, *(float32x2_t *)v100.f32);
      HIDWORD(v124) = v125.i32[1];
      v122.i64[1] = v124;
      v167 = v122;
    }
    *(float *)v125.i32 = 0.5 / v119;
    v168 = (float32x4_t)vdupq_lane_s32(v125, 0);
    goto LABEL_37;
  }
  v110 = (float32x4_t)vzip2q_s32((int32x4_t)v106, vuzp1q_s32((int32x4_t)v106, (int32x4_t)v100));
  v110.i32[2] = v103.i32[1];
  v111 = sqrtf(v109 + 1.0);
  v112 = (float32x4_t)vtrn2q_s32((int32x4_t)v100, vzip2q_s32((int32x4_t)v100, v103));
  v112.i32[2] = v106.i32[0];
  v113 = vsubq_f32(v110, v112);
  v110.f32[3] = v111;
  v112.f32[3] = v111;
  v114 = vmulq_f32(v110, v112);
  v113.i32[3] = v114.i32[3];
  v168 = v113;
LABEL_36:
  v114.f32[0] = 0.5 / v111;
  v167 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 0);
LABEL_37:
  v129 = v50 | (unint64_t)(v42 << 32);
  v130 = sub_1B1D17298(v129);
  v131 = 0uLL;
  v132 = 0uLL;
  if (!v54)
  {
    v133.i64[0] = v199;
    v133.i64[1] = v166;
    v132 = vmaxq_u32(v133, (uint32x4_t)xmmword_1B226E590);
  }
  if (v130 != 5)
    __asm { BR              X10 }
  v134 = v43;
  if ((v43 & 1) != 0)
    v135 = 0.0;
  else
    v135 = v34;
  if (v54 == 1)
  {
    if (v199 <= 1)
      v54 = 1;
    else
      v54 = v199;
    v136 = (v193 - v191) % v199;
    v137 = v189;
  }
  else
  {
    v136 = v193 - v191;
    v137 = v189;
    if (v54)
    {
      v54 = 0;
    }
    else
    {
      v138.i64[0] = v199;
      v138.i64[1] = v166;
      v139 = (int32x4_t)vmaxq_u32(v138, (uint32x4_t)xmmword_1B226E590);
      v136 %= (uint64_t)vmulq_laneq_s32(vmulq_lane_s32(v139, *(int32x2_t *)v139.i8, 1), v139, 2).u32[0];
    }
  }
  v140 = vmulq_f32(v168, v167);
  if (v137)
  {
    v192 = v132;
    v190 = v140;
    v141 = sub_1B1E53374();
    v140 = v190;
    v132 = v192;
    v131 = 0uLL;
    v142 = v165;
    if ((v141 & 1) != 0)
      v142 = 0;
  }
  else
  {
    v142 = 0;
  }
  *(float32x2_t *)&v143 = vcvt_f32_u32(*(uint32x2_t *)v132.i8);
  *((float *)&v143 + 2) = (float)v132.u32[2];
  HIDWORD(v143) = 0;
  v208[0] = v143;
  v208[1] = v178;
  v208[2] = v177;
  v209 = v184;
  v210 = v60;
  v211 = v52;
  v212 = v51;
  v213 = v58;
  v214 = v56;
  v215 = v183;
  v216 = v64;
  v217 = v66;
  v218 = v181;
  v219 = v182;
  v220 = v204;
  v221 = v203;
  v222 = v202;
  v223 = v201;
  v224 = v188;
  v225 = v187;
  v226 = v186;
  v227 = v185;
  v228 = v140;
  v229 = v176;
  v230 = v173;
  v231 = v171;
  v232 = v169;
  v233 = v131;
  v234 = 0;
  v235 = v135;
  v236 = v54;
  v237 = v136;
  v238 = v142;
  v239 = v180 & 1;
  v240 = v179 & 1;
  v241 = v137;
  v144 = *v198;
  if (*v198)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for emitter_shape_uniforms(0);
    sub_1B1F40E1C((uint64_t)v208, 1, ObjectType, v146, v147, v148, v149, v150);
    v151 = v200;
    v152 = v134;
    if (v200 == 1)
    {
      if ((v199 & 0xFFFFFFFE) != 0)
        v153 = v199;
      else
        v153 = 1;
      swift_unknownObjectRetain();
      v154 = sub_1B1D675C8(v153);
      objc_msgSend(v144, sel_setBytes_length_atIndex_, v154 + 32, 16 * *(_QWORD *)(v154 + 16), 6);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    v155 = sub_1B20F26A4(v129, v208);
    objc_msgSend(v144, sel_setTexture_atIndex_, v155, 0);
  }
  else
  {
    v155 = sub_1B20F26A4(v129, v208);
    v151 = v200;
    v152 = v134;
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v156 = swift_allocObject();
  v157 = v156;
  *(_OWORD *)(v156 + 16) = xmmword_1B226CAD0;
  if ((v152 & 1) != 0)
    v158 = qword_1B2291C88[SLODWORD(v195)];
  else
    v158 = 5;
  *(_OWORD *)(v156 + 32) = xmmword_1B2291420;
  *(_BYTE *)(v156 + 48) = 0;
  *(_QWORD *)(v156 + 64) = v158;
  *(_OWORD *)(v156 + 72) = 0u;
  *(_OWORD *)(v156 + 88) = 0u;
  *(_OWORD *)(v156 + 104) = 0u;
  *(_QWORD *)(v156 + 120) = 0;
  v159 = qword_1B2291CB8[v151];
  *(_BYTE *)(v156 + 128) = 14;
  *(_OWORD *)(v156 + 144) = xmmword_1B2291430;
  *(_BYTE *)(v156 + 160) = 0;
  *(_QWORD *)(v156 + 176) = v159;
  *(_OWORD *)(v156 + 184) = 0u;
  *(_OWORD *)(v156 + 200) = 0u;
  *(_OWORD *)(v156 + 216) = 0u;
  *(_QWORD *)(v156 + 232) = 0;
  *(_BYTE *)(v156 + 240) = 14;
  if (v194 > 1)
  {
    if (v194 == 255)
      v160 = 0xFFFFFFFFLL;
    else
      v160 = v163 + 2;
  }
  else
  {
    v160 = v194 != 0;
  }
  *(_OWORD *)(v156 + 256) = xmmword_1B2291440;
  *(_BYTE *)(v156 + 272) = 0;
  *(_QWORD *)(v156 + 288) = v160;
  *(_QWORD *)(v156 + 344) = 0;
  *(_OWORD *)(v156 + 296) = 0u;
  *(_OWORD *)(v156 + 312) = 0u;
  *(_OWORD *)(v156 + 328) = 0u;
  *(_BYTE *)(v156 + 352) = 14;
  if (v196)
  {
    if (v196 == 1)
      v161 = 1;
    else
      v161 = v164 + 2;
  }
  else
  {
    v161 = 0;
  }
  *(_OWORD *)(v156 + 368) = xmmword_1B2291450;
  *(_BYTE *)(v156 + 384) = 0;
  *(_QWORD *)(v156 + 400) = v161;
  *(_QWORD *)(v156 + 456) = 0;
  *(_OWORD *)(v156 + 408) = 0uLL;
  *(_OWORD *)(v156 + 424) = 0uLL;
  *(_OWORD *)(v156 + 440) = 0uLL;
  *(_BYTE *)(v156 + 464) = 14;
  *(_OWORD *)(v156 + 480) = xmmword_1B2291460;
  *(_BYTE *)(v156 + 496) = 0;
  *(_QWORD *)(v156 + 512) = v155 != 0;
  *(_QWORD *)(v156 + 568) = 0;
  *(_OWORD *)(v156 + 520) = 0uLL;
  *(_OWORD *)(v156 + 536) = 0uLL;
  *(_OWORD *)(v156 + 552) = 0uLL;
  *(_BYTE *)(v156 + 576) = 13;
  swift_retain();
  sub_1B1B1FC34((uint64_t)v198);
  sub_1B1FE6FB8(v197, v2, v144 == 0, v157, (uint64_t)v198, 0x5F72657474696D65, 0xED00006570616873, 0);
  sub_1B1B1FC88((uint64_t)v198);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_release();
  return swift_unknownObjectRelease();
}

unint64_t sub_1B1D7121C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _BYTE v7[24];
  uint64_t v8;

  v3 = (unint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v7, v8);
    v4 = sub_1B2229A90();
    v3 = v4;
    switch(v4)
    {
      case 0:
        goto LABEL_11;
      case 2:
        sub_1B19FC264((uint64_t)v7, v8);
        v3 = sub_1B2229AC0();
        goto LABEL_11;
      case 1:
        sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        sub_1B19FC264((uint64_t)v7, v8);
        sub_1B1D71434((unint64_t *)&qword_1EEF5E220, MEMORY[0x1E0DEDD70]);
        sub_1B2229AA8();
        v3 = (unint64_t)v6;
LABEL_11:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
        return v3;
    }
    sub_1B19FA198((uint64_t)v7, (uint64_t)&v6);
    sub_1B22294CC();
    swift_allocError();
    sub_1B222949C();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v6);
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t sub_1B1D71434(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1D71494(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned int v7;
  _BYTE v8[40];
  _BYTE v9[24];
  uint64_t v10;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FC264((uint64_t)v9, v10);
  v3 = sub_1B2229A90();
  v5 = v3;
  v6 = 1;
  switch(v3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      break;
    case 5:
    case 6:
      v5 = 4;
      break;
    case 7:
      sub_1B19FC264((uint64_t)v9, v10);
      sub_1B2229A84();
      v6 = 0;
      v5 = v7;
      break;
    case 8:
      v5 = 5;
      break;
    default:
      sub_1B19FA198((uint64_t)v9, (uint64_t)v8);
      sub_1B22294CC();
      swift_allocError();
      sub_1B222949C();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
      swift_willThrow();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v5 | ((unint64_t)v6 << 32);
}

uint64_t sub_1B1D71630(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  _BYTE v6[24];
  uint64_t v7;

  v3 = a1[3];
  sub_1B19FA070(a1, v3);
  sub_1B222A12C();
  if (v1)
  {
LABEL_4:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B19FC264((uint64_t)v6, v7);
    v3 = 0;
    switch(sub_1B2229A90())
    {
      case 0:
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        sub_1B19FC264((uint64_t)v6, v7);
        sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
        sub_1B2229AA8();
        v3 = v5;
        break;
      case 1:
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        sub_1B19FC264((uint64_t)v6, v7);
        sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
        sub_1B2229AA8();
        v3 = v5;
        break;
      case 2:
        break;
      case 3:
        v3 = 1;
        break;
      case 4:
        v3 = 2;
        break;
      default:
        sub_1B19FA198((uint64_t)v6, (uint64_t)&v5);
        sub_1B22294CC();
        swift_allocError();
        sub_1B222949C();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v5);
        swift_willThrow();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
        goto LABEL_4;
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

unint64_t sub_1B1D718B8()
{
  unint64_t result;

  result = qword_1ED4B8558;
  if (!qword_1ED4B8558)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291ADC, &type metadata for EmissionOrder);
    atomic_store(result, (unint64_t *)&qword_1ED4B8558);
  }
  return result;
}

unint64_t sub_1B1D718FC()
{
  unint64_t result;

  result = qword_1EEF5E230;
  if (!qword_1EEF5E230)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291AA4, &type metadata for MotionDistribution);
    atomic_store(result, (unint64_t *)&qword_1EEF5E230);
  }
  return result;
}

uint64_t sub_1B1D71940@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  float v24;
  float v25;
  uint64_t result;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v40;
  int v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  __int128 v52;
  int v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  __int128 v66;
  unsigned __int8 v67;

  sub_1B19F8E54(0, &qword_1ED4BAA70, (uint64_t (*)(void))sub_1B1D72A78, (uint64_t)&type metadata for EmitterShape.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v49 - v9;
  v11 = a1[3];
  v64 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B1D72A78();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v64);
  v63 = v7;
  v65 = 1;
  sub_1B1A72170();
  sub_1B2229814();
  v12 = v6;
  v13 = v66;
  v14 = v67;
  LOBYTE(v66) = 3;
  v58 = sub_1B22297D8();
  v59 = v14;
  v60 = *((_QWORD *)&v13 + 1);
  v61 = v13;
  sub_1B1A02758(0, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v65 = 4;
  sub_1B1D72ABC(&qword_1ED4B8018, (uint64_t (*)(void))sub_1B1A72170, MEMORY[0x1E0DEE9A0]);
  v62 = v10;
  sub_1B2229814();
  v15 = v66;
  v16 = v67;
  v65 = 5;
  sub_1B1A71F00();
  sub_1B2229814();
  v56 = *((_QWORD *)&v15 + 1);
  v57 = v15;
  v17 = v66;
  v18 = BYTE4(v66);
  sub_1B1B4D924();
  v65 = 6;
  v19 = sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  *(_QWORD *)&v55 = v19;
  v53 = v18;
  v54 = v17;
  v20 = v66;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v65 = 7;
  sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
  sub_1B2229814();
  v52 = v66;
  v65 = 8;
  sub_1B2229814();
  v21 = v66;
  LOBYTE(v66) = 9;
  sub_1B22297F0();
  v23 = v22;
  v65 = 0;
  sub_1B22297B4();
  if (BYTE8(v66))
    v24 = 6.2832;
  else
    v24 = *((float *)&v66 + 1);
  if (BYTE8(v66))
    v25 = 0.0;
  else
    v25 = *(float *)&v66;
  v65 = 2;
  sub_1B1A7220C();
  sub_1B22297B4();
  v51 = v16;
  if (v67 == 255)
  {
    LOBYTE(v66) = 18;
    v29 = sub_1B2229784();
    v30 = 100;
    if ((v29 & 1) != 0)
    {
      v31 = 1;
    }
    else
    {
      v30 = 0;
      v31 = 2;
    }
    if (v29 == 2)
      v32 = 0;
    else
      v32 = v30;
    v50 = (unint64_t)v32;
    if (v29 == 2)
      v27 = 2;
    else
      v27 = v31;
  }
  else
  {
    v27 = v67;
    v50 = v66;
  }
  v65 = 10;
  sub_1B2229814();
  v28 = v66;
  v65 = 11;
  sub_1B1A08878();
  sub_1B2229814();
  v33 = v66;
  v65 = 12;
  sub_1B1A71D2C();
  sub_1B22297B4();
  if (v66 == 4)
    v34 = 2;
  else
    v34 = v66;
  v65 = 13;
  sub_1B22297B4();
  if ((v67 & 1) != 0)
    __asm { FMOV            V0.4S, #1.0 }
  else
    _Q0 = v66;
  v55 = _Q0;
  v65 = 14;
  sub_1B22297B4();
  v49 = 0u;
  if ((v67 & 1) == 0)
    v49 = v66;
  LOBYTE(v66) = 15;
  v40 = sub_1B22297D8();
  v65 = 16;
  sub_1B1A718E8();
  sub_1B22297B4();
  v41 = v66;
  v65 = 17;
  sub_1B1A7184C();
  sub_1B22297B4();
  if (v41 == 4)
    v42 = 0;
  else
    v42 = v41;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v12);
  if (v66 == 3)
    v43 = 2;
  else
    v43 = v66;
  v65 = v53;
  v44 = v58 & 1;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v64);
  *(_DWORD *)a2 = v54;
  *(_BYTE *)(a2 + 4) = v65;
  *(float *)(a2 + 8) = v25;
  *(float *)(a2 + 12) = v24;
  v45 = *((_QWORD *)&v50 + 1);
  *(_QWORD *)(a2 + 16) = v50;
  *(_QWORD *)(a2 + 24) = v45;
  *(_BYTE *)(a2 + 32) = v27;
  *(_BYTE *)(a2 + 33) = v42;
  *(_BYTE *)(a2 + 34) = v44;
  v46 = v60;
  *(_QWORD *)(a2 + 48) = v61;
  *(_QWORD *)(a2 + 56) = v46;
  *(_BYTE *)(a2 + 64) = v59;
  v47 = v56;
  *(_QWORD *)(a2 + 80) = v57;
  *(_QWORD *)(a2 + 88) = v47;
  *(_BYTE *)(a2 + 96) = v51;
  *(_BYTE *)(a2 + 97) = v43;
  *(_DWORD *)(a2 + 100) = v23;
  *(_QWORD *)(a2 + 104) = v28;
  *(_QWORD *)(a2 + 112) = v20;
  *(_OWORD *)(a2 + 128) = v52;
  *(_QWORD *)(a2 + 144) = v21;
  *(_QWORD *)(a2 + 152) = v33;
  *(_BYTE *)(a2 + 160) = v34;
  v48 = v49;
  *(_OWORD *)(a2 + 176) = v55;
  *(_OWORD *)(a2 + 192) = v48;
  *(_BYTE *)(a2 + 208) = v40 & 1;
  return result;
}

uint64_t sub_1B1D72190(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  char v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  char v21;
  char v22;
  __int16 v23;
  int v24;
  char v25;
  char v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v33[224];
  int v34;
  char v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  char v41;
  char v42;
  _BYTE v43[13];
  __int128 v44;
  char v45;
  _BYTE v46[15];
  __int128 v47;
  char v48;
  char v49;
  __int16 v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _BYTE v58[15];
  __int128 v59;
  __int128 v60;
  char v61;
  _QWORD v62[2];
  _QWORD v63[2];
  _QWORD v64[2];
  __int16 v65;
  char v66;
  _BYTE v67[224];
  _BYTE v68[224];

  v2 = *a1;
  swift_retain();
  v3 = a1[1];
  swift_retain();
  sub_1B1D17374(v3, (uint64_t)v33);
  swift_release();
  sub_1B1A18378((uint64_t)v33, (uint64_t)v67, (unint64_t *)&unk_1ED4B8020, (uint64_t)&type metadata for EmitterShape);
  sub_1B1A18378((uint64_t)v67, (uint64_t)v68, (unint64_t *)&unk_1ED4B8020, (uint64_t)&type metadata for EmitterShape);
  v4 = sub_1B1D7242C((uint64_t)v68);
  if ((_DWORD)v4 == 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 1;
    v9 = xmmword_1B2291400;
    v10 = 0x40C90FDA00000000;
    v11 = xmmword_1B2244DD0;
    v12 = 0xFFFFFFFFLL;
    v13 = 0;
    v14 = 0uLL;
    v15 = 0uLL;
    __asm { FMOV            V7.4S, #1.0 }
    v21 = -1;
    v22 = 2;
    v23 = -26214;
    v24 = 1050253722;
    v25 = 1;
    v26 = 2;
    v27 = 2;
    v28 = 2;
    v29 = 0uLL;
    v30 = 0uLL;
  }
  else
  {
    sub_1B1A18378((uint64_t)v67, (uint64_t)&v34, (unint64_t *)&unk_1ED4B8020, (uint64_t)&type metadata for EmitterShape);
    v5 = v34;
    v8 = v35;
    v65 = v36;
    v66 = v37;
    v10 = v38;
    v14 = v39;
    v22 = v40;
    v6 = v41;
    v25 = v42;
    v64[0] = *(_QWORD *)v43;
    *(_QWORD *)((char *)v64 + 5) = *(_QWORD *)&v43[5];
    v29 = v44;
    v26 = v45;
    *(_QWORD *)((char *)v63 + 7) = *(_QWORD *)&v46[7];
    v63[0] = *(_QWORD *)v46;
    v30 = v47;
    v21 = v48;
    v27 = v49;
    v23 = v50;
    v9 = v51;
    v24 = v52;
    v4 = v53;
    v11 = v54;
    v13 = v55;
    v12 = v56;
    v28 = v57;
    *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)&v58[7];
    v62[0] = *(_QWORD *)v58;
    _Q7 = v59;
    v15 = v60;
    v7 = v61;
  }
  v34 = v5;
  v35 = v8;
  v36 = v65;
  v37 = v66;
  v38 = v10;
  v39 = v14;
  v40 = v22;
  v41 = v6;
  v42 = v25;
  *(_QWORD *)v43 = v64[0];
  *(_QWORD *)&v43[5] = *(_QWORD *)((char *)v64 + 5);
  v44 = v29;
  v45 = v26;
  *(_QWORD *)&v46[7] = *(_QWORD *)((char *)v63 + 7);
  *(_QWORD *)v46 = v63[0];
  v47 = v30;
  v48 = v21;
  v49 = v27;
  v50 = v23;
  v51 = v9;
  v52 = v24;
  v53 = v4;
  v54 = v11;
  v55 = v13;
  v56 = v12;
  v57 = v28;
  *(_QWORD *)v58 = v62[0];
  *(_QWORD *)&v58[7] = *(_QWORD *)((char *)v62 + 7);
  v59 = _Q7;
  v60 = v15;
  v61 = v7;
  v31 = a1[4];
  swift_retain();
  sub_1B1BEE528((uint64_t)a1);
  sub_1B1FE89AC(v31, v2, v2, (uint64_t)a1);
  sub_1B1B4F21C((uint64_t)a1);
  return swift_release_n();
}

uint64_t sub_1B1D7242C(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 34);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t sub_1B1D72448(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1792854(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B1D72494()
{
  return swift_deallocObject();
}

double sub_1B1D724A4(__n128 a1)
{
  uint64_t v1;

  return sub_1B1D66E8C(a1, *(float *)(v1 + 16), *(float *)(v1 + 20));
}

uint64_t sub_1B1D724AC()
{
  return swift_deallocObject();
}

double sub_1B1D724BC(float32x4_t a1)
{
  uint64_t v1;

  return sub_1B1D66F78(a1, *(float *)(v1 + 16), *(float *)(v1 + 20));
}

uint64_t sub_1B1D724C4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1D724F4()
{
  return swift_deallocObject();
}

double sub_1B1D72504(double _D0)
{
  uint64_t v1;
  float v8;
  __float2 v9;
  float32x4_t v10;
  float32x4_t v11;
  double result;
  __int32 v13;

  _S3 = -2.0;
  __asm { FMLA            S5, S3, V0.S[1] }
  v13 = LODWORD(_S5);
  v8 = sqrtf(1.0 - (float)(_S5 * _S5));
  v9 = __sincosf_stret(vmlas_n_f32(*(float *)(v1 + 16), *(float *)(v1 + 20) - *(float *)(v1 + 16), *(float *)&_D0));
  v10.f32[0] = v8 * v9.__cosval;
  v10.i32[1] = v13;
  v10.f32[2] = v8 * v9.__sinval;
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(v10, v11).u64[0];
  return result;
}

uint64_t sub_1B1D72570()
{
  return swift_deallocObject();
}

double sub_1B1D72580(double a1)
{
  uint64_t v1;
  float v2;
  __float2 v3;
  float v4;
  __float2 v5;
  float32x4_t v6;
  float32x4_t v7;
  double result;

  v2 = vmlas_n_f32(*(float *)(v1 + 16), *(float *)(v1 + 20) - *(float *)(v1 + 16), *(float *)&a1);
  v3 = __sincosf_stret((float)(1.0 - *((float *)&a1 + 1)) * 3.1416);
  v4 = fmaxf(v3.__sinval, 0.0000001);
  v5 = __sincosf_stret(v2);
  v6.f32[0] = v4 * v5.__cosval;
  v6.i32[1] = LODWORD(v3.__cosval);
  v6.f32[2] = v4 * v5.__sinval;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(v6, v7).u64[0];
  return result;
}

__n128 initializeWithCopy for ShapeDistribution(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for EmitterShape.Direction()
{
  return &type metadata for EmitterShape.Direction;
}

uint64_t storeEnumTagSinglePayload for EmissionOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1D7267C + 4 * byte_1B229153F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1D726B0 + 4 * byte_1B229153A[v4]))();
}

uint64_t sub_1B1D726B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D726B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D726C0);
  return result;
}

uint64_t sub_1B1D726CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D726D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1D726D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D726E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmissionOrder()
{
  return &type metadata for EmissionOrder;
}

ValueMetadata *type metadata accessor for ShapeDistribution()
{
  return &type metadata for ShapeDistribution;
}

__n128 initializeWithCopy for EmitterShape(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for EmitterShape(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 209))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 34);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EmitterShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 208) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 209) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 209) = 0;
    if (a2)
      *(_BYTE *)(result + 34) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmitterShape()
{
  return &type metadata for EmitterShape;
}

ValueMetadata *type metadata accessor for EmitterShape.Shape()
{
  return &type metadata for EmitterShape.Shape;
}

uint64_t storeEnumTagSinglePayload for MotionDistribution(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1D7288C + 4 * byte_1B2291549[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1D728C0 + 4 * byte_1B2291544[v4]))();
}

uint64_t sub_1B1D728C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D728C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D728D0);
  return result;
}

uint64_t sub_1B1D728DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D728E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1D728E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D728F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MotionDistribution()
{
  return &type metadata for MotionDistribution;
}

uint64_t sub_1B1D7290C()
{
  return sub_1B1B4DEE4(&qword_1EEF5E238, &qword_1EEF5E240, (uint64_t)&type metadata for MotionDistribution);
}

unint64_t sub_1B1D7293C()
{
  unint64_t result;

  result = qword_1EEF5E248;
  if (!qword_1EEF5E248)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22917FC, &type metadata for MotionDistribution);
    atomic_store(result, (unint64_t *)&qword_1EEF5E248);
  }
  return result;
}

uint64_t sub_1B1D72980()
{
  return sub_1B1B4DEE4(&qword_1EEF5E250, &qword_1EEF5E258, (uint64_t)&type metadata for EmitterShape.Shape);
}

uint64_t sub_1B1D729AC()
{
  return sub_1B1B4DEE4(&qword_1EEF5E260, &qword_1EEF5E268, (uint64_t)&type metadata for ShapeDistribution);
}

uint64_t sub_1B1D729D8()
{
  return sub_1B1B4DEE4(&qword_1EEF5E270, &qword_1EEF5E278, (uint64_t)&type metadata for EmissionOrder);
}

unint64_t sub_1B1D72A08()
{
  unint64_t result;

  result = qword_1EEF5E280;
  if (!qword_1EEF5E280)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291A1C, &type metadata for EmissionOrder);
    atomic_store(result, (unint64_t *)&qword_1EEF5E280);
  }
  return result;
}

uint64_t sub_1B1D72A4C()
{
  return sub_1B1B4DEE4(&qword_1EEF5E288, &qword_1EEF5E290, (uint64_t)&type metadata for EmitterShape.Direction);
}

unint64_t sub_1B1D72A78()
{
  unint64_t result;

  result = qword_1ED4B7FD8;
  if (!qword_1ED4B7FD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291C30, &type metadata for EmitterShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7FD8);
  }
  return result;
}

uint64_t sub_1B1D72ABC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EmitterShape.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EmitterShape.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_1B1D72C14 + 4 * byte_1B2291553[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1B1D72C48 + 4 * byte_1B229154E[v4]))();
}

uint64_t sub_1B1D72C48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D72C50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D72C58);
  return result;
}

uint64_t sub_1B1D72C64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D72C6CLL);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_1B1D72C70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D72C78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmitterShape.CodingKeys()
{
  return &type metadata for EmitterShape.CodingKeys;
}

unint64_t sub_1B1D72C98()
{
  unint64_t result;

  result = qword_1EEF5E2A8;
  if (!qword_1EEF5E2A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291C08, &type metadata for EmitterShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E2A8);
  }
  return result;
}

unint64_t sub_1B1D72CE0()
{
  unint64_t result;

  result = qword_1ED4B7FE8;
  if (!qword_1ED4B7FE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291B40, &type metadata for EmitterShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7FE8);
  }
  return result;
}

unint64_t sub_1B1D72D28()
{
  unint64_t result;

  result = qword_1ED4B7FE0;
  if (!qword_1ED4B7FE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291B68, &type metadata for EmitterShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7FE0);
  }
  return result;
}

double sub_1B1D72D74@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_1B228FB70;
  *(_QWORD *)(a1 + 16) = 0xFF00000000;
  return result;
}

float sub_1B1D72D8C@<S0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  float result;
  int v12;
  __int128 v13;
  uint64_t v14;

  sub_1B1D4F120(0, (unint64_t *)&unk_1EEF61C30, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  v13 = xmmword_1B228FB70;
  v14 = 0xFF00000000;
  sub_1B1C37430(a1, 0);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (!v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    result = *(float *)&v14;
    v12 = HIDWORD(v14);
    *(_OWORD *)a2 = v13;
    *(float *)(a2 + 16) = result;
    *(_DWORD *)(a2 + 20) = v12;
  }
  return result;
}

uint64_t sub_1B1D72E7C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  __int128 v11;
  uint64_t v12;

  sub_1B1D4F120(0, &qword_1EEF5CA00, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  v11 = *v1;
  v12 = *((_QWORD *)v1 + 2);
  result = sub_1B1C36AB0(a1, (uint64_t)&v11 - v8);
  if (!v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return result;
}

double sub_1B1D72F38()
{
  double result;
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v3 = qword_1ED4D09F8;
  v4 = 0;
  v5 = 2;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  swift_retain();
  sub_1B1B46D38((uint64_t)v1);
  swift_release();
  result = *(double *)v1;
  xmmword_1EEFD5560 = v1[0];
  *(_OWORD *)algn_1EEFD5570 = v1[1];
  qword_1EEFD5580 = v2;
  return result;
}

uint64_t *sub_1B1D72FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  int i;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x2_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x2_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40[8];
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _BYTE v53[40];
  _OWORD v54[2];
  uint64_t v55;

  v5 = *(float *)(v2 + 160);
  if (qword_1EEF57370 != -1)
    swift_once();
  v54[0] = xmmword_1EEFD5560;
  v54[1] = *(_OWORD *)algn_1EEFD5570;
  v55 = qword_1EEFD5580;
  v6 = a2 & 0xFFFFFFFFFFLL;
  sub_1B1E8FCE4(a1, (uint64_t)v54, a2 & 0xFFFFFFFFFFLL, v40);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v40, (uint64_t)v41, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v41[0])
  {
    v48 = v41[0];
    v49 = v41[1];
    v50 = v42;
    if (v47 >= 1)
    {
      v33 = v44;
      if (v44)
      {
        v31 = v43;
        v8 = v46[4];
        i = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v39 = v46;
        v28 = v46 + 8;
        v29 = (uint64_t)(v46 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v10 = 0;
        v30 = i;
        v32 = v8;
        v27 = v2;
        do
        {
          v11 = (unsigned int *)(v31 + 48 * v10);
          v35 = *v11;
          v12 = *((_QWORD *)v11 + 3);
          v14 = *((_QWORD *)v11 + 4);
          v13 = *((_QWORD *)v11 + 5);
          v36 = (uint64_t *)*((_QWORD *)v11 + 2);
          v37 = v10;
          v34 = v11[1];
          if (i)
          {
            v15 = *(os_unfair_lock_s **)(v13 + 376);
            swift_retain();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v8);
          sub_1B19F66A0(v29, (uint64_t)v53, &qword_1ED4B7FB0);
          v16 = v39[4];
          v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
          v18 = v13;
          swift_retain();
          v39[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v39[7] = v17;
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          swift_release();
          v19 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1E63AE088, v36, v12, v14, (uint64_t)v39);
          v20 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v36, v12, v14, (uint64_t)v39);
          v38 = v18;
          v21 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v36, v12, v14, (uint64_t)v39);
          v22 = v21;
          if (v36)
          {
            for (i = v30; v14; --v14)
            {
              sub_1B1D747E8(v19, v20, v22, v27, v6, a1, v5);
              v22 += 64;
              v20 += 4;
              v19 += 3;
            }
          }
          else
          {
            i = v30;
            if ((_DWORD)v35 != (_DWORD)v34)
            {
              v23 = v34 - v35;
              v24 = v21 + (v35 << 6);
              v25 = &v20[4 * v35];
              v26 = &v19[3 * v35];
              do
              {
                sub_1B1D747E8(v26, v25, v24, v27, v6, a1, v5);
                v24 += 64;
                v25 += 4;
                v26 += 3;
                --v23;
              }
              while (v23);
            }
          }
          v51[0] = v48;
          v51[1] = v49;
          v52 = v50;
          sub_1B1F05D48(v39, (unsigned __int16 **)v51, (uint64_t)v53);
          sub_1B1F03804((char *)v38);
          v8 = v32;
          ecs_stack_allocator_pop_snapshot(v32);
          if ((i & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v38 + 376));
          }
          swift_release();
          v10 = v37 + 1;
        }
        while (v37 + 1 != v33);
        sub_1B19ED748(v40);
      }
    }
    return sub_1B19ED748(v40);
  }
  return result;
}

uint64_t sub_1B1D73434(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, unint64_t a5, float a6)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int32 v26;
  int8x16_t v27;
  __int128 v28;
  __int32 v29;
  uint64_t v30;
  float v31;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  uint64_t v46;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float32x4_t v59;
  float32x4_t v60;
  float v61;
  float32x4_t v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;
  float32x4_t v83;
  float v84;
  int8x16_t v85;
  float v86;
  float32x4_t v87;
  float32x4_t v88;
  float v89;
  uint64_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  char v98;
  __int32 v99;
  uint64_t v100;
  __int32 v101;
  __int128 v103;
  char v105;
  __int128 v106;
  uint64_t v107;
  ValueMetadata *v108;
  _UNKNOWN **v109;
  __int128 v110;
  _QWORD v111[6];
  float v112;
  char v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t *)*((_QWORD *)a1 + 11);
  v10 = *((_QWORD *)a1 + 12);
  v11 = *((_QWORD *)a1 + 13);
  v12 = *((_QWORD *)a1 + 1);
  v13 = *((_QWORD *)a1 + 2);
  v100 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v9, v10, v11, v13);
  v14 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v9, v10, v11, v13);
  v90 = sub_1B1B47B28();
  v98 = v15;
  v95 = sub_1B1B47B98();
  v17 = v16;
  v106 = *a2;
  v110 = *(_OWORD *)(a3 + 112);
  v18 = a1[3];
  v116 = a1[2];
  v19 = *a1;
  v115 = a1[1];
  v114 = v19;
  v120 = a1[6];
  v20 = a1[4];
  v119 = a1[5];
  v118 = v20;
  v108 = &type metadata for CollisionProperties;
  v109 = &off_1E6397A08;
  v107 = *((_QWORD *)a2 + 2);
  v21 = *(_QWORD *)(a4 + 16);
  v117 = v18;
  v23 = *((_QWORD *)a1 + 6);
  v22 = *((_QWORD *)a1 + 7);
  v24 = *(_QWORD *)(v13 + 32);
  swift_retain();
  v121 = ecs_stack_allocator_allocate(v24, 8 * (v22 - v23), 8);
  v122 = v22 - v23;
  v123 = 0;
  sub_1B19FA198((uint64_t)&v106, (uint64_t)v111);
  v112 = a6;
  v111[5] = v21;
  sub_1B1A10AA4(*(_QWORD *)(v12 + 40), (uint64_t)&type metadata for Anchored, &v105);
  v113 = v105;
  swift_retain();
  v25 = ecs_stack_allocator_allocate(v24, 80 * (v22 - v23), 16);
  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v106);
  v30 = v100;
  v31 = a6;
  v124 = v25;
  v125 = v22 - v23;
  v126 = 0;
  if (v22 != v23)
  {
    v33 = *(float *)(a4 + 80) * 0.5;
    v34 = *(float32x4_t *)a3;
    v35 = *(float32x4_t *)(a3 + 16);
    v36 = *(float32x4_t *)(a3 + 32);
    v37 = *(float32x4_t *)(a3 + 48);
    v38 = *(float *)(a3 + 128);
    v39 = *(float *)(a3 + 132);
    v40 = 16 * v23;
    v27.i32[0] = 1.0;
    v93 = v35;
    v94 = *(float32x4_t *)a3;
    v91 = v37;
    v92 = v36;
    do
    {
      if ((v17 & 1) != 0)
      {
        __asm { FMOV            V2.4S, #1.0 }
        HIDWORD(_Q2) = HIDWORD(v28);
        v28 = _Q2;
      }
      else
      {
        _Q2 = *(_OWORD *)(v95 + 16 * v23);
      }
      v52 = v33 * fmaxf(fmaxf(*(float *)&_Q2, *((float *)&_Q2 + 2)), *((float *)&_Q2 + 1));
      v53 = vmulq_n_f32(*(float32x4_t *)(v14 + 16 * v23), v31);
      v54 = *(float32x4_t *)(v30 + 16 * v23);
      v55 = vsubq_f32(v54, v53);
      v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v55.f32[0]), v35, *(float32x2_t *)v55.f32, 1), v36, v55, 2), v37, v55, 3);
      v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, v53.f32[0]), v35, *(float32x2_t *)v53.f32, 1), v36, v53, 2), v37, v53, 3);
      v58 = v38 + v52;
      v59 = vmulq_f32(v57, v57);
      v60 = vmulq_f32(v57, v56);
      v60.f32[0] = vaddq_f32(v60, (float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2)).f32[0];
      v61 = v60.f32[0] + v60.f32[0];
      v62 = vmulq_f32(v56, v56);
      v63 = (float)((float)((float)(v59.f32[0] + v59.f32[2]) * -4.0)
                  * (float)(vaddq_f32(v62, (float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2)).f32[0] - (float)(v58 * v58)))
          + (float)(v61 * v61);
      if (v63 >= 0.0)
      {
        v64 = fmaxf(v59.f32[0] + v59.f32[2], 0.00000011921);
        v65 = (float)((float)-v61 - sqrtf(v63)) / (float)(v64 + v64);
        if (v65 <= *(float *)v27.i32)
        {
          v66 = v39 + v52;
          v67 = fminf(v52, fminf(v58, v39 + v52));
          v68 = fabsf(COERCE_FLOAT(vmlaq_n_f32(v56, v57, v65).i32[1]));
          v69 = v66 - v67;
          if (v68 <= (float)(v66 - v67))
            goto LABEL_27;
          if (v68 >= v66)
          {
            v54.i32[0] = v57.i32[1];
            v85.i64[0] = 0x8000000080000000;
            v85.i64[1] = 0x8000000080000000;
            LODWORD(v86) = vbslq_s8(v85, v27, (int8x16_t)v54).u32[0];
            if (v57.f32[1] == 0.0)
              v86 = 0.0;
            v65 = (float)-(float)(v56.f32[1] + (float)(v86 * v66)) / v57.f32[1];
            if (v65 > *(float *)v27.i32)
              goto LABEL_6;
            v87 = vmlaq_n_f32(v56, v57, v65);
            v88 = vmulq_f32(v87, v87);
            v89 = vaddq_f32(v88, (float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2)).f32[0];
            if (v89 > (float)(v58 * v58))
              goto LABEL_6;
            if (v89 <= (float)((float)(v58 - v67) * (float)(v58 - v67)))
              goto LABEL_27;
          }
          v70 = v59.f32[2] + vaddv_f32(*(float32x2_t *)v59.f32);
          if (v70 >= 0.00000011921)
          {
            v71 = v58 - v67;
            v72 = v56;
            v72.i32[1] = 0;
            v77 = (int8x16_t)vmulq_f32(v72, v72);
            v77.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v77, 2), vadd_f32(*(float32x2_t *)v77.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v77.i8, 1))).u32[0];
            v73 = vrsqrte_f32((float32x2_t)v77.u32[0]);
            v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v77.u32[0], vmul_f32(v73, v73)));
            *(float32x2_t *)v77.i8 = vmul_f32(v74, vrsqrts_f32((float32x2_t)v77.u32[0], vmul_f32(v74, v74)));
            v75.i32[0] = 0;
            v75.i64[1] = 0;
            v75.f32[1] = v69;
            v76 = vmulq_n_f32(v72, *(float *)v77.i32);
            v77.i32[0] = v57.i32[1];
            v78.i64[0] = 0x8000000080000000;
            v78.i64[1] = 0x8000000080000000;
            LODWORD(v79) = vbslq_s8(v78, v27, v77).u32[0];
            *(float *)v77.i32 = v57.f32[1] == 0.0 ? 0.0 : v79;
            v80 = vsubq_f32(v56, vmlaq_n_f32(vmulq_f32(v75, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.i8, 0))), v76, v71));
            v81 = vmulq_f32(v57, v80);
            LODWORD(v82) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).u32[0];
            v83 = vmulq_f32(v80, v80);
            v84 = vmlas_n_f32(-(float)(v70* (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).f32[0]- (float)(v67 * v67))), v82, v82);
            if (v84 >= 0.0)
            {
              v65 = (float)((float)-sqrtf(v84) - v82) / v70;
              if (v65 >= 0.0 && v65 <= *(float *)v27.i32)
              {
LABEL_27:
                if (v65 > 0.0)
                {
                  v103 = v28;
                  if ((v98 & 1) != 0)
                  {
                    v42 = 0;
                    v43 = 0;
                  }
                  else
                  {
                    v41 = (uint64_t *)(v90 + 16 * v23);
                    v42 = *v41;
                    v43 = v41[1];
                  }
                  v44 = vaddq_f32(v55, vmulq_n_f32(v53, v65));
                  v45 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(a3 + 64), (float32x4_t)0), (float32x4_t)0, *(float32x4_t *)(a3 + 80)), (float32x4_t)0, *(float32x4_t *)(a3 + 96));
                  v45.i32[3] = v26;
                  v44.i32[3] = v29;
                  v99 = v26;
                  v101 = v29;
                  v46 = v30;
                  sub_1B2021194(v23, (float32x4_t *)(v30 + v40), (float32x4_t *)(v14 + v40), v42, v43, v98 & 1, v44, v45, v65);
                  v30 = v46;
                  v26 = v99;
                  v29 = v101;
                  v28 = v103;
                  v31 = a6;
                  v35 = v93;
                  v34 = v94;
                  v37 = v91;
                  v36 = v92;
                  v27.i32[0] = 1.0;
                }
              }
            }
          }
        }
      }
LABEL_6:
      ++v23;
      v40 += 16;
    }
    while (v22 != v23);
  }
  sub_1B1C38184((uint64_t)&v110, a5 | ((HIDWORD(a5) & 1) << 32));
  return sub_1B1C390B0((uint64_t)&v110);
}

__n128 sub_1B1D739AC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>, float32x4_t a7@<Q4>, float32x4_t a8@<Q5>, float32x4_t a9@<Q6>, float32x4_t a10@<Q7>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  float v59;
  int32x2_t v60;
  int32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  int32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  __n128 result;
  float32x4_t v70;
  int8x16_t v72;
  int8x16_t v74;
  float32x4_t v79;
  _QWORD v80[10];
  _BYTE v81[80];
  simd_float4x4 v82;

  sub_1B1AE09AC(a1, (uint64_t)v80);
  v13 = v80[0];
  v12 = v80[1];
  v15 = v80[2];
  v14 = v80[3];
  v17 = v80[4];
  v16 = v80[5];
  v19 = v80[6];
  v18 = v80[7];
  sub_1B1AE09AC(a1, (uint64_t)v81);
  if ((v81[64] & 1) != 0)
  {
    v20 = a3;
    v21 = a4;
    v22 = a3;
    v23 = a4;
    v24 = a5;
    v25 = a6;
    v26 = a5;
    v27 = a6;
  }
  else
  {
    v22.i64[0] = v13;
    v22.i64[1] = v12;
    v23.i64[0] = v15;
    v23.i64[1] = v14;
    v26.i64[0] = v17;
    v26.i64[1] = v16;
    v27.i64[0] = v19;
    v27.i64[1] = v18;
    v24 = a5;
    v25 = a6;
    v20 = a3;
    v21 = a4;
  }
  v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v20.f32[0]), a8, *(float32x2_t *)v20.f32, 1), a9, v20, 2), a10, v20, 3);
  v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v21.f32[0]), a8, *(float32x2_t *)v21.f32, 1), a9, v21, 2), a10, v21, 3);
  v30 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v24.f32[0]), a8, *(float32x2_t *)v24.f32, 1), a9, v24, 2), a10, v24, 3);
  v31 = vmulq_f32(v28, v28);
  v32 = vmulq_f32(v29, v29);
  v33 = vmulq_f32(v30, v30);
  v34 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2);
  v35 = (float32x4_t)vtrn2q_s32((int32x4_t)v31, (int32x4_t)v32);
  v35.i32[2] = v33.i32[1];
  v36 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32((int32x4_t)v31, (int32x4_t)v33), (int32x4_t)v34), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v31, (int32x4_t)v33), (int32x4_t)v32), v35));
  v37.i64[0] = 0x80000000800000;
  v37.i64[1] = 0x80000000800000;
  v38 = vcgeq_f32(v37, v36);
  v36.i32[3] = 0;
  v39 = vrsqrteq_f32(v36);
  v40 = vmulq_f32(v39, vrsqrtsq_f32(v36, vmulq_f32(v39, v39)));
  v41 = v38;
  v41.i32[3] = 0;
  v42 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v41), (int8x16_t)v36, (int8x16_t)vmulq_f32(v40, vrsqrtsq_f32(v36, vmulq_f32(v40, v40))));
  v43 = vmulq_n_f32(v28, v42.f32[0]);
  v44 = vmulq_lane_f32(v29, *(float32x2_t *)v42.f32, 1);
  v45 = vmulq_laneq_f32(v30, v42, 2);
  v46 = (int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45);
  v47 = (int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44);
  v48 = (int8x16_t)v43;
  if (v38.i32[0])
  {
    v49 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v46, (int8x16_t)v45, 0xCuLL), vnegq_f32(v44)), v45, (float32x4_t)vextq_s8(v47, (int8x16_t)v44, 0xCuLL));
    v48 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
  }
  v74 = v48;
  v50 = (int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43);
  v51 = (int8x16_t)v44;
  if (v38.i32[1])
  {
    v52 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v50, (int8x16_t)v43, 0xCuLL), vnegq_f32(v45)), v43, (float32x4_t)vextq_s8(v46, (int8x16_t)v45, 0xCuLL));
    v51 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), v52, 0xCuLL);
  }
  v72 = v51;
  if (v38.i32[2])
  {
    v53 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v47, (int8x16_t)v44, 0xCuLL), vnegq_f32(v43)), v44, (float32x4_t)vextq_s8(v50, (int8x16_t)v43, 0xCuLL));
    v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), v53, 0xCuLL);
  }
  v70 = v45;
  v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v27.f32[0]), a8, *(float32x2_t *)v27.f32, 1), a9, v27, 2), a10, v27, 3);
  v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v26.f32[0]), a8, *(float32x2_t *)v26.f32, 1), a9, v26, 2), a10, v26, 3);
  v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v23.f32[0]), a8, *(float32x2_t *)v23.f32, 1), a9, v23, 2), a10, v23, 3);
  v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v22.f32[0]), a8, *(float32x2_t *)v22.f32, 1), a9, v22, 2), a10, v22, 3);
  v82.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v25.f32[0]), a8, *(float32x2_t *)v25.f32, 1), a9, v25, 2), a10, v25, 3);
  v58 = sqrtf(vaddq_f32(v34, vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]) * 0.5;
  v59 = fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]))* 0.5;
  v60 = (int32x2_t)vadd_f32(*(float32x2_t *)v31.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL));
  v79 = vsubq_f32(vaddq_f32((float32x4_t)v82.columns[3], vmlaq_f32(vmlaq_f32(vmulq_f32(v28, (float32x4_t)0), (float32x4_t)0, v29), (float32x4_t)0, v30)), vaddq_f32(v54, vmlaq_f32(vmlaq_f32(vmulq_f32(v57, (float32x4_t)0), (float32x4_t)0, v56), (float32x4_t)0, v55)));
  v60.i32[0] = vadd_f32((float32x2_t)v60, (float32x2_t)vdup_lane_s32(v60, 1)).u32[0];
  *(float32x2_t *)v57.f32 = vrsqrte_f32((float32x2_t)v60.u32[0]);
  *(float32x2_t *)v57.f32 = vmul_f32(*(float32x2_t *)v57.f32, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32)));
  v61 = (int32x2_t)vadd_f32(*(float32x2_t *)v32.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL));
  v61.i32[0] = vadd_f32((float32x2_t)v61, (float32x2_t)vdup_lane_s32(v61, 1)).u32[0];
  v82.columns[0] = (simd_float4)vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v57.f32, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32))).f32[0]);
  v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
  v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
  v64 = (int32x2_t)vadd_f32(*(float32x2_t *)v33.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL));
  v82.columns[1] = (simd_float4)vmulq_n_f32(v29, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
  v64.i32[0] = vadd_f32((float32x2_t)v64, (float32x2_t)vdup_lane_s32(v64, 1)).u32[0];
  v65 = vrsqrte_f32((float32x2_t)v64.u32[0]);
  v66 = vmul_f32(v65, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v65, v65)));
  v82.columns[2] = (simd_float4)vmulq_n_f32(v30, vmul_f32(v66, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v66, v66))).f32[0]);
  *(simd_float4x4 *)a2 = __invert_f4(v82);
  *(int8x16_t *)(a2 + 64) = v74;
  *(int8x16_t *)(a2 + 80) = v72;
  result = (__n128)v79;
  *(float32x4_t *)(a2 + 96) = v70;
  *(float32x4_t *)(a2 + 112) = v79;
  *(float *)(a2 + 128) = v59;
  *(float *)(a2 + 132) = v58;
  return result;
}

uint64_t *sub_1B1D73D3C(int a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11)
{
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *result;
  float v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  float v32;
  float v33;
  float32x4_t *v34;
  float v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float v60;
  float v61;
  _QWORD *v62;
  float v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t v68;
  uint64_t ObjectType;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  float v77;
  float v78;
  float32x4_t *v79;
  float v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  float v105;
  float v106;
  _QWORD *v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  int v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  __int128 v155;
  uint64_t v156;
  float v157;
  float v158;
  uint64_t v159[8];
  _OWORD v160[8];
  uint64_t v161;
  _OWORD v162[8];
  uint64_t v163;
  _OWORD v164[2];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  _OWORD v174[2];
  uint64_t v175;
  __int128 v176;
  __int128 v177;
  _OWORD v178[6];
  int v179;
  _BYTE v180[40];
  _OWORD v181[3];
  uint64_t v182;
  uint64_t v183;
  char v184;
  _OWORD v185[3];
  uint64_t v186;
  uint64_t v187;
  char v188;
  _OWORD v189[2];
  uint64_t v190;
  unsigned int v191;
  char v192;

  if (qword_1EEF57370 != -1)
    swift_once();
  v189[0] = xmmword_1EEFD5560;
  v189[1] = *(_OWORD *)algn_1EEFD5570;
  v190 = qword_1EEFD5580;
  v14 = *(_OWORD *)(a3 + 96);
  v178[2] = *(_OWORD *)(a3 + 80);
  v178[3] = v14;
  v15 = *(_OWORD *)(a3 + 128);
  v178[4] = *(_OWORD *)(a3 + 112);
  v178[5] = v15;
  v16 = *(_OWORD *)(a3 + 32);
  v176 = *(_OWORD *)(a3 + 16);
  v177 = v16;
  v17 = *(_OWORD *)(a3 + 64);
  v178[0] = *(_OWORD *)(a3 + 48);
  v178[1] = v17;
  sub_1B1BE9FDC((int *)v178 + 2, (uint64_t)&v179);
  sub_1B1BE9FDC(&v179, (uint64_t)&v191);
  if (v192)
    v18 = 0x200000000;
  else
    v18 = v191;
  sub_1B1E8FCE4(a2, (uint64_t)v189, v18, v159);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v159, (uint64_t)v164, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v164[0])
  {
    v171 = v164[0];
    v172 = v164[1];
    v173 = v165;
    if (v170 >= 1)
    {
      v124 = v167;
      if (v167)
      {
        v123 = v166;
        v128 = *(unsigned __int8 *)(v168 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v127 = v169[4];
        v129 = v169;
        v121 = v169 + 8;
        v122 = (uint64_t)(v169 + 6);
        v20 = a7 * 0.5;
        swift_retain();
        swift_retain();
        swift_retain();
        v21 = 0;
        do
        {
          v22 = (unsigned int *)(v123 + 48 * v21);
          v23 = *v22;
          v131 = v22[1];
          v24 = *((_QWORD *)v22 + 5);
          v132 = *((_QWORD *)v22 + 4);
          v130 = v24;
          v125 = v21;
          v126 = (uint64_t *)*((_QWORD *)v22 + 2);
          v140 = *((_QWORD *)v22 + 3);
          if (v128)
          {
            v25 = *(os_unfair_lock_s **)(v24 + 376);
            swift_retain();
            v26 = v25;
            v24 = v130;
            os_unfair_lock_lock(v26);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v130 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v127);
          sub_1B19F66A0(v122, (uint64_t)v180, &qword_1ED4B7FB0);
          v27 = v129[4];
          v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v129[6] = ecs_stack_allocator_allocate(v27, 48 * v28, 8);
          v129[7] = v28;
          v121[1] = 0;
          v121[2] = 0;
          *v121 = 0;
          swift_release();
          v29 = v132;
          v144 = sub_1B1A12038((uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1E63AE088, v126, v140, v132, (uint64_t)v129);
          v142 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v126, v140, v132, (uint64_t)v129);
          v141 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v126, v140, v132, (uint64_t)v129);
          if (v126)
          {
            if (v132)
            {
              for (i = 0; i != v29; ++i)
              {
                v31 = v144 + 24 * i;
                if ((*(_DWORD *)(v31 + 20) & a1) != 0)
                {
                  v33 = *(float *)(v31 + 4);
                  v32 = *(float *)(v31 + 8);
                  v34 = (float32x4_t *)(v142 + (i << 6));
                  v35 = *(float *)(v31 + 12);
                  v36 = v141 + (i << 6);
                  v37 = *v34;
                  v38 = v34[1];
                  v39 = v34[2];
                  v40 = v34[3];
                  v41 = *(_OWORD *)v36;
                  v42 = *(_OWORD *)(v36 + 16);
                  v43 = *(_OWORD *)(v36 + 32);
                  v46 = v36 + 48;
                  v44 = *(_QWORD *)(v36 + 48);
                  v45 = *(_QWORD *)(v46 + 8);
                  v181[0] = v41;
                  v181[1] = v42;
                  v181[2] = v43;
                  v182 = v44;
                  v183 = v45;
                  v184 = 0;
                  sub_1B1D739AC((uint64_t)v181, (uint64_t)v160, v37, v38, v39, v40, a8, a9, a10, a11);
                  v47 = v176;
                  v48 = *(float *)(v176 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                  v49 = SLODWORD(v178[0]);
                  v50 = DWORD1(v178[0]);
                  swift_retain();
                  if ((_DWORD)v49 == -1 && !(_DWORD)v50)
                    goto LABEL_57;
                  v51 = v49;
                  if ((v49 & 0x80000000) != 0)
                    goto LABEL_57;
                  v52 = (uint64_t *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                  if (*(_QWORD *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v49)
                    goto LABEL_57;
                  v53 = *v52;
                  v54 = *v52 + 12 * (int)v49;
                  v55 = *(__int16 *)(v54 + 4);
                  if ((_DWORD)v50 != -1 && *(_DWORD *)(v54 + 8) != (_DWORD)v50)
                    goto LABEL_57;
                  v56 = *(_QWORD *)(*(_QWORD *)(v47 + 136) + 8 * *(int *)(v53 + 12 * (int)v49) + 32);
                  v57 = *(_QWORD *)(v56 + 48);
                  v58 = *(_QWORD *)(v57 + 16);
                  if (!v58)
                    goto LABEL_57;
                  v59 = fminf(fmaxf(v33 + a4, 0.0), 1.0);
                  v60 = fminf(fmaxf(v32 + a5, 0.0), 1.0);
                  v61 = 1.0 - fminf(fmaxf(v35 + a6, 0.0), 1.0);
                  v62 = (_QWORD *)(v57 + 56);
                  while ((ValueMetadata *)*(v62 - 3) != &type metadata for EmitterDescription)
                  {
                    v62 += 5;
                    if (!--v58)
                      goto LABEL_57;
                  }
                  v63 = *(float *)(*(_QWORD *)(v56 + 128) + *v62 + 88 * v55 + 52);
                  swift_release();
                  v64 = *v34;
                  v65 = v34[1];
                  v66 = v34[2];
                  v67 = v34[3];
                  *(float *)&v145 = v48 * v63;
                  *((float *)&v145 + 1) = v60;
                  *(float *)&v146 = v61;
                  v147 = v160[0];
                  v148 = v160[1];
                  v149 = v160[2];
                  v150 = v160[3];
                  v151 = v64;
                  v152 = v65;
                  v153 = v66;
                  v154 = v67;
                  v155 = v160[7];
                  v156 = v161;
                  v157 = v59;
                  v158 = v20;
                  v68 = *(_QWORD *)a3;
                  if (*(_QWORD *)a3)
                  {
                    ObjectType = swift_getObjectType();
                    type metadata accessor for particle_cylinder_collider_uniforms(0);
                    sub_1B1F40E1C((uint64_t)&v145, 1, ObjectType, v70, v71, v72, v73, v74);
                  }
                  swift_retain();
                  sub_1B1B1FC34(a3);
                  v75 = sub_1B1FE6EFC(v51 | (v50 << 32), v47, v68 == 0, 0, a3, 0xD00000000000001ALL, 0x80000001B233A950, 0);
                  sub_1B1B1FC88(a3);
                  if ((v75 & 1) == 0)
                    goto LABEL_57;
                  swift_release();
                  v29 = v132;
                }
              }
            }
          }
          else if ((_DWORD)v23 != (_DWORD)v131)
          {
            do
            {
              v76 = v144 + 24 * v23;
              if ((*(_DWORD *)(v76 + 20) & a1) != 0)
              {
                v78 = *(float *)(v76 + 4);
                v77 = *(float *)(v76 + 8);
                v79 = (float32x4_t *)(v142 + (v23 << 6));
                v80 = *(float *)(v76 + 12);
                v81 = v141 + (v23 << 6);
                v82 = *v79;
                v83 = v79[1];
                v84 = v79[2];
                v85 = v79[3];
                v86 = *(_OWORD *)v81;
                v87 = *(_OWORD *)(v81 + 16);
                v88 = *(_OWORD *)(v81 + 32);
                v91 = v81 + 48;
                v89 = *(_QWORD *)(v81 + 48);
                v90 = *(_QWORD *)(v91 + 8);
                v185[0] = v86;
                v185[1] = v87;
                v185[2] = v88;
                v186 = v89;
                v187 = v90;
                v188 = 0;
                sub_1B1D739AC((uint64_t)v185, (uint64_t)v162, v82, v83, v84, v85, a8, a9, a10, a11);
                v92 = v176;
                v93 = *(float *)(v176 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
                v94 = SLODWORD(v178[0]);
                v95 = DWORD1(v178[0]);
                swift_retain();
                if ((_DWORD)v94 == -1 && !(_DWORD)v95)
                  goto LABEL_61;
                v96 = v94;
                if ((v94 & 0x80000000) != 0)
                  goto LABEL_61;
                v97 = (uint64_t *)(v92 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                if (*(_QWORD *)(v92 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v94)
                  goto LABEL_61;
                v98 = *v97;
                v99 = *v97 + 12 * (int)v94;
                v100 = *(__int16 *)(v99 + 4);
                if ((_DWORD)v95 != -1 && *(_DWORD *)(v99 + 8) != (_DWORD)v95)
                  goto LABEL_61;
                v101 = *(_QWORD *)(*(_QWORD *)(v92 + 136) + 8 * *(int *)(v98 + 12 * (int)v94) + 32);
                v102 = *(_QWORD *)(v101 + 48);
                v103 = *(_QWORD *)(v102 + 16);
                if (!v103)
                  goto LABEL_61;
                v104 = fminf(fmaxf(v78 + a4, 0.0), 1.0);
                v105 = fminf(fmaxf(v77 + a5, 0.0), 1.0);
                v106 = 1.0 - fminf(fmaxf(v80 + a6, 0.0), 1.0);
                v107 = (_QWORD *)(v102 + 56);
                while ((ValueMetadata *)*(v107 - 3) != &type metadata for EmitterDescription)
                {
                  v107 += 5;
                  if (!--v103)
                    goto LABEL_57;
                }
                v108 = *(float *)(*(_QWORD *)(v101 + 128) + *v107 + 88 * v100 + 52);
                swift_release();
                v109 = *v79;
                v110 = v79[1];
                v111 = v79[2];
                v112 = v79[3];
                *(float *)&v145 = v93 * v108;
                *((float *)&v145 + 1) = v105;
                *(float *)&v146 = v106;
                v147 = v162[0];
                v148 = v162[1];
                v149 = v162[2];
                v150 = v162[3];
                v151 = v109;
                v152 = v110;
                v153 = v111;
                v154 = v112;
                v155 = v162[7];
                v156 = v163;
                v157 = v104;
                v158 = v20;
                v113 = *(_QWORD *)a3;
                if (*(_QWORD *)a3)
                {
                  v114 = swift_getObjectType();
                  type metadata accessor for particle_cylinder_collider_uniforms(0);
                  sub_1B1F40E1C((uint64_t)&v145, 1, v114, v115, v116, v117, v118, v119);
                }
                swift_retain();
                sub_1B1B1FC34(a3);
                v120 = sub_1B1FE6EFC(v96 | (v95 << 32), v92, v113 == 0, 0, a3, 0xD00000000000001ALL, 0x80000001B233A950, 0);
                sub_1B1B1FC88(a3);
                if ((v120 & 1) == 0)
                {
LABEL_61:
                  while (1)
                  {
LABEL_57:
                    v145 = 0;
                    v146 = 0xE000000000000000;
                    sub_1B2229430();
                    sub_1B2228890();
                    sub_1B1BC3C70();
                    sub_1B2228890();
                    swift_bridgeObjectRelease();
                    sub_1B2228890();
                    sub_1B2228890();
                    sub_1B2228890();
                    sub_1B2229688();
                    __break(1u);
                  }
                }
                swift_release();
              }
              ++v23;
            }
            while (v23 != v131);
          }
          v174[0] = v171;
          v174[1] = v172;
          v175 = v173;
          sub_1B1F05D48(v129, (unsigned __int16 **)v174, (uint64_t)v180);
          sub_1B1F03804((char *)v130);
          ecs_stack_allocator_pop_snapshot(v127);
          if ((v128 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v130 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v130 + 376));
          }
          swift_release();
          v21 = v125 + 1;
        }
        while (v125 + 1 != v124);
        sub_1B19ED748(v159);
      }
    }
    return sub_1B19ED748(v159);
  }
  return result;
}

float32x2_t *sub_1B1D747E8(float32x2_t *result, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  int v7;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t i;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  int v59;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned __int16 *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _BYTE v101[136];
  uint64_t v102[12];
  _QWORD v103[7];
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  __int128 v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  float v122;
  int v123;
  _OWORD v124[2];
  uint64_t v125;
  _OWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  char v129;

  v7 = *(_DWORD *)(a4 + 84) & result[2].i32[1];
  if (v7)
  {
    v10 = a4;
    v11 = a5;
    if ((a5 & 0xFE00000000) != 0)
      v11 = 0;
    v86 = v11;
    v12 = result[2].f32[0];
    v13 = *(float *)(a4 + 80);
    v14 = result[1].f32[0];
    v15 = *(float *)(a4 + 72);
    __asm { FMOV            V7.2S, #1.0 }
    v20 = fminf(fmaxf(result[1].f32[1] + *(float *)(a4 + 76), 0.0), 1.0);
    *(float32x2_t *)&v121 = vminnm_f32(vmaxnm_f32(vadd_f32(*result, *(float32x2_t *)(a4 + 64)), 0), _D7);
    DWORD2(v121) = fminf(fmaxf(v14 + v15, 0.0), 1.0);
    *((float *)&v121 + 3) = 1.0 - v20;
    v122 = v12 + v13;
    v123 = v7;
    v21 = *a2;
    v22 = a2[1];
    v23 = a2[2];
    v24 = a2[3];
    v25 = *(_OWORD *)(a3 + 16);
    v26 = *(_OWORD *)(a3 + 32);
    v28 = *(_QWORD *)(a3 + 48);
    v27 = *(_QWORD *)(a3 + 56);
    v126[0] = *(_OWORD *)a3;
    v126[1] = v25;
    v126[2] = v26;
    v127 = v28;
    v128 = v27;
    v129 = 0;
    v29 = _ZF || (a5 & 0xFE00000000) != 0;
    v85 = v29;
    sub_1B1D739AC((uint64_t)v126, (uint64_t)v101, v21, v22, v23, v24, *(float32x4_t *)(a4 + 96), *(float32x4_t *)(a4 + 112), *(float32x4_t *)(a4 + 128), *(float32x4_t *)(a4 + 144));
    v124[0] = *(_OWORD *)(v10 + 24);
    v124[1] = *(_OWORD *)(v10 + 40);
    v125 = *(_QWORD *)(v10 + 56);
    sub_1B1E8FCE4(a6, (uint64_t)v124, 0x200000000, v102);
    result = (float32x2_t *)sub_1B19F66A0((uint64_t)v102, (uint64_t)v103, (unint64_t *)&qword_1ED4B7DE0);
    v97 = (unsigned __int16 *)v103[0];
    if (v103[0])
    {
      v84 = v107;
      if (v107 >= 1)
      {
        v83 = v104;
        if (v104)
        {
          v30 = 0;
          v81 = v103[5];
          v80 = v105;
          v31 = *(unsigned __int8 *)(v105 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v78 = v106 + 8;
          v95 = v106[4];
          v96 = v103[0] + 41;
          v79 = v31;
          v82 = v10;
          v100 = v106;
          do
          {
            v32 = (unsigned int *)(v81 + 48 * v30);
            v33 = *v32;
            v34 = v32[1];
            v35 = v32[2];
            v37 = *((_QWORD *)v32 + 4);
            v36 = *((_QWORD *)v32 + 5);
            v92 = v30;
            v93 = *((_QWORD *)v32 + 3);
            v98 = *((_QWORD *)v32 + 2);
            if (v31)
            {
              v38 = *(os_unfair_lock_s **)(v36 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v38);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v36 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v95);
            v39 = v100;
            v87 = v100[7];
            v88 = v100[6];
            v90 = v100[9];
            v91 = v100[8];
            v94 = v100[10];
            v40 = v100[4];
            v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v100[6] = ecs_stack_allocator_allocate(v40, 48 * v41, 8);
            v100[7] = v41;
            v78[1] = 0;
            v78[2] = 0;
            *v78 = 0;
            swift_release();
            *(_QWORD *)&v108 = v80;
            *((_QWORD *)&v108 + 1) = v36;
            v89 = v36;
            v109 = v100;
            v110 = v35;
            v111 = (v34 - v33 + v35);
            v112 = v84;
            v113 = v33;
            v114 = v34;
            v115 = 0;
            v116 = 0;
            v117 = 1;
            v118 = v98;
            v119 = v93;
            v120 = v37;
            sub_1B1D73434(&v108, &v121, (uint64_t)v101, v10, v86 | ((unint64_t)v85 << 32), a7);
            v42 = v100[6];
            v99 = v100[8];
            if (!v99)
            {
              v69 = v100[7];
              v70 = (_QWORD *)v100[4];
              v72 = v91;
              v71 = v92;
              v76 = v88;
              v75 = v89;
              v77 = v87;
              v73 = v90;
              goto LABEL_53;
            }
            for (i = 0; i != v99; ++i)
            {
              v45 = v42;
              v46 = (uint64_t *)(v42 + 48 * i);
              v47 = *v46;
              v48 = (void (*)(uint64_t))v46[4];
              v49 = v39[9];
              if (v49)
                _ZF = v47 == v49;
              else
                _ZF = 0;
              if (_ZF || !v97[11])
                goto LABEL_17;
              v51 = v97[9];
              v52 = (_QWORD *)(v96 + v97[8]);
              v53 = v46[2];
              v54 = v52;
              v55 = v51 >> 4;
              v56 = v96;
              if (v51 >= 0x10)
              {
                while (*v54 != v47)
                {
                  ++v56;
                  v54 += 2;
                  if (!--v55)
                    goto LABEL_32;
                }
                v57 = *(unsigned __int8 *)(v56 + v97[10]);
                v58 = v57 > 5;
                v59 = (1 << v57) & 0x23;
                if (v58 || v59 == 0)
                {
LABEL_17:
                  v44 = swift_retain();
                  v48(v44);
                  swift_release();
                  goto LABEL_18;
                }
              }
LABEL_32:
              if (swift_conformsToProtocol2())
                v61 = v53;
              else
                v61 = 0;
              if (v61)
              {
                if (v51 < 0x10)
                  goto LABEL_17;
                v62 = v52;
                v63 = v51 >> 4;
                v64 = v96;
                while (*v62 != v61)
                {
                  ++v64;
                  v62 += 2;
                  if (!--v63)
                    goto LABEL_45;
                }
                v65 = *(unsigned __int8 *)(v64 + v97[10]);
                v58 = v65 > 5;
                v66 = (1 << v65) & 0x23;
                if (v58 || v66 == 0)
                  goto LABEL_17;
LABEL_45:
                v68 = 16 * (v51 >> 4);
                while (*v52 != v61)
                {
                  v52 += 2;
                  v68 -= 16;
                  if (!v68)
                    goto LABEL_17;
                }
              }
LABEL_18:
              v39 = v100;
              v42 = v45;
            }
            v69 = v100[7];
            v42 = v100[6];
            v70 = (_QWORD *)v100[4];
            v72 = v91;
            v71 = v92;
            v73 = v90;
            if ((uint64_t)v100[8] >= 1)
            {
              v74 = v100[6];
              swift_arrayDestroy();
              v42 = v74;
            }
            v76 = v88;
            v75 = v89;
            v77 = v87;
LABEL_53:
            ecs_stack_allocator_deallocate(v70, v42, 48 * v69);
            v39[6] = v76;
            v39[7] = v77;
            v39[8] = v72;
            v39[9] = v73;
            v39[10] = v94;
            sub_1B1F03804((char *)v75);
            ecs_stack_allocator_pop_snapshot(v95);
            v31 = v79;
            if ((v79 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v75 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v75 + 376));
            }
            swift_release();
            v30 = v71 + 1;
            v10 = v82;
          }
          while (v30 != v83);
        }
      }
      return (float32x2_t *)sub_1B19ED748(v102);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleCylinderCollider()
{
  return &type metadata for ParticleCylinderCollider;
}

uint64_t storeEnumTagSinglePayload for AnyType.WorldReferenceKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1D74DF4 + 4 * byte_1B2291D95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1D74E28 + 4 * byte_1B2291D90[v4]))();
}

uint64_t sub_1B1D74E28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D74E30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D74E38);
  return result;
}

uint64_t sub_1B1D74E44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D74E4CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1D74E50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D74E58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnyType.WorldReferenceKind()
{
  return &type metadata for AnyType.WorldReferenceKind;
}

uint64_t storeEnumTagSinglePayload for AnyType.AssetReferenceKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1D74EC0 + 4 * byte_1B2291D9F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1D74EF4 + 4 * byte_1B2291D9A[v4]))();
}

uint64_t sub_1B1D74EF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D74EFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D74F04);
  return result;
}

uint64_t sub_1B1D74F10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D74F18);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1D74F1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D74F24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnyType.AssetReferenceKind()
{
  return &type metadata for AnyType.AssetReferenceKind;
}

unint64_t *initializeBufferWithCopyOfBuffer for AnyType(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_1B1B632F0(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for AnyType(unint64_t *a1)
{
  return sub_1B1B28D2C(*a1);
}

unint64_t *assignWithCopy for AnyType(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_1B1B632F0(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_1B1B28D2C(v4);
  return a1;
}

unint64_t *assignWithTake for AnyType(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_1B1B28D2C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x78 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 120);
  v3 = ((*(_QWORD *)a1 >> 60) & 0x8F | (16 * (*(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x77)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnyType(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x77)
  {
    *(_QWORD *)result = a2 - 120;
    if (a3 >= 0x78)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x78)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
    {
      v3 = (-a2 >> 4) & 7 | (8 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B1D75080(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 60;
  if (v1 <= 7)
    return v1;
  else
    return (*a1 >> 3) + 8;
}

unint64_t *sub_1B1D7509C(unint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  if (a2 < 8)
  {
    v2 = *result & 0xFFFFFFFFFFFFFF8;
    v3 = a2 << 60;
  }
  else
  {
    v2 = 8 * (a2 - 8);
    v3 = 0x8000000000000000;
  }
  *result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for AnyType()
{
  return &type metadata for AnyType;
}

void sub_1B1D750D8(unint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  char v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int32x2_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  uint64_t v20;
  char v21;
  char v22;
  int32x2_t v23;
  uint64_t v24;
  int32x4_t *v25;
  int v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  CFX::RG::ResourceIdentifier *v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _OWORD *v66;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int32x2_t v78;
  int32x2_t v79;
  int32x2_t v80;
  uint64_t v81;
  uint64_t v82;

  v6 = a1 >> 60;
  if (a1 >> 60 != 8)
  {
LABEL_4:
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1B2286450;
    sub_1B1D76C18(v8 | 0x1000000000000000);
    v10 = v9;
    swift_release();
    if ((v10 & 1) != 0)
    {
      *(float *)v11.i32 = a3;
      v78 = v11;
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      *(_QWORD *)(a2 + 24) = v12;
      *(int32x2_t *)a2 = vdup_lane_s32(v78, 0);
      return;
    }
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1B22847D0;
    sub_1B1D76C18(v13 | 0x1000000000000000);
    v15 = v14;
    swift_release();
    if ((v15 & 1) != 0)
    {
      *(float *)v16.i32 = a3;
      v79 = v16;
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      *(_QWORD *)(a2 + 24) = v17;
      v18 = swift_allocObject();
      *(_QWORD *)a2 = v18;
      v19 = vdupq_lane_s32(v79, 0);
LABEL_8:
      v19.i32[3] = 0;
      *(int32x4_t *)(v18 + 16) = v19;
      return;
    }
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1B22847C0;
    sub_1B1D76C18(v20 | 0x1000000000000000);
    v22 = v21;
    swift_release();
    if ((v22 & 1) != 0)
    {
      *(float *)v23.i32 = a3;
      v80 = v23;
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      *(_QWORD *)(a2 + 24) = v24;
      v25 = (int32x4_t *)swift_allocObject();
      *(_QWORD *)a2 = v25;
      v25[1] = vdupq_lane_s32(v80, 0);
      return;
    }
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = 2;
    v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1B2286450;
    *(_QWORD *)(v29 + 24) = v30 | 0x1000000000000000;
    sub_1B1D76C18(v29 | 0x1000000000000000);
    v32 = v31;
    swift_release();
    if ((v32 & 1) != 0)
    {
      type metadata accessor for simd_float2x2(0);
      *(_QWORD *)(a2 + 24) = v33;
      *(_QWORD *)a2 = 1065353216;
      *(_QWORD *)(a2 + 8) = 0x3F80000000000000;
      return;
    }
    v34 = swift_allocObject();
    *(_QWORD *)(v34 + 16) = 3;
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_1B22847D0;
    *(_QWORD *)(v34 + 24) = v35 | 0x1000000000000000;
    sub_1B1D76C18(v34 | 0x1000000000000000);
    v37 = v36;
    swift_release();
    if ((v37 & 1) != 0)
    {
      type metadata accessor for simd_float3x3(0);
      *(_QWORD *)(a2 + 24) = v38;
      v39 = (_OWORD *)swift_allocObject();
      *(_QWORD *)a2 = v39;
      v39[1] = xmmword_1B2244DB0;
      v39[2] = xmmword_1B2244DD0;
      v39[3] = xmmword_1B2244D90;
      return;
    }
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = 4;
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_1B22847C0;
    *(_QWORD *)(v40 + 24) = v41 | 0x1000000000000000;
    sub_1B1D76C18(v40 | 0x1000000000000000);
    v43 = v42;
    swift_release();
    if ((v43 & 1) != 0)
    {
      type metadata accessor for simd_float4x4(0);
      *(_QWORD *)(a2 + 24) = v44;
      v45 = (_OWORD *)swift_allocObject();
      *(_QWORD *)a2 = v45;
      v45[1] = xmmword_1B2244DB0;
      v45[2] = xmmword_1B2244DD0;
      v45[3] = xmmword_1B2244D90;
      v45[4] = xmmword_1B2244E20;
      return;
    }
    if (a1 != 0x8000000000000058 || (_DWORD)v6 != 8)
    {
      v46 = swift_allocObject();
      *(_OWORD *)(v46 + 16) = xmmword_1B2292110;
      sub_1B1D76C18(v46 | 0x1000000000000000);
      v48 = v47;
      swift_release();
      if ((v48 & 1) != 0)
      {
        sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        *(_QWORD *)(a2 + 24) = v49;
        v18 = swift_allocObject();
        *(_QWORD *)a2 = v18;
        v19 = vdupq_n_s32(a3);
        goto LABEL_8;
      }
      if ((_DWORD)v6 != 8)
        goto LABEL_31;
      if (a1 == 0x8000000000000028)
      {
        type metadata accessor for simd_quatf(0);
        *(_QWORD *)(a2 + 24) = v60;
        v61 = swift_allocObject();
        *(_QWORD *)a2 = v61;
        *(_OWORD *)(v61 + 16) = xmmword_1B2244E20;
        return;
      }
      if (a1 != 0x8000000000000060)
      {
LABEL_31:
        v50 = swift_allocObject();
        *(_QWORD *)(v50 + 16) = 0x8000000000000040;
        sub_1B1D76C18(v50 | 0x2000000000000000);
        v52 = v51;
        swift_release();
        if ((v52 & 1) != 0)
        {
          sub_1B1AED5E4(0, &qword_1ED4BA5C8, MEMORY[0x1E0DEDC60], MEMORY[0x1E0DEDC78], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
          *(_QWORD *)(a2 + 24) = v53;
          *(_QWORD *)a2 = (uint64_t)a3;
          *(_QWORD *)(a2 + 8) = (uint64_t)a3;
        }
        else
        {
          v54 = swift_allocObject();
          *(_QWORD *)(v54 + 16) = 0x8000000000000050;
          sub_1B1D76C18(v54 | 0x2000000000000000);
          v56 = v55;
          v57 = (CFX::RG::ResourceIdentifier *)swift_release();
          if ((v56 & 1) != 0)
          {
            v58 = a3;
            sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
            *(_QWORD *)(a2 + 24) = v59;
            *(float *)a2 = v58;
            *(float *)(a2 + 4) = v58;
          }
          else if ((_DWORD)v6)
          {
            if ((_DWORD)v6 == 4)
            {
LABEL_40:
              *(_QWORD *)(a2 + 24) = &type metadata for Entity;
              *(_QWORD *)a2 = 0xFFFFFFFFLL;
            }
            else if ((_DWORD)v6 == 8)
            {
              *((_QWORD *)&v62 + 1) = a1;
              *(_QWORD *)&v62 = a1 + 0x7FFFFFFFFFFFFF98;
              switch((unint64_t)(v62 >> 3))
              {
                case 0uLL:
                  *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEA968];
                  *(_QWORD *)a2 = 0;
                  *(_QWORD *)(a2 + 8) = 0xE000000000000000;
                  break;
                case 1uLL:
                  sub_1B1AE11F4();
                  v66 = (_OWORD *)swift_allocObject();
                  __asm { FMOV            V1.4S, #1.0 }
                  v66[1] = xmmword_1B226CD10;
                  v66[2] = _Q1;
                  v66[3] = xmmword_1B2244E20;
                  *(_QWORD *)(a2 + 24) = &type metadata for ColorRamp;
                  *(_QWORD *)a2 = v66;
                  *(_QWORD *)(a2 + 8) = &unk_1E63C3890;
                  *(_BYTE *)(a2 + 16) = 1;
                  break;
                case 2uLL:
                case 4uLL:
                  goto LABEL_40;
                case 3uLL:
                  v72 = sub_1B21451EC(MEMORY[0x1E0DEE9D8]);
                  v74 = v73;
                  sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
                  *(_QWORD *)(a2 + 24) = v75;
                  v76 = swift_allocObject();
                  *(_QWORD *)a2 = v76;
                  *(_QWORD *)(v76 + 16) = v72;
                  *(_QWORD *)(v76 + 24) = v74;
                  *(_QWORD *)(v76 + 32) = 0;
                  *(_BYTE *)(v76 + 40) = 1;
                  break;
                case 9uLL:
                  *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEE190];
                  *(_QWORD *)a2 = 0;
                  break;
                case 0xAuLL:
                  v77 = RGResourceIdentifierFinalColor(v57);
                  *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEE190];
                  *(_QWORD *)a2 = v77;
                  break;
                default:
                  goto LABEL_47;
              }
            }
            else
            {
LABEL_47:
              sub_1B2229430();
              sub_1B2228890();
              sub_1B22295EC();
              sub_1B2229688();
              __break(1u);
            }
          }
          else
          {
            v63 = *(_QWORD *)(a1 + 16);
            sub_1B1B632F0(v63);
            sub_1B1D750D8(&v81, v63, a3);
            v64 = v82;
            v65 = sub_1B19FA070(&v81, v82);
            sub_1B1D77FD4((uint64_t)v65, v64, (uint64_t *)a2);
            sub_1B1B28D2C(v63);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v81);
          }
        }
        return;
      }
    }
    *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEB070];
    *(double *)a2 = a3;
    return;
  }
  *((_QWORD *)&v7 + 1) = a1;
  *(_QWORD *)&v7 = a1 + 0x7FFFFFFFFFFFFFF0;
  switch((unint64_t)(v7 >> 3))
  {
    case 0uLL:
      *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEAFA0];
      *(_BYTE *)a2 = a3 != 0.0;
      return;
    case 4uLL:
      v26 = (int)a3;
      v27 = MEMORY[0x1E0DEDBC8];
      goto LABEL_13;
    case 5uLL:
      v26 = a3;
      v27 = MEMORY[0x1E0DEE0F8];
LABEL_13:
      *(_QWORD *)(a2 + 24) = v27;
      *(_DWORD *)a2 = v26;
      break;
    case 6uLL:
      *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEDC60];
      *(_QWORD *)a2 = (uint64_t)a3;
      break;
    case 8uLL:
      v28 = a3;
      *(_QWORD *)(a2 + 24) = MEMORY[0x1E0DEB188];
      *(float *)a2 = v28;
      break;
    default:
      goto LABEL_4;
  }
}

uint64_t sub_1B1D759B8(char a1, unint64_t a2)
{
  unint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  __int128 v49;

  v3 = a2 >> 60;
  if ((a1 & 1) != 0)
  {
    if (a2 >> 60 == 8)
    {
      switch(a2)
      {
        case 0x8000000000000018:
          return 0x7620646165726874;
        case 0x8000000000000048:
          return 1718378856;
        case 0x8000000000000080:
          goto LABEL_55;
      }
    }
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1B2292120;
    sub_1B1D76C18(v12 | 0x1000000000000000);
    v14 = v13;
    swift_release();
    if ((v14 & 1) != 0)
    {
      return 0x32666C6168;
    }
    else
    {
      v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1B2292130;
      sub_1B1D76C18(v15 | 0x1000000000000000);
      v17 = v16;
      swift_release();
      if ((v17 & 1) != 0)
      {
        return 0x33666C6168;
      }
      else
      {
        v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_1B2292140;
        sub_1B1D76C18(v18 | 0x1000000000000000);
        v20 = v19;
        swift_release();
        if ((v20 & 1) != 0)
        {
          return 0x34666C6168;
        }
        else if ((_DWORD)v3 == 6)
        {
          v5 = 0x706D61735F786676;
          v34 = *(unsigned __int8 *)(a2 + 16);
          if (v34 && v34 != 2 && v34 != 1)
          {
            while (1)
            {
LABEL_56:
              sub_1B2229430();
              sub_1B2228890();
              sub_1B22295EC();
LABEL_55:
              sub_1B2229688();
              __break(1u);
            }
          }
        }
        else if ((_DWORD)v3 == 3)
        {
          v24 = *(_QWORD *)(a2 + 24);
          sub_1B1B632F0(v24);
          sub_1B2229430();
          swift_bridgeObjectRelease();
          v25 = 1;
LABEL_26:
          sub_1B1D759B8(v25, v24);
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B1B28D2C(v24);
          return 0xD000000000000011;
        }
        else
        {
          return sub_1B1D759B8(0, a2);
        }
      }
    }
  }
  else if (a2 >> 60 == 8)
  {
    *((_QWORD *)&v4 + 1) = a2;
    *(_QWORD *)&v4 = a2 + 0x7FFFFFFFFFFFFFF0;
    v5 = 0x2A64696F76;
    switch((unint64_t)(v4 >> 3))
    {
      case 0uLL:
        v5 = 1819242338;
        break;
      case 1uLL:
        return v5;
      case 4uLL:
        v5 = 0x745F3233746E69;
        break;
      case 5uLL:
        v5 = 0x745F3233746E6975;
        break;
      case 6uLL:
        v5 = 0x745F3436746E69;
        break;
      case 8uLL:
        v5 = 0x74616F6C66;
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1B2286450;
    sub_1B1D76C18(v6 | 0x1000000000000000);
    v8 = v7;
    swift_release();
    if ((v8 & 1) != 0)
    {
      return 0x3274616F6C66;
    }
    else
    {
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_1B22847D0;
      sub_1B1D76C18(v9 | 0x1000000000000000);
      v11 = v10;
      swift_release();
      if ((v11 & 1) != 0)
      {
        return 0x3374616F6C66;
      }
      else
      {
        v5 = 0x3474616F6C66;
        v21 = swift_allocObject();
        *(_OWORD *)(v21 + 16) = xmmword_1B22847C0;
        sub_1B1D76C18(v21 | 0x1000000000000000);
        v23 = v22;
        swift_release();
        if ((v23 & 1) == 0)
        {
          v26 = swift_allocObject();
          *(_QWORD *)(v26 + 16) = 2;
          v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = xmmword_1B2286450;
          *(_QWORD *)(v26 + 24) = v27 | 0x1000000000000000;
          sub_1B1D76C18(v26 | 0x1000000000000000);
          v29 = v28;
          swift_release();
          if ((v29 & 1) != 0)
          {
            return 0x32783274616F6C66;
          }
          else
          {
            v30 = swift_allocObject();
            *(_QWORD *)(v30 + 16) = 3;
            v31 = swift_allocObject();
            *(_OWORD *)(v31 + 16) = xmmword_1B22847D0;
            *(_QWORD *)(v30 + 24) = v31 | 0x1000000000000000;
            sub_1B1D76C18(v30 | 0x1000000000000000);
            v33 = v32;
            swift_release();
            if ((v33 & 1) != 0)
            {
              return 0x33783374616F6C66;
            }
            else
            {
              v35 = swift_allocObject();
              *(_QWORD *)(v35 + 16) = 4;
              v36 = swift_allocObject();
              *(_OWORD *)(v36 + 16) = xmmword_1B22847C0;
              *(_QWORD *)(v35 + 24) = v36 | 0x1000000000000000;
              sub_1B1D76C18(v35 | 0x1000000000000000);
              v38 = v37;
              swift_release();
              if ((v38 & 1) != 0)
              {
                return 0x34783474616F6C66;
              }
              else
              {
                v40 = swift_allocObject();
                *(_OWORD *)(v40 + 16) = xmmword_1B2292110;
                sub_1B1D76C18(v40 | 0x1000000000000000);
                v42 = v41;
                swift_release();
                if ((v42 & 1) != 0)
                {
                  return 0x33746E6975;
                }
                else
                {
                  v43 = swift_allocObject();
                  *(_QWORD *)(v43 + 16) = 0x8000000000000040;
                  sub_1B1D76C18(v43 | 0x2000000000000000);
                  v45 = v44;
                  swift_release();
                  if ((v45 & 1) != 0)
                  {
                    return 0x5F746E695F786676;
                  }
                  else
                  {
                    v46 = swift_allocObject();
                    *(_QWORD *)(v46 + 16) = 0x8000000000000050;
                    sub_1B1D76C18(v46 | 0x2000000000000000);
                    v48 = v47;
                    swift_release();
                    if ((v48 & 1) == 0)
                    {
                      v5 = 0x2A64696F76;
                      switch((int)v3)
                      {
                        case 0:
                          goto LABEL_55;
                        case 3:
                          v24 = *(_QWORD *)(a2 + 24);
                          sub_1B1B632F0(v24);
                          sub_1B2229430();
                          swift_bridgeObjectRelease();
                          v25 = 0;
                          goto LABEL_26;
                        case 6:
                          return v5;
                        case 8:
                          *((_QWORD *)&v49 + 1) = a2;
                          *(_QWORD *)&v49 = a2 + 0x7FFFFFFFFFFFFFD8;
                          v5 = 0x3474616F6C66;
                          switch((unint64_t)(v49 >> 3))
                          {
                            case 0uLL:
                              return v5;
                            case 6uLL:
                              goto LABEL_55;
                            case 7uLL:
                              sub_1B2229430();
                              sub_1B22295EC();
                              sub_1B2228890();
                              goto LABEL_55;
                            case 9uLL:
                            case 0xAuLL:
                            case 0xBuLL:
                            case 0xCuLL:
                            case 0xDuLL:
                              return 0x2A64696F76;
                            case 0x13uLL:
                              return 0xD000000000000013;
                            default:
                              goto LABEL_56;
                          }
                        default:
                          goto LABEL_56;
                      }
                    }
                    return 0x616F6C665F786676;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v5;
}

uint64_t sub_1B1D763B0(unint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = a1 >> 60;
  if (a1 >> 60 == 8)
  {
    *((_QWORD *)&v3 + 1) = a1;
    *(_QWORD *)&v3 = a1 + 0x7FFFFFFFFFFFFFF0;
    result = 0x7265746E696F70;
    switch((unint64_t)(v3 >> 3))
    {
      case 0uLL:
        result = 1819242338;
        break;
      case 1uLL:
        return result;
      case 4uLL:
        result = 0x3233746E69;
        break;
      case 5uLL:
        result = 0x3233746E6975;
        break;
      case 6uLL:
        result = 0x3436746E69;
        break;
      case 7uLL:
        result = 1718378856;
        break;
      case 8uLL:
        result = 0x74616F6C66;
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1B2286450;
    sub_1B1D76C18(v5 | 0x1000000000000000);
    v7 = v6;
    swift_release();
    if ((v7 & 1) != 0)
    {
      return 0x3274616F6C66;
    }
    else
    {
      v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1B22847D0;
      sub_1B1D76C18(v8 | 0x1000000000000000);
      v10 = v9;
      swift_release();
      if ((v10 & 1) != 0)
      {
        return 0x3374616F6C66;
      }
      else
      {
        v11 = swift_allocObject();
        *(_OWORD *)(v11 + 16) = xmmword_1B22847C0;
        sub_1B1D76C18(v11 | 0x1000000000000000);
        v13 = v12;
        swift_release();
        if ((v13 & 1) != 0)
        {
          return 0x3474616F6C66;
        }
        else
        {
          v14 = swift_allocObject();
          *(_QWORD *)(v14 + 16) = 2;
          v15 = swift_allocObject();
          *(_OWORD *)(v15 + 16) = xmmword_1B2286450;
          *(_QWORD *)(v14 + 24) = v15 | 0x1000000000000000;
          sub_1B1D76C18(v14 | 0x1000000000000000);
          v17 = v16;
          swift_release();
          if ((v17 & 1) != 0)
          {
            return 0x32783274616F6C66;
          }
          else
          {
            v18 = swift_allocObject();
            *(_QWORD *)(v18 + 16) = 3;
            v19 = swift_allocObject();
            *(_OWORD *)(v19 + 16) = xmmword_1B22847D0;
            *(_QWORD *)(v18 + 24) = v19 | 0x1000000000000000;
            sub_1B1D76C18(v18 | 0x1000000000000000);
            v21 = v20;
            swift_release();
            if ((v21 & 1) != 0)
            {
              return 0x33783374616F6C66;
            }
            else
            {
              v22 = swift_allocObject();
              *(_QWORD *)(v22 + 16) = 4;
              v23 = swift_allocObject();
              *(_OWORD *)(v23 + 16) = xmmword_1B22847C0;
              *(_QWORD *)(v22 + 24) = v23 | 0x1000000000000000;
              sub_1B1D76C18(v22 | 0x1000000000000000);
              v25 = v24;
              swift_release();
              if ((v25 & 1) != 0)
              {
                return 0x34783474616F6C66;
              }
              else if (a1 == 0x8000000000000058 && (_DWORD)v2 == 8)
              {
                return 0x656C62756F64;
              }
              else
              {
                v26 = swift_allocObject();
                *(_OWORD *)(v26 + 16) = xmmword_1B2292110;
                sub_1B1D76C18(v26 | 0x1000000000000000);
                v28 = v27;
                swift_release();
                if ((v28 & 1) != 0)
                {
                  return 0x33746E6975;
                }
                else if (a1 == 0x8000000000000028 && (_DWORD)v2 == 8)
                {
                  return 0x696E726574617571;
                }
                else
                {
                  v29 = swift_allocObject();
                  *(_QWORD *)(v29 + 16) = 0x8000000000000040;
                  sub_1B1D76C18(v29 | 0x2000000000000000);
                  v31 = v30;
                  swift_release();
                  if ((v31 & 1) != 0)
                  {
                    return 0x65676E6152746E69;
                  }
                  else
                  {
                    v32 = swift_allocObject();
                    *(_QWORD *)(v32 + 16) = 0x8000000000000050;
                    sub_1B1D76C18(v32 | 0x2000000000000000);
                    v34 = v33;
                    swift_release();
                    if ((v34 & 1) != 0)
                    {
                      return 0x6E615274616F6C66;
                    }
                    else
                    {
                      result = 0x72656C706D6173;
                      switch((int)v2)
                      {
                        case 0:
                          v35 = *(_QWORD *)(a1 + 16);
                          sub_1B1B632F0(v35);
                          v38 = sub_1B1D763B0(v35);
                          goto LABEL_37;
                        case 1:
                        case 2:
                          goto LABEL_62;
                        case 3:
                          v35 = *(_QWORD *)(a1 + 24);
                          sub_1B1B632F0(v35);
                          v38 = sub_1B1D763B0(v35);
                          sub_1B2228890();
                          sub_1B2229A0C();
                          sub_1B2228890();
                          swift_bridgeObjectRelease();
LABEL_37:
                          sub_1B2228890();
                          sub_1B1B28D2C(v35);
                          result = v38;
                          break;
                        case 4:
                          __asm { BR              X10 }
                          return result;
                        case 5:
                          if (*(_BYTE *)(a1 + 16))
                            result = 0x6174736554746968;
                          else
                            result = 0x56664F746E696F70;
                          break;
                        case 6:
                          return result;
                        case 7:
                          v36 = *(_QWORD *)(a1 + 24);
                          swift_bridgeObjectRetain();
                          result = v36;
                          break;
                        case 8:
                          result = 63;
                          switch(__ROR8__(a1, 3) ^ 0x1000000000000000)
                          {
                            case 0:
                              return 1701736302;
                            case 1:
                              return 2003790950;
                            case 4:
                              return 1836412517;
                            case 0xCLL:
                              return result;
                            case 0xDLL:
                              return 0x676E69727473;
                            case 0xELL:
                              return 0x6D6152726F6C6F63;
                            case 0xFLL:
                              return 0xD000000000000010;
                            case 0x10:
                              return 0x6576727563;
                            case 0x11:
                              v37 = 0x546576727563;
                              goto LABEL_53;
                            case 0x12:
                              return 0x6574617473;
                            case 0x13:
                            case 0x17:
                              return 0xD000000000000011;
                            case 0x14:
                              v37 = 0x546C6174656DLL;
LABEL_53:
                              result = v37 & 0xFFFFFFFFFFFFLL | 0x7865000000000000;
                              break;
                            case 0x15:
                              result = 0x6675426C6174656DLL;
                              break;
                            case 0x16:
                              result = 0x756F724765646F6ELL;
                              break;
                            case 0x18:
                              result = 0xD000000000000017;
                              break;
                            default:
                              goto LABEL_61;
                          }
                          break;
                        default:
LABEL_61:
                          sub_1B2229D18();
                          __break(1u);
LABEL_62:
                          result = sub_1B2229688();
                          __break(1u);
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B1D76C18(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1D76C44(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v4;

  if (a2 >> 60)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  sub_1B1B632F0(v2);
  sub_1B1B632F0(v3);
  v4 = ((uint64_t (*)(unint64_t, unint64_t))sub_1B1D76C18)(v2, v3);
  sub_1B1B28D2C(v3);
  sub_1B1B28D2C(v2);
  return v4 & 1;
}

unint64_t sub_1B1D76F30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v2 = 0x8000000000000018;
  if (!swift_dynamicCastMetatype())
  {
    if (swift_dynamicCastMetatype())
      return 0x8000000000000010;
    if (swift_dynamicCastMetatype())
      return 0x8000000000000040;
    if (swift_dynamicCastMetatype())
      return 0x8000000000000030;
    if (swift_dynamicCastMetatype())
      return 0x8000000000000040;
    if (swift_dynamicCastMetatype())
      return 0x8000000000000038;
    if (swift_dynamicCastMetatype())
      return 0x8000000000000058;
    if (swift_dynamicCastMetatype())
      return 0x8000000000000050;
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    if (swift_dynamicCastMetatype())
    {
      v4 = swift_allocObject();
      v5 = xmmword_1B2286450;
LABEL_22:
      *(_OWORD *)(v4 + 16) = v5;
      return v4 | 0x1000000000000000;
    }
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    if (swift_dynamicCastMetatype())
    {
      v4 = swift_allocObject();
      v5 = xmmword_1B22847D0;
      goto LABEL_22;
    }
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    if (swift_dynamicCastMetatype())
    {
      v4 = swift_allocObject();
      v5 = xmmword_1B22847C0;
      goto LABEL_22;
    }
    type metadata accessor for simd_float2x2(0);
    if (swift_dynamicCastMetatype())
    {
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = 2;
      v7 = swift_allocObject();
      v8 = xmmword_1B2286450;
LABEL_29:
      *(_OWORD *)(v7 + 16) = v8;
      *(_QWORD *)(v6 + 24) = v7 | 0x1000000000000000;
      return v6 | 0x1000000000000000;
    }
    type metadata accessor for simd_float3x3(0);
    if (swift_dynamicCastMetatype())
    {
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = 3;
      v7 = swift_allocObject();
      v8 = xmmword_1B22847D0;
      goto LABEL_29;
    }
    type metadata accessor for simd_float4x4(0);
    if (swift_dynamicCastMetatype())
    {
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = 4;
      v7 = swift_allocObject();
      v8 = xmmword_1B22847C0;
      goto LABEL_29;
    }
    type metadata accessor for simd_quatf(0);
    if (swift_dynamicCastMetatype())
      return 0x8000000000000028;
    sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5B8, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    if (swift_dynamicCastMetatype()
      || (sub_1B1AED5E4(0, &qword_1ED4BA5C8, MEMORY[0x1E0DEDC60], MEMORY[0x1E0DEDC78], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]), swift_dynamicCastMetatype()))
    {
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = 0x8000000000000040;
      return v9 | 0x2000000000000000;
    }
    sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    if (swift_dynamicCastMetatype())
    {
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = 0x8000000000000050;
      return v10 | 0x2000000000000000;
    }
    sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    if (swift_dynamicCastMetatype())
    {
      v4 = swift_allocObject();
      v5 = xmmword_1B2292110;
      goto LABEL_22;
    }
    if (swift_dynamicCastMetatype())
      return 0x8000000000000070;
    sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
    if (swift_dynamicCastMetatype())
      return 0x8000000000000080;
    type metadata accessor for TextureDescriptor(0);
    if (swift_dynamicCastMetatype())
      return 0x8000000000000098;
    v11 = swift_conformsToProtocol2();
    if (v11)
      v12 = v11;
    else
      v12 = 0;
    if (v11)
      v13 = a1;
    else
      v13 = 0;
    if (v13)
    {
      v14 = (*(uint64_t (**)(void))(v12 + 8))();
      v15 = sub_1B1D76F30(v14);
      if ((~v15 & 0xF000000000000007) != 0)
      {
        v17 = v15;
        v2 = swift_allocObject();
        *(_QWORD *)(v2 + 16) = v17;
        return v2;
      }
      return 0xF000000000000007;
    }
    type metadata accessor for __vfx_sampler1d(0);
    if (swift_dynamicCastMetatype())
    {
      v16 = swift_allocObject();
      *(_BYTE *)(v16 + 16) = 0;
      return v16 | 0x6000000000000000;
    }
    type metadata accessor for __vfx_sampler2d(0);
    if (swift_dynamicCastMetatype())
    {
      v18 = swift_allocObject();
      v19 = 1;
    }
    else
    {
      type metadata accessor for __vfx_sampler3d(0);
      if (!swift_dynamicCastMetatype())
      {
        if (swift_dynamicCastMetatype())
          return 0x8000000000000068;
        if (swift_conformsToProtocol2())
          v20 = a1;
        else
          v20 = 0;
        if (v20)
          return 0x8000000000000020;
        if (swift_dynamicCastMetatype())
          return v2;
        sub_1B1D78468();
        if (swift_dynamicCastMetatype())
          return 0x8000000000000090;
        return 0xF000000000000007;
      }
      v18 = swift_allocObject();
      v19 = 2;
    }
    *(_BYTE *)(v18 + 16) = v19;
    return v18 | 0x6000000000000000;
  }
  return v2;
}

uint64_t sub_1B1D77578(uint64_t a1, unint64_t a2)
{
  char v4;
  char v5;
  unint64_t v6;
  char v7;

  sub_1B1D76C18(a2);
  if ((v4 & 1) != 0)
  {
    v5 = 1;
  }
  else if (a2 >> 60)
  {
    v5 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    sub_1B1B632F0(v6);
    sub_1B1D76C18(a1);
    if ((v7 & 1) != 0)
      v5 = 1;
    else
      v5 = sub_1B1D77578(a1, v6);
    sub_1B1B28D2C(v6);
  }
  return v5 & 1;
}

uint64_t sub_1B1D77600()
{
  sub_1B1D78724();
  return sub_1B2228A7C();
}

uint64_t sub_1B1D7765C()
{
  sub_1B1D78724();
  return sub_1B2228A04();
}

uint64_t sub_1B1D776A8()
{
  sub_1B1D78768();
  return sub_1B2228A7C();
}

uint64_t sub_1B1D77704()
{
  sub_1B1D78768();
  return sub_1B2228A04();
}

uint64_t sub_1B1D77750(char a1, unint64_t a2)
{
  int v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = a1 & 1;
  if (a2 >> 60 == 1 && (*(_QWORD *)(a2 + 24) >> 60 != 1 ? (v4 = v3 == 0) : (v4 = 0), v4))
  {
    sub_1B1D759B8(0, a2);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    return 0x5F656B616DLL;
  }
  else
  {
    v5 = 0xD000000000000012;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = 0x8000000000000050;
    sub_1B1D76C18(v6 | 0x2000000000000000);
    v8 = v7;
    swift_release();
    if ((v8 & 1) != 0)
    {
      return 0xD000000000000014;
    }
    else
    {
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = 0x8000000000000040;
      sub_1B1D76C18(v9 | 0x2000000000000000);
      v11 = v10;
      swift_release();
      if ((v11 & 1) == 0)
        return sub_1B1D759B8(v3, a2);
    }
  }
  return v5;
}

unint64_t sub_1B1D778A0(uint64_t a1)
{
  unint64_t result;

  result = sub_1B1D76F30(a1);
  if ((~result & 0xF000000000000007) == 0)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

void sub_1B1D77964(unint64_t a1)
{
  unint64_t v2;
  __int128 v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t *v16;
  unint64_t (*v17)();
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  char v44;
  unint64_t *v45;
  uint64_t v46;
  _UNKNOWN **v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v52;

  v2 = a1 >> 60;
  if (a1 >> 60 == 8)
  {
    *((_QWORD *)&v3 + 1) = a1;
    *(_QWORD *)&v3 = a1 + 0x7FFFFFFFFFFFFFF0;
    switch((unint64_t)(v3 >> 3))
    {
      case 0uLL:
      case 1uLL:
      case 4uLL:
      case 5uLL:
      case 6uLL:
      case 7uLL:
        return;
      default:
        goto LABEL_3;
    }
    return;
  }
LABEL_3:
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B2292120;
  sub_1B1D76C18(v4 | 0x1000000000000000);
  v6 = v5;
  swift_release();
  if ((v6 & 1) != 0)
    return;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B2292130;
  sub_1B1D76C18(v7 | 0x1000000000000000);
  v9 = v8;
  swift_release();
  if ((v9 & 1) != 0)
    return;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B2292140;
  sub_1B1D76C18(v10 | 0x1000000000000000);
  v12 = v11;
  swift_release();
  if ((v12 & 1) != 0 || a1 == 0x8000000000000050 && (_DWORD)v2 == 8)
    return;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B2286450;
  sub_1B1D76C18(v13 | 0x1000000000000000);
  v15 = v14;
  swift_release();
  if ((v15 & 1) != 0)
  {
    v16 = &qword_1ED4BB080;
    v17 = sub_1B19F8DCC;
    v18 = MEMORY[0x1E0DEB188];
    v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
LABEL_15:
    sub_1B19F8E54(0, v16, (uint64_t (*)(void))v17, v18, v19);
    return;
  }
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_1B22847D0;
  sub_1B1D76C18(v20 | 0x1000000000000000);
  v22 = v21;
  swift_release();
  if ((v22 & 1) != 0)
  {
    v16 = (unint64_t *)&qword_1ED4BB0A0;
    v17 = sub_1B19F8DCC;
    v18 = MEMORY[0x1E0DEB188];
LABEL_12:
    v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    goto LABEL_15;
  }
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1B22847C0;
  sub_1B1D76C18(v23 | 0x1000000000000000);
  v25 = v24;
  swift_release();
  if ((v25 & 1) != 0)
  {
    v16 = (unint64_t *)&qword_1ED4BB0E0;
    v17 = sub_1B19F8DCC;
    v18 = MEMORY[0x1E0DEB188];
    v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    goto LABEL_15;
  }
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = 2;
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1B2286450;
  *(_QWORD *)(v26 + 24) = v27 | 0x1000000000000000;
  sub_1B1D76C18(v26 | 0x1000000000000000);
  v29 = v28;
  swift_release();
  if ((v29 & 1) != 0)
  {
    type metadata accessor for simd_float2x2(0);
    return;
  }
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = 3;
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v30 + 24) = v31 | 0x1000000000000000;
  sub_1B1D76C18(v30 | 0x1000000000000000);
  v33 = v32;
  swift_release();
  if ((v33 & 1) != 0)
  {
    type metadata accessor for simd_float3x3(0);
    return;
  }
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = 4;
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v34 + 24) = v35 | 0x1000000000000000;
  sub_1B1D76C18(v34 | 0x1000000000000000);
  v37 = v36;
  swift_release();
  if ((v37 & 1) != 0)
  {
    type metadata accessor for simd_float4x4(0);
    return;
  }
  if (a1 != 0x8000000000000058 || (_DWORD)v2 != 8)
  {
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1B2292110;
    sub_1B1D76C18(v38 | 0x1000000000000000);
    v40 = v39;
    swift_release();
    if ((v40 & 1) != 0)
    {
      v16 = (unint64_t *)&unk_1ED4BB0B0;
      v17 = sub_1B1AF0D08;
      v18 = MEMORY[0x1E0DEE0F8];
      goto LABEL_12;
    }
    if ((_DWORD)v2 == 8)
    {
      *((_QWORD *)&v41 + 1) = a1;
      *(_QWORD *)&v41 = a1 + 0x7FFFFFFFFFFFFFD8;
      switch((unint64_t)(v41 >> 3))
      {
        case 0uLL:
          type metadata accessor for simd_quatf(0);
          break;
        case 7uLL:
        case 8uLL:
        case 9uLL:
        case 0xAuLL:
        case 0xCuLL:
          return;
        case 0xBuLL:
          v45 = (unint64_t *)&qword_1ED4B9F38;
          v46 = MEMORY[0x1E0DEB188];
          v47 = &off_1E63C66D8;
          v51 = type metadata accessor for Curve;
          goto LABEL_35;
        default:
          goto LABEL_30;
      }
    }
    else
    {
LABEL_30:
      v42 = swift_allocObject();
      *(_QWORD *)(v42 + 16) = 0x8000000000000040;
      sub_1B1D76C18(v42 | 0x2000000000000000);
      v44 = v43;
      swift_release();
      if ((v44 & 1) != 0)
      {
        v45 = &qword_1ED4BA5C8;
        v46 = MEMORY[0x1E0DEDC60];
        v47 = (_UNKNOWN **)MEMORY[0x1E0DEDC78];
      }
      else
      {
        v48 = swift_allocObject();
        *(_QWORD *)(v48 + 16) = 0x8000000000000050;
        sub_1B1D76C18(v48 | 0x2000000000000000);
        v50 = v49;
        swift_release();
        if ((v50 & 1) == 0)
        {
          if ((_DWORD)v2 == 8)
          {
            *((_QWORD *)&v52 + 1) = a1;
            *(_QWORD *)&v52 = a1 + 0x7FFFFFFFFFFFFF70;
            switch((unint64_t)(v52 >> 3))
            {
              case 0uLL:
                sub_1B1D787AC();
                break;
              case 1uLL:
                type metadata accessor for TextureDescriptor(0);
                break;
              case 6uLL:
                type metadata accessor for pbr_lighting_parameters(0);
                break;
              default:
                return;
            }
          }
          return;
        }
        v45 = (unint64_t *)&qword_1ED4BA5A8;
        v46 = MEMORY[0x1E0DEB188];
        v47 = (_UNKNOWN **)MEMORY[0x1E0DEB1B0];
      }
      v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEB848];
LABEL_35:
      sub_1B1AED5E4(0, v45, v46, (uint64_t)v47, (uint64_t (*)(_QWORD, uint64_t, uint64_t))v51);
    }
  }
}

uint64_t sub_1B1D77FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;

  a3[3] = sub_1B2229124();
  v6 = sub_1B1A137F4(a3);
  v7 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v6, a1, a2);
  return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v6, 0, 1, a2);
}

void sub_1B1D78044(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

unint64_t sub_1B1D78074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  sub_1B222A078();
  sub_1B1B632F0(v3);
  ((void (*)(uint64_t, unint64_t))sub_1B1D78044)(v2, v3);
  return sub_1B1B28D2C(v3);
}

uint64_t sub_1B1D780F0()
{
  sub_1B222A078();
  return sub_1B222A084();
}

uint64_t sub_1B1D7824C()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D78044((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

void sub_1B1D78290(uint64_t a1)
{
  uint64_t *v1;

  sub_1B1D78044(a1, *v1);
}

uint64_t sub_1B1D78298()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D78044((uint64_t)v3, v1);
  return sub_1B222A0C0();
}

void sub_1B1D782D8(uint64_t *a1)
{
  sub_1B1D76C18(*a1);
}

unint64_t sub_1B1D782E8()
{
  unint64_t result;

  result = qword_1EEF5E2B0;
  if (!qword_1EEF5E2B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291EC0, &type metadata for AnyType);
    atomic_store(result, (unint64_t *)&qword_1EEF5E2B0);
  }
  return result;
}

unint64_t sub_1B1D78330()
{
  unint64_t result;

  result = qword_1EEF5E2B8;
  if (!qword_1EEF5E2B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291FF0, &type metadata for AnyType.AssetReferenceKind);
    atomic_store(result, (unint64_t *)&qword_1EEF5E2B8);
  }
  return result;
}

unint64_t sub_1B1D78378()
{
  unint64_t result;

  result = qword_1EEF5E2C0;
  if (!qword_1EEF5E2C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22920E0, &type metadata for AnyType.WorldReferenceKind);
    atomic_store(result, (unint64_t *)&qword_1EEF5E2C0);
  }
  return result;
}

uint64_t sub_1B1D783BC()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B1D783E0()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1D78404()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1D78438()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D78448()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D78458()
{
  return swift_deallocObject();
}

unint64_t sub_1B1D78468()
{
  unint64_t result;

  result = qword_1EEF5E2C8;
  if (!qword_1EEF5E2C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5E2C8);
  }
  return result;
}

uint64_t sub_1B1D784A4()
{
  return swift_deallocObject();
}

uint64_t sub_1B1D784B4()
{
  char v0;
  char v2;
  char v3;

  sub_1B1A2044C();
  sub_1B1A20490();
  if ((sub_1B222862C() & 1) != 0)
  {
    v0 = sub_1B222862C();
    swift_bridgeObjectRelease();
    if ((v0 & 1) != 0)
      return 4;
    else
      return 0;
  }
  else if ((sub_1B222862C() & 1) != 0)
  {
    v2 = sub_1B222862C();
    swift_bridgeObjectRelease();
    if ((v2 & 1) != 0)
      return 5;
    else
      return 1;
  }
  else if ((sub_1B222862C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if ((sub_1B222862C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v3 = sub_1B222862C();
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_1B1D78724()
{
  unint64_t result;

  result = qword_1EEF5E2D0;
  if (!qword_1EEF5E2D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22920A8, &type metadata for AnyType.WorldReferenceKind);
    atomic_store(result, (unint64_t *)&qword_1EEF5E2D0);
  }
  return result;
}

unint64_t sub_1B1D78768()
{
  unint64_t result;

  result = qword_1EEF5E2D8;
  if (!qword_1EEF5E2D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2291FB8, &type metadata for AnyType.AssetReferenceKind);
    atomic_store(result, (unint64_t *)&qword_1EEF5E2D8);
  }
  return result;
}

void sub_1B1D787AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5E2E0)
  {
    sub_1B1D78468();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5E2E0);
  }
}

uint64_t sub_1B1D78804(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  __int128 v13;
  char v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5E318, (uint64_t (*)(void))sub_1B1D86F74, (uint64_t)&type metadata for ParticleFlockingAlignOrientation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D86F74();
  sub_1B222A180();
  LOBYTE(v13) = *(_BYTE *)v3;
  v14 = 0;
  sub_1B1A713B0();
  sub_1B2229958();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_1B2229934();
    LOBYTE(v13) = *(_BYTE *)(v3 + 8);
    v14 = 2;
    sub_1B2229958();
    v13 = *(_OWORD *)(v3 + 16);
    v14 = 3;
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v11, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
    LOBYTE(v13) = 4;
    sub_1B222991C();
    LOBYTE(v13) = 5;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B1D78A68(char *a1)
{
  sub_1B1F98A18(*a1);
}

void sub_1B1D78A74()
{
  char *v0;

  sub_1B1FB31F8(*v0);
}

void sub_1B1D78A7C()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1D78ABC()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1D78B58(uint64_t a1)
{
  char *v1;

  sub_1B1DB4C10(a1, *v1);
}

uint64_t sub_1B1D78B60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A94();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D78B94()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1D78BC8 + 4 * byte_1B2292156[*v0]))();
}

void sub_1B1D78BC8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "maxRotVelDir");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1B1D78C60()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D78C94 + 4 * byte_1B229215C[*v0]))(0x6F69746365726964, 0xE90000000000006ELL);
}

uint64_t sub_1B1D78C94()
{
  return 0x6556746F5278616DLL;
}

uint64_t sub_1B1D78D1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A94();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D78D48()
{
  sub_1B1D86F74();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D78D70()
{
  sub_1B1D86F74();
  return sub_1B222A1E0();
}

double sub_1B1D78D98@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1B1D80EF8(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B1D78DD8(_QWORD *a1)
{
  return sub_1B1D78804(a1);
}

uint64_t sub_1B1D78DEC()
{
  return type metadata accessor for ParticleFlockingAlignOrientationSystem();
}

double sub_1B1D78E08@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 1124532224;
  *(_BYTE *)(a1 + 8) = 1;
  result = 0.0078125;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DD0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 1124532224;
  return result;
}

void sub_1B1D78E34(_QWORD *a1, char a2, float a3, int32x4_t a4, float a5, int32x4_t a6, int32x4_t a7)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x2_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  __int8 v61;
  int8x16_t v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  int32x2_t v66;
  int32x2_t v67;
  float32x4_t v68;
  int32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  int32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x4_t v90;
  int32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x2_t v96;
  int32x2_t v97;
  float v98;
  float32x4_t v99;
  float v100;
  float32x4_t v101;
  float v102;
  float v103;
  __float2 v104;
  float32x4_t v105;
  int32x4_t v106;
  int8x16_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;
  float32x2_t v112;
  float32x2_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float v116;
  float v117;
  float v118;
  __float2 v119;
  float32x4_t v120;
  int32x4_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  __int32 v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  __int32 v151;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;

  v11 = (uint64_t *)a1[11];
  v12 = a1[12];
  v13 = a1[13];
  v14 = a1[2];
  v15 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v11, v12, v13, v14);
  v16 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v11, v12, v13, v14);
  v22 = *(float32x2_t *)a6.i8;
  v23 = a1[6];
  v24 = a1[7];
  v25 = v24 - v23;
  if (v24 != v23)
  {
    v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a4.i8, 0);
    v27 = (float32x4_t)vdupq_laneq_s32(a4, 2);
    v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
    v29 = (float32x4_t)vdupq_laneq_s32(a6, 2);
    v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a7, a7), (int8x16_t)a7, 0xCuLL);
    v31 = vnegq_f32((float32x4_t)a7);
    v32 = 16 * v23;
    v33 = (float32x4_t *)(v15 + v32);
    v34 = (float32x4_t *)(v16 + v32);
    v35 = (float32x4_t)xmmword_1B2244F80;
    v137 = v27;
    v138 = v26;
    v135 = v29;
    v136 = v28;
    v133 = v31;
    v134 = v30;
    while (1)
    {
      v38 = *v34;
      if (a3 <= 0.0)
        goto LABEL_21;
      v39 = *v33;
      v40 = vmulq_f32(v39, v39);
      v41 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u64[0];
      *(float *)v41.i32 = sqrtf(*(float *)v41.i32);
      if (*(float *)v41.i32 <= 0.00000011921)
        goto LABEL_21;
      v42 = vmulq_f32(v38, v35);
      v43 = (int32x4_t)vnegq_f32(v42);
      v44 = (int8x16_t)vtrn2q_s32((int32x4_t)v42, vtrn1q_s32((int32x4_t)v42, v43));
      v45 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v43, 8uLL), *(float32x2_t *)a4.i8, 1), (float32x4_t)vextq_s8(v44, v44, 8uLL), v26);
      v46 = (float32x4_t)vrev64q_s32((int32x4_t)v42);
      v46.i32[0] = v43.i32[1];
      v46.i32[3] = v43.i32[2];
      v47 = vmlaq_f32(v45, v46, v27);
      v48 = (int32x4_t)vnegq_f32(v47);
      v49 = (int8x16_t)vtrn2q_s32((int32x4_t)v47, vtrn1q_s32((int32x4_t)v47, v48));
      v50 = (float32x4_t)vrev64q_s32((int32x4_t)v47);
      v50.i32[0] = v48.i32[1];
      v50.i32[3] = v48.i32[2];
      v51 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v47, v38, 3), v50, v38, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v48, 8uLL), *(float32x2_t *)v38.f32, 1), (float32x4_t)vextq_s8(v49, v49, 8uLL), v38.f32[0]));
      v52 = v51;
      v52.i32[3] = v19.i32[3];
      v53 = vdivq_f32(v39, (float32x4_t)vdupq_lane_s32(v41, 0));
      v54 = v53;
      v54.i32[3] = v18.i32[3];
      v55 = vmulq_f32(v52, v54);
      v56 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0];
      v57 = 0.0;
      if (v56 <= 1.0)
      {
        if (v56 >= -1.0)
        {
          v153 = *v34;
          v156 = v17;
          v145 = v21;
          v148 = v20;
          v139 = v54;
          v142 = v52;
          v129 = v51;
          v126 = v53;
          v57 = acosf(v56);
          v53 = v126;
          v51 = v129;
          v54 = v139;
          v52 = v142;
          v21 = v145;
          v20 = v148;
          v38 = v153;
          v17 = v156;
          v35 = (float32x4_t)xmmword_1B2244F80;
          v31 = v133;
          v30 = v134;
          v29 = v135;
          v28 = v136;
          v27 = v137;
          v26 = v138;
          v22 = *(float32x2_t *)a6.i8;
        }
        else
        {
          v57 = 3.1416;
        }
      }
      v58 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL), vnegq_f32(v51)), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL));
      v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL);
      v60 = (int8x16_t)vabsq_f32(v59);
      if (*(float *)v60.i32 > 0.00000011921
        || (v60.i32[0] = vextq_s8(v60, v60, 8uLL).u32[0],
            *(int32x2_t *)v60.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v60.i8),
            (v60.i8[4] & 1) == 0)
        || (v61 = v60.i8[0], v62 = 0uLL, (v61 & 1) == 0))
      {
        v63 = (int32x4_t)vmulq_f32(v58, v58);
        v63.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), *(float32x2_t *)v63.i8)).u32[0];
        v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
        v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
        v62 = (int8x16_t)vmulq_n_f32(v59, vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).f32[0]);
        v62.i32[3] = v151;
      }
      if (v57 < 0.001)
        break;
      if ((v62.i32[0] & 0x7FFFFFFF) == 0)
      {
        v66.i32[0] = vextq_s8(v62, v62, 8uLL).u32[0] & 0x7FFFFFFF;
        v66.i32[1] = v62.i32[1] & 0x7FFFFFFF;
        v67 = vceqz_s32(v66);
        if ((v67.i8[4] & 1) != 0 && (v67.i8[0] & 1) != 0)
          break;
      }
      if (v57 >= a3)
        v57 = a3;
      v155 = v38;
      v158 = v17;
      v147 = v21;
      v150 = v20;
      v141 = v54;
      v144 = v52;
      v131 = (float32x4_t)v62;
      v104 = __sincosf_stret(v57 * 0.5);
      v21 = v147;
      v20 = v150;
      v17 = v158;
      v35 = (float32x4_t)xmmword_1B2244F80;
      v31 = v133;
      v30 = v134;
      v29 = v135;
      v28 = v136;
      v27 = v137;
      v26 = v138;
      v18 = v141;
      v22 = *(float32x2_t *)a6.i8;
      v105 = vmulq_n_f32(v131, v104.__sinval);
      v106 = (int32x4_t)vnegq_f32(v155);
      v107 = (int8x16_t)vtrn2q_s32((int32x4_t)v155, vtrn1q_s32((int32x4_t)v155, v106));
      v108 = (float32x4_t)vrev64q_s32((int32x4_t)v155);
      v108.i32[0] = v106.i32[1];
      v108.i32[3] = v106.i32[2];
      v38 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v155, v104.__cosval), v108, v105, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v155, (int8x16_t)v106, 8uLL), *(float32x2_t *)v105.f32, 1), (float32x4_t)vextq_s8(v107, v107, 8uLL), v105.f32[0]));
      v19 = v144;
      if (a5 > 0.0)
      {
LABEL_22:
        v68 = vmulq_f32(v38, v35);
        v69 = (int32x4_t)vnegq_f32(v68);
        v70 = (int8x16_t)vtrn2q_s32((int32x4_t)v68, vtrn1q_s32((int32x4_t)v68, v69));
        v71 = (float32x4_t)vextq_s8(v70, v70, 8uLL);
        v72 = (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v69, 8uLL);
        v73 = (float32x4_t)vrev64q_s32((int32x4_t)v68);
        v73.i32[0] = v69.i32[1];
        v73.i32[3] = v69.i32[2];
        v74 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v72, *(float32x2_t *)a4.i8, 1), v71, v26), v73, v27);
        v75 = (int32x4_t)vnegq_f32(v74);
        v76 = (int8x16_t)vtrn2q_s32((int32x4_t)v74, vtrn1q_s32((int32x4_t)v74, v75));
        v77 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v75, 8uLL), *(float32x2_t *)v38.f32, 1), (float32x4_t)vextq_s8(v76, v76, 8uLL), v38.f32[0]);
        v78 = (float32x4_t)vrev64q_s32((int32x4_t)v74);
        v78.i32[0] = v75.i32[1];
        v78.i32[3] = v75.i32[2];
        v79 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v74, v38, 3), v78, v38, 2), v77);
        v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL);
        v81 = (int32x4_t)vmlaq_f32(vmulq_f32(v80, v31), v79, v30);
        v82 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v81, v81), (int8x16_t)v81, 0xCuLL);
        v83 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL), vnegq_f32(v79)), v82, v80);
        v84 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL);
        v85 = (int8x16_t)vabsq_f32(v84);
        if (*(float *)v85.i32 > 0.00000011921
          || (v85.i32[0] = vextq_s8(v85, v85, 8uLL).u32[0],
              *(int32x2_t *)v85.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v85.i8),
              (v85.i8[4] & 1) == 0)
          || (v86 = 0uLL, (v85.i8[0] & 1) == 0))
        {
          v87 = (int32x4_t)vmulq_f32(v83, v83);
          v87.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v87.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v87, 2), *(float32x2_t *)v87.i8)).u32[0];
          v88 = vrsqrte_f32((float32x2_t)v87.u32[0]);
          v89 = vmul_f32(v88, vrsqrts_f32((float32x2_t)v87.u32[0], vmul_f32(v88, v88)));
          v86 = vmulq_n_f32(v84, vmul_f32(v89, vrsqrts_f32((float32x2_t)v87.u32[0], vmul_f32(v89, v89))).f32[0]);
          v86.i32[3] = v17.i32[3];
          v17 = v86;
        }
        v37 = v79;
        v37.i32[3] = v21.i32[3];
        v90 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v72, v22, 1), v71, v28), v73, v29);
        v91 = (int32x4_t)vnegq_f32(v90);
        v92 = (int8x16_t)vtrn2q_s32((int32x4_t)v90, vtrn1q_s32((int32x4_t)v90, v91));
        v93 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v91, 8uLL), *(float32x2_t *)v38.f32, 1), (float32x4_t)vextq_s8(v92, v92, 8uLL), v38.f32[0]);
        v94 = (float32x4_t)vrev64q_s32((int32x4_t)v90);
        v94.i32[0] = v91.i32[1];
        v94.i32[3] = v91.i32[2];
        v95 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v90, v38, 3), v94, v38, 2), v93);
        v36 = v95;
        v36.i32[3] = v20.i32[3];
        if ((v86.i32[0] & 0x7FFFFFFF) == 0)
        {
          v96.i32[0] = vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL).u32[0] & 0x7FFFFFFF;
          v96.i32[1] = v86.i32[1] & 0x7FFFFFFF;
          v97 = vceqz_s32(v96);
          if ((v97.i8[4] & 1) != 0 && (v97.i8[0] & 1) != 0)
            goto LABEL_5;
        }
        v98 = 1.0;
        if ((a2 & 1) != 0)
        {
          v99 = vmulq_f32(v37, (float32x4_t)a7);
          v100 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))).f32[0]);
          if (v100 >= 0.9)
            goto LABEL_5;
          if (v100 > 0.1)
          {
            v98 = (float)((float)(v100 + -0.1) / -0.8) + 1.0;
            if (v98 <= 0.0)
              goto LABEL_5;
          }
        }
        v101 = vmulq_f32(v36, v86);
        v102 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v101, 2), vaddq_f32(v101, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v101.f32, 1))).f32[0];
        if (v102 > 1.0)
          goto LABEL_5;
        v154 = v38;
        v157 = v17;
        v143 = v19;
        v146 = v18;
        v149 = v37;
        v130 = v79;
        v140 = v36;
        if (v102 < -1.0)
        {
          v103 = 3.1416;
          goto LABEL_42;
        }
        v125 = v95;
        v127 = v86;
        v103 = acosf(v102);
        v95 = v125;
        v86 = v127;
        v37 = v149;
        if (v103 >= 0.001)
        {
LABEL_42:
          v109 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), (int8x16_t)v86, 0xCuLL), vnegq_f32(v95)), v86, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL));
          v110 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v109, (int32x4_t)v109), (int8x16_t)v109, 0xCuLL);
          v111 = (int32x4_t)vmulq_f32(v109, v109);
          v111.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v111, 2), *(float32x2_t *)v111.i8)).u32[0];
          v112 = vrsqrte_f32((float32x2_t)v111.u32[0]);
          v113 = vmul_f32(v112, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v112, v112)));
          v114 = vmulq_n_f32(v110, vmul_f32(v113, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v113, v113))).f32[0]);
          v114.i32[3] = v128;
          v115 = vmulq_f32(v37, v114);
          LODWORD(v116) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 2), vaddq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 1))).u32[0];
          if (v103 >= a5)
            v103 = a5;
          v117 = v98 * v103;
          v118 = -(float)(v98 * v103);
          if (v116 >= 0.0)
            v118 = v117;
          v119 = __sincosf_stret(v118 * 0.5);
          v120 = vmulq_n_f32(v130, v119.__sinval);
          v22 = *(float32x2_t *)a6.i8;
          v121 = (int32x4_t)vnegq_f32(v154);
          v122 = (int8x16_t)vtrn2q_s32((int32x4_t)v154, vtrn1q_s32((int32x4_t)v154, v121));
          v123 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v154, (int8x16_t)v121, 8uLL), *(float32x2_t *)v120.f32, 1), (float32x4_t)vextq_s8(v122, v122, 8uLL), v120.f32[0]);
          v124 = (float32x4_t)vrev64q_s32((int32x4_t)v154);
          v124.i32[0] = v121.i32[1];
          v124.i32[3] = v121.i32[2];
          v37 = v149;
          v38 = vaddq_f32(vmlaq_laneq_f32(vmulq_n_f32(v154, v119.__cosval), v124, v120, 2), v123);
        }
        else
        {
          v22 = *(float32x2_t *)a6.i8;
          v38 = v154;
        }
        v27 = v137;
        v26 = v138;
        v29 = v135;
        v28 = v136;
        v31 = v133;
        v30 = v134;
        v35 = (float32x4_t)xmmword_1B2244F80;
        v17 = v157;
        v19 = v143;
        v18 = v146;
        v36 = v140;
        goto LABEL_5;
      }
LABEL_4:
      v36 = v20;
      v37 = v21;
LABEL_5:
      *v34++ = v38;
      ++v33;
      v20 = v36;
      v21 = v37;
      if (!--v25)
        return;
    }
    v19 = v52;
    v18 = v54;
LABEL_21:
    if (a5 > 0.0)
      goto LABEL_22;
    goto LABEL_4;
  }
}

uint64_t type metadata accessor for ParticleFlockingAlignOrientationSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D795C0()
{
  return "ParticleFlockingAlignOrientation";
}

uint64_t sub_1B1D795D4(_QWORD *a1, double a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  __n128 v13;
  __n128 v14;
  char v15;

  v13 = a3;
  sub_1B19F8E54(0, &qword_1EEF5E330, (uint64_t (*)(void))sub_1B1D86FB8, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D86FB8();
  sub_1B222A180();
  v14.n128_u8[0] = 0;
  sub_1B2229934();
  if (!v3)
  {
    v14 = v13;
    v15 = 1;
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v11, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1D7976C(char *a1, char *a2)
{
  return sub_1B1F98DA0(*a1, *a2);
}

uint64_t sub_1B1D79778()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D79804()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D7986C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D798F4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1D79950(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x636E65756C666E69;
  if (*v1)
    v2 = 0x726F4E656E616C70;
  v3 = 0xE900000000000065;
  if (*v1)
    v3 = 0xEB000000006C616DLL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1D7999C()
{
  _BYTE *v0;

  if (*v0)
    return 0x726F4E656E616C70;
  else
    return 0x636E65756C666E69;
}

uint64_t sub_1B1D799E4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1D79A44()
{
  sub_1B1D86FB8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D79A6C()
{
  sub_1B1D86FB8();
  return sub_1B222A1E0();
}

void sub_1B1D79A94(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  __int128 v5;

  v4 = sub_1B1D818B0(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_OWORD *)(a2 + 16) = v5;
  }
}

uint64_t sub_1B1D79AC0(_QWORD *a1, double a2)
{
  __n128 *v2;

  LODWORD(a2) = v2->n128_u32[0];
  return sub_1B1D795D4(a1, a2, v2[1]);
}

uint64_t sub_1B1D79ADC()
{
  return type metadata accessor for ParticleFlockingAlignVelocityOnPlaneSystem();
}

double sub_1B1D79AF8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 1048576000;
  result = 0.0078125;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DD0;
  return result;
}

uint64_t type metadata accessor for ParticleFlockingAlignVelocityOnPlaneSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D79B34()
{
  return "ParticleFlockingAlignVelocityOnPlane";
}

void sub_1B1D79B48(char *a1)
{
  sub_1B1F988A4(*a1);
}

void sub_1B1D79B54()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1D79BAC()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1D79C1C()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1D79C64()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1D79CC0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1D79D14()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D79D84@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D79DB8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1D79DF4 + 4 * byte_1B229216E[*v0]))();
}

void sub_1B1D79DF4(_QWORD *a1@<X8>)
{
  *a1 = 0x3172656E726F63;
  a1[1] = 0xE700000000000000;
}

void sub_1B1D79E10(_QWORD *a1@<X8>)
{
  *a1 = 0x3272656E726F63;
  a1[1] = 0xE700000000000000;
}

void sub_1B1D79E2C(_QWORD *a1@<X8>)
{
  *a1 = 0x61657241776F6873;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1B1D79E48()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D79E84 + 4 * byte_1B2292172[*v0]))(0x6854726564726F62, 0xEF7373656E6B6369);
}

uint64_t sub_1B1D79E84()
{
  return 0x3172656E726F63;
}

uint64_t sub_1B1D79E9C()
{
  return 0x3272656E726F63;
}

uint64_t sub_1B1D79EB4()
{
  return 0x61657241776F6873;
}

uint64_t sub_1B1D79ECC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D79EF8()
{
  sub_1B1D86FFC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D79F20()
{
  sub_1B1D86FFC();
  return sub_1B222A1E0();
}

void sub_1B1D79F48(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B1D7AB18(a1, &qword_1EEF5E338, (uint64_t (*)(void))sub_1B1D86FFC, (uint64_t)&type metadata for ParticleFlockingConstrainToArea.CodingKeys, a2);
}

uint64_t sub_1B1D79F74(_QWORD *a1, double a2)
{
  __n128 *v2;

  LODWORD(a2) = v2->n128_u32[0];
  return sub_1B1D7A4CC(a1, v2[3].n128_u8[0], &qword_1EEF5E348, (uint64_t (*)(void))sub_1B1D86FFC, (uint64_t)&type metadata for ParticleFlockingConstrainToArea.CodingKeys, a2, v2[1], v2[2]);
}

uint64_t sub_1B1D79FAC()
{
  return type metadata accessor for ParticleFlockingConstrainToAreaSystem();
}

double sub_1B1D79FC8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 0x40000000;
  result = -524288.378;
  *(_OWORD *)(a1 + 16) = xmmword_1B22932B0;
  *(_OWORD *)(a1 + 32) = xmmword_1B22932C0;
  *(_BYTE *)(a1 + 48) = 0;
  return result;
}

void sub_1B1D79FEC(_QWORD *a1, float32x4_t a2, float32x4_t a3, float a4, float32x4_t a5, float a6, float a7, float a8, float a9)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  float v35;
  float32x4_t v36;
  __int32 v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float32x4_t v43;
  int32x2_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int32x2_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  float32x4_t v60;
  float32x4_t v61;
  int32x2_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x2_t v66;
  float32x4_t v67;
  float v68;
  float v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float v76;
  float v77;
  __float2 v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  __int32 v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  __int32 v100;
  float32x4_t v101;

  v14 = (uint64_t *)a1[11];
  v15 = a1[12];
  v16 = a1[13];
  v17 = a1[2];
  v18 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v14, v15, v16, v17);
  v19 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v14, v15, v16, v17);
  v27 = a2;
  v26 = a3;
  v28 = a1[6];
  v29 = a1[7];
  v30 = v29 - v28;
  if (v29 != v28)
  {
    v31 = 0uLL;
    v32 = 16 * v28;
    v33 = (float32x4_t *)(v19 + v32);
    v34 = (float32x4_t *)(v18 + v32);
    v35 = 1.0;
    while (1)
    {
      v37 = v25.i32[3];
      v25 = *v34;
      v38 = *v33;
      v25.i32[3] = v37;
      v39 = vsubq_f32(vabdq_f32(*v34, v27), v26);
      v39.i32[3] = 0;
      v40 = vmaxnmq_f32(v39, v31);
      v41 = vmulq_f32(v40, v40);
      v42 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]);
      v43 = vmulq_f32(v38, v38);
      v44 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).u64[0];
      *(float *)v44.i32 = sqrtf(*(float *)v44.i32);
      if (v42 <= 0.00000011921 || *(float *)v44.i32 <= 0.00000011921)
      {
        v46 = v24;
        v36 = v20;
        v47 = v23;
LABEL_11:
        v48 = v22;
        v49 = v21;
        goto LABEL_5;
      }
      v50 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(v44, 0));
      v46 = v50;
      v46.i32[3] = v24.i32[3];
      v51 = vsubq_f32(a5, v25);
      v52 = vmulq_f32(v51, v51);
      v53 = vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1));
      v54 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), v53).u64[0];
      *(float *)v54.i32 = sqrtf(*(float *)v54.i32);
      if (*(float *)v54.i32 <= 0.00000011921)
        break;
      *(float32x2_t *)v53.f32 = vsub_f32(0, *(float32x2_t *)v51.f32);
      v53.f32[2] = 0.0 - v51.f32[2];
      v47 = vdivq_f32(v53, (float32x4_t)vdupq_lane_s32(v54, 0));
      v47.i32[3] = v23.i32[3];
      v55 = vmulq_f32(v46, v47);
      v56 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1)));
      if (fabsf(v56.f32[0]) <= 0.00000011921)
      {
        v36 = v20;
        goto LABEL_11;
      }
      v57 = vmulq_f32(v47, a5);
      v58 = vmulq_f32(v25, v47);
      v59 = vdivq_f32(vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1)))), v56).f32[0];
      if (v59 <= 0.0)
        goto LABEL_18;
      v48 = vmulq_n_f32(v50, v59);
      v49 = vaddq_f32(v25, v48);
      v48.i32[3] = v22.i32[3];
      v49.i32[3] = v21.i32[3];
      v60 = vsubq_f32(v49, a5);
      v61 = vmulq_f32(v60, v60);
      v62 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).u64[0];
      if (*(float *)v62.i32 <= a6)
      {
        v63 = v49;
      }
      else
      {
        *(float *)v62.i32 = sqrtf(*(float *)v62.i32);
        v63 = vaddq_f32(vdivq_f32(vmulq_n_f32(v60, a7), (float32x4_t)vdupq_lane_s32(v62, 0)), a5);
        v63.i32[3] = v91;
      }
LABEL_19:
      v64 = vsubq_f32(v63, v25);
      v65 = vmulq_f32(v64, v64);
      v66 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).u64[0];
      *(float *)v66.i32 = sqrtf(*(float *)v66.i32);
      if (*(float *)v66.i32 <= 0.00000011921)
      {
        v36 = v20;
      }
      else
      {
        v36 = vdivq_f32(v64, (float32x4_t)vdupq_lane_s32(v66, 0));
        v36.i32[3] = v20.i32[3];
        v67 = vmulq_f32(v46, v36);
        v68 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).f32[0];
        if (v68 <= v35)
        {
          v99 = v46;
          v100 = v25.i32[3];
          v97 = v48;
          v98 = v47;
          v95 = v36;
          v96 = v49;
          v101 = *v33;
          if (v68 < -1.0)
          {
            v69 = 3.1416;
            goto LABEL_25;
          }
          v92 = v64;
          v69 = acosf(v68);
          v64 = v92;
          v38 = v101;
          if (v69 >= 0.001)
          {
LABEL_25:
            v70 = fminf(v42 * a4, 2.0);
            v71 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), (int8x16_t)v64, 0xCuLL), vnegq_f32(v38)), v64, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL));
            v72 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), (int8x16_t)v71, 0xCuLL);
            v73 = (int32x4_t)vmulq_f32(v71, v71);
            v73.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v73, 2), *(float32x2_t *)v73.i8)).u32[0];
            v74 = vrsqrte_f32((float32x2_t)v73.u32[0]);
            v75 = vmul_f32(v74, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v74, v74)));
            v93 = vmulq_n_f32(v72, vmul_f32(v75, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v75, v75))).f32[0]);
            if (v69 >= a9)
              v76 = a9;
            else
              v76 = v69;
            v77 = (float)(v70 * a8) * v76;
            if (v69 >= v77)
              v69 = v77;
            v78 = __sincosf_stret(v69 * 0.5);
            v79 = vmulq_n_f32(v93, v78.__sinval);
            v80 = v79;
            v80.i32[3] = LODWORD(v78.__cosval);
            v81 = vmulq_f32(v80, (float32x4_t)xmmword_1B2244F80);
            v82 = (int32x4_t)vnegq_f32(v81);
            v83 = (int8x16_t)vtrn2q_s32((int32x4_t)v81, vtrn1q_s32((int32x4_t)v81, v82));
            v84 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v82, 8uLL), *(float32x2_t *)v101.f32, 1), (float32x4_t)vextq_s8(v83, v83, 8uLL), v101.f32[0]);
            v85 = (float32x4_t)vrev64q_s32((int32x4_t)v81);
            v85.i32[0] = v82.i32[1];
            v85.i32[3] = v82.i32[2];
            v86 = vmlaq_laneq_f32(v84, v85, v101, 2);
            v87 = (int32x4_t)vnegq_f32(v86);
            v88 = (int8x16_t)vtrn2q_s32((int32x4_t)v86, vtrn1q_s32((int32x4_t)v86, v87));
            v89 = (float32x4_t)vrev64q_s32((int32x4_t)v86);
            v89.i32[0] = v87.i32[1];
            v89.i32[3] = v87.i32[2];
            v90 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v86, v80, 3), v89, v79, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v87, 8uLL), *(float32x2_t *)v79.f32, 1), (float32x4_t)vextq_s8(v88, v88, 8uLL), v79.f32[0]));
            v90.i32[3] = 0;
            *v33 = v90;
          }
          v27 = a2;
          v26 = a3;
          v31 = 0uLL;
          v35 = 1.0;
          v46 = v99;
          v25.i32[3] = v100;
          v48 = v97;
          v47 = v98;
          v36 = v95;
          v49 = v96;
        }
      }
LABEL_5:
      ++v33;
      ++v34;
      v24 = v46;
      v20 = v36;
      v23 = v47;
      v22 = v48;
      v21 = v49;
      if (!--v30)
        return;
    }
    v47 = v23;
LABEL_18:
    v48 = v22;
    v49 = v21;
    v63 = a5;
    goto LABEL_19;
  }
}

uint64_t type metadata accessor for ParticleFlockingConstrainToAreaSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D7A4B8()
{
  return "ParticleFlockingConstrainToArea";
}

uint64_t sub_1B1D7A4CC(_QWORD *a1, int a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5, double a6, __n128 a7, __n128 a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  __n128 v19;
  int v20;
  __n128 v21;
  char v22;
  __n128 v23;

  v20 = a2;
  v19 = a8;
  v21 = a7;
  sub_1B19F8E54(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v14);
  v16 = (char *)&v19 - v15;
  sub_1B19FA070(a1, a1[3]);
  a4();
  sub_1B222A180();
  v23.n128_u8[0] = 0;
  sub_1B2229934();
  if (!v8)
  {
    v23 = v21;
    v22 = 1;
    v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v17, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
    v23 = v19;
    v22 = 2;
    sub_1B2229958();
    v23.n128_u8[0] = 3;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

void sub_1B1D7A6D8(char *a1)
{
  sub_1B1F98C24(*a1);
}

void sub_1B1D7A6E4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1D7A734()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1D7A7B0()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1D7A7F0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1D7A858()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1D7A8A4()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D7A920@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D7A954()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1D7A988 + 4 * byte_1B2292182[*v0]))();
}

void sub_1B1D7A988(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6543656E616C70;
  a1[1] = 0xEB00000000726574;
}

void sub_1B1D7A9AC(_QWORD *a1@<X8>)
{
  *a1 = 0x726F4E656E616C70;
  a1[1] = 0xEB000000006C616DLL;
}

void sub_1B1D7A9D0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E616C50776F6873;
  a1[1] = v1;
}

uint64_t sub_1B1D7A9E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D7AA1C + 4 * byte_1B2292186[*v0]))(0x636E65756C666E69, 0xE900000000000065);
}

uint64_t sub_1B1D7AA1C()
{
  return 0x6E6543656E616C70;
}

uint64_t sub_1B1D7AA3C()
{
  return 0x726F4E656E616C70;
}

uint64_t sub_1B1D7AA5C()
{
  return 0x6E616C50776F6873;
}

uint64_t sub_1B1D7AA70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D7AA9C()
{
  sub_1B1D87040();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D7AAC4()
{
  sub_1B1D87040();
  return sub_1B222A1E0();
}

void sub_1B1D7AAEC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B1D7AB18(a1, &qword_1EEF5E350, (uint64_t (*)(void))sub_1B1D87040, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane.CodingKeys, a2);
}

void sub_1B1D7AB18(_QWORD *a1@<X0>, unint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v7;
  float v8;
  __int128 v9;
  __int128 v10;

  v8 = sub_1B1D82A28(a1, a2, a3, a4);
  if (!v5)
  {
    *(float *)a5 = v8;
    *(_OWORD *)(a5 + 16) = v9;
    *(_OWORD *)(a5 + 32) = v10;
    *(_BYTE *)(a5 + 48) = v7 & 1;
  }
}

uint64_t sub_1B1D7AB58(_QWORD *a1, double a2)
{
  __n128 *v2;

  LODWORD(a2) = v2->n128_u32[0];
  return sub_1B1D7A4CC(a1, v2[3].n128_u8[0], &qword_1EEF5E360, (uint64_t (*)(void))sub_1B1D87040, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane.CodingKeys, a2, v2[1], v2[2]);
}

uint64_t sub_1B1D7AB90()
{
  return type metadata accessor for ParticleFlockingConstrainToPlaneSystem();
}

double sub_1B1D7ABAC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 1088421888;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  result = 0.0078125;
  *(_OWORD *)(a1 + 32) = xmmword_1B2244DD0;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t type metadata accessor for ParticleFlockingConstrainToPlaneSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D7ABF4()
{
  return "ParticleFlockingConstrainToPlane";
}

uint64_t sub_1B1D7AC08(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D7AC40 + 4 * byte_1B229218A[a1]))(0x636E65756C666E69, 0xE900000000000065);
}

uint64_t sub_1B1D7AC40()
{
  return 0x737569646172;
}

uint64_t sub_1B1D7AC54()
{
  return 0x65636E6174736964;
}

uint64_t sub_1B1D7AC78()
{
  return 0x6C676E4177656976;
}

unint64_t sub_1B1D7AC8C()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1D7ACA8()
{
  return 0x6556746F5278616DLL;
}

uint64_t sub_1B1D7ACC0()
{
  return 0x61657241776F6873;
}

uint64_t sub_1B1D7ACD8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D7AD10 + 4 * byte_1B2292191[a1]))(0x636E65756C666E69, 0xE900000000000065);
}

uint64_t sub_1B1D7AD10()
{
  return 0x737569646172;
}

uint64_t sub_1B1D7AD24()
{
  return 0x65636E6174736964;
}

uint64_t sub_1B1D7AD48()
{
  return 0x6C676E4177656976;
}

unint64_t sub_1B1D7AD5C()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1D7AD78()
{
  return 0x6556746F5278616DLL;
}

uint64_t sub_1B1D7AD90()
{
  return 0x61657241776F6873;
}

uint64_t sub_1B1D7ADA8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  sub_1B19F8E54(0, &qword_1EEF5E378, (uint64_t (*)(void))sub_1B1D87084, (uint64_t)&type metadata for ParticleFlockingFlyTowardsArea.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D87084();
  sub_1B222A180();
  v17 = 0;
  sub_1B2229934();
  if (!v1)
  {
    v16 = 1;
    sub_1B2229934();
    v15 = 2;
    sub_1B2229934();
    v14 = 3;
    sub_1B2229934();
    v13 = 4;
    sub_1B2229934();
    v12 = 5;
    sub_1B2229934();
    v11 = 6;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1B1D7AFA0(char *a1)
{
  sub_1B1F98628(*a1);
}

void sub_1B1D7AFAC()
{
  char *v0;

  sub_1B1DB4D10(0, *v0);
}

void sub_1B1D7AFB8(uint64_t a1)
{
  char *v1;

  sub_1B1DB3BFC(a1, *v1);
}

void sub_1B1D7AFC0(uint64_t a1)
{
  char *v1;

  sub_1B1DB4D10(a1, *v1);
}

uint64_t sub_1B1D7AFC8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D80EB0();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D7AFF4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1D7AC08(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1D7B01C()
{
  unsigned __int8 *v0;

  return sub_1B1D7ACD8(*v0);
}

uint64_t sub_1B1D7B024@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D80EB0();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D7B048()
{
  sub_1B1D87084();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D7B070()
{
  sub_1B1D87084();
  return sub_1B222A1E0();
}

double sub_1B1D7B098@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  _BYTE v5[25];

  sub_1B1D83854(a1, (uint64_t)v5);
  if (!v2)
  {
    *a2 = *(_OWORD *)v5;
    result = *(double *)&v5[9];
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v5[9];
  }
  return result;
}

uint64_t sub_1B1D7B0D8(_QWORD *a1)
{
  return sub_1B1D7ADA8(a1);
}

uint64_t sub_1B1D7B0EC()
{
  return type metadata accessor for ParticleFlockingFlyTowardsAreaSystem();
}

double sub_1B1D7B108@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_1B22932D0;
  result = 5.62950066e15;
  *(_QWORD *)(a1 + 16) = 0x4334000042F00000;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void sub_1B1D7B12C(_QWORD *a1, float32x4_t a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  __int32 v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x2_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x2_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  int32x2_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x2_t v67;
  BOOL v68;
  float v69;
  float32x4_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float v81;
  float v82;
  __float2 v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int32x4_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  __int32 v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  __int32 v111;
  __int32 v112;

  v23 = (uint64_t *)a1[11];
  v24 = a1[12];
  v25 = a1[13];
  v26 = a1[2];
  v27 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v23, v24, v25, v26);
  v28 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v23, v24, v25, v26);
  v35 = a1[6];
  v36 = a1[7];
  v37 = v36 - v35;
  if (v36 != v35)
  {
    v30.f32[0] = a10;
    v29.f32[0] = a12;
    v38 = 16 * v35;
    v39 = (float32x4_t *)(v28 + v38);
    v40 = (float32x4_t *)(v27 + v38);
    v41 = -1.0;
    do
    {
      v47 = v34.i32[3];
      v34 = *v40;
      v34.i32[3] = v47;
      v48 = *v39;
      v49 = vmulq_f32(v48, v48);
      v50 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).u64[0];
      *(float *)v50.i32 = sqrtf(*(float *)v50.i32);
      if (*(float *)v50.i32 <= 0.00000011921)
      {
        v42 = v33;
        v43 = v29;
        v44 = v32;
      }
      else
      {
        v51 = vdivq_f32(v48, (float32x4_t)vdupq_lane_s32(v50, 0));
        v42 = v51;
        v42.i32[3] = v33.i32[3];
        v52 = vsubq_f32(a2, v34);
        v53 = vmulq_f32(v52, v52);
        v54 = vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1));
        v55 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), v54).u64[0];
        *(float *)v55.i32 = sqrtf(*(float *)v55.i32);
        if (*(float *)v55.i32 <= 0.00000011921)
        {
          v44 = v32;
          goto LABEL_14;
        }
        *(float32x2_t *)v54.f32 = vsub_f32(0, *(float32x2_t *)v52.f32);
        v54.f32[2] = 0.0 - v52.f32[2];
        v44 = vdivq_f32(v54, (float32x4_t)vdupq_lane_s32(v55, 0));
        v44.i32[3] = v32.i32[3];
        v56 = vmulq_f32(v42, v44);
        v57 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1)));
        if (fabsf(v57.f32[0]) > 0.00000011921)
        {
          v58 = vmulq_f32(v44, a2);
          v59 = vmulq_f32(v34, v44);
          v60 = vdivq_f32(vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1)))), v57).f32[0];
          if (v60 > 0.0)
          {
            v45 = vmulq_n_f32(v51, v60);
            v46 = vaddq_f32(v34, v45);
            v45.i32[3] = v31.i32[3];
            v46.i32[3] = v30.i32[3];
            v61 = vsubq_f32(v46, a2);
            v62 = vmulq_f32(v61, v61);
            v63 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).u64[0];
            if (*(float *)v63.i32 <= a3)
            {
              v64 = v46;
            }
            else
            {
              *(float *)v63.i32 = sqrtf(*(float *)v63.i32);
              v64 = vaddq_f32(vdivq_f32(vmulq_n_f32(v61, a4), (float32x4_t)vdupq_lane_s32(v63, 0)), a2);
              v64.i32[3] = v98;
            }
            goto LABEL_15;
          }
LABEL_14:
          v45 = v31;
          v46 = v30;
          v64 = a2;
LABEL_15:
          v65 = vsubq_f32(v64, v34);
          v66 = vmulq_f32(v65, v65);
          v67 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).u64[0];
          *(float *)v67.i32 = sqrtf(*(float *)v67.i32);
          v68 = *(float *)v67.i32 > 0.00000011921 && *(float *)v67.i32 < a5;
          v69 = 1.0 - (float)(*(float *)v67.i32 * a6);
          if (v68 && v69 > 0.00000011921)
          {
            v43 = vdivq_f32(v65, (float32x4_t)vdupq_lane_s32(v67, 0));
            v43.i32[3] = v29.i32[3];
            v71 = vmulq_f32(v42, v43);
            v72 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0];
            if (v72 <= 1.0)
            {
              if (v72 >= v41)
              {
                v109 = v42;
                v111 = v34.i32[3];
                v105 = v45;
                v107 = v44;
                v101 = *v39;
                v103 = v46;
                v99 = v43;
                v96 = v65;
                v73 = acosf(v72);
                v65 = v96;
                v43 = v99;
                v48 = v101;
                v46 = v103;
                v45 = v105;
                v44 = v107;
                v42 = v109;
                v34.i32[3] = v111;
                v41 = -1.0;
              }
              else
              {
                v73 = 3.1416;
              }
              if (v73 >= 0.001 && v73 < a7)
              {
                v74 = 1.0;
                if (v73 <= a8 || (v74 = (float)(a7 - v73) * a9, v74 > 0.00000011921))
                {
                  v75 = (float)((float)(a10 * a11) * v69) * v74;
                  if (v75 > 0.001)
                  {
                    v106 = v45;
                    v76 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65), (int8x16_t)v65, 0xCuLL), vnegq_f32(v48)), v65, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL));
                    v77 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL);
                    v78 = (int32x4_t)vmulq_f32(v76, v76);
                    v78.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v78, 2), *(float32x2_t *)v78.i8)).u32[0];
                    v79 = vrsqrte_f32((float32x2_t)v78.u32[0]);
                    v80 = vmul_f32(v79, vrsqrts_f32((float32x2_t)v78.u32[0], vmul_f32(v79, v79)));
                    v97 = vmulq_n_f32(v77, vmul_f32(v80, vrsqrts_f32((float32x2_t)v78.u32[0], vmul_f32(v80, v80))).f32[0]);
                    v81 = a12;
                    if (v73 < a12)
                      v81 = v73;
                    v82 = v81 * v75;
                    if (v73 >= v82)
                      v73 = v82;
                    v110 = v42;
                    v112 = v34.i32[3];
                    v108 = v44;
                    v102 = v48;
                    v104 = v46;
                    v100 = v43;
                    v83 = __sincosf_stret(v73 * 0.5);
                    v43 = v100;
                    v44 = v108;
                    v42 = v110;
                    v34.i32[3] = v112;
                    v41 = -1.0;
                    v84 = vmulq_n_f32(v97, v83.__sinval);
                    v85 = v84;
                    v85.i32[3] = LODWORD(v83.__cosval);
                    v86 = vmulq_f32(v85, (float32x4_t)xmmword_1B2244F80);
                    v87 = (int32x4_t)vnegq_f32(v86);
                    v88 = (int8x16_t)vtrn2q_s32((int32x4_t)v86, vtrn1q_s32((int32x4_t)v86, v87));
                    v89 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v87, 8uLL), *(float32x2_t *)v102.f32, 1), (float32x4_t)vextq_s8(v88, v88, 8uLL), v102.f32[0]);
                    v90 = (float32x4_t)vrev64q_s32((int32x4_t)v86);
                    v90.i32[0] = v87.i32[1];
                    v90.i32[3] = v87.i32[2];
                    v91 = vmlaq_laneq_f32(v89, v90, v102, 2);
                    v92 = (int32x4_t)vnegq_f32(v91);
                    v93 = (int8x16_t)vtrn2q_s32((int32x4_t)v91, vtrn1q_s32((int32x4_t)v91, v92));
                    v94 = (float32x4_t)vrev64q_s32((int32x4_t)v91);
                    v94.i32[0] = v92.i32[1];
                    v94.i32[3] = v92.i32[2];
                    v95 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v91, v85, 3), v94, v84, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v91, (int8x16_t)v92, 8uLL), *(float32x2_t *)v84.f32, 1), (float32x4_t)vextq_s8(v93, v93, 8uLL), v84.f32[0]));
                    v46 = v104;
                    v45 = v106;
                    v95.i32[3] = 0;
                    *v39 = v95;
                  }
                }
              }
            }
          }
          else
          {
            v43 = v29;
          }
          goto LABEL_6;
        }
        v43 = v29;
      }
      v45 = v31;
      v46 = v30;
LABEL_6:
      ++v39;
      ++v40;
      v33 = v42;
      v29 = v43;
      v32 = v44;
      v31 = v45;
      v30 = v46;
      --v37;
    }
    while (v37);
  }
}

uint64_t type metadata accessor for ParticleFlockingFlyTowardsAreaSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D7B644()
{
  return "ParticleFlockingFlyTowardsArea";
}

uint64_t sub_1B1D7B658()
{
  uint64_t v0;
  uint64_t *v1;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v3;

  *(_BYTE *)v0 = 0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_DWORD *)(v0 + 72) = 0;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  v1 = (uint64_t *)(v0 + 8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3 = *v1;
  if (isUniquelyReferenced_nonNull_native)
    return sub_1B1C945D0(0, *(_QWORD *)(v3 + 16));
  *v1 = (uint64_t)sub_1B1B1CE08(0, *(_QWORD *)(v3 + 24) >> 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D7B6CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticleFlockingSolverData()
{
  return objc_opt_self();
}

void sub_1B1D7B718(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  uint64_t v38;
  int8x16_t v39;
  int v40;
  int v41;
  __int128 *v42;
  float32x4_t *v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  char v62;
  int8x16_t v63;
  uint64_t v64;
  int v65;
  int v66;
  __int128 *v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  char v84;
  uint64_t v85;
  _QWORD *v86;
  size_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t *v95;
  uint64_t v96;
  __int32 v97;
  float32x4_t v98;
  __int32 v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  __n128 v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float v115;
  float v116;
  float v117;
  BOOL v118;
  int8x16_t v119;
  unsigned int v120;
  int8x16_t v121;
  float v122;
  float32_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  __n128 v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  os_unfair_lock_s *v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  ValueMetadata *v156;
  _QWORD *v157;
  char v158;
  uint64_t v159;
  _QWORD *v160;
  size_t v161;
  char *v162;
  char *v163;
  char *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  ValueMetadata *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  os_unfair_lock_s *v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  float32x4_t v190;
  uint64_t v191;
  __int32 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  float v197;
  float32x4_t v198;
  uint64_t v199;
  uint64_t v200;
  float v201;
  uint64_t v202;
  double (*v203)(_QWORD);
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  ValueMetadata *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int i;
  unsigned int *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  os_unfair_lock_s *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  float v227;
  float v228;
  float v229;
  float32x4_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  float v251;
  uint64_t v252;
  uint64_t v253;
  float32x4_t v254;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  float32x4_t v262;
  BOOL *v263;
  uint64_t v264;
  __int32 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  int8x16_t v270;
  __int32 v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  unsigned __int16 *v288;
  _QWORD *v289;
  int v290;
  uint64_t v291;
  int v292;
  _QWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  __int128 v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  int v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  __int128 v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  int v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  uint64_t v323;
  int v324;
  _QWORD v325[3];
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  _OWORD v335[2];
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  _QWORD v342[12];
  _OWORD v343[2];
  uint64_t v344;
  unsigned __int16 *v345;
  int v346;
  char v347;
  uint64_t v348;
  char v349;
  uint64_t v350;
  unsigned __int16 *v351;
  int v352;
  char v353;
  uint64_t v354;
  char v355;
  uint64_t v356;
  uint64_t v357;
  unsigned __int16 *v358;
  int v359;
  char v360;
  uint64_t v361;
  char v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t v369;
  uint64_t v370;
  unsigned __int16 *v371;
  int v372;
  char v373;
  uint64_t v374;
  char v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  unsigned __int16 *v384;
  int v385;
  char v386;
  uint64_t v387;
  char v388;
  uint64_t v389;
  _BYTE v390[40];
  unsigned __int16 *v391;
  int v392;
  char v393;
  uint64_t v394;
  char v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  _BYTE v404[40];
  uint64_t v405;
  __int128 v406;
  __int128 v407;
  __int128 v408;
  int8x16_t v409;
  uint64_t v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  int8x16_t v417;
  uint64_t v418;
  int v419;
  uint64_t v420;

  v5 = v4;
  sub_1B1A18378(a1, (uint64_t)v325, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v279 = v325[1];
  v280 = v325[2];
  v281 = v326;
  v282 = v327;
  v286 = v328;
  v287 = v330;
  v288 = (unsigned __int16 *)v325[0];
  v267 = v329;
  v268 = v331;
  v10 = v332;
  v264 = v333;
  v266 = v334;
  sub_1B1A18378(a1, (uint64_t)v342, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v342[0])
    v11 = v342[10];
  else
    v11 = 0;
  v263 = (BOOL *)(v4 + 32);
  sub_1B1D7B658();
  v12 = (uint64_t *)(v4 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *(_QWORD *)(v4 + 16);
  if (isUniquelyReferenced_nonNull_native)
  {
    sub_1B1C946DC(0, *(_QWORD *)(v14 + 16));
  }
  else
  {
    *v12 = (uint64_t)sub_1B1B1CE28(0, *(_QWORD *)(v14 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  if (v11 > *(_QWORD *)(*v12 + 24) >> 1)
    sub_1B1DA4C94(4 * v11 / 3);
  v283 = v5;
  if (v11 >= 1)
  {
    sub_1B1A18378(a1, (uint64_t)v335, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v335[0])
    {
      v293 = v10;
      v15.i32[0] = 0;
      v16.i32[0] = a4 & 1;
      v17 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v16, v15), 0);
      v18.i64[0] = a2;
      v18.i64[1] = a3;
      __asm { FMOV            V2.4S, #1.0 }
      v270 = _Q2;
      v23 = vbslq_s8(v17, v18, _Q2);
      v23.i32[3] = 0;
      v262 = (float32x4_t)v23;
      if (v341 < 1)
      {
        v294 = 0;
        v24 = v288;
      }
      else
      {
        v24 = v288;
        v277 = v338;
        if (v338)
        {
          v25 = 0;
          v294 = 0;
          v26 = v340[4];
          v27 = *(unsigned __int8 *)(v339 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v343[0] = v335[0];
          v343[1] = v335[1];
          v269 = v340 + 13;
          v289 = v340;
          v273 = v340 + 8;
          v274 = (uint64_t)(v340 + 6);
          v272 = v337;
          __asm { FMOV            V8.2S, #1.0 }
          v344 = v336;
          v275 = v27;
          v276 = v26;
          do
          {
            v284 = v25;
            v29 = (unsigned int *)(v272 + 48 * v25);
            v30 = *v29;
            v295 = v29[1];
            v296 = v29[2];
            v31 = *((_QWORD *)v29 + 2);
            v32 = *((_QWORD *)v29 + 5);
            v300 = *((_QWORD *)v29 + 4);
            if (v27)
            {
              v33 = *(os_unfair_lock_s **)(v32 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v33);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v26);
            sub_1B1A18378(v274, (uint64_t)v404, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v34 = v289[4];
            v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v289[6] = ecs_stack_allocator_allocate(v34, 48 * v35, 8);
            v289[7] = v35;
            v273[1] = 0;
            v273[2] = 0;
            *v273 = 0;
            swift_release();
            if (v31)
            {
              if (v300)
              {
                v36 = (_QWORD *)*v12;
                v37 = swift_isUniquelyReferenced_nonNull_native();
                *v12 = (uint64_t)v36;
                if ((v37 & 1) == 0)
                  v36 = sub_1B1C6899C(0, v36[2] + 1, 1, v36);
                v38 = 0;
                v39 = v270;
                v39.i32[3] = v271;
                v405 = 0;
                v406 = 0u;
                v407 = 0u;
                v408 = xmmword_1B2244E20;
                v409 = v39;
                v410 = _D8;
                v411 = 0;
                v412 = -1;
                *v12 = (uint64_t)v36;
                v41 = HIDWORD(v314);
                v40 = v319.i32[3];
                do
                {
                  v318 = v41;
                  v324 = v40;
                  v50 = *(_QWORD *)(v31 + 8 * v38);
                  v51 = (_QWORD *)*v12;
                  v52 = swift_isUniquelyReferenced_nonNull_native();
                  *v12 = (uint64_t)v51;
                  if ((v52 & 1) == 0)
                  {
                    v51 = sub_1B1C6899C(0, v51[2] + 1, 1, v51);
                    *v12 = (uint64_t)v51;
                  }
                  v54 = v51[2];
                  v53 = v51[3];
                  if (v54 >= v53 >> 1)
                    *v12 = (uint64_t)sub_1B1C6899C(v53 > 1, v54 + 1, 1, v51);
                  sub_1B1DC9C14(v54, (uint64_t)&v405);
                  nullsub_16(v55);
                  v56 = *(_QWORD *)(v32 + 48);
                  v57 = *(_QWORD *)(v56 + 16);
                  if (v57)
                  {
                    v58 = (_QWORD *)(v56 + 56);
                    v59 = v58;
                    v60 = v57;
                    while ((ValueMetadata *)*(v59 - 3) != &type metadata for Position)
                    {
                      v59 += 5;
                      if (!--v60)
                      {
                        v43 = 0;
                        goto LABEL_35;
                      }
                    }
                    v43 = (float32x4_t *)(*(_QWORD *)(v32 + 128) + *v59 + 16 * v50);
LABEL_35:
                    while ((ValueMetadata *)*(v58 - 3) != &type metadata for Velocity)
                    {
                      v58 += 5;
                      if (!--v57)
                      {
                        v42 = 0;
                        goto LABEL_24;
                      }
                    }
                    v42 = (__int128 *)(*(_QWORD *)(v32 + 128) + *v58 + 16 * v50);
                  }
                  else
                  {
                    v42 = 0;
                    v43 = 0;
                  }
LABEL_24:
                  v44 = sub_1B1FFEC68();
                  v45 = 112 * (v38 + v296);
                  *(_QWORD *)(*v12 + v45 + 32) = v43;
                  nullsub_16(v44);
                  v46 = *v43;
                  v46.i32[3] = v324;
                  v319 = v46;
                  v47 = sub_1B1FFEC68();
                  *(float32x4_t *)(*v12 + v45 + 48) = v319;
                  nullsub_16(v47);
                  v48 = *v42;
                  HIDWORD(v48) = v318;
                  v314 = v48;
                  v49 = sub_1B1FFEC68();
                  *(_OWORD *)(*v12 + v45 + 64) = v314;
                  nullsub_16(v49);
                  v41 = HIDWORD(v314);
                  v40 = v319.i32[3];
                  ++v38;
                }
                while (v38 != v300);
              }
            }
            else if ((_DWORD)v30 != (_DWORD)v295)
            {
              v61 = (_QWORD *)*v12;
              v62 = swift_isUniquelyReferenced_nonNull_native();
              *v12 = (uint64_t)v61;
              if ((v62 & 1) == 0)
                v61 = sub_1B1C6899C(0, v61[2] + 1, 1, v61);
              v63 = v270;
              v63.i32[3] = v265;
              v64 = v296 - v30;
              v413 = 0;
              v414 = 0u;
              v415 = 0u;
              v416 = xmmword_1B2244E20;
              v417 = v63;
              v418 = _D8;
              v419 = 0;
              v420 = -1;
              *v12 = (uint64_t)v61;
              v66 = HIDWORD(v304);
              v65 = HIDWORD(v309);
              do
              {
                v308 = v66;
                v313 = v65;
                sub_1B1DC9A94();
                v76 = *(_QWORD *)(*v12 + 16);
                sub_1B1DC9B30(v76);
                sub_1B1DC9C14(v76, (uint64_t)&v413);
                nullsub_16(v77);
                v78 = *(_QWORD *)(v32 + 48);
                v79 = *(_QWORD *)(v78 + 16);
                if (v79)
                {
                  v80 = (_QWORD *)(v78 + 56);
                  v81 = v80;
                  v82 = v79;
                  while ((ValueMetadata *)*(v81 - 3) != &type metadata for Position)
                  {
                    v81 += 5;
                    if (!--v82)
                    {
                      v68 = 0;
                      goto LABEL_52;
                    }
                  }
                  v68 = (__int128 *)(*(_QWORD *)(v32 + 128) + *v81 + 16 * v30);
LABEL_52:
                  while ((ValueMetadata *)*(v80 - 3) != &type metadata for Velocity)
                  {
                    v80 += 5;
                    if (!--v79)
                    {
                      v67 = 0;
                      goto LABEL_45;
                    }
                  }
                  v67 = (__int128 *)(*(_QWORD *)(v32 + 128) + *v80 + 16 * v30);
                }
                else
                {
                  v67 = 0;
                  v68 = 0;
                }
LABEL_45:
                v69 = v30 + 1;
                v70 = sub_1B1FFEC68();
                v71 = 112 * (v64 + v30);
                *(_QWORD *)(*v12 + v71 + 32) = v68;
                nullsub_16(v70);
                v72 = *v68;
                HIDWORD(v72) = v313;
                v309 = v72;
                v73 = sub_1B1FFEC68();
                *(_OWORD *)(*v12 + v71 + 48) = v309;
                nullsub_16(v73);
                v74 = *v67;
                HIDWORD(v74) = v308;
                v304 = v74;
                v75 = sub_1B1FFEC68();
                *(_OWORD *)(*v12 + v71 + 64) = v304;
                nullsub_16(v75);
                v66 = HIDWORD(v304);
                v65 = HIDWORD(v309);
                v30 = v69;
              }
              while (v69 != v295);
            }
            sub_1B1F05D48(v289, (unsigned __int16 **)v343, (uint64_t)v404);
            v26 = v276;
            if (*(_QWORD *)(v289[13] + 16))
            {
              v83 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v83, v32);
              swift_bridgeObjectRelease();
              v84 = swift_isUniquelyReferenced_nonNull_native();
              v85 = v289[13];
              if ((v84 & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v85 + 16));
              }
              else
              {
                v86 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v85 + 24) >= 2uLL)
                {
                  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                  v86 = (_QWORD *)swift_allocObject();
                  v87 = j__malloc_size(v86);
                  v86[2] = 0;
                  v86[3] = 2 * ((uint64_t)(v87 - 32) / 72);
                }
                *v269 = v86;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v289[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v88 = *(char **)(v32 + 232);
                v89 = *(char **)(v32 + 256);
                if (v88 == v89)
                {
                  v90 = *(char **)(v32 + 240);
                }
                else
                {
                  sub_1B1A1059C(v89, v88);
                  v89 = *(char **)(v32 + 232);
                  v90 = *(char **)(v32 + 240);
                  if (v90 == v89)
                  {
                    v90 = 0;
                    v89 = 0;
                    *(_QWORD *)(v32 + 232) = 0;
                    *(_QWORD *)(v32 + 240) = 0;
                  }
                }
                *(_QWORD *)(v32 + 248) = v90;
                *(_QWORD *)(v32 + 256) = v89;
              }
            }
            ecs_stack_allocator_pop_snapshot(v276);
            v27 = v275;
            if ((v275 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 376));
            }
            swift_release();
            v25 = v284 + 1;
            v24 = v288;
          }
          while (v284 + 1 != v277);
        }
        else
        {
          v294 = 0;
        }
      }
      v317 = vmaxnmq_f32(v262, (float32x4_t)xmmword_1B22932E0);
      v391 = v24;
      v392 = v279;
      v393 = BYTE4(v279);
      v394 = v280;
      v395 = v281;
      v396 = v282;
      v397 = v286;
      v398 = v267;
      v399 = v287;
      v400 = v268;
      v401 = v10;
      v402 = v264;
      v403 = v266;
      if (sub_1B1BEC0FC((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, 0) && v264 >= 1)
      {
        v134 = v287;
        if (v287)
        {
          v135 = 0;
          v136 = v10[4];
          v137 = *(unsigned __int8 *)(v268 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v384 = v24;
          v385 = v279;
          v386 = BYTE4(v279);
          v387 = v280;
          v388 = v281;
          v389 = v282;
          v290 = v137;
          v297 = v136;
          do
          {
            v138 = (unsigned int *)(v286 + 48 * v135);
            v139 = *v138;
            v301 = v138[1];
            v305 = v138[2];
            v140 = *((_QWORD *)v138 + 2);
            v141 = *((_QWORD *)v138 + 4);
            v142 = *((_QWORD *)v138 + 5);
            v310 = v135;
            if (v137)
            {
              v143 = *(os_unfair_lock_s **)(v142 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v143);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v142 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v136);
            sub_1B1A18378((uint64_t)(v293 + 6), (uint64_t)v390, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v144 = v293[4];
            v145 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v142 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v293[6] = ecs_stack_allocator_allocate(v144, 48 * v145, 8);
            v293[7] = v145;
            v293[9] = 0;
            v293[10] = 0;
            v293[8] = 0;
            swift_release();
            if (v140)
            {
              if (v141)
              {
                v146 = (_QWORD *)*v12;
                v147 = swift_isUniquelyReferenced_nonNull_native();
                *v12 = (uint64_t)v146;
                if ((v147 & 1) == 0)
                  v146 = sub_1B1FFEFB0(v146);
                v148 = 0;
                *v12 = (uint64_t)v146;
                do
                {
                  v151 = *(_QWORD *)(v142 + 48);
                  v152 = v151 + 32;
                  if (*(ValueMetadata **)(v151 + 32) == &type metadata for Orientation)
                  {
                    v149 = 0;
                  }
                  else
                  {
                    v149 = 0;
                    v153 = *(_QWORD *)(v151 + 16);
                    v154 = v151 + 72;
                    v155 = v153 - 1;
                    do
                    {
                      v156 = *(ValueMetadata **)(v154 + v149);
                      v149 += 40;
                      --v155;
                    }
                    while (v156 != &type metadata for Orientation);
                  }
                  v319 = *(float32x4_t *)(*(_QWORD *)(v142 + 128)
                                        + *(_QWORD *)(v152 + v149 + 24)
                                        + 16 * *(_QWORD *)(v140 + 8 * v148));
                  v150 = sub_1B1FFEC68();
                  *(float32x4_t *)(*v12 + 112 * (v148 + v305) + 80) = v319;
                  nullsub_16(v150);
                  ++v148;
                }
                while (v148 != v141);
              }
            }
            else if ((_DWORD)v139 != (_DWORD)v301)
            {
              v165 = (_QWORD *)*v12;
              v166 = swift_isUniquelyReferenced_nonNull_native();
              *v12 = (uint64_t)v165;
              if ((v166 & 1) == 0)
              {
                v166 = (uint64_t)sub_1B1FFEFB0(v165);
                v165 = (_QWORD *)v166;
              }
              v167 = v305 - v139;
              *v12 = (uint64_t)v165;
              nullsub_16(v166);
              v168 = sub_1B1FFEC68();
              nullsub_16(v168);
              do
              {
                v171 = *(_QWORD *)(v142 + 48);
                v172 = v171 + 32;
                if (*(ValueMetadata **)(v171 + 32) == &type metadata for Orientation)
                {
                  v169 = 0;
                }
                else
                {
                  v169 = 0;
                  v173 = *(_QWORD *)(v171 + 16);
                  v174 = v171 + 72;
                  v175 = v173 - 1;
                  do
                  {
                    v176 = *(ValueMetadata **)(v174 + v169);
                    v169 += 40;
                    --v175;
                  }
                  while (v176 != &type metadata for Orientation);
                }
                v319 = *(float32x4_t *)(*(_QWORD *)(v142 + 128) + *(_QWORD *)(v172 + v169 + 24) + 16 * v139);
                v170 = sub_1B1FFEC68();
                *(float32x4_t *)(*v12 + 112 * (v167 + v139) + 80) = v319;
                nullsub_16(v170);
                ++v139;
              }
              while (v139 != v301);
            }
            v10 = v293;
            sub_1B1F05D48(v293, &v384, (uint64_t)v390);
            v137 = v290;
            if (*(_QWORD *)(v293[13] + 16))
            {
              v157 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v157, v142);
              swift_bridgeObjectRelease();
              v158 = swift_isUniquelyReferenced_nonNull_native();
              v159 = v293[13];
              if ((v158 & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v159 + 16));
              }
              else
              {
                v160 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v159 + 24) >= 2uLL)
                {
                  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                  v160 = (_QWORD *)swift_allocObject();
                  v161 = j__malloc_size(v160);
                  v160[2] = 0;
                  v160[3] = 2 * ((uint64_t)(v161 - 32) / 72);
                }
                v293[13] = v160;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v293[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v162 = *(char **)(v142 + 232);
                v163 = *(char **)(v142 + 256);
                if (v162 == v163)
                {
                  v164 = *(char **)(v142 + 240);
                }
                else
                {
                  sub_1B1A1059C(v163, v162);
                  v163 = *(char **)(v142 + 232);
                  v164 = *(char **)(v142 + 240);
                  if (v164 == v163)
                  {
                    v164 = 0;
                    v163 = 0;
                    *(_QWORD *)(v142 + 232) = 0;
                    *(_QWORD *)(v142 + 240) = 0;
                  }
                }
                *(_QWORD *)(v142 + 248) = v164;
                *(_QWORD *)(v142 + 256) = v163;
              }
            }
            v136 = v297;
            ecs_stack_allocator_pop_snapshot(v297);
            if ((v290 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v142 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v142 + 376));
            }
            swift_release();
            v135 = v310 + 1;
            v134 = v287;
          }
          while (v310 + 1 != v287);
        }
      }
      else
      {
        v134 = v287;
      }
      v371 = v288;
      v372 = v279;
      v373 = BYTE4(v279);
      v374 = v280;
      v375 = v281;
      v376 = v282;
      v377 = v286;
      v378 = v267;
      v379 = v134;
      v380 = v268;
      v381 = v10;
      v382 = v264;
      v383 = v266;
      if (sub_1B1BEC0FC((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, 0))
      {
        v5 = v283;
        if (v264 >= 1 && v287)
        {
          v177 = 0;
          v178 = v10[4];
          v306 = *(unsigned __int8 *)(v268 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v291 = (uint64_t)(v10 + 6);
          v285 = v10 + 8;
          v179 = v286;
          v278 = v178;
          do
          {
            v302 = v177;
            v180 = (unsigned int *)(v179 + 48 * v177);
            v181 = *v180;
            v311 = v180[1];
            v182 = v180[2];
            v183 = (uint64_t *)*((_QWORD *)v180 + 2);
            v184 = *((_QWORD *)v180 + 4);
            v185 = *((_QWORD *)v180 + 5);
            if (v306)
            {
              v186 = *(os_unfair_lock_s **)(v185 + 376);
              swift_retain();
              os_unfair_lock_lock(v186);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v185 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v178);
            sub_1B1A18378(v291, (uint64_t)&v357, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v298 = v293[4];
            v187 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v185 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v293[6] = ecs_stack_allocator_allocate(v298, 48 * v187, 8);
            v293[7] = v187;
            v285[1] = 0;
            v285[2] = 0;
            *v285 = 0;
            swift_release();
            if (v183)
            {
              for (; v184; --v184)
              {
                v188 = *v183++;
                sub_1B1D84344(v317, v185, v182++, v188, v283);
              }
              v189 = v293;
              v190 = v319;
            }
            else
            {
              v190 = v319;
              if ((_DWORD)v181 == (_DWORD)v311)
              {
                v189 = v293;
              }
              else
              {
                v191 = v182 - v181;
                v192 = v319.i32[3];
                v189 = v293;
                do
                {
                  v205 = *(_QWORD *)(v185 + 48);
                  v206 = v205 + 32;
                  if (*(ValueMetadata **)(v205 + 32) == &type metadata for Scale1)
                  {
                    v193 = 0;
                  }
                  else
                  {
                    v193 = 0;
                    v207 = *(_QWORD *)(v205 + 16);
                    v208 = v205 + 72;
                    v209 = v207 - 1;
                    do
                    {
                      v210 = *(ValueMetadata **)(v208 + v193);
                      v193 += 40;
                      --v209;
                    }
                    while (v210 != &type metadata for Scale1);
                  }
                  v194 = v181 + 1;
                  v195 = v181 + v191;
                  v196 = *(float *)(*(_QWORD *)(v185 + 128) + *(_QWORD *)(v206 + v193 + 24) + 4 * v181);
                  v197 = 0.000001;
                  if (v196 <= 0.000001)
                    v196 = 0.000001;
                  v198 = vmulq_n_f32(v317, v196);
                  v198.i32[3] = v192;
                  v322 = v198;
                  v199 = sub_1B1FFEC68();
                  v200 = 112 * v195;
                  *(float32x4_t *)(*v12 + 112 * v195 + 96) = v322;
                  nullsub_16(v199);
                  if ((float)((float)(*(float *)(*v12 + v200 + 104)
                                     + (float)(*(float *)(*v12 + v200 + 96) + *(float *)(*v12 + v200 + 100)))
                             * 0.33333) > 0.000001)
                    v201 = (float)(*(float *)(*v12 + v200 + 104)
                                 + (float)(*(float *)(*v12 + v200 + 96) + *(float *)(*v12 + v200 + 100)))
                         * 0.33333;
                  else
                    v201 = 0.000001;
                  if ((float)((float)(v201 * (float)(v201 * v201)) * 0.5236) > 0.000001)
                    v197 = (float)(v201 * (float)(v201 * v201)) * 0.5236;
                  v202 = sub_1B1FFEC68();
                  *(float *)(*v12 + v200 + 112) = v201;
                  nullsub_16(v202);
                  v203 = sub_1B1F029B4();
                  *(float *)(v204 + 84) = v197;
                  ((void (*)(unsigned __int16 **, _QWORD))v203)(&v358, 0);
                  v190 = v322;
                  v192 = v322.i32[3];
                  ++v181;
                }
                while (v194 != v311);
              }
            }
            v319 = v190;
            v351 = v288;
            v352 = v279;
            v353 = BYTE4(v279);
            v354 = v280;
            v355 = v281;
            v356 = v282;
            sub_1B1F05D48(v189, &v351, (uint64_t)&v357);
            sub_1B1F03804((char *)v185);
            v178 = v278;
            ecs_stack_allocator_pop_snapshot(v278);
            if ((v306 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v185 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v185 + 376));
            }
            swift_release();
            v177 = v302 + 1;
            v5 = v283;
            v179 = v286;
          }
          while (v302 + 1 != v287);
        }
      }
      else
      {
        v358 = v288;
        v359 = v279;
        v360 = BYTE4(v279);
        v361 = v280;
        v362 = v281;
        v363 = v282;
        v364 = v286;
        v365 = v267;
        v366 = v287;
        v367 = v268;
        v368 = v10;
        v369 = v264;
        v370 = v266;
        v5 = v283;
        if (sub_1B1BEC0FC((uint64_t)&type metadata for Scale3, (uint64_t)&off_1E63BC558, 0) && v264 >= 1 && v287)
        {
          v211 = v286;
          v212 = 0;
          v213 = v10[4];
          i = *(unsigned __int8 *)(v268 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v303 = (uint64_t)(v10 + 6);
          v299 = v10 + 8;
          v292 = i;
          v307 = v213;
          do
          {
            v323 = v212;
            v215 = (unsigned int *)(v211 + 48 * v212);
            v216 = *v215;
            v312 = v215[1];
            v217 = v215[2];
            v218 = (uint64_t *)*((_QWORD *)v215 + 2);
            v219 = *((_QWORD *)v215 + 4);
            v220 = *((_QWORD *)v215 + 5);
            if (i)
            {
              v221 = *(os_unfair_lock_s **)(v220 + 376);
              swift_retain();
              os_unfair_lock_lock(v221);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v220 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v213);
            sub_1B1A18378(v303, (uint64_t)&v351, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v222 = v293[4];
            v223 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v220 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v293[6] = ecs_stack_allocator_allocate(v222, 48 * v223, 8);
            v293[7] = v223;
            v299[1] = 0;
            v299[2] = 0;
            *v299 = 0;
            swift_release();
            if (v218)
            {
              v5 = v283;
              v224 = v294;
              v225 = v279;
              for (i = v292; v219; --v219)
              {
                v226 = *v218++;
                sub_1B1D84450(v317, v220, v217++, v226, v283);
              }
            }
            else
            {
              v5 = v283;
              v224 = v294;
              v225 = v279;
              i = v292;
              if ((_DWORD)v216 != (_DWORD)v312)
              {
                do
                  sub_1B1D84450(v317, v220, v217++, v216++, v283);
                while (v312 != v216);
              }
            }
            v345 = v288;
            v346 = v225;
            v347 = BYTE4(v279);
            v348 = v280;
            v349 = v281;
            v350 = v282;
            sub_1B1F05D48(v293, &v345, (uint64_t)&v351);
            v294 = v224;
            sub_1B1F03804((char *)v220);
            v213 = v307;
            ecs_stack_allocator_pop_snapshot(v307);
            if ((i & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v220 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v220 + 376));
            }
            swift_release();
            v212 = v323 + 1;
            v211 = v286;
          }
          while (v323 + 1 != v287);
        }
      }
    }
  }
  v91 = *v12;
  v92 = *(_QWORD *)(*v12 + 16);
  if (v92)
  {
    v93 = (float32x4_t)xmmword_1B22685F0;
    v94 = (float32x4_t)xmmword_1B2246ED0;
    *(_OWORD *)(v5 + 112) = xmmword_1B22685F0;
    *(_OWORD *)(v5 + 128) = xmmword_1B2246ED0;
    v95 = (float32x4_t *)(v91 + 48);
    v96 = v92;
    do
    {
      v97 = v93.i32[3];
      v98 = *v95;
      v93.i32[3] = 0;
      v98.i32[3] = 0;
      v99 = v94.i32[3];
      v100 = vminnmq_f32(v93, v98);
      v93 = v100;
      v93.i32[3] = v97;
      *(float32x4_t *)(v5 + 112) = v93;
      v101 = *v95;
      v95 += 7;
      v102 = v101;
      v94.i32[3] = 0;
      v102.i32[3] = 0;
      v103 = vmaxnmq_f32(v94, v102);
      v94 = v103;
      v94.i32[3] = v99;
      *(float32x4_t *)(v5 + 128) = v94;
      --v96;
    }
    while (v96);
    v104 = (__n128)vsubq_f32(v94, v93);
    v320 = v103;
    if (v104.n128_f32[0] <= v104.n128_f32[1])
    {
      v106 = v104.n128_f32[0];
    }
    else
    {
      if ((v104.n128_u32[1] & 0x7FFFFF) != 0)
        v105 = v104.n128_f32[0];
      else
        v105 = v104.n128_f32[1];
      if ((~v104.n128_u32[1] & 0x7F800000) != 0)
        v106 = v104.n128_f32[1];
      else
        v106 = v105;
    }
    v315 = v100;
    if (v106 > v104.n128_f32[2])
    {
      if ((v104.n128_u32[2] & 0x7FFFFF) != 0)
        v107 = v106;
      else
        v107 = v104.n128_f32[2];
      if ((~v104.n128_u32[2] & 0x7F800000) != 0)
        v106 = v104.n128_f32[2];
      else
        v106 = v107;
    }
    *v263 = v106 >= 0.0;
    v108 = sub_1B1BBE134(v104);
    if (v106 < 0.0)
    {
      *v263 = 0;
    }
    else
    {
      *v263 = v108 > 0.001;
      if (v108 > 0.001)
      {
        v109.i32[3] = v315.i32[3];
        *(float32x2_t *)v110.f32 = vadd_f32(*(float32x2_t *)v315.f32, (float32x2_t)vdup_n_s32(0xBA83126F));
        v110.f32[2] = v315.f32[2] + -0.001;
        v110.i32[3] = 0;
        *(float32x2_t *)v109.f32 = vadd_f32(*(float32x2_t *)v320.f32, (float32x2_t)vdup_n_s32(0x3A83126Fu));
        v109.f32[2] = v320.f32[2] + 0.001;
        v111 = vsubq_f32(v109, v110);
        v112.i64[0] = 0x3F0000003F000000;
        v112.i64[1] = 0x3F0000003F000000;
        v113 = vaddq_f32(v110, vmulq_f32(v111, v112));
        while (1)
        {
          v114 = v111.f32[0];
          if (v111.f32[0] > v111.f32[1])
          {
            v114 = v111.f32[1];
            if ((~v111.i32[1] & 0x7F800000) == 0)
            {
              if ((v111.i32[1] & 0x7FFFFF) != 0)
                v114 = v111.f32[0];
              else
                v114 = v111.f32[1];
            }
          }
          if ((v111.i32[2] & 0x7FFFFF) != 0)
            v115 = v114;
          else
            v115 = v111.f32[2];
          if ((~v111.i32[2] & 0x7F800000) != 0)
            v115 = v111.f32[2];
          if (v114 > v111.f32[2])
            v114 = v115;
          v116 = v111.f32[0];
          if (v111.f32[1] >= v111.f32[0])
          {
            v116 = (v111.i32[1] & 0x7FFFFF) != 0 ? v111.f32[0] : v111.f32[1];
            if ((~v111.i32[1] & 0x7F800000) != 0)
              v116 = v111.f32[1];
          }
          if (v111.f32[2] >= v116)
          {
            if ((v111.i32[2] & 0x7FFFFF) == 0)
              v116 = v111.f32[2];
            if ((~v111.i32[2] & 0x7F800000) != 0)
              v116 = v111.f32[2];
          }
          if (v114 >= (float)(v116 * 0.01))
            break;
          if (v111.f32[1] > v111.f32[2])
            v117 = v111.f32[1];
          else
            v117 = v111.f32[2];
          v118 = v111.f32[0] > v111.f32[2] || v111.f32[0] > v111.f32[1];
          v119 = (int8x16_t)v111;
          if (v118)
            v120 = 0;
          else
            v120 = -1;
          *(float *)v119.i32 = v117 * 0.01;
          v121 = vbslq_s8((int8x16_t)vdupq_n_s32(v120), v119, (int8x16_t)v111);
          v122 = *(float *)&v121.i32[2];
          if (*(float *)&v121.i32[1] > *(float *)v121.i32 || *(float *)&v121.i32[1] > *(float *)&v121.i32[2])
          {
            v111 = (float32x4_t)v121;
          }
          else
          {
            if (*(float *)v121.i32 > *(float *)&v121.i32[2])
              v122 = *(float *)v121.i32;
            v124 = v122 * 0.01;
            v111 = (float32x4_t)v121;
            v111.f32[1] = v124;
          }
          if (v111.f32[2] <= *(float *)v121.i32 && v111.f32[2] <= v111.f32[1])
          {
            if (*(float *)v121.i32 <= v111.f32[1])
              *(float *)v121.i32 = v111.f32[1];
            v111.f32[2] = *(float *)v121.i32 * 0.01;
          }
        }
        v125.i64[0] = 0x3F0000003F000000;
        v125.i64[1] = 0x3F0000003F000000;
        v126 = vmulq_f32(v111, v125);
        v127 = vsubq_f32(v113, v126);
        v128 = (__n128)vsubq_f32(vaddq_f32(v113, v126), v127);
        v129 = v128.n128_f32[1];
        v130 = v128.n128_f32[2];
        v131 = vmuls_lane_f32(vmuls_lane_f32(v128.n128_f32[0], (float32x2_t)v128.n128_u64[0], 1), (float32x4_t)v128, 2);
        v316 = (float32x4_t)v128;
        v321 = v127;
        v132 = sub_1B1BBE134(v128);
        if ((unint64_t)v92 < 0x41)
          v133 = v132 * 0.25;
        else
          v133 = powf(v131 / (float)v92, 0.333);
        v227 = powf((float)*(uint64_t *)(v5 + 48), 0.333);
        v228 = powf(v227 + -1.0, 3.0);
        v229 = powf(v131 / v228, 0.333) * 1.0001;
        if (v229 > v133)
          v133 = v229;
        *(float *)(v5 + 104) = v133;
        v230.i32[3] = v316.i32[3];
        v231 = (uint64_t)(float)(v316.f32[0] / v133);
        v232 = (uint64_t)(float)(v129 / v133);
        *(_QWORD *)(v5 + 56) = v231 + 1;
        *(_QWORD *)(v5 + 64) = v232 + 1;
        v233 = (uint64_t)(float)(v130 / v133);
        *(_QWORD *)(v5 + 72) = v233 + 1;
        *(_QWORD *)(v5 + 80) = v231;
        *(_QWORD *)(v5 + 88) = v232;
        *(_QWORD *)(v5 + 96) = v233;
        v234.i64[0] = 0x3F0000003F000000;
        v234.i64[1] = 0x3F0000003F000000;
        v230.f32[0] = (float)(v231 + 1);
        v230.f32[1] = (float)(v232 + 1);
        v235 = vaddq_f32(v321, vmulq_f32(v316, v234));
        v230.f32[2] = (float)(v233 + 1);
        v236 = vmulq_n_f32(v230, v133 * 0.5);
        *(float32x4_t *)(v5 + 112) = vsubq_f32(v235, v236);
        *(float32x4_t *)(v5 + 128) = vaddq_f32(v235, v236);
        v237 = (v231 + 1) * (v232 + 1);
        v238 = v237 * (v233 + 1);
        if (v238)
        {
          v239 = sub_1B1DC9A88();
          nullsub_16(v239);
          v240 = sub_1B1DC9A88();
          nullsub_16(v240);
          v241 = sub_1B1DC9A88();
          nullsub_16(v241);
          v242 = sub_1B1DC9A88();
          nullsub_16(v242);
          v243 = sub_1B1DC9A88();
          nullsub_16(v243);
          do
          {
            sub_1B1DC9A88();
            v244 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 16);
            sub_1B1DC9B24(v244);
            v245 = sub_1B1DC9B80(v244, -1, -1);
            nullsub_16(v245);
            --v238;
          }
          while (v238);
          v133 = *(float *)(v5 + 104);
          v237 = *(_QWORD *)(v5 + 64) * *(_QWORD *)(v5 + 56);
        }
        v246 = sub_1B1C7A1C4(*v12);
        if (v246)
        {
          v247 = v246;
          v248 = 0;
          v249 = (_QWORD *)(v5 + 40);
          v250 = 48;
          v251 = 1.0 / v133;
          do
          {
            v254 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(*(_QWORD *)(v5 + 16) + v250), *(float32x4_t *)(v5 + 112)), v251);
            if (((~v254.i32[0] & 0x7F800000) != 0 || (v254.i32[0] & 0x7FFFFF) == 0)
              && ((~v254.i32[1] & 0x7F800000) != 0 || (v254.i32[1] & 0x7FFFFF) == 0)
              && ((~v254.i32[2] & 0x7F800000) != 0 || (v254.i32[2] & 0x7FFFFF) == 0))
            {
              v258 = v5;
              v259 = (uint64_t)v254.f32[0] + v237 * (uint64_t)v254.f32[2] + *(_QWORD *)(v5 + 56) * (uint64_t)v254.f32[1];
              v260 = *(_QWORD *)(v258 + 40) + 32;
              if ((*(_QWORD *)(v260 + 16 * v259) & 0x8000000000000000) != 0)
              {
                v252 = sub_1B1FFEC74();
                *(_QWORD *)(*v249 + 16 * v259 + 32) = v248;
              }
              else
              {
                v261 = *(_QWORD *)(v260 + 16 * v259 + 8);
                v252 = sub_1B1FFEC68();
                *(_QWORD *)(*v12 + 112 * v261 + 128) = v248;
              }
              nullsub_16(v252);
              v253 = sub_1B1FFEC74();
              *(_QWORD *)(*v249 + 16 * v259 + 40) = v248;
              nullsub_16(v253);
              v5 = v283;
              v251 = 1.0 / v133;
            }
            ++v248;
            v250 += 112;
          }
          while (v247 != v248);
        }
      }
    }
  }
}

uint64_t sub_1B1D7D20C(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float32x4_t *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x4_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  float32x4_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v12 = a5;
  v13 = a4;
  v14 = a2.n128_f32[0];
  a2.n128_f32[0] = 1.0 / *(float *)(a4 + 104);
  v15 = *(_QWORD *)(a4 + 64) * *(_QWORD *)(a4 + 56);
  v16 = (uint64_t)(float)(a2.n128_f32[0] * (float)(a5->f32[1] - *(float *)(a4 + 116)));
  v17 = (uint64_t)(float)(a2.n128_f32[0] * (float)(a5->f32[2] - *(float *)(a4 + 120)));
  v101 = (uint64_t)(float)(a2.n128_f32[0] * (float)(a5->f32[0] - *(float *)(a4 + 112)));
  a2.n128_f32[0] = v14 * v14;
  sub_1B1D84560(v101, v16, v17, v15, a4, a1, a5, a6, a2, a8, a9);
  v19 = a8;
  v20 = a9;
  v95 = 112 * a9 - 112;
  v21 = v17 + 1;
  v97 = v17;
  v98 = v16;
  v104 = v16 + 1;
  v22 = 0.0;
  v23 = 1;
  v102 = v17;
  v134 = a9;
  v122 = a6;
  v130 = v13;
  v106 = v12;
  v135 = a8;
  while (1)
  {
    v105 = v23;
    v125 = v98 - v23;
    v123 = v23 + v98;
    v24 = *(_QWORD *)(v13 + 88);
    v25 = *(_QWORD *)(v13 + 96);
    if (v23 + v98 < v24)
      v24 = v23 + v98;
    v126 = v24;
    v26 = v97 - v23;
    v131 = v97 - v23;
    v27 = v26 & ~(v26 >> 63);
    v28 = v23 + v97;
    v111 = v23 + v97;
    v112 = (v98 - v23) & ~((v98 - v23) >> 63);
    if (v23 + v97 >= v25)
      v28 = *(_QWORD *)(v13 + 96);
    v116 = v28;
    v119 = v26 & ~(v26 >> 63);
    v29 = v101 - v23;
    v103 = v21;
    v113 = v101 - v23;
    v99 = *(_QWORD *)(v13 + 96);
    if (v101 - v23 >= 0)
    {
      if (v25 >= v21)
        v30 = v21;
      else
        v30 = *(_QWORD *)(v13 + 96);
      v107 = v30;
      v31 = (v98 - v23) & ~((v98 - v23) >> 63);
      do
      {
        v34 = v31;
        v18.n128_f32[0] = v14 * v14;
        sub_1B1D84560(v29, v31, v27, v15, v130, a1, v12, v122, v18, v19, v20);
        if (v27 == v116)
        {
          v32 = v113;
          v33 = v34;
        }
        else
        {
          v32 = v113;
          do
          {
            ++v27;
            v18.n128_f32[0] = v14 * v14;
            sub_1B1D84560(v113, v34, v27, v15, v130, a1, v12, v122, v18, v135, v134);
            v33 = v34;
          }
          while (v107 != v27);
        }
        v31 = v33 + 1;
        v20 = v134;
        v19 = v135;
        v29 = v32;
        v27 = v119;
      }
      while (v33 != v126);
    }
    result = v105 + v101;
    v13 = v130;
    if (v105 + v101 >= *(_QWORD *)(v130 + 56))
    {
      v42 = v29 >= 0;
      v43 = v29 + 1;
      v44 = v122;
      if (v29 + 1 >= 0)
      {
        v45 = a1;
        v46 = v131;
LABEL_32:
        v47 = 0;
        v48 = v43;
        goto LABEL_35;
      }
      v48 = 0;
      v47 = 1;
      v45 = a1;
      v46 = v131;
    }
    else
    {
      v36 = v103;
      if (v99 < v103)
        v36 = v99;
      v108 = v36;
      v37 = v112;
      do
      {
        v39 = result;
        v40 = v37;
        v41 = v119;
        v18.n128_f32[0] = v14 * v14;
        sub_1B1D84560(result, v37, v119, v15, v13, a1, v12, v122, v18, v19, v134);
        if (v119 == v116)
        {
          v38 = v40;
        }
        else
        {
          do
          {
            ++v41;
            v18.n128_f32[0] = v14 * v14;
            sub_1B1D84560(v39, v40, v41, v15, v130, a1, v12, v122, v18, v135, v134);
            v38 = v40;
          }
          while (v108 != v41);
        }
        v37 = v38 + 1;
        v19 = v135;
        v13 = v130;
        result = v39;
      }
      while (v38 != v126);
      v42 = 1;
      v43 = v113 + 1;
      v46 = v131;
      if (v113 + 1 >= 0)
      {
        v20 = v134;
        v44 = v122;
        v45 = a1;
        goto LABEL_32;
      }
      v48 = 0;
      v47 = 1;
      v20 = v134;
      v44 = v122;
      v45 = a1;
    }
LABEL_35:
    if (result - 1 >= *(_QWORD *)(v13 + 80))
      v49 = *(_QWORD *)(v13 + 80);
    else
      v49 = result - 1;
    if (v49 < v48)
      goto LABEL_39;
    v51 = *(_QWORD *)(v13 + 88);
    v52 = v123;
    if (v123 >= v51)
      v52 = *(_QWORD *)(v13 + 88);
    v114 = v52;
    v117 = v49;
    v120 = v43;
    if ((v46 & 0x8000000000000000) == 0)
    {
      v100 = v47;
      v109 = result - 1;
      v96 = v48;
      if (v51 >= v104)
        v53 = v104;
      else
        v53 = *(_QWORD *)(v13 + 88);
      v54 = v48;
      v127 = v53;
      do
      {
        v60 = v19;
        v18.n128_f32[0] = v14 * v14;
        result = sub_1B1D84560(v54, v112, v46, v15, v13, v45, v12, v44, v18, v19, v134);
        if (v112 == v114)
        {
          v55 = v12;
          v56 = v44;
          v57 = v15;
          v58 = v45;
          v46 = v131;
        }
        else
        {
          v58 = v45;
          v61 = v112;
          v55 = v12;
          v56 = v44;
          v57 = v15;
          do
          {
            ++v61;
            v18.n128_f32[0] = v14 * v14;
            result = sub_1B1D84560(v54, v61, v131, v15, v13, v58, v55, v56, v18, v60, v134);
            v46 = v131;
          }
          while (v127 != v61);
        }
        v43 = v120;
        v59 = v54++ == v117;
        v19 = v60;
        v45 = v58;
        v15 = v57;
        v44 = v56;
        v12 = v55;
      }
      while (!v59);
      v62 = v112;
      if (v111 < *(_QWORD *)(v13 + 72))
      {
        v20 = v134;
        v48 = v96;
LABEL_60:
        if (v51 >= v104)
          v63 = v104;
        else
          v63 = v51;
        v128 = v63;
        do
        {
          v69 = v48;
          v70 = v19;
          v18.n128_f32[0] = v14 * v14;
          result = sub_1B1D84560(v48, v62, v111, v15, v13, a1, v12, v44, v18, v19, v20);
          if (v62 == v114)
          {
            v20 = v134;
            v64 = v13;
            v65 = v44;
            v66 = v15;
            v67 = v12;
            v68 = v69;
          }
          else
          {
            v20 = v134;
            v64 = v13;
            v65 = v44;
            v66 = v15;
            v67 = v12;
            do
            {
              ++v62;
              v18.n128_f32[0] = v14 * v14;
              result = sub_1B1D84560(v69, v62, v111, v66, v64, a1, v12, v44, v18, v70, v20);
              v68 = v69;
              v20 = v134;
            }
            while (v128 != v62);
          }
          v48 = v68 + 1;
          v43 = v120;
          v44 = v65;
          v13 = v64;
          v12 = v67;
          v19 = v70;
          v15 = v66;
          v62 = v112;
        }
        while (v68 != v117);
        v71 = *(_QWORD *)(v64 + 80);
        if (v100)
        {
          v50 = v109;
          v46 = v131;
          v45 = a1;
          if (v109 >= v71)
            goto LABEL_76;
          goto LABEL_72;
        }
        v50 = v109;
        v46 = v131;
        v45 = a1;
        if (v109 >= v71)
          goto LABEL_82;
LABEL_79:
        if (v50 < v43)
          goto LABEL_88;
        v42 = 1;
        goto LABEL_84;
      }
      v71 = *(_QWORD *)(v13 + 80);
      v20 = v134;
      if (v100)
      {
        v50 = v109;
        if (v109 < v71)
        {
LABEL_72:
          if (v50 < 0)
            goto LABEL_88;
          v43 = 0;
          v42 = 1;
          goto LABEL_84;
        }
LABEL_76:
        if (v71 < 0)
          goto LABEL_88;
        v43 = 0;
      }
      else
      {
        v50 = v109;
        if (v109 < v71)
          goto LABEL_79;
LABEL_82:
        if (v71 < v43)
          goto LABEL_88;
      }
      v42 = 1;
      v50 = v71;
      goto LABEL_84;
    }
    if (v111 < *(_QWORD *)(v13 + 72))
    {
      v100 = v47;
      v109 = result - 1;
      v62 = v112;
      goto LABEL_60;
    }
LABEL_39:
    if (v47)
      v43 = 0;
    if (v49 < v43)
      goto LABEL_87;
    v50 = v49;
LABEL_84:
    v72 = (v46 + 1) & ~((v46 + 1) >> 63);
    v73 = *(_QWORD *)(v13 + 96);
    v74 = v111 - 1;
    if (v111 - 1 >= v73)
      v74 = *(_QWORD *)(v13 + 96);
    v129 = v74;
    if (v74 >= v72)
    {
      v75 = v125;
      v110 = v50;
      v118 = (v46 + 1) & ~((v46 + 1) >> 63);
      if ((v125 & 0x8000000000000000) == 0)
      {
        v115 = *(_QWORD *)(v13 + 96);
        if (v73 >= v102)
          v76 = v102;
        else
          v76 = *(_QWORD *)(v13 + 96);
        v77 = v43;
        v121 = v43;
        v132 = v76;
        do
        {
          v83 = v19;
          v18.n128_f32[0] = v14 * v14;
          result = sub_1B1D84560(v77, v75, v72, v15, v13, v45, v12, v44, v18, v19, v134);
          if (v72 == v129)
          {
            v78 = v12;
            v79 = v44;
            v80 = v15;
            v81 = v83;
            v82 = v45;
            v75 = v125;
          }
          else
          {
            v84 = v45;
            v85 = v72;
            v78 = v12;
            v79 = v44;
            v80 = v15;
            v81 = v83;
            v82 = v84;
            v75 = v125;
            do
            {
              ++v85;
              v18.n128_f32[0] = v14 * v14;
              result = sub_1B1D84560(v77, v75, v85, v15, v13, v82, v78, v79, v18, v81, v134);
              v75 = v125;
            }
            while (v132 != v85);
          }
          v59 = v77++ == v110;
          v19 = v81;
          v45 = v82;
          v15 = v80;
          v44 = v79;
          v12 = v78;
          v72 = v118;
          v43 = v121;
        }
        while (!v59);
        v86 = v123;
        v20 = v134;
        v73 = v115;
        if (v123 >= *(_QWORD *)(v13 + 64))
          goto LABEL_88;
LABEL_107:
        if (v73 >= v102)
          v73 = v102;
        v133 = v73;
        do
        {
          v91 = v20;
          v92 = v43;
          v93 = v19;
          v18.n128_f32[0] = v14 * v14;
          result = sub_1B1D84560(v43, v86, v72, v15, v13, a1, v106, v44, v18, v19, v20);
          if (v72 == v129)
          {
            v86 = v123;
            v20 = v91;
            v87 = v13;
            v88 = v44;
            v89 = v92;
            v90 = v15;
          }
          else
          {
            v94 = v72;
            v20 = v91;
            v87 = v13;
            v88 = v44;
            v86 = v123;
            v90 = v15;
            do
            {
              ++v94;
              v18.n128_f32[0] = v14 * v14;
              result = sub_1B1D84560(v92, v86, v94, v15, v87, a1, v106, v44, v18, v93, v20);
              v89 = v92;
              v20 = v91;
              v86 = v123;
            }
            while (v133 != v94);
          }
          v43 = v89 + 1;
          v44 = v88;
          v13 = v87;
          v19 = v93;
          v15 = v90;
          v72 = v118;
        }
        while (v89 != v110);
        goto LABEL_88;
      }
      v86 = v123;
      if (v123 < *(_QWORD *)(v13 + 64))
        goto LABEL_107;
    }
LABEL_87:
    if (!v42)
      return result;
LABEL_88:
    v22 = v22 + *(float *)(v13 + 104);
    if (v22 >= v14)
      return result;
    v12 = v106;
    if (*(_QWORD *)(*(_QWORD *)v19 + 16) == v20)
      break;
LABEL_3:
    v23 = v105 + 1;
    v21 = v103 + 1;
    ++v104;
    ++v102;
  }
  if (!v20)
  {
    if (v22 >= 0.0)
      return result;
    goto LABEL_3;
  }
  if (*(float *)(*(_QWORD *)v19 + v95 + 120) > v22)
    goto LABEL_3;
  return result;
}

uint64_t sub_1B1D7DBE8(uint64_t a1, char a2, char a3, int a4)
{
  float32x4_t *v4;
  float32x4_t *v5;
  unsigned __int8 v10;
  unsigned __int8 v11;
  int v12;
  uint64_t result;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  ValueMetadata *v19;
  _UNKNOWN **v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t v23;
  int v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _OWORD *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t *v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  __int128 v80;
  int v81;
  int v82;
  int v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _BYTE v111[12];
  int v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  unint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  uint64_t v123;
  float32x4_t *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  float32x4_t v130;
  uint64_t v131;
  float32x4_t v132;
  unint64_t v133;
  unint64_t v134;
  float32x4_t v135[2];
  _BYTE v136[80];
  float32x4_t v137[6];
  char v138;

  v5 = v4;
  swift_retain();
  sub_1B20001B0();
  v11 = v10;
  v12 = v10;
  result = swift_release();
  if (v12 != 2)
  {
    v112 = a4;
    v15 = 0;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(_QWORD *)thread_worker_index(v14)
                    + 8);
    sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAD80, (void (*)(uint64_t))sub_1B19ED84C);
    inited = swift_initStackObject();
    v18 = inited;
    v113 = xmmword_1B226D240;
    *(_OWORD *)(inited + 16) = xmmword_1B226D240;
    v19 = &type metadata for DebugInfoA;
    if ((v11 & 1) == 0)
      v19 = &type metadata for DebugInfoB;
    *(_QWORD *)(inited + 32) = v19;
    v120 = inited + 32;
    v20 = &off_1E636D550;
    if ((v11 & 1) == 0)
      v20 = &off_1E636D640;
    *(_QWORD *)(inited + 40) = v20;
    if (v5[2].i8[0] == 1)
    {
      v21 = sub_1B1AE40EC((float32x4_t)xmmword_1B22932F0);
      v126 = v21;
      if ((a2 & 1) != 0)
      {
        v24 = sub_1B1AE40EC((float32x4_t)xmmword_1B2293300);
        v25 = v5[7];
        v26 = v5[8];
        v25.i32[3] = 1.0;
        v26.i32[3] = 1.0;
        v27.i64[0] = 0x3F0000003F000000;
        v27.i64[1] = 0x3F0000003F000000;
        v28 = vmulq_f32(vaddq_f32(v25, v26), v27);
        v29 = vmulq_f32(vsubq_f32(v26, v25), v27);
        v26.f32[0] = v5[6].f32[2] * 0.1;
        v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 0);
        v30.i32[3] = 0;
        v137[0] = v28;
        v137[1] = vaddq_f32(v29, v30);
        memset(&v137[2], 0, 64);
        v138 = 6;
        v135[0].i8[0] = 1;
        v21 = sub_1B217F570(v18, 0x100000000uLL, v16, (__int128 *)v137, v24);
      }
      if ((a3 & 1) != 0)
      {
        v114 = v5[4].i64[1];
        if (v114)
        {
          v31 = 0;
          v115 = 0;
          v32 = v5[7];
          v121 = v18 + 32;
          v122 = v136;
          v124 = v5;
          v125 = v18;
          v119 = (__int128 *)(v18 + 64);
          v123 = v16;
          while (1)
          {
            v32.i32[1] = v5[7].i32[1];
            v116 = v5[4].i64[0];
            if (v116)
              break;
            v23.i32[0] = v5[6].i32[2];
LABEL_13:
            v32.f32[2] = v32.f32[2] + *(float *)v23.i32;
            if (++v115 == v114)
              goto LABEL_50;
          }
          v33 = 0;
          while (1)
          {
            v32.i32[0] = v5[7].i32[0];
            v34 = v5[3].i64[1];
            if (v34)
              break;
            v23.i32[0] = v5[6].i32[2];
LABEL_17:
            ++v33;
            v32.f32[1] = v32.f32[1] + *(float *)v23.i32;
            if (v33 == v116)
              goto LABEL_13;
          }
          v35 = 0;
          v117 = v31 + v34;
          v118 = v33;
          v23.i32[0] = v5[6].i32[2];
          v127 = v34;
          while (1)
          {
            if ((*(_QWORD *)(v5[2].i64[1] + 16 * v31 + 32) & 0x8000000000000000) != 0)
              goto LABEL_22;
            v40 = vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(v23, 0));
            v130 = v32;
            v41 = v32;
            v41.i32[3] = 1.0;
            v40.i32[3] = 1.0;
            v42.i64[0] = 0x3F0000003F000000;
            v42.i64[1] = 0x3F0000003F000000;
            v135[0] = vmulq_f32(vaddq_f32(v41, v40), v42);
            v135[1] = vmulq_f32(vsubq_f32(v40, v41), v42);
            v43 = v122;
            *v122 = 0u;
            v43[1] = 0u;
            v43[2] = 0u;
            v43[3] = 0u;
            v136[64] = 6;
            MEMORY[0x1E0C80A78](v21, v22);
            *(_QWORD *)&v111[-16] = v135;
            *(_DWORD *)&v111[-8] = v126;
            v44 = *(_QWORD *)(v16 + 32);
            ecs_stack_allocator_push_snapshot(v44);
            v45 = v125;
            v46 = ecs_stack_allocator_allocate(v44, 16 * *(_QWORD *)(v125 + 16) + 32, 8);
            v47 = v46;
            *v46 = &type metadata for DebugInfoWireframePrimitive;
            v46[1] = &off_1E63B2990;
            v46[2] = &type metadata for DebugInfoColor;
            v46[3] = &off_1E637ED40;
            v48 = *(_QWORD *)(v45 + 16);
            v131 = v15;
            v128 = &v111[-32];
            v129 = v111;
            if (!v48)
            {
              v50 = 2;
              goto LABEL_33;
            }
            if (v48 < 4 || (unint64_t)(v46 + 4) < v121 + 16 * v48 && v120 < (unint64_t)&v46[2 * v48 + 4])
              break;
            v49 = v48 & 0x7FFFFFFFFFFFFFFCLL;
            v50 = v48 & 0x7FFFFFFFFFFFFFFCLL | 2;
            v68 = v46 + 8;
            v69 = v48 & 0x7FFFFFFFFFFFFFFCLL;
            v70 = v119;
            do
            {
              v72 = *(v70 - 2);
              v71 = *(v70 - 1);
              v74 = *v70;
              v73 = v70[1];
              v70 += 4;
              *(v68 - 2) = v72;
              *(v68 - 1) = v71;
              *v68 = v74;
              v68[1] = v73;
              v68 += 4;
              v69 -= 4;
            }
            while (v69);
            if (v48 != v49)
              goto LABEL_29;
LABEL_33:
            v54 = *(_QWORD *)(v16 + 16);
            v55 = v54 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
            v56 = *(os_unfair_lock_s **)(v54 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
            swift_retain();
            os_unfair_lock_lock(v56);
            v57 = 0;
            v58 = v47;
            v59 = v50;
            do
            {
              ++v58;
              v57 ^= sub_1B2228CF8();
              --v59;
            }
            while (v59);
            v60 = *(_QWORD **)(v54 + 72);
            v61 = v60[2];
            v5 = v124;
            if (!v61)
              goto LABEL_20;
            v62 = v60[4];
            if (*(_QWORD *)(v62 + 144) != v57)
            {
              v66 = v61 - 1;
              if (!v66)
                goto LABEL_20;
              v67 = v60 + 5;
              while (1)
              {
                v62 = *v67;
                if (*(_QWORD *)(*v67 + 144) == v57)
                  break;
                ++v67;
                if (!--v66)
                  goto LABEL_20;
              }
            }
            v63 = *(_QWORD *)(v62 + 16);
            if (*(_QWORD *)(v63 + 16))
            {
              v64 = sub_1B1DC3AC8(0);
              if ((v65 & 1) != 0)
              {
                v37 = *(_DWORD *)(*(_QWORD *)(v63 + 56) + 4 * v64);
                goto LABEL_21;
              }
            }
LABEL_20:
            v36 = sub_1B1DC9E90(v47, v50);
            v37 = sub_1B1DA8838(v57, 0, v36, MEMORY[0x1E0DEE9D8]);
            swift_release();
LABEL_21:
            v38 = *(_QWORD *)(*(_QWORD *)(v54 + 80) + 8 * v37 + 32);
            v39 = *(os_unfair_lock_s **)(v55 + 24);
            swift_retain();
            os_unfair_lock_unlock(v39);
            swift_release();
            LOBYTE(v133) = 1;
            v16 = v123;
            v15 = v131;
            sub_1B1F0FE74(v38, 1, 1, 0x100000000uLL, v123, (uint64_t)sub_1B1D86A08, (uint64_t)v128);
            swift_release();
            v21 = ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v16 + 32));
            v23.i32[0] = v5[6].i32[2];
            v32 = v130;
            v34 = v127;
LABEL_22:
            ++v35;
            ++v31;
            v32.f32[0] = v32.f32[0] + *(float *)v23.i32;
            if (v35 == v34)
            {
              v31 = v117;
              v33 = v118;
              goto LABEL_17;
            }
          }
          v49 = 0;
          v50 = 2;
LABEL_29:
          v51 = v48 - v49;
          v52 = (__int128 *)(v121 + 16 * v49);
          do
          {
            v53 = *v52++;
            *(_OWORD *)&v46[2 * v50++] = v53;
            --v51;
          }
          while (v51);
          goto LABEL_33;
        }
      }
    }
LABEL_50:
    result = swift_bridgeObjectRelease();
    if ((v112 & 1) != 0)
    {
      v75 = MEMORY[0x1E0DEA968];
      if (v5[2].i8[0] == 1)
      {
        v76 = v5[1].i64[0];
        v77 = *(_QWORD *)(v76 + 16);
        if (v77)
        {
          v78 = 0;
          v79 = (__int128 *)(v76 + 48);
          do
          {
            v80 = *v79;
            v81 = *v79;
            v82 = ~v81 & 0x7F800000;
            v83 = v81 & 0x7FFFFF;
            if (v82)
              v84 = 1;
            else
              v84 = v83 == 0;
            if (!v84
              || ((~DWORD1(v80) & 0x7F800000) == 0 ? (v85 = (DWORD1(v80) & 0x7FFFFF) == 0) : (v85 = 1),
                  !v85 || ((~DWORD2(v80) & 0x7F800000) == 0 ? (v86 = (DWORD2(v80) & 0x7FFFFF) == 0) : (v86 = 1), !v86)))
            {
              ++v78;
            }
            v79 += 7;
            --v77;
          }
          while (v77);
          if (v78 < 1)
          {
            v129 = 0;
          }
          else
          {
            v133 = 0;
            v134 = 0xE000000000000000;
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v133 = 0xD00000000000001DLL;
            v134 = 0x80000001B233ADD0;
            v132.i64[0] = v78;
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            v129 = (_BYTE *)v133;
          }
        }
        else
        {
          v129 = 0;
        }
        sub_1B1B42948();
        v89 = swift_allocObject();
        *(_OWORD *)(v89 + 16) = v113;
        v90 = MEMORY[0x1E0DEB1E8];
        v91 = (float)*(uint64_t *)(v5[1].i64[0] + 16) / (float)*(uint64_t *)(v5[2].i64[1] + 16);
        *(_QWORD *)(v89 + 56) = MEMORY[0x1E0DEB188];
        *(_QWORD *)(v89 + 64) = v90;
        *(float *)(v89 + 32) = v91;
        v131 = sub_1B222877C();
        v130.i64[0] = v92;
        sub_1B1A02758(0, &qword_1ED4BAFF0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v93 = swift_allocObject();
        *(_OWORD *)(v93 + 16) = v113;
        *(_QWORD *)(v93 + 56) = v75;
        *(_QWORD *)(v93 + 32) = 0xD000000000000018;
        *(_QWORD *)(v93 + 40) = 0x80000001B233ACF0;
        sub_1B222A048();
        swift_bridgeObjectRelease();
        v94 = swift_allocObject();
        *(_OWORD *)(v94 + 16) = v113;
        v133 = 0;
        v134 = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        v132.i64[0] = v5[3].i64[1];
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v132.i64[0] = v5[4].i64[0];
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v132.i64[0] = v5[4].i64[1];
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v132.i64[0] = *(_QWORD *)(v5[2].i64[1] + 16);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v95 = v133;
        v96 = v134;
        *(_QWORD *)(v94 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v94 + 32) = v95;
        *(_QWORD *)(v94 + 40) = v96;
        sub_1B222A048();
        swift_bridgeObjectRelease();
        v97 = swift_allocObject();
        *(_OWORD *)(v97 + 16) = v113;
        v133 = 0;
        v134 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v133 = 0xD00000000000001CLL;
        v134 = 0x80000001B233AD30;
        v132.i64[0] = *(_QWORD *)(v5[1].i64[0] + 16);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v98 = v133;
        v99 = v134;
        *(_QWORD *)(v97 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v97 + 32) = v98;
        *(_QWORD *)(v97 + 40) = v99;
        sub_1B222A048();
        swift_bridgeObjectRelease();
        v100 = swift_allocObject();
        *(_OWORD *)(v100 + 16) = v113;
        v133 = 0;
        v134 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v133 = 0xD00000000000001CLL;
        v134 = 0x80000001B233AD50;
        v132 = vsubq_f32(v5[8], v5[7]);
        v101 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
        sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
        sub_1B1A09538(&qword_1EEF5AC68, (unint64_t *)&qword_1ED4BB0A0, v101, MEMORY[0x1E0DEDD80]);
        sub_1B2229FA0();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v102 = v133;
        v103 = v134;
        *(_QWORD *)(v100 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v100 + 32) = v102;
        *(_QWORD *)(v100 + 40) = v103;
        sub_1B222A048();
        swift_bridgeObjectRelease();
        v104 = swift_allocObject();
        *(_OWORD *)(v104 + 16) = v113;
        v133 = 0;
        v134 = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228C98();
        v105 = v133;
        v106 = v134;
        *(_QWORD *)(v104 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v104 + 32) = v105;
        *(_QWORD *)(v104 + 40) = v106;
        sub_1B222A048();
        swift_bridgeObjectRelease();
        v107 = swift_allocObject();
        *(_OWORD *)(v107 + 16) = v113;
        v133 = 0;
        v134 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v133 = 0xD00000000000001CLL;
        v134 = 0x80000001B233AD90;
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v75 = MEMORY[0x1E0DEA968];
        sub_1B2228890();
        v108 = v133;
        v109 = v134;
        *(_QWORD *)(v107 + 56) = v75;
        *(_QWORD *)(v107 + 32) = v108;
        *(_QWORD *)(v107 + 40) = v109;
        sub_1B222A048();
        swift_bridgeObjectRelease();
        v88 = 0xEC0000007D205D47;
        v87 = 0x4E494B434F4C465BLL;
      }
      else
      {
        sub_1B1A02758(0, &qword_1ED4BAFF0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v87 = 0xD000000000000032;
        v88 = 0x80000001B233ACB0;
      }
      v110 = swift_allocObject();
      *(_OWORD *)(v110 + 16) = v113;
      *(_QWORD *)(v110 + 56) = v75;
      *(_QWORD *)(v110 + 32) = v87;
      *(_QWORD *)(v110 + 40) = v88;
      sub_1B222A048();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B1D7E954(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D7E98C + 4 * byte_1B2292198[a1]))(0x636E65756C666E69, 0xE900000000000065);
}

uint64_t sub_1B1D7E98C()
{
  return 0x7473694477656976;
}

uint64_t sub_1B1D7E9AC()
{
  return 0x6C676E4177656976;
}

unint64_t sub_1B1D7E9C0()
{
  return 0xD000000000000010;
}

unint64_t sub_1B1D7EA90()
{
  return 0xD000000000000011;
}

void sub_1B1D7EAA8()
{
  JUMPOUT(0x1B1D7EABCLL);
}

uint64_t sub_1B1D7EAC8()
{
  return 0x64697247776F6873;
}

uint64_t sub_1B1D7EAE0()
{
  return 0x6C6C6543776F6873;
}

uint64_t sub_1B1D7EAF8()
{
  return 0x6F666E49676F6CLL;
}

uint64_t sub_1B1D7EB10(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1D7EB48 + 4 * byte_1B22921A9[a1]))(0x636E65756C666E69, 0xE900000000000065);
}

uint64_t sub_1B1D7EB48()
{
  return 0x7473694477656976;
}

uint64_t sub_1B1D7EB68()
{
  return 0x6C676E4177656976;
}

unint64_t sub_1B1D7EB7C()
{
  return 0xD000000000000010;
}

unint64_t sub_1B1D7EC4C()
{
  return 0xD000000000000011;
}

void sub_1B1D7EC64()
{
  JUMPOUT(0x1B1D7EC78);
}

uint64_t sub_1B1D7EC84()
{
  return 0x64697247776F6873;
}

uint64_t sub_1B1D7EC9C()
{
  return 0x6C6C6543776F6873;
}

uint64_t sub_1B1D7ECB4()
{
  return 0x6F666E49676F6CLL;
}

uint64_t sub_1B1D7ECCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1D7EB10(*a1);
  v5 = v4;
  if (v3 == sub_1B1D7EB10(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1D7ED54()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D7E954(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D7EDB4()
{
  unsigned __int8 *v0;

  sub_1B1D7E954(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1D7EDF4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1D7E954(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1D7EE50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D80E60();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D7EE7C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1D7E954(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1D7EEA4()
{
  unsigned __int8 *v0;

  return sub_1B1D7EB10(*v0);
}

uint64_t sub_1B1D7EEAC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1D80E60();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D7EED0()
{
  sub_1B1D870C8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D7EEF8()
{
  sub_1B1D870C8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1D7EF20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  _BYTE v13[32];
  _BYTE v14[32];
  char v15;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5E390, (uint64_t (*)(void))sub_1B1D870C8, (uint64_t)&type metadata for ParticleFlockingSolver.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v13[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D870C8();
  sub_1B222A180();
  v13[0] = 0;
  sub_1B2229934();
  if (!v2)
  {
    v13[0] = 1;
    sub_1B2229934();
    v13[0] = 2;
    sub_1B2229934();
    v13[0] = 3;
    sub_1B2229934();
    v13[0] = 4;
    sub_1B2229940();
    v13[0] = *(_BYTE *)(v3 + 32);
    v15 = 5;
    sub_1B1A71314();
    sub_1B2229958();
    sub_1B1D8710C(v3 + 48, (uint64_t)v14);
    sub_1B1D8710C((uint64_t)v14, (uint64_t)v13);
    v15 = 6;
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v11, MEMORY[0x1E0DEDD60]);
    sub_1B2229904();
    v13[0] = 7;
    sub_1B2229934();
    v13[0] = 8;
    sub_1B2229934();
    v13[0] = 9;
    sub_1B2229934();
    v13[0] = 10;
    sub_1B2229934();
    v13[0] = 11;
    sub_1B2229934();
    v13[0] = 12;
    sub_1B2229934();
    v13[0] = 13;
    sub_1B2229934();
    v13[0] = 14;
    sub_1B222991C();
    v13[0] = 15;
    sub_1B222991C();
    v13[0] = 16;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

__n128 sub_1B1D7F334@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  _OWORD v8[2];

  sub_1B1D84AC0(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_DWORD *)(a2 + 95) = *(_DWORD *)((char *)v8 + 15);
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B1D7F384(_QWORD *a1)
{
  return sub_1B1D7EF20(a1);
}

uint64_t sub_1B1D7F3CC()
{
  return type metadata accessor for ParticleFlockingSolverSystem();
}

double sub_1B1D7F3E8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1B227C990;
  *(_QWORD *)(a1 + 24) = 8;
  *(_BYTE *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_OWORD *)(a1 + 68) = xmmword_1B227C9A0;
  result = 4294968350.0;
  *(_QWORD *)(a1 + 84) = 0x41F0000041A00000;
  *(_DWORD *)(a1 + 92) = 1065353216;
  *(_WORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 98) = 0;
  return result;
}

uint64_t sub_1B1D7F448(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, float a5, float a6, float a7, float a8, float a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16, float a17, float a18, float a19, float a20,float a21)
{
  float v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __int32 v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  uint64_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x2_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  int64_t v57;
  __int128 v58;
  __int128 v59;
  float v60;
  float v61;
  float v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t *v65;
  size_t v66;
  float32x4_t v67;
  int v68;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  float32x4_t v77;
  unint64_t v78;
  float32x4_t v79;
  float v80;
  unint64_t v81;
  float *v82;
  float32x4_t v83;
  float v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  float v97;
  float v98;
  __int128 v100;
  int32x2_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float32x4_t v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float32x4_t v118;
  int8x16_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float v123;
  float32x4_t v124;
  float32_t v125;
  float32x2_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float v131;
  float32x4_t v132;
  int8x16_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float v138;
  float32x4_t v139;
  float v140;
  float v141;
  float32x2_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float v146;
  float v147;
  float32x4_t v148;
  float32x4_t v149;
  float v150;
  float32x4_t v151;
  float32x4_t v152;
  float v153;
  float32x4_t v154;
  float v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  uint64_t v160;
  uint64_t v161;
  float *v162;
  float v163;
  float v164;
  float v165;
  float32x4_t v166;
  float *v167;
  float v168;
  float v169;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t result;
  char v175;
  __int32 v176;
  __int32 v177;
  uint64_t v178;
  float v179;
  __int32 v180;
  __int32 v181;
  float v182;
  float32x4_t v183;
  float v184;
  uint64_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  uint64_t v194;
  float32x4_t v195;
  __int128 v196;
  float32x4_t v197;
  __int32 v199;
  __int32 v200;
  uint64_t v201;
  char v202;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  __int128 v209;
  __int128 v210;
  float32x4_t v211;
  float32x4_t v212;
  __int32 v213;
  __int32 v214;
  __int32 v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v221;
  float v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  __int32 v227;
  float32x4_t v228;
  float32x4_t v229;
  uint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  simd_float4x4 v239;
  simd_float4x4 v240;
  simd_float4x4 v241;
  simd_float4x4 v242;

  v33 = a20;
  v34 = a1[1];
  v178 = sub_1B19F629C(v34, (uint64_t)a1);
  v35 = sub_1B19F6400(v34, (uint64_t)a1);
  v194 = sub_1B1B47FF8();
  v202 = v36;
  v231 = 0;
  v232 = 0u;
  v233 = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  v234 = xmmword_1B2244E20;
  v235 = _Q1;
  __asm { FMOV            V0.2S, #1.0 }
  v236 = _D0;
  v237 = 0;
  v238 = -1;
  v230 = sub_1B19F44FC((uint64_t)&v231, a2);
  v45 = a1[6];
  v201 = a1[7];
  if (v45 == v201)
    return swift_bridgeObjectRelease();
  v46 = LODWORD(a9) & 0x7FFFFFFF;
  v222 = a8;
  v47 = a8 * 0.5;
  v48 = v178;
  v185 = v35;
  v175 = a4;
  v179 = a9;
  v184 = v47;
LABEL_5:
  v213 = v228.i32[3];
  v49 = *(float32x4_t *)(v35 + 16 * v45);
  v50 = v49;
  v50.i32[3] = v44;
  v51 = vmulq_f32(v49, v49);
  v52 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).u64[0];
  *(float *)v52.i32 = sqrtf(*(float *)v52.i32);
  v217 = v42;
  v218 = v41;
  v216 = v43;
  v221 = v50;
  v204 = v49;
  if (*(float *)v52.i32 <= 0.000001)
  {
    v226 = v50;
  }
  else
  {
    v53 = vdivq_f32(v49, (float32x4_t)vdupq_lane_s32(v52, 0));
    v53.i32[3] = v200;
    v226 = v53;
  }
  v54 = v46;
  v55 = (float32x4_t *)(v48 + 16 * v45);
  v229 = *v55;
  v56 = (float32x4_t *)v230;
  if (!swift_isUniquelyReferenced_nonNull_native())
  {
    v65 = (float32x4_t *)MEMORY[0x1E0DEE9D8];
    if (v56[1].i64[1] >= 2uLL)
    {
      sub_1B1A02758(0, (unint64_t *)&unk_1EEF5AB40, (uint64_t)&type metadata for FlockingParticle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v65 = (float32x4_t *)swift_allocObject();
      v66 = j__malloc_size(v65);
      v65[1].i64[0] = 0;
      v65[1].i64[1] = 2 * ((uint64_t)(v66 - 32) / 112);
    }
    v230 = (uint64_t)v65;
    swift_bridgeObjectRelease();
    v56 = v65;
    v60 = v222;
    v61 = 0.5;
    v62 = 1.0;
    v63 = v223;
    goto LABEL_18;
  }
  v57 = v56[1].i64[0];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v56 = (float32x4_t *)sub_1B1C6899C(0, v57, 1, v56);
  v60 = v222;
  v61 = 0.5;
  v62 = 1.0;
  v63 = v223;
  if (!v57)
  {
LABEL_14:
    v230 = (uint64_t)v56;
LABEL_18:
    v46 = v54;
    if (*(_BYTE *)(a3 + 32) == 1)
    {
      v67 = *v55;
      v68 = (int)*v55;
      if (((~v68 & 0x7F800000) != 0 || (v68 & 0x7FFFFF) == 0)
        && ((~v67.i32[1] & 0x7F800000) != 0 || (v67.i32[1] & 0x7FFFFF) == 0)
        && ((~v67.i32[2] & 0x7F800000) != 0 || (v67.i32[2] & 0x7FFFFF) == 0))
      {
        v71 = *(_QWORD *)(a3 + 16);
        v72 = *(_QWORD *)(v71 + 16);
        v73 = *(_QWORD *)(a3 + 40);
        v74 = *(_QWORD *)(v73 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v75 = v74;
        v35 = v185;
        v76.n128_f32[0] = a5;
        sub_1B1D7D20C(v73 + 32, v76, v75, a3, v55, v71 + 32, v72, (uint64_t)&v230, a2);
        v48 = v178;
        v46 = v54;
        swift_bridgeObjectRelease();
        a4 = v175;
        swift_bridgeObjectRelease();
        v63 = v223;
        v62 = 1.0;
        v61 = 0.5;
        v60 = v222;
        v56 = (float32x4_t *)v230;
      }
    }
    v77 = v229;
    v77.i32[3] = v213;
    v228 = v77;
    v78 = v56[1].u64[0];
    if (v78 < 2)
    {
      v153 = 0.0;
      v42 = v217;
      v41 = v218;
      v43 = v216;
      v44 = v221.i32[3];
      if ((v202 & 1) == 0)
        goto LABEL_3;
      goto LABEL_4;
    }
    v79.i32[3] = v199;
    if (a6 <= 0.0)
    {
      v42 = v217;
      v41 = v218;
      v43 = v216;
      v44 = v221.i32[3];
      if (v33 > 0.0)
        goto LABEL_128;
      goto LABEL_129;
    }
    v80 = v56[7].f32[1];
    v81 = v78 - 1;
    v82 = &v56[14].f32[2];
    v83 = 0uLL;
    v84 = 0.0;
    LODWORD(v58) = 1.0;
    v85 = v228;
    v86 = v221;
    while (1)
    {
      v87 = v63;
      *(float *)&v59 = *v82;
      if (*v82 <= 0.000001)
      {
LABEL_35:
        v63 = v87;
        goto LABEL_36;
      }
      v88 = *(float32x4_t *)(v82 - 18);
      v89 = v56[3];
      v90 = *(v82 - 1);
      if (*(float *)&v59 < 0.000001)
      {
        v91 = 0.0;
        goto LABEL_52;
      }
      v92 = v56[7].f32[0];
      v93 = *(v82 - 2);
      if (a4 == 1)
        break;
      v91 = *v82;
      if (!a4)
        goto LABEL_52;
      v94 = v56[5];
      v95 = v56[6];
      v96 = *(int8x16_t *)(v82 - 6);
      LODWORD(v97) = HIDWORD(v56[6].i64[0]);
      LODWORD(v98) = v56[6].i64[1];
      if (v95.f32[0] == v97 && v97 == v98)
      {
        v100 = *(_OWORD *)(v82 - 6);
        LODWORD(v100) = vextq_s8(v96, v96, 8uLL).u32[0];
        v101 = vceq_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v96.i8), *(float32x2_t *)&v100);
        if ((v101.i32[1] & v101.i32[0] & 1) != 0)
          break;
      }
      if (a4 == 2)
      {
        if ((LODWORD(v97) & 0x7FFFFF) != 0)
          LODWORD(v112) = v56[6];
        else
          LODWORD(v112) = HIDWORD(v56[6].i64[0]);
        if ((~LODWORD(v97) & 0x7F800000) != 0)
          LODWORD(v112) = HIDWORD(v56[6].i64[0]);
        if (v97 >= v95.f32[0])
          v113 = v112;
        else
          LODWORD(v113) = v56[6];
        if ((LODWORD(v98) & 0x7FFFFF) != 0)
          v114 = v113;
        else
          LODWORD(v114) = v56[6].i64[1];
        if ((~LODWORD(v98) & 0x7F800000) != 0)
          LODWORD(v114) = v56[6].i64[1];
        v115 = v98 >= v113 ? v114 : v113;
        LODWORD(v116) = HIDWORD(*((_QWORD *)v82 - 3));
        if (*(float *)&v96.i32[1] >= *(float *)v96.i32)
        {
          if ((v96.i32[1] & 0x7FFFFF) != 0)
            LODWORD(v117) = *(_OWORD *)(v82 - 6);
          else
            LODWORD(v117) = HIDWORD(*((_QWORD *)v82 - 3));
          if ((~v96.i32[1] & 0x7F800000) == 0)
            v116 = v117;
        }
        else
        {
          LODWORD(v116) = *(_OWORD *)(v82 - 6);
        }
        if (*(float *)&v96.i32[2] >= v116)
        {
          if ((v96.i32[2] & 0x7FFFFF) == 0)
            LODWORD(v116) = *((_QWORD *)v82 - 2);
          if ((~v96.i32[2] & 0x7F800000) != 0)
            LODWORD(v116) = *((_QWORD *)v82 - 2);
        }
        if ((float)(v115 + v116) <= *(float *)&v59)
        {
          v91 = (float)(*(float *)&v59 - v92) - v93;
          goto LABEL_52;
        }
      }
      v190 = *(float32x4_t *)(v82 - 6);
      v192 = *(float32x4_t *)(v82 - 10);
      v196 = v59;
      v197 = v87;
      v206 = v86;
      v208 = v85;
      v210 = v58;
      v212 = v83;
      v239.columns[3] = (simd_float4)v56[3];
      v239.columns[3].f32[3] = v62;
      v118 = vabsq_f32(v95);
      v118.i32[3] = 0;
      v119.i64[0] = 0x8000000080000000;
      v119.i64[1] = 0x8000000080000000;
      v120 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v118, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v95, v119));
      v121 = vmulq_f32(v94, v94);
      v122 = vmulq_laneq_f32(v94, v94, 3);
      v123 = vmulq_lane_f32(v94, *(float32x2_t *)v94.f32, 1).f32[0];
      v124 = vaddq_f32(v120, v120);
      v125 = (float)(v61 - v121.f32[1]) - v121.f32[2];
      v121.f32[0] = v61 - v121.f32[0];
      v126 = vmul_laneq_f32(*(float32x2_t *)v94.f32, v94, 2);
      v127.i32[3] = 0;
      v127.f32[0] = v125;
      v127.f32[1] = v123 + v122.f32[2];
      v127.f32[2] = v126.f32[0] - v122.f32[1];
      v239.columns[0] = (simd_float4)vmulq_n_f32(v127, v124.f32[0]);
      v128.i32[3] = 0;
      v128.f32[0] = v123 - v122.f32[2];
      v128.f32[1] = v121.f32[0] - v121.f32[2];
      v128.f32[2] = v126.f32[1] + v122.f32[0];
      v239.columns[1] = (simd_float4)vmulq_lane_f32(v128, *(float32x2_t *)v124.f32, 1);
      *(int32x2_t *)v122.f32 = vrev64_s32(*(int32x2_t *)v122.f32);
      v129.i32[0] = vadd_f32(v126, *(float32x2_t *)v122.f32).u32[0];
      v129.i32[1] = vsub_f32(v126, *(float32x2_t *)&v122).i32[1];
      v129.f32[2] = v121.f32[0] - v121.f32[1];
      v129.i32[3] = 0;
      v239.columns[2] = (simd_float4)vmulq_laneq_f32(v129, v124, 2);
      v187 = (float32x4_t)v239.columns[1];
      v188 = (float32x4_t)v239.columns[0];
      v186 = (float32x4_t)v239.columns[2];
      v225 = *(float32x4_t *)(v82 - 18);
      v195 = v56[3];
      v240 = __invert_f4(v239);
      v88 = v225;
      v62 = 1.0;
      v130 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v240.columns[3], (float32x4_t)v240.columns[2], v225, 2), (float32x4_t)v240.columns[1], *(float32x2_t *)v225.f32, 1), (float32x4_t)v240.columns[0], v225.f32[0]);
      v240.columns[0] = (simd_float4)vmulq_f32(v130, v130);
      v131 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v240.columns[0], 2), vaddq_f32((float32x4_t)v240.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v240.columns[0].f32, 1))).f32[0];
      if (v131 <= 1.0)
      {
        v91 = 0.0;
        v60 = v222;
        v61 = 0.5;
        v58 = v210;
        v83 = v212;
        v86 = v206;
        v85 = v208;
        v59 = v196;
        v87 = v197;
        v89 = v195;
        goto LABEL_52;
      }
      v182 = v131;
      v183 = v130;
      v132 = vabsq_f32(v190);
      v132.i32[3] = 0;
      v133.i64[0] = 0x8000000080000000;
      v133.i64[1] = 0x8000000080000000;
      v134 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v132, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v190, v133));
      v135 = v192;
      v136 = vmulq_f32(v135, v135);
      v137 = vmulq_laneq_f32(v135, v135, 3);
      v138 = vmulq_lane_f32(v135, *(float32x2_t *)v135.f32, 1).f32[0];
      v139 = vaddq_f32(v134, v134);
      v140 = v136.f32[1];
      v141 = 0.5 - v136.f32[0];
      v142 = vmul_laneq_f32(*(float32x2_t *)v135.f32, v135, 2);
      v135.i32[3] = 0;
      v135.f32[0] = (float)(0.5 - v136.f32[1]) - v136.f32[2];
      v135.f32[1] = v138 + v137.f32[2];
      v135.f32[2] = v142.f32[0] - v137.f32[1];
      v241.columns[0] = (simd_float4)vmulq_n_f32(v135, v139.f32[0]);
      v143.i32[3] = 0;
      v143.f32[0] = v138 - v137.f32[2];
      v143.f32[1] = (float)(0.5 - v136.f32[0]) - v136.f32[2];
      v143.f32[2] = v142.f32[1] + v137.f32[0];
      v241.columns[1] = (simd_float4)vmulq_lane_f32(v143, *(float32x2_t *)v139.f32, 1);
      *(int32x2_t *)v137.f32 = vrev64_s32(*(int32x2_t *)v137.f32);
      v144.i32[0] = vadd_f32(v142, *(float32x2_t *)v137.f32).u32[0];
      v144.i32[1] = vsub_f32(v142, *(float32x2_t *)&v137).i32[1];
      v144.f32[2] = v141 - v140;
      v144.i32[3] = 0;
      v241.columns[2] = (simd_float4)vmulq_laneq_f32(v144, v139, 2);
      v241.columns[3] = (simd_float4)v225;
      v241.columns[3].i32[3] = 1.0;
      v191 = (float32x4_t)v241.columns[1];
      v193 = (float32x4_t)v241.columns[0];
      v189 = (float32x4_t)v241.columns[2];
      v242 = __invert_f4(v241);
      v88 = v225;
      v62 = 1.0;
      v89 = v195;
      v59 = v196;
      v145 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v242.columns[3], (float32x4_t)v242.columns[2], v195, 2), (float32x4_t)v242.columns[1], *(float32x2_t *)v195.f32, 1), (float32x4_t)v242.columns[0], v195.f32[0]);
      v242.columns[0] = (simd_float4)vmulq_f32(v145, v145);
      v146 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v242.columns[0], 2), vaddq_f32((float32x4_t)v242.columns[0], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v242.columns[0].f32, 1))).f32[0];
      v91 = 0.0;
      v60 = v222;
      v61 = 0.5;
      v58 = v210;
      v83 = v212;
      v86 = v206;
      v85 = v208;
      v87 = v197;
      if (v146 > 1.0)
      {
        v147 = sqrtf(v182);
        v148 = vsubq_f32(v195, vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v195, v186, v183.f32[2] / v147), v187, v183.f32[1] / v147), v188, v183.f32[0] / v147));
        v149 = vmulq_f32(v148, v148);
        v150 = sqrtf(v146);
        v151 = vsubq_f32(v225, vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v225, v189, v145.f32[2] / v150), v191, v145.f32[1] / v150), v193, v145.f32[0] / v150));
        v152 = vmulq_f32(v151, v151);
        v102 = (float)(*(float *)&v196
                     - sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 2), vaddq_f32(v149, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1))).f32[0]))- sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v152, 2), vaddq_f32(v152, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.f32, 1))).f32[0]);
LABEL_49:
        if (v102 < 0.0)
          v91 = 0.0;
        else
          v91 = v102;
      }
LABEL_52:
      v79 = vsubq_f32(v88, v89);
      v103 = (float)((float)(v62 - (float)(v80 / (float)(v80 + v90))) * a7) + v60;
      if ((_DWORD)v46 && v91 < a10)
      {
        v104 = (float)((float)(v91 * a13) * (float)(v91 * a13))
             + (float)((float)(v62 - (float)((float)(v91 * a13) * (float)(v91 * a13))) * 10.0);
        if (v91 > a11)
          v104 = (float)((float)(a10 - v91) * a12) * (float)((float)(a10 - v91) * a12);
        if (v103 < v62)
          v104 = v103 * v104;
        v105 = 1.0;
        if (v104 < 1.0)
          v105 = v104;
        if (v84 <= v105)
          v84 = v105;
        v83 = vsubq_f32(v83, vdivq_f32(vmulq_n_f32(v79, v104), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v59, 0)));
        v83.i32[3] = v227;
      }
      if (v84 >= v62 || v91 <= a10)
        goto LABEL_35;
      v63 = vdivq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v59, 0));
      v63.i32[3] = v87.i32[3];
      v106 = vmulq_f32(v226, v63);
      v79 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1)));
      if (v79.f32[0] <= v62)
      {
        if (v79.f32[0] >= -1.0)
        {
          v205 = v86;
          v207 = v85;
          v209 = v58;
          v211 = v83;
          v224 = v63;
          v79.f32[0] = acosf(v79.f32[0]);
          if (v79.f32[0] < a14)
          {
            v107 = 1.0;
            v60 = v222;
            v61 = 0.5;
            v62 = 1.0;
            v63 = v224;
            v58 = v209;
            v83 = v211;
            v86 = v205;
            v85 = v207;
            if (v79.f32[0] <= a15)
              goto LABEL_69;
LABEL_68:
            v107 = (float)(a14 - v79.f32[0]) * a16;
LABEL_69:
            v108 = (float)(v91 - a10) / (float)(a5 - a10);
            _NF = v108 < v61;
            v109 = sqrtf(v108 + v108);
            v110 = (float)((float)(v62 - v108) + (float)(v62 - v108))
                 * (float)((float)(v62 - v108) + (float)(v62 - v108));
            if (_NF)
              v110 = v109;
            v111 = v110 * (float)((float)(v107 * (float)(fminf(v103, v62) * v107)) * v110);
            v86 = vaddq_f32(v86, vmulq_n_f32(*(float32x4_t *)(v82 - 14), v111));
            v86.i32[3] = v214;
            v85 = vaddq_f32(v85, vmulq_n_f32(*(float32x4_t *)(v82 - 18), v111));
            v85.i32[3] = v215;
            *(float *)&v58 = *(float *)&v58 + v111;
            goto LABEL_36;
          }
          v60 = v222;
          v61 = 0.5;
          v62 = 1.0;
          v63 = v224;
          v58 = v209;
          v83 = v211;
          v86 = v205;
          v85 = v207;
        }
        else if (a14 > 3.1416)
        {
          v107 = 1.0;
          v79.i32[0] = 1078530010;
          if (a15 < 3.1416)
            goto LABEL_68;
          goto LABEL_69;
        }
      }
      else if (a14 > 0.0)
      {
        v107 = 1.0;
        v79.i32[0] = 0;
        if (a15 < 0.0)
          goto LABEL_68;
        goto LABEL_69;
      }
LABEL_36:
      v82 += 28;
      if (!--v81)
      {
        v223 = v63;
        if (*(float *)&v58 <= v62)
        {
          v44 = v221.i32[3];
          v158 = v221;
          v33 = a20;
          v35 = v185;
          v42 = v217;
          v41 = v218;
          v43 = v216;
          v156 = v204;
          if (v84 > 0.0)
            goto LABEL_126;
        }
        else
        {
          *(int32x2_t *)v79.f32 = vdup_lane_s32(*(int32x2_t *)&v58, 0);
          *(float32x2_t *)v154.f32 = vdiv_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v79.f32);
          v154.f32[2] = v86.f32[2] / *(float *)&v58;
          v154.i32[3] = 0;
          v155 = (float)(v62 - v84) * a17;
          v33 = a20;
          v35 = v185;
          v42 = v217;
          v41 = v218;
          v43 = v216;
          v44 = v221.i32[3];
          v156 = v204;
          if (v155 >= v62)
          {
            v157 = vmulq_n_f32(v154, v155);
            v157.i32[3] = v176;
          }
          else
          {
            v157 = vaddq_f32(vmulq_n_f32(v204, v62 - v155), vmulq_n_f32(v154, v155));
            v157.i32[3] = v177;
          }
          *(float32x2_t *)v79.f32 = vdiv_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v79.f32);
          v79.f32[2] = v85.f32[2] / *(float *)&v58;
          v158 = vaddq_f32(vmulq_n_f32(vsubq_f32(v79, v228), (float)(v62 - v84) * a18), v157);
          v158.i32[3] = v181;
          if (v84 > 0.0)
          {
LABEL_126:
            v158 = vaddq_f32(vmulq_n_f32(v83, v84 * v179), v158);
            v158.i32[3] = v180;
          }
        }
        v47 = v184;
        v159 = vaddq_f32(vmulq_n_f32(v156, a19), vmulq_n_f32(v158, a6));
        v159.i32[3] = 0;
        *(float32x4_t *)(v35 + 16 * v45) = v159;
        if (v33 > 0.0)
        {
LABEL_128:
          v160 = v56[1].i64[0] - 1;
          if (v56[1].i64[0] != 1)
          {
            v164 = v56[7].f32[1];
            v165 = v56[7].f32[0] * a21;
            v166 = v56[3];
            v167 = &v56[14].f32[2];
            do
            {
              v168 = v165 + (float)(*(v167 - 2) * a21);
              v169 = *v167;
              _NF = *v167 >= 0.000001 && v169 < v168;
              if (_NF)
              {
                v171 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v167 - 18), v166), (float)((float)((float)(v168 - v169) / v169) * v33)* (float)(v47 + (float)((float)(v62 - (float)(v164 / (float)(v164 + *(v167 - 1)))) * a7)));
                v172 = *v55;
                v173 = vsubq_f32(*v55, v171);
                v172.i32[3] = v43.i32[3];
                v171.i32[3] = v42.i32[3];
                v173.i32[3] = v41.i32[3];
                v41 = v173;
                v173.f32[3] = v62;
                *v55 = v173;
                v43 = v172;
                v42 = v171;
              }
              v167 += 28;
              --v160;
            }
            while (v160);
          }
        }
LABEL_129:
        if ((v202 & 1) == 0)
        {
          v153 = 0.0;
          v161 = v56[1].i64[0] - 1;
          if (v56[1].i64[0] != 1)
          {
            v162 = &v56[14].f32[2];
            do
            {
              v163 = *v162;
              v162 += 28;
              v153 = v153 + (float)(v62 - (float)(v163 / a5));
              --v161;
            }
            while (v161);
          }
LABEL_3:
          *(float *)(v194 + 4 * v45) = v153;
        }
LABEL_4:
        if (++v45 == v201)
          return swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    v102 = (float)(*(float *)&v59 - v92) - v93;
    goto LABEL_49;
  }
  v64 = v56[1].i64[0] - v57;
  if (v64 >= 0)
  {
    memmove(&v56[2], &v56[7 * v57 + 2], 112 * v64);
    v56[1].i64[0] = v64;
    v60 = v222;
    v61 = 0.5;
    v62 = 1.0;
    v63 = v223;
    goto LABEL_14;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ParticleFlockingSolverSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D80274()
{
  return "ParticleFlockingSolver";
}

uint64_t sub_1B1D80288(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B1D802C4 + 4 * byte_1B22921BA[a1]))(0xD000000000000010, 0x80000001B2329AC0);
}

uint64_t sub_1B1D802C4()
{
  return 0x676E697369757263;
}

uint64_t sub_1B1D802E8()
{
  return 0x657053706D616C63;
}

uint64_t sub_1B1D80304()
{
  return 0x7244656C706D6973;
}

unint64_t sub_1B1D80328()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1D80350(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B1D8038C + 4 * byte_1B22921C0[a1]))(0xD000000000000010, 0x80000001B2329AC0);
}

uint64_t sub_1B1D8038C()
{
  return 0x676E697369757263;
}

uint64_t sub_1B1D803B0()
{
  return 0x657053706D616C63;
}

uint64_t sub_1B1D803CC()
{
  return 0x7244656C706D6973;
}

unint64_t sub_1B1D803F0()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1D80418(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  _QWORD v13[2];
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5E3A8, (uint64_t (*)(void))sub_1B1D87150, (uint64_t)&type metadata for ParticleFlockingSpeedControl.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v13 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D87150();
  sub_1B222A180();
  v20 = 0;
  sub_1B2229934();
  if (!v2)
  {
    v19 = 1;
    sub_1B2229934();
    v13[1] = *(_QWORD *)(v3 + 8);
    v18 = 2;
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v11, MEMORY[0x1E0DEDD30]);
    sub_1B2229958();
    v17 = 3;
    sub_1B2229934();
    v16 = 4;
    sub_1B2229934();
    v15 = *(_BYTE *)(v3 + 24);
    v14 = 5;
    sub_1B1A713B0();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B1D80664(char *a1)
{
  sub_1B1F981B4(*a1);
}

void sub_1B1D80670()
{
  char *v0;

  sub_1B1FB30EC(*v0);
}

void sub_1B1D80678(uint64_t a1)
{
  char *v1;

  sub_1B1DB3CEC(a1, *v1);
}

void sub_1B1D80680(uint64_t a1)
{
  char *v1;

  sub_1B1DB4F24(a1, *v1);
}

uint64_t sub_1B1D80688@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A94();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D806BC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1D80288(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1D806E4()
{
  unsigned __int8 *v0;

  return sub_1B1D80350(*v0);
}

uint64_t sub_1B1D806EC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A94();
  *a1 = result;
  return result;
}

uint64_t sub_1B1D80718()
{
  sub_1B1D87150();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D80740()
{
  sub_1B1D87150();
  return sub_1B222A1E0();
}

double sub_1B1D80768@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  _OWORD v5[2];

  sub_1B1D86098(a1, (uint64_t)v5);
  if (!v2)
  {
    *a2 = v5[0];
    result = *(double *)((char *)v5 + 9);
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)((char *)v5 + 9);
  }
  return result;
}

uint64_t sub_1B1D807A8(_QWORD *a1)
{
  return sub_1B1D80418(a1);
}

uint64_t sub_1B1D807BC()
{
  return type metadata accessor for ParticleFlockingSpeedControlSystem();
}

double sub_1B1D807D8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0x412000003E99999ALL;
  *(_QWORD *)(a1 + 8) = 0x41A0000000000000;
  result = 5.2386907e-11;
  *(_QWORD *)(a1 + 16) = 0x3DCCCCCD3D4CCCCDLL;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

unint64_t sub_1B1D80800(_QWORD *a1, float a2, int32x4_t a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  __int32 v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x2_t v34;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t *i;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v54;
  float v55;
  float v56;
  float32x4_t v57;
  char v59;

  v15 = (uint64_t *)a1[11];
  v16 = a1[12];
  v17 = a1[13];
  v18 = a1[1];
  v19 = a1[2];
  v20 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v15, v16, v17, v19);
  result = sub_1B1A10AA4(*(_QWORD *)(v18 + 40), (uint64_t)&type metadata for Orientation, &v59);
  if (v59 != 1)
  {
    v47 = a1[6];
    v48 = a1[7] - v47;
    if (!v48)
      return result;
    for (i = (float32x4_t *)(v20 + 16 * v47); ; ++i)
    {
      v50 = *i;
      v51 = vmulq_f32(v50, v50);
      v52 = vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1));
      v52.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), v52).f32[0]);
      if (v52.f32[0] > 0.00000011921 && v52.f32[0] >= a2)
        break;
      if (a2 > 0.00000011921)
      {
        v54 = (float32x4_t)a3;
        v55 = a2 * 1.05;
        if (v52.f32[0] > 0.001)
        {
          *(float32x2_t *)v54.f32 = vdiv_f32(*(float32x2_t *)v50.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 0));
          v54.f32[2] = v50.f32[2] / v52.f32[0];
          v54.i32[3] = 0;
          v55 = a2 * 1.05;
        }
        goto LABEL_35;
      }
LABEL_26:
      if (!--v48)
        return result;
    }
    *(float32x2_t *)v54.f32 = vdiv_f32(*(float32x2_t *)v50.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.f32, 0));
    v54.f32[2] = v50.f32[2] / v52.f32[0];
    v54.i32[3] = 0;
    v55 = v52.f32[0];
LABEL_35:
    if (v55 > 0.00000011921)
    {
      v56 = (float)((float)(v55 * a4) + a5) * a6;
      if (v56 >= a8)
        v56 = a8;
      if (v56 < a7)
        v56 = a7;
      v57 = vmulq_n_f32(v54, v56);
      v57.i32[3] = 0;
      *i = v57;
    }
    goto LABEL_26;
  }
  result = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v15, v16, v17, v19);
  v23 = a1[6];
  v24 = a1[7] - v23;
  if (v24)
  {
    v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 0);
    v26 = (float32x4_t)vdupq_laneq_s32(a3, 2);
    v27 = 16 * v23;
    v28 = (float32x4_t *)(result + 16 * v23);
    v29 = (float32x4_t *)(v20 + v27);
    do
    {
      v32 = *v29;
      v33 = vmulq_f32(v32, v32);
      v34 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).u64[0];
      *(float *)v34.i32 = sqrtf(*(float *)v34.i32);
      if (*(float *)v34.i32 <= 0.00000011921 || *(float *)v34.i32 < a2)
      {
        if (a2 > 0.00000011921)
        {
          if (*(float *)v34.i32 <= 0.001)
          {
            v37 = vmulq_f32(*v28, (float32x4_t)xmmword_1B2244F80);
            v38 = (int32x4_t)vnegq_f32(v37);
            v39 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, v38));
            v40 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL), *(float32x2_t *)a3.i8, 1), (float32x4_t)vextq_s8(v39, v39, 8uLL), v25);
            v41 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
            v41.i32[0] = v38.i32[1];
            v41.i32[3] = v38.i32[2];
            v42 = vmlaq_f32(v40, v41, v26);
            v43 = (int32x4_t)vnegq_f32(v42);
            v44 = (int8x16_t)vtrn2q_s32((int32x4_t)v42, vtrn1q_s32((int32x4_t)v42, v43));
            v45 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v43, 8uLL), *(float32x2_t *)v28->f32, 1), (float32x4_t)vextq_s8(v44, v44, 8uLL), COERCE_FLOAT(*v28));
            v46 = (float32x4_t)vrev64q_s32((int32x4_t)v42);
            v46.i32[0] = v43.i32[1];
            v46.i32[3] = v43.i32[2];
            v36 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v42, *v28, 3), v46, *v28, 2), v45);
            v36.i32[3] = v22;
          }
          else
          {
            *(float32x2_t *)v36.f32 = vdiv_f32(*(float32x2_t *)v32.f32, (float32x2_t)vdup_lane_s32(v34, 0));
            v36.f32[2] = v32.f32[2] / *(float *)v34.i32;
            v36.i32[3] = 0;
          }
          *(float *)v34.i32 = a2 * 1.05;
          if ((float)(a2 * 1.05) > 0.00000011921)
          {
LABEL_4:
            v30 = (float)((float)(*(float *)v34.i32 * a4) + a5) * a6;
            if (v30 >= a8)
              v30 = a8;
            if (v30 < a7)
              v30 = a7;
            v31 = vmulq_n_f32(v36, v30);
            v31.i32[3] = 0;
            *v29 = v31;
          }
        }
      }
      else
      {
        *(float32x2_t *)v36.f32 = vdiv_f32(*(float32x2_t *)v32.f32, (float32x2_t)vdup_lane_s32(v34, 0));
        v36.f32[2] = v32.f32[2] / *(float *)v34.i32;
        v36.i32[3] = 0;
        if (*(float *)v34.i32 > 0.00000011921)
          goto LABEL_4;
      }
      ++v28;
      ++v29;
      --v24;
    }
    while (v24);
  }
  return result;
}

uint64_t type metadata accessor for ParticleFlockingSpeedControlSystem()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for ParticleFlockingSolverData.Grid(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleFlockingSolverData.Grid(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for ParticleFlockingSolverData.Grid(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleFlockingSolverData.Grid(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingSolverData.Grid(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingSolverData.Grid()
{
  return &type metadata for ParticleFlockingSolverData.Grid;
}

__n128 initializeWithCopy for FlockingParticle(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for WorldCounters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WorldCounters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 104) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FlockingParticle()
{
  return &type metadata for FlockingParticle;
}

const char *sub_1B1D80E4C()
{
  return "ParticleFlockingSpeedControl";
}

uint64_t sub_1B1D80E60()
{
  unint64_t v0;

  v0 = sub_1B2229F64();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11)
    return 17;
  else
    return v0;
}

uint64_t sub_1B1D80EB0()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

uint64_t sub_1B1D80EF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  __int128 v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  char v27;

  sub_1B19F8E54(0, &qword_1EEF5E308, (uint64_t (*)(void))sub_1B1D86F74, (uint64_t)&type metadata for ParticleFlockingAlignOrientation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v24 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v21 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D86F74();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v6;
  v27 = 0;
  sub_1B1A7136C();
  v11 = v24;
  sub_1B2229814();
  v12 = v25;
  LOBYTE(v25) = 1;
  sub_1B22297F0();
  v14 = v13;
  v27 = 2;
  sub_1B2229814();
  v26 = v12;
  v23 = a1;
  v15 = v25;
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v27 = 3;
  sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v16, MEMORY[0x1E0DEDD70]);
  sub_1B2229814();
  v22 = v15;
  v21 = v25;
  LOBYTE(v25) = 4;
  LOBYTE(v16) = sub_1B22297D8();
  LOBYTE(v25) = 5;
  sub_1B22297F0();
  v17 = (uint64_t)v23;
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v11);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v17);
  *(_BYTE *)a2 = v26;
  *(_DWORD *)(a2 + 4) = v14;
  *(_BYTE *)(a2 + 8) = v22;
  *(_OWORD *)(a2 + 16) = v21;
  *(_BYTE *)(a2 + 32) = v16 & 1;
  *(_DWORD *)(a2 + 36) = v19;
  return result;
}

_QWORD *sub_1B1D811FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float32x4_t v11;
  __int128 v12;
  float v13;
  float v14;
  int32x4_t v15;
  float v16;
  float v17;
  int32x4_t v18;
  int8x16_t v19;
  __int8 v20;
  __n128 v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float v25;
  float v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_unfair_lock_s *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  BOOL v57;
  int v58;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v72;
  _QWORD *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  unsigned __int16 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD v99[2];
  uint64_t v100;
  _QWORD v101[8];
  _QWORD v102[7];
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _BYTE v107[48];
  _OWORD v108[2];
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  _QWORD v113[10];
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  swift_retain_n();
  sub_1B1D18744(v2, (uint64_t)&v94);
  v5 = v94;
  v4 = v95;
  v7 = v96;
  v6 = v97;
  v8 = v98;
  swift_release();
  sub_1B1A18378((uint64_t)&v94, (uint64_t)v107, &qword_1EEF5E2E8, (uint64_t)&type metadata for ParticleFlockingAlignOrientation);
  if (v107[32] == 2)
  {
    LOBYTE(v5) = 0;
    v92 = (float32x4_t)xmmword_1B2244DD0;
    v4 = 1;
    v9 = 135.0;
    v79 = 1;
    v10 = 135.0;
  }
  else
  {
    v9 = *((float *)&v5 + 1);
    v11.i64[0] = v7;
    v11.i64[1] = v6;
    v92 = v11;
    v79 = v8 & 1;
    v10 = *((float *)&v8 + 1);
  }
  v12 = *(_OWORD *)(a1 + 104);
  v110 = *(_OWORD *)(a1 + 88);
  v111 = v12;
  v112 = *(_QWORD *)(a1 + 120);
  sub_1B19F17D0((uint64_t)v99);
  sub_1B1E5267C();
  v14 = v13;
  sub_1B1F1C24C(v5);
  v82 = v15;
  v16 = v14 * 3.1416;
  v17 = v9 * (float)(v14 * 3.1416);
  sub_1B1F1C24C(v4);
  v81 = v18;
  v19 = (int8x16_t)vabsq_f32(v92);
  if (*(float *)v19.i32 > 0.00000011921
    || (v19.i32[0] = vextq_s8(v19, v19, 8uLL).u32[0],
        *(int32x2_t *)v19.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v19.i8),
        (v19.i8[4] & 1) == 0)
    || (v20 = v19.i8[0], v21 = 0uLL, (v20 & 1) == 0))
  {
    v22 = (int32x4_t)vmulq_f32(v92, v92);
    v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
    v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
    v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
    v21 = (__n128)vmulq_n_f32(v92, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  }
  v25 = v17 / 180.0;
  v80 = (int32x4_t)v21;
  v26 = 0.0;
  if (!sub_1B1BF30E8(v21))
    v26 = (float)(v10 * v16) / 180.0;
  if ((v25 > 0.0 || v26 > 0.0)
    && (v108[0] = v99[0],
        v108[1] = v99[1],
        v109 = v100,
        sub_1B1E8FCE4(v3, (uint64_t)v108, 0x200000000, v101),
        sub_1B1A18378((uint64_t)v101, (uint64_t)v102, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult), (v93 = (unsigned __int16 *)v102[0]) != 0))
  {
    v78 = v106;
    if (v106 > 0)
    {
      v77 = v103;
      if (v103)
      {
        v76 = v102[5];
        v27 = v105;
        v28 = v105[4];
        v75 = v104;
        v29 = *(_BYTE *)(v104 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v73 = v105 + 8;
        v91 = v102[0] + 41;
        swift_retain();
        swift_retain();
        swift_retain();
        v30 = 0;
        v74 = v29;
        v72 = v28;
        while (1)
        {
          v87 = v30;
          v31 = (unsigned int *)(v76 + 48 * v30);
          v32 = *v31;
          v33 = v31[1];
          v34 = v31[2];
          v35 = *((_QWORD *)v31 + 3);
          v88 = *((_QWORD *)v31 + 2);
          v37 = *((_QWORD *)v31 + 4);
          v36 = *((_QWORD *)v31 + 5);
          if ((v29 & 1) != 0)
          {
            v38 = *(os_unfair_lock_s **)(v36 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v38);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v36 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v28);
          v84 = v27[7];
          v85 = v27[6];
          v83 = v27[8];
          v89 = v27[10];
          v90 = v27[9];
          v39 = v27[4];
          v40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v36 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v27[6] = ecs_stack_allocator_allocate(v39, 48 * v40, 8);
          v27[7] = v40;
          v73[1] = 0;
          v73[2] = 0;
          *v73 = 0;
          swift_release();
          v113[0] = v75;
          v113[1] = v36;
          v86 = v36;
          v113[2] = v27;
          v113[3] = v34;
          v113[4] = (v33 - v32 + v34);
          v113[5] = v78;
          v113[6] = v32;
          v113[7] = v33;
          v113[8] = 0;
          v113[9] = 0;
          v114 = 1;
          v115 = v88;
          v116 = v35;
          v117 = v37;
          sub_1B1D78E34(v113, v79, v25, v82, v26, v81, v80);
          v41 = v27[6];
          v42 = v27[8];
          if (!v42)
          {
            v68 = v27[7];
            v69 = (_QWORD *)v27[4];
            v28 = v72;
            v70 = v87;
            goto LABEL_57;
          }
          for (i = 0; i != v42; ++i)
          {
            v45 = (uint64_t *)(v41 + 48 * i);
            v46 = *v45;
            v47 = (void (*)(uint64_t))v45[4];
            v48 = v27[9];
            if (v48)
              v49 = v46 == v48;
            else
              v49 = 0;
            if (v49 || !v93[11])
              goto LABEL_22;
            v50 = v93[9];
            v51 = (_QWORD *)(v91 + v93[8]);
            v52 = v45[2];
            v53 = v51;
            v54 = v50 >> 4;
            v55 = v91;
            if (v50 >= 0x10)
            {
              while (*v53 != v46)
              {
                ++v55;
                v53 += 2;
                if (!--v54)
                  goto LABEL_37;
              }
              v56 = *(unsigned __int8 *)(v55 + v93[10]);
              v57 = v56 > 5;
              v58 = (1 << v56) & 0x23;
              if (v57 || v58 == 0)
              {
LABEL_22:
                v44 = swift_retain();
                v47(v44);
                swift_release();
                continue;
              }
            }
LABEL_37:
            if (swift_conformsToProtocol2())
              v60 = v52;
            else
              v60 = 0;
            if (v60)
            {
              if (v50 < 0x10)
                goto LABEL_22;
              v61 = v51;
              v62 = v50 >> 4;
              v63 = v91;
              while (*v61 != v60)
              {
                ++v63;
                v61 += 2;
                if (!--v62)
                  goto LABEL_50;
              }
              v64 = *(unsigned __int8 *)(v63 + v93[10]);
              v57 = v64 > 5;
              v65 = (1 << v64) & 0x23;
              if (v57 || v65 == 0)
                goto LABEL_22;
LABEL_50:
              v67 = 16 * (v50 >> 4);
              while (*v51 != v60)
              {
                v51 += 2;
                v67 -= 16;
                if (!v67)
                  goto LABEL_22;
              }
            }
          }
          v68 = v27[7];
          v41 = v27[6];
          v69 = (_QWORD *)v27[4];
          v28 = v72;
          v70 = v87;
          if ((uint64_t)v27[8] >= 1)
            swift_arrayDestroy();
LABEL_57:
          ecs_stack_allocator_deallocate(v69, v41, 48 * v68);
          v27[6] = v85;
          v27[7] = v84;
          v27[8] = v83;
          v27[9] = v90;
          v27[10] = v89;
          sub_1B1F03804((char *)v86);
          ecs_stack_allocator_pop_snapshot(v28);
          v29 = v74;
          if ((v74 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v86 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v86 + 376));
          }
          swift_release();
          v30 = v70 + 1;
          if (v30 == v77)
            goto LABEL_61;
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_61:
    sub_1B19ED720((uint64_t)v99);
    swift_release();
    sub_1B1A086DC(v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    return sub_1B1A086DC(v101, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    sub_1B19ED720((uint64_t)v99);
    return (_QWORD *)swift_release();
  }
}

float sub_1B1D818B0(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  __int128 v13;
  char v14;
  __int128 v15;

  sub_1B19F8E54(0, &qword_1EEF5E320, (uint64_t (*)(void))sub_1B1D86FB8, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v13 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D86FB8();
  sub_1B222A150();
  if (!v1)
  {
    LOBYTE(v15) = 0;
    sub_1B22297F0();
    v2 = v10;
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v14 = 1;
    sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v11, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v13 = v15;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

_QWORD *sub_1B1D81A8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  float v8;
  __int128 v9;
  float v10;
  float v11;
  int8x16_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x2_t v15;
  float32x2_t v16;
  int8x16_t v17;
  _QWORD *v18;
  char v19;
  float v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x2_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x2_t v60;
  float32x2_t v61;
  __float2 v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v76;
  uint64_t v77;
  uint64_t v78;
  float32x4_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  float32x4_t v85;
  uint64_t v86;
  uint64_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  _QWORD v99[5];
  _OWORD v100[2];
  uint64_t v101;
  _QWORD v102[8];
  _OWORD v103[2];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _BYTE v110[48];
  _OWORD v111[2];
  uint64_t v112;
  _OWORD v113[2];
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  _BYTE v118[56];

  v2 = 0;
  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(int *)(a1 + 8);
  swift_retain_n();
  v6 = (_DWORD)v5 == -1 && v4 == 0;
  if (v6
    || (v5 & 0x80000000) != 0
    || *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v5
    || (v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v4 != -1)
    && *(_DWORD *)(v7 + 12 * (int)v5 + 8) != v4)
  {
    swift_release();
LABEL_10:
    v97 = (float32x4_t)xmmword_1B2244DD0;
    v8 = 0.25;
    goto LABEL_11;
  }
  sub_1B1D2022C(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(v7 + 12 * (int)v5) + 32), *(_DWORD *)(v7 + 12 * (int)v5), *(_WORD *)(v7 + 12 * (int)v5 + 4), 32, v3, (uint64_t)v99);
  v76 = *(float *)v99;
  v78 = v99[2];
  v77 = v99[3];
  swift_release();
  sub_1B1A18378((uint64_t)v99, (uint64_t)v110, &qword_1EEF5E2F0, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane);
  if ((v110[32] & 1) != 0)
    goto LABEL_10;
  v8 = v76;
  if (v76 <= 0.0)
    return (_QWORD *)swift_release();
  v79.i64[0] = v78;
  v79.i64[1] = v77;
  v97 = v79;
LABEL_11:
  v9 = *(_OWORD *)(a1 + 104);
  v115 = *(_OWORD *)(a1 + 88);
  v116 = v9;
  v117 = *(_QWORD *)(a1 + 120);
  sub_1B1B7038C((uint64_t)v100);
  sub_1B1E5267C();
  v11 = v10;
  v12 = (int8x16_t)vabsq_f32(v97);
  if (*(float *)v12.i32 > 0.00000011921
    || (v12.i32[0] = vextq_s8(v12, v12, 8uLL).u32[0],
        *(int32x2_t *)v12.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v12.i8),
        (v12.i8[4] & 1) == 0)
    || (v13 = 0uLL, (v12.i8[0] & 1) == 0))
  {
    v14 = (int32x4_t)vmulq_f32(v97, v97);
    v14.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))).u32[0];
    v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
    v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
    v13 = vmulq_n_f32(v97, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
  }
  v17 = (int8x16_t)vabsq_f32(v13);
  if (*(float *)v17.i32 <= 0.00000011921)
  {
    v17.i32[0] = vextq_s8(v17, v17, 8uLL).u32[0];
    *(int32x2_t *)v17.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v17.i8);
    if ((v17.i8[4] & 1) != 0 && (v17.i8[0] & 1) != 0)
      goto LABEL_45;
  }
  v90 = v13;
  v113[0] = v100[0];
  v113[1] = v100[1];
  v114 = v101;
  sub_1B1E8FCE4(v3, (uint64_t)v113, 0x200000000, v102);
  sub_1B1A18378((uint64_t)v102, (uint64_t)v103, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v103[0])
  {
LABEL_45:
    sub_1B19ED720((uint64_t)v100);
    return (_QWORD *)swift_release();
  }
  if (v109 > 0)
  {
    v84 = v106;
    if (v106)
    {
      v18 = v108;
      v87 = v108[4];
      v19 = *(_BYTE *)(v107 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v111[0] = v103[0];
      v111[1] = v103[1];
      v112 = v104;
      v81 = (uint64_t)(v108 + 6);
      v82 = v105;
      v80 = v108 + 8;
      v88 = vnegq_f32(v90);
      v89 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), (int8x16_t)v90, 0xCuLL);
      v20 = v8 * v11;
      swift_retain();
      swift_retain();
      swift_retain();
      v21 = 0;
      v83 = v19;
      while (1)
      {
        v93 = v2;
        v86 = v21;
        v22 = (unsigned int *)(v82 + 48 * v21);
        v23 = *v22;
        v24 = v22[1];
        v25 = (uint64_t *)*((_QWORD *)v22 + 2);
        v26 = *((_QWORD *)v22 + 3);
        v28 = *((_QWORD *)v22 + 4);
        v27 = *((_QWORD *)v22 + 5);
        if ((v19 & 1) != 0)
        {
          v29 = *(os_unfair_lock_s **)(v27 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v29);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v87);
        sub_1B1A18378(v81, (uint64_t)v118, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v30 = v18[4];
        v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v18[6] = ecs_stack_allocator_allocate(v30, 48 * v31, 8);
        v18[7] = v31;
        v80[1] = 0;
        v80[2] = 0;
        *v80 = 0;
        swift_release();
        v32 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v25, v26, v28, (uint64_t)v18);
        if ((_DWORD)v23 != (_DWORD)v24)
          break;
        v2 = v93;
        v19 = v83;
        v33 = v95;
        v34 = v97;
LABEL_28:
        v95 = v33;
        v97 = v34;
        sub_1B1F05D48(v18, (unsigned __int16 **)v111, (uint64_t)v118);
        sub_1B1F03804((char *)v27);
        ecs_stack_allocator_pop_snapshot(v87);
        if ((v19 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 376));
        }
        swift_release();
        v21 = v86 + 1;
        if (v86 + 1 == v84)
          goto LABEL_48;
      }
      v35 = v24 - v23;
      v36 = v95;
      v37 = v97;
      v38 = (float32x4_t *)(v32 + 16 * v23);
      v40 = (float32x4_t)v89;
      v39 = v90;
      v2 = v93;
      v19 = v83;
      v41 = v88;
      while (1)
      {
        v42 = *v38;
        v43 = vmulq_f32(v42, v42);
        v44 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).u64[0];
        *(float *)v44.i32 = sqrtf(*(float *)v44.i32);
        if (*(float *)v44.i32 <= 0.000001)
          goto LABEL_31;
        v45 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), (int8x16_t)v42, 0xCuLL);
        v46 = (int32x4_t)vmlaq_f32(vmulq_f32(v45, v41), v42, v40);
        v47 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL);
        v48 = vmlaq_f32(vmulq_f32(v40, vnegq_f32(v47)), v39, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL));
        v49 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL);
        v50 = (int8x16_t)vabsq_f32(v49);
        if (*(float *)v50.i32 > 0.00000011921)
          goto LABEL_37;
        v50.i32[0] = vextq_s8(v50, v50, 8uLL).u32[0];
        *(int32x2_t *)v50.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v50.i8);
        if ((v50.i8[4] & 1) != 0 && (v50.i8[0] & 1) != 0)
        {
LABEL_31:
          v34 = v37;
          v33 = v36;
        }
        else
        {
LABEL_37:
          v51 = (int32x4_t)vmulq_f32(v48, v48);
          v51.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), *(float32x2_t *)v51.i8)).u32[0];
          v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
          v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
          v34 = vmulq_n_f32(v49, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
          v34.i32[3] = v37.i32[3];
          v33 = vdivq_f32(v42, (float32x4_t)vdupq_lane_s32(v44, 0));
          v33.i32[3] = v36.i32[3];
          v54 = vmulq_f32(v33, v34);
          v55 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).f32[0];
          if (v55 <= 1.0)
          {
            v96 = v33;
            v98 = v34;
            v94 = *v38;
            if (v55 < -1.0)
            {
              v56 = 3.1416;
              goto LABEL_41;
            }
            v91 = v45;
            v85 = v49;
            v56 = acosf(v55);
            v49 = v85;
            v45 = v91;
            v42 = v94;
            if (v56 > 0.001)
            {
LABEL_41:
              if ((float)(v20 * v56) < v56)
                v56 = v20 * v56;
              v57 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v42)), v49, v45);
              v58 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL);
              v59 = (int32x4_t)vmulq_f32(v57, v57);
              v59.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v59.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v59, 2), *(float32x2_t *)v59.i8)).u32[0];
              v60 = vrsqrte_f32((float32x2_t)v59.u32[0]);
              v61 = vmul_f32(v60, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v60, v60)));
              v92 = vmulq_n_f32(v58, vmul_f32(v61, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(v61, v61))).f32[0]);
              v62 = __sincosf_stret(v56 * 0.5);
              v63 = vmulq_n_f32(v92, v62.__sinval);
              v64 = v63;
              v64.i32[3] = LODWORD(v62.__cosval);
              v65 = vmulq_f32(v64, (float32x4_t)xmmword_1B2244F80);
              v66 = (int32x4_t)vnegq_f32(v65);
              v67 = (int8x16_t)vtrn2q_s32((int32x4_t)v65, vtrn1q_s32((int32x4_t)v65, v66));
              v68 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v65, (int8x16_t)v66, 8uLL), *(float32x2_t *)v94.f32, 1), (float32x4_t)vextq_s8(v67, v67, 8uLL), v94.f32[0]);
              v69 = (float32x4_t)vrev64q_s32((int32x4_t)v65);
              v69.i32[0] = v66.i32[1];
              v69.i32[3] = v66.i32[2];
              v70 = vmlaq_laneq_f32(v68, v69, v94, 2);
              v71 = (int32x4_t)vnegq_f32(v70);
              v72 = (int8x16_t)vtrn2q_s32((int32x4_t)v70, vtrn1q_s32((int32x4_t)v70, v71));
              v73 = (float32x4_t)vrev64q_s32((int32x4_t)v70);
              v73.i32[0] = v71.i32[1];
              v73.i32[3] = v71.i32[2];
              v74 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v70, v64, 3), v73, v63, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v71, 8uLL), *(float32x2_t *)v63.f32, 1), (float32x4_t)vextq_s8(v72, v72, 8uLL), v63.f32[0]));
              v74.i32[3] = 0;
              *v38 = v74;
            }
            v40 = (float32x4_t)v89;
            v39 = v90;
            v41 = v88;
            v33 = v96;
            v34 = v98;
          }
        }
        ++v38;
        v37 = v34;
        v36 = v33;
        if (!--v35)
          goto LABEL_28;
      }
    }
  }
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_48:
  sub_1B19ED720((uint64_t)v100);
  swift_release();
  sub_1B1A086DC(v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v102, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B1D82214(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  __int128 v20;
  float v21;
  float v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  float v39;
  float v40;
  float32x4_t v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_unfair_lock_s *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  BOOL v72;
  int v73;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  float32x4_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  uint64_t v104;
  float32x4_t v105;
  uint64_t v106;
  __int128 v107;
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  float32x4_t v111;
  uint64_t v112;
  __int128 v113;
  unsigned __int16 *v114;
  _QWORD v115[8];
  _QWORD v116[9];
  _OWORD v117[2];
  uint64_t v118;
  _QWORD v119[8];
  _QWORD v120[7];
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _BYTE v125[80];
  _BYTE v126[64];
  _OWORD v127[2];
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  _QWORD v132[10];
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD **)(a1 + 8);
  swift_retain_n();
  sub_1B1D1881C(v2, (uint64_t)v115);
  v4 = *(float *)v115;
  v6 = v115[2];
  v5 = v115[3];
  v8 = v115[4];
  v7 = v115[5];
  v87 = v3;
  swift_release();
  sub_1B1A18378((uint64_t)v115, (uint64_t)v126, &qword_1EEF5E2F8, (uint64_t)&type metadata for ParticleFlockingConstrainToArea);
  if (v126[48] == 2)
  {
    v107 = xmmword_1B22932C0;
    v113 = xmmword_1B22932B0;
    v9 = 2.0;
  }
  else
  {
    v9 = v4;
    *(_QWORD *)&v10 = v6;
    *((_QWORD *)&v10 + 1) = v5;
    v113 = v10;
    *(_QWORD *)&v10 = v8;
    *((_QWORD *)&v10 + 1) = v7;
    v107 = v10;
  }
  sub_1B1D15764(v2, (uint64_t)v116);
  v12 = v116[0];
  v11 = v116[1];
  v14 = v116[2];
  v13 = v116[3];
  v16 = v116[4];
  v15 = v116[5];
  v18 = v116[6];
  v17 = v116[7];
  sub_1B1A18378((uint64_t)v116, (uint64_t)v125, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v125[64] & 1) != 0)
  {
    v110 = (float32x4_t)xmmword_1B2244E20;
    v101 = (float32x4_t)xmmword_1B2244D90;
    v103 = (float32x4_t)xmmword_1B2244DD0;
    v105 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    v19.i64[0] = v12;
    v19.i64[1] = v11;
    v105 = v19;
    v19.i64[0] = v14;
    v19.i64[1] = v13;
    v103 = v19;
    v19.i64[0] = v16;
    v19.i64[1] = v15;
    v101 = v19;
    v19.i64[0] = v18;
    v19.i64[1] = v17;
    v110 = v19;
  }
  v20 = *(_OWORD *)(a1 + 104);
  v129 = *(_OWORD *)(a1 + 88);
  v130 = v20;
  v131 = *(_QWORD *)(a1 + 120);
  sub_1B19EFB98((uint64_t)v117);
  sub_1B1E5267C();
  v22 = v21;
  v23 = (float32x4_t)v113;
  v23.i32[3] = 0;
  v24 = (float32x4_t)v107;
  v24.i32[3] = 0;
  v25 = vminnmq_f32(v23, v24);
  v26 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v110, v101, v25, 2), v103, *(float32x2_t *)v25.f32, 1), v105, v25.f32[0]);
  v27 = vmaxnmq_f32(v23, v24);
  v28 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v110, v101, v27, 2), v103, *(float32x2_t *)v27.f32, 1), v105, v27.f32[0]);
  v29 = vsubq_f32(v28, v26);
  v30 = v29.f32[1];
  if (v29.f32[0] <= v29.f32[1])
  {
    v30 = v29.f32[0];
  }
  else
  {
    if ((v29.i32[1] & 0x7FFFFF) != 0)
      v31 = v29.f32[0];
    else
      v31 = v29.f32[1];
    if ((~v29.i32[1] & 0x7F800000) == 0)
      v30 = v31;
  }
  if (v30 > v29.f32[2])
  {
    if ((v29.i32[2] & 0x7FFFFF) == 0)
      v30 = v29.f32[2];
    if ((~v29.i32[2] & 0x7F800000) != 0)
      v30 = v29.f32[2];
  }
  v32 = v30 * 0.25;
  if (v32 >= v9)
    v33 = v9;
  else
    v33 = v32;
  v29.i32[0] = 0;
  v34 = 1.0;
  if (v33 >= 0.0)
  {
    v29.i64[0] = LODWORD(v33) | 0x3400000000000000;
    if (v33 > 0.00000011921)
      v34 = 1.0 / v33;
  }
  v26.i32[3] = 1.0;
  v28.i32[3] = 1.0;
  v35.i64[0] = 0x3F0000003F000000;
  v35.i64[1] = 0x3F0000003F000000;
  v29.f32[0] = -v29.f32[0];
  v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0);
  v36.i32[3] = 0;
  v37 = vaddq_f32(vmulq_f32(vsubq_f32(v28, v26), v35), v36);
  if (v37.f32[0] <= v37.f32[1])
  {
    v39 = v37.f32[0];
  }
  else
  {
    if ((v37.i32[1] & 0x7FFFFF) != 0)
      v38 = v37.f32[0];
    else
      v38 = v37.f32[1];
    if ((~v37.i32[1] & 0x7F800000) != 0)
      v39 = v37.f32[1];
    else
      v39 = v38;
  }
  if (v39 > v37.f32[2])
  {
    if ((v37.i32[2] & 0x7FFFFF) != 0)
      v40 = v39;
    else
      v40 = v37.f32[2];
    if ((~v37.i32[2] & 0x7F800000) != 0)
      v39 = v37.f32[2];
    else
      v39 = v40;
  }
  if (v39 < 0.001)
    goto LABEL_89;
  v108 = v26;
  v111 = v28;
  v96 = v37;
  v127[0] = v117[0];
  v127[1] = v117[1];
  v128 = v118;
  sub_1B1E8FCE4(v87, (uint64_t)v127, 0x200000000, v119);
  sub_1B1A18378((uint64_t)v119, (uint64_t)v120, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v114 = (unsigned __int16 *)v120[0];
  if (!v120[0])
  {
LABEL_89:
    sub_1B19ED720((uint64_t)v117);
    return (_QWORD *)swift_release();
  }
  v95 = v124;
  if (v124 <= 0 || (v94 = v121) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)v117);
    goto LABEL_92;
  }
  v41.i64[0] = 0x3F0000003F000000;
  v41.i64[1] = 0x3F0000003F000000;
  v93 = vmulq_f32(vaddq_f32(v108, v111), v41);
  v92 = v120[5];
  v42 = v123;
  v43 = v123[4];
  v91 = v122;
  v44 = *(_BYTE *)(v122 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v89 = v123 + 8;
  v112 = v120[0] + 41;
  swift_retain();
  swift_retain();
  swift_retain();
  v45 = 0;
  v90 = v44;
  v88 = v43;
  while (2)
  {
    v102 = v45;
    v46 = (unsigned int *)(v92 + 48 * v45);
    v47 = *v46;
    v48 = v46[1];
    v49 = v46[2];
    v50 = *((_QWORD *)v46 + 3);
    v104 = *((_QWORD *)v46 + 2);
    v52 = *((_QWORD *)v46 + 4);
    v51 = *((_QWORD *)v46 + 5);
    if ((v44 & 1) != 0)
    {
      v53 = *(os_unfair_lock_s **)(v51 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v53);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v51 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v43);
    v98 = v42[7];
    v99 = v42[6];
    v97 = v42[8];
    v109 = v42[9];
    v106 = v42[10];
    v54 = v42[4];
    v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v42[6] = ecs_stack_allocator_allocate(v54, 48 * v55, 8);
    v42[7] = v55;
    v89[1] = 0;
    v89[2] = 0;
    *v89 = 0;
    swift_release();
    v132[0] = v91;
    v132[1] = v51;
    v100 = v51;
    v132[2] = v42;
    v132[3] = v49;
    v132[4] = (v48 - v47 + v49);
    v132[5] = v95;
    v132[6] = v47;
    v132[7] = v48;
    v132[8] = 0;
    v132[9] = 0;
    v133 = 1;
    v134 = v104;
    v135 = v50;
    v136 = v52;
    sub_1B1D79FEC(v132, v93, v96, v34, v93, v39 * v39, v39, v22, 1.5708);
    v56 = v42[6];
    v57 = v42[8];
    if (!v57)
    {
      v83 = v42[7];
      v84 = (_QWORD *)v42[4];
      v43 = v88;
      v85 = v102;
      goto LABEL_87;
    }
    for (i = 0; i != v57; ++i)
    {
      v60 = (uint64_t *)(v56 + 48 * i);
      v61 = *v60;
      v62 = (void (*)(uint64_t))v60[4];
      v63 = v42[9];
      if (v63)
        v64 = v61 == v63;
      else
        v64 = 0;
      if (v64 || !v114[11])
        goto LABEL_52;
      v65 = v114[9];
      v66 = (_QWORD *)(v112 + v114[8]);
      v67 = v60[2];
      v68 = v66;
      v69 = v65 >> 4;
      v70 = v112;
      if (v65 >= 0x10)
      {
        while (*v68 != v61)
        {
          ++v70;
          v68 += 2;
          if (!--v69)
            goto LABEL_67;
        }
        v71 = *(unsigned __int8 *)(v70 + v114[10]);
        v72 = v71 > 5;
        v73 = (1 << v71) & 0x23;
        if (v72 || v73 == 0)
        {
LABEL_52:
          v59 = swift_retain();
          v62(v59);
          swift_release();
          continue;
        }
      }
LABEL_67:
      if (swift_conformsToProtocol2())
        v75 = v67;
      else
        v75 = 0;
      if (v75)
      {
        if (v65 < 0x10)
          goto LABEL_52;
        v76 = v66;
        v77 = v65 >> 4;
        v78 = v112;
        while (*v76 != v75)
        {
          ++v78;
          v76 += 2;
          if (!--v77)
            goto LABEL_80;
        }
        v79 = *(unsigned __int8 *)(v78 + v114[10]);
        v72 = v79 > 5;
        v80 = (1 << v79) & 0x23;
        if (v72 || v80 == 0)
          goto LABEL_52;
LABEL_80:
        v82 = 16 * (v65 >> 4);
        while (*v66 != v75)
        {
          v66 += 2;
          v82 -= 16;
          if (!v82)
            goto LABEL_52;
        }
      }
    }
    v83 = v42[7];
    v56 = v42[6];
    v84 = (_QWORD *)v42[4];
    v43 = v88;
    v85 = v102;
    if ((uint64_t)v42[8] >= 1)
      swift_arrayDestroy();
LABEL_87:
    ecs_stack_allocator_deallocate(v84, v56, 48 * v83);
    v42[6] = v99;
    v42[7] = v98;
    v42[8] = v97;
    v42[9] = v109;
    v42[10] = v106;
    sub_1B1F03804((char *)v100);
    ecs_stack_allocator_pop_snapshot(v43);
    v44 = v90;
    if ((v90 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v100 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v100 + 376));
    }
    swift_release();
    v45 = v85 + 1;
    if (v45 != v94)
      continue;
    break;
  }
  sub_1B19ED720((uint64_t)v117);
LABEL_92:
  swift_release();
  sub_1B1A086DC(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

float sub_1B1D82A28(_QWORD *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  float v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  _OWORD v18[2];
  uint64_t v19;
  char v20;
  __int128 v21;

  sub_1B19F8E54(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v19 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v18 - v11;
  sub_1B19FA070(a1, a1[3]);
  a3();
  sub_1B222A150();
  if (!v4)
  {
    v13 = v9;
    LOBYTE(v21) = 0;
    v14 = v19;
    sub_1B22297F0();
    v5 = v15;
    v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v20 = 1;
    sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v16, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    v18[1] = v21;
    v20 = 2;
    sub_1B2229814();
    v18[0] = v21;
    LOBYTE(v21) = 3;
    sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v14);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v5;
}

_QWORD *sub_1B1D82C64(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  float32x4_t v10;
  int v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  int8x16_t v15;
  uint64_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  float32x4_t v35;
  float v36;
  float v37;
  int8x16_t v38;
  float v39;
  float v41;
  float v42;
  float v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int32x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  __n128 v50;
  float v52;
  float32x2_t v53;
  int32x2_t v54;
  float v55;
  int32x2_t v56;
  float v57;
  float32x4_t v58;
  __n128 v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  float32x2_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x4_t v67;
  int v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  int32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int v80;
  float32x4_t v81;
  int32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  int8x16_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  __int32 v95;
  float32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;
  int8x16_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  __n128 v103;
  __n128 v104;
  __n128 v105;
  unsigned __int32 v106;
  uint64_t v107;
  __int32 v108;
  uint64_t v109;
  __int32 v110;
  __int32 v111;
  int v112;
  __n128 v113;
  __int128 v114;
  float v115;
  float v116;
  _QWORD *v117;
  char v118;
  uint64_t v119;
  unsigned int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  os_unfair_lock_s *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  float32x4_t *v130;
  float32x4_t v131;
  float32x4_t v132;
  __int32 v133;
  __int32 v134;
  float32x4_t v135;
  float32x4_t v136;
  uint64_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  float32x4_t v140;
  __int32 v141;
  __int32 v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v146;
  __int32 v147;
  __int32 v148;
  __int32 v149;
  __int32 v150;
  float32x4_t v151;
  float32x4_t v152;
  __n128 v153;
  char v154;
  __n128 v155;
  _QWORD *v156;
  __n128 v157;
  uint64_t v158;
  __n128 v159;
  float32x4_t v160;
  unint64_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  unint64_t v165;
  float v166;
  unsigned __int32 v167;
  __n128 v168;
  uint64_t v169;
  int v170;
  __n128 v171;
  uint64_t v172;
  __int32 v173;
  __n128 v174;
  uint64_t v175;
  __int32 v176;
  _QWORD v177[6];
  char v178;
  _OWORD v179[2];
  uint64_t v180;
  _QWORD v181[8];
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  _BYTE v189[64];
  _OWORD v190[2];
  unint64_t v191;
  _OWORD v192[2];
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  uint64_t v196;
  _BYTE v197[40];
  __int128 v198[6];
  char v199;
  __int128 v200[6];
  char v201;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD **)(a1 + 8);
  swift_retain_n();
  sub_1B1D18828(v2, (uint64_t)v177);
  v4 = *(float *)v177;
  v6 = v177[2];
  v5 = v177[3];
  v8 = v177[4];
  v7 = v177[5];
  v9 = v178;
  swift_release();
  sub_1B1A18378((uint64_t)v177, (uint64_t)v189, &qword_1EEF5E300, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane);
  v10 = (float32x4_t)xmmword_1B2244DD0;
  if (v189[48] == 2)
  {
    v11 = 1;
    v12 = 0uLL;
    v13 = 7.0;
    v14 = (float32x4_t)xmmword_1B2244DD0;
  }
  else
  {
    v13 = v4;
    v12.i64[0] = v6;
    v12.i64[1] = v5;
    v14.i64[0] = v8;
    v14.i64[1] = v7;
    v11 = v9 & 1;
  }
  v15 = (int8x16_t)vabsq_f32(v14);
  v16 = v3;
  if (*(float *)v15.i32 > 0.00000011921
    || (v15.i32[0] = vextq_s8(v15, v15, 8uLL).u32[0],
        *(int32x2_t *)v15.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v15.i8),
        (v15.i8[4] & 1) == 0)
    || (v15.i8[0] & 1) == 0)
  {
    v17 = (int32x4_t)vmulq_f32(v14, v14);
    v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
    v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
    v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
    v10 = vmulq_n_f32(v14, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
  }
  v151 = v10;
  v162 = v12;
  if (v11)
  {
    v20 = sub_1B2000530();
    if (v20)
    {
      v23 = v20;
      v24 = v21;
      v25 = vmulq_f32(v151, v151);
      v25.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u64[0];
      v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
      v26.i32[3] = 0;
      v27 = vrsqrteq_f32(v26);
      v28 = vmulq_f32(v27, vrsqrtsq_f32(v26, vmulq_f32(v27, v27)));
      v29 = vmulq_f32(v28, v28);
      v30 = (int8x16_t)vmulq_f32(v28, vrsqrtsq_f32(v26, v29));
      v31 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v25.f32[0] != 0.0)), 0x1FuLL));
      v31.i32[3] = 0;
      __asm { FMOV            V2.4S, #1.0 }
      v35 = vmulq_f32(v151, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v31), v30, _Q2));
      v29.i32[0] = v35.i32[2];
      v22.i32[0] = 1.0;
      v38.i64[0] = 0x8000000080000000;
      v38.i64[1] = 0x8000000080000000;
      v36 = *(float *)vbslq_s8(v38, v22, (int8x16_t)v29).i32;
      *(float *)v38.i32 = v35.f32[1] / (float)(fabsf(v35.f32[2]) + 1.0);
      v37 = vmuls_lane_f32(*(float *)v38.i32, *(float32x2_t *)v35.f32, 1);
      *(float *)v38.i32 = -(float)(v35.f32[0] * *(float *)v38.i32);
      v39 = v35.f32[2] + (float)(v36 * v37);
      *(float *)_Q2.i32 = v36 * *(float *)v38.i32;
      v41 = 1.0 - v37;
      v42 = vmuls_lane_f32(-v36, *(float32x2_t *)v35.f32, 1);
      v43 = v35.f32[2] + (float)(v39 + v41);
      if (v43 <= 0.0)
      {
        if (v39 < v41 || v39 < v35.f32[2])
        {
          v50 = (__n128)v162;
          if (v41 <= v35.f32[2])
          {
            v57 = sqrtf((float)((float)(v35.f32[2] + 1.0) - v39) - v41);
            v35.i32[0] = vsubq_f32(v35, v35).u32[0];
            v48.f32[1] = v35.f32[1] + v42;
            v48.f32[2] = v57 * v57;
            v48.f32[3] = *(float *)_Q2.i32 - *(float *)v38.i32;
            *(float *)v38.i32 = 0.5 / v57;
            v49 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 0);
          }
          else
          {
            v52 = sqrtf((float)((float)(v41 + 1.0) - v39) - v35.f32[2]);
            v49.f32[0] = *(float *)v38.i32 + *(float *)_Q2.i32;
            v53 = (float32x2_t)vrev64_s32(*(int32x2_t *)v35.f32);
            v54 = (int32x2_t)vadd_f32(v53, (float32x2_t)__PAIR64__(v53.u32[1], LODWORD(v42)));
            v49.f32[1] = v52 * v52;
            *(int32x2_t *)&v49.u32[2] = v54;
            *(float *)v54.i32 = 0.5 / v52;
            v48 = (float32x4_t)vdupq_lane_s32(v54, 0);
          }
        }
        else
        {
          v55 = sqrtf((float)((float)(v39 + 1.0) - v41) - v35.f32[2]);
          v49.f32[0] = v55 * v55;
          v56 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v42), v35.u32[0]), *(float32x2_t *)v35.f32);
          v49.f32[1] = *(float *)v38.i32 + *(float *)_Q2.i32;
          *(int32x2_t *)&v49.u32[2] = v56;
          *(float *)v56.i32 = 0.5 / v55;
          v48 = (float32x4_t)vdupq_lane_s32(v56, 0);
          v50 = (__n128)v162;
        }
      }
      else
      {
        v44 = (float32x2_t)vrev64_s32(*(int32x2_t *)v35.f32);
        *(int32x2_t *)v48.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32), 0);
        v48.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v44.u32[1], LODWORD(v42)), v44).u32[0];
        v45 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v43 + 1.0)), _Q2.u32[0]);
        v46 = vmul_f32(v45, v45);
        v45.i32[0] = v38.i32[0];
        v47.i32[0] = vsub_f32(*(float32x2_t *)_Q2.i8, v45).u32[0];
        v47.i32[1] = v46.i32[1];
        *(int32x2_t *)&v48.u32[2] = v47;
        *(float *)v47.i32 = 0.5 / v45.f32[1];
        v49 = (float32x4_t)vdupq_lane_s32(v47, 0);
        v50 = (__n128)v162;
      }
      v58 = vmulq_f32(v48, v49);
      v50.n128_u32[3] = 1.0;
      v59 = v50;
      v163 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)xmmword_1B227CAE0, *(float32x2_t *)v58.f32, 1), (float32x4_t)xmmword_1B227CAF0, v58.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B227CB00, v58, 3), (float32x4_t)xmmword_1B227CB10, v58, 2));
      v60 = vmulq_f32(v163, v163);
      v61 = vmulq_laneq_f32(v163, v163, 3);
      v62 = vmulq_lane_f32(v163, *(float32x2_t *)v163.f32, 1).f32[0];
      v63 = vmul_laneq_f32(*(float32x2_t *)v163.f32, v163, 2);
      v64.i32[3] = 0;
      v64.f32[0] = (float)(0.5 - v60.f32[1]) - v60.f32[2];
      v64.f32[1] = v62 + v61.f32[2];
      v64.f32[2] = v63.f32[0] - v61.f32[1];
      v65.i32[3] = 0;
      v65.f32[0] = v62 - v61.f32[2];
      v65.f32[1] = (float)(0.5 - v60.f32[0]) - v60.f32[2];
      v65.f32[2] = v63.f32[1] + v61.f32[0];
      v174 = (__n128)vaddq_f32(v65, v65);
      v66 = (float32x2_t)vrev64_s32(*(int32x2_t *)v61.f32);
      v67.i32[0] = vadd_f32(v63, v66).u32[0];
      v67.i32[1] = vsub_f32(v63, v66).i32[1];
      v67.f32[2] = (float)(0.5 - v60.f32[0]) - v60.f32[1];
      v67.i32[3] = 0;
      v168 = (__n128)vaddq_f32(v64, v64);
      v171 = (__n128)vaddq_f32(v67, v67);
      v159 = v59;
      v185 = v59;
      memset(v198, 0, sizeof(v198));
      v199 = 12;
      LOBYTE(v200[0]) = 1;
      sub_1B217F044(v21, 0x100000000uLL, v20, v198, v168, v174, v171, v59);
      v68 = sub_1B1AE40EC((float32x4_t)xmmword_1B2293310);
      v200[0] = xmmword_1B22821D0;
      memset(&v200[1], 0, 80);
      v201 = 3;
      LOBYTE(v181[0]) = 1;
      sub_1B217F2CC(v24, 0x100000000uLL, v23, v200, v68, v168, v174, v171, v159);
      v69 = vmulq_f32((float32x4_t)v168, (float32x4_t)v168);
      LODWORD(v70) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1))).u32[0];
      v69.f32[0] = sqrtf(v70);
      v71 = vmulq_f32((float32x4_t)v171, (float32x4_t)v171);
      v71.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).u32[0];
      v72 = vrsqrte_f32((float32x2_t)LODWORD(v70));
      v73 = vmul_f32(v72, vrsqrts_f32((float32x2_t)LODWORD(v70), vmul_f32(v72, v72)));
      v74 = vmulq_n_f32((float32x4_t)v168, vmul_f32(v73, vrsqrts_f32((float32x2_t)LODWORD(v70), vmul_f32(v73, v73))).f32[0]);
      v74.i32[3] = v168.n128_i32[3];
      v75 = (int32x4_t)vmulq_f32((float32x4_t)v174, (float32x4_t)v174);
      v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
      v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
      v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
      v78 = vmulq_n_f32((float32x4_t)v174, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
      v78.i32[3] = v174.n128_i32[3];
      v182 = (__n128)v74;
      v183 = (__n128)v78;
      *(float32x2_t *)v74.f32 = vrsqrte_f32((float32x2_t)v71.u32[0]);
      *(float32x2_t *)v74.f32 = vmul_f32(*(float32x2_t *)v74.f32, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32)));
      v79 = vmulq_n_f32((float32x4_t)v171, vmul_f32(*(float32x2_t *)v74.f32, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32))).f32[0]);
      v79.i32[3] = v171.n128_i32[3];
      v69.i32[1] = 1036831949;
      v184 = (__n128)v79;
      v69.i64[1] = COERCE_UNSIGNED_INT(sqrtf(v71.f32[0]));
      sub_1B1C2F99C(vmaxnmq_f32(v69, (float32x4_t)xmmword_1B2245780));
      v81 = vmulq_f32(v163, (float32x4_t)xmmword_1B2244F80);
      v82 = (int32x4_t)vnegq_f32(v81);
      v83 = (int8x16_t)vtrn2q_s32((int32x4_t)v81, vtrn1q_s32((int32x4_t)v81, v82));
      v84 = (float32x4_t)vextq_s8(v83, v83, 8uLL);
      v85 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v82, 8uLL), (float32x4_t)0);
      __asm { FMOV            V4.4S, #5.0 }
      v87 = (float32x4_t)vrev64q_s32((int32x4_t)v81);
      v87.i32[0] = v82.i32[1];
      v87.i32[3] = v82.i32[2];
      v88 = vmlaq_f32(vmlaq_f32(v85, _Q4, v84), (float32x4_t)0, v87);
      v89.i32[3] = 0;
      v90 = (int32x4_t)vnegq_f32(v88);
      v91 = (int8x16_t)vtrn2q_s32((int32x4_t)v88, vtrn1q_s32((int32x4_t)v88, v90));
      v92 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v90, 8uLL), *(float32x2_t *)v163.f32, 1), (float32x4_t)vextq_s8(v91, v91, 8uLL), v163.f32[0]);
      v93 = (float32x4_t)vrev64q_s32((int32x4_t)v88);
      v93.i32[0] = v90.i32[1];
      v93.i32[3] = v90.i32[2];
      v94 = vmlaq_laneq_f32(vmulq_laneq_f32(v88, v163, 3), v93, v163, 2);
      v95 = v163.i32[3];
      v96 = vaddq_f32(v94, v92);
      v97 = vmlaq_f32(vmlaq_f32(v85, (float32x4_t)0, v84), _Q4, v87);
      v98 = (int32x4_t)vnegq_f32(v97);
      v99 = (int8x16_t)vtrn2q_s32((int32x4_t)v97, vtrn1q_s32((int32x4_t)v97, v98));
      v100 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v97, (int8x16_t)v98, 8uLL), *(float32x2_t *)v163.f32, 1), (float32x4_t)vextq_s8(v99, v99, 8uLL), v163.f32[0]);
      v101 = (float32x4_t)vrev64q_s32((int32x4_t)v97);
      v101.i32[0] = v98.i32[1];
      v101.i32[3] = v98.i32[2];
      v102 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v97, v163, 3), v101, v163, 2), v100);
      v103 = v182;
      v104 = v183;
      v105 = v184;
      v106 = v185.n128_u32[3];
      v107 = -5;
      v157 = v182;
      v160 = v96;
      v155 = v183;
      v152 = v102;
      v153 = v184;
      do
      {
        v108 = v89.i32[3];
        v89 = vmulq_n_f32(v152, (float)v107);
        v89.i32[3] = v108;
        v109 = -5;
        v110 = v95;
        v111 = v92.i32[3];
        v112 = v80;
        v164 = v89;
        do
        {
          v173 = v110;
          v176 = v111;
          v113 = (__n128)vaddq_f32(v89, vaddq_f32(v162, vmulq_n_f32(v96, (float)v109)));
          v113.n128_u32[3] = v106;
          v167 = v106;
          v170 = v112;
          LOBYTE(v181[0]) = 1;
          sub_1B217F044(v24, 0x100000000uLL, v23, v198, v103, v104, v105, v113);
          v112 = v170;
          v110 = v173;
          v111 = v176;
          v89 = v164;
          v106 = v167;
          v105 = v153;
          v104 = v155;
          v103 = v157;
          v96 = v160;
          ++v109;
        }
        while (v109 != 6);
        v80 = v170;
        v92.i32[3] = v176;
        v95 = v173;
      }
      while (v107++ != 5);
      sub_1B1D83844(v23);
    }
    v16 = v3;
  }
  v114 = *(_OWORD *)(a1 + 104);
  v194 = *(_OWORD *)(a1 + 88);
  v195 = v114;
  v196 = *(_QWORD *)(a1 + 120);
  sub_1B1B6F40C((uint64_t)v179);
  sub_1B1E5267C();
  v116 = fminf(v13 * v115, 1.0);
  if (v116 < 0.0)
    v116 = 0.0;
  v166 = v116;
  if (v116 > 0.0
    && (v192[0] = v179[0],
        v192[1] = v179[1],
        v193 = v180,
        sub_1B1E8FCE4(v16, (uint64_t)v192, 0x200000000, v181),
        sub_1B1A18378((uint64_t)v181, (uint64_t)&v182, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult), v182.n128_u64[0]))
  {
    if (v188 > 0 && (v165 = v185.n128_u64[1]) != 0)
    {
      v117 = v187;
      v175 = v187[4];
      v118 = *(_BYTE *)(v186 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v190[0] = v182;
      v190[1] = v183;
      v161 = v184.n128_u64[1];
      v191 = v184.n128_u64[0];
      v158 = (uint64_t)(v187 + 6);
      v156 = v187 + 8;
      v146 = vmulq_n_f32(v151, v166);
      swift_retain();
      swift_retain();
      swift_retain();
      v119 = 0;
      v154 = v118;
      do
      {
        v120 = (unsigned int *)(v161 + 48 * v119);
        v121 = *v120;
        v123 = (uint64_t *)*((_QWORD *)v120 + 2);
        v122 = *((_QWORD *)v120 + 3);
        v124 = *((_QWORD *)v120 + 5);
        v169 = v120[1];
        v172 = *((_QWORD *)v120 + 4);
        if ((v118 & 1) != 0)
        {
          v125 = *(os_unfair_lock_s **)(v124 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v125);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v124 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v175);
        sub_1B1A18378(v158, (uint64_t)v197, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v126 = v117[4];
        v127 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v124 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v117[6] = ecs_stack_allocator_allocate(v126, 48 * v127, 8);
        v117[7] = v127;
        v156[1] = 0;
        v156[2] = 0;
        *v156 = 0;
        swift_release();
        v128 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v123, v122, v172, (uint64_t)v117);
        if (v166 == 1.0)
        {
          if ((_DWORD)v121 != (_DWORD)v169)
          {
            v129 = v169 - v121;
            v130 = (float32x4_t *)(v128 + 16 * v121);
            v131.i32[3] = v150;
            v132.i32[3] = v149;
            do
            {
              v133 = v131.i32[3];
              v134 = v132.i32[3];
              v131 = vsubq_f32(*v130, v162);
              v131.i32[3] = v133;
              v135 = vmulq_f32(v151, v131);
              v132 = vsubq_f32(*v130, vmulq_n_f32(v151, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0]));
              v132.i32[3] = v134;
              v136 = v132;
              v136.i32[3] = 1.0;
              *v130++ = v136;
              --v129;
            }
            while (v129);
            v149 = v134;
            v150 = v133;
          }
        }
        else if ((_DWORD)v121 != (_DWORD)v169)
        {
          v137 = v169 - v121;
          v138 = (float32x4_t *)(v128 + 16 * v121);
          v139.i32[3] = v148;
          v140.i32[3] = v147;
          do
          {
            v141 = v139.i32[3];
            v142 = v140.i32[3];
            v139 = vsubq_f32(*v138, v162);
            v139.i32[3] = v141;
            v143 = vmulq_f32(v151, v139);
            v140 = vsubq_f32(*v138, vmulq_n_f32(v146, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v143, 2), vaddq_f32(v143, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 1))).f32[0]));
            v140.i32[3] = v142;
            v144 = v140;
            v144.i32[3] = 1.0;
            *v138++ = v144;
            --v137;
          }
          while (v137);
          v147 = v142;
          v148 = v141;
        }
        v118 = v154;
        sub_1B1F05D48(v117, (unsigned __int16 **)v190, (uint64_t)v197);
        sub_1B1F03804((char *)v124);
        ecs_stack_allocator_pop_snapshot(v175);
        if ((v154 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v124 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v124 + 376));
        }
        swift_release();
        ++v119;
      }
      while (v119 != v165);
      sub_1B19ED720((uint64_t)v179);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      sub_1B19ED720((uint64_t)v179);
    }
    swift_release();
    sub_1B1A086DC(v181, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    return sub_1B1A086DC(v181, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    sub_1B19ED720((uint64_t)v179);
    return (_QWORD *)swift_release();
  }
}

uint64_t sub_1B1D83844(uint64_t result)
{
  if (result)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1B1D83854@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v26 = a2;
  sub_1B19F8E54(0, &qword_1EEF5E368, (uint64_t (*)(void))sub_1B1D87084, (uint64_t)&type metadata for ParticleFlockingFlyTowardsArea.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v25 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D87084();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v26;
  v33 = 0;
  sub_1B22297F0();
  v12 = v11;
  v32 = 1;
  sub_1B22297F0();
  v14 = v13;
  v31 = 2;
  sub_1B22297F0();
  v16 = v15;
  v30 = 3;
  sub_1B22297F0();
  v18 = v17;
  v29 = 4;
  sub_1B22297F0();
  v20 = v19;
  v28 = 5;
  sub_1B22297F0();
  v22 = v21;
  v27 = 6;
  v23 = sub_1B22297D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)v10 = v12;
  *(_DWORD *)(v10 + 4) = v14;
  *(_DWORD *)(v10 + 8) = v16;
  *(_DWORD *)(v10 + 12) = v18;
  *(_DWORD *)(v10 + 16) = v20;
  *(_DWORD *)(v10 + 20) = v22;
  *(_BYTE *)(v10 + 24) = v23 & 1;
  return result;
}

_QWORD *sub_1B1D83ABC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  __n128 v20;
  float32x4_t v21;
  unsigned int v22;
  float32x4_t v23;
  unsigned int v24;
  __n128 v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  __int128 v33;
  float v34;
  float v35;
  float v36;
  float32x2_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t i;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void (*v63)(uint64_t);
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  int v74;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  __n128 v108;
  __n128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  float32x2_t v114;
  unsigned __int16 *v115;
  _QWORD v116[9];
  _OWORD v117[2];
  uint64_t v118;
  _QWORD v119[8];
  _QWORD v120[7];
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  _BYTE v125[80];
  _OWORD v126[2];
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __n128 v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144[6];
  char v145;
  __int128 v146[6];
  char v147;

  v2 = *(_QWORD *)a1;
  swift_retain();
  v3 = *(_QWORD **)(a1 + 8);
  swift_retain();
  sub_1B1D1891C((uint64_t)v3, &v131);
  swift_release();
  if (v133 == 2)
  {
    v114 = (float32x2_t)0x4387000042F00000;
    v4 = 1;
    v5 = 5.0;
    v6 = 1.0;
    v7 = 180.0;
    v8 = 60.0;
  }
  else
  {
    v5 = v131.n128_f32[1];
    v6 = v131.n128_f32[0];
    v8 = v131.n128_f32[2];
    v114 = (float32x2_t)__PAIR64__(v131.n128_u32[3], v132);
    v4 = v133 & 1;
    v7 = *((float *)&v132 + 1);
  }
  v112 = v2;
  sub_1B1D15764(v3, (uint64_t)v116);
  v10 = v116[0];
  v9 = v116[1];
  v12 = v116[2];
  v11 = v116[3];
  v14 = v116[4];
  v13 = v116[5];
  v16 = v116[6];
  v15 = v116[7];
  sub_1B1A18378((uint64_t)v116, (uint64_t)v125, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v125[64] & 1) != 0)
  {
    v108 = (__n128)xmmword_1B2244E20;
    v17 = (float32x4_t)xmmword_1B2244D90;
    v18 = (float32x4_t)xmmword_1B2244DD0;
    v19 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    v19.i64[0] = v10;
    v19.i64[1] = v9;
    v18.i64[0] = v12;
    v18.i64[1] = v11;
    v17.i64[0] = v14;
    v17.i64[1] = v13;
    v20.n128_u64[0] = v16;
    v20.n128_u64[1] = v15;
    v108 = v20;
  }
  v104 = (__n128)v17;
  v106 = (__n128)v18;
  v109 = (__n128)v19;
  v21 = vmulq_f32(v19, v19);
  *(float *)&v22 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
  v23 = vmulq_f32(v18, v18);
  *(float *)&v24 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
  v25 = (__n128)vmulq_f32(v17, v17);
  *(float *)&v26 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32((float32x4_t)v25, (float32x4_t)vdupq_lane_s32((int32x2_t)v25.n128_u64[0], 1))).f32[0]);
  v25.n128_u64[0] = __PAIR64__(v24, v22);
  v25.n128_u64[1] = v26;
  v113 = v5 * sub_1B1BBE134(v25);
  if (v4)
  {
    v27 = sub_1B2000530();
    if (v27)
    {
      v29 = v27;
      v30 = v28;
      memset(v146, 0, sizeof(v146));
      v147 = 12;
      v131.n128_u8[0] = 1;
      sub_1B217F044(v28, 0x100000000uLL, v27, v146, v109, v106, v104, v108);
      v31 = (__int128)v108;
      *((float *)&v31 + 3) = v113;
      v110 = v31;
      v32 = sub_1B1AE40EC((float32x4_t)xmmword_1B2293320);
      v144[0] = v110;
      memset(&v144[1], 0, 80);
      v145 = 3;
      v131.n128_u8[0] = 1;
      sub_1B217F570(v30, 0x100000000uLL, v29, v144, v32);
      sub_1B1D83844(v29);
    }
  }
  v33 = *(_OWORD *)(a1 + 104);
  v128 = *(_OWORD *)(a1 + 88);
  v129 = v33;
  v130 = *(_QWORD *)(a1 + 120);
  sub_1B19EFB98((uint64_t)v117);
  sub_1B1E5267C();
  v35 = v34;
  if (v8 <= 0.0)
    v36 = 1.0;
  else
    v36 = 1.0 / v8;
  v37 = vdiv_f32(vmul_f32(vminnm_f32(vmaxnm_f32(v114, 0), (float32x2_t)0x43B4000043340000), (float32x2_t)vdup_n_s32(0x40490FDAu)), (float32x2_t)vdup_n_s32(0x43340000u));
  v38 = v37.f32[1];
  if (v37.f32[0] >= v37.f32[1])
    v37.f32[0] = v37.f32[1];
  v39 = v37.f32[1] - v37.f32[0];
  v40 = 0.0;
  if ((float)(v37.f32[1] - v37.f32[0]) < v37.f32[1])
    v40 = 1.0 / (float)(v37.f32[1] - v39);
  if (v7 < 0.0)
    v41 = 0.0;
  else
    v41 = (float)(v7 * 3.1416) / 180.0;
  if (v6 > 0.0
    && v113 > 0.0
    && v8 > 0.0
    && v37.f32[1] > 0.0
    && v41 > 0.0
    && (v126[0] = v117[0],
        v126[1] = v117[1],
        v127 = v118,
        sub_1B1E8FCE4(v112, (uint64_t)v126, 0x200000000, v119),
        sub_1B1A18378((uint64_t)v119, (uint64_t)v120, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult), v120[0]))
  {
    v97 = v124;
    if (v124 > 0)
    {
      v96 = v121;
      if (v121)
      {
        v95 = v120[5];
        v42 = v123;
        v43 = v123[4];
        v94 = v122;
        v44 = *(_BYTE *)(v122 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v91 = v123 + 8;
        v115 = (unsigned __int16 *)v120[0];
        v111 = v120[0] + 41;
        swift_retain();
        swift_retain();
        swift_retain();
        v45 = 0;
        v92 = v44;
        v93 = v43;
        while (1)
        {
          v47 = (unsigned int *)(v95 + 48 * v45);
          v48 = *v47;
          v49 = v47[1];
          v50 = v47[2];
          v102 = v45;
          v103 = *((_QWORD *)v47 + 2);
          v51 = *((_QWORD *)v47 + 3);
          v52 = *((_QWORD *)v47 + 4);
          v53 = *((_QWORD *)v47 + 5);
          if ((v44 & 1) != 0)
          {
            v54 = *(os_unfair_lock_s **)(v53 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v54);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v53 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v43);
          v98 = v42[6];
          v100 = v42[8];
          v101 = v42[7];
          v107 = v42[9];
          v105 = v42[10];
          v55 = v42[4];
          v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v42[6] = ecs_stack_allocator_allocate(v55, 48 * v56, 8);
          v42[7] = v56;
          v91[1] = 0;
          v91[2] = 0;
          *v91 = 0;
          swift_release();
          v131.n128_u64[0] = v94;
          v99 = v53;
          v131.n128_u64[1] = v53;
          v132 = v42;
          v133 = v50;
          v134 = (v49 - v48 + v50);
          v135 = v97;
          v136 = v48;
          v137 = v49;
          v138 = 0;
          v139 = 0;
          v140 = 1;
          v141 = v103;
          v142 = v51;
          v143 = v52;
          sub_1B1D7B12C(&v131, (float32x4_t)v108, v113 * v113, v113, v8, v36, v38, v39, v40, v35, v6, v41);
          v57 = v42[6];
          v58 = v42[8];
          if (!v58)
          {
            v84 = v42[7];
            v85 = (_QWORD *)v42[4];
            v87 = v101;
            v86 = v102;
            v90 = v98;
            v89 = v99;
            v88 = v100;
            goto LABEL_72;
          }
          for (i = 0; i != v58; ++i)
          {
            v61 = (uint64_t *)(v57 + 48 * i);
            v62 = *v61;
            v63 = (void (*)(uint64_t))v61[4];
            v64 = v42[9];
            if (v64)
              v65 = v62 == v64;
            else
              v65 = 0;
            if (v65 || !v115[11])
              goto LABEL_36;
            v66 = v115[9];
            v67 = (_QWORD *)(v111 + v115[8]);
            v68 = v61[2];
            v69 = v67;
            v70 = v66 >> 4;
            v71 = v111;
            if (v66 >= 0x10)
            {
              while (*v69 != v62)
              {
                ++v71;
                v69 += 2;
                if (!--v70)
                  goto LABEL_51;
              }
              v72 = *(unsigned __int8 *)(v71 + v115[10]);
              v73 = v72 > 5;
              v74 = (1 << v72) & 0x23;
              if (v73 || v74 == 0)
              {
LABEL_36:
                v60 = swift_retain();
                v63(v60);
                swift_release();
                continue;
              }
            }
LABEL_51:
            if (swift_conformsToProtocol2())
              v76 = v68;
            else
              v76 = 0;
            if (v76)
            {
              if (v66 < 0x10)
                goto LABEL_36;
              v77 = v67;
              v78 = v66 >> 4;
              v79 = v111;
              while (*v77 != v76)
              {
                ++v79;
                v77 += 2;
                if (!--v78)
                  goto LABEL_64;
              }
              v80 = *(unsigned __int8 *)(v79 + v115[10]);
              v73 = v80 > 5;
              v81 = (1 << v80) & 0x23;
              if (v73 || v81 == 0)
                goto LABEL_36;
LABEL_64:
              v83 = 16 * (v66 >> 4);
              while (*v67 != v76)
              {
                v67 += 2;
                v83 -= 16;
                if (!v83)
                  goto LABEL_36;
              }
            }
          }
          v84 = v42[7];
          v57 = v42[6];
          v85 = (_QWORD *)v42[4];
          v87 = v101;
          v86 = v102;
          v88 = v100;
          if ((uint64_t)v42[8] >= 1)
            swift_arrayDestroy();
          v90 = v98;
          v89 = v99;
LABEL_72:
          ecs_stack_allocator_deallocate(v85, v57, 48 * v84);
          v42[6] = v90;
          v42[7] = v87;
          v42[8] = v88;
          v42[9] = v107;
          v42[10] = v105;
          sub_1B1F03804((char *)v89);
          v43 = v93;
          ecs_stack_allocator_pop_snapshot(v93);
          v44 = v92;
          if ((v92 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v89 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v89 + 376));
          }
          swift_release();
          v45 = v86 + 1;
          if (v45 == v96)
            goto LABEL_75;
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_75:
    sub_1B19ED720((uint64_t)v117);
    swift_release();
    sub_1B1A086DC(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    return sub_1B1A086DC(v119, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    sub_1B19ED720((uint64_t)v117);
    return (_QWORD *)swift_release();
  }
}

uint64_t sub_1B1D84344(float32x4_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v7;
  _QWORD *v8;
  uint64_t result;
  float v10;
  float v11;
  float32x4_t v12;
  float32x4_t *v13;
  float v14;

  v7 = *(float *)(sub_1B1A11FDC((uint64_t)&type metadata for Scale1) + 4 * a4);
  v8 = *(_QWORD **)(a5 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a5 + 16) = v8;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1FFEFB0(v8);
    v8 = (_QWORD *)result;
  }
  v10 = 0.000001;
  if (v7 > 0.000001)
    v11 = v7;
  else
    v11 = 0.000001;
  v12 = vmulq_n_f32(a1, v11);
  v13 = (float32x4_t *)&v8[14 * a3];
  v13[6] = v12;
  v14 = 0.33333
      * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
  if (v14 <= 0.000001)
    v14 = 0.000001;
  if ((float)((float)(v14 * (float)(v14 * v14)) * 0.5236) > 0.000001)
    v10 = (float)(v14 * (float)(v14 * v14)) * 0.5236;
  v13[7].f32[0] = v14;
  v13[7].f32[1] = v10;
  *(_QWORD *)(a5 + 16) = v8;
  return result;
}

uint64_t sub_1B1D84450(float32x4_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t result;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t *v11;
  float v12;
  float v13;
  float32x4_t v14;

  v14 = *(float32x4_t *)(sub_1B1A11FDC((uint64_t)&type metadata for Scale3) + 16 * a4);
  v7 = *(_QWORD **)(a5 + 16);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a5 + 16) = v7;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1FFEFB0(v7);
    v7 = (_QWORD *)result;
  }
  v9 = vmulq_f32(v14, a1);
  v9.i32[3] = 0;
  v10 = vmaxnmq_f32(v9, (float32x4_t)xmmword_1B22932E0);
  v11 = (float32x4_t *)&v7[14 * a3];
  v11[6] = v10;
  v12 = 0.33333
      * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  v13 = 0.000001;
  if (v12 <= 0.000001)
    v12 = 0.000001;
  if ((float)((float)(v12 * (float)(v12 * v12)) * 0.5236) > 0.000001)
    v13 = (float)(v12 * (float)(v12 * v12)) * 0.5236;
  v11[7].f32[0] = v12;
  v11[7].f32[1] = v13;
  *(_QWORD *)(a5 + 16) = v7;
  return result;
}

uint64_t sub_1B1D84560(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t *a7, uint64_t a8, __n128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  float v12;
  _QWORD *v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  float32x4_t *v19;
  BOOL v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  float32x4_t *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __n128 v83;
  float32x4_t *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;

  v11 = *(_QWORD *)(a6 + 16 * (result + a4 * a3 + *(_QWORD *)(a5 + 56) * a2));
  if ((v11 & 0x8000000000000000) == 0)
  {
    v12 = a9.n128_f32[0];
    do
    {
      v18 = a8 + 112 * v11;
      v19 = *(float32x4_t **)v18;
      if (*(_QWORD *)v18)
        v20 = v19 == a7;
      else
        v20 = 0;
      if (v20)
      {
        v15 = *(_QWORD **)a10;
        v29 = *(_QWORD *)(*(_QWORD *)a10 + 16);
        v83 = a9;
        if (v29 == a11)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)a10 = v15;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            v15 = sub_1B1FFEFB0(v15);
          v29 = v15[2] - 1;
          v15[2] = v29;
          v19 = *(float32x4_t **)v18;
        }
        v75 = *(_OWORD *)(v18 + 32);
        v79 = *(_OWORD *)(v18 + 16);
        v67 = *(_OWORD *)(v18 + 64);
        v71 = *(_OWORD *)(v18 + 48);
        v31 = *(_QWORD *)(v18 + 80);
        v32 = *(_QWORD *)(v18 + 96);
        v33 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)a10 = v15;
        if (!v33 || v29 >= v15[3] >> 1)
        {
          v15 = sub_1B1C6899C(v33, v29 + 1, 1, v15);
          *(_QWORD *)a10 = v15;
        }
        v16 = v15[2];
        result = (uint64_t)memmove(v15 + 18, v15 + 4, 112 * v16);
        v15[2] = v16 + 1;
        v15[4] = v19;
        *((_OWORD *)v15 + 3) = v79;
        *((_OWORD *)v15 + 4) = v75;
        *((_OWORD *)v15 + 5) = v71;
        *((_OWORD *)v15 + 6) = v67;
        v15[14] = v31;
        v15[16] = v32;
        *((_DWORD *)v15 + 30) = 0;
      }
      else
      {
        v17 = *a7;
        v17.i32[3] = a9.n128_i32[3];
        v21 = vsubq_f32(v17, *(float32x4_t *)(v18 + 16));
        v22 = vmulq_f32(v21, v21);
        v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
        if (v23 >= v12)
          goto LABEL_6;
        v15 = *(_QWORD **)a10;
        v24 = *(_QWORD *)(*(_QWORD *)a10 + 16);
        v25 = sqrtf(v23);
        if (v24)
        {
          v26 = 112 * v24 - 112;
          if (*(float *)((char *)v15 + v26 + 120) <= v25)
          {
            if (v24 >= a11)
              goto LABEL_6;
            v81 = *(_OWORD *)(v18 + 16);
            v83 = (__n128)v17;
            v73 = *(_OWORD *)(v18 + 48);
            v77 = *(_OWORD *)(v18 + 32);
            v69 = *(_OWORD *)(v18 + 64);
            v40 = *(_QWORD *)(v18 + 80);
            v65 = *(_QWORD *)(v18 + 96);
            result = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)a10 = v15;
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_1B1C6899C(0, v24 + 1, 1, v15);
              v15 = (_QWORD *)result;
              *(_QWORD *)a10 = result;
            }
            v42 = v15[2];
            v41 = v15[3];
            v43 = v42 + 1;
            if (v42 >= v41 >> 1)
            {
              result = (uint64_t)sub_1B1C6899C(v41 > 1, v42 + 1, 1, v15);
              v15 = (_QWORD *)result;
            }
            v15[2] = v43;
            v44 = (uint64_t)&v15[14 * v42 + 4];
            *(_QWORD *)v44 = v19;
            *(_OWORD *)(v44 + 16) = v81;
            *(_OWORD *)(v44 + 32) = v77;
            *(_OWORD *)(v44 + 48) = v73;
            *(_OWORD *)(v44 + 64) = v69;
            *(_QWORD *)(v44 + 80) = v40;
            *(_QWORD *)(v44 + 96) = v65;
            *(float *)&v15[14 * v43 + 1] = v25;
          }
          else
          {
            v83 = (__n128)v17;
            if (v24 == a11)
            {
              result = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)a10 = v15;
              if ((result & 1) == 0)
              {
                result = (uint64_t)sub_1B1FFEFB0(v15);
                v15 = (_QWORD *)result;
              }
              v17 = (float32x4_t)v83;
              *(float *)((char *)v15 + v26 + 120) = v25 + 999.99;
              *(_QWORD *)a10 = v15;
              v24 = v15[2];
              if (!v24)
                goto LABEL_6;
            }
            v27 = 0;
            v28 = 15;
            while (v25 >= *(float *)&v15[v28])
            {
              ++v27;
              v28 += 14;
              if (v24 == v27)
                goto LABEL_6;
            }
            if (v24 == a11)
            {
              v45 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)a10 = v15;
              if ((v45 & 1) == 0)
                v15 = sub_1B1FFEFB0(v15);
              --v15[2];
              *(_QWORD *)a10 = v15;
              v24 = v15[2];
            }
            v47 = *(_OWORD *)(v18 + 16);
            v46 = *(_OWORD *)(v18 + 32);
            v49 = *(_OWORD *)(v18 + 48);
            v48 = *(_OWORD *)(v18 + 64);
            v51 = *(_DWORD *)(v18 + 80);
            v50 = *(_DWORD *)(v18 + 84);
            v52 = *(_DWORD *)(v18 + 88);
            v53 = *(_QWORD *)(v18 + 96);
            if (v24 == v27)
            {
              v64 = *(_QWORD *)(v18 + 96);
              v66 = *(float32x4_t **)v18;
              v70 = *(_OWORD *)(v18 + 16);
              v74 = *(_OWORD *)(v18 + 32);
              v78 = *(_OWORD *)(v18 + 48);
              v82 = *(_OWORD *)(v18 + 64);
              v54 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)a10 = v15;
              if ((v54 & 1) == 0)
              {
                v15 = sub_1B1C6899C(0, v27 + 1, 1, v15);
                *(_QWORD *)a10 = v15;
              }
              v56 = v15[2];
              v55 = v15[3];
              v58 = v78;
              v57 = v82;
              v60 = v70;
              v59 = v74;
              v61 = v66;
              if (v56 >= v55 >> 1)
              {
                v63 = sub_1B1C6899C(v55 > 1, v56 + 1, 1, v15);
                v61 = v66;
                v60 = v70;
                v59 = v74;
                v58 = v78;
                v57 = v82;
                v15 = v63;
              }
              v15[2] = v56 + 1;
              v62 = &v15[14 * v56];
              v62[4] = v61;
              *((_OWORD *)v62 + 3) = v60;
              *((_OWORD *)v62 + 4) = v59;
              *((_OWORD *)v62 + 5) = v58;
              *((_OWORD *)v62 + 6) = v57;
              *((_DWORD *)v62 + 28) = v51;
              *((_DWORD *)v62 + 29) = v50;
              *((_DWORD *)v62 + 30) = v52;
              v62[16] = v64;
              *(_QWORD *)a10 = v15;
            }
            else
            {
              v84 = *(float32x4_t **)v18;
              v85 = v47;
              v86 = v46;
              v87 = v49;
              v88 = v48;
              v89 = v51;
              v90 = v50;
              v91 = v52;
              v92 = v53;
              sub_1B1C91A7C(v27, v27, (uint64_t)&v84);
              v15 = *(_QWORD **)a10;
            }
            result = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)a10 = v15;
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_1B1FFEFB0(v15);
              v15 = (_QWORD *)result;
            }
            *(float *)&v15[v28] = v25;
          }
        }
        else
        {
          v80 = *(_OWORD *)(v18 + 16);
          v83 = (__n128)v17;
          v72 = *(_OWORD *)(v18 + 48);
          v76 = *(_OWORD *)(v18 + 32);
          v68 = *(_OWORD *)(v18 + 64);
          v34 = *(_QWORD *)(v18 + 80);
          v35 = *(_DWORD *)(v18 + 88);
          v36 = *(_QWORD *)(v18 + 96);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)a10 = v15;
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_1B1C6899C(0, 1, 1, v15);
            v15 = (_QWORD *)result;
            *(_QWORD *)a10 = result;
          }
          v38 = v15[2];
          v37 = v15[3];
          if (v38 >= v37 >> 1)
          {
            result = (uint64_t)sub_1B1C6899C(v37 > 1, v38 + 1, 1, v15);
            v15 = (_QWORD *)result;
          }
          v15[2] = v38 + 1;
          v39 = &v15[14 * v38];
          v39[4] = v19;
          *((_OWORD *)v39 + 3) = v80;
          *((_OWORD *)v39 + 4) = v76;
          *((_OWORD *)v39 + 5) = v72;
          *((_OWORD *)v39 + 6) = v68;
          v39[14] = v34;
          *((_DWORD *)v39 + 30) = v35;
          v39[16] = v36;
          *((float *)v15 + 30) = v25;
        }
      }
      v17 = (float32x4_t)v83;
      *(_QWORD *)a10 = v15;
LABEL_6:
      v11 = *(_QWORD *)(v18 + 96);
      a9 = (__n128)v17;
    }
    while ((v11 & 0x8000000000000000) == 0);
  }
  return result;
}

uint64_t sub_1B1D84AC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t result;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  char v37;
  char v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  _QWORD v52[6];
  __int16 v53;
  char v54;
  _QWORD *v55;

  sub_1B19F8E54(0, &qword_1EEF5E380, (uint64_t (*)(void))sub_1B1D870C8, (uint64_t)&type metadata for ParticleFlockingSolver.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v40 - v9;
  v54 = 1;
  v53 = 0;
  v11 = a1[3];
  v55 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B1D870C8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v55);
  LOBYTE(v48) = 0;
  sub_1B22297F0();
  v13 = v12;
  LOBYTE(v48) = 1;
  sub_1B22297F0();
  v15 = v14;
  LOBYTE(v48) = 2;
  sub_1B22297F0();
  v18 = v17;
  LOBYTE(v48) = 3;
  sub_1B22297F0();
  v20 = v19;
  LOBYTE(v48) = 4;
  v21 = sub_1B22297FC();
  v51 = 5;
  sub_1B1A712D0();
  sub_1B2229814();
  v45 = v21;
  v46 = v48;
  v54 = 1;
  v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v51 = 6;
  sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, v22, MEMORY[0x1E0DEDD70]);
  sub_1B22297B4();
  v23 = v46;
  if ((v50 & 1) != 0)
  {
    v24 = 0;
    v44 = 0;
  }
  else
  {
    v44 = v49;
    v24 = v48;
    v54 = 0;
  }
  LOBYTE(v48) = 7;
  sub_1B22297F0();
  v26 = v25;
  LOBYTE(v48) = 8;
  sub_1B22297F0();
  v28 = v27;
  LOBYTE(v48) = 9;
  sub_1B22297F0();
  v30 = v29;
  LOBYTE(v48) = 10;
  sub_1B22297F0();
  v32 = v31;
  LOBYTE(v48) = 11;
  sub_1B22297F0();
  v43 = v33;
  LOBYTE(v48) = 12;
  sub_1B22297F0();
  v42 = v34;
  LOBYTE(v48) = 13;
  sub_1B22297F0();
  v41 = v35;
  LOBYTE(v48) = 14;
  HIBYTE(v53) = sub_1B22297D8() & 1;
  LOBYTE(v48) = 15;
  LOBYTE(v53) = sub_1B22297D8() & 1;
  v51 = 16;
  v36 = sub_1B22297D8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v37 = HIBYTE(v53);
  v38 = v53;
  v47 = v54;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v55);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = v15;
  *(_DWORD *)(a2 + 16) = v18;
  *(_DWORD *)(a2 + 20) = v20;
  *(_QWORD *)(a2 + 24) = v45;
  *(_BYTE *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 33) = v52[0];
  *(_QWORD *)(a2 + 40) = *(_QWORD *)((char *)v52 + 7);
  *(_QWORD *)(a2 + 48) = v24;
  *(_QWORD *)(a2 + 56) = v44;
  *(_BYTE *)(a2 + 64) = v47;
  *(_WORD *)(a2 + 65) = v48;
  *(_BYTE *)(a2 + 67) = BYTE2(v48);
  *(_DWORD *)(a2 + 68) = v26;
  *(_DWORD *)(a2 + 72) = v28;
  *(_DWORD *)(a2 + 76) = v30;
  *(_DWORD *)(a2 + 80) = v32;
  v39 = v42;
  *(_DWORD *)(a2 + 84) = v43;
  *(_DWORD *)(a2 + 88) = v39;
  *(_DWORD *)(a2 + 92) = v41;
  *(_BYTE *)(a2 + 96) = v37;
  *(_BYTE *)(a2 + 97) = v38;
  *(_BYTE *)(a2 + 98) = v36 & 1;
  return result;
}

uint64_t sub_1B1D85820(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  float v18;
  float v19;
  float v20;
  float32x2_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  char v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  char *v64;
  unsigned int v65;
  BOOL v66;
  int v67;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  unsigned int v73;
  int v74;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  char v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  char v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int16 *v107;
  _OWORD v108[2];
  uint64_t v109;
  _QWORD v110[12];
  unsigned __int16 *v111;
  unsigned int v112;
  unsigned __int8 v113;
  uint64_t v114;
  unsigned __int8 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD v124[2];
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _QWORD v129[10];
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[12];
  uint64_t v135;
  float v136;
  float v137;
  float32x2_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  char v151;
  char v152;
  unsigned __int8 v153;

  v2 = *(_QWORD *)a1;
  swift_retain();
  sub_1B1B72DF8((uint64_t)&v135);
  v106 = v135;
  if (!v135)
    sub_1B1FD69A0(*(_QWORD *)(a1 + 8), v2);
  v3 = *(_OWORD *)(a1 + 104);
  v126 = *(_OWORD *)(a1 + 88);
  v127 = v3;
  v128 = *(_QWORD *)(a1 + 120);
  sub_1B19EFB98((uint64_t)v108);
  v124[0] = v108[0];
  v124[1] = v108[1];
  v125 = v109;
  sub_1B1E8FCE4(v2, (uint64_t)v124, 0x200000000, v110);
  sub_1B1A18378((uint64_t)v110, (uint64_t)&v111, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v107 = v111;
  if (v111)
  {
    if (v106)
    {
      v4 = v120;
      v5 = v121;
      v6 = v112 | ((unint64_t)v113 << 32);
      v8 = v122;
      v7 = v123;
      v9 = v118;
      v10 = v119;
      v11 = v116;
      v12 = v117;
      v13 = v115;
      v14 = v114;
      goto LABEL_8;
    }
LABEL_86:
    sub_1B1A086DC(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_87:
    sub_1B19ED720((uint64_t)v108);
    goto LABEL_88;
  }
  if (!v106)
    goto LABEL_86;
  v12 = 0;
  v10 = 0;
  v4 = 0;
  v5 = 0;
  v8 = 0;
  v6 = 0;
  v14 = 0;
  v13 = 0;
  v11 = 0;
  v9 = 0;
  v7 = 0;
LABEL_8:
  v134[0] = v111;
  v134[1] = v6;
  v134[2] = v14;
  v134[3] = v13;
  v134[4] = v11;
  v134[5] = v12;
  v134[6] = v9;
  v134[7] = v10;
  v94 = v4;
  v95 = v8;
  v134[8] = v4;
  v134[9] = v5;
  v134[10] = v8;
  v134[11] = v7;
  v15 = v141;
  v16 = v142;
  v17 = v143;
  sub_1B1B7C5AC((uint64_t)&v135);
  sub_1B1A086DC(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  sub_1B1D7B718((uint64_t)v134, v15, v16, v17);
  sub_1B1A086DC(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B1D7DBE8(v2, v151, v152, v153);
  sub_1B19ED720((uint64_t)&v135);
  sub_1B1B7C5AC((uint64_t)&v135);
  sub_1B1E5267C();
  if (v136 < 0.0)
    v19 = 0.0;
  else
    v19 = v136;
  v20 = 1.0 - v19;
  if ((float)(1.0 - v19) < 0.0)
    v20 = 0.0;
  v93 = v20;
  v21 = vdiv_f32(vmul_f32(vminnm_f32(vmaxnm_f32(v138, 0), (float32x2_t)0x4334000043B40000), (float32x2_t)vdup_n_s32(0x40490FDAu)), (float32x2_t)vdup_n_s32(0x43340000u));
  v22 = v21.f32[1];
  if (v21.f32[1] >= v21.f32[0])
    v22 = v21.f32[0];
  v23 = v21.f32[0] - v22;
  v96 = v21.f32[0];
  v24 = 0.0;
  if ((float)(v21.f32[0] - v22) < v21.f32[0])
    v24 = 1.0 / (float)(v21.f32[0] - v23);
  v25 = v137;
  v26 = v139;
  if (v139 >= 16)
    v26 = 16;
  if (v26 <= 2)
    v26 = 2;
  v92 = v26;
  v91 = v140;
  v27 = fminf(v144, 1.0);
  if (v27 < 0.0)
    v28 = 0.0;
  else
    v28 = v27;
  v29 = fminf(v18 * fabsf(v146), 1.0);
  if (v29 < 0.0)
    v30 = 0.0;
  else
    v30 = v29;
  v31 = fminf(v18 * v147, 1.0);
  if (v31 < 0.0)
    v31 = 0.0;
  v89 = v31;
  v90 = v30;
  v32 = fminf(v18 * v148, 1.0);
  if (v32 < 0.0)
    v33 = 0.0;
  else
    v33 = v32;
  v34 = fminf(v18 * v149, 1.0);
  if (v34 < 0.0)
    v35 = 0.0;
  else
    v35 = v34;
  v36 = v150;
  if (v19 <= 0.0 && v35 <= 0.0 || v137 <= 0.0)
  {
    sub_1B19ED720((uint64_t)v108);
    swift_release();
    sub_1B19ED720((uint64_t)&v135);
    sub_1B1A086DC(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    return sub_1B19ED720((uint64_t)&v135);
  }
  if (!v107)
  {
    sub_1B19ED720((uint64_t)&v135);
    goto LABEL_87;
  }
  if (v95 <= 0 || !v10)
  {
    sub_1B19ED720((uint64_t)v108);
    goto LABEL_93;
  }
  v37 = fmaxf(v145, 0.001);
  v86 = 1.0 / (float)(v37 * 0.2);
  v87 = v37 * 0.2;
  v88 = v37;
  v105 = v5[4];
  v38 = *(_BYTE *)(v94 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v85 = 1.0 / (float)(v37 - (float)(v37 * 0.2));
  sub_1B1A086DC(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  sub_1B1A086DC(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  v39 = 0;
  v82 = v38;
  v83 = v12;
  v84 = v10;
  while (2)
  {
    v98 = v39;
    v40 = (unsigned int *)(v12 + 48 * v39);
    v41 = *v40;
    v42 = v40[1];
    v43 = v40[2];
    v44 = *((_QWORD *)v40 + 3);
    v99 = *((_QWORD *)v40 + 2);
    v46 = *((_QWORD *)v40 + 4);
    v45 = *((_QWORD *)v40 + 5);
    if ((v38 & 1) != 0)
    {
      v47 = *(os_unfair_lock_s **)(v45 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v47);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v45 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v105);
    v103 = v5[7];
    v104 = v5[6];
    v101 = v5[9];
    v102 = v5[8];
    v100 = v5[10];
    v48 = v5[4];
    v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v5[6] = ecs_stack_allocator_allocate(v48, 48 * v49, 8);
    v5[7] = v49;
    v5[9] = 0;
    v5[10] = 0;
    v5[8] = 0;
    swift_release();
    v129[0] = v94;
    v97 = v45;
    v129[1] = v45;
    v129[2] = v5;
    v129[3] = v43;
    v129[4] = (v42 - v41 + v43);
    v129[5] = v95;
    v129[6] = v41;
    v129[7] = v42;
    v129[8] = 0;
    v129[9] = 0;
    v130 = 1;
    v131 = v99;
    v132 = v44;
    v133 = v46;
    sub_1B1D7F448(v129, v92, v106, v91, v25, v19, v28, 1.0 - v28, v90, v88, v87, v85, v86, v96, v23, v24, v89, v33, v93,
      v35,
      v36);
    v50 = v5[6];
    v51 = v5[8];
    if (!v51)
    {
      v77 = v5[7];
      v78 = (_QWORD *)v5[4];
      v12 = v83;
      v79 = v84;
      v38 = v82;
      v80 = v98;
      goto LABEL_83;
    }
    for (i = 0; i != v51; ++i)
    {
      v54 = (uint64_t *)(v50 + 48 * i);
      v55 = *v54;
      v56 = (void (*)(uint64_t))v54[4];
      v57 = v5[9];
      if (v57)
        v58 = v55 == v57;
      else
        v58 = 0;
      if (v58 || !v107[11])
        goto LABEL_48;
      v59 = v107[9];
      v60 = (_QWORD *)((char *)v107 + v107[8] + 41);
      v61 = v54[2];
      v62 = v60;
      v63 = v59 >> 4;
      v64 = (char *)v107 + 41;
      if (v59 >= 0x10)
      {
        while (*v62 != v55)
        {
          ++v64;
          v62 += 2;
          if (!--v63)
            goto LABEL_63;
        }
        v65 = v64[v107[10]];
        v66 = v65 > 5;
        v67 = (1 << v65) & 0x23;
        if (v66 || v67 == 0)
        {
LABEL_48:
          v53 = swift_retain();
          v56(v53);
          swift_release();
          continue;
        }
      }
LABEL_63:
      if (swift_conformsToProtocol2())
        v69 = v61;
      else
        v69 = 0;
      if (v69)
      {
        if (v59 < 0x10)
          goto LABEL_48;
        v70 = v60;
        v71 = v59 >> 4;
        v72 = (char *)v107 + 41;
        while (*v70 != v69)
        {
          ++v72;
          v70 += 2;
          if (!--v71)
            goto LABEL_76;
        }
        v73 = v72[v107[10]];
        v66 = v73 > 5;
        v74 = (1 << v73) & 0x23;
        if (v66 || v74 == 0)
          goto LABEL_48;
LABEL_76:
        v76 = 16 * (v59 >> 4);
        while (*v60 != v69)
        {
          v60 += 2;
          v76 -= 16;
          if (!v76)
            goto LABEL_48;
        }
      }
    }
    v77 = v5[7];
    v50 = v5[6];
    v78 = (_QWORD *)v5[4];
    v12 = v83;
    v79 = v84;
    v38 = v82;
    v80 = v98;
    if ((uint64_t)v5[8] >= 1)
      swift_arrayDestroy();
LABEL_83:
    ecs_stack_allocator_deallocate(v78, v50, 48 * v77);
    v5[6] = v104;
    v5[7] = v103;
    v5[8] = v102;
    v5[9] = v101;
    v5[10] = v100;
    sub_1B1F03804((char *)v97);
    ecs_stack_allocator_pop_snapshot(v105);
    if ((v38 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v97 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v97 + 376));
    }
    swift_release();
    v39 = v80 + 1;
    if (v39 != v79)
      continue;
    break;
  }
  sub_1B1A086DC(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B19ED720((uint64_t)v108);
  sub_1B1A086DC(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_93:
  sub_1B1A086DC(v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B19ED720((uint64_t)&v135);
LABEL_88:
  swift_release();
  return sub_1B19ED720((uint64_t)&v135);
}

uint64_t sub_1B1D86098@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;

  v26 = a2;
  sub_1B19F8E54(0, &qword_1EEF5E398, (uint64_t (*)(void))sub_1B1D87150, (uint64_t)&type metadata for ParticleFlockingSpeedControl.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v26 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D87150();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v6;
  v11 = v26;
  v34 = 0;
  v12 = v5;
  sub_1B22297F0();
  v14 = v13;
  v33 = 1;
  sub_1B22297F0();
  v16 = v15;
  v17 = (uint64_t)a1;
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  v31 = 2;
  sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v18, MEMORY[0x1E0DEDD40]);
  sub_1B2229814();
  v19 = v32;
  v30 = 3;
  sub_1B22297F0();
  v21 = v20;
  v29 = 4;
  sub_1B22297F0();
  v23 = v22;
  v27 = 5;
  sub_1B1A7136C();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v12);
  v24 = v28;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v17);
  *(_DWORD *)v11 = v14;
  *(_DWORD *)(v11 + 4) = v16;
  *(_QWORD *)(v11 + 8) = v19;
  *(_DWORD *)(v11 + 16) = v21;
  *(_DWORD *)(v11 + 20) = v23;
  *(_BYTE *)(v11 + 24) = v24;
  return result;
}

_QWORD *sub_1B1D86370(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  int v11;
  double v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned __int8 v17;
  __int128 v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  int32x4_t v27;
  float v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v74;
  _QWORD *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int32x4_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int16 *v92;
  _OWORD v93[2];
  uint64_t v94;
  _QWORD v95[8];
  _QWORD v96[7];
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _OWORD v101[2];
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _QWORD v106[10];
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  swift_retain_n();
  v4 = sub_1B1D189E0(v2);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v9;
  swift_release();
  v12 = 134217728.0;
  if (v11 == 6)
    v13 = 0.3;
  else
    v13 = *(float *)&v4;
  if (v11 == 6)
    v14 = 10.0;
  else
    v14 = *((float *)&v4 + 1);
  if (v11 != 6)
    v12 = v6;
  v82 = v12;
  if (v11 == 6)
    v15 = 0.05;
  else
    v15 = *(float *)&v8;
  if (v11 == 6)
    v16 = 0.1;
  else
    v16 = *((float *)&v8 + 1);
  if (v11 == 6)
    v17 = 0;
  else
    v17 = v10;
  v18 = *(_OWORD *)(a1 + 104);
  v103 = *(_OWORD *)(a1 + 88);
  v104 = v18;
  v105 = *(_QWORD *)(a1 + 120);
  sub_1B1B7038C((uint64_t)v93);
  sub_1B1E5267C();
  v20 = *(float *)&v82;
  v21 = 0.0;
  if ((float)(v13 * v19) >= 0.0)
    v21 = v13 * v19;
  if ((float)(v13 * v19) >= 1.0)
    v22 = 1.0;
  else
    v22 = v21;
  v23 = *(float *)&v82;
  if (*(float *)&v82 > *((float *)&v82 + 1))
  {
    v23 = *((float *)&v82 + 1);
    if ((~HIDWORD(v82) & 0x7F800000) == 0)
    {
      if ((HIDWORD(v82) & 0x7FFFFF) != 0)
        v23 = *(float *)&v82;
      else
        v23 = *((float *)&v82 + 1);
    }
  }
  if (*((float *)&v82 + 1) >= *(float *)&v82)
  {
    if ((~HIDWORD(v82) & 0x7F800000) != 0)
    {
      LODWORD(v82) = HIDWORD(v82);
    }
    else
    {
      if ((HIDWORD(v82) & 0x7FFFFF) == 0)
        v20 = *((float *)&v82 + 1);
      *(float *)&v82 = v20;
    }
  }
  v24 = v15 * v19;
  v25 = 1.0 - v24;
  if (v24 < 0.0)
    v25 = 1.0;
  if (v24 >= 1.0)
    v26 = 0.0;
  else
    v26 = v25;
  sub_1B1F1C24C(v17);
  v81 = v27;
  v101[0] = v93[0];
  v101[1] = v93[1];
  v102 = v94;
  sub_1B1E8FCE4(v3, (uint64_t)v101, 0x200000000, v95);
  sub_1B1A18378((uint64_t)v95, (uint64_t)v96, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v92 = (unsigned __int16 *)v96[0];
  if (!v96[0])
  {
    sub_1B19ED720((uint64_t)v93);
    return (_QWORD *)swift_release();
  }
  v80 = v100;
  if (v100 <= 0 || (v79 = v97) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)v93);
    goto LABEL_89;
  }
  v28 = v14 * v22;
  v78 = v96[5];
  v29 = v99;
  v30 = v99[4];
  v77 = v98;
  v31 = *(_BYTE *)(v98 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v75 = v99 + 8;
  v91 = v96[0] + 41;
  swift_retain();
  swift_retain();
  swift_retain();
  v32 = 0;
  v76 = v31;
  v74 = v30;
  while (2)
  {
    v87 = v32;
    v33 = (unsigned int *)(v78 + 48 * v32);
    v34 = *v33;
    v35 = v33[1];
    v36 = v33[2];
    v37 = *((_QWORD *)v33 + 3);
    v88 = *((_QWORD *)v33 + 2);
    v39 = *((_QWORD *)v33 + 4);
    v38 = *((_QWORD *)v33 + 5);
    if ((v31 & 1) != 0)
    {
      v40 = *(os_unfair_lock_s **)(v38 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v40);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v38 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v30);
    v84 = v29[7];
    v85 = v29[6];
    v83 = v29[8];
    v89 = v29[10];
    v90 = v29[9];
    v41 = v29[4];
    v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v29[6] = ecs_stack_allocator_allocate(v41, 48 * v42, 8);
    v29[7] = v42;
    v75[1] = 0;
    v75[2] = 0;
    *v75 = 0;
    swift_release();
    v106[0] = v77;
    v106[1] = v38;
    v86 = v38;
    v106[2] = v29;
    v106[3] = v36;
    v106[4] = (v35 - v34 + v36);
    v106[5] = v80;
    v106[6] = v34;
    v106[7] = v35;
    v106[8] = 0;
    v106[9] = 0;
    v107 = 1;
    v108 = v88;
    v109 = v37;
    v110 = v39;
    sub_1B1D80800(v106, v16, v81, 1.0 - v22, v28, v26, v23, *(float *)&v82);
    v43 = v29[6];
    v44 = v29[8];
    if (!v44)
    {
      v70 = v29[7];
      v71 = (_QWORD *)v29[4];
      v30 = v74;
      v72 = v87;
      goto LABEL_84;
    }
    for (i = 0; i != v44; ++i)
    {
      v47 = (uint64_t *)(v43 + 48 * i);
      v48 = *v47;
      v49 = (void (*)(uint64_t))v47[4];
      v50 = v29[9];
      if (v50)
        v51 = v48 == v50;
      else
        v51 = 0;
      if (v51 || !v92[11])
        goto LABEL_49;
      v52 = v92[9];
      v53 = (_QWORD *)(v91 + v92[8]);
      v54 = v47[2];
      v55 = v53;
      v56 = v52 >> 4;
      v57 = v91;
      if (v52 >= 0x10)
      {
        while (*v55 != v48)
        {
          ++v57;
          v55 += 2;
          if (!--v56)
            goto LABEL_64;
        }
        v58 = *(unsigned __int8 *)(v57 + v92[10]);
        v59 = v58 > 5;
        v60 = (1 << v58) & 0x23;
        if (v59 || v60 == 0)
        {
LABEL_49:
          v46 = swift_retain();
          v49(v46);
          swift_release();
          continue;
        }
      }
LABEL_64:
      if (swift_conformsToProtocol2())
        v62 = v54;
      else
        v62 = 0;
      if (v62)
      {
        if (v52 < 0x10)
          goto LABEL_49;
        v63 = v53;
        v64 = v52 >> 4;
        v65 = v91;
        while (*v63 != v62)
        {
          ++v65;
          v63 += 2;
          if (!--v64)
            goto LABEL_77;
        }
        v66 = *(unsigned __int8 *)(v65 + v92[10]);
        v59 = v66 > 5;
        v67 = (1 << v66) & 0x23;
        if (v59 || v67 == 0)
          goto LABEL_49;
LABEL_77:
        v69 = 16 * (v52 >> 4);
        while (*v53 != v62)
        {
          v53 += 2;
          v69 -= 16;
          if (!v69)
            goto LABEL_49;
        }
      }
    }
    v70 = v29[7];
    v43 = v29[6];
    v71 = (_QWORD *)v29[4];
    v30 = v74;
    v72 = v87;
    if ((uint64_t)v29[8] >= 1)
      swift_arrayDestroy();
LABEL_84:
    ecs_stack_allocator_deallocate(v71, v43, 48 * v70);
    v29[6] = v85;
    v29[7] = v84;
    v29[8] = v83;
    v29[9] = v90;
    v29[10] = v89;
    sub_1B1F03804((char *)v86);
    ecs_stack_allocator_pop_snapshot(v30);
    v31 = v76;
    if ((v76 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v86 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v86 + 376));
    }
    swift_release();
    v32 = v72 + 1;
    if (v32 != v79)
      continue;
    break;
  }
  sub_1B19ED720((uint64_t)v93);
LABEL_89:
  swift_release();
  sub_1B1A086DC(v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

double sub_1B1D86A08(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;

  return sub_1B20050A0(a1, a2, *(__int128 **)(v2 + 16), *(_DWORD *)(v2 + 24));
}

uint64_t getEnumTagSinglePayload for ParticleFlockingAlignOrientation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingAlignOrientation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingAlignOrientation()
{
  return &type metadata for ParticleFlockingAlignOrientation;
}

ValueMetadata *type metadata accessor for ParticleFlockingAlignVelocityOnPlane()
{
  return &type metadata for ParticleFlockingAlignVelocityOnPlane;
}

__n128 initializeWithCopy for ParticleFlockingConstrainToArea(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingConstrainToArea()
{
  return &type metadata for ParticleFlockingConstrainToArea;
}

uint64_t getEnumTagSinglePayload for ParticleNoise(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleNoise(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingConstrainToPlane()
{
  return &type metadata for ParticleFlockingConstrainToPlane;
}

ValueMetadata *type metadata accessor for ParticleFlockingFlyTowardsArea()
{
  return &type metadata for ParticleFlockingFlyTowardsArea;
}

uint64_t initializeWithCopy for ParticleFlockingSolver(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_WORD *)(a1 + 97) = *(_WORD *)(a2 + 97);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ParticleFlockingSolver(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  return a1;
}

__n128 initializeWithTake for ParticleFlockingSolver(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 95) = *(_DWORD *)((char *)a2 + 95);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for ParticleFlockingSolver(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 84) = *(_QWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleFlockingSolver(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 99))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingSolver(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 98) = 0;
    *(_WORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 99) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 99) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingSolver()
{
  return &type metadata for ParticleFlockingSolver;
}

uint64_t getEnumTagSinglePayload for ParticleFlockingSpeedControl(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 6;
  v5 = v3 - 6;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingSpeedControl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingSpeedControl()
{
  return &type metadata for ParticleFlockingSpeedControl;
}

ValueMetadata *type metadata accessor for ParticleFlockingSolverData.Cell()
{
  return &type metadata for ParticleFlockingSolverData.Cell;
}

unint64_t sub_1B1D86F74()
{
  unint64_t result;

  result = qword_1EEF5E310;
  if (!qword_1EEF5E310)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2293260, &type metadata for ParticleFlockingAlignOrientation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E310);
  }
  return result;
}

unint64_t sub_1B1D86FB8()
{
  unint64_t result;

  result = qword_1EEF5E328;
  if (!qword_1EEF5E328)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2293210, &type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E328);
  }
  return result;
}

unint64_t sub_1B1D86FFC()
{
  unint64_t result;

  result = qword_1EEF5E340;
  if (!qword_1EEF5E340)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22931C0, &type metadata for ParticleFlockingConstrainToArea.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E340);
  }
  return result;
}

unint64_t sub_1B1D87040()
{
  unint64_t result;

  result = qword_1EEF5E358;
  if (!qword_1EEF5E358)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2293170, &type metadata for ParticleFlockingConstrainToPlane.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E358);
  }
  return result;
}

unint64_t sub_1B1D87084()
{
  unint64_t result;

  result = qword_1EEF5E370;
  if (!qword_1EEF5E370)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2293120, &type metadata for ParticleFlockingFlyTowardsArea.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E370);
  }
  return result;
}

unint64_t sub_1B1D870C8()
{
  unint64_t result;

  result = qword_1EEF5E388;
  if (!qword_1EEF5E388)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22930D0, &type metadata for ParticleFlockingSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E388);
  }
  return result;
}

uint64_t sub_1B1D8710C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1AFA498();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B1D87150()
{
  unint64_t result;

  result = qword_1EEF5E3A0;
  if (!qword_1EEF5E3A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2293080, &type metadata for ParticleFlockingSpeedControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingSpeedControl.CodingKeys()
{
  return &type metadata for ParticleFlockingSpeedControl.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingSolver.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1B1D871F4 + 4 * byte_1B22921CB[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1B1D87228 + 4 * byte_1B22921C6[v4]))();
}

uint64_t sub_1B1D87228(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D87230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D87238);
  return result;
}

uint64_t sub_1B1D87244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D8724CLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1B1D87250(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D87258(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingSolver.CodingKeys()
{
  return &type metadata for ParticleFlockingSolver.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingFlyTowardsArea.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B1D872C0 + 4 * byte_1B22921D5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B1D872F4 + 4 * byte_1B22921D0[v4]))();
}

uint64_t sub_1B1D872F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D872FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D87304);
  return result;
}

uint64_t sub_1B1D87310(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D87318);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B1D8731C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D87324(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingFlyTowardsArea.CodingKeys()
{
  return &type metadata for ParticleFlockingFlyTowardsArea.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleFlockingConstrainToPlane.CodingKeys()
{
  return &type metadata for ParticleFlockingConstrainToPlane.CodingKeys;
}

uint64_t _s3VFX32ParticleFlockingConstrainToPlaneV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1D873A0 + 4 * byte_1B22921DF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1D873D4 + 4 * byte_1B22921DA[v4]))();
}

uint64_t sub_1B1D873D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D873DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D873E4);
  return result;
}

uint64_t sub_1B1D873F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D873F8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1D873FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D87404(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingConstrainToArea.CodingKeys()
{
  return &type metadata for ParticleFlockingConstrainToArea.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ParticleFlockingAlignVelocityOnPlane.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1D8746C + 4 * byte_1B22921E9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1D874A0 + 4 * byte_1B22921E4[v4]))();
}

uint64_t sub_1B1D874A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D874A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D874B0);
  return result;
}

uint64_t sub_1B1D874BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D874C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1D874C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D874D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingAlignVelocityOnPlane.CodingKeys()
{
  return &type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys;
}

uint64_t _s3VFX28ParticleFlockingSpeedControlV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B1D87538 + 4 * byte_1B22921F3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B1D8756C + 4 * byte_1B22921EE[v4]))();
}

uint64_t sub_1B1D8756C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D87574(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1D8757CLL);
  return result;
}

uint64_t sub_1B1D87588(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1D87590);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B1D87594(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1D8759C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleFlockingAlignOrientation.CodingKeys()
{
  return &type metadata for ParticleFlockingAlignOrientation.CodingKeys;
}

unint64_t sub_1B1D875BC()
{
  unint64_t result;

  result = qword_1EEF5E3B0;
  if (!qword_1EEF5E3B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292AB8, &type metadata for ParticleFlockingAlignOrientation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3B0);
  }
  return result;
}

unint64_t sub_1B1D87604()
{
  unint64_t result;

  result = qword_1EEF5E3B8;
  if (!qword_1EEF5E3B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292BA8, &type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3B8);
  }
  return result;
}

unint64_t sub_1B1D8764C()
{
  unint64_t result;

  result = qword_1EEF5E3C0;
  if (!qword_1EEF5E3C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292C98, &type metadata for ParticleFlockingConstrainToArea.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3C0);
  }
  return result;
}

unint64_t sub_1B1D87694()
{
  unint64_t result;

  result = qword_1EEF5E3C8;
  if (!qword_1EEF5E3C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292D88, &type metadata for ParticleFlockingConstrainToPlane.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3C8);
  }
  return result;
}

unint64_t sub_1B1D876DC()
{
  unint64_t result;

  result = qword_1EEF5E3D0;
  if (!qword_1EEF5E3D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292E78, &type metadata for ParticleFlockingFlyTowardsArea.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3D0);
  }
  return result;
}

unint64_t sub_1B1D87724()
{
  unint64_t result;

  result = qword_1EEF5E3D8;
  if (!qword_1EEF5E3D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292F68, &type metadata for ParticleFlockingSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3D8);
  }
  return result;
}

unint64_t sub_1B1D8776C()
{
  unint64_t result;

  result = qword_1EEF5E3E0;
  if (!qword_1EEF5E3E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2293058, &type metadata for ParticleFlockingSpeedControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3E0);
  }
  return result;
}

unint64_t sub_1B1D877B4()
{
  unint64_t result;

  result = qword_1EEF5E3E8;
  if (!qword_1EEF5E3E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292F90, &type metadata for ParticleFlockingSpeedControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3E8);
  }
  return result;
}

unint64_t sub_1B1D877FC()
{
  unint64_t result;

  result = qword_1EEF5E3F0;
  if (!qword_1EEF5E3F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292FB8, &type metadata for ParticleFlockingSpeedControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3F0);
  }
  return result;
}

unint64_t sub_1B1D87844()
{
  unint64_t result;

  result = qword_1EEF5E3F8;
  if (!qword_1EEF5E3F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292EA0, &type metadata for ParticleFlockingSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E3F8);
  }
  return result;
}

unint64_t sub_1B1D8788C()
{
  unint64_t result;

  result = qword_1EEF5E400;
  if (!qword_1EEF5E400)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292EC8, &type metadata for ParticleFlockingSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E400);
  }
  return result;
}

unint64_t sub_1B1D878D4()
{
  unint64_t result;

  result = qword_1EEF5E408;
  if (!qword_1EEF5E408)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292DB0, &type metadata for ParticleFlockingFlyTowardsArea.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E408);
  }
  return result;
}

unint64_t sub_1B1D8791C()
{
  unint64_t result;

  result = qword_1EEF5E410;
  if (!qword_1EEF5E410)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292DD8, &type metadata for ParticleFlockingFlyTowardsArea.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E410);
  }
  return result;
}

unint64_t sub_1B1D87964()
{
  unint64_t result;

  result = qword_1EEF5E418;
  if (!qword_1EEF5E418)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292CC0, &type metadata for ParticleFlockingConstrainToPlane.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E418);
  }
  return result;
}

unint64_t sub_1B1D879AC()
{
  unint64_t result;

  result = qword_1EEF5E420;
  if (!qword_1EEF5E420)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292CE8, &type metadata for ParticleFlockingConstrainToPlane.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E420);
  }
  return result;
}

unint64_t sub_1B1D879F4()
{
  unint64_t result;

  result = qword_1EEF5E428;
  if (!qword_1EEF5E428)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292BD0, &type metadata for ParticleFlockingConstrainToArea.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E428);
  }
  return result;
}

unint64_t sub_1B1D87A3C()
{
  unint64_t result;

  result = qword_1EEF5E430;
  if (!qword_1EEF5E430)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292BF8, &type metadata for ParticleFlockingConstrainToArea.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E430);
  }
  return result;
}

unint64_t sub_1B1D87A84()
{
  unint64_t result;

  result = qword_1EEF5E438;
  if (!qword_1EEF5E438)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292AE0, &type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E438);
  }
  return result;
}

unint64_t sub_1B1D87ACC()
{
  unint64_t result;

  result = qword_1EEF5E440;
  if (!qword_1EEF5E440)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292B08, &type metadata for ParticleFlockingAlignVelocityOnPlane.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E440);
  }
  return result;
}

unint64_t sub_1B1D87B14()
{
  unint64_t result;

  result = qword_1EEF5E448;
  if (!qword_1EEF5E448)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22929F0, &type metadata for ParticleFlockingAlignOrientation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E448);
  }
  return result;
}

unint64_t sub_1B1D87B5C()
{
  unint64_t result;

  result = qword_1EEF5E450;
  if (!qword_1EEF5E450)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2292A18, &type metadata for ParticleFlockingAlignOrientation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E450);
  }
  return result;
}

uint64_t sub_1B1D87BA0(float a1, float a2)
{
  return sub_1B1D87BB8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float, float))sub_1B1FF1CD0, a1, a2);
}

uint64_t sub_1B1D87BAC(float a1, float a2)
{
  return sub_1B1D87BB8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float, float))sub_1B1FF1CF0, a1, a2);
}

uint64_t sub_1B1D87BB8(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, float, float), float a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v7 = *(_QWORD *)v3;
  v8 = *(_DWORD *)(v3 + 36);
  v9 = *(int *)(v3 + 32);
  swift_retain();
  v10 = (_DWORD)v9 == -1 && v8 == 0;
  if (!v10 && (v9 & 0x80000000) == 0 && *(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v9)
  {
    v11 = *(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v8 == -1 || *(_DWORD *)(v11 + 12 * (int)v9 + 8) == v8)
    {
      v13 = (int *)(v11 + 12 * (int)v9);
      v14 = *(_QWORD *)(*(_QWORD *)(v7 + 136) + 8 * *v13 + 32);
      v15 = *((unsigned __int16 *)v13 + 2);
      sub_1B1BEE528(v3);
      LOBYTE(v14) = a1(v14, v15, 656, v3, a2, a3);
      sub_1B1B4F21C(v3);
      if ((v14 & 1) != 0)
        return swift_release();
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1D87DB4(_QWORD *a1, float a2, float a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  float v14;
  float v15;

  sub_1B1D88390(0, &qword_1EEF5E458, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D8834C();
  sub_1B222A180();
  v14 = a2;
  v15 = a3;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B1D87EDC()
{
  sub_1B1D8834C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1D87F04()
{
  sub_1B1D8834C();
  return sub_1B222A1E0();
}

void sub_1B1D87F2C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;

  v4 = sub_1B1D881E8(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B1D87F54(_QWORD *a1)
{
  float *v1;

  return sub_1B1D87DB4(a1, *v1, v1[1]);
}

uint64_t sub_1B1D87F6C()
{
  return type metadata accessor for ParticleTextureFrameInit.System();
}

double sub_1B1D87F88()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleTextureFrame;
  *(_QWORD *)(v0 + 40) = &off_1E639E080;
  return result;
}

uint64_t type metadata accessor for ParticleTextureFrameInit.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1D87FEC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  float v5;
  float v6;

  v1 = *(_QWORD *)(a1 + 8);
  swift_retain();
  v2 = sub_1B1D180CC(v1);
  v4 = v3;
  swift_release();
  v6 = *((float *)&v2 + 1);
  v5 = *(float *)&v2;
  if ((v4 & 1) != 0)
  {
    v5 = 0.0;
    v6 = 0.0;
  }
  return sub_1B1D87BB8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, float, float))sub_1B1FF1CB0, v5, v6);
}

const char *sub_1B1D88060()
{
  return "SetTextureFrame.CPU";
}

uint64_t type metadata accessor for ParticleTextureFrameInit.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1D88098()
{
  return "SetTextureFrame.GPU";
}

uint64_t sub_1B1D880AC()
{
  return type metadata accessor for ParticleTextureFrameInit.GPUSystem();
}

uint64_t sub_1B1D880C8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD v18[2];

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[6];
  swift_retain();
  v5 = sub_1B1D180CC(v3);
  v7 = v6;
  swift_release();
  v9 = *((float *)&v5 + 1);
  v8 = *(float *)&v5;
  if ((v7 & 1) != 0)
  {
    v8 = 0.0;
    v9 = 0.0;
  }
  *(float *)v18 = v8;
  *(float *)&v18[1] = v9;
  v10 = *a1;
  if (*a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_texture_frame_uniforms(0);
    sub_1B1F40E1C((uint64_t)v18, 1, ObjectType, v12, v13, v14, v15, v16);
  }
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v2, v10 == 0, 0, (uint64_t)a1, 0xD00000000000001ALL, 0x80000001B233AE70, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

ValueMetadata *type metadata accessor for ParticleTextureFrameInit()
{
  return &type metadata for ParticleTextureFrameInit;
}

float sub_1B1D881E8(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _DWORD v11[3];

  sub_1B1D88390(0, &qword_1ED4BAC10, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1D8834C();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1B4D924();
    sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v2 = *(float *)&v11[2];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1D8834C()
{
  unint64_t result;

  result = qword_1ED4B9AE8;
  if (!qword_1ED4B9AE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22935B0, &type metadata for ParticleTextureFrameInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9AE8);
  }
  return result;
}

void sub_1B1D88390(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1D8834C();
    v7 = a3(a1, &type metadata for ParticleTextureFrameInit.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleTextureFrameInit.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1D8842C + 4 * byte_1B22933B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1D8844C + 4 * byte_1B22933B5[v4]))();
}

_BYTE *sub_1B1D8842C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1D8844C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1D88454(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1D8845C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1D88464(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1D8846C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ParticleTextureFrameInit.CodingKeys()
{
  return &type metadata for ParticleTextureFrameInit.CodingKeys;
}

unint64_t sub_1B1D8848C()
{
  unint64_t result;

  result = qword_1EEF5E460;
  if (!qword_1EEF5E460)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2293588, &type metadata for ParticleTextureFrameInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5E460);
  }
  return result;
}

unint64_t sub_1B1D884D4()
{
  unint64_t result;

  result = qword_1ED4B9AF8;
  if (!qword_1ED4B9AF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22934F8, &type metadata for ParticleTextureFrameInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9AF8);
  }
  return result;
}

unint64_t sub_1B1D8851C()
{
  unint64_t result;

  result = qword_1ED4B9AF0;
  if (!qword_1ED4B9AF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2293520, &type metadata for ParticleTextureFrameInit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9AF0);
  }
  return result;
}

void sub_1B1D88560()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B1BCE95C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1D88600()
{
  return type metadata accessor for ECSNode(0);
}

uint64_t type metadata accessor for ECSNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5E468);
}

uint64_t sub_1B1D88620()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t sub_1B1D8862C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

