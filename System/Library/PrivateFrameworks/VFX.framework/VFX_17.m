ValueMetadata *type metadata accessor for WorldAABB()
{
  return &type metadata for WorldAABB;
}

ValueMetadata *type metadata accessor for LocalAABB()
{
  return &type metadata for LocalAABB;
}

uint64_t sub_1B2095068@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_1B20950BC(a1, a2);
}

uint64_t sub_1B209507C(_QWORD *a1)
{
  return sub_1B20950E4(a1);
}

void sub_1B2095090(_OWORD *a1@<X8>)
{
  __int128 v2;

  *(double *)&v2 = sub_1B2095388();
  *a1 = xmmword_1B2244E20;
  a1[1] = v2;
}

uint64_t sub_1B20950BC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  result = sub_1B2095190(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
  }
  return result;
}

uint64_t sub_1B20950E4(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B1E384D0();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B2095190(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  sub_1B1FF3F14();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067BAC(2000, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(&v16, *((uint64_t *)&v17 + 1));
      sub_1B1E38430();
      sub_1B2229D6C();
      v12 = v15;
      v13 = v14;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v16);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1E88F28();
    sub_1B222A150();
    if (!v1)
    {
      sub_1B1E38430();
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v12 = v17;
      v13 = v16;
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

double sub_1B2095388()
{
  return 0.0000305175853;
}

uint64_t sub_1B2095398(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  v7 = 0;
  v8 = swift_bridgeObjectRetain() + 112;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_5;
    }
    v11 = v7 + 1;
    if (v7 + 1 >= v6)
      return swift_release();
    v12 = *(_QWORD *)(v2 + 8 * v11);
    if (!v12)
    {
      v11 = v7 + 2;
      if (v7 + 2 >= v6)
        return swift_release();
      v12 = *(_QWORD *)(v2 + 8 * v11);
      if (!v12)
      {
        v11 = v7 + 3;
        if (v7 + 3 >= v6)
          return swift_release();
        v12 = *(_QWORD *)(v2 + 8 * v11);
        if (!v12)
        {
          v11 = v7 + 4;
          if (v7 + 4 >= v6)
            return swift_release();
          v12 = *(_QWORD *)(v2 + 8 * v11);
          if (!v12)
          {
            v11 = v7 + 5;
            if (v7 + 5 >= v6)
              return swift_release();
            v12 = *(_QWORD *)(v2 + 8 * v11);
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_20:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v7 = v11;
LABEL_5:
    sub_1B1B8B00C(&v14, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v10));
  }
  while (v6 - 6 != v7)
  {
    v12 = *(_QWORD *)(v8 + 8 * v7++);
    if (v12)
    {
      v11 = v7 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

uint64_t *sub_1B20954F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45[8];
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  _BYTE v60[40];
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  v1 = v0;
  v42 = 0;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v61 = qword_1ED4D09F8;
  v62 = 0;
  v63 = 2;
  v64 = 1;
  v65 = 2;
  v66 = 0;
  swift_retain();
  sub_1B1E3C60C(3, (uint64_t)v43);
  swift_release();
  v58[0] = v43[0];
  v58[1] = v43[1];
  v59 = v44;
  sub_1B1E8FCE4(v0, (uint64_t)v58, 0x200000000, v45);
  sub_1B1A18378((uint64_t)v45, (uint64_t)v46, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v46[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v43);
  v53 = v46[0];
  v54 = v46[1];
  v34 = v48;
  v55 = v47;
  v3 = v49;
  v2 = v50;
  v4 = v52;
  v37 = v51;
  sub_1B19ED720((uint64_t)v43);
  if (v4 > 0 && v3)
  {
    v5 = v37[4];
    v6 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v56[0] = v53;
    v56[1] = v54;
    v57 = v55;
    swift_retain();
    swift_retain();
    swift_retain();
    v7 = 0;
    v31 = v6;
    v32 = v5;
    v33 = v3;
    do
    {
      v36 = v7;
      v8 = (unsigned int *)(v34 + 48 * v7);
      v9 = *v8;
      v38 = v8[1];
      v10 = (uint64_t *)*((_QWORD *)v8 + 2);
      v35 = *((_QWORD *)v8 + 3);
      v11 = *((_QWORD *)v8 + 4);
      v12 = *((_QWORD *)v8 + 5);
      if (v6)
      {
        v13 = *(os_unfair_lock_s **)(v12 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v13);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v5);
      sub_1B1A18378((uint64_t)(v37 + 6), (uint64_t)v60, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v14 = v37[4];
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v37[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
      v37[7] = v15;
      v37[9] = 0;
      v37[10] = 0;
      v37[8] = 0;
      swift_release();
      v16 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v10, v35, v11, (uint64_t)v37);
      if (v10)
      {
        if (v11)
        {
          v17 = (uint64_t *)(v16 + 8);
          v18 = MEMORY[0x1E0DEE9D8];
          do
          {
            v19 = *v10++;
            v41 = v18;
            swift_retain();
            v20 = sub_1B1A101F0(v19);
            swift_release();
            swift_retain();
            sub_1B1C1CE8C(v20, v1, v1, (uint64_t)&v41);
            swift_release();
            v21 = swift_bridgeObjectRetain();
            v22 = sub_1B209D854(v21, (uint64_t)&v41);
            swift_bridgeObjectRelease();
            *v17 = v22;
            swift_bridgeObjectRelease();
            v40[0] = sub_1B1B7EBDC(v18);
            v39 = sub_1B1B7DF34(v18);
            v23 = swift_bridgeObjectRetain();
            sub_1B1FDE994(v23, &v42, &v39, v40);
            swift_bridgeObjectRelease();
            *v17 = v40[0];
            v17 += 8;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_retain();
            sub_1B1C1D058(v20, v1, v1, &v42, (uint64_t *)&v39);
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            --v11;
          }
          while (v11);
        }
      }
      else if ((_DWORD)v9 != (_DWORD)v38)
      {
        v24 = (uint64_t *)(v16 + (v9 << 6) + 8);
        v25 = MEMORY[0x1E0DEE9D8];
        do
        {
          v41 = v25;
          swift_retain();
          v26 = sub_1B1A101F0(v9);
          swift_release();
          swift_retain();
          sub_1B1C1CE8C(v26, v1, v1, (uint64_t)&v41);
          swift_release();
          v27 = swift_bridgeObjectRetain();
          v28 = sub_1B209D854(v27, (uint64_t)&v41);
          swift_bridgeObjectRelease();
          *v24 = v28;
          swift_bridgeObjectRelease();
          v40[0] = sub_1B1B7EBDC(v25);
          v39 = sub_1B1B7DF34(v25);
          v29 = swift_bridgeObjectRetain();
          sub_1B1FDE994(v29, &v42, &v39, v40);
          swift_bridgeObjectRelease();
          *v24 = v40[0];
          v24 += 8;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_retain();
          sub_1B1C1D058(v26, v1, v1, &v42, (uint64_t *)&v39);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          ++v9;
        }
        while (v38 != v9);
      }
      sub_1B1F05D48(v37, (unsigned __int16 **)v56, (uint64_t)v60);
      sub_1B1F03804((char *)v12);
      v5 = v32;
      ecs_stack_allocator_pop_snapshot(v32);
      v6 = v31;
      if ((v31 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
      }
      swift_release();
      v7 = v36 + 1;
    }
    while (v36 + 1 != v33);
    sub_1B19ED748(v45);
  }
  return sub_1B19ED748(v45);
}

uint64_t *sub_1B2095A90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  int v12;
  int v13;
  _OWORD v15[2];
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;
  _OWORD v19[2];
  uint64_t v20;
  uint64_t v21[8];
  _QWORD v22[12];
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v25 = qword_1ED4D09F8;
  v26 = 0;
  v27 = 2;
  v28 = 1;
  v29 = 2;
  v30 = 0;
  swift_retain();
  sub_1B1B6F9DC((uint64_t)v19);
  swift_release();
  v23[0] = v19[0];
  v23[1] = v19[1];
  v24 = v20;
  sub_1B1E8FCE4(v0, (uint64_t)v23, 0x200000000, v21);
  sub_1B1A18378((uint64_t)v21, (uint64_t)v22, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v22[0])
  {
    v1 = v22[5];
    v2 = v22[7];
    v3 = v22[10];
    sub_1B19ED720((uint64_t)v19);
    if (v3 >= 1 && v2)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      v4 = 48 * v2;
      v5 = (uint64_t *)(v1 + 40);
      do
      {
        v10 = *v5;
        v11 = *(os_unfair_lock_s **)(*v5 + 376);
        swift_retain();
        os_unfair_lock_lock(v11);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
        v12 = *(_DWORD *)(v10 + 24);
        swift_retain();
        v18 = 0;
        memset(v17, 0, sizeof(v17));
        v16 = 0;
        memset(v15, 0, sizeof(v15));
        v13 = sub_1B1DA4ED8(v12, 0, 0, (uint64_t)&type metadata for CodeGenerationComponent, (uint64_t)&off_1E63AA190, (uint64_t)v17, (uint64_t)v15);
        swift_release();
        sub_1B1A04628((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        sub_1B1A04628((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        if (sub_1B1A10B20(v13))
        {
          sub_1B1A10BB0(v13);
        }
        else
        {
          v6 = *(_QWORD *)(v10 + 232);
          v7 = *(_QWORD *)(v10 + 240);
          v8 = *(unsigned __int8 *)(v10 + 120);
          v9 = *(unsigned int *)(v10 + 28);
          LOBYTE(v17[0]) = *(_BYTE *)(v10 + 32);
          sub_1B1FD8C68(v6, v7, v13, v8, v9 | ((unint64_t)LOBYTE(v17[0]) << 32), 0, 0, 0);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
        swift_release();
        v5 += 6;
        v4 -= 48;
      }
      while (v4);
      sub_1B19ED748(v21);
    }
    sub_1B19ED748(v21);
  }
  else
  {
    sub_1B19ED720((uint64_t)v19);
  }
  sub_1B2098B78();
  sub_1B209A470();
  return sub_1B209BD8C();
}

uint64_t sub_1B2095D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_unfair_lock_s *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  _QWORD *v61;
  size_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  int v78;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t result;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  ValueMetadata *v102;
  _UNKNOWN **v103;
  char v104;
  uint64_t v105;
  _OWORD v106[2];
  uint64_t v107;
  uint64_t v108[8];
  _OWORD v109[2];
  uint64_t v110;
  uint64_t v111[8];
  _OWORD v112[2];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  _OWORD v122[2];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  _OWORD v132[2];
  uint64_t v133;
  _OWORD v134[2];
  uint64_t v135;
  _OWORD v136[2];
  uint64_t v137;
  _OWORD v138[2];
  uint64_t v139;
  _BYTE v140[40];
  uint64_t v141;
  int v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  _BYTE v147[40];
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  char v152;
  uint64_t v153;

  v1 = v0;
  v105 = MEMORY[0x1E0DEE9E8];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v148 = qword_1ED4D09F8;
  v149 = 0;
  v150 = 2;
  v151 = 1;
  v152 = 2;
  v153 = 0;
  swift_retain();
  sub_1B1E3C60C(1, (uint64_t)v106);
  swift_release();
  v138[0] = v106[0];
  v138[1] = v106[1];
  v139 = v107;
  sub_1B1E8FCE4(v0, (uint64_t)v138, 0x200000000, v108);
  sub_1B1A18378((uint64_t)v108, (uint64_t)v122, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v122[0])
  {
    sub_1B19ED720((uint64_t)v106);
    goto LABEL_25;
  }
  v129 = v122[0];
  v130 = v122[1];
  v94 = v124;
  v131 = v123;
  v2 = v125;
  v3 = v126;
  v4 = v127;
  v5 = v128;
  sub_1B19ED720((uint64_t)v106);
  if (v5 <= 0 || !v2)
  {
    sub_1B19ED748(v108);
    goto LABEL_25;
  }
  v85 = v0;
  v100 = v4[4];
  v6 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v132[0] = v129;
  v132[1] = v130;
  v133 = v131;
  swift_retain();
  swift_retain();
  swift_retain();
  v7 = 0;
  v88 = v6;
  v90 = v2;
  do
  {
    v8 = (unsigned int *)(v94 + 48 * v7);
    v10 = (uint64_t *)*((_QWORD *)v8 + 2);
    v9 = *((_QWORD *)v8 + 3);
    v12 = *((_QWORD *)v8 + 4);
    v11 = *((_QWORD *)v8 + 5);
    v96 = v8[1];
    v98 = *v8;
    if (v6)
    {
      v13 = *(os_unfair_lock_s **)(v11 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v13);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v100);
    sub_1B1A18378((uint64_t)(v4 + 6), (uint64_t)v147, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v14 = v4[4];
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v4[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
    v4[7] = v15;
    v4[9] = 0;
    v4[10] = 0;
    v4[8] = 0;
    swift_release();
    v16 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v10, v9, v12, (uint64_t)v4);
    if (v10)
    {
      v6 = v88;
      if (!v12)
        goto LABEL_17;
      v17 = v16 + 32;
      v18 = v90;
      do
      {
        v19 = swift_bridgeObjectRetain();
        sub_1B2095398(v19);
        swift_bridgeObjectRelease();
        v17 += 64;
        v20 = swift_bridgeObjectRetain();
        sub_1B2095398(v20);
        swift_bridgeObjectRelease();
        --v12;
      }
      while (v12);
    }
    else
    {
      v6 = v88;
      if ((_DWORD)v98 == (_DWORD)v96)
      {
LABEL_17:
        v18 = v90;
        goto LABEL_20;
      }
      v21 = v16 + (v98 << 6) + 32;
      v22 = v96 - v98;
      v18 = v90;
      do
      {
        v23 = swift_bridgeObjectRetain();
        sub_1B2095398(v23);
        swift_bridgeObjectRelease();
        v21 += 64;
        v24 = swift_bridgeObjectRetain();
        sub_1B2095398(v24);
        swift_bridgeObjectRelease();
        --v22;
      }
      while (v22);
    }
LABEL_20:
    sub_1B1F05D48(v4, (unsigned __int16 **)v132, (uint64_t)v147);
    sub_1B1F03804((char *)v11);
    ecs_stack_allocator_pop_snapshot(v100);
    if ((v6 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 376));
    }
    swift_release();
    ++v7;
  }
  while (v7 != v18);
  sub_1B19ED748(v108);
  sub_1B19ED748(v108);
  v1 = v85;
LABEL_25:
  v141 = qword_1ED4D09F8;
  v142 = 0;
  v143 = 2;
  v144 = 1;
  v145 = 2;
  v146 = 0;
  swift_retain();
  sub_1B1B6FBCC((uint64_t)v109);
  swift_release();
  v136[0] = v109[0];
  v136[1] = v109[1];
  v137 = v110;
  sub_1B1E8FCE4(v1, (uint64_t)v136, 0x200000000, v111);
  sub_1B1A18378((uint64_t)v111, (uint64_t)v112, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v112[0])
  {
    sub_1B19ED720((uint64_t)v109);
    return swift_bridgeObjectRelease();
  }
  v119 = v112[0];
  v120 = v112[1];
  v91 = v114;
  v121 = v113;
  v25 = v115;
  v26 = v116;
  v27 = v117;
  v28 = v118;
  sub_1B19ED720((uint64_t)v109);
  if (v28 <= 0 || !v25)
  {
LABEL_86:
    sub_1B19ED748(v111);
    return swift_bridgeObjectRelease();
  }
  v99 = v27[4];
  v97 = *(unsigned __int8 *)(v26 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v92 = v27 + 13;
  v86 = v27 + 8;
  v87 = (uint64_t)(v27 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v29 = 0;
  v93 = v27;
  v89 = v25;
  while (1)
  {
    v30 = (unsigned int *)(v91 + 48 * v29);
    v32 = *v30;
    v31 = v30[1];
    v33 = *((_QWORD *)v30 + 2);
    v34 = *((_QWORD *)v30 + 5);
    v101 = *((_QWORD *)v30 + 4);
    v95 = v29;
    if (v97)
    {
      v35 = *(os_unfair_lock_s **)(v34 + 376);
      swift_retain();
      os_unfair_lock_lock(v35);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v34 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v99);
    sub_1B1A18378(v87, (uint64_t)v140, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v36 = v27[4];
    v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v34 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v27[6] = ecs_stack_allocator_allocate(v36, 48 * v37, 8);
    v27[7] = v37;
    v86[1] = 0;
    v86[2] = 0;
    *v86 = 0;
    swift_release();
    if (!v33)
      break;
    if (v101)
    {
      v38 = 0;
      v39 = v105;
      v40 = v105 + 56;
      do
      {
        v41 = *(_QWORD *)(v33 + 8 * v38);
        v42 = *(_QWORD *)(v34 + 16);
        v43 = *(_BYTE *)(v34 + 184);
        swift_retain();
        if ((v43 & 1) != 0)
          goto LABEL_88;
        v44 = *(_DWORD *)(*(_QWORD *)(v34 + 168) + 4 * v41);
        v45 = *(_DWORD *)(*(_QWORD *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v44 + 8);
        swift_bridgeObjectRetain();
        swift_release();
        if (*(_QWORD *)(v39 + 16)
          && (sub_1B222A06C(),
              sub_1B222A09C(),
              sub_1B222A09C(),
              v46 = sub_1B222A0C0(),
              v47 = -1 << *(_BYTE *)(v39 + 32),
              v48 = v46 & ~v47,
              ((*(_QWORD *)(v40 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8)) >> v48) & 1) != 0))
        {
          v49 = ~v47;
          while (1)
          {
            v50 = (int *)(*(_QWORD *)(v39 + 48) + 8 * v48);
            v52 = *v50;
            v51 = v50[1];
            if (v52 == v44 && v51 == v45)
              break;
            v48 = (v48 + 1) & v49;
            if (((*(_QWORD *)(v40 + ((v48 >> 3) & 0xFFFFFFFFFFFFF8)) >> v48) & 1) == 0)
              goto LABEL_36;
          }
          swift_bridgeObjectRelease();
          v54 = *(_QWORD *)(*(_QWORD *)(v34 + 40) + 16);
          v55 = *(_QWORD *)(v54 + 128);
          if (*(_QWORD *)(v55 + 16))
          {
            v56 = sub_1B1DC3AC8((uint64_t)&type metadata for DoNotExport);
            if ((v57 & 1) != 0
              && *(ValueMetadata **)(*(_QWORD *)(v54 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v55 + 56) + 8 * v56) + 32) == &type metadata for DoNotExport)
            {
              v102 = &type metadata for DoNotExport;
              v103 = &off_1E63701A0;
              v104 = 1;
              swift_retain();
              sub_1B1F05960(v92, (uint64_t)&v102, v41, 0, v34, (uint64_t)v93);
              sub_1B1B68F14((uint64_t)&v102);
              swift_release();
            }
          }
        }
        else
        {
LABEL_36:
          swift_bridgeObjectRelease();
        }
      }
      while (++v38 != v101);
    }
LABEL_53:
    v134[0] = v119;
    v134[1] = v120;
    v135 = v121;
    v27 = v93;
    sub_1B1F05D48(v93, (unsigned __int16 **)v134, (uint64_t)v140);
    if (*(_QWORD *)(v93[13] + 16))
    {
      v58 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1B1F05034(v58, v34);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v60 = v93[13];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v60 + 16));
      }
      else
      {
        v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v60 + 24) >= 2uLL)
        {
          sub_1B1BBF038();
          v61 = (_QWORD *)swift_allocObject();
          v62 = j__malloc_size(v61);
          v61[2] = 0;
          v61[3] = 2 * ((uint64_t)(v62 - 32) / 72);
        }
        *v92 = (uint64_t)v61;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v93[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v63 = *(char **)(v34 + 232);
        v64 = *(char **)(v34 + 256);
        if (v63 == v64)
        {
          v65 = *(char **)(v34 + 240);
        }
        else
        {
          sub_1B1A1059C(v64, v63);
          v64 = *(char **)(v34 + 232);
          v65 = *(char **)(v34 + 240);
          if (v65 == v64)
          {
            v65 = 0;
            v64 = 0;
            *(_QWORD *)(v34 + 232) = 0;
            *(_QWORD *)(v34 + 240) = 0;
          }
        }
        *(_QWORD *)(v34 + 248) = v65;
        *(_QWORD *)(v34 + 256) = v64;
      }
    }
    ecs_stack_allocator_pop_snapshot(v99);
    if ((v97 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v34 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v34 + 376));
    }
    swift_release();
    v29 = v95 + 1;
    if (v95 + 1 == v89)
    {
      sub_1B19ED748(v111);
      goto LABEL_86;
    }
  }
  if ((_DWORD)v32 == (_DWORD)v31)
    goto LABEL_53;
  v66 = v105;
  v67 = v105 + 56;
  while (1)
  {
    v68 = *(_QWORD *)(v34 + 16);
    v69 = *(_BYTE *)(v34 + 184);
    swift_retain();
    if ((v69 & 1) != 0)
      break;
    v70 = *(_DWORD *)(*(_QWORD *)(v34 + 168) + 4 * v32);
    v71 = *(_DWORD *)(*(_QWORD *)(v68 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v70 + 8);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(_QWORD *)(v66 + 16)
      && (sub_1B222A06C(),
          sub_1B222A09C(),
          sub_1B222A09C(),
          v72 = sub_1B222A0C0(),
          v73 = -1 << *(_BYTE *)(v66 + 32),
          v74 = v72 & ~v73,
          ((*(_QWORD *)(v67 + ((v74 >> 3) & 0xFFFFFFFFFFFFF8)) >> v74) & 1) != 0))
    {
      v75 = ~v73;
      while (1)
      {
        v76 = (int *)(*(_QWORD *)(v66 + 48) + 8 * v74);
        v78 = *v76;
        v77 = v76[1];
        if (v78 == v70 && v77 == v71)
          break;
        v74 = (v74 + 1) & v75;
        if (((*(_QWORD *)(v67 + ((v74 >> 3) & 0xFFFFFFFFFFFFF8)) >> v74) & 1) == 0)
          goto LABEL_63;
      }
      swift_bridgeObjectRelease();
      v80 = *(_QWORD *)(*(_QWORD *)(v34 + 40) + 16);
      v81 = *(_QWORD *)(v80 + 128);
      if (*(_QWORD *)(v81 + 16))
      {
        v82 = sub_1B1DC3AC8((uint64_t)&type metadata for DoNotExport);
        if ((v83 & 1) != 0
          && *(ValueMetadata **)(*(_QWORD *)(v80 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v81 + 56) + 8 * v82) + 32) == &type metadata for DoNotExport)
        {
          v102 = &type metadata for DoNotExport;
          v103 = &off_1E63701A0;
          v104 = 1;
          swift_retain();
          sub_1B1F05960(v92, (uint64_t)&v102, v32, 0, v34, (uint64_t)v93);
          sub_1B1B68F14((uint64_t)&v102);
          swift_release();
        }
      }
    }
    else
    {
LABEL_63:
      swift_bridgeObjectRelease();
    }
    if (++v32 == v31)
      goto LABEL_53;
  }
LABEL_88:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t *sub_1B209687C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *result;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  _OWORD v27[2];
  uint64_t v28;
  uint64_t v29[12];
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32[8];
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[12];
  _OWORD v44[2];
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _BYTE v50[40];
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v57 = qword_1ED4D09F8;
  v58 = 0;
  v59 = 2;
  v60 = 1;
  v61 = 2;
  v62 = 0;
  swift_retain();
  sub_1B1B6FBCC((uint64_t)v27);
  swift_release();
  v48[0] = v27[0];
  v48[1] = v27[1];
  v49 = v28;
  sub_1B1E8FCE4(v0, (uint64_t)v48, 0x200000000, v29);
  sub_1B1A18378((uint64_t)v29, (uint64_t)v43, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v43[0])
  {
    v43[8] = v43[2];
    v43[9] = v43[3];
    v43[10] = v43[4];
    v43[11] = v43[5];
    v43[6] = v43[0];
    v43[7] = v43[1];
    sub_1B19ED720((uint64_t)v27);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B1BEAAFC(0);
    sub_1B19ED748(v29);
    sub_1B19ED748(v29);
  }
  else
  {
    sub_1B19ED720((uint64_t)v27);
  }
  v51 = qword_1ED4D09F8;
  v52 = 0;
  v53 = 2;
  v54 = 1;
  v55 = 2;
  v56 = 0;
  swift_retain();
  sub_1B1B6FDBC((uint64_t)v30);
  swift_release();
  v46[0] = v30[0];
  v46[1] = v30[1];
  v47 = v31;
  sub_1B1E8FCE4(v0, (uint64_t)v46, 0x200000000, v32);
  sub_1B1A18378((uint64_t)v32, (uint64_t)v33, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v33[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v30);
  v40 = v33[0];
  v41 = v33[1];
  v1 = v35;
  v42 = v34;
  v3 = v36;
  v2 = v37;
  v4 = v38;
  v5 = v39;
  sub_1B19ED720((uint64_t)v30);
  if (v5 <= 0 || !v3)
    return sub_1B19ED748(v32);
  v6 = v4[4];
  v26 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  swift_retain();
  swift_retain();
  swift_retain();
  v7 = (_QWORD *)(v1 + 32);
  v23 = v6;
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *v7;
    v10 = v7[1];
    v24 = *((_DWORD *)v7 - 7);
    v25 = *((_DWORD *)v7 - 8);
    if (v26)
    {
      v11 = *(os_unfair_lock_s **)(v10 + 376);
      swift_retain();
      os_unfair_lock_lock(v11);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v6);
    sub_1B1A18378((uint64_t)(v4 + 6), (uint64_t)v50, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v12 = v4[4];
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v4[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
    v4[7] = v13;
    v4[9] = 0;
    v4[10] = 0;
    v4[8] = 0;
    swift_release();
    if (!v8)
      break;
    if (v9)
      goto LABEL_35;
LABEL_18:
    v44[0] = v40;
    v44[1] = v41;
    v45 = v42;
    sub_1B1F05D48(v4, (unsigned __int16 **)v44, (uint64_t)v50);
    if (*(_QWORD *)(v4[13] + 16))
    {
      v14 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1B1F05034(v14, v10);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v16 = v4[13];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v16 + 16));
      }
      else
      {
        v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v16 + 24) >= 2uLL)
        {
          sub_1B1BBF038();
          v17 = (_QWORD *)swift_allocObject();
          v18 = j__malloc_size(v17);
          v17[2] = 0;
          v17[3] = 2 * ((uint64_t)(v18 - 32) / 72);
        }
        v4[13] = v17;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v4[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v19 = *(char **)(v10 + 232);
        v20 = *(char **)(v10 + 256);
        if (v19 == v20)
        {
          v21 = *(char **)(v10 + 240);
        }
        else
        {
          sub_1B1A1059C(v20, v19);
          v20 = *(char **)(v10 + 232);
          v21 = *(char **)(v10 + 240);
          if (v21 == v20)
          {
            v21 = 0;
            v20 = 0;
            *(_QWORD *)(v10 + 232) = 0;
            *(_QWORD *)(v10 + 240) = 0;
          }
        }
        *(_QWORD *)(v10 + 248) = v21;
        *(_QWORD *)(v10 + 256) = v20;
      }
    }
    v6 = v23;
    ecs_stack_allocator_pop_snapshot(v23);
    if ((v26 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
    }
    swift_release();
    v7 += 6;
    if (!--v3)
    {
      sub_1B19ED748(v32);
      return sub_1B19ED748(v32);
    }
  }
  if (v25 == v24)
    goto LABEL_18;
LABEL_35:
  result = (uint64_t *)sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t *sub_1B2096DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  _QWORD *v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34[12];
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _BYTE v47[40];
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v1 = v0;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v48 = qword_1ED4D09F8;
  v49 = 0;
  v50 = 2;
  v51 = 1;
  v52 = 2;
  v53 = 0;
  swift_retain();
  sub_1B1E8FCE4(v0, (uint64_t)&v48, 0x200000000, v34);
  swift_release();
  result = (uint64_t *)sub_1B1A18378((uint64_t)v34, (uint64_t)v35, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v35[0])
  {
    v42 = v35[0];
    v43 = v35[1];
    v44 = v36;
    if (v41 >= 1)
    {
      v31 = v38;
      if (v38)
      {
        v3 = 0;
        v29 = v37;
        v4 = v40;
        v5 = v40[4];
        v6 = *(unsigned __int8 *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v25 = v40 + 13;
        v26 = v40 + 8;
        v27 = (uint64_t)(v40 + 6);
        v28 = v6;
        v33 = v40;
        v30 = v5;
        do
        {
          v7 = (unsigned int *)(v29 + 48 * v3);
          v8 = *v7;
          v9 = v7[1];
          v10 = (uint64_t *)*((_QWORD *)v7 + 2);
          v11 = *((_QWORD *)v7 + 4);
          v12 = *((_QWORD *)v7 + 5);
          v32 = v3;
          if (v6)
          {
            v13 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain();
            os_unfair_lock_lock(v13);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v5);
          sub_1B1A18378(v27, (uint64_t)v47, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v14 = v4[4];
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v33[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
          v33[7] = v15;
          v4 = v33;
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          swift_release();
          if (v10)
          {
            if (v11)
            {
              v5 = v30;
              do
              {
                v16 = *v10++;
                sub_1B209DBC0(v12, v16, v1);
                --v11;
              }
              while (v11);
            }
            else
            {
              v5 = v30;
            }
          }
          else
          {
            v5 = v30;
            if ((_DWORD)v8 != (_DWORD)v9)
            {
              do
                sub_1B209DBC0(v12, v8++, v1);
              while (v9 != v8);
            }
          }
          v45[0] = v42;
          v45[1] = v43;
          v46 = v44;
          sub_1B1F05D48(v33, (unsigned __int16 **)v45, (uint64_t)v47);
          if (*(_QWORD *)(v33[13] + 16))
          {
            v17 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v17, v12);
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v19 = v33[13];
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v19 + 16));
            }
            else
            {
              v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v19 + 24) >= 2uLL)
              {
                sub_1B1BBF038();
                v20 = (_QWORD *)swift_allocObject();
                v21 = j__malloc_size(v20);
                v20[2] = 0;
                v20[3] = 2 * ((uint64_t)(v21 - 32) / 72);
              }
              *v25 = v20;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v33[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v22 = *(char **)(v12 + 232);
              v23 = *(char **)(v12 + 256);
              if (v22 == v23)
              {
                v24 = *(char **)(v12 + 240);
              }
              else
              {
                sub_1B1A1059C(v23, v22);
                v23 = *(char **)(v12 + 232);
                v24 = *(char **)(v12 + 240);
                if (v24 == v23)
                {
                  v24 = 0;
                  v23 = 0;
                  *(_QWORD *)(v12 + 232) = 0;
                  *(_QWORD *)(v12 + 240) = 0;
                }
              }
              *(_QWORD *)(v12 + 248) = v24;
              *(_QWORD *)(v12 + 256) = v23;
            }
          }
          ecs_stack_allocator_pop_snapshot(v5);
          v6 = v28;
          if ((v28 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          v3 = v32 + 1;
        }
        while (v32 + 1 != v31);
      }
    }
    return sub_1B19ED748(v34);
  }
  return result;
}

uint64_t *sub_1B209723C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  BOOL v67;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  BOOL v85;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  BOOL v94;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  BOOL v104;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  BOOL v113;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  BOOL v122;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  BOOL v131;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  _BYTE v158[40];
  _BYTE v159[40];
  _OWORD v160[2];
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  _OWORD v165[2];
  uint64_t v166;
  _OWORD v167[2];
  uint64_t v168;
  _OWORD v169[2];
  uint64_t v170;
  _OWORD v171[2];
  uint64_t v172;
  uint64_t v173;
  int v174;
  char v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  char v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  char v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191[12];
  uint64_t v192[12];
  uint64_t v193[5];
  char v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  _OWORD v209[2];
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _BYTE v216[40];
  _BYTE v217[40];
  _BYTE v218[40];
  uint64_t v219;

  v1 = v0;
  v219 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v2 = &unk_1ED4D0000;
  v3 = qword_1ED4D09F8;
  sub_1B1A19B14();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v4 + 32) = &type metadata for SubEntity;
  *(_QWORD *)(v4 + 40) = &off_1E63C54D8;
  *(_QWORD *)(v4 + 48) = &type metadata for PropagateDirtiness;
  *(_QWORD *)(v4 + 56) = &off_1E6395AC8;
  v185 = v3;
  v186 = 0;
  v187 = 2;
  v188 = 1;
  v189 = 2;
  v190 = 0;
  swift_retain();
  sub_1B1E68AF8(v4, 1, (uint64_t)v158);
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_release();
  sub_1B1E8FCE4(v0, (uint64_t)v158, 0x200000000, v191);
  sub_1B19ED720((uint64_t)v158);
  sub_1B1A18378((uint64_t)v191, (uint64_t)v209, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v142 = v0;
  if (*(_QWORD *)&v209[0])
  {
    if (v215 >= 1 && (v5 = v212) != 0)
    {
      v6 = 0;
      v7 = v214;
      v8 = v214[4];
      v9 = *(unsigned __int8 *)(v213 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v165[0] = v209[0];
      v165[1] = v209[1];
      v166 = v210;
      v145 = (uint64_t)(v214 + 6);
      v10 = (uint64_t *)(v211 + 40);
      v148 = v9;
      do
      {
        v11 = *v10;
        v12 = v6;
        if (v9)
        {
          v13 = *(os_unfair_lock_s **)(v11 + 376);
          swift_retain();
          os_unfair_lock_lock(v13);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v8);
        sub_1B1A18378(v145, (uint64_t)v218, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v14 = v7[4];
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v7[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
        v7[7] = v15;
        v7[9] = 0;
        v7[10] = 0;
        v7[8] = 0;
        swift_release();
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 16) + 32) + 16) == 2)
        {
          *(_QWORD *)&v197 = 0;
          v195 = 0u;
          v196 = 0u;
          BYTE8(v197) = 5;
          sub_1B1BE90FC((uint64_t)&v195, (uint64_t)&v202);
          v206 = 0;
          v205 = 0uLL;
          v16 = (_QWORD *)v7[13];
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v7[13] = v16;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v16 = sub_1B1C631A0(0, v16[2] + 1, 1, v16);
            v7[13] = v16;
          }
          v19 = v16[2];
          v18 = v16[3];
          if (v19 >= v18 >> 1)
          {
            v16 = sub_1B1C631A0(v18 > 1, v19 + 1, 1, v16);
            v7[13] = v16;
          }
          v16[2] = v19 + 1;
          v20 = &v16[9 * v19];
          *((_OWORD *)v20 + 2) = v202;
          v21 = v203;
          v22 = v204;
          v23 = v205;
          v20[12] = v206;
          *((_OWORD *)v20 + 4) = v22;
          *((_OWORD *)v20 + 5) = v23;
          *((_OWORD *)v20 + 3) = v21;
          sub_1B1B68F14((uint64_t)&v195);
          swift_release();
        }
        v6 = v12;
        sub_1B1F05D48(v7, (unsigned __int16 **)v165, (uint64_t)v218);
        sub_1B1F03804((char *)v11);
        ecs_stack_allocator_pop_snapshot(v8);
        v9 = v148;
        if (v148)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 376));
        }
        swift_release();
        v10 += 6;
        --v5;
      }
      while (v5);
    }
    else
    {
      v6 = 0;
    }
    sub_1B19ED748(v191);
    v1 = v142;
    v2 = (_QWORD *)&unk_1ED4D0000;
  }
  else
  {
    v6 = 0;
  }
  v24 = v2[319];
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v25 + 32) = &type metadata for SubEntity;
  *(_QWORD *)(v25 + 40) = &off_1E63C54D8;
  v179 = v24;
  v180 = 0;
  v181 = 2;
  v182 = 1;
  v183 = 2;
  v184 = 0;
  swift_retain();
  sub_1B1E68AF8(v25, 1, (uint64_t)v159);
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_release();
  sub_1B1E8FCE4(v1, (uint64_t)v159, 0x200000000, v192);
  sub_1B19ED720((uint64_t)v159);
  sub_1B1A18378((uint64_t)v192, (uint64_t)&v202, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v202)
  {
    if (v208 >= 1)
    {
      v26 = *((_QWORD *)&v205 + 1);
      if (*((_QWORD *)&v205 + 1))
      {
        v27 = v207;
        v28 = v207[4];
        v29 = *(unsigned __int8 *)(v206 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v167[0] = v202;
        v167[1] = v203;
        v168 = v204;
        v30 = v207 + 8;
        v146 = (uint64_t)(v207 + 6);
        v31 = (uint64_t *)(*((_QWORD *)&v204 + 1) + 40);
        v149 = v29;
        do
        {
          v32 = *v31;
          v33 = v6;
          if (v29)
          {
            v34 = *(os_unfair_lock_s **)(v32 + 376);
            swift_retain();
            os_unfair_lock_lock(v34);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v28);
          sub_1B1A18378(v146, (uint64_t)v217, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v35 = v27[4];
          v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v27[6] = ecs_stack_allocator_allocate(v35, 48 * v36, 8);
          v27[7] = v36;
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          swift_release();
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 16) + 32) + 16) == 1)
          {
            memset(v193, 0, sizeof(v193));
            v194 = 5;
            sub_1B1BE90FC((uint64_t)v193, (uint64_t)&v195);
            v199 = 0;
            v198 = 0uLL;
            v37 = (_QWORD *)v27[13];
            swift_retain();
            v38 = swift_isUniquelyReferenced_nonNull_native();
            v27[13] = v37;
            if ((v38 & 1) == 0)
            {
              v37 = sub_1B1C631A0(0, v37[2] + 1, 1, v37);
              v27[13] = v37;
            }
            v40 = v37[2];
            v39 = v37[3];
            if (v40 >= v39 >> 1)
            {
              v37 = sub_1B1C631A0(v39 > 1, v40 + 1, 1, v37);
              v27[13] = v37;
            }
            v37[2] = v40 + 1;
            v41 = &v37[9 * v40];
            *((_OWORD *)v41 + 2) = v195;
            v42 = v196;
            v43 = v197;
            v44 = v198;
            v41[12] = v199;
            *((_OWORD *)v41 + 4) = v43;
            *((_OWORD *)v41 + 5) = v44;
            *((_OWORD *)v41 + 3) = v42;
            sub_1B1B68F14((uint64_t)v193);
            swift_release();
          }
          v6 = v33;
          sub_1B1F05D48(v27, (unsigned __int16 **)v167, (uint64_t)v217);
          sub_1B1F03804((char *)v32);
          ecs_stack_allocator_pop_snapshot(v28);
          v29 = v149;
          if (v149)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 376));
          }
          swift_release();
          v31 += 6;
          --v26;
        }
        while (v26);
      }
    }
    sub_1B19ED748(v192);
    v1 = v142;
    v2 = (_QWORD *)&unk_1ED4D0000;
  }
  v173 = v2[319];
  v174 = 0;
  v175 = 2;
  v176 = 1;
  v177 = 2;
  v178 = 0;
  swift_retain();
  sub_1B1E3D7C4(3, (uint64_t)v160);
  swift_release();
  v171[0] = v160[0];
  v171[1] = v160[1];
  v172 = v161;
  sub_1B1E8FCE4(v1, (uint64_t)v171, 0x200000000, v193);
  sub_1B1A18378((uint64_t)v193, (uint64_t)&v195, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!(_QWORD)v195)
    return (uint64_t *)sub_1B19ED720((uint64_t)v160);
  v162 = v195;
  v163 = v196;
  v135 = *((_QWORD *)&v197 + 1);
  v164 = v197;
  v45 = *((_QWORD *)&v198 + 1);
  v46 = v199;
  v140 = v200;
  v47 = v201;
  sub_1B19ED720((uint64_t)v160);
  if (v47 > 0 && v45)
  {
    v139 = *(unsigned __int8 *)(v46 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v138 = v140[4];
    v169[0] = v162;
    v169[1] = v163;
    v170 = v164;
    v48 = (_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    swift_retain();
    swift_retain();
    swift_retain();
    v49 = 0;
    v134 = v45;
    do
    {
      v136 = v49;
      v137 = v6;
      v50 = (unsigned int *)(v135 + 48 * v49);
      v51 = *v50;
      v53 = (uint64_t *)*((_QWORD *)v50 + 2);
      v52 = *((_QWORD *)v50 + 3);
      v54 = *((_QWORD *)v50 + 5);
      v143 = v50[1];
      v144 = *((_QWORD *)v50 + 4);
      v141 = v54;
      if (v139)
      {
        v55 = *(os_unfair_lock_s **)(v54 + 376);
        swift_retain();
        os_unfair_lock_lock(v55);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v54 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v138);
      sub_1B1A18378((uint64_t)(v140 + 6), (uint64_t)v216, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v56 = v140[4];
      v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v140[6] = ecs_stack_allocator_allocate(v56, 48 * v57, 8);
      v140[7] = v57;
      v140[9] = 0;
      v140[10] = 0;
      v140[8] = 0;
      swift_release();
      v147 = sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v53, v52, v144, (uint64_t)v140);
      if (v53)
      {
        if (v144)
        {
          for (i = 0; i != v144; ++i)
          {
            v59 = (_QWORD *)(v147 + 88 * i);
            v60 = *v59;
            v61 = *(_QWORD *)(*v59 + 16);
            if (v61)
            {
              swift_bridgeObjectRetain();
              v63 = 0;
              v64 = MEMORY[0x1E0DEE9D8];
              do
              {
                *(_QWORD *)&v62 = *(_QWORD *)(v60 + 8 * v63 + 32);
                v67 = (_DWORD)v62 == -1 && DWORD1(v62) == 0;
                if (!v67
                  && (v62 & 0x80000000) == 0
                  && v48[1] > (int)v62
                  && (DWORD1(v62) == -1 || *(_DWORD *)(*v48 + 12 * (int)v62 + 8) == DWORD1(v62)))
                {
                  v150 = v62;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    sub_1B202A38C(0, *(_QWORD *)(v64 + 16) + 1, 1);
                  v62 = v150;
                  v66 = *(_QWORD *)(v64 + 16);
                  v65 = *(_QWORD *)(v64 + 24);
                  if (v66 >= v65 >> 1)
                  {
                    sub_1B202A38C(v65 > 1, v66 + 1, 1);
                    v62 = v150;
                  }
                  *(_QWORD *)(v64 + 16) = v66 + 1;
                  *(_QWORD *)(v64 + 8 * v66 + 32) = v62;
                }
                ++v63;
              }
              while (v61 != v63);
              swift_bridgeObjectRelease();
            }
            else
            {
              v64 = MEMORY[0x1E0DEE9D8];
            }
            *v59 = v64;
            swift_bridgeObjectRelease();
            v69 = v59[1];
            v70 = *(_QWORD *)(v69 + 16);
            if (v70)
            {
              swift_bridgeObjectRetain();
              v72 = 0;
              v73 = MEMORY[0x1E0DEE9D8];
              do
              {
                *(_QWORD *)&v71 = *(_QWORD *)(v69 + 8 * v72 + 32);
                v76 = (_DWORD)v71 == -1 && DWORD1(v71) == 0;
                if (!v76
                  && (v71 & 0x80000000) == 0
                  && v48[1] > (int)v71
                  && (DWORD1(v71) == -1 || *(_DWORD *)(*v48 + 12 * (int)v71 + 8) == DWORD1(v71)))
                {
                  v151 = v71;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    sub_1B202A38C(0, *(_QWORD *)(v73 + 16) + 1, 1);
                  v71 = v151;
                  v75 = *(_QWORD *)(v73 + 16);
                  v74 = *(_QWORD *)(v73 + 24);
                  if (v75 >= v74 >> 1)
                  {
                    sub_1B202A38C(v74 > 1, v75 + 1, 1);
                    v71 = v151;
                  }
                  *(_QWORD *)(v73 + 16) = v75 + 1;
                  *(_QWORD *)(v73 + 8 * v75 + 32) = v71;
                }
                ++v72;
              }
              while (v70 != v72);
              swift_bridgeObjectRelease();
            }
            else
            {
              v73 = MEMORY[0x1E0DEE9D8];
            }
            v59[1] = v73;
            swift_bridgeObjectRelease();
            v78 = v59[2];
            v79 = *(_QWORD *)(v78 + 16);
            if (v79)
            {
              swift_bridgeObjectRetain();
              v81 = 0;
              v82 = MEMORY[0x1E0DEE9D8];
              do
              {
                *(_QWORD *)&v80 = *(_QWORD *)(v78 + 8 * v81 + 32);
                v85 = (_DWORD)v80 == -1 && DWORD1(v80) == 0;
                if (!v85
                  && (v80 & 0x80000000) == 0
                  && v48[1] > (int)v80
                  && (DWORD1(v80) == -1 || *(_DWORD *)(*v48 + 12 * (int)v80 + 8) == DWORD1(v80)))
                {
                  v152 = v80;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    sub_1B202A38C(0, *(_QWORD *)(v82 + 16) + 1, 1);
                  v80 = v152;
                  v84 = *(_QWORD *)(v82 + 16);
                  v83 = *(_QWORD *)(v82 + 24);
                  if (v84 >= v83 >> 1)
                  {
                    sub_1B202A38C(v83 > 1, v84 + 1, 1);
                    v80 = v152;
                  }
                  *(_QWORD *)(v82 + 16) = v84 + 1;
                  *(_QWORD *)(v82 + 8 * v84 + 32) = v80;
                }
                ++v81;
              }
              while (v79 != v81);
              swift_bridgeObjectRelease();
            }
            else
            {
              v82 = MEMORY[0x1E0DEE9D8];
            }
            v59[2] = v82;
            swift_bridgeObjectRelease();
            v87 = v59[3];
            v88 = *(_QWORD *)(v87 + 16);
            if (v88)
            {
              swift_bridgeObjectRetain();
              v90 = 0;
              v91 = MEMORY[0x1E0DEE9D8];
              do
              {
                *(_QWORD *)&v89 = *(_QWORD *)(v87 + 8 * v90 + 32);
                v94 = (_DWORD)v89 == -1 && DWORD1(v89) == 0;
                if (!v94
                  && (v89 & 0x80000000) == 0
                  && v48[1] > (int)v89
                  && (DWORD1(v89) == -1 || *(_DWORD *)(*v48 + 12 * (int)v89 + 8) == DWORD1(v89)))
                {
                  v153 = v89;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    sub_1B202A38C(0, *(_QWORD *)(v91 + 16) + 1, 1);
                  v89 = v153;
                  v93 = *(_QWORD *)(v91 + 16);
                  v92 = *(_QWORD *)(v91 + 24);
                  if (v93 >= v92 >> 1)
                  {
                    sub_1B202A38C(v92 > 1, v93 + 1, 1);
                    v89 = v153;
                  }
                  *(_QWORD *)(v91 + 16) = v93 + 1;
                  *(_QWORD *)(v91 + 8 * v93 + 32) = v89;
                }
                ++v90;
              }
              while (v88 != v90);
              swift_bridgeObjectRelease();
            }
            else
            {
              v91 = MEMORY[0x1E0DEE9D8];
            }
            v59[3] = v91;
            swift_bridgeObjectRelease();
          }
        }
      }
      else if ((_DWORD)v51 != (_DWORD)v143)
      {
        do
        {
          v96 = (_QWORD *)(v147 + 88 * v51);
          v97 = *v96;
          v98 = *(_QWORD *)(*v96 + 16);
          if (v98)
          {
            swift_bridgeObjectRetain();
            v100 = 0;
            v101 = MEMORY[0x1E0DEE9D8];
            do
            {
              *(_QWORD *)&v99 = *(_QWORD *)(v97 + 8 * v100 + 32);
              v104 = (_DWORD)v99 == -1 && DWORD1(v99) == 0;
              if (!v104
                && (v99 & 0x80000000) == 0
                && v48[1] > (int)v99
                && (DWORD1(v99) == -1 || *(_DWORD *)(*v48 + 12 * (int)v99 + 8) == DWORD1(v99)))
              {
                v154 = v99;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  sub_1B202A38C(0, *(_QWORD *)(v101 + 16) + 1, 1);
                v99 = v154;
                v103 = *(_QWORD *)(v101 + 16);
                v102 = *(_QWORD *)(v101 + 24);
                if (v103 >= v102 >> 1)
                {
                  sub_1B202A38C(v102 > 1, v103 + 1, 1);
                  v99 = v154;
                }
                *(_QWORD *)(v101 + 16) = v103 + 1;
                *(_QWORD *)(v101 + 8 * v103 + 32) = v99;
              }
              ++v100;
            }
            while (v98 != v100);
            swift_bridgeObjectRelease();
          }
          else
          {
            v101 = MEMORY[0x1E0DEE9D8];
          }
          *v96 = v101;
          swift_bridgeObjectRelease();
          v106 = v96[1];
          v107 = *(_QWORD *)(v106 + 16);
          if (v107)
          {
            swift_bridgeObjectRetain();
            v109 = 0;
            v110 = MEMORY[0x1E0DEE9D8];
            do
            {
              *(_QWORD *)&v108 = *(_QWORD *)(v106 + 8 * v109 + 32);
              v113 = (_DWORD)v108 == -1 && DWORD1(v108) == 0;
              if (!v113
                && (v108 & 0x80000000) == 0
                && v48[1] > (int)v108
                && (DWORD1(v108) == -1 || *(_DWORD *)(*v48 + 12 * (int)v108 + 8) == DWORD1(v108)))
              {
                v155 = v108;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  sub_1B202A38C(0, *(_QWORD *)(v110 + 16) + 1, 1);
                v108 = v155;
                v112 = *(_QWORD *)(v110 + 16);
                v111 = *(_QWORD *)(v110 + 24);
                if (v112 >= v111 >> 1)
                {
                  sub_1B202A38C(v111 > 1, v112 + 1, 1);
                  v108 = v155;
                }
                *(_QWORD *)(v110 + 16) = v112 + 1;
                *(_QWORD *)(v110 + 8 * v112 + 32) = v108;
              }
              ++v109;
            }
            while (v107 != v109);
            swift_bridgeObjectRelease();
          }
          else
          {
            v110 = MEMORY[0x1E0DEE9D8];
          }
          v96[1] = v110;
          swift_bridgeObjectRelease();
          v115 = v96[2];
          v116 = *(_QWORD *)(v115 + 16);
          if (v116)
          {
            swift_bridgeObjectRetain();
            v118 = 0;
            v119 = MEMORY[0x1E0DEE9D8];
            do
            {
              *(_QWORD *)&v117 = *(_QWORD *)(v115 + 8 * v118 + 32);
              v122 = (_DWORD)v117 == -1 && DWORD1(v117) == 0;
              if (!v122
                && (v117 & 0x80000000) == 0
                && v48[1] > (int)v117
                && (DWORD1(v117) == -1 || *(_DWORD *)(*v48 + 12 * (int)v117 + 8) == DWORD1(v117)))
              {
                v156 = v117;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  sub_1B202A38C(0, *(_QWORD *)(v119 + 16) + 1, 1);
                v117 = v156;
                v121 = *(_QWORD *)(v119 + 16);
                v120 = *(_QWORD *)(v119 + 24);
                if (v121 >= v120 >> 1)
                {
                  sub_1B202A38C(v120 > 1, v121 + 1, 1);
                  v117 = v156;
                }
                *(_QWORD *)(v119 + 16) = v121 + 1;
                *(_QWORD *)(v119 + 8 * v121 + 32) = v117;
              }
              ++v118;
            }
            while (v116 != v118);
            swift_bridgeObjectRelease();
          }
          else
          {
            v119 = MEMORY[0x1E0DEE9D8];
          }
          v96[2] = v119;
          swift_bridgeObjectRelease();
          v124 = v96[3];
          v125 = *(_QWORD *)(v124 + 16);
          if (v125)
          {
            swift_bridgeObjectRetain();
            v127 = 0;
            v128 = MEMORY[0x1E0DEE9D8];
            do
            {
              *(_QWORD *)&v126 = *(_QWORD *)(v124 + 8 * v127 + 32);
              v131 = (_DWORD)v126 == -1 && DWORD1(v126) == 0;
              if (!v131
                && (v126 & 0x80000000) == 0
                && v48[1] > (int)v126
                && (DWORD1(v126) == -1 || *(_DWORD *)(*v48 + 12 * (int)v126 + 8) == DWORD1(v126)))
              {
                v157 = v126;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  sub_1B202A38C(0, *(_QWORD *)(v128 + 16) + 1, 1);
                v126 = v157;
                v130 = *(_QWORD *)(v128 + 16);
                v129 = *(_QWORD *)(v128 + 24);
                if (v130 >= v129 >> 1)
                {
                  sub_1B202A38C(v129 > 1, v130 + 1, 1);
                  v126 = v157;
                }
                *(_QWORD *)(v128 + 16) = v130 + 1;
                *(_QWORD *)(v128 + 8 * v130 + 32) = v126;
              }
              ++v127;
            }
            while (v125 != v127);
            swift_bridgeObjectRelease();
          }
          else
          {
            v128 = MEMORY[0x1E0DEE9D8];
          }
          ++v51;
          v96[3] = v128;
          swift_bridgeObjectRelease();
        }
        while (v51 != v143);
      }
      v6 = v137;
      sub_1B1F05D48(v140, (unsigned __int16 **)v169, (uint64_t)v216);
      sub_1B1F03804((char *)v141);
      ecs_stack_allocator_pop_snapshot(v138);
      if ((v139 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v141 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v141 + 376));
      }
      swift_release();
      v49 = v136 + 1;
    }
    while (v136 + 1 != v134);
    sub_1B19ED748(v193);
  }
  return sub_1B19ED748(v193);
}

uint64_t sub_1B209858C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 28);
  v4 = *(int *)(a1 + 24);
  v5 = (_DWORD)v4 == -1 && v3 == 0;
  if (v5
    || (v4 & 0x80000000) != 0
    || *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v4
    || ((v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v3 != -1)
      ? (v7 = *(_DWORD *)(v6 + 12 * (int)v4 + 8) == v3)
      : (v7 = 1),
        !v7
     || (result = sub_1B1FF1988(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v6 + 12 * (int)v4) + 32), *(unsigned __int16 *)(v6 + 12 * (int)v4 + 4), 32, a3), (result & 1) != 0)))
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B2098724(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a2;
  sub_1B1C19024(0, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v34 - v6;
  v9 = *(int *)(v8 + 48);
  v10 = (uint64_t)&v7[v9];
  v11 = *(_BYTE *)(a1 + 4);
  *(_DWORD *)v7 = *(_DWORD *)a1;
  v7[4] = v11;
  sub_1B209DE98(a1 + v9, (uint64_t)&v7[v9]);
  v12 = *(_QWORD *)(v10 + 24);
  swift_bridgeObjectRetain();
  result = sub_1B1A04628(v10, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  if (!v12)
    return result;
  v36 = *(_QWORD *)(v12 + 16);
  if (!v36)
    return swift_bridgeObjectRelease();
  v34[2] = v2;
  v35 = v12 + 32;
  v34[1] = v12;
  swift_bridgeObjectRetain();
  v14 = 0;
  do
  {
    v16 = (uint64_t *)(v35 + 56 * v14);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = v16[3];
    v21 = v16[4];
    v23 = v16[5];
    v22 = v16[6];
    v39 = v23;
    v37 = v21;
    v38 = v22;
    v24 = *(_QWORD **)v40;
    v25 = *(_QWORD *)(*(_QWORD *)v40 + 16);
    if (v25)
    {
      v26 = v24[4] == v17 && v24[5] == v18;
      if (v26 || (sub_1B2229D24() & 1) != 0)
        goto LABEL_5;
      v27 = v25 - 1;
      if (v25 != 1)
      {
        v31 = v24[6] == v17 && v24[7] == v18;
        if (v31 || (sub_1B2229D24() & 1) != 0)
          goto LABEL_5;
        v32 = v24 + 9;
        while (--v27)
        {
          if (*(v32 - 1) != v17 || *v32 != v18)
          {
            v32 += 2;
            if ((sub_1B2229D24() & 1) == 0)
              continue;
          }
          goto LABEL_5;
        }
      }
    }
    swift_bridgeObjectRetain_n();
    sub_1B19FA2B4(v19, v20);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)v40 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v24 = sub_1B1C63044(0, v25 + 1, 1, v24);
      *(_QWORD *)v40 = v24;
    }
    v30 = v24[2];
    v29 = v24[3];
    if (v30 >= v29 >> 1)
      v24 = sub_1B1C63044(v29 > 1, v30 + 1, 1, v24);
    v24[2] = v30 + 1;
    v15 = &v24[2 * v30];
    v15[4] = v17;
    v15[5] = v18;
    *(_QWORD *)v40 = v24;
    swift_bridgeObjectRelease_n();
    sub_1B19F9FEC(v19, v20);
LABEL_5:
    ++v14;
  }
  while (v14 != v36);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20989DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 28);
  v5 = *(int *)(a1 + 24);
  v6 = (_DWORD)v5 == -1 && v4 == 0;
  if (v6
    || (v5 & 0x80000000) != 0
    || *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v5
    || ((v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v4 != -1)
      ? (v8 = *(_DWORD *)(v7 + 12 * (int)v5 + 8) == v4)
      : (v8 = 1),
        !v8
     || (result = sub_1B1FF2308(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)v5) + 32), *(_WORD *)(v7 + 12 * (int)v5 + 4), 32, a3, a4), (result & 1) == 0)))
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t *sub_1B2098B78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  os_unfair_lock_s *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  size_t v135;
  uint64_t isStackAllocationSafe;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _DWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  int64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int64_t v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  char v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  _QWORD *v210;
  char *v211;
  char *v212;
  char *v213;
  uint64_t v214;
  int64_t v215;
  uint64_t v216;
  __int128 *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t *v221;
  char *v222;
  unint64_t v223;
  uint64_t v224;
  char *v225;
  _DWORD *v226;
  _DWORD *v227;
  uint64_t v228;
  _DWORD *v229;
  char *v230;
  _DWORD *v231;
  _DWORD *v232;
  int64_t v233;
  int64_t v234;
  _DWORD *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _OWORD v240[2];
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  uint64_t v244;
  _OWORD v245[2];
  uint64_t v246;
  _OWORD v247[2];
  uint64_t v248;
  uint64_t v249;
  int v250;
  char v251;
  uint64_t v252;
  char v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  ValueMetadata *v260;
  _UNKNOWN **v261;
  char v262;
  uint64_t v263[12];
  _OWORD v264[2];
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _BYTE v271[40];
  uint64_t v272;

  v272 = *MEMORY[0x1E0C80C00];
  sub_1B1C19024(0, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
  v239 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v227 = (_DWORD *)((char *)&v200 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v200 - v6;
  MEMORY[0x1E0C80A78](v8, v9);
  v232 = (_DWORD *)((char *)&v200 - v10);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v200 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v229 = (_DWORD *)((char *)&v200 - v17);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v200 - v20;
  MEMORY[0x1E0C80A78](v22, v23);
  v235 = (_DWORD *)((char *)&v200 - v24);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v200 - v27;
  v29 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v238 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v30);
  v205 = (char *)&v200 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v212 = (char *)&v200 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v211 = (char *)&v200 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v213 = (char *)&v200 - v40;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v249 = qword_1ED4D09F8;
  v250 = 0;
  v251 = 2;
  v252 = 1;
  v253 = 2;
  v254 = 0;
  swift_retain();
  sub_1B1B6F5FC((uint64_t)v240);
  swift_release();
  v247[0] = v240[0];
  v247[1] = v240[1];
  v248 = v241;
  sub_1B1E8FCE4(v0, (uint64_t)v247, 0x200000000, v263);
  sub_1B1A18378((uint64_t)v263, (uint64_t)v264, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v264[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v240);
  v231 = v14;
  v226 = v7;
  v242 = v264[0];
  v243 = v264[1];
  v204 = v266;
  v244 = v265;
  v42 = v267;
  v41 = v268;
  v43 = v270;
  v210 = v269;
  sub_1B19ED720((uint64_t)v240);
  if (v43 > 0 && v42)
  {
    v203 = v42;
    v209 = *(unsigned __int8 *)(v41 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v208 = v210[4];
    v245[0] = v242;
    v245[1] = v243;
    v246 = v244;
    v200 = v210 + 13;
    v201 = v210 + 8;
    v202 = v210 + 6;
    v217 = &v258;
    swift_retain();
    swift_retain();
    swift_retain();
    v44 = 0;
    v207 = 0;
    v230 = v21;
    v236 = v28;
    while (1)
    {
      v45 = (unsigned int *)(v204 + 48 * v44);
      v47 = *v45;
      v46 = v45[1];
      v48 = *((_QWORD *)v45 + 3);
      v221 = (uint64_t *)*((_QWORD *)v45 + 2);
      v49 = (char *)*((_QWORD *)v45 + 5);
      v220 = *((_QWORD *)v45 + 4);
      v218 = v46;
      v219 = v49;
      v206 = v44;
      if (v209)
      {
        v50 = (os_unfair_lock_s *)*((_QWORD *)v219 + 47);
        swift_retain();
        v49 = v219;
        os_unfair_lock_lock(v50);
        os_unfair_lock_lock(*((os_unfair_lock_t *)v49 + 43));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v208);
      sub_1B1A18378((uint64_t)v202, (uint64_t)v271, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v51 = v210;
      v52 = v210[4];
      v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v49 + 5) + 16) + 32) + 16) + 1;
      swift_retain();
      v51[6] = ecs_stack_allocator_allocate(v52, 48 * v53, 8);
      v51[7] = v53;
      v54 = v201;
      v201[1] = 0;
      v54[2] = 0;
      *v54 = 0;
      swift_release();
      v55 = v221;
      v56 = v48;
      v57 = v220;
      v58 = sub_1B1A12038((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, v221, v56, v220, (uint64_t)v51);
      if (v55)
      {
        if (!v57)
          goto LABEL_15;
        v59 = 0;
        v216 = v58 + 16;
LABEL_85:
        v218 = v221[v59];
        v224 = v59;
        v132 = *(_QWORD *)(v216 + 32 * v59);
        v133 = *(_BYTE *)(v132 + 32);
        v134 = v133 & 0x3F;
        v223 = (unint64_t)((1 << v133) + 63) >> 6;
        v135 = 8 * v223;
        isStackAllocationSafe = swift_bridgeObjectRetain();
        v237 = v132;
        if (v134 > 0xD)
        {
          isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
          if ((isStackAllocationSafe & 1) == 0)
          {
            v222 = (char *)swift_slowAlloc();
            bzero(v222, v135);
            v225 = 0;
            v160 = 0;
            v161 = 1 << *(_BYTE *)(v132 + 32);
            if (v161 < 64)
              v162 = ~(-1 << v161);
            else
              v162 = -1;
            v163 = v162 & *(_QWORD *)(v132 + 64);
            v233 = (unint64_t)(v161 + 63) >> 6;
            v228 = v132 + 64;
            v214 = v132 + 112;
            v215 = v233 - 6;
            v164 = (uint64_t)v211;
            while (1)
            {
              if (v163)
              {
                v165 = __clz(__rbit64(v163));
                v163 &= v163 - 1;
                v234 = v160;
                v166 = v165 | (v160 << 6);
                v167 = (uint64_t)v230;
              }
              else
              {
                v168 = v160 + 1;
                v167 = (uint64_t)v230;
                if (v160 + 1 >= v233)
                  goto LABEL_136;
                v169 = *(_QWORD *)(v228 + 8 * v168);
                if (!v169)
                {
                  v168 = v160 + 2;
                  if (v160 + 2 >= v233)
                    goto LABEL_136;
                  v169 = *(_QWORD *)(v228 + 8 * v168);
                  if (!v169)
                  {
                    v168 = v160 + 3;
                    if (v160 + 3 >= v233)
                      goto LABEL_136;
                    v169 = *(_QWORD *)(v228 + 8 * v168);
                    if (!v169)
                    {
                      v168 = v160 + 4;
                      if (v160 + 4 >= v233)
                        goto LABEL_136;
                      v169 = *(_QWORD *)(v228 + 8 * v168);
                      if (!v169)
                      {
                        v168 = v160 + 5;
                        if (v160 + 5 >= v233)
                        {
LABEL_136:
                          v180 = v222;
                          v159 = sub_1B1C053F8((unint64_t *)v222, v223, (uint64_t)v225, (_QWORD *)v132);
                          MEMORY[0x1B5E23F88](v180, -1, -1);
                          goto LABEL_137;
                        }
                        v169 = *(_QWORD *)(v228 + 8 * v168);
                        if (!v169)
                        {
                          do
                          {
                            if (v215 == v160)
                              goto LABEL_136;
                            v169 = *(_QWORD *)(v214 + 8 * v160++);
                          }
                          while (!v169);
                          v168 = v160 + 5;
                        }
                      }
                    }
                  }
                }
                v163 = (v169 - 1) & v169;
                v166 = __clz(__rbit64(v169)) + (v168 << 6);
                v234 = v168;
              }
              v170 = *(_QWORD *)(v132 + 48) + 8 * v166;
              v171 = *(_DWORD *)v170;
              v172 = *(_BYTE *)(v170 + 4);
              sub_1B209DE98(*(_QWORD *)(v132 + 56) + *(_QWORD *)(v238 + 72) * v166, v164);
              v173 = v239;
              v174 = v167 + *(int *)(v239 + 48);
              *(_DWORD *)v167 = v171;
              *(_BYTE *)(v167 + 4) = v172;
              sub_1B209DE98(v164, v174);
              v175 = *(int *)(v173 + 48);
              v176 = v229;
              v177 = (uint64_t)v229 + v175;
              *v229 = v171;
              *((_BYTE *)v176 + 4) = v172;
              sub_1B209DE98(v174, (uint64_t)v176 + v175);
              v178 = *(_QWORD *)(v177 + 32);
              if (v178)
              {
                v179 = *(_QWORD *)(v178 + 16);
                sub_1B209DEDC(v167, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
                sub_1B1A04628(v177, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
                sub_1B1A04628(v164, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
                v132 = v237;
                v160 = v234;
                if (v179)
                {
                  *(_QWORD *)&v222[(v166 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v166;
                  ++v225;
                }
              }
              else
              {
                sub_1B209DEDC(v167, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
                sub_1B1A04628(v177, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
                sub_1B1A04628(v164, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
                v132 = v237;
                v160 = v234;
              }
            }
          }
        }
        v222 = (char *)&v200;
        MEMORY[0x1E0C80A78](isStackAllocationSafe, v137);
        v225 = (char *)&v200 - ((v135 + 15) & 0x3FFFFFFFFFFFFFF0);
        bzero(v225, v135);
        v228 = 0;
        v138 = 0;
        v139 = 1 << *(_BYTE *)(v132 + 32);
        if (v139 < 64)
          v140 = ~(-1 << v139);
        else
          v140 = -1;
        v141 = v140 & *(_QWORD *)(v132 + 64);
        v233 = v132 + 64;
        v234 = (unint64_t)(v139 + 63) >> 6;
        v214 = v132 + 112;
        v215 = v234 - 6;
        v142 = (uint64_t)v213;
        while (1)
        {
          if (v141)
          {
            v143 = __clz(__rbit64(v141));
            v141 &= v141 - 1;
            v144 = v143 | (v138 << 6);
            v145 = (uint64_t)v236;
          }
          else
          {
            v146 = v138 + 1;
            v145 = (uint64_t)v236;
            if (v138 + 1 >= v234)
              goto LABEL_111;
            v147 = *(_QWORD *)(v233 + 8 * v146);
            if (!v147)
            {
              v146 = v138 + 2;
              if (v138 + 2 >= v234)
                goto LABEL_111;
              v147 = *(_QWORD *)(v233 + 8 * v146);
              if (!v147)
              {
                v146 = v138 + 3;
                if (v138 + 3 >= v234)
                  goto LABEL_111;
                v147 = *(_QWORD *)(v233 + 8 * v146);
                if (!v147)
                {
                  v146 = v138 + 4;
                  if (v138 + 4 >= v234)
                    goto LABEL_111;
                  v147 = *(_QWORD *)(v233 + 8 * v146);
                  if (!v147)
                  {
                    v146 = v138 + 5;
                    if (v138 + 5 >= v234)
                      goto LABEL_111;
                    v147 = *(_QWORD *)(v233 + 8 * v146);
                    if (!v147)
                    {
                      while (v215 != v138)
                      {
                        v147 = *(_QWORD *)(v214 + 8 * v138++);
                        if (v147)
                        {
                          v146 = v138 + 5;
                          goto LABEL_107;
                        }
                      }
LABEL_111:
                      v159 = sub_1B1C053F8((unint64_t *)v225, v223, v228, (_QWORD *)v132);
LABEL_137:
                      swift_bridgeObjectRelease();
                      v181 = v159[2];
                      swift_release();
                      if (!v181)
                      {
                        v182 = *(_QWORD *)(*((_QWORD *)v219 + 5) + 16);
                        v183 = *(_QWORD *)(v182 + 128);
                        if (*(_QWORD *)(v183 + 16))
                        {
                          v184 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig);
                          if ((v185 & 1) != 0
                            && *(ValueMetadata **)(*(_QWORD *)(v182 + 24)
                                                 + 16 * *(_QWORD *)(*(_QWORD *)(v183 + 56) + 8 * v184)
                                                 + 32) == &type metadata for GraphScriptingConfig)
                          {
                            v260 = &type metadata for GraphScriptingConfig;
                            v261 = &off_1E639BCE0;
                            v262 = 1;
                            v186 = *v200;
                            if (*(_QWORD *)(*v200 + 16))
                            {
                              swift_retain();
                              swift_bridgeObjectRetain();
                              sub_1B1BE90FC(v186 + 32, (uint64_t)&v255);
                              sub_1B1BE90FC((uint64_t)&v260, (uint64_t)v217);
                              __asm { BR              X9 }
                            }
                            v187 = swift_retain();
                            v188 = *(_QWORD *)(v187 + 240) - *(_QWORD *)(v187 + 232);
                            v189 = v210;
                            v190 = ecs_stack_allocator_allocate(v210[4], 8 * v188, 8);
                            *v190 = v218;
                            sub_1B1BE90FC((uint64_t)&v260, (uint64_t)&v255);
                            *(_QWORD *)&v258 = v190;
                            *((_QWORD *)&v258 + 1) = v188;
                            v259 = 1;
                            v191 = (_QWORD *)v189[13];
                            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                            v189[13] = v191;
                            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                            {
                              v191 = sub_1B1C631A0(0, v191[2] + 1, 1, v191);
                              *v200 = v191;
                            }
                            v194 = v191[2];
                            v193 = v191[3];
                            if (v194 >= v193 >> 1)
                            {
                              v191 = sub_1B1C631A0(v193 > 1, v194 + 1, 1, v191);
                              *v200 = v191;
                            }
                            v191[2] = v194 + 1;
                            v195 = &v191[9 * v194];
                            *((_OWORD *)v195 + 2) = v255;
                            v196 = v256;
                            v197 = v257;
                            v198 = v258;
                            v195[12] = v259;
                            *((_OWORD *)v195 + 4) = v197;
                            *((_OWORD *)v195 + 5) = v198;
                            *((_OWORD *)v195 + 3) = v196;
                            sub_1B1B68F14((uint64_t)&v260);
                            swift_release();
                          }
                        }
                      }
                      v59 = v224 + 1;
                      if (v224 + 1 == v220)
                        goto LABEL_15;
                      goto LABEL_85;
                    }
                  }
                }
              }
            }
LABEL_107:
            v141 = (v147 - 1) & v147;
            v144 = __clz(__rbit64(v147)) + (v146 << 6);
            v138 = v146;
          }
          v148 = *(_QWORD *)(v132 + 48) + 8 * v144;
          v149 = *(_DWORD *)v148;
          v150 = *(_BYTE *)(v148 + 4);
          sub_1B209DE98(*(_QWORD *)(v132 + 56) + *(_QWORD *)(v238 + 72) * v144, v142);
          v151 = v142;
          v152 = v239;
          v153 = v145 + *(int *)(v239 + 48);
          *(_DWORD *)v145 = v149;
          *(_BYTE *)(v145 + 4) = v150;
          sub_1B209DE98(v151, v153);
          v154 = *(int *)(v152 + 48);
          v155 = v235;
          v156 = (uint64_t)v235 + v154;
          *v235 = v149;
          *((_BYTE *)v155 + 4) = v150;
          sub_1B209DE98(v153, (uint64_t)v155 + v154);
          v157 = *(_QWORD *)(v156 + 32);
          if (v157)
          {
            v158 = *(_QWORD *)(v157 + 16);
            sub_1B209DEDC(v145, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            sub_1B1A04628(v156, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            sub_1B1A04628(v151, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            v142 = v151;
            v132 = v237;
            if (v158)
            {
              *(_QWORD *)&v225[(v144 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v144;
              ++v228;
            }
          }
          else
          {
            sub_1B209DEDC(v145, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            sub_1B1A04628(v156, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            sub_1B1A04628(v151, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            v142 = v151;
            v132 = v237;
          }
        }
      }
      if ((_DWORD)v47 != (_DWORD)v218)
        break;
LABEL_15:
      v60 = v207;
      sub_1B1F05D48(v210, (unsigned __int16 **)v245, (uint64_t)v271);
      v207 = v60;
      v61 = v219;
      sub_1B1F03804(v219);
      ecs_stack_allocator_pop_snapshot(v208);
      if ((v209 & 1) != 0)
      {
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v61 + 43));
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v61 + 47));
      }
      swift_release();
      v44 = v206 + 1;
      if (v206 + 1 == v203)
      {
        sub_1B19ED748(v263);
        return sub_1B19ED748(v263);
      }
    }
    v221 = (uint64_t *)(v58 + 16);
LABEL_18:
    v62 = v221[4 * v47];
    v63 = *(_BYTE *)(v62 + 32);
    v64 = v63 & 0x3F;
    v223 = (unint64_t)((1 << v63) + 63) >> 6;
    v224 = v47;
    v65 = 8 * v223;
    v66 = swift_bridgeObjectRetain();
    v237 = v62;
    if (v64 > 0xD)
    {
      v66 = swift_stdlib_isStackAllocationSafe();
      if ((v66 & 1) == 0)
      {
        v222 = (char *)swift_slowAlloc();
        bzero(v222, v65);
        v225 = 0;
        v91 = 0;
        v92 = 1 << *(_BYTE *)(v62 + 32);
        if (v92 < 64)
          v93 = ~(-1 << v92);
        else
          v93 = -1;
        v94 = v93 & *(_QWORD *)(v62 + 64);
        v233 = (unint64_t)(v92 + 63) >> 6;
        v220 = v233 - 6;
        v228 = v62 + 64;
        v216 = v62 + 112;
        v95 = (uint64_t)v205;
        while (1)
        {
          if (v94)
          {
            v96 = __clz(__rbit64(v94));
            v94 &= v94 - 1;
            v234 = v91;
            v97 = v96 | (v91 << 6);
          }
          else
          {
            v98 = v91 + 1;
            if (v91 + 1 >= v233)
              goto LABEL_69;
            v99 = *(_QWORD *)(v228 + 8 * v98);
            if (!v99)
            {
              v98 = v91 + 2;
              if (v91 + 2 >= v233)
                goto LABEL_69;
              v99 = *(_QWORD *)(v228 + 8 * v98);
              if (!v99)
              {
                v98 = v91 + 3;
                if (v91 + 3 >= v233)
                  goto LABEL_69;
                v99 = *(_QWORD *)(v228 + 8 * v98);
                if (!v99)
                {
                  v98 = v91 + 4;
                  if (v91 + 4 >= v233)
                    goto LABEL_69;
                  v99 = *(_QWORD *)(v228 + 8 * v98);
                  if (!v99)
                  {
                    v98 = v91 + 5;
                    if (v91 + 5 >= v233)
                    {
LABEL_69:
                      v112 = v222;
                      v90 = sub_1B1C053F8((unint64_t *)v222, v223, (uint64_t)v225, (_QWORD *)v62);
                      MEMORY[0x1B5E23F88](v112, -1, -1);
                      goto LABEL_70;
                    }
                    v99 = *(_QWORD *)(v228 + 8 * v98);
                    if (!v99)
                    {
                      do
                      {
                        if (v220 == v91)
                          goto LABEL_69;
                        v99 = *(_QWORD *)(v216 + 8 * v91++);
                      }
                      while (!v99);
                      v98 = v91 + 5;
                    }
                  }
                }
              }
            }
            v94 = (v99 - 1) & v99;
            v97 = __clz(__rbit64(v99)) + (v98 << 6);
            v234 = v98;
          }
          v100 = *(_QWORD *)(v62 + 48) + 8 * v97;
          v101 = *(_DWORD *)v100;
          v102 = *(_BYTE *)(v100 + 4);
          sub_1B209DE98(*(_QWORD *)(v62 + 56) + *(_QWORD *)(v238 + 72) * v97, v95);
          v103 = v239;
          v104 = *(int *)(v239 + 48);
          v105 = (uint64_t)v226;
          v106 = (uint64_t)v226 + v104;
          *v226 = v101;
          *(_BYTE *)(v105 + 4) = v102;
          sub_1B209DE98(v95, v105 + v104);
          v107 = *(int *)(v103 + 48);
          v108 = v227;
          v109 = (uint64_t)v227 + v107;
          *v227 = v101;
          *((_BYTE *)v108 + 4) = v102;
          sub_1B209DE98(v106, (uint64_t)v108 + v107);
          v110 = *(_QWORD *)(v109 + 32);
          if (v110)
          {
            v111 = *(_QWORD *)(v110 + 16);
            sub_1B209DEDC(v105, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            sub_1B1A04628(v109, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            sub_1B1A04628(v95, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            v62 = v237;
            v91 = v234;
            if (v111)
            {
              *(_QWORD *)&v222[(v97 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v97;
              ++v225;
            }
          }
          else
          {
            sub_1B209DEDC(v105, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            sub_1B1A04628(v109, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            sub_1B1A04628(v95, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
            v62 = v237;
            v91 = v234;
          }
        }
      }
    }
    v222 = (char *)&v200;
    MEMORY[0x1E0C80A78](v66, v67);
    v225 = (char *)&v200 - ((v65 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v225, v65);
    v228 = 0;
    v68 = 0;
    v69 = 1 << *(_BYTE *)(v62 + 32);
    if (v69 < 64)
      v70 = ~(-1 << v69);
    else
      v70 = -1;
    v71 = v70 & *(_QWORD *)(v62 + 64);
    v233 = v62 + 64;
    v234 = (unint64_t)(v69 + 63) >> 6;
    v220 = v234 - 6;
    v216 = v62 + 112;
    v72 = (uint64_t)v212;
    while (1)
    {
      if (v71)
      {
        v73 = __clz(__rbit64(v71));
        v71 &= v71 - 1;
        v74 = v73 | (v68 << 6);
      }
      else
      {
        v75 = v68 + 1;
        if (v68 + 1 >= v234)
          goto LABEL_44;
        v76 = *(_QWORD *)(v233 + 8 * v75);
        if (!v76)
        {
          v75 = v68 + 2;
          if (v68 + 2 >= v234)
            goto LABEL_44;
          v76 = *(_QWORD *)(v233 + 8 * v75);
          if (!v76)
          {
            v75 = v68 + 3;
            if (v68 + 3 >= v234)
              goto LABEL_44;
            v76 = *(_QWORD *)(v233 + 8 * v75);
            if (!v76)
            {
              v75 = v68 + 4;
              if (v68 + 4 >= v234)
                goto LABEL_44;
              v76 = *(_QWORD *)(v233 + 8 * v75);
              if (!v76)
              {
                v75 = v68 + 5;
                if (v68 + 5 >= v234)
                  goto LABEL_44;
                v76 = *(_QWORD *)(v233 + 8 * v75);
                if (!v76)
                {
                  while (v220 != v68)
                  {
                    v76 = *(_QWORD *)(v216 + 8 * v68++);
                    if (v76)
                    {
                      v75 = v68 + 5;
                      goto LABEL_40;
                    }
                  }
LABEL_44:
                  v90 = sub_1B1C053F8((unint64_t *)v225, v223, v228, (_QWORD *)v62);
LABEL_70:
                  swift_bridgeObjectRelease();
                  v113 = v90[2];
                  swift_release();
                  if (!v113
                    && (v115 = *(_QWORD *)(*((_QWORD *)v219 + 5) + 16),
                        v116 = *(_QWORD *)(v115 + 128),
                        *(_QWORD *)(v116 + 16))
                    && (v117 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig), (v118 & 1) != 0)
                    && *(ValueMetadata **)(*(_QWORD *)(v115 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v116 + 56) + 8 * v117)
                                         + 32) == &type metadata for GraphScriptingConfig)
                  {
                    v260 = &type metadata for GraphScriptingConfig;
                    v261 = &off_1E639BCE0;
                    v262 = 1;
                    v119 = *v200;
                    if (*(_QWORD *)(*v200 + 16))
                    {
                      swift_retain();
                      swift_bridgeObjectRetain();
                      sub_1B1BE90FC(v119 + 32, (uint64_t)&v255);
                      sub_1B1BE90FC((uint64_t)&v260, (uint64_t)v217);
                      __asm { BR              X9 }
                    }
                    v120 = swift_retain();
                    v121 = *(_QWORD *)(v120 + 240) - *(_QWORD *)(v120 + 232);
                    v122 = v210;
                    v123 = ecs_stack_allocator_allocate(v210[4], 8 * v121, 8);
                    *v123 = v224;
                    sub_1B1BE90FC((uint64_t)&v260, (uint64_t)&v255);
                    *(_QWORD *)&v258 = v123;
                    *((_QWORD *)&v258 + 1) = v121;
                    v259 = 1;
                    v124 = (_QWORD *)v122[13];
                    v125 = swift_isUniquelyReferenced_nonNull_native();
                    v122[13] = v124;
                    if ((v125 & 1) == 0)
                    {
                      v124 = sub_1B1C631A0(0, v124[2] + 1, 1, v124);
                      *v200 = v124;
                    }
                    v127 = v124[2];
                    v126 = v124[3];
                    if (v127 >= v126 >> 1)
                    {
                      v124 = sub_1B1C631A0(v126 > 1, v127 + 1, 1, v124);
                      *v200 = v124;
                    }
                    v124[2] = v127 + 1;
                    v128 = &v124[9 * v127];
                    *((_OWORD *)v128 + 2) = v255;
                    v129 = v256;
                    v130 = v257;
                    v131 = v258;
                    v128[12] = v259;
                    *((_OWORD *)v128 + 4) = v130;
                    *((_OWORD *)v128 + 5) = v131;
                    *((_OWORD *)v128 + 3) = v129;
                    v114 = v224;
                    sub_1B1B68F14((uint64_t)&v260);
                    swift_release();
                  }
                  else
                  {
                    v114 = v224;
                  }
                  v47 = v114 + 1;
                  if (v47 == v218)
                    goto LABEL_15;
                  goto LABEL_18;
                }
              }
            }
          }
        }
LABEL_40:
        v71 = (v76 - 1) & v76;
        v74 = __clz(__rbit64(v76)) + (v75 << 6);
        v68 = v75;
      }
      v77 = *(_QWORD *)(v62 + 48) + 8 * v74;
      v78 = *(_DWORD *)v77;
      v79 = *(_BYTE *)(v77 + 4);
      sub_1B209DE98(*(_QWORD *)(v62 + 56) + *(_QWORD *)(v238 + 72) * v74, v72);
      v80 = v72;
      v81 = v239;
      v82 = *(int *)(v239 + 48);
      v83 = (uint64_t)v231;
      v84 = (uint64_t)v231 + v82;
      *v231 = v78;
      *(_BYTE *)(v83 + 4) = v79;
      sub_1B209DE98(v80, v83 + v82);
      v85 = *(int *)(v81 + 48);
      v86 = v232;
      v87 = (uint64_t)v232 + v85;
      *v232 = v78;
      *((_BYTE *)v86 + 4) = v79;
      sub_1B209DE98(v84, (uint64_t)v86 + v85);
      v88 = *(_QWORD *)(v87 + 32);
      if (v88)
      {
        v89 = *(_QWORD *)(v88 + 16);
        sub_1B209DEDC(v83, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
        sub_1B1A04628(v87, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
        sub_1B1A04628(v80, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
        v72 = v80;
        v62 = v237;
        if (v89)
        {
          *(_QWORD *)&v225[(v74 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v74;
          ++v228;
        }
      }
      else
      {
        sub_1B209DEDC(v83, &qword_1EEF5C480, (void (*)(uint64_t))type metadata accessor for GraphScriptingConfig.ScriptInfo);
        sub_1B1A04628(v87, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
        sub_1B1A04628(v80, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
        v72 = v80;
        v62 = v237;
      }
    }
  }
  return sub_1B19ED748(v263);
}

uint64_t *sub_1B209A470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  ValueMetadata *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  ValueMetadata *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  ValueMetadata **v55;
  _QWORD *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  ValueMetadata *v63;
  uint64_t v65;
  uint64_t v66;
  ValueMetadata **v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  ValueMetadata *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  ValueMetadata *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  ValueMetadata **v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  ValueMetadata *v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  ValueMetadata **v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  _QWORD *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _OWORD v162[2];
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  _OWORD v167[2];
  uint64_t v168;
  _OWORD v169[2];
  uint64_t v170;
  uint64_t v171;
  int v172;
  char v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  ValueMetadata *v183;
  _UNKNOWN **v184;
  ValueMetadata *v185;
  _UNKNOWN **v186;
  char v187;
  uint64_t v188[8];
  _OWORD v189[2];
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _BYTE v196[40];
  uint64_t v197;

  v1 = v0;
  v197 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v171 = qword_1ED4D09F8;
  v172 = 0;
  v173 = 2;
  v174 = 1;
  v175 = 2;
  v176 = 0;
  swift_retain();
  sub_1B1B6F7EC((uint64_t)v162);
  swift_release();
  v169[0] = v162[0];
  v169[1] = v162[1];
  v170 = v163;
  sub_1B1E8FCE4(v0, (uint64_t)v169, 0x200000000, v188);
  sub_1B1A18378((uint64_t)v188, (uint64_t)v189, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v189[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v162);
  v164 = v189[0];
  v165 = v189[1];
  v150 = v191;
  v166 = v190;
  v3 = v192;
  v2 = v193;
  v5 = v194;
  v4 = v195;
  sub_1B19ED720((uint64_t)v162);
  if (v4 > 0 && v3)
  {
    v153 = v5[4];
    v152 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v6 = &qword_1ED4B8000;
    v146 = (uint64_t *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v155 = v5 + 13;
    v147 = v5 + 8;
    v148 = (uint64_t)(v5 + 6);
    swift_retain();
    swift_retain();
    swift_retain();
    v7 = 0;
    v154 = v5;
    v149 = v3;
    while (1)
    {
      v8 = (unsigned int *)(v150 + 48 * v7);
      v9 = *v8;
      v160 = *((_QWORD *)v8 + 2);
      v10 = *((_QWORD *)v8 + 5);
      v156 = v8[1];
      v158 = *((_QWORD *)v8 + 4);
      v151 = v7;
      if (v152)
      {
        v11 = *(os_unfair_lock_s **)(v10 + 376);
        swift_retain();
        os_unfair_lock_lock(v11);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v153);
      sub_1B1A18378(v148, (uint64_t)v196, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v12 = v5[4];
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v5[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
      v5[7] = v13;
      v147[1] = 0;
      v147[2] = 0;
      *v147 = 0;
      swift_release();
      if (v160)
      {
        if (v158)
        {
          for (i = 0; i != v158; ++i)
          {
            while (1)
            {
              v23 = *(_QWORD *)(v160 + 8 * i);
              v24 = *(_BYTE *)(v10 + 184);
              v25 = swift_retain();
              if ((v24 & 1) != 0)
                goto LABEL_210;
              v26 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v23);
              v27 = *(_DWORD *)(*(_QWORD *)(v25 + v6[192]) + 12 * (int)v26 + 8);
              swift_release();
              if (v26 == -1)
                break;
              v28 = v6[192];
              swift_retain();
              if ((v26 & 0x80000000) != 0)
                goto LABEL_69;
              if (*(_QWORD *)(v1 + v28 + 8) > (int)v26
                && ((v29 = *(_QWORD *)(v1 + v28), v27 != -1)
                  ? (v30 = *(_DWORD *)(v29 + 12 * (int)v26 + 8) == v27)
                  : (v30 = 1),
                    v30
                 && (v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 80)
                                                 + 8 * *(__int16 *)(v29 + 12 * (int)v26 + 6)
                                                 + 32)
                                     + 16),
                     v32 = *(_QWORD *)(v31 + 128),
                     *(_QWORD *)(v32 + 16))
                 && (v33 = sub_1B1DC3AC8((uint64_t)&type metadata for EmitterDescription), (v34 & 1) != 0)))
              {
                v35 = *(ValueMetadata **)(*(_QWORD *)(v31 + 24)
                                        + 16 * *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33)
                                        + 32);
                swift_release();
                if (v35 == &type metadata for EmitterDescription)
                {
                  v184 = &off_1E636F320;
                  *(_QWORD *)&v182 = __PAIR64__(v27, v26);
                  v183 = &type metadata for VFXEmitter;
                  *((_QWORD *)&v182 + 1) = v1;
                  sub_1B1A02518(&v182, (uint64_t)&v177);
                  v36 = sub_1B19FA070(&v177, *((uint64_t *)&v178 + 1));
                  v37 = sub_1B1C04D48(*v36, v36[1]);
                  v38 = *(_QWORD *)(v37 + 16);
                  if (v38)
                  {
                    v39 = 0;
                    v144 = 0;
                    v40 = v37 + 32;
                    v157 = v37 + 32;
                    do
                    {
                      v41 = (int *)(v40 + 16 * v39);
                      v42 = v41[1];
                      v43 = *v41;
                      v44 = *((_QWORD *)v41 + 1);
                      swift_retain();
                      v45 = (_DWORD)v43 == -1 && v42 == 0;
                      if (v45
                        || (v43 & 0x80000000) != 0
                        || *(_QWORD *)(v44 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v43
                        || ((v46 = *(_QWORD *)(v44 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v42 != -1)
                          ? (v47 = *(_DWORD *)(v46 + 12 * (int)v43 + 8) == v42)
                          : (v47 = 1),
                            !v47))
                      {
                        swift_release();
                      }
                      else
                      {
                        v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 80)
                                                                + 8 * *(__int16 *)(v46 + 12 * (int)v43 + 6)
                                                                + 32)
                                                    + 16)
                                        + 128);
                        if (*(_QWORD *)(v48 + 16)
                          && (v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v44 + 80)
                                                           + 8 * *(__int16 *)(v46 + 12 * (int)v43 + 6)
                                                           + 32)
                                               + 16),
                              v49 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig),
                              (v50 & 1) != 0))
                        {
                          v51 = *(ValueMetadata **)(*(_QWORD *)(v143 + 24)
                                                  + 16 * *(_QWORD *)(*(_QWORD *)(v48 + 56) + 8 * v49)
                                                  + 32);
                          swift_release();
                          if (v51 == &type metadata for GraphScriptingConfig)
                          {
                            swift_retain();
                            swift_unownedRetain();
                            swift_release();
                            v40 = v157;
                            if (v146[1] <= v43)
                              goto LABEL_211;
                            v52 = *v146;
                            if (v42 != -1 && *(_DWORD *)(v52 + 12 * (int)v43 + 8) != v42)
                              goto LABEL_211;
                            v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 136)
                                                        + 8 * *(int *)(v52 + 12 * (int)v43)
                                                        + 32)
                                            + 48);
                            v54 = *(_QWORD *)(v53 + 16);
                            if (!v54)
                              goto LABEL_211;
                            v55 = (ValueMetadata **)(v53 + 32);
                            while (*v55 != &type metadata for GraphScriptingConfig)
                            {
                              v55 += 5;
                              if (!--v54)
                                goto LABEL_211;
                            }
                            swift_unownedRelease();
                            ++v144;
                          }
                          else
                          {
                            v40 = v157;
                          }
                        }
                        else
                        {
                          swift_release();
                          v40 = v157;
                        }
                      }
                      ++v39;
                    }
                    while (v39 != v38);
                    swift_bridgeObjectRelease();
                    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v177);
                    v5 = v154;
                    v6 = &qword_1ED4B8000;
                    if (v144)
                      goto LABEL_24;
                    goto LABEL_94;
                  }
                  swift_bridgeObjectRelease();
                  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v177);
                  goto LABEL_93;
                }
              }
              else
              {
                swift_release();
              }
              v56 = (_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
              v57 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
              swift_retain();
              if (v57 <= (int)v26
                || (v27 != -1 ? (v58 = *(_DWORD *)(*v56 + 12 * (int)v26 + 8) == v27) : (v58 = 1),
                    !v58
                 || (v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 80)
                                                 + 8 * *(__int16 *)(*v56 + 12 * (int)v26 + 6)
                                                 + 32)
                                     + 16),
                     v60 = *(_QWORD *)(v59 + 128),
                     !*(_QWORD *)(v60 + 16))))
              {
                swift_release();
LABEL_93:
                v6 = &qword_1ED4B8000;
                goto LABEL_94;
              }
              v61 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig);
              if ((v62 & 1) == 0)
              {
                swift_release();
LABEL_105:
                v6 = &qword_1ED4B8000;
                v5 = v154;
                goto LABEL_94;
              }
              v63 = *(ValueMetadata **)(*(_QWORD *)(v59 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8 * v61) + 32);
              swift_release();
              if (v63 != &type metadata for GraphScriptingConfig)
                goto LABEL_105;
              swift_retain();
              swift_unownedRetain();
              swift_release();
              v5 = v154;
              if (v146[1] <= (int)v26)
                goto LABEL_209;
              if (v27 != -1 && *(_DWORD *)(*v146 + 12 * (int)v26 + 8) != v27)
                goto LABEL_209;
              v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(*v146 + 12 * (int)v26) + 32) + 48);
              v66 = *(_QWORD *)(v65 + 16);
              if (!v66)
                goto LABEL_209;
              v67 = (ValueMetadata **)(v65 + 32);
              while (*v67 != &type metadata for GraphScriptingConfig)
              {
                v67 += 5;
                if (!--v66)
                  goto LABEL_209;
              }
              swift_unownedRelease();
              ++i;
              v6 = &qword_1ED4B8000;
              if (i == v158)
                goto LABEL_15;
            }
            if (v27)
            {
              swift_retain();
LABEL_69:
              swift_release();
            }
            swift_retain();
            swift_release();
LABEL_94:
            v68 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
            v69 = *(_QWORD *)(v68 + 128);
            if (*(_QWORD *)(v69 + 16))
            {
              v70 = sub_1B1DC3AC8((uint64_t)&type metadata for CodeGenerationInitialized);
              if ((v71 & 1) != 0
                && *(ValueMetadata **)(*(_QWORD *)(v68 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v69 + 56) + 8 * v70) + 32) == &type metadata for CodeGenerationInitialized)
              {
                v185 = &type metadata for CodeGenerationInitialized;
                v186 = &off_1E63AF7E8;
                v187 = 1;
                v72 = *v155;
                if (*(_QWORD *)(*v155 + 16))
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  sub_1B1F09F2C(v72 + 32, (uint64_t)&v182);
                  sub_1B1BE90FC((uint64_t)&v182, (uint64_t)&v177);
                  sub_1B1BE90FC((uint64_t)&v185, (uint64_t)&v180);
                  __asm { BR              X9 }
                }
                swift_retain();
                v73 = *(_QWORD *)(v10 + 240) - *(_QWORD *)(v10 + 232);
                v74 = ecs_stack_allocator_allocate(v5[4], 8 * v73, 8);
                *v74 = v23;
                sub_1B1BE90FC((uint64_t)&v185, (uint64_t)&v177);
                *(_QWORD *)&v180 = v74;
                *((_QWORD *)&v180 + 1) = v73;
                v181 = 1;
                v75 = (_QWORD *)v5[13];
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v5[13] = v75;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v75 = sub_1B1C631A0(0, v75[2] + 1, 1, v75);
                  *v155 = v75;
                }
                v78 = v75[2];
                v77 = v75[3];
                if (v78 >= v77 >> 1)
                {
                  v75 = sub_1B1C631A0(v77 > 1, v78 + 1, 1, v75);
                  *v155 = v75;
                }
                v75[2] = v78 + 1;
                v79 = &v75[9 * v78];
                *((_OWORD *)v79 + 2) = v177;
                v80 = v178;
                v81 = v179;
                v82 = v180;
                v79[12] = v181;
                *((_OWORD *)v79 + 4) = v81;
                *((_OWORD *)v79 + 5) = v82;
                *((_OWORD *)v79 + 3) = v80;
                sub_1B1B68F14((uint64_t)&v185);
                swift_release();
              }
            }
LABEL_24:
            ;
          }
        }
      }
      else if ((_DWORD)v9 != (_DWORD)v156)
      {
        v83 = swift_retain();
        if ((*(_BYTE *)(v10 + 184) & 1) != 0)
          goto LABEL_210;
        while (2)
        {
          v84 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v9);
          v85 = v9 + 1;
          v86 = *(_DWORD *)(*(_QWORD *)(v83 + v6[192]) + 12 * (int)v84 + 8);
          swift_release();
          if (v84 == -1)
          {
            if (v86)
            {
              swift_retain();
              goto LABEL_155;
            }
          }
          else
          {
            v87 = v6[192];
            swift_retain();
            if ((v84 & 0x80000000) == 0)
            {
              if (*(_QWORD *)(v1 + v87 + 8) > (int)v84
                && ((v88 = *(_QWORD *)(v1 + v87), v86 != -1)
                  ? (v89 = *(_DWORD *)(v88 + 12 * (int)v84 + 8) == v86)
                  : (v89 = 1),
                    v89
                 && (v90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 80)
                                                 + 8 * *(__int16 *)(v88 + 12 * (int)v84 + 6)
                                                 + 32)
                                     + 16),
                     v91 = *(_QWORD *)(v90 + 128),
                     *(_QWORD *)(v91 + 16))
                 && (v92 = sub_1B1DC3AC8((uint64_t)&type metadata for EmitterDescription), (v93 & 1) != 0)))
              {
                v94 = *(ValueMetadata **)(*(_QWORD *)(v90 + 24)
                                        + 16 * *(_QWORD *)(*(_QWORD *)(v91 + 56) + 8 * v92)
                                        + 32);
                swift_release();
                if (v94 == &type metadata for EmitterDescription)
                {
                  v184 = &off_1E636F320;
                  *(_QWORD *)&v182 = __PAIR64__(v86, v84);
                  v183 = &type metadata for VFXEmitter;
                  *((_QWORD *)&v182 + 1) = v1;
                  sub_1B1A02518(&v182, (uint64_t)&v177);
                  v95 = sub_1B19FA070(&v177, *((uint64_t *)&v178 + 1));
                  v96 = sub_1B1C04D48(*v95, v95[1]);
                  v97 = *(_QWORD *)(v96 + 16);
                  if (v97)
                  {
                    v98 = 0;
                    v99 = v96 + 32;
                    v159 = 0;
                    v161 = v96 + 32;
                    do
                    {
                      v100 = (int *)(v99 + 16 * v98);
                      v101 = v100[1];
                      v102 = *v100;
                      v103 = *((_QWORD *)v100 + 1);
                      swift_retain();
                      v104 = (_DWORD)v102 == -1 && v101 == 0;
                      if (v104
                        || (v102 & 0x80000000) != 0
                        || *(_QWORD *)(v103 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v102
                        || ((v105 = *(_QWORD *)(v103 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v101 != -1)
                          ? (v106 = *(_DWORD *)(v105 + 12 * (int)v102 + 8) == v101)
                          : (v106 = 1),
                            !v106))
                      {
                        swift_release();
                      }
                      else
                      {
                        v107 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v103 + 80)
                                                                 + 8 * *(__int16 *)(v105 + 12 * (int)v102 + 6)
                                                                 + 32)
                                                     + 16)
                                         + 128);
                        if (*(_QWORD *)(v107 + 16)
                          && (v145 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v103 + 80)
                                                           + 8 * *(__int16 *)(v105 + 12 * (int)v102 + 6)
                                                           + 32)
                                               + 16),
                              v108 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig),
                              (v109 & 1) != 0))
                        {
                          v110 = *(ValueMetadata **)(*(_QWORD *)(v145 + 24)
                                                   + 16 * *(_QWORD *)(*(_QWORD *)(v107 + 56) + 8 * v108)
                                                   + 32);
                          swift_release();
                          if (v110 == &type metadata for GraphScriptingConfig)
                          {
                            swift_retain();
                            swift_unownedRetain();
                            swift_release();
                            v99 = v161;
                            if (v146[1] <= v102
                              || (v111 = *v146, v101 != -1) && *(_DWORD *)(v111 + 12 * (int)v102 + 8) != v101
                              || (v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 136)
                                                               + 8 * *(int *)(v111 + 12 * (int)v102)
                                                               + 32)
                                                   + 48),
                                  (v113 = *(_QWORD *)(v112 + 16)) == 0))
                            {
                              while (1)
                              {
LABEL_211:
                                *(_QWORD *)&v182 = 0;
                                *((_QWORD *)&v182 + 1) = 0xE000000000000000;
                                sub_1B2229430();
                                sub_1B2228890();
                                sub_1B1BC3C70();
                                sub_1B2228890();
                                swift_bridgeObjectRelease();
                                sub_1B2228890();
                                sub_1B2228890();
                                sub_1B2228890();
LABEL_210:
                                sub_1B2229688();
                                __break(1u);
                              }
                            }
                            v114 = (ValueMetadata **)(v112 + 32);
                            while (*v114 != &type metadata for GraphScriptingConfig)
                            {
                              v114 += 5;
                              if (!--v113)
                                goto LABEL_211;
                            }
                            swift_unownedRelease();
                            ++v159;
                          }
                          else
                          {
                            v99 = v161;
                          }
                        }
                        else
                        {
                          swift_release();
                          v99 = v161;
                        }
                      }
                      ++v98;
                    }
                    while (v98 != v97);
                    swift_bridgeObjectRelease();
                    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v177);
                    v5 = v154;
                    v6 = &qword_1ED4B8000;
                    if (!v159)
                    {
LABEL_180:
                      v127 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
                      v128 = *(_QWORD *)(v127 + 128);
                      if (*(_QWORD *)(v128 + 16))
                      {
                        v129 = sub_1B1DC3AC8((uint64_t)&type metadata for CodeGenerationInitialized);
                        if ((v130 & 1) != 0
                          && *(ValueMetadata **)(*(_QWORD *)(v127 + 24)
                                               + 16 * *(_QWORD *)(*(_QWORD *)(v128 + 56) + 8 * v129)
                                               + 32) == &type metadata for CodeGenerationInitialized)
                        {
                          v185 = &type metadata for CodeGenerationInitialized;
                          v186 = &off_1E63AF7E8;
                          v187 = 1;
                          v131 = *v155;
                          if (*(_QWORD *)(*v155 + 16))
                          {
                            swift_retain();
                            swift_bridgeObjectRetain();
                            sub_1B1F09F2C(v131 + 32, (uint64_t)&v182);
                            sub_1B1BE90FC((uint64_t)&v182, (uint64_t)&v177);
                            sub_1B1BE90FC((uint64_t)&v185, (uint64_t)&v180);
                            __asm { BR              X9 }
                          }
                          swift_retain();
                          v132 = *(_QWORD *)(v10 + 240) - *(_QWORD *)(v10 + 232);
                          v133 = ecs_stack_allocator_allocate(v5[4], 8 * v132, 8);
                          *v133 = v9;
                          sub_1B1BE90FC((uint64_t)&v185, (uint64_t)&v177);
                          *(_QWORD *)&v180 = v133;
                          *((_QWORD *)&v180 + 1) = v132;
                          v181 = 1;
                          v134 = (_QWORD *)v5[13];
                          v135 = swift_isUniquelyReferenced_nonNull_native();
                          v5[13] = v134;
                          if ((v135 & 1) == 0)
                          {
                            v134 = sub_1B1C631A0(0, v134[2] + 1, 1, v134);
                            *v155 = v134;
                          }
                          v137 = v134[2];
                          v136 = v134[3];
                          if (v137 >= v136 >> 1)
                          {
                            v134 = sub_1B1C631A0(v136 > 1, v137 + 1, 1, v134);
                            *v155 = v134;
                          }
                          v134[2] = v137 + 1;
                          v138 = &v134[9 * v137];
                          *((_OWORD *)v138 + 2) = v177;
                          v139 = v178;
                          v140 = v179;
                          v141 = v180;
                          v138[12] = v181;
                          *((_OWORD *)v138 + 4) = v140;
                          *((_OWORD *)v138 + 5) = v141;
                          *((_OWORD *)v138 + 3) = v139;
                          sub_1B1B68F14((uint64_t)&v185);
                          swift_release();
                        }
                      }
                    }
                    if (v85 == v156)
                      goto LABEL_15;
LABEL_191:
                    v83 = swift_retain();
                    ++v9;
                    if ((*(_BYTE *)(v10 + 184) & 1) != 0)
                      goto LABEL_210;
                    continue;
                  }
                  swift_bridgeObjectRelease();
                  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v177);
                  goto LABEL_179;
                }
              }
              else
              {
                swift_release();
              }
              v115 = (_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
              v116 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
              swift_retain();
              if (v116 > (int)v84 && (v86 == -1 || *(_DWORD *)(*v115 + 12 * (int)v84 + 8) == v86))
              {
                v118 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 80)
                                             + 8 * *(__int16 *)(*v115 + 12 * (int)v84 + 6)
                                             + 32)
                                 + 16);
                v119 = *(_QWORD *)(v118 + 128);
                if (*(_QWORD *)(v119 + 16))
                {
                  v120 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig);
                  if ((v121 & 1) != 0)
                  {
                    v122 = *(ValueMetadata **)(*(_QWORD *)(v118 + 24)
                                             + 16 * *(_QWORD *)(*(_QWORD *)(v119 + 56) + 8 * v120)
                                             + 32);
                    swift_release();
                    if (v122 == &type metadata for GraphScriptingConfig)
                    {
                      swift_retain();
                      swift_unownedRetain();
                      swift_release();
                      v5 = v154;
                      if (v146[1] <= (int)v84
                        || (v86 != -1 ? (v123 = *(_DWORD *)(*v146 + 12 * (int)v84 + 8) == v86) : (v123 = 1),
                            !v123
                         || (v124 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 136)
                                                          + 8 * *(int *)(*v146 + 12 * (int)v84)
                                                          + 32)
                                              + 48),
                             (v125 = *(_QWORD *)(v124 + 16)) == 0)))
                      {
LABEL_209:
                        *(_QWORD *)&v177 = 0;
                        *((_QWORD *)&v177 + 1) = 0xE000000000000000;
                        sub_1B2229430();
                        sub_1B2228890();
                        sub_1B1BC3C70();
                        sub_1B2228890();
                        swift_bridgeObjectRelease();
                        sub_1B2228890();
                        sub_1B2228890();
                        sub_1B2228890();
                        goto LABEL_210;
                      }
                      v126 = (ValueMetadata **)(v124 + 32);
                      while (*v126 != &type metadata for GraphScriptingConfig)
                      {
                        v126 += 5;
                        if (!--v125)
                          goto LABEL_209;
                      }
                      swift_unownedRelease();
                      v6 = &qword_1ED4B8000;
                      if (v85 == v156)
                        goto LABEL_15;
                      goto LABEL_191;
                    }
                  }
                  else
                  {
                    swift_release();
                  }
                  v6 = &qword_1ED4B8000;
                  v5 = v154;
                  goto LABEL_180;
                }
              }
              swift_release();
LABEL_179:
              v6 = &qword_1ED4B8000;
              goto LABEL_180;
            }
LABEL_155:
            swift_release();
          }
          break;
        }
        swift_retain();
        swift_release();
        goto LABEL_180;
      }
LABEL_15:
      v167[0] = v164;
      v167[1] = v165;
      v168 = v166;
      sub_1B1F05D48(v5, (unsigned __int16 **)v167, (uint64_t)v196);
      if (*(_QWORD *)(v5[13] + 16))
      {
        v15 = (_QWORD *)swift_bridgeObjectRetain();
        sub_1B1F05034(v15, v10);
        swift_bridgeObjectRelease();
        v16 = swift_isUniquelyReferenced_nonNull_native();
        v17 = v5[13];
        if ((v16 & 1) != 0)
        {
          sub_1B1C92670(0, *(_QWORD *)(v17 + 16));
        }
        else
        {
          v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (*(_QWORD *)(v17 + 24) >= 2uLL)
          {
            sub_1B1BBF038();
            v18 = (_QWORD *)swift_allocObject();
            v19 = j__malloc_size(v18);
            v18[2] = 0;
            v18[3] = 2 * ((uint64_t)(v19 - 32) / 72);
          }
          *v155 = v18;
          swift_bridgeObjectRelease();
        }
        if (*(unsigned __int8 *)(v5[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
        {
          v20 = *(char **)(v10 + 232);
          v21 = *(char **)(v10 + 256);
          if (v20 == v21)
          {
            v22 = *(char **)(v10 + 240);
          }
          else
          {
            sub_1B1A1059C(v21, v20);
            v21 = *(char **)(v10 + 232);
            v22 = *(char **)(v10 + 240);
            if (v22 == v21)
            {
              v22 = 0;
              v21 = 0;
              *(_QWORD *)(v10 + 232) = 0;
              *(_QWORD *)(v10 + 240) = 0;
            }
          }
          *(_QWORD *)(v10 + 248) = v22;
          *(_QWORD *)(v10 + 256) = v21;
        }
      }
      ecs_stack_allocator_pop_snapshot(v153);
      if ((v152 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
      }
      swift_release();
      v7 = v151 + 1;
      if (v151 + 1 == v149)
      {
        sub_1B19ED748(v188);
        return sub_1B19ED748(v188);
      }
    }
  }
  return sub_1B19ED748(v188);
}

uint64_t *sub_1B209BD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_unfair_lock_s *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t j;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  _QWORD *v125;
  _BYTE v126[40];
  _OWORD v127[2];
  uint64_t v128;
  _BYTE v129[40];
  _OWORD v130[2];
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  _OWORD v138[2];
  uint64_t v139;
  _OWORD v140[2];
  uint64_t v141;
  _OWORD v142[2];
  uint64_t v143;
  _OWORD v144[2];
  uint64_t v145;
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  char v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  _QWORD v163[7];
  ValueMetadata *v164;
  _UNKNOWN **v165;
  char v166;
  uint64_t v167[4];
  uint64_t v168[8];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _OWORD v176[2];
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _BYTE v183[40];
  _BYTE v184[40];
  uint64_t v185;

  v1 = v0;
  v185 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v152 = qword_1ED4D09F8;
  v153 = 0;
  v154 = 2;
  v155 = 1;
  v156 = 2;
  v157 = 0;
  swift_retain();
  sub_1B1E3C60C(1, (uint64_t)v126);
  swift_release();
  sub_1B1A19B14();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v2 + 32) = &type metadata for CodeGenerationInitialized;
  *(_QWORD *)(v2 + 40) = &off_1E63AF818;
  sub_1B1B44110(v127, v2);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v126);
  v144[0] = v127[0];
  v144[1] = v127[1];
  v145 = v128;
  sub_1B1E8FCE4(v0, (uint64_t)v144, 0x200000000, v167);
  sub_1B1A18378((uint64_t)v167, (uint64_t)v176, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v176[0])
  {
    v135 = v176[0];
    v136 = v176[1];
    v113 = v178;
    v137 = v177;
    v3 = v179;
    v4 = v180;
    v121 = v181;
    v5 = v182;
    sub_1B19ED720((uint64_t)v127);
    if (v5 > 0 && (v112 = v3) != 0)
    {
      v109 = v0;
      v118 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v116 = v121[4];
      v138[0] = v135;
      v138[1] = v136;
      v139 = v137;
      v110 = v121 + 13;
      swift_retain();
      swift_retain();
      swift_retain();
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = (unsigned int *)(v113 + 48 * v6);
        v9 = *v8;
        v10 = v8[1];
        v12 = (uint64_t *)*((_QWORD *)v8 + 2);
        v11 = *((_QWORD *)v8 + 3);
        v14 = *((_QWORD *)v8 + 4);
        v13 = *((_QWORD *)v8 + 5);
        v114 = v6;
        if (v118)
        {
          v15 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v15);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v116);
        sub_1B1A18378((uint64_t)(v121 + 6), (uint64_t)v184, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v123 = v13;
        v16 = v121[4];
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v121[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
        v121[7] = v17;
        v121[9] = 0;
        v121[10] = 0;
        v121[8] = 0;
        swift_release();
        v18 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v12, v11, v14, (uint64_t)v121);
        if (v12)
        {
          if (v14)
          {
            for (i = 0; i != v14; ++i)
            {
              v20 = v12[i];
              v21 = v18 + (i << 6);
              v22 = *(_QWORD *)(v21 + 40);
              if ((!v22 || !*(_QWORD *)(v22 + 16)) && !*(_QWORD *)(*(_QWORD *)(v21 + 48) + 16))
              {
                v23 = *(_QWORD *)(*(_QWORD *)(v123 + 40) + 16);
                v24 = *(_QWORD *)(v23 + 128);
                if (*(_QWORD *)(v24 + 16))
                {
                  v25 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
                  if ((v26 & 1) != 0
                    && *(ValueMetadata **)(*(_QWORD *)(v23 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25)
                                         + 32) == &type metadata for GraphEntityComponentPropertyReferences)
                  {
                    *(_QWORD *)&v158 = &type metadata for GraphEntityComponentPropertyReferences;
                    *((_QWORD *)&v158 + 1) = &off_1E63B8ED8;
                    BYTE8(v160) = 1;
                    v27 = *v110;
                    if (*(_QWORD *)(*v110 + 16))
                    {
                      swift_retain();
                      swift_bridgeObjectRetain();
                      sub_1B1F09F2C(v27 + 32, (uint64_t)v168);
                      sub_1B1BE90FC((uint64_t)v168, (uint64_t)&v169);
                      sub_1B1BE90FC((uint64_t)&v158, (uint64_t)&v172);
                      __asm { BR              X9 }
                    }
                    swift_retain();
                    v28 = *(_QWORD *)(v123 + 240) - *(_QWORD *)(v123 + 232);
                    v29 = ecs_stack_allocator_allocate(v121[4], 8 * v28, 8);
                    *v29 = v20;
                    sub_1B1BE90FC((uint64_t)&v158, (uint64_t)&v169);
                    *(_QWORD *)&v172 = v29;
                    *((_QWORD *)&v172 + 1) = v28;
                    v173 = 1;
                    v30 = (_QWORD *)v121[13];
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    v121[13] = v30;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    {
                      v30 = sub_1B1C631A0(0, v30[2] + 1, 1, v30);
                      *v110 = v30;
                    }
                    v33 = v30[2];
                    v32 = v30[3];
                    if (v33 >= v32 >> 1)
                    {
                      v30 = sub_1B1C631A0(v32 > 1, v33 + 1, 1, v30);
                      *v110 = v30;
                    }
                    v30[2] = v33 + 1;
                    v34 = &v30[9 * v33];
                    *((_OWORD *)v34 + 2) = v169;
                    v35 = v170;
                    v36 = v171;
                    v37 = v172;
                    v34[12] = v173;
                    *((_OWORD *)v34 + 4) = v36;
                    *((_OWORD *)v34 + 5) = v37;
                    *((_OWORD *)v34 + 3) = v35;
                    sub_1B1B68F14((uint64_t)&v158);
                    swift_release();
                  }
                }
              }
            }
          }
        }
        else if ((_DWORD)v9 != (_DWORD)v10)
        {
          do
          {
            v38 = v18 + (v9 << 6);
            v39 = *(_QWORD *)(v38 + 40);
            if ((!v39 || !*(_QWORD *)(v39 + 16)) && !*(_QWORD *)(*(_QWORD *)(v38 + 48) + 16))
            {
              v40 = *(_QWORD *)(*(_QWORD *)(v123 + 40) + 16);
              v41 = *(_QWORD *)(v40 + 128);
              if (*(_QWORD *)(v41 + 16))
              {
                v42 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
                if ((v43 & 1) != 0
                  && *(ValueMetadata **)(*(_QWORD *)(v40 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v41 + 56) + 8 * v42) + 32) == &type metadata for GraphEntityComponentPropertyReferences)
                {
                  *(_QWORD *)&v158 = &type metadata for GraphEntityComponentPropertyReferences;
                  *((_QWORD *)&v158 + 1) = &off_1E63B8ED8;
                  BYTE8(v160) = 1;
                  v44 = *v110;
                  if (*(_QWORD *)(*v110 + 16))
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    sub_1B1F09F2C(v44 + 32, (uint64_t)v168);
                    sub_1B1BE90FC((uint64_t)v168, (uint64_t)&v169);
                    sub_1B1BE90FC((uint64_t)&v158, (uint64_t)&v172);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v45 = *(_QWORD *)(v123 + 240) - *(_QWORD *)(v123 + 232);
                  v46 = ecs_stack_allocator_allocate(v121[4], 8 * v45, 8);
                  *v46 = v9;
                  sub_1B1BE90FC((uint64_t)&v158, (uint64_t)&v169);
                  *(_QWORD *)&v172 = v46;
                  *((_QWORD *)&v172 + 1) = v45;
                  v173 = 1;
                  v47 = (_QWORD *)v121[13];
                  v48 = swift_isUniquelyReferenced_nonNull_native();
                  v121[13] = v47;
                  if ((v48 & 1) == 0)
                  {
                    v47 = sub_1B1C631A0(0, v47[2] + 1, 1, v47);
                    *v110 = v47;
                  }
                  v50 = v47[2];
                  v49 = v47[3];
                  if (v50 >= v49 >> 1)
                  {
                    v47 = sub_1B1C631A0(v49 > 1, v50 + 1, 1, v47);
                    *v110 = v47;
                  }
                  v47[2] = v50 + 1;
                  v51 = &v47[9 * v50];
                  *((_OWORD *)v51 + 2) = v169;
                  v52 = v170;
                  v53 = v171;
                  v54 = v172;
                  v51[12] = v173;
                  *((_OWORD *)v51 + 4) = v53;
                  *((_OWORD *)v51 + 5) = v54;
                  *((_OWORD *)v51 + 3) = v52;
                  sub_1B1B68F14((uint64_t)&v158);
                  swift_release();
                }
              }
            }
            ++v9;
          }
          while (v9 != v10);
        }
        sub_1B1F05D48(v121, (unsigned __int16 **)v138, (uint64_t)v184);
        sub_1B1F03804((char *)v123);
        ecs_stack_allocator_pop_snapshot(v116);
        if ((v118 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v123 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v123 + 376));
        }
        swift_release();
        v6 = v114 + 1;
      }
      while (v114 + 1 != v112);
      sub_1B19ED748(v167);
      sub_1B19ED748(v167);
      v1 = v109;
    }
    else
    {
      sub_1B19ED748(v167);
      v7 = 0;
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v127);
    v7 = 0;
  }
  v146 = qword_1ED4D09F8;
  v147 = 0;
  v148 = 2;
  v149 = 1;
  v150 = 2;
  v151 = 0;
  swift_retain();
  sub_1B1E3C60C(1, (uint64_t)v129);
  swift_release();
  v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v55 + 32) = &type metadata for CodeGenerationInitialized;
  *(_QWORD *)(v55 + 40) = &off_1E63AF818;
  sub_1B1E68C98(v130);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v129);
  v142[0] = v130[0];
  v142[1] = v130[1];
  v143 = v131;
  sub_1B1E8FCE4(v1, (uint64_t)v142, 0x200000000, v168);
  sub_1B1A18378((uint64_t)v168, (uint64_t)&v169, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!(_QWORD)v169)
    return (uint64_t *)sub_1B19ED720((uint64_t)v130);
  v132 = v169;
  v133 = v170;
  v119 = *((_QWORD *)&v171 + 1);
  v134 = v171;
  v56 = *((_QWORD *)&v172 + 1);
  v57 = v173;
  v125 = v174;
  v58 = v175;
  sub_1B19ED720((uint64_t)v130);
  if (v58 > 0 && v56)
  {
    v59 = *(unsigned __int8 *)(v57 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v122 = v125[4];
    v140[0] = v132;
    v140[1] = v133;
    v141 = v134;
    v111 = v125 + 13;
    swift_retain();
    swift_retain();
    swift_retain();
    v60 = 0;
    v115 = v56;
    v117 = v59;
    do
    {
      v61 = (unsigned int *)(v119 + 48 * v60);
      v63 = *v61;
      v62 = v61[1];
      v64 = *((_QWORD *)v61 + 3);
      v124 = (uint64_t *)*((_QWORD *)v61 + 2);
      v65 = *((_QWORD *)v61 + 4);
      v66 = *((_QWORD *)v61 + 5);
      v120 = v7;
      if (v59)
      {
        v67 = *(os_unfair_lock_s **)(v66 + 376);
        swift_retain();
        os_unfair_lock_lock(v67);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v66 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v122);
      sub_1B1A18378((uint64_t)(v125 + 6), (uint64_t)v183, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v68 = v125[4];
      v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v125[6] = ecs_stack_allocator_allocate(v68, 48 * v69, 8);
      v125[7] = v69;
      v125[9] = 0;
      v125[10] = 0;
      v125[8] = 0;
      swift_release();
      v70 = v124;
      v71 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v124, v64, v65, (uint64_t)v125);
      if (v124)
      {
        v59 = v117;
        if (v65)
        {
          for (j = 0; j != v65; ++j)
          {
            v90 = (_QWORD *)(v71 + (j << 6));
            if (!*(_QWORD *)(v90[1] + 16)
              && !*(_QWORD *)(v90[2] + 16)
              && !*(_QWORD *)(v90[3] + 16)
              && !*(_QWORD *)(v90[4] + 16))
            {
              v91 = v70[j];
              v92 = v90[5];
              if ((!v92 || !*(_QWORD *)(v92 + 16)) && !*(_QWORD *)(v90[6] + 16))
              {
                v93 = *(_QWORD *)(*(_QWORD *)(v66 + 40) + 16);
                v94 = *(_QWORD *)(v93 + 128);
                if (*(_QWORD *)(v94 + 16)
                  && (v95 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphEntityComponentPropertyReferences),
                      (v96 & 1) != 0)
                  && *(ValueMetadata **)(*(_QWORD *)(v93 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v94 + 56) + 8 * v95) + 32) == &type metadata for GraphEntityComponentPropertyReferences)
                {
                  v164 = &type metadata for GraphEntityComponentPropertyReferences;
                  v165 = &off_1E63B8ED8;
                  v166 = 1;
                  v97 = *v111;
                  if (*(_QWORD *)(*v111 + 16))
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    sub_1B1F09F2C(v97 + 32, (uint64_t)v163);
                    sub_1B1BE90FC((uint64_t)v163, (uint64_t)&v158);
                    sub_1B1BE90FC((uint64_t)&v164, (uint64_t)&v161);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v98 = *(_QWORD *)(v66 + 240) - *(_QWORD *)(v66 + 232);
                  v99 = ecs_stack_allocator_allocate(v125[4], 8 * v98, 8);
                  *v99 = v91;
                  sub_1B1BE90FC((uint64_t)&v164, (uint64_t)&v158);
                  *(_QWORD *)&v161 = v99;
                  *((_QWORD *)&v161 + 1) = v98;
                  v162 = 1;
                  v100 = (_QWORD *)v125[13];
                  v101 = swift_isUniquelyReferenced_nonNull_native();
                  v125[13] = v100;
                  if ((v101 & 1) == 0)
                  {
                    v100 = sub_1B1C631A0(0, v100[2] + 1, 1, v100);
                    *v111 = v100;
                  }
                  v103 = v100[2];
                  v102 = v100[3];
                  if (v103 >= v102 >> 1)
                  {
                    v100 = sub_1B1C631A0(v102 > 1, v103 + 1, 1, v100);
                    *v111 = v100;
                  }
                  v100[2] = v103 + 1;
                  v104 = &v100[9 * v103];
                  *((_OWORD *)v104 + 2) = v158;
                  v105 = v159;
                  v106 = v160;
                  v107 = v161;
                  v104[12] = v162;
                  *((_OWORD *)v104 + 4) = v106;
                  *((_OWORD *)v104 + 5) = v107;
                  *((_OWORD *)v104 + 3) = v105;
                  v70 = v124;
                  sub_1B1B68F14((uint64_t)&v164);
                  swift_release();
                }
                else
                {
                  v70 = v124;
                }
              }
            }
          }
        }
      }
      else
      {
        v59 = v117;
        if ((_DWORD)v63 != (_DWORD)v62)
        {
          do
          {
            v73 = (_QWORD *)(v71 + (v63 << 6));
            if (!*(_QWORD *)(v73[1] + 16)
              && !*(_QWORD *)(v73[2] + 16)
              && !*(_QWORD *)(v73[3] + 16)
              && !*(_QWORD *)(v73[4] + 16))
            {
              v74 = v73[5];
              if ((!v74 || !*(_QWORD *)(v74 + 16)) && !*(_QWORD *)(v73[6] + 16))
              {
                v75 = *(_QWORD *)(*(_QWORD *)(v66 + 40) + 16);
                v76 = *(_QWORD *)(v75 + 128);
                if (*(_QWORD *)(v76 + 16))
                {
                  v77 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphEntityComponentPropertyReferences);
                  if ((v78 & 1) != 0
                    && *(ValueMetadata **)(*(_QWORD *)(v75 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v76 + 56) + 8 * v77)
                                         + 32) == &type metadata for GraphEntityComponentPropertyReferences)
                  {
                    v164 = &type metadata for GraphEntityComponentPropertyReferences;
                    v165 = &off_1E63B8ED8;
                    v166 = 1;
                    v79 = *v111;
                    if (*(_QWORD *)(*v111 + 16))
                    {
                      swift_retain();
                      swift_bridgeObjectRetain();
                      sub_1B1F09F2C(v79 + 32, (uint64_t)v163);
                      sub_1B1BE90FC((uint64_t)v163, (uint64_t)&v158);
                      sub_1B1BE90FC((uint64_t)&v164, (uint64_t)&v161);
                      __asm { BR              X9 }
                    }
                    swift_retain();
                    v80 = *(_QWORD *)(v66 + 240) - *(_QWORD *)(v66 + 232);
                    v81 = ecs_stack_allocator_allocate(v125[4], 8 * v80, 8);
                    *v81 = v63;
                    sub_1B1BE90FC((uint64_t)&v164, (uint64_t)&v158);
                    *(_QWORD *)&v161 = v81;
                    *((_QWORD *)&v161 + 1) = v80;
                    v162 = 1;
                    v82 = (_QWORD *)v125[13];
                    v83 = swift_isUniquelyReferenced_nonNull_native();
                    v125[13] = v82;
                    if ((v83 & 1) == 0)
                    {
                      v82 = sub_1B1C631A0(0, v82[2] + 1, 1, v82);
                      *v111 = v82;
                    }
                    v85 = v82[2];
                    v84 = v82[3];
                    if (v85 >= v84 >> 1)
                    {
                      v82 = sub_1B1C631A0(v84 > 1, v85 + 1, 1, v82);
                      *v111 = v82;
                    }
                    v82[2] = v85 + 1;
                    v86 = &v82[9 * v85];
                    *((_OWORD *)v86 + 2) = v158;
                    v87 = v159;
                    v88 = v160;
                    v89 = v161;
                    v86[12] = v162;
                    *((_OWORD *)v86 + 4) = v88;
                    *((_OWORD *)v86 + 5) = v89;
                    *((_OWORD *)v86 + 3) = v87;
                    sub_1B1B68F14((uint64_t)&v164);
                    swift_release();
                  }
                }
              }
            }
            ++v63;
          }
          while (v63 != v62);
        }
      }
      v7 = v120;
      sub_1B1F05D48(v125, (unsigned __int16 **)v140, (uint64_t)v183);
      sub_1B1F03804((char *)v66);
      ecs_stack_allocator_pop_snapshot(v122);
      if ((v59 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v66 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v66 + 376));
      }
      swift_release();
      ++v60;
    }
    while (v60 != v115);
    sub_1B19ED748(v168);
  }
  return sub_1B19ED748(v168);
}

uint64_t sub_1B209D854(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[2];

  v3 = a2;
  v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = (unint64_t)((1 << v5) + 63) >> 6;
  v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_1B209D9B8((_QWORD *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, v3);
    if (v2)
      swift_willThrow();
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    v3 = sub_1B209D9B8((unint64_t *)v9, v6, v4, v3);
    MEMORY[0x1B5E23F88](v9, -1, -1);
  }
  return v3;
}

uint64_t sub_1B209D9B8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v27;
  int64_t v28;

  v27 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v28 = (unint64_t)(v7 + 63) >> 6;
  v25 = a3 + 104;
LABEL_5:
  while (v9)
  {
    v10 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v11 = v10 | (v5 << 6);
LABEL_19:
    v14 = *(_QWORD **)a4;
    v15 = *(_QWORD *)(*(_QWORD *)a4 + 16);
    if (v15)
    {
      v16 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v11);
      v17 = *v16;
      v18 = v16[1];
      v19 = v14[4] == *v16 && v14[5] == v18;
      if (v19 || (sub_1B2229D24() & 1) != 0)
        goto LABEL_4;
      v20 = v15 - 1;
      if (v20)
      {
        v21 = v14 + 7;
        while (1)
        {
          v22 = *(v21 - 1) == v17 && *v21 == v18;
          if (v22 || (sub_1B2229D24() & 1) != 0)
            break;
          v21 += 2;
          if (!--v20)
            goto LABEL_5;
        }
LABEL_4:
        *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
        ++v27;
      }
    }
  }
  v12 = v5 + 1;
  if (v5 + 1 >= v28)
    return sub_1B1C05168(a1, a2, v27, a3);
  v13 = *(_QWORD *)(v6 + 8 * v12);
  if (v13)
    goto LABEL_18;
  v12 = v5 + 2;
  if (v5 + 2 >= v28)
    return sub_1B1C05168(a1, a2, v27, a3);
  v13 = *(_QWORD *)(v6 + 8 * v12);
  if (v13)
    goto LABEL_18;
  v12 = v5 + 3;
  if (v5 + 3 >= v28)
    return sub_1B1C05168(a1, a2, v27, a3);
  v13 = *(_QWORD *)(v6 + 8 * v12);
  if (v13)
    goto LABEL_18;
  v12 = v5 + 4;
  if (v5 + 4 >= v28)
    return sub_1B1C05168(a1, a2, v27, a3);
  v13 = *(_QWORD *)(v6 + 8 * v12);
  if (v13)
  {
LABEL_18:
    v9 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v12 << 6);
    v5 = v12;
    goto LABEL_19;
  }
  while (v28 - 5 != v5)
  {
    v13 = *(_QWORD *)(v25 + 8 * v5++);
    if (v13)
    {
      v12 = v5 + 4;
      goto LABEL_18;
    }
  }
  return sub_1B1C05168(a1, a2, v27, a3);
}

uint64_t sub_1B209DBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37[5];
  uint64_t v38[3];
  __int128 v39;
  uint64_t v40;

  swift_retain();
  v40 = a2;
  v6 = sub_1B1A101F0(a2);
  swift_release();
  v7 = sub_1B1FE162C(v6);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
    return swift_bridgeObjectRelease();
  v9 = a3;
  v10 = 0;
  v33 = v9;
  v34 = (_QWORD *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v35 = v7 + 32;
  while (1)
  {
    v36 = *(_OWORD *)(v35 + 16 * v10);
    v18 = swift_retain();
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      break;
    v19 = *(int *)(*(_QWORD *)(a1 + 168) + 4 * v40);
    v20 = *(_DWORD *)(*(_QWORD *)(v18 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v19 + 8);
    swift_release();
    v11 = 0;
    v21 = (_DWORD)v19 == -1 && v20 == 0;
    if (!v21 && (v19 & 0x80000000) == 0 && v34[1] > v19)
    {
      v22 = *v34 + 12 * (int)v19;
      v23 = v20 == -1 || *(_DWORD *)(v22 + 8) == v20;
      if (v23
        && (v24 = *(_QWORD *)(*(_QWORD *)(v33 + 136) + 8 * *(int *)(*v34 + 12 * (int)v19) + 32),
            v25 = *(_QWORD *)(v24 + 48),
            (v26 = *(_QWORD *)(v25 + 16)) != 0))
      {
        v27 = *(__int16 *)(v22 + 4);
        v28 = v25 + 56;
        while (*(_QWORD *)(v28 - 24) != (_QWORD)v36)
        {
          v28 += 40;
          if (!--v26)
            goto LABEL_3;
        }
        v31 = v28 - 8;
        v30 = *(_QWORD *)(v28 - 8);
        v29 = *(_QWORD *)(v31 + 8);
        if (v30 <= 1)
          v30 = 1;
        v11 = *(_QWORD *)(v24 + 128) + v29 + v30 * v27;
      }
      else
      {
LABEL_3:
        v11 = 0;
      }
    }
    ++v10;
    v39 = v36;
    v12 = sub_1B1A137F4(v38);
    v13 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8);
    sub_1B1F28148(v11, v36, (uint64_t)v12);
    v14 = v39;
    sub_1B19FC264((uint64_t)v38, v39);
    (*(void (**)(_QWORD, _QWORD))(v13 + 112))(v14, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8));
    v15 = v39;
    v16 = sub_1B19FA070(v38, v39);
    v37[3] = v15;
    v37[4] = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8);
    v17 = sub_1B1A137F4(v37);
    (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*(_QWORD *)(v15 - 8) + 16))(v17, v16, v15);
    sub_1B1F28160((uint64_t)v37, v11, v36);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v37);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v38);
    if (v10 == v8)
      return swift_bridgeObjectRelease();
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B209DE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B209DEDC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1B1C19024(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1B209DF18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  char v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  char v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[9];
  if (v8 > 0xF)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = sub_1B1DC8944((char *)(v7 + v6[8]), v8 >> 4);
    v9 = v11;
    if (v10)
    {
      v32 = v11;
      v12 = swift_bridgeObjectRetain();
      sub_1B19F4A48(v12);
      v9 = v32;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v9 = a1;
  }
  v13 = v6[10];
  v14 = v6[11];
  v15 = sub_1B19F3C40(0, *(_QWORD *)(a1 + 16));
  v16 = v15;
  if (v14)
  {
    v17 = (char *)(v7 + v13);
    v18 = *(_QWORD *)(v16 + 16);
    v19 = sub_1B1DC8810(v17, v14);
    v20 = v19;
    if (v18)
    {
      v33 = v19;
      sub_1B19F499C(v16);
      v20 = v33;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v20 = v15;
  }
  v21 = (char *)(v7 + v6[12]);
  v22 = (unint64_t)v6[13] >> 4;
  v23 = (char *)(v7 + v6[14]);
  v24 = v6[15] / 0x18u;
  v25 = *((_DWORD *)v3 + 2);
  v26 = *((_BYTE *)v3 + 12);
  v27 = v3[4];
  v28 = v3[2];
  v29 = *((_BYTE *)v3 + 24);
  v30 = sub_1B1CC8DA4((char *)(v9 + 32), *(_QWORD *)(v9 + 16), (char *)(v20 + 32), *(_QWORD *)(v20 + 16), v21, v22, v23, v24);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v25;
  *(_BYTE *)(a2 + 12) = v26;
  *(_QWORD *)(a2 + 16) = v28;
  *(_BYTE *)(a2 + 24) = v29;
  *(_QWORD *)(a2 + 32) = v27;
  return result;
}

void sub_1B209E094()
{
  qword_1ED4D0980 = (uint64_t)&unk_1E6397170;
}

uint64_t sub_1B209E0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _OWORD v27[2];
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  _QWORD v33[12];
  _QWORD v34[12];
  _QWORD v35[12];
  _QWORD v36[12];
  _QWORD v37[12];
  _QWORD v38[12];
  _OWORD v39[2];
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v57 = qword_1ED4D09F8;
  v58 = v7;
  v59 = v6 >> 31;
  v60 = 1;
  v61 = 2;
  v62 = 0;
  swift_retain();
  sub_1B1E418BC(1, (uint64_t)v27);
  swift_release();
  v51 = qword_1ED4D09F8;
  v52 = v7;
  v53 = v6 >> 31;
  v54 = 1;
  v55 = 2;
  v56 = 0;
  swift_retain();
  sub_1B1E41AB4(1, (uint64_t)v29);
  swift_release();
  v45 = qword_1ED4D09F8;
  v46 = v7;
  v47 = v6 >> 31;
  v48 = 1;
  v49 = 2;
  v50 = 0;
  swift_retain();
  sub_1B1E41CAC(1, (uint64_t)v31);
  swift_release();
  v43[0] = v27[0];
  v43[1] = v27[1];
  v44 = v28;
  sub_1B1E8FCE4(a1, (uint64_t)v43, 0x200000000, v33);
  sub_1B1A18378((uint64_t)v33, (uint64_t)v38, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v38[0])
  {
    v8 = v38[10];
    sub_1B1A086DC(v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    v8 = 0;
  }
  v41[0] = v29[0];
  v41[1] = v29[1];
  v42 = v30;
  sub_1B1E8FCE4(a1, (uint64_t)v41, 0x200000000, v34);
  sub_1B1A18378((uint64_t)v34, (uint64_t)v37, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v37[0])
  {
    v9 = v37[10];
    sub_1B1A086DC(v34, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    v9 = 0;
  }
  v10 = v9 + v8;
  v39[0] = v31[0];
  v39[1] = v31[1];
  v40 = v32;
  sub_1B1E8FCE4(a1, (uint64_t)v39, 0x200000000, v35);
  sub_1B1A18378((uint64_t)v35, (uint64_t)v36, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v36[0])
  {
    v11 = v36[10];
    sub_1B1A086DC(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    if (!(v10 + v11))
    {
LABEL_14:
      sub_1B19ED720((uint64_t)v31);
      sub_1B19ED720((uint64_t)v29);
      return sub_1B19ED720((uint64_t)v27);
    }
  }
  else if (!v10)
  {
    goto LABEL_14;
  }
  v13 = sub_1B201CA28(0);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v15 = (_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v16 = (uint64_t *)(v13 + 40);
    while (1)
    {
      v17 = *((unsigned int *)v16 - 1);
      v18 = *((int *)v16 - 2);
      if ((_DWORD)v18 != -1 || (_DWORD)v17 != 0)
      {
        v20 = 0;
        v21 = 1;
        if ((v18 & 0x80000000) != 0 || v15[1] <= v18)
          goto LABEL_32;
        if ((_DWORD)v17 == -1 || *(_DWORD *)(*v15 + 12 * (int)v18 + 8) == (_DWORD)v17)
          break;
      }
      v20 = 0;
      v21 = 1;
      v24 = *v16;
      if (v6)
      {
LABEL_39:
        if ((v21 & 1) == 0)
          goto LABEL_19;
        goto LABEL_18;
      }
LABEL_33:
      if (v20 == v4)
        v25 = v21;
      else
        v25 = 1;
      if ((v25 & 1) != 0)
        goto LABEL_19;
LABEL_18:
      sub_1B1A01F04((uint64_t)&type metadata for ParticleCollide, (uint64_t)&off_1E63849D0, 3, *((unsigned int *)v16 - 2) | (unint64_t)(v17 << 32), v24);
      swift_release();
LABEL_19:
      v16 += 2;
      if (!--v14)
        goto LABEL_41;
    }
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(*v15 + 12 * (int)v18) + 32);
    v20 = *(_DWORD *)(v23 + 28);
    v21 = *(_BYTE *)(v23 + 32);
LABEL_32:
    v24 = *v16;
    if (v6)
      goto LABEL_39;
    goto LABEL_33;
  }
LABEL_41:
  sub_1B19ED720((uint64_t)v31);
  sub_1B19ED720((uint64_t)v29);
  sub_1B19ED720((uint64_t)v27);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B209E478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  unint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[2];
  uint64_t v93;
  _QWORD v94[12];
  _OWORD v95[2];
  uint64_t v96;
  _QWORD v97[12];
  _OWORD v98[2];
  uint64_t v99;
  _QWORD v100[12];
  _OWORD v101[2];
  uint64_t v102;
  _QWORD v103[8];
  _OWORD v104[2];
  uint64_t v105;
  _QWORD v106[8];
  _OWORD v107[2];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _OWORD v117[2];
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _QWORD v127[11];
  _QWORD v128[12];
  _QWORD v129[12];
  _OWORD v130[2];
  uint64_t v131;
  _OWORD v132[2];
  uint64_t v133;
  _OWORD v134[2];
  uint64_t v135;
  _OWORD v136[2];
  uint64_t v137;
  _OWORD v138[2];
  uint64_t v139;
  _OWORD v140[2];
  uint64_t v141;
  _OWORD v142[2];
  uint64_t v143;
  _BYTE v144[40];
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  _BYTE v151[40];
  uint64_t v152;
  int v153;
  char v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  char v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  char v172;
  uint64_t v173;
  char v174;
  uint64_t v175;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v170 = qword_1ED4D09F8;
  v8 = v6 >> 31;
  v171 = v7;
  v172 = v6 >> 31;
  v173 = 1;
  v174 = 2;
  v175 = 0;
  swift_retain();
  sub_1B1E412D4(1, (uint64_t)v92);
  swift_release();
  v142[0] = v92[0];
  v142[1] = v92[1];
  v143 = v93;
  sub_1B1E8FCE4(a1, (uint64_t)v142, 0x200000000, v94);
  sub_1B1A18378((uint64_t)v94, (uint64_t)v129, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v129[0])
  {
    v9 = v94;
LABEL_8:
    sub_1B1A086DC(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    return (_QWORD *)sub_1B19ED720((uint64_t)v92);
  }
  v164 = qword_1ED4D09F8;
  v165 = v7;
  v166 = v6 >> 31;
  v167 = 1;
  v168 = 2;
  v169 = 0;
  swift_retain();
  sub_1B1E41EA4(3, (uint64_t)v95);
  swift_release();
  v140[0] = v95[0];
  v140[1] = v95[1];
  v141 = v96;
  sub_1B1E8FCE4(a1, (uint64_t)v140, 0x200000000, v97);
  sub_1B1A18378((uint64_t)v97, (uint64_t)v128, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v89 = v128[0];
  v11 = v128[10];
  sub_1B19ED720((uint64_t)v95);
  v158 = qword_1ED4D09F8;
  v81 = v7;
  v159 = v7;
  v80 = v6 >> 31;
  v160 = v6 >> 31;
  v161 = 1;
  v162 = 2;
  v163 = 0;
  swift_retain();
  sub_1B1E4209C(3, (uint64_t)v98);
  swift_release();
  v138[0] = v98[0];
  v138[1] = v98[1];
  v139 = v99;
  v79 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v138, 0x200000000, v100);
  sub_1B1A18378((uint64_t)v100, (uint64_t)v127, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v12 = v127[0];
  if (v127[0])
  {
    v13 = v127[10];
    sub_1B19ED720((uint64_t)v98);
    v15 = v81;
    v16 = v8;
    if (v13 > 0)
    {
LABEL_15:
      v17 = a1;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                      + 8 * *(_QWORD *)thread_worker_index(v14)
                      + 8);
      LOBYTE(v117[0]) = 1;
      sub_1B217D9A8(0x100000000uLL, v18);
      v19 = (_QWORD *)&unk_1ED4D0000;
      goto LABEL_49;
    }
    if (!v89)
      goto LABEL_16;
  }
  else
  {
    sub_1B19ED720((uint64_t)v98);
    v15 = v7;
    v16 = v8;
    if (!v89)
      goto LABEL_16;
  }
  if (v11 >= 1)
    goto LABEL_15;
LABEL_16:
  v152 = qword_1ED4D09F8;
  v153 = v15;
  v154 = v16;
  v155 = 1;
  v156 = 2;
  v157 = 0;
  swift_retain();
  sub_1B1E3AA28(3, (uint64_t)v101);
  swift_release();
  v136[0] = v101[0];
  v136[1] = v101[1];
  v137 = v102;
  v17 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v136, 0x200000000, v103);
  sub_1B1A18378((uint64_t)v103, (uint64_t)v117, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v117[0])
  {
    sub_1B19ED720((uint64_t)v101);
    goto LABEL_48;
  }
  v124 = v117[0];
  v125 = v117[1];
  v87 = v119;
  v126 = v118;
  v20 = v120;
  v21 = v121;
  v22 = v122;
  v23 = v123;
  sub_1B19ED720((uint64_t)v101);
  if (v23 <= 0 || !v20)
  {
    sub_1B1A086DC(v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    goto LABEL_47;
  }
  v85 = v20;
  v77 = v12;
  v24 = v22[4];
  v25 = *(unsigned __int8 *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v130[0] = v124;
  v130[1] = v125;
  v131 = v126;
  sub_1B1A086DC(v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  swift_retain();
  swift_retain();
  swift_retain();
  v26 = 0;
  v82 = v25;
  v84 = v24;
  do
  {
    v27 = (unsigned int *)(v87 + 48 * v26);
    v28 = *v27;
    v90 = v27[1];
    v30 = (uint64_t *)*((_QWORD *)v27 + 2);
    v29 = *((_QWORD *)v27 + 3);
    v31 = *((_QWORD *)v27 + 4);
    v32 = *((_QWORD *)v27 + 5);
    if (v25)
    {
      v33 = *(os_unfair_lock_s **)(v32 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v33);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v24);
    sub_1B1A18378((uint64_t)(v22 + 6), (uint64_t)v151, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v34 = v22[4];
    v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v22[6] = ecs_stack_allocator_allocate(v34, 48 * v35, 8);
    v22[7] = v35;
    v22[9] = 0;
    v22[10] = 0;
    v22[8] = 0;
    swift_release();
    v36 = sub_1B1A12038((uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, v30, v29, v31, (uint64_t)v22);
    if (v30)
    {
      v25 = v82;
      if (!v31)
        goto LABEL_42;
      if (v31 == 1)
      {
        v37 = 0;
LABEL_34:
        v42 = v31 - v37;
        v43 = (_BYTE *)(v36 + 144 * v37 + 44);
        do
        {
          *v43 = 0;
          v43 += 144;
          --v42;
        }
        while (v42);
        goto LABEL_42;
      }
      v37 = v31 & 0xFFFFFFFFFFFFFFFELL;
      v40 = (_BYTE *)(v36 + 188);
      v41 = v31 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v40 - 144) = 0;
        *v40 = 0;
        v40 += 288;
        v41 -= 2;
      }
      while (v41);
      if (v31 != v37)
        goto LABEL_34;
    }
    else
    {
      v25 = v82;
      if ((_DWORD)v28 == (_DWORD)v90)
        goto LABEL_42;
      v38 = v90 - v28;
      if ((unint64_t)(v90 - v28) < 2)
      {
        v39 = v28;
LABEL_40:
        v46 = v90 - v39;
        v47 = (_BYTE *)(v36 + 144 * v39 + 44);
        do
        {
          *v47 = 0;
          v47 += 144;
          --v46;
        }
        while (v46);
        goto LABEL_42;
      }
      v39 = (v38 & 0xFFFFFFFFFFFFFFFELL) + v28;
      v44 = (_BYTE *)(v36 + 144 * v28 + 188);
      v45 = v38 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v44 - 144) = 0;
        *v44 = 0;
        v44 += 288;
        v45 -= 2;
      }
      while (v45);
      if (v38 != (v38 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_40;
    }
LABEL_42:
    sub_1B1F05D48(v22, (unsigned __int16 **)v130, (uint64_t)v151);
    sub_1B1F03804((char *)v32);
    v24 = v84;
    ecs_stack_allocator_pop_snapshot(v84);
    if ((v25 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 376));
    }
    swift_release();
    ++v26;
  }
  while (v26 != v85);
  sub_1B1A086DC(v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B1A086DC(v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B1A086DC(v103, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v12 = v77;
LABEL_47:
  v17 = v79;
LABEL_48:
  v19 = &unk_1ED4D0000;
  v15 = v81;
  v16 = v80;
LABEL_49:
  v145 = v19[319];
  v146 = v15;
  v147 = v16;
  v148 = 1;
  v149 = 2;
  v150 = 0;
  swift_retain();
  sub_1B1E3AA28(3, (uint64_t)v104);
  swift_release();
  v134[0] = v104[0];
  v134[1] = v104[1];
  v135 = v105;
  sub_1B1E8FCE4(v17, (uint64_t)v134, 0x200000000, v106);
  sub_1B1A18378((uint64_t)v106, (uint64_t)v107, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v107[0])
  {
    sub_1B19ED720((uint64_t)v104);
    sub_1B19ED798(v12);
    v9 = v97;
    goto LABEL_8;
  }
  v114 = v107[0];
  v115 = v107[1];
  v86 = v109;
  v116 = v108;
  v48 = v110;
  v49 = v111;
  v50 = v112;
  v51 = v113;
  sub_1B19ED720((uint64_t)v104);
  if (v51 <= 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    v76 = v12;
  }
  else
  {
    v78 = v12;
    if (v48)
    {
      v91 = v50[4];
      v52 = *(_BYTE *)(v49 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v132[0] = v114;
      v132[1] = v115;
      v133 = v116;
      swift_retain();
      swift_retain();
      swift_retain();
      v53 = 0;
      v83 = v52;
      while (1)
      {
        v54 = (unsigned int *)(v86 + 48 * v53);
        v55 = *v54;
        v88 = v54[1];
        v57 = (uint64_t *)*((_QWORD *)v54 + 2);
        v56 = *((_QWORD *)v54 + 3);
        v58 = *((_QWORD *)v54 + 4);
        v59 = *((_QWORD *)v54 + 5);
        if ((v52 & 1) != 0)
        {
          v60 = *(os_unfair_lock_s **)(v59 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v60);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v59 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v91);
        sub_1B1A18378((uint64_t)(v50 + 6), (uint64_t)v144, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v61 = v50[4];
        v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v59 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v50[6] = ecs_stack_allocator_allocate(v61, 48 * v62, 8);
        v50[7] = v62;
        v50[9] = 0;
        v50[10] = 0;
        v50[8] = 0;
        swift_release();
        v63 = sub_1B1A12038((uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, v57, v56, v58, (uint64_t)v50);
        if (v57)
        {
          v64 = v48;
          v52 = v83;
          if (!v58)
            goto LABEL_75;
          if (v58 == 1)
          {
            v65 = 0;
LABEL_67:
            v70 = v58 - v65;
            v71 = (_BYTE *)(v63 + 144 * v65 + 44);
            do
            {
              *v71 = 0;
              v71 += 144;
              --v70;
            }
            while (v70);
            goto LABEL_75;
          }
          v65 = v58 & 0xFFFFFFFFFFFFFFFELL;
          v68 = (_BYTE *)(v63 + 188);
          v69 = v58 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            *(v68 - 144) = 0;
            *v68 = 0;
            v68 += 288;
            v69 -= 2;
          }
          while (v69);
          if (v58 != v65)
            goto LABEL_67;
        }
        else
        {
          v64 = v48;
          v52 = v83;
          if ((_DWORD)v55 == (_DWORD)v88)
            goto LABEL_75;
          v66 = v88 - v55;
          if ((unint64_t)(v88 - v55) < 2)
          {
            v67 = v55;
LABEL_73:
            v74 = v88 - v67;
            v75 = (_BYTE *)(v63 + 144 * v67 + 44);
            do
            {
              *v75 = 0;
              v75 += 144;
              --v74;
            }
            while (v74);
            goto LABEL_75;
          }
          v67 = (v66 & 0xFFFFFFFFFFFFFFFELL) + v55;
          v72 = (_BYTE *)(v63 + 144 * v55 + 188);
          v73 = v66 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            *(v72 - 144) = 0;
            *v72 = 0;
            v72 += 288;
            v73 -= 2;
          }
          while (v73);
          if (v66 != (v66 & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_73;
        }
LABEL_75:
        sub_1B1F05D48(v50, (unsigned __int16 **)v132, (uint64_t)v144);
        sub_1B1F03804((char *)v59);
        ecs_stack_allocator_pop_snapshot(v91);
        if ((v52 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v59 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v59 + 376));
        }
        swift_release();
        if (++v53 == v64)
          goto LABEL_80;
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_80:
    v76 = v78;
  }
  sub_1B19ED798(v76);
  sub_1B1A086DC(v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B19ED720((uint64_t)v92);
  sub_1B1A086DC(v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v106, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t sub_1B209F078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  id v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  ValueMetadata *v45;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  ValueMetadata *v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t Strong;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  id v89;
  _QWORD *v90;
  uint64_t v91;
  char v92;
  void *v93;
  id v94;
  uint64_t v95;
  _QWORD *v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  char v102;
  void *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  void *v109;
  const void *v110;
  char *v111;
  uint64_t (*v112)(uint64_t);
  char *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  int v122;
  int v123;
  uint64_t v124;
  unint64_t v126;
  uint64_t v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  void *v151;
  id v152;
  void *v153;
  uint64_t v154;
  void *v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  void *v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  id v168;
  _QWORD *v169;
  char v170;
  void *v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  char *v177;
  uint64_t (*v178)(uint64_t);
  char *v179;
  uint64_t v180;
  const void *v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t result;
  _QWORD v187[2];
  void *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  id v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  id v206;
  _QWORD *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  _QWORD *aBlock;
  uint64_t v217;
  void *v218;
  void *v219;
  uint64_t (*v220)();
  _QWORD *v221;
  uint64_t v222;
  char v223;
  uint64_t v224;
  char v225;

  v195 = sub_1B222847C();
  v194 = *(_QWORD *)(v195 - 8);
  MEMORY[0x1E0C80A78](v195, v7);
  v193 = (char *)v187 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_1B22284AC();
  v191 = *(_QWORD *)(v192 - 8);
  MEMORY[0x1E0C80A78](v192, v9);
  v190 = (char *)v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1B201CA28(0);
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
    return swift_bridgeObjectRelease();
  v13 = 0;
  v214 = 0;
  v203 = (_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v205 = a1;
  v207 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v187[1] = v11;
  v14 = v11 + 32;
  v209 = &v223;
  v202 = a4;
  v201 = a2;
  v200 = v12;
  v199 = v11 + 32;
  while (1)
  {
    v15 = (int *)(v14 + 16 * v13);
    v16 = v15[1];
    v17 = *v15;
    if ((_DWORD)v17 == -1 && (_DWORD)v16 == 0)
      break;
    v19 = 0;
    v20 = 1;
    if ((v17 & 0x80000000) == 0 && v203[1] > v17)
    {
      if ((_DWORD)v16 != -1 && *(_DWORD *)(*v203 + 12 * (int)v17 + 8) != (_DWORD)v16)
        break;
      v22 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(*v203 + 12 * (int)v17) + 32);
      v19 = *(_DWORD *)(v22 + 28);
      v20 = *(_BYTE *)(v22 + 32);
    }
    v23 = *((_QWORD *)v15 + 1);
    if ((a4 & 0x100000000) == 0)
      goto LABEL_19;
LABEL_25:
    if ((v20 & 1) != 0)
      goto LABEL_26;
LABEL_5:
    if (++v13 == v12)
      return swift_bridgeObjectRelease();
  }
  v19 = 0;
  v20 = 1;
  v23 = *((_QWORD *)v15 + 1);
  if ((a4 & 0x100000000) != 0)
    goto LABEL_25;
LABEL_19:
  if (v19 == (_DWORD)a4)
    v24 = v20;
  else
    v24 = 1;
  if ((v24 & 1) != 0)
    goto LABEL_5;
LABEL_26:
  v204 = v13;
  v25 = 0;
  v215 = v17 | (unint64_t)(v16 << 32);
  v212 = (char *)MEMORY[0x1E0DEE9D8];
  v208 = v23;
  while (2)
  {
    v211 = v25;
    v30 = *((unsigned __int8 *)&unk_1E63B4B98 + v25 + 32);
    v31 = (_QWORD *)sub_1B201BF04(*((_BYTE *)&unk_1E63B4B98 + v25 + 32), v215, v23);
    v32 = v31[2];
    LODWORD(v210) = v30;
    v213 = (char *)v31;
    if (v32)
    {
      v33 = v31 + 5;
      v34 = v32;
      v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v36 = *((_DWORD *)v33 - 2);
        v37 = *((_DWORD *)v33 - 1);
        v38 = *v33;
        swift_retain();
        v39 = v36 == -1 && v37 == 0;
        if (!v39
          && (v36 & 0x80000000) == 0
          && *(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v36
          && ((v40 = *(_QWORD *)(v38 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v37 == -1)
           || *(_DWORD *)(v40 + 12 * v36 + 8) == v37)
          && (v41 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 80) + 8 * *(__int16 *)(v40 + 12 * v36 + 6) + 32) + 16),
              v42 = *(_QWORD *)(v41 + 128),
              *(_QWORD *)(v42 + 16))
          && (v43 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig), (v44 & 1) != 0))
        {
          v45 = *(ValueMetadata **)(*(_QWORD *)(v41 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v43) + 32);
          swift_release();
          if (v45 == &type metadata for GraphScriptingConfig)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            aBlock = v35;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1B202AD48(0, v35[2] + 1, 1);
              v35 = aBlock;
            }
            v48 = v35[2];
            v47 = v35[3];
            if (v48 >= v47 >> 1)
            {
              sub_1B202AD48(v47 > 1, v48 + 1, 1);
              v35 = aBlock;
            }
            v35[2] = v48 + 1;
            v49 = &v35[2 * v48];
            *((_DWORD *)v49 + 8) = v36;
            *((_DWORD *)v49 + 9) = v37;
            v49[5] = v38;
          }
        }
        else
        {
          swift_release();
        }
        v33 += 2;
        --v34;
      }
      while (v34);
    }
    else
    {
      v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v50 = v212;
    v51 = *((_QWORD *)v212 + 2);
    v52 = v51 + v35[2];
    v53 = swift_isUniquelyReferenced_nonNull_native();
    if (v53 && v52 <= *((_QWORD *)v50 + 3) >> 1)
    {
      v54 = v35[2];
      if (!v54)
        goto LABEL_65;
LABEL_59:
      v56 = &v50[16 * *((_QWORD *)v50 + 2) + 32];
      if (v35 + 4 < (_QWORD *)&v56[16 * v54] && v56 < (char *)&v35[2 * v54 + 4])
        goto LABEL_178;
      memcpy(v56, v35 + 4, 16 * v54);
      *((_QWORD *)v50 + 2) += v54;
    }
    else
    {
      if (v51 <= v52)
        v55 = v52;
      else
        v55 = v51;
      v50 = sub_1B1C6443C(v53, v55, 1, v50);
      v54 = v35[2];
      if (v54)
        goto LABEL_59;
    }
LABEL_65:
    swift_release();
    v212 = v50;
    if (v32)
    {
      v58 = v213 + 40;
      v59 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v61 = *((_DWORD *)v58 - 2);
        v60 = *((_DWORD *)v58 - 1);
        v62 = *v58;
        swift_retain();
        if (v61 == -1 && v60 == 0)
          break;
        if (v61 < 0)
          break;
        if (*(_QWORD *)(v62 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v61)
          break;
        v64 = *(_QWORD *)(v62 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        if (v60 != -1 && *(_DWORD *)(v64 + 12 * v61 + 8) != v60)
          break;
        v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 80) + 8 * *(__int16 *)(v64 + 12 * v61 + 6) + 32) + 16);
        v66 = *(_QWORD *)(v65 + 128);
        if (!*(_QWORD *)(v66 + 16))
          break;
        v67 = sub_1B1DC3AC8((uint64_t)&type metadata for GraphScriptingConfig);
        if ((v68 & 1) == 0)
          break;
        v69 = *(ValueMetadata **)(*(_QWORD *)(v65 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v66 + 56) + 8 * v67) + 32);
        swift_release();
        if (v69 != &type metadata for GraphScriptingConfig)
          goto LABEL_80;
LABEL_85:
        v58 += 2;
        if (!--v32)
          goto LABEL_86;
      }
      swift_release();
LABEL_80:
      v70 = swift_isUniquelyReferenced_nonNull_native();
      aBlock = v59;
      if ((v70 & 1) == 0)
      {
        sub_1B202AD48(0, v59[2] + 1, 1);
        v59 = aBlock;
      }
      v72 = v59[2];
      v71 = v59[3];
      if (v72 >= v71 >> 1)
      {
        sub_1B202AD48(v71 > 1, v72 + 1, 1);
        v59 = aBlock;
      }
      v59[2] = v72 + 1;
      v73 = &v59[2 * v72];
      *((_DWORD *)v73 + 8) = v61;
      *((_DWORD *)v73 + 9) = v60;
      v73[5] = v62;
      goto LABEL_85;
    }
LABEL_86:
    swift_bridgeObjectRelease();
    v74 = OBJC_IVAR____TtC3VFX13EntityManager_replicationStream;
    v23 = v208;
    v75 = *(_QWORD *)(v208 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    swift_retain();
    if (v75)
    {
      v76 = *(_BYTE *)(v75 + 80);
      MEMORY[0x1B5E240CC](v75 + 48);
      v75 = *(_QWORD *)(v75 + 56);
    }
    else
    {
      v76 = 0;
    }
    v77 = v211;
    v224 = 0;
    swift_unknownObjectUnownedInit();
    v222 = v23;
    v224 = v75;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    v225 = v76;
    sub_1B1A02530((uint64_t)&v222, (uint64_t)&aBlock);
    v78 = v214;
    sub_1B201C61C((uint64_t)&aBlock, v210);
    sub_1B1A0256C((uint64_t)&aBlock);
    v214 = v78;
    if (!v78)
    {
      v25 = v77 + 1;
      v79 = *(_QWORD **)(v23 + v74);
      if (!v79 || !*(_QWORD *)(v79[2] + 16) || (Strong = swift_weakLoadStrong()) == 0)
      {
        swift_release();
        goto LABEL_99;
      }
      v81 = Strong;
      v82 = (char *)v79[3];
      if (v82)
      {
        v83 = v79[4];
        v84 = MEMORY[0x1B5E240CC](v79 + 8);
        v85 = v79[9];
        v86 = v79[2];
        v79[2] = MEMORY[0x1E0DEE9D8];
        v87 = (_QWORD *)swift_allocObject();
        v87[2] = v81;
        v87[3] = v86;
        v87[4] = v82;
        v87[5] = v83;
        v87[6] = v84;
        v87[7] = v85;
        v88 = (void *)v79[11];
        v89 = v88;
        if (v88)
        {
          v26 = v89;
          v213 = (char *)objc_opt_self();
          v27 = swift_allocObject();
          *(_QWORD *)(v27 + 16) = sub_1B20BFB54;
          *(_QWORD *)(v27 + 24) = v87;
          v220 = sub_1B1DB39F8;
          v221 = (_QWORD *)v27;
          aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
          v217 = 1107296256;
          v218 = sub_1B1D199FC;
          v219 = &unk_1E63D2B90;
          v28 = _Block_copy(&aBlock);
          swift_unknownObjectRetain_n();
          swift_retain();
          swift_retain();
          swift_unknownObjectRetain();
          v29 = v26;
          swift_retain();
          swift_release();
          objc_msgSend(v213, sel_postCommandWithContext_object_applyBlock_, v29, 0, v28);
          swift_release();
          swift_release();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          _Block_release(v28);
          swift_release();
          v23 = v208;
          swift_release();

        }
        else
        {
          v213 = v82;
          v210 = v84;
          v90 = (_QWORD *)swift_allocObject();
          v90[2] = sub_1B20BFB54;
          v90[3] = v87;
          v91 = *(_QWORD *)(v81 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
          if (!v91)
          {
            v92 = *(_BYTE *)(v81 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated);
            v93 = *(void **)(v81 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated + 8);
            swift_unknownObjectRetain_n();
            swift_retain();
            swift_retain();
            swift_unknownObjectRetain();
            swift_retain();
            v94 = v93;
            objc_msgSend(v94, sel_lock);
            objc_msgSend(v94, sel_unlock);

            if ((v92 & 1) != 0)
            {
              swift_release();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
            }
            else
            {
              v103 = *(void **)(v81 + OBJC_IVAR____TtC3VFX13EntityManager_asyncQueue);
              v104 = (_QWORD *)swift_allocObject();
              v104[2] = v81;
              v104[3] = sub_1B1DB39F8;
              v104[4] = v90;
              v105 = qword_1ED4BF430;
              swift_retain();
              swift_retain();
              v198 = v103;
              if (v105 != -1)
                swift_once();
              v206 = v90;
              v211 = v25;
              v106 = qword_1ED4BF658;
              swift_retain();
              if (v106 != -1)
                swift_once();
              v107 = qword_1ED4D0FD0;
              swift_retain();
              swift_release();
              v108 = (_QWORD *)swift_allocObject();
              v196 = (_QWORD *)v107;
              v108[2] = v107;
              v108[3] = sub_1B20BFC38;
              v108[4] = v104;
              v220 = sub_1B20BFC3C;
              v221 = v108;
              aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
              v217 = 1107296256;
              v218 = sub_1B17915D0;
              v219 = &unk_1E63F9468;
              v109 = _Block_copy(&aBlock);
              v197 = v104;
              v110 = v109;
              swift_retain();
              swift_retain();
              v111 = v190;
              sub_1B2228494();
              v222 = MEMORY[0x1E0DEE9D8];
              v112 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
              sub_1B19E52CC((unint64_t *)&qword_1ED4B7290, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BA480, v112, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
              sub_1B20BFB60((unint64_t *)&qword_1ED4B72B0, (uint64_t)&qword_1ED4BA480, (uint64_t)v112, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B1791524);
              v113 = v193;
              v114 = v195;
              sub_1B2229364();
              v115 = v198;
              MEMORY[0x1B5E20AFC](0, v111, v113, v110);
              _Block_release(v110);
              swift_release();
              (*(void (**)(char *, uint64_t))(v194 + 8))(v113, v114);
              (*(void (**)(char *, uint64_t))(v191 + 8))(v111, v192);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_release();

              swift_release();
              swift_release();
              v25 = v211;
            }
            goto LABEL_115;
          }
          swift_unknownObjectRetain_n();
          swift_retain();
          swift_retain();
          swift_unknownObjectRetain();
          swift_retain();
          swift_retain();
          os_unfair_recursive_lock_lock_with_options();
          if (*(_BYTE *)(v91 + 120) == 1)
          {
            os_unfair_recursive_lock_unlock();
            swift_release();
            swift_unknownObjectRelease();
            goto LABEL_109;
          }
          v95 = swift_allocObject();
          *(_QWORD *)(v95 + 16) = sub_1B1DB39F8;
          *(_QWORD *)(v95 + 24) = v90;
          v96 = *(_QWORD **)(v91 + 72);
          swift_retain();
          v97 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v91 + 72) = v96;
          if ((v97 & 1) == 0)
          {
            v96 = sub_1B1C62B5C(0, v96[2] + 1, 1, v96);
            *(_QWORD *)(v91 + 72) = v96;
          }
          v99 = v96[2];
          v98 = v96[3];
          v100 = v99 + 1;
          if (v99 >= v98 >> 1)
          {
            v211 = v99 + 1;
            v118 = sub_1B1C62B5C(v98 > 1, v99 + 1, 1, v96);
            v100 = v211;
            v96 = v118;
          }
          v96[2] = v100;
          v101 = &v96[2 * v99];
          v101[4] = sub_1B1DB39F8;
          v101[5] = v95;
          *(_QWORD *)(v91 + 72) = v96;
          os_unfair_recursive_lock_unlock();
          os_unfair_recursive_lock_lock_with_options();
          v102 = *(_BYTE *)(v91 + 152);
          os_unfair_recursive_lock_unlock();
          if ((v102 & 1) != 0)
          {
            swift_release();
            swift_unknownObjectRelease();
LABEL_109:
            swift_unknownObjectRelease();
            swift_release();
LABEL_115:
            swift_release();
            swift_release();
            v23 = v208;
            swift_release();
            swift_release();
          }
          else
          {
            v116 = *(_QWORD *)(v91 + 16);
            objc_msgSend(*(id *)(v116 + 16), sel_lock);
            *(_BYTE *)(v116 + 24) = 1;
            objc_msgSend(*(id *)(v116 + 16), sel_signal);
            objc_msgSend(*(id *)(v116 + 16), sel_unlock);
            swift_release();
            v117 = v208;
            swift_release();
            swift_release();
            swift_release();
            v23 = v117;
            swift_release();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_release();
          }
LABEL_99:
          swift_release();
        }
        if (v25 == 4)
        {
          v119 = *((_QWORD *)v212 + 2);
          if (v119)
          {
            v213 = v212 + 32;
            swift_bridgeObjectRetain();
            v120 = 0;
            v210 = v119;
            while (1)
            {
              v121 = &v213[16 * v120];
              v122 = *(_DWORD *)v121;
              v123 = *((_DWORD *)v121 + 1);
              v124 = *((_QWORD *)v121 + 1);
              if (*(_DWORD *)v121 == -1 && v123 == 0)
                break;
              LOBYTE(v126) = 1;
              if ((v122 & 0x80000000) == 0 && v207[1] > v122)
              {
                v127 = *v207 + 12 * v122;
                if (v123 != -1 && *(_DWORD *)(v127 + 8) != v123)
                  break;
                v129 = *(_QWORD *)(*(_QWORD *)(v205 + 136) + 8 * *(int *)(*v207 + 12 * v122) + 32);
                v130 = *(_QWORD *)(v129 + 48);
                v131 = *(_QWORD *)(v130 + 16);
                if (!v131)
                  break;
                v132 = *(__int16 *)(v127 + 4);
                v133 = (_QWORD *)(v130 + 56);
                while ((ValueMetadata *)*(v133 - 3) != &type metadata for GraphScriptingConfig)
                {
                  v133 += 5;
                  if (!--v131)
                    goto LABEL_136;
                }
                v126 = 0x4030302020101uLL >> (8 * *(_BYTE *)(*(_QWORD *)(v129 + 128) + *v133 + 32 * v132));
              }
LABEL_137:
              v134 = sub_1B201BF04(v126, v215, v23);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v134 = (uint64_t)sub_1B1C6443C(0, *(_QWORD *)(v134 + 16) + 1, 1, (char *)v134);
              v136 = *(_QWORD *)(v134 + 16);
              v135 = *(_QWORD *)(v134 + 24);
              if (v136 >= v135 >> 1)
                v134 = (uint64_t)sub_1B1C6443C(v135 > 1, v136 + 1, 1, (char *)v134);
              *(_QWORD *)(v134 + 16) = v136 + 1;
              v137 = v134 + 16 * v136;
              *(_DWORD *)(v137 + 32) = v122;
              *(_DWORD *)(v137 + 36) = v123;
              *(_QWORD *)(v137 + 40) = v124;
              v138 = OBJC_IVAR____TtC3VFX13EntityManager_replicationStream;
              v139 = *(_QWORD *)(v23 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
              swift_retain();
              if (v139)
              {
                v140 = *(_BYTE *)(v139 + 80);
                MEMORY[0x1B5E240CC](v139 + 48);
                v139 = *(_QWORD *)(v139 + 56);
              }
              else
              {
                v140 = 0;
              }
              v224 = 0;
              swift_unknownObjectUnownedInit();
              v222 = v23;
              v224 = v139;
              swift_unknownObjectUnownedAssign();
              swift_unownedRetain();
              swift_unknownObjectRelease();
              v225 = v140;
              sub_1B1A02530((uint64_t)&v222, (uint64_t)&aBlock);
              v141 = v214;
              sub_1B201C61C((uint64_t)&aBlock, v126);
              sub_1B1A0256C((uint64_t)&aBlock);
              if (v141)
                goto LABEL_177;
              ++v120;
              v142 = *(_QWORD **)(v23 + v138);
              v214 = 0;
              if (!v142 || !*(_QWORD *)(v142[2] + 16) || (v143 = swift_weakLoadStrong()) == 0)
              {
                swift_bridgeObjectRelease();
                goto LABEL_120;
              }
              v144 = v143;
              v145 = v142[3];
              if (!v145)
              {
                swift_bridgeObjectRelease();
                swift_release();
                goto LABEL_120;
              }
              v146 = v142[4];
              v147 = (void *)MEMORY[0x1B5E240CC](v142 + 8);
              v148 = v142[9];
              v211 = v145;
              v149 = v142[2];
              v142[2] = MEMORY[0x1E0DEE9D8];
              v150 = (_QWORD *)swift_allocObject();
              v150[2] = v144;
              v150[3] = v149;
              v150[4] = v211;
              v150[5] = v146;
              v150[6] = v147;
              v150[7] = v148;
              v151 = (void *)v142[11];
              v152 = v151;
              if (v151)
              {
                v153 = v152;
                v206 = (id)objc_opt_self();
                v154 = swift_allocObject();
                *(_QWORD *)(v154 + 16) = sub_1B20BFB54;
                *(_QWORD *)(v154 + 24) = v150;
                v220 = sub_1B1CB734C;
                v221 = (_QWORD *)v154;
                aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
                v217 = 1107296256;
                v218 = sub_1B1D199FC;
                v219 = &unk_1E63F93A0;
                v155 = _Block_copy(&aBlock);
                swift_unknownObjectRetain_n();
                swift_retain();
                swift_retain();
                swift_unknownObjectRetain();
                v156 = v153;
                swift_retain();
                swift_release();
                objc_msgSend(v206, sel_postCommandWithContext_object_applyBlock_, v156, 0, v155);
                swift_release();
                swift_release();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_release();
                _Block_release(v155);
                swift_bridgeObjectRelease();
                v23 = v208;
                swift_release();

LABEL_151:
                v119 = v210;
                if (v120 == v210)
                {
LABEL_3:
                  swift_bridgeObjectRelease_n();
                  goto LABEL_4;
                }
              }
              else
              {
                v206 = v147;
                v157 = swift_allocObject();
                *(_QWORD *)(v157 + 16) = sub_1B20BFB54;
                *(_QWORD *)(v157 + 24) = v150;
                v158 = *(_QWORD *)(v144 + OBJC_IVAR____TtC3VFX13EntityManager_runtimeThread);
                if (v158)
                {
                  swift_unknownObjectRetain_n();
                  swift_retain();
                  swift_retain();
                  swift_unknownObjectRetain();
                  swift_retain();
                  swift_retain();
                  os_unfair_recursive_lock_lock_with_options();
                  if (*(_BYTE *)(v158 + 120) == 1)
                  {
                    os_unfair_recursive_lock_unlock();
                    swift_release();
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    v162 = swift_allocObject();
                    *(_QWORD *)(v162 + 16) = sub_1B1CB734C;
                    *(_QWORD *)(v162 + 24) = v157;
                    v163 = v162;
                    v164 = *(_QWORD **)(v158 + 72);
                    swift_retain();
                    v165 = swift_isUniquelyReferenced_nonNull_native();
                    *(_QWORD *)(v158 + 72) = v164;
                    if ((v165 & 1) == 0)
                    {
                      v164 = sub_1B1C62B5C(0, v164[2] + 1, 1, v164);
                      *(_QWORD *)(v158 + 72) = v164;
                    }
                    v167 = v164[2];
                    v166 = v164[3];
                    v168 = (id)(v167 + 1);
                    if (v167 >= v166 >> 1)
                    {
                      v198 = (id)(v167 + 1);
                      v185 = sub_1B1C62B5C(v166 > 1, v167 + 1, 1, v164);
                      v168 = v198;
                      v164 = v185;
                    }
                    v164[2] = v168;
                    v169 = &v164[2 * v167];
                    v169[4] = sub_1B1CB734C;
                    v169[5] = v163;
                    *(_QWORD *)(v158 + 72) = v164;
                    os_unfair_recursive_lock_unlock();
                    os_unfair_recursive_lock_lock_with_options();
                    v170 = *(_BYTE *)(v158 + 152);
                    os_unfair_recursive_lock_unlock();
                    if ((v170 & 1) == 0)
                    {
                      v183 = *(_QWORD *)(v158 + 16);
                      objc_msgSend(*(id *)(v183 + 16), sel_lock);
                      *(_BYTE *)(v183 + 24) = 1;
                      objc_msgSend(*(id *)(v183 + 16), sel_signal);
                      objc_msgSend(*(id *)(v183 + 16), sel_unlock);
                      swift_bridgeObjectRelease();
                      v184 = v208;
                      swift_release();
                      swift_release();
                      swift_release();
                      v23 = v184;
                      swift_release();
                      swift_unknownObjectRelease();
                      swift_unknownObjectRelease();
                      swift_release();
                      swift_release();
                      goto LABEL_151;
                    }
                    swift_release();
                    swift_unknownObjectRelease();
                  }
                  swift_unknownObjectRelease();
                  swift_release();
                  v119 = v210;
                }
                else
                {
                  v159 = *(_BYTE *)(v144 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated);
                  v160 = *(void **)(v144 + OBJC_IVAR____TtC3VFX13EntityManager__invalidated + 8);
                  swift_unknownObjectRetain_n();
                  swift_retain();
                  swift_retain();
                  swift_unknownObjectRetain();
                  swift_retain();
                  v161 = v160;
                  objc_msgSend(v161, sel_lock);
                  objc_msgSend(v161, sel_unlock);

                  v119 = v210;
                  if ((v159 & 1) != 0)
                  {
                    swift_release();
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    v171 = *(void **)(v144 + OBJC_IVAR____TtC3VFX13EntityManager_asyncQueue);
                    v172 = (_QWORD *)swift_allocObject();
                    v172[2] = v144;
                    v172[3] = sub_1B1CB734C;
                    v172[4] = v157;
                    v173 = qword_1ED4BF430;
                    swift_retain();
                    swift_retain();
                    v197 = v171;
                    if (v173 != -1)
                      swift_once();
                    v198 = (id)v157;
                    v174 = qword_1ED4BF658;
                    swift_retain();
                    if (v174 != -1)
                      swift_once();
                    v175 = qword_1ED4D0FD0;
                    swift_retain();
                    swift_release();
                    v176 = (_QWORD *)swift_allocObject();
                    v189 = v175;
                    v176[2] = v175;
                    v176[3] = sub_1B1D1EA88;
                    v176[4] = v172;
                    v220 = sub_1B1D1EA98;
                    v221 = v176;
                    aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
                    v217 = 1107296256;
                    v218 = sub_1B17915D0;
                    v219 = &unk_1E63F9328;
                    v188 = _Block_copy(&aBlock);
                    swift_retain();
                    swift_retain();
                    v196 = v172;
                    v177 = v190;
                    sub_1B2228494();
                    v222 = MEMORY[0x1E0DEE9D8];
                    v178 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
                    sub_1B19E52CC((unint64_t *)&qword_1ED4B7290, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
                    sub_1B1791524(0, (unint64_t *)&qword_1ED4BA480, v178, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
                    sub_1B20BFB60((unint64_t *)&qword_1ED4B72B0, (uint64_t)&qword_1ED4BA480, (uint64_t)v178, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B1791524);
                    v179 = v193;
                    v180 = v195;
                    sub_1B2229364();
                    v181 = v188;
                    v182 = v197;
                    MEMORY[0x1B5E20AFC](0, v177, v179, v188);
                    _Block_release(v181);
                    swift_release();
                    (*(void (**)(char *, uint64_t))(v194 + 8))(v179, v180);
                    (*(void (**)(char *, uint64_t))(v191 + 8))(v177, v192);
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    swift_release();

                    swift_release();
                    swift_release();
                    v119 = v210;
                  }
                }
                swift_release();
                swift_bridgeObjectRelease();
                v23 = v208;
                swift_release();
                swift_release();
LABEL_120:
                swift_release();
                if (v120 == v119)
                  goto LABEL_3;
              }
            }
LABEL_136:
            LOBYTE(v126) = 1;
            goto LABEL_137;
          }
          swift_bridgeObjectRelease();
LABEL_4:
          a4 = v202;
          a2 = v201;
          v12 = v200;
          v13 = v204;
          v14 = v199;
          goto LABEL_5;
        }
        continue;
      }
      swift_release();
      swift_release();
      goto LABEL_99;
    }
    break;
  }
LABEL_177:
  sub_1B1E31340(1);
  __break(1u);
LABEL_178:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B20A0934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t result;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[64];
  _QWORD v72[2];
  ValueMetadata *v73;
  _UNKNOWN **v74;
  char v75;
  _QWORD v76[3];
  char v77;
  _OWORD v78[2];
  uint64_t v79;
  _QWORD v80[8];
  _OWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _OWORD v91[2];
  uint64_t v92;
  _OWORD v93[2];
  uint64_t v94;
  _BYTE v95[40];
  uint64_t v96;
  int v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v96 = qword_1ED4D09F8;
  v97 = v7;
  v98 = v6 >> 31;
  v99 = 1;
  v100 = 2;
  v101 = 0;
  swift_retain();
  sub_1B1E3B5F8(1, (uint64_t)v78);
  swift_release();
  v93[0] = v78[0];
  v93[1] = v78[1];
  v94 = v79;
  v64 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v93, 0x200000000, v80);
  sub_1B1A18378((uint64_t)v80, (uint64_t)v81, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v81[0])
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v36 = a1;
    v37 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v37)
    {
LABEL_63:
      sub_1B19ED720((uint64_t)v78);
      return swift_bridgeObjectRelease();
    }
LABEL_38:
    swift_bridgeObjectRetain();
    v38 = (unsigned int *)(v11 + 44);
    do
    {
      v40 = *(v38 - 3);
      v41 = *(v38 - 2);
      v42 = *(v38 - 1);
      v43 = *v38;
      if ((_DWORD)v40 == -1 && (_DWORD)v41 == 0)
      {
        v39 = 0xFFFFFFFFLL;
      }
      else
      {
        v45 = *(_QWORD *)(v36 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        swift_retain();
        if (v45)
        {
          v46 = *(_BYTE *)(v45 + 80);
          MEMORY[0x1B5E240CC](v45 + 48);
          v45 = *(_QWORD *)(v45 + 56);
        }
        else
        {
          v46 = 0;
        }
        v73 = 0;
        swift_unknownObjectUnownedInit();
        v72[0] = v64;
        v73 = (ValueMetadata *)v45;
        v36 = v64;
        swift_unknownObjectUnownedAssign();
        swift_unownedRetain();
        swift_unknownObjectRelease();
        LOBYTE(v74) = v46;
        sub_1B1A02530((uint64_t)v72, (uint64_t)v76);
        v47 = v76[0];
        swift_unownedRetainStrong();
        swift_release();
        swift_unownedRetainStrong();
        v39 = v40 | (v41 << 32);
        sub_1B1FE1E1C((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v39, 0);
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        if (v77 == 1)
        {
          swift_unownedRetainStrong();
          v72[0] = __PAIR64__(v41, v40);
          v72[1] = v47;
          v73 = &type metadata for Parent;
          v74 = &off_1E63BB8E8;
          v75 = 13;
          v48 = *(_QWORD *)(v47 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
          if (v48 && (*(_BYTE *)(v48 + 81) & 1) != 0 && *(_QWORD *)(v48 + 24) && swift_weakLoadStrong())
          {
            swift_retain();
            swift_unknownObjectRetain();
            swift_release();
            sub_1B1C18F3C((uint64_t)v72, (uint64_t)v71);
            v49 = *(_QWORD **)(v48 + 16);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v48 + 16) = v49;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v49 = sub_1B1C62F04(0, v49[2] + 1, 1, v49);
              *(_QWORD *)(v48 + 16) = v49;
            }
            v52 = v49[2];
            v51 = v49[3];
            v53 = v52 + 1;
            if (v52 >= v51 >> 1)
            {
              v65 = v52 + 1;
              v54 = v49;
              v55 = v49[2];
              v56 = sub_1B1C62F04(v51 > 1, v52 + 1, 1, v54);
              v53 = v65;
              v52 = v55;
              v49 = v56;
              *(_QWORD *)(v48 + 16) = v56;
            }
            v49[2] = v53;
            sub_1B1C18F78((uint64_t)v71, (uint64_t)&v49[8 * v52 + 4]);
            swift_release();
            swift_unknownObjectRelease();
          }
          swift_release();
          sub_1B1ADF058((uint64_t)v72);
        }
        sub_1B1A0256C((uint64_t)v76);
        sub_1B1E31340(1);
        swift_release();
      }
      v38 += 4;
      sub_1B1E86820(v42 | (v43 << 32), v36, v39, v36);
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
  v88 = v81[0];
  v89 = v81[1];
  v90 = v82;
  if (v87 < 1 || (v63 = v84) == 0)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_37:
    v36 = v64;
    sub_1B1A086DC(v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v37 = *((_QWORD *)v11 + 2);
    if (!v37)
      goto LABEL_63;
    goto LABEL_38;
  }
  v62 = v83;
  v8 = v86[4];
  v9 = *(unsigned __int8 *)(v85 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v67 = v86;
  v58 = v86 + 8;
  v59 = (uint64_t)(v86 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v10 = 0;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v60 = v9;
  v61 = v8;
  while (1)
  {
    v66 = v10;
    v12 = (unsigned int *)(v62 + 48 * v10);
    v13 = *v12;
    v14 = v12[1];
    v15 = (uint64_t *)*((_QWORD *)v12 + 2);
    v16 = *((_QWORD *)v12 + 4);
    v17 = *((_QWORD *)v12 + 5);
    v68 = *((_QWORD *)v12 + 3);
    if (v9)
    {
      v18 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v8);
    sub_1B1A18378(v59, (uint64_t)v95, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v19 = v67[4];
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v67[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v67[7] = v20;
    v58[1] = 0;
    v58[2] = 0;
    *v58 = 0;
    swift_release();
    v21 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v15, v68, v16, (uint64_t)v67);
    if (!v15)
      break;
    if (v16)
    {
      do
      {
        v23 = *v15++;
        v22 = v23;
        v24 = swift_retain();
        if ((*(_BYTE *)(v17 + 184) & 1) != 0)
          goto LABEL_64;
        v25 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v22);
        v26 = *(_DWORD *)(*(_QWORD *)(v24 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v25 + 8);
        swift_release();
        v69 = *v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = sub_1B1C69BD0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
        v28 = *((_QWORD *)v11 + 2);
        v27 = *((_QWORD *)v11 + 3);
        if (v28 >= v27 >> 1)
          v11 = sub_1B1C69BD0(v27 > 1, v28 + 1, 1, v11);
        *((_QWORD *)v11 + 2) = v28 + 1;
        *(_QWORD *)&v29 = __PAIR64__(v26, v25);
        *((_QWORD *)&v29 + 1) = v69;
        *(_OWORD *)&v11[16 * v28 + 32] = v29;
        ++v21;
      }
      while (--v16);
    }
LABEL_24:
    v91[0] = v88;
    v91[1] = v89;
    v92 = v90;
    sub_1B1F05D48(v67, (unsigned __int16 **)v91, (uint64_t)v95);
    sub_1B1F03804((char *)v17);
    v8 = v61;
    ecs_stack_allocator_pop_snapshot(v61);
    v9 = v60;
    if ((v60 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
    }
    swift_release();
    v10 = v66 + 1;
    if (v66 + 1 == v63)
    {
      sub_1B1A086DC(v80, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      goto LABEL_37;
    }
  }
  if ((_DWORD)v13 == (_DWORD)v14)
    goto LABEL_24;
  while (1)
  {
    v30 = swift_retain();
    if ((*(_BYTE *)(v17 + 184) & 1) != 0)
      break;
    v31 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v13);
    v32 = *(_DWORD *)(*(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v31 + 8);
    swift_release();
    v70 = v21[v13];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1B1C69BD0(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v34 = *((_QWORD *)v11 + 2);
    v33 = *((_QWORD *)v11 + 3);
    if (v34 >= v33 >> 1)
      v11 = sub_1B1C69BD0(v33 > 1, v34 + 1, 1, v11);
    ++v13;
    *((_QWORD *)v11 + 2) = v34 + 1;
    *(_QWORD *)&v35 = __PAIR64__(v32, v31);
    *((_QWORD *)&v35 + 1) = v70;
    *(_OWORD *)&v11[16 * v34 + 32] = v35;
    if (v14 == v13)
      goto LABEL_24;
  }
LABEL_64:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

_QWORD *sub_1B20A1154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  os_unfair_lock_s *v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  os_unfair_lock_s *v98;
  int v99;
  int v100;
  unint64_t v102;
  int v103;
  _BYTE v104[40];
  _OWORD v105[2];
  uint64_t v106;
  _BYTE v107[40];
  _OWORD v108[2];
  uint64_t v109;
  _BYTE v110[40];
  _OWORD v111[2];
  uint64_t v112;
  _BYTE v113[40];
  _OWORD v114[2];
  uint64_t v115;
  _BYTE v116[40];
  _OWORD v117[2];
  uint64_t v118;
  _BYTE v119[40];
  _OWORD v120[2];
  uint64_t v121;
  _BYTE v122[40];
  _OWORD v123[2];
  uint64_t v124;
  _OWORD v125[2];
  uint64_t v126;
  _OWORD v127[2];
  uint64_t v128;
  _OWORD v129[2];
  uint64_t v130;
  _OWORD v131[2];
  uint64_t v132;
  _OWORD v133[2];
  uint64_t v134;
  _OWORD v135[2];
  uint64_t v136;
  _OWORD v137[2];
  uint64_t v138;
  uint64_t v139;
  int v140;
  char v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  char v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  char v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  _OWORD v181[2];
  uint64_t v182;
  _OWORD v183[2];
  uint64_t v184;
  _QWORD v185[8];
  _QWORD v186[8];
  _QWORD v187[8];
  _QWORD v188[8];
  _QWORD v189[8];
  _QWORD v190[8];
  _OWORD v191[2];
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _OWORD v223[2];
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD v228[7];
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;

  v4 = a4;
  v231 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v175 = qword_1ED4D09F8;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = v6 >> 31;
  v103 = v7;
  v176 = v7;
  v177 = v6 >> 31;
  v178 = 1;
  v179 = 2;
  v180 = 0;
  swift_retain();
  sub_1B1E39870(1, (uint64_t)v104);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v9 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v9 + 40) = &off_1E6374040;
  sub_1B1B44110(v105, v9);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v104);
  v137[0] = v105[0];
  v137[1] = v105[1];
  v138 = v106;
  sub_1B1E8FCE4(a1, (uint64_t)v137, 0x200000000, v185);
  sub_1B1A18378((uint64_t)v185, (uint64_t)v228, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v102 = v6 >> 31;
  if (v228[0])
  {
    if (v230 >= 1)
    {
      v10 = v229;
      if (v229)
      {
        v11 = v228[5];
        swift_retain();
        swift_retain();
        swift_retain();
        v12 = 48 * v10;
        v13 = (uint64_t *)(v11 + 40);
        do
        {
          v18 = *v13;
          v19 = *(os_unfair_lock_s **)(*v13 + 376);
          swift_retain();
          os_unfair_lock_lock(v19);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
          v20 = *(_DWORD *)(v18 + 24);
          swift_retain();
          v224 = 0;
          memset(v223, 0, sizeof(v223));
          v219 = 0;
          v218 = 0u;
          v217 = 0u;
          v21 = sub_1B1DA4ED8(v20, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)v223, (uint64_t)&v217);
          swift_release();
          sub_1B1A04628((uint64_t)&v217, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          sub_1B1A04628((uint64_t)v223, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          if (sub_1B1A10B20(v21))
          {
            sub_1B1A10BB0(v21);
          }
          else
          {
            v14 = *(_QWORD *)(v18 + 232);
            v15 = *(_QWORD *)(v18 + 240);
            v16 = *(unsigned __int8 *)(v18 + 120);
            v17 = *(unsigned int *)(v18 + 28);
            LOBYTE(v223[0]) = *(_BYTE *)(v18 + 32);
            sub_1B1FD8C68(v14, v15, v21, v16, v17 | ((unint64_t)LOBYTE(v223[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
          swift_release();
          v13 += 6;
          v12 -= 48;
        }
        while (v12);
        sub_1B1A086DC(v185, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        LOBYTE(v8) = v102;
      }
    }
    sub_1B1A086DC(v185, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v169 = qword_1ED4D09F8;
  v22 = v103;
  v170 = v103;
  v171 = v8;
  v172 = 1;
  v173 = 2;
  v174 = 0;
  swift_retain();
  sub_1B1E3BBE0(1, (uint64_t)v107);
  swift_release();
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v23 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v23 + 40) = &off_1E6374040;
  sub_1B1B44110(v108, v23);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v107);
  v135[0] = v108[0];
  v135[1] = v108[1];
  v136 = v109;
  sub_1B1E8FCE4(a1, (uint64_t)v135, 0x200000000, v186);
  sub_1B1A18378((uint64_t)v186, (uint64_t)v223, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v223[0])
  {
    if (v227 >= 1)
    {
      v24 = v226;
      if (v226)
      {
        v25 = v225;
        swift_retain();
        swift_retain();
        swift_retain();
        v26 = 48 * v24;
        v27 = (uint64_t *)(v25 + 40);
        do
        {
          v32 = *v27;
          v33 = *(os_unfair_lock_s **)(*v27 + 376);
          swift_retain();
          os_unfair_lock_lock(v33);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
          v34 = *(_DWORD *)(v32 + 24);
          swift_retain();
          v219 = 0;
          v218 = 0u;
          v217 = 0u;
          v213 = 0;
          v212 = 0u;
          v211 = 0u;
          v35 = sub_1B1DA4ED8(v34, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)&v217, (uint64_t)&v211);
          swift_release();
          sub_1B1A04628((uint64_t)&v211, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          sub_1B1A04628((uint64_t)&v217, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          if (sub_1B1A10B20(v35))
          {
            sub_1B1A10BB0(v35);
          }
          else
          {
            v28 = *(_QWORD *)(v32 + 232);
            v29 = *(_QWORD *)(v32 + 240);
            v30 = *(unsigned __int8 *)(v32 + 120);
            v31 = *(unsigned int *)(v32 + 28);
            LOBYTE(v217) = *(_BYTE *)(v32 + 32);
            sub_1B1FD8C68(v28, v29, v35, v30, v31 | ((unint64_t)v217 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 376));
          swift_release();
          v27 += 6;
          v26 -= 48;
        }
        while (v26);
        sub_1B1A086DC(v186, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        LOBYTE(v8) = v102;
        v22 = v103;
      }
    }
    sub_1B1A086DC(v186, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v163 = qword_1ED4D09F8;
  v164 = v22;
  v165 = v8;
  v166 = 1;
  v167 = 2;
  v168 = 0;
  swift_retain();
  sub_1B1E3AC20(1, (uint64_t)v110);
  swift_release();
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v36 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v36 + 40) = &off_1E6374040;
  sub_1B1B44110(v111, v36);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v110);
  v133[0] = v111[0];
  v133[1] = v111[1];
  v134 = v112;
  sub_1B1E8FCE4(a1, (uint64_t)v133, 0x200000000, v187);
  sub_1B1A18378((uint64_t)v187, (uint64_t)&v217, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v217)
  {
    if (v222 >= 1)
    {
      v37 = v221;
      if (v221)
      {
        v38 = v220;
        swift_retain();
        swift_retain();
        swift_retain();
        v39 = 48 * v37;
        v40 = (uint64_t *)(v38 + 40);
        do
        {
          v45 = *v40;
          v46 = *(os_unfair_lock_s **)(*v40 + 376);
          swift_retain();
          os_unfair_lock_lock(v46);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v45 + 344));
          v47 = *(_DWORD *)(v45 + 24);
          swift_retain();
          v213 = 0;
          v212 = 0u;
          v211 = 0u;
          v207 = 0;
          v206 = 0u;
          v205 = 0u;
          v48 = sub_1B1DA4ED8(v47, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)&v211, (uint64_t)&v205);
          swift_release();
          sub_1B1A04628((uint64_t)&v205, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          sub_1B1A04628((uint64_t)&v211, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          if (sub_1B1A10B20(v48))
          {
            sub_1B1A10BB0(v48);
          }
          else
          {
            v41 = *(_QWORD *)(v45 + 232);
            v42 = *(_QWORD *)(v45 + 240);
            v43 = *(unsigned __int8 *)(v45 + 120);
            v44 = *(unsigned int *)(v45 + 28);
            LOBYTE(v211) = *(_BYTE *)(v45 + 32);
            sub_1B1FD8C68(v41, v42, v48, v43, v44 | ((unint64_t)v211 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 376));
          swift_release();
          v40 += 6;
          v39 -= 48;
        }
        while (v39);
        sub_1B1A086DC(v187, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        LOBYTE(v8) = v102;
        v22 = v103;
      }
    }
    sub_1B1A086DC(v187, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v157 = qword_1ED4D09F8;
  v158 = v22;
  v159 = v8;
  v160 = 1;
  v161 = 2;
  v162 = 0;
  swift_retain();
  sub_1B1E3D5CC(1, (uint64_t)v113);
  swift_release();
  v49 = swift_allocObject();
  *(_OWORD *)(v49 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v49 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v49 + 40) = &off_1E6374040;
  sub_1B1B44110(v114, v49);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v113);
  v131[0] = v114[0];
  v131[1] = v114[1];
  v132 = v115;
  sub_1B1E8FCE4(a1, (uint64_t)v131, 0x200000000, v188);
  sub_1B1A18378((uint64_t)v188, (uint64_t)&v211, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v211)
  {
    if (v216 >= 1)
    {
      v50 = v215;
      if (v215)
      {
        v51 = v214;
        swift_retain();
        swift_retain();
        swift_retain();
        v52 = 48 * v50;
        v53 = (uint64_t *)(v51 + 40);
        do
        {
          v58 = *v53;
          v59 = *(os_unfair_lock_s **)(*v53 + 376);
          swift_retain();
          os_unfair_lock_lock(v59);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v58 + 344));
          v60 = *(_DWORD *)(v58 + 24);
          swift_retain();
          v207 = 0;
          v206 = 0u;
          v205 = 0u;
          v201 = 0;
          v200 = 0u;
          v199 = 0u;
          v61 = sub_1B1DA4ED8(v60, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)&v205, (uint64_t)&v199);
          swift_release();
          sub_1B1A04628((uint64_t)&v199, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          sub_1B1A04628((uint64_t)&v205, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          if (sub_1B1A10B20(v61))
          {
            sub_1B1A10BB0(v61);
          }
          else
          {
            v54 = *(_QWORD *)(v58 + 232);
            v55 = *(_QWORD *)(v58 + 240);
            v56 = *(unsigned __int8 *)(v58 + 120);
            v57 = *(unsigned int *)(v58 + 28);
            LOBYTE(v205) = *(_BYTE *)(v58 + 32);
            sub_1B1FD8C68(v54, v55, v61, v56, v57 | ((unint64_t)v205 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v58 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v58 + 376));
          swift_release();
          v53 += 6;
          v52 -= 48;
        }
        while (v52);
        sub_1B1A086DC(v188, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        LOBYTE(v8) = v102;
        v22 = v103;
      }
    }
    sub_1B1A086DC(v188, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v151 = qword_1ED4D09F8;
  v152 = v22;
  v153 = v8;
  v154 = 1;
  v155 = 2;
  v156 = 0;
  swift_retain();
  sub_1B1E3F1FC(1, (uint64_t)v116);
  swift_release();
  v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v62 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v62 + 40) = &off_1E6374040;
  sub_1B1B44110(v117, v62);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v116);
  v129[0] = v117[0];
  v129[1] = v117[1];
  v130 = v118;
  sub_1B1E8FCE4(a1, (uint64_t)v129, 0x200000000, v189);
  sub_1B1A18378((uint64_t)v189, (uint64_t)&v205, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v205)
  {
    if (v210 >= 1)
    {
      v63 = v209;
      if (v209)
      {
        v64 = v208;
        swift_retain();
        swift_retain();
        swift_retain();
        v65 = 48 * v63;
        v66 = (uint64_t *)(v64 + 40);
        do
        {
          v71 = *v66;
          v72 = *(os_unfair_lock_s **)(*v66 + 376);
          swift_retain();
          os_unfair_lock_lock(v72);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v71 + 344));
          v73 = *(_DWORD *)(v71 + 24);
          swift_retain();
          v201 = 0;
          v200 = 0u;
          v199 = 0u;
          v195 = 0;
          v194 = 0u;
          v193 = 0u;
          v74 = sub_1B1DA4ED8(v73, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)&v199, (uint64_t)&v193);
          swift_release();
          sub_1B1A04628((uint64_t)&v193, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          sub_1B1A04628((uint64_t)&v199, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          if (sub_1B1A10B20(v74))
          {
            sub_1B1A10BB0(v74);
          }
          else
          {
            v67 = *(_QWORD *)(v71 + 232);
            v68 = *(_QWORD *)(v71 + 240);
            v69 = *(unsigned __int8 *)(v71 + 120);
            v70 = *(unsigned int *)(v71 + 28);
            LOBYTE(v199) = *(_BYTE *)(v71 + 32);
            sub_1B1FD8C68(v67, v68, v74, v69, v70 | ((unint64_t)v199 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 376));
          swift_release();
          v66 += 6;
          v65 -= 48;
        }
        while (v65);
        sub_1B1A086DC(v189, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        LOBYTE(v8) = v102;
        v22 = v103;
      }
    }
    sub_1B1A086DC(v189, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v145 = qword_1ED4D09F8;
  v146 = v22;
  v147 = v8;
  v148 = 1;
  v149 = 2;
  v150 = 0;
  swift_retain();
  sub_1B1E3A248(1, (uint64_t)v119);
  swift_release();
  v75 = swift_allocObject();
  *(_OWORD *)(v75 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v75 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v75 + 40) = &off_1E6374040;
  sub_1B1B44110(v120, v75);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v119);
  v127[0] = v120[0];
  v127[1] = v120[1];
  v128 = v121;
  sub_1B1E8FCE4(a1, (uint64_t)v127, 0x200000000, v190);
  sub_1B1A18378((uint64_t)v190, (uint64_t)&v199, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v199)
  {
    if (v204 >= 1)
    {
      v76 = v203;
      if (v203)
      {
        v77 = v202;
        swift_retain();
        swift_retain();
        swift_retain();
        v78 = 48 * v76;
        v79 = (uint64_t *)(v77 + 40);
        do
        {
          v84 = *v79;
          v85 = *(os_unfair_lock_s **)(*v79 + 376);
          swift_retain();
          os_unfair_lock_lock(v85);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v84 + 344));
          v86 = *(_DWORD *)(v84 + 24);
          swift_retain();
          v195 = 0;
          v194 = 0u;
          v193 = 0u;
          v192 = 0;
          memset(v191, 0, sizeof(v191));
          v87 = sub_1B1DA4ED8(v86, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)&v193, (uint64_t)v191);
          swift_release();
          sub_1B1A04628((uint64_t)v191, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          sub_1B1A04628((uint64_t)&v193, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          if (sub_1B1A10B20(v87))
          {
            sub_1B1A10BB0(v87);
          }
          else
          {
            v80 = *(_QWORD *)(v84 + 232);
            v81 = *(_QWORD *)(v84 + 240);
            v82 = *(unsigned __int8 *)(v84 + 120);
            v83 = *(unsigned int *)(v84 + 28);
            LOBYTE(v193) = *(_BYTE *)(v84 + 32);
            sub_1B1FD8C68(v80, v81, v87, v82, v83 | ((unint64_t)v193 << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v84 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v84 + 376));
          swift_release();
          v79 += 6;
          v78 -= 48;
        }
        while (v78);
        sub_1B1A086DC(v190, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        LOBYTE(v8) = v102;
        v22 = v103;
      }
    }
    sub_1B1A086DC(v190, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v139 = qword_1ED4D09F8;
  v140 = v22;
  v141 = v8;
  v142 = 1;
  v143 = 2;
  v144 = 0;
  swift_retain();
  sub_1B1E3C3C0(1, (uint64_t)v122);
  swift_release();
  v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v88 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v88 + 40) = &off_1E6374040;
  sub_1B1B44110(v123, v88);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v122);
  v125[0] = v123[0];
  v125[1] = v123[1];
  v126 = v124;
  sub_1B1E8FCE4(a1, (uint64_t)v125, 0x200000000, v191);
  sub_1B1A18378((uint64_t)v191, (uint64_t)&v193, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v193)
  {
    if (v198 >= 1)
    {
      v89 = v197;
      if (v197)
      {
        v90 = v196;
        swift_retain();
        swift_retain();
        swift_retain();
        v91 = 48 * v89;
        v92 = (uint64_t *)(v90 + 40);
        do
        {
          v97 = *v92;
          v98 = *(os_unfair_lock_s **)(*v92 + 376);
          swift_retain();
          os_unfair_lock_lock(v98);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v97 + 344));
          v99 = *(_DWORD *)(v97 + 24);
          swift_retain();
          v184 = 0;
          memset(v183, 0, sizeof(v183));
          v182 = 0;
          memset(v181, 0, sizeof(v181));
          v100 = sub_1B1DA4ED8(v99, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)v183, (uint64_t)v181);
          swift_release();
          sub_1B1A04628((uint64_t)v181, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          sub_1B1A04628((uint64_t)v183, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          if (sub_1B1A10B20(v100))
          {
            sub_1B1A10BB0(v100);
          }
          else
          {
            v93 = *(_QWORD *)(v97 + 232);
            v94 = *(_QWORD *)(v97 + 240);
            v95 = *(unsigned __int8 *)(v97 + 120);
            v96 = *(unsigned int *)(v97 + 28);
            LOBYTE(v183[0]) = *(_BYTE *)(v97 + 32);
            sub_1B1FD8C68(v93, v94, v100, v95, v96 | ((unint64_t)LOBYTE(v183[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v97 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v97 + 376));
          swift_release();
          v92 += 6;
          v91 -= 48;
        }
        while (v91);
        sub_1B1A086DC(v191, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    sub_1B19ED720((uint64_t)v123);
    sub_1B19ED720((uint64_t)v120);
    sub_1B19ED720((uint64_t)v117);
    sub_1B19ED720((uint64_t)v114);
    sub_1B19ED720((uint64_t)v111);
    sub_1B19ED720((uint64_t)v108);
    sub_1B19ED720((uint64_t)v105);
    return sub_1B1A086DC(v191, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    sub_1B19ED720((uint64_t)v123);
    sub_1B19ED720((uint64_t)v120);
    sub_1B19ED720((uint64_t)v117);
    sub_1B19ED720((uint64_t)v114);
    sub_1B19ED720((uint64_t)v111);
    sub_1B19ED720((uint64_t)v108);
    return (_QWORD *)sub_1B19ED720((uint64_t)v105);
  }
}

uint64_t sub_1B20A24E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  char *v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  ValueMetadata *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  ValueMetadata *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  os_unfair_lock_s *v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  __int16 v87;
  __int16 v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t result;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  signed int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _BYTE v115[64];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  _UNKNOWN **v121;
  char v122;
  _QWORD v123[3];
  char v124;
  _OWORD v125[2];
  uint64_t v126;
  _QWORD v127[8];
  _OWORD v128[2];
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  _OWORD v138[2];
  uint64_t v139;
  _OWORD v140[2];
  uint64_t v141;
  _BYTE v142[40];
  uint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  char v147;
  uint64_t v148;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v143 = qword_1ED4D09F8;
  v144 = v7;
  v145 = v6 >> 31;
  v146 = 1;
  v147 = 2;
  v148 = 0;
  swift_retain();
  sub_1B1E42294(0, (uint64_t)v125);
  swift_release();
  v140[0] = v125[0];
  v140[1] = v125[1];
  v141 = v126;
  sub_1B1E8FCE4(a1, (uint64_t)v140, 0x200000000, v127);
  sub_1B1A18378((uint64_t)v127, (uint64_t)v128, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v96 = a1;
  if (!*(_QWORD *)&v128[0])
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    v38 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v38)
    {
LABEL_134:
      sub_1B19ED720((uint64_t)v125);
      return swift_bridgeObjectRelease();
    }
    goto LABEL_41;
  }
  v135 = v128[0];
  v136 = v128[1];
  v137 = v129;
  if (v134 < 1 || (v104 = v131) == 0)
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_40;
  }
  v102 = v130;
  v8 = v133;
  v113 = v133[4];
  v111 = *(unsigned __int8 *)(v132 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v98 = (uint64_t)(v133 + 6);
  v100 = type metadata accessor for VFXObjectTag();
  v114 = v8;
  v97 = v8 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v9 = 0;
  v10 = 0;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v108 = v9;
    v110 = v10;
    v12 = (unsigned int *)(v102 + 48 * v9);
    v13 = *v12;
    v14 = v12[1];
    v15 = (uint64_t *)*((_QWORD *)v12 + 2);
    v16 = *((_QWORD *)v12 + 4);
    v17 = *((_QWORD *)v12 + 5);
    v107 = *((_QWORD *)v12 + 3);
    if (v111)
    {
      v18 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v113);
    sub_1B1A18378(v98, (uint64_t)v142, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v19 = v114[4];
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v114[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v114[7] = v20;
    v97[1] = 0;
    v97[2] = 0;
    *v97 = 0;
    swift_release();
    sub_1B1A12038(v100, (uint64_t)&off_1E63786A0, v15, v107, v16, (uint64_t)v114);
    if (v15)
    {
      if (v16)
      {
        while (1)
        {
          v23 = *v15++;
          v22 = v23;
          if ((*(_BYTE *)(v17 + 120) & 1) == 0)
          {
            v24 = *(_BYTE *)(v17 + 184);
            v25 = swift_retain();
            if ((v24 & 1) != 0)
              goto LABEL_135;
            v26 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v22);
            v27 = *(_DWORD *)(*(_QWORD *)(v25 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v26 + 8);
            swift_release();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v11 = sub_1B1C63D98(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
            v29 = *((_QWORD *)v11 + 2);
            v28 = *((_QWORD *)v11 + 3);
            if (v29 >= v28 >> 1)
              v11 = sub_1B1C63D98(v28 > 1, v29 + 1, 1, v11);
            *((_QWORD *)v11 + 2) = v29 + 1;
            v21 = &v11[8 * v29];
            *((_DWORD *)v21 + 8) = v26;
            *((_DWORD *)v21 + 9) = v27;
          }
          if (!--v16)
            goto LABEL_26;
        }
      }
      goto LABEL_26;
    }
    v30 = &qword_1ED4B8000;
    if ((_DWORD)v13 != (_DWORD)v14)
      break;
LABEL_26:
    v138[0] = v135;
    v138[1] = v136;
    v139 = v137;
    v10 = v110;
    sub_1B1F05D48(v114, (unsigned __int16 **)v138, (uint64_t)v142);
    sub_1B1F03804((char *)v17);
    ecs_stack_allocator_pop_snapshot(v113);
    if ((v111 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
    }
    swift_release();
    v9 = v108 + 1;
    if (v108 + 1 == v104)
    {
      sub_1B1A086DC(v127, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      a1 = v96;
LABEL_40:
      sub_1B1A086DC(v127, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      v38 = *((_QWORD *)v11 + 2);
      if (!v38)
        goto LABEL_134;
LABEL_41:
      swift_bridgeObjectRetain();
      v39 = 0;
      v109 = v38;
      while (1)
      {
        v40 = *(_QWORD *)&v11[8 * v39 + 32];
        v41 = v40;
        v42 = HIDWORD(v40);
        if ((_DWORD)v40 == -1 && HIDWORD(v40) == 0)
          goto LABEL_113;
        v112 = *(_QWORD *)&v11[8 * v39 + 32];
        v44 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        swift_retain();
        if (v44)
        {
          v45 = *(_BYTE *)(v44 + 80);
          MEMORY[0x1B5E240CC](v44 + 48);
          v44 = *(_QWORD *)(v44 + 56);
        }
        else
        {
          v45 = 0;
        }
        v118 = 0;
        swift_unknownObjectUnownedInit();
        v116 = a1;
        v118 = v44;
        swift_unknownObjectUnownedAssign();
        swift_unownedRetain();
        swift_unknownObjectRelease();
        v119 = v45;
        sub_1B1A02530((uint64_t)&v116, (uint64_t)v123);
        v46 = v123[0];
        swift_unownedRetainStrong();
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        swift_unownedRetainStrong();
        if ((v41 & 0x80000000) == 0
          && (v47 = (uint64_t *)(v46 + OBJC_IVAR____TtC3VFX13EntityManager__entries),
              *(_QWORD *)(v46 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v41)
          && ((v48 = *v47, (_DWORD)v42 == -1) || *(_DWORD *)(v48 + 12 * (int)v41 + 8) == (_DWORD)v42))
        {
          v79 = *(_QWORD *)(*(_QWORD *)(v46 + 136) + 8 * *(int *)(v48 + 12 * (int)v41) + 32);
          v80 = *(os_unfair_lock_s **)(v79 + 344);
          swift_retain();
          os_unfair_lock_lock(v80);
          if (v47[1] > (int)v41)
          {
            v82 = *v47 + 12 * (int)v41;
            v83 = *(__int16 *)(v82 + 4);
            if ((_DWORD)v42 == -1 || *(_DWORD *)(v82 + 8) == (_DWORD)v42)
            {
              v84 = *(_QWORD *)(*(_QWORD *)(v46 + 136) + 8 * *(int *)(*v47 + 12 * (int)v41) + 32);
              if ((*(_BYTE *)(v84 + 120) & 1) == 0)
              {
                if ((uint64_t)(*(_QWORD *)(v84 + 240) - *(_QWORD *)(v84 + 232)) < 2)
                {
                  v103 = *(_DWORD *)(v84 + 188);
                  v106 = *(_DWORD *)(v84 + 24);
                  swift_retain();
                  swift_retain();
                  sub_1B1C8DBF4(v103, 1, v106);
                  swift_release();
                  *(_BYTE *)(v84 + 120) = 1;
                }
                else
                {
                  v105 = *(_DWORD *)(v84 + 24);
                  v101 = *(unsigned int *)(v84 + 28);
                  v99 = *(_BYTE *)(v84 + 32);
                  swift_retain();
                  LOBYTE(v116) = v99;
                  sub_1B1FD8FC0(v83, v105, 1, v101 | ((unint64_t)v99 << 32), 0, 0, 0, 0);
                }
                swift_release();
              }
              if (v47[1] > (int)v41 && ((_DWORD)v42 == -1 || *(_DWORD *)(*v47 + 12 * (int)v41 + 8) == (_DWORD)v42))
              {
                thread_worker_index(v81);
                v91 = v89[24];
                if (v91)
                {
                  v92 = v89[26];
                  v93 = 8 * (v90 >> 6);
                  *(_QWORD *)(v91 + v93) |= 1 << v90;
                  *(_QWORD *)(v92 + v93) &= ~(1 << v90);
                }
                sub_1B1FE2568(v89[5], (uint64_t)v89, v90);
              }
            }
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v79 + 344));
          swift_release();
          swift_release();
          a1 = v96;
        }
        else
        {
          swift_release();
        }
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        if (v124 == 1)
        {
          swift_unownedRetainStrong();
          v116 = v112;
          v117 = v46;
          LOBYTE(v118) = 1;
          v122 = 7;
          v49 = *(_QWORD *)(v46 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
          if (v49 && (*(_BYTE *)(v49 + 81) & 1) != 0 && *(_QWORD *)(v49 + 24))
          {
            if (swift_weakLoadStrong())
            {
              swift_retain();
              swift_unknownObjectRetain();
              swift_release();
              sub_1B1C18F3C((uint64_t)&v116, (uint64_t)v115);
              v50 = *(_QWORD **)(v49 + 16);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v49 + 16) = v50;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v50 = sub_1B1C62F04(0, v50[2] + 1, 1, v50);
                *(_QWORD *)(v49 + 16) = v50;
              }
              v53 = v50[2];
              v52 = v50[3];
              v54 = v53 + 1;
              if (v53 >= v52 >> 1)
              {
                v94 = sub_1B1C62F04(v52 > 1, v53 + 1, 1, v50);
                v54 = v53 + 1;
                v50 = v94;
                *(_QWORD *)(v49 + 16) = v94;
              }
              v50[2] = v54;
              sub_1B1C18F78((uint64_t)v115, (uint64_t)&v50[8 * v53 + 4]);
              swift_release();
              swift_unknownObjectRelease();
            }
            swift_release();
            a1 = v96;
          }
          else
          {
            swift_release();
          }
          sub_1B1ADF058((uint64_t)&v116);
        }
        sub_1B1A0256C((uint64_t)v123);
        sub_1B1E31340(1);
        swift_release();
        v55 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
        swift_retain();
        if ((v41 & 0x80000000) != 0)
          break;
        if (*(_QWORD *)(a1 + v55 + 8) <= (int)v41)
          break;
        v56 = *(_QWORD *)(a1 + v55);
        if ((_DWORD)v42 != -1 && *(_DWORD *)(v56 + 12 * (int)v41 + 8) != (_DWORD)v42)
          break;
        v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(__int16 *)(v56 + 12 * (int)v41 + 6) + 32) + 16);
        v58 = *(_QWORD *)(v57 + 128);
        if (!*(_QWORD *)(v58 + 16))
          break;
        v59 = sub_1B1DC3AC8((uint64_t)&type metadata for Hidden);
        if ((v60 & 1) == 0)
          break;
        v61 = *(ValueMetadata **)(*(_QWORD *)(v57 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v59) + 32);
        swift_release();
        if (v61 != &type metadata for Hidden)
          goto LABEL_79;
        v38 = v109;
LABEL_114:
        if (v38 == ++v39)
        {
          swift_bridgeObjectRelease();
          goto LABEL_134;
        }
      }
      swift_release();
LABEL_79:
      v62 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v62)
      {
        v63 = *(_BYTE *)(v62 + 80);
        MEMORY[0x1B5E240CC](v62 + 48);
        v62 = *(_QWORD *)(v62 + 56);
      }
      else
      {
        v63 = 0;
      }
      v118 = 0;
      swift_unknownObjectUnownedInit();
      v116 = a1;
      v118 = v62;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      v119 = v63;
      sub_1B1A02530((uint64_t)&v116, (uint64_t)v123);
      if ((_DWORD)v41 == -1)
      {
        if (!(_DWORD)v42)
        {
LABEL_112:
          sub_1B1A0256C((uint64_t)v123);
          sub_1B1E31340(1);
          swift_release();
          v38 = v109;
LABEL_113:
          sub_1B211E138(v41 | (v42 << 32), a1);
          goto LABEL_114;
        }
        v64 = v123[0];
        swift_unownedRetainStrong();
      }
      else
      {
        v64 = v123[0];
        swift_unownedRetainStrong();
        if ((v41 & 0x80000000) == 0)
        {
          if (*(_QWORD *)(v64 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v41
            && ((v65 = *(_QWORD *)(v64 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v42 == -1)
             || *(_DWORD *)(v65 + 12 * (int)v41 + 8) == (_DWORD)v42)
            && (v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 80) + 8 * *(__int16 *)(v65 + 12 * (int)v41 + 6) + 32)
                                + 16),
                v67 = *(_QWORD *)(v66 + 128),
                *(_QWORD *)(v67 + 16))
            && (v68 = sub_1B1DC3AC8((uint64_t)&type metadata for Hidden), (v69 & 1) != 0))
          {
            v70 = *(ValueMetadata **)(*(_QWORD *)(v66 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v67 + 56) + 8 * v68) + 32);
            swift_release();
            v71 = v70 != &type metadata for Hidden;
          }
          else
          {
            swift_release();
            v71 = 1;
          }
          swift_unownedRetainStrong();
          if (*(_QWORD *)(v64 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v41
            && ((v72 = *(_QWORD *)(v64 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v42 == -1)
             || *(_DWORD *)(v72 + 12 * (int)v41 + 8) == (_DWORD)v42))
          {
            v85 = (int *)(v72 + 12 * (int)v41);
            v86 = *(_QWORD *)(*(_QWORD *)(v64 + 136) + 8 * *v85 + 32);
            v87 = *((_WORD *)v85 + 2);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v86 + 344));
            v88 = v87;
            a1 = v96;
            sub_1B1C0E7A4(v86, v88, v64);
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v86 + 344));
            swift_release();
          }
          else
          {
            swift_release();
          }
          goto LABEL_98;
        }
      }
      swift_release();
      swift_unownedRetainStrong();
      swift_release();
      v71 = 1;
LABEL_98:
      swift_unownedRetainStrong();
      swift_release();
      if (swift_unknownObjectUnownedLoadStrong())
        swift_unknownObjectRelease();
      if (v124 == 1)
      {
        swift_unownedRetainStrong();
        v116 = v112;
        v117 = v64;
        sub_1B1AED5E4(0, &qword_1EEF614F0, (uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB218, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ComponentWriter);
        v120 = v73;
        v121 = &off_1E6383838;
        LOBYTE(v118) = v71;
        v122 = 12;
        v74 = *(_QWORD *)(v64 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        if (v74 && (*(_BYTE *)(v74 + 81) & 1) != 0 && *(_QWORD *)(v74 + 24))
        {
          if (swift_weakLoadStrong())
          {
            swift_retain();
            swift_unknownObjectRetain();
            swift_release();
            sub_1B1C18F3C((uint64_t)&v116, (uint64_t)v115);
            v75 = *(_QWORD **)(v74 + 16);
            v76 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v74 + 16) = v75;
            if ((v76 & 1) == 0)
            {
              v75 = sub_1B1C62F04(0, v75[2] + 1, 1, v75);
              *(_QWORD *)(v74 + 16) = v75;
            }
            v78 = v75[2];
            v77 = v75[3];
            if (v78 >= v77 >> 1)
            {
              v75 = sub_1B1C62F04(v77 > 1, v78 + 1, 1, v75);
              *(_QWORD *)(v74 + 16) = v75;
            }
            v75[2] = v78 + 1;
            sub_1B1C18F78((uint64_t)v115, (uint64_t)&v75[8 * v78 + 4]);
            swift_release();
            swift_unknownObjectRelease();
          }
          swift_release();
          a1 = v96;
        }
        else
        {
          swift_release();
        }
        sub_1B1ADF058((uint64_t)&v116);
      }
      goto LABEL_112;
    }
  }
  while (1)
  {
    if ((*(_BYTE *)(v17 + 120) & 1) != 0)
      goto LABEL_29;
    v32 = *(_BYTE *)(v17 + 184);
    v33 = swift_retain();
    if ((v32 & 1) != 0)
      break;
    v34 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v13);
    v35 = *(_DWORD *)(*(_QWORD *)(v33 + v30[192]) + 12 * v34 + 8);
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1B1C63D98(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v37 = *((_QWORD *)v11 + 2);
    v36 = *((_QWORD *)v11 + 3);
    if (v37 >= v36 >> 1)
      v11 = sub_1B1C63D98(v36 > 1, v37 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v37 + 1;
    v31 = &v11[8 * v37];
    *((_DWORD *)v31 + 8) = v34;
    *((_DWORD *)v31 + 9) = v35;
    v30 = &qword_1ED4B8000;
LABEL_29:
    if (v14 == ++v13)
      goto LABEL_26;
  }
LABEL_135:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

_QWORD *sub_1B20A33B8(ProtocolDescriptor *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ValueMetadata *v4;
  ValueMetadata *v6;
  unint64_t v7;
  int v8;
  ValueMetadata v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int64_t v207;
  int64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int64_t v227;
  int64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  _OWORD v233[2];
  uint64_t v234;
  _QWORD v235[8];
  _OWORD v236[2];
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _OWORD v243[2];
  uint64_t v244;
  char v245[32];
  uint64_t v246;
  _BYTE v247[40];
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  char v266;
  uint64_t v267;
  char v268;
  uint64_t v269;

  LODWORD(v4) = a4;
  v6 = (ValueMetadata *)v236;
  v7 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    goto LABEL_276;
  while (1)
  {
    if (v7)
      v8 = 0;
    else
      v8 = (int)v4;
    v264 = qword_1ED4D09F8;
    v265 = v8;
    v266 = v7 >> 31;
    v267 = 1;
    v268 = 2;
    v269 = 0;
    swift_retain();
    sub_1B1A175D8(1, 1, 3, (uint64_t)v233);
    swift_release();
    v9 = (ValueMetadata)v233[1];
    v6[9] = (ValueMetadata)v233[0];
    v6[10] = v9;
    v246 = v234;
    sub_1B1E8FCE4((uint64_t)a1, (uint64_t)v245, 0x200000000, v235);
    sub_1B1A18378((uint64_t)v235, (uint64_t)v236, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (!*(_QWORD *)&v236[0])
      return (_QWORD *)sub_1B19ED720((uint64_t)v233);
    if (v242 <= 0 || (v190 = v239) == 0)
    {
      sub_1B19ED720((uint64_t)v233);
      return sub_1B1A086DC(v235, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    v193 = *(unsigned __int8 *)(v240 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v192 = v241[4];
    v243[0] = v236[0];
    v243[1] = v236[1];
    v194 = v241;
    v188 = v241 + 8;
    v189 = (uint64_t)(v241 + 6);
    v187 = v238;
    v244 = v237;
    swift_retain();
    swift_retain();
    swift_retain();
    v10 = 0;
LABEL_10:
    v191 = v10;
    v11 = (unsigned int *)(v187 + 48 * v10);
    v12 = *v11;
    v13 = (uint64_t *)*((_QWORD *)v11 + 2);
    v14 = *((_QWORD *)v11 + 3);
    v15 = *((_QWORD *)v11 + 5);
    v198 = *((_QWORD *)v11 + 4);
    v200 = v11[1];
    if (v193)
    {
      v16 = *(os_unfair_lock_s **)(v15 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v16);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v192);
    sub_1B1A18378(v189, (uint64_t)v247, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v17 = v194[4];
    v195 = v15;
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v194[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
    v194[7] = v18;
    v188[1] = 0;
    v188[2] = 0;
    *v188 = 0;
    swift_release();
    v19 = v198;
    sub_1B1A12038((uint64_t)&type metadata for CodeGenerationInitialized, (uint64_t)&off_1E63AF7E8, v13, v14, v198, (uint64_t)v194);
    v20 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v13, v14, v198, (uint64_t)v194);
    v204 = sub_1B1A12038((uint64_t)&type metadata for CodeGenerationComponent, (uint64_t)&off_1E63AA190, v13, v14, v198, (uint64_t)v194);
    if (!v13)
    {
      if ((_DWORD)v12 == (_DWORD)v200)
        goto LABEL_141;
      v197 = v20 + 8;
LABEL_146:
      v7 = *(_QWORD *)(v204 + 8 * v12);
      if (!v7)
        goto LABEL_145;
      v203 = v12;
      v104 = *(_QWORD *)(v197 + (v12 << 6));
      v206 = v104 + 64;
      v105 = 1 << *(_BYTE *)(v104 + 32);
      if (v105 < 64)
        v106 = ~(-1 << v105);
      else
        v106 = -1;
      v107 = v106 & *(_QWORD *)(v104 + 64);
      v108 = (unint64_t)(v105 + 63) >> 6;
      v216 = v104;
      swift_bridgeObjectRetain_n();
      swift_retain();
      v109 = 0;
      v208 = v108;
      v199 = v108 - 7;
      a1 = &protocol descriptor for Component;
      v222 = v7;
      if (!v107)
        goto LABEL_152;
      while (1)
      {
LABEL_151:
        v110 = __clz(__rbit64(v107));
        v107 &= v107 - 1;
        v111 = v110 | (v109 << 6);
        while (1)
        {
          v114 = 16 * v111;
          v115 = (uint64_t *)(*(_QWORD *)(v216 + 48) + 16 * v111);
          v116 = *v115;
          v4 = **(ValueMetadata ***)(*(_QWORD *)(*(_QWORD *)(v216 + 56) + v114 + 8) + 32);
          v224 = v115[1];
          swift_bridgeObjectRetain();
          swift_retain();
          v6 = (ValueMetadata *)sub_1B2229304();
          if (!swift_conformsToProtocol2())
            goto LABEL_274;
          if (v6 != &type metadata for ColorRampComponent)
          {
            v4 = (ValueMetadata *)sub_1B2229304();
            if (!swift_conformsToProtocol2())
              goto LABEL_275;
            if (v4 != &type metadata for CurveComponent)
              goto LABEL_206;
          }
          v218 = v107;
          v220 = v109;
          v117 = *(_QWORD *)(v7 + 168);
          v226 = v117 + 64;
          v118 = 1 << *(_BYTE *)(v117 + 32);
          v119 = v118 < 64 ? ~(-1 << v118) : -1;
          v120 = v119 & *(_QWORD *)(v117 + 64);
          v121 = (unint64_t)(v118 + 63) >> 6;
          swift_bridgeObjectRetain_n();
          v122 = 0;
          v228 = v121;
          v214 = v121 - 7;
LABEL_177:
          if (v120)
          {
            v123 = __clz(__rbit64(v120));
            v120 &= v120 - 1;
            v124 = v123 | (v122 << 6);
            goto LABEL_196;
          }
          v125 = v122 + 1;
          if (v122 + 1 >= v228)
            break;
          v126 = *(_QWORD *)(v226 + 8 * v125);
          if (v126)
            goto LABEL_195;
          v125 = v122 + 2;
          if (v122 + 2 >= v228)
            break;
          v126 = *(_QWORD *)(v226 + 8 * v125);
          if (v126)
            goto LABEL_195;
          v125 = v122 + 3;
          if (v122 + 3 >= v228)
            break;
          v126 = *(_QWORD *)(v226 + 8 * v125);
          if (v126)
            goto LABEL_195;
          v125 = v122 + 4;
          if (v122 + 4 >= v228)
            break;
          v126 = *(_QWORD *)(v226 + 8 * v125);
          if (v126)
            goto LABEL_195;
          v125 = v122 + 5;
          if (v122 + 5 >= v228)
            break;
          v126 = *(_QWORD *)(v226 + 8 * v125);
          if (v126)
            goto LABEL_195;
          v125 = v122 + 6;
          if (v122 + 6 >= v228)
            break;
          v126 = *(_QWORD *)(v226 + 8 * v125);
          if (v126)
            goto LABEL_195;
          a1 = &protocol descriptor for Component;
          v107 = v218;
          v109 = v220;
          do
          {
            if (v214 == v122)
            {
              v7 = v222;
              goto LABEL_205;
            }
            v126 = *(_QWORD *)(v117 + 120 + 8 * v122++);
          }
          while (!v126);
          v125 = v122 + 6;
LABEL_195:
          v120 = (v126 - 1) & v126;
          v124 = __clz(__rbit64(v126)) + (v125 << 6);
          v122 = v125;
LABEL_196:
          v127 = *(_QWORD *)(*(_QWORD *)(v117 + 56) + 8 * v124);
          v128 = *(_QWORD *)(v127 + 80);
          if (!sub_1B1C7A1C4(v128))
            goto LABEL_177;
          v130 = *(_QWORD *)(v128 + 32);
          v129 = *(_QWORD *)(v128 + 40);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          v131 = sub_1B1E27F14(v130, v129);
          swift_bridgeObjectRelease();
          if (!v131)
            goto LABEL_176;
          v133 = v131[5];
          v132 = v131[6];
          swift_bridgeObjectRetain();
          swift_release();
          if (v133 == v116 && v132 == v224)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_209;
          }
          v135 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          if ((v135 & 1) == 0)
          {
LABEL_176:
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_177;
          }
          swift_release();
LABEL_209:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v136 = *(_QWORD *)(v127 + 80);
          v7 = v222;
          if (!sub_1B1C7A1C4(v136)
            || (v137 = *(_QWORD *)(v136 + 32),
                v138 = *(_QWORD *)(v136 + 40),
                swift_bridgeObjectRetain(),
                v139 = sub_1B1E27F14(v137, v138),
                swift_bridgeObjectRelease(),
                !v139))
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
LABEL_237:
            a1 = &protocol descriptor for Component;
            goto LABEL_265;
          }
          v140 = v139[8];
          if (v140 == 28)
          {
            v212 = v139[7];
            v162 = v139[3];
            v163 = v139[4];
            v256 = xmmword_1B2295DA0;
            v258 = 0;
            v259 = 0;
            v257 = 0;
            swift_bridgeObjectRetain();
            sub_1B1E27CA0(v162, v163, (uint64_t)&v256);
            v164 = sub_1B1E27F14(v162, v163);
            v165 = v164[5];
            v166 = v164[6];
            swift_bridgeObjectRetain();
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v232 = *(_QWORD *)(v222 + 264);
            *(_QWORD *)(v222 + 264) = 0x8000000000000000;
            sub_1B1B87484((uint64_t)v164, v165, v166, isUniquelyReferenced_nonNull_native);
            *(_QWORD *)(v222 + 264) = v232;
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_retain();
            swift_retain();
            v168 = swift_bridgeObjectRetain();
            v169 = sub_1B1DFAC8C(v168, v222, v127);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            v170 = v169 + 64;
            v171 = 1 << *(_BYTE *)(v169 + 32);
            if (v171 < 64)
              v172 = ~(-1 << v171);
            else
              v172 = -1;
            v173 = v172 & *(_QWORD *)(v169 + 64);
            v174 = (unint64_t)(v171 + 63) >> 6;
            swift_retain();
            v175 = 0;
            while (1)
            {
              if (v173)
              {
                v176 = __clz(__rbit64(v173));
                v173 &= v173 - 1;
                v177 = v176 | (v175 << 6);
              }
              else
              {
                v181 = v175 + 1;
                if (v175 + 1 >= v174)
                  goto LABEL_263;
                v182 = *(_QWORD *)(v170 + 8 * v181);
                if (!v182)
                {
                  v181 = v175 + 2;
                  if (v175 + 2 >= v174)
                    goto LABEL_263;
                  v182 = *(_QWORD *)(v170 + 8 * v181);
                  if (!v182)
                  {
                    v181 = v175 + 3;
                    if (v175 + 3 >= v174)
                      goto LABEL_263;
                    v182 = *(_QWORD *)(v170 + 8 * v181);
                    if (!v182)
                    {
                      v181 = v175 + 4;
                      if (v175 + 4 >= v174)
                        goto LABEL_263;
                      v182 = *(_QWORD *)(v170 + 8 * v181);
                      if (!v182)
                      {
                        v181 = v175 + 5;
                        if (v175 + 5 >= v174)
                          goto LABEL_263;
                        v182 = *(_QWORD *)(v170 + 8 * v181);
                        if (!v182)
                        {
                          v181 = v175 + 6;
                          if (v175 + 6 >= v174)
                          {
LABEL_263:
                            swift_release();
                            swift_release();
                            swift_release();
                            v184 = v212;
                            v185 = 28;
                            goto LABEL_264;
                          }
                          v182 = *(_QWORD *)(v170 + 8 * v181);
                          if (!v182)
                          {
                            do
                            {
                              if (v174 - 7 == v175)
                                goto LABEL_263;
                              v182 = *(_QWORD *)(v169 + 120 + 8 * v175++);
                            }
                            while (!v182);
                            v181 = v175 + 6;
                          }
                        }
                      }
                    }
                  }
                }
                v173 = (v182 - 1) & v182;
                v177 = __clz(__rbit64(v182)) + (v181 << 6);
                v175 = v181;
              }
              v178 = (uint64_t *)(*(_QWORD *)(v169 + 48) + 16 * v177);
              v179 = *v178;
              v180 = v178[1];
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1B20BEFAC(v179, v180, v222);
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
          }
          if (v140 != 37)
          {
            v183 = v139[7];
            sub_1B19FA2B4(v183, v139[8]);
            swift_release();
            swift_release();
            sub_1B19F9FEC(v183, v140);
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_237;
          }
          v211 = v139[7];
          v141 = v139[3];
          v142 = v139[4];
          v260 = xmmword_1B2295E10;
          v262 = 0;
          v263 = 0;
          v261 = 0;
          swift_bridgeObjectRetain();
          sub_1B1E27CA0(v141, v142, (uint64_t)&v260);
          v143 = sub_1B1E27F14(v141, v142);
          v144 = v143[5];
          v145 = v143[6];
          swift_bridgeObjectRetain();
          swift_retain();
          v146 = swift_isUniquelyReferenced_nonNull_native();
          v231 = *(_QWORD *)(v222 + 264);
          *(_QWORD *)(v222 + 264) = 0x8000000000000000;
          sub_1B1B87484((uint64_t)v143, v144, v145, v146);
          *(_QWORD *)(v222 + 264) = v231;
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_retain();
          swift_retain();
          v147 = swift_bridgeObjectRetain();
          v148 = sub_1B1DFAC8C(v147, v222, v127);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v149 = v148 + 64;
          v150 = 1 << *(_BYTE *)(v148 + 32);
          if (v150 < 64)
            v151 = ~(-1 << v150);
          else
            v151 = -1;
          v152 = v151 & *(_QWORD *)(v148 + 64);
          v153 = (unint64_t)(v150 + 63) >> 6;
          swift_retain();
          v154 = 0;
          while (2)
          {
            if (v152)
            {
              v155 = __clz(__rbit64(v152));
              v152 &= v152 - 1;
              v156 = v155 | (v154 << 6);
LABEL_218:
              v157 = (uint64_t *)(*(_QWORD *)(v148 + 48) + 16 * v156);
              v158 = *v157;
              v159 = v157[1];
              swift_retain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_1B20BF36C(v158, v159, v222);
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              continue;
            }
            break;
          }
          v160 = v154 + 1;
          if (v154 + 1 >= v153)
            goto LABEL_262;
          v161 = *(_QWORD *)(v149 + 8 * v160);
          if (v161)
            goto LABEL_235;
          v160 = v154 + 2;
          if (v154 + 2 >= v153)
            goto LABEL_262;
          v161 = *(_QWORD *)(v149 + 8 * v160);
          if (v161)
            goto LABEL_235;
          v160 = v154 + 3;
          if (v154 + 3 >= v153)
            goto LABEL_262;
          v161 = *(_QWORD *)(v149 + 8 * v160);
          if (v161)
            goto LABEL_235;
          v160 = v154 + 4;
          if (v154 + 4 >= v153)
            goto LABEL_262;
          v161 = *(_QWORD *)(v149 + 8 * v160);
          if (v161)
            goto LABEL_235;
          v160 = v154 + 5;
          if (v154 + 5 >= v153)
            goto LABEL_262;
          v161 = *(_QWORD *)(v149 + 8 * v160);
          if (v161)
            goto LABEL_235;
          v160 = v154 + 6;
          if (v154 + 6 >= v153)
            goto LABEL_262;
          v161 = *(_QWORD *)(v149 + 8 * v160);
          if (v161)
          {
LABEL_235:
            v152 = (v161 - 1) & v161;
            v156 = __clz(__rbit64(v161)) + (v160 << 6);
            v154 = v160;
            goto LABEL_218;
          }
          while (v153 - 7 != v154)
          {
            v161 = *(_QWORD *)(v148 + 120 + 8 * v154++);
            if (v161)
            {
              v160 = v154 + 6;
              goto LABEL_235;
            }
          }
LABEL_262:
          swift_release();
          swift_release();
          swift_release();
          v184 = v211;
          v185 = 37;
LABEL_264:
          sub_1B19F9FEC(v184, v185);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          a1 = &protocol descriptor for Component;
          v7 = v222;
LABEL_265:
          v107 = v218;
          v109 = v220;
          if (v218)
            goto LABEL_151;
LABEL_152:
          v112 = v109 + 1;
          if (v109 + 1 >= v208)
            goto LABEL_144;
          v113 = *(_QWORD *)(v206 + 8 * v112);
          if (!v113)
          {
            v112 = v109 + 2;
            if (v109 + 2 >= v208)
              goto LABEL_144;
            v113 = *(_QWORD *)(v206 + 8 * v112);
            if (!v113)
            {
              v112 = v109 + 3;
              if (v109 + 3 >= v208)
                goto LABEL_144;
              v113 = *(_QWORD *)(v206 + 8 * v112);
              if (!v113)
              {
                v112 = v109 + 4;
                if (v109 + 4 >= v208)
                  goto LABEL_144;
                v113 = *(_QWORD *)(v206 + 8 * v112);
                if (!v113)
                {
                  v112 = v109 + 5;
                  if (v109 + 5 >= v208)
                    goto LABEL_144;
                  v113 = *(_QWORD *)(v206 + 8 * v112);
                  if (!v113)
                  {
                    v112 = v109 + 6;
                    if (v109 + 6 >= v208)
                      goto LABEL_144;
                    v113 = *(_QWORD *)(v206 + 8 * v112);
                    if (!v113)
                    {
                      while (v199 != v109)
                      {
                        v113 = *(_QWORD *)(v216 + 8 * v109++ + 120);
                        if (v113)
                        {
                          v112 = v109 + 6;
                          goto LABEL_167;
                        }
                      }
LABEL_144:
                      swift_release();
                      swift_bridgeObjectRelease();
                      v12 = v203;
                      swift_release();
LABEL_145:
                      if (++v12 == v200)
                        goto LABEL_141;
                      goto LABEL_146;
                    }
                  }
                }
              }
            }
          }
LABEL_167:
          v107 = (v113 - 1) & v113;
          v111 = __clz(__rbit64(v113)) + (v112 << 6);
          v109 = v112;
        }
        a1 = &protocol descriptor for Component;
        v109 = v220;
        v7 = v222;
        v107 = v218;
LABEL_205:
        swift_release();
        swift_bridgeObjectRelease();
LABEL_206:
        swift_release();
        swift_bridgeObjectRelease();
        if (!v107)
          goto LABEL_152;
      }
    }
    if (!v198)
      goto LABEL_141;
    v21 = 0;
    v196 = v20 + 8;
LABEL_18:
    v7 = *(_QWORD *)(v204 + 8 * v21);
    if (!v7)
      goto LABEL_17;
    v202 = v21;
    v22 = *(_QWORD *)(v196 + (v21 << 6));
    v205 = v22 + 64;
    v23 = 1 << *(_BYTE *)(v22 + 32);
    if (v23 < 64)
      v24 = ~(-1 << v23);
    else
      v24 = -1;
    v25 = v24 & *(_QWORD *)(v22 + 64);
    v26 = (unint64_t)(v23 + 63) >> 6;
    v215 = v22;
    swift_bridgeObjectRetain_n();
    swift_retain();
    v27 = 0;
    v207 = v26;
    v201 = v26 - 7;
    a1 = &protocol descriptor for Component;
    v221 = v7;
    if (!v25)
      goto LABEL_24;
LABEL_23:
    v28 = __clz(__rbit64(v25));
    v25 &= v25 - 1;
    v29 = v28 | (v27 << 6);
LABEL_40:
    v32 = 16 * v29;
    v33 = (uint64_t *)(*(_QWORD *)(v215 + 48) + 16 * v29);
    v34 = *v33;
    v4 = **(ValueMetadata ***)(*(_QWORD *)(*(_QWORD *)(v215 + 56) + v32 + 8) + 32);
    v223 = v33[1];
    swift_bridgeObjectRetain();
    swift_retain();
    v6 = (ValueMetadata *)sub_1B2229304();
    if (swift_conformsToProtocol2())
      break;
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
LABEL_276:
    swift_once();
  }
  if (v6 != &type metadata for ColorRampComponent)
  {
    v4 = (ValueMetadata *)sub_1B2229304();
    if (!swift_conformsToProtocol2())
      goto LABEL_273;
    if (v4 != &type metadata for CurveComponent)
      goto LABEL_78;
  }
  v219 = v25;
  v217 = v27;
  v35 = *(_QWORD *)(v7 + 168);
  v225 = v35 + 64;
  v36 = 1 << *(_BYTE *)(v35 + 32);
  if (v36 < 64)
    v37 = ~(-1 << v36);
  else
    v37 = -1;
  v38 = v37 & *(_QWORD *)(v35 + 64);
  v39 = (unint64_t)(v36 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v40 = 0;
  v227 = v39;
  v213 = v39 - 7;
  while (2)
  {
    while (2)
    {
      if (v38)
      {
        v41 = __clz(__rbit64(v38));
        v38 &= v38 - 1;
        v42 = v41 | (v40 << 6);
        goto LABEL_68;
      }
      v43 = v40 + 1;
      if (v40 + 1 >= v227)
        goto LABEL_76;
      v44 = *(_QWORD *)(v225 + 8 * v43);
      if (v44)
        goto LABEL_67;
      v43 = v40 + 2;
      if (v40 + 2 >= v227)
        goto LABEL_76;
      v44 = *(_QWORD *)(v225 + 8 * v43);
      if (v44)
        goto LABEL_67;
      v43 = v40 + 3;
      if (v40 + 3 >= v227)
        goto LABEL_76;
      v44 = *(_QWORD *)(v225 + 8 * v43);
      if (v44)
        goto LABEL_67;
      v43 = v40 + 4;
      if (v40 + 4 >= v227)
        goto LABEL_76;
      v44 = *(_QWORD *)(v225 + 8 * v43);
      if (v44)
        goto LABEL_67;
      v43 = v40 + 5;
      if (v40 + 5 >= v227)
        goto LABEL_76;
      v44 = *(_QWORD *)(v225 + 8 * v43);
      if (v44)
        goto LABEL_67;
      v43 = v40 + 6;
      if (v40 + 6 >= v227)
      {
LABEL_76:
        a1 = &protocol descriptor for Component;
        v25 = v219;
        v7 = v221;
        v27 = v217;
LABEL_77:
        swift_release();
        swift_bridgeObjectRelease();
LABEL_78:
        swift_release();
        swift_bridgeObjectRelease();
        if (!v25)
          goto LABEL_24;
        goto LABEL_23;
      }
      v44 = *(_QWORD *)(v225 + 8 * v43);
      if (v44)
        goto LABEL_67;
      v25 = v219;
      v7 = v221;
      do
      {
        if (v213 == v40)
        {
          a1 = &protocol descriptor for Component;
          v27 = v217;
          goto LABEL_77;
        }
        v44 = *(_QWORD *)(v35 + 120 + 8 * v40++);
      }
      while (!v44);
      v43 = v40 + 6;
LABEL_67:
      v38 = (v44 - 1) & v44;
      v42 = __clz(__rbit64(v44)) + (v43 << 6);
      v40 = v43;
LABEL_68:
      v45 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v42);
      v46 = *(_QWORD *)(v45 + 80);
      if (!sub_1B1C7A1C4(v46))
        continue;
      break;
    }
    v48 = *(_QWORD *)(v46 + 32);
    v47 = *(_QWORD *)(v46 + 40);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    v49 = sub_1B1E27F14(v48, v47);
    swift_bridgeObjectRelease();
    if (!v49)
      goto LABEL_48;
    v51 = v49[5];
    v50 = v49[6];
    swift_bridgeObjectRetain();
    swift_release();
    if (v51 == v34 && v50 == v223)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_81;
    }
    v53 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v53 & 1) == 0)
    {
LABEL_48:
      swift_release();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  swift_release();
LABEL_81:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v54 = *(_QWORD *)(v45 + 80);
  v7 = v221;
  if (!sub_1B1C7A1C4(v54)
    || (v55 = *(_QWORD *)(v54 + 32),
        v56 = *(_QWORD *)(v54 + 40),
        swift_bridgeObjectRetain(),
        v57 = sub_1B1E27F14(v55, v56),
        swift_bridgeObjectRelease(),
        !v57))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
LABEL_109:
    a1 = &protocol descriptor for Component;
    goto LABEL_137;
  }
  v58 = v57[8];
  if (v58 == 28)
  {
    v210 = v57[7];
    v80 = v57[3];
    v81 = v57[4];
    v248 = xmmword_1B2295DA0;
    v250 = 0;
    v251 = 0;
    v249 = 0;
    swift_bridgeObjectRetain();
    sub_1B1E27CA0(v80, v81, (uint64_t)&v248);
    v82 = sub_1B1E27F14(v80, v81);
    v83 = v82[5];
    v84 = v82[6];
    swift_bridgeObjectRetain();
    swift_retain();
    v85 = swift_isUniquelyReferenced_nonNull_native();
    v230 = *(_QWORD *)(v221 + 264);
    *(_QWORD *)(v221 + 264) = 0x8000000000000000;
    sub_1B1B87484((uint64_t)v82, v83, v84, v85);
    *(_QWORD *)(v221 + 264) = v230;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    swift_retain();
    v86 = swift_bridgeObjectRetain();
    v87 = sub_1B1DFAC8C(v86, v221, v45);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v88 = v87 + 64;
    v89 = 1 << *(_BYTE *)(v87 + 32);
    if (v89 < 64)
      v90 = ~(-1 << v89);
    else
      v90 = -1;
    v91 = v90 & *(_QWORD *)(v87 + 64);
    v92 = (unint64_t)(v89 + 63) >> 6;
    swift_retain();
    v93 = 0;
    while (1)
    {
      if (v91)
      {
        v94 = __clz(__rbit64(v91));
        v91 &= v91 - 1;
        v95 = v94 | (v93 << 6);
      }
      else
      {
        v99 = v93 + 1;
        if (v93 + 1 >= v92)
          goto LABEL_135;
        v100 = *(_QWORD *)(v88 + 8 * v99);
        if (!v100)
        {
          v99 = v93 + 2;
          if (v93 + 2 >= v92)
            goto LABEL_135;
          v100 = *(_QWORD *)(v88 + 8 * v99);
          if (!v100)
          {
            v99 = v93 + 3;
            if (v93 + 3 >= v92)
              goto LABEL_135;
            v100 = *(_QWORD *)(v88 + 8 * v99);
            if (!v100)
            {
              v99 = v93 + 4;
              if (v93 + 4 >= v92)
                goto LABEL_135;
              v100 = *(_QWORD *)(v88 + 8 * v99);
              if (!v100)
              {
                v99 = v93 + 5;
                if (v93 + 5 >= v92)
                  goto LABEL_135;
                v100 = *(_QWORD *)(v88 + 8 * v99);
                if (!v100)
                {
                  v99 = v93 + 6;
                  if (v93 + 6 >= v92)
                  {
LABEL_135:
                    swift_release();
                    swift_release();
                    swift_release();
                    v102 = v210;
                    v103 = 28;
                    goto LABEL_136;
                  }
                  v100 = *(_QWORD *)(v88 + 8 * v99);
                  if (!v100)
                  {
                    do
                    {
                      if (v92 - 7 == v93)
                        goto LABEL_135;
                      v100 = *(_QWORD *)(v87 + 120 + 8 * v93++);
                    }
                    while (!v100);
                    v99 = v93 + 6;
                  }
                }
              }
            }
          }
        }
        v91 = (v100 - 1) & v100;
        v95 = __clz(__rbit64(v100)) + (v99 << 6);
        v93 = v99;
      }
      v96 = (uint64_t *)(*(_QWORD *)(v87 + 48) + 16 * v95);
      v97 = *v96;
      v98 = v96[1];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B20BEFAC(v97, v98, v221);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (v58 != 37)
  {
    v101 = v57[7];
    sub_1B19FA2B4(v101, v57[8]);
    swift_release();
    swift_release();
    sub_1B19F9FEC(v101, v58);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_109;
  }
  v209 = v57[7];
  v59 = v57[3];
  v60 = v57[4];
  v252 = xmmword_1B2295E10;
  v254 = 0;
  v255 = 0;
  v253 = 0;
  swift_bridgeObjectRetain();
  sub_1B1E27CA0(v59, v60, (uint64_t)&v252);
  v61 = sub_1B1E27F14(v59, v60);
  v62 = v61[5];
  v63 = v61[6];
  swift_bridgeObjectRetain();
  swift_retain();
  v64 = swift_isUniquelyReferenced_nonNull_native();
  v229 = *(_QWORD *)(v221 + 264);
  *(_QWORD *)(v221 + 264) = 0x8000000000000000;
  sub_1B1B87484((uint64_t)v61, v62, v63, v64);
  *(_QWORD *)(v221 + 264) = v229;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  swift_retain();
  v65 = swift_bridgeObjectRetain();
  v66 = sub_1B1DFAC8C(v65, v221, v45);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v67 = v66 + 64;
  v68 = 1 << *(_BYTE *)(v66 + 32);
  if (v68 < 64)
    v69 = ~(-1 << v68);
  else
    v69 = -1;
  v70 = v69 & *(_QWORD *)(v66 + 64);
  v71 = (unint64_t)(v68 + 63) >> 6;
  swift_retain();
  v72 = 0;
  while (2)
  {
    if (v70)
    {
      v73 = __clz(__rbit64(v70));
      v70 &= v70 - 1;
      v74 = v73 | (v72 << 6);
LABEL_90:
      v75 = (uint64_t *)(*(_QWORD *)(v66 + 48) + 16 * v74);
      v76 = *v75;
      v77 = v75[1];
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B20BF36C(v76, v77, v221);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      continue;
    }
    break;
  }
  v78 = v72 + 1;
  if (v72 + 1 >= v71)
    goto LABEL_134;
  v79 = *(_QWORD *)(v67 + 8 * v78);
  if (v79)
    goto LABEL_107;
  v78 = v72 + 2;
  if (v72 + 2 >= v71)
    goto LABEL_134;
  v79 = *(_QWORD *)(v67 + 8 * v78);
  if (v79)
    goto LABEL_107;
  v78 = v72 + 3;
  if (v72 + 3 >= v71)
    goto LABEL_134;
  v79 = *(_QWORD *)(v67 + 8 * v78);
  if (v79)
    goto LABEL_107;
  v78 = v72 + 4;
  if (v72 + 4 >= v71)
    goto LABEL_134;
  v79 = *(_QWORD *)(v67 + 8 * v78);
  if (v79)
    goto LABEL_107;
  v78 = v72 + 5;
  if (v72 + 5 >= v71)
    goto LABEL_134;
  v79 = *(_QWORD *)(v67 + 8 * v78);
  if (v79)
    goto LABEL_107;
  v78 = v72 + 6;
  if (v72 + 6 >= v71)
    goto LABEL_134;
  v79 = *(_QWORD *)(v67 + 8 * v78);
  if (v79)
  {
LABEL_107:
    v70 = (v79 - 1) & v79;
    v74 = __clz(__rbit64(v79)) + (v78 << 6);
    v72 = v78;
    goto LABEL_90;
  }
  while (v71 - 7 != v72)
  {
    v79 = *(_QWORD *)(v66 + 120 + 8 * v72++);
    if (v79)
    {
      v78 = v72 + 6;
      goto LABEL_107;
    }
  }
LABEL_134:
  swift_release();
  swift_release();
  swift_release();
  v102 = v209;
  v103 = 37;
LABEL_136:
  sub_1B19F9FEC(v102, v103);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  a1 = &protocol descriptor for Component;
  v7 = v221;
LABEL_137:
  v27 = v217;
  v25 = v219;
  if (v219)
    goto LABEL_23;
LABEL_24:
  v30 = v27 + 1;
  if (v27 + 1 >= v207)
    goto LABEL_16;
  v31 = *(_QWORD *)(v205 + 8 * v30);
  if (v31)
    goto LABEL_39;
  v30 = v27 + 2;
  if (v27 + 2 >= v207)
    goto LABEL_16;
  v31 = *(_QWORD *)(v205 + 8 * v30);
  if (v31)
    goto LABEL_39;
  v30 = v27 + 3;
  if (v27 + 3 >= v207)
    goto LABEL_16;
  v31 = *(_QWORD *)(v205 + 8 * v30);
  if (v31)
    goto LABEL_39;
  v30 = v27 + 4;
  if (v27 + 4 >= v207)
    goto LABEL_16;
  v31 = *(_QWORD *)(v205 + 8 * v30);
  if (v31)
    goto LABEL_39;
  v30 = v27 + 5;
  if (v27 + 5 >= v207)
    goto LABEL_16;
  v31 = *(_QWORD *)(v205 + 8 * v30);
  if (v31)
    goto LABEL_39;
  v30 = v27 + 6;
  if (v27 + 6 >= v207)
    goto LABEL_16;
  v31 = *(_QWORD *)(v205 + 8 * v30);
  if (v31)
  {
LABEL_39:
    v25 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v30 << 6);
    v27 = v30;
    goto LABEL_40;
  }
  while (v201 != v27)
  {
    v31 = *(_QWORD *)(v215 + 8 * v27++ + 120);
    if (v31)
    {
      v30 = v27 + 6;
      goto LABEL_39;
    }
  }
LABEL_16:
  swift_release();
  swift_bridgeObjectRelease();
  v19 = v198;
  v21 = v202;
  swift_release();
LABEL_17:
  if (++v21 != v19)
    goto LABEL_18;
LABEL_141:
  sub_1B1F05D48(v194, (unsigned __int16 **)v243, (uint64_t)v247);
  sub_1B1F03804((char *)v195);
  ecs_stack_allocator_pop_snapshot(v192);
  if ((v193 & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v195 + 344));
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v195 + 376));
  }
  swift_release();
  v10 = v191 + 1;
  if (v191 + 1 != v190)
    goto LABEL_10;
  sub_1B19ED720((uint64_t)v233);
  sub_1B1A086DC(v235, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v235, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20A4E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  _OWORD v35[2];
  uint64_t v36;
  _QWORD v37[8];
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  _BYTE v49[40];
  uint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v50 = qword_1ED4D09F8;
  v51 = v7;
  v52 = v6 >> 31;
  v53 = 1;
  v54 = 2;
  v55 = 0;
  swift_retain();
  sub_1B1B12A30(1, 1, (uint64_t)v35);
  swift_release();
  v47[0] = v35[0];
  v47[1] = v35[1];
  v48 = v36;
  sub_1B1E8FCE4(a1, (uint64_t)v47, 0x200000000, v37);
  sub_1B1A18378((uint64_t)v37, (uint64_t)v38, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v38[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v35);
  if (v44 <= 0 || (v28 = v41) == 0)
  {
    sub_1B19ED720((uint64_t)v35);
    return sub_1B1A086DC(v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v8 = v43[4];
  v33 = *(unsigned __int8 *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v45[0] = v38[0];
  v45[1] = v38[1];
  v46 = v39;
  v25 = (uint64_t)(v43 + 6);
  v26 = v40;
  v34 = v43;
  v24 = v43 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v9 = 0;
  v10 = 0;
  v27 = v8;
  do
  {
    v11 = (unsigned int *)(v26 + 48 * v9);
    v30 = *v11;
    v31 = v10;
    v29 = v11[1];
    v12 = (uint64_t *)*((_QWORD *)v11 + 2);
    v32 = *((_QWORD *)v11 + 3);
    v14 = *((_QWORD *)v11 + 4);
    v13 = *((_QWORD *)v11 + 5);
    if (v33)
    {
      v15 = *(os_unfair_lock_s **)(v13 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v15);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v8);
    sub_1B1A18378(v25, (uint64_t)v49, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v16 = v34[4];
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v34[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
    v34[7] = v17;
    v24[1] = 0;
    v24[2] = 0;
    *v24 = 0;
    swift_release();
    v18 = (uint64_t *)sub_1B1A12038((uint64_t)&type metadata for Skybox, (uint64_t)&off_1E63BD078, v12, v32, v14, (uint64_t)v34);
    sub_1B1A12038((uint64_t)&type metadata for IBLGenerator, (uint64_t)&off_1E6375A98, v12, v32, v14, (uint64_t)v34);
    if (v12)
    {
      if (v14)
      {
        v10 = v31;
        do
        {
          v19 = *v18;
          v18 += 4;
          sub_1B1FE16DC((uint64_t)&type metadata for TextureRequireMipmapGeneration, (uint64_t)&off_1E63B5F20, v19);
          --v14;
        }
        while (v14);
        goto LABEL_23;
      }
    }
    else if ((_DWORD)v30 != (_DWORD)v29)
    {
      v20 = &v18[4 * v30];
      v21 = v29 - v30;
      v10 = v31;
      do
      {
        v22 = *v20;
        v20 += 4;
        sub_1B1FE16DC((uint64_t)&type metadata for TextureRequireMipmapGeneration, (uint64_t)&off_1E63B5F20, v22);
        --v21;
      }
      while (v21);
      goto LABEL_23;
    }
    v10 = v31;
LABEL_23:
    sub_1B1F05D48(v34, (unsigned __int16 **)v45, (uint64_t)v49);
    sub_1B1F03804((char *)v13);
    v8 = v27;
    ecs_stack_allocator_pop_snapshot(v27);
    if ((v33 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
    }
    swift_release();
    ++v9;
  }
  while (v9 != v28);
  sub_1B19ED720((uint64_t)v35);
  sub_1B1A086DC(v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v37, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20A5250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  os_unfair_lock_s *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v68;
  unsigned int *v69;
  void *v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v90;
  unsigned int *v91;
  void *v92;
  char v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  unsigned int *v111;
  _UNKNOWN **v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  BOOL v161;
  unsigned int *v162;
  void *v163;
  unint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  unsigned int *v182;
  _UNKNOWN **v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  char v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _UNKNOWN **v198;
  uint64_t v199;
  BOOL v200;
  char v201;
  char v202;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  _UNKNOWN **v226;
  char v227;
  char v228[9];
  uint64_t v229;
  char v230;
  _OWORD v231[2];
  uint64_t v232;
  _QWORD v233[8];
  _OWORD v234[2];
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  _OWORD v241[2];
  uint64_t v242;
  _OWORD v243[2];
  uint64_t v244;
  _BYTE v245[40];
  uint64_t v246;
  int v247;
  char v248;
  uint64_t v249;
  char v250;
  uint64_t v251;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v246 = qword_1ED4D09F8;
  v247 = v7;
  v248 = v6 >> 31;
  v249 = 1;
  v250 = 2;
  v251 = 0;
  swift_retain();
  sub_1B1E3D7C4(3, (uint64_t)v231);
  swift_release();
  v243[0] = v231[0];
  v243[1] = v231[1];
  v244 = v232;
  sub_1B1E8FCE4(a1, (uint64_t)v243, 0x200000000, v233);
  sub_1B1A18378((uint64_t)v233, (uint64_t)v234, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v234[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v231);
  if (v240 <= 0 || (v208 = v237) == 0)
  {
    sub_1B19ED720((uint64_t)v231);
    return sub_1B1A086DC(v233, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v8 = v239[4];
  v211 = *(unsigned __int8 *)(v238 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v241[0] = v234[0];
  v241[1] = v234[1];
  v242 = v235;
  v205 = (uint64_t)(v239 + 6);
  v206 = v236;
  v223 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v214 = OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
  v212 = v239;
  v204 = v239 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v9 = 0;
  v10 = 0;
  v224 = a1;
  v207 = v8;
  do
  {
    v210 = v9;
    v11 = (unsigned int *)(v206 + 48 * v9);
    v12 = *v11;
    v215 = v11[1];
    v14 = (uint64_t *)*((_QWORD *)v11 + 2);
    v13 = *((_QWORD *)v11 + 3);
    v16 = *((_QWORD *)v11 + 4);
    v15 = *((_QWORD *)v11 + 5);
    v222 = v10;
    if (v211)
    {
      v17 = *(os_unfair_lock_s **)(v15 + 376);
      swift_retain();
      os_unfair_lock_lock(v17);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v8);
    sub_1B1A18378(v205, (uint64_t)v245, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v18 = v212[4];
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v212[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
    v212[7] = v19;
    v204[1] = 0;
    v204[2] = 0;
    *v204 = 0;
    swift_release();
    v209 = v15;
    v216 = sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v14, v13, v16, (uint64_t)v212);
    if (!v14)
    {
      if ((_DWORD)v12 == (_DWORD)v215)
        goto LABEL_181;
      v120 = v224;
      while (1)
      {
        v219 = v12;
        v123 = (uint64_t *)(v216 + 88 * v12);
        v124 = *v123;
        v125 = MEMORY[0x1E0DEE9D8];
        v225 = MEMORY[0x1E0DEE9D8];
        v126 = *(_QWORD *)(v124 + 16);
        v221 = v123;
        if (v126)
        {
          v127 = v124 + 32;
          swift_bridgeObjectRetain();
          v128 = 0;
          while (1)
          {
            v129 = (unsigned int *)(v127 + 8 * v128);
            v130 = v129[1];
            v131 = (int)*v129;
            v132 = *v129;
            v133 = (_DWORD)v131 == -1 && (_DWORD)v130 == 0;
            if (v133 || (v132 & 0x80000000) != 0 || v223[1] <= v131)
              break;
            v134 = *v223;
            v135 = *v223 + 12 * (int)v131;
            v136 = (_DWORD)v130 == -1 || *(_DWORD *)(v135 + 8) == (_DWORD)v130;
            v137 = v136;
            if (!v136)
              goto LABEL_215;
            v138 = *(_QWORD *)(*(_QWORD *)(v120 + 136) + 8 * *(int *)(v134 + 12 * (int)v131) + 32);
            v139 = *(_QWORD *)(v138 + 48);
            v140 = *(_QWORD *)(v139 + 16);
            if (!v140)
              goto LABEL_215;
            v141 = *(__int16 *)(v135 + 4);
            v142 = (_QWORD *)(v139 + 56);
            while ((ValueMetadata *)*(v142 - 3) != &type metadata for GraphScriptingConfig)
            {
              v142 += 5;
              if (!--v140)
                goto LABEL_215;
            }
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 128) + *v142 + 32 * v141 + 8) + 16))
            {
LABEL_215:
              LOBYTE(v229) = 0;
              v230 = 0;
              if (v137)
              {
                v146 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v120 + 80)
                                                         + 8 * *(__int16 *)(v134 + 12 * (int)v131 + 6)
                                                         + 32)
                                             + 16)
                                 + 32);
                v147 = *(_QWORD *)(v146 + 16);
                if (v147)
                {
                  swift_retain();
                  swift_retain();
                  v148 = (uint64_t *)(v146 + 40);
                  do
                  {
                    sub_1B20BE2B8((ValueMetadata *)*(v148 - 1), *v148, &v230, &v229);
                    v148 += 2;
                    --v147;
                  }
                  while (v147);
                  swift_release();
                  swift_release();
                  v120 = v224;
                  if ((v229 & 1) != 0)
                    goto LABEL_209;
                }
                else
                {
                  v120 = v224;
                }
              }
LABEL_208:
              sub_1B1FE1E1C((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v132 | (v130 << 32), 0);
LABEL_209:
              v143 = v131 | ((unint64_t)v130 << 32);
              if ((v230 & 1) == 0)
                sub_1B1FE1E1C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v143, 0);
              sub_1B1CD6360();
              v144 = *(_QWORD *)(v225 + 16);
              sub_1B1CD63E0(v144);
              v145 = sub_1B1CD6448(v144, v143);
              nullsub_16(v145);
              goto LABEL_212;
            }
            sub_1B1DA4B24(v132 | (v130 << 32));
LABEL_212:
            if (++v128 == v126)
            {
              swift_bridgeObjectRelease();
              v149 = v225;
              v123 = v221;
              v125 = MEMORY[0x1E0DEE9D8];
              goto LABEL_224;
            }
          }
          v230 = 0;
          goto LABEL_208;
        }
        v149 = MEMORY[0x1E0DEE9D8];
LABEL_224:
        swift_bridgeObjectRelease();
        *v123 = v149;
        v150 = v123[1];
        v229 = v125;
        v151 = *(_QWORD *)(v150 + 16);
        v152 = v223;
        if (v151)
        {
          v153 = v150 + 32;
          swift_bridgeObjectRetain();
          v154 = 0;
          v155 = v224;
          while (1)
          {
            v156 = (unsigned int *)(v153 + 8 * v154);
            v157 = v156[1];
            v158 = (int)*v156;
            v159 = *v156;
            if ((_DWORD)v158 == -1 && (_DWORD)v157 == 0)
            {
              v230 = 0;
              goto LABEL_242;
            }
            if ((v159 & 0x80000000) != 0
              || v152[1] <= v158
              || ((_DWORD)v157 != -1 ? (v161 = *(_DWORD *)(*v152 + 12 * (int)v158 + 8) == (_DWORD)v157) : (v161 = 1),
                  !v161))
            {
              LOBYTE(v225) = 0;
              v230 = 0;
              if ((v159 & 0x80000000) == 0)
                goto LABEL_250;
              goto LABEL_242;
            }
            v162 = (unsigned int *)(*v152 + 12 * (int)v158);
            sub_1B1D1CF18(*(_QWORD *)(*(_QWORD *)(v155 + 136) + 8 * (int)*v162 + 32), *v162 | ((unint64_t)*((unsigned __int16 *)v162 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v162 + 2) << 32), 32, v155, (uint64_t)&v225);
            if (!v226)
              break;
            v163 = v226[2];
            sub_1B1B0BC78(v225, (uint64_t)v226);
            if (v163)
            {
              LOBYTE(v225) = 0;
              v230 = 0;
              v152 = v223;
              v155 = v224;
              if ((v159 & 0x80000000) != 0)
                goto LABEL_242;
LABEL_250:
              if (v152[1] > v158 && ((_DWORD)v157 == -1 || *(_DWORD *)(*v152 + 12 * (int)v158 + 8) == (_DWORD)v157))
              {
                v169 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v155 + 80)
                                                         + 8 * *(__int16 *)(*v152 + 12 * (int)v158 + 6)
                                                         + 32)
                                             + 16)
                                 + 32);
                v170 = *(_QWORD *)(v169 + 16);
                if (!v170)
                {
                  v155 = v224;
                  goto LABEL_242;
                }
                swift_retain();
                swift_retain();
                v171 = (uint64_t *)(v169 + 40);
                do
                {
                  sub_1B20BE2B8((ValueMetadata *)*(v171 - 1), *v171, &v230, &v225);
                  v171 += 2;
                  --v170;
                }
                while (v170);
                swift_release();
                swift_release();
                v152 = v223;
                v155 = v224;
                if ((v225 & 1) != 0)
                {
LABEL_243:
                  if (v230 == 1)
                  {
                    v164 = v158 | ((unint64_t)v157 << 32);
                  }
                  else
                  {
                    v165 = sub_1B189E944();
                    v164 = v159 | (v157 << 32);
                    sub_1B1FE1E1C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v164, v165 & 1);
                  }
                  sub_1B1CD6360();
                  v166 = *(_QWORD *)(v229 + 16);
                  sub_1B1CD63E0(v166);
                  v167 = sub_1B1CD6448(v166, v164);
                  nullsub_16(v167);
                  goto LABEL_247;
                }
              }
LABEL_242:
              sub_1B1FE1E1C((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v159 | (v157 << 32), 0);
              goto LABEL_243;
            }
            v155 = v224;
            sub_1B1DA4B24(v159 | (v157 << 32));
            v152 = v223;
LABEL_247:
            if (++v154 == v151)
            {
              swift_bridgeObjectRelease();
              v172 = v229;
              v173 = v221;
              v125 = MEMORY[0x1E0DEE9D8];
              goto LABEL_266;
            }
          }
          LOBYTE(v225) = 0;
          v230 = 0;
          v152 = v223;
          if ((v159 & 0x80000000) == 0)
            goto LABEL_250;
          goto LABEL_242;
        }
        v172 = v125;
        v173 = v221;
LABEL_266:
        swift_bridgeObjectRelease();
        v173[1] = v172;
        v174 = v173[2];
        v229 = v125;
        v175 = *(_QWORD *)(v174 + 16);
        if (v175)
          break;
        v191 = v125;
        v122 = v221;
LABEL_291:
        swift_bridgeObjectRelease();
        v122[2] = v191;
        v192 = v122[3];
        v229 = v125;
        v193 = *(_QWORD *)(v192 + 16);
        if (v193)
        {
          swift_bridgeObjectRetain();
          v194 = v192 + 36;
          do
          {
            v197 = *(_QWORD *)(v194 - 4);
            sub_1B1D165B4(v197, (uint64_t)&v225);
            v198 = v226;
            if (v226 && (v199 = v225, v200 = sub_1B1BF9110((uint64_t)v226), sub_1B1B0BC78(v199, (uint64_t)v198), v200))
            {
              sub_1B1DA4B24(v197);
            }
            else
            {
              LOBYTE(v225) = 0;
              v230 = 0;
              sub_1B1FDF0C8(v197, v224, &v230, &v225);
              if ((v225 & 1) == 0)
              {
                v201 = sub_1B189E944();
                sub_1B1FE1E1C((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v197, v201 & 1);
              }
              if ((v230 & 1) == 0)
              {
                v202 = sub_1B189E944();
                sub_1B1FE1E1C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v197, v202 & 1);
              }
              sub_1B1CD6360();
              v195 = *(_QWORD *)(v229 + 16);
              sub_1B1CD63E0(v195);
              v196 = sub_1B1CD6448(v195, v197);
              nullsub_16(v196);
            }
            v194 += 8;
            --v193;
          }
          while (v193);
          swift_bridgeObjectRelease();
          v121 = v229;
          v122 = v221;
        }
        else
        {
          v121 = v125;
        }
        v12 = v219 + 1;
        swift_bridgeObjectRelease();
        v122[3] = v121;
        v120 = v224;
        if (v219 + 1 == v215)
          goto LABEL_181;
      }
      v176 = (unsigned int *)(swift_bridgeObjectRetain() + 36);
      while (1)
      {
        v177 = (int)*(v176 - 1);
        v178 = *v176;
        v179 = *(v176 - 1);
        v180 = (_DWORD)v177 == -1 && (_DWORD)v178 == 0;
        if (v180 || (v177 & 0x80000000) != 0 || v152[1] <= v177)
          goto LABEL_283;
        if ((_DWORD)v178 != -1 && *(_DWORD *)(*v152 + 12 * (int)v177 + 8) != (_DWORD)v178)
          goto LABEL_283;
        v182 = (unsigned int *)(*v152 + 12 * (int)v177);
        sub_1B1D1CF18(*(_QWORD *)(*(_QWORD *)(v224 + 136) + 8 * (int)*v182 + 32), *v182 | ((unint64_t)*((unsigned __int16 *)v182 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v182+ 2) << 32), 32, v224, (uint64_t)&v225);
        v183 = v226;
        if (!v226)
          break;
        v184 = v225;
        v185 = sub_1B1BF9110((uint64_t)v226);
        sub_1B1B0BC78(v184, (uint64_t)v183);
        v152 = v223;
        if (!v185)
          goto LABEL_283;
        sub_1B1DA4B24(v179 | (v178 << 32));
LABEL_288:
        v176 += 2;
        if (!--v175)
        {
          swift_bridgeObjectRelease();
          v191 = v229;
          v122 = v221;
          v125 = MEMORY[0x1E0DEE9D8];
          goto LABEL_291;
        }
      }
      v152 = v223;
LABEL_283:
      LOBYTE(v225) = 0;
      v230 = 0;
      v186 = v179 | (v178 << 32);
      sub_1B1FDF0C8(v186, v224, &v230, &v225);
      if ((v225 & 1) == 0)
      {
        v187 = sub_1B189E944();
        sub_1B1FE1E1C((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v186, v187 & 1);
      }
      if ((v230 & 1) == 0)
      {
        v188 = sub_1B189E944();
        sub_1B1FE1E1C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v186, v188 & 1);
      }
      sub_1B1CD6360();
      v189 = *(_QWORD *)(v229 + 16);
      sub_1B1CD63E0(v189);
      v190 = sub_1B1CD6448(v189, v186);
      nullsub_16(v190);
      goto LABEL_288;
    }
    v20 = v223;
    if (v16)
    {
      v21 = 0;
      v22 = v224;
      v213 = v16;
      do
      {
        v218 = v21;
        v220 = (_QWORD *)(v216 + 88 * v21);
        v24 = *v220;
        v25 = MEMORY[0x1E0DEE9D8];
        v229 = MEMORY[0x1E0DEE9D8];
        v26 = *(_QWORD *)(v24 + 16);
        if (v26)
        {
          v27 = v24 + 32;
          swift_bridgeObjectRetain();
          v28 = 0;
          v217 = v27;
          while (1)
          {
            v29 = (unsigned int *)(v27 + 8 * v28);
            v30 = v29[1];
            v31 = (int)*v29;
            v32 = *v29;
            if ((_DWORD)v31 == -1 && (_DWORD)v30 == 0)
            {
LABEL_66:
              v53 = v32 | (v30 << 32);
              sub_1B1FE1E1C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v53, 0);
              goto LABEL_67;
            }
            if ((v32 & 0x80000000) != 0 || v223[1] <= v31)
            {
              v230 = 0;
              v228[0] = 0;
              if ((v32 & 0x80000000) != 0)
                goto LABEL_64;
            }
            else
            {
              v34 = *v223;
              v35 = *v223 + 12 * (int)v31;
              v36 = (_DWORD)v30 == -1 || *(_DWORD *)(v35 + 8) == (_DWORD)v30;
              v37 = v36;
              if (v36)
              {
                v38 = *(_QWORD *)(*(_QWORD *)(v22 + 136) + 8 * *(int *)(v34 + 12 * (int)v31) + 32);
                v39 = *(_QWORD *)(v38 + 48);
                v40 = *(_QWORD *)(v39 + 16);
                if (v40)
                {
                  v41 = *(__int16 *)(v35 + 4);
                  v42 = (_QWORD *)(v39 + 56);
                  while ((ValueMetadata *)*(v42 - 3) != &type metadata for GraphScriptingConfig)
                  {
                    v42 += 5;
                    if (!--v40)
                      goto LABEL_43;
                  }
                  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 128) + *v42 + 32 * v41 + 8) + 16))
                  {
                    sub_1B1DA4B24(v32 | (v30 << 32));
                    goto LABEL_68;
                  }
                }
              }
LABEL_43:
              v230 = 0;
              v228[0] = 0;
              if (v37)
              {
                v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 80)
                                                        + 8 * *(__int16 *)(v34 + 12 * (int)v31 + 6)
                                                        + 32)
                                            + 16)
                                + 32);
                v44 = *(_QWORD *)(v43 + 16);
                if (!v44)
                {
                  v22 = v224;
                  if ((v32 & 0x80000000) != 0)
                    goto LABEL_64;
                  goto LABEL_49;
                }
                swift_retain();
                swift_retain();
                v45 = (uint64_t *)(v43 + 40);
                do
                {
                  sub_1B20BE2B8((ValueMetadata *)*(v45 - 1), *v45, v228, &v230);
                  v45 += 2;
                  --v44;
                }
                while (v44);
                swift_release();
                swift_release();
                v22 = v224;
                if ((v230 & 1) != 0)
                  goto LABEL_64;
              }
              if ((v32 & 0x80000000) != 0)
                goto LABEL_64;
            }
LABEL_49:
            if (v223[1] > v31)
            {
              v46 = *v223;
              if ((_DWORD)v30 == -1 || *(_DWORD *)(v46 + 12 * (int)v31 + 8) == (_DWORD)v30)
              {
                v47 = (int *)(v46 + 12 * (int)v31);
                v48 = *((__int16 *)v47 + 2);
                v49 = *(_QWORD *)(*(_QWORD *)(v22 + 136) + 8 * *v47 + 32);
                if (*(_QWORD *)(v49 + 232) <= v48 && *(_QWORD *)(v49 + 240) > v48)
                {
                  v51 = **(_QWORD **)(v22 + v214);
                  v52 = *(os_unfair_lock_s **)(v49 + 344);
                  swift_retain();
                  os_unfair_lock_lock(v52);
                  ecs_stack_allocator_push_snapshot(*(_QWORD *)(v51 + 32));
                  if (sub_1B1E36538((uint64_t)&type metadata for Parent))
                  {
                    v225 = (uint64_t)&type metadata for Parent;
                    v226 = &off_1E63BB8E8;
                    v227 = 1;
                    swift_retain();
                    sub_1B1F05960((uint64_t *)(v51 + 104), (uint64_t)&v225, v48, 0, v49, v51);
                    sub_1B1B68F14((uint64_t)&v225);
                  }
                  else
                  {
                    swift_retain();
                  }
                  sub_1B1F03804((char *)v49);
                  swift_release();
                  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v51 + 32));
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 344));
                  swift_release();
                  v27 = v217;
                }
              }
            }
LABEL_64:
            if (v228[0] != 1)
              goto LABEL_66;
            v53 = v31 | ((unint64_t)v30 << 32);
LABEL_67:
            sub_1B1CD6360();
            v54 = *(_QWORD *)(v229 + 16);
            sub_1B1CD63E0(v54);
            v55 = sub_1B1CD6448(v54, v53);
            nullsub_16(v55);
LABEL_68:
            if (++v28 == v26)
            {
              swift_bridgeObjectRelease();
              v56 = v229;
              v57 = v220;
              v20 = v223;
              v25 = MEMORY[0x1E0DEE9D8];
              goto LABEL_72;
            }
          }
        }
        v56 = MEMORY[0x1E0DEE9D8];
        v57 = (_QWORD *)(v216 + 88 * v21);
LABEL_72:
        swift_bridgeObjectRelease();
        *v57 = v56;
        v58 = v57[1];
        v229 = v25;
        v59 = *(_QWORD *)(v58 + 16);
        if (v59)
        {
          v60 = v58 + 32;
          swift_bridgeObjectRetain();
          v61 = 0;
          v62 = v224;
          while (1)
          {
            v63 = (unsigned int *)(v60 + 8 * v61);
            v64 = v63[1];
            v65 = (int)*v63;
            v66 = *v63;
            if ((_DWORD)v65 == -1 && (_DWORD)v64 == 0)
            {
              v230 = 0;
              goto LABEL_90;
            }
            if ((v66 & 0x80000000) != 0
              || v20[1] <= v65
              || ((_DWORD)v64 != -1 ? (v68 = *(_DWORD *)(*v20 + 12 * (int)v65 + 8) == (_DWORD)v64) : (v68 = 1), !v68))
            {
              LOBYTE(v225) = 0;
              v230 = 0;
              if ((v66 & 0x80000000) == 0)
                goto LABEL_98;
              goto LABEL_90;
            }
            v69 = (unsigned int *)(*v20 + 12 * (int)v65);
            sub_1B1D1CF18(*(_QWORD *)(*(_QWORD *)(v62 + 136) + 8 * (int)*v69 + 32), *v69 | ((unint64_t)*((unsigned __int16 *)v69 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v69 + 2) << 32), 32, v62, (uint64_t)&v225);
            if (!v226)
              break;
            v70 = v226[2];
            sub_1B1B0BC78(v225, (uint64_t)v226);
            if (v70)
            {
              LOBYTE(v225) = 0;
              v230 = 0;
              v20 = v223;
              v62 = v224;
              if ((v66 & 0x80000000) != 0)
                goto LABEL_90;
LABEL_98:
              if (v20[1] > v65 && ((_DWORD)v64 == -1 || *(_DWORD *)(*v20 + 12 * (int)v65 + 8) == (_DWORD)v64))
              {
                v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v62 + 80)
                                                        + 8 * *(__int16 *)(*v20 + 12 * (int)v65 + 6)
                                                        + 32)
                                            + 16)
                                + 32);
                v77 = *(_QWORD *)(v76 + 16);
                if (!v77)
                {
                  v62 = v224;
                  goto LABEL_90;
                }
                swift_retain();
                swift_retain();
                v78 = (uint64_t *)(v76 + 40);
                do
                {
                  sub_1B20BE2B8((ValueMetadata *)*(v78 - 1), *v78, &v230, &v225);
                  v78 += 2;
                  --v77;
                }
                while (v77);
                swift_release();
                swift_release();
                v20 = v223;
                v62 = v224;
                if ((v225 & 1) != 0)
                {
LABEL_91:
                  if (v230 == 1)
                  {
                    v71 = v65 | ((unint64_t)v64 << 32);
                  }
                  else
                  {
                    v72 = sub_1B189E944();
                    v71 = v66 | (v64 << 32);
                    sub_1B1FE1E1C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v71, v72 & 1);
                  }
                  sub_1B1CD6360();
                  v73 = *(_QWORD *)(v229 + 16);
                  sub_1B1CD63E0(v73);
                  v74 = sub_1B1CD6448(v73, v71);
                  nullsub_16(v74);
                  goto LABEL_95;
                }
              }
LABEL_90:
              sub_1B1FE1E1C((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v66 | (v64 << 32), 0);
              goto LABEL_91;
            }
            v62 = v224;
            sub_1B1DA4B24(v66 | (v64 << 32));
            v20 = v223;
LABEL_95:
            if (++v61 == v59)
            {
              swift_bridgeObjectRelease();
              v79 = v229;
              v57 = v220;
              v25 = MEMORY[0x1E0DEE9D8];
              goto LABEL_114;
            }
          }
          LOBYTE(v225) = 0;
          v230 = 0;
          v20 = v223;
          if ((v66 & 0x80000000) == 0)
            goto LABEL_98;
          goto LABEL_90;
        }
        v79 = v25;
LABEL_114:
        swift_bridgeObjectRelease();
        v57[1] = v79;
        v80 = v57[2];
        v229 = v25;
        v81 = *(_QWORD *)(v80 + 16);
        if (v81)
        {
          v82 = v80 + 32;
          swift_bridgeObjectRetain();
          v83 = 0;
          v84 = v224;
          while (1)
          {
            v85 = (unsigned int *)(v82 + 8 * v83);
            v86 = v85[1];
            v87 = (int)*v85;
            v88 = *v85;
            if ((_DWORD)v87 == -1 && (_DWORD)v86 == 0)
            {
              v230 = 0;
              goto LABEL_132;
            }
            if ((v88 & 0x80000000) != 0
              || v20[1] <= v87
              || ((_DWORD)v86 != -1 ? (v90 = *(_DWORD *)(*v20 + 12 * (int)v87 + 8) == (_DWORD)v86) : (v90 = 1), !v90))
            {
              LOBYTE(v225) = 0;
              v230 = 0;
              if ((v88 & 0x80000000) == 0)
                goto LABEL_140;
              goto LABEL_132;
            }
            v91 = (unsigned int *)(*v20 + 12 * (int)v87);
            sub_1B1D1CF18(*(_QWORD *)(*(_QWORD *)(v84 + 136) + 8 * (int)*v91 + 32), *v91 | ((unint64_t)*((unsigned __int16 *)v91 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v91 + 2) << 32), 32, v84, (uint64_t)&v225);
            if (!v226)
              break;
            v92 = v226[2];
            sub_1B1B0BC78(v225, (uint64_t)v226);
            if (v92)
            {
              LOBYTE(v225) = 0;
              v230 = 0;
              v20 = v223;
              v84 = v224;
              if ((v88 & 0x80000000) != 0)
                goto LABEL_132;
LABEL_140:
              if (v20[1] > v87 && ((_DWORD)v86 == -1 || *(_DWORD *)(*v20 + 12 * (int)v87 + 8) == (_DWORD)v86))
              {
                v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v84 + 80)
                                                        + 8 * *(__int16 *)(*v20 + 12 * (int)v87 + 6)
                                                        + 32)
                                            + 16)
                                + 32);
                v100 = *(_QWORD *)(v99 + 16);
                if (!v100)
                {
                  v84 = v224;
                  goto LABEL_132;
                }
                swift_retain();
                swift_retain();
                v101 = (uint64_t *)(v99 + 40);
                do
                {
                  sub_1B20BE2B8((ValueMetadata *)*(v101 - 1), *v101, &v230, &v225);
                  v101 += 2;
                  --v100;
                }
                while (v100);
                swift_release();
                swift_release();
                v20 = v223;
                v84 = v224;
                if ((v225 & 1) != 0)
                {
LABEL_133:
                  if (v230 == 1)
                  {
                    v94 = v87 | ((unint64_t)v86 << 32);
                  }
                  else
                  {
                    v95 = sub_1B189E944();
                    v94 = v88 | (v86 << 32);
                    sub_1B1FE1E1C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v94, v95 & 1);
                  }
                  sub_1B1CD6360();
                  v96 = *(_QWORD *)(v229 + 16);
                  sub_1B1CD63E0(v96);
                  v97 = sub_1B1CD6448(v96, v94);
                  nullsub_16(v97);
                  goto LABEL_137;
                }
              }
LABEL_132:
              v93 = sub_1B189E944();
              sub_1B1FE1E1C((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v88 | (v86 << 32), v93 & 1);
              goto LABEL_133;
            }
            v84 = v224;
            sub_1B1DA4B24(v88 | (v86 << 32));
            v20 = v223;
LABEL_137:
            if (++v83 == v81)
            {
              swift_bridgeObjectRelease();
              v102 = v229;
              v57 = v220;
              v25 = MEMORY[0x1E0DEE9D8];
              goto LABEL_156;
            }
          }
          LOBYTE(v225) = 0;
          v230 = 0;
          v20 = v223;
          if ((v88 & 0x80000000) == 0)
            goto LABEL_140;
          goto LABEL_132;
        }
        v102 = v25;
LABEL_156:
        swift_bridgeObjectRelease();
        v57[2] = v102;
        v103 = v57[3];
        v229 = v25;
        v104 = *(_QWORD *)(v103 + 16);
        if (!v104)
        {
          v23 = v25;
          goto LABEL_18;
        }
        v105 = (unsigned int *)(swift_bridgeObjectRetain() + 36);
        do
        {
          v106 = (int)*(v105 - 1);
          v107 = *v105;
          v108 = *(v105 - 1);
          v109 = (_DWORD)v106 == -1 && (_DWORD)v107 == 0;
          if (!v109
            && (v106 & 0x80000000) == 0
            && v20[1] > v106
            && ((_DWORD)v107 == -1 || *(_DWORD *)(*v20 + 12 * (int)v106 + 8) == (_DWORD)v107))
          {
            v111 = (unsigned int *)(*v20 + 12 * (int)v106);
            sub_1B1D1CF18(*(_QWORD *)(*(_QWORD *)(v224 + 136) + 8 * (int)*v111 + 32), *v111 | ((unint64_t)*((unsigned __int16 *)v111 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v111 + 2) << 32), 32, v224, (uint64_t)&v225);
            v112 = v226;
            if (v226)
            {
              v113 = v225;
              v114 = sub_1B1BF9110((uint64_t)v226);
              sub_1B1B0BC78(v113, (uint64_t)v112);
              v20 = v223;
              if (v114)
              {
                sub_1B1DA4B24(v108 | (v107 << 32));
                goto LABEL_178;
              }
            }
            else
            {
              v20 = v223;
            }
          }
          LOBYTE(v225) = 0;
          v230 = 0;
          v115 = v108 | (v107 << 32);
          sub_1B1FDF0C8(v115, v224, &v230, &v225);
          if ((v225 & 1) == 0)
          {
            v116 = sub_1B189E944();
            sub_1B1FE1E1C((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v115, v116 & 1);
          }
          if ((v230 & 1) == 0)
          {
            v117 = sub_1B189E944();
            sub_1B1FE1E1C((uint64_t)&type metadata for PropagateDirtiness, (uint64_t)&off_1E6395A98, v115, v117 & 1);
          }
          sub_1B1CD6360();
          v118 = *(_QWORD *)(v229 + 16);
          sub_1B1CD63E0(v118);
          v119 = sub_1B1CD6448(v118, v115);
          nullsub_16(v119);
LABEL_178:
          v105 += 2;
          --v104;
        }
        while (v104);
        swift_bridgeObjectRelease();
        v23 = v229;
        v57 = v220;
LABEL_18:
        swift_bridgeObjectRelease();
        v57[3] = v23;
        v21 = v218 + 1;
        v22 = v224;
      }
      while (v218 + 1 != v213);
    }
LABEL_181:
    v10 = v222;
    sub_1B1F05D48(v212, (unsigned __int16 **)v241, (uint64_t)v245);
    sub_1B1F03804((char *)v209);
    v8 = v207;
    ecs_stack_allocator_pop_snapshot(v207);
    if ((v211 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v209 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v209 + 376));
    }
    swift_release();
    v9 = v210 + 1;
  }
  while (v210 + 1 != v208);
  sub_1B19ED720((uint64_t)v231);
  sub_1B1A086DC(v233, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v233, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

void sub_1B20A6960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x10000000000) != 0)
  {
    sub_1B20BE354(0.0078125, (float32x4_t)xmmword_1B22B8C70, 7368532, 0xE300000000000000, a1);
    sub_1B20BE354(-0.0078125, (float32x4_t)xmmword_1B22B8C80, 0x6D6F74746F42, 0xE600000000000000, a1);
    sub_1B20BE354(COERCE_DOUBLE(3212836864), (float32x4_t)xmmword_1B22B8C90, 1952867660, 0xE400000000000000, a1);
    sub_1B20BE354(COERCE_DOUBLE(1065353216), (float32x4_t)xmmword_1B22B8CA0, 0x7468676952, 0xE500000000000000, a1);
    sub_1B20BE354(0.0, (float32x4_t)0, 0x746E6F7246, 0xE500000000000000, a1);
    sub_1B20BE354(0.0, (float32x4_t)xmmword_1B22B8CB0, 1801675074, 0xE400000000000000, a1);
  }
}

_QWORD *sub_1B20A6A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD v112[2];
  uint64_t v113;
  _QWORD v114[8];
  _OWORD v115[2];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _OWORD v122[2];
  uint64_t v123;
  _OWORD v124[2];
  uint64_t v125;
  _BYTE v126[40];
  uint64_t v127;
  int v128;
  char v129;
  uint64_t v130;
  char v131;
  uint64_t v132;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v127 = qword_1ED4D09F8;
  v128 = v7;
  v129 = v6 >> 31;
  v130 = 1;
  v131 = 2;
  v132 = 0;
  swift_retain();
  sub_1B1E3C60C(3, (uint64_t)v112);
  swift_release();
  v124[0] = v112[0];
  v124[1] = v112[1];
  v125 = v113;
  sub_1B1E8FCE4(a1, (uint64_t)v124, 0x200000000, v114);
  sub_1B1A18378((uint64_t)v114, (uint64_t)v115, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v115[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v112);
  if (v121 > 0 && (v98 = v118) != 0)
  {
    v8 = v120;
    v9 = v120[4];
    v10 = *(unsigned __int8 *)(v119 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v122[0] = v115[0];
    v122[1] = v115[1];
    v123 = v116;
    v93 = (uint64_t)(v120 + 6);
    v94 = v117;
    v92 = v120 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    v11 = 0;
    v96 = v9;
    v97 = v8;
    v95 = v10;
    do
    {
      v99 = v11;
      v12 = (unsigned int *)(v94 + 48 * v11);
      v13 = *v12;
      v14 = v12[1];
      v15 = (uint64_t *)*((_QWORD *)v12 + 2);
      v16 = *((_QWORD *)v12 + 3);
      v17 = *((_QWORD *)v12 + 5);
      v102 = *((_QWORD *)v12 + 4);
      if (v10)
      {
        v18 = *(os_unfair_lock_s **)(v17 + 376);
        swift_retain();
        os_unfair_lock_lock(v18);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v9);
      sub_1B1A18378(v93, (uint64_t)v126, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v19 = v8[4];
      v101 = v17;
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v8[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
      v8[7] = v20;
      v92[1] = 0;
      v92[2] = 0;
      *v92 = 0;
      swift_release();
      v21 = v102;
      v105 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v15, v16, v102, (uint64_t)v8);
      if (v15)
      {
        v22 = MEMORY[0x1E0DEE9D8];
        if (v102)
        {
          v23 = 0;
          do
          {
            v24 = v105 + (v23 << 6);
            if (*(_QWORD *)(v24 + 40))
            {
              swift_bridgeObjectRelease();
              *(_QWORD *)(v24 + 40) = v22;
            }
            swift_bridgeObjectRelease();
            *(_QWORD *)(v24 + 48) = v22;
            v25 = *(_QWORD *)(v24 + 40);
            if (v25)
            {
              v26 = *(_QWORD *)(v25 + 16);
              if (v26)
              {
                v103 = v23;
                v27 = v25 + 32;
                swift_bridgeObjectRetain_n();
                v28 = 0;
                v106 = v27;
                v108 = v26;
                do
                {
                  v29 = *(_QWORD *)(v24 + 8);
                  if (*(_QWORD *)(v29 + 16))
                  {
                    v30 = (uint64_t *)(v27 + 24 * v28);
                    v32 = v30[1];
                    v31 = v30[2];
                    v33 = *v30;
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain();
                    v34 = sub_1B1DC3B00(v33, v32);
                    if ((v35 & 1) != 0)
                    {
                      v36 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 16 * v34);
                      v37 = *v36;
                      v110 = v36[1];
                      swift_retain();
                      swift_bridgeObjectRelease();
                      v38 = *(_QWORD *)(v31 + 16);
                      if (v38)
                      {
                        swift_bridgeObjectRetain_n();
                        v39 = (uint64_t *)(v31 + 40);
                        v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                        do
                        {
                          v41 = *(_QWORD *)v24;
                          if (*(_QWORD *)(*(_QWORD *)v24 + 16))
                          {
                            v42 = *(v39 - 1);
                            v43 = *v39;
                            swift_bridgeObjectRetain_n();
                            v44 = sub_1B1DC3B00(v42, v43);
                            if ((v45 & 1) != 0)
                            {
                              v46 = (uint64_t *)(*(_QWORD *)(v41 + 56) + 16 * v44);
                              v47 = *v46;
                              v48 = v46[1];
                              swift_retain();
                              swift_bridgeObjectRelease_n();
                              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                v40 = sub_1B1C66A74(0, v40[2] + 1, 1, v40);
                              v50 = v40[2];
                              v49 = v40[3];
                              if (v50 >= v49 >> 1)
                                v40 = sub_1B1C66A74(v49 > 1, v50 + 1, 1, v40);
                              v40[2] = v50 + 1;
                              v51 = &v40[2 * v50];
                              v51[4] = v47;
                              v51[5] = v48;
                            }
                            else
                            {
                              swift_bridgeObjectRelease_n();
                            }
                          }
                          v39 += 2;
                          --v38;
                        }
                        while (v38);
                        swift_bridgeObjectRelease_n();
                      }
                      else
                      {
                        v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                      }
                      v52 = *(_QWORD **)(v24 + 48);
                      swift_retain();
                      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      *(_QWORD *)(v24 + 48) = v52;
                      v27 = v106;
                      v26 = v108;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      {
                        v52 = sub_1B1C66954(0, v52[2] + 1, 1, v52);
                        *(_QWORD *)(v24 + 48) = v52;
                      }
                      v55 = v52[2];
                      v54 = v52[3];
                      if (v55 >= v54 >> 1)
                      {
                        v52 = sub_1B1C66954(v54 > 1, v55 + 1, 1, v52);
                        *(_QWORD *)(v24 + 48) = v52;
                      }
                      v52[2] = v55 + 1;
                      v56 = &v52[3 * v55];
                      v56[4] = v37;
                      v56[5] = v110;
                      v56[6] = v40;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_release();
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                    }
                  }
                  ++v28;
                }
                while (v28 != v26);
                swift_bridgeObjectRelease_n();
                v22 = MEMORY[0x1E0DEE9D8];
                v21 = v102;
                v23 = v103;
              }
            }
            *(_BYTE *)(v24 + 56) = 1;
            ++v23;
          }
          while (v23 != v21);
        }
      }
      else
      {
        v57 = MEMORY[0x1E0DEE9D8];
        if ((_DWORD)v13 != (_DWORD)v14)
        {
          v100 = v14;
          do
          {
            v58 = v105 + (v13 << 6);
            if (*(_QWORD *)(v58 + 40))
            {
              swift_bridgeObjectRelease();
              *(_QWORD *)(v58 + 40) = v57;
            }
            swift_bridgeObjectRelease();
            *(_QWORD *)(v58 + 48) = v57;
            v59 = *(_QWORD *)(v58 + 40);
            if (v59)
            {
              v60 = *(_QWORD *)(v59 + 16);
              if (v60)
              {
                v104 = v13;
                v61 = v59 + 32;
                swift_bridgeObjectRetain_n();
                v62 = 0;
                v107 = v61;
                v109 = v60;
                do
                {
                  v63 = *(_QWORD *)(v58 + 8);
                  if (*(_QWORD *)(v63 + 16))
                  {
                    v64 = (uint64_t *)(v61 + 24 * v62);
                    v66 = v64[1];
                    v65 = v64[2];
                    v67 = *v64;
                    swift_bridgeObjectRetain_n();
                    swift_bridgeObjectRetain();
                    v68 = sub_1B1DC3B00(v67, v66);
                    if ((v69 & 1) != 0)
                    {
                      v70 = (uint64_t *)(*(_QWORD *)(v63 + 56) + 16 * v68);
                      v71 = *v70;
                      v111 = v70[1];
                      swift_retain();
                      swift_bridgeObjectRelease();
                      v72 = *(_QWORD *)(v65 + 16);
                      if (v72)
                      {
                        swift_bridgeObjectRetain_n();
                        v73 = (uint64_t *)(v65 + 40);
                        v74 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                        do
                        {
                          v75 = *(_QWORD *)v58;
                          if (*(_QWORD *)(*(_QWORD *)v58 + 16))
                          {
                            v76 = *(v73 - 1);
                            v77 = *v73;
                            swift_bridgeObjectRetain_n();
                            v78 = sub_1B1DC3B00(v76, v77);
                            if ((v79 & 1) != 0)
                            {
                              v80 = (uint64_t *)(*(_QWORD *)(v75 + 56) + 16 * v78);
                              v81 = *v80;
                              v82 = v80[1];
                              swift_retain();
                              swift_bridgeObjectRelease_n();
                              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                v74 = sub_1B1C66A74(0, v74[2] + 1, 1, v74);
                              v84 = v74[2];
                              v83 = v74[3];
                              if (v84 >= v83 >> 1)
                                v74 = sub_1B1C66A74(v83 > 1, v84 + 1, 1, v74);
                              v74[2] = v84 + 1;
                              v85 = &v74[2 * v84];
                              v85[4] = v81;
                              v85[5] = v82;
                            }
                            else
                            {
                              swift_bridgeObjectRelease_n();
                            }
                          }
                          v73 += 2;
                          --v72;
                        }
                        while (v72);
                        swift_bridgeObjectRelease_n();
                      }
                      else
                      {
                        v74 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                      }
                      v86 = *(_QWORD **)(v58 + 48);
                      swift_retain();
                      v87 = swift_isUniquelyReferenced_nonNull_native();
                      *(_QWORD *)(v58 + 48) = v86;
                      v61 = v107;
                      v60 = v109;
                      if ((v87 & 1) == 0)
                      {
                        v86 = sub_1B1C66954(0, v86[2] + 1, 1, v86);
                        *(_QWORD *)(v58 + 48) = v86;
                      }
                      v89 = v86[2];
                      v88 = v86[3];
                      if (v89 >= v88 >> 1)
                      {
                        v86 = sub_1B1C66954(v88 > 1, v89 + 1, 1, v86);
                        *(_QWORD *)(v58 + 48) = v86;
                      }
                      v86[2] = v89 + 1;
                      v90 = &v86[3 * v89];
                      v90[4] = v71;
                      v90[5] = v111;
                      v90[6] = v74;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_release();
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease_n();
                    }
                  }
                  ++v62;
                }
                while (v62 != v60);
                swift_bridgeObjectRelease_n();
                v13 = v104;
                v14 = v100;
              }
            }
            ++v13;
            *(_BYTE *)(v58 + 56) = 1;
            v57 = MEMORY[0x1E0DEE9D8];
          }
          while (v13 != v14);
        }
      }
      v8 = v97;
      sub_1B1F05D48(v97, (unsigned __int16 **)v122, (uint64_t)v126);
      sub_1B1F03804((char *)v101);
      v9 = v96;
      ecs_stack_allocator_pop_snapshot(v96);
      v10 = v95;
      if ((v95 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v101 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v101 + 376));
      }
      swift_release();
      v11 = v99 + 1;
    }
    while (v99 + 1 != v98);
    sub_1B19ED720((uint64_t)v112);
    sub_1B1A086DC(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    sub_1B19ED720((uint64_t)v112);
  }
  return sub_1B1A086DC(v114, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20A7378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  os_unfair_lock_s *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  os_unfair_lock_s *v75;
  int v76;
  int v77;
  int v79;
  unint64_t v80;
  _BYTE v81[40];
  _OWORD v82[2];
  uint64_t v83;
  _BYTE v84[40];
  _OWORD v85[2];
  uint64_t v86;
  _BYTE v87[40];
  _OWORD v88[2];
  uint64_t v89;
  _BYTE v90[40];
  _OWORD v91[2];
  uint64_t v92;
  _BYTE v93[40];
  _OWORD v94[2];
  uint64_t v95;
  _OWORD v96[2];
  uint64_t v97;
  _OWORD v98[2];
  uint64_t v99;
  _OWORD v100[2];
  uint64_t v101;
  _OWORD v102[2];
  uint64_t v103;
  _OWORD v104[2];
  uint64_t v105;
  uint64_t v106;
  int v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  char v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  _OWORD v136[2];
  uint64_t v137;
  _OWORD v138[2];
  uint64_t v139;
  _QWORD v140[8];
  _QWORD v141[8];
  _QWORD v142[8];
  _QWORD v143[8];
  _OWORD v144[2];
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _OWORD v164[2];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[15];

  v4 = a4;
  v169[12] = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v130 = qword_1ED4D09F8;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v79 = v7;
  v131 = v7;
  v80 = v6 >> 31;
  v132 = v6 >> 31;
  v133 = 1;
  v134 = 2;
  v135 = 0;
  swift_retain();
  sub_1B1E3B400(1, (uint64_t)v81);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v8 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v8 + 40) = &off_1E6374040;
  sub_1B1B44110(v82, v8);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v81);
  v104[0] = v82[0];
  v104[1] = v82[1];
  v105 = v83;
  sub_1B1E8FCE4(a1, (uint64_t)v104, 0x200000000, v140);
  sub_1B1A18378((uint64_t)v140, (uint64_t)v169, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v169[0])
  {
    v9 = v169[5];
    v10 = v169[7];
    v11 = v169[10];
    sub_1B19ED720((uint64_t)v82);
    if (v11 >= 1 && v10)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      v12 = 48 * v10;
      v13 = (uint64_t *)(v9 + 40);
      do
      {
        v18 = *v13;
        v19 = *(os_unfair_lock_s **)(*v13 + 376);
        swift_retain();
        os_unfair_lock_lock(v19);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
        v20 = *(_DWORD *)(v18 + 24);
        swift_retain();
        v165 = 0;
        memset(v164, 0, sizeof(v164));
        v160 = 0;
        v159 = 0u;
        v158 = 0u;
        v21 = sub_1B1DA4ED8(v20, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)v164, (uint64_t)&v158);
        swift_release();
        sub_1B1A04628((uint64_t)&v158, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        sub_1B1A04628((uint64_t)v164, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        if (sub_1B1A10B20(v21))
        {
          sub_1B1A10BB0(v21);
        }
        else
        {
          v14 = *(_QWORD *)(v18 + 232);
          v15 = *(_QWORD *)(v18 + 240);
          v16 = *(unsigned __int8 *)(v18 + 120);
          v17 = *(unsigned int *)(v18 + 28);
          LOBYTE(v164[0]) = *(_BYTE *)(v18 + 32);
          sub_1B1FD8C68(v14, v15, v21, v16, v17 | ((unint64_t)LOBYTE(v164[0]) << 32), 0, 0, 0);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
        swift_release();
        v13 += 6;
        v12 -= 48;
      }
      while (v12);
      sub_1B1A086DC(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      sub_1B1A086DC(v140, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v82);
  }
  v124 = qword_1ED4D09F8;
  v125 = v79;
  v126 = v80;
  v127 = 1;
  v128 = 2;
  v129 = 0;
  swift_retain();
  sub_1B1E38CA0(1, (uint64_t)v84);
  swift_release();
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v22 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v22 + 40) = &off_1E6374040;
  sub_1B1B44110(v85, v22);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v84);
  v102[0] = v85[0];
  v102[1] = v85[1];
  v103 = v86;
  sub_1B1E8FCE4(a1, (uint64_t)v102, 0x200000000, v141);
  sub_1B1A18378((uint64_t)v141, (uint64_t)v164, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v164[0])
  {
    v23 = v166;
    v24 = v167;
    v25 = v168;
    sub_1B19ED720((uint64_t)v85);
    if (v25 >= 1 && v24)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      v26 = 48 * v24;
      v27 = (uint64_t *)(v23 + 40);
      do
      {
        v32 = *v27;
        v33 = *(os_unfair_lock_s **)(*v27 + 376);
        swift_retain();
        os_unfair_lock_lock(v33);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
        v34 = *(_DWORD *)(v32 + 24);
        swift_retain();
        v160 = 0;
        v159 = 0u;
        v158 = 0u;
        v154 = 0;
        v153 = 0u;
        v152 = 0u;
        v35 = sub_1B1DA4ED8(v34, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)&v158, (uint64_t)&v152);
        swift_release();
        sub_1B1A04628((uint64_t)&v152, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        sub_1B1A04628((uint64_t)&v158, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        if (sub_1B1A10B20(v35))
        {
          sub_1B1A10BB0(v35);
        }
        else
        {
          v28 = *(_QWORD *)(v32 + 232);
          v29 = *(_QWORD *)(v32 + 240);
          v30 = *(unsigned __int8 *)(v32 + 120);
          v31 = *(unsigned int *)(v32 + 28);
          LOBYTE(v158) = *(_BYTE *)(v32 + 32);
          sub_1B1FD8C68(v28, v29, v35, v30, v31 | ((unint64_t)v158 << 32), 0, 0, 0);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 376));
        swift_release();
        v27 += 6;
        v26 -= 48;
      }
      while (v26);
      sub_1B1A086DC(v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      sub_1B1A086DC(v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v85);
  }
  v118 = qword_1ED4D09F8;
  v119 = v79;
  v120 = v80;
  v121 = 1;
  v122 = 2;
  v123 = 0;
  swift_retain();
  sub_1B1E39A68(1, (uint64_t)v87);
  swift_release();
  v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v36 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v36 + 40) = &off_1E6374040;
  sub_1B1B44110(v88, v36);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v87);
  v100[0] = v88[0];
  v100[1] = v88[1];
  v101 = v89;
  sub_1B1E8FCE4(a1, (uint64_t)v100, 0x200000000, v142);
  sub_1B1A18378((uint64_t)v142, (uint64_t)&v158, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v158)
  {
    v37 = v161;
    v38 = v162;
    v39 = v163;
    sub_1B19ED720((uint64_t)v88);
    if (v39 >= 1 && v38)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      v40 = 48 * v38;
      v41 = (uint64_t *)(v37 + 40);
      do
      {
        v46 = *v41;
        v47 = *(os_unfair_lock_s **)(*v41 + 376);
        swift_retain();
        os_unfair_lock_lock(v47);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v46 + 344));
        v48 = *(_DWORD *)(v46 + 24);
        swift_retain();
        v154 = 0;
        v153 = 0u;
        v152 = 0u;
        v148 = 0;
        v147 = 0u;
        v146 = 0u;
        v49 = sub_1B1DA4ED8(v48, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)&v152, (uint64_t)&v146);
        swift_release();
        sub_1B1A04628((uint64_t)&v146, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        sub_1B1A04628((uint64_t)&v152, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        if (sub_1B1A10B20(v49))
        {
          sub_1B1A10BB0(v49);
        }
        else
        {
          v42 = *(_QWORD *)(v46 + 232);
          v43 = *(_QWORD *)(v46 + 240);
          v44 = *(unsigned __int8 *)(v46 + 120);
          v45 = *(unsigned int *)(v46 + 28);
          LOBYTE(v152) = *(_BYTE *)(v46 + 32);
          sub_1B1FD8C68(v42, v43, v49, v44, v45 | ((unint64_t)v152 << 32), 0, 0, 0);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v46 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v46 + 376));
        swift_release();
        v41 += 6;
        v40 -= 48;
      }
      while (v40);
      sub_1B1A086DC(v142, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v142, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      sub_1B1A086DC(v142, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v88);
  }
  v112 = qword_1ED4D09F8;
  v113 = v79;
  v114 = v80;
  v115 = 1;
  v116 = 2;
  v117 = 0;
  swift_retain();
  sub_1B1E3D5CC(1, (uint64_t)v90);
  swift_release();
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v50 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v50 + 40) = &off_1E6374040;
  sub_1B1B44110(v91, v50);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v90);
  v98[0] = v91[0];
  v98[1] = v91[1];
  v99 = v92;
  sub_1B1E8FCE4(a1, (uint64_t)v98, 0x200000000, v143);
  sub_1B1A18378((uint64_t)v143, (uint64_t)&v152, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v152)
  {
    v51 = v155;
    v52 = v156;
    v53 = v157;
    sub_1B19ED720((uint64_t)v91);
    if (v53 >= 1 && v52)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      v54 = 48 * v52;
      v55 = (uint64_t *)(v51 + 40);
      do
      {
        v60 = *v55;
        v61 = *(os_unfair_lock_s **)(*v55 + 376);
        swift_retain();
        os_unfair_lock_lock(v61);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v60 + 344));
        v62 = *(_DWORD *)(v60 + 24);
        swift_retain();
        v148 = 0;
        v147 = 0u;
        v146 = 0u;
        v145 = 0;
        memset(v144, 0, sizeof(v144));
        v63 = sub_1B1DA4ED8(v62, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)&v146, (uint64_t)v144);
        swift_release();
        sub_1B1A04628((uint64_t)v144, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        sub_1B1A04628((uint64_t)&v146, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
        if (sub_1B1A10B20(v63))
        {
          sub_1B1A10BB0(v63);
        }
        else
        {
          v56 = *(_QWORD *)(v60 + 232);
          v57 = *(_QWORD *)(v60 + 240);
          v58 = *(unsigned __int8 *)(v60 + 120);
          v59 = *(unsigned int *)(v60 + 28);
          LOBYTE(v146) = *(_BYTE *)(v60 + 32);
          sub_1B1FD8C68(v56, v57, v63, v58, v59 | ((unint64_t)v146 << 32), 0, 0, 0);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v60 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v60 + 376));
        swift_release();
        v55 += 6;
        v54 -= 48;
      }
      while (v54);
      sub_1B1A086DC(v143, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v143, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      sub_1B1A086DC(v143, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v91);
  }
  v106 = qword_1ED4D09F8;
  v107 = v79;
  v108 = v80;
  v109 = 1;
  v110 = 2;
  v111 = 0;
  swift_retain();
  sub_1B1E424E0(1, (uint64_t)v93);
  swift_release();
  v64 = swift_allocObject();
  *(_OWORD *)(v64 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v64 + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(v64 + 40) = &off_1E6374040;
  sub_1B1B44110(v94, v64);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v93);
  v96[0] = v94[0];
  v96[1] = v94[1];
  v97 = v95;
  sub_1B1E8FCE4(a1, (uint64_t)v96, 0x200000000, v144);
  sub_1B1A18378((uint64_t)v144, (uint64_t)&v146, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!(_QWORD)v146)
    return (_QWORD *)sub_1B19ED720((uint64_t)v94);
  v65 = v149;
  v66 = v150;
  v67 = v151;
  sub_1B19ED720((uint64_t)v94);
  if (v67 >= 1 && v66)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    v68 = 48 * v66;
    v69 = (uint64_t *)(v65 + 40);
    do
    {
      v74 = *v69;
      v75 = *(os_unfair_lock_s **)(*v69 + 376);
      swift_retain();
      os_unfair_lock_lock(v75);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v74 + 344));
      v76 = *(_DWORD *)(v74 + 24);
      swift_retain();
      v139 = 0;
      memset(v138, 0, sizeof(v138));
      v137 = 0;
      memset(v136, 0, sizeof(v136));
      v77 = sub_1B1DA4ED8(v76, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)v138, (uint64_t)v136);
      swift_release();
      sub_1B1A04628((uint64_t)v136, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
      sub_1B1A04628((uint64_t)v138, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
      if (sub_1B1A10B20(v77))
      {
        sub_1B1A10BB0(v77);
      }
      else
      {
        v70 = *(_QWORD *)(v74 + 232);
        v71 = *(_QWORD *)(v74 + 240);
        v72 = *(unsigned __int8 *)(v74 + 120);
        v73 = *(unsigned int *)(v74 + 28);
        LOBYTE(v138[0]) = *(_BYTE *)(v74 + 32);
        sub_1B1FD8C68(v70, v71, v77, v72, v73 | ((unint64_t)LOBYTE(v138[0]) << 32), 0, 0, 0);
      }
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v74 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v74 + 376));
      swift_release();
      v69 += 6;
      v68 -= 48;
    }
    while (v68);
    sub_1B1A086DC(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  return sub_1B1A086DC(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t sub_1B20A8218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  unsigned int *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  os_unfair_lock_s *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  int8x16_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float32x4_t v123;
  uint64_t v124;
  char v125;
  BOOL v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  char v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int8x16_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int8x16_t v152;
  int32x4_t v153;
  float32x4_t v154;
  float v155;
  float v156;
  int8x16_t v157;
  float v158;
  int8x16_t v159;
  float v160;
  float v161;
  float v162;
  float32x2_t v163;
  float32x2_t v164;
  float32x2_t v165;
  unsigned __int32 v166;
  int32x4_t v167;
  int32x4_t v168;
  float32x2_t v170;
  float v171;
  int32x2_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  uint64_t v178;
  float v179;
  _QWORD *v180;
  uint64_t result;
  unint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int8x16_t v187;
  float32x4_t v188;
  int8x16_t v189;
  uint64_t v190;
  _QWORD *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  int v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  __n128 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD v216[3];
  char v217;
  _OWORD v218[2];
  uint64_t v219;
  _BYTE v220[40];
  _OWORD v221[2];
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  _OWORD v226[2];
  uint64_t v227;
  _OWORD v228[2];
  uint64_t v229;
  _OWORD v230[2];
  uint64_t v231;
  _OWORD v232[2];
  uint64_t v233;
  uint64_t v234;
  int v235;
  char v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  _QWORD v240[3];
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  ValueMetadata *v244;
  _UNKNOWN **v245;
  uint64_t v246;
  _UNKNOWN **v247;
  char v248;
  _QWORD v249[8];
  ValueMetadata *v250;
  _UNKNOWN **v251;
  char v252;
  _OWORD v253[2];
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _OWORD v260[2];
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  __int128 v267;
  _BYTE v268[32];
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  _BYTE v273[28];
  _BYTE v274[40];
  uint64_t v275;
  int v276;
  char v277;
  uint64_t v278;
  char v279;
  uint64_t v280;
  _BYTE v281[40];
  uint64_t v282;

  v4 = a4;
  v282 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v234 = qword_1ED4D09F8;
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v8 = v6 >> 31;
  v235 = v7;
  v236 = v6 >> 31;
  v237 = 1;
  v238 = 2;
  v239 = 0;
  swift_retain();
  sub_1B1E426D8(1, (uint64_t)v218);
  swift_release();
  v232[0] = v218[0];
  v232[1] = v218[1];
  v233 = v219;
  v198 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v232, 0x200000000, v249);
  sub_1B1A18378((uint64_t)v249, (uint64_t)v260, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v260[0])
  {
    if (v266 >= 1 && (v186 = v263) != 0)
    {
      v182 = v6 >> 31;
      v194 = v265[4];
      v192 = *(unsigned __int8 *)(v264 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v226[0] = v260[0];
      v226[1] = v260[1];
      v227 = v261;
      v184 = (uint64_t)(v265 + 6);
      v185 = v262;
      v203 = v265;
      v206 = v265 + 13;
      v183 = v265 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      v9 = 0;
      v10 = 0;
      do
      {
        v196 = v10;
        v12 = (unsigned int *)(v185 + 48 * v9);
        v13 = *v12;
        v212 = v12[1];
        v14 = *((_QWORD *)v12 + 3);
        v201 = (uint64_t *)*((_QWORD *)v12 + 2);
        v15 = *((_QWORD *)v12 + 4);
        v16 = *((_QWORD *)v12 + 5);
        v190 = v9;
        if (v192)
        {
          v17 = *(os_unfair_lock_s **)(v16 + 376);
          swift_retain();
          os_unfair_lock_lock(v17);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v194);
        sub_1B1A18378(v184, (uint64_t)v281, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v18 = v203[4];
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v203[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
        v203[7] = v19;
        v183[1] = 0;
        v183[2] = 0;
        *v183 = 0;
        swift_release();
        sub_1B1A12038((uint64_t)&type metadata for ParticleGlobalForce, (uint64_t)&off_1E6398DE0, v201, v14, v15, (uint64_t)v203);
        if (v201)
        {
          if (v15)
          {
            v20 = 0;
            v199 = v15;
            do
            {
              v213 = v201[v20];
              v21 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 16);
              v22 = *(_QWORD *)(v21 + 128);
              if (*(_QWORD *)(v22 + 16))
              {
                v23 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleGlobalForce);
                if ((v24 & 1) != 0
                  && *(ValueMetadata **)(*(_QWORD *)(v21 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23) + 32) == &type metadata for ParticleGlobalForce)
                {
                  v250 = &type metadata for ParticleGlobalForce;
                  v251 = &off_1E6398DE0;
                  v252 = 1;
                  v25 = *v206;
                  if (*(_QWORD *)(*v206 + 16))
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    sub_1B1F09F2C(v25 + 32, (uint64_t)v253);
                    sub_1B1BE90FC((uint64_t)v253, (uint64_t)&v267);
                    sub_1B1BE90FC((uint64_t)&v250, (uint64_t)&v269);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v26 = *(_QWORD *)(v16 + 240) - *(_QWORD *)(v16 + 232);
                  v27 = ecs_stack_allocator_allocate(v203[4], 8 * v26, 8);
                  *v27 = v213;
                  sub_1B1BE90FC((uint64_t)&v250, (uint64_t)&v267);
                  *(_QWORD *)&v269 = v27;
                  *((_QWORD *)&v269 + 1) = v26;
                  *(_QWORD *)&v270 = 1;
                  v28 = (_QWORD *)v203[13];
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  v203[13] = v28;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    v28 = sub_1B1C631A0(0, v28[2] + 1, 1, v28);
                    *v206 = v28;
                  }
                  v31 = v28[2];
                  v30 = v28[3];
                  if (v31 >= v30 >> 1)
                  {
                    v28 = sub_1B1C631A0(v30 > 1, v31 + 1, 1, v28);
                    *v206 = v28;
                  }
                  v28[2] = v31 + 1;
                  v32 = &v28[9 * v31];
                  *((_OWORD *)v32 + 2) = v267;
                  v33 = *(_OWORD *)v268;
                  v34 = *(_OWORD *)&v268[16];
                  v35 = v269;
                  v32[12] = v270;
                  *((_OWORD *)v32 + 4) = v34;
                  *((_OWORD *)v32 + 5) = v35;
                  *((_OWORD *)v32 + 3) = v33;
                  sub_1B1B68F14((uint64_t)&v250);
                  swift_release();
                }
              }
              v36 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 16);
              v37 = *(_QWORD *)(v36 + 128);
              if (*(_QWORD *)(v37 + 16)
                && (v38 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleForceField), (v39 & 1) != 0)
                && *(ValueMetadata **)(*(_QWORD *)(v36 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v38) + 32) == &type metadata for ParticleForceField)
              {
                v45 = v199;
              }
              else
              {
                v250 = &type metadata for ParticleForceField;
                v251 = &off_1E63946D8;
                v252 = 0;
                v40 = *v206;
                if (*(_QWORD *)(*v206 + 16))
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  sub_1B1F09F2C(v40 + 32, (uint64_t)v253);
                  sub_1B1BE90FC((uint64_t)v253, (uint64_t)&v267);
                  sub_1B1BE90FC((uint64_t)&v250, (uint64_t)&v269);
                  __asm { BR              X9 }
                }
                swift_retain();
                v41 = *(_QWORD *)(v16 + 240) - *(_QWORD *)(v16 + 232);
                v42 = ecs_stack_allocator_allocate(v203[4], 8 * v41, 8);
                *v42 = v213;
                sub_1B1BE90FC((uint64_t)&v250, (uint64_t)&v267);
                *(_QWORD *)&v269 = v42;
                *((_QWORD *)&v269 + 1) = v41;
                *(_QWORD *)&v270 = 1;
                v43 = (_QWORD *)v203[13];
                v44 = swift_isUniquelyReferenced_nonNull_native();
                v203[13] = v43;
                v45 = v199;
                if ((v44 & 1) == 0)
                {
                  v43 = sub_1B1C631A0(0, v43[2] + 1, 1, v43);
                  *v206 = v43;
                }
                v47 = v43[2];
                v46 = v43[3];
                if (v47 >= v46 >> 1)
                {
                  v43 = sub_1B1C631A0(v46 > 1, v47 + 1, 1, v43);
                  *v206 = v43;
                }
                v43[2] = v47 + 1;
                v48 = &v43[9 * v47];
                *((_OWORD *)v48 + 2) = v267;
                v49 = *(_OWORD *)v268;
                v50 = *(_OWORD *)&v268[16];
                v51 = v269;
                v48[12] = v270;
                *((_OWORD *)v48 + 4) = v50;
                *((_OWORD *)v48 + 5) = v51;
                *((_OWORD *)v48 + 3) = v49;
                sub_1B1B68F14((uint64_t)&v250);
                swift_release();
              }
              ++v20;
            }
            while (v20 != v45);
          }
        }
        else if ((_DWORD)v13 != (_DWORD)v212)
        {
          do
          {
            v52 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 16);
            v53 = *(_QWORD *)(v52 + 128);
            if (*(_QWORD *)(v53 + 16))
            {
              v54 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleGlobalForce);
              if ((v55 & 1) != 0
                && *(ValueMetadata **)(*(_QWORD *)(v52 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v54) + 32) == &type metadata for ParticleGlobalForce)
              {
                v250 = &type metadata for ParticleGlobalForce;
                v251 = &off_1E6398DE0;
                v252 = 1;
                v56 = *v206;
                if (*(_QWORD *)(*v206 + 16))
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  sub_1B1F09F2C(v56 + 32, (uint64_t)v253);
                  sub_1B1BE90FC((uint64_t)v253, (uint64_t)&v267);
                  sub_1B1BE90FC((uint64_t)&v250, (uint64_t)&v269);
                  __asm { BR              X9 }
                }
                swift_retain();
                v57 = *(_QWORD *)(v16 + 240) - *(_QWORD *)(v16 + 232);
                v58 = ecs_stack_allocator_allocate(v203[4], 8 * v57, 8);
                *v58 = v13;
                sub_1B1BE90FC((uint64_t)&v250, (uint64_t)&v267);
                *(_QWORD *)&v269 = v58;
                *((_QWORD *)&v269 + 1) = v57;
                *(_QWORD *)&v270 = 1;
                v59 = (_QWORD *)v203[13];
                v60 = swift_isUniquelyReferenced_nonNull_native();
                v203[13] = v59;
                if ((v60 & 1) == 0)
                {
                  v59 = sub_1B1C631A0(0, v59[2] + 1, 1, v59);
                  *v206 = v59;
                }
                v62 = v59[2];
                v61 = v59[3];
                if (v62 >= v61 >> 1)
                {
                  v59 = sub_1B1C631A0(v61 > 1, v62 + 1, 1, v59);
                  *v206 = v59;
                }
                v59[2] = v62 + 1;
                v63 = &v59[9 * v62];
                *((_OWORD *)v63 + 2) = v267;
                v64 = *(_OWORD *)v268;
                v65 = *(_OWORD *)&v268[16];
                v66 = v269;
                v63[12] = v270;
                *((_OWORD *)v63 + 4) = v65;
                *((_OWORD *)v63 + 5) = v66;
                *((_OWORD *)v63 + 3) = v64;
                sub_1B1B68F14((uint64_t)&v250);
                swift_release();
              }
            }
            v67 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 16);
            v68 = *(_QWORD *)(v67 + 128);
            if (!*(_QWORD *)(v68 + 16)
              || (v69 = sub_1B1DC3AC8((uint64_t)&type metadata for ParticleForceField), (v70 & 1) == 0)
              || *(ValueMetadata **)(*(_QWORD *)(v67 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v68 + 56) + 8 * v69) + 32) != &type metadata for ParticleForceField)
            {
              v250 = &type metadata for ParticleForceField;
              v251 = &off_1E63946D8;
              v252 = 0;
              v71 = *v206;
              if (*(_QWORD *)(*v206 + 16))
              {
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B1F09F2C(v71 + 32, (uint64_t)v253);
                sub_1B1BE90FC((uint64_t)v253, (uint64_t)&v267);
                sub_1B1BE90FC((uint64_t)&v250, (uint64_t)&v269);
                __asm { BR              X9 }
              }
              swift_retain();
              v72 = *(_QWORD *)(v16 + 240) - *(_QWORD *)(v16 + 232);
              v73 = ecs_stack_allocator_allocate(v203[4], 8 * v72, 8);
              *v73 = v13;
              sub_1B1BE90FC((uint64_t)&v250, (uint64_t)&v267);
              *(_QWORD *)&v269 = v73;
              *((_QWORD *)&v269 + 1) = v72;
              *(_QWORD *)&v270 = 1;
              v74 = (_QWORD *)v203[13];
              v75 = swift_isUniquelyReferenced_nonNull_native();
              v203[13] = v74;
              if ((v75 & 1) == 0)
              {
                v74 = sub_1B1C631A0(0, v74[2] + 1, 1, v74);
                *v206 = v74;
              }
              v77 = v74[2];
              v76 = v74[3];
              if (v77 >= v76 >> 1)
              {
                v74 = sub_1B1C631A0(v76 > 1, v77 + 1, 1, v74);
                *v206 = v74;
              }
              v74[2] = v77 + 1;
              v78 = &v74[9 * v77];
              *((_OWORD *)v78 + 2) = v267;
              v79 = *(_OWORD *)v268;
              v80 = *(_OWORD *)&v268[16];
              v81 = v269;
              v78[12] = v270;
              *((_OWORD *)v78 + 4) = v80;
              *((_OWORD *)v78 + 5) = v81;
              *((_OWORD *)v78 + 3) = v79;
              sub_1B1B68F14((uint64_t)&v250);
              swift_release();
            }
            ++v13;
          }
          while (v13 != v212);
        }
        v10 = v196;
        sub_1B1F05D48(v203, (unsigned __int16 **)v226, (uint64_t)v281);
        sub_1B1F03804((char *)v16);
        ecs_stack_allocator_pop_snapshot(v194);
        if ((v192 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
        }
        swift_release();
        v9 = v190 + 1;
        v11 = a1;
      }
      while (v190 + 1 != v186);
      sub_1B1A086DC(v249, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      LOBYTE(v8) = v182;
    }
    else
    {
      v10 = 0;
      v11 = a1;
    }
    sub_1B1A086DC(v249, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    v10 = 0;
    v11 = a1;
  }
  v275 = qword_1ED4D09F8;
  v276 = v7;
  v277 = v8;
  v278 = 1;
  v279 = 2;
  v280 = 0;
  swift_retain();
  sub_1B1E428D0(1, (uint64_t)v220);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v82 + 32) = &type metadata for SubEntity;
  *(_QWORD *)(v82 + 40) = &off_1E63C54D8;
  sub_1B1B44110(v221, v82);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v220);
  v230[0] = v221[0];
  v230[1] = v221[1];
  v231 = v222;
  sub_1B1E8FCE4(v11, (uint64_t)v230, 0x200000000, &v250);
  sub_1B1A18378((uint64_t)&v250, (uint64_t)v253, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v253[0])
  {
    v85 = (char *)MEMORY[0x1E0DEE9D8];
    v109 = v198;
    goto LABEL_99;
  }
  v223 = v253[0];
  v224 = v253[1];
  v225 = v254;
  if (v259 < 1 || (v200 = v256) == 0)
  {
    v85 = (char *)MEMORY[0x1E0DEE9D8];
    goto LABEL_98;
  }
  v83 = v258;
  v195 = v255;
  v214 = v258[4];
  v207 = *(unsigned __int8 *)(v257 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v193 = (uint64_t)(v258 + 6);
  v191 = v258 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v84 = 0;
  v85 = (char *)MEMORY[0x1E0DEE9D8];
  do
  {
    v197 = v10;
    v86 = (unsigned int *)(v195 + 48 * v84);
    v87 = *v86;
    v88 = v86[1];
    v89 = (uint64_t *)*((_QWORD *)v86 + 2);
    v91 = *((_QWORD *)v86 + 4);
    v90 = *((_QWORD *)v86 + 5);
    v202 = *((_QWORD *)v86 + 3);
    v204 = v84;
    if (v207)
    {
      v92 = *(os_unfair_lock_s **)(v90 + 376);
      swift_retain();
      os_unfair_lock_lock(v92);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v90 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v214);
    sub_1B1A18378(v193, (uint64_t)v274, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v93 = v83[4];
    v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v90 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v83[6] = ecs_stack_allocator_allocate(v93, 48 * v94, 8);
    v83[7] = v94;
    v191[1] = 0;
    v191[2] = 0;
    *v191 = 0;
    swift_release();
    sub_1B1A12038((uint64_t)&type metadata for ParticleForce, (uint64_t)&off_1E637C0C0, v89, v202, v91, (uint64_t)v83);
    if (v89)
    {
      if (v91)
      {
        do
        {
          v96 = *v89++;
          v95 = v96;
          v97 = swift_retain();
          if ((*(_BYTE *)(v90 + 184) & 1) != 0)
            goto LABEL_187;
          v98 = *(_DWORD *)(*(_QWORD *)(v90 + 168) + 4 * v95);
          v99 = *(_DWORD *)(*(_QWORD *)(v97 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v98 + 8);
          swift_release();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v85 = sub_1B1C63D98(0, *((_QWORD *)v85 + 2) + 1, 1, v85);
          v101 = *((_QWORD *)v85 + 2);
          v100 = *((_QWORD *)v85 + 3);
          if (v101 >= v100 >> 1)
            v85 = sub_1B1C63D98(v100 > 1, v101 + 1, 1, v85);
          *((_QWORD *)v85 + 2) = v101 + 1;
          v102 = &v85[8 * v101];
          *((_DWORD *)v102 + 8) = v98;
          *((_DWORD *)v102 + 9) = v99;
        }
        while (--v91);
      }
    }
    else if ((_DWORD)v87 != (_DWORD)v88)
    {
      while (1)
      {
        v103 = swift_retain();
        if ((*(_BYTE *)(v90 + 184) & 1) != 0)
          break;
        v104 = *(_DWORD *)(*(_QWORD *)(v90 + 168) + 4 * v87);
        v105 = *(_DWORD *)(*(_QWORD *)(v103 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v104 + 8);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v85 = sub_1B1C63D98(0, *((_QWORD *)v85 + 2) + 1, 1, v85);
        v107 = *((_QWORD *)v85 + 2);
        v106 = *((_QWORD *)v85 + 3);
        if (v107 >= v106 >> 1)
          v85 = sub_1B1C63D98(v106 > 1, v107 + 1, 1, v85);
        ++v87;
        *((_QWORD *)v85 + 2) = v107 + 1;
        v108 = &v85[8 * v107];
        *((_DWORD *)v108 + 8) = v104;
        *((_DWORD *)v108 + 9) = v105;
        if (v88 == v87)
          goto LABEL_86;
      }
LABEL_187:
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
LABEL_86:
    v228[0] = v223;
    v228[1] = v224;
    v229 = v225;
    v10 = v197;
    sub_1B1F05D48(v83, (unsigned __int16 **)v228, (uint64_t)v274);
    sub_1B1F03804((char *)v90);
    ecs_stack_allocator_pop_snapshot(v214);
    if ((v207 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v90 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v90 + 376));
    }
    swift_release();
    v84 = v204 + 1;
  }
  while (v204 + 1 != v200);
  sub_1B1A086DC(&v250, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_98:
  v109 = v198;
  sub_1B1A086DC(&v250, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_99:
  v205 = *((_QWORD *)v85 + 2);
  if (!v205)
    goto LABEL_186;
  swift_bridgeObjectRetain();
  v110 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v189 = _Q0;
  v114.i32[0] = 1.0;
  while (2)
  {
    v115 = *(_QWORD *)&v85[8 * v110 + 32];
    v116 = v115;
    v215 = v115;
    if ((_DWORD)v115 == -1)
    {
      if (!HIDWORD(v115))
      {
        v135 = 0uLL;
        v127 = 1;
        goto LABEL_144;
      }
      swift_retain();
LABEL_114:
      swift_release();
      v123 = 0uLL;
      goto LABEL_117;
    }
    v117 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
    swift_retain();
    if ((v116 & 0x80000000) != 0)
      goto LABEL_114;
    if (*(_QWORD *)(v109 + v117 + 8) > (int)v116
      && ((v118 = *(_QWORD *)(v109 + v117), HIDWORD(v215) != -1)
        ? (_ZF = *(_DWORD *)(v118 + 12 * (int)v116 + 8) == HIDWORD(v215))
        : (_ZF = 1),
          _ZF))
    {
      v120 = sub_1B1D1F8D4(*(_QWORD *)(*(_QWORD *)(v109 + 136) + 8 * *(int *)(v118 + 12 * (int)v116) + 32), *(_DWORD *)(v118 + 12 * (int)v116), *(_WORD *)(v118 + 12 * (int)v116 + 4), 32, v109);
      v122 = v121;
      v109 = v198;
      swift_release();
    }
    else
    {
      swift_release();
      v120 = 0;
      v122 = 0;
    }
    v123.i64[0] = v120;
    v123.i64[1] = v122;
LABEL_117:
    v208 = v123;
    v124 = *(_QWORD *)(v109 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    swift_retain();
    if (v124)
    {
      v125 = *(_BYTE *)(v124 + 80);
      MEMORY[0x1B5E240CC](v124 + 48);
      v124 = *(_QWORD *)(v124 + 56);
    }
    else
    {
      v125 = 0;
    }
    v244 = 0;
    swift_unknownObjectUnownedInit();
    v109 = v198;
    v242 = v198;
    v244 = (ValueMetadata *)v124;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    LOBYTE(v245) = v125;
    sub_1B1A02530((uint64_t)&v242, (uint64_t)v216);
    v126 = (_DWORD)v116 == -1 && HIDWORD(v215) == 0;
    v127 = v126;
    if (!v126)
    {
      v128 = v216[0];
      swift_unownedRetainStrong();
      swift_release();
      swift_unownedRetainStrong();
      sub_1B1FE1E1C((uint64_t)&type metadata for ParticleForce, (uint64_t)&off_1E637C0C0, v116 | ((unint64_t)HIDWORD(v215) << 32), 0);
      swift_release();
      if (swift_unknownObjectUnownedLoadStrong())
        swift_unknownObjectRelease();
      if (v217 == 1)
      {
        swift_unownedRetainStrong();
        v242 = v215;
        v243 = v128;
        v244 = &type metadata for ParticleForce;
        v245 = &off_1E637C0C0;
        v248 = 13;
        v129 = *(_QWORD *)(v128 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        if (v129 && (*(_BYTE *)(v129 + 81) & 1) != 0)
        {
          if (*(_QWORD *)(v129 + 24) && swift_weakLoadStrong())
          {
            swift_retain();
            swift_unknownObjectRetain();
            swift_release();
            sub_1B1C18F3C((uint64_t)&v242, (uint64_t)v240);
            v130 = *(_QWORD **)(v129 + 16);
            v131 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v129 + 16) = v130;
            if ((v131 & 1) == 0)
            {
              v130 = sub_1B1C62F04(0, v130[2] + 1, 1, v130);
              *(_QWORD *)(v129 + 16) = v130;
            }
            v133 = v130[2];
            v132 = v130[3];
            v134 = v133 + 1;
            if (v133 >= v132 >> 1)
            {
              v180 = sub_1B1C62F04(v132 > 1, v133 + 1, 1, v130);
              v134 = v133 + 1;
              v130 = v180;
              *(_QWORD *)(v129 + 16) = v180;
            }
            v130[2] = v134;
            sub_1B1C18F78((uint64_t)v240, (uint64_t)&v130[8 * v133 + 4]);
            swift_release();
            swift_unknownObjectRelease();
          }
          swift_release();
          v109 = v198;
        }
        else
        {
          swift_release();
        }
        sub_1B1ADF058((uint64_t)&v242);
      }
    }
    sub_1B1A0256C((uint64_t)v216);
    sub_1B1E31340(1);
    swift_release();
    v114.i32[0] = 1.0;
    v135 = v208;
LABEL_144:
    v136 = vmulq_f32(v135, v135);
    v137 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2), vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1)));
    *(_QWORD *)&v267 = 0;
    BYTE8(v267) = 1;
    HIDWORD(v267) = sqrtf(*(float *)v137.i32);
    *(_QWORD *)v268 = 1065353216;
    *(_OWORD *)&v268[8] = xmmword_1B227AEF0;
    *(_QWORD *)&v268[24] = 1;
    v269 = 0uLL;
    LODWORD(v270) = 1065353216;
    v271 = xmmword_1B2244F70;
    v272 = 0uLL;
    *(_DWORD *)v273 = 0;
    *(_DWORD *)&v273[4] = 1065353216;
    *(_WORD *)&v273[16] = 1;
    *(_QWORD *)&v273[20] = 0xFFFFFFFFLL;
    if ((v127 & 1) == 0)
    {
      v187 = v137;
      v209 = v135;
      v138 = *(_QWORD *)(v109 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v138)
      {
        v139 = *(_BYTE *)(v138 + 80);
        MEMORY[0x1B5E240CC](v138 + 48);
        v138 = *(_QWORD *)(v138 + 56);
      }
      else
      {
        v139 = 0;
      }
      v244 = 0;
      swift_unknownObjectUnownedInit();
      v109 = v198;
      v242 = v198;
      v244 = (ValueMetadata *)v138;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      LOBYTE(v245) = v139;
      sub_1B1A02530((uint64_t)&v242, (uint64_t)v240);
      v140 = v240[0];
      swift_unownedRetainStrong();
      if ((v116 & 0x80000000) == 0
        && *(_QWORD *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v116
        && ((v141 = *(_QWORD *)(v140 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(v215) == -1)
         || *(_DWORD *)(v141 + 12 * (int)v116 + 8) == HIDWORD(v215)))
      {
        sub_1B1A10AA4(*(_QWORD *)(*(_QWORD *)(v140 + 80) + 8 * *(__int16 *)(v141 + 12 * (int)v116 + 6) + 32), (uint64_t)&type metadata for ForceField, &v242);
        v109 = v198;
        swift_release();
        v142 = v242;
      }
      else
      {
        swift_release();
        v142 = 0;
      }
      swift_unownedRetainStrong();
      sub_1B1BF7900(&v267, v116 | ((unint64_t)HIDWORD(v215) << 32));
      swift_release();
      swift_unownedRetainStrong();
      swift_release();
      if (swift_unknownObjectUnownedLoadStrong())
        swift_unknownObjectRelease();
      if (v241 == 1)
      {
        swift_unownedRetainStrong();
        v242 = v215;
        v243 = v140;
        sub_1B1AED5E4(0, &qword_1EEF63060, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ComponentWriter);
        v246 = v143;
        v247 = &off_1E6383838;
        v144 = swift_allocObject();
        v244 = (ValueMetadata *)v144;
        v145 = *(_OWORD *)v273;
        *(_OWORD *)(v144 + 112) = v272;
        *(_OWORD *)(v144 + 128) = v145;
        *(_OWORD *)(v144 + 140) = *(_OWORD *)&v273[12];
        v146 = v269;
        *(_OWORD *)(v144 + 48) = *(_OWORD *)&v268[16];
        *(_OWORD *)(v144 + 64) = v146;
        v147 = v271;
        *(_OWORD *)(v144 + 80) = v270;
        *(_OWORD *)(v144 + 96) = v147;
        v148 = *(_OWORD *)v268;
        *(_OWORD *)(v144 + 16) = v267;
        *(_OWORD *)(v144 + 32) = v148;
        *(_BYTE *)(v144 + 156) = v142 ^ 1;
        v248 = 12;
        sub_1B1E2DB30((uint64_t)&v242);
        swift_release();
        sub_1B1ADF058((uint64_t)&v242);
      }
      sub_1B1A0256C((uint64_t)v240);
      sub_1B1E31340(1);
      swift_release();
      v114.i32[0] = 1.0;
      v135 = v209;
      v137 = v187;
    }
    v149 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v137.i8, 0);
    v149.i32[3] = 0;
    v150 = vrsqrteq_f32(v149);
    v151 = vmulq_f32(v150, vrsqrtsq_f32(v149, vmulq_f32(v150, v150)));
    v152 = (int8x16_t)vmulq_f32(v151, vrsqrtsq_f32(v149, vmulq_f32(v151, v151)));
    v153 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(*(float *)v137.i32 != 0.0)), 0x1FuLL));
    v153.i32[3] = 0;
    v159 = (int8x16_t)vcltzq_s32(v153);
    v154 = vmulq_f32(v135, (float32x4_t)vbslq_s8(v159, v152, v189));
    v137.i32[0] = v154.i32[2];
    v157.i64[0] = 0x8000000080000000;
    v157.i64[1] = 0x8000000080000000;
    v155 = *(float *)vbslq_s8(v157, v114, v137).i32;
    *(float *)v157.i32 = v154.f32[1] / (float)(fabsf(v154.f32[2]) + *(float *)v114.i32);
    v156 = vmuls_lane_f32(*(float *)v157.i32, *(float32x2_t *)v154.f32, 1);
    *(float *)v157.i32 = -(float)(v154.f32[0] * *(float *)v157.i32);
    v158 = v154.f32[2] + (float)(v155 * v156);
    *(float *)v159.i32 = v155 * *(float *)v157.i32;
    v160 = *(float *)v114.i32 - v156;
    v161 = vmuls_lane_f32(-v155, *(float32x2_t *)v154.f32, 1);
    v162 = v154.f32[2] + (float)(v158 + v160);
    if (v162 > 0.0)
    {
      v163 = (float32x2_t)vrev64_s32(*(int32x2_t *)v154.f32);
      *(int32x2_t *)v167.i8 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v154.f32, *(float32x2_t *)v154.f32), 0);
      v167.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v163.u32[1], LODWORD(v161)), v163).u32[0];
      v164 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v162 + *(float *)v114.i32)), v159.u32[0]);
      v165 = vmul_f32(v164, v164);
      v164.i32[0] = v157.i32[0];
      v166 = vsub_f32(*(float32x2_t *)v159.i8, v164).u32[0];
      v157.i32[1] = v165.i32[1];
      v167.i64[1] = v157.i64[0];
      *(float *)v157.i32 = 0.5 / v164.f32[1];
      goto LABEL_160;
    }
    if (v158 >= v160 && v158 >= v154.f32[2])
    {
      v171 = sqrtf((float)((float)(v158 + *(float *)v114.i32) - v160) - v154.f32[2]);
      *(float *)v168.i32 = v171 * v171;
      *(float *)&v168.i32[1] = *(float *)v157.i32 + *(float *)v159.i32;
      v172 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v161), v154.u32[0]), *(float32x2_t *)v154.f32);
      goto LABEL_169;
    }
    if (v160 <= v154.f32[2])
    {
      v179 = sqrtf((float)((float)(v154.f32[2] + *(float *)v114.i32) - v158) - v160);
      v167.i32[0] = vsubq_f32(v154, v154).u32[0];
      *(float *)&v167.i32[1] = v154.f32[1] + v161;
      *(float *)&v167.i32[2] = v179 * v179;
      *(float *)&v167.i32[3] = *(float *)v159.i32 - *(float *)v157.i32;
      *(float *)v157.i32 = 0.5 / v179;
LABEL_160:
      v168 = vdupq_lane_s32(*(int32x2_t *)v157.i8, 0);
      if (!v127)
        goto LABEL_170;
    }
    else
    {
      v171 = sqrtf((float)((float)(v160 + *(float *)v114.i32) - v158) - v154.f32[2]);
      *(float *)v168.i32 = *(float *)v157.i32 + *(float *)v159.i32;
      v170 = (float32x2_t)vrev64_s32(*(int32x2_t *)v154.f32);
      *(float *)&v168.i32[1] = v171 * v171;
      v172 = (int32x2_t)vadd_f32(v170, (float32x2_t)__PAIR64__(v170.u32[1], LODWORD(v161)));
LABEL_169:
      v168.u64[1] = (unint64_t)v172;
      *(float *)v172.i32 = 0.5 / v171;
      v167 = vdupq_lane_s32(v172, 0);
      if (!v127)
      {
LABEL_170:
        v188 = (float32x4_t)v168;
        v210 = (float32x4_t)v167;
        v173 = *(_QWORD *)(v109 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        swift_retain();
        if (v173)
        {
          v174 = *(_BYTE *)(v173 + 80);
          MEMORY[0x1B5E240CC](v173 + 48);
          v173 = *(_QWORD *)(v173 + 56);
        }
        else
        {
          v174 = 0;
        }
        v244 = 0;
        swift_unknownObjectUnownedInit();
        v242 = v198;
        v244 = (ValueMetadata *)v173;
        swift_unknownObjectUnownedAssign();
        swift_unownedRetain();
        swift_unknownObjectRelease();
        LOBYTE(v245) = v174;
        sub_1B1A02530((uint64_t)&v242, (uint64_t)v240);
        v175 = v240[0];
        swift_unownedRetainStrong();
        if ((v116 & 0x80000000) == 0
          && *(_QWORD *)(v175 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v116
          && (HIDWORD(v215) == -1
           || *(_DWORD *)(*(_QWORD *)(v175 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v116 + 8) == HIDWORD(v215)))
        {
          v176 = sub_1B2162978((uint64_t)&type metadata for Orientation);
          swift_release();
        }
        else
        {
          swift_release();
          v176 = 0;
        }
        v211 = (__n128)vmulq_f32(v210, v188);
        swift_unownedRetainStrong();
        sub_1B1BF76A0(v116 | ((unint64_t)HIDWORD(v215) << 32), v211);
        swift_release();
        swift_unownedRetainStrong();
        swift_release();
        if (swift_unknownObjectUnownedLoadStrong())
          swift_unknownObjectRelease();
        if (v241 == 1)
        {
          swift_unownedRetainStrong();
          v242 = v215;
          v243 = v175;
          sub_1B1AED5E4(0, &qword_1EEF5C518, (uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for ComponentWriter);
          v246 = v177;
          v247 = &off_1E6383838;
          v178 = swift_allocObject();
          v244 = (ValueMetadata *)v178;
          *(__n128 *)(v178 + 16) = v211;
          *(_BYTE *)(v178 + 32) = !v176;
          v248 = 12;
          sub_1B1E2DB30((uint64_t)&v242);
          swift_release();
          sub_1B1ADF058((uint64_t)&v242);
        }
        sub_1B1A0256C((uint64_t)v240);
        v109 = v198;
        sub_1B1E31340(1);
        swift_release();
        v114.i32[0] = 1.0;
      }
    }
    if (v205 != ++v110)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
LABEL_186:
  sub_1B19ED720((uint64_t)v221);
  sub_1B19ED720((uint64_t)v218);
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B20AA5B4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ProtocolDescriptor *v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char v111;
  unsigned int v112;
  size_t v113;
  uint64_t isStackAllocationSafe;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  unint64_t v124;
  uint64_t v125;
  _DWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  char v144;
  char *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  int64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  _QWORD *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t *v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  char *v211;
  int64_t v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216[5];
  _OWORD v217[2];
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  _OWORD v222[2];
  uint64_t v223;
  _OWORD v224[2];
  uint64_t v225;
  uint64_t v226;
  int v227;
  char v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  _QWORD v232[12];
  _OWORD v233[2];
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _BYTE v240[40];
  uint64_t v241;

  LODWORD(v4) = a4;
  v241 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    goto LABEL_253;
  while (1)
  {
    if (v6)
      v7 = 0;
    else
      v7 = (int)v4;
    v226 = qword_1ED4D09F8;
    v227 = v7;
    v228 = v6 >> 31;
    v229 = 1;
    v230 = 2;
    v231 = 0;
    swift_retain();
    sub_1B1E3C60C(3, (uint64_t)v217);
    swift_release();
    v224[0] = v217[0];
    v224[1] = v217[1];
    v225 = v218;
    sub_1B1E8FCE4((uint64_t)a1, (uint64_t)v224, 0x200000000, v232);
    sub_1B1A18378((uint64_t)v232, (uint64_t)v233, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (!*(_QWORD *)&v233[0])
      return (_QWORD *)sub_1B19ED720((uint64_t)v217);
    v219 = v233[0];
    v220 = v233[1];
    v190 = v235;
    v221 = v234;
    v9 = v236;
    v8 = v237;
    v10 = v239;
    v194 = v238;
    sub_1B19ED720((uint64_t)v217);
    if (v10 <= 0 || !v9)
      return sub_1B1A086DC(v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v187 = v9;
    v193 = v194[4];
    v192 = *(unsigned __int8 *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v222[0] = v219;
    v222[1] = v220;
    v223 = v221;
    v188 = v194 + 8;
    v189 = v194 + 6;
    swift_retain();
    swift_retain();
    swift_retain();
    v11 = 0;
    v214 = 0;
    while (1)
    {
      v191 = v11;
      v12 = (unsigned int *)(v190 + 48 * v11);
      v13 = *v12;
      v209 = v12[1];
      v14 = (uint64_t *)*((_QWORD *)v12 + 2);
      v15 = *((_QWORD *)v12 + 3);
      v16 = *((_QWORD *)v12 + 5);
      v197 = *((_QWORD *)v12 + 4);
      v198 = v14;
      if (v192)
      {
        v17 = *(os_unfair_lock_s **)(v16 + 376);
        swift_retain();
        os_unfair_lock_lock(v17);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v193);
      sub_1B1A18378((uint64_t)v189, (uint64_t)v240, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v18 = v194;
      v19 = v194[4];
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v18[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
      v18[7] = v20;
      v21 = v188;
      v188[1] = 0;
      v21[2] = 0;
      *v21 = 0;
      swift_release();
      v23 = v197;
      v22 = v198;
      v196 = (char *)v16;
      v205 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v198, v15, v197, (uint64_t)v18);
      if (!v22)
      {
        if ((_DWORD)v13 == (_DWORD)v209)
          goto LABEL_141;
LABEL_147:
        v110 = *(_QWORD *)(v205 + (v13 << 6) + 8);
        if (!*(_QWORD *)(v110 + 16))
          goto LABEL_146;
        v208 = v205 + (v13 << 6);
        v212 = v13;
        v111 = *(_BYTE *)(v110 + 32);
        v112 = v111 & 0x3F;
        v210 = (unint64_t)((1 << v111) + 63) >> 6;
        v113 = 8 * v210;
        isStackAllocationSafe = swift_bridgeObjectRetain();
        if (v112 <= 0xD
          || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          v207 = &v186;
          MEMORY[0x1E0C80A78](isStackAllocationSafe, v115);
          v211 = (char *)&v186 - ((v113 + 15) & 0x3FFFFFFFFFFFFFF0);
          bzero(v211, v113);
          v213 = 0;
          v116 = 0;
          v117 = v110 + 64;
          v118 = 1 << *(_BYTE *)(v110 + 32);
          if (v118 < 64)
            v119 = ~(-1 << v118);
          else
            v119 = -1;
          v120 = v119 & *(_QWORD *)(v110 + 64);
          v215 = (unint64_t)(v118 + 63) >> 6;
          v206 = (char *)(v215 - 6);
          v204 = v110 + 112;
          while (1)
          {
            if (v120)
            {
              v121 = __clz(__rbit64(v120));
              v120 &= v120 - 1;
              v122 = v121 | ((_QWORD)v116 << 6);
            }
            else
            {
              v123 = v116 + 1;
              if ((uint64_t)(v116 + 1) >= v215)
                goto LABEL_174;
              v124 = *(_QWORD *)(v117 + 8 * (_QWORD)v123);
              if (!v124)
              {
                v123 = v116 + 2;
                if ((uint64_t)(v116 + 2) >= v215)
                  goto LABEL_174;
                v124 = *(_QWORD *)(v117 + 8 * (_QWORD)v123);
                if (!v124)
                {
                  v123 = v116 + 3;
                  if ((uint64_t)(v116 + 3) >= v215)
                    goto LABEL_174;
                  v124 = *(_QWORD *)(v117 + 8 * (_QWORD)v123);
                  if (!v124)
                  {
                    v123 = v116 + 4;
                    if ((uint64_t)(v116 + 4) >= v215)
                      goto LABEL_174;
                    v124 = *(_QWORD *)(v117 + 8 * (_QWORD)v123);
                    if (!v124)
                    {
                      v123 = v116 + 5;
                      if ((uint64_t)(v116 + 5) >= v215)
                      {
LABEL_174:
                        v130 = sub_1B1C05168((unint64_t *)v211, v210, (uint64_t)v213, v110);
LABEL_200:
                        swift_bridgeObjectRelease();
                        if (!*(_QWORD *)(v130 + 16))
                        {
LABEL_144:
                          v13 = v212;
                          goto LABEL_145;
                        }
                        sub_1B1B9B3A0();
                        v146 = sub_1B22296B8();
                        v147 = (_QWORD *)v146;
                        v148 = 0;
                        v149 = v130 + 64;
                        v150 = 1 << *(_BYTE *)(v130 + 32);
                        if (v150 < 64)
                          v151 = ~(-1 << v150);
                        else
                          v151 = -1;
                        v152 = v151 & *(_QWORD *)(v130 + 64);
                        v153 = (unint64_t)(v150 + 63) >> 6;
                        v154 = v146 + 64;
                        v215 = v130 + 112;
                        while (1)
                        {
                          if (v152)
                          {
                            v155 = __clz(__rbit64(v152));
                            v152 &= v152 - 1;
                            v156 = v155 | (v148 << 6);
                          }
                          else
                          {
                            v162 = v148 + 1;
                            if (v148 + 1 >= v153)
                              goto LABEL_222;
                            v163 = *(_QWORD *)(v149 + 8 * v162);
                            if (!v163)
                            {
                              v162 = v148 + 2;
                              if (v148 + 2 >= v153)
                                goto LABEL_222;
                              v163 = *(_QWORD *)(v149 + 8 * v162);
                              if (!v163)
                              {
                                v162 = v148 + 3;
                                if (v148 + 3 >= v153)
                                  goto LABEL_222;
                                v163 = *(_QWORD *)(v149 + 8 * v162);
                                if (!v163)
                                {
                                  v162 = v148 + 4;
                                  if (v148 + 4 >= v153)
                                    goto LABEL_222;
                                  v163 = *(_QWORD *)(v149 + 8 * v162);
                                  if (!v163)
                                  {
                                    v162 = v148 + 5;
                                    if (v148 + 5 >= v153)
                                    {
LABEL_222:
                                      v164 = v208;
                                      *(_QWORD *)(v208 + 16) = v147;
                                      swift_bridgeObjectRelease();
                                      swift_retain();
                                      v165 = swift_bridgeObjectRetain();
                                      v166 = v214;
                                      v167 = sub_1B20BF910(v165, v130);
                                      v214 = v166;
                                      swift_bridgeObjectRelease();
                                      swift_release();
                                      *(_QWORD *)(v164 + 8) = v167;
                                      swift_bridgeObjectRelease();
                                      v168 = sub_1B1A11FDC((uint64_t)&type metadata for CodeGenerationComponent);
                                      v13 = v212;
                                      if ((v169 & 1) == 0 && *(_QWORD *)(v168 + 8 * v212))
                                      {
                                        v170 = 1 << *(_BYTE *)(v130 + 32);
                                        if (v170 < 64)
                                          v171 = ~(-1 << v170);
                                        else
                                          v171 = -1;
                                        v172 = v171 & *(_QWORD *)(v130 + 64);
                                        v173 = (unint64_t)(v170 + 63) >> 6;
                                        swift_retain();
                                        swift_retain();
                                        v174 = 0;
                                        v215 = v173 - 7;
                                        v213 = (_QWORD *)(v130 + 120);
                                        while (1)
                                        {
                                          if (v172)
                                          {
                                            v175 = __clz(__rbit64(v172));
                                            v172 &= v172 - 1;
                                            v176 = v175 | (v174 << 6);
                                          }
                                          else
                                          {
                                            v183 = v174 + 1;
                                            if (v174 + 1 >= v173)
                                              goto LABEL_143;
                                            v184 = *(_QWORD *)(v149 + 8 * v183);
                                            if (!v184)
                                            {
                                              v183 = v174 + 2;
                                              if (v174 + 2 >= v173)
                                                goto LABEL_143;
                                              v184 = *(_QWORD *)(v149 + 8 * v183);
                                              if (!v184)
                                              {
                                                v183 = v174 + 3;
                                                if (v174 + 3 >= v173)
                                                  goto LABEL_143;
                                                v184 = *(_QWORD *)(v149 + 8 * v183);
                                                if (!v184)
                                                {
                                                  v183 = v174 + 4;
                                                  if (v174 + 4 >= v173)
                                                    goto LABEL_143;
                                                  v184 = *(_QWORD *)(v149 + 8 * v183);
                                                  if (!v184)
                                                  {
                                                    v183 = v174 + 5;
                                                    if (v174 + 5 >= v173)
                                                      goto LABEL_143;
                                                    v184 = *(_QWORD *)(v149 + 8 * v183);
                                                    if (!v184)
                                                    {
                                                      v183 = v174 + 6;
                                                      if (v174 + 6 >= v173)
                                                      {
LABEL_143:
                                                        swift_release();
                                                        swift_release();
                                                        goto LABEL_144;
                                                      }
                                                      v184 = *(_QWORD *)(v149 + 8 * v183);
                                                      if (!v184)
                                                      {
                                                        do
                                                        {
                                                          if (v215 == v174)
                                                            goto LABEL_143;
                                                          v184 = v213[v174++];
                                                        }
                                                        while (!v184);
                                                        v183 = v174 + 6;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                            v172 = (v184 - 1) & v184;
                                            v176 = __clz(__rbit64(v184)) + (v183 << 6);
                                            v174 = v183;
                                          }
                                          v177 = 16 * v176;
                                          v178 = (uint64_t *)(*(_QWORD *)(v130 + 48) + 16 * v176);
                                          v179 = v178[1];
                                          v180 = (uint64_t *)(*(_QWORD *)(v130 + 56) + v177);
                                          v181 = v180[1];
                                          v216[0] = *v178;
                                          v216[1] = v179;
                                          v216[2] = *v180;
                                          v216[3] = v181;
                                          swift_bridgeObjectRetain();
                                          swift_retain();
                                          v182 = v214;
                                          sub_1B20BE1A0(v216);
                                          v214 = v182;
                                          swift_release();
                                          swift_bridgeObjectRelease();
                                        }
                                      }
LABEL_145:
                                      swift_release();
LABEL_146:
                                      if (++v13 == v209)
                                        goto LABEL_141;
                                      goto LABEL_147;
                                    }
                                    v163 = *(_QWORD *)(v149 + 8 * v162);
                                    if (!v163)
                                    {
                                      do
                                      {
                                        if (v153 - 6 == v148)
                                          goto LABEL_222;
                                        v163 = *(_QWORD *)(v215 + 8 * v148++);
                                      }
                                      while (!v163);
                                      v162 = v148 + 5;
                                    }
                                  }
                                }
                              }
                            }
                            v152 = (v163 - 1) & v163;
                            v156 = __clz(__rbit64(v163)) + (v162 << 6);
                            v148 = v162;
                          }
                          v157 = (uint64_t *)(*(_QWORD *)(v130 + 48) + 16 * v156);
                          v159 = *v157;
                          v158 = v157[1];
                          v160 = *(_QWORD *)(*(_QWORD *)(v130 + 56) + 16 * v156 + 8);
                          *(_QWORD *)(v154 + ((v156 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v156;
                          v161 = (_QWORD *)(v147[6] + 16 * v156);
                          *v161 = v159;
                          v161[1] = v158;
                          *(_QWORD *)(v147[7] + 8 * v156) = v160;
                          ++v147[2];
                          swift_bridgeObjectRetain();
                          swift_retain();
                        }
                      }
                      v124 = *(_QWORD *)(v117 + 8 * (_QWORD)v123);
                      if (!v124)
                      {
                        do
                        {
                          if (v206 == v116)
                            goto LABEL_174;
                          v124 = *(_QWORD *)(v204 + 8 * (_QWORD)v116++);
                        }
                        while (!v124);
                        v123 = v116 + 5;
                      }
                    }
                  }
                }
              }
              v120 = (v124 - 1) & v124;
              v122 = __clz(__rbit64(v124)) + ((_QWORD)v123 << 6);
              v116 = v123;
            }
            v125 = *(_QWORD *)(v110 + 56);
            v126 = (_DWORD *)(v125 + 16 * v122);
            if (*v126 == -1 && !v126[1])
            {
              v127 = *(_QWORD **)(v125 + 16 * v122 + 8);
              swift_bridgeObjectRetain();
              swift_retain();
              v128 = *sub_1B1BFBD60();
              swift_retain();
              swift_bridgeObjectRetain();
              v129 = sub_1B1DB9018(v127, v128);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release_n();
              if ((v129 & 1) != 0)
              {
                *(_QWORD *)&v211[(v122 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v122;
                v213 = (_QWORD *)((char *)v213 + 1);
              }
            }
          }
        }
        v211 = (char *)swift_slowAlloc();
        bzero(v211, v113);
        v213 = 0;
        v131 = 0;
        v132 = v110 + 64;
        v133 = 1 << *(_BYTE *)(v110 + 32);
        if (v133 < 64)
          v134 = ~(-1 << v133);
        else
          v134 = -1;
        v135 = v134 & *(_QWORD *)(v110 + 64);
        v215 = (unint64_t)(v133 + 63) >> 6;
        v206 = (char *)(v110 + 112);
        v207 = (uint64_t *)(v215 - 6);
        while (1)
        {
          if (v135)
          {
            v136 = __clz(__rbit64(v135));
            v135 &= v135 - 1;
            v137 = v136 | ((_QWORD)v131 << 6);
          }
          else
          {
            v138 = v131 + 1;
            if ((uint64_t)(v131 + 1) >= v215)
              goto LABEL_199;
            v139 = *(_QWORD *)(v132 + 8 * (_QWORD)v138);
            if (!v139)
            {
              v138 = v131 + 2;
              if ((uint64_t)(v131 + 2) >= v215)
                goto LABEL_199;
              v139 = *(_QWORD *)(v132 + 8 * (_QWORD)v138);
              if (!v139)
              {
                v138 = v131 + 3;
                if ((uint64_t)(v131 + 3) >= v215)
                  goto LABEL_199;
                v139 = *(_QWORD *)(v132 + 8 * (_QWORD)v138);
                if (!v139)
                {
                  v138 = v131 + 4;
                  if ((uint64_t)(v131 + 4) >= v215)
                    goto LABEL_199;
                  v139 = *(_QWORD *)(v132 + 8 * (_QWORD)v138);
                  if (!v139)
                  {
                    v138 = v131 + 5;
                    if ((uint64_t)(v131 + 5) >= v215)
                    {
LABEL_199:
                      v145 = v211;
                      v130 = sub_1B1C05168((unint64_t *)v211, v210, (uint64_t)v213, v110);
                      MEMORY[0x1B5E23F88](v145, -1, -1);
                      goto LABEL_200;
                    }
                    v139 = *(_QWORD *)(v132 + 8 * (_QWORD)v138);
                    if (!v139)
                    {
                      do
                      {
                        if (v207 == (uint64_t *)v131)
                          goto LABEL_199;
                        v139 = *(_QWORD *)&v206[8 * (_QWORD)v131++];
                      }
                      while (!v139);
                      v138 = v131 + 5;
                    }
                  }
                }
              }
            }
            v135 = (v139 - 1) & v139;
            v137 = __clz(__rbit64(v139)) + ((_QWORD)v138 << 6);
            v131 = v138;
          }
          v140 = *(_QWORD *)(v110 + 56);
          v141 = (_DWORD *)(v140 + 16 * v137);
          if (*v141 == -1 && !v141[1])
          {
            v142 = *(_QWORD **)(v140 + 16 * v137 + 8);
            swift_bridgeObjectRetain();
            swift_retain();
            v143 = *sub_1B1BFBD60();
            swift_retain();
            swift_bridgeObjectRetain();
            v144 = sub_1B1DB9018(v142, v143);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release_n();
            if ((v144 & 1) != 0)
            {
              *(_QWORD *)&v211[(v137 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v137;
              v213 = (_QWORD *)((char *)v213 + 1);
            }
          }
        }
      }
      if (!v23)
        goto LABEL_141;
      v24 = 0;
LABEL_19:
      v25 = *(_QWORD *)(v205 + (v24 << 6) + 8);
      if (!*(_QWORD *)(v25 + 16))
        goto LABEL_18;
      v203 = v24;
      v199 = v198[v24];
      v26 = *(_BYTE *)(v25 + 32);
      v27 = v26 & 0x3F;
      v201 = v205 + (v24 << 6);
      v202 = (unint64_t)((1 << v26) + 63) >> 6;
      v28 = 8 * v202;
      v29 = swift_bridgeObjectRetain();
      v208 = v25;
      if (v27 <= 0xD)
        break;
      v29 = swift_stdlib_isStackAllocationSafe();
      if ((v29 & 1) != 0)
        break;
      v213 = (_QWORD *)swift_slowAlloc();
      bzero(v213, v28);
      v215 = 0;
      v50 = 0;
      v51 = v25 + 64;
      v52 = 1 << *(_BYTE *)(v25 + 32);
      if (v52 < 64)
        v53 = ~(-1 << v52);
      else
        v53 = -1;
      v54 = v53 & *(_QWORD *)(v25 + 64);
      v55 = (unint64_t)(v52 + 63) >> 6;
      v211 = (char *)(v25 + 112);
      v212 = v55 - 6;
      while (1)
      {
        if (v54)
        {
          v56 = __clz(__rbit64(v54));
          v54 &= v54 - 1;
          v57 = v56 | (v50 << 6);
          goto LABEL_85;
        }
        v58 = v50 + 1;
        if (v50 + 1 >= v55)
          goto LABEL_89;
        v59 = *(_QWORD *)(v51 + 8 * v58);
        if (!v59)
        {
          v58 = v50 + 2;
          if (v50 + 2 >= v55)
            goto LABEL_89;
          v59 = *(_QWORD *)(v51 + 8 * v58);
          if (!v59)
          {
            v58 = v50 + 3;
            if (v50 + 3 >= v55)
              goto LABEL_89;
            v59 = *(_QWORD *)(v51 + 8 * v58);
            if (!v59)
            {
              v58 = v50 + 4;
              if (v50 + 4 >= v55)
                goto LABEL_89;
              v59 = *(_QWORD *)(v51 + 8 * v58);
              if (!v59)
              {
                v58 = v50 + 5;
                if (v50 + 5 >= v55)
                  goto LABEL_89;
                v59 = *(_QWORD *)(v51 + 8 * v58);
                if (!v59)
                  break;
              }
            }
          }
        }
LABEL_84:
        v54 = (v59 - 1) & v59;
        v57 = __clz(__rbit64(v59)) + (v58 << 6);
        v50 = v58;
LABEL_85:
        v60 = *(_QWORD *)(v25 + 56);
        v61 = (_DWORD *)(v60 + 16 * v57);
        if (*v61 == -1 && !v61[1])
        {
          v62 = *(_QWORD **)(v60 + 16 * v57 + 8);
          swift_bridgeObjectRetain();
          swift_retain();
          v63 = *sub_1B1BFBD60();
          swift_retain();
          swift_bridgeObjectRetain();
          v64 = sub_1B1DB9018(v62, v63);
          swift_bridgeObjectRelease();
          v25 = v208;
          swift_bridgeObjectRelease();
          swift_release_n();
          if ((v64 & 1) != 0)
          {
            *(_QWORD *)((char *)v213 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v57;
            ++v215;
          }
        }
      }
      while (v212 != v50)
      {
        v59 = *(_QWORD *)&v211[8 * v50++];
        if (v59)
        {
          v58 = v50 + 5;
          goto LABEL_84;
        }
      }
LABEL_89:
      v65 = v213;
      v49 = sub_1B1C05168(v213, v202, v215, v25);
      MEMORY[0x1B5E23F88](v65, -1, -1);
LABEL_90:
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v49 + 16))
        goto LABEL_17;
      sub_1B1B9B3A0();
      v66 = sub_1B22296B8();
      v67 = (_QWORD *)v66;
      v68 = 0;
      v69 = 1 << *(_BYTE *)(v49 + 32);
      if (v69 < 64)
        v70 = ~(-1 << v69);
      else
        v70 = -1;
      v71 = v70 & *(_QWORD *)(v49 + 64);
      v72 = (unint64_t)(v69 + 63) >> 6;
      v73 = v66 + 64;
      v215 = v49 + 64;
      while (2)
      {
        if (v71)
        {
          v74 = __clz(__rbit64(v71));
          v71 &= v71 - 1;
          v75 = v74 | (v68 << 6);
LABEL_96:
          v76 = (uint64_t *)(*(_QWORD *)(v49 + 48) + 16 * v75);
          v78 = *v76;
          v77 = v76[1];
          v79 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 16 * v75 + 8);
          *(_QWORD *)(v73 + ((v75 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v75;
          v80 = (_QWORD *)(v67[6] + 16 * v75);
          *v80 = v78;
          v80[1] = v77;
          *(_QWORD *)(v67[7] + 8 * v75) = v79;
          ++v67[2];
          swift_bridgeObjectRetain();
          swift_retain();
          continue;
        }
        break;
      }
      v81 = v68 + 1;
      if (v68 + 1 >= v72)
        goto LABEL_112;
      v82 = *(_QWORD *)(v215 + 8 * v81);
      if (v82)
        goto LABEL_111;
      v81 = v68 + 2;
      if (v68 + 2 >= v72)
        goto LABEL_112;
      v82 = *(_QWORD *)(v215 + 8 * v81);
      if (v82)
        goto LABEL_111;
      v81 = v68 + 3;
      if (v68 + 3 >= v72)
        goto LABEL_112;
      v82 = *(_QWORD *)(v215 + 8 * v81);
      if (v82)
        goto LABEL_111;
      v81 = v68 + 4;
      if (v68 + 4 >= v72)
        goto LABEL_112;
      v82 = *(_QWORD *)(v215 + 8 * v81);
      if (v82)
        goto LABEL_111;
      v81 = v68 + 5;
      if (v68 + 5 >= v72)
        goto LABEL_112;
      v82 = *(_QWORD *)(v215 + 8 * v81);
      if (v82)
      {
LABEL_111:
        v71 = (v82 - 1) & v82;
        v75 = __clz(__rbit64(v82)) + (v81 << 6);
        v68 = v81;
        goto LABEL_96;
      }
      while (v72 - 6 != v68)
      {
        v82 = *(_QWORD *)(v49 + 112 + 8 * v68++);
        if (v82)
        {
          v81 = v68 + 5;
          goto LABEL_111;
        }
      }
LABEL_112:
      v83 = v201;
      *(_QWORD *)(v201 + 16) = v67;
      swift_bridgeObjectRelease();
      swift_retain();
      v84 = swift_bridgeObjectRetain();
      v85 = v214;
      v86 = sub_1B20BF910(v84, v49);
      v214 = v85;
      swift_bridgeObjectRelease();
      swift_release();
      *(_QWORD *)(v83 + 8) = v86;
      swift_bridgeObjectRelease();
      v87 = sub_1B1A11FDC((uint64_t)&type metadata for CodeGenerationComponent);
      if ((v88 & 1) != 0)
        goto LABEL_17;
      v89 = *(_QWORD *)(v87 + 8 * v199);
      if (!v89)
        goto LABEL_17;
      v90 = 1 << *(_BYTE *)(v49 + 32);
      if (v90 < 64)
        v91 = ~(-1 << v90);
      else
        v91 = -1;
      v92 = v91 & *(_QWORD *)(v49 + 64);
      v93 = (unint64_t)(v90 + 63) >> 6;
      swift_retain();
      swift_retain();
      v94 = 0;
      v211 = (char *)(v93 - 7);
      v212 = v93;
      v210 = v49 + 120;
      v213 = (_QWORD *)v49;
      while (2)
      {
        if (v92)
        {
          v95 = __clz(__rbit64(v92));
          v92 &= v92 - 1;
          v96 = v94;
          v97 = v95 | ((_QWORD)v94 << 6);
LABEL_138:
          v100 = (uint64_t *)(v213[6] + 16 * v97);
          v101 = *v100;
          v102 = v100[1];
          v103 = v89;
          swift_bridgeObjectRetain();
          swift_retain();
          v104 = swift_bridgeObjectRetain();
          v105 = v214;
          sub_1B20BEB0C(v104, v101, v102);
          v107 = v106;
          v214 = v105;
          swift_bridgeObjectRelease();
          if (v107)
          {
            swift_bridgeObjectRelease();
            swift_retain();
            sub_1B1C04874(1);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release_n();
          }
          else
          {
            swift_release();
            swift_bridgeObjectRelease();
          }
          v89 = v103;
          v94 = v96;
          continue;
        }
        break;
      }
      v98 = v94 + 1;
      if ((uint64_t)(v94 + 1) >= v212)
        goto LABEL_16;
      v99 = *(_QWORD *)(v215 + 8 * (_QWORD)v98);
      if (v99)
        goto LABEL_137;
      v98 = v94 + 2;
      if ((uint64_t)(v94 + 2) >= v212)
        goto LABEL_16;
      v99 = *(_QWORD *)(v215 + 8 * (_QWORD)v98);
      if (v99)
        goto LABEL_137;
      v98 = v94 + 3;
      if ((uint64_t)(v94 + 3) >= v212)
        goto LABEL_16;
      v99 = *(_QWORD *)(v215 + 8 * (_QWORD)v98);
      if (v99)
        goto LABEL_137;
      v98 = v94 + 4;
      if ((uint64_t)(v94 + 4) >= v212)
        goto LABEL_16;
      v99 = *(_QWORD *)(v215 + 8 * (_QWORD)v98);
      if (v99)
        goto LABEL_137;
      v98 = v94 + 5;
      if ((uint64_t)(v94 + 5) >= v212)
        goto LABEL_16;
      v99 = *(_QWORD *)(v215 + 8 * (_QWORD)v98);
      if (v99)
        goto LABEL_137;
      v98 = v94 + 6;
      if ((uint64_t)(v94 + 6) >= v212)
        goto LABEL_16;
      v99 = *(_QWORD *)(v215 + 8 * (_QWORD)v98);
      if (v99)
      {
LABEL_137:
        v92 = (v99 - 1) & v99;
        v97 = __clz(__rbit64(v99)) + ((_QWORD)v98 << 6);
        v96 = v98;
        goto LABEL_138;
      }
      while (v211 != v94)
      {
        v99 = *(_QWORD *)(v210 + 8 * (_QWORD)v94++);
        if (v99)
        {
          v98 = v94 + 6;
          goto LABEL_137;
        }
      }
LABEL_16:
      swift_release();
      swift_release();
LABEL_17:
      swift_release();
      v23 = v197;
      v24 = v203;
LABEL_18:
      if (++v24 != v23)
        goto LABEL_19;
LABEL_141:
      v108 = v214;
      sub_1B1F05D48(v194, (unsigned __int16 **)v222, (uint64_t)v240);
      v214 = v108;
      v109 = v196;
      sub_1B1F03804(v196);
      ecs_stack_allocator_pop_snapshot(v193);
      if ((v192 & 1) != 0)
      {
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v109 + 43));
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v109 + 47));
      }
      swift_release();
      v11 = v191 + 1;
      if (v191 + 1 == v187)
      {
        sub_1B1A086DC(v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        return sub_1B1A086DC(v232, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    v200 = &v186;
    MEMORY[0x1E0C80A78](v29, v30);
    v206 = (char *)&v186 - ((v28 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v206, v28);
    v207 = 0;
    v31 = 0;
    v32 = 1 << *(_BYTE *)(v25 + 32);
    if (v32 < 64)
      v33 = ~(-1 << v32);
    else
      v33 = -1;
    v34 = v33 & *(_QWORD *)(v25 + 64);
    v210 = v25 + 64;
    v211 = (char *)((unint64_t)(v32 + 63) >> 6);
    v195 = v211 - 6;
    v204 = v25 + 112;
    while (1)
    {
      do
      {
LABEL_27:
        if (v34)
        {
          v35 = __clz(__rbit64(v34));
          v34 &= v34 - 1;
          v36 = v35 | ((_QWORD)v31 << 6);
        }
        else
        {
          v37 = v31 + 1;
          if ((uint64_t)(v31 + 1) >= (uint64_t)v211)
            goto LABEL_64;
          v38 = *(_QWORD *)(v210 + 8 * (_QWORD)v37);
          if (!v38)
          {
            v37 = v31 + 2;
            if ((uint64_t)(v31 + 2) >= (uint64_t)v211)
              goto LABEL_64;
            v38 = *(_QWORD *)(v210 + 8 * (_QWORD)v37);
            if (!v38)
            {
              v37 = v31 + 3;
              if ((uint64_t)(v31 + 3) >= (uint64_t)v211)
                goto LABEL_64;
              v38 = *(_QWORD *)(v210 + 8 * (_QWORD)v37);
              if (!v38)
              {
                v37 = v31 + 4;
                if ((uint64_t)(v31 + 4) >= (uint64_t)v211)
                  goto LABEL_64;
                v38 = *(_QWORD *)(v210 + 8 * (_QWORD)v37);
                if (!v38)
                {
                  v37 = v31 + 5;
                  if ((uint64_t)(v31 + 5) >= (uint64_t)v211)
                  {
LABEL_64:
                    v49 = sub_1B1C05168((unint64_t *)v206, v202, (uint64_t)v207, v25);
                    goto LABEL_90;
                  }
                  v38 = *(_QWORD *)(v210 + 8 * (_QWORD)v37);
                  if (!v38)
                  {
                    do
                    {
                      if (v195 == v31)
                        goto LABEL_64;
                      v38 = *(_QWORD *)(v204 + 8 * (_QWORD)v31++);
                    }
                    while (!v38);
                    v37 = v31 + 5;
                  }
                }
              }
            }
          }
          v34 = (v38 - 1) & v38;
          v36 = __clz(__rbit64(v38)) + ((_QWORD)v37 << 6);
          v31 = v37;
        }
        v39 = *(_QWORD *)(v25 + 56) + 16 * v36;
      }
      while (*(_DWORD *)v39 != -1 || *(_DWORD *)(v39 + 4));
      v209 = v36;
      v40 = *(_QWORD **)(v39 + 8);
      v41 = qword_1ED4B9480;
      v215 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 16 * v36 + 8);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v41 != -1)
        swift_once();
      v42 = qword_1ED4D0D68;
      v43 = sub_1B1C7A1C4(qword_1ED4D0D68);
      if (v43)
        break;
      swift_bridgeObjectRelease();
      swift_release();
    }
    v44 = v43;
    v212 = v34;
    v213 = v31;
    v6 = v40[4];
    swift_bridgeObjectRetain_n();
    swift_retain();
    v45 = 0;
    while (1)
    {
      a1 = *(_QWORD **)(v42 + 8 * v45 + 32);
      swift_retain();
      v46 = sub_1B2229304();
      v4 = &protocol descriptor for Component;
      if (!swift_conformsToProtocol2())
        break;
      v4 = (ProtocolDescriptor *)sub_1B2229304();
      if (!swift_conformsToProtocol2())
        goto LABEL_252;
      if ((ProtocolDescriptor *)v46 == v4 && a1[5] == v40[5])
      {
        if (a1[2] == v40[2] && a1[3] == v40[3])
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_63;
        }
        v48 = sub_1B2229D24();
        swift_release();
        if ((v48 & 1) != 0)
        {
          swift_release();
          swift_bridgeObjectRelease();
LABEL_63:
          v31 = (char *)v213;
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          v25 = v208;
          *(_QWORD *)&v206[(v209 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v209;
          v207 = (uint64_t *)((char *)v207 + 1);
          v34 = v212;
          goto LABEL_27;
        }
      }
      else
      {
        swift_release();
      }
      if (v44 == ++v45)
      {
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        v25 = v208;
        v34 = v212;
        v31 = (char *)v213;
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    swift_once();
  }
}

_QWORD *sub_1B20ABC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _OWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  _OWORD *v31;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _OWORD v42[2];
  uint64_t v43;
  _QWORD v44[8];
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _BYTE v56[40];
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v57 = qword_1ED4D09F8;
  v58 = v7;
  v59 = v6 >> 31;
  v60 = 1;
  v61 = 2;
  v62 = 0;
  swift_retain();
  sub_1B1E3B400(3, (uint64_t)v42);
  swift_release();
  v54[0] = v42[0];
  v54[1] = v42[1];
  v55 = v43;
  sub_1B1E8FCE4(a1, (uint64_t)v54, 0x200000000, v44);
  sub_1B1A18378((uint64_t)v44, (uint64_t)v45, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v45[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v42);
  if (v51 <= 0 || (v37 = v48) == 0)
  {
    sub_1B19ED720((uint64_t)v42);
    return sub_1B1A086DC(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v8 = v50;
  v9 = v50[4];
  v10 = *(unsigned __int8 *)(v49 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v52[0] = v45[0];
  v52[1] = v45[1];
  v53 = v46;
  v35 = (uint64_t)(v50 + 6);
  v36 = v47;
  v34 = v50 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = 0;
  v12 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v41 = _Q0;
  v33 = v10;
  do
  {
    v18 = (unsigned int *)(v36 + 48 * v11);
    v39 = *v18;
    v40 = v12;
    v38 = v18[1];
    v20 = (uint64_t *)*((_QWORD *)v18 + 2);
    v19 = *((_QWORD *)v18 + 3);
    v22 = *((_QWORD *)v18 + 4);
    v21 = *((_QWORD *)v18 + 5);
    if (v10)
    {
      v23 = *(os_unfair_lock_s **)(v21 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v23);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v21 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    sub_1B1A18378(v35, (uint64_t)v56, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v24 = v8[4];
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v8[6] = ecs_stack_allocator_allocate(v24, 48 * v25, 8);
    v8[7] = v25;
    v34[1] = 0;
    v34[2] = 0;
    *v34 = 0;
    swift_release();
    v26 = sub_1B1A12038((uint64_t)&type metadata for ColorRampComponent, (uint64_t)&off_1E6390FE0, v20, v19, v22, (uint64_t)v8);
    if (v20)
    {
      if (!v22)
        goto LABEL_21;
      v27 = (_BYTE *)(v26 + 8);
      v10 = v33;
      v12 = v40;
      do
      {
        if (!*(_QWORD *)(*(_QWORD *)v27 + 16))
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BAF90, (uint64_t (*)(uint64_t))sub_1B1791068, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v28 = (_OWORD *)swift_allocObject();
          v28[1] = xmmword_1B226CD10;
          v28[2] = v41;
          v28[3] = xmmword_1B2244E20;
          *((_QWORD *)v27 - 1) = v28;
          *(_QWORD *)v27 = &unk_1E636CD30;
          v27[8] = 1;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v27 += 24;
        --v22;
      }
      while (v22);
    }
    else
    {
      if ((_DWORD)v39 == (_DWORD)v38)
      {
LABEL_21:
        v10 = v33;
        v12 = v40;
        goto LABEL_22;
      }
      v29 = v38 - v39;
      v30 = (_BYTE *)(v26 + 24 * v39 + 8);
      v10 = v33;
      v12 = v40;
      do
      {
        if (!*(_QWORD *)(*(_QWORD *)v30 + 16))
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BAF90, (uint64_t (*)(uint64_t))sub_1B1791068, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v31 = (_OWORD *)swift_allocObject();
          v31[1] = xmmword_1B226CD10;
          v31[2] = v41;
          v31[3] = xmmword_1B2244E20;
          *((_QWORD *)v30 - 1) = v31;
          *(_QWORD *)v30 = &unk_1E636CD08;
          v30[8] = 1;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        v30 += 24;
        --v29;
      }
      while (v29);
    }
LABEL_22:
    sub_1B1F05D48(v8, (unsigned __int16 **)v52, (uint64_t)v56);
    sub_1B1F03804((char *)v21);
    ecs_stack_allocator_pop_snapshot(v9);
    if ((v10 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 376));
    }
    swift_release();
    ++v11;
  }
  while (v11 != v37);
  sub_1B19ED720((uint64_t)v42);
  sub_1B1A086DC(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20AC0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  int *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  int v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char v86;
  uint64_t v87;
  int v88;
  int v89;
  char *v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  int v98;
  int v99;
  int *v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  int v152;
  int v153;
  uint64_t v154;
  _DWORD *v155;
  char v157;
  uint64_t v158;
  int v159;
  int v160;
  char *v161;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v163;
  unint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  ValueMetadata *v191;
  _UNKNOWN **v192;
  char v193;
  _OWORD v194[2];
  uint64_t v195;
  _QWORD v196[8];
  _OWORD v197[2];
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  _OWORD v207[2];
  uint64_t v208;
  _OWORD v209[2];
  uint64_t v210;
  _BYTE v211[40];
  uint64_t v212;
  int v213;
  char v214;
  uint64_t v215;
  char v216;
  uint64_t v217;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v212 = qword_1ED4D09F8;
  v213 = v7;
  v214 = v6 >> 31;
  v215 = 1;
  v216 = 2;
  v217 = 0;
  swift_retain();
  sub_1B1B17DFC(1, 3, (uint64_t)v194);
  swift_release();
  v209[0] = v194[0];
  v209[1] = v194[1];
  v210 = v195;
  sub_1B1E8FCE4(a1, (uint64_t)v209, 0x200000000, v196);
  sub_1B1A18378((uint64_t)v196, (uint64_t)v197, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v197[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v194);
  v204 = v197[0];
  v205 = v197[1];
  v206 = v198;
  if (v203 <= 0 || (v175 = v200) == 0)
  {
    sub_1B19ED720((uint64_t)v194);
    return sub_1B1A086DC(v196, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v174 = v199;
  v181 = v202[4];
  v180 = *(unsigned __int8 *)(v201 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v173 = (uint64_t)(v202 + 6);
  v183 = a1;
  v184 = (uint64_t *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v176 = OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
  v182 = v202;
  v172 = v202 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v8 = 0;
  v9 = 0;
  do
  {
    v178 = v9;
    v179 = v8;
    v10 = (unsigned int *)(v174 + 48 * v8);
    v11 = *v10;
    v12 = v10[1];
    v13 = *((_QWORD *)v10 + 3);
    v188 = (uint64_t *)*((_QWORD *)v10 + 2);
    v15 = *((_QWORD *)v10 + 4);
    v14 = *((_QWORD *)v10 + 5);
    if (v180)
    {
      v16 = *(os_unfair_lock_s **)(v14 + 376);
      swift_retain();
      os_unfair_lock_lock(v16);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v181);
    sub_1B1A18378(v173, (uint64_t)v211, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v17 = v182[4];
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v182[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
    v182[7] = v18;
    v172[1] = 0;
    v172[2] = 0;
    *v172 = 0;
    swift_release();
    v185 = sub_1B1A12038((uint64_t)&type metadata for SubEntity, (uint64_t)&off_1E63C54A8, v188, v13, v15, (uint64_t)v182);
    v190 = sub_1B1A12038((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v188, v13, v15, (uint64_t)v182);
    if (!v188)
    {
      if ((_DWORD)v11 == (_DWORD)v12)
        goto LABEL_100;
      v187 = v12;
      while (1)
      {
        v97 = (int *)(v190 + 8 * v11);
        v99 = *v97;
        v98 = v97[1];
        if (*v97 == -1 && v98 == 0)
        {
          v101 = (int *)(v185 + 8 * v11);
          v99 = *v101;
          v98 = v101[1];
          *v97 = v99;
          v97[1] = v98;
        }
        v102 = v99 == -1 && v98 == 0;
        if (!v102
          && (v99 & 0x80000000) == 0
          && (v103 = v184[1], v103 > v99)
          && ((v104 = *v184, v98 != -1) ? (v105 = *(_DWORD *)(*v184 + 12 * v99 + 8) == v98) : (v105 = 1),
              v105
           && (v106 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183 + 80) + 8 * *(__int16 *)(v104 + 12 * v99 + 6) + 32)
                                + 16),
               v107 = *(_QWORD *)(v106 + 128),
               *(_QWORD *)(v107 + 16))
           && (v108 = sub_1B1DC3AC8((uint64_t)&type metadata for Children), (v109 & 1) != 0)
           && *(ValueMetadata **)(*(_QWORD *)(v106 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v107 + 56) + 8 * v108) + 32) == &type metadata for Children))
        {
          v140 = *v97;
          v139 = v97[1];
          if (v140 == -1 && !v139)
            goto LABEL_186;
          if (v140 < 0)
            goto LABEL_186;
          if (v103 <= v140)
            goto LABEL_186;
          v141 = v104 + 12 * v140;
          v142 = *(__int16 *)(v141 + 4);
          if (v139 != -1 && *(_DWORD *)(v141 + 8) != v139)
            goto LABEL_186;
          v143 = *(_QWORD *)(*(_QWORD *)(v183 + 136) + 8 * *(int *)(v104 + 12 * v140) + 32);
          v144 = *(_QWORD *)(v143 + 48);
          v145 = *(_QWORD *)(v144 + 16);
          if (!v145)
            goto LABEL_186;
          v146 = (_QWORD *)(v144 + 56);
          while ((ValueMetadata *)*(v146 - 3) != &type metadata for Children)
          {
            v146 += 5;
            if (!--v145)
              goto LABEL_186;
          }
          v147 = *v146 + 8 * v142;
          v148 = *(_QWORD *)(v143 + 128);
          v149 = *(_QWORD *)(v148 + v147);
          v150 = *(_QWORD *)(v14 + 16);
          v151 = *(_BYTE *)(v14 + 184);
          swift_retain();
          if ((v151 & 1) != 0)
            goto LABEL_187;
          v152 = *(_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v11);
          v153 = *(_DWORD *)(*(_QWORD *)(v150 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v152 + 8);
          swift_bridgeObjectRetain();
          swift_release();
          v154 = *(_QWORD *)(v149 + 16);
          if (!v154)
          {
LABEL_168:
            swift_bridgeObjectRelease();
            v157 = *(_BYTE *)(v14 + 184);
            v158 = swift_retain();
            if ((v157 & 1) != 0)
              goto LABEL_187;
            v159 = *(_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v11);
            v160 = *(_DWORD *)(*(_QWORD *)(v158 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v159 + 8);
            swift_release();
            v161 = *(char **)(v148 + v147);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v148 + v147) = v161;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v161 = sub_1B1C63D98(0, *((_QWORD *)v161 + 2) + 1, 1, v161);
              *(_QWORD *)(v148 + v147) = v161;
            }
            v164 = *((_QWORD *)v161 + 2);
            v163 = *((_QWORD *)v161 + 3);
            if (v164 >= v163 >> 1)
              v161 = sub_1B1C63D98(v163 > 1, v164 + 1, 1, v161);
            *((_QWORD *)v161 + 2) = v164 + 1;
            v165 = &v161[8 * v164];
            *((_DWORD *)v165 + 8) = v159;
            *((_DWORD *)v165 + 9) = v160;
            *(_QWORD *)(v148 + v147) = v161;
            goto LABEL_147;
          }
          v155 = (_DWORD *)(v149 + 36);
          while (*(v155 - 1) != v152 || *v155 != v153)
          {
            v155 += 2;
            if (!--v154)
              goto LABEL_168;
          }
        }
        else
        {
          sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE30, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v110 = swift_allocObject();
          *(_OWORD *)(v110 + 16) = xmmword_1B226D240;
          v111 = *(_BYTE *)(v14 + 184);
          v112 = swift_retain();
          if ((v111 & 1) != 0)
            goto LABEL_187;
          v113 = *(_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v11);
          v114 = *(_DWORD *)(*(_QWORD *)(v112 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v113 + 8);
          swift_release();
          *(_DWORD *)(v110 + 32) = v113;
          *(_DWORD *)(v110 + 36) = v114;
          v115 = v97[1];
          v116 = *v97;
          if (__PAIR64__(v115, v116) != 0xFFFFFFFF && (v116 & 0x80000000) == 0 && v184[1] > v116)
          {
            v117 = *v184 + 12 * (int)v116;
            v118 = *(__int16 *)(v117 + 4);
            if (v115 == -1 || *(_DWORD *)(v117 + 8) == v115)
            {
              v119 = *(_QWORD *)(*(_QWORD *)(v183 + 136) + 8 * *(int *)(*v184 + 12 * (int)v116) + 32);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v119 + 344));
              v120 = *(_QWORD *)(*(_QWORD *)(v119 + 40) + 16);
              v121 = *(_QWORD *)(v120 + 128);
              if (*(_QWORD *)(v121 + 16)
                && (v122 = sub_1B1DC3AC8((uint64_t)&type metadata for Children), (v123 & 1) != 0)
                && *(ValueMetadata **)(*(_QWORD *)(v120 + 24)
                                     + 16 * *(_QWORD *)(*(_QWORD *)(v121 + 56) + 8 * v122)
                                     + 32) == &type metadata for Children)
              {
                v166 = *(_QWORD *)(v119 + 48);
                v167 = *(_QWORD *)(v166 + 16);
                if (v167)
                {
                  v168 = (uint64_t *)(v166 + 56);
                  while ((ValueMetadata *)*(v168 - 3) != &type metadata for Children)
                  {
                    v168 += 5;
                    if (!--v167)
                      goto LABEL_181;
                  }
                  v167 = *v168;
                }
LABEL_181:
                v169 = v167 + 8 * v118;
                v170 = *(_QWORD *)(v119 + 128);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *(_QWORD *)(v170 + v169) = v110;
              }
              else
              {
                v189 = v118;
                v124 = *(uint64_t **)(v183 + v176);
                ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v124 + 32));
                v125 = *v124;
                v126 = *(_QWORD *)(*(_QWORD *)(v119 + 40) + 16);
                v127 = *(_QWORD *)(v126 + 128);
                if (!*(_QWORD *)(v127 + 16)
                  || (v128 = sub_1B1DC3AC8((uint64_t)&type metadata for Children), (v129 & 1) == 0)
                  || *(ValueMetadata **)(*(_QWORD *)(v126 + 24)
                                       + 16 * *(_QWORD *)(*(_QWORD *)(v127 + 56) + 8 * v128)
                                       + 32) != &type metadata for Children)
                {
                  v191 = &type metadata for Children;
                  v192 = &off_1E63BED58;
                  v193 = 0;
                  sub_1B1F05960((uint64_t *)(v125 + 104), (uint64_t)&v191, v189, 0, v119, v125);
                  sub_1B1B68F14((uint64_t)&v191);
                }
                sub_1B1F03804((char *)v119);
                if (v184[1] <= v116
                  || (v130 = *v184 + 12 * (int)v116, v131 = *(__int16 *)(v130 + 4), v115 != -1)
                  && *(_DWORD *)(v130 + 8) != v115
                  || (v132 = *(_QWORD *)(*(_QWORD *)(v183 + 136) + 8 * *(int *)(*v184 + 12 * (int)v116) + 32),
                      v133 = *(_QWORD *)(v132 + 48),
                      (v134 = *(_QWORD *)(v133 + 16)) == 0))
                {
                  while (1)
                  {
LABEL_186:
                    v191 = 0;
                    v192 = (_UNKNOWN **)0xE000000000000000;
                    sub_1B2229430();
                    sub_1B2228890();
                    sub_1B1BC3C70();
                    sub_1B2228890();
                    swift_bridgeObjectRelease();
                    sub_1B2228890();
                    sub_1B2228890();
                    sub_1B2228890();
LABEL_187:
                    sub_1B2229688();
                    __break(1u);
                  }
                }
                v135 = (_QWORD *)(v133 + 56);
                while ((ValueMetadata *)*(v135 - 3) != &type metadata for Children)
                {
                  v135 += 5;
                  if (!--v134)
                    goto LABEL_186;
                }
                v136 = *v135 + 8 * v131;
                v137 = *(_QWORD *)(v132 + 128);
                swift_bridgeObjectRelease();
                *(_QWORD *)(v137 + v136) = v110;
                v138 = *(_QWORD *)(*v124 + 32);
                swift_bridgeObjectRetain();
                ecs_stack_allocator_pop_snapshot(v138);
                v12 = v187;
              }
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v119 + 344));
            }
          }
        }
        swift_bridgeObjectRelease();
LABEL_147:
        if (++v11 == v12)
          goto LABEL_100;
      }
    }
    if (v15)
    {
      v19 = 0;
      v20 = v184;
      v186 = v15;
      while (1)
      {
        v21 = v188[v19];
        v22 = (int *)(v190 + 8 * v19);
        v24 = *v22;
        v23 = v22[1];
        if (*v22 == -1 && v23 == 0)
        {
          v26 = (int *)(v185 + 8 * v19);
          v24 = *v26;
          v23 = v26[1];
          *v22 = v24;
          v22[1] = v23;
        }
        if ((v24 != -1 || v23 != 0) && (v24 & 0x80000000) == 0)
        {
          v28 = v20[1];
          if (v28 > v24)
          {
            v29 = *v20;
            if (v23 == -1 || *(_DWORD *)(*v20 + 12 * v24 + 8) == v23)
            {
              v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v183 + 80) + 8 * *(__int16 *)(v29 + 12 * v24 + 6) + 32)
                              + 16);
              v32 = *(_QWORD *)(v31 + 128);
              if (*(_QWORD *)(v32 + 16))
              {
                v33 = sub_1B1DC3AC8((uint64_t)&type metadata for Children);
                if ((v34 & 1) != 0
                  && *(ValueMetadata **)(*(_QWORD *)(v31 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33) + 32) == &type metadata for Children)
                {
                  break;
                }
              }
            }
          }
        }
        sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE30, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_1B226D240;
        v36 = *(_BYTE *)(v14 + 184);
        v37 = swift_retain();
        if ((v36 & 1) != 0)
          goto LABEL_187;
        v38 = *(_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v21);
        v39 = *(_DWORD *)(*(_QWORD *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v38 + 8);
        swift_release();
        *(_DWORD *)(v35 + 32) = v38;
        *(_DWORD *)(v35 + 36) = v39;
        v40 = v22[1];
        v41 = *v22;
        if (__PAIR64__(v40, v41) == 0xFFFFFFFF)
          goto LABEL_43;
        if ((v41 & 0x80000000) != 0)
          goto LABEL_43;
        if (v20[1] <= v41)
          goto LABEL_43;
        v42 = *v20 + 12 * (int)v41;
        v43 = *(__int16 *)(v42 + 4);
        if (v40 != -1 && *(_DWORD *)(v42 + 8) != v40)
          goto LABEL_43;
        v45 = *(_QWORD *)(*(_QWORD *)(v183 + 136) + 8 * *(int *)(*v20 + 12 * (int)v41) + 32);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v45 + 344));
        v46 = *(_QWORD *)(*(_QWORD *)(v45 + 40) + 16);
        v47 = *(_QWORD *)(v46 + 128);
        if (*(_QWORD *)(v47 + 16)
          && (v48 = sub_1B1DC3AC8((uint64_t)&type metadata for Children), (v49 & 1) != 0)
          && *(ValueMetadata **)(*(_QWORD *)(v46 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v47 + 56) + 8 * v48) + 32) == &type metadata for Children)
        {
          v83 = *(_QWORD *)(v45 + 48);
          v84 = *(_QWORD *)(v83 + 16);
          if (v84)
          {
            v85 = (uint64_t *)(v83 + 56);
            v44 = v186;
            while ((ValueMetadata *)*(v85 - 3) != &type metadata for Children)
            {
              v85 += 5;
              if (!--v84)
                goto LABEL_98;
            }
            v84 = *v85;
          }
          else
          {
            v44 = v186;
          }
LABEL_98:
          v95 = v84 + 8 * v43;
          v96 = *(_QWORD *)(v45 + 128);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v96 + v95) = v35;
          v20 = v184;
        }
        else
        {
          v177 = v43;
          v50 = *(uint64_t **)(v183 + v176);
          ecs_stack_allocator_push_snapshot(*(_QWORD *)(*v50 + 32));
          v51 = *v50;
          v52 = *(_QWORD *)(*(_QWORD *)(v45 + 40) + 16);
          v53 = *(_QWORD *)(v52 + 128);
          if (!*(_QWORD *)(v53 + 16)
            || (v54 = sub_1B1DC3AC8((uint64_t)&type metadata for Children), (v55 & 1) == 0)
            || *(ValueMetadata **)(*(_QWORD *)(v52 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v54) + 32) != &type metadata for Children)
          {
            v191 = &type metadata for Children;
            v192 = &off_1E63BED58;
            v193 = 0;
            sub_1B1F05960((uint64_t *)(v51 + 104), (uint64_t)&v191, v177, 0, v45, v51);
            sub_1B1B68F14((uint64_t)&v191);
          }
          sub_1B1F03804((char *)v45);
          v20 = v184;
          if (v184[1] <= v41)
            goto LABEL_186;
          v56 = *v184 + 12 * (int)v41;
          v57 = *(__int16 *)(v56 + 4);
          if (v40 != -1 && *(_DWORD *)(v56 + 8) != v40)
            goto LABEL_186;
          v58 = *(_QWORD *)(*(_QWORD *)(v183 + 136) + 8 * *(int *)(*v184 + 12 * (int)v41) + 32);
          v59 = *(_QWORD *)(v58 + 48);
          v60 = *(_QWORD *)(v59 + 16);
          if (!v60)
            goto LABEL_186;
          v61 = (_QWORD *)(v59 + 56);
          while ((ValueMetadata *)*(v61 - 3) != &type metadata for Children)
          {
            v61 += 5;
            if (!--v60)
              goto LABEL_186;
          }
          v62 = *v61 + 8 * v57;
          v63 = *(_QWORD *)(v58 + 128);
          swift_bridgeObjectRelease();
          *(_QWORD *)(v63 + v62) = v35;
          v64 = *(_QWORD *)(*v50 + 32);
          swift_bridgeObjectRetain();
          ecs_stack_allocator_pop_snapshot(v64);
          v44 = v186;
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 344));
        swift_bridgeObjectRelease();
LABEL_45:
        if (++v19 == v44)
          goto LABEL_100;
      }
      v65 = v22[1];
      v66 = *v22;
      if (__PAIR64__(v65, v66) == 0xFFFFFFFF)
        goto LABEL_186;
      if ((v66 & 0x80000000) != 0)
        goto LABEL_186;
      if (v28 <= v66)
        goto LABEL_186;
      v67 = v29 + 12 * (int)v66;
      v68 = *(__int16 *)(v67 + 4);
      if (v65 != -1 && *(_DWORD *)(v67 + 8) != v65)
        goto LABEL_186;
      v69 = *(_QWORD *)(*(_QWORD *)(v183 + 136) + 8 * *(int *)(v29 + 12 * (int)v66) + 32);
      v70 = *(_QWORD *)(v69 + 48);
      v71 = *(_QWORD *)(v70 + 16);
      if (!v71)
        goto LABEL_186;
      v72 = (_QWORD *)(v70 + 56);
      while ((ValueMetadata *)*(v72 - 3) != &type metadata for Children)
      {
        v72 += 5;
        if (!--v71)
          goto LABEL_186;
      }
      v73 = *v72 + 8 * v68;
      v74 = *(_QWORD *)(v69 + 128);
      v75 = *(_QWORD *)(v74 + v73);
      v76 = *(_QWORD *)(v14 + 16);
      v77 = *(_BYTE *)(v14 + 184);
      swift_retain();
      if ((v77 & 1) != 0)
        goto LABEL_187;
      v78 = *(_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v21);
      v79 = *(_DWORD *)(*(_QWORD *)(v76 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v78 + 8);
      swift_bridgeObjectRetain();
      swift_release();
      v80 = *(_QWORD *)(v75 + 16);
      if (v80)
      {
        v81 = (_DWORD *)(v75 + 36);
        v20 = v184;
        while (*(v81 - 1) != v78 || *v81 != v79)
        {
          v81 += 2;
          if (!--v80)
            goto LABEL_89;
        }
LABEL_43:
        swift_bridgeObjectRelease();
      }
      else
      {
        v20 = v184;
LABEL_89:
        swift_bridgeObjectRelease();
        v86 = *(_BYTE *)(v14 + 184);
        v87 = swift_retain();
        if ((v86 & 1) != 0)
          goto LABEL_187;
        v88 = *(_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v21);
        v89 = *(_DWORD *)(*(_QWORD *)(v87 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v88 + 8);
        swift_release();
        v90 = *(char **)(v74 + v73);
        v91 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v74 + v73) = v90;
        if ((v91 & 1) == 0)
        {
          v90 = sub_1B1C63D98(0, *((_QWORD *)v90 + 2) + 1, 1, v90);
          *(_QWORD *)(v74 + v73) = v90;
        }
        v93 = *((_QWORD *)v90 + 2);
        v92 = *((_QWORD *)v90 + 3);
        if (v93 >= v92 >> 1)
          v90 = sub_1B1C63D98(v92 > 1, v93 + 1, 1, v90);
        *((_QWORD *)v90 + 2) = v93 + 1;
        v94 = &v90[8 * v93];
        *((_DWORD *)v94 + 8) = v88;
        *((_DWORD *)v94 + 9) = v89;
        *(_QWORD *)(v74 + v73) = v90;
      }
      v44 = v186;
      goto LABEL_45;
    }
LABEL_100:
    v207[0] = v204;
    v207[1] = v205;
    v208 = v206;
    v9 = v178;
    sub_1B1F05D48(v182, (unsigned __int16 **)v207, (uint64_t)v211);
    sub_1B1F03804((char *)v14);
    ecs_stack_allocator_pop_snapshot(v181);
    if ((v180 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
    }
    swift_release();
    v8 = v179 + 1;
  }
  while (v179 + 1 != v175);
  sub_1B19ED720((uint64_t)v194);
  sub_1B1A086DC(v196, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v196, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t sub_1B20AD1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, unint64_t, uint64_t);
  char *v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char v64;
  char *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, unint64_t, uint64_t);
  char *v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char v92;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t *v112;
  char *v113;
  _QWORD *v114;
  uint64_t v115;
  _OWORD v116[2];
  uint64_t v117;
  _QWORD v118[12];
  _OWORD v119[2];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  _OWORD v129[2];
  uint64_t v130;
  _OWORD v131[2];
  uint64_t v132;
  _BYTE v133[40];
  uint64_t v134;
  int v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;

  v4 = a4;
  v6 = a4 & 0x100000000;
  v7 = sub_1B222826C();
  v8 = *(_QWORD **)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v110 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v111 = (char *)&v94 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v113 = (char *)&v94 - v16;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v17 = 0;
  else
    v17 = v4;
  v134 = qword_1ED4D09F8;
  v135 = v17;
  v136 = v6 >> 31;
  v137 = 1;
  v138 = 2;
  v139 = 0;
  swift_retain();
  sub_1B1E42294(3, (uint64_t)v116);
  swift_release();
  v131[0] = v116[0];
  v131[1] = v116[1];
  v132 = v117;
  sub_1B1E8FCE4(a1, (uint64_t)v131, 0x200000000, v118);
  v114 = (_QWORD *)v118[11];
  sub_1B1A18378((uint64_t)v118, (uint64_t)v119, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v119[0])
  {
    v126 = v119[0];
    v127 = v119[1];
    v98 = v121;
    v128 = v120;
    v18 = v122;
    v19 = v123;
    v20 = v125;
    v104 = v124;
    sub_1B19ED720((uint64_t)v116);
    if (v20 > 0 && v18)
    {
      v97 = v18;
      v21 = v104;
      v103 = v104[4];
      v102 = *(unsigned __int8 *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v99 = type metadata accessor for VFXObjectTag();
      v129[0] = v126;
      v129[1] = v127;
      v130 = v128;
      v95 = v21 + 8;
      v96 = v21 + 6;
      swift_retain();
      swift_retain();
      swift_retain();
      v22 = 0;
      v23 = 0;
      v24 = MEMORY[0x1E0DEE9E8];
      v114 = v8;
      do
      {
        v100 = v23;
        v101 = v22;
        v25 = (unsigned int *)(v98 + 48 * v22);
        v26 = *v25;
        v106 = v25[1];
        v112 = (uint64_t *)*((_QWORD *)v25 + 2);
        v27 = *((_QWORD *)v25 + 4);
        v109 = *((_QWORD *)v25 + 3);
        v28 = *((_QWORD *)v25 + 5);
        if (v102)
        {
          v29 = *(os_unfair_lock_s **)(v28 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v29);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v103);
        sub_1B1A18378((uint64_t)v96, (uint64_t)v133, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 16) + 32) + 16);
        v31 = v104;
        v32 = v104[4];
        v105 = (char *)v28;
        v33 = v30 + 1;
        v34 = 48 * (v30 + 1);
        swift_retain();
        v31[6] = ecs_stack_allocator_allocate(v32, v34, 8);
        v31[7] = v33;
        v35 = v95;
        v95[1] = 0;
        v35[2] = 0;
        *v35 = 0;
        swift_release();
        v36 = v112;
        v108 = sub_1B1A12038(v99, (uint64_t)&off_1E63786A0, v112, v109, v27, (uint64_t)v31);
        if (v36)
        {
          v37 = v111;
          if (v27)
          {
            v38 = 0;
            v106 = *(_QWORD *)(*(_QWORD *)(v99 - 8) + 72);
            v107 = v27;
            do
            {
              v43 = (uint64_t *)(v108 + v106 * v38);
              v44 = *(_QWORD *)(v24 + 16);
              v109 = v38;
              if (v44)
              {
                sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
                swift_bridgeObjectRetain();
                v45 = sub_1B22285D8();
                v46 = -1 << *(_BYTE *)(v24 + 32);
                v47 = v45 & ~v46;
                v48 = v24 + 56;
                if (((*(_QWORD *)(v24 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) != 0)
                {
                  v112 = v43;
                  v49 = v24;
                  v50 = ~v46;
                  v51 = v8[9];
                  v52 = (void (*)(char *, unint64_t, uint64_t))v8[2];
                  while (1)
                  {
                    v53 = v113;
                    v52(v113, *(_QWORD *)(v49 + 48) + v51 * v47, v7);
                    sub_1B19E52CC(&qword_1ED4B7B40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
                    v54 = sub_1B22286E0();
                    ((void (*)(char *, uint64_t))v114[1])(v53, v7);
                    if ((v54 & 1) != 0)
                      break;
                    v47 = (v47 + 1) & v50;
                    if (((*(_QWORD *)(v48 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
                    {
                      v24 = v49;
                      swift_bridgeObjectRelease();
                      v8 = v114;
                      v37 = v111;
                      v43 = v112;
                      goto LABEL_27;
                    }
                  }
                  v24 = v49;
                  swift_bridgeObjectRelease();
                  v55 = v113;
                  sub_1B2228260();
                  v8 = v114;
                  v43 = v112;
                  ((void (*)(uint64_t *, char *, uint64_t))v114[5])(v112, v55, v7);
                  v37 = v111;
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
              }
LABEL_27:
              v112 = (uint64_t *)v8[2];
              ((void (*)(char *, uint64_t *, uint64_t))v112)(v37, v43, v7);
              sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
              swift_bridgeObjectRetain();
              v56 = sub_1B22285D8();
              v57 = -1 << *(_BYTE *)(v24 + 32);
              v58 = v56 & ~v57;
              v59 = v24;
              v60 = v24 + 56;
              if (((*(_QWORD *)(v24 + 56 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8)) >> v58) & 1) != 0)
              {
                v61 = ~v57;
                v62 = v8[9];
                while (1)
                {
                  v63 = v113;
                  ((void (*)(char *, unint64_t, uint64_t))v112)(v113, *(_QWORD *)(v59 + 48) + v62 * v58, v7);
                  sub_1B19E52CC(&qword_1ED4B7B40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
                  v64 = sub_1B22286E0();
                  v42 = (void (*)(char *, uint64_t))v8[1];
                  v42(v63, v7);
                  if ((v64 & 1) != 0)
                    break;
                  v58 = (v58 + 1) & v61;
                  v8 = v114;
                  if (((*(_QWORD *)(v60 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8)) >> v58) & 1) == 0)
                    goto LABEL_17;
                }
                v24 = v59;
                swift_bridgeObjectRelease();
                v37 = v111;
              }
              else
              {
LABEL_17:
                v39 = v59;
                swift_bridgeObjectRelease();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v41 = (uint64_t)v113;
                v37 = v111;
                ((void (*)(char *, char *, uint64_t))v112)(v113, v111, v7);
                v115 = v39;
                sub_1B1B90C94(v41, v58, isUniquelyReferenced_nonNull_native);
                v24 = v115;
                swift_bridgeObjectRelease();
                v42 = (void (*)(char *, uint64_t))v8[1];
              }
              v42(v37, v7);
              v38 = v109 + 1;
              v8 = v114;
            }
            while (v109 + 1 != v107);
          }
        }
        else if ((_DWORD)v26 != (_DWORD)v106)
        {
          v107 = *(_QWORD *)(*(_QWORD *)(v99 - 8) + 72);
          do
          {
            v71 = (uint64_t *)(v108 + v107 * v26);
            v72 = *(_QWORD *)(v24 + 16);
            v109 = v26;
            if (v72)
            {
              sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
              swift_bridgeObjectRetain();
              v73 = sub_1B22285D8();
              v74 = -1 << *(_BYTE *)(v24 + 32);
              v75 = v73 & ~v74;
              v76 = v24 + 56;
              if (((*(_QWORD *)(v24 + 56 + ((v75 >> 3) & 0xFFFFFFFFFFFFF8)) >> v75) & 1) != 0)
              {
                v112 = v71;
                v77 = v24;
                v78 = ~v74;
                v79 = v8[9];
                v80 = (void (*)(char *, unint64_t, uint64_t))v8[2];
                while (1)
                {
                  v81 = v113;
                  v80(v113, *(_QWORD *)(v77 + 48) + v79 * v75, v7);
                  sub_1B19E52CC(&qword_1ED4B7B40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
                  v82 = sub_1B22286E0();
                  ((void (*)(char *, uint64_t))v114[1])(v81, v7);
                  if ((v82 & 1) != 0)
                    break;
                  v75 = (v75 + 1) & v78;
                  if (((*(_QWORD *)(v76 + ((v75 >> 3) & 0xFFFFFFFFFFFFF8)) >> v75) & 1) == 0)
                  {
                    v24 = v77;
                    swift_bridgeObjectRelease();
                    v8 = v114;
                    goto LABEL_47;
                  }
                }
                v24 = v77;
                swift_bridgeObjectRelease();
                v83 = v113;
                sub_1B2228260();
                v8 = v114;
                ((void (*)(uint64_t *, char *, uint64_t))v114[5])(v112, v83, v7);
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
LABEL_47:
            v112 = (uint64_t *)v8[2];
            ((void (*)(void))v112)();
            sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
            swift_bridgeObjectRetain();
            v84 = sub_1B22285D8();
            v85 = -1 << *(_BYTE *)(v24 + 32);
            v86 = v84 & ~v85;
            v87 = v24;
            v88 = v24 + 56;
            if (((*(_QWORD *)(v24 + 56 + ((v86 >> 3) & 0xFFFFFFFFFFFFF8)) >> v86) & 1) != 0)
            {
              v89 = ~v85;
              v90 = v8[9];
              while (1)
              {
                v91 = v113;
                ((void (*)(char *, unint64_t, uint64_t))v112)(v113, *(_QWORD *)(v87 + 48) + v90 * v86, v7);
                sub_1B19E52CC(&qword_1ED4B7B40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
                v92 = sub_1B22286E0();
                v70 = (void (*)(char *, uint64_t))v8[1];
                v70(v91, v7);
                if ((v92 & 1) != 0)
                  break;
                v86 = (v86 + 1) & v89;
                v8 = v114;
                if (((*(_QWORD *)(v88 + ((v86 >> 3) & 0xFFFFFFFFFFFFF8)) >> v86) & 1) == 0)
                  goto LABEL_37;
              }
              v24 = v87;
              swift_bridgeObjectRelease();
              v69 = v110;
            }
            else
            {
LABEL_37:
              v66 = v87;
              swift_bridgeObjectRelease();
              v67 = swift_isUniquelyReferenced_nonNull_native();
              v68 = (uint64_t)v113;
              v69 = v110;
              ((void (*)(char *, char *, uint64_t))v112)(v113, v110, v7);
              v115 = v66;
              sub_1B1B90C94(v68, v86, v67);
              v24 = v115;
              swift_bridgeObjectRelease();
              v70 = (void (*)(char *, uint64_t))v8[1];
            }
            v26 = v109 + 1;
            v70(v69, v7);
            v8 = v114;
          }
          while (v26 != v106);
        }
        v23 = v100;
        sub_1B1F05D48(v104, (unsigned __int16 **)v129, (uint64_t)v133);
        v65 = v105;
        sub_1B1F03804(v105);
        ecs_stack_allocator_pop_snapshot(v103);
        if ((v102 & 1) != 0)
        {
          os_unfair_lock_unlock(*((os_unfair_lock_t *)v65 + 43));
          os_unfair_lock_unlock(*((os_unfair_lock_t *)v65 + 47));
        }
        swift_release();
        v22 = v101 + 1;
      }
      while (v101 + 1 != v97);
      sub_1B1A086DC(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      sub_1B1A086DC(v118, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v116);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_1B20ADC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int *v48;
  int v49;
  int v50;
  char v51;
  uint64_t v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_unfair_lock_s *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  BOOL v98;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  BOOL v111;
  unint64_t v114;
  int v115;
  uint64_t v116;
  char v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  _OWORD v146[2];
  uint64_t v147;
  _OWORD v148[2];
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  _OWORD v156[2];
  uint64_t v157;
  _OWORD v158[2];
  uint64_t v159;
  uint64_t v160;
  int v161;
  char v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  _QWORD v166[6];
  ValueMetadata *v167;
  _UNKNOWN **v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  char v172;
  _QWORD v173[8];
  _QWORD v174[8];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  _OWORD v182[2];
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  _OWORD v189[2];
  uint64_t v190;
  _OWORD v191[2];
  uint64_t v192;
  _BYTE v193[40];
  uint64_t v194;

  v4 = a4;
  v194 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v160 = qword_1ED4D09F8;
  v8 = v6 >> 31;
  v161 = v7;
  v162 = v6 >> 31;
  v163 = 1;
  v164 = 2;
  v165 = 0;
  swift_retain();
  sub_1B1E3B5F8(3, (uint64_t)v146);
  swift_release();
  v158[0] = v146[0];
  v158[1] = v146[1];
  v159 = v147;
  sub_1B1E8FCE4(a1, (uint64_t)v158, 0x200000000, v173);
  sub_1B1A18378((uint64_t)v173, (uint64_t)v182, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v182[0])
  {
    v153 = v182[0];
    v154 = v182[1];
    v155 = v183;
    if (v188 >= 1)
    {
      v124 = v185;
      if (v185)
      {
        v114 = v6 >> 31;
        v115 = v7;
        v122 = v184;
        v130 = *(unsigned __int8 *)(v186 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v116 = a1;
        v137 = v187;
        v139 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v133 = v187[4];
        v135 = v187 + 13;
        v118 = v187 + 8;
        v120 = (uint64_t)(v187 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v132 = v10;
          v11 = (unsigned int *)(v122 + 48 * v9);
          v12 = *v11;
          v126 = v11[1];
          v128 = v9;
          v14 = (uint64_t *)*((_QWORD *)v11 + 2);
          v13 = *((_QWORD *)v11 + 3);
          v15 = *((_QWORD *)v11 + 5);
          v141 = *((_QWORD *)v11 + 4);
          if (v130)
          {
            v16 = *(os_unfair_lock_s **)(v15 + 376);
            swift_retain();
            os_unfair_lock_lock(v16);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v133);
          sub_1B1A18378(v120, (uint64_t)v193, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v17 = v137[4];
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v137[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
          v137[7] = v18;
          v118[1] = 0;
          v118[2] = 0;
          *v118 = 0;
          swift_release();
          v143 = sub_1B1A12038((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v14, v13, v141, (uint64_t)v137);
          if (v14)
          {
            if (v141)
            {
              v19 = 0;
              do
              {
                v21 = v14[v19];
                v22 = (int *)(v143 + 8 * v19);
                v23 = *v22;
                v24 = v22[1];
                v25 = *(_BYTE *)(v15 + 184);
                v26 = swift_retain();
                if ((v25 & 1) != 0)
                  goto LABEL_145;
                v27 = *(_DWORD *)(*(_QWORD *)(v15 + 168) + 4 * v21);
                v28 = *(_DWORD *)(*(_QWORD *)(v26 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v27 + 8);
                swift_release();
                v29 = v23 == v27 && v24 == v28;
                if ((v29
                   || ((v30 = v22[1], v31 = *v22, (_DWORD)v31 == -1) ? (v32 = v30 == 0) : (v32 = 0),
                       v32
                    || (v31 & 0x80000000) != 0
                    || v139[1] <= v31
                    || v30 != -1 && *(_DWORD *)(*v139 + 12 * (int)v31 + 8) != v30))
                  && (v33 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 16),
                      v34 = *(_QWORD *)(v33 + 128),
                      *(_QWORD *)(v34 + 16))
                  && (v35 = sub_1B1DC3AC8((uint64_t)&type metadata for Parent), (v36 & 1) != 0)
                  && *(ValueMetadata **)(*(_QWORD *)(v33 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v35) + 32) == &type metadata for Parent)
                {
                  v167 = &type metadata for Parent;
                  v168 = &off_1E63BB8E8;
                  v172 = 1;
                  v37 = *v135;
                  if (*(_QWORD *)(*v135 + 16))
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    sub_1B1F09F2C(v37 + 32, (uint64_t)v174);
                    sub_1B1BE90FC((uint64_t)v174, (uint64_t)&v175);
                    sub_1B1BE90FC((uint64_t)&v167, (uint64_t)&v178);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v38 = *(_QWORD *)(v15 + 240) - *(_QWORD *)(v15 + 232);
                  v39 = ecs_stack_allocator_allocate(v137[4], 8 * v38, 8);
                  *v39 = v21;
                  sub_1B1BE90FC((uint64_t)&v167, (uint64_t)&v175);
                  *(_QWORD *)&v178 = v39;
                  *((_QWORD *)&v178 + 1) = v38;
                  v179 = 1;
                  v40 = (_QWORD *)v137[13];
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  v137[13] = v40;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    v40 = sub_1B1C631A0(0, v40[2] + 1, 1, v40);
                    *v135 = v40;
                  }
                  v43 = v40[2];
                  v42 = v40[3];
                  if (v43 >= v42 >> 1)
                  {
                    v40 = sub_1B1C631A0(v42 > 1, v43 + 1, 1, v40);
                    *v135 = v40;
                  }
                  v40[2] = v43 + 1;
                  v44 = &v40[9 * v43];
                  *((_OWORD *)v44 + 2) = v175;
                  v45 = v176;
                  v46 = v177;
                  v47 = v178;
                  v44[12] = v179;
                  *((_OWORD *)v44 + 4) = v46;
                  *((_OWORD *)v44 + 5) = v47;
                  *((_OWORD *)v44 + 3) = v45;
                  v20 = v141;
                  sub_1B1B68F14((uint64_t)&v167);
                  swift_release();
                }
                else
                {
                  v20 = v141;
                }
              }
              while (++v19 != v20);
            }
          }
          else if ((_DWORD)v12 != (_DWORD)v126)
          {
            while (1)
            {
              v48 = (int *)(v143 + 8 * v12);
              v49 = *v48;
              v50 = v48[1];
              v51 = *(_BYTE *)(v15 + 184);
              v52 = swift_retain();
              if ((v51 & 1) != 0)
                break;
              v53 = *(_DWORD *)(*(_QWORD *)(v15 + 168) + 4 * v12);
              v54 = *(_DWORD *)(*(_QWORD *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v53 + 8);
              swift_release();
              v55 = v49 == v53 && v50 == v54;
              if (v55
                || ((v56 = v48[1], v57 = *v48, (_DWORD)v57 == -1) ? (v58 = v56 == 0) : (v58 = 0),
                    v58
                 || (v57 & 0x80000000) != 0
                 || v139[1] <= v57
                 || v56 != -1 && *(_DWORD *)(*v139 + 12 * (int)v57 + 8) != v56))
              {
                v59 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 16);
                v60 = *(_QWORD *)(v59 + 128);
                if (*(_QWORD *)(v60 + 16))
                {
                  v61 = sub_1B1DC3AC8((uint64_t)&type metadata for Parent);
                  if ((v62 & 1) != 0
                    && *(ValueMetadata **)(*(_QWORD *)(v59 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8 * v61)
                                         + 32) == &type metadata for Parent)
                  {
                    v167 = &type metadata for Parent;
                    v168 = &off_1E63BB8E8;
                    v172 = 1;
                    v63 = *v135;
                    if (*(_QWORD *)(*v135 + 16))
                    {
                      swift_retain();
                      swift_bridgeObjectRetain();
                      sub_1B1F09F2C(v63 + 32, (uint64_t)v174);
                      sub_1B1BE90FC((uint64_t)v174, (uint64_t)&v175);
                      sub_1B1BE90FC((uint64_t)&v167, (uint64_t)&v178);
                      __asm { BR              X9 }
                    }
                    swift_retain();
                    v64 = *(_QWORD *)(v15 + 240) - *(_QWORD *)(v15 + 232);
                    v65 = ecs_stack_allocator_allocate(v137[4], 8 * v64, 8);
                    *v65 = v12;
                    sub_1B1BE90FC((uint64_t)&v167, (uint64_t)&v175);
                    *(_QWORD *)&v178 = v65;
                    *((_QWORD *)&v178 + 1) = v64;
                    v179 = 1;
                    v66 = (_QWORD *)v137[13];
                    v67 = swift_isUniquelyReferenced_nonNull_native();
                    v137[13] = v66;
                    if ((v67 & 1) == 0)
                    {
                      v66 = sub_1B1C631A0(0, v66[2] + 1, 1, v66);
                      *v135 = v66;
                    }
                    v69 = v66[2];
                    v68 = v66[3];
                    if (v69 >= v68 >> 1)
                    {
                      v66 = sub_1B1C631A0(v68 > 1, v69 + 1, 1, v66);
                      *v135 = v66;
                    }
                    v66[2] = v69 + 1;
                    v70 = &v66[9 * v69];
                    *((_OWORD *)v70 + 2) = v175;
                    v71 = v176;
                    v72 = v177;
                    v73 = v178;
                    v70[12] = v179;
                    *((_OWORD *)v70 + 4) = v72;
                    *((_OWORD *)v70 + 5) = v73;
                    *((_OWORD *)v70 + 3) = v71;
                    sub_1B1B68F14((uint64_t)&v167);
                    swift_release();
                  }
                }
              }
              if (++v12 == v126)
                goto LABEL_43;
            }
LABEL_145:
            sub_1B2229688();
            __break(1u);
          }
LABEL_43:
          v156[0] = v153;
          v156[1] = v154;
          v157 = v155;
          v10 = v132;
          sub_1B1F05D48(v137, (unsigned __int16 **)v156, (uint64_t)v193);
          sub_1B1F03804((char *)v15);
          ecs_stack_allocator_pop_snapshot(v133);
          if ((v130 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
          }
          swift_release();
          v9 = v128 + 1;
          if (v128 + 1 == v124)
          {
            sub_1B1A086DC(v173, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            a1 = v116;
            v7 = v115;
            LOBYTE(v8) = v114;
            break;
          }
        }
      }
    }
    sub_1B1A086DC(v173, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v167 = (ValueMetadata *)qword_1ED4D09F8;
  LODWORD(v168) = v7;
  BYTE4(v168) = v8;
  v169 = 1;
  v170 = 2;
  v171 = 0;
  swift_retain();
  sub_1B1E42AC8(3, (uint64_t)v148);
  swift_release();
  v191[0] = v148[0];
  v191[1] = v148[1];
  v192 = v149;
  sub_1B1E8FCE4(a1, (uint64_t)v191, 0x200000000, v174);
  sub_1B1A18378((uint64_t)v174, (uint64_t)&v175, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if ((_QWORD)v175)
  {
    v150 = v175;
    v151 = v176;
    v152 = v177;
    if (v181 > 0 && (v125 = *((_QWORD *)&v178 + 1)) != 0)
    {
      v123 = *((_QWORD *)&v177 + 1);
      v74 = *(_BYTE *)(v179 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v129 = v180[4];
      v131 = v180;
      v142 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v119 = v180 + 8;
      v121 = (uint64_t)(v180 + 6);
      swift_retain();
      swift_retain();
      swift_retain();
      v75 = 0;
      v117 = v74;
      do
      {
        v76 = (unsigned int *)(v123 + 48 * v75);
        v77 = *v76;
        v134 = v76[1];
        v78 = *((_QWORD *)v76 + 3);
        v79 = *((_QWORD *)v76 + 5);
        v138 = *((_QWORD *)v76 + 4);
        v140 = (uint64_t *)*((_QWORD *)v76 + 2);
        if ((v74 & 1) != 0)
        {
          v80 = *(os_unfair_lock_s **)(v79 + 376);
          swift_retain();
          os_unfair_lock_lock(v80);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v79 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v129);
        sub_1B1A18378(v121, (uint64_t)v166, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v81 = v131[4];
        v82 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v79 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v131[6] = ecs_stack_allocator_allocate(v81, 48 * v82, 8);
        v131[7] = v82;
        v119[1] = 0;
        v119[2] = 0;
        *v119 = 0;
        swift_release();
        v136 = sub_1B1A12038((uint64_t)&type metadata for Children, (uint64_t)&off_1E63BED58, v140, v78, v138, (uint64_t)v131);
        v127 = v75;
        if (v140)
        {
          if (v138)
          {
            v83 = v138;
            v84 = 0;
            v85 = v136;
            do
            {
              v86 = *(_QWORD *)(v85 + 8 * v84);
              v87 = *(_QWORD *)(v86 + 16);
              if (v87)
              {
                v88 = v140[v84];
                swift_bridgeObjectRetain();
                v90 = 0;
                v91 = MEMORY[0x1E0DEE9D8];
                do
                {
                  *(_QWORD *)&v89 = *(_QWORD *)(v86 + 8 * v90 + 32);
                  v144 = v89;
                  v94 = swift_retain();
                  if ((*(_BYTE *)(v79 + 184) & 1) != 0)
                    goto LABEL_145;
                  v95 = *(_DWORD *)(*(_QWORD *)(v79 + 168) + 4 * v88);
                  v96 = *(_DWORD *)(*(_QWORD *)(v94 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v95 + 8);
                  swift_release();
                  *((_QWORD *)&v89 + 1) = *((_QWORD *)&v144 + 1);
                  if ((_DWORD)v144 != v95 || DWORD1(v144) != v96)
                  {
                    v98 = (_DWORD)v144 == -1 && DWORD1(v144) == 0;
                    if (!v98
                      && (v144 & 0x80000000) == 0
                      && v142[1] > (int)v144
                      && (DWORD1(v144) == -1 || *(_DWORD *)(*v142 + 12 * (int)v144 + 8) == DWORD1(v144)))
                    {
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                        sub_1B202A38C(0, *(_QWORD *)(v91 + 16) + 1, 1);
                      v89 = v144;
                      v93 = *(_QWORD *)(v91 + 16);
                      v92 = *(_QWORD *)(v91 + 24);
                      if (v93 >= v92 >> 1)
                      {
                        sub_1B202A38C(v92 > 1, v93 + 1, 1);
                        v89 = v144;
                      }
                      *(_QWORD *)(v91 + 16) = v93 + 1;
                      *(_QWORD *)(v91 + 8 * v93 + 32) = v89;
                    }
                  }
                  ++v90;
                }
                while (v87 != v90);
                swift_bridgeObjectRelease();
                v85 = v136;
                v83 = v138;
              }
              else
              {
                v91 = MEMORY[0x1E0DEE9D8];
              }
              *(_QWORD *)(v85 + 8 * v84) = v91;
              swift_bridgeObjectRelease();
              ++v84;
            }
            while (v84 != v83);
          }
        }
        else if ((_DWORD)v77 != (_DWORD)v134)
        {
          do
          {
            v100 = *(_QWORD *)(v136 + 8 * v77);
            v101 = *(_QWORD *)(v100 + 16);
            if (v101)
            {
              swift_bridgeObjectRetain();
              v103 = 0;
              v104 = MEMORY[0x1E0DEE9D8];
              do
              {
                *(_QWORD *)&v102 = *(_QWORD *)(v100 + 8 * v103 + 32);
                v145 = v102;
                v107 = swift_retain();
                if ((*(_BYTE *)(v79 + 184) & 1) != 0)
                  goto LABEL_145;
                v108 = *(_DWORD *)(*(_QWORD *)(v79 + 168) + 4 * v77);
                v109 = *(_DWORD *)(*(_QWORD *)(v107 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v108 + 8);
                swift_release();
                *((_QWORD *)&v102 + 1) = *((_QWORD *)&v145 + 1);
                if ((_DWORD)v145 != v108 || DWORD1(v145) != v109)
                {
                  v111 = (_DWORD)v145 == -1 && DWORD1(v145) == 0;
                  if (!v111
                    && (v145 & 0x80000000) == 0
                    && v142[1] > (int)v145
                    && (DWORD1(v145) == -1 || *(_DWORD *)(*v142 + 12 * (int)v145 + 8) == DWORD1(v145)))
                  {
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      sub_1B202A38C(0, *(_QWORD *)(v104 + 16) + 1, 1);
                    v102 = v145;
                    v106 = *(_QWORD *)(v104 + 16);
                    v105 = *(_QWORD *)(v104 + 24);
                    if (v106 >= v105 >> 1)
                    {
                      sub_1B202A38C(v105 > 1, v106 + 1, 1);
                      v102 = v145;
                    }
                    *(_QWORD *)(v104 + 16) = v106 + 1;
                    *(_QWORD *)(v104 + 8 * v106 + 32) = v102;
                  }
                }
                ++v103;
              }
              while (v101 != v103);
              swift_bridgeObjectRelease();
            }
            else
            {
              v104 = MEMORY[0x1E0DEE9D8];
            }
            *(_QWORD *)(v136 + 8 * v77) = v104;
            swift_bridgeObjectRelease();
            ++v77;
          }
          while (v77 != v134);
        }
        v189[0] = v150;
        v189[1] = v151;
        v190 = v152;
        sub_1B1F05D48(v131, (unsigned __int16 **)v189, (uint64_t)v166);
        sub_1B1F03804((char *)v79);
        ecs_stack_allocator_pop_snapshot(v129);
        v74 = v117;
        if ((v117 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v79 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v79 + 376));
        }
        swift_release();
        v75 = v127 + 1;
      }
      while (v127 + 1 != v125);
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
    }
    sub_1B19ED720((uint64_t)v148);
    sub_1B19ED720((uint64_t)v146);
    sub_1B1A086DC(v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    return sub_1B1A086DC(v174, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    sub_1B19ED720((uint64_t)v148);
    return (_QWORD *)sub_1B19ED720((uint64_t)v146);
  }
}

_QWORD *sub_1B20AF020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t inited;
  _BYTE v10[40];
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD v32[12];
  uint64_t v33;
  int v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = a4;
  v44 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v26 = qword_1ED4D09F8;
  v27 = v7;
  v28 = v6 >> 31;
  v29 = 1;
  v30 = 2;
  v31 = 0;
  swift_retain();
  sub_1B1E3D7C4(3, (uint64_t)v10);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Seed;
  *(_QWORD *)(inited + 40) = &off_1E63B9F00;
  sub_1B1B44110(v11, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v10);
  v13[0] = v11[0];
  v13[1] = v11[1];
  v14 = v12;
  sub_1B1E8FCE4(a1, (uint64_t)v13, 0x200000000, v32);
  sub_1B1A18378((uint64_t)v32, (uint64_t)&v33, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v33)
    return (_QWORD *)sub_1B19ED720((uint64_t)v11);
  v15 = v33;
  v16 = v34;
  v17 = v35;
  v18 = v36;
  v19 = v37;
  v20 = v38;
  v21 = v39;
  v22 = v40;
  v23 = v41;
  v24 = v42;
  v25 = v43;
  sub_1B2187A48((uint64_t)&v15);
  sub_1B19ED720((uint64_t)v11);
  return sub_1B1A086DC(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20AF244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  int v20;
  int v21;
  _BYTE v23[40];
  _OWORD v24[2];
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _QWORD v38[8];
  _QWORD v39[13];

  v4 = a4;
  v39[12] = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v28 = qword_1ED4D09F8;
  v29 = v7;
  v30 = v6 >> 31;
  v31 = 1;
  v32 = 2;
  v33 = 0;
  swift_retain();
  sub_1B1E3A248(1, (uint64_t)v23);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(inited + 40) = &off_1E6374040;
  sub_1B1B44110(v24, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v23);
  v26[0] = v24[0];
  v26[1] = v24[1];
  v27 = v25;
  sub_1B1E8FCE4(a1, (uint64_t)v26, 0x200000000, v38);
  sub_1B1A18378((uint64_t)v38, (uint64_t)v39, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v39[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v24);
  v9 = v39[5];
  v10 = v39[7];
  v11 = v39[10];
  sub_1B19ED720((uint64_t)v24);
  if (v11 >= 1 && v10)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    v12 = 48 * v10;
    v13 = (uint64_t *)(v9 + 40);
    do
    {
      v18 = *v13;
      v19 = *(os_unfair_lock_s **)(*v13 + 376);
      swift_retain();
      os_unfair_lock_lock(v19);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
      v20 = *(_DWORD *)(v18 + 24);
      swift_retain();
      v37 = 0;
      memset(v36, 0, sizeof(v36));
      v35 = 0;
      memset(v34, 0, sizeof(v34));
      v21 = sub_1B1DA4ED8(v20, (uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, 0, 0, (uint64_t)v36, (uint64_t)v34);
      swift_release();
      sub_1B1A04628((uint64_t)v34, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
      sub_1B1A04628((uint64_t)v36, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
      if (sub_1B1A10B20(v21))
      {
        sub_1B1A10BB0(v21);
      }
      else
      {
        v14 = *(_QWORD *)(v18 + 232);
        v15 = *(_QWORD *)(v18 + 240);
        v16 = *(unsigned __int8 *)(v18 + 120);
        v17 = *(unsigned int *)(v18 + 28);
        LOBYTE(v36[0]) = *(_BYTE *)(v18 + 32);
        sub_1B1FD8C68(v14, v15, v21, v16, v17 | ((unint64_t)LOBYTE(v36[0]) << 32), 0, 0, 0);
      }
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
      swift_release();
      v13 += 6;
      v12 -= 48;
    }
    while (v12);
    sub_1B1A086DC(v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  return sub_1B1A086DC(v38, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20AF5B4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _QWORD v35[8];
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _BYTE v47[40];
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  if ((a4 & 0x10000000000) == 0)
    return result;
  v4 = a4;
  v5 = (uint64_t)result;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v48 = qword_1ED4D09F8;
  v49 = v7;
  v50 = v6 >> 31;
  v51 = 1;
  v52 = 2;
  v53 = 0;
  swift_retain();
  sub_1B1E4050C(3, (uint64_t)v33);
  swift_release();
  v45[0] = v33[0];
  v45[1] = v33[1];
  v46 = v34;
  sub_1B1E8FCE4(v5, (uint64_t)v45, 0x200000000, v35);
  sub_1B1A18378((uint64_t)v35, (uint64_t)v36, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v36[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v33);
  if (v42 <= 0 || (v29 = v39) == 0)
  {
    sub_1B19ED720((uint64_t)v33);
    return sub_1B1A086DC(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v8 = v41;
  v9 = v41[4];
  v10 = *(unsigned __int8 *)(v40 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v43[0] = v36[0];
  v43[1] = v36[1];
  v44 = v37;
  v26 = (uint64_t)(v41 + 6);
  v27 = v38;
  v25 = v41 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = 0;
  v12 = 0;
  v28 = v10;
  do
  {
    v13 = (unsigned int *)(v27 + 48 * v11);
    v31 = *v13;
    v32 = v12;
    v30 = v13[1];
    v15 = (uint64_t *)*((_QWORD *)v13 + 2);
    v14 = *((_QWORD *)v13 + 3);
    v16 = *((_QWORD *)v13 + 4);
    v17 = *((_QWORD *)v13 + 5);
    if (v10)
    {
      v18 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    sub_1B1A18378(v26, (uint64_t)v47, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v19 = v8[4];
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v8[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v8[7] = v20;
    v25[1] = 0;
    v25[2] = 0;
    *v25 = 0;
    swift_release();
    v21 = sub_1B1A12038((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, v15, v14, v16, (uint64_t)v8);
    v22 = v21;
    if (v15)
    {
      if (v16)
      {
        v12 = v32;
        do
        {
          sub_1B1C022C0();
          v22 += 32;
          --v16;
        }
        while (v16);
        goto LABEL_24;
      }
    }
    else if ((_DWORD)v31 != (_DWORD)v30)
    {
      v23 = v21 + 32 * v31;
      v24 = v30 - v31;
      v12 = v32;
      do
      {
        sub_1B1C022C0();
        v23 += 32;
        --v24;
      }
      while (v24);
      goto LABEL_24;
    }
    v12 = v32;
LABEL_24:
    sub_1B1F05D48(v8, (unsigned __int16 **)v43, (uint64_t)v47);
    sub_1B1F03804((char *)v17);
    ecs_stack_allocator_pop_snapshot(v9);
    v10 = v28;
    if ((v28 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
    }
    swift_release();
    ++v11;
  }
  while (v11 != v29);
  sub_1B19ED720((uint64_t)v33);
  sub_1B1A086DC(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20AF964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t i;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double (*v80)(_QWORD);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  char v85;
  uint64_t v86;
  int v87;
  int *v88;
  int v89;
  int v90;
  uint64_t v91;
  BOOL v92;
  BOOL v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v125;
  _DWORD *v126;
  uint64_t v128;
  _DWORD *v129;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double (*v141)(_QWORD);
  uint64_t v142;
  uint64_t v143;
  __int128 *v144;
  _QWORD *result;
  _OWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  os_unfair_lock_s *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  int v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  _OWORD v213[2];
  uint64_t v214;
  _OWORD v215[2];
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  uint64_t v222;
  _OWORD v223[2];
  uint64_t v224;
  _OWORD v225[2];
  uint64_t v226;
  uint64_t v227;
  int v228;
  char v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  _QWORD v233[6];
  __int128 v234;
  __int128 v235;
  uint64_t v236;
  char v237;
  _QWORD v238[8];
  __int128 v239;
  __int128 v240;
  uint64_t v241;
  char v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _OWORD v250[2];
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  _OWORD v257[2];
  uint64_t v258;
  _OWORD v259[2];
  uint64_t v260;
  _BYTE v261[40];
  uint64_t v262;

  v4 = a4;
  v262 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v227 = qword_1ED4D09F8;
  v228 = v7;
  v229 = v6 >> 31;
  v230 = 1;
  v231 = 2;
  v232 = 0;
  swift_retain();
  sub_1B1E42CC0(1, (uint64_t)v213);
  swift_release();
  v225[0] = v213[0];
  v225[1] = v213[1];
  v226 = v214;
  sub_1B1E8FCE4(a1, (uint64_t)v225, 0x200000000, v238);
  sub_1B1A18378((uint64_t)v238, (uint64_t)v250, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v250[0])
  {
    v146 = v213;
    return (_QWORD *)sub_1B19ED720((uint64_t)v146);
  }
  v201 = a1;
  v220 = v250[0];
  v221 = v250[1];
  v189 = v252;
  v222 = v251;
  v8 = v253;
  v9 = v254;
  v199 = v255;
  v10 = v256;
  sub_1B19ED720((uint64_t)v213);
  if (v10 <= 0 || !v8)
  {
    v144 = (__int128 *)v238;
    return sub_1B1A086DC(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v187 = v6 >> 31;
  v188 = v7;
  v193 = v199[4];
  v191 = *(_BYTE *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v210 = (_QWORD *)(v201 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v197 = v199 + 13;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = (unsigned int *)(v189 + 48 * v11);
    v14 = *v13;
    v195 = v13[1];
    v15 = *((_QWORD *)v13 + 3);
    v16 = *((_QWORD *)v13 + 5);
    v203 = *((_QWORD *)v13 + 4);
    v205 = (uint64_t *)*((_QWORD *)v13 + 2);
    v190 = v11;
    if ((v191 & 1) != 0)
    {
      v17 = *(os_unfair_lock_s **)(v16 + 376);
      swift_retain();
      os_unfair_lock_lock(v17);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v193);
    sub_1B1A18378((uint64_t)(v199 + 6), (uint64_t)v261, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v18 = v199[4];
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v199[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
    v199[7] = v19;
    v199[9] = 0;
    v199[10] = 0;
    v199[8] = 0;
    swift_release();
    v208 = sub_1B1A12038((uint64_t)&type metadata for SubEntity, (uint64_t)&off_1E63C54A8, v205, v15, v203, (uint64_t)v199);
    if (!v205)
    {
      v83 = v195;
      v84 = &qword_1ED4B8000;
      if ((_DWORD)v14 == (_DWORD)v195)
        goto LABEL_91;
      while (1)
      {
        while (1)
        {
          v85 = *(_BYTE *)(v16 + 184);
          v86 = swift_retain();
          if ((v85 & 1) != 0)
          {
LABEL_227:
            result = (_QWORD *)sub_1B2229688();
            __break(1u);
            return result;
          }
          v206 = v14 + 1;
          v87 = *(_DWORD *)(*(_QWORD *)(v16 + 168) + 4 * v14);
          v88 = (int *)(v208 + 8 * v14);
          v89 = *(_DWORD *)(*(_QWORD *)(v86 + v84[192]) + 12 * v87 + 8);
          swift_release();
          v90 = v88[1];
          v91 = *v88;
          v92 = (_DWORD)v91 == -1 && v90 == 0;
          if (v92
            || (v91 & 0x80000000) != 0
            || v210[1] <= v91
            || (v90 != -1 ? (v93 = *(_DWORD *)(*v210 + 12 * (int)v91 + 8) == v90) : (v93 = 1), !v93))
          {
            v100 = *(_QWORD *)(v16 + 232);
            if (v14 < *(_QWORD *)(v16 + 256) || v14 >= v100)
            {
              v236 = 0;
              v234 = 0u;
              v235 = 0u;
              v237 = 5;
              v102 = *v197;
              if (*(_QWORD *)(*v197 + 16))
              {
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B1F09F2C(v102 + 32, (uint64_t)&v239);
                sub_1B1BE90FC((uint64_t)&v239, (uint64_t)&v243);
                sub_1B1BE90FC((uint64_t)&v234, (uint64_t)&v246);
                __asm { BR              X9 }
              }
              swift_retain();
              v103 = *(_QWORD *)(v16 + 240) - v100;
              v104 = ecs_stack_allocator_allocate(v199[4], 8 * v103, 8);
              *v104 = v14;
              sub_1B1BE90FC((uint64_t)&v234, (uint64_t)&v243);
              *(_QWORD *)&v246 = v104;
              *((_QWORD *)&v246 + 1) = v103;
              v247 = 1;
              v105 = (_QWORD *)v199[13];
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v199[13] = v105;
              v84 = &qword_1ED4B8000;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v105 = sub_1B1C631A0(0, v105[2] + 1, 1, v105);
                *v197 = v105;
              }
              ++v14;
              v108 = v105[2];
              v107 = v105[3];
              if (v108 >= v107 >> 1)
              {
                v105 = sub_1B1C631A0(v107 > 1, v108 + 1, 1, v105);
                *v197 = v105;
              }
              v105[2] = v108 + 1;
              v109 = &v105[9 * v108];
              *((_OWORD *)v109 + 2) = v243;
              v110 = v244;
              v111 = v245;
              v112 = v246;
              v109[12] = v247;
              *((_OWORD *)v109 + 4) = v111;
              *((_OWORD *)v109 + 5) = v112;
              *((_OWORD *)v109 + 3) = v110;
              v113 = &v234;
LABEL_124:
              sub_1B1B68F14((uint64_t)v113);
              swift_release();
              goto LABEL_94;
            }
            goto LABEL_93;
          }
          v94 = (int *)(*v210 + 12 * (int)v91);
          v95 = *(_QWORD *)(*(_QWORD *)(v201 + 136) + 8 * *v94 + 32);
          v96 = *(_QWORD *)(v95 + 48);
          v97 = *(_QWORD *)(v96 + 16);
          if (v97)
            break;
LABEL_111:
          ++v14;
          if (v206 == v83)
            goto LABEL_91;
        }
        v98 = *((__int16 *)v94 + 2);
        v99 = (_QWORD *)(v96 + 56);
        while ((ValueMetadata *)*(v99 - 3) != &type metadata for EmitterDescription)
        {
          v99 += 5;
          if (!--v97)
            goto LABEL_111;
        }
        v114 = (uint64_t *)(*(_QWORD *)(v95 + 128) + *v99 + 88 * v98);
        v116 = *v114;
        v115 = v114[1];
        v118 = v114[2];
        v117 = v114[3];
        v119 = *(_QWORD *)(v116 + 16);
        if (v119)
        {
          v120 = (_DWORD *)(v116 + 36);
          while (*(v120 - 1) != v87 || *v120 != v89)
          {
            v120 += 2;
            if (!--v119)
              goto LABEL_132;
          }
          goto LABEL_111;
        }
LABEL_132:
        v122 = *(_QWORD *)(v115 + 16);
        if (v122)
        {
          v123 = (_DWORD *)(v115 + 36);
          while (*(v123 - 1) != v87 || *v123 != v89)
          {
            v123 += 2;
            if (!--v122)
              goto LABEL_139;
          }
          goto LABEL_111;
        }
LABEL_139:
        v125 = *(_QWORD *)(v118 + 16);
        if (v125)
        {
          v126 = (_DWORD *)(v118 + 36);
          while (*(v126 - 1) != v87 || *v126 != v89)
          {
            v126 += 2;
            if (!--v125)
              goto LABEL_146;
          }
          goto LABEL_111;
        }
LABEL_146:
        v128 = *(_QWORD *)(v117 + 16);
        if (v128)
        {
          v129 = (_DWORD *)(v117 + 36);
          while (*(v129 - 1) != v87 || *v129 != v89)
          {
            v129 += 2;
            if (!--v128)
              goto LABEL_153;
          }
          goto LABEL_111;
        }
LABEL_153:
        v131 = *(_QWORD *)(v16 + 232);
        if (v14 < *(_QWORD *)(v16 + 256) || v14 >= v131)
        {
          v241 = 0;
          v239 = 0u;
          v240 = 0u;
          v242 = 5;
          v133 = *(_QWORD *)(*v197 + 16);
          if (v133)
          {
            v134 = *v197 + 32;
            swift_retain();
            swift_bridgeObjectRetain();
            v135 = 0;
            while ((sub_1B1F05D20(v134, (uint64_t)&v239) & 1) == 0)
            {
              ++v135;
              v134 += 72;
              if (v133 == v135)
              {
                swift_bridgeObjectRelease();
                v131 = *(_QWORD *)(v16 + 232);
                v83 = v195;
                goto LABEL_163;
              }
            }
            swift_bridgeObjectRelease();
            v141 = sub_1B1F02954();
            v142 = *(_QWORD *)(v140 + 48);
            if (v142)
            {
              v143 = *(_QWORD *)(v140 + 64);
              *(_QWORD *)(v142 + 8 * v143) = v14;
              *(_QWORD *)(v140 + 64) = v143 + 1;
            }
            ((void (*)(__int128 *, _QWORD))v141)(&v243, 0);
            v83 = v195;
          }
          else
          {
            swift_retain();
LABEL_163:
            v136 = *(_QWORD *)(v16 + 240) - v131;
            v137 = ecs_stack_allocator_allocate(v199[4], 8 * v136, 8);
            *v137 = v14;
            sub_1B1BE90FC((uint64_t)&v239, (uint64_t)&v243);
            *(_QWORD *)&v246 = v137;
            *((_QWORD *)&v246 + 1) = v136;
            v247 = 1;
            sub_1B1DC9A64();
            v138 = *(_QWORD *)(v199[13] + 16);
            sub_1B1DC9B00(v138);
            sub_1B1DC9B98(v138, (uint64_t)&v243);
            nullsub_16(v139);
          }
          ++v14;
          v113 = &v239;
          goto LABEL_124;
        }
LABEL_93:
        ++v14;
LABEL_94:
        v12 = 1;
        if (v14 == v83)
          goto LABEL_91;
      }
    }
    v20 = &qword_1ED4B8000;
    if (v203)
    {
      for (i = 0; i != v203; ++i)
      {
        while (1)
        {
          v22 = v205[i];
          v23 = *(_BYTE *)(v16 + 184);
          v24 = swift_retain();
          if ((v23 & 1) != 0)
            goto LABEL_227;
          v25 = *(_DWORD *)(*(_QWORD *)(v16 + 168) + 4 * v22);
          v26 = (int *)(v208 + 8 * i);
          v27 = *(_DWORD *)(*(_QWORD *)(v24 + v20[192]) + 12 * v25 + 8);
          swift_release();
          v28 = v26[1];
          v29 = *v26;
          if (((_DWORD)v29 != -1 || v28 != 0) && (v29 & 0x80000000) == 0 && v210[1] > v29)
          {
            v31 = *v210;
            if (v28 == -1 || *(_DWORD *)(v31 + 12 * (int)v29 + 8) == v28)
              break;
          }
          v60 = *(_QWORD *)(v16 + 232);
          if (v22 < *(_QWORD *)(v16 + 256) || v22 >= v60)
          {
            v236 = 0;
            v234 = 0u;
            v235 = 0u;
            v237 = 5;
            v62 = *v197;
            if (*(_QWORD *)(*v197 + 16))
            {
              swift_retain();
              swift_bridgeObjectRetain();
              sub_1B1F09F2C(v62 + 32, (uint64_t)&v239);
              sub_1B1BE90FC((uint64_t)&v239, (uint64_t)&v243);
              sub_1B1BE90FC((uint64_t)&v234, (uint64_t)&v246);
              __asm { BR              X9 }
            }
            swift_retain();
            v64 = *(_QWORD *)(v16 + 240) - v60;
            v65 = ecs_stack_allocator_allocate(v199[4], 8 * v64, 8);
            *v65 = v22;
            sub_1B1BE90FC((uint64_t)&v234, (uint64_t)&v243);
            *(_QWORD *)&v246 = v65;
            *((_QWORD *)&v246 + 1) = v64;
            v247 = 1;
            v66 = (_QWORD *)v199[13];
            v67 = swift_isUniquelyReferenced_nonNull_native();
            v199[13] = v66;
            v20 = &qword_1ED4B8000;
            if ((v67 & 1) == 0)
            {
              v66 = sub_1B1C631A0(0, v66[2] + 1, 1, v66);
              *v197 = v66;
            }
            v69 = v66[2];
            v68 = v66[3];
            if (v69 >= v68 >> 1)
            {
              v66 = sub_1B1C631A0(v68 > 1, v69 + 1, 1, v66);
              *v197 = v66;
            }
            v66[2] = v69 + 1;
            v70 = &v66[9 * v69];
            *((_OWORD *)v70 + 2) = v243;
            v71 = v244;
            v72 = v245;
            v73 = v246;
            v70[12] = v247;
            *((_OWORD *)v70 + 4) = v72;
            *((_OWORD *)v70 + 5) = v73;
            *((_OWORD *)v70 + 3) = v71;
            v63 = v203;
            v74 = &v234;
LABEL_87:
            sub_1B1B68F14((uint64_t)v74);
            swift_release();
            goto LABEL_88;
          }
LABEL_75:
          v63 = v203;
LABEL_88:
          ++i;
          v12 = 1;
          if (i == v63)
            goto LABEL_91;
        }
        v32 = (int *)(v31 + 12 * (int)v29);
        v33 = *(_QWORD *)(*(_QWORD *)(v201 + 136) + 8 * *v32 + 32);
        v34 = *(_QWORD *)(v33 + 48);
        v35 = *(_QWORD *)(v34 + 16);
        if (v35)
        {
          v36 = *((__int16 *)v32 + 2);
          v37 = (_QWORD *)(v34 + 56);
          while ((ValueMetadata *)*(v37 - 3) != &type metadata for EmitterDescription)
          {
            v37 += 5;
            if (!--v35)
              goto LABEL_17;
          }
          v38 = (uint64_t *)(*(_QWORD *)(v33 + 128) + *v37 + 88 * v36);
          v40 = *v38;
          v39 = v38[1];
          v42 = v38[2];
          v41 = v38[3];
          v43 = *(_QWORD *)(v40 + 16);
          if (v43)
          {
            v44 = (_DWORD *)(v40 + 36);
            while (*(v44 - 1) != v25 || *v44 != v27)
            {
              v44 += 2;
              if (!--v43)
                goto LABEL_39;
            }
            continue;
          }
LABEL_39:
          v46 = *(_QWORD *)(v39 + 16);
          if (v46)
          {
            v47 = (_DWORD *)(v39 + 36);
            while (*(v47 - 1) != v25 || *v47 != v27)
            {
              v47 += 2;
              if (!--v46)
                goto LABEL_46;
            }
            continue;
          }
LABEL_46:
          v49 = *(_QWORD *)(v42 + 16);
          if (v49)
          {
            v50 = (_DWORD *)(v42 + 36);
            while (*(v50 - 1) != v25 || *v50 != v27)
            {
              v50 += 2;
              if (!--v49)
                goto LABEL_53;
            }
            continue;
          }
LABEL_53:
          v52 = *(_QWORD *)(v41 + 16);
          if (v52)
          {
            v53 = (_DWORD *)(v41 + 36);
            while (*(v53 - 1) != v25 || *v53 != v27)
            {
              v53 += 2;
              if (!--v52)
                goto LABEL_60;
            }
            continue;
          }
LABEL_60:
          v55 = *(_QWORD *)(v16 + 232);
          if (v22 < *(_QWORD *)(v16 + 256) || v22 >= v55)
          {
            v241 = 0;
            v239 = 0u;
            v240 = 0u;
            v242 = 5;
            v57 = *(_QWORD *)(*v197 + 16);
            if (v57)
            {
              v58 = *v197 + 32;
              swift_retain();
              swift_bridgeObjectRetain();
              v59 = 0;
              while ((sub_1B1F05D20(v58, (uint64_t)&v239) & 1) == 0)
              {
                ++v59;
                v58 += 72;
                if (v57 == v59)
                {
                  swift_bridgeObjectRelease();
                  v55 = *(_QWORD *)(v16 + 232);
                  goto LABEL_82;
                }
              }
              swift_bridgeObjectRelease();
              v80 = sub_1B1F02954();
              v81 = *(_QWORD *)(v79 + 48);
              if (v81)
              {
                v82 = *(_QWORD *)(v79 + 64);
                *(_QWORD *)(v81 + 8 * v82) = v22;
                *(_QWORD *)(v79 + 64) = v82 + 1;
              }
              ((void (*)(__int128 *, _QWORD))v80)(&v243, 0);
            }
            else
            {
              swift_retain();
LABEL_82:
              v75 = *(_QWORD *)(v16 + 240) - v55;
              v76 = ecs_stack_allocator_allocate(v199[4], 8 * v75, 8);
              *v76 = v22;
              sub_1B1BE90FC((uint64_t)&v239, (uint64_t)&v243);
              *(_QWORD *)&v246 = v76;
              *((_QWORD *)&v246 + 1) = v75;
              v247 = 1;
              sub_1B1DC9A64();
              v77 = *(_QWORD *)(v199[13] + 16);
              sub_1B1DC9B00(v77);
              sub_1B1DC9B98(v77, (uint64_t)&v243);
              nullsub_16(v78);
            }
            v20 = &qword_1ED4B8000;
            v63 = v203;
            v74 = &v239;
            goto LABEL_87;
          }
          goto LABEL_75;
        }
LABEL_17:
        ;
      }
    }
LABEL_91:
    v223[0] = v220;
    v223[1] = v221;
    v224 = v222;
    sub_1B1F05D48(v199, (unsigned __int16 **)v223, (uint64_t)v261);
    sub_1B1F03804((char *)v16);
    ecs_stack_allocator_pop_snapshot(v193);
    if ((v191 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
    }
    swift_release();
    v11 = v190 + 1;
  }
  while (v190 + 1 != v8);
  sub_1B1A086DC(v238, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  result = sub_1B1A086DC(v238, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)&v234 = qword_1ED4D09F8;
    DWORD2(v234) = v188;
    BYTE12(v234) = v187;
    *(_QWORD *)&v235 = 1;
    BYTE8(v235) = 2;
    v236 = 0;
    swift_retain();
    sub_1B1B7111C((uint64_t)v215);
    swift_release();
    v259[0] = v215[0];
    v259[1] = v215[1];
    v260 = v216;
    sub_1B1E8FCE4(v201, (uint64_t)v259, 0x200000000, &v239);
    sub_1B1A18378((uint64_t)&v239, (uint64_t)&v243, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if ((_QWORD)v243)
    {
      v217 = v243;
      v218 = v244;
      v194 = *((_QWORD *)&v245 + 1);
      v219 = v245;
      v147 = *((_QWORD *)&v246 + 1);
      v148 = v247;
      v202 = v248;
      v149 = v249;
      sub_1B19ED720((uint64_t)v215);
      if (v149 > 0 && v147)
      {
        v200 = v202[4];
        v198 = *(unsigned __int8 *)(v148 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v257[0] = v217;
        v257[1] = v218;
        v258 = v219;
        swift_retain();
        swift_retain();
        swift_retain();
        v150 = 0;
        v151 = MEMORY[0x1E0DEE9D8];
        v192 = v147;
        do
        {
          v152 = (unsigned int *)(v194 + 48 * v150);
          v153 = *v152;
          v155 = (uint64_t *)*((_QWORD *)v152 + 2);
          v154 = *((_QWORD *)v152 + 3);
          v156 = *((_QWORD *)v152 + 5);
          v207 = v152[1];
          v209 = *((_QWORD *)v152 + 4);
          v204 = v156;
          v196 = v150;
          if (v198)
          {
            v157 = *(os_unfair_lock_s **)(v156 + 376);
            swift_retain();
            os_unfair_lock_lock(v157);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v156 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v200);
          sub_1B1A18378((uint64_t)(v202 + 6), (uint64_t)v233, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v158 = v202[4];
          v159 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v156 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v202[6] = ecs_stack_allocator_allocate(v158, 48 * v159, 8);
          v202[7] = v159;
          v202[9] = 0;
          v202[10] = 0;
          v202[8] = 0;
          swift_release();
          v160 = v209;
          v161 = sub_1B1A12038((uint64_t)&type metadata for Children, (uint64_t)&off_1E63BED58, v155, v154, v209, (uint64_t)v202);
          if (v155)
          {
            if (v209)
            {
              v162 = 0;
              do
              {
                v164 = *(_QWORD *)(v161 + 8 * v162);
                v211 = v151;
                v165 = *(_QWORD *)(v164 + 16);
                if (v165)
                {
                  swift_bridgeObjectRetain();
                  v166 = (unsigned int *)(v164 + 36);
                  v167 = v210;
                  do
                  {
                    v168 = (int)*(v166 - 1);
                    v169 = *v166;
                    v170 = (_DWORD)v168 == -1 && (_DWORD)v169 == 0;
                    if (!v170
                      && (v168 & 0x80000000) == 0
                      && v167[1] > v168
                      && ((_DWORD)v169 == -1 || *(_DWORD *)(*v167 + 12 * (int)v168 + 8) == (_DWORD)v169))
                    {
                      v172 = *(v166 - 1);
                      sub_1B1CD6360();
                      v173 = *(_QWORD *)(v211 + 16);
                      sub_1B1CD63E0(v173);
                      v174 = sub_1B1CD6448(v173, v172 | (v169 << 32));
                      nullsub_16(v174);
                      v167 = v210;
                    }
                    v166 += 2;
                    --v165;
                  }
                  while (v165);
                  swift_bridgeObjectRelease();
                  v163 = v211;
                  v151 = MEMORY[0x1E0DEE9D8];
                  v160 = v209;
                }
                else
                {
                  v163 = v151;
                }
                *(_QWORD *)(v161 + 8 * v162) = v163;
                swift_bridgeObjectRelease();
                ++v162;
              }
              while (v162 != v160);
            }
          }
          else if ((_DWORD)v153 != (_DWORD)v207)
          {
            do
            {
              v176 = *(_QWORD *)(v161 + 8 * v153);
              v212 = v151;
              v177 = *(_QWORD *)(v176 + 16);
              if (v177)
              {
                swift_bridgeObjectRetain();
                v178 = (unsigned int *)(v176 + 36);
                v179 = v210;
                do
                {
                  v180 = (int)*(v178 - 1);
                  v181 = *v178;
                  v182 = (_DWORD)v180 == -1 && (_DWORD)v181 == 0;
                  if (!v182
                    && (v180 & 0x80000000) == 0
                    && v179[1] > v180
                    && ((_DWORD)v181 == -1 || *(_DWORD *)(*v179 + 12 * (int)v180 + 8) == (_DWORD)v181))
                  {
                    v184 = *(v178 - 1);
                    sub_1B1CD6360();
                    v185 = *(_QWORD *)(v212 + 16);
                    sub_1B1CD63E0(v185);
                    v186 = sub_1B1CD6448(v185, v184 | (v181 << 32));
                    nullsub_16(v186);
                    v179 = v210;
                  }
                  v178 += 2;
                  --v177;
                }
                while (v177);
                swift_bridgeObjectRelease();
                v175 = v212;
                v151 = MEMORY[0x1E0DEE9D8];
              }
              else
              {
                v175 = v151;
              }
              *(_QWORD *)(v161 + 8 * v153) = v175;
              swift_bridgeObjectRelease();
              ++v153;
            }
            while (v153 != v207);
          }
          sub_1B1F05D48(v202, (unsigned __int16 **)v257, (uint64_t)v233);
          sub_1B1F03804((char *)v204);
          ecs_stack_allocator_pop_snapshot(v200);
          if ((v198 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v204 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v204 + 376));
          }
          swift_release();
          v150 = v196 + 1;
        }
        while (v196 + 1 != v192);
        sub_1B1A086DC(&v239, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        v144 = &v239;
      }
      else
      {
        v144 = &v239;
      }
      return sub_1B1A086DC(v144, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    v146 = v215;
    return (_QWORD *)sub_1B19ED720((uint64_t)v146);
  }
  return result;
}

_QWORD *sub_1B20B1034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char **v45;
  char *v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  int v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char **v86;
  char *v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _QWORD *result;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  _OWORD v125[2];
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  _OWORD v130[2];
  uint64_t v131;
  _OWORD v132[2];
  uint64_t v133;
  uint64_t v134;
  int v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  _BYTE v145[72];
  ValueMetadata *v146;
  _UNKNOWN **v147;
  char v148;
  _QWORD v149[8];
  _OWORD v150[2];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  _BYTE v157[40];
  uint64_t v158;

  v4 = a4;
  v158 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v134 = qword_1ED4D09F8;
  v135 = v7;
  v136 = v6 >> 31;
  v137 = 1;
  v138 = 2;
  v139 = 0;
  swift_retain();
  sub_1B1B7130C((uint64_t)v125);
  swift_release();
  v132[0] = v125[0];
  v132[1] = v125[1];
  v133 = v126;
  sub_1B1E8FCE4(a1, (uint64_t)v132, 0x200000000, v149);
  sub_1B1A18378((uint64_t)v149, (uint64_t)v150, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v150[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v125);
  v127 = v150[0];
  v128 = v150[1];
  v129 = v151;
  if (v156 <= 0 || (v113 = v153) == 0)
  {
    sub_1B19ED720((uint64_t)v125);
    return sub_1B1A086DC(v149, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v112 = v152;
  v124 = v154;
  v8 = *(unsigned __int8 *)(v154 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v9 = v155[4];
  v116 = v155 + 13;
  v117 = v155;
  v108 = v155 + 8;
  v109 = (uint64_t)(v155 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v10 = 0;
  v11 = 0;
  v111 = v8;
  v110 = v9;
  while (1)
  {
    v12 = (unsigned int *)(v112 + 48 * v10);
    v14 = *v12;
    v13 = v12[1];
    v15 = *((_QWORD *)v12 + 3);
    v122 = (uint64_t *)*((_QWORD *)v12 + 2);
    v16 = *((_QWORD *)v12 + 5);
    v118 = *((_QWORD *)v12 + 4);
    v114 = v11;
    v115 = v10;
    if (v8)
    {
      v17 = *(os_unfair_lock_s **)(v16 + 376);
      swift_retain();
      os_unfair_lock_lock(v17);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    sub_1B1A18378(v109, (uint64_t)v157, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v18 = v117[4];
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v117[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
    v117[7] = v19;
    v108[1] = 0;
    v108[2] = 0;
    *v108 = 0;
    swift_release();
    v20 = v118;
    v123 = sub_1B1A12038((uint64_t)&type metadata for SubEntity, (uint64_t)&off_1E63C54A8, v122, v15, v118, (uint64_t)v117);
    v121 = v16;
    if (!v122)
      break;
    v21 = v124;
    if (v118)
    {
      v22 = 0;
      do
      {
        v24 = v122[v22];
        v25 = *(_QWORD *)(v123 + 8 * v22);
        v26 = *(_QWORD *)(v16 + 16);
        v27 = *(_BYTE *)(v16 + 184);
        swift_retain();
        if ((v27 & 1) != 0)
          goto LABEL_83;
        v28 = *(_DWORD *)(*(_QWORD *)(v16 + 168) + 4 * v24);
        v29 = *(_DWORD *)(*(_QWORD *)(v26 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v28 + 8);
        swift_retain();
        swift_release();
        if (v28 == -1 && v29 == 0)
        {
          swift_release();
        }
        else
        {
          v119 = v24;
          v31 = swift_allocObject();
          *(_QWORD *)(v31 + 16) = &type metadata for IsSubEntityOf;
          *(_QWORD *)(v31 + 24) = &off_1E637B1B0;
          v32 = swift_allocObject();
          *(_QWORD *)(v32 + 16) = sub_1B20BFBF4;
          *(_QWORD *)(v32 + 24) = v31;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)&v140 = *(_QWORD *)(v21 + 208);
          v34 = v140;
          *(_QWORD *)(v21 + 208) = 0x8000000000000000;
          v35 = sub_1B1DC3AC8((uint64_t)&type metadata for IsSubEntityOf);
          v37 = v36;
          v38 = *(_QWORD *)(v34 + 16) + ((v36 & 1) == 0);
          if (*(_QWORD *)(v34 + 24) >= v38)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1B1EAA4A8();
              v34 = v140;
            }
          }
          else
          {
            sub_1B1E94FD0(v38, isUniquelyReferenced_nonNull_native);
            v34 = v140;
            v39 = sub_1B1DC3AC8((uint64_t)&type metadata for IsSubEntityOf);
            if ((v37 & 1) != (v40 & 1))
              goto LABEL_84;
            v35 = v39;
          }
          v16 = v121;
          *(_QWORD *)(v124 + 208) = v34;
          swift_bridgeObjectRelease();
          v41 = *(_QWORD **)(v124 + 208);
          swift_bridgeObjectRetain();
          if ((v37 & 1) == 0)
          {
            sub_1B20204FC(*(uint64_t (**)(void))(v32 + 16), (uint64_t *)&v140);
            v42 = v141;
            v41[(v35 >> 6) + 8] |= 1 << v35;
            *(_QWORD *)(v41[6] + 8 * v35) = &type metadata for IsSubEntityOf;
            v43 = v41[7] + 24 * v35;
            *(_OWORD *)v43 = v140;
            *(_QWORD *)(v43 + 16) = v42;
            ++v41[2];
          }
          v44 = v41[7];
          swift_bridgeObjectRelease();
          v45 = (char **)(v44 + 24 * v35);
          v46 = *v45;
          v47 = swift_isUniquelyReferenced_nonNull_native();
          *v45 = v46;
          if ((v47 & 1) == 0)
          {
            v46 = sub_1B1C64334(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
            *v45 = v46;
          }
          v49 = *((_QWORD *)v46 + 2);
          v48 = *((_QWORD *)v46 + 3);
          if (v49 >= v48 >> 1)
          {
            v46 = sub_1B1C64334(v48 > 1, v49 + 1, 1, v46);
            *v45 = v46;
          }
          v20 = v118;
          *((_QWORD *)v46 + 2) = v49 + 1;
          v50 = &v46[16 * v49];
          *((_DWORD *)v50 + 8) = v28;
          *((_DWORD *)v50 + 9) = v29;
          *((_QWORD *)v50 + 5) = v25;
          v21 = v124;
          swift_release();
          swift_release();
          swift_release();
          v24 = v119;
        }
        v51 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 16);
        v52 = *(_QWORD *)(v51 + 128);
        if (*(_QWORD *)(v52 + 16))
        {
          v53 = sub_1B1DC3AC8((uint64_t)&type metadata for SubEntity);
          if ((v54 & 1) != 0
            && *(ValueMetadata **)(*(_QWORD *)(v51 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53) + 32) == &type metadata for SubEntity)
          {
            v146 = &type metadata for SubEntity;
            v147 = &off_1E63C54A8;
            v148 = 1;
            v55 = *v116;
            if (*(_QWORD *)(*v116 + 16))
            {
              swift_retain();
              swift_bridgeObjectRetain();
              sub_1B1F09F2C(v55 + 32, (uint64_t)v145);
              sub_1B1BE90FC((uint64_t)v145, (uint64_t)&v140);
              sub_1B1BE90FC((uint64_t)&v146, (uint64_t)&v143);
              __asm { BR              X9 }
            }
            swift_retain();
            v56 = *(_QWORD *)(v16 + 240) - *(_QWORD *)(v16 + 232);
            v57 = ecs_stack_allocator_allocate(v117[4], 8 * v56, 8);
            *v57 = v24;
            sub_1B1BE90FC((uint64_t)&v146, (uint64_t)&v140);
            *(_QWORD *)&v143 = v57;
            *((_QWORD *)&v143 + 1) = v56;
            v144 = 1;
            v58 = (_QWORD *)v117[13];
            v59 = swift_isUniquelyReferenced_nonNull_native();
            v117[13] = v58;
            v20 = v118;
            if ((v59 & 1) == 0)
            {
              v58 = sub_1B1C631A0(0, v58[2] + 1, 1, v58);
              *v116 = v58;
            }
            v61 = v58[2];
            v60 = v58[3];
            if (v61 >= v60 >> 1)
            {
              v58 = sub_1B1C631A0(v60 > 1, v61 + 1, 1, v58);
              *v116 = v58;
            }
            v58[2] = v61 + 1;
            v62 = &v58[9 * v61];
            *((_OWORD *)v62 + 2) = v140;
            v63 = v141;
            v64 = v142;
            v65 = v143;
            v62[12] = v144;
            *((_OWORD *)v62 + 4) = v64;
            *((_OWORD *)v62 + 5) = v65;
            *((_OWORD *)v62 + 3) = v63;
            v21 = v124;
            sub_1B1B68F14((uint64_t)&v146);
            swift_release();
          }
        }
      }
      while (++v22 != v20);
    }
LABEL_18:
    v130[0] = v127;
    v130[1] = v128;
    v131 = v129;
    v11 = v114;
    sub_1B1F05D48(v117, (unsigned __int16 **)v130, (uint64_t)v157);
    sub_1B1F03804((char *)v16);
    v9 = v110;
    ecs_stack_allocator_pop_snapshot(v110);
    v8 = v111;
    if ((v111 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
    }
    swift_release();
    v10 = v115 + 1;
    if (v115 + 1 == v113)
    {
      sub_1B19ED720((uint64_t)v125);
      sub_1B1A086DC(v149, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      return sub_1B1A086DC(v149, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  v23 = v124;
  if ((_DWORD)v14 == (_DWORD)v13)
    goto LABEL_18;
  v120 = v13;
  while (1)
  {
    v66 = *(_QWORD *)(v123 + 8 * v14);
    v67 = *(_QWORD *)(v16 + 16);
    v68 = *(_BYTE *)(v16 + 184);
    swift_retain();
    if ((v68 & 1) != 0)
      break;
    v69 = *(_DWORD *)(*(_QWORD *)(v16 + 168) + 4 * v14);
    v70 = *(_DWORD *)(*(_QWORD *)(v67 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v69 + 8);
    swift_retain();
    swift_release();
    if (v69 != -1 || v70 != 0)
    {
      v72 = swift_allocObject();
      *(_QWORD *)(v72 + 16) = &type metadata for IsSubEntityOf;
      *(_QWORD *)(v72 + 24) = &off_1E637B1B0;
      v73 = swift_allocObject();
      *(_QWORD *)(v73 + 16) = sub_1B1E353B8;
      *(_QWORD *)(v73 + 24) = v72;
      v74 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v140 = *(_QWORD *)(v23 + 208);
      v75 = v140;
      *(_QWORD *)(v23 + 208) = 0x8000000000000000;
      v76 = sub_1B1DC3AC8((uint64_t)&type metadata for IsSubEntityOf);
      v78 = v77;
      v79 = *(_QWORD *)(v75 + 16) + ((v77 & 1) == 0);
      if (*(_QWORD *)(v75 + 24) >= v79)
      {
        if ((v74 & 1) == 0)
        {
          sub_1B1EAA4A8();
          v75 = v140;
        }
      }
      else
      {
        sub_1B1E94FD0(v79, v74);
        v75 = v140;
        v80 = sub_1B1DC3AC8((uint64_t)&type metadata for IsSubEntityOf);
        if ((v78 & 1) != (v81 & 1))
          goto LABEL_84;
        v76 = v80;
      }
      *(_QWORD *)(v124 + 208) = v75;
      swift_bridgeObjectRelease();
      v82 = *(_QWORD **)(v124 + 208);
      swift_bridgeObjectRetain();
      if ((v78 & 1) == 0)
      {
        sub_1B20204FC(*(uint64_t (**)(void))(v73 + 16), (uint64_t *)&v140);
        v83 = v141;
        v82[(v76 >> 6) + 8] |= 1 << v76;
        *(_QWORD *)(v82[6] + 8 * v76) = &type metadata for IsSubEntityOf;
        v84 = v82[7] + 24 * v76;
        *(_OWORD *)v84 = v140;
        *(_QWORD *)(v84 + 16) = v83;
        ++v82[2];
      }
      v13 = v120;
      v85 = v82[7];
      swift_bridgeObjectRelease();
      v86 = (char **)(v85 + 24 * v76);
      v87 = *v86;
      v88 = swift_isUniquelyReferenced_nonNull_native();
      *v86 = v87;
      if ((v88 & 1) == 0)
      {
        v87 = sub_1B1C64334(0, *((_QWORD *)v87 + 2) + 1, 1, v87);
        *v86 = v87;
      }
      v90 = *((_QWORD *)v87 + 2);
      v89 = *((_QWORD *)v87 + 3);
      if (v90 >= v89 >> 1)
      {
        v87 = sub_1B1C64334(v89 > 1, v90 + 1, 1, v87);
        *v86 = v87;
      }
      *((_QWORD *)v87 + 2) = v90 + 1;
      v91 = &v87[16 * v90];
      *((_DWORD *)v91 + 8) = v69;
      *((_DWORD *)v91 + 9) = v70;
      *((_QWORD *)v91 + 5) = v66;
      v23 = v124;
      swift_release();
      swift_release();
    }
    swift_release();
    v16 = v121;
    v92 = *(_QWORD *)(*(_QWORD *)(v121 + 40) + 16);
    v93 = *(_QWORD *)(v92 + 128);
    if (*(_QWORD *)(v93 + 16))
    {
      v94 = sub_1B1DC3AC8((uint64_t)&type metadata for SubEntity);
      if ((v95 & 1) != 0
        && *(ValueMetadata **)(*(_QWORD *)(v92 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v93 + 56) + 8 * v94) + 32) == &type metadata for SubEntity)
      {
        v146 = &type metadata for SubEntity;
        v147 = &off_1E63C54A8;
        v148 = 1;
        v96 = *v116;
        if (*(_QWORD *)(*v116 + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1B1F09F2C(v96 + 32, (uint64_t)v145);
          sub_1B1BE90FC((uint64_t)v145, (uint64_t)&v140);
          sub_1B1BE90FC((uint64_t)&v146, (uint64_t)&v143);
          __asm { BR              X9 }
        }
        v16 = v121;
        swift_retain();
        v97 = *(_QWORD *)(v16 + 240) - *(_QWORD *)(v16 + 232);
        v98 = ecs_stack_allocator_allocate(v117[4], 8 * v97, 8);
        *v98 = v14;
        sub_1B1BE90FC((uint64_t)&v146, (uint64_t)&v140);
        *(_QWORD *)&v143 = v98;
        *((_QWORD *)&v143 + 1) = v97;
        v144 = 1;
        v99 = (_QWORD *)v117[13];
        v100 = swift_isUniquelyReferenced_nonNull_native();
        v117[13] = v99;
        if ((v100 & 1) == 0)
        {
          v99 = sub_1B1C631A0(0, v99[2] + 1, 1, v99);
          *v116 = v99;
        }
        v102 = v99[2];
        v101 = v99[3];
        if (v102 >= v101 >> 1)
        {
          v99 = sub_1B1C631A0(v101 > 1, v102 + 1, 1, v99);
          *v116 = v99;
        }
        v99[2] = v102 + 1;
        v103 = &v99[9 * v102];
        *((_OWORD *)v103 + 2) = v140;
        v104 = v141;
        v105 = v142;
        v106 = v143;
        v103[12] = v144;
        *((_OWORD *)v103 + 4) = v105;
        *((_OWORD *)v103 + 5) = v106;
        *((_OWORD *)v103 + 3) = v104;
        v23 = v124;
        sub_1B1B68F14((uint64_t)&v146);
        swift_release();
      }
    }
    if (++v14 == v13)
      goto LABEL_18;
  }
LABEL_83:
  sub_1B2229688();
  __break(1u);
LABEL_84:
  result = (_QWORD *)sub_1B2229FC4();
  __break(1u);
  return result;
}

_QWORD *sub_1B20B21AC(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD v110[2];
  uint64_t v111;
  _QWORD v112[8];
  _OWORD v113[2];
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _OWORD v120[2];
  uint64_t v121;
  _OWORD v122[2];
  uint64_t v123;
  _BYTE v124[40];
  uint64_t v125;
  int v126;
  char v127;
  uint64_t v128;
  char v129;
  uint64_t v130;

  if ((a4 & 0x1000000000000) == 0)
  {
    v4 = a4;
    v5 = (uint64_t)result;
    v6 = a4 & 0x100000000;
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    if (v6)
      v7 = 0;
    else
      v7 = v4;
    v125 = qword_1ED4D09F8;
    v126 = v7;
    v127 = v6 >> 31;
    v128 = 1;
    v129 = 2;
    v130 = 0;
    swift_retain();
    sub_1B1E3C60C(3, (uint64_t)v110);
    swift_release();
    v122[0] = v110[0];
    v122[1] = v110[1];
    v123 = v111;
    sub_1B1E8FCE4(v5, (uint64_t)v122, 0x200000000, v112);
    sub_1B1A18378((uint64_t)v112, (uint64_t)v113, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v113[0])
    {
      if (v119 > 0 && (v96 = v116) != 0)
      {
        v8 = v118;
        v9 = v118[4];
        v10 = *(unsigned __int8 *)(v117 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v120[0] = v113[0];
        v120[1] = v113[1];
        v121 = v114;
        v91 = (uint64_t)(v118 + 6);
        v92 = v115;
        v90 = v118 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v11 = 0;
        v94 = v9;
        v95 = v8;
        v93 = v10;
        do
        {
          v97 = v11;
          v12 = (unsigned int *)(v92 + 48 * v11);
          v13 = *v12;
          v14 = v12[1];
          v15 = (uint64_t *)*((_QWORD *)v12 + 2);
          v16 = *((_QWORD *)v12 + 3);
          v17 = *((_QWORD *)v12 + 5);
          v100 = *((_QWORD *)v12 + 4);
          if (v10)
          {
            v18 = *(os_unfair_lock_s **)(v17 + 376);
            swift_retain();
            os_unfair_lock_lock(v18);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v9);
          sub_1B1A18378(v91, (uint64_t)v124, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v19 = v8[4];
          v99 = v17;
          v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v8[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
          v8[7] = v20;
          v90[1] = 0;
          v90[2] = 0;
          *v90 = 0;
          swift_release();
          v21 = v100;
          v22 = sub_1B1A12038((uint64_t)&type metadata for GraphEntityComponentPropertyReferences, (uint64_t)&off_1E63B8ED8, v15, v16, v100, (uint64_t)v8);
          v101 = v22;
          if (v15)
          {
            if (v100)
            {
              v23 = 0;
              do
              {
                v24 = v22 + (v23 << 6);
                swift_bridgeObjectRelease();
                *(_QWORD *)(v24 + 48) = MEMORY[0x1E0DEE9D8];
                v25 = *(_QWORD *)(v24 + 40);
                if (v25)
                {
                  v26 = *(_QWORD *)(v25 + 16);
                  if (v26)
                  {
                    v102 = v23;
                    v27 = v25 + 32;
                    swift_bridgeObjectRetain_n();
                    v28 = 0;
                    v104 = v27;
                    v106 = v26;
                    do
                    {
                      v29 = *(_QWORD *)(v24 + 8);
                      if (*(_QWORD *)(v29 + 16))
                      {
                        v30 = (uint64_t *)(v27 + 24 * v28);
                        v32 = v30[1];
                        v31 = v30[2];
                        v33 = *v30;
                        swift_bridgeObjectRetain_n();
                        swift_bridgeObjectRetain();
                        v34 = sub_1B1DC3B00(v33, v32);
                        if ((v35 & 1) != 0)
                        {
                          v36 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 16 * v34);
                          v37 = *v36;
                          v108 = v36[1];
                          swift_retain();
                          swift_bridgeObjectRelease();
                          v38 = *(_QWORD *)(v31 + 16);
                          if (v38)
                          {
                            swift_bridgeObjectRetain_n();
                            v39 = (uint64_t *)(v31 + 40);
                            v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                            do
                            {
                              v41 = *(_QWORD *)v24;
                              if (*(_QWORD *)(*(_QWORD *)v24 + 16))
                              {
                                v42 = *(v39 - 1);
                                v43 = *v39;
                                swift_bridgeObjectRetain_n();
                                v44 = sub_1B1DC3B00(v42, v43);
                                if ((v45 & 1) != 0)
                                {
                                  v46 = (uint64_t *)(*(_QWORD *)(v41 + 56) + 16 * v44);
                                  v47 = *v46;
                                  v48 = v46[1];
                                  swift_retain();
                                  swift_bridgeObjectRelease_n();
                                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                    v40 = sub_1B1C66A74(0, v40[2] + 1, 1, v40);
                                  v50 = v40[2];
                                  v49 = v40[3];
                                  if (v50 >= v49 >> 1)
                                    v40 = sub_1B1C66A74(v49 > 1, v50 + 1, 1, v40);
                                  v40[2] = v50 + 1;
                                  v51 = &v40[2 * v50];
                                  v51[4] = v47;
                                  v51[5] = v48;
                                }
                                else
                                {
                                  swift_bridgeObjectRelease_n();
                                }
                              }
                              v39 += 2;
                              --v38;
                            }
                            while (v38);
                            swift_bridgeObjectRelease_n();
                          }
                          else
                          {
                            v40 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                          }
                          v52 = *(_QWORD **)(v24 + 48);
                          swift_retain();
                          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                          *(_QWORD *)(v24 + 48) = v52;
                          v27 = v104;
                          v26 = v106;
                          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                          {
                            v52 = sub_1B1C66954(0, v52[2] + 1, 1, v52);
                            *(_QWORD *)(v24 + 48) = v52;
                          }
                          v55 = v52[2];
                          v54 = v52[3];
                          if (v55 >= v54 >> 1)
                          {
                            v52 = sub_1B1C66954(v54 > 1, v55 + 1, 1, v52);
                            *(_QWORD *)(v24 + 48) = v52;
                          }
                          v52[2] = v55 + 1;
                          v56 = &v52[3 * v55];
                          v56[4] = v37;
                          v56[5] = v108;
                          v56[6] = v40;
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          swift_release();
                        }
                        else
                        {
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease_n();
                        }
                      }
                      ++v28;
                    }
                    while (v28 != v26);
                    swift_bridgeObjectRelease_n();
                    v21 = v100;
                    v22 = v101;
                    v23 = v102;
                  }
                }
                *(_BYTE *)(v24 + 56) = 1;
                ++v23;
              }
              while (v23 != v21);
            }
          }
          else if ((_DWORD)v13 != (_DWORD)v14)
          {
            v98 = v14;
            do
            {
              v57 = v22 + (v13 << 6);
              swift_bridgeObjectRelease();
              *(_QWORD *)(v57 + 48) = MEMORY[0x1E0DEE9D8];
              v58 = *(_QWORD *)(v57 + 40);
              if (v58)
              {
                v59 = *(_QWORD *)(v58 + 16);
                if (v59)
                {
                  v103 = v13;
                  v60 = v58 + 32;
                  swift_bridgeObjectRetain_n();
                  v61 = 0;
                  v105 = v60;
                  v107 = v59;
                  do
                  {
                    v62 = *(_QWORD *)(v57 + 8);
                    if (*(_QWORD *)(v62 + 16))
                    {
                      v63 = (uint64_t *)(v60 + 24 * v61);
                      v65 = v63[1];
                      v64 = v63[2];
                      v66 = *v63;
                      swift_bridgeObjectRetain_n();
                      swift_bridgeObjectRetain();
                      v67 = sub_1B1DC3B00(v66, v65);
                      if ((v68 & 1) != 0)
                      {
                        v69 = (uint64_t *)(*(_QWORD *)(v62 + 56) + 16 * v67);
                        v70 = *v69;
                        v109 = v69[1];
                        swift_retain();
                        swift_bridgeObjectRelease();
                        v71 = *(_QWORD *)(v64 + 16);
                        if (v71)
                        {
                          swift_bridgeObjectRetain_n();
                          v72 = (uint64_t *)(v64 + 40);
                          v73 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                          do
                          {
                            v74 = *(_QWORD *)v57;
                            if (*(_QWORD *)(*(_QWORD *)v57 + 16))
                            {
                              v75 = *(v72 - 1);
                              v76 = *v72;
                              swift_bridgeObjectRetain_n();
                              v77 = sub_1B1DC3B00(v75, v76);
                              if ((v78 & 1) != 0)
                              {
                                v79 = (uint64_t *)(*(_QWORD *)(v74 + 56) + 16 * v77);
                                v80 = *v79;
                                v81 = v79[1];
                                swift_retain();
                                swift_bridgeObjectRelease_n();
                                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                                  v73 = sub_1B1C66A74(0, v73[2] + 1, 1, v73);
                                v83 = v73[2];
                                v82 = v73[3];
                                if (v83 >= v82 >> 1)
                                  v73 = sub_1B1C66A74(v82 > 1, v83 + 1, 1, v73);
                                v73[2] = v83 + 1;
                                v84 = &v73[2 * v83];
                                v84[4] = v80;
                                v84[5] = v81;
                              }
                              else
                              {
                                swift_bridgeObjectRelease_n();
                              }
                            }
                            v72 += 2;
                            --v71;
                          }
                          while (v71);
                          swift_bridgeObjectRelease_n();
                        }
                        else
                        {
                          v73 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                        }
                        v85 = *(_QWORD **)(v57 + 48);
                        swift_retain();
                        v86 = swift_isUniquelyReferenced_nonNull_native();
                        *(_QWORD *)(v57 + 48) = v85;
                        v60 = v105;
                        v59 = v107;
                        if ((v86 & 1) == 0)
                        {
                          v85 = sub_1B1C66954(0, v85[2] + 1, 1, v85);
                          *(_QWORD *)(v57 + 48) = v85;
                        }
                        v88 = v85[2];
                        v87 = v85[3];
                        if (v88 >= v87 >> 1)
                        {
                          v85 = sub_1B1C66954(v87 > 1, v88 + 1, 1, v85);
                          *(_QWORD *)(v57 + 48) = v85;
                        }
                        v85[2] = v88 + 1;
                        v89 = &v85[3 * v88];
                        v89[4] = v70;
                        v89[5] = v109;
                        v89[6] = v73;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_release();
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease_n();
                      }
                    }
                    ++v61;
                  }
                  while (v61 != v59);
                  swift_bridgeObjectRelease_n();
                  v22 = v101;
                  v13 = v103;
                  v14 = v98;
                }
              }
              ++v13;
              *(_BYTE *)(v57 + 56) = 1;
            }
            while (v13 != v14);
          }
          v8 = v95;
          sub_1B1F05D48(v95, (unsigned __int16 **)v120, (uint64_t)v124);
          sub_1B1F03804((char *)v99);
          v9 = v94;
          ecs_stack_allocator_pop_snapshot(v94);
          v10 = v93;
          if ((v93 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v99 + 376));
          }
          swift_release();
          v11 = v97 + 1;
        }
        while (v97 + 1 != v96);
        sub_1B19ED720((uint64_t)v110);
        sub_1B1A086DC(v112, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
      else
      {
        sub_1B19ED720((uint64_t)v110);
      }
      return sub_1B1A086DC(v112, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      return (_QWORD *)sub_1B19ED720((uint64_t)v110);
    }
  }
  return result;
}

_QWORD *sub_1B20B2AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  _DWORD *v23;
  float *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x2x2_t v27;
  float32x4_t v28;
  int8x16_t v29;
  _DWORD *v30;
  uint64_t v31;
  float *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x2x2_t v35;
  float32x4_t v36;
  int8x16_t v37;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  _QWORD v49[8];
  _OWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  _BYTE v61[40];
  uint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v62 = qword_1ED4D09F8;
  v63 = v7;
  v64 = v6 >> 31;
  v65 = 1;
  v66 = 2;
  v67 = 0;
  swift_retain();
  sub_1B1E42EB8(3, (uint64_t)v47);
  swift_release();
  v59[0] = v47[0];
  v59[1] = v47[1];
  v60 = v48;
  sub_1B1E8FCE4(a1, (uint64_t)v59, 0x200000000, v49);
  sub_1B1A18378((uint64_t)v49, (uint64_t)v50, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v50[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v47);
  if (v56 <= 0 || (v43 = v53) == 0)
  {
    sub_1B19ED720((uint64_t)v47);
    return sub_1B1A086DC(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v8 = v55;
  v9 = v55[4];
  v10 = *(unsigned __int8 *)(v54 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v57[0] = v50[0];
  v57[1] = v50[1];
  v40 = v52;
  v41 = (uint64_t)(v55 + 6);
  v58 = v51;
  v39 = v55 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = 0;
  v12 = 0;
  v42 = v10;
  do
  {
    v13 = (unsigned int *)(v40 + 48 * v11);
    v45 = *v13;
    v46 = v12;
    v44 = v13[1];
    v15 = (uint64_t *)*((_QWORD *)v13 + 2);
    v14 = *((_QWORD *)v13 + 3);
    v16 = *((_QWORD *)v13 + 4);
    v17 = *((_QWORD *)v13 + 5);
    if (v10)
    {
      v18 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    sub_1B1A18378(v41, (uint64_t)v61, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v19 = v8[4];
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v8[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v8[7] = v20;
    v39[1] = 0;
    v39[2] = 0;
    *v39 = 0;
    swift_release();
    v21 = sub_1B1A12038((uint64_t)&type metadata for ParticleAngularVelocityInit, (uint64_t)&off_1E63B2D80, v15, v14, v16, (uint64_t)v8);
    if (v15)
    {
      if (v16)
      {
        v23 = (_DWORD *)(v21 + 12);
        v12 = v46;
        do
        {
          v24 = (float *)(v23 - 3);
          v25.i32[0] = *(v23 - 3);
          v22.i32[0] = *(v23 - 2);
          v25.i32[1] = *(v23 - 1);
          v22.i32[1] = *v23;
          v25.i64[1] = v23[1];
          v26 = vmaxnmq_f32(v25, (float32x4_t)xmmword_1B22B8CC0);
          v26.i32[3] = 0;
          v22.i32[2] = v23[2];
          v27 = (float32x2x2_t)vminnmq_f32(v26, (float32x4_t)xmmword_1B22B8CD0);
          v28 = vmaxnmq_f32(v22, (float32x4_t)xmmword_1B22B8CC0);
          v28.i32[3] = 0;
          v29 = (int8x16_t)vminnmq_f32(v28, (float32x4_t)xmmword_1B22B8CD0);
          vst2_f32(v24, v27);
          v22 = (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL);
          *(int32x2_t *)(v23 + 1) = vzip1_s32(*(int32x2_t *)v22.f32, (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
          v23 += 6;
          --v16;
        }
        while (v16);
        goto LABEL_23;
      }
    }
    else if ((_DWORD)v45 != (_DWORD)v44)
    {
      v30 = (_DWORD *)(v21 + 24 * v45 + 12);
      v31 = v44 - v45;
      v12 = v46;
      do
      {
        v32 = (float *)(v30 - 3);
        v33.i32[0] = *(v30 - 3);
        v22.i32[0] = *(v30 - 2);
        v33.i32[1] = *(v30 - 1);
        v22.i32[1] = *v30;
        v33.i64[1] = v30[1];
        v34 = vmaxnmq_f32(v33, (float32x4_t)xmmword_1B22B8CC0);
        v34.i32[3] = 0;
        v22.i32[2] = v30[2];
        v35 = (float32x2x2_t)vminnmq_f32(v34, (float32x4_t)xmmword_1B22B8CD0);
        v36 = vmaxnmq_f32(v22, (float32x4_t)xmmword_1B22B8CC0);
        v36.i32[3] = 0;
        v37 = (int8x16_t)vminnmq_f32(v36, (float32x4_t)xmmword_1B22B8CD0);
        vst2_f32(v32, v35);
        v22 = (float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL);
        *(int32x2_t *)(v30 + 1) = vzip1_s32(*(int32x2_t *)v22.f32, (int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL));
        v30 += 6;
        --v31;
      }
      while (v31);
      goto LABEL_23;
    }
    v12 = v46;
LABEL_23:
    sub_1B1F05D48(v8, (unsigned __int16 **)v57, (uint64_t)v61);
    sub_1B1F03804((char *)v17);
    ecs_stack_allocator_pop_snapshot(v9);
    v10 = v42;
    if ((v42 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
    }
    swift_release();
    ++v11;
  }
  while (v11 != v43);
  sub_1B19ED720((uint64_t)v47);
  sub_1B1A086DC(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t sub_1B20B2F18(uint64_t a1)
{
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  swift_retain();
  sub_1B20BC864(a1);
  return swift_release();
}

_QWORD *sub_1B20B2FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  unint64_t v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  char *v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _QWORD *result;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD v131[2];
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _OWORD v136[2];
  uint64_t v137;
  _OWORD v138[2];
  uint64_t v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _BYTE v151[72];
  ValueMetadata *v152;
  _UNKNOWN **v153;
  char v154;
  _QWORD v155[8];
  _OWORD v156[2];
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  _BYTE v163[40];
  uint64_t v164;

  v4 = a4;
  v164 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v140 = qword_1ED4D09F8;
  v141 = v7;
  v142 = v6 >> 31;
  v143 = 1;
  v144 = 2;
  v145 = 0;
  swift_retain();
  sub_1B1B18028(2, 1, (uint64_t)v131);
  swift_release();
  v138[0] = v131[0];
  v138[1] = v131[1];
  v139 = v132;
  sub_1B1E8FCE4(a1, (uint64_t)v138, 0x200000000, v155);
  sub_1B1A18378((uint64_t)v155, (uint64_t)v156, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v156[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v131);
  v133 = v156[0];
  v134 = v156[1];
  v135 = v157;
  if (v162 <= 0 || (v119 = v159) == 0)
  {
    sub_1B19ED720((uint64_t)v131);
    return sub_1B1A086DC(v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v118 = v158;
  v8 = *(unsigned __int8 *)(v160 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v9 = v161[4];
  v122 = v161 + 13;
  v123 = v161;
  v114 = v161 + 8;
  v115 = (uint64_t)(v161 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v10 = 0;
  v11 = 0;
  v117 = v8;
  v116 = v9;
  while (1)
  {
    v120 = v11;
    v121 = v10;
    v12 = (unsigned int *)(v118 + 48 * v10);
    v13 = *v12;
    v14 = *((_QWORD *)v12 + 3);
    v126 = v12[1];
    v128 = (uint64_t *)*((_QWORD *)v12 + 2);
    v15 = *((_QWORD *)v12 + 5);
    v124 = *((_QWORD *)v12 + 4);
    if (v8)
    {
      v16 = *(os_unfair_lock_s **)(v15 + 376);
      swift_retain();
      os_unfair_lock_lock(v16);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    sub_1B1A18378(v115, (uint64_t)v163, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v17 = v123[4];
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v123[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
    v123[7] = v18;
    v114[1] = 0;
    v114[2] = 0;
    *v114 = 0;
    swift_release();
    v19 = v124;
    v130 = sub_1B1A12038((uint64_t)&type metadata for Material, (uint64_t)&off_1E63C1AA0, v128, v14, v124, (uint64_t)v123);
    v125 = sub_1B1A12038((uint64_t)&type metadata for MaterialParameters, (uint64_t)&off_1E63924D0, v128, v14, v124, (uint64_t)v123);
    v129 = v15;
    if (v128)
    {
      if (v124)
      {
        v20 = 0;
        do
        {
          v127 = v128[v20];
          if (*(_BYTE *)(v130 + 104 * v20) == 2)
          {
            v21 = (_QWORD *)(v125 + 32 * v20);
            type metadata accessor for CustomParameters();
            v22 = (_QWORD *)swift_allocObject();
            v23 = MEMORY[0x1E0DEE9D8];
            v22[2] = MEMORY[0x1E0DEE9D8];
            v22[3] = v23;
            v22[4] = v23;
            v24 = *(_QWORD **)(*v21 + 16);
            v25 = *(_QWORD *)(v21[1] + 16);
            v26 = *(_QWORD *)(v25 + 16);
            v27 = v24[2];
            v28 = v27 + v26;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (!isUniquelyReferenced_nonNull_native || v28 > v24[3] >> 1)
            {
              if (v27 <= v28)
                v30 = v27 + v26;
              else
                v30 = v27;
              v24 = sub_1B1C67DE0(isUniquelyReferenced_nonNull_native, v30, 1, v24);
            }
            if (*(_QWORD *)(v25 + 16))
            {
              v31 = (unint64_t)&v24[8 * v24[2] + 4];
              if (v25 + 32 < v31 + (v26 << 6) && v31 < v25 + 32 + (v26 << 6))
                goto LABEL_114;
              swift_arrayInitWithCopy();
              if (v26)
                v24[2] += v26;
            }
            swift_bridgeObjectRelease();
            v22[2] = v24;
            swift_bridgeObjectRelease();
            v33 = *(char **)(*v21 + 24);
            v34 = *(_QWORD *)(v21[1] + 24);
            v35 = *(_QWORD *)(v34 + 16);
            v36 = *((_QWORD *)v33 + 2);
            v37 = v36 + v35;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v38 = swift_isUniquelyReferenced_nonNull_native();
            if (!v38 || v37 > *((_QWORD *)v33 + 3) >> 1)
            {
              if (v36 <= v37)
                v39 = v36 + v35;
              else
                v39 = v36;
              v33 = sub_1B1C63FA8(v38, v39, 1, v33);
            }
            v19 = v124;
            if (*(_QWORD *)(v34 + 16))
            {
              v40 = &v33[80 * *((_QWORD *)v33 + 2) + 32];
              if (v34 + 32 < (unint64_t)&v40[80 * v35] && (unint64_t)v40 < v34 + 32 + 80 * v35)
                goto LABEL_114;
              memcpy(v40, (const void *)(v34 + 32), 80 * v35);
              if (v35)
                *((_QWORD *)v33 + 2) += v35;
            }
            swift_bridgeObjectRelease();
            v22[3] = v33;
            swift_bridgeObjectRelease();
            v42 = sub_1B19E52CC(&qword_1EEF5DBF0, (uint64_t (*)(uint64_t))type metadata accessor for CustomParameters, (uint64_t)&unk_1B22A6808);
            v43 = v130 + 104 * v20;
            *(_QWORD *)(v43 + 24) = v22;
            *(_QWORD *)(v43 + 32) = v42;
            swift_retain();
            swift_unknownObjectRelease();
            if (*(_QWORD *)(v43 + 24)
              && object_getClass(*(id *)(v43 + 24)) == (Class)_TtC3VFX16CustomParameters)
            {
              swift_unknownObjectRetain();
              v48 = sub_1B1F7B1A8();
              v50 = v49;
              swift_unknownObjectRelease();
              v51 = v130 + 104 * v20;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v51 + 88) = v48;
              *(_QWORD *)(v51 + 96) = v50;
            }
            else
            {
              v44 = sub_1B1C6C500(MEMORY[0x1E0DEE9D8]);
              v46 = v45;
              v47 = v130 + 104 * v20;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v47 + 88) = v44;
              *(_QWORD *)(v47 + 96) = v46;
            }
            swift_release();
            v15 = v129;
          }
          v52 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 16);
          v53 = *(_QWORD *)(v52 + 128);
          if (*(_QWORD *)(v53 + 16))
          {
            v54 = sub_1B1DC3AC8((uint64_t)&type metadata for MaterialParameters);
            if ((v55 & 1) != 0
              && *(ValueMetadata **)(*(_QWORD *)(v52 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v53 + 56) + 8 * v54) + 32) == &type metadata for MaterialParameters)
            {
              v152 = &type metadata for MaterialParameters;
              v153 = &off_1E63924D0;
              v154 = 1;
              v56 = *v122;
              if (*(_QWORD *)(*v122 + 16))
              {
                swift_retain();
                swift_bridgeObjectRetain();
                sub_1B1F09F2C(v56 + 32, (uint64_t)v151);
                sub_1B1BE90FC((uint64_t)v151, (uint64_t)&v146);
                sub_1B1BE90FC((uint64_t)&v152, (uint64_t)&v149);
                __asm { BR              X9 }
              }
              swift_retain();
              v57 = *(_QWORD *)(v15 + 240) - *(_QWORD *)(v15 + 232);
              v58 = ecs_stack_allocator_allocate(v123[4], 8 * v57, 8);
              *v58 = v127;
              sub_1B1BE90FC((uint64_t)&v152, (uint64_t)&v146);
              *(_QWORD *)&v149 = v58;
              *((_QWORD *)&v149 + 1) = v57;
              v150 = 1;
              v59 = (_QWORD *)v123[13];
              v60 = swift_isUniquelyReferenced_nonNull_native();
              v123[13] = v59;
              if ((v60 & 1) == 0)
              {
                v59 = sub_1B1C631A0(0, v59[2] + 1, 1, v59);
                *v122 = v59;
              }
              v62 = v59[2];
              v61 = v59[3];
              if (v62 >= v61 >> 1)
              {
                v59 = sub_1B1C631A0(v61 > 1, v62 + 1, 1, v59);
                *v122 = v59;
              }
              v59[2] = v62 + 1;
              v63 = &v59[9 * v62];
              *((_OWORD *)v63 + 2) = v146;
              v64 = v147;
              v65 = v148;
              v66 = v149;
              v63[12] = v150;
              *((_OWORD *)v63 + 4) = v65;
              *((_OWORD *)v63 + 5) = v66;
              *((_OWORD *)v63 + 3) = v64;
              sub_1B1B68F14((uint64_t)&v152);
              swift_release();
            }
          }
          ++v20;
        }
        while (v20 != v19);
      }
      goto LABEL_18;
    }
    if ((_DWORD)v13 != (_DWORD)v126)
      break;
LABEL_18:
    v136[0] = v133;
    v136[1] = v134;
    v137 = v135;
    v11 = v120;
    sub_1B1F05D48(v123, (unsigned __int16 **)v136, (uint64_t)v163);
    sub_1B1F03804((char *)v15);
    v9 = v116;
    ecs_stack_allocator_pop_snapshot(v116);
    v8 = v117;
    if ((v117 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
    }
    swift_release();
    v10 = v121 + 1;
    if (v121 + 1 == v119)
    {
      sub_1B19ED720((uint64_t)v131);
      sub_1B1A086DC(v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      return sub_1B1A086DC(v155, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  while (1)
  {
    if (*(_BYTE *)(v130 + 104 * v13) != 2)
      goto LABEL_100;
    v67 = (_QWORD *)(v125 + 32 * v13);
    type metadata accessor for CustomParameters();
    v68 = (_QWORD *)swift_allocObject();
    v69 = MEMORY[0x1E0DEE9D8];
    v68[2] = MEMORY[0x1E0DEE9D8];
    v68[3] = v69;
    v68[4] = v69;
    v70 = *(_QWORD **)(*v67 + 16);
    v71 = *(_QWORD *)(v67[1] + 16);
    v72 = *(_QWORD *)(v71 + 16);
    v73 = v70[2];
    v74 = v73 + v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v75 = swift_isUniquelyReferenced_nonNull_native();
    if (!v75 || v74 > v70[3] >> 1)
    {
      if (v73 <= v74)
        v76 = v73 + v72;
      else
        v76 = v73;
      v70 = sub_1B1C67DE0(v75, v76, 1, v70);
    }
    if (!*(_QWORD *)(v71 + 16))
      goto LABEL_81;
    v77 = (unint64_t)&v70[8 * v70[2] + 4];
    if (v71 + 32 < v77 + (v72 << 6) && v77 < v71 + 32 + (v72 << 6))
      break;
    swift_arrayInitWithCopy();
    if (v72)
      v70[2] += v72;
LABEL_81:
    swift_bridgeObjectRelease();
    v68[2] = v70;
    swift_bridgeObjectRelease();
    v79 = *(char **)(*v67 + 24);
    v80 = *(_QWORD *)(v67[1] + 24);
    v81 = *(_QWORD *)(v80 + 16);
    v82 = *((_QWORD *)v79 + 2);
    v83 = v82 + v81;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v84 = swift_isUniquelyReferenced_nonNull_native();
    if (!v84 || v83 > *((_QWORD *)v79 + 3) >> 1)
    {
      if (v82 <= v83)
        v85 = v82 + v81;
      else
        v85 = v82;
      v79 = sub_1B1C63FA8(v84, v85, 1, v79);
    }
    v15 = v129;
    if (*(_QWORD *)(v80 + 16))
    {
      v86 = &v79[80 * *((_QWORD *)v79 + 2) + 32];
      if (v80 + 32 < (unint64_t)&v86[80 * v81] && (unint64_t)v86 < v80 + 32 + 80 * v81)
        break;
      memcpy(v86, (const void *)(v80 + 32), 80 * v81);
      if (v81)
        *((_QWORD *)v79 + 2) += v81;
    }
    swift_bridgeObjectRelease();
    v68[3] = v79;
    swift_bridgeObjectRelease();
    v88 = sub_1B19E52CC(&qword_1EEF5DBF0, (uint64_t (*)(uint64_t))type metadata accessor for CustomParameters, (uint64_t)&unk_1B22A6808);
    v89 = v130 + 104 * v13;
    *(_QWORD *)(v89 + 24) = v68;
    *(_QWORD *)(v89 + 32) = v88;
    swift_retain();
    swift_unknownObjectRelease();
    if (*(_QWORD *)(v89 + 24) && object_getClass(*(id *)(v89 + 24)) == (Class)_TtC3VFX16CustomParameters)
    {
      swift_unknownObjectRetain();
      v94 = sub_1B1F7B1A8();
      v96 = v95;
      swift_unknownObjectRelease();
      v97 = v130 + 104 * v13;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v97 + 88) = v94;
      *(_QWORD *)(v97 + 96) = v96;
    }
    else
    {
      v90 = sub_1B1C6C500(MEMORY[0x1E0DEE9D8]);
      v92 = v91;
      v93 = v130 + 104 * v13;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v93 + 88) = v90;
      *(_QWORD *)(v93 + 96) = v92;
    }
    swift_release();
LABEL_100:
    v98 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 16);
    v99 = *(_QWORD *)(v98 + 128);
    if (*(_QWORD *)(v99 + 16))
    {
      v100 = sub_1B1DC3AC8((uint64_t)&type metadata for MaterialParameters);
      if ((v101 & 1) != 0
        && *(ValueMetadata **)(*(_QWORD *)(v98 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v99 + 56) + 8 * v100) + 32) == &type metadata for MaterialParameters)
      {
        v152 = &type metadata for MaterialParameters;
        v153 = &off_1E63924D0;
        v154 = 1;
        v102 = *v122;
        if (*(_QWORD *)(*v122 + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1B1F09F2C(v102 + 32, (uint64_t)v151);
          sub_1B1BE90FC((uint64_t)v151, (uint64_t)&v146);
          sub_1B1BE90FC((uint64_t)&v152, (uint64_t)&v149);
          __asm { BR              X9 }
        }
        swift_retain();
        v103 = *(_QWORD *)(v15 + 240) - *(_QWORD *)(v15 + 232);
        v104 = ecs_stack_allocator_allocate(v123[4], 8 * v103, 8);
        *v104 = v13;
        sub_1B1BE90FC((uint64_t)&v152, (uint64_t)&v146);
        *(_QWORD *)&v149 = v104;
        *((_QWORD *)&v149 + 1) = v103;
        v150 = 1;
        v105 = (_QWORD *)v123[13];
        v106 = swift_isUniquelyReferenced_nonNull_native();
        v123[13] = v105;
        if ((v106 & 1) == 0)
        {
          v105 = sub_1B1C631A0(0, v105[2] + 1, 1, v105);
          *v122 = v105;
        }
        v108 = v105[2];
        v107 = v105[3];
        if (v108 >= v107 >> 1)
        {
          v105 = sub_1B1C631A0(v107 > 1, v108 + 1, 1, v105);
          *v122 = v105;
        }
        v105[2] = v108 + 1;
        v109 = &v105[9 * v108];
        *((_OWORD *)v109 + 2) = v146;
        v110 = v147;
        v111 = v148;
        v112 = v149;
        v109[12] = v150;
        *((_OWORD *)v109 + 4) = v111;
        *((_OWORD *)v109 + 5) = v112;
        *((_OWORD *)v109 + 3) = v110;
        sub_1B1B68F14((uint64_t)&v152);
        swift_release();
      }
    }
    if (++v13 == v126)
      goto LABEL_18;
  }
LABEL_114:
  result = (_QWORD *)sub_1B2229700();
  __break(1u);
  return result;
}

_QWORD *sub_1B20B4160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[2];
  uint64_t v70;
  _OWORD v71[2];
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[72];
  ValueMetadata *v87;
  _UNKNOWN **v88;
  char v89;
  _QWORD v90[8];
  _OWORD v91[2];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _BYTE v98[40];
  uint64_t v99;

  v4 = a4;
  v99 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v75 = qword_1ED4D09F8;
  v76 = v7;
  v77 = v6 >> 31;
  v78 = 1;
  v79 = 2;
  v80 = 0;
  swift_retain();
  sub_1B1B18254(1, 3, (uint64_t)v69);
  swift_release();
  v73[0] = v69[0];
  v73[1] = v69[1];
  v74 = v70;
  sub_1B1E8FCE4(a1, (uint64_t)v73, 0x200000000, v90);
  sub_1B1A18378((uint64_t)v90, (uint64_t)v91, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v91[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v69);
  if (v97 > 0 && (v61 = v94) != 0)
  {
    v8 = v96;
    v67 = v96[4];
    v66 = *(unsigned __int8 *)(v95 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v71[0] = v91[0];
    v71[1] = v91[1];
    v72 = v92;
    v59 = (uint64_t)(v96 + 6);
    v60 = v93;
    v63 = v96 + 13;
    v58 = v96 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    v9 = 0;
    v10 = 0;
    v62 = v8;
    do
    {
      v11 = (unsigned int *)(v60 + 48 * v9);
      v12 = *v11;
      v13 = v11[1];
      v15 = (uint64_t *)*((_QWORD *)v11 + 2);
      v14 = *((_QWORD *)v11 + 3);
      v16 = *((_QWORD *)v11 + 4);
      v17 = *((_QWORD *)v11 + 5);
      v64 = v10;
      v65 = v9;
      if (v66)
      {
        v18 = *(os_unfair_lock_s **)(v17 + 376);
        swift_retain();
        os_unfair_lock_lock(v18);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v67);
      sub_1B1A18378(v59, (uint64_t)v98, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v19 = v8[4];
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v8[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
      v8[7] = v20;
      v58[1] = 0;
      v58[2] = 0;
      *v58 = 0;
      swift_release();
      sub_1B1A12038((uint64_t)&type metadata for VFXAssetTag, (uint64_t)&off_1E6374010, v15, v14, v16, (uint64_t)v8);
      v68 = sub_1B1A12038((uint64_t)&type metadata for Name, (uint64_t)&off_1E63B9AE8, v15, v14, v16, (uint64_t)v8);
      if (v15)
      {
        if (v16)
        {
          for (i = 0; i != v16; ++i)
          {
            v22 = v15[i];
            v23 = (_QWORD *)(v68 + 16 * i);
            v24 = *v23 == 0x7465737341 && v23[1] == 0xE500000000000000;
            if (v24 || (sub_1B2229D24() & 1) != 0)
            {
              v25 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 16);
              v26 = *(_QWORD *)(v25 + 128);
              if (*(_QWORD *)(v26 + 16))
              {
                v27 = sub_1B1DC3AC8((uint64_t)&type metadata for Name);
                if ((v28 & 1) != 0
                  && *(ValueMetadata **)(*(_QWORD *)(v25 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27) + 32) == &type metadata for Name)
                {
                  v87 = &type metadata for Name;
                  v88 = &off_1E63B9AE8;
                  v89 = 1;
                  v29 = *v63;
                  if (*(_QWORD *)(*v63 + 16))
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    sub_1B1F09F2C(v29 + 32, (uint64_t)v86);
                    sub_1B1BE90FC((uint64_t)v86, (uint64_t)&v81);
                    sub_1B1BE90FC((uint64_t)&v87, (uint64_t)&v84);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v30 = *(_QWORD *)(v17 + 240) - *(_QWORD *)(v17 + 232);
                  v8 = v62;
                  v31 = ecs_stack_allocator_allocate(v62[4], 8 * v30, 8);
                  *v31 = v22;
                  sub_1B1BE90FC((uint64_t)&v87, (uint64_t)&v81);
                  *(_QWORD *)&v84 = v31;
                  *((_QWORD *)&v84 + 1) = v30;
                  v85 = 1;
                  v32 = (_QWORD *)v62[13];
                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  v62[13] = v32;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    v32 = sub_1B1C631A0(0, v32[2] + 1, 1, v32);
                    *v63 = v32;
                  }
                  v35 = v32[2];
                  v34 = v32[3];
                  if (v35 >= v34 >> 1)
                  {
                    v32 = sub_1B1C631A0(v34 > 1, v35 + 1, 1, v32);
                    *v63 = v32;
                  }
                  v32[2] = v35 + 1;
                  v36 = &v32[9 * v35];
                  *((_OWORD *)v36 + 2) = v81;
                  v37 = v82;
                  v38 = v83;
                  v39 = v84;
                  v36[12] = v85;
                  *((_OWORD *)v36 + 4) = v38;
                  *((_OWORD *)v36 + 5) = v39;
                  *((_OWORD *)v36 + 3) = v37;
                  sub_1B1B68F14((uint64_t)&v87);
                  swift_release();
                }
              }
            }
          }
        }
      }
      else if ((_DWORD)v12 != (_DWORD)v13)
      {
        do
        {
          v40 = (_QWORD *)(v68 + 16 * v12);
          v41 = *v40 == 0x7465737341 && v40[1] == 0xE500000000000000;
          if (v41 || (sub_1B2229D24() & 1) != 0)
          {
            v42 = *(_QWORD *)(*(_QWORD *)(v17 + 40) + 16);
            v43 = *(_QWORD *)(v42 + 128);
            if (*(_QWORD *)(v43 + 16))
            {
              v44 = sub_1B1DC3AC8((uint64_t)&type metadata for Name);
              if ((v45 & 1) != 0
                && *(ValueMetadata **)(*(_QWORD *)(v42 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v44) + 32) == &type metadata for Name)
              {
                v87 = &type metadata for Name;
                v88 = &off_1E63B9AE8;
                v89 = 1;
                v46 = *v63;
                if (*(_QWORD *)(*v63 + 16))
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  sub_1B1F09F2C(v46 + 32, (uint64_t)v86);
                  sub_1B1BE90FC((uint64_t)v86, (uint64_t)&v81);
                  sub_1B1BE90FC((uint64_t)&v87, (uint64_t)&v84);
                  __asm { BR              X9 }
                }
                swift_retain();
                v47 = *(_QWORD *)(v17 + 240) - *(_QWORD *)(v17 + 232);
                v48 = ecs_stack_allocator_allocate(v8[4], 8 * v47, 8);
                *v48 = v12;
                sub_1B1BE90FC((uint64_t)&v87, (uint64_t)&v81);
                *(_QWORD *)&v84 = v48;
                *((_QWORD *)&v84 + 1) = v47;
                v85 = 1;
                v49 = (_QWORD *)v8[13];
                v50 = swift_isUniquelyReferenced_nonNull_native();
                v8[13] = v49;
                if ((v50 & 1) == 0)
                {
                  v49 = sub_1B1C631A0(0, v49[2] + 1, 1, v49);
                  *v63 = v49;
                }
                v52 = v49[2];
                v51 = v49[3];
                if (v52 >= v51 >> 1)
                {
                  v49 = sub_1B1C631A0(v51 > 1, v52 + 1, 1, v49);
                  *v63 = v49;
                }
                v49[2] = v52 + 1;
                v53 = &v49[9 * v52];
                *((_OWORD *)v53 + 2) = v81;
                v54 = v82;
                v55 = v83;
                v56 = v84;
                v53[12] = v85;
                *((_OWORD *)v53 + 4) = v55;
                *((_OWORD *)v53 + 5) = v56;
                *((_OWORD *)v53 + 3) = v54;
                sub_1B1B68F14((uint64_t)&v87);
                swift_release();
              }
            }
          }
          ++v12;
        }
        while (v12 != v13);
      }
      v10 = v64;
      sub_1B1F05D48(v8, (unsigned __int16 **)v71, (uint64_t)v98);
      sub_1B1F03804((char *)v17);
      ecs_stack_allocator_pop_snapshot(v67);
      if ((v66 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
      }
      swift_release();
      v9 = v65 + 1;
    }
    while (v65 + 1 != v61);
    sub_1B19ED720((uint64_t)v69);
    sub_1B1A086DC(v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    sub_1B19ED720((uint64_t)v69);
  }
  return sub_1B1A086DC(v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20B4DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x2_t *v27;
  float32x2_t *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  _QWORD v41[8];
  _OWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  _BYTE v53[40];
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v54 = qword_1ED4D09F8;
  v55 = v7;
  v56 = v6 >> 31;
  v57 = 1;
  v58 = 2;
  v59 = 0;
  swift_retain();
  sub_1B1E430B0(2, (uint64_t)v39);
  swift_release();
  v51[0] = v39[0];
  v51[1] = v39[1];
  v52 = v40;
  sub_1B1E8FCE4(a1, (uint64_t)v51, 0x200000000, v41);
  sub_1B1A18378((uint64_t)v41, (uint64_t)v42, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v42[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v39);
  if (v48 <= 0 || (v35 = v45) == 0)
  {
    sub_1B19ED720((uint64_t)v39);
    return sub_1B1A086DC(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v8 = v47;
  v9 = v47[4];
  v10 = *(unsigned __int8 *)(v46 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v49[0] = v42[0];
  v49[1] = v42[1];
  v50 = v43;
  v32 = (uint64_t)(v47 + 6);
  v33 = v44;
  v31 = v47 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = 0;
  v12 = 0;
  __asm { FMOV            V8.2S, #1.0 }
  v34 = v10;
  do
  {
    v18 = (unsigned int *)(v33 + 48 * v11);
    v37 = *v18;
    v38 = v12;
    v36 = v18[1];
    v20 = (uint64_t *)*((_QWORD *)v18 + 2);
    v19 = *((_QWORD *)v18 + 3);
    v21 = *((_QWORD *)v18 + 4);
    v22 = *((_QWORD *)v18 + 5);
    if (v10)
    {
      v23 = *(os_unfair_lock_s **)(v22 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v23);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v22 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    sub_1B1A18378(v32, (uint64_t)v53, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v24 = v8[4];
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v8[6] = ecs_stack_allocator_allocate(v24, 48 * v25, 8);
    v8[7] = v25;
    v31[1] = 0;
    v31[2] = 0;
    *v31 = 0;
    swift_release();
    v26 = sub_1B1A12038((uint64_t)&type metadata for ParticlePivotInit, (uint64_t)&off_1E638E878, v20, v19, v21, (uint64_t)v8);
    if (v20)
    {
      if (v21)
      {
        v27 = (float32x2_t *)(v26 + 16);
        v12 = v38;
        do
        {
          v27[-2] = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(_D8, v27[-2]));
          *v27 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(_D8, *v27));
          v27 += 3;
          --v21;
        }
        while (v21);
        goto LABEL_23;
      }
    }
    else if ((_DWORD)v37 != (_DWORD)v36)
    {
      v28 = (float32x2_t *)(v26 + 24 * v37 + 16);
      v29 = v36 - v37;
      v12 = v38;
      do
      {
        v28[-2] = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(_D8, v28[-2]));
        *v28 = (float32x2_t)vrev64_s32((int32x2_t)vsub_f32(_D8, *v28));
        v28 += 3;
        --v29;
      }
      while (v29);
      goto LABEL_23;
    }
    v12 = v38;
LABEL_23:
    sub_1B1F05D48(v8, (unsigned __int16 **)v49, (uint64_t)v53);
    sub_1B1F03804((char *)v22);
    ecs_stack_allocator_pop_snapshot(v9);
    v10 = v34;
    if ((v34 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v22 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v22 + 376));
    }
    swift_release();
    ++v11;
  }
  while (v11 != v35);
  sub_1B19ED720((uint64_t)v39);
  sub_1B1A086DC(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

void sub_1B20B519C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  os_unfair_lock_s *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  float v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  os_unfair_lock_s *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float32x2_t *v118;
  float32x2_t *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  os_unfair_lock_s *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float32x2_t *v135;
  uint64_t v136;
  float32x2_t *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  os_unfair_lock_s *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  float32x2_t *v153;
  uint64_t v154;
  float32x2_t *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  os_unfair_lock_s *v165;
  uint64_t v166;
  uint64_t v167;
  float32x2_t *v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  float32x2_t *v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 *v179;
  char v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 *v191;
  char v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 *v204;
  char v205;
  __int128 v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 *v217;
  char v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  float32x2_t *v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  __int128 *v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  int v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  int v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  _OWORD v296[2];
  uint64_t v297;
  _QWORD v298[8];
  _OWORD v299[2];
  uint64_t v300;
  _QWORD v301[8];
  _OWORD v302[2];
  uint64_t v303;
  _QWORD v304[8];
  _OWORD v305[2];
  uint64_t v306;
  _QWORD v307[8];
  _OWORD v308[2];
  uint64_t v309;
  _QWORD v310[8];
  _OWORD v311[2];
  uint64_t v312;
  _QWORD v313[8];
  _OWORD v314[2];
  uint64_t v315;
  _QWORD v316[8];
  _BYTE v317[40];
  _BYTE v318[40];
  _QWORD v319[8];
  _BYTE v320[40];
  _BYTE v321[40];
  _QWORD v322[8];
  _BYTE v323[40];
  _BYTE v324[40];
  _QWORD v325[12];
  _BYTE v326[40];
  _BYTE v327[40];
  _QWORD v328[5];
  _QWORD v329[12];
  _BYTE v330[40];
  _QWORD v331[12];
  _BYTE v332[40];
  _OWORD v333[5];
  __int128 v334;
  _OWORD v335[6];
  _OWORD v336[6];
  _OWORD v337[5];
  __int128 v338;
  _OWORD v339[5];
  __int128 v340;
  _OWORD v341[5];
  __int128 v342;
  _OWORD v343[5];
  __int128 v344;
  _OWORD v345[2];
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  _OWORD v350[2];
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t v356;
  _OWORD v357[2];
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  uint64_t v366;
  _OWORD v367[2];
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD *v372;
  uint64_t v373;
  _OWORD v374[2];
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  _QWORD *v379;
  uint64_t v380;
  _OWORD v381[2];
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  _OWORD v388[2];
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  _OWORD v395[2];
  uint64_t v396;
  _OWORD v397[2];
  uint64_t v398;
  _OWORD v399[2];
  uint64_t v400;
  _OWORD v401[2];
  uint64_t v402;
  _OWORD v403[2];
  uint64_t v404;
  _OWORD v405[2];
  uint64_t v406;
  _OWORD v407[2];
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  _OWORD v412[2];
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  _OWORD v417[2];
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  _OWORD v422[2];
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  _OWORD v427[2];
  uint64_t v428;
  _OWORD v429[2];
  uint64_t v430;
  _OWORD v431[2];
  uint64_t v432;
  _OWORD v433[2];
  uint64_t v434;
  _OWORD v435[2];
  uint64_t v436;
  _OWORD v437[2];
  uint64_t v438;
  _OWORD v439[2];
  uint64_t v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  uint64_t v444[10];
  char v445;
  __int128 v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  char v450;
  uint64_t v451;
  char v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  char v456;
  uint64_t v457;
  char v458;
  uint64_t v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  _QWORD v463[10];
  char v464;
  __int128 v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  char v469;
  uint64_t v470;
  char v471;
  uint64_t v472;
  __int128 v473;
  __int128 v474;
  __int128 v475;
  _QWORD v476[10];
  char v477;
  __int128 v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  char v482;
  uint64_t v483;
  char v484;
  uint64_t v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  _QWORD v489[10];
  char v490;
  __int128 v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  char v495;
  uint64_t v496;
  char v497;
  uint64_t v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  _QWORD v502[10];
  char v503;
  __int128 v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  char v508;
  uint64_t v509;
  char v510;
  uint64_t v511;
  _QWORD v512[6];
  int v513;
  char v514;
  uint64_t v515;
  char v516;
  uint64_t v517;
  _BYTE v518[40];
  _QWORD v519[5];
  _QWORD v520[6];
  int v521;
  char v522;
  uint64_t v523;
  char v524;
  uint64_t v525;
  _QWORD v526[6];
  int v527;
  char v528;
  uint64_t v529;
  char v530;
  uint64_t v531;
  _QWORD v532[6];
  int v533;
  char v534;
  uint64_t v535;
  char v536;
  uint64_t v537;
  _QWORD v538[6];
  int v539;
  char v540;
  uint64_t v541;
  char v542;
  uint64_t v543;
  _BYTE v544[40];
  uint64_t v545;
  int v546;
  char v547;
  uint64_t v548;
  char v549;
  uint64_t v550;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v6 = v2 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v3;
  v545 = qword_1ED4D09F8;
  v270 = v7;
  v546 = v7;
  v269 = v6 >> 31;
  v547 = v6 >> 31;
  v549 = 2;
  v548 = 1;
  v550 = 0;
  swift_retain();
  sub_1B1E3D7C4(2, (uint64_t)v296);
  swift_release();
  v439[0] = v296[0];
  v439[1] = v296[1];
  v440 = v297;
  v271 = v5;
  sub_1B1E8FCE4(v5, (uint64_t)v439, 0x200000000, v298);
  sub_1B1A18378((uint64_t)v298, (uint64_t)v388, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v388[0])
  {
    v31 = v5;
    goto LABEL_39;
  }
  if (v394 < 1 || (v272 = v391) == 0)
  {
    v31 = v5;
    goto LABEL_38;
  }
  v8 = v393;
  v9 = v393[4];
  v10 = *(unsigned __int8 *)(v392 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v395[0] = v388[0];
  v395[1] = v388[1];
  v396 = v389;
  v257 = (uint64_t)(v393 + 6);
  v263 = v390;
  v251 = v393 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = 0;
  v242 = v10;
  v245 = v9;
  do
  {
    v12 = (unsigned int *)(v263 + 48 * v11);
    v277 = *v12;
    v283 = v12[1];
    v13 = (uint64_t *)*((_QWORD *)v12 + 2);
    v289 = *((_QWORD *)v12 + 3);
    v14 = *((_QWORD *)v12 + 4);
    v15 = *((_QWORD *)v12 + 5);
    if (v10)
    {
      v16 = *(os_unfair_lock_s **)(v15 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v16);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    sub_1B1A18378(v257, (uint64_t)v544, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v17 = v8[4];
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v8[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
    v8[7] = v18;
    v251[1] = 0;
    v251[2] = 0;
    *v251 = 0;
    swift_release();
    v19 = sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v13, v289, v14, (uint64_t)v8);
    if (v13)
    {
      v10 = v242;
      if (!v14)
        goto LABEL_19;
      v9 = v245;
      if (v14 == 1)
      {
        v20 = 0;
LABEL_23:
        v23 = v14 - v20;
        v24 = (_BYTE *)(v19 + 88 * v20 + 58);
        do
        {
          *v24 = 1;
          v24 += 88;
          --v23;
        }
        while (v23);
        goto LABEL_33;
      }
      v20 = v14 & 0xFFFFFFFFFFFFFFFELL;
      v21 = (_BYTE *)(v19 + 146);
      v22 = v14 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v21 - 88) = 1;
        *v21 = 1;
        v21 += 176;
        v22 -= 2;
      }
      while (v22);
      if (v14 != v20)
        goto LABEL_23;
    }
    else
    {
      v10 = v242;
      if ((_DWORD)v277 == (_DWORD)v283)
      {
LABEL_19:
        v9 = v245;
        goto LABEL_33;
      }
      v25 = v283 - v277;
      v9 = v245;
      if ((unint64_t)(v283 - v277) < 2)
      {
        v26 = v277;
LABEL_31:
        v29 = v283 - v26;
        v30 = (_BYTE *)(v19 + 88 * v26 + 58);
        do
        {
          *v30 = 1;
          v30 += 88;
          --v29;
        }
        while (v29);
        goto LABEL_33;
      }
      v26 = (v25 & 0xFFFFFFFFFFFFFFFELL) + v277;
      v27 = (_BYTE *)(v19 + 88 * v277 + 146);
      v28 = v25 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *(v27 - 88) = 1;
        *v27 = 1;
        v27 += 176;
        v28 -= 2;
      }
      while (v28);
      if (v25 != (v25 & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_31;
    }
LABEL_33:
    sub_1B1F05D48(v8, (unsigned __int16 **)v395, (uint64_t)v544);
    sub_1B1F03804((char *)v15);
    ecs_stack_allocator_pop_snapshot(v9);
    if ((v10 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
    }
    swift_release();
    ++v11;
  }
  while (v11 != v272);
  sub_1B1A086DC(v298, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v31 = v5;
LABEL_38:
  sub_1B1A086DC(v298, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_39:
  v538[5] = qword_1ED4D09F8;
  v539 = v270;
  v540 = v269;
  v542 = 2;
  v541 = 1;
  v543 = 0;
  swift_retain();
  sub_1B1E432A8(2, (uint64_t)v299);
  swift_release();
  v437[0] = v299[0];
  v437[1] = v299[1];
  v438 = v300;
  sub_1B1E8FCE4(v31, (uint64_t)v437, 0x200000000, v301);
  sub_1B1A18378((uint64_t)v301, (uint64_t)v381, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v381[0])
  {
    if (v387 >= 1)
    {
      v264 = v384;
      if (v384)
      {
        v278 = v386[4];
        v32 = *(unsigned __int8 *)(v385 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v397[0] = v381[0];
        v397[1] = v381[1];
        v398 = v382;
        v246 = (uint64_t)(v386 + 6);
        v252 = v383;
        v284 = v386;
        v243 = v386 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v33 = 0;
        v258 = v32;
        do
        {
          v34 = (unsigned int *)(v252 + 48 * v33);
          v35 = *v34;
          v36 = v34[1];
          v38 = (uint64_t *)*((_QWORD *)v34 + 2);
          v37 = *((_QWORD *)v34 + 3);
          v40 = *((_QWORD *)v34 + 4);
          v39 = *((_QWORD *)v34 + 5);
          if (v32)
          {
            v41 = *(os_unfair_lock_s **)(v39 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v41);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v39 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v278);
          sub_1B1A18378(v246, (uint64_t)v538, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v42 = v284[4];
          v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 40) + 16) + 32) + 16) + 1;
          v290 = v39;
          swift_retain();
          v284[6] = ecs_stack_allocator_allocate(v42, 48 * v43, 8);
          v284[7] = v43;
          v243[1] = 0;
          v243[2] = 0;
          *v243 = 0;
          swift_release();
          v44 = sub_1B1A12038((uint64_t)&type metadata for ParticleSizeOverLife, (uint64_t)&off_1E639DD88, v38, v37, v40, (uint64_t)v284);
          if (v38)
          {
            if (v40)
            {
              for (i = 0; i != v40; ++i)
              {
                v46 = (uint64_t *)(v44 + 112 * i);
                if (*(unsigned __int8 *)v46 <= 1u)
                {
                  v47 = *(_QWORD *)(v46[3] + 16);
                  if (v47)
                  {
                    v48 = v46 + 2;
                    v49 = v46[2];
                    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    v46[2] = v49;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    {
                      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B1FFEEAC(v49);
                      *v48 = isUniquelyReferenced_nonNull_native;
                    }
                    nullsub_16(isUniquelyReferenced_nonNull_native);
                    v51 = sub_1B1FFEC5C();
                    nullsub_16(v51);
                    v52 = sub_1B1FFEC5C();
                    nullsub_16(v52);
                    v53 = -v47;
                    v54 = 8;
                    do
                    {
                      v55 = *(float *)(*v48 + 4 * v54) + *(float *)(*v48 + 4 * v54);
                      v56 = sub_1B1FFEC5C();
                      *(float *)(*v48 + 4 * v54) = v55;
                      nullsub_16(v56);
                      ++v54;
                    }
                    while (v53 + v54 != 8);
                  }
                  v57 = *(_QWORD *)(v46[7] + 16);
                  if (v57)
                  {
                    v58 = v46 + 6;
                    v59 = sub_1B1FFEC5C();
                    nullsub_16(v59);
                    v60 = sub_1B1FFEC5C();
                    nullsub_16(v60);
                    v61 = sub_1B1FFEC5C();
                    nullsub_16(v61);
                    v62 = -v57;
                    v63 = 8;
                    do
                    {
                      v64 = *(float *)(*v58 + 4 * v63) + *(float *)(*v58 + 4 * v63);
                      v65 = sub_1B1FFEC5C();
                      *(float *)(*v58 + 4 * v63) = v64;
                      nullsub_16(v65);
                      ++v63;
                    }
                    while (v62 + v63 != 8);
                  }
                  v66 = sub_1B1C7A1C4(v46[11]);
                  if (v66)
                  {
                    v67 = v66;
                    v68 = v46 + 10;
                    v69 = sub_1B1FFEC5C();
                    nullsub_16(v69);
                    v70 = sub_1B1FFEC5C();
                    nullsub_16(v70);
                    v71 = sub_1B1FFEC5C();
                    nullsub_16(v71);
                    v72 = 8;
                    do
                    {
                      v73 = *(float *)(*v68 + 4 * v72) + *(float *)(*v68 + 4 * v72);
                      v74 = sub_1B1FFEC5C();
                      *(float *)(*v68 + 4 * v72) = v73;
                      nullsub_16(v74);
                      ++v72;
                    }
                    while (v72 - v67 != 8);
                  }
                }
              }
            }
          }
          else if ((_DWORD)v35 != (_DWORD)v36)
          {
            do
            {
              v75 = (uint64_t *)(v44 + 112 * v35);
              if (*(unsigned __int8 *)v75 <= 1u)
              {
                v76 = *(_QWORD *)(v75[3] + 16);
                if (v76)
                {
                  v77 = v75 + 2;
                  v78 = v75[2];
                  v79 = swift_isUniquelyReferenced_nonNull_native();
                  v75[2] = v78;
                  if ((v79 & 1) == 0)
                  {
                    v79 = (uint64_t)sub_1B1FFEEAC(v78);
                    *v77 = v79;
                  }
                  nullsub_16(v79);
                  v80 = sub_1B1FFEC5C();
                  nullsub_16(v80);
                  v81 = sub_1B1FFEC5C();
                  nullsub_16(v81);
                  v82 = -v76;
                  v83 = 8;
                  do
                  {
                    v84 = *(float *)(*v77 + 4 * v83) + *(float *)(*v77 + 4 * v83);
                    v85 = sub_1B1FFEC5C();
                    *(float *)(*v77 + 4 * v83) = v84;
                    nullsub_16(v85);
                    ++v83;
                  }
                  while (v82 + v83 != 8);
                }
                v86 = *(_QWORD *)(v75[7] + 16);
                if (v86)
                {
                  v87 = v75 + 6;
                  v88 = sub_1B1FFEC5C();
                  nullsub_16(v88);
                  v89 = sub_1B1FFEC5C();
                  nullsub_16(v89);
                  v90 = sub_1B1FFEC5C();
                  nullsub_16(v90);
                  v91 = -v86;
                  v92 = 8;
                  do
                  {
                    v93 = *(float *)(*v87 + 4 * v92) + *(float *)(*v87 + 4 * v92);
                    v94 = sub_1B1FFEC5C();
                    *(float *)(*v87 + 4 * v92) = v93;
                    nullsub_16(v94);
                    ++v92;
                  }
                  while (v91 + v92 != 8);
                }
                v95 = sub_1B1C7A1C4(v75[11]);
                if (v95)
                {
                  v96 = v95;
                  v97 = v75 + 10;
                  v98 = sub_1B1FFEC5C();
                  nullsub_16(v98);
                  v99 = sub_1B1FFEC5C();
                  nullsub_16(v99);
                  v100 = sub_1B1FFEC5C();
                  nullsub_16(v100);
                  v101 = -v96;
                  v102 = 8;
                  do
                  {
                    v103 = *(float *)(*v97 + 4 * v102) + *(float *)(*v97 + 4 * v102);
                    v104 = sub_1B1FFEC5C();
                    *(float *)(*v97 + 4 * v102) = v103;
                    nullsub_16(v104);
                    ++v102;
                  }
                  while (v101 + v102 != 8);
                }
              }
              ++v35;
            }
            while (v35 != v36);
          }
          sub_1B1F05D48(v284, (unsigned __int16 **)v397, (uint64_t)v538);
          sub_1B1F03804((char *)v290);
          ecs_stack_allocator_pop_snapshot(v278);
          v32 = v258;
          if ((v258 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v290 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v290 + 376));
          }
          swift_release();
          ++v33;
        }
        while (v33 != v264);
        sub_1B1A086DC(v301, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        v31 = v271;
      }
    }
    sub_1B1A086DC(v301, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v532[5] = qword_1ED4D09F8;
  v533 = v270;
  v534 = v269;
  v536 = 2;
  v535 = 1;
  v537 = 0;
  swift_retain();
  sub_1B1E434A0(2, (uint64_t)v302);
  swift_release();
  v435[0] = v302[0];
  v435[1] = v302[1];
  v436 = v303;
  sub_1B1E8FCE4(v31, (uint64_t)v435, 0x200000000, v304);
  sub_1B1A18378((uint64_t)v304, (uint64_t)v374, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v374[0])
  {
    v121 = v271;
    goto LABEL_110;
  }
  if (v380 < 1 || (v279 = v377) == 0)
  {
    v121 = v271;
    goto LABEL_109;
  }
  v105 = v379;
  v106 = v379[4];
  v107 = *(unsigned __int8 *)(v378 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v399[0] = v374[0];
  v399[1] = v374[1];
  v273 = v376;
  v400 = v375;
  v259 = v379 + 8;
  v265 = (uint64_t)(v379 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v108 = 0;
  v247 = v107;
  v253 = v106;
  while (2)
  {
    v109 = (unsigned int *)(v273 + 48 * v108);
    v291 = *v109;
    v285 = v109[1];
    v111 = (uint64_t *)*((_QWORD *)v109 + 2);
    v110 = *((_QWORD *)v109 + 3);
    v112 = *((_QWORD *)v109 + 4);
    v113 = *((_QWORD *)v109 + 5);
    if (v107)
    {
      v114 = *(os_unfair_lock_s **)(v113 + 376);
      swift_retain();
      os_unfair_lock_lock(v114);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v113 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v106);
    sub_1B1A18378(v265, (uint64_t)v532, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v115 = v105[4];
    v116 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v113 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v105[6] = ecs_stack_allocator_allocate(v115, 48 * v116, 8);
    v105[7] = v116;
    v259[1] = 0;
    v259[2] = 0;
    *v259 = 0;
    swift_release();
    v117 = sub_1B1A12038((uint64_t)&type metadata for ParticleSizeOverVelocity, (uint64_t)&off_1E63AED48, v111, v110, v112, (uint64_t)v105);
    if (v111)
    {
      v107 = v247;
      if (v112)
      {
        v118 = (float32x2_t *)(v117 + 36);
        v106 = v253;
        do
        {
          if (v118[-5].u8[4] <= 1u)
          {
            *(float32x4_t *)v118[-2].f32 = vaddq_f32(*(float32x4_t *)v118[-2].f32, *(float32x4_t *)v118[-2].f32);
            *v118 = vadd_f32(*v118, *v118);
          }
          v118 = (float32x2_t *)((char *)v118 + 44);
          --v112;
        }
        while (v112);
        goto LABEL_100;
      }
LABEL_99:
      v106 = v253;
      goto LABEL_100;
    }
    v107 = v247;
    if ((_DWORD)v291 == (_DWORD)v285)
      goto LABEL_99;
    v119 = (float32x2_t *)(v117 + 44 * v291 + 36);
    v120 = v285 - v291;
    v106 = v253;
    do
    {
      if (v119[-5].u8[4] <= 1u)
      {
        *(float32x4_t *)v119[-2].f32 = vaddq_f32(*(float32x4_t *)v119[-2].f32, *(float32x4_t *)v119[-2].f32);
        *v119 = vadd_f32(*v119, *v119);
      }
      v119 = (float32x2_t *)((char *)v119 + 44);
      --v120;
    }
    while (v120);
LABEL_100:
    sub_1B1F05D48(v105, (unsigned __int16 **)v399, (uint64_t)v532);
    sub_1B1F03804((char *)v113);
    ecs_stack_allocator_pop_snapshot(v106);
    if ((v107 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v113 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v113 + 376));
    }
    swift_release();
    if (++v108 != v279)
      continue;
    break;
  }
  sub_1B1A086DC(v304, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v121 = v271;
LABEL_109:
  sub_1B1A086DC(v304, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_110:
  v526[5] = qword_1ED4D09F8;
  v527 = v270;
  v528 = v269;
  v530 = 2;
  v529 = 1;
  v531 = 0;
  swift_retain();
  sub_1B1E43698(2, (uint64_t)v305);
  swift_release();
  v433[0] = v305[0];
  v433[1] = v305[1];
  v434 = v306;
  sub_1B1E8FCE4(v121, (uint64_t)v433, 0x200000000, v307);
  sub_1B1A18378((uint64_t)v307, (uint64_t)v367, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v367[0])
  {
    if (v373 >= 1)
    {
      v280 = v370;
      if (v370)
      {
        v122 = v372;
        v123 = v372[4];
        v124 = *(unsigned __int8 *)(v371 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v401[0] = v367[0];
        v401[1] = v367[1];
        v274 = v369;
        v402 = v368;
        v260 = v372 + 8;
        v266 = (uint64_t)(v372 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v125 = 0;
        v248 = v124;
        v254 = v123;
        while (1)
        {
          v126 = (unsigned int *)(v274 + 48 * v125);
          v292 = *v126;
          v286 = v126[1];
          v128 = (uint64_t *)*((_QWORD *)v126 + 2);
          v127 = *((_QWORD *)v126 + 3);
          v129 = *((_QWORD *)v126 + 4);
          v130 = *((_QWORD *)v126 + 5);
          if (v124)
          {
            v131 = *(os_unfair_lock_s **)(v130 + 376);
            swift_retain();
            os_unfair_lock_lock(v131);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v130 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v123);
          sub_1B1A18378(v266, (uint64_t)v526, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v132 = v122[4];
          v133 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v130 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v122[6] = ecs_stack_allocator_allocate(v132, 48 * v133, 8);
          v122[7] = v133;
          v260[1] = 0;
          v260[2] = 0;
          *v260 = 0;
          swift_release();
          v134 = sub_1B1A12038((uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, v128, v127, v129, (uint64_t)v122);
          if (v128)
          {
            v124 = v248;
            if (v129)
            {
              v135 = (float32x2_t *)(v134 + 40);
              v123 = v254;
              do
              {
                if (v135[-4].u8[4] <= 1u)
                {
                  *(float32x4_t *)v135[-2].f32 = vaddq_f32(*(float32x4_t *)v135[-2].f32, *(float32x4_t *)v135[-2].f32);
                  *v135 = vadd_f32(*v135, *v135);
                }
                v135 += 9;
                --v129;
              }
              while (v129);
              goto LABEL_126;
            }
          }
          else
          {
            v124 = v248;
            if ((_DWORD)v292 != (_DWORD)v286)
            {
              v136 = v286 - v292;
              v137 = (float32x2_t *)(v134 + 72 * v292 + 40);
              v123 = v254;
              do
              {
                if (v137[-4].u8[4] <= 1u)
                {
                  *(float32x4_t *)v137[-2].f32 = vaddq_f32(*(float32x4_t *)v137[-2].f32, *(float32x4_t *)v137[-2].f32);
                  *v137 = vadd_f32(*v137, *v137);
                }
                v137 += 9;
                --v136;
              }
              while (v136);
              goto LABEL_126;
            }
          }
          v123 = v254;
LABEL_126:
          sub_1B1F05D48(v122, (unsigned __int16 **)v401, (uint64_t)v526);
          sub_1B1F03804((char *)v130);
          ecs_stack_allocator_pop_snapshot(v123);
          if ((v124 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v130 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v130 + 376));
          }
          swift_release();
          if (++v125 == v280)
          {
            sub_1B1A086DC(v307, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            break;
          }
        }
      }
    }
    v138 = v271;
    sub_1B1A086DC(v307, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    v138 = v271;
  }
  v520[5] = qword_1ED4D09F8;
  v521 = v270;
  v522 = v269;
  v524 = 2;
  v523 = 1;
  v525 = 0;
  swift_retain();
  sub_1B1B18480(1, 2, (uint64_t)v308);
  swift_release();
  v431[0] = v308[0];
  v431[1] = v308[1];
  v432 = v309;
  sub_1B1E8FCE4(v138, (uint64_t)v431, 0x200000000, v310);
  sub_1B1A18378((uint64_t)v310, (uint64_t)v357, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v357[0])
  {
    v364 = v357[0];
    v365 = v357[1];
    v366 = v358;
    if (v363 >= 1)
    {
      v261 = v360;
      if (v360)
      {
        v249 = v359;
        v139 = v362;
        v140 = v362[4];
        v293 = v361;
        v287 = *(unsigned __int8 *)(v361 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v241 = v362 + 8;
        v244 = (uint64_t)(v362 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v141 = 0;
        v255 = v140;
        do
        {
          v281 = v141;
          v142 = (unsigned int *)(v249 + 48 * v141);
          v143 = *v142;
          v267 = v142[1];
          v144 = v142[2];
          v145 = (uint64_t *)*((_QWORD *)v142 + 2);
          v275 = *((_QWORD *)v142 + 3);
          v147 = *((_QWORD *)v142 + 4);
          v146 = *((_QWORD *)v142 + 5);
          if (v287)
          {
            v148 = *(os_unfair_lock_s **)(v146 + 376);
            swift_retain();
            os_unfair_lock_lock(v148);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v146 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v140);
          sub_1B1A18378(v244, (uint64_t)v518, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v149 = v139[4];
          v150 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v146 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v139[6] = ecs_stack_allocator_allocate(v149, 48 * v150, 8);
          v139[7] = v150;
          v241[1] = 0;
          v241[2] = 0;
          *v241 = 0;
          swift_release();
          v151 = sub_1B1A12038((uint64_t)&type metadata for EmitterShape, (uint64_t)&off_1E63752C8, v145, v275, v147, (uint64_t)v139);
          v152 = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v145, v275, v147, (uint64_t)v139);
          v153 = (float32x2_t *)v152;
          if (v145)
          {
            for (; v147; --v147)
            {
              v154 = *v145++;
              v519[0] = v293;
              v519[1] = v146;
              v519[2] = v139;
              v519[3] = v144;
              v519[4] = v154;
              sub_1B20BC7D4((uint64_t)v519, v151, v153);
              ++v144;
              v153 += 2;
              v151 += 224;
            }
          }
          else if ((_DWORD)v143 != (_DWORD)v267)
          {
            v155 = (float32x2_t *)(v152 + 16 * v143);
            v156 = v151 + 224 * v143;
            do
            {
              v520[0] = v293;
              v520[1] = v146;
              v520[2] = v139;
              v520[3] = v144;
              v520[4] = v143;
              sub_1B20BC7D4((uint64_t)v520, v156, v155);
              ++v143;
              ++v144;
              v155 += 2;
              v156 += 224;
            }
            while (v267 != v143);
          }
          v403[0] = v364;
          v403[1] = v365;
          v404 = v366;
          sub_1B1F05D48(v139, (unsigned __int16 **)v403, (uint64_t)v518);
          sub_1B1F03804((char *)v146);
          v140 = v255;
          ecs_stack_allocator_pop_snapshot(v255);
          if (v287)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v146 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v146 + 376));
          }
          swift_release();
          v141 = v281 + 1;
        }
        while (v281 + 1 != v261);
        sub_1B1A086DC(v310, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    sub_1B1A086DC(v310, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v512[5] = qword_1ED4D09F8;
  v513 = v270;
  v514 = v269;
  v516 = 2;
  v515 = 1;
  v517 = 0;
  swift_retain();
  sub_1B1B186AC(1, 2, (uint64_t)v311);
  swift_release();
  v429[0] = v311[0];
  v429[1] = v311[1];
  v430 = v312;
  sub_1B1E8FCE4(v271, (uint64_t)v429, 0x200000000, v313);
  sub_1B1A18378((uint64_t)v313, (uint64_t)v350, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v350[0])
  {
    v169 = v271;
    goto LABEL_177;
  }
  if (v356 < 1 || (v276 = v353) == 0)
  {
    v169 = v271;
    goto LABEL_176;
  }
  v157 = v355;
  v158 = v355[4];
  v294 = *(unsigned __int8 *)(v354 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v405[0] = v350[0];
  v405[1] = v350[1];
  v256 = v352;
  v262 = (uint64_t)(v355 + 6);
  v406 = v351;
  v250 = v355 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v159 = 0;
  v268 = v158;
  while (2)
  {
    v160 = (unsigned int *)(v256 + 48 * v159);
    v161 = (uint64_t *)*((_QWORD *)v160 + 2);
    v162 = *((_QWORD *)v160 + 3);
    v164 = *((_QWORD *)v160 + 4);
    v163 = *((_QWORD *)v160 + 5);
    v282 = v160[1];
    v288 = *v160;
    if (v294)
    {
      v165 = *(os_unfair_lock_s **)(v163 + 376);
      swift_retain();
      os_unfair_lock_lock(v165);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v163 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v158);
    sub_1B1A18378(v262, (uint64_t)v512, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v166 = v157[4];
    v167 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v163 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v157[6] = ecs_stack_allocator_allocate(v166, 48 * v167, 8);
    v157[7] = v167;
    v250[1] = 0;
    v250[2] = 0;
    *v250 = 0;
    swift_release();
    sub_1B1A12038((uint64_t)&type metadata for ParticlePlaneCollider, (uint64_t)&off_1E63A4A68, v161, v162, v164, (uint64_t)v157);
    v168 = (float32x2_t *)sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v161, v162, v164, (uint64_t)v157);
    if (v161)
    {
      if (v164)
      {
        v169 = v271;
        v158 = v268;
        do
        {
          *(float32x2_t *)&v170 = vadd_f32(*v168, *v168);
          *((float *)&v170 + 2) = v168[1].f32[0] + v168[1].f32[0];
          HIDWORD(v170) = 0;
          *(_OWORD *)v168->f32 = v170;
          v168 += 2;
          --v164;
        }
        while (v164);
        goto LABEL_171;
      }
LABEL_168:
      v169 = v271;
      v158 = v268;
      goto LABEL_171;
    }
    if ((_DWORD)v288 == (_DWORD)v282)
      goto LABEL_168;
    v171 = v282 - v288;
    v172 = &v168[2 * v288];
    v169 = v271;
    v158 = v268;
    do
    {
      *(float32x2_t *)&v173 = vadd_f32(*v172, *v172);
      *((float *)&v173 + 2) = v172[1].f32[0] + v172[1].f32[0];
      HIDWORD(v173) = 0;
      *(_OWORD *)v172->f32 = v173;
      v172 += 2;
      --v171;
    }
    while (v171);
LABEL_171:
    sub_1B1F05D48(v157, (unsigned __int16 **)v405, (uint64_t)v512);
    sub_1B1F03804((char *)v163);
    ecs_stack_allocator_pop_snapshot(v158);
    if (v294)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v163 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v163 + 376));
    }
    swift_release();
    if (++v159 != v276)
      continue;
    break;
  }
  sub_1B1A086DC(v313, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_176:
  sub_1B1A086DC(v313, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_177:
  v506 = qword_1ED4D09F8;
  v507 = v270;
  v508 = v269;
  v510 = 2;
  v509 = 1;
  v511 = 0;
  swift_retain();
  sub_1B1B188D8(1, 2, (uint64_t)v314);
  swift_release();
  v427[0] = v314[0];
  v427[1] = v314[1];
  v428 = v315;
  sub_1B1E8FCE4(v169, (uint64_t)v427, 0x200000000, v316);
  sub_1B1A18378((uint64_t)v316, (uint64_t)v343, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v343[0])
  {
    v349 = v344;
    v346 = v343[2];
    v347 = v343[3];
    v348 = v343[4];
    v345[0] = v343[0];
    v345[1] = v343[1];
    v174 = v344;
    if ((uint64_t)v344 <= 0)
    {
      sub_1B1A086DC(v316, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      v175 = *((_QWORD *)&v347 + 1);
      if (*((_QWORD *)&v347 + 1))
      {
        v176 = *((_QWORD *)&v348 + 1);
        v177 = *(_QWORD *)(*((_QWORD *)&v348 + 1) + 32);
        v178 = v348;
        v179 = (__int128 *)*((_QWORD *)&v346 + 1);
        v180 = *(_BYTE *)(v348 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        swift_retain();
        swift_retain();
        swift_retain();
        do
        {
          v181 = *v179;
          v182 = v179[1];
          v501 = v179[2];
          v500 = v182;
          v499 = v181;
          sub_1B20BEAA4((uint64_t)&v499);
          if ((v180 & 1) != 0)
            sub_1B1A10A88();
          j__ecs_stack_allocator_push_snapshot(v177);
          v183 = *((_QWORD *)&v501 + 1);
          sub_1B20BEAA4((uint64_t)&v499);
          sub_1B1F02DC8(v183, v176, (uint64_t)v317);
          sub_1B1C798FC((uint64_t)&v499);
          v502[0] = v178;
          v502[1] = v183;
          v502[2] = v176;
          v502[3] = DWORD2(v499);
          v502[4] = (DWORD1(v499) - v499 + DWORD2(v499));
          v502[5] = v174;
          v502[6] = v499;
          v502[7] = DWORD1(v499);
          v502[8] = 0;
          v502[9] = 0;
          v503 = 1;
          v504 = v500;
          v505 = v501;
          sub_1B2190790(v502);
          nullsub_16(v184);
          sub_1B1BEB470((uint64_t)v345, (uint64_t)v317, (uint64_t)&v499);
          j__ecs_stack_allocator_pop_snapshot(v177);
          sub_1B1BEB43C(v180, (uint64_t)&v499);
          sub_1B1C798FC((uint64_t)&v499);
          v179 += 3;
          --v175;
        }
        while (v175);
        sub_1B1A086DC(v316, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
      v185 = sub_1B1A086DC(v316, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      nullsub_16(v185);
    }
  }
  v493 = qword_1ED4D09F8;
  v494 = v270;
  v495 = v269;
  v497 = 2;
  v496 = 1;
  v498 = 0;
  swift_retain();
  sub_1B1B18B04(1, 2, (uint64_t)v318);
  swift_release();
  sub_1B20F02F0(v319, v318, 0x200000000);
  sub_1B20BE790((uint64_t)v319, (uint64_t)v341);
  if (*(_QWORD *)&v341[0])
  {
    v411 = v342;
    v408 = v341[2];
    v409 = v341[3];
    v410 = v341[4];
    v407[0] = v341[0];
    v407[1] = v341[1];
    v186 = v342;
    if ((uint64_t)v342 <= 0)
    {
      sub_1B1A086DC(v319, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      v187 = *((_QWORD *)&v409 + 1);
      if (*((_QWORD *)&v409 + 1))
      {
        v188 = *((_QWORD *)&v410 + 1);
        v189 = *(_QWORD *)(*((_QWORD *)&v410 + 1) + 32);
        v190 = v410;
        v191 = (__int128 *)*((_QWORD *)&v408 + 1);
        v192 = *(_BYTE *)(v410 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        swift_retain();
        swift_retain();
        swift_retain();
        do
        {
          v193 = *v191;
          v194 = v191[1];
          v488 = v191[2];
          v487 = v194;
          v486 = v193;
          sub_1B20BEAA4((uint64_t)&v486);
          if ((v192 & 1) != 0)
            sub_1B1A10A88();
          j__ecs_stack_allocator_push_snapshot(v189);
          v195 = *((_QWORD *)&v488 + 1);
          sub_1B20BEAA4((uint64_t)&v486);
          sub_1B1F02DC8(v195, v188, (uint64_t)v320);
          sub_1B1C798FC((uint64_t)&v486);
          v489[0] = v190;
          v489[1] = v195;
          v489[2] = v188;
          v489[3] = DWORD2(v486);
          v489[4] = (DWORD1(v486) - v486 + DWORD2(v486));
          v489[5] = v186;
          v489[6] = v486;
          v489[7] = DWORD1(v486);
          v489[8] = 0;
          v489[9] = 0;
          v490 = 1;
          v491 = v487;
          v492 = v488;
          sub_1B2190884(v489);
          nullsub_16(v196);
          sub_1B1BEB470((uint64_t)v407, (uint64_t)v320, (uint64_t)&v486);
          j__ecs_stack_allocator_pop_snapshot(v189);
          sub_1B1BEB43C(v192, (uint64_t)&v486);
          sub_1B1C798FC((uint64_t)&v486);
          v191 += 3;
          --v187;
        }
        while (v187);
        sub_1B1A086DC(v319, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
      v197 = sub_1B1A086DC(v319, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      nullsub_16(v197);
    }
  }
  v480 = qword_1ED4D09F8;
  v481 = v270;
  v482 = v269;
  v484 = 2;
  v483 = 1;
  v485 = 0;
  swift_retain();
  sub_1B1B18D30(1, 2, (uint64_t)v321);
  swift_release();
  sub_1B20F02F0(v322, v321, 0x200000000);
  sub_1B20BE7F4((uint64_t)v322, (uint64_t)v339);
  if (*(_QWORD *)&v339[0])
  {
    v416 = v340;
    v413 = v339[2];
    v414 = v339[3];
    v415 = v339[4];
    v412[0] = v339[0];
    v412[1] = v339[1];
    if ((uint64_t)v340 <= 0)
    {
      sub_1B1A086DC(v322, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      v198 = v416;
      v199 = *((_QWORD *)&v415 + 1);
      v200 = sub_1B18F39CC(*((uint64_t *)&v415 + 1));
      v201 = *((_QWORD *)&v414 + 1);
      if (*((_QWORD *)&v414 + 1))
      {
        v202 = v200;
        v203 = v415;
        v204 = (__int128 *)*((_QWORD *)&v413 + 1);
        v205 = *(_BYTE *)(v415 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        swift_retain();
        swift_retain();
        swift_retain();
        do
        {
          v206 = *v204;
          v207 = v204[1];
          v475 = v204[2];
          v474 = v207;
          v473 = v206;
          sub_1B20BEAA4((uint64_t)&v473);
          if ((v205 & 1) != 0)
            sub_1B1A10A88();
          j__ecs_stack_allocator_push_snapshot(v202);
          v208 = *((_QWORD *)&v475 + 1);
          sub_1B20BEAA4((uint64_t)&v473);
          sub_1B1F02DC8(v208, v199, (uint64_t)v323);
          sub_1B1C798FC((uint64_t)&v473);
          v476[0] = v203;
          v476[1] = v208;
          v476[2] = v199;
          v476[3] = DWORD2(v473);
          v476[4] = (DWORD1(v473) - v473 + DWORD2(v473));
          v476[5] = v198;
          v476[6] = v473;
          v476[7] = DWORD1(v473);
          v476[8] = 0;
          v476[9] = 0;
          v477 = 1;
          v478 = v474;
          v479 = v475;
          sub_1B2190978(v476);
          nullsub_16(v209);
          sub_1B1BEB470((uint64_t)v412, (uint64_t)v323, (uint64_t)&v473);
          j__ecs_stack_allocator_pop_snapshot(v202);
          sub_1B1BEB43C(v205, (uint64_t)&v473);
          sub_1B1C798FC((uint64_t)&v473);
          v204 += 3;
          --v201;
        }
        while (v201);
        sub_1B1A086DC(v322, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
      v210 = sub_1B1A086DC(v322, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      nullsub_16(v210);
    }
  }
  v467 = qword_1ED4D09F8;
  v468 = v270;
  v469 = v269;
  v471 = 2;
  v470 = 1;
  v472 = 0;
  swift_retain();
  sub_1B1B18F5C(1, 2, (uint64_t)v324);
  swift_release();
  sub_1B20F02F0(v325, v324, 0x200000000);
  sub_1B20BE8B0((uint64_t)v325, (uint64_t)v337);
  if (*(_QWORD *)&v337[0])
  {
    v421 = v338;
    v418 = v337[2];
    v419 = v337[3];
    v420 = v337[4];
    v417[0] = v337[0];
    v417[1] = v337[1];
    v211 = v338;
    if ((uint64_t)v338 <= 0)
    {
      sub_1B1A086DC(v325, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      v212 = *((_QWORD *)&v420 + 1);
      v213 = sub_1B18F39CC(*((uint64_t *)&v420 + 1));
      v214 = *((_QWORD *)&v419 + 1);
      if (*((_QWORD *)&v419 + 1))
      {
        v215 = v213;
        v216 = v420;
        v217 = (__int128 *)*((_QWORD *)&v418 + 1);
        v218 = *(_BYTE *)(v420 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        sub_1B1A086DC(v325, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
        do
        {
          v219 = *v217;
          v220 = v217[2];
          v461 = v217[1];
          v462 = v220;
          v460 = v219;
          sub_1B20BEAA4((uint64_t)&v460);
          if ((v218 & 1) != 0)
            sub_1B1A10A88();
          j__ecs_stack_allocator_push_snapshot(v215);
          v221 = *((_QWORD *)&v462 + 1);
          sub_1B20BEAA4((uint64_t)&v460);
          sub_1B1F02DC8(v221, v212, (uint64_t)v326);
          sub_1B1C798FC((uint64_t)&v460);
          v463[0] = v216;
          v463[1] = v221;
          v463[2] = v212;
          v463[3] = DWORD2(v460);
          v463[4] = (DWORD1(v460) - v460 + DWORD2(v460));
          v463[5] = v211;
          v463[6] = v460;
          v463[7] = DWORD1(v460);
          v463[8] = 0;
          v463[9] = 0;
          v464 = 1;
          v465 = v461;
          v466 = v462;
          v222 = sub_1B2190A6C(v463);
          nullsub_16(v222);
          sub_1B1BEB470((uint64_t)v417, (uint64_t)v326, (uint64_t)&v460);
          j__ecs_stack_allocator_pop_snapshot(v215);
          sub_1B1BEB43C(v218, (uint64_t)&v460);
          sub_1B1C798FC((uint64_t)&v460);
          v217 += 3;
          --v214;
        }
        while (v214);
        sub_1B1A086DC(v325, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
      v223 = sub_1B1A086DC(v325, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      nullsub_16(v223);
    }
  }
  v454 = qword_1ED4D09F8;
  v455 = v270;
  v456 = v269;
  v458 = 2;
  v457 = 1;
  v459 = 0;
  swift_retain();
  sub_1B1E3A830(1, (uint64_t)v327);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  v224 = swift_allocObject();
  v225 = sub_1B19F909C(v224, 1);
  *v226 = &type metadata for Scale;
  v226[1] = &off_1E63BAA30;
  nullsub_16(v225);
  sub_1B1B44110(v328, v227);
  swift_bridgeObjectRelease();
  sub_1B19ED720((uint64_t)v327);
  v228 = sub_1B1B72A40();
  sub_1B1B72A48(v329, v328, v228 & 0xFFFFFFFFFFLL);
  sub_1B20BE978((uint64_t)v329, (uint64_t)v335);
  if (*(_QWORD *)&v335[0])
  {
    v336[2] = v335[2];
    v336[3] = v335[3];
    v336[4] = v335[4];
    v336[5] = v335[5];
    v336[0] = v335[0];
    v336[1] = v335[1];
    sub_1B2187A64((uint64_t)v336);
    sub_1B1A086DC(v329, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v448 = qword_1ED4D09F8;
  v449 = v270;
  v450 = v269;
  v452 = 2;
  v451 = 1;
  v453 = 0;
  swift_retain();
  sub_1B1E43890(2, (uint64_t)v330);
  swift_release();
  v229 = sub_1B1B72A40();
  sub_1B1B72A48(v331, v330, v229 & 0xFFFFFFFFFFLL);
  sub_1B20BEA40((uint64_t)v331, (uint64_t)v333);
  if (*(_QWORD *)&v333[0])
  {
    v426 = v334;
    v423 = v333[2];
    v424 = v333[3];
    v425 = v333[4];
    v422[0] = v333[0];
    v422[1] = v333[1];
    v295 = v334;
    if ((uint64_t)v334 <= 0)
    {
      sub_1B1A086DC(v331, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      sub_1B19ED720((uint64_t)v330);
      sub_1B19ED720((uint64_t)v328);
      sub_1B19ED720((uint64_t)v324);
      sub_1B19ED720((uint64_t)v321);
      sub_1B19ED720((uint64_t)v318);
      sub_1B19ED720((uint64_t)v314);
      sub_1B19ED720((uint64_t)v311);
      sub_1B19ED720((uint64_t)v308);
      sub_1B19ED720((uint64_t)v305);
      sub_1B19ED720((uint64_t)v302);
      sub_1B19ED720((uint64_t)v299);
      sub_1B19ED720((uint64_t)v296);
      sub_1B1A086DC(v331, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v331, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      v230 = *((_QWORD *)&v425 + 1);
      v231 = sub_1B18F39CC(*((uint64_t *)&v425 + 1));
      v232 = v425;
      v233 = *(_BYTE *)(v425 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v234 = (__int128 *)*((_QWORD *)&v423 + 1);
      v235 = *((_QWORD *)&v424 + 1);
      sub_1B1A086DC(v331, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      for (; v235; --v235)
      {
        v236 = *v234;
        v237 = v234[1];
        v443 = v234[2];
        v442 = v237;
        v441 = v236;
        sub_1B20BEAA4((uint64_t)&v441);
        if ((v233 & 1) != 0)
          sub_1B1A10A88();
        j__ecs_stack_allocator_push_snapshot(v231);
        v238 = *((_QWORD *)&v443 + 1);
        sub_1B20BEAA4((uint64_t)&v441);
        sub_1B1F02DC8(v238, v230, (uint64_t)v332);
        sub_1B1C798FC((uint64_t)&v441);
        v444[0] = v232;
        v444[1] = v238;
        v444[2] = v230;
        v444[3] = DWORD2(v441);
        v444[4] = (DWORD1(v441) - v441 + DWORD2(v441));
        v444[5] = v295;
        v444[6] = v441;
        v444[7] = DWORD1(v441);
        v444[8] = 0;
        v444[9] = 0;
        v445 = 1;
        v446 = v442;
        v447 = v443;
        v239 = sub_1B21886EC(v444);
        nullsub_16(v239);
        sub_1B1BEB470((uint64_t)v422, (uint64_t)v332, (uint64_t)&v441);
        j__ecs_stack_allocator_pop_snapshot(v231);
        sub_1B1BEB43C(v233, (uint64_t)&v441);
        sub_1B1C798FC((uint64_t)&v441);
        v234 += 3;
      }
      sub_1B19ED720((uint64_t)v330);
      sub_1B19ED720((uint64_t)v328);
      sub_1B19ED720((uint64_t)v324);
      sub_1B19ED720((uint64_t)v321);
      sub_1B19ED720((uint64_t)v318);
      sub_1B19ED720((uint64_t)v314);
      sub_1B19ED720((uint64_t)v311);
      sub_1B19ED720((uint64_t)v308);
      sub_1B19ED720((uint64_t)v305);
      sub_1B19ED720((uint64_t)v302);
      sub_1B19ED720((uint64_t)v299);
      sub_1B19ED720((uint64_t)v296);
      sub_1B1A086DC(v331, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      v240 = sub_1B1A086DC(v331, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      nullsub_16(v240);
    }
  }
  else
  {
    sub_1B19ED720((uint64_t)v330);
    sub_1B19ED720((uint64_t)v328);
    sub_1B19ED720((uint64_t)v324);
    sub_1B19ED720((uint64_t)v321);
    sub_1B19ED720((uint64_t)v318);
    sub_1B19ED720((uint64_t)v314);
    sub_1B19ED720((uint64_t)v311);
    sub_1B19ED720((uint64_t)v308);
    sub_1B19ED720((uint64_t)v305);
    sub_1B19ED720((uint64_t)v302);
    sub_1B19ED720((uint64_t)v299);
    sub_1B19ED720((uint64_t)v296);
  }
}

_QWORD *sub_1B20B7BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float32x2_t *v21;
  unint64_t v22;
  int32x2_t v23;
  int32x2_t v24;
  unint64_t v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  float32x2_t *v29;
  unint64_t v30;
  int32x2_t v31;
  int32x2_t v32;
  uint64_t v33;
  float *v34;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _OWORD v46[2];
  uint64_t v47;
  _QWORD v48[8];
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  _BYTE v60[40];
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v61 = qword_1ED4D09F8;
  v62 = v7;
  v63 = v6 >> 31;
  v64 = 1;
  v65 = 2;
  v66 = 0;
  swift_retain();
  sub_1B1E43A88(2, (uint64_t)v46);
  swift_release();
  v58[0] = v46[0];
  v58[1] = v46[1];
  v59 = v47;
  sub_1B1E8FCE4(a1, (uint64_t)v58, 0x200000000, v48);
  sub_1B1A18378((uint64_t)v48, (uint64_t)v49, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v49[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v46);
  if (v55 <= 0 || (v40 = v52) == 0)
  {
    sub_1B19ED720((uint64_t)v46);
    return sub_1B1A086DC(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v8 = v54[4];
  v9 = *(unsigned __int8 *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v56[0] = v49[0];
  v56[1] = v49[1];
  v57 = v50;
  v38 = (uint64_t)(v54 + 6);
  v39 = v51;
  v45 = v54;
  v37 = v54 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v10 = 0;
  v11 = 0;
  v36 = v9;
  do
  {
    v12 = (unsigned int *)(v39 + 48 * v10);
    v41 = *v12;
    v42 = v12[1];
    v43 = v11;
    v13 = (uint64_t *)*((_QWORD *)v12 + 2);
    v44 = *((_QWORD *)v12 + 3);
    v14 = *((_QWORD *)v12 + 4);
    v15 = *((_QWORD *)v12 + 5);
    if (v9)
    {
      v16 = *(os_unfair_lock_s **)(v15 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v16);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v8);
    sub_1B1A18378(v38, (uint64_t)v60, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v17 = v45[4];
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v45[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
    v45[7] = v18;
    v37[1] = 0;
    v37[2] = 0;
    *v37 = 0;
    swift_release();
    v19 = sub_1B1A12038((uint64_t)&type metadata for ParticleSpawnDuration, (uint64_t)&off_1E63A51D8, v13, v44, v14, (uint64_t)v45);
    if (v13)
    {
      if (!v14)
        goto LABEL_19;
      v11 = v43;
      if (v14 < 4)
      {
        v20 = 0;
        v9 = v36;
LABEL_33:
        v25 = v14 - v20;
        v26 = (float *)(v19 + 4 * v20);
        do
        {
          if (*v26 == 0.0)
            *v26 = INFINITY;
          ++v26;
          --v25;
        }
        while (v25);
        goto LABEL_20;
      }
      v20 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      v21 = (float32x2_t *)(v19 + 8);
      v22 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      v9 = v36;
      do
      {
        v23 = vceqz_f32(v21[-1]);
        if ((v23.i8[0] & 1) != 0)
          v21[-1].i32[0] = 2139095040;
        if ((v23.i8[4] & 1) != 0)
          v21[-1].i32[1] = 2139095040;
        v24 = vceqz_f32(*v21);
        if ((v24.i8[0] & 1) != 0)
          v21->i32[0] = 2139095040;
        if ((v24.i8[4] & 1) != 0)
          v21->i32[1] = 2139095040;
        v21 += 2;
        v22 -= 4;
      }
      while (v22);
      if (v14 != v20)
        goto LABEL_33;
    }
    else
    {
      if ((_DWORD)v41 == (_DWORD)v42)
      {
LABEL_19:
        v9 = v36;
        v11 = v43;
        goto LABEL_20;
      }
      v27 = v42 - v41;
      v11 = v43;
      if ((unint64_t)(v42 - v41) < 4)
      {
        v28 = v41;
        v9 = v36;
LABEL_50:
        v33 = v42 - v28;
        v34 = (float *)(v19 + 4 * v28);
        do
        {
          if (*v34 == 0.0)
            *v34 = INFINITY;
          ++v34;
          --v33;
        }
        while (v33);
        goto LABEL_20;
      }
      v28 = (v27 & 0xFFFFFFFFFFFFFFFCLL) + v41;
      v29 = (float32x2_t *)(v19 + 4 * v41 + 8);
      v30 = v27 & 0xFFFFFFFFFFFFFFFCLL;
      v9 = v36;
      do
      {
        v31 = vceqz_f32(v29[-1]);
        if ((v31.i8[0] & 1) != 0)
          v29[-1].i32[0] = 2139095040;
        if ((v31.i8[4] & 1) != 0)
          v29[-1].i32[1] = 2139095040;
        v32 = vceqz_f32(*v29);
        if ((v32.i8[0] & 1) != 0)
          v29->i32[0] = 2139095040;
        if ((v32.i8[4] & 1) != 0)
          v29->i32[1] = 2139095040;
        v29 += 2;
        v30 -= 4;
      }
      while (v30);
      if (v27 != (v27 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_50;
    }
LABEL_20:
    sub_1B1F05D48(v45, (unsigned __int16 **)v56, (uint64_t)v60);
    sub_1B1F03804((char *)v15);
    ecs_stack_allocator_pop_snapshot(v8);
    if ((v9 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
    }
    swift_release();
    ++v10;
  }
  while (v10 != v40);
  sub_1B19ED720((uint64_t)v46);
  sub_1B1A086DC(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(v48, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20B8094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  uint64_t v46;
  _QWORD v47[8];
  _OWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;
  _BYTE v59[40];
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v4 = a4;
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  if (v6)
    v7 = 0;
  else
    v7 = v4;
  v60 = qword_1ED4D09F8;
  v61 = v7;
  v62 = v6 >> 31;
  v63 = 1;
  v64 = 2;
  v65 = 0;
  swift_retain();
  sub_1B1E43C80(2, (uint64_t)v45);
  swift_release();
  v57[0] = v45[0];
  v57[1] = v45[1];
  v58 = v46;
  sub_1B1E8FCE4(a1, (uint64_t)v57, 0x200000000, v47);
  sub_1B1A18378((uint64_t)v47, (uint64_t)v48, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v48[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v45);
  if (v54 > 0 && (v41 = v51) != 0)
  {
    v8 = v53;
    v9 = v53[4];
    v10 = *(unsigned __int8 *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v55[0] = v48[0];
    v55[1] = v48[1];
    v56 = v49;
    v37 = (uint64_t)(v53 + 6);
    v38 = v50;
    v36 = v53 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    v11 = 0;
    v12 = 0;
    v39 = v10;
    v40 = v9;
    do
    {
      v13 = (unsigned int *)(v38 + 48 * v11);
      v43 = *v13;
      v44 = v12;
      v42 = v13[1];
      v15 = (uint64_t *)*((_QWORD *)v13 + 2);
      v14 = *((_QWORD *)v13 + 3);
      v17 = *((_QWORD *)v13 + 4);
      v16 = *((_QWORD *)v13 + 5);
      if (v10)
      {
        v18 = *(os_unfair_lock_s **)(v16 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v18);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v9);
      sub_1B1A18378(v37, (uint64_t)v59, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v19 = v8[4];
      v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v8[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
      v8[7] = v20;
      v36[1] = 0;
      v36[2] = 0;
      *v36 = 0;
      swift_release();
      v21 = sub_1B1A12038((uint64_t)&type metadata for EmitterShape, (uint64_t)&off_1E63752C8, v15, v14, v17, (uint64_t)v8);
      if (v15)
      {
        v10 = v39;
        if (v17)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 16);
          v23 = *(_QWORD *)(v22 + 128);
          v24 = *(_QWORD *)(v23 + 16);
          v25 = v21 + 48;
          do
          {
            if (*(unsigned __int8 *)(v25 + 16) >= 2u && !(*(_QWORD *)v25 ^ 1 | *(_QWORD *)(v25 + 8)))
            {
              *(_QWORD *)v25 = 0;
              *(_QWORD *)(v25 + 8) = 0;
              *(_BYTE *)(v25 + 16) = 2;
            }
            if (!v24
              || (v26 = sub_1B1DC3AC8((uint64_t)&type metadata for LastFrameWorldTransform), (v27 & 1) == 0)
              || *(ValueMetadata **)(*(_QWORD *)(v22 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v26) + 32) != &type metadata for LastFrameWorldTransform)
            {
              *(_BYTE *)(v25 + 49) = 0;
            }
            v25 += 224;
            --v17;
          }
          while (v17);
        }
      }
      else
      {
        v10 = v39;
        if ((_DWORD)v43 != (_DWORD)v42)
        {
          v28 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 16);
          v29 = *(_QWORD *)(v28 + 128);
          v30 = *(_QWORD *)(v29 + 16);
          v31 = v42 - v43;
          v32 = v21 + 224 * v43 + 48;
          do
          {
            if (*(unsigned __int8 *)(v32 + 16) >= 2u && !(*(_QWORD *)v32 ^ 1 | *(_QWORD *)(v32 + 8)))
            {
              *(_QWORD *)v32 = 0;
              *(_QWORD *)(v32 + 8) = 0;
              *(_BYTE *)(v32 + 16) = 2;
            }
            if (!v30
              || (v33 = sub_1B1DC3AC8((uint64_t)&type metadata for LastFrameWorldTransform), (v34 & 1) == 0)
              || *(ValueMetadata **)(*(_QWORD *)(v28 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v33) + 32) != &type metadata for LastFrameWorldTransform)
            {
              *(_BYTE *)(v32 + 49) = 0;
            }
            v32 += 224;
            --v31;
          }
          while (v31);
        }
      }
      v12 = v44;
      sub_1B1F05D48(v8, (unsigned __int16 **)v55, (uint64_t)v59);
      sub_1B1F03804((char *)v16);
      v9 = v40;
      ecs_stack_allocator_pop_snapshot(v40);
      if ((v10 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
      }
      swift_release();
      ++v11;
    }
    while (v11 != v41);
    sub_1B19ED720((uint64_t)v45);
    sub_1B1A086DC(v47, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    sub_1B19ED720((uint64_t)v45);
  }
  return sub_1B1A086DC(v47, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

_QWORD *sub_1B20B8514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  _OWORD v14[2];
  uint64_t v15;
  _BYTE v16[40];
  _OWORD v17[2];
  uint64_t v18;
  _BYTE v19[40];
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _BYTE v24[40];
  _OWORD v25[2];
  uint64_t v26;
  _BYTE v27[40];
  _OWORD v28[2];
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  _OWORD v34[2];
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  _OWORD v56[2];
  uint64_t v57;
  _OWORD v58[2];
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  _OWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  char v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  char v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  char v168;
  uint64_t v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  char v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  char v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  char v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  char v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  char v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  char v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  char v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  char v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  char v242;
  uint64_t v243;
  char v244;
  uint64_t v245;
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  char v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  char v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  char v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  char v276;
  uint64_t v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int v286;
  char v287;
  uint64_t v288;
  char v289;
  uint64_t v290;
  _QWORD v291[12];
  _QWORD v292[12];
  _QWORD v293[12];
  _QWORD v294[12];
  _QWORD v295[12];
  _QWORD v296[12];
  _QWORD v297[12];
  _QWORD v298[12];
  _QWORD v299[12];
  _QWORD v300[12];
  _QWORD v301[12];
  _QWORD v302[12];
  _QWORD v303[12];
  uint64_t v304;
  int v305;
  char v306;
  uint64_t v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  __int128 v311;
  __int128 v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  char v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  __int128 v322;
  __int128 v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  char v328;
  uint64_t v329;
  char v330;
  uint64_t v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  char v339;
  uint64_t v340;
  char v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  __int128 v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  char v350;
  uint64_t v351;
  char v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  __int128 v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  char v361;
  uint64_t v362;
  char v363;
  uint64_t v364;
  uint64_t v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  char v372;
  uint64_t v373;
  char v374;
  uint64_t v375;
  uint64_t v376;
  __int128 v377;
  __int128 v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  char v383;
  uint64_t v384;
  char v385;
  uint64_t v386;
  uint64_t v387;
  __int128 v388;
  __int128 v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  char v394;
  uint64_t v395;
  char v396;
  uint64_t v397;
  uint64_t v398;
  __int128 v399;
  __int128 v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  char v405;
  uint64_t v406;
  char v407;
  uint64_t v408;
  uint64_t v409;
  __int128 v410;
  __int128 v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  char v416;
  uint64_t v417;
  char v418;
  uint64_t v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  char v427;
  uint64_t v428;
  char v429;
  uint64_t v430;
  uint64_t v431;
  __int128 v432;
  __int128 v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  char v438;
  uint64_t v439;
  char v440;
  uint64_t v441;
  uint64_t v442;
  __int128 v443;
  __int128 v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v447 = *MEMORY[0x1E0C80C00];
  v6 = v2 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v285 = qword_1ED4D09F8;
  if (v6)
    v7 = 0;
  else
    v7 = v3;
  v13 = v7;
  v286 = v7;
  v287 = v6 >> 31;
  v288 = 1;
  v289 = 2;
  v290 = 0;
  swift_retain();
  sub_1B1E43E78(1, (uint64_t)v14);
  swift_release();
  v68[0] = v14[0];
  v68[1] = v14[1];
  v69 = v15;
  sub_1B1E8FCE4(v5, (uint64_t)v68, 0x200000000, v291);
  sub_1B1A18378((uint64_t)v291, (uint64_t)&v436, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v436)
  {
    v274 = v436;
    v275 = v437;
    v276 = v438;
    v277 = v439;
    v278 = v440;
    v279 = v441;
    v280 = v442;
    v281 = v443;
    v282 = v444;
    v283 = v445;
    v284 = v446;
    sub_1B2187A80((uint64_t)&v274);
    sub_1B1A086DC(v291, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v268 = qword_1ED4D09F8;
  v269 = v13;
  v270 = v6 >> 31;
  v271 = 1;
  v272 = 2;
  v273 = 0;
  swift_retain();
  sub_1B1E39870(3, (uint64_t)v16);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v8 + 32) = &type metadata for TextureRequireCPURepresentation;
  *(_QWORD *)(v8 + 40) = &off_1E63B6380;
  sub_1B1B44110(v17, v8);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v16);
  v66[0] = v17[0];
  v66[1] = v17[1];
  v67 = v18;
  sub_1B1E8FCE4(v5, (uint64_t)v66, 0x200000000, v292);
  sub_1B1A18378((uint64_t)v292, (uint64_t)&v425, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v425)
  {
    v257 = v425;
    v258 = v426;
    v259 = v427;
    v260 = v428;
    v261 = v429;
    v262 = v430;
    v263 = v431;
    v264 = v432;
    v265 = v433;
    v266 = v434;
    v267 = v435;
    sub_1B2187A9C((uint64_t)&v257);
    sub_1B1A086DC(v292, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v251 = qword_1ED4D09F8;
  v252 = v13;
  v253 = v6 >> 31;
  v254 = 1;
  v255 = 2;
  v256 = 0;
  swift_retain();
  sub_1B1E39A68(3, (uint64_t)v19);
  swift_release();
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v9 + 32) = &type metadata for TextureRequireCPURepresentation;
  *(_QWORD *)(v9 + 40) = &off_1E63B6380;
  sub_1B1B44110(v20, v9);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v19);
  v64[0] = v20[0];
  v64[1] = v20[1];
  v65 = v21;
  sub_1B1E8FCE4(v5, (uint64_t)v64, 0x200000000, v293);
  sub_1B1A18378((uint64_t)v293, (uint64_t)&v414, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v414)
  {
    v240 = v414;
    v241 = v415;
    v242 = v416;
    v243 = v417;
    v244 = v418;
    v245 = v419;
    v246 = v420;
    v247 = v421;
    v248 = v422;
    v249 = v423;
    v250 = v424;
    sub_1B2187AD4((uint64_t)&v240);
    sub_1B1A086DC(v293, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v234 = qword_1ED4D09F8;
  v235 = v13;
  v236 = v6 >> 31;
  v237 = 1;
  v238 = 2;
  v239 = 0;
  swift_retain();
  sub_1B1E3A050(1, (uint64_t)v22);
  swift_release();
  v62[0] = v22[0];
  v62[1] = v22[1];
  v63 = v23;
  sub_1B1E8FCE4(v5, (uint64_t)v62, 0x200000000, v294);
  sub_1B1A18378((uint64_t)v294, (uint64_t)&v403, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v403)
  {
    v230 = v410;
    v223 = v403;
    v224 = v404;
    v225 = v405;
    v226 = v406;
    v227 = v407;
    v228 = v408;
    v229 = v409;
    v231 = v411;
    v232 = v412;
    v233 = v413;
    sub_1B2187B0C((uint64_t)&v223);
    sub_1B1A086DC(v294, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v217 = qword_1ED4D09F8;
  v218 = v13;
  v219 = v6 >> 31;
  v220 = 1;
  v221 = 2;
  v222 = 0;
  swift_retain();
  sub_1B1E39870(3, (uint64_t)v24);
  swift_release();
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v10 + 32) = &type metadata for TextureRequireGPURepresentation;
  *(_QWORD *)(v10 + 40) = &off_1E63B6458;
  sub_1B1B44110(v25, v10);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v24);
  v60[0] = v25[0];
  v60[1] = v25[1];
  v61 = v26;
  sub_1B1E8FCE4(v5, (uint64_t)v60, 0x200000000, v295);
  sub_1B1A18378((uint64_t)v295, (uint64_t)&v392, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v392)
  {
    v206 = v392;
    v207 = v393;
    v208 = v394;
    v209 = v395;
    v210 = v396;
    v211 = v397;
    v212 = v398;
    v213 = v399;
    v214 = v400;
    v215 = v401;
    v216 = v402;
    sub_1B2187AB8((uint64_t)&v206);
    sub_1B1A086DC(v295, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v200 = qword_1ED4D09F8;
  v201 = v13;
  v202 = v6 >> 31;
  v203 = 1;
  v204 = 2;
  v205 = 0;
  swift_retain();
  sub_1B1E39A68(3, (uint64_t)v27);
  swift_release();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v11 + 32) = &type metadata for TextureRequireGPURepresentation;
  *(_QWORD *)(v11 + 40) = &off_1E63B6458;
  sub_1B1B44110(v28, v11);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v27);
  v58[0] = v28[0];
  v58[1] = v28[1];
  v59 = v29;
  sub_1B1E8FCE4(v5, (uint64_t)v58, 0x200000000, v296);
  sub_1B1A18378((uint64_t)v296, (uint64_t)&v381, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v381)
  {
    v196 = v388;
    v189 = v381;
    v190 = v382;
    v191 = v383;
    v192 = v384;
    v193 = v385;
    v194 = v386;
    v195 = v387;
    v197 = v389;
    v198 = v390;
    v199 = v391;
    sub_1B2187AF0((uint64_t)&v189);
    sub_1B1A086DC(v296, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v183 = qword_1ED4D09F8;
  v184 = v13;
  v185 = v6 >> 31;
  v186 = 1;
  v187 = 2;
  v188 = 0;
  swift_retain();
  sub_1B1E44070(1, (uint64_t)v30);
  swift_release();
  v56[0] = v30[0];
  v56[1] = v30[1];
  v57 = v31;
  sub_1B1E8FCE4(v5, (uint64_t)v56, 0x200000000, v297);
  sub_1B1A18378((uint64_t)v297, (uint64_t)&v370, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v370)
  {
    v172 = v370;
    v173 = v371;
    v174 = v372;
    v175 = v373;
    v176 = v374;
    v177 = v375;
    v178 = v376;
    v179 = v377;
    v180 = v378;
    v181 = v379;
    v182 = v380;
    sub_1B2187B28((uint64_t)&v172);
    sub_1B1A086DC(v297, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v166 = qword_1ED4D09F8;
  v167 = v13;
  v168 = v6 >> 31;
  v169 = 1;
  v170 = 2;
  v171 = 0;
  swift_retain();
  sub_1B1E44268(1, (uint64_t)v32);
  swift_release();
  v54[0] = v32[0];
  v54[1] = v32[1];
  v55 = v33;
  sub_1B1E8FCE4(v5, (uint64_t)v54, 0x200000000, v298);
  sub_1B1A18378((uint64_t)v298, (uint64_t)&v359, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v359)
  {
    v162 = v366;
    v155 = v359;
    v156 = v360;
    v157 = v361;
    v158 = v362;
    v159 = v363;
    v160 = v364;
    v161 = v365;
    v163 = v367;
    v164 = v368;
    v165 = v369;
    sub_1B2187B44((uint64_t)&v155);
    sub_1B1A086DC(v298, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v149 = qword_1ED4D09F8;
  v150 = v13;
  v151 = v6 >> 31;
  v152 = 1;
  v153 = 2;
  v154 = 0;
  swift_retain();
  sub_1B1E44460(1, (uint64_t)v34);
  swift_release();
  v52[0] = v34[0];
  v52[1] = v34[1];
  v53 = v35;
  sub_1B1E8FCE4(v5, (uint64_t)v52, 0x200000000, v299);
  sub_1B1A18378((uint64_t)v299, (uint64_t)&v348, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v348)
  {
    v138 = v348;
    v139 = v349;
    v140 = v350;
    v141 = v351;
    v142 = v352;
    v143 = v353;
    v144 = v354;
    v145 = v355;
    v146 = v356;
    v147 = v357;
    v148 = v358;
    sub_1B2187B60((uint64_t)&v138);
    sub_1B1A086DC(v299, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v132 = qword_1ED4D09F8;
  v133 = v13;
  v134 = v6 >> 31;
  v135 = 1;
  v136 = 2;
  v137 = 0;
  swift_retain();
  sub_1B1E44658(1, (uint64_t)v36);
  swift_release();
  v50[0] = v36[0];
  v50[1] = v36[1];
  v51 = v37;
  sub_1B1E8FCE4(v5, (uint64_t)v50, 0x200000000, v300);
  sub_1B1A18378((uint64_t)v300, (uint64_t)&v337, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v337)
  {
    v128 = v344;
    v121 = v337;
    v122 = v338;
    v123 = v339;
    v124 = v340;
    v125 = v341;
    v126 = v342;
    v127 = v343;
    v129 = v345;
    v130 = v346;
    v131 = v347;
    sub_1B2187B7C((uint64_t)&v121);
    sub_1B1A086DC(v300, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v115 = qword_1ED4D09F8;
  v116 = v13;
  v117 = v6 >> 31;
  v118 = 1;
  v119 = 2;
  v120 = 0;
  swift_retain();
  sub_1B1E44850(1, (uint64_t)v38);
  swift_release();
  v48[0] = v38[0];
  v48[1] = v38[1];
  v49 = v39;
  sub_1B1E8FCE4(v5, (uint64_t)v48, 0x200000000, v301);
  sub_1B1A18378((uint64_t)v301, (uint64_t)&v326, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v326)
  {
    v104 = v326;
    v105 = v327;
    v106 = v328;
    v107 = v329;
    v108 = v330;
    v109 = v331;
    v110 = v332;
    v111 = v333;
    v112 = v334;
    v113 = v335;
    v114 = v336;
    sub_1B2187B98((uint64_t)&v104);
    sub_1B1A086DC(v301, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v98 = qword_1ED4D09F8;
  v99 = v13;
  v100 = v6 >> 31;
  v101 = 1;
  v102 = 2;
  v103 = 0;
  swift_retain();
  sub_1B1E44A48(1, (uint64_t)v40);
  swift_release();
  v46[0] = v40[0];
  v46[1] = v40[1];
  v47 = v41;
  sub_1B1E8FCE4(v5, (uint64_t)v46, 0x200000000, v302);
  sub_1B1A18378((uint64_t)v302, (uint64_t)&v315, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v315)
  {
    v94 = v322;
    v87 = v315;
    v88 = v316;
    v89 = v317;
    v90 = v318;
    v91 = v319;
    v92 = v320;
    v93 = v321;
    v95 = v323;
    v96 = v324;
    v97 = v325;
    sub_1B2187BB4((uint64_t)&v87);
    sub_1B1A086DC(v302, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v81 = qword_1ED4D09F8;
  v82 = v13;
  v83 = v6 >> 31;
  v84 = 1;
  v85 = 2;
  v86 = 0;
  swift_retain();
  sub_1B1E44C40(1, (uint64_t)v42);
  swift_release();
  v44[0] = v42[0];
  v44[1] = v42[1];
  v45 = v43;
  sub_1B1E8FCE4(v5, (uint64_t)v44, 0x200000000, v303);
  sub_1B1A18378((uint64_t)v303, (uint64_t)&v304, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v304)
  {
    v70 = v304;
    v71 = v305;
    v72 = v306;
    v73 = v307;
    v74 = v308;
    v75 = v309;
    v76 = v310;
    v77 = v311;
    v78 = v312;
    v79 = v313;
    v80 = v314;
    sub_1B2187BD0((uint64_t)&v70);
    sub_1B19ED720((uint64_t)v42);
    sub_1B19ED720((uint64_t)v40);
    sub_1B19ED720((uint64_t)v38);
    sub_1B19ED720((uint64_t)v36);
    sub_1B19ED720((uint64_t)v34);
    sub_1B19ED720((uint64_t)v32);
    sub_1B19ED720((uint64_t)v30);
    sub_1B19ED720((uint64_t)v28);
    sub_1B19ED720((uint64_t)v25);
    sub_1B19ED720((uint64_t)v22);
    sub_1B19ED720((uint64_t)v20);
    sub_1B19ED720((uint64_t)v17);
    sub_1B19ED720((uint64_t)v14);
    return sub_1B1A086DC(v303, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  else
  {
    sub_1B19ED720((uint64_t)v42);
    sub_1B19ED720((uint64_t)v40);
    sub_1B19ED720((uint64_t)v38);
    sub_1B19ED720((uint64_t)v36);
    sub_1B19ED720((uint64_t)v34);
    sub_1B19ED720((uint64_t)v32);
    sub_1B19ED720((uint64_t)v30);
    sub_1B19ED720((uint64_t)v28);
    sub_1B19ED720((uint64_t)v25);
    sub_1B19ED720((uint64_t)v22);
    sub_1B19ED720((uint64_t)v20);
    sub_1B19ED720((uint64_t)v17);
    return (_QWORD *)sub_1B19ED720((uint64_t)v14);
  }
}

uint64_t sub_1B20B95D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  int v20;
  signed int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  signed int v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  signed int v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_unfair_lock_s *v98;
  signed int v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_unfair_lock_s *v123;
  signed int v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE v152[40];
  _BYTE v153[40];
  _BYTE v154[40];
  _BYTE v155[40];
  _BYTE v156[40];
  uint64_t v157;
  int v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  char v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;
  _QWORD v193[12];
  _QWORD v194[12];
  _QWORD v195[12];
  _QWORD v196[12];
  _QWORD v197[12];
  _QWORD v198[5];
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD v202[5];
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD v206[5];
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD v210[5];
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD v214[5];
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;

  v218 = *MEMORY[0x1E0C80C00];
  v150 = result;
  if (*(_BYTE *)(result + OBJC_IVAR____TtC3VFX13EntityManager_isVFX2) == 1 && a5 >= 2024)
  {
    v5 = a4;
    v6 = a4 & 0x100000000;
    sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD80, (unint64_t *)&qword_1ED4B8C90, (unint64_t *)&qword_1ED4B8C70);
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 32) = &type metadata for ParticlePlaneCollider;
    v144 = v7 + 32;
    *(_QWORD *)(v7 + 40) = &off_1E63A4A68;
    *(_QWORD *)(v7 + 48) = &type metadata for ParticleSphereCollider;
    *(_QWORD *)(v7 + 56) = &off_1E63A8DD0;
    *(_QWORD *)(v7 + 64) = &type metadata for ParticleBoxCollider;
    *(_QWORD *)(v7 + 72) = &off_1E63987F0;
    *(_QWORD *)(v7 + 80) = &type metadata for ParticleCylinderCollider;
    *(_QWORD *)(v7 + 88) = &off_1E63AE088;
    *(_QWORD *)(v7 + 96) = &type metadata for ParticleSDFCollider;
    *(_QWORD *)(v7 + 104) = &off_1E6399358;
    *(_QWORD *)(v7 + 112) = &type metadata for ParticleMeshCollider;
    *(_QWORD *)(v7 + 120) = &off_1E639CA10;
    *(_QWORD *)(v7 + 128) = &type metadata for EmitterDescription;
    *(_QWORD *)(v7 + 136) = &off_1E6391AC0;
    *(_QWORD *)(v7 + 144) = &type metadata for KillShape;
    *(_OWORD *)(v7 + 16) = xmmword_1B22ADAF0;
    *(_QWORD *)(v7 + 152) = &off_1E63C3E28;
    *(_QWORD *)(v7 + 160) = &type metadata for ForceField;
    *(_QWORD *)(v7 + 168) = &off_1E636DA50;
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    if (v6)
      v8 = 0;
    else
      v8 = v5;
    v149 = v8;
    sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
    v9 = 0;
    v148 = v6 >> 31;
    do
    {
      v145 = v9;
      v10 = (uint64_t *)(v144 + 16 * v9);
      v12 = *v10;
      v11 = v10[1];
      v13 = qword_1ED4D09F8;
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1B226CD10;
      v15 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)(v14 + 32) = v12;
      *(_QWORD *)(v14 + 40) = v15;
      *(_QWORD *)(v14 + 48) = &type metadata for Position;
      *(_QWORD *)(v14 + 56) = &off_1E63C2410;
      v181 = v13;
      v182 = v149;
      v183 = v148;
      v184 = 1;
      v185 = 2;
      v186 = 0;
      swift_retain();
      sub_1B209DF18(v14, (uint64_t)v152);
      swift_setDeallocating();
      swift_deallocClassInstance();
      swift_release();
      sub_1B1E8FCE4(v150, (uint64_t)v152, 0x200000000, v193);
      sub_1B1A18378((uint64_t)v193, (uint64_t)v214, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      v147 = v12;
      v146 = v15;
      if (v214[0])
      {
        if (v217 >= 1 && v216)
        {
          v16 = v215;
          v17 = v215 + 48 * v216;
          while (1)
          {
            v18 = *(_QWORD *)(v16 + 40);
            v19 = *(os_unfair_lock_s **)(v18 + 376);
            swift_retain();
            os_unfair_lock_lock(v19);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
            v20 = *(_DWORD *)(v18 + 24);
            swift_retain();
            v192 = 0;
            v190 = 0u;
            v191 = 0u;
            v189 = 0;
            v187 = 0u;
            v188 = 0u;
            v21 = sub_1B1DA4ED8(v20, 0, 0, (uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, (uint64_t)&v190, (uint64_t)&v187);
            swift_release();
            sub_1B1A04628((uint64_t)&v187, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            sub_1B1A04628((uint64_t)&v190, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            v22 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v18 + 16) + 80) + 8 * v21 + 32);
            v23 = *(_QWORD **)(v18 + 40);
            v24 = v22[4];
            v25 = v22[5];
            v26 = v22[8];
            v28 = v23[4];
            v27 = v23[5];
            v29 = v23[8];
            swift_retain();
            if (v26 != v29)
              goto LABEL_34;
            v30 = *(_QWORD *)(v25 + 16);
            if (v30 != *(_QWORD *)(v27 + 16))
              goto LABEL_34;
            if (v30 && v25 != v27)
              break;
LABEL_22:
            v32 = *(_QWORD *)(v24 + 16);
            if (v32 != *(_QWORD *)(v28 + 16))
              goto LABEL_34;
            if (v32 && v24 != v28)
            {
              v33 = (_QWORD *)(v24 + 32);
              v34 = (_QWORD *)(v28 + 32);
              while (*v33 == *v34 && v33[3] == v34[3])
              {
                v34 += 5;
                v33 += 5;
                if (!--v32)
                  goto LABEL_29;
              }
LABEL_34:
              swift_release();
              v37 = *(_QWORD *)(v18 + 232);
              v38 = *(_QWORD *)(v18 + 240);
              v39 = *(unsigned __int8 *)(v18 + 120);
              v40 = *(unsigned int *)(v18 + 28);
              LOBYTE(v190) = *(_BYTE *)(v18 + 32);
              sub_1B1FD8C68(v37, v38, v21, v39, v40 | ((unint64_t)v190 << 32), 0, 0, 0);
              goto LABEL_35;
            }
LABEL_29:
            swift_release();
            sub_1B1A10BB0(v21);
LABEL_35:
            v16 += 48;
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
            swift_release();
            if (v16 == v17)
              goto LABEL_36;
          }
          v35 = (_QWORD *)(v25 + 32);
          v36 = (_QWORD *)(v27 + 32);
          while (*v35 == *v36 && v35[3] == v36[3])
          {
            v36 += 5;
            v35 += 5;
            if (!--v30)
              goto LABEL_22;
          }
          goto LABEL_34;
        }
LABEL_36:
        sub_1B1A086DC(v193, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        v12 = v147;
        v15 = v146;
      }
      v41 = qword_1ED4D09F8;
      v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_1B226CD10;
      *(_QWORD *)(v42 + 32) = v12;
      *(_QWORD *)(v42 + 40) = v15;
      *(_QWORD *)(v42 + 48) = &type metadata for Orientation;
      *(_QWORD *)(v42 + 56) = &off_1E63715B8;
      v175 = v41;
      v176 = v149;
      v177 = v148;
      v178 = 1;
      v179 = 2;
      v180 = 0;
      swift_retain();
      sub_1B209DF18(v42, (uint64_t)v153);
      swift_setDeallocating();
      swift_deallocClassInstance();
      swift_release();
      sub_1B1E8FCE4(v150, (uint64_t)v153, 0x200000000, v194);
      sub_1B1A18378((uint64_t)v194, (uint64_t)v210, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (v210[0])
      {
        if (v213 >= 1 && v212)
        {
          v43 = v211;
          v44 = v211 + 48 * v212;
          while (1)
          {
            v45 = *(_QWORD *)(v43 + 40);
            v46 = *(os_unfair_lock_s **)(v45 + 376);
            swift_retain();
            os_unfair_lock_lock(v46);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v45 + 344));
            LODWORD(v46) = *(_DWORD *)(v45 + 24);
            swift_retain();
            v192 = 0;
            v190 = 0u;
            v191 = 0u;
            v189 = 0;
            v187 = 0u;
            v188 = 0u;
            v47 = sub_1B1DA4ED8((int)v46, 0, 0, (uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, (uint64_t)&v190, (uint64_t)&v187);
            swift_release();
            sub_1B1A04628((uint64_t)&v187, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            sub_1B1A04628((uint64_t)&v190, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            v48 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v45 + 16) + 80) + 8 * v47 + 32);
            v49 = *(_QWORD **)(v45 + 40);
            v51 = v48[4];
            v50 = v48[5];
            v52 = v48[8];
            v54 = v49[4];
            v53 = v49[5];
            v55 = v49[8];
            swift_retain();
            if (v52 != v55)
              goto LABEL_60;
            v56 = *(_QWORD *)(v50 + 16);
            if (v56 != *(_QWORD *)(v53 + 16))
              goto LABEL_60;
            if (v56 && v50 != v53)
              break;
LABEL_48:
            v58 = *(_QWORD *)(v51 + 16);
            if (v58 != *(_QWORD *)(v54 + 16))
              goto LABEL_60;
            if (v58 && v51 != v54)
            {
              v59 = (_QWORD *)(v51 + 32);
              v60 = (_QWORD *)(v54 + 32);
              while (*v59 == *v60 && v59[3] == v60[3])
              {
                v60 += 5;
                v59 += 5;
                if (!--v58)
                  goto LABEL_55;
              }
LABEL_60:
              swift_release();
              v63 = *(_QWORD *)(v45 + 232);
              v64 = *(_QWORD *)(v45 + 240);
              v65 = *(unsigned __int8 *)(v45 + 120);
              v66 = *(unsigned int *)(v45 + 28);
              LOBYTE(v190) = *(_BYTE *)(v45 + 32);
              sub_1B1FD8C68(v63, v64, v47, v65, v66 | ((unint64_t)v190 << 32), 0, 0, 0);
              goto LABEL_61;
            }
LABEL_55:
            swift_release();
            sub_1B1A10BB0(v47);
LABEL_61:
            v43 += 48;
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v45 + 376));
            swift_release();
            if (v43 == v44)
              goto LABEL_62;
          }
          v61 = (_QWORD *)(v50 + 32);
          v62 = (_QWORD *)(v53 + 32);
          while (*v61 == *v62 && v61[3] == v62[3])
          {
            v62 += 5;
            v61 += 5;
            if (!--v56)
              goto LABEL_48;
          }
          goto LABEL_60;
        }
LABEL_62:
        sub_1B1A086DC(v194, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        v12 = v147;
        v15 = v146;
      }
      v67 = qword_1ED4D09F8;
      v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_1B226CD10;
      *(_QWORD *)(v68 + 32) = v12;
      *(_QWORD *)(v68 + 40) = v15;
      *(_QWORD *)(v68 + 48) = &type metadata for Scale3;
      *(_QWORD *)(v68 + 56) = &off_1E63BC5D0;
      v169 = v67;
      v170 = v149;
      v171 = v148;
      v172 = 1;
      v173 = 2;
      v174 = 0;
      swift_retain();
      sub_1B209DF18(v68, (uint64_t)v154);
      swift_setDeallocating();
      swift_deallocClassInstance();
      swift_release();
      sub_1B1E8FCE4(v150, (uint64_t)v154, 0x200000000, v195);
      sub_1B1A18378((uint64_t)v195, (uint64_t)v206, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (v206[0])
      {
        if (v209 >= 1 && v208)
        {
          v69 = v207;
          v70 = v207 + 48 * v208;
          while (1)
          {
            v71 = *(_QWORD *)(v69 + 40);
            v72 = *(os_unfair_lock_s **)(v71 + 376);
            swift_retain();
            os_unfair_lock_lock(v72);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v71 + 344));
            LODWORD(v72) = *(_DWORD *)(v71 + 24);
            swift_retain();
            v192 = 0;
            v190 = 0u;
            v191 = 0u;
            v189 = 0;
            v187 = 0u;
            v188 = 0u;
            v73 = sub_1B1DA4ED8((int)v72, 0, 0, (uint64_t)&type metadata for Scale3, (uint64_t)&off_1E63BC558, (uint64_t)&v190, (uint64_t)&v187);
            swift_release();
            sub_1B1A04628((uint64_t)&v187, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            sub_1B1A04628((uint64_t)&v190, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            v74 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v71 + 16) + 80) + 8 * v73 + 32);
            v75 = *(_QWORD **)(v71 + 40);
            v77 = v74[4];
            v76 = v74[5];
            v78 = v74[8];
            v80 = v75[4];
            v79 = v75[5];
            v81 = v75[8];
            swift_retain();
            if (v78 != v81)
              goto LABEL_86;
            v82 = *(_QWORD *)(v76 + 16);
            if (v82 != *(_QWORD *)(v79 + 16))
              goto LABEL_86;
            if (v82 && v76 != v79)
              break;
LABEL_74:
            v84 = *(_QWORD *)(v77 + 16);
            if (v84 != *(_QWORD *)(v80 + 16))
              goto LABEL_86;
            if (v84 && v77 != v80)
            {
              v85 = (_QWORD *)(v77 + 32);
              v86 = (_QWORD *)(v80 + 32);
              while (*v85 == *v86 && v85[3] == v86[3])
              {
                v86 += 5;
                v85 += 5;
                if (!--v84)
                  goto LABEL_81;
              }
LABEL_86:
              swift_release();
              v89 = *(_QWORD *)(v71 + 232);
              v90 = *(_QWORD *)(v71 + 240);
              v91 = *(unsigned __int8 *)(v71 + 120);
              v92 = *(unsigned int *)(v71 + 28);
              LOBYTE(v190) = *(_BYTE *)(v71 + 32);
              sub_1B1FD8C68(v89, v90, v73, v91, v92 | ((unint64_t)v190 << 32), 0, 0, 0);
              goto LABEL_87;
            }
LABEL_81:
            swift_release();
            sub_1B1A10BB0(v73);
LABEL_87:
            v69 += 48;
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 376));
            swift_release();
            if (v69 == v70)
              goto LABEL_88;
          }
          v87 = (_QWORD *)(v76 + 32);
          v88 = (_QWORD *)(v79 + 32);
          while (*v87 == *v88 && v87[3] == v88[3])
          {
            v88 += 5;
            v87 += 5;
            if (!--v82)
              goto LABEL_74;
          }
          goto LABEL_86;
        }
LABEL_88:
        sub_1B1A086DC(v195, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        v12 = v147;
        v15 = v146;
      }
      v93 = qword_1ED4D09F8;
      v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = xmmword_1B226CD10;
      *(_QWORD *)(v94 + 32) = v12;
      *(_QWORD *)(v94 + 40) = v15;
      *(_QWORD *)(v94 + 48) = &type metadata for Scale2;
      *(_QWORD *)(v94 + 56) = &off_1E63BC468;
      v163 = v93;
      v164 = v149;
      v165 = v148;
      v166 = 1;
      v167 = 2;
      v168 = 0;
      swift_retain();
      sub_1B209DF18(v94, (uint64_t)v155);
      swift_setDeallocating();
      swift_deallocClassInstance();
      swift_release();
      sub_1B1E8FCE4(v150, (uint64_t)v155, 0x200000000, v196);
      sub_1B1A18378((uint64_t)v196, (uint64_t)v202, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (v202[0])
      {
        if (v205 >= 1 && v204)
        {
          v95 = v203;
          v96 = v203 + 48 * v204;
          while (1)
          {
            v97 = *(_QWORD *)(v95 + 40);
            v98 = *(os_unfair_lock_s **)(v97 + 376);
            swift_retain();
            os_unfair_lock_lock(v98);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v97 + 344));
            LODWORD(v98) = *(_DWORD *)(v97 + 24);
            swift_retain();
            v192 = 0;
            v190 = 0u;
            v191 = 0u;
            v189 = 0;
            v187 = 0u;
            v188 = 0u;
            v99 = sub_1B1DA4ED8((int)v98, 0, 0, (uint64_t)&type metadata for Scale2, (uint64_t)&off_1E63BC3F0, (uint64_t)&v190, (uint64_t)&v187);
            swift_release();
            sub_1B1A04628((uint64_t)&v187, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            sub_1B1A04628((uint64_t)&v190, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            v100 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v97 + 16) + 80) + 8 * v99 + 32);
            v101 = *(_QWORD **)(v97 + 40);
            v103 = v100[4];
            v102 = v100[5];
            v104 = v100[8];
            v106 = v101[4];
            v105 = v101[5];
            v107 = v101[8];
            swift_retain();
            if (v104 != v107)
              goto LABEL_112;
            v108 = *(_QWORD *)(v102 + 16);
            if (v108 != *(_QWORD *)(v105 + 16))
              goto LABEL_112;
            if (v108 && v102 != v105)
              break;
LABEL_100:
            v110 = *(_QWORD *)(v103 + 16);
            if (v110 != *(_QWORD *)(v106 + 16))
              goto LABEL_112;
            if (v110 && v103 != v106)
            {
              v111 = (_QWORD *)(v103 + 32);
              v112 = (_QWORD *)(v106 + 32);
              while (*v111 == *v112 && v111[3] == v112[3])
              {
                v112 += 5;
                v111 += 5;
                if (!--v110)
                  goto LABEL_107;
              }
LABEL_112:
              swift_release();
              v115 = *(_QWORD *)(v97 + 232);
              v116 = *(_QWORD *)(v97 + 240);
              v117 = *(unsigned __int8 *)(v97 + 120);
              v118 = *(unsigned int *)(v97 + 28);
              LOBYTE(v190) = *(_BYTE *)(v97 + 32);
              sub_1B1FD8C68(v115, v116, v99, v117, v118 | ((unint64_t)v190 << 32), 0, 0, 0);
              goto LABEL_113;
            }
LABEL_107:
            swift_release();
            sub_1B1A10BB0(v99);
LABEL_113:
            v95 += 48;
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v97 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v97 + 376));
            swift_release();
            if (v95 == v96)
              goto LABEL_114;
          }
          v113 = (_QWORD *)(v102 + 32);
          v114 = (_QWORD *)(v105 + 32);
          while (*v113 == *v114 && v113[3] == v114[3])
          {
            v114 += 5;
            v113 += 5;
            if (!--v108)
              goto LABEL_100;
          }
          goto LABEL_112;
        }
LABEL_114:
        sub_1B1A086DC(v196, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        v12 = v147;
        v15 = v146;
      }
      v119 = qword_1ED4D09F8;
      v120 = swift_allocObject();
      *(_OWORD *)(v120 + 16) = xmmword_1B226CD10;
      *(_QWORD *)(v120 + 32) = v12;
      *(_QWORD *)(v120 + 40) = v15;
      *(_QWORD *)(v120 + 48) = &type metadata for Scale1;
      *(_QWORD *)(v120 + 56) = &off_1E63BC300;
      v157 = v119;
      v158 = v149;
      v159 = v148;
      v160 = 1;
      v161 = 2;
      v162 = 0;
      swift_retain();
      sub_1B209DF18(v120, (uint64_t)v156);
      swift_setDeallocating();
      swift_deallocClassInstance();
      swift_release();
      sub_1B1E8FCE4(v150, (uint64_t)v156, 0x200000000, v197);
      sub_1B1A18378((uint64_t)v197, (uint64_t)v198, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (v198[0])
      {
        if (v201 >= 1 && v200)
        {
          v121 = v199;
          v151 = v199 + 48 * v200;
          while (1)
          {
            v122 = *(_QWORD *)(v121 + 40);
            v123 = *(os_unfair_lock_s **)(v122 + 376);
            swift_retain();
            os_unfair_lock_lock(v123);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v122 + 344));
            LODWORD(v123) = *(_DWORD *)(v122 + 24);
            swift_retain();
            v192 = 0;
            v190 = 0u;
            v191 = 0u;
            v189 = 0;
            v187 = 0u;
            v188 = 0u;
            v124 = sub_1B1DA4ED8((int)v123, 0, 0, (uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, (uint64_t)&v190, (uint64_t)&v187);
            swift_release();
            sub_1B1A04628((uint64_t)&v187, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            sub_1B1A04628((uint64_t)&v190, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
            v125 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v122 + 16) + 80) + 8 * v124 + 32);
            v126 = *(_QWORD **)(v122 + 40);
            v127 = v125[4];
            v128 = v125[5];
            v129 = v125[8];
            v131 = v126[4];
            v130 = v126[5];
            v132 = v126[8];
            swift_retain();
            if (v129 != v132)
              goto LABEL_138;
            v133 = *(_QWORD *)(v128 + 16);
            if (v133 != *(_QWORD *)(v130 + 16))
              goto LABEL_138;
            if (v133 && v128 != v130)
              break;
LABEL_126:
            v135 = *(_QWORD *)(v127 + 16);
            if (v135 != *(_QWORD *)(v131 + 16))
              goto LABEL_138;
            if (v135 && v127 != v131)
            {
              v136 = (_QWORD *)(v127 + 32);
              v137 = (_QWORD *)(v131 + 32);
              while (*v136 == *v137 && v136[3] == v137[3])
              {
                v137 += 5;
                v136 += 5;
                if (!--v135)
                  goto LABEL_133;
              }
LABEL_138:
              swift_release();
              v140 = *(_QWORD *)(v122 + 232);
              v141 = *(_QWORD *)(v122 + 240);
              v142 = *(unsigned __int8 *)(v122 + 120);
              v143 = *(unsigned int *)(v122 + 28);
              LOBYTE(v190) = *(_BYTE *)(v122 + 32);
              sub_1B1FD8C68(v140, v141, v124, v142, v143 | ((unint64_t)v190 << 32), 0, 0, 0);
              goto LABEL_139;
            }
LABEL_133:
            swift_release();
            sub_1B1A10BB0(v124);
LABEL_139:
            v121 += 48;
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v122 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v122 + 376));
            swift_release();
            if (v121 == v151)
              goto LABEL_9;
          }
          v138 = (_QWORD *)(v128 + 32);
          v139 = (_QWORD *)(v130 + 32);
          while (*v138 == *v139 && v138[3] == v139[3])
          {
            v139 += 5;
            v138 += 5;
            if (!--v133)
              goto LABEL_126;
          }
          goto LABEL_138;
        }
LABEL_9:
        sub_1B19ED720((uint64_t)v156);
        sub_1B19ED720((uint64_t)v155);
        sub_1B19ED720((uint64_t)v154);
        sub_1B19ED720((uint64_t)v153);
        sub_1B19ED720((uint64_t)v152);
        sub_1B1A086DC(v197, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
      else
      {
        sub_1B19ED720((uint64_t)v156);
        sub_1B19ED720((uint64_t)v155);
        sub_1B19ED720((uint64_t)v154);
        sub_1B19ED720((uint64_t)v153);
        sub_1B19ED720((uint64_t)v152);
      }
      v9 = v145 + 1;
    }
    while (v145 != 8);
    swift_setDeallocating();
    return swift_deallocClassInstance();
  }
  return result;
}

_QWORD *sub_1B20BA7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t inited;
  _BYTE v11[40];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD v24[12];
  _OWORD v25[6];
  uint64_t v26;

  v4 = a4;
  v26 = *MEMORY[0x1E0C80C00];
  v6 = a4 & 0x100000000;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v7 = qword_1ED4D09F8;
  if (v6)
    v4 = 0;
  v8 = v6 >> 31;
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Authoring;
  *(_QWORD *)(inited + 40) = &off_1E63C3488;
  *(_QWORD *)(inited + 48) = &type metadata for OrthographicCamera;
  *(_QWORD *)(inited + 56) = &off_1E6393C48;
  v18 = v7;
  v19 = v4;
  v20 = v8;
  v21 = 1;
  v22 = 2;
  v23 = 0;
  swift_retain();
  sub_1B209DF18(inited, (uint64_t)v11);
  swift_setDeallocating();
  swift_release();
  sub_1B1E8FCE4(a1, (uint64_t)v11, 0x200000000, v24);
  sub_1B1A18378((uint64_t)v24, (uint64_t)v25, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v25[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v11);
  v14 = v25[2];
  v15 = v25[3];
  v16 = v25[4];
  v17 = v25[5];
  v12 = v25[0];
  v13 = v25[1];
  sub_1B1BEAAFC(0);
  sub_1B19ED720((uint64_t)v11);
  return sub_1B1A086DC(v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

void sub_1B20BA9D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  __objc2_class **v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  __objc2_class **v66;
  __objc2_class_ro *info;
  uint64_t v68;
  unint64_t v69;
  unint64_t cache;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __objc2_class **v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __objc2_class **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __objc2_class **v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  unint64_t v117;
  char v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  _QWORD *v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  int64_t v134;
  unint64_t v135;
  __objc2_class **v136;
  char v137;
  char v138;
  char v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  char v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  _QWORD *v148;
  __objc2_class_ro *v149;
  uint64_t v150;
  void *v151;
  int64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  __objc2_class **v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  char *v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __objc2_class **v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  char v189;
  unint64_t v190;
  char v191;
  uint64_t v192;
  unint64_t v193;
  char v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  char v199;
  uint64_t v200;
  unint64_t v201;
  char v202;
  char v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  _QWORD *v207;
  unint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  _QWORD *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int64_t v235;
  __objc2_class **v236;
  __objc2_class **v237;
  uint64_t v238;
  __int128 v239;
  unint64_t v240;
  uint64_t (*v241)(uint64_t *);
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  char *v247;
  _QWORD v248[6];
  _QWORD v249[6];
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _OWORD v262[2];
  uint64_t v263;
  __int128 v264;
  __int128 v265;
  uint64_t (*v266)(uint64_t, uint64_t);
  _OWORD v267[2];
  uint64_t (*v268)(uint64_t, uint64_t);
  _OWORD v269[2];
  uint64_t v270;
  uint64_t v271;
  int v272;
  char v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  _QWORD v277[12];
  __int128 aBlock;
  __int128 v279;
  uint64_t (*v280)(uint64_t, uint64_t);
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  _BYTE v286[40];
  uint64_t v287;

  v287 = *MEMORY[0x1E0C80C00];
  v4 = sub_1B222826C();
  v231 = *(_QWORD *)(v4 - 8);
  v232 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v224 = (char *)&v209 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v223 = (char *)&v209 - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v230 = (char *)&v209 - v12;
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v229 = (char *)&v209 - v16;
  if (a3)
  {
    v17 = objc_msgSend(a3, sel_assetRegistry, v15);
    v18 = objc_msgSend(v17, sel_rootNode);

    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = sub_1B1DBA7D0;
    *(_QWORD *)(v19 + 24) = 0;
    v280 = sub_1B1F77960;
    v281 = v19;
    *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v279 = sub_1B1DBA948;
    *((_QWORD *)&v279 + 1) = &unk_1E63D4A38;
    v20 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v18, sel_enumerateHierarchyUsingBlock_, v20);

    _Block_release(v20);
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    v271 = qword_1ED4D09F8;
    v272 = 0;
    v273 = 2;
    v274 = 0;
    v275 = 2;
    v276 = 0;
    swift_retain();
    sub_1B1E38AA8(1, (uint64_t)v262);
    swift_release();
    v21 = (char *)objc_msgSend(a3, sel_scene);
    v22 = *(_QWORD *)&v21[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
    swift_retain();

    v269[0] = v262[0];
    v269[1] = v262[1];
    v270 = v263;
    sub_1B1E8FCE4(v22, (uint64_t)v269, 0x200000000, v277);
    sub_1B1A18378((uint64_t)v277, (uint64_t)&aBlock, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (!(_QWORD)aBlock)
    {
      swift_release();
      sub_1B19ED720((uint64_t)v262);
      return;
    }
    v264 = aBlock;
    v265 = v279;
    v212 = v281;
    v266 = v280;
    v24 = v282;
    v23 = v283;
    v25 = v285;
    v216 = v284;
    swift_release();
    if (v25 <= 0 || !v24)
    {
      sub_1B19ED720((uint64_t)v262);
LABEL_183:
      sub_1B1A086DC(v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      return;
    }
    v209 = v24;
    v215 = v216[4];
    v214 = *(unsigned __int8 *)(v23 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v267[0] = v264;
    v267[1] = v265;
    v268 = v266;
    v210 = v216 + 8;
    v211 = v216 + 6;
    swift_retain();
    swift_retain();
    swift_retain();
    v26 = 0;
    v238 = 0;
    v27 = MEMORY[0x1E0DEE9D8];
    v222 = MEMORY[0x1E0DEE9C0] + 8;
    while (1)
    {
      v213 = v26;
      v28 = (unsigned int *)(v212 + 48 * v26);
      v29 = *v28;
      v220 = v28[1];
      v31 = (uint64_t *)*((_QWORD *)v28 + 2);
      v30 = *((_QWORD *)v28 + 3);
      v32 = *((_QWORD *)v28 + 5);
      v218 = *((_QWORD *)v28 + 4);
      if (v214)
      {
        v33 = *(os_unfair_lock_s **)(v32 + 376);
        swift_retain();
        os_unfair_lock_lock(v33);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v215);
      sub_1B1A18378((uint64_t)v211, (uint64_t)v286, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 16) + 32) + 16);
      v35 = v216;
      v36 = v216[4];
      v217 = (char *)v32;
      v37 = v34 + 1;
      v38 = 48 * (v34 + 1);
      swift_retain();
      v35[6] = ecs_stack_allocator_allocate(v36, v38, 8);
      v35[7] = v37;
      v39 = v210;
      v210[1] = 0;
      v39[2] = 0;
      *v39 = 0;
      swift_release();
      v40 = v218;
      v219 = sub_1B1A12038((uint64_t)&type metadata for GraphComponent, (uint64_t)&off_1E637F718, v31, v30, v218, (uint64_t)v35);
      if (v31)
      {
        if (v40)
        {
          v41 = 0;
          while (1)
          {
            v221 = v41;
            v46 = *(_QWORD *)(v219 + 40 * v41 + 32);
            v246 = sub_1B1C6D068(v27);
            v247 = v47;
            v237 = (__objc2_class **)v46;
            v48 = *(_QWORD *)(v46 + 24);
            v220 = v46 + 24;
            v244 = v27;
            v245 = (_QWORD *)MEMORY[0x1E0DEE9E0];
            if (v48 >> 62)
              break;
            v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain_n();
            if (v49)
              goto LABEL_24;
LABEL_96:
            swift_bridgeObjectRelease_n();
            v127 = v244;
            if (v244 >> 62)
            {
              swift_bridgeObjectRetain();
              v44 = sub_1B22296AC();
              swift_bridgeObjectRelease();
              v45 = v127;
              if (!v44)
                goto LABEL_98;
            }
            else
            {
              v45 = v244;
              if (!*(_QWORD *)((v244 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_98:
                swift_bridgeObjectRelease();
                goto LABEL_21;
              }
            }
            sub_1B19F4AF4(v45);
LABEL_21:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v41 = v221 + 1;
            if (v221 + 1 == v218)
              goto LABEL_16;
          }
          swift_bridgeObjectRetain_n();
          v49 = sub_1B22296AC();
          if (!v49)
            goto LABEL_96;
LABEL_24:
          v50 = 0;
          v51 = v48 & 0xC000000000000001;
          v225 = v48 + 32;
          v226 = v48 & 0xC000000000000001;
          v227 = v49;
          v228 = v48;
LABEL_28:
          if (v51)
          {
            v236 = (__objc2_class **)MEMORY[0x1B5E21018](v50, v48);
          }
          else
          {
            v236 = *(__objc2_class ***)(v225 + 8 * v50);
            swift_retain();
          }
          if (*(_QWORD *)(v246 + 16))
          {
            sub_1B1DC3AC8((uint64_t)v236);
            if ((v52 & 1) != 0)
            {
LABEL_35:
              swift_release();
              goto LABEL_27;
            }
          }
          if (v245[2])
          {
            sub_1B1DC3AC8((uint64_t)v236);
            if ((v53 & 1) != 0)
              goto LABEL_35;
            v233 = v50;
          }
          else
          {
            v233 = v50;
          }
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v55 = (uint64_t)v245;
          *(_QWORD *)&v239 = v245;
          v245 = (_QWORD *)0x8000000000000000;
          v56 = v236;
          v57 = sub_1B1DC3AC8((uint64_t)v236);
          v59 = v58;
          v60 = *(_QWORD *)(v55 + 16) + ((v58 & 1) == 0);
          if (*(_QWORD *)(v55 + 24) >= v60)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_1B1EA8C54();
          }
          else
          {
            sub_1B1E92218(v60, isUniquelyReferenced_nonNull_native);
            v61 = sub_1B1DC3AC8((uint64_t)v56);
            if ((v59 & 1) != (v62 & 1))
              goto LABEL_187;
            v57 = v61;
          }
          v63 = MEMORY[0x1E0DEE9D8];
          v64 = v238;
          v65 = (_QWORD *)v239;
          if ((v59 & 1) != 0)
          {
            *(_BYTE *)(*(_QWORD *)(v239 + 56) + v57) = 1;
            v66 = v236;
          }
          else
          {
            *(_QWORD *)(v239 + 8 * (v57 >> 6) + 64) |= 1 << v57;
            v66 = v236;
            *(_QWORD *)(v65[6] + 8 * v57) = v236;
            *(_BYTE *)(v65[7] + v57) = 1;
            ++v65[2];
          }
          v245 = v65;
          swift_bridgeObjectRelease();
          info = (*(__objc2_class **)((char *)v66 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw))->isa[3].info;
          v68 = swift_retain();
          ((void (*)(_QWORD *__return_ptr, uint64_t))info)(v248, v68);
          v254 = v248[1];
          v255 = v248[0];
          sub_1B1B28C6C((uint64_t)&v254);
          v253 = v248[2];
          sub_1B1B28C6C((uint64_t)&v253);
          v252 = v248[3];
          sub_1B1B28C6C((uint64_t)&v252);
          v251 = v248[4];
          sub_1B1B28C6C((uint64_t)&v251);
          v250 = v248[5];
          sub_1B1B28C6C((uint64_t)&v250);
          v69 = *(_QWORD *)(v255 + 16);
          sub_1B1B28C6C((uint64_t)&v255);
          v234 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
          cache = (unint64_t)(*(__objc2_class **)((char *)v66 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs))->cache;
          if (cache <= v69)
            cache = v69;
          if (!cache)
          {
            v75 = v63;
            v83 = *(_QWORD *)(v63 + 16);
            if (!v83)
              goto LABEL_66;
LABEL_61:
            v84 = 32;
            while (1)
            {
              if (*(_QWORD *)(v75 + v84))
              {
                v85 = swift_retain();
                sub_1B1C51AF4(v85, 1, 0x1000000000000000uLL, 0, v63, (uint64_t)sub_1B20BE660, 0, (uint64_t *)&v245, (uint64_t)&v246, (uint64_t)&v244);
                if (v64)
                  goto LABEL_185;
                swift_release();
              }
              v84 += 16;
              if (!--v83)
                goto LABEL_66;
            }
          }
          *(_QWORD *)&v239 = v63;
          v235 = cache;
          swift_retain();
          sub_1B202A270(0, v235, 0);
          v72 = v234;
          v71 = v235;
          v73 = 0;
          v74 = 0;
          v75 = v239;
          while (1)
          {
            v76 = *(uint64_t *)((char *)v66 + v72);
            if (v74 >= *(_QWORD *)(v76 + 16))
              break;
            v77 = v76 + v73;
            v78 = *(_QWORD *)(v77 + 32);
            if (!v78)
              goto LABEL_54;
            v79 = *(_QWORD *)(v77 + 40);
            swift_retain();
            v71 = v235;
LABEL_55:
            *(_QWORD *)&v239 = v75;
            v81 = *(_QWORD *)(v75 + 16);
            v80 = *(_QWORD *)(v75 + 24);
            if (v81 >= v80 >> 1)
            {
              sub_1B202A270(v80 > 1, v81 + 1, 1);
              v72 = v234;
              v71 = v235;
              v75 = v239;
            }
            ++v74;
            *(_QWORD *)(v75 + 16) = v81 + 1;
            v82 = v75 + 16 * v81;
            *(_QWORD *)(v82 + 32) = v78;
            *(_QWORD *)(v82 + 40) = v79;
            v73 += 16;
            if (v71 == v74)
            {
              swift_release();
              v63 = MEMORY[0x1E0DEE9D8];
              v64 = v238;
              v83 = *(_QWORD *)(v75 + 16);
              if (v83)
                goto LABEL_61;
LABEL_66:
              swift_bridgeObjectRelease();
              sub_1B1C785F0(0);
              v86 = v236;
              if (!sub_1B1BBB394(v236))
                goto LABEL_71;
              v87 = (char *)v86 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
              v88 = v232;
              v89 = *(void (**)(char *, char *, uint64_t))(v231 + 16);
              v90 = v229;
              v89(v229, v87, v232);
              v89(v230, v90, v88);
              v91 = sub_1B1C63914(0, 1, 1, v63);
              v93 = *(_QWORD *)(v91 + 16);
              v92 = *(_QWORD *)(v91 + 24);
              if (v93 >= v92 >> 1)
                v91 = sub_1B1C63914(v92 > 1, v93 + 1, 1, v91);
              *(_QWORD *)(v91 + 16) = v93 + 1;
              v94 = v231;
              v95 = v91
                  + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))
                  + *(_QWORD *)(v231 + 72) * v93;
              v96 = v232;
              (*(void (**)(unint64_t, char *, uint64_t))(v231 + 32))(v95, v230, v232);
              (*(void (**)(char *, uint64_t))(v94 + 8))(v229, v96);
              v63 = MEMORY[0x1E0DEE9D8];
              *(_QWORD *)&v239 = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
              *((_QWORD *)&v239 + 1) = v97;
              sub_1B1C5C9C4((uint64_t)sub_1B20BE660, 0, 1, 0x1000000000000000uLL, 0, v91, (uint64_t)&v239);
              if (v64)
                goto LABEL_191;
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_71:
              type metadata accessor for Node();
              type metadata accessor for AuthoringNode();
              if (swift_dynamicCastMetatype())
              {
                v98 = v236;
                v99 = v234;
                swift_retain();
                v100 = swift_bridgeObjectRetain();
                v101 = sub_1B1C4EDA0(v100, (uint64_t *)&v245, (uint64_t)&v246);
                swift_bridgeObjectRelease();
                *(__objc2_class **)((char *)v98 + v99) = (__objc2_class *)v101;
                swift_release();
                swift_bridgeObjectRelease();
              }
              else
              {
                v98 = v236;
              }
              v102 = swift_allocObject();
              *(_QWORD *)(v102 + 16) = sub_1B20BE660;
              *(_QWORD *)(v102 + 24) = 0;
              v103 = swift_allocObject();
              *(_BYTE *)(v103 + 16) = 1;
              *(_QWORD *)(v103 + 24) = 0x1000000000000000;
              *(_BYTE *)(v103 + 32) = 0;
              v104 = v237;
              *(_QWORD *)(v103 + 40) = &v246;
              *(_QWORD *)(v103 + 48) = v104;
              *(_QWORD *)(v103 + 56) = v63;
              *(_QWORD *)(v103 + 64) = sub_1B20BE660;
              *(_QWORD *)(v103 + 72) = 0;
              *(_QWORD *)(v103 + 80) = &v245;
              *(_QWORD *)(v103 + 88) = &v244;
              v105 = swift_allocObject();
              *(_QWORD *)(v105 + 16) = sub_1B20BE6E0;
              *(_QWORD *)(v105 + 24) = v103;
              *(_QWORD *)&v239 = v104;
              *((_QWORD *)&v239 + 1) = v98;
              v240 = v63;
              v241 = sub_1B20BFC34;
              v242 = v105;
              v243 = &v244;
              swift_retain();
              swift_retain();
              swift_retain();
              sub_1B1C6BE78(&v239, *(uint64_t (**)(_OWORD *))(v102 + 16));
              swift_release();
              swift_release();
              swift_release_n();
              swift_release();
              v238 = v64;
              if (v64)
                goto LABEL_188;
              v106 = swift_isUniquelyReferenced_nonNull_native();
              v107 = v246;
              *(_QWORD *)&v239 = v246;
              v246 = 0x8000000000000000;
              v109 = sub_1B1DC3AC8((uint64_t)v98);
              v110 = v108;
              v111 = *(_QWORD *)(v107 + 16) + ((v108 & 1) == 0);
              if (*(_QWORD *)(v107 + 24) < v111)
              {
                sub_1B1E91F98(v111, v106);
                v112 = sub_1B1DC3AC8((uint64_t)v98);
                if ((v110 & 1) == (v113 & 1))
                {
                  v109 = v112;
                  if ((v110 & 1) == 0)
                    goto LABEL_78;
LABEL_85:
                  v246 = v239;
                  swift_bridgeObjectRelease();
                  goto LABEL_86;
                }
LABEL_187:
                sub_1B2229FC4();
                __break(1u);
LABEL_188:
                swift_release_n();
                swift_bridgeObjectRelease_n();
LABEL_186:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                __break(1u);
              }
              if ((v106 & 1) != 0)
              {
                if ((v108 & 1) != 0)
                  goto LABEL_85;
              }
              else
              {
                sub_1B1EA8AC4();
                if ((v110 & 1) != 0)
                  goto LABEL_85;
              }
LABEL_78:
              v114 = v239;
              *(_QWORD *)(v239 + 8 * (v109 >> 6) + 64) |= 1 << v109;
              *(_QWORD *)(*(_QWORD *)(v114 + 48) + 8 * v109) = v98;
              ++*(_QWORD *)(v114 + 16);
              v246 = v114;
              swift_bridgeObjectRelease();
              v115 = v247;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v115 = sub_1B1C63900(0, *((_QWORD *)v115 + 2) + 1, 1, v115);
              v117 = *((_QWORD *)v115 + 2);
              v116 = *((_QWORD *)v115 + 3);
              if (v117 >= v116 >> 1)
                v115 = sub_1B1C63900(v116 > 1, v117 + 1, 1, v115);
              *((_QWORD *)v115 + 2) = v117 + 1;
              v98 = v236;
              *(_QWORD *)&v115[8 * v117 + 32] = v236;
              v247 = v115;
LABEL_86:
              v118 = swift_isUniquelyReferenced_nonNull_native();
              v119 = (uint64_t)v245;
              *(_QWORD *)&v239 = v245;
              v245 = (_QWORD *)0x8000000000000000;
              v120 = sub_1B1DC3AC8((uint64_t)v98);
              v122 = v121;
              v123 = *(_QWORD *)(v119 + 16) + ((v121 & 1) == 0);
              if (*(_QWORD *)(v119 + 24) >= v123)
              {
                if ((v118 & 1) == 0)
                  sub_1B1EA8C54();
              }
              else
              {
                sub_1B1E92218(v123, v118);
                v124 = sub_1B1DC3AC8((uint64_t)v98);
                if ((v122 & 1) != (v125 & 1))
                  goto LABEL_187;
                v120 = v124;
              }
              v27 = MEMORY[0x1E0DEE9D8];
              v126 = (_QWORD *)v239;
              if ((v122 & 1) != 0)
              {
                *(_BYTE *)(*(_QWORD *)(v239 + 56) + v120) = 0;
              }
              else
              {
                *(_QWORD *)(v239 + 8 * (v120 >> 6) + 64) |= 1 << v120;
                *(_QWORD *)(v126[6] + 8 * v120) = v98;
                *(_BYTE *)(v126[7] + v120) = 0;
                ++v126[2];
              }
              v245 = v126;
              swift_release_n();
              swift_bridgeObjectRelease();
              v49 = v227;
              v48 = v228;
              v50 = v233;
              v51 = v226;
LABEL_27:
              if (++v50 == v49)
                goto LABEL_96;
              goto LABEL_28;
            }
          }
          v78 = 0;
LABEL_54:
          v79 = 0;
          goto LABEL_55;
        }
        goto LABEL_16;
      }
      if ((_DWORD)v29 != (_DWORD)v220)
        break;
LABEL_16:
      v42 = v238;
      sub_1B1F05D48(v216, (unsigned __int16 **)v267, (uint64_t)v286);
      v238 = v42;
      v43 = v217;
      sub_1B1F03804(v217);
      ecs_stack_allocator_pop_snapshot(v215);
      if (v214)
      {
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v43 + 43));
        os_unfair_lock_unlock(*((os_unfair_lock_t *)v43 + 47));
      }
      swift_release();
      v26 = v213 + 1;
      if (v213 + 1 == v209)
      {
        sub_1B19ED720((uint64_t)v262);
        sub_1B1A086DC(v277, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        goto LABEL_183;
      }
    }
    while (1)
    {
      v225 = v29;
      v130 = *(_QWORD *)(v219 + 40 * v29 + 32);
      v246 = sub_1B1C6D068(v27);
      v247 = v131;
      v132 = *(_QWORD *)(v130 + 24);
      v221 = v130 + 24;
      v244 = v27;
      v245 = (_QWORD *)MEMORY[0x1E0DEE9E0];
      if (v132 >> 62)
        break;
      v133 = *(_QWORD *)((v132 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v133)
        goto LABEL_104;
LABEL_177:
      swift_bridgeObjectRelease_n();
      v208 = v244;
      if (v244 >> 62)
      {
        swift_bridgeObjectRetain();
        v128 = sub_1B22296AC();
        swift_bridgeObjectRelease();
        v129 = v208;
        if (!v128)
          goto LABEL_179;
      }
      else
      {
        v129 = v244;
        if (!*(_QWORD *)((v244 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_179:
          swift_bridgeObjectRelease();
          goto LABEL_101;
        }
      }
      sub_1B19F4AF4(v129);
LABEL_101:
      v29 = v225 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v29 == v220)
        goto LABEL_16;
    }
    swift_bridgeObjectRetain_n();
    v133 = sub_1B22296AC();
    if (!v133)
      goto LABEL_177;
LABEL_104:
    v134 = 0;
    v135 = v132 & 0xC000000000000001;
    v226 = v132 + 32;
    v227 = v132 & 0xC000000000000001;
    v233 = v130;
    v234 = v132;
    v228 = v133;
    while (1)
    {
      if (v135)
      {
        v136 = (__objc2_class **)MEMORY[0x1B5E21018](v134, v132);
      }
      else
      {
        v136 = *(__objc2_class ***)(v226 + 8 * v134);
        swift_retain();
      }
      if (!*(_QWORD *)(v246 + 16) || (sub_1B1DC3AC8((uint64_t)v136), (v137 & 1) == 0))
      {
        if (!v245[2])
        {
          v235 = v134;
LABEL_116:
          v139 = swift_isUniquelyReferenced_nonNull_native();
          v140 = (uint64_t)v245;
          *(_QWORD *)&v239 = v245;
          v245 = (_QWORD *)0x8000000000000000;
          v141 = sub_1B1DC3AC8((uint64_t)v136);
          v143 = v142;
          v144 = *(_QWORD *)(v140 + 16) + ((v142 & 1) == 0);
          if (*(_QWORD *)(v140 + 24) >= v144)
          {
            if ((v139 & 1) == 0)
              sub_1B1EA8C54();
          }
          else
          {
            sub_1B1E92218(v144, v139);
            v145 = sub_1B1DC3AC8((uint64_t)v136);
            if ((v143 & 1) != (v146 & 1))
              goto LABEL_187;
            v141 = v145;
          }
          v147 = MEMORY[0x1E0DEE9D8];
          v148 = (_QWORD *)v239;
          if ((v143 & 1) != 0)
          {
            *(_BYTE *)(*(_QWORD *)(v239 + 56) + v141) = 1;
          }
          else
          {
            *(_QWORD *)(v239 + 8 * (v141 >> 6) + 64) |= 1 << v141;
            *(_QWORD *)(v148[6] + 8 * v141) = v136;
            *(_BYTE *)(v148[7] + v141) = 1;
            ++v148[2];
          }
          v245 = v148;
          swift_bridgeObjectRelease();
          v149 = (*(__objc2_class **)((char *)v136 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw))->isa[3].info;
          v150 = swift_retain();
          ((void (*)(_QWORD *__return_ptr, uint64_t))v149)(v249, v150);
          v261 = v249[0];
          v260 = v249[1];
          sub_1B1B28C6C((uint64_t)&v260);
          v259 = v249[2];
          sub_1B1B28C6C((uint64_t)&v259);
          v258 = v249[3];
          sub_1B1B28C6C((uint64_t)&v258);
          v257 = v249[4];
          sub_1B1B28C6C((uint64_t)&v257);
          v256 = v249[5];
          sub_1B1B28C6C((uint64_t)&v256);
          v151 = *(void **)(v261 + 16);
          sub_1B1B28C6C((uint64_t)&v261);
          v236 = (__objc2_class **)OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
          if ((*(__objc2_class **)((char *)v136 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs))->cache <= v151)
            v152 = (int64_t)v151;
          else
            v152 = (int64_t)(*(__objc2_class **)((char *)v136 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs))->cache;
          if (v152)
          {
            *(_QWORD *)&v239 = v147;
            v237 = v136;
            swift_retain();
            sub_1B202A270(0, v152, 0);
            v153 = 0;
            v154 = 0;
            v155 = v239;
            v156 = v236;
            while (1)
            {
              v157 = *(uint64_t *)((char *)v156 + (_QWORD)v237);
              if (v154 >= *(_QWORD *)(v157 + 16))
                break;
              v158 = v157 + v153;
              v159 = *(_QWORD *)(v158 + 32);
              if (!v159)
                goto LABEL_133;
              v160 = *(_QWORD *)(v158 + 40);
              swift_retain();
LABEL_134:
              *(_QWORD *)&v239 = v155;
              v162 = *(_QWORD *)(v155 + 16);
              v161 = *(_QWORD *)(v155 + 24);
              if (v162 >= v161 >> 1)
              {
                sub_1B202A270(v161 > 1, v162 + 1, 1);
                v156 = v236;
                v155 = v239;
              }
              ++v154;
              *(_QWORD *)(v155 + 16) = v162 + 1;
              v163 = v155 + 16 * v162;
              *(_QWORD *)(v163 + 32) = v159;
              *(_QWORD *)(v163 + 40) = v160;
              v153 += 16;
              if (v152 == v154)
              {
                v136 = v237;
                swift_release();
                goto LABEL_139;
              }
            }
            v159 = 0;
LABEL_133:
            v160 = 0;
            goto LABEL_134;
          }
          v155 = v147;
LABEL_139:
          v164 = *(_QWORD *)(v155 + 16);
          v165 = v233;
          if (v164)
          {
            v166 = 32;
            do
            {
              if (*(_QWORD *)(v155 + v166))
              {
                v167 = swift_retain();
                v168 = v238;
                sub_1B1C51AF4(v167, 1, 0x1000000000000000uLL, 0, MEMORY[0x1E0DEE9D8], (uint64_t)sub_1B20BE660, 0, (uint64_t *)&v245, (uint64_t)&v246, (uint64_t)&v244);
                v238 = v168;
                if (v168)
                {
LABEL_185:
                  swift_bridgeObjectRelease();
                  swift_release();
                  sub_1B1C785F0(0);
                  swift_bridgeObjectRelease_n();
                  swift_release_n();
                  goto LABEL_186;
                }
                swift_release();
              }
              v166 += 16;
              --v164;
            }
            while (v164);
          }
          swift_bridgeObjectRelease();
          sub_1B1C785F0(0);
          if (sub_1B1BBB394(v136))
          {
            v169 = v232;
            v170 = *(void (**)(char *, char *, uint64_t))(v231 + 16);
            v171 = v223;
            v170(v223, (char *)v136 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v232);
            v170(v224, v171, v169);
            v172 = sub_1B1C63914(0, 1, 1, MEMORY[0x1E0DEE9D8]);
            v174 = *(_QWORD *)(v172 + 16);
            v173 = *(_QWORD *)(v172 + 24);
            if (v174 >= v173 >> 1)
              v172 = sub_1B1C63914(v173 > 1, v174 + 1, 1, v172);
            *(_QWORD *)(v172 + 16) = v174 + 1;
            v175 = v231;
            v176 = v172
                 + ((*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80))
                 + *(_QWORD *)(v231 + 72) * v174;
            v177 = v232;
            (*(void (**)(unint64_t, char *, uint64_t))(v231 + 32))(v176, v224, v232);
            (*(void (**)(char *, uint64_t))(v175 + 8))(v223, v177);
            v178 = MEMORY[0x1E0DEE9D8];
            *(_QWORD *)&v239 = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
            *((_QWORD *)&v239 + 1) = v179;
            v180 = v238;
            sub_1B1C5C9C4((uint64_t)sub_1B20BE660, 0, 1, 0x1000000000000000uLL, 0, v172, (uint64_t)&v239);
            if (v180)
            {
LABEL_191:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release_n();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_186;
            }
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v178 = MEMORY[0x1E0DEE9D8];
            v180 = v238;
          }
          type metadata accessor for Node();
          type metadata accessor for AuthoringNode();
          if (swift_dynamicCastMetatype())
          {
            v181 = v236;
            swift_retain();
            v182 = swift_bridgeObjectRetain();
            v183 = sub_1B1C4EDA0(v182, (uint64_t *)&v245, (uint64_t)&v246);
            swift_bridgeObjectRelease();
            *(__objc2_class **)((char *)v181 + (_QWORD)v136) = (__objc2_class *)v183;
            swift_release();
            swift_bridgeObjectRelease();
          }
          v184 = swift_allocObject();
          *(_QWORD *)(v184 + 16) = sub_1B20BE660;
          *(_QWORD *)(v184 + 24) = 0;
          v185 = swift_allocObject();
          *(_BYTE *)(v185 + 16) = 1;
          *(_QWORD *)(v185 + 24) = 0x1000000000000000;
          *(_BYTE *)(v185 + 32) = 0;
          *(_QWORD *)(v185 + 40) = &v246;
          *(_QWORD *)(v185 + 48) = v165;
          *(_QWORD *)(v185 + 56) = v178;
          *(_QWORD *)(v185 + 64) = sub_1B20BE660;
          *(_QWORD *)(v185 + 72) = 0;
          *(_QWORD *)(v185 + 80) = &v245;
          *(_QWORD *)(v185 + 88) = &v244;
          v186 = swift_allocObject();
          *(_QWORD *)(v186 + 16) = sub_1B20BE6E0;
          *(_QWORD *)(v186 + 24) = v185;
          *(_QWORD *)&v239 = v165;
          *((_QWORD *)&v239 + 1) = v136;
          v240 = v178;
          v241 = sub_1B20BE6E4;
          v242 = v186;
          v243 = &v244;
          swift_retain();
          swift_retain();
          swift_retain();
          sub_1B1C6BE78(&v239, *(uint64_t (**)(_OWORD *))(v184 + 16));
          swift_release();
          swift_release();
          swift_release_n();
          swift_release();
          v238 = v180;
          if (v180)
            goto LABEL_188;
          v187 = swift_isUniquelyReferenced_nonNull_native();
          v188 = v246;
          *(_QWORD *)&v239 = v246;
          v246 = 0x8000000000000000;
          v190 = sub_1B1DC3AC8((uint64_t)v136);
          v191 = v189;
          v192 = *(_QWORD *)(v188 + 16) + ((v189 & 1) == 0);
          if (*(_QWORD *)(v188 + 24) >= v192)
          {
            if ((v187 & 1) != 0)
            {
              if ((v189 & 1) == 0)
                goto LABEL_157;
            }
            else
            {
              sub_1B1EA8AC4();
              if ((v191 & 1) == 0)
                goto LABEL_157;
            }
          }
          else
          {
            sub_1B1E91F98(v192, v187);
            v193 = sub_1B1DC3AC8((uint64_t)v136);
            if ((v191 & 1) != (v194 & 1))
              goto LABEL_187;
            v190 = v193;
            if ((v191 & 1) == 0)
            {
LABEL_157:
              v195 = v239;
              *(_QWORD *)(v239 + 8 * (v190 >> 6) + 64) |= 1 << v190;
              *(_QWORD *)(*(_QWORD *)(v195 + 48) + 8 * v190) = v136;
              ++*(_QWORD *)(v195 + 16);
              v246 = v195;
              swift_bridgeObjectRelease();
              v196 = v247;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v196 = sub_1B1C63900(0, *((_QWORD *)v196 + 2) + 1, 1, v196);
              v198 = *((_QWORD *)v196 + 2);
              v197 = *((_QWORD *)v196 + 3);
              if (v198 >= v197 >> 1)
                v196 = sub_1B1C63900(v197 > 1, v198 + 1, 1, v196);
              *((_QWORD *)v196 + 2) = v198 + 1;
              *(_QWORD *)&v196[8 * v198 + 32] = v136;
              v247 = v196;
              goto LABEL_165;
            }
          }
          v246 = v239;
          swift_bridgeObjectRelease();
LABEL_165:
          v199 = swift_isUniquelyReferenced_nonNull_native();
          v200 = (uint64_t)v245;
          *(_QWORD *)&v239 = v245;
          v245 = (_QWORD *)0x8000000000000000;
          v201 = sub_1B1DC3AC8((uint64_t)v136);
          v203 = v202;
          v204 = *(_QWORD *)(v200 + 16) + ((v202 & 1) == 0);
          if (*(_QWORD *)(v200 + 24) >= v204)
          {
            if ((v199 & 1) == 0)
              sub_1B1EA8C54();
          }
          else
          {
            sub_1B1E92218(v204, v199);
            v205 = sub_1B1DC3AC8((uint64_t)v136);
            if ((v203 & 1) != (v206 & 1))
              goto LABEL_187;
            v201 = v205;
          }
          v27 = MEMORY[0x1E0DEE9D8];
          v207 = (_QWORD *)v239;
          if ((v203 & 1) != 0)
          {
            *(_BYTE *)(*(_QWORD *)(v239 + 56) + v201) = 0;
          }
          else
          {
            *(_QWORD *)(v239 + 8 * (v201 >> 6) + 64) |= 1 << v201;
            *(_QWORD *)(v207[6] + 8 * v201) = v136;
            *(_BYTE *)(v207[7] + v201) = 0;
            ++v207[2];
          }
          v245 = v207;
          swift_release_n();
          swift_bridgeObjectRelease();
          v132 = v234;
          v134 = v235;
          v135 = v227;
          v133 = v228;
          goto LABEL_106;
        }
        sub_1B1DC3AC8((uint64_t)v136);
        if ((v138 & 1) == 0)
        {
          v235 = v134;
          goto LABEL_116;
        }
      }
      swift_release();
LABEL_106:
      if (++v134 == v133)
        goto LABEL_177;
    }
  }
}

void sub_1B20BC4CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24[32];
  int v25;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4B7B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v20 - v5;
  v7 = *(_QWORD *)(a1 + 8);
  if (**(__objc2_class ***)(v7 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) == _TtC3VFX21TextureDescriptorNode)
  {
    v8 = 0;
    v20 = *(_QWORD **)(a1 + 40);
    v9 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
    v22 = v1;
    v23 = MEMORY[0x1E0DEE9B8] + 8;
    v21 = (char *)&v20 - v5;
    do
    {
      v10 = *(_QWORD *)((char *)&unk_1E63B95D0 + v8 + 32);
      if (*(_QWORD *)(*(_QWORD *)(v7 + v9) + 16 * v10 + 32))
      {
        type metadata accessor for ConstantNode(0);
        swift_retain();
        v11 = swift_dynamicCastClass();
        if (v11)
        {
          sub_1B1A02864(v11 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)v24);
          swift_retain();
          if (swift_dynamicCast() && !v25)
          {
            type metadata accessor for ImplicitNilNode(0);
            v12 = (_QWORD *)swift_allocObject();
            v12[4] = 0;
            v12[2] = MEMORY[0x1E0DEE9D8];
            v12[3] = 0;
            sub_1B2228260();
            v13 = sub_1B222826C();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
            type metadata accessor for AuthoringNode();
            swift_allocObject();
            v14 = sub_1B20E4E94((uint64_t)v12, MEMORY[0x1E0DEE9D8], (uint64_t)v6, 0, 0xF000000000000000);
            swift_release();
            v15 = swift_retain();
            v16 = v20;
            MEMORY[0x1B5E2064C](v15);
            if (*(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              sub_1B2228AF4();
            sub_1B2228B30();
            sub_1B2228AD0();
            v17 = *(_QWORD **)(v7 + v9);
            swift_retain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v7 + v9) = v17;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v17 = sub_1B1FFEED4(v17);
              *(_QWORD *)(v7 + v9) = v17;
            }
            v19 = &v17[2 * v10];
            v19[4] = v14;
            v19[5] = 0;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            v6 = v21;
            goto LABEL_6;
          }
          swift_release();
        }
        swift_release();
      }
LABEL_6:
      v8 += 8;
    }
    while (v8 != 32);
  }
}

unint64_t sub_1B20BC7D4(uint64_t a1, uint64_t a2, float32x2_t *a3)
{
  float v3;
  __int128 v4;
  __int128 v5;
  unint64_t result;

  v3 = *(float *)a2;
  if (*(_BYTE *)(a2 + 4) == 1)
  {
    if (v3 == 0.0)
      return result;
    *(float32x2_t *)&v4 = vadd_f32(*a3, *a3);
    *((float *)&v4 + 2) = a3[1].f32[0] + a3[1].f32[0];
    HIDWORD(v4) = 0;
    *(_OWORD *)a3->f32 = v4;
  }
  else
  {
    *(float32x2_t *)&v5 = vadd_f32(*a3, *a3);
    *((float *)&v5 + 2) = a3[1].f32[0] + a3[1].f32[0];
    HIDWORD(v5) = 0;
    *(_OWORD *)a3->f32 = v5;
    *(float *)a2 = v3 * 0.5;
    *(_BYTE *)(a2 + 4) = 0;
  }
  return sub_1B20F1D90(0);
}

_QWORD *sub_1B20BC864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  id v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  os_unfair_lock_s *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  id v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v110;
  id v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  os_unfair_lock_s *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  id v151;
  void *v152;
  id v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  void *v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  char v172;
  id v173;
  void *v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  id v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  _QWORD *result;
  id v189;
  id v190;
  uint64_t v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t inited;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t updated;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _OWORD v232[2];
  uint64_t v233;
  _OWORD v234[2];
  uint64_t v235;
  _OWORD v236[2];
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  _OWORD v247[2];
  uint64_t v248;
  _OWORD v249[2];
  uint64_t v250;
  _OWORD v251[2];
  uint64_t v252;
  _OWORD v253[2];
  uint64_t v254;
  _OWORD v255[2];
  uint64_t v256;
  _OWORD v257[2];
  uint64_t v258;
  _QWORD v259[4];
  _QWORD v260[4];
  uint64_t v261;
  unint64_t v262;
  _OWORD v263[2];
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _OWORD v270[2];
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  _OWORD v277[2];
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  _BYTE v284[40];
  _BYTE v285[40];
  _BYTE v286[40];
  uint64_t v287;

  v2 = 0;
  v287 = *MEMORY[0x1E0C80C00];
  sub_1B1E3E1C0(3, (uint64_t)v232);
  v257[0] = v232[0];
  v257[1] = v232[1];
  v258 = v233;
  sub_1B1E8FCE4(a1, (uint64_t)v257, 0x200000000, v259);
  sub_1B1A18378((uint64_t)v259, (uint64_t)v277, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v191 = a1;
  if (*(_QWORD *)&v277[0])
  {
    v244 = v277[0];
    v245 = v277[1];
    v204 = v279;
    v246 = v278;
    v3 = v280;
    v4 = v281;
    v5 = v282;
    v6 = v283;
    sub_1B19ED720((uint64_t)v232);
    if (v6 > 0 && v3)
    {
      v215 = v5[4];
      v212 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      inited = type metadata accessor for ParticleInitScript(0);
      v247[0] = v244;
      v247[1] = v245;
      v248 = v246;
      v192 = v5 + 8;
      v195 = (uint64_t)(v5 + 6);
      swift_retain();
      swift_retain();
      swift_retain();
      v7 = 0;
      v198 = v5;
      v201 = v3;
      while (1)
      {
        v8 = (unsigned int *)(v204 + 48 * v7);
        v9 = *v8;
        v10 = v8[1];
        v12 = (uint64_t *)*((_QWORD *)v8 + 2);
        v11 = *((_QWORD *)v8 + 3);
        v14 = *((_QWORD *)v8 + 4);
        v13 = *((_QWORD *)v8 + 5);
        v220 = v13;
        v209 = v7;
        if (v212)
        {
          v15 = *(os_unfair_lock_s **)(v13 + 376);
          swift_retain();
          v16 = v15;
          v13 = v220;
          os_unfair_lock_lock(v16);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v220 + 344));
        }
        else
        {
          swift_retain();
        }
        v224 = v2;
        ecs_stack_allocator_push_snapshot(v215);
        sub_1B1A18378(v195, (uint64_t)v286, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 40) + 16) + 32) + 16);
        v18 = v5[4];
        v19 = v17 + 1;
        v20 = 48 * (v17 + 1);
        swift_retain();
        v5[6] = ecs_stack_allocator_allocate(v18, v20, 8);
        v5[7] = v19;
        v192[1] = 0;
        v192[2] = 0;
        *v192 = 0;
        swift_release();
        v21 = sub_1B1A12038(inited, (uint64_t)&off_1E6394B78, v12, v11, v14, (uint64_t)v5);
        v22 = v21;
        if (v12)
        {
          if (v14)
          {
            v23 = 0;
            v24 = *(_QWORD *)(*(_QWORD *)(inited - 8) + 72);
            v227 = v21;
            v221 = v24;
            while (1)
            {
              v25 = v22 + v24 * v23;
              v27 = *(_QWORD *)(v25 + 8);
              v26 = *(_QWORD *)(v25 + 16);
              if (*(_BYTE *)v25)
              {
                if (*(_BYTE *)v25 != 1)
                  break;
              }
              v28 = sub_1B2229D24();
              swift_bridgeObjectRelease();
              if ((v28 & 1) != 0)
              {
LABEL_18:
                *(_QWORD *)&v270[0] = v27;
                *((_QWORD *)&v270[0] + 1) = v26;
                *(_QWORD *)&v263[0] = 0x676E69646E69422ELL;
                *((_QWORD *)&v263[0] + 1) = 0xEA00000000002E73;
                sub_1B1A06460();
                if ((sub_1B2229274() & 1) == 0)
                  goto LABEL_12;
                v29 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
                v30 = (void *)sub_1B2228728();
                *(_QWORD *)&v270[0] = 0;
                v31 = objc_msgSend(v29, sel_initWithPattern_options_error_, v30, 0, v270);

                v32 = *(void **)&v270[0];
                if (!v31)
                  goto LABEL_142;
                v33 = HIBYTE(v26) & 0xF;
                if ((v26 & 0x2000000000000000) == 0)
                  v33 = v27;
                v34 = 7;
                if (((v26 >> 60) & ((v27 & 0x800000000000000) == 0)) != 0)
                  v34 = 11;
                *(_QWORD *)&v270[0] = 15;
                *((_QWORD *)&v270[0] + 1) = v34 | (v33 << 16);
                *(_QWORD *)&v263[0] = v27;
                *((_QWORD *)&v263[0] + 1) = v26;
                sub_1B1AED5E4(0, (unint64_t *)&qword_1EEF61588, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
                sub_1B1F7A1EC();
                v35 = v32;
                swift_bridgeObjectRetain();
                v36 = sub_1B2229040();
                v38 = v37;
                v39 = (void *)sub_1B2228728();
                v40 = (void *)sub_1B2228728();
                v41 = objc_msgSend(v31, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v39, 0, v36, v38, v40);

                v42 = sub_1B222874C();
                v44 = v43;

                *(_QWORD *)(v25 + 8) = v42;
                *(_QWORD *)(v25 + 16) = v44;
                swift_bridgeObjectRelease();
                ++v23;
                v22 = v227;
                v24 = v221;
                if (v23 == v14)
                  goto LABEL_42;
              }
              else
              {
LABEL_12:
                *(_QWORD *)(v25 + 8) = v27;
                *(_QWORD *)(v25 + 16) = v26;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                if (++v23 == v14)
                  goto LABEL_42;
              }
            }
            swift_bridgeObjectRelease();
            goto LABEL_18;
          }
        }
        else if ((_DWORD)v9 != (_DWORD)v10)
        {
          v45 = *(_QWORD *)(*(_QWORD *)(inited - 8) + 72);
          v46 = ~v9 + v10;
          v47 = (unint64_t *)(v21 + v45 * v9 + 16);
          while (2)
          {
            v49 = *(v47 - 1);
            v48 = *v47;
            if (*((_BYTE *)v47 - 16) && *((_BYTE *)v47 - 16) != 1)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v50 = sub_1B2229D24();
              swift_bridgeObjectRelease();
              if ((v50 & 1) == 0)
                goto LABEL_28;
            }
            *(_QWORD *)&v270[0] = v49;
            *((_QWORD *)&v270[0] + 1) = v48;
            *(_QWORD *)&v263[0] = 0x676E69646E69422ELL;
            *((_QWORD *)&v263[0] + 1) = 0xEA00000000002E73;
            sub_1B1A06460();
            if ((sub_1B2229274() & 1) != 0)
            {
              v51 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
              v52 = (void *)sub_1B2228728();
              *(_QWORD *)&v270[0] = 0;
              v53 = objc_msgSend(v51, sel_initWithPattern_options_error_, v52, 0, v270);

              v32 = *(void **)&v270[0];
              if (!v53)
              {
LABEL_142:
                v189 = v32;
                sub_1B2227FB4();

                swift_willThrow();
                goto LABEL_144;
              }
              v54 = HIBYTE(v48) & 0xF;
              if ((v48 & 0x2000000000000000) == 0)
                v54 = v49;
              v55 = 7;
              if (((v48 >> 60) & ((v49 & 0x800000000000000) == 0)) != 0)
                v55 = 11;
              *(_QWORD *)&v270[0] = 15;
              *((_QWORD *)&v270[0] + 1) = v55 | (v54 << 16);
              *(_QWORD *)&v263[0] = v49;
              *((_QWORD *)&v263[0] + 1) = v48;
              sub_1B1AED5E4(0, (unint64_t *)&qword_1EEF61588, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
              sub_1B1F7A1EC();
              v56 = v32;
              swift_bridgeObjectRetain();
              v57 = sub_1B2229040();
              v59 = v58;
              v60 = (void *)sub_1B2228728();
              v61 = (void *)sub_1B2228728();
              v62 = objc_msgSend(v53, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v60, 0, v57, v59, v61);

              v63 = sub_1B222874C();
              v65 = v64;

              *(v47 - 1) = v63;
              *v47 = v65;
              swift_bridgeObjectRelease();
              if (!v46)
                break;
            }
            else
            {
LABEL_28:
              *(v47 - 1) = v49;
              *v47 = v48;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              if (!v46)
                break;
            }
            --v46;
            v47 = (unint64_t *)((char *)v47 + v45);
            continue;
          }
        }
LABEL_42:
        v5 = v198;
        v2 = v224;
        sub_1B1F05D48(v198, (unsigned __int16 **)v247, (uint64_t)v286);
        sub_1B1F03804((char *)v220);
        ecs_stack_allocator_pop_snapshot(v215);
        if (v212)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v220 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v220 + 376));
        }
        swift_release();
        v7 = v209 + 1;
        if (v209 + 1 == v201)
        {
          sub_1B1A086DC(v259, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
          break;
        }
      }
    }
    sub_1B1A086DC(v259, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    a1 = v191;
  }
  else
  {
    sub_1B19ED720((uint64_t)v232);
  }
  sub_1B1E3E16C(3, (uint64_t)v234);
  v255[0] = v234[0];
  v255[1] = v234[1];
  v256 = v235;
  sub_1B1E8FCE4(a1, (uint64_t)v255, 0x200000000, v260);
  sub_1B1A18378((uint64_t)v260, (uint64_t)v270, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v270[0])
  {
    v241 = v270[0];
    v242 = v270[1];
    v210 = v272;
    v243 = v271;
    v66 = v273;
    v67 = v274;
    v68 = v275;
    v69 = v276;
    sub_1B19ED720((uint64_t)v234);
    if (v69 > 0 && v66)
    {
      v70 = v68[4];
      v71 = *(unsigned __int8 *)(v67 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      updated = type metadata accessor for ParticleUpdateScript(0);
      v249[0] = v241;
      v249[1] = v242;
      v250 = v243;
      v193 = v68 + 8;
      v196 = (uint64_t)(v68 + 6);
      swift_retain();
      swift_retain();
      swift_retain();
      v72 = 0;
      v202 = v70;
      v205 = v68;
      v199 = v71;
      while (1)
      {
        v218 = v72;
        v73 = (unsigned int *)(v210 + 48 * v72);
        v74 = *v73;
        v75 = v73[1];
        v77 = (uint64_t *)*((_QWORD *)v73 + 2);
        v76 = *((_QWORD *)v73 + 3);
        v78 = *((_QWORD *)v73 + 5);
        v228 = *((_QWORD *)v73 + 4);
        if (v71)
        {
          v79 = *(os_unfair_lock_s **)(v78 + 376);
          swift_retain();
          os_unfair_lock_lock(v79);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v78 + 344));
        }
        else
        {
          swift_retain();
        }
        v225 = v2;
        ecs_stack_allocator_push_snapshot(v70);
        sub_1B1A18378(v196, (uint64_t)v285, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v80 = v68[4];
        v81 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v78 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v68[6] = ecs_stack_allocator_allocate(v80, 48 * v81, 8);
        v68[7] = v81;
        v193[1] = 0;
        v193[2] = 0;
        *v193 = 0;
        swift_release();
        v82 = v228;
        v216 = v78;
        v222 = sub_1B1A12038(updated, (uint64_t)&off_1E639E488, v77, v76, v228, (uint64_t)v68);
        if (v77)
        {
          if (v228)
          {
            v83 = 0;
            v84 = *(_QWORD *)(*(_QWORD *)(updated - 8) + 72);
            v85 = v222;
            while (1)
            {
              v86 = v85 + v84 * v83;
              v88 = *(_QWORD *)v86;
              v87 = *(_QWORD *)(v86 + 8);
              if (*(_BYTE *)(v86 + 24))
              {
                if (*(_BYTE *)(v86 + 24) != 1)
                  break;
              }
              v89 = sub_1B2229D24();
              swift_bridgeObjectRelease();
              if ((v89 & 1) != 0)
              {
LABEL_65:
                *(_QWORD *)&v263[0] = v88;
                *((_QWORD *)&v263[0] + 1) = v87;
                v261 = 0x676E69646E69422ELL;
                v262 = 0xEA00000000002E73;
                sub_1B1A06460();
                if ((sub_1B2229274() & 1) == 0)
                  goto LABEL_59;
                v90 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
                v91 = (void *)sub_1B2228728();
                *(_QWORD *)&v263[0] = 0;
                v92 = objc_msgSend(v90, sel_initWithPattern_options_error_, v91, 0, v263);

                v32 = *(void **)&v263[0];
                if (!v92)
                  goto LABEL_142;
                v93 = HIBYTE(v87) & 0xF;
                if ((v87 & 0x2000000000000000) == 0)
                  v93 = v88;
                v94 = 7;
                if (((v87 >> 60) & ((v88 & 0x800000000000000) == 0)) != 0)
                  v94 = 11;
                *(_QWORD *)&v263[0] = 15;
                *((_QWORD *)&v263[0] + 1) = v94 | (v93 << 16);
                v261 = v88;
                v262 = v87;
                sub_1B1AED5E4(0, (unint64_t *)&qword_1EEF61588, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
                sub_1B1F7A1EC();
                v95 = v32;
                swift_bridgeObjectRetain();
                v96 = sub_1B2229040();
                v98 = v97;
                v99 = (void *)sub_1B2228728();
                v100 = (void *)sub_1B2228728();
                v101 = objc_msgSend(v92, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v99, 0, v96, v98, v100);

                v102 = sub_1B222874C();
                v104 = v103;

                *(_QWORD *)v86 = v102;
                *(_QWORD *)(v86 + 8) = v104;
                swift_bridgeObjectRelease();
                ++v83;
                v82 = v228;
                v85 = v222;
                if (v83 == v228)
                  goto LABEL_89;
              }
              else
              {
LABEL_59:
                *(_QWORD *)v86 = v88;
                *(_QWORD *)(v86 + 8) = v87;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                if (++v83 == v82)
                  goto LABEL_89;
              }
            }
            swift_bridgeObjectRelease();
            goto LABEL_65;
          }
        }
        else if ((_DWORD)v74 != (_DWORD)v75)
        {
          v105 = *(_QWORD *)(*(_QWORD *)(updated - 8) + 72);
          v106 = ~v74 + v75;
          v107 = v222 + v105 * v74;
          while (2)
          {
            v109 = *(_QWORD *)v107;
            v108 = *(_QWORD *)(v107 + 8);
            if (*(_BYTE *)(v107 + 24) && *(_BYTE *)(v107 + 24) != 1)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v110 = sub_1B2229D24();
              swift_bridgeObjectRelease();
              if ((v110 & 1) == 0)
                goto LABEL_75;
            }
            *(_QWORD *)&v263[0] = v109;
            *((_QWORD *)&v263[0] + 1) = v108;
            v261 = 0x676E69646E69422ELL;
            v262 = 0xEA00000000002E73;
            sub_1B1A06460();
            if ((sub_1B2229274() & 1) != 0)
            {
              v111 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
              v112 = (void *)sub_1B2228728();
              *(_QWORD *)&v263[0] = 0;
              v113 = objc_msgSend(v111, sel_initWithPattern_options_error_, v112, 0, v263);

              v32 = *(void **)&v263[0];
              if (!v113)
                goto LABEL_142;
              v114 = HIBYTE(v108) & 0xF;
              if ((v108 & 0x2000000000000000) == 0)
                v114 = v109;
              v115 = 7;
              if (((v108 >> 60) & ((v109 & 0x800000000000000) == 0)) != 0)
                v115 = 11;
              *(_QWORD *)&v263[0] = 15;
              *((_QWORD *)&v263[0] + 1) = v115 | (v114 << 16);
              v261 = v109;
              v262 = v108;
              sub_1B1AED5E4(0, (unint64_t *)&qword_1EEF61588, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
              sub_1B1F7A1EC();
              v116 = v32;
              swift_bridgeObjectRetain();
              v117 = sub_1B2229040();
              v119 = v118;
              v120 = (void *)sub_1B2228728();
              v121 = (void *)sub_1B2228728();
              v122 = objc_msgSend(v113, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v120, 0, v117, v119, v121);

              v123 = sub_1B222874C();
              v125 = v124;

              *(_QWORD *)v107 = v123;
              *(_QWORD *)(v107 + 8) = v125;
              swift_bridgeObjectRelease();
              if (!v106)
                break;
            }
            else
            {
LABEL_75:
              *(_QWORD *)v107 = v109;
              *(_QWORD *)(v107 + 8) = v108;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              if (!v106)
                break;
            }
            --v106;
            v107 += v105;
            continue;
          }
        }
LABEL_89:
        v68 = v205;
        v2 = v225;
        sub_1B1F05D48(v205, (unsigned __int16 **)v249, (uint64_t)v285);
        sub_1B1F03804((char *)v216);
        v70 = v202;
        ecs_stack_allocator_pop_snapshot(v202);
        v71 = v199;
        if (v199)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v216 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v216 + 376));
        }
        swift_release();
        v72 = v218 + 1;
        if (v218 + 1 == v66)
        {
          sub_1B1A086DC(v260, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
          break;
        }
      }
    }
    sub_1B1A086DC(v260, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    a1 = v191;
  }
  else
  {
    sub_1B19ED720((uint64_t)v234);
  }
  sub_1B1E3E480(3, (uint64_t)v236);
  v253[0] = v236[0];
  v253[1] = v236[1];
  v254 = v237;
  sub_1B1E8FCE4(a1, (uint64_t)v253, 0x200000000, &v261);
  sub_1B1A18378((uint64_t)&v261, (uint64_t)v263, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v263[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v236);
  v238 = v263[0];
  v239 = v263[1];
  v211 = v265;
  v240 = v264;
  v126 = v266;
  v127 = v267;
  v128 = v268;
  v129 = v269;
  sub_1B19ED720((uint64_t)v236);
  if (v129 <= 0 || !v126)
    return sub_1B1A086DC(&v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v130 = v128[4];
  v131 = *(unsigned __int8 *)(v127 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v214 = type metadata accessor for EmitterScript(0);
  v251[0] = v238;
  v251[1] = v239;
  v252 = v240;
  v194 = v128 + 8;
  v197 = (uint64_t)(v128 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v132 = 0;
  v206 = v128;
  v208 = v126;
  v203 = v130;
  v200 = v131;
  while (1)
  {
    v219 = v132;
    v133 = (unsigned int *)(v211 + 48 * v132);
    v134 = *v133;
    v135 = v133[1];
    v137 = (uint64_t *)*((_QWORD *)v133 + 2);
    v136 = *((_QWORD *)v133 + 3);
    v138 = *((_QWORD *)v133 + 5);
    v226 = v2;
    v229 = *((_QWORD *)v133 + 4);
    if (v131)
    {
      v139 = *(os_unfair_lock_s **)(v138 + 376);
      swift_retain();
      os_unfair_lock_lock(v139);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v138 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v130);
    sub_1B1A18378(v197, (uint64_t)v284, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v140 = v128[4];
    v141 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v138 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v128[6] = ecs_stack_allocator_allocate(v140, 48 * v141, 8);
    v128[7] = v141;
    v194[1] = 0;
    v194[2] = 0;
    *v194 = 0;
    swift_release();
    v217 = v138;
    v142 = sub_1B1A12038(v214, (uint64_t)&off_1E637A0A8, v137, v136, v229, (uint64_t)v128);
    v143 = v142;
    if (!v137)
      break;
    if (v229)
    {
      v144 = v229;
      v145 = 0;
      v146 = *(_QWORD *)(*(_QWORD *)(v214 - 8) + 72);
      v223 = v142;
      while (1)
      {
        v147 = v143 + v146 * v145;
        v148 = *(_QWORD *)(v147 + 8);
        v149 = *(_QWORD *)(v147 + 16);
        if (*(_BYTE *)v147)
        {
          if (*(_BYTE *)v147 != 1)
            break;
        }
        v150 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        if ((v150 & 1) != 0)
        {
LABEL_112:
          v230 = v148;
          v231 = v149;
          sub_1B1A06460();
          if ((sub_1B2229274() & 1) == 0)
            goto LABEL_106;
          v151 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
          v152 = (void *)sub_1B2228728();
          v230 = 0;
          v153 = objc_msgSend(v151, sel_initWithPattern_options_error_, v152, 0, &v230);

          v154 = (void *)v230;
          if (!v153)
            goto LABEL_143;
          v155 = HIBYTE(v149) & 0xF;
          if ((v149 & 0x2000000000000000) == 0)
            v155 = v148;
          v156 = 7;
          if (((v149 >> 60) & ((v148 & 0x800000000000000) == 0)) != 0)
            v156 = 11;
          v230 = 15;
          v231 = v156 | (v155 << 16);
          sub_1B1AED5E4(0, (unint64_t *)&qword_1EEF61588, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
          sub_1B1F7A1EC();
          v157 = v154;
          swift_bridgeObjectRetain();
          v158 = sub_1B2229040();
          v160 = v159;
          v161 = (void *)sub_1B2228728();
          v162 = (void *)sub_1B2228728();
          v163 = objc_msgSend(v153, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v161, 0, v158, v160, v162);

          v164 = sub_1B222874C();
          v166 = v165;

          *(_QWORD *)(v147 + 8) = v164;
          *(_QWORD *)(v147 + 16) = v166;
          swift_bridgeObjectRelease();
          ++v145;
          v144 = v229;
          v143 = v223;
          if (v145 == v229)
            goto LABEL_136;
        }
        else
        {
LABEL_106:
          *(_QWORD *)(v147 + 8) = v148;
          *(_QWORD *)(v147 + 16) = v149;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (++v145 == v144)
            goto LABEL_136;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_112;
    }
LABEL_136:
    v128 = v206;
    v2 = v226;
    sub_1B1F05D48(v206, (unsigned __int16 **)v251, (uint64_t)v284);
    sub_1B1F03804((char *)v217);
    v130 = v203;
    ecs_stack_allocator_pop_snapshot(v203);
    v131 = v200;
    if (v200)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v217 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v217 + 376));
    }
    swift_release();
    v132 = v219 + 1;
    if (v219 + 1 == v208)
    {
      sub_1B1A086DC(&v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      return sub_1B1A086DC(&v261, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  if ((_DWORD)v134 == (_DWORD)v135)
    goto LABEL_136;
  v167 = *(_QWORD *)(*(_QWORD *)(v214 - 8) + 72);
  v168 = ~v134 + v135;
  v169 = (unint64_t *)(v142 + v167 * v134 + 16);
  while (2)
  {
    v171 = *(v169 - 1);
    v170 = *v169;
    if (*((_BYTE *)v169 - 16) && *((_BYTE *)v169 - 16) != 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v172 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v172 & 1) == 0)
        goto LABEL_122;
    }
    v230 = v171;
    v231 = v170;
    sub_1B1A06460();
    if ((sub_1B2229274() & 1) == 0)
    {
LABEL_122:
      *(v169 - 1) = v171;
      *v169 = v170;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (!v168)
        goto LABEL_136;
LABEL_123:
      --v168;
      v169 = (unint64_t *)((char *)v169 + v167);
      continue;
    }
    break;
  }
  v173 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v174 = (void *)sub_1B2228728();
  v230 = 0;
  v175 = objc_msgSend(v173, sel_initWithPattern_options_error_, v174, 0, &v230);

  v154 = (void *)v230;
  if (v175)
  {
    v176 = HIBYTE(v170) & 0xF;
    if ((v170 & 0x2000000000000000) == 0)
      v176 = v171;
    v177 = 7;
    if (((v170 >> 60) & ((v171 & 0x800000000000000) == 0)) != 0)
      v177 = 11;
    v230 = 15;
    v231 = v177 | (v176 << 16);
    sub_1B1AED5E4(0, (unint64_t *)&qword_1EEF61588, MEMORY[0x1E0DEA790], MEMORY[0x1E0DEA7A0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    sub_1B1F7A1EC();
    v178 = v154;
    swift_bridgeObjectRetain();
    v179 = sub_1B2229040();
    v181 = v180;
    v182 = (void *)sub_1B2228728();
    v183 = (void *)sub_1B2228728();
    v184 = objc_msgSend(v175, sel_stringByReplacingMatchesInString_options_range_withTemplate_, v182, 0, v179, v181, v183);

    v185 = sub_1B222874C();
    v187 = v186;

    *(v169 - 1) = v185;
    *v169 = v187;
    swift_bridgeObjectRelease();
    if (!v168)
      goto LABEL_136;
    goto LABEL_123;
  }
LABEL_143:
  v190 = v154;
  sub_1B2227FB4();

  swift_willThrow();
LABEL_144:
  result = (_QWORD *)swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1B20BE1A0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  uint64_t v10;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  swift_retain();
  v3 = swift_bridgeObjectRetain();
  sub_1B20BEB0C(v3, v1, v2);
  v5 = v4;
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v5)
  {
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x1E0DEAFA0];
    v9[0] = 1;
    v7 = aUserdata[0];
    v8 = aUserdata[1];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B1E02AF4(v7, v8, (uint64_t)v9);
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
    return swift_release_n();
  }
  return result;
}

ValueMetadata *sub_1B20BE2B8(ValueMetadata *result, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  ValueMetadata *v5;
  uint64_t v6;
  uint64_t v7;

  if (result != &type metadata for Parent)
  {
    v5 = result;
    *a3 = (*a3 | (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 48))()) & 1;
    v6 = swift_conformsToProtocol2();
    if (v6)
      v7 = v6;
    else
      v7 = 0;
    if (v6)
      result = v5;
    else
      result = 0;
    if (result)
    {
      result = (ValueMetadata *)(*(uint64_t (**)(void))(v7 + 64))();
      if ((~(_DWORD)result & 0x2F00000) == 0)
        *a4 = 1;
    }
  }
  return result;
}

void sub_1B20BE354(double a1, float32x4_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  simd_float4 v13;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  simd_float4 v29;
  simd_float4 v31;

  v5 = sub_1B217DB20(0x100000000uLL, **(_QWORD **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues), (__n128)0, (__n128)xmmword_1B2244E20, 1.0);
  _ZF = (_DWORD)v5 == -1 && HIDWORD(v5) == 0;
  v7 = _ZF;
  if (!_ZF)
  {
    v8 = swift_retain();
    MEMORY[0x1E0C80A78](v8, v9);
    swift_bridgeObjectRetain();
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B19ED8D8);
    swift_bridgeObjectRelease();
    swift_release();
    v10 = swift_retain();
    MEMORY[0x1E0C80A78](v10, v11);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B20BFAE4);
    swift_release();
  }
  v12.i64[0] = 0x3F0000003F000000;
  v12.i64[1] = 0x3F0000003F000000;
  v13 = (simd_float4)vmulq_f32(a2, v12);
  v13.i32[3] = 0;
  v29 = v13;
  v31 = _simd_cos_f4(v13);
  _Q0 = _simd_sin_f4(v29);
  _Q7 = v31;
  _S4 = vmuls_lane_f32(v31.f32[0], *(float32x2_t *)_Q0.f32, 1);
  __asm { FMLA            S5, S4, V7.S[2] }
  _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
  __asm { FMLA            S6, S4, V0.S[2] }
  if (!v7)
  {
    v23 = swift_retain();
    MEMORY[0x1E0C80A78](v23, v24);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B20BFB00);
    swift_release();
    v25 = swift_retain();
    MEMORY[0x1E0C80A78](v25, v26);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B20BFB1C);
    swift_release();
    v27 = swift_retain();
    MEMORY[0x1E0C80A78](v27, v28);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B20BFB34);
    swift_release();
  }
}

void sub_1B20BE660(_OWORD *a1)
{
  __int128 v1;
  _OWORD v2[3];

  v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  v2[2] = a1[2];
  sub_1B20BC4CC((uint64_t)v2);
}

uint64_t sub_1B20BE690()
{
  return swift_deallocObject();
}

uint64_t sub_1B20BE6A0()
{
  return swift_deallocObject();
}

unint64_t sub_1B20BE6B4(unint64_t result)
{
  int v1;

  v1 = (result >> 59) & 2 | (result >> 2) & 1;
  if (v1)
  {
    if (v1 != 1)
      return result;
    result &= 0xEFFFFFFFFFFFFFFBLL;
  }
  return sub_1B19F8D00(result);
}

uint64_t sub_1B20BE6E4(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B1C6BEF0(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_1B20BE6EC()
{
  return swift_deallocObject();
}

uint64_t sub_1B20BE700()
{
  uint64_t v0;

  sub_1B20BE6B4(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B20BE72C(uint64_t *a1)
{
  uint64_t v1;

  return sub_1B1C6BEB4(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_1B20BE76C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B20BE790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B20BE858(0, &qword_1ED4B8278, &qword_1ED4B8270);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B20BE7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B20BE858(0, qword_1ED4B8298, &qword_1ED4B8290);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B20BE858(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1B20BE914(255, a3);
    v4 = sub_1B2229124();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1B20BE8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B20BE858(0, &qword_1ED4B8288, &qword_1ED4B8280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B20BE914(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    type metadata accessor for QueryResult2();
  return result;
}

uint64_t sub_1B20BE978(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B20BE9DC(0, &qword_1ED4B81C8, &qword_1ED4B81C0, (uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CDA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B20BE9DC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1B1AED5E4(255, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for QueryResult1);
    v6 = sub_1B2229124();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1B20BEA40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B20BE9DC(0, qword_1ED4B81D8, &qword_1ED4B81D0, (uint64_t)&type metadata for ParticleFluidSolver2DEmitter, (uint64_t)&off_1E63B46F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B20BEAA4(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_1B20BEACC()
{
  return swift_deallocObject();
}

uint64_t sub_1B20BEADC()
{
  return swift_deallocObject();
}

uint64_t sub_1B20BEAEC()
{
  return swift_deallocObject();
}

uint64_t sub_1B20BEAFC()
{
  return swift_deallocObject();
}

uint64_t sub_1B20BEB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *inited;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v9 = swift_bridgeObjectRetain();
  v10 = 0;
  v33 = v9;
  v34 = a2;
  v35 = a3;
  while (1)
  {
    do
    {
      if (v7)
      {
        v11 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v12 = v11 | (v10 << 6);
      }
      else
      {
        v13 = v10 + 1;
        if (v10 + 1 >= v8)
          goto LABEL_30;
        v14 = *(_QWORD *)(v31 + 8 * v13);
        if (!v14)
        {
          v13 = v10 + 2;
          if (v10 + 2 >= v8)
            goto LABEL_30;
          v14 = *(_QWORD *)(v31 + 8 * v13);
          if (!v14)
          {
            v13 = v10 + 3;
            if (v10 + 3 >= v8)
              goto LABEL_30;
            v14 = *(_QWORD *)(v31 + 8 * v13);
            if (!v14)
            {
              v13 = v10 + 4;
              if (v10 + 4 >= v8)
                goto LABEL_30;
              v14 = *(_QWORD *)(v31 + 8 * v13);
              if (!v14)
              {
                v13 = v10 + 5;
                if (v10 + 5 >= v8)
                  goto LABEL_30;
                v14 = *(_QWORD *)(v31 + 8 * v13);
                if (!v14)
                {
                  while (v8 - 6 != v10)
                  {
                    v14 = *(_QWORD *)(v9 + 8 * v10++ + 112);
                    if (v14)
                    {
                      v13 = v10 + 5;
                      goto LABEL_19;
                    }
                  }
LABEL_30:
                  swift_release();
                  return 0;
                }
              }
            }
          }
        }
LABEL_19:
        v7 = (v14 - 1) & v14;
        v12 = __clz(__rbit64(v14)) + (v13 << 6);
        v10 = v13;
      }
      v15 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v12);
      v16 = *(_QWORD **)(v15 + 80);
    }
    while (!v16[2]);
    v36 = v7;
    v37 = v10;
    v32 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v12);
    v17 = v16[4];
    v18 = v16[5];
    v19 = *(_QWORD **)(v15 + 88);
    v21 = v19[4];
    v20 = v19[5];
    v40 = v21;
    v22 = v19[7];
    v38 = v19[8];
    v39 = v19[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B19FA2B4(v21, v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v24 = 6245961;
    v23 = 0xE300000000000000;
    _s12ParameterOutCMa();
    inited = (_QWORD *)swift_initStackObject();
    swift_weakInit();
    swift_weakAssign();
    swift_bridgeObjectRelease();
    inited[3] = v17;
    inited[4] = v18;
    inited[5] = 6245961;
    inited[6] = 0xE300000000000000;
    inited[7] = v40;
    inited[8] = v20;
    inited[9] = v39;
    inited[10] = v22;
    inited[11] = v38;
    sub_1B1A06460();
    swift_bridgeObjectRetain();
    v26 = (_QWORD *)sub_1B2229280();
    swift_bridgeObjectRelease();
    if (v26[2] < 2uLL)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v26 = sub_1B1FFEE34(v26);
      --v26[2];
      swift_bridgeObjectRelease();
      v27 = MEMORY[0x1E0DEBAF0];
      sub_1B1A02758(0, (unint64_t *)&qword_1EEF5D530, MEMORY[0x1E0DEBAF0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      sub_1B20BFB60(&qword_1EEF5D538, (uint64_t)&qword_1EEF5D530, v27, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
      sub_1B1A06504();
      sub_1B22289BC();
      swift_bridgeObjectRelease();
      v24 = sub_1B2228968();
      v23 = v28;
    }
    swift_release();
    if (v24 == v34 && v23 == v35)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v32;
    }
    v29 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
      break;
    swift_release();
    swift_bridgeObjectRelease();
    v9 = v33;
    v7 = v36;
    v10 = v37;
  }
  swift_release();
  return v32;
}

uint64_t sub_1B20BEFAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t Strong;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  __int128 v22;
  uint64_t v23;

  if (*(_QWORD *)(*(_QWORD *)(a3 + 264) + 16))
  {
    v4 = result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(v4, a2);
    if ((v5 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v7 = (_QWORD *)Strong;
      if (*(__objc2_class **)Strong == _TtCO3VFX21GraphV1CodeGeneration11CodeSnippet)
      {
        v8 = *(_QWORD *)(Strong + 136);
        v9 = *(_QWORD *)(v8 + 336) == 0x726F6C6F43 && *(_QWORD *)(v8 + 344) == 0xE500000000000000;
        if (v9 || (sub_1B2229D24() & 1) != 0)
        {
          v23 = MEMORY[0x1E0DEA968];
          *(_QWORD *)&v22 = 0;
          *((_QWORD *)&v22 + 1) = 0xE000000000000000;
          swift_retain();
          sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v22, v21);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v22);
          sub_1B1A0DDAC(v21, &v22);
          swift_dynamicCast();
          swift_release();
          if (v19 == 0x657461756C617645 && v20 == 0xE800000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v10 = sub_1B2229D24();
            swift_bridgeObjectRelease();
            if ((v10 & 1) == 0)
              goto LABEL_24;
          }
          v11 = v7[6];
          v12 = v7[11];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v13 = sub_1B1FBEAEC(v11, v12);
          v15 = v14;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v13 == 0xD00000000000001BLL && v15 == 0x80000001B234AA10)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v16 = sub_1B2229D24();
            swift_bridgeObjectRelease();
            if ((v16 & 1) == 0)
              goto LABEL_24;
          }
          swift_retain();
          v17 = (_QWORD *)sub_1B1CB5B6C(0x726F6C6F43, 0xE500000000000000, 0x657461756C617645, 0xE800000000000000, 0xD000000000000022, 0x80000001B234AA30);
          swift_release();
          if (v17)
          {
            sub_1B1DD90C4((uint64_t)v7, v17, 0);
            swift_release();
            if (v7[2])
            {
              swift_retain();
              v18 = swift_bridgeObjectRetain();
              sub_1B1FB46CC(v18);
              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_release();
              swift_release();
            }
            return swift_release();
          }
LABEL_24:
          swift_release();
          return swift_release();
        }
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B20BF36C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t Strong;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  __int128 v22;
  uint64_t v23;

  if (*(_QWORD *)(*(_QWORD *)(a3 + 264) + 16))
  {
    v4 = result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1DC3B00(v4, a2);
    if ((v5 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v7 = (_QWORD *)Strong;
      if (*(__objc2_class **)Strong == _TtCO3VFX21GraphV1CodeGeneration11CodeSnippet)
      {
        v8 = *(_QWORD *)(Strong + 136);
        v9 = *(_QWORD *)(v8 + 336) == 1752457549 && *(_QWORD *)(v8 + 344) == 0xE400000000000000;
        if (v9 || (sub_1B2229D24() & 1) != 0)
        {
          v23 = MEMORY[0x1E0DEA968];
          *(_QWORD *)&v22 = 0;
          *((_QWORD *)&v22 + 1) = 0xE000000000000000;
          swift_retain();
          sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v22, v21);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v22);
          sub_1B1A0DDAC(v21, &v22);
          swift_dynamicCast();
          swift_release();
          if (v19 == 0x657461756C617645 && v20 == 0xE800000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v10 = sub_1B2229D24();
            swift_bridgeObjectRelease();
            if ((v10 & 1) == 0)
              goto LABEL_24;
          }
          v11 = v7[6];
          v12 = v7[11];
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v13 = sub_1B1FBEAEC(v11, v12);
          v15 = v14;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v13 == 0xD000000000000017 && v15 == 0x80000001B234AA60)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v16 = sub_1B2229D24();
            swift_bridgeObjectRelease();
            if ((v16 & 1) == 0)
              goto LABEL_24;
          }
          swift_retain();
          v17 = (_QWORD *)sub_1B1CB5B6C(1752457549, 0xE400000000000000, 0x657461756C617645, 0xE800000000000000, 0xD00000000000001DLL, 0x80000001B234AA80);
          swift_release();
          if (v17)
          {
            sub_1B1DD90C4((uint64_t)v7, v17, 0);
            swift_release();
            if (v7[2])
            {
              swift_retain();
              v18 = swift_bridgeObjectRetain();
              sub_1B1FB46CC(v18);
              swift_release();
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_release();
              swift_release();
            }
            return swift_release();
          }
LABEL_24:
          swift_release();
          return swift_release();
        }
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B20BF720(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v25 = (unint64_t)(v8 + 63) >> 6;
  v23 = a3 + 104;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v6 << 6);
      if (!*(_QWORD *)(a4 + 16))
        goto LABEL_4;
      goto LABEL_20;
    }
    v13 = v6 + 1;
    if (v6 + 1 >= v25)
      return sub_1B1C05168(a1, a2, v24, a3);
    v14 = *(_QWORD *)(v7 + 8 * v13);
    if (!v14)
    {
      v13 = v6 + 2;
      if (v6 + 2 >= v25)
        return sub_1B1C05168(a1, a2, v24, a3);
      v14 = *(_QWORD *)(v7 + 8 * v13);
      if (!v14)
      {
        v13 = v6 + 3;
        if (v6 + 3 >= v25)
          return sub_1B1C05168(a1, a2, v24, a3);
        v14 = *(_QWORD *)(v7 + 8 * v13);
        if (!v14)
        {
          v13 = v6 + 4;
          if (v6 + 4 >= v25)
            return sub_1B1C05168(a1, a2, v24, a3);
          v14 = *(_QWORD *)(v7 + 8 * v13);
          if (!v14)
            break;
        }
      }
    }
LABEL_19:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v13 << 6);
    v6 = v13;
    if (!*(_QWORD *)(a4 + 16))
      goto LABEL_4;
LABEL_20:
    v15 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v12);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B1DC3B00(v16, v17);
    v19 = v18;
    swift_bridgeObjectRelease();
    swift_release();
    if ((v19 & 1) == 0)
    {
LABEL_4:
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      ++v24;
    }
  }
  while (v25 - 5 != v6)
  {
    v14 = *(_QWORD *)(v23 + 8 * v6++);
    if (v14)
    {
      v13 = v6 + 4;
      goto LABEL_19;
    }
  }
  return sub_1B1C05168(a1, a2, v24, a3);
}

uint64_t sub_1B20BF910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, v10);
    bzero((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    v11 = sub_1B20BF720((_QWORD *)((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    v11 = sub_1B20BF720((unint64_t *)v12, v7, a1, a2);
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E23F88](v12, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

uint64_t sub_1B20BFAC4()
{
  return swift_deallocObject();
}

uint64_t sub_1B20BFAD4()
{
  return swift_deallocObject();
}

unint64_t sub_1B20BFAE4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1DC9C7C(a1, *(__n128 **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1B20BFB00(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1DC9C4C(a1, *(__n128 **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

_QWORD *sub_1B20BFB1C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F583FC(a1, *(_QWORD *)(v1 + 24));
}

_QWORD *sub_1B20BFB34(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F53F10(a1, *(__n128 **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B20BFB60(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a4(255, a2, a3, MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF38], v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B20BFBB0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

id sub_1B20BFC40(id result, char a2)
{
  void *v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)result)
  {
    if (result == 1)
      v3 = xmmword_1B2244C80;
    else
      v3 = xmmword_1B2246900;
    v4 = v3;
    return objc_msgSend(v2, sel_setVertexAmplificationCount_viewMappings_, 2, &v4);
  }
  else if ((a2 & 1) != 0)
  {
    return objc_msgSend(v2, sel_setVertexAmplificationCount_viewMappings_, 1, 0);
  }
  return result;
}

id sub_1B20BFD00(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 4, 0, 4, a1);
}

id sub_1B20BFD20(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 3, 0, 3, a1);
}

id sub_1B20BFD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  return objc_msgSend(v10, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_, a1, a2, a3, a4, a5, a7);
}

uint64_t sub_1B20BFD74(float32x2_t *a1, uint64_t a2)
{
  void *v2;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  unint64_t v12;
  unint64_t v13;
  float64x2_t *v14;
  __int128 v16;

  v16 = xmmword_1B2246900;
  objc_msgSend(v2, sel_setVertexAmplificationCount_viewMappings_, 2, &v16);
  if (a2)
  {
    v5 = sub_1B1C68774(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v6 = *((_QWORD *)v5 + 2);
    v7 = 48 * v6;
    v8 = a1 + 1;
    do
    {
      v9 = v8[-1];
      v10 = *v8;
      v11 = v8[1];
      v12 = *((_QWORD *)v5 + 3);
      v13 = v6 + 1;
      if (v6 >= v12 >> 1)
        v5 = sub_1B1C68774(v12 > 1, v6 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v13;
      v14 = (float64x2_t *)&v5[v7];
      v14[2] = vcvtq_f64_f32(v9);
      v14[3] = vcvtq_f64_f32(v10);
      v14[4] = vcvtq_f64_f32(v11);
      v7 += 48;
      v8 += 3;
      v6 = v13;
      --a2;
    }
    while (a2);
  }
  sub_1B2228FEC();
  return swift_bridgeObjectRelease();
}

id sub_1B20BFEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;

  return objc_msgSend(v4, sel_setVertexBuffer_offset_atIndex_, a1, a4 + a2);
}

id sub_1B20BFEBC(uint64_t a1, uint64_t a2)
{
  void *v2;

  return objc_msgSend(v2, sel_drawPrimitives_vertexStart_vertexCount_instanceCount_, 1, 0, 2 * a1, a2);
}

id sub_1B20BFEDC(float a1)
{
  void *v1;
  void *v3;
  id result;
  double v5;

  if (objc_msgSend(v1, sel_respondsToSelector_, sel_rg_setLineWidth_))
  {
    v3 = (void *)sub_1B2228C74();
    objc_msgSend((id)swift_unknownObjectRetain(), sel_performSelector_withObject_, sel_rg_setLineWidth_, v3);

    return v1;
  }
  else
  {
    result = (id)swift_dynamicCastObjCProtocolConditional();
    if (result)
    {
      *(float *)&v5 = a1;
      return objc_msgSend(result, sel_setLineWidth_, v5);
    }
  }
  return result;
}

id sub_1B20BFF98(int8x16_t a1, float32x2_t a2)
{
  void *v2;
  _OWORD v4[3];

  v4[0] = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)a1.i8, a2));
  v4[1] = vcvtq_f64_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), a2));
  v4[2] = xmmword_1B2245B90;
  return objc_msgSend(v2, sel_setViewport_, v4);
}

objc_class *sub_1B20C0348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  void *v9;
  objc_class *result;
  objc_super v19;
  objc_super v20;
  objc_super v21;

  v9 = v8;
  result = (objc_class *)swift_getObjectType();
  if (a2)
  {
    if (a6 != 1 || a8)
    {
      if (a7 > 0 || a8)
      {
        v20.receiver = v9;
        v20.super_class = result;
        return (objc_class *)objc_msgSendSuper2(&v20, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance_, a1, a2, a3, a4, a5, a6, a7, a8);
      }
      else
      {
        v21.receiver = v9;
        v21.super_class = result;
        return (objc_class *)objc_msgSendSuper2(&v21, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_, a1, a2, a3, a4, a5, a6);
      }
    }
    else
    {
      v19.receiver = v9;
      v19.super_class = result;
      return (objc_class *)objc_msgSendSuper2(&v19, sel_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_, a1, a2, a3, a4, a5);
    }
  }
  return result;
}

uint64_t type metadata accessor for RenderCommandEncoder()
{
  return objc_opt_self();
}

uint64_t sub_1B20C060C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

id sub_1B20C0894()
{
  _BYTE *v0;
  _QWORD *v1;
  char *v2;
  id v3;
  id v4;
  uint64_t v5;
  id result;
  objc_super v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_scene] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_effect] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_texture] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_depthTexture] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_backgroundColor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_pointOfView] = 0;
  v0[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_performMetalCaptureDuringSnapshot] = 0;
  v1 = &v0[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_postRenderCallback];
  *v1 = 0;
  v1[1] = 0;
  v2 = v0;
  v3 = MTLCreateSystemDefaultDevice();
  if (v3)
  {
    v4 = objc_msgSend(v3, sel_newCommandQueue);
    *((_QWORD *)&v8 + 1) = 0;
    LODWORD(v8) = 0;
    BYTE4(v8) = 0;
    v9 = 1;
    v10 = 0;
    v11 = 1;
    v12 = 0;
    v13 = 257;
    v14 = 260;
    v15 = 0;
    v16 = 0;
    type metadata accessor for Renderer();
    swift_allocObject();
    v5 = sub_1B1BA3100(0, v4, &v8);
    swift_unknownObjectRelease();
    *(_QWORD *)&v2[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_renderer] = v5;

    v7.receiver = v2;
    v7.super_class = (Class)type metadata accessor for VFXRendererLegacy();
    return objc_msgSendSuper2(&v7, sel_init);
  }
  else
  {
    result = (id)sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B20C0A48()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  char *v4;
  char v5;
  int v6;
  uint64_t v8;

  v1 = *(char **)&v0[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_scene];
  if (v1)
  {
    v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
    v3 = v1;
    v4 = v0;
    v5 = sub_1B1DAEE48(v2, v3, v4);

  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v6 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v8 = 0;
    swift_retain();
    sub_1B1F1AD70(v6, &v8, 0xD000000000000026, 0x80000001B234AE10);
    swift_release();
    swift_release();
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_1B20C0BB0(void *a1)
{
  char *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  CGColor *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32[4];

  v2 = *(char **)&v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_scene];
  if (!v2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v17 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v32[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v17, v32, 0xD000000000000023, 0x80000001B234ADB0);
    swift_release();
    return swift_release();
  }
  if (!*(_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC3VFX8VFXScene_entityManager]
                  + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    result = sub_1B2229688();
    __break(1u);
    return result;
  }
  v3 = v1;
  v4 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_texture];
  if (!v4)
  {
    v18 = qword_1ED4BF430;
    v19 = v2;
    if (v18 != -1)
      swift_once();
    swift_retain();
    v20 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v32[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v20, v32, 0xD000000000000024, 0x80000001B234ADE0);

    swift_release();
    return swift_release();
  }
  v6 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_depthTexture];
  type metadata accessor for MTLTextureRenderOutput();
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain_n();
  v7 = v2;
  v8 = sub_1B1BA0D60(v4, v6);
  v9 = v8;
  *(_BYTE *)(v8 + 136) = 0;
  v10 = *(void **)&v3[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_backgroundColor];
  if (v10)
  {
    *(_QWORD *)(v8 + 32) = 2;
    v11 = v10;
    v32[0] = 0;
    v32[1] = 0;
    v12 = (CGColor *)objc_msgSend(v11, sel_CGColor);
    sub_1B1BF3CE4(v12);

    *(double *)(v9 + 40) = nullsub_16(v13);
    *(_QWORD *)(v9 + 48) = v14;
    *(_QWORD *)(v9 + 56) = v15;
    *(_QWORD *)(v9 + 64) = v16;
  }
  else
  {
    *(_QWORD *)(v8 + 32) = 1;
  }
  v22 = *(_QWORD *)&v3[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_pointOfView];
  if (v22)
    *(_QWORD *)(v9 + 80) = *(_QWORD *)(v22 + OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance);
  v23 = *(_QWORD *)&v3[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_effect];
  if (v23)
  {
    v23 += OBJC_IVAR____TtC3VFX9VFXEffect_effectID;
    if ((*(_BYTE *)(v23 + 4) & 1) == 0)
    {
      LODWORD(v23) = *(_DWORD *)v23;
      v25 = (_DWORD)v23 == dword_1EEFD58F0;
      if ((_DWORD)v23 == dword_1EEFD58F0)
        LODWORD(v23) = 0;
      v24 = 2 * v25;
      goto LABEL_27;
    }
    LODWORD(v23) = 0;
  }
  v24 = 2;
LABEL_27:
  *(_DWORD *)(v9 + 72) = v23;
  *(_BYTE *)(v9 + 76) = v24;
  v26 = *(_QWORD *)&v3[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_postRenderCallback];
  if (v26)
    v27 = *(_QWORD *)&v3[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_postRenderCallback + 8];
  else
    v27 = 0;
  v28 = *(_QWORD *)(v9 + 112);
  *(_QWORD *)(v9 + 112) = v26;
  *(_QWORD *)(v9 + 120) = v27;
  sub_1B19F8C48(v26);
  sub_1B19E5A18(v28);
  v29 = v7;
  v30 = v3;
  swift_retain();
  swift_unknownObjectRetain();
  v31 = swift_retain();
  sub_1B1DA3984(v31, v29, v30, v9, a1);

  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B20C1028(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v17;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v4 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v5)
  {
    v39 = *(_BYTE *)(v5 + 536);
    v6 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX17VFXRendererLegacy_renderer);
    v7 = *(_BYTE *)(v6 + 537);
    v8 = *(_BYTE *)(v6 + 538);
    v9 = *(_BYTE *)(v6 + 539);
    v10 = *(_BYTE *)(v6 + 540);
    v11 = *(_QWORD *)(v6 + 544);
    v12 = *(_BYTE *)(v6 + 552);
    v13 = *(_QWORD *)(v6 + 560);
    v14 = *(_BYTE *)(v6 + 568);
    v15 = *(_QWORD *)(v6 + 576);
    v17 = *(_BYTE *)(v6 + 584);
    v19 = *(_BYTE *)(v6 + 585);
    v20 = *(_QWORD *)(v6 + 592);
    v21 = *(_BYTE *)(v6 + 600);
    v22 = *(_QWORD *)(v6 + 608);
    *(_BYTE *)(v5 + 536) = *(_BYTE *)(v6 + 536);
    v23 = *(_BYTE *)(v5 + 537);
    *(_BYTE *)(v5 + 537) = v7;
    v37 = *(_BYTE *)(v5 + 538);
    v38 = v23;
    *(_BYTE *)(v5 + 538) = v8;
    v24 = *(_BYTE *)(v5 + 539);
    *(_BYTE *)(v5 + 539) = v9;
    v36 = *(_BYTE *)(v5 + 540);
    *(_BYTE *)(v5 + 540) = v10;
    v35 = *(_QWORD *)(v5 + 544);
    *(_QWORD *)(v5 + 544) = v11;
    v34 = *(_BYTE *)(v5 + 552);
    *(_BYTE *)(v5 + 552) = v12;
    v33 = *(_QWORD *)(v5 + 560);
    *(_QWORD *)(v5 + 560) = v13;
    v32 = *(_BYTE *)(v5 + 568);
    *(_BYTE *)(v5 + 568) = v14;
    v31 = *(_QWORD *)(v5 + 576);
    *(_QWORD *)(v5 + 576) = v15;
    v25 = *(_BYTE *)(v5 + 584);
    *(_BYTE *)(v5 + 584) = v17;
    v29 = *(_BYTE *)(v5 + 585);
    v30 = v25;
    *(_BYTE *)(v5 + 585) = v19;
    v28 = *(_QWORD *)(v5 + 592);
    *(_QWORD *)(v5 + 592) = v20;
    v27 = *(_BYTE *)(v5 + 600);
    *(_BYTE *)(v5 + 600) = v21;
    v26 = *(_QWORD *)(v5 + 608);
    *(_QWORD *)(v5 + 608) = v22;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B1BA370C();
    sub_1B179207C();
    sub_1B20C2750(a3, a4, 1, 0, v4);
    *(_BYTE *)(v5 + 536) = v39;
    *(_BYTE *)(v5 + 537) = v38;
    *(_BYTE *)(v5 + 538) = v37;
    *(_BYTE *)(v5 + 539) = v24;
    *(_BYTE *)(v5 + 540) = v36;
    *(_QWORD *)(v5 + 544) = v35;
    *(_BYTE *)(v5 + 552) = v34;
    *(_QWORD *)(v5 + 560) = v33;
    *(_BYTE *)(v5 + 568) = v32;
    *(_QWORD *)(v5 + 576) = v31;
    *(_BYTE *)(v5 + 584) = v30;
    *(_BYTE *)(v5 + 585) = v29;
    *(_QWORD *)(v5 + 592) = v28;
    *(_BYTE *)(v5 + 600) = v27;
    *(_QWORD *)(v5 + 608) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1B1BA370C();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B20C13B4(double a1, double a2, double a3)
{
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void (*v25)(char *, uint64_t);
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  unsigned int v34;
  id v35;
  id v36;
  id v37;
  id v38;
  _BYTE *v39;
  uint64_t v40;
  id v41;
  uint64_t result;
  char *v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  void *v52;
  id v53[3];

  v5 = v3;
  v53[2] = *(id *)MEMORY[0x1E0C80C00];
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = 0;
  v13 = sub_1B2228110();
  v47 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void **)&v5[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_scene];
  if (!v17)
  {
    sub_1B2229688();
    __break(1u);
LABEL_13:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v13);
    __break(1u);
LABEL_14:
    v43 = v16;
    sub_1B2227FB4();

    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v18 = *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_renderer];
  v19 = *(void **)(v18 + 16);
  v20 = *(void **)(v18 + 312);
  v21 = (void *)objc_opt_self();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v49 = v17;
  v22 = objc_msgSend(v21, sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 115, (uint64_t)a1, (uint64_t)a2, 0);
  objc_msgSend(v22, sel_setStorageMode_, 2);
  objc_msgSend(v22, sel_setUsage_, 5);
  v52 = v19;
  v50 = objc_msgSend(v19, sel_newTextureWithDescriptor_, v22);
  v48 = OBJC_IVAR____TtC3VFX17VFXRendererLegacy_performMetalCaptureDuringSnapshot;
  if (v5[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_performMetalCaptureDuringSnapshot] != 1)
  {
    v35 = v50;
    goto LABEL_9;
  }
  v45 = objc_msgSend((id)objc_opt_self(), sel_sharedCaptureManager);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6A40]), sel_init);
  v46 = v20;
  objc_msgSend(v23, sel_setCaptureObject_, v20);
  sub_1B2228050();
  v24 = (void *)sub_1B2228074();
  v4 = v47;
  v25 = *(void (**)(char *, uint64_t))(v47 + 8);
  v25(v16, v13);
  objc_msgSend(v23, sel_setOutputURL_, v24);

  v26 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v27 = objc_msgSend(v23, sel_outputURL);
  if (!v27)
    goto LABEL_13;
  v28 = v27;
  sub_1B22280C8();

  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v16, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v12, 0, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v13);
  v29 = (void *)sub_1B2228074();
  v25(v12, v13);
  v53[0] = 0;
  LOBYTE(v28) = objc_msgSend(v26, sel_removeItemAtURL_error_, v29, v53);

  v30 = v53[0];
  if ((v28 & 1) == 0)
  {
    v31 = v30;
    v32 = (void *)sub_1B2227FB4();

    swift_willThrow();
  }
  objc_msgSend(v23, sel_setDestination_, 2);
  v53[0] = 0;
  v33 = v45;
  v34 = objc_msgSend(v45, sel_startCaptureWithDescriptor_error_, v23, v53);
  v16 = (char *)v53[0];
  v20 = v46;
  v35 = v50;
  if (!v34)
    goto LABEL_14;
  v36 = v53[0];

LABEL_9:
  v37 = objc_msgSend(v20, sel_commandBuffer);
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_texture] = v35;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v38 = v49;
  v39 = v5;
  swift_unknownObjectRetain();
  v40 = swift_retain();
  sub_1B1DA3DF8(v40, v38, v39, v37, a3);
  swift_release();
  objc_msgSend(v37, sel_commit);
  if (v5[v48] == 1)
  {
    v41 = objc_msgSend((id)objc_opt_self(), sel_sharedCaptureManager);
    objc_msgSend(v41, sel_stopCapture);

  }
  objc_msgSend(v37, sel_waitUntilCompleted);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return (uint64_t)v35;
}

uint64_t sub_1B20C195C(uint64_t result, uint64_t a2, void *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;

  v4 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v5 = *(_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v5)
  {
    v9 = (void *)result;
    v44 = *(_BYTE *)(v5 + 536);
    v42 = *(_BYTE *)(v5 + 538);
    v43 = *(_BYTE *)(v5 + 537);
    v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX17VFXRendererLegacy_renderer);
    v11 = *(_BYTE *)(v10 + 537);
    v12 = *(_BYTE *)(v10 + 538);
    v13 = *(_BYTE *)(v10 + 539);
    v14 = *(_BYTE *)(v10 + 540);
    v15 = *(_QWORD *)(v10 + 544);
    v16 = *(_BYTE *)(v10 + 552);
    v17 = *(_QWORD *)(v10 + 560);
    v18 = *(_BYTE *)(v10 + 568);
    v19 = *(_QWORD *)(v10 + 576);
    v20 = *(_BYTE *)(v10 + 584);
    v21 = *(_BYTE *)(v10 + 585);
    v22 = *(_QWORD *)(v10 + 592);
    v23 = *(_BYTE *)(v10 + 600);
    v24 = *(_QWORD *)(v10 + 608);
    *(_BYTE *)(v5 + 536) = *(_BYTE *)(v10 + 536);
    v25 = *(_BYTE *)(v5 + 539);
    *(_BYTE *)(v5 + 537) = v11;
    v40 = *(_BYTE *)(v5 + 540);
    v41 = v25;
    *(_BYTE *)(v5 + 538) = v12;
    v26 = *(_QWORD *)(v5 + 544);
    *(_BYTE *)(v5 + 539) = v13;
    v39 = v26;
    *(_BYTE *)(v5 + 540) = v14;
    LOBYTE(v26) = *(_BYTE *)(v5 + 552);
    *(_QWORD *)(v5 + 544) = v15;
    v36 = *(_QWORD *)(v5 + 560);
    *(_BYTE *)(v5 + 552) = v16;
    *(_QWORD *)(v5 + 560) = v17;
    v34 = *(_BYTE *)(v5 + 568);
    *(_BYTE *)(v5 + 568) = v18;
    v35 = *(_BYTE *)(v5 + 584);
    *(_BYTE *)(v5 + 584) = v20;
    v37 = v26;
    v38 = *(_BYTE *)(v5 + 600);
    *(_BYTE *)(v5 + 600) = v23;
    v27 = *(_QWORD *)(v5 + 576);
    *(_QWORD *)(v5 + 576) = v19;
    v33 = *(_BYTE *)(v5 + 585);
    *(_BYTE *)(v5 + 585) = v21;
    v32 = *(_QWORD *)(v5 + 592);
    *(_QWORD *)(v5 + 592) = v22;
    v28 = *(_QWORD *)(v5 + 608);
    *(_QWORD *)(v5 + 608) = v24;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B1BA370C();
    sub_1B179207C();
    sub_1B1D9E178(v4, v9, a4);
    sub_1B20C0BB0(a3);
    v29 = *(void **)(a2 + OBJC_IVAR____TtC3VFX17VFXRendererLegacy_scene);
    if (v29)
    {
      v30 = v29;
      v31 = swift_retain();
      sub_1B1DA3C1C(v31, v30);
      swift_release();

    }
    *(_BYTE *)(v5 + 536) = v44;
    *(_BYTE *)(v5 + 537) = v43;
    *(_BYTE *)(v5 + 538) = v42;
    *(_BYTE *)(v5 + 539) = v41;
    *(_BYTE *)(v5 + 540) = v40;
    *(_QWORD *)(v5 + 544) = v39;
    *(_BYTE *)(v5 + 552) = v37;
    *(_QWORD *)(v5 + 560) = v36;
    *(_BYTE *)(v5 + 568) = v34;
    *(_QWORD *)(v5 + 576) = v27;
    *(_BYTE *)(v5 + 584) = v35;
    *(_BYTE *)(v5 + 585) = v33;
    *(_QWORD *)(v5 + 592) = v32;
    *(_BYTE *)(v5 + 600) = v38;
    *(_QWORD *)(v5 + 608) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1B1BA370C();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void __swiftcall MTLTexture.toImage()(UIImage_optional *__return_ptr retstr)
{
  void *v1;
  UIImage_optional *v2;
  id v3;
  uint32_t v4;
  size_t v5;
  id v6;
  size_t v7;
  void *v8;
  void *v9;
  CGContext *v10;
  CGContext *v11;
  CGImageRef Image;
  CGImageRef v13;
  int v14;
  int v15;
  int v16;
  __int128 v17;

  if (objc_msgSend(v1, sel_storageMode) == (id)2)
  {
    sub_1B1F9E2E8();
    swift_getObjectType();
    MTLTexture.toImage()(v2);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1ED4B7618 != -1)
      swift_once();
    v3 = (id)qword_1ED4D0908;
    v4 = 16385;
    v5 = 8;
    switch((unint64_t)objc_msgSend(v1, sel_pixelFormat))
    {
      case 'F':
      case 'G':
      case 'P':
        goto LABEL_10;
      case 'Q':
        v4 = 8194;
        v5 = 8;
        goto LABEL_10;
      case 's':
        if (qword_1ED4B7BC0 != -1)
          swift_once();
        v6 = (id)qword_1ED4D0900;

        v4 = 4353;
        v5 = 16;
        v3 = v6;
LABEL_10:
        v7 = (uint64_t)(4 * v5 * (_QWORD)objc_msgSend(v1, sel_width)) >> 3;
        v8 = malloc(v7 * (_QWORD)objc_msgSend(v1, sel_height));
        if (v8)
        {
          v9 = v8;
          sub_1B1BA59CC((uint64_t)objc_msgSend(v1, sel_width), (uint64_t)objc_msgSend(v1, sel_height), &v17);
          objc_msgSend(v1, sel_getBytes_bytesPerRow_fromRegion_mipmapLevel_, v9, v7, &v17, 0);
          v10 = CGBitmapContextCreate(v9, (size_t)objc_msgSend(v1, sel_width), (size_t)objc_msgSend(v1, sel_height), v5, v7, (CGColorSpaceRef)v3, v4);
          if (v10)
          {
            v11 = v10;
            Image = CGBitmapContextCreateImage(v10);
            if (Image)
            {
              v13 = Image;
              objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, Image);

              free(v9);
              return;
            }
            if (qword_1ED4BF430 != -1)
              swift_once();
            swift_retain();
            v16 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v17 = 0;
            swift_retain();
            sub_1B1F1AD70(v16, (uint64_t *)&v17, 0xD000000000000028, 0x80000001B234AC40);
            swift_release();

          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            swift_retain();
            v15 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)&v17 = 0;
            swift_retain();
            sub_1B1F1AD70(v15, (uint64_t *)&v17, 0xD00000000000001DLL, 0x80000001B234AC20);
            swift_release();
          }
          swift_release();
          free(v9);

        }
        else
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          swift_retain();
          v14 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          *(_QWORD *)&v17 = 0;
          swift_retain();
          sub_1B1F1AD70(v14, (uint64_t *)&v17, 0xD00000000000001FLL, 0x80000001B234AC00);
          swift_release();

          swift_release();
        }
        break;
      default:
        sub_1B2229430();
        type metadata accessor for MTLPixelFormat(0);
        sub_1B22295EC();
        sub_1B2228890();
        sub_1B2229688();
        __break(1u);
        return;
    }
  }
}

id sub_1B20C2378()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXRendererLegacy();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for VFXRendererLegacy()
{
  return objc_opt_self();
}

uint64_t *sub_1B20C2464(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  char v17;
  char v18;
  CFTimeInterval v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _UNKNOWN **v30;
  CFTimeInterval v31;
  void *v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42[20];
  _OWORD v43[7];

  v8 = (char *)a4 + 537;
  v28 = sub_1B22284E8();
  v9 = *(_QWORD *)(v28 - 8);
  v11 = MEMORY[0x1E0C80A78](v28, v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(a3, sel_label, v11);
  if (v14)
  {

  }
  else
  {
    v42[0] = 0;
    v42[1] = 0xE000000000000000;
    sub_1B2228890();
    v29 = a2;
    v30 = &off_1E63A7B28;
    sub_1B20C2D90();
    sub_1B22295EC();
    v15 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_setLabel_, v15);

  }
  sub_1B1BA11D0(a3);
  a4[46] = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if ((*v8 & 1) == 0 && v8[2] != 1 && (v8[3] & 1) == 0)
  {
    sub_1B22284DC();
    sub_1B2228FC8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v28);
  }
  a4[51] = objc_msgSend(*(id *)(a2 + 16), sel_pixelFormat);
  a4[59] = a4[74];
  *(_BYTE *)(a4[36] + 136) = 1;
  v16 = sub_1B1EDE688();
  v18 = v17;
  swift_unknownObjectRetain();
  v19 = CACurrentMediaTime();
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_scheduler);
  type metadata accessor for WireframeLayerSystem();
  v21 = *(os_unfair_lock_s **)(v20 + 56);
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v21);
  v22 = sub_1B204E0B8();
  if ((v23 & 1) != 0)
    v24 = 0;
  else
    v24 = *(_BYTE *)(*(_QWORD *)(v20 + 96) + 96 * v22 + 105);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 56));
  swift_release();
  if ((v18 & 1) != 0)
    v25 = 0xFFFFFFFFLL;
  else
    v25 = v16;
  sub_1B1EDE7BC((_QWORD *)v25, (uint64_t)v43);
  v29 = a2;
  v30 = &off_1E63A7B28;
  v31 = v19;
  v32 = a3;
  v33 = v24;
  v34 = v43[0];
  v35 = v43[1];
  v36 = v43[2];
  v37 = v43[3];
  v38 = v43[4];
  v39 = v43[5];
  v40 = 0;
  v41 = 0;
  nullsub_16(&v29);
  sub_1B1BA802C((uint64_t)(a4 + 78), (uint64_t)v42);
  sub_1B1BA802C((uint64_t)&v29, (uint64_t)(a4 + 78));
  return sub_1B1BA81B0(v42);
}

_QWORD *sub_1B20C2750(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  NSObject *v29;
  os_signpost_type_t v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint8_t *v34;
  os_signpost_id_t v35;
  uint8_t *v36;
  uint64_t v37;
  int v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  double v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  void (*v55)(uint64_t);
  NSObject *v56;
  char *v57;
  os_signpost_type_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint8_t *v63;
  os_signpost_id_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  int v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  char *v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD aBlock[6];

  v77 = a1;
  v9 = sub_1B22283BC();
  v75 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v74 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1B2228380();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v66 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v66 - v22;
  result = *(_QWORD **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (result)
  {
    v69 = a4;
    v70 = a3;
    v67 = v9;
    v73 = v21;
    v25 = qword_1ED4BA0E0;
    v76 = result;
    swift_retain();
    if (v25 != -1)
      swift_once();
    v26 = sub_1B22283B0();
    v27 = sub_1B1B40EC8(v26, (uint64_t)qword_1ED4D0E48);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v28(v23, a5 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v12);
    v71 = v27;
    v29 = sub_1B2228398();
    v30 = sub_1B2228FA4();
    if ((sub_1B2229094() & 1) != 0)
    {
      v28(v18, (uint64_t)v23, v12);
      v31 = v18;
      v32 = v12;
      v33 = a2;
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      v35 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v29, v30, v35, "render", "", v34, 2u);
      v36 = v34;
      a2 = v33;
      v12 = v32;
      v18 = v31;
      MEMORY[0x1B5E23F88](v36, -1, -1);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v31, v12);
    }
    else
    {

    }
    v68 = v28;
    v28(v18, (uint64_t)v23, v12);
    sub_1B22283E0();
    swift_allocObject();
    sub_1B22283D4();
    v72 = *(void (**)(char *, uint64_t))(v13 + 8);
    v72(v23, v12);
    v37 = OBJC_IVAR____TtC3VFX13EntityManager_currentState;
    v38 = *(unsigned __int8 *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_currentState);
    *(_BYTE *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_currentState) = 2;
    if (v38 != 2)
    {
      v39 = *(void (**)(uint64_t))(a5 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
      if (v39)
      {
        swift_retain();
        v39(a5);
        sub_1B19E5A18((uint64_t)v39);
      }
    }
    v40 = v77;
    sub_1B20C2464(a5, v77, a2, v76);
    v41 = *(_QWORD *)(*(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_scheduler) + 24);
    swift_retain();
    if (v41)
    {
      v43 = (_QWORD *)thread_worker_index(v42);
      v66 = a5;
      v44 = v18;
      v45 = v12;
      v46 = a2;
      v47 = v43;
      v48 = *v43;
      *v43 = 0;
      swift_retain();
      sub_1B204E7C8(4);
      *v47 = v48;
      v40 = v77;
      a2 = v46;
      v12 = v45;
      v18 = v44;
      a5 = v66;
      swift_release();
      swift_release();
    }
    sub_1B1BA458C(v69);
    if ((v70 & 1) != 0)
      sub_1B1BA488C(a2);
    v49 = *(_QWORD *)(v40 + 96);
    if (v49)
    {
      v50 = a2;
      v51 = *(_QWORD *)(v40 + 104);
      v52 = swift_allocObject();
      *(_QWORD *)(v52 + 16) = v49;
      *(_QWORD *)(v52 + 24) = v51;
      aBlock[4] = sub_1B20C2D88;
      aBlock[5] = v52;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1B1BA0C14;
      aBlock[3] = &unk_1E63D4A60;
      v53 = _Block_copy(aBlock);
      swift_retain_n();
      swift_release();
      objc_msgSend(v50, sel_addCompletedHandler_, v53);
      _Block_release(v53);
      sub_1B19E5A18(v49);
    }
    v54 = *(unsigned __int8 *)(a5 + v37);
    *(_BYTE *)(a5 + v37) = 4;
    if (v54 != 4)
    {
      v55 = *(void (**)(uint64_t))(a5 + OBJC_IVAR____TtC3VFX13EntityManager_stateDidChangeFn);
      if (v55)
      {
        swift_retain();
        v55(a5);
        sub_1B19E5A18((uint64_t)v55);
      }
    }
    v56 = sub_1B2228398();
    v57 = v73;
    sub_1B22283C8();
    v58 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      swift_retain();
      v59 = v74;
      sub_1B22283EC();
      swift_release();
      v60 = v75;
      v61 = v67;
      if ((*(unsigned int (**)(char *, uint64_t))(v75 + 88))(v59, v67) == *MEMORY[0x1E0DF2190])
      {
        v62 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v60 + 8))(v59, v61);
        v62 = "";
      }
      v68(v18, (uint64_t)v57, v12);
      v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v63 = 0;
      v64 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v56, v58, v64, "render", v62, v63, 2u);
      MEMORY[0x1B5E23F88](v63, -1, -1);

      v65 = v72;
      v72(v57, v12);
      v65(v18, v12);
    }
    else
    {

      v72(v57, v12);
    }
    swift_release();
    return (_QWORD *)swift_release();
  }
  return result;
}

uint64_t sub_1B20C2D64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B20C2D88(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1E72A38(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

unint64_t sub_1B20C2D90()
{
  unint64_t result;

  result = qword_1ED4B8418;
  if (!qword_1ED4B8418)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B8418);
  }
  return result;
}

uint64_t sub_1B20C2DE0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B20C2E04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = OBJC_IVAR____TtC3VFX17VFXRendererLegacy_depthTexture;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX17VFXRendererLegacy_depthTexture) = a1;
  swift_unknownObjectRetain();
  result = swift_unknownObjectRelease();
  if (*(_QWORD *)(v1 + v2))
  {
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX17VFXRendererLegacy_renderer);
    *(_QWORD *)(v4 + 592) = objc_msgSend((id)swift_unknownObjectRetain(), sel_pixelFormat);
    sub_1B1BA370C();
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_1B20C2E84(void *a1)
{
  _BYTE *v1;
  _QWORD *v3;
  char *v4;
  objc_super v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_scene] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_effect] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_texture] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_depthTexture] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_backgroundColor] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_pointOfView] = 0;
  v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_performMetalCaptureDuringSnapshot] = 0;
  v3 = &v1[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_postRenderCallback];
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)&v7 + 1) = 0;
  LODWORD(v7) = 0;
  BYTE4(v7) = 0;
  v8 = 1;
  v9 = 0;
  v10 = 1;
  v11 = 0;
  v12 = 257;
  v13 = 260;
  v14 = 0;
  v15 = 0;
  type metadata accessor for Renderer();
  swift_allocObject();
  v4 = v1;
  swift_unknownObjectRetain();
  *(_QWORD *)&v4[OBJC_IVAR____TtC3VFX17VFXRendererLegacy_renderer] = sub_1B1BA3100(0, a1, &v7);

  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for VFXRendererLegacy();
  return objc_msgSendSuper2(&v6, sel_init);
}

ValueMetadata *type metadata accessor for RERendererConfiguration()
{
  return &type metadata for RERendererConfiguration;
}

uint64_t sub_1B20C2FC8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B202B004(0, v1, 0);
    v2 = v18;
    v4 = sub_1B1C0754C(a1);
    v5 = 0;
    v6 = *(_QWORD *)(v18 + 16);
    v17 = a1 + 64;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v4);
      v8 = v6;
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v4);
      v10 = *(_QWORD *)(v18 + 24);
      ++v6;
      swift_retain();
      if (v8 >= v10 >> 1)
        sub_1B202B004(v10 > 1, v6, 1);
      *(_QWORD *)(v18 + 16) = v6;
      v11 = v18 + 16 * v8;
      *(_QWORD *)(v11 + 32) = v9;
      *(_QWORD *)(v11 + 40) = v7;
      v12 = v4 >> 6;
      if ((*(_QWORD *)(v17 + 8 * (v4 >> 6)) & (-2 << v4)) != 0)
      {
        v4 = __clz(__rbit64(*(_QWORD *)(v17 + 8 * (v4 >> 6)) & (-2 << v4))) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v4 = 1 << *(_BYTE *)(a1 + 32);
        v13 = v12 + 1;
        v14 = (v4 + 63) >> 6;
        if (v12 + 1 < v14)
        {
          v15 = *(_QWORD *)(v17 + 8 * v13);
          if (!v15)
          {
            v13 = v12 + 2;
            if (v12 + 2 >= v14)
              goto LABEL_4;
            v15 = *(_QWORD *)(v17 + 8 * v13);
            if (!v15)
            {
              while (v14 - 3 != v12)
              {
                v15 = *(_QWORD *)(a1 + 88 + 8 * v12++);
                if (v15)
                {
                  v13 = v12 + 2;
                  goto LABEL_10;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_10:
          v4 = __clz(__rbit64(v15)) + (v13 << 6);
        }
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v1);
  }
  return v2;
}

uint64_t sub_1B20C3174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  int v12;
  char *v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char v87;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unsigned int v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  _BYTE *v98;
  unsigned int v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  _BYTE v107[96];

  v9 = v8;
  *(_QWORD *)(a2 + 216) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 208) = *(_QWORD *)(a1 + 72);
  v12 = *(unsigned __int8 *)(a1 + 52);
  if (v12 == 3 && (*(_BYTE *)(a1 + 44) != 1 || (v12 = *(_DWORD *)(a1 + 40)) != 0))
    LOBYTE(v12) = 1;
  v13 = (char *)a5 + 321;
  *(_BYTE *)(a2 + 227) = v12;
  if (*(_DWORD *)(a1 + 40) == 2)
    v14 = *(_BYTE *)(a1 + 44);
  else
    v14 = 0;
  *(_BYTE *)(a2 + 226) = v14;
  v16 = qword_1ED4B8D00;
  v103 = a5[29];
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = qword_1ED4D0C28;
  v18 = byte_1ED4D0C40;
  *(_QWORD *)(v9 + 104) = qword_1ED4D0C10;
  *(_OWORD *)(v9 + 112) = *(_OWORD *)algn_1ED4D0C18;
  *(_QWORD *)(v9 + 128) = v17;
  *(_OWORD *)(v9 + 136) = xmmword_1ED4D0C30;
  *(_BYTE *)(v9 + 152) = v18;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v19 = qword_1ED4D0C28;
  v20 = byte_1ED4D0C40;
  *(_QWORD *)(v9 + 160) = qword_1ED4D0C10;
  *(_OWORD *)(v9 + 168) = *(_OWORD *)algn_1ED4D0C18;
  *(_OWORD *)(v9 + 192) = xmmword_1ED4D0C30;
  *(_BYTE *)(v9 + 208) = v20;
  *(_QWORD *)(v9 + 184) = v19;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v98 = v13;
  if ((v13[216] & 1) != 0)
  {
    v21 = 1;
  }
  else
  {
    swift_retain();
    swift_getKeyPath();
    v22 = *(_QWORD *)(a6 + 176);
    swift_retain();
    sub_1B1F23548((uint64_t)&type metadata for FrameConstantsStorage, (uint64_t)&off_1E63A0688, v22, (void (*)(unint64_t *__return_ptr, uint64_t))sub_1B20C4BAC);
    v24 = v23;
    swift_release();
    swift_release();
    swift_release();
    v21 = (v24 >> 8) & 1;
  }
  v91 = a1;
  v25 = (_QWORD *)a5[64];
  swift_bridgeObjectRetain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v27 = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v27 = sub_1B1C64EC0(0, v25[2] + 1, 1, v25);
  v94 = v27;
  v29 = v27[2];
  v28 = v27[3];
  if (v29 >= v28 >> 1)
    v94 = sub_1B1C64EC0(v28 > 1, v29 + 1, 1, v94);
  v94[2] = v29 + 1;
  v30 = &v94[14 * v29];
  *((_OWORD *)v30 + 2) = xmmword_1B22B8E10;
  *((_BYTE *)v30 + 48) = 0;
  v30[8] = v21;
  *(_OWORD *)(v30 + 9) = 0u;
  *(_OWORD *)(v30 + 11) = 0u;
  *(_OWORD *)(v30 + 13) = 0u;
  v30[15] = 0;
  *((_BYTE *)v30 + 128) = 13;
  swift_bridgeObjectRelease();
  v105 = (uint64_t)a5;
  v31 = a5[98];
  v32 = *(_QWORD *)(v31 + 16);
  swift_bridgeObjectRetain();
  v89 = v32;
  if (!v32)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v37 = (_QWORD *)a2;
    goto LABEL_78;
  }
  v99 = 0;
  v33 = 0;
  v34 = v31 + 32;
  v35 = v91;
  v93 = *(_DWORD *)(v91 + 40);
  v90 = *(unsigned __int8 *)(v91 + 44);
  if (v93)
    v36 = 0;
  else
    v36 = *(unsigned __int8 *)(v91 + 44);
  v38 = v103;
  v37 = (_QWORD *)a2;
  v39 = v94;
  v40 = v89;
  v96 = v34;
  v95 = v36;
  do
  {
    v41 = (_OWORD *)(v34 + 96 * v33);
    v42 = v41[3];
    *(_OWORD *)&v107[32] = v41[2];
    *(_OWORD *)&v107[48] = v42;
    v43 = v41[5];
    *(_OWORD *)&v107[64] = v41[4];
    *(_OWORD *)&v107[80] = v43;
    v44 = v41[1];
    *(_OWORD *)v107 = *v41;
    *(_OWORD *)&v107[16] = v44;
    v45 = *(_DWORD *)v107;
    if ((*(_WORD *)v107 & 0x5000) != 0)
      v46 = v36;
    else
      v46 = 1;
    if (v46 == 1)
    {
      if ((*(_WORD *)v107 & 0x800) != 0)
      {
        v100 = v33;
        v48 = 0;
        LOBYTE(v49) = 1;
LABEL_39:
        v101 = v49;
        v50 = sub_1B2163B24(*(int *)v107);
        v51 = v50[2];
        if (v51)
        {
          v52 = v50 + 8;
          while (1)
          {
            if ((*(_BYTE *)(v52 - 2) & 1) == 0)
            {
              v53 = *(v52 - 4) == 457 && *((_BYTE *)v52 + 64) == 13;
              if (v53 && (*v52 & 1) != 0)
                break;
            }
            v52 += 14;
            if (!--v51)
              goto LABEL_52;
          }
          swift_bridgeObjectRelease();
          v55 = swift_allocObject();
          v56 = *(_OWORD *)&v107[8];
          v57 = *(_OWORD *)&v107[24];
          v58 = *(_OWORD *)&v107[40];
          v59 = *(_OWORD *)&v107[56];
          v60 = *(_OWORD *)&v107[72];
          v61 = 1;
          v62 = *(_QWORD *)&v107[88];
          if ((v45 & 0x8000) != 0)
          {
            v63 = 0;
            v64 = 15;
            v65 = 1;
            v66 = 5;
            goto LABEL_56;
          }
LABEL_54:
          v67 = v101;
          v65 = 0;
          v66 = 0;
          v64 = 0;
          v63 = 1;
        }
        else
        {
LABEL_52:
          swift_bridgeObjectRelease();
          v55 = swift_allocObject();
          v63 = 0;
          v56 = *(_OWORD *)&v107[8];
          v57 = *(_OWORD *)&v107[24];
          v58 = *(_OWORD *)&v107[40];
          v59 = *(_OWORD *)&v107[56];
          v60 = *(_OWORD *)&v107[72];
          v62 = *(_QWORD *)&v107[88];
          if ((v45 & 0x8000) == 0)
          {
            v61 = 0;
            goto LABEL_54;
          }
          v64 = 15;
          v65 = 1;
          v66 = 5;
          v61 = 0;
LABEL_56:
          v67 = v101;
        }
        v68 = *(_DWORD *)(v35 + 48);
        v69 = v61 | *v98;
        *(_DWORD *)(v55 + 16) = v45;
        *(_OWORD *)(v55 + 24) = v56;
        *(_OWORD *)(v55 + 40) = v57;
        *(_OWORD *)(v55 + 56) = v58;
        *(_OWORD *)(v55 + 72) = v59;
        *(_OWORD *)(v55 + 88) = v60;
        *(_QWORD *)(v55 + 104) = v62;
        *(_OWORD *)(v55 + 112) = 0u;
        *(_OWORD *)(v55 + 128) = 0u;
        *(_QWORD *)(v55 + 144) = v65;
        *(_QWORD *)(v55 + 152) = v66;
        *(_QWORD *)(v55 + 160) = v65;
        *(_QWORD *)(v55 + 168) = v66;
        *(_BYTE *)(v55 + 176) = v64;
        *(_BYTE *)(v55 + 177) = v63;
        *(_DWORD *)(v55 + 180) = v48;
        *(_BYTE *)(v55 + 184) = v67 & 1;
        *(_DWORD *)(v55 + 188) = v68;
        *(_BYTE *)(v55 + 192) = v69 & 1;
        *(_BYTE *)(v55 + 193) = 1;
        v70 = v55;
        *(_QWORD *)(v55 + 200) = v39;
        if ((*(_BYTE *)(v9 + 80) & 0x80) != 0)
        {
          v71 = qword_1ED4B8500;
          swift_bridgeObjectRetain();
          if (v71 != -1)
            swift_once();
          v72 = v37;
          objc_msgSend((id)qword_1ED4B84F0, sel_lock);
          if (qword_1ED4B8518 != -1)
            swift_once();
          v73 = swift_bridgeObjectRetain();
          v74 = sub_1B20C2FC8(v73);
          swift_bridgeObjectRelease();
          objc_msgSend((id)qword_1ED4B84F0, sel_unlock);
          v75 = *(_QWORD *)(v74 + 16);
          swift_bridgeObjectRelease();
          if (!v75)
          {
            v35 = v91;
            v37 = v72;
            v39 = v94;
            goto LABEL_72;
          }
          v76 = v9;
          v77 = *(_QWORD *)(a3 + 16);
          if (v77)
          {
            v102 = v48;
            swift_bridgeObjectRetain();
            v78 = (uint64_t *)(a3 + 40);
            v79 = v76;
            v80 = v99;
            do
            {
              v81 = *(v78 - 1);
              v82 = *v78;
              swift_retain();
              v83 = sub_1B20C4DC4(v81, v82, v70, v79, a4, (int64x2_t *)v107, v102 | ((unint64_t)(v101 & 1) << 32), v103, a8 & 1, (_QWORD *)a2, v105, v91);
              swift_release();
              if ((v83 & ~v80) != 0)
                v84 = v83;
              else
                v84 = 0;
              v80 |= v84;
              v78 += 2;
              --v77;
            }
            while (v77);
            v99 = v80;
            swift_release();
            swift_bridgeObjectRelease();
            v9 = v79;
            v35 = v91;
            v38 = v103;
            v37 = (_QWORD *)a2;
            v40 = v89;
          }
          else
          {
            v37 = v72;
            v35 = v91;
            v9 = v76;
            v86 = sub_1B20C4DC4(0, 0, v70, v76, a4, (int64x2_t *)v107, v48 | ((unint64_t)(v101 & 1) << 32), v38, a8 & 1, v72, v105, v91);
            swift_release();
            if ((v86 & ~v99) != 0)
              v99 |= v86;
          }
          v39 = v94;
        }
        else
        {
          swift_bridgeObjectRetain();
LABEL_72:
          v85 = sub_1B20C4DC4(0, 0, v70, v9, a4, (int64x2_t *)v107, v48 | ((unint64_t)(v101 & 1) << 32), v38, a8 & 1, v37, v105, v35);
          swift_release();
          if ((v85 & ~v99) != 0)
            v99 |= v85;
        }
        v33 = v100;
        v34 = v96;
        v36 = v95;
        goto LABEL_24;
      }
      if ((*(_WORD *)v107 & 0x1000) != 0)
        v47 = v36;
      else
        v47 = 1;
      if ((*(_WORD *)v107 & 0x1000) != 0)
        v48 = 1;
      else
        v48 = v93;
      if (v47 == 1)
      {
        v100 = v33;
        v49 = v90 | ((unsigned __int16)(*(_WORD *)v107 & 0x1000) >> 12);
        goto LABEL_39;
      }
    }
LABEL_24:
    ++v33;
  }
  while (v33 != v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v32 = v99;
LABEL_78:
  v87 = *(_BYTE *)(v9 + 80);
  swift_release();
  *((_BYTE *)v37 + 224) = (v87 & 8) != 0;
  return v32;
}

uint64_t sub_1B20C39FC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a1 & 1) != 0)
  {
    sub_1B2228890();
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1B2228890();
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  sub_1B2228890();
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  sub_1B2228890();
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  sub_1B2228890();
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0)
      goto LABEL_8;
LABEL_17:
    sub_1B2228890();
    if ((a1 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_16:
  sub_1B2228890();
  if ((a1 & 0x40) != 0)
    goto LABEL_17;
LABEL_8:
  if (a1 < 0)
LABEL_9:
    sub_1B2228890();
LABEL_10:
  v2 = sub_1B214E3E8();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x1B5E20388](v2, v4, v6, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B20C3BBC()
{
  _WORD *v0;

  return sub_1B20C39FC(*v0);
}

uint64_t sub_1B20C3BC4@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[11];

  sub_1B20C3EC8(v3);
  return sub_1B19F66A0((uint64_t)v3, a1, &qword_1ED4B8CF8);
}

uint64_t sub_1B20C3C0C(__int16 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 v8;

  *(_QWORD *)(v1 + 16) = 3;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 2;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 15;
  *(_WORD *)(v1 + 80) = 0;
  *(_QWORD *)(v1 + 88) = sub_1B20C3BC4;
  *(_QWORD *)(v1 + 96) = 0;
  if (qword_1ED4B8D00 != -1)
    swift_once();
  v3 = qword_1ED4D0C10;
  v4 = *(_QWORD *)algn_1ED4D0C18;
  v5 = qword_1ED4D0C20;
  v6 = qword_1ED4D0C28;
  v7 = xmmword_1ED4D0C30;
  v8 = byte_1ED4D0C40;
  *(_QWORD *)(v1 + 104) = qword_1ED4D0C10;
  *(_QWORD *)(v1 + 112) = v4;
  *(_QWORD *)(v1 + 120) = v5;
  *(_QWORD *)(v1 + 128) = v6;
  *(_OWORD *)(v1 + 136) = v7;
  *(_BYTE *)(v1 + 152) = v8;
  *(_QWORD *)(v1 + 160) = v3;
  *(_QWORD *)(v1 + 168) = v4;
  *(_QWORD *)(v1 + 176) = v5;
  *(_QWORD *)(v1 + 184) = v6;
  *(_OWORD *)(v1 + 192) = v7;
  *(_WORD *)(v1 + 208) = v8;
  *(_WORD *)(v1 + 80) = a1;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  return v1;
}

uint64_t sub_1B20C3CFC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RenderPipelineFactory()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for RenderPipelineFactory.Flags()
{
  return &type metadata for RenderPipelineFactory.Flags;
}

unint64_t sub_1B20C3DAC()
{
  unint64_t result;

  result = qword_1EEF63178;
  if (!qword_1EEF63178)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8EBC, &type metadata for RenderPipelineFactory.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF63178);
  }
  return result;
}

unint64_t sub_1B20C3DF4()
{
  unint64_t result;

  result = qword_1EEF63180;
  if (!qword_1EEF63180)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8E8C, &type metadata for RenderPipelineFactory.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF63180);
  }
  return result;
}

unint64_t sub_1B20C3E3C()
{
  unint64_t result;

  result = qword_1EEF63188;
  if (!qword_1EEF63188)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8EE4, &type metadata for RenderPipelineFactory.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF63188);
  }
  return result;
}

unint64_t sub_1B20C3E84()
{
  unint64_t result;

  result = qword_1EEF63190;
  if (!qword_1EEF63190)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B8F1C, &type metadata for RenderPipelineFactory.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF63190);
  }
  return result;
}

double sub_1B20C3EC8(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1B2244C80;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  return result;
}

uint64_t sub_1B20C3EF0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *__return_ptr, uint64_t);
  __int16 v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t result;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  _BYTE v86[48];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE __src[808];
  _BYTE __dst[808];
  uint64_t v95[101];
  _BYTE v96[176];
  _QWORD *v97;
  uint64_t v98[22];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD v119[5];
  uint64_t v120;
  int v121;
  _OWORD v122[11];
  __int128 v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  char v127;
  char v128;
  _QWORD v129[6];
  int v130;
  char v131;
  unsigned int v132;
  char v133;
  unsigned int v134;
  char v135;

  v3 = v2;
  v6 = (_QWORD *)*((_QWORD *)a1 + 23);
  v7 = *a1;
  v8 = sub_1B2163B24(*a1);
  v95[0] = (uint64_t)v6;
  swift_bridgeObjectRetain();
  sub_1B19F5058((uint64_t)v8);
  sub_1B1AE6738((int *)a1 + 41, (uint64_t)&v121);
  sub_1B1AE6738(&v121, (uint64_t)&v134);
  if (v135)
    v9 = v134;
  else
    v9 = 3;
  swift_bridgeObjectRetain();
  v10 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_1B1C64EC0(0, v6[2] + 1, 1, v6);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_1B1C64EC0(v11 > 1, v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v13 = &v10[14 * v12];
  *((_OWORD *)v13 + 2) = xmmword_1B22B8E20;
  *((_BYTE *)v13 + 48) = 0;
  v13[8] = v9;
  *(_OWORD *)(v13 + 9) = 0u;
  *(_OWORD *)(v13 + 11) = 0u;
  *(_OWORD *)(v13 + 13) = 0u;
  v13[15] = 0;
  *((_BYTE *)v13 + 128) = 14;
  swift_bridgeObjectRelease();
  v97 = v10;
  v15 = *((_QWORD *)a1 + 12);
  v14 = *((_QWORD *)a1 + 13);
  if (v14)
  {
    v16 = sub_1B1D33F68(*((_WORD **)a1 + 13));
    sub_1B19F5058(v16);
  }
  v17 = swift_bridgeObjectRetain();
  sub_1B19F5058(v17);
  v18 = *(void (**)(uint64_t *__return_ptr, uint64_t))(v3 + 88);
  swift_retain();
  v18(v98, v7);
  sub_1B19F66A0((uint64_t)v98, (uint64_t)v96, &qword_1ED4B8CF8);
  swift_release();
  sub_1B19F66A0((uint64_t)v98, (uint64_t)&v99, &qword_1ED4B8CF8);
  if (sub_1B1D2DF60((uint64_t)&v99) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1B1F8BB64(__dst);
    sub_1B19F66A0((uint64_t)__dst, (uint64_t)v95, &qword_1ED4B9B00);
    return sub_1B19F66A0((uint64_t)v95, a2, &qword_1ED4B9B00);
  }
  v78 = v15;
  v79 = a2;
  v80 = v3;
  v72 = v14;
  v20 = (v7 & 0x800) != 0 && *((float *)a1 + 43) < 0.0 && (v19 = *(_WORD *)(v3 + 80), (v19 & 1) == 0) && (v19 & 2) == 0;
  v21 = v99;
  v22 = v100;
  v23 = v101;
  v24 = v102;
  v62 = v106;
  v25 = v103;
  v60 = v104;
  v26 = v108;
  v81 = v109;
  v82 = v110;
  v83 = v107;
  v66 = v111;
  v67 = v112;
  v73 = v113;
  v68 = v114;
  v69 = v115;
  v70 = v118;
  v71 = v116;
  v59 = v105;
  if (*((_BYTE *)a1 + 161) != 1)
  {
    v77 = *((_OWORD *)a1 + 7);
    v74 = *(_OWORD *)(a1 + 34);
    v75 = *((_QWORD *)a1 + 16);
    v76 = *((_QWORD *)a1 + 19);
    v64 = v117;
    if ((v7 & 0x800) == 0)
      goto LABEL_25;
LABEL_21:
    LOBYTE(v65) = 0;
    if (v20)
      goto LABEL_22;
LABEL_32:
    sub_1B19F66A0((uint64_t)v96, (uint64_t)v95, &qword_1ED4B8CF8);
    sub_1B1D34438(v95);
    v50 = v59;
    v49 = v60;
    v45 = v82;
    v47 = v83;
    v46 = v26;
    v44 = v81;
    v43 = v25;
    v42 = v24;
    v34 = v66;
    v35 = v67;
    v36 = v73;
    v37 = v23;
    v38 = v68;
    v39 = v69;
    v41 = v70;
    v40 = v71;
    v48 = v62;
    goto LABEL_33;
  }
  v27 = v103;
  v28 = v102;
  v29 = v101;
  v30 = v100;
  v31 = v99;
  v32 = v117;
  sub_1B1AE6738(&v121, (uint64_t)&v130);
  v77 = 0u;
  if (v131 == 1)
  {
    v75 = 1;
    v76 = qword_1B22B9090[v130];
    v33 = vdupq_n_s64(1uLL);
    v33.i64[0] = v76;
    v74 = (__int128)v33;
  }
  else
  {
    v76 = 0;
    v74 = xmmword_1B2244C80;
    v75 = 1;
  }
  v51 = v32;
  v21 = v31;
  v22 = v30;
  v23 = v29;
  v24 = v28;
  v25 = v27;
  v64 = v51;
  if ((v7 & 0x800) != 0)
    goto LABEL_21;
LABEL_25:
  if ((a1[44] & 1) == 0)
  {
    sub_1B1AE6738(&v121, (uint64_t)&v132);
    if (v133 == 1 && v132 >= 2)
    {
      LOBYTE(v65) = 14;
      if (!v20)
        goto LABEL_32;
LABEL_22:
      swift_bridgeObjectRetain();
      sub_1B1B410E4(v21, v22);
      v58 = v26;
      v63 = v25;
      v34 = v66;
      sub_1B1B410E4(v83, v26);
      v61 = v24;
      v35 = v67;
      v36 = v73;
      v37 = v23;
      v38 = v68;
      v39 = v69;
      v40 = v71;
      sub_1B1B410E4(v67, v73);
      v41 = swift_unknownObjectRetain();
      v42 = v61;
      v43 = v63;
      v44 = v81;
      v45 = v82;
      v46 = v58;
      v47 = v83;
      v48 = 0;
      v49 = 0uLL;
      v50 = 0uLL;
LABEL_33:
      *(_QWORD *)&v84 = v21;
      *((_QWORD *)&v84 + 1) = v22;
      *(_QWORD *)&v85 = v37;
      *((_QWORD *)&v85 + 1) = v42;
      *(_QWORD *)v86 = v43;
      *(_OWORD *)&v86[8] = v49;
      *(_OWORD *)&v86[24] = v50;
      *(_QWORD *)&v86[40] = v48;
      *(_QWORD *)&v87 = v47;
      *((_QWORD *)&v87 + 1) = v46;
      *(_QWORD *)&v88 = v44;
      *((_QWORD *)&v88 + 1) = v45;
      *(_QWORD *)&v89 = v34;
      *((_QWORD *)&v89 + 1) = v35;
      *(_QWORD *)&v90 = v36;
      *((_QWORD *)&v90 + 1) = v38;
      *(_QWORD *)&v91 = v39;
      *((_QWORD *)&v91 + 1) = v40;
      *(_QWORD *)&v92 = v64;
      *((_QWORD *)&v92 + 1) = v41;
      v122[1] = v85;
      v122[0] = v84;
      v122[5] = v87;
      v122[4] = *(_OWORD *)&v86[32];
      v122[2] = *(_OWORD *)v86;
      v122[3] = *(_OWORD *)&v86[16];
      v122[10] = v92;
      v122[9] = v91;
      v122[8] = v90;
      v122[6] = v88;
      v122[7] = v89;
      v52 = *(_OWORD *)(a1 + 14);
      v119[2] = *(_OWORD *)(a1 + 10);
      v119[3] = v52;
      v119[4] = *(_OWORD *)(a1 + 18);
      v120 = *((_QWORD *)a1 + 11);
      v53 = *(_OWORD *)(a1 + 6);
      v119[0] = *(_OWORD *)(a1 + 2);
      v119[1] = v53;
      v54 = (uint64_t)v97;
      v123 = v77;
      v124 = v75;
      v125 = v74;
      v126 = v76;
      v127 = v65;
      v128 = 0;
      v55 = *(_QWORD *)(v80 + 16);
      v129[0] = 0;
      v129[1] = 0;
      v129[2] = 2;
      memset(&v129[3], 0, 24);
      v56 = *((_BYTE *)a1 + 177);
      swift_retain();
      sub_1B1FD1C40((uint64_t *)v122, v119, v78, v72, v54, (uint64_t)&v123, v55, (uint64_t)v129, (uint64_t)__src, 1, v56);
      swift_release();
      sub_1B1BDB228((uint64_t *)&v84);
      sub_1B1D2DF84(v98);
      memcpy(__dst, __src, sizeof(__dst));
      nullsub_16(__dst);
      sub_1B19F66A0((uint64_t)__dst, (uint64_t)v95, &qword_1ED4B9B00);
      a2 = v79;
      return sub_1B19F66A0((uint64_t)v95, a2, &qword_1ED4B9B00);
    }
  }
  if (*(_QWORD *)(v80 + 72) < 0x100uLL)
  {
    v65 = *(_QWORD *)(v80 + 72);
    if (v20)
      goto LABEL_22;
    goto LABEL_32;
  }
  result = sub_1B222967C();
  __break(1u);
  return result;
}

uint64_t sub_1B20C45DC(id a1, uint64_t a2, id a3, _OWORD *a4, char a5, uint64_t a6)
{
  char **v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  uint64_t v25;
  int v26;
  _QWORD v29[5];
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  _BYTE v36[8];
  _BYTE v37[8];
  uint64_t v38;
  _OWORD v39[12];

  v10 = &selRef_fragmentBindings;
  if ((a2 & 1) != 0)
    v10 = &selRef_vertexBindings;
  v11 = objc_msgSend(a3, *v10);
  sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7980);
  v12 = sub_1B2228AB8();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_1B22296AC();
    if (v13)
      goto LABEL_5;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
    {
LABEL_5:
      v14 = 0;
      while (1)
      {
        if ((v12 & 0xC000000000000001) != 0)
        {
          v15 = (void *)MEMORY[0x1B5E21018](v14, v12);
        }
        else
        {
          v15 = *(void **)(v12 + 8 * v14 + 32);
          swift_unknownObjectRetain();
        }
        if (objc_msgSend(v15, sel_index) == a1)
          break;
        swift_unknownObjectRelease();
        if (v13 == ++v14)
          goto LABEL_11;
      }
      swift_bridgeObjectRelease_n();
      v17 = swift_dynamicCastObjCProtocolConditional();
      if (!v17)
      {
        v25 = qword_1ED4BF430;
        swift_unknownObjectRetain();
        if (v25 != -1)
          swift_once();
        *((_QWORD *)&v39[0] + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        sub_1B2228890();
        *(_QWORD *)&v32 = v15;
        sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7980);
        sub_1B22295EC();
        v26 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)&v39[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v26, (uint64_t *)v39, 0, 0xE000000000000000);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        if (qword_1ED4B9A18 != -1)
          swift_once();
        v16 = qword_1ED4D0DB0;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_31;
      }
      v18 = (void *)v17;
      swift_getObjectType();
      swift_unknownObjectRetain_n();
      if ((sub_1B1F9D750() & 1) == 0)
        goto LABEL_22;
      if (qword_1ED4B7878 != -1)
        swift_once();
      if (byte_1ED4D097C == 1)
      {
        v19 = a4[9];
        v39[8] = a4[8];
        v39[9] = v19;
        v39[10] = a4[10];
        v20 = a4[5];
        v39[4] = a4[4];
        v39[5] = v20;
        v21 = a4[7];
        v39[6] = a4[6];
        v39[7] = v21;
        v22 = a4[1];
        v39[0] = *a4;
        v39[1] = v22;
        v23 = a4[3];
        v39[2] = a4[2];
        v39[3] = v23;
        sub_1B203578C(a2, v29);
        sub_1B19F66A0((uint64_t)v29, (uint64_t)v30, (unint64_t *)&qword_1ED4B7880);
        if (!*((_QWORD *)&v30[0] + 1))
        {
          if (qword_1ED4B9A18 != -1)
            swift_once();
          v16 = qword_1ED4D0DB0;
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_31;
        }
        v32 = v30[0];
        v33 = v30[1];
        v34 = v31;
        v24 = *(void **)(a6 + 16);
        sub_1B19F8C58(v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
        objc_msgSend(v24, sel_newArgumentEncoderWithBufferBinding_, v18);
        objc_msgSend((id)swift_unknownObjectRetain(), sel_encodedLength);
        v35 = v32;
        sub_1B1BA80C0((uint64_t)&v35);
        sub_1B1E275E8((uint64_t)&v33, (uint64_t)v36, (unint64_t *)&unk_1ED4BA660, (unint64_t *)&unk_1ED4BA650);
        sub_1B1B40274((uint64_t)v36);
        sub_1B1E275E8((uint64_t)&v33 + 8, (uint64_t)v37, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0);
        sub_1B1B40274((uint64_t)v37);
        v38 = v34;
        sub_1B1B28C6C((uint64_t)&v38);
        swift_unknownObjectRelease();
        if ((a5 & 1) == 0)
          goto LABEL_21;
      }
      else
      {
LABEL_22:
        objc_msgSend(v18, sel_bufferDataSize);
        if ((a5 & 1) == 0)
        {
LABEL_21:
          v16 = sub_1B1F7F3F4((uint64_t)v15);
LABEL_31:
          swift_unknownObjectRelease_n();
          return v16;
        }
      }
      v16 = MEMORY[0x1E0DEE9D8];
      goto LABEL_31;
    }
  }
LABEL_11:
  swift_bridgeObjectRelease_n();
  if (qword_1ED4B9A18 != -1)
    swift_once();
  v16 = qword_1ED4D0DB0;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return v16;
}

_QWORD *sub_1B20C4B80@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_1B1B956CC(MEMORY[0x1E0DEE9D8]);
  *a1 = result;
  return result;
}

double sub_1B20C4BAC@<D0>(uint64_t a1@<X8>)
{
  double result;
  double v3;
  char v4;
  char v5;

  swift_getAtKeyPath();
  result = v3;
  *(double *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = v5;
  return result;
}

uint64_t sub_1B20C4BFC()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B20C4C28@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if ((a1 & 0x800) != 0)
  {
    v17 = *(_QWORD *)(a2 + 248);
    v18 = (uint64_t *)(v17 + 72);
    v19 = (unsigned __int8 *)(v17 + 80);
    v20 = (uint64_t *)(v17 + 88);
    v21 = (uint64_t *)(v17 + 96);
    v22 = (uint64_t *)(v17 + 104);
    v23 = (uint64_t *)(v17 + 112);
    v24 = (uint64_t *)(v17 + 120);
    v25 = (uint64_t *)(v17 + 128);
    v26 = (uint64_t *)(v17 + 136);
    v27 = (uint64_t *)(v17 + 144);
    v28 = (uint64_t *)(v17 + 152);
    v29 = (uint64_t *)(v17 + 160);
LABEL_8:
    v33 = *v27;
    v34 = *v28;
    v32 = *v26;
    v12 = *v25;
    v11 = *v24;
    v10 = *v23;
    v9 = *v22;
    v8 = *v21;
    v7 = *v20;
    v6 = *v19;
    v5 = *v18;
    v16 = *v29;
    result = swift_unknownObjectRetain();
    v13 = v32;
    v14 = v33;
    v15 = v34;
    goto LABEL_9;
  }
  if (a1 < 0)
  {
    v30 = *(_QWORD *)(a2 + 248);
    v18 = (uint64_t *)(v30 + 384);
    v19 = (unsigned __int8 *)(v30 + 392);
    v20 = (uint64_t *)(v30 + 400);
    v21 = (uint64_t *)(v30 + 408);
    v22 = (uint64_t *)(v30 + 416);
    v23 = (uint64_t *)(v30 + 424);
    v24 = (uint64_t *)(v30 + 432);
    v25 = (uint64_t *)(v30 + 440);
    v26 = (uint64_t *)(v30 + 448);
    v27 = (uint64_t *)(v30 + 456);
    v28 = (uint64_t *)(v30 + 464);
    v29 = (uint64_t *)(v30 + 472);
    goto LABEL_8;
  }
  if ((a1 & 0x1000) != 0)
  {
    v31 = *(_QWORD *)(a2 + 248);
    v18 = (uint64_t *)(v31 + 176);
    v19 = (unsigned __int8 *)(v31 + 184);
    v20 = (uint64_t *)(v31 + 192);
    v21 = (uint64_t *)(v31 + 200);
    v22 = (uint64_t *)(v31 + 208);
    v23 = (uint64_t *)(v31 + 216);
    v24 = (uint64_t *)(v31 + 224);
    v25 = (uint64_t *)(v31 + 232);
    v26 = (uint64_t *)(v31 + 240);
    v27 = (uint64_t *)(v31 + 248);
    v28 = (uint64_t *)(v31 + 256);
    v29 = (uint64_t *)(v31 + 264);
    goto LABEL_8;
  }
  result = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
LABEL_9:
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  a3[4] = v8;
  a3[5] = v9;
  a3[6] = v10;
  a3[7] = v11;
  a3[8] = v12;
  a3[9] = v13;
  a3[10] = v14;
  a3[11] = v15;
  a3[12] = v16;
  return result;
}

uint64_t sub_1B20C4DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t a7, uint64_t a8, char a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t result;
  __int128 v28;
  int v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  void *v35;
  id v36;
  id v37;
  unint64_t v38;
  void *v39;
  void *v40;
  id v41;
  unint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  os_unfair_lock_s *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _QWORD *v76;
  unint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *(*v84)@<X0>(_QWORD *@<X8>);
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  id v93;
  id v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  int64x2_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104[101];
  uint64_t v105[13];
  _QWORD v106[2];
  char v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE __src[808];
  _BYTE __dst[808];
  _OWORD v120[2];
  _OWORD v121[9];
  _QWORD v122[5];
  _QWORD v123[3];
  char v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD v147[12];
  char v148[8];
  uint64_t v149;

  *(_QWORD *)(a3 + 112) = a1;
  *(_QWORD *)(a3 + 120) = a2;
  swift_retain();
  swift_release();
  v18 = *(_OWORD *)(a3 + 160);
  v147[8] = *(_OWORD *)(a3 + 144);
  v147[9] = v18;
  v19 = *(_OWORD *)(a3 + 192);
  v147[10] = *(_OWORD *)(a3 + 176);
  v147[11] = v19;
  v20 = *(_OWORD *)(a3 + 96);
  v147[4] = *(_OWORD *)(a3 + 80);
  v147[5] = v20;
  v21 = *(_OWORD *)(a3 + 128);
  v147[6] = *(_OWORD *)(a3 + 112);
  v147[7] = v21;
  v22 = *(_OWORD *)(a3 + 32);
  v147[0] = *(_OWORD *)(a3 + 16);
  v147[1] = v22;
  v23 = *(_OWORD *)(a3 + 64);
  v147[2] = *(_OWORD *)(a3 + 48);
  v147[3] = v23;
  sub_1B20C5AF0((uint64_t)v147);
  sub_1B20C3EF0((unsigned int *)v147, (uint64_t)v104);
  sub_1B20C5B24((uint64_t)v147);
  sub_1B19F66A0((uint64_t)v104, (uint64_t)__src, &qword_1ED4B9B00);
  if (sub_1B1D2DF60((uint64_t)__src) == 1)
    return 2;
  memcpy(__dst, __src, sizeof(__dst));
  v24 = sub_1B1B32B58((uint64_t)__dst, 1);
  if (!v24)
  {
    if ((a9 & 1) != 0)
    {
      sub_1B20C5B58(v104);
      return 1;
    }
    goto LABEL_8;
  }
  v26 = v24;
  if (v24 == 1)
  {
LABEL_8:
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v120[0] = 0;
    *((_QWORD *)&v120[0] + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v120[0] = 0xD000000000000014;
    *((_QWORD *)&v120[0] + 1) = 0x80000001B234AF70;
    sub_1B1FD0880();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v28 = v120[0];
    v29 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v120[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v29, (uint64_t *)v120, v28, *((uint64_t *)&v28 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_13;
  }
  if (v24 == 2)
  {
    sub_1B20C5B58(v104);
    return 4;
  }
  if (!v25)
  {
    v32 = qword_1ED4BF430;
    swift_unknownObjectRetain();
    if (v32 != -1)
      swift_once();
    *(_QWORD *)&v120[0] = 0;
    *((_QWORD *)&v120[0] + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v120[0] = 0xD000000000000016;
    *((_QWORD *)&v120[0] + 1) = 0x80000001B234AEE0;
    sub_1B1FD0880();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v33 = v120[0];
    v34 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v120[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v34, (uint64_t *)v120, v33, *((uint64_t *)&v33 + 1));
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B1B427DC(v26, 0);
LABEL_13:
    sub_1B20C5B58(v104);
    return 2;
  }
  v30 = a11;
  v100 = v25;
  v101 = a6;
  if ((*(_BYTE *)(a4 + 209) & 1) != 0)
  {
    v31 = v25;
    swift_unknownObjectRetain();
    goto LABEL_34;
  }
  v35 = (void *)a10[3];
  a10[3] = v25;
  v36 = v25;
  v97 = v26;
  swift_unknownObjectRetain();

  v37 = objc_msgSend(v36, sel_vertexBindings);
  sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7980);
  v38 = sub_1B2228AB8();

  v39 = *(void **)(a11 + 16);
  v40 = *(void **)(a11 + 280);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_1B1ECBFB8(v38, v39, v40);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v41 = objc_msgSend(v36, sel_fragmentBindings);
  v42 = sub_1B2228AB8();

  v43 = *(void **)(a11 + 16);
  swift_unknownObjectRetain();
  v44 = *(void **)(a11 + 280);
  swift_unknownObjectRetain();
  sub_1B1ECBFB8(v42, v43, v44);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v26 = v97;
  LODWORD(v44) = (*(unsigned __int16 *)(a4 + 80) >> 2) & 1;
  swift_retain();
  v98 = sub_1B20C45DC((id)2, 1, v36, __dst, (char)v44, a11);
  v46 = v45;
  v94 = v47;
  swift_release();
  v48 = (*(unsigned __int16 *)(a4 + 80) >> 2) & 1;
  swift_retain();
  v49 = sub_1B20C45DC((id)2, 2, v36, __dst, v48, a11);
  v51 = v50;
  v92 = v52;
  swift_release();
  if (v46)
  {
    if (!v51)
    {
      v54 = 0;
      v53 = 0;
      goto LABEL_31;
    }
    v53 = 0;
    if (v46 == v51)
      goto LABEL_26;
  }
  else
  {
    v53 = 0;
    if (!v51)
    {
LABEL_26:
      v54 = v51;
      if (v94 == v92)
        v53 = sub_1B1CC970C(v98, v49);
      goto LABEL_31;
    }
  }
  v54 = v51;
LABEL_31:
  *(_QWORD *)(a4 + 160) = v98;
  *(_QWORD *)(a4 + 168) = v46;
  *(_QWORD *)(a4 + 176) = v94;
  *(_QWORD *)(a4 + 184) = v49;
  *(_QWORD *)(a4 + 192) = v54;
  *(_QWORD *)(a4 + 200) = v92;
  *(_BYTE *)(a4 + 208) = v53 & 1;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v121[6] = *(_OWORD *)&__dst[128];
  v121[7] = *(_OWORD *)&__dst[144];
  v121[8] = *(_OWORD *)&__dst[160];
  v121[2] = *(_OWORD *)&__dst[64];
  v121[3] = *(_OWORD *)&__dst[80];
  v121[4] = *(_OWORD *)&__dst[96];
  v121[5] = *(_OWORD *)&__dst[112];
  v120[0] = *(_OWORD *)__dst;
  v120[1] = *(_OWORD *)&__dst[16];
  v121[0] = *(_OWORD *)&__dst[32];
  v121[1] = *(_OWORD *)&__dst[48];
  sub_1B19F66A0((uint64_t)v121 + 8, (uint64_t)v122, (unint64_t *)&qword_1ED4B7880);
  sub_1B19F8C58(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B19F66A0((uint64_t)v122, (uint64_t)v148, (unint64_t *)&qword_1ED4B7880);
  v55 = v149;
  if (v149)
    sub_1B19F8C58(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B41238);
  *(_BYTE *)(a4 + 209) = v55 != 0;
  a6 = v101;
  v30 = a11;
LABEL_34:
  swift_retain();
  sub_1B20C4C28(a6->i32[0], v30, v105);
  swift_release();
  sub_1B20C5D08((uint64_t)v105, (uint64_t)v106);
  v56 = v106[0];
  if (v106[0])
  {
    v57 = v106[1];
    v58 = v107;
    v59 = v108;
    v60 = v109;
    v61 = v110;
    v62 = v111;
    v63 = v112;
    v64 = v113;
    v65 = v114;
    v66 = v115;
    v67 = v116;
    v68 = v117;
  }
  else if (*(_BYTE *)(a12 + 53) == 1)
  {
    v69 = *(_QWORD *)(v30 + 248);
    v71 = *(_BYTE *)(a12 + 64);
    v135 = *(_QWORD *)(a12 + 56);
    v70 = v135;
    v136 = v71;
    v137 = 7;
    v138 = 0;
    v140 = 0;
    v139 = 0;
    v141 = -1;
    v142 = 7;
    v143 = 0;
    v145 = 0;
    v144 = 0;
    v146 = -1;
    v72 = *(os_unfair_lock_s **)(v69 + 56);
    swift_retain();
    os_unfair_lock_lock(v72);
    sub_1B21300C4(v69, &v135, v123);
    os_unfair_lock_unlock(v72);
    swift_release();
    v63 = -1;
    v59 = 7;
    v58 = v71;
    v57 = v70;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v56 = v123[0];
    v68 = -1;
    v64 = 7;
  }
  else
  {
    v73 = *(_QWORD *)(v30 + 248);
    if ((a7 & 0x1FFFFFFFFLL) == 0x100000000)
    {
      v56 = *(_QWORD *)(v73 + 64);
      v99 = *(_QWORD *)(v73 + 72);
      v96 = *(_BYTE *)(v73 + 80);
      v61 = *(_QWORD *)(v73 + 104);
      v93 = *(id *)(v73 + 96);
      v95 = *(_QWORD *)(v73 + 88);
      v62 = *(_QWORD *)(v73 + 112);
      v91 = *(_QWORD *)(v73 + 120);
      v64 = *(_QWORD *)(v73 + 128);
      v65 = *(_QWORD *)(v73 + 136);
      v66 = *(_QWORD *)(v73 + 144);
      v67 = *(_QWORD *)(v73 + 152);
      v74 = *(_QWORD *)(v73 + 160);
    }
    else
    {
      v56 = *(_QWORD *)(v73 + 168);
      v99 = *(_QWORD *)(v73 + 176);
      v96 = *(_BYTE *)(v73 + 184);
      v61 = *(_QWORD *)(v73 + 208);
      v93 = *(id *)(v73 + 200);
      v95 = *(_QWORD *)(v73 + 192);
      v62 = *(_QWORD *)(v73 + 216);
      v91 = *(_QWORD *)(v73 + 224);
      v64 = *(_QWORD *)(v73 + 232);
      v65 = *(_QWORD *)(v73 + 240);
      v66 = *(_QWORD *)(v73 + 248);
      v67 = *(_QWORD *)(v73 + 256);
      v74 = *(_QWORD *)(v73 + 264);
    }
    v90 = v74;
    swift_unknownObjectRetain();
    v68 = v90;
    v63 = v91;
    v60 = v93;
    v59 = v95;
    v58 = v96;
    v57 = v99;
  }
  v123[0] = v26;
  v123[1] = v56;
  v123[2] = v57;
  v124 = v58;
  v125 = v59;
  v126 = v60;
  v127 = v61;
  v128 = v62;
  v129 = v63;
  v130 = v64;
  v131 = v65;
  v132 = v66;
  v133 = v67;
  v134 = v68;
  if (!a2)
  {
    swift_unknownObjectRetain_n();
    swift_unknownObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v102 = a10[1];
    a10[1] = 0x8000000000000000;
    sub_1B1B880BC((uint64_t)v123, v101, isUniquelyReferenced_nonNull_native);
    a10[1] = v102;
    swift_bridgeObjectRelease();
    sub_1B20C5B58(v104);
    sub_1B1B427DC(v26, v100);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    v84 = 0;
LABEL_52:
    swift_unknownObjectRelease();
    sub_1B19E5A18((uint64_t)v84);
    return 4;
  }
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain_n();
  v75 = swift_isUniquelyReferenced_nonNull_native();
  v76 = (_QWORD *)*a10;
  *a10 = 0x8000000000000000;
  v77 = sub_1B1DC3AC8(a1);
  v79 = v78;
  v80 = v76[2] + ((v78 & 1) == 0);
  if (v76[3] >= v80)
  {
    if ((v75 & 1) == 0)
      sub_1B1EAEF94();
    goto LABEL_49;
  }
  sub_1B1E9D418(v80, v75);
  v81 = sub_1B1DC3AC8(a1);
  if ((v79 & 1) == (v82 & 1))
  {
    v77 = v81;
LABEL_49:
    *a10 = v76;
    swift_bridgeObjectRelease();
    v85 = (_QWORD *)*a10;
    swift_bridgeObjectRetain();
    if ((v79 & 1) == 0)
    {
      v86 = sub_1B1B956CC(MEMORY[0x1E0DEE9D8]);
      sub_1B1EB32B8(v77, a1, (uint64_t)v86, v85);
    }
    v87 = v85[7];
    swift_bridgeObjectRelease();
    v88 = 8 * v77;
    v89 = swift_isUniquelyReferenced_nonNull_native();
    v103 = *(_QWORD *)(v87 + v88);
    *(_QWORD *)(v87 + v88) = 0x8000000000000000;
    sub_1B1B880BC((uint64_t)v123, v101, v89);
    *(_QWORD *)(v87 + v88) = v103;
    swift_bridgeObjectRelease();
    sub_1B20C5B58(v104);
    sub_1B1B427DC(v26, v100);

    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    v84 = sub_1B20C4B80;
    goto LABEL_52;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B20C5AF0(uint64_t a1)
{
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B20C5B24(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t *sub_1B20C5B58(uint64_t *a1)
{
  sub_1B1F8BCD0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t sub_1B20C5D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B20C5D4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B20C5D4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA7D0)
  {
    sub_1B20C5DA0();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA7D0);
  }
}

void sub_1B20C5DA0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BA7C8)
  {
    sub_1B19F8F48(255, (unint64_t *)&unk_1ED4B79F0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BA7C8);
  }
}

uint64_t type metadata accessor for ParticleSizeOverVelocity.System()
{
  return objc_opt_self();
}

uint64_t sub_1B20C5E38(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  sub_1B20C80FC(0, &qword_1EEF631A8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20C80B8();
  sub_1B222A180();
  v13 = *v3;
  HIBYTE(v12) = 0;
  sub_1B1BA05CC();
  sub_1B2229958();
  if (!v2)
  {
    LOBYTE(v13) = *((_BYTE *)v3 + 8);
    HIBYTE(v12) = 1;
    sub_1B1A71B00();
    sub_1B2229958();
    v13 = *(uint64_t *)((char *)v3 + 12);
    HIBYTE(v12) = 2;
    sub_1B1B4D924();
    sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
    v13 = *(uint64_t *)((char *)v3 + 20);
    HIBYTE(v12) = 3;
    sub_1B2229958();
    v13 = *(uint64_t *)((char *)v3 + 28);
    HIBYTE(v12) = 4;
    sub_1B2229958();
    v13 = *(uint64_t *)((char *)v3 + 36);
    HIBYTE(v12) = 5;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B20C6094()
{
  return "ParticleSizeOverVelocity";
}

void sub_1B20C60A8(char *a1)
{
  sub_1B1F978C4(*a1);
}

uint64_t sub_1B20C60B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20C60EC + 4 * byte_1B22B90F0[*v0]))(0x7469736F706D6F63, 0xEB000000006E6F69);
}

uint64_t sub_1B20C60EC()
{
  return 1701080941;
}

uint64_t sub_1B20C60FC()
{
  return 0x797469636F6C6576;
}

uint64_t sub_1B20C6120()
{
  return 0x65676E615278;
}

uint64_t sub_1B20C6134()
{
  return 0x65676E615279;
}

uint64_t sub_1B20C6160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B20C626C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B20C6184()
{
  sub_1B20C80B8();
  return sub_1B222A1D4();
}

uint64_t sub_1B20C61AC()
{
  sub_1B20C80B8();
  return sub_1B222A1E0();
}

double sub_1B20C61D4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _BYTE v7[28];

  sub_1B20C7DE0(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = *(_OWORD *)v7;
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)&v7[12];
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)&v7[12];
  }
  return result;
}

uint64_t sub_1B20C6218(_QWORD *a1)
{
  return sub_1B20C5E38(a1);
}

uint64_t sub_1B20C622C()
{
  return type metadata accessor for ParticleSizeOverVelocity.System();
}

double sub_1B20C6248@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 1065353216;
  *(_BYTE *)(a1 + 8) = 0;
  result = 0.0078125;
  *(_OWORD *)(a1 + 12) = xmmword_1B2244E50;
  *(_OWORD *)(a1 + 28) = xmmword_1B2244E50;
  return result;
}

uint64_t sub_1B20C626C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469636F6C6576 && a2 == 0xED000065676E6152 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65676E615278 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65676E615279 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65676E61527ALL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1B20C64E0(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  os_unfair_lock_s *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  os_unfair_lock_s *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  char v101;
  int v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  int v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  _QWORD *v123;
  char v124;
  _QWORD *v125;
  unsigned __int8 v126;
  _QWORD *v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  int v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  _BYTE v142[40];
  _QWORD v143[5];
  uint64_t v144;
  int v145;
  char v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  char v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  _QWORD v156[5];
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __n128 v160;
  __int128 v161;
  uint64_t v162;
  _OWORD v163[2];
  uint64_t v164;
  _OWORD v165[2];
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  char v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  char v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  char v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  __n128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191[8];
  _OWORD v192[2];
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  __n128 v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  _BYTE v207[40];
  __n128 v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;

  v211 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_1B1D19018(v2, &v199);
  swift_release();
  if (v199.n128_u8[8] == 3)
  {
    v3 = 0;
    v126 = 0;
  }
  else
  {
    v3 = v199.n128_u8[0];
    v126 = v199.n128_u8[8];
  }
  v4 = *(_OWORD *)(a1 + 104);
  v167 = *(_OWORD *)(a1 + 88);
  v168 = v4;
  v169 = *(_QWORD *)(a1 + 120);
  sub_1B19F1FE0((uint64_t)&v130);
  v5 = v130;
  v117 = v131;
  v112 = v132;
  v107 = v133;
  v6 = v134;
  v7 = v135;
  swift_retain();
  sub_1B19F21E4((uint64_t)&v136);
  v8 = v136;
  v102 = v137;
  v97 = v138;
  v95 = v139;
  v9 = v140;
  v10 = v141;
  swift_retain();
  sub_1B19F1FE0((uint64_t)v142);
  sub_1B1A19B14();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v11 + 32) = &type metadata for Scale1;
  *(_QWORD *)(v11 + 40) = &off_1E63BC300;
  sub_1B1B44110(v143, v11);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v142);
  v93 = v3;
  if (v3)
  {
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v12 + 32) = &type metadata for TransientOriginScale;
    *(_QWORD *)(v12 + 40) = &off_1E639F8B0;
    sub_1B1E68C98(&v144);
    sub_1B19ED720((uint64_t)&v130);
    swift_setDeallocating();
    swift_deallocClassInstance();
    sub_1B19ED720((uint64_t)&v130);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v13 + 32) = &type metadata for TransientOriginScale;
    *(_QWORD *)(v13 + 40) = &off_1E639F8B0;
    sub_1B1E68C98(&v150);
    sub_1B19ED720((uint64_t)&v136);
    swift_setDeallocating();
    swift_deallocClassInstance();
    sub_1B19ED720((uint64_t)&v136);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v14 + 32) = &type metadata for TransientOriginScale;
    *(_QWORD *)(v14 + 40) = &off_1E639F8B0;
    swift_retain();
    v15 = v156;
    sub_1B1E68C98(v156);
    swift_setDeallocating();
    swift_deallocClassInstance();
    sub_1B19ED720((uint64_t)v143);
    sub_1B19ED720((uint64_t)v143);
    v8 = v150;
    v16 = v151;
    v17 = v152;
    v18 = v153;
    v9 = v154;
    v10 = v155;
    v5 = v144;
    v19 = v145;
    v20 = v146;
    v21 = v147;
    v6 = v148;
    v7 = v149;
  }
  else
  {
    sub_1B19ED720((uint64_t)&v136);
    sub_1B19ED720((uint64_t)&v130);
    v15 = v143;
    v16 = v102;
    v17 = v97;
    v19 = v117;
    v18 = v95;
    v20 = v112;
    v21 = v107;
  }
  v22 = *((_DWORD *)v15 + 2);
  v23 = *((_BYTE *)v15 + 12);
  v24 = v15[2];
  v25 = *((_BYTE *)v15 + 24);
  v26 = v15[4];
  v27 = *v15;
  v182 = v5;
  v183 = v19;
  v184 = v20;
  v185 = v21;
  v186 = v6;
  v187 = v7;
  v176 = v8;
  v177 = v16;
  v178 = v17;
  v179 = v18;
  v180 = v9;
  v181 = v10;
  v170 = v27;
  v171 = v22;
  v172 = v23;
  v173 = v24;
  v174 = v25;
  v175 = v26;
  if (v126)
  {
    if (v126 == 1)
    {
      v28 = swift_retain();
      sub_1B1E8FCE4(v28, (uint64_t)&v182, 0x200000000, v192);
      sub_1B19F66A0((uint64_t)v192, (uint64_t)&v199, (unint64_t *)&qword_1ED4B7DE0);
      if (v199.n128_u64[0])
      {
        v208 = v199;
        v209 = v200;
        v98 = v202;
        v210 = v201;
        v29 = v203;
        v30 = v204;
        v127 = v205;
        v31 = v206;
        swift_release();
        if (v31 > 0 && v29)
        {
          v122 = v127[4];
          v118 = *(_BYTE *)(v30 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v188 = v208;
          v189 = v209;
          v190 = v210;
          swift_retain();
          swift_retain();
          swift_retain();
          v32 = 0;
          v33 = 0;
          do
          {
            v34 = (int *)(v98 + 48 * v32);
            v36 = (uint64_t *)*((_QWORD *)v34 + 2);
            v35 = *((_QWORD *)v34 + 3);
            v38 = *((_QWORD *)v34 + 4);
            v37 = *((_QWORD *)v34 + 5);
            v108 = *v34;
            v113 = v32;
            v103 = v34[1];
            v39 = v33;
            if ((v118 & 1) != 0)
            {
              v40 = *(os_unfair_lock_s **)(v37 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v40);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v37 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v122);
            sub_1B19F66A0((uint64_t)(v127 + 6), (uint64_t)v191, &qword_1ED4B7FB0);
            v41 = v127[4];
            v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v37 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v127[6] = ecs_stack_allocator_allocate(v41, 48 * v42, 8);
            v127[7] = v42;
            v127[9] = 0;
            v127[10] = 0;
            v127[8] = 0;
            swift_release();
            sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v36, v35, v38, (uint64_t)v127);
            sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v36, v35, v38, (uint64_t)v127);
            if (v36)
            {
              if (v38)
                __asm { BR              X8 }
            }
            else if (v108 != v103)
            {
              __asm { BR              X11 }
            }
            v33 = v39;
            sub_1B1F05D48(v127, (unsigned __int16 **)&v188, (uint64_t)v191);
            sub_1B1F03804((char *)v37);
            ecs_stack_allocator_pop_snapshot(v122);
            if ((v118 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v37 + 376));
            }
            swift_release();
            v32 = v113 + 1;
          }
          while (v113 + 1 != v29);
          goto LABEL_56;
        }
LABEL_55:
        swift_retain();
        swift_retain();
        swift_retain();
LABEL_56:
        swift_release();
        swift_release();
        sub_1B19ED748((uint64_t *)v192);
        v75 = (uint64_t *)v192;
LABEL_81:
        sub_1B19ED748(v75);
        return swift_release();
      }
    }
    else
    {
      v59 = swift_retain();
      sub_1B1E8FCE4(v59, (uint64_t)&v182, 0x200000000, v192);
      sub_1B19F66A0((uint64_t)v192, (uint64_t)&v199, (unint64_t *)&qword_1ED4B7DE0);
      if (v199.n128_u64[0])
      {
        v208 = v199;
        v209 = v200;
        v100 = v202;
        v210 = v201;
        v60 = v203;
        v61 = v204;
        v129 = v205;
        v62 = v206;
        swift_release();
        if (v62 > 0 && v60)
        {
          v63 = v129[4];
          v124 = *(_BYTE *)(v61 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v188 = v208;
          v189 = v209;
          v190 = v210;
          swift_retain();
          swift_retain();
          swift_retain();
          v64 = 0;
          v65 = 0;
          v94 = v63;
          do
          {
            v66 = v60;
            v67 = (int *)(v100 + 48 * v64);
            v68 = (uint64_t *)*((_QWORD *)v67 + 2);
            v69 = *((_QWORD *)v67 + 3);
            v70 = *((_QWORD *)v67 + 4);
            v71 = *((_QWORD *)v67 + 5);
            v120 = v64;
            v110 = *v67;
            v115 = v65;
            v105 = v67[1];
            if ((v124 & 1) != 0)
            {
              v72 = *(os_unfair_lock_s **)(v71 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v72);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v71 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v63);
            sub_1B19F66A0((uint64_t)(v129 + 6), (uint64_t)v191, &qword_1ED4B7FB0);
            v73 = v129[4];
            v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v129[6] = ecs_stack_allocator_allocate(v73, 48 * v74, 8);
            v129[7] = v74;
            v129[9] = 0;
            v129[10] = 0;
            v129[8] = 0;
            swift_release();
            sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v68, v69, v70, (uint64_t)v129);
            sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v68, v69, v70, (uint64_t)v129);
            if (v68)
            {
              v60 = v66;
              if (v70)
                __asm { BR              X8 }
            }
            else
            {
              v60 = v66;
              if (v110 != v105)
                __asm { BR              X11 }
            }
            v63 = v94;
            v65 = v115;
            sub_1B1F05D48(v129, (unsigned __int16 **)&v188, (uint64_t)v191);
            sub_1B1F03804((char *)v71);
            ecs_stack_allocator_pop_snapshot(v94);
            if ((v124 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 376));
            }
            swift_release();
            v64 = v120 + 1;
          }
          while (v120 + 1 != v60);
          goto LABEL_56;
        }
        goto LABEL_55;
      }
    }
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v43 = swift_retain();
    sub_1B1E8FCE4(v43, (uint64_t)&v176, 0x200000000, &v188);
    sub_1B19F66A0((uint64_t)&v188, (uint64_t)&v199, (unint64_t *)&qword_1ED4B7DE0);
    if (v199.n128_u64[0])
    {
      v160 = v199;
      v161 = v200;
      v104 = v202;
      v162 = v201;
      v44 = v203;
      v45 = v204;
      v123 = v205;
      v46 = v206;
      swift_release();
      v47 = v93;
      if (v46 > 0 && v44)
      {
        v119 = v123[4];
        v48 = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v163[0] = v160;
        v163[1] = v161;
        v164 = v162;
        swift_retain();
        swift_retain();
        swift_retain();
        v49 = 0;
        v50 = 0;
        v99 = v48;
        do
        {
          v128 = v50;
          v51 = (int *)(v104 + 48 * v49);
          v114 = *v51;
          v109 = v51[1];
          v53 = (uint64_t *)*((_QWORD *)v51 + 2);
          v52 = *((_QWORD *)v51 + 3);
          v55 = *((_QWORD *)v51 + 4);
          v54 = *((_QWORD *)v51 + 5);
          if (v48)
          {
            v56 = *(os_unfair_lock_s **)(v54 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v56);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v54 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v119);
          sub_1B19F66A0((uint64_t)(v123 + 6), (uint64_t)&v208, &qword_1ED4B7FB0);
          v57 = v123[4];
          v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v123[6] = ecs_stack_allocator_allocate(v57, 48 * v58, 8);
          v123[7] = v58;
          v123[9] = 0;
          v123[10] = 0;
          v123[8] = 0;
          swift_release();
          sub_1B1A12038((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, v53, v52, v55, (uint64_t)v123);
          sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v53, v52, v55, (uint64_t)v123);
          if (v53)
          {
            v50 = v128;
            v48 = v99;
            if (v55)
              __asm { BR              X8 }
          }
          else
          {
            v50 = v128;
            v48 = v99;
            if (v114 != v109)
              __asm { BR              X11 }
          }
          sub_1B1F05D48(v123, (unsigned __int16 **)v163, (uint64_t)&v208);
          sub_1B1F03804((char *)v54);
          ecs_stack_allocator_pop_snapshot(v119);
          if ((v48 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v54 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v54 + 376));
          }
          swift_release();
          ++v49;
        }
        while (v49 != v44);
        sub_1B19ED748((uint64_t *)&v188);
        sub_1B19ED748((uint64_t *)&v188);
        v47 = v93;
      }
      else
      {
        sub_1B19ED748((uint64_t *)&v188);
      }
    }
    else
    {
      swift_release();
      v47 = v93;
    }
    swift_retain();
    v76 = swift_retain();
    sub_1B1E8FCE4(v76, (uint64_t)&v170, 0x200000000, v191);
    sub_1B19F66A0((uint64_t)v191, (uint64_t)v192, (unint64_t *)&qword_1ED4B7DE0);
    if (!*(_QWORD *)&v192[0])
    {
      swift_release();
      swift_release();
      swift_release();
      return swift_release_n();
    }
    v157 = v192[0];
    v158 = v192[1];
    v111 = v194;
    v159 = v193;
    v77 = v195;
    v78 = v196;
    v125 = v197;
    v79 = v198;
    swift_release();
    swift_release();
    if (v79 > 0)
    {
      if (v77)
      {
        v80 = v125[4];
        v81 = *(_BYTE *)(v78 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v165[0] = v157;
        v165[1] = v158;
        v166 = v159;
        swift_retain();
        swift_retain();
        swift_retain();
        v82 = 0;
        v83 = v47;
        v101 = v81;
        v106 = v77;
        v96 = v80;
        do
        {
          v84 = (int *)(v111 + 48 * v82);
          v121 = *v84;
          v116 = v84[1];
          v86 = (uint64_t *)*((_QWORD *)v84 + 2);
          v85 = *((_QWORD *)v84 + 3);
          v88 = *((_QWORD *)v84 + 4);
          v87 = *((_QWORD *)v84 + 5);
          if ((v81 & 1) != 0)
          {
            v89 = *(os_unfair_lock_s **)(v87 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v89);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v87 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v80);
          sub_1B19F66A0((uint64_t)(v125 + 6), (uint64_t)v207, &qword_1ED4B7FB0);
          v90 = v125[4];
          v91 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v87 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v125[6] = ecs_stack_allocator_allocate(v90, 48 * v91, 8);
          v125[7] = v91;
          v125[9] = 0;
          v125[10] = 0;
          v125[8] = 0;
          swift_release();
          sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, v86, v85, v88, (uint64_t)v125);
          sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v86, v85, v88, (uint64_t)v125);
          if (v86)
          {
            v81 = v101;
            if (v88)
              __asm { BR              X8 }
          }
          else
          {
            v81 = v101;
            if (v121 != v116)
              __asm { BR              X11 }
          }
          sub_1B1F05D48(v125, (unsigned __int16 **)v165, (uint64_t)v207);
          sub_1B1F03804((char *)v87);
          v80 = v96;
          ecs_stack_allocator_pop_snapshot(v96);
          if ((v81 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v87 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v87 + 376));
          }
          swift_release();
          ++v82;
        }
        while (v82 != v106);
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
      }
      swift_release();
      swift_release();
      sub_1B19ED748(v191);
      v75 = v191;
      goto LABEL_81;
    }
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    swift_release();
    sub_1B19ED748(v191);
    sub_1B19ED748(v191);
  }
  return swift_release();
}

uint64_t getEnumTagSinglePayload for ParticleSizeOverVelocity(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleSizeOverVelocity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeOverVelocity()
{
  return &type metadata for ParticleSizeOverVelocity;
}

uint64_t sub_1B20C7DE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;

  sub_1B20C80FC(0, &qword_1EEF63198, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v18 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20C80B8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v21 = 0;
  sub_1B1BA0588();
  sub_1B2229814();
  v11 = v22;
  v12 = HIDWORD(v22);
  v21 = 1;
  sub_1B1A71ABC();
  sub_1B2229814();
  v19 = v22;
  v20 = v11;
  sub_1B1B4D924();
  v21 = 2;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  v13 = v22;
  v21 = 3;
  sub_1B2229814();
  v14 = v22;
  v21 = 4;
  sub_1B2229814();
  v15 = v22;
  v21 = 5;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v16 = v22;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_BYTE *)a2 = v20;
  *(_DWORD *)(a2 + 4) = v12;
  *(_BYTE *)(a2 + 8) = v19;
  *(_QWORD *)(a2 + 12) = v13;
  *(_QWORD *)(a2 + 20) = v14;
  *(_QWORD *)(a2 + 28) = v15;
  *(_QWORD *)(a2 + 36) = v16;
  return result;
}

unint64_t sub_1B20C80B8()
{
  unint64_t result;

  result = qword_1EEF631A0;
  if (!qword_1EEF631A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B92F0, &type metadata for ParticleSizeOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF631A0);
  }
  return result;
}

void sub_1B20C80FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B20C80B8();
    v7 = a3(a1, &type metadata for ParticleSizeOverVelocity.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleSizeOverVelocity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B20C81A4 + 4 * byte_1B22B911B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B20C81D8 + 4 * byte_1B22B9116[v4]))();
}

uint64_t sub_1B20C81D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20C81E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20C81E8);
  return result;
}

uint64_t sub_1B20C81F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20C81FCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B20C8200(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20C8208(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleSizeOverVelocity.CodingKeys()
{
  return &type metadata for ParticleSizeOverVelocity.CodingKeys;
}

unint64_t sub_1B20C8228()
{
  unint64_t result;

  result = qword_1EEF631B0;
  if (!qword_1EEF631B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B92C8, &type metadata for ParticleSizeOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF631B0);
  }
  return result;
}

unint64_t sub_1B20C8270()
{
  unint64_t result;

  result = qword_1EEF631B8;
  if (!qword_1EEF631B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9238, &type metadata for ParticleSizeOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF631B8);
  }
  return result;
}

unint64_t sub_1B20C82B8()
{
  unint64_t result;

  result = qword_1EEF631C0;
  if (!qword_1EEF631C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9260, &type metadata for ParticleSizeOverVelocity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF631C0);
  }
  return result;
}

uint64_t sub_1B20C82FC()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HeapTextureAllocator()
{
  return objc_opt_self();
}

uint64_t sub_1B20C8350(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = *(_QWORD *)(a2 + 32);
  result = swift_conformsToProtocol2();
  if (result)
  {
    v6 = *(unsigned int *)(a2 + 24);
    v7 = *(unsigned int *)(a2 + 28);
    if ((_DWORD)v6 != -1 || (_DWORD)v7 != 0)
    {
      v9 = result;
      v10 = *a1;
      swift_unownedRetainStrong();
      swift_release();
      swift_unownedRetainStrong();
      sub_1B1FE1E1C(v4, v9, v6 | (v7 << 32), 0);
      swift_release();
      result = swift_unknownObjectUnownedLoadStrong();
      if (result)
      {
        v11 = result;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v4, v9) & 1) != 0)
        {
          v12 = v11 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
          v13 = type metadata accessor for ScriptingConfiguration();
          ++*(_QWORD *)(v12 + *(int *)(v13 + 36));
        }
        result = swift_unknownObjectRelease();
      }
      if (*((_BYTE *)a1 + 24) == 1)
      {
        swift_unownedRetainStrong();
        v14[0] = v6;
        v14[1] = v7;
        v15 = v10;
        v16 = v4;
        v17 = v9;
        v18 = 13;
        sub_1B1E2DB30((uint64_t)v14);
        swift_release();
        return sub_1B1ADF058((uint64_t)v14);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B20C84A8(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_1B20C84C0(a1, a2, a3, a4, a5, a6, type metadata accessor for ParticleInitScript);
}

uint64_t sub_1B20C84B4(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  return sub_1B20C84C0(a1, a2, a3, a4, a5, a6, type metadata accessor for ParticleUpdateScript);
}

uint64_t sub_1B20C84C0(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(_QWORD))
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *i;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v51 = a6;
  v13 = a3;
  v53 = a7(0);
  MEMORY[0x1E0C80A78](v53, v14);
  v52 = (char *)&v48 - v15;
  if (v13 == 5)
    v16 = sub_1B1C04D48(a4, a5);
  else
    v16 = sub_1B201BF04(a3, a4, a5);
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
    return swift_bridgeObjectRelease();
  v49 = a2;
  v50 = a7;
  v48 = 0;
  for (i = (_QWORD *)(v16 + 40); ; i += 2)
  {
    v19 = *((_DWORD *)i - 2);
    v20 = *((_DWORD *)i - 1);
    v21 = *i;
    swift_retain();
    if (v19 == -1 && v20 == 0)
      goto LABEL_14;
    if (v19 < 0)
      goto LABEL_14;
    if (*(_QWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v19)
      goto LABEL_14;
    v23 = *(_QWORD *)(v21 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v20 != -1 && *(_DWORD *)(v23 + 12 * v19 + 8) != v20)
      goto LABEL_14;
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 80) + 8 * *(__int16 *)(v23 + 12 * v19 + 6) + 32) + 16);
    v25 = *(_QWORD *)(v24 + 128);
    if (!*(_QWORD *)(v25 + 16))
      goto LABEL_14;
    v26 = sub_1B1DC3AC8(a1);
    if ((v27 & 1) == 0)
      goto LABEL_14;
    v28 = *(_QWORD *)(*(_QWORD *)(v24 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26) + 32);
    swift_release();
    if (v28 != a1)
      goto LABEL_15;
    v29 = *(_QWORD *)(v49 + 8);
    type metadata accessor for VFXAttribute();
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = v21;
    swift_retain();
    swift_unownedRetain();
    swift_release();
    *(_DWORD *)(v30 + 24) = v19;
    *(_DWORD *)(v30 + 28) = v20;
    *(_QWORD *)(v30 + 32) = a1;
    *(_QWORD *)(v30 + 40) = v29;
    v31 = swift_conformsToProtocol2();
    v32 = v31 ? v31 : 0;
    v33 = v31 ? a1 : 0;
    v34 = *(_QWORD *)(v30 + 16);
    swift_unownedRetainStrong();
    v35 = *(_DWORD *)(v30 + 28);
    v36 = *(int *)(v30 + 24);
    if (__PAIR64__(v35, v36) == 0xFFFFFFFF
      || (v36 & 0x80000000) != 0
      || *(_QWORD *)(v34 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v36
      || (v43 = *(_QWORD *)(v34 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v35 != -1)
      && *(_DWORD *)(v43 + 12 * (int)v36 + 8) != v35)
    {
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
    }
    else
    {
      v44 = (unsigned int *)(v43 + 12 * (int)v36);
      v45 = v33;
      v46 = v48;
      sub_1B1FE42F0(*(_QWORD *)(*(_QWORD *)(v34 + 136) + 8 * (int)*v44 + 32), v45, v32, *v44 | ((unint64_t)*((unsigned __int16 *)v44 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v44+ 2) << 32), v34, (uint64_t)&v57);
      v48 = v46;
    }
    swift_release();
    v37 = *((_QWORD *)&v58 + 1);
    if (!*((_QWORD *)&v58 + 1))
      break;
    v38 = v59;
    v39 = sub_1B19FA070(&v57, *((uint64_t *)&v58 + 1));
    v55 = v37;
    v56 = *(_QWORD *)(v38 + 8);
    v40 = sub_1B1A137F4((uint64_t *)&v54);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v40, v39, v37);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v57);
    sub_1B1A02518(&v54, (uint64_t)&v57);
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BA190);
    v41 = (uint64_t)v52;
    swift_dynamicCast();
    v42 = *(_BYTE *)(v41 + 40);
    sub_1B1A04628(v41, v50);
    if ((v42 & 1) != 0)
      *v51 = v30;
LABEL_14:
    swift_release();
LABEL_15:
    if (!--v17)
      return swift_bridgeObjectRelease();
  }
  result = sub_1B1A04628((uint64_t)&v57, (uint64_t (*)(_QWORD))sub_1B1A137A0);
  __break(1u);
  return result;
}

uint64_t sub_1B20C8878(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, _BYTE *a8, unint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inited;
  char v31;
  _BYTE *v32;
  uint64_t v33;

  if (a3 == 5)
    v15 = sub_1B1C04D48(a4, a5);
  else
    v15 = sub_1B201BF04(a3, a4, a5);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v32 = a8;
    v33 = a1;
    v17 = (_QWORD *)(v15 + 40);
    v31 = a7 & 1;
    while (1)
    {
      v18 = *((_DWORD *)v17 - 2);
      v19 = *((_DWORD *)v17 - 1);
      v20 = *v17;
      swift_retain();
      if (v18 == -1 && v19 == 0)
        goto LABEL_18;
      if (v18 < 0)
        goto LABEL_18;
      if (*(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v18)
        goto LABEL_18;
      v22 = *(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (v19 != -1 && *(_DWORD *)(v22 + 12 * v18 + 8) != v19)
        goto LABEL_18;
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 80) + 8 * *(__int16 *)(v22 + 12 * v18 + 6) + 32) + 16);
      v24 = *(_QWORD *)(v23 + 128);
      if (!*(_QWORD *)(v24 + 16))
        goto LABEL_18;
      v25 = sub_1B1DC3AC8(v33);
      if ((v26 & 1) == 0)
        goto LABEL_18;
      v27 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25) + 32);
      swift_release();
      if (v27 == v33)
        break;
LABEL_19:
      v17 += 2;
      if (!--v16)
        return swift_bridgeObjectRelease();
    }
    v28 = *(_QWORD *)(a2 + 8);
    type metadata accessor for VFXAttribute();
    swift_retain();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v20;
    swift_unownedRetain();
    swift_release();
    *(_DWORD *)(inited + 24) = v18;
    *(_DWORD *)(inited + 28) = v19;
    *(_QWORD *)(inited + 32) = v33;
    *(_QWORD *)(inited + 40) = v28;
    sub_1B1C191A0(inited, a6, v31, v32, a9, a10);
LABEL_18:
    swift_release();
    goto LABEL_19;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20C8A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t Strong;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE v44[16];
  uint64_t v45;
  int64_t v46;
  _BYTE *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  _BYTE v73[24];
  uint64_t v74;

  v51 = a3;
  v54 = a2;
  v4 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v57 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v44[-v10];
  sub_1B1FF34B0();
  v12 = sub_1B22296B8();
  v13 = 0;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(a1 + 64);
  v48 = &v68;
  v47 = v73;
  v60 = v12;
  v55 = v12 + 64;
  v53 = (unint64_t)(v14 + 63) >> 6;
  v46 = v53 - 5;
  v52 = a1 + 64;
  v45 = a1 + 104;
  v50 = a1;
  v49 = v4;
  v56 = v11;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v74 = v13;
      v20 = v19 | (v13 << 6);
      goto LABEL_19;
    }
    v21 = v13 + 1;
    if (v13 + 1 >= v53)
      return v60;
    v22 = *(_QWORD *)(v52 + 8 * v21);
    if (!v22)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v53)
        return v60;
      v22 = *(_QWORD *)(v52 + 8 * v21);
      if (!v22)
      {
        v21 = v13 + 3;
        if (v13 + 3 >= v53)
          return v60;
        v22 = *(_QWORD *)(v52 + 8 * v21);
        if (!v22)
        {
          v21 = v13 + 4;
          if (v13 + 4 >= v53)
            return v60;
          v22 = *(_QWORD *)(v52 + 8 * v21);
          if (!v22)
            break;
        }
      }
    }
LABEL_18:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v21 << 6);
    v74 = v21;
LABEL_19:
    v23 = *(_QWORD *)(a1 + 48);
    v24 = *(_QWORD *)(a1 + 56);
    v66 = 8 * v20;
    v25 = (int *)(v23 + 8 * v20);
    v26 = *v25;
    LODWORD(v25) = *((unsigned __int8 *)v25 + 4);
    v63 = v26;
    v64 = (int)v25;
    v65 = *(_QWORD *)(v57 + 72) * v20;
    sub_1B209DE98(v24 + v65, (uint64_t)v11);
    sub_1B209DE98((uint64_t)v11, (uint64_t)v7);
    v27 = *(int *)(v4 + 44);
    v28 = *(_QWORD *)&v7[v27];
    if (v28)
    {
      v29 = v54;
      v30 = *(_QWORD *)(v54 + 16);
      swift_unownedRetainStrong();
      v62 = *(unsigned int *)(v29 + 24);
      v61 = *(unsigned int *)(v29 + 28);
      swift_retain();
      swift_release();
      v31 = *(_QWORD *)(v28 + 32);
      v32 = swift_conformsToProtocol2();
      if (v32)
        v33 = v32;
      else
        v33 = 0;
      if (v32)
        v34 = v31;
      else
        v34 = 0;
      v58 = v34;
      v59 = v33;
      if (v34)
      {
        v35 = *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
        swift_retain();
        if (v35)
        {
          v36 = *(_BYTE *)(v35 + 80);
          MEMORY[0x1B5E240CC](v35 + 48);
          v35 = *(_QWORD *)(v35 + 56);
        }
        else
        {
          v36 = 0;
        }
        v69 = 0;
        swift_unknownObjectUnownedInit();
        v67 = v30;
        v69 = v35;
        swift_unknownObjectUnownedAssign();
        swift_unownedRetain();
        swift_unknownObjectRelease();
        LOBYTE(v70) = v36;
        sub_1B1A02530((uint64_t)&v67, (uint64_t)&v72);
        if ((_DWORD)v62 != -1 || (_DWORD)v61)
        {
          v37 = v72;
          swift_unownedRetainStrong();
          swift_release();
          swift_unownedRetainStrong();
          sub_1B1FE1E1C(v58, v59, v62 | (v61 << 32), 0);
          swift_release();
          Strong = swift_unknownObjectUnownedLoadStrong();
          if (Strong)
          {
            v39 = Strong;
            if (((*(uint64_t (**)(void))(v59 + 24))() & 1) != 0)
            {
              v40 = v39 + OBJC_IVAR____TtC3VFX13EntityManager_scriptingConfig;
              v41 = type metadata accessor for ScriptingConfiguration();
              ++*(_QWORD *)(v40 + *(int *)(v41 + 36));
            }
            swift_unknownObjectRelease();
          }
          if (v73[16] == 1)
          {
            swift_unownedRetainStrong();
            v67 = __PAIR64__(v61, v62);
            v68 = v37;
            v69 = v58;
            v70 = v59;
            v71 = 13;
            sub_1B1E2DB30((uint64_t)&v67);
            swift_release();
            sub_1B1ADF058((uint64_t)&v67);
          }
        }
        sub_1B1A0256C((uint64_t)&v72);
        sub_1B1E31340(1);
        swift_release();
        a1 = v50;
        v4 = v49;
      }
      swift_release();
      swift_release();
      *(_QWORD *)&v7[v27] = 0;
    }
    v42 = &v7[*(int *)(v4 + 48)];
    if ((v42[8] & 1) == 0)
    {
      sub_1B1DA4B24(*(_QWORD *)v42);
      *(_QWORD *)v42 = 0;
      v42[8] = 1;
    }
    v11 = v56;
    sub_1B1A04628((uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    *(_QWORD *)(v55 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v17 = v60;
    v18 = *(_QWORD *)(v60 + 48) + v66;
    *(_DWORD *)v18 = v63;
    *(_BYTE *)(v18 + 4) = v64;
    sub_1B20C96EC((uint64_t)v7, *(_QWORD *)(v17 + 56) + v65);
    ++*(_QWORD *)(v17 + 16);
    v13 = v74;
  }
  while (v46 != v13)
  {
    v22 = *(_QWORD *)(v45 + 8 * v13++);
    if (v22)
    {
      v21 = v13 + 4;
      goto LABEL_18;
    }
  }
  return v60;
}

uint64_t sub_1B20C9014(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 v34;
  unsigned __int8 v35;

  if (a3 == 5)
    v8 = sub_1B1C04D48(a4, a5);
  else
    v8 = sub_1B201BF04(a3, a4, a5);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
    return swift_bridgeObjectRelease();
  v29 = a1;
  v10 = (uint64_t *)(v8 + 40);
  do
  {
    v12 = *((unsigned int *)v10 - 2);
    v11 = *((unsigned int *)v10 - 1);
    v13 = *v10;
    swift_retain();
    v14 = (_DWORD)v12 == -1 && (_DWORD)v11 == 0;
    if (!v14
      && (v12 & 0x80000000) == 0
      && *(_QWORD *)(v13 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v12
      && ((v15 = *(_QWORD *)(v13 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v11 == -1)
       || *(_DWORD *)(v15 + 12 * (int)v12 + 8) == (_DWORD)v11)
      && (v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 80) + 8 * *(__int16 *)(v15 + 12 * (int)v12 + 6) + 32)
                          + 16),
          v17 = *(_QWORD *)(v16 + 128),
          *(_QWORD *)(v17 + 16))
      && (v18 = sub_1B1DC3AC8(v29), (v19 & 1) != 0))
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18) + 32);
      swift_release();
      if (v20 == v29)
      {
        v27 = *(_QWORD *)(a2 + 8);
        type metadata accessor for VFXAttribute();
        swift_retain();
        inited = swift_initStackObject();
        *(_QWORD *)(inited + 16) = v13;
        swift_unownedRetain();
        swift_release();
        *(_DWORD *)(inited + 24) = v12;
        *(_DWORD *)(inited + 28) = v11;
        *(_QWORD *)(inited + 32) = v29;
        *(_QWORD *)(inited + 40) = v27;
        sub_1B1D165B4(v12 | (v11 << 32), (uint64_t)&v31);
        v23 = v32;
        v22 = v33;
        v24 = v34 | (v35 << 16);
        LODWORD(v27) = v31;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v25 = sub_1B20C8A90(v22, inited, a6);
        swift_release();
        swift_release();
        swift_retain();
        swift_bridgeObjectRelease_n();
        v28 = v28 & 0xFF000000 | v24 & 1 | v24 & 0x100 | v24 & 0x10000;
        sub_1B1BF79F8(v27, v23, v25, v28, *(_QWORD *)(inited + 24));
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_release();
    }
    v10 += 2;
    --v9;
  }
  while (v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20C92EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a3 == 5)
    v11 = sub_1B1C04D48(a4, a5);
  else
    v11 = sub_1B201BF04(a3, a4, a5);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v29 = a1;
    v27 = a2;
    v28 = a6;
    for (i = (_QWORD *)(v11 + 40); ; i += 2)
    {
      v14 = *((_DWORD *)i - 2);
      v15 = *((_DWORD *)i - 1);
      v16 = *i;
      swift_retain();
      if (v14 == -1 && v15 == 0)
        goto LABEL_18;
      if (v14 < 0)
        goto LABEL_18;
      if (*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v14)
        goto LABEL_18;
      v18 = *(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (v15 != -1 && *(_DWORD *)(v18 + 12 * v14 + 8) != v15)
        goto LABEL_18;
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 80) + 8 * *(__int16 *)(v18 + 12 * v14 + 6) + 32) + 16);
      v20 = *(_QWORD *)(v19 + 128);
      if (!*(_QWORD *)(v20 + 16))
        goto LABEL_18;
      v21 = sub_1B1DC3AC8(v29);
      if ((v22 & 1) == 0)
        goto LABEL_18;
      v23 = *(_QWORD *)(*(_QWORD *)(v19 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21) + 32);
      swift_release();
      if (v23 == v29)
        break;
LABEL_19:
      if (!--v12)
        return swift_bridgeObjectRelease();
    }
    v24 = *(_QWORD *)(v27 + 8);
    type metadata accessor for VFXAttribute();
    swift_retain();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v16;
    swift_unownedRetain();
    swift_release();
    *(_DWORD *)(inited + 24) = v14;
    *(_DWORD *)(inited + 28) = v15;
    *(_QWORD *)(inited + 32) = v29;
    *(_QWORD *)(inited + 40) = v24;
    sub_1B209858C(inited, v28, a7);
LABEL_18:
    swift_release();
    goto LABEL_19;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20C94E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t *a8)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  if (a3 == 5)
    v13 = sub_1B1C04D48(a4, a5);
  else
    v13 = sub_1B201BF04(a3, a4, a5);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v31 = a1;
    v29 = a2;
    v30 = a7;
    for (i = (_QWORD *)(v13 + 40); ; i += 2)
    {
      v16 = *((_DWORD *)i - 2);
      v17 = *((_DWORD *)i - 1);
      v18 = *i;
      swift_retain();
      if (v16 == -1 && v17 == 0)
        goto LABEL_18;
      if (v16 < 0)
        goto LABEL_18;
      if (*(_QWORD *)(v18 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v16)
        goto LABEL_18;
      v20 = *(_QWORD *)(v18 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (v17 != -1 && *(_DWORD *)(v20 + 12 * v16 + 8) != v17)
        goto LABEL_18;
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 80) + 8 * *(__int16 *)(v20 + 12 * v16 + 6) + 32) + 16);
      v22 = *(_QWORD *)(v21 + 128);
      if (!*(_QWORD *)(v22 + 16))
        goto LABEL_18;
      v23 = sub_1B1DC3AC8(v31);
      if ((v24 & 1) == 0)
        goto LABEL_18;
      v25 = *(_QWORD *)(*(_QWORD *)(v21 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23) + 32);
      swift_release();
      if (v25 == v31)
        break;
LABEL_19:
      if (!--v14)
        return swift_bridgeObjectRelease();
    }
    v26 = *(_QWORD *)(v29 + 8);
    type metadata accessor for VFXAttribute();
    swift_retain();
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 16) = v18;
    swift_unownedRetain();
    swift_release();
    *(_DWORD *)(inited + 24) = v16;
    *(_DWORD *)(inited + 28) = v17;
    *(_QWORD *)(inited + 32) = v31;
    *(_QWORD *)(inited + 40) = v26;
    sub_1B20989DC(inited, a6, v30, a8);
LABEL_18:
    swift_release();
    goto LABEL_19;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20C96EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B20C9730()
{
  uint64_t v0;

  if (*(uint64_t *)(v0 + 96) > 1)
    return 5;
  if (*(_QWORD *)(v0 + 88))
    return 5;
  return *(unsigned __int8 *)(v0 + 20);
}

void sub_1B20C975C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63B0D80;
}

uint64_t sub_1B20C976C()
{
  sub_1B20CB5DC();
  return sub_1B2228A70();
}

uint64_t sub_1B20C97C8()
{
  sub_1B20CB5DC();
  return sub_1B22289F8();
}

double sub_1B20C9814()
{
  uint64_t v0;
  double result;

  sub_1B1AE2028();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E100;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v0 + 32) = 0xBF80000000000000;
  *(_QWORD *)(v0 + 40) = _D1;
  result = 0.00781250557;
  *(_QWORD *)(v0 + 48) = 0x3F800000BF800000;
  qword_1EEFD5880 = v0;
  return result;
}

double sub_1B20C9868()
{
  uint64_t v0;
  double result;

  sub_1B1AE2028();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B227BE30;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(v0 + 32) = _D0;
  *(_QWORD *)(v0 + 40) = 0xBF8000003F800000;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v0 + 48) = result;
  *(_QWORD *)(v0 + 56) = 0x3F800000BF800000;
  qword_1EEFD5888 = v0;
  return result;
}

char *sub_1B20C98C0()
{
  char *result;

  result = sub_1B20C98DC();
  qword_1EEFD5890 = (uint64_t)result;
  return result;
}

char *sub_1B20C98DC()
{
  char *v0;
  uint64_t i;
  float sinval;
  uint64_t v3;
  __float2 v4;
  unint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  float v9;
  float32x2_t v10;
  __float2 v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v0 = sub_1B1C64878(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  for (i = 0; i != 5; ++i)
  {
    v4 = __sincosf_stret((float)((float)i * 1.2566) + 3.1416);
    *(float *)&v3 = v4.__cosval;
    sinval = v4.__sinval;
    v5 = *((_QWORD *)v0 + 2);
    v6 = *((_QWORD *)v0 + 3);
    v7 = v6 >> 1;
    v8 = v5 + 1;
    if (v6 >> 1 <= v5)
    {
      v13 = sub_1B1C64878(v6 > 1, v5 + 1, 1, v0);
      sinval = v4.__sinval;
      *(float *)&v3 = v4.__cosval;
      v0 = v13;
      v6 = *((_QWORD *)v13 + 3);
      v7 = v6 >> 1;
    }
    *((float *)&v3 + 1) = sinval;
    *((_QWORD *)v0 + 2) = v8;
    *(_QWORD *)&v0[8 * v5 + 32] = v3;
    v11 = __sincosf_stret((float)((float)((float)i * 1.2566) + 3.1416) + 0.62832);
    v10.f32[0] = v11.__cosval;
    v9 = v11.__sinval;
    v12 = v5 + 2;
    if (v7 < v12)
    {
      v14 = sub_1B1C64878(v6 > 1, v12, 1, v0);
      v9 = v11.__sinval;
      v10.i32[0] = LODWORD(v11.__cosval);
      v0 = v14;
    }
    v10.f32[1] = v9;
    *((_QWORD *)v0 + 2) = v12;
    *(float32x2_t *)&v0[8 * v8 + 32] = vmul_f32(v10, (float32x2_t)0x3F0000003F000000);
  }
  return v0;
}

char *sub_1B20C9A38()
{
  char *result;

  result = sub_1B20C9A54();
  qword_1EEFD5898 = (uint64_t)result;
  return result;
}

char *sub_1B20C9A54()
{
  char *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __float2 v4;

  v0 = sub_1B1C64878(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v1 = 0;
  v2 = *((_QWORD *)v0 + 2);
  do
  {
    v3 = *((_QWORD *)v0 + 3);
    if (v2 >= v3 >> 1)
      v0 = sub_1B1C64878(v3 > 1, v2 + 1, 1, v0);
    v4 = __sincosf_stret((float)((float)((float)v1 * -3.1416) + (float)((float)v1 * -3.1416)) * 0.0625);
    *((_QWORD *)v0 + 2) = v2 + 1;
    *(_QWORD *)&v0[8 * v2++ + 32] = __PAIR64__(LODWORD(v4.__sinval), LODWORD(v4.__cosval));
    ++v1;
  }
  while (v1 != 16);
  return v0;
}

void sub_1B20C9B2C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B20C9B58()
{
  if (qword_1EEF57528 != -1)
    swift_once();
  return *(_QWORD *)(qword_1EEFD5880 + 16);
}

void sub_1B20C9C34(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63A5058;
}

uint64_t sub_1B20C9C44()
{
  sub_1B20CB598();
  return sub_1B2228A70();
}

uint64_t sub_1B20C9CA0()
{
  sub_1B20CB598();
  return sub_1B22289F8();
}

void sub_1B20C9CEC()
{
  __asm { BR              X10 }
}

uint64_t sub_1B20C9D10()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1EEF57528 != -1)
    swift_once();
  if (*(_QWORD *)(qword_1EEFD5880 + 16) <= 1uLL)
    v1 = 4;
  else
    v1 = 6;
  return v1 + 2 * *(_QWORD *)(v0 + 56);
}

uint64_t sub_1B20C9E04@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL8 v10;
  _BOOL8 v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[10];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v6 = 0xD000000000000014;
  v7 = 0x80000001B234B180;
  if (*(uint64_t *)(a2 + 96) <= 1 && !*(_QWORD *)(a2 + 88))
  {
    v6 = 0xD000000000000020;
    v7 = 0x80000001B234B1E0;
    if (!*(_QWORD *)(a2 + 56) && !*(_BYTE *)(a2 + 64))
    {
      v6 = 0xD000000000000019;
      v7 = 0x80000001B234B210;
    }
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226CD10;
  v9 = *(unsigned __int8 *)(a2 + 64);
  if (*(_BYTE *)(a2 + 64))
  {
    v10 = 0;
    *(_OWORD *)(v8 + 32) = xmmword_1B228D750;
    *(_BYTE *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 64) = 0;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_QWORD *)(v8 + 120) = 0;
    *(_BYTE *)(v8 + 128) = 13;
  }
  else
  {
    v11 = *(_DWORD *)(a2 + 68) != -1 || *(_DWORD *)(a2 + 72) != 0;
    v10 = 0;
    *(_OWORD *)(v8 + 32) = xmmword_1B228D750;
    *(_BYTE *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 64) = v11;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 104) = 0u;
    *(_QWORD *)(v8 + 120) = 0;
    *(_BYTE *)(v8 + 128) = 13;
    if (!v9)
      v10 = *(_DWORD *)(a2 + 76) != -1 || *(_DWORD *)(a2 + 80) != 0;
  }
  *(_OWORD *)(v8 + 144) = xmmword_1B228D760;
  *(_BYTE *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 176) = v10;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  if ((a1 & 0x4800) == 0x4000)
    v12 = 0xD00000000000001DLL;
  else
    v12 = 0xD000000000000014;
  *(_OWORD *)(v8 + 216) = 0uLL;
  *(_QWORD *)(v8 + 232) = 0;
  *(_BYTE *)(v8 + 240) = 13;
  v13 = 0x80000001B234B1A0;
  if ((a1 & 0x4800) == 0x4000)
    v13 = 0x80000001B234B1C0;
  v15[0] = v6;
  v15[1] = v7;
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v8;
  v15[5] = v12;
  v15[6] = v13;
  v15[7] = 0;
  v15[8] = 0;
  v15[9] = v8;
  v20 = 0uLL;
  v21 = 0uLL;
  v18 = 0uLL;
  v19 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  nullsub_16(v15);
  swift_bridgeObjectRetain();
  return sub_1B1A18378((uint64_t)v15, a3, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
}

uint64_t sub_1B20CA064(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 96);
  if (v6 < 2)
  {
    v7 = *(_QWORD *)(v2 + 88);
    a1[2] = 4;
    if (!v7)
    {
      sub_1B20C9B2C(*(_BYTE *)(v2 + 64));
      v15 = v14;
      sub_1B20C9CEC();
      *(_QWORD *)(a2 + 32) = v16 * v15;
      goto LABEL_17;
    }
    *(_OWORD *)(a2 + 16) = xmmword_1B2246910;
    if (v7 < 2)
    {
      *(_QWORD *)(a2 + 40) = 2;
      goto LABEL_17;
    }
  }
  else
  {
    a1[2] = 4;
    *(_OWORD *)(a2 + 16) = xmmword_1B2246910;
    v7 = *(_QWORD *)(v2 + 88);
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (v7 <= 0)
    v7 = (v6 + v8 - 1) / v6;
  if (v7 >= (v6 + v8 - 1) / v6)
    v9 = (v6 + v8 - 1) / v6;
  else
    v9 = v7;
  result = sub_1B1BA4A94(v8, v6, v9);
  if (result)
  {
    v12 = v11;
    a1[4] = result;
    a1[5] = 0;
    a1[6] = v11 * v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (v9 < 1)
      v13 = 2 * v8;
    else
      v13 = 2 * ((v8 + v9 - 1) / v9 + v8) - 2;
    a1[8] = v13;
    swift_unknownObjectRelease();
    a1[7] = v12 != 2;
LABEL_17:
    __asm { BR              X10 }
  }
  return result;
}

void *sub_1B20CA32C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;
  __int128 v20;
  __int16 v21;
  __int16 v22;
  char v23;
  char v24;
  char v25;
  void *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[80];
  _OWORD v34[4];
  char v35;
  _OWORD v36[4];
  float v37;
  int v38;
  float v39;
  float v40;
  __int128 v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;

  v4 = v3;
  v8 = *a3;
  v9 = a3[4];
  swift_retain();
  v10 = sub_1B1FE1184(v9, v8);
  swift_release();
  v11 = (_QWORD *)a3[1];
  swift_retain();
  sub_1B1D15764(v11, (uint64_t)v33);
  swift_release();
  sub_1B1A18378((uint64_t)v33, (uint64_t)v34, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v35 & 1) != 0)
  {
    v32 = xmmword_1B2244E20;
    v31 = xmmword_1B2244D90;
    v30 = xmmword_1B2244DD0;
    v29 = xmmword_1B2244DB0;
  }
  else
  {
    v29 = v34[0];
    v30 = v34[1];
    v31 = v34[2];
    v32 = v34[3];
  }
  v12 = *(_DWORD *)(v4 + 24);
  if (v12 - 11 > 0xF4)
  {
    v16 = *(float *)(v4 + 16);
    v15 = -1.0;
    if (v16 >= 0.0)
    {
      if (v16 > -1.0)
        v15 = *(float *)(v4 + 16);
      else
        v15 = -1.0;
    }
  }
  else
  {
    v13 = *(float *)(v4 + 16);
    if (v13 > (float)(1.0 / (float)v12))
      v14 = *(float *)(v4 + 16);
    else
      v14 = 1.0 / (float)v12;
    if (v13 >= 0.0)
      v15 = v14;
    else
      v15 = 1.0 / (float)v12;
  }
  v17 = *(_DWORD *)(v4 + 32);
  v18 = (float)(uint64_t)-*(_QWORD *)(v4 + 96);
  v19 = 1.0 / (float)(*(_QWORD *)(v4 + 56) + 1);
  *(_QWORD *)&v20 = *(_QWORD *)(v4 + 40);
  *((float *)&v20 + 1) = -*((float *)&v20 + 1);
  DWORD2(v20) = *(_QWORD *)(v4 + 48);
  *((float *)&v20 + 3) = COERCE_FLOAT(HIDWORD(*(_QWORD *)(v4 + 48))) + 1.0;
  v28 = v20;
  sub_1B20C9CEC();
  v22 = v21;
  sub_1B20C9B2C(*(_BYTE *)(v4 + 64));
  v23 = *(_BYTE *)(v4 + 36);
  v24 = *(_BYTE *)(v4 + 39);
  v36[0] = v29;
  v36[1] = v30;
  v36[2] = v31;
  v36[3] = v32;
  v37 = v15;
  v38 = v17;
  v39 = v18;
  v40 = v19;
  v41 = v28;
  v42 = v22;
  v43 = v25;
  v44 = v23;
  v45 = v24;
  v46 = v10;
  sub_1B1BEE528((uint64_t)a3);
  v26 = sub_1B1D2D2B0(v36, a1, a2, (uint64_t)a3, v4, v4);
  sub_1B1B4F21C((uint64_t)a3);
  return v26;
}

uint64_t sub_1B20CA588(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  char v15;

  if (!*(_BYTE *)(a3 + 64))
  {
    v5 = *(unsigned int *)(a3 + 68);
    v6 = *(unsigned int *)(a3 + 72);
    if ((_DWORD)v5 != -1 || (_DWORD)v6 != 0)
    {
      swift_getObjectType();
      swift_retain();
      v8 = sub_1B20F26A4(v5 | (v6 << 32), &v15);
      swift_release();
      sub_1B1F9C214(v8, 240, a2);
      result = swift_unknownObjectRelease();
    }
    v10 = *(unsigned int *)(a3 + 76);
    v11 = *(unsigned int *)(a3 + 80);
    if ((_DWORD)v10 != -1 || (_DWORD)v11 != 0)
    {
      swift_getObjectType();
      swift_retain();
      v13 = sub_1B20F26A4(v10 | (v11 << 32), &v14);
      swift_release();
      sub_1B1F9C214(v13, 241, a2);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B20CA6B0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 37);
}

uint64_t sub_1B20CA6B8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 37) = result;
  return result;
}

uint64_t sub_1B20CA6C0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 38);
}

uint64_t sub_1B20CA6C8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 38) = result;
  return result;
}

_BYTE *(*sub_1B20CA6D0(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;
  char v2;

  *(_QWORD *)a1 = v1;
  v2 = *(_BYTE *)(v1 + 20);
  if (*(_QWORD *)(v1 + 88))
    v2 = 5;
  if (*(uint64_t *)(v1 + 96) > 1)
    v2 = 5;
  *(_BYTE *)(a1 + 8) = v2;
  return sub_1B20CA704;
}

_BYTE *sub_1B20CA704(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 20) = result[8];
  return result;
}

uint64_t sub_1B20CA714()
{
  return sub_1B20CAFA4();
}

uint64_t sub_1B20CA75C()
{
  uint64_t v0;
  unsigned int v1;

  v1 = *(unsigned __int8 *)(v0 + 20);
  if (*(_QWORD *)(v0 + 88))
    v1 = 5;
  if (*(uint64_t *)(v0 + 96) <= 1)
    return v1;
  else
    return 5;
}

uint64_t sub_1B20CA77C()
{
  _OWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v1 = v0;
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v2 = sub_1B20C3C0C(4);
  v3 = (_OWORD *)swift_allocObject();
  v4 = v1[5];
  v3[5] = v1[4];
  v3[6] = v4;
  *(_OWORD *)((char *)v3 + 105) = *(_OWORD *)((char *)v1 + 89);
  v5 = v1[1];
  v3[1] = *v1;
  v3[2] = v5;
  v6 = v1[3];
  v3[3] = v1[2];
  v3[4] = v6;
  *(_QWORD *)(v2 + 88) = sub_1B20CB974;
  *(_QWORD *)(v2 + 96) = v3;
  swift_release();
  return v2;
}

void *sub_1B20CA810(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1B20CA32C(a1, a2, a3);
}

uint64_t sub_1B20CA85C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t ObjectType;
  uint64_t (*v5)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v7;

  ObjectType = swift_getObjectType();
  v7 = 0xFFFFFFFFLL;
  v5 = *(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(a2 + 8);
  v5((char *)&v7, 0, ObjectType, a2);
  v5((char *)v2, 0, ObjectType, a2);
  v5((char *)v2 + 68, 0, ObjectType, a2);
  return v5((char *)v2 + 76, 0, ObjectType, a2);
}

double sub_1B20CA8FC@<D0>(uint64_t a1@<X8>)
{
  __int128 v6;
  double result;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = -1082130432;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 256;
  *(_WORD *)(a1 + 28) = 256;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = 33619968;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 40) = _D0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)&v6 = 0xFFFFFFFFLL;
  *((_QWORD *)&v6 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 68) = v6;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = xmmword_1B2244C80;
  *(_BYTE *)(a1 + 104) = 0;
  return result;
}

uint64_t sub_1B20CA970(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char v13;

  v3 = v1;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(void))sub_1B1B668A0, (uint64_t)&type metadata for ParticleDefaultRendererableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  result = sub_1B1B64C74(a1, (uint64_t)&v12 - v9);
  if (!v2)
  {
    LOBYTE(v12) = 27;
    sub_1B2229940();
    LOBYTE(v12) = 28;
    sub_1B2229940();
    LOBYTE(v12) = 29;
    sub_1B2229940();
    LOBYTE(v12) = *(_BYTE *)(v3 + 64);
    v13 = 30;
    sub_1B1A71584();
    sub_1B2229958();
    v12 = *(_QWORD *)(v3 + 68);
    v13 = 34;
    sub_1B1A0895C();
    sub_1B2229958();
    v12 = *(_QWORD *)(v3 + 76);
    v13 = 35;
    sub_1B2229958();
    LOBYTE(v12) = *(_BYTE *)(v3 + 39);
    v13 = 31;
    sub_1B1A714E8();
    sub_1B2229958();
    v12 = *(_QWORD *)(v3 + 40);
    v13 = 11;
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    sub_1B1B7283C((unint64_t *)&qword_1ED4B72D8, MEMORY[0x1E0DEDD30]);
    sub_1B2229958();
    v12 = *(_QWORD *)(v3 + 48);
    v13 = 12;
    sub_1B2229958();
    LOBYTE(v12) = 32;
    sub_1B222991C();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

__n128 sub_1B20CAC88@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  _OWORD v8[2];

  sub_1B20CB0AC(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 89) = *(_OWORD *)((char *)v8 + 9);
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B20CACD8(_QWORD *a1)
{
  return sub_1B20CA970(a1);
}

uint64_t sub_1B20CAD20(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  uint64_t result;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[25];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[25];

  v2 = a1[5];
  v23 = a1[4];
  *(_OWORD *)v24 = v2;
  *(_OWORD *)&v24[9] = *(__int128 *)((char *)a1 + 89);
  v3 = a1[1];
  v19 = *a1;
  v20 = v3;
  v4 = a1[3];
  v21 = a1[2];
  v22 = v4;
  v5 = a2[1];
  v14[0] = *a2;
  v14[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_OWORD *)&v18[9] = *(_OWORD *)((char *)a2 + 89);
  v8 = a2[5];
  v17 = a2[4];
  *(_OWORD *)v18 = v8;
  v15 = v6;
  v16 = v7;
  if ((sub_1B1FE1C20((uint64_t)v14) & 1) != 0)
    return 1;
  if (*(uint64_t *)&v24[16] < 2)
  {
    v9 = *(_QWORD *)&v18[16];
    if (*(uint64_t *)&v18[16] < 2)
    {
      if ((*(_QWORD *)&v24[8] != 0) == (*(_QWORD *)&v18[8] == 0))
        return 1;
    }
    else if (!*(_QWORD *)&v24[8])
    {
      return 1;
    }
    if (!*((_QWORD *)&v22 + 1))
      goto LABEL_15;
    if (*((_QWORD *)&v16 + 1) && *(uint64_t *)&v18[16] < 2)
    {
      if ((*(_QWORD *)&v24[8] == 0) != (*(_QWORD *)&v18[8] != 0))
        goto LABEL_18;
    }
    else if (*(_QWORD *)&v24[8])
    {
      goto LABEL_18;
    }
    return 1;
  }
  v9 = *(_QWORD *)&v18[16];
  if (*(uint64_t *)&v18[16] <= 1 && !*(_QWORD *)&v18[8])
    return 1;
LABEL_15:
  if (*((_QWORD *)&v16 + 1) && v9 <= 1 && !*(_QWORD *)&v18[8])
    return 1;
LABEL_18:
  if (((_BYTE)v23 != 0) != ((_BYTE)v17 != 0)
    || (BYTE7(v21) != 1) == (BYTE7(v15) == 1)
    || ((v24[24] ^ v18[24]) & 1) != 0)
  {
    return 1;
  }
  if (!(_BYTE)v23)
  {
    if (*(_QWORD *)((char *)&v23 + 4) == 0xFFFFFFFFLL)
    {
      if ((_BYTE)v17)
      {
        v10 = 0;
        v11 = HIDWORD(v23) != -1 || *(_DWORD *)v24 != 0;
        return v10 ^ v11;
      }
      result = 1;
      if (*(_QWORD *)((char *)&v17 + 4) != 0xFFFFFFFFLL)
        return result;
    }
    else if ((_BYTE)v17 || *(_QWORD *)((char *)&v17 + 4) == 0xFFFFFFFFLL)
    {
      return 1;
    }
    if (HIDWORD(v23) == -1)
    {
      if (!*(_DWORD *)v24)
      {
        if (HIDWORD(v17) != -1)
          goto LABEL_33;
        goto LABEL_50;
      }
      if (HIDWORD(v17) != -1)
      {
LABEL_44:
        v10 = 1;
        v11 = 1;
        return v10 ^ v11;
      }
    }
    else if (HIDWORD(v17) != -1)
    {
      goto LABEL_44;
    }
    v10 = *(_DWORD *)v18;
    v11 = 1;
    if (!*(_DWORD *)v18)
      return v10 ^ v11;
    goto LABEL_51;
  }
  if ((_BYTE)v17)
  {
    v10 = 0;
    v11 = 0;
    return v10 ^ v11;
  }
  result = 1;
  if (*(_QWORD *)((char *)&v17 + 4) == 0xFFFFFFFFLL)
  {
    if (HIDWORD(v17) != -1)
    {
LABEL_33:
      v11 = 0;
      goto LABEL_51;
    }
LABEL_50:
    v11 = 0;
    v10 = 0;
    if (!*(_DWORD *)v18)
      return v10 ^ v11;
LABEL_51:
    v10 = 1;
    return v10 ^ v11;
  }
  return result;
}

uint64_t sub_1B20CAFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  ValueMetadata *v3;
  _UNKNOWN **v4;

  v1 = *(_QWORD *)(v0 + 96);
  if (*(_BYTE *)(v0 + 39) == 1)
  {
    if (v1 > 1 || *(_QWORD *)(v0 + 88))
    {
      sub_1B1BDB5D0();
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_1B226CD10;
      *(_QWORD *)(result + 32) = &type metadata for ParticleID;
      *(_QWORD *)(result + 40) = &off_1E636E760;
      *(_QWORD *)(result + 48) = &type metadata for ParticleRibbonLength;
      *(_QWORD *)(result + 56) = &off_1E639D480;
      return result;
    }
    sub_1B1BDB5D0();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B226D240;
    v3 = &type metadata for ParticleRibbonLength;
    v4 = &off_1E639D480;
    goto LABEL_9;
  }
  if (v1 > 1 || *(_QWORD *)(v0 + 88))
  {
    sub_1B1BDB5D0();
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B226D240;
    v3 = &type metadata for ParticleID;
    v4 = &off_1E636E760;
LABEL_9:
    *(_QWORD *)(result + 32) = v3;
    *(_QWORD *)(result + 40) = v4;
    return result;
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B20CB0AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v16;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int8 v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;
  __int8 v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  int v36;
  char v37;
  int v38;
  char v39;
  int v40;
  char v41;
  char v42;
  int v43;
  char v44;
  char v45;
  char v46;
  char v47;
  int8x8_t v48;
  int8x8_t v49;
  __int8 v50;
  int8x8_t v51;
  char v52;
  char v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  char v58;
  int v59;
  __int16 v60;
  int v61;
  int v62;
  int8x8_t v63;
  int8x8_t v64;
  uint64_t v65;
  __int8 v66;
  __int128 v67;
  __int128 v68;
  char v69;

  sub_1B19F8E54(0, &qword_1ED4BAC38, (uint64_t (*)(void))sub_1B1B668A0, (uint64_t)&type metadata for ParticleDefaultRendererableCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v51 - v9;
  v54 = 0xFFFFFFFFLL;
  v55 = 1;
  v56 = 1;
  v57 = -1082130432;
  v58 = 0;
  v59 = 256;
  v60 = 256;
  v61 = 0;
  v62 = 33619968;
  __asm { FMOV            V8.2S, #1.0 }
  v63 = _D8;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  *(_QWORD *)&v16 = 0xFFFFFFFFLL;
  *((_QWORD *)&v16 + 1) = 0xFFFFFFFFLL;
  v67 = v16;
  v68 = xmmword_1B2244C80;
  v69 = 0;
  sub_1B1B661B8(a1);
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v51.i8[0] = 27;
  v18 = sub_1B22297A8();
  if ((v19 & 1) != 0)
    v20 = 0;
  else
    v20 = v18;
  *(_QWORD *)&v68 = v20;
  v51.i8[0] = 28;
  v21 = sub_1B22297A8();
  if ((v22 & 1) != 0)
    v23 = 1;
  else
    v23 = v21;
  *((_QWORD *)&v68 + 1) = v23;
  v51.i8[0] = 29;
  v24 = sub_1B22297A8();
  if ((v25 & 1) != 0)
    v26 = 0;
  else
    v26 = v24;
  v65 = v26;
  v53 = 30;
  sub_1B1A71540();
  sub_1B22297B4();
  v27 = v51.i8[0];
  if (v51.u8[0] == 5)
    v27 = 0;
  v66 = v27;
  v53 = 34;
  sub_1B1A08878();
  sub_1B22297B4();
  v28 = v51.i32[1];
  if (v52)
    v29 = -1;
  else
    v29 = v51.i32[0];
  if (v52)
    v28 = 0;
  *(_QWORD *)&v67 = __PAIR64__(v28, v29);
  v53 = 35;
  sub_1B22297B4();
  v30 = v51.i32[1];
  if (v52)
    v31 = -1;
  else
    v31 = v51.i32[0];
  if (v52)
    v30 = 0;
  *((_QWORD *)&v67 + 1) = __PAIR64__(v30, v31);
  v53 = 31;
  sub_1B1A714A4();
  sub_1B22297B4();
  v32 = v51.i8[0];
  if (v51.u8[0] == 3)
    v32 = 2;
  HIBYTE(v62) = v32;
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  v53 = 11;
  sub_1B1B7283C((unint64_t *)&qword_1ED4B72F0, MEMORY[0x1E0DEDD40]);
  sub_1B22297B4();
  if (v52)
    v33 = -1;
  else
    v33 = 0;
  v63 = vbsl_s8((int8x8_t)vdup_n_s32(v33), _D8, v51);
  v53 = 12;
  sub_1B22297B4();
  if (v52)
    v34 = -1;
  else
    v34 = 0;
  v64 = vbic_s8(v51, (int8x8_t)vdup_n_s32(v34));
  v51.i8[0] = 32;
  v35 = sub_1B2229784();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v36 = v55;
  v37 = v56;
  v38 = v57;
  v39 = v58;
  v40 = v59;
  v41 = v60;
  v42 = HIBYTE(v60);
  v43 = v61;
  v44 = v62;
  v45 = BYTE1(v62);
  v46 = BYTE2(v62);
  v47 = HIBYTE(v62);
  v48 = v63;
  v49 = v64;
  result = v65;
  v50 = v66;
  *(_QWORD *)a2 = v54;
  *(_DWORD *)(a2 + 8) = v36;
  *(_BYTE *)(a2 + 12) = v37;
  *(_DWORD *)(a2 + 16) = v38;
  *(_BYTE *)(a2 + 20) = v39;
  *(_DWORD *)(a2 + 24) = v40;
  *(_BYTE *)(a2 + 28) = v41;
  *(_BYTE *)(a2 + 29) = v42;
  *(_DWORD *)(a2 + 32) = v43;
  *(_BYTE *)(a2 + 36) = v44;
  *(_BYTE *)(a2 + 37) = v45;
  *(_BYTE *)(a2 + 38) = v46;
  *(_BYTE *)(a2 + 39) = v47;
  *(int8x8_t *)(a2 + 40) = v48;
  *(int8x8_t *)(a2 + 48) = v49;
  *(_QWORD *)(a2 + 56) = result;
  *(_BYTE *)(a2 + 64) = v50;
  *(_OWORD *)(a2 + 68) = v67;
  *(_OWORD *)(a2 + 88) = v68;
  *(_BYTE *)(a2 + 104) = v35 & 1;
  return result;
}

unint64_t sub_1B20CB598()
{
  unint64_t result;

  result = qword_1EEF631C8;
  if (!qword_1EEF631C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9710, &type metadata for ParticleRibbonProfile);
    atomic_store(result, (unint64_t *)&qword_1EEF631C8);
  }
  return result;
}

unint64_t sub_1B20CB5DC()
{
  unint64_t result;

  result = qword_1EEF631D0;
  if (!qword_1EEF631D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B96D8, &type metadata for ParticleRibbonTextureMode);
    atomic_store(result, (unint64_t *)&qword_1EEF631D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleRibbonProfile(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B20CB66C + 4 * byte_1B22B93D4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B20CB6A0 + 4 * byte_1B22B93CF[v4]))();
}

uint64_t sub_1B20CB6A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20CB6A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20CB6B0);
  return result;
}

uint64_t sub_1B20CB6BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20CB6C4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B20CB6C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20CB6D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleRibbonProfile()
{
  return &type metadata for ParticleRibbonProfile;
}

uint64_t storeEnumTagSinglePayload for ParticleRibbonTextureMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B20CB738 + 4 * byte_1B22B93DE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B20CB76C + 4 * byte_1B22B93D9[v4]))();
}

uint64_t sub_1B20CB76C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20CB774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20CB77CLL);
  return result;
}

uint64_t sub_1B20CB788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20CB790);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B20CB794(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20CB79C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleRibbonTextureMode()
{
  return &type metadata for ParticleRibbonTextureMode;
}

uint64_t getEnumTagSinglePayload for ParticleRibbonRenderer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 29);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleRibbonRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_BYTE *)(result + 29) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleRibbonRenderer()
{
  return &type metadata for ParticleRibbonRenderer;
}

uint64_t sub_1B20CB87C()
{
  return sub_1B1B4DEE4(&qword_1EEF631D8, &qword_1EEF631E0, (uint64_t)&type metadata for ParticleRibbonTextureMode);
}

unint64_t sub_1B20CB8AC()
{
  unint64_t result;

  result = qword_1EEF631E8;
  if (!qword_1EEF631E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9610, &type metadata for ParticleRibbonTextureMode);
    atomic_store(result, (unint64_t *)&qword_1EEF631E8);
  }
  return result;
}

uint64_t sub_1B20CB8F0()
{
  return sub_1B1B4DEE4(&qword_1EEF631F0, &qword_1EEF631F8, (uint64_t)&type metadata for ParticleRibbonProfile);
}

unint64_t sub_1B20CB920()
{
  unint64_t result;

  result = qword_1EEF63200;
  if (!qword_1EEF63200)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B96B0, &type metadata for ParticleRibbonProfile);
    atomic_store(result, (unint64_t *)&qword_1EEF63200);
  }
  return result;
}

uint64_t sub_1B20CB964()
{
  return swift_deallocObject();
}

uint64_t sub_1B20CB974@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B20C9E04(a1, v2 + 16, a2);
}

void sub_1B20CB97C(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  id v8;
  id v9;
  id v10;

  v5 = (a4 >> 38) & 3;
  if (!(_DWORD)v5)
  {
    sub_1B222A078();
    sub_1B222A084();
    return;
  }
  v7 = a4 & 0xFFFFFFFFFFLL;
  if ((_DWORD)v5 != 1)
  {
    sub_1B222A078();
    return;
  }
  sub_1B222A078();
  sub_1B222874C();
  v10 = a3;
  v8 = a2;
  sub_1B2228824();
  swift_bridgeObjectRelease();
  if (!a3)
  {
    sub_1B222A084();
    if ((v7 & 0x100000000) == 0)
      goto LABEL_5;
LABEL_9:
    sub_1B222A084();
    goto LABEL_10;
  }
  sub_1B222A084();
  v9 = v10;
  sub_1B2229028();

  if ((v7 & 0x100000000) != 0)
    goto LABEL_9;
LABEL_5:
  sub_1B222A084();
  sub_1B222A09C();
LABEL_10:

}

uint64_t sub_1B20CBAE0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  _BYTE v5[72];

  v1 = *(void **)v0;
  v2 = *(void **)(v0 + 8);
  v3 = *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
  sub_1B222A06C();
  sub_1B20CB97C((uint64_t)v5, v1, v2, v3);
  return sub_1B222A0C0();
}

void sub_1B20CBB40(uint64_t a1)
{
  uint64_t v1;

  sub_1B20CB97C(a1, *(void **)v1, *(void **)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32));
}

uint64_t sub_1B20CBB54()
{
  uint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  _BYTE v5[72];

  v1 = *(void **)v0;
  v2 = *(void **)(v0 + 8);
  v3 = *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32);
  sub_1B222A06C();
  sub_1B20CB97C((uint64_t)v5, v1, v2, v3);
  return sub_1B222A0C0();
}

uint64_t sub_1B20CBBB0(uint64_t a1, uint64_t a2)
{
  return sub_1B20CD814(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32));
}

uint64_t sub_1B20CBBDC(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v20[6];
  BOOL v21;
  char *v22;
  uint64_t v23;
  BOOL v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];
  char v31;

  v28 = *v1;
  v29 = a1;
  v31 = 0;
  v2 = sub_1B1F4C910();
  if (!(v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v18 = 1;
    return v18 & 1;
  }
  swift_bridgeObjectRetain();
  v3 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (!v3)
    goto LABEL_16;
LABEL_3:
  v4 = 0;
  v27 = v2 & 0xC000000000000001;
  v26 = MEMORY[0x1E0DEE9B0] + 8;
  v25 = xmmword_1B226E440;
  v5 = v2;
  do
  {
    if (v27)
    {
      v6 = MEMORY[0x1B5E21018](v4, v2);
    }
    else
    {
      v6 = *(_QWORD *)(v2 + 8 * v4 + 32);
      swift_retain();
    }
    type metadata accessor for OnParticleStageNode(0);
    v7 = swift_dynamicCastClass();
    if (v7 || (type metadata accessor for _OnNode(0), swift_dynamicCastClass()))
    {
      v8 = 1;
    }
    else
    {
      type metadata accessor for DoNode(0);
      if (swift_dynamicCastClass())
      {
        type metadata accessor for OnTriggerNode(0);
        v8 = swift_dynamicCastClass() != 0;
      }
      else
      {
        v8 = 0;
      }
    }
    sub_1B1C27668(0, (unint64_t *)&qword_1ED4BAFE0);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = v25;
    *(_QWORD *)(v9 + 32) = v6;
    v30[0] = v9;
    sub_1B2228AD0();
    v10 = v30[0];
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v10;
    MEMORY[0x1E0C80A78](v11, v12);
    v21 = v7 != 0;
    v22 = &v31;
    v23 = v29;
    v24 = v8;
    MEMORY[0x1E0C80A78](v13, v14);
    v20[2] = sub_1B20CDAEC;
    v20[3] = v15;
    swift_retain();
    v16 = MEMORY[0x1E0DEE9D8];
    v30[0] = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
    v30[1] = v17;
    sub_1B1C5CC00((uint64_t)sub_1B1BE3678, (uint64_t)v20, 1, 0x1000000000000000uLL, 0, v16, v30);
    ++v4;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v5;
  }
  while (v3 != v4);
  swift_bridgeObjectRelease();
  v18 = v31 ^ 1;
  return v18 & 1;
}

void sub_1B20CBEC0(uint64_t a1, char a2, _BYTE *a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __objc2_class **v15;
  int *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  int *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  char *v38;
  void (*v39)(char *);
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  id v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  __objc2_class **v49;
  int *v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  id v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD v63[2];
  _BYTE *v64;
  char *v65;
  uint64_t v66;

  v66 = a4;
  v10 = sub_1B222826C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(__objc2_class ***)(a1 + 8);
  if ((a2 & 1) == 0)
  {
    type metadata accessor for _ParticleValueNode(0);
    if (swift_dynamicCastClass())
    {
      v63[1] = v5;
      v64 = a3;
      *a3 = 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, (uint64_t)v15 + OBJC_IVAR____TtC3VFX4Node_authoringID, v10);
      v16 = (int *)type metadata accessor for GraphError();
      sub_1B1BE2940();
      v17 = swift_allocError();
      v18 = v14;
      v19 = (void *)v17;
      v21 = v20;
      *v20 = 0;
      v22 = (char *)v20 + v16[5];
      v23 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v65 = v18;
      v23(v22, v18, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
      v24 = (char *)v21 + v16[6];
      *(_QWORD *)v24 = 1;
      v24[8] = -96;
      v25 = (_QWORD *)((char *)v21 + v16[7]);
      *v25 = 0xD00000000000003ALL;
      v25[1] = 0x80000001B234B380;
      v26 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
      v27 = v66;
      v28 = *(_QWORD **)(v66 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
      v29 = v19;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v27 + v26) = v28;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v28 = sub_1B1C63944(0, v28[2] + 1, 1, v28);
        *(_QWORD *)(v66 + v26) = v28;
      }
      v32 = v28[2];
      v31 = v28[3];
      if (v32 >= v31 >> 1)
      {
        v28 = sub_1B1C63944(v31 > 1, v32 + 1, 1, v28);
        *(_QWORD *)(v66 + v26) = v28;
      }
      a3 = v64;
      v28[2] = v32 + 1;
      v28[v32 + 4] = v19;

      v14 = v65;
    }
  }
  if ((a5 & 1) == 0 && (sub_1B1FF52F4() & 1) != 0 && *v15 != _TtC3VFX24InspectorSetECSValueNode)
  {
    type metadata accessor for InspectorSetWorldValueNode(0);
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for OnTriggerNode(0);
      if (!swift_dynamicCastClass())
      {
        v64 = a3;
        *a3 = 1;
        (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, (uint64_t)v15 + OBJC_IVAR____TtC3VFX4Node_authoringID, v10);
        v33 = (int *)type metadata accessor for GraphError();
        sub_1B1BE2940();
        v34 = (void *)swift_allocError();
        v36 = v35;
        *v35 = 0;
        v37 = v14;
        v38 = (char *)v36 + v33[5];
        v39 = *(void (**)(char *))(v11 + 32);
        v65 = v37;
        v39(v38);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v38, 0, 1, v10);
        v40 = (char *)v36 + v33[6];
        *(_QWORD *)v40 = 1;
        v40[8] = -96;
        v41 = (_QWORD *)((char *)v36 + v33[7]);
        *v41 = 0xD00000000000002ALL;
        v41[1] = 0x80000001B234B350;
        v42 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
        v43 = v66;
        v44 = *(_QWORD **)(v66 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
        v45 = v34;
        v46 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v43 + v42) = v44;
        if ((v46 & 1) == 0)
        {
          v44 = sub_1B1C63944(0, v44[2] + 1, 1, v44);
          *(_QWORD *)(v66 + v42) = v44;
        }
        v48 = v44[2];
        v47 = v44[3];
        if (v48 >= v47 >> 1)
        {
          v44 = sub_1B1C63944(v47 > 1, v48 + 1, 1, v44);
          *(_QWORD *)(v66 + v42) = v44;
        }
        a3 = v64;
        v44[2] = v48 + 1;
        v44[v48 + 4] = v34;

        v14 = v65;
      }
    }
  }
  if (swift_conformsToProtocol2())
    v49 = v15;
  else
    v49 = 0;
  if (!v49)
  {
    *a3 = 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, (uint64_t)v15 + OBJC_IVAR____TtC3VFX4Node_authoringID, v10);
    v50 = (int *)type metadata accessor for GraphError();
    sub_1B1BE2940();
    v51 = (void *)swift_allocError();
    v53 = v52;
    *v52 = 0;
    v54 = (char *)v52 + v50[5];
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v14, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v54, 0, 1, v10);
    v55 = (char *)v53 + v50[6];
    *(_QWORD *)v55 = 1;
    v55[8] = -96;
    *(_OWORD *)((char *)v53 + v50[7]) = xmmword_1B22B9770;
    v56 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
    v57 = v66;
    v58 = *(_QWORD **)(v66 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
    v59 = v51;
    v60 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v57 + v56) = v58;
    if ((v60 & 1) == 0)
    {
      v58 = sub_1B1C63944(0, v58[2] + 1, 1, v58);
      *(_QWORD *)(v66 + v56) = v58;
    }
    v62 = v58[2];
    v61 = v58[3];
    if (v62 >= v61 >> 1)
    {
      v58 = sub_1B1C63944(v61 > 1, v62 + 1, 1, v58);
      *(_QWORD *)(v66 + v56) = v58;
    }
    v58[2] = v62 + 1;
    v58[v62 + 4] = v51;

  }
}

_QWORD *sub_1B20CC420(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[8];
  _BYTE v25[16];
  uint64_t (*v26)(_QWORD **);
  char *v27;
  char v28;
  uint64_t v29;
  _QWORD **v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v3 = v2;
  v3[6] = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  v3[7] = sub_1B1B96704(MEMORY[0x1E0DEE9D8]);
  v3[8] = sub_1B1B967DC(v6);
  v3[2] = a1;
  v3[3] = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0x8000000000000008;
  v8 = v7 | 0x6000000000000000;
  v33 = sub_1B1B968BC(v6);
  v29 = v8;
  v30 = &v33;
  v26 = sub_1B20CDAE0;
  v27 = &v28;
  swift_retain();
  v9 = a2;
  v31 = sub_1B1C6D068(v6);
  v32 = v10;
  sub_1B1C5CC00((uint64_t)sub_1B1C254D0, (uint64_t)v25, 1, 0x1000000000000000uLL, 0, v6, &v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = swift_bridgeObjectRetain();
  v12 = sub_1B1BAD30C(v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  v3[4] = v12;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0x8000000000000008;
  v14 = v13 | 0x6000000000000004;
  v15 = MEMORY[0x1E0DEE9D8];
  v33 = sub_1B1B968BC(MEMORY[0x1E0DEE9D8]);
  MEMORY[0x1E0C80A78](v33, v16);
  v24[6] = v14;
  v24[7] = &v33;
  MEMORY[0x1E0C80A78](v17, v18);
  v24[2] = sub_1B20CDDDC;
  v24[3] = v19;
  v31 = sub_1B1C6D068(v15);
  v32 = v20;
  sub_1B1C5CC00((uint64_t)sub_1B1C25CE0, (uint64_t)v24, 1, 0x1000000000000000uLL, 0, v15, &v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = swift_bridgeObjectRetain();
  v22 = sub_1B1BAD30C(v21);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease_n();
  v3[5] = v22;
  return v3;
}

uint64_t sub_1B20CC688(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 56);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_1B1DC3AC8(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = sub_1B20CC760(a1);
    v9 = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0x8000000000000000;
    sub_1B1B84B24(v7, v9, a1, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 56) = v12;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1B20CC760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v27 = MEMORY[0x1E0DEE9E8];
  v3 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = sub_1B1DC3AC8(a1);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
      swift_bridgeObjectRetain();
      v7 = *(_QWORD *)(v6 + 16);
      if (!v7)
        goto LABEL_4;
LABEL_7:
      v9 = (uint64_t *)(v6 + 48);
      do
      {
        v10 = *v9;
        v9 += 3;
        v11 = swift_retain();
        sub_1B20CC688(v11);
        v13 = v12;
        swift_bridgeObjectRelease();
        v14 = *(_QWORD *)(v13 + 8 * v10 + 32);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_1B1BBAE08(v14);
        swift_release();
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      v8 = v27;
      if (*(_QWORD *)(v27 + 16))
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  v6 = MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v7)
    goto LABEL_7;
LABEL_4:
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x1E0DEE9E8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9E8] + 16))
  {
LABEL_10:
    sub_1B1C27668(0, &qword_1ED4BAF28);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B226D240;
    v16 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v16 + 1;
    *(_QWORD *)(inited + 32) = v16;
    v17 = sub_1B1EE79FC(inited);
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    v8 = v17;
  }
LABEL_11:
  if ((sub_1B1FF54E8() & 1) != 0)
    goto LABEL_12;
  if ((sub_1B1FF56E8() & 1) != 0)
    return v8;
  type metadata accessor for IfNode(0);
  if (swift_dynamicCastClass())
  {
    v19 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v19 + 1;
    v26 = v8;
    swift_bridgeObjectRetain();
    sub_1B1B8A534(&v25, v19);
    v20 = v26;
    v21 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v21 + 1;
    v26 = v8;
    swift_bridgeObjectRetain();
    sub_1B1B8A534(&v25, v21);
    v22 = v26;
    sub_1B20CDA8C();
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_1B226CD10;
    *(_QWORD *)(v23 + 32) = v20;
    *(_QWORD *)(v23 + 40) = v22;
    return v8;
  }
  if ((sub_1B1FF52F4() & 1) != 0)
  {
LABEL_12:
    sub_1B20CDA8C();
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v18 + 32) = v8;
    swift_bridgeObjectRetain();
    return v8;
  }
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B1BCE95C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B20CCA60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v4 = v1;
  v6 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_1B1DC3AC8(a1), (v8 & 1) != 0))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = sub_1B20CCB28(a1);
    if (!v2)
    {
      v3 = v9;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = *(_QWORD *)(v4 + 64);
      *(_QWORD *)(v4 + 64) = 0x8000000000000000;
      sub_1B1B84C3C(v3, a1, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(v4 + 64) = v12;
      swift_bridgeObjectRelease();
    }
  }
  return v3;
}

uint64_t sub_1B20CCB28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v3 = v1;
  v5 = sub_1B222826C();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 56);
  if (*(_QWORD *)(v10 + 16) && (v11 = sub_1B1DC3AC8(a1), (v12 & 1) != 0))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 16 * v11);
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9E8];
  }
  v46 = v13;
  if (*(_QWORD *)(*(_QWORD *)(v3 + 40) + 16) && (sub_1B1DC3AC8(a1), (v14 & 1) != 0))
  {
    v15 = swift_bridgeObjectRetain();
    v16 = *(_QWORD *)(v15 + 16);
    if (!v16)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9D8];
    v16 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v16)
      goto LABEL_8;
  }
  v43 = v5;
  v44 = v9;
  v42 = v6;
  v45 = v15;
  v17 = (uint64_t *)(v15 + 48);
  while (1)
  {
    v13 = *(v17 - 2);
    v18 = *v17;
    v19 = swift_retain();
    v20 = sub_1B20CCA60(v19);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return v13;
    }
    v21 = v20;
    if (*(_QWORD *)(v46 + 16))
    {
      v22 = swift_bridgeObjectRetain();
      v23 = sub_1B20CD5AC(v22, v21);
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
        break;
    }
    v17 += 3;
    sub_1B1BBAE08(v21);
    swift_release();
    if (!--v16)
    {
      swift_bridgeObjectRelease();
      return v46;
    }
  }
  swift_bridgeObjectRelease();
  v25 = v42;
  v24 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v44, v13 + OBJC_IVAR____TtC3VFX4Node_authoringID, v43);
  v26 = (int *)type metadata accessor for GraphError();
  sub_1B1BE2940();
  v27 = (void *)swift_allocError();
  v29 = v28;
  *v28 = 0;
  v30 = (char *)v28 + v26[5];
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v30, v44, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v30, 0, 1, v24);
  v31 = (char *)v29 + v26[6];
  *(_QWORD *)v31 = v18;
  v31[8] = 64;
  v32 = (_QWORD *)((char *)v29 + v26[7]);
  *v32 = 0xD000000000000038;
  v32[1] = 0x80000001B234B2D0;
  v33 = *(_QWORD *)(v3 + 24);
  v34 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
  v35 = *(_QWORD **)(v33 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
  swift_retain();
  v36 = v27;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v33 + v34) = v35;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v35 = sub_1B1C63944(0, v35[2] + 1, 1, v35);
    *(_QWORD *)(v33 + v34) = v35;
  }
  v39 = v35[2];
  v38 = v35[3];
  if (v39 >= v38 >> 1)
  {
    v35 = sub_1B1C63944(v38 > 1, v39 + 1, 1, v35);
    *(_QWORD *)(v33 + v34) = v35;
  }
  v35[2] = v39 + 1;
  v35[v39 + 4] = v27;
  swift_willThrow();
  v40 = v27;
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease();

  return v13;
}

uint64_t sub_1B20CCE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, unint64_t);
  unint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51[16];
  void (*v52)(uint64_t);
  char *v53;
  char v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD v57[6];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[2];

  v1 = v0;
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  v57[0] = MEMORY[0x1E0DEE9D8];
  type metadata accessor for Graph();
  *(_QWORD *)(swift_allocObject() + 16) = v2;
  v55 = v57;
  v52 = sub_1B20CD7FC;
  v53 = &v54;
  swift_bridgeObjectRetain_n();
  v58 = sub_1B1C6D068(v3);
  v59 = v4;
  sub_1B1C5CC00((uint64_t)sub_1B1B28F5C, (uint64_t)v51, 1, 0x1000000000000000uLL, 0, v3, &v58);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v57[0];
  if (v57[0] >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1B22296AC();
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((v57[0] & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      v7 = 0;
      v49 = v6;
      v50 = v5 & 0xC000000000000001;
      v48 = v5;
      while (1)
      {
        if (v50)
        {
          v8 = MEMORY[0x1B5E21018](v7, v5);
        }
        else
        {
          v8 = *(_QWORD *)(v5 + 8 * v7 + 32);
          swift_retain();
        }
        v9 = *(void (**)(uint64_t *__return_ptr, unint64_t))(*(_QWORD *)v8 + 152);
        ((void (*)(_QWORD *__return_ptr))v9)(v57);
        v74 = v57[1];
        v75[0] = v57[0];
        sub_1B1B28C6C((uint64_t)&v74);
        v73 = v57[2];
        sub_1B1B28C6C((uint64_t)&v73);
        v72 = v57[3];
        sub_1B1B28C6C((uint64_t)&v72);
        v71 = v57[4];
        sub_1B1B28C6C((uint64_t)&v71);
        v70 = v57[5];
        sub_1B1B28C6C((uint64_t)&v70);
        if (*(_QWORD *)(v75[0] + 16))
        {
          v10 = *(_QWORD *)(v75[0] + 32);
          sub_1B19F8CD0(v10);
          sub_1B1B28C6C((uint64_t)v75);
          *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
          sub_1B19F8CD0(v10);
          sub_1B1D3590C(v10);
          v12 = v11;
          swift_release();
          sub_1B19F8D00(v10);
          v13 = sub_1B19F8D00(v10);
          if ((v12 & 1) != 0)
            goto LABEL_16;
        }
        else
        {
          v13 = sub_1B1B28C6C((uint64_t)v75);
        }
        v9(&v58, v13);
        v68 = v58;
        v69 = v59;
        sub_1B1B28C6C((uint64_t)&v68);
        v67 = v60;
        sub_1B1B28C6C((uint64_t)&v67);
        v66 = v61;
        sub_1B1B28C6C((uint64_t)&v66);
        v65 = v62;
        sub_1B1B28C6C((uint64_t)&v65);
        v64 = v63;
        sub_1B1B28C6C((uint64_t)&v64);
        if (!*(_QWORD *)(v69 + 16))
        {
          sub_1B1B28C6C((uint64_t)&v69);
          goto LABEL_5;
        }
        v14 = *(_QWORD *)(v69 + 32);
        sub_1B19F8CD0(v14);
        sub_1B1B28C6C((uint64_t)&v69);
        *(_QWORD *)(swift_allocObject() + 16) = 0x8000000000000008;
        sub_1B19F8CD0(v14);
        sub_1B1D3590C(v14);
        v16 = v15;
        swift_release();
        sub_1B19F8D00(v14);
        sub_1B19F8D00(v14);
        if ((v16 & 1) == 0)
          goto LABEL_5;
LABEL_16:
        if (!*(_QWORD *)(*(_QWORD *)(v1 + 56) + 16) || (sub_1B1DC3AC8(v8), (v17 & 1) == 0))
        {
          v18 = sub_1B20CC760(v8);
          v20 = v19;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v56 = *(_QWORD **)(v1 + 56);
          v22 = v56;
          *(_QWORD *)(v1 + 56) = 0x8000000000000000;
          v24 = sub_1B1DC3AC8(v8);
          v25 = v23;
          v26 = v22[2] + ((v23 & 1) == 0);
          if (v22[3] >= v26)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v29 = v56;
              if ((v23 & 1) == 0)
                goto LABEL_26;
            }
            else
            {
              sub_1B1EA8C84();
              v29 = v56;
              if ((v25 & 1) == 0)
                goto LABEL_26;
            }
          }
          else
          {
            sub_1B1E924B0(v26, isUniquelyReferenced_nonNull_native);
            v27 = sub_1B1DC3AC8(v8);
            if ((v25 & 1) != (v28 & 1))
            {
LABEL_51:
              sub_1B2229FC4();
              __break(1u);
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              __break(1u);
              return result;
            }
            v24 = v27;
            v29 = v56;
            if ((v25 & 1) == 0)
            {
LABEL_26:
              v29[(v24 >> 6) + 8] |= 1 << v24;
              *(_QWORD *)(v29[6] + 8 * v24) = v8;
              v31 = (uint64_t *)(v29[7] + 16 * v24);
              *v31 = v18;
              v31[1] = v20;
              ++v29[2];
              goto LABEL_27;
            }
          }
          v30 = (uint64_t *)(v29[7] + 16 * v24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *v30 = v18;
          v30[1] = v20;
LABEL_27:
          *(_QWORD *)(v1 + 56) = v29;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v5 = v48;
          v6 = v49;
          goto LABEL_6;
        }
LABEL_5:
        swift_release();
LABEL_6:
        if (v6 == ++v7)
        {
          swift_bridgeObjectRelease();
          v32 = 0;
          while (1)
          {
            if (v50)
            {
              v34 = MEMORY[0x1B5E21018](v32, v5);
            }
            else
            {
              v34 = *(_QWORD *)(v5 + 8 * v32 + 32);
              swift_retain();
            }
            if (*(_QWORD *)(*(_QWORD *)(v1 + 64) + 16))
            {
              sub_1B1DC3AC8(v34);
              if ((v35 & 1) != 0)
              {
                swift_release();
                goto LABEL_31;
              }
            }
            v36 = sub_1B20CCB28(v34);
            swift_bridgeObjectRetain();
            v37 = swift_isUniquelyReferenced_nonNull_native();
            v56 = *(_QWORD **)(v1 + 64);
            v38 = v56;
            *(_QWORD *)(v1 + 64) = 0x8000000000000000;
            v40 = sub_1B1DC3AC8(v34);
            v41 = v39;
            v42 = v38[2] + ((v39 & 1) == 0);
            if (v38[3] >= v42)
            {
              if ((v37 & 1) != 0)
              {
                v45 = v56;
                if ((v39 & 1) != 0)
                  goto LABEL_44;
              }
              else
              {
                sub_1B1EA8E58();
                v45 = v56;
                if ((v41 & 1) != 0)
                  goto LABEL_44;
              }
            }
            else
            {
              sub_1B1E9275C(v42, v37);
              v43 = sub_1B1DC3AC8(v34);
              if ((v41 & 1) != (v44 & 1))
                goto LABEL_51;
              v40 = v43;
              v45 = v56;
              if ((v41 & 1) != 0)
              {
LABEL_44:
                v46 = v45[7];
                swift_bridgeObjectRelease();
                *(_QWORD *)(v46 + 8 * v40) = v36;
                goto LABEL_30;
              }
            }
            v45[(v40 >> 6) + 8] |= 1 << v40;
            v33 = 8 * v40;
            *(_QWORD *)(v45[6] + v33) = v34;
            *(_QWORD *)(v45[7] + v33) = v36;
            ++v45[2];
LABEL_30:
            *(_QWORD *)(v1 + 64) = v45;
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v5 = v48;
LABEL_31:
            if (v49 == ++v32)
            {
              swift_bridgeObjectRelease();
              return 1;
            }
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t sub_1B20CD530()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScopeChecker()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for ScopeChecker.CFGScopeInfo()
{
  return &type metadata for ScopeChecker.CFGScopeInfo;
}

uint64_t sub_1B20CD5AC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int64_t v24;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_QWORD *)(a2 + 16))
    return 0;
  v5 = 0;
  v6 = a2 + 56;
  v7 = -1 << *(_BYTE *)(a2 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = a1 + 56;
  v24 = (unint64_t)(63 - v7) >> 6;
  v23 = a2 + 96;
LABEL_6:
  while (1)
  {
    v11 = v5;
    if (!v9)
      break;
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v13 = v12 | (v5 << 6);
    if (!v2)
      goto LABEL_27;
LABEL_21:
    v16 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v13);
    v17 = sub_1B222A060();
    v18 = -1 << *(_BYTE *)(a1 + 32);
    v19 = v17 & ~v18;
    if (((*(_QWORD *)(v10 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      goto LABEL_27;
    v20 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(v20 + 8 * v19) != v16)
    {
      v21 = ~v18;
      while (1)
      {
        v19 = (v19 + 1) & v21;
        if (((*(_QWORD *)(v10 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
          break;
        if (*(_QWORD *)(v20 + 8 * v19) == v16)
          goto LABEL_6;
      }
LABEL_27:
      swift_bridgeObjectRetain();
      sub_1B19F8D30();
      return 0;
    }
  }
  ++v5;
  if (v11 + 1 >= v24)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
    goto LABEL_20;
  v5 = v11 + 2;
  if (v11 + 2 >= v24)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
    goto LABEL_20;
  v5 = v11 + 3;
  if (v11 + 3 >= v24)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  if (v14)
    goto LABEL_20;
  v5 = v11 + 4;
  if (v11 + 4 >= v24)
    goto LABEL_30;
  v14 = *(_QWORD *)(v6 + 8 * v5);
  v15 = v11;
  if (v14)
  {
LABEL_20:
    v9 = (v14 - 1) & v14;
    v13 = __clz(__rbit64(v14)) + (v5 << 6);
    if (!v2)
      goto LABEL_27;
    goto LABEL_21;
  }
  while (v24 - 5 != v15)
  {
    v14 = *(_QWORD *)(v23 + 8 * v15++);
    if (v14)
    {
      v5 = v15 + 4;
      goto LABEL_20;
    }
  }
LABEL_30:
  swift_bridgeObjectRetain();
  sub_1B19F8D30();
  return 1;
}

void sub_1B20CD7FC(uint64_t a1)
{
  uint64_t v1;

  sub_1B1C6BF24(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1B20CD814(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v8;
  uint64_t v9;
  int v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  char v23;
  id v24;
  id v25;
  char v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;

  v8 = a6 & 0xFFFFFFFFFFLL;
  v9 = (a3 >> 38) & 3;
  if (!(_DWORD)v9)
  {
    if (!(v8 >> 38))
      return a1 == a4;
    return 0;
  }
  v11 = a3;
  if ((_DWORD)v9 != 1)
  {
    if (a2 | a1 || (a3 & 0xFFFFFFFFFFLL) != 0x8000000000)
    {
      if ((a6 & 0xC000000000) != 0x8000000000 || a4 != 1 || a5)
        return 0;
    }
    else if ((a6 & 0xC000000000) != 0x8000000000 || a5 | a4)
    {
      return 0;
    }
    return v8 == 0x8000000000;
  }
  if ((a6 & 0xC000000000) != 0x4000000000)
    return 0;
  v13 = a6;
  v31 = a3 & 0xFFFFFFFFFFLL;
  v14 = sub_1B222874C();
  v16 = v15;
  if (v14 == sub_1B222874C() && v16 == v17)
  {
    v18 = (id)a5;
    v19 = (id)a1;
    v20 = (id)a4;
    v21 = (id)a2;
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v23 = sub_1B2229D24();
    v30 = (id)a5;
    v29 = (id)a1;
    v28 = (id)a4;
    v27 = (id)a2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {

      return 0;
    }
  }
  if (!a2)
  {

    if (a5)
    {

      return 0;
    }
    goto LABEL_27;
  }
  if (!a5)
  {

    return 0;
  }
  sub_1B1AE965C();
  v24 = (id)a2;
  v25 = (id)a5;
  v26 = sub_1B222901C();

  if ((v26 & 1) != 0)
  {
LABEL_27:
    if ((v31 & 0x100000000) == 0)
      return (v8 & 0x100000000) == 0 && v11 == v13;
    if ((v8 & 0x100000000) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_1B20CDA68()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

void sub_1B20CDA8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF63208)
  {
    sub_1B1EB6008();
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF63208);
  }
}

uint64_t sub_1B20CDAE0(_QWORD **a1)
{
  uint64_t v1;

  return sub_1B2038D8C(*a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

void sub_1B20CDAEC(uint64_t a1)
{
  uint64_t v1;

  sub_1B20CBEC0(a1, *(_BYTE *)(v1 + 16), *(_BYTE **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

void destroy for GraphScheduling(uint64_t a1)
{
  sub_1B1A02724(*(void **)a1, *(void **)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32));
}

uint64_t _s3VFX15GraphSchedulingOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 20);
  v6 = *(unsigned int *)(a2 + 16);
  sub_1B1A026F0(*(id *)a2, v4, v6 | (v5 << 32));
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

uint64_t assignWithCopy for GraphScheduling(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 20);
  v6 = *(unsigned int *)(a2 + 16);
  sub_1B1A026F0(*(id *)a2, v4, v6 | (v5 << 32));
  v7 = *(void **)a1;
  v8 = *(void **)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 20) = v5;
  sub_1B1A02724(v7, v8, v9);
  return a1;
}

__n128 initializeWithTake for GraphScheduling(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GraphScheduling(uint64_t a1, uint64_t a2)
{
  char v3;
  int v4;
  void *v5;
  void *v6;
  unint64_t v7;

  v3 = *(_BYTE *)(a2 + 20);
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(void **)a1;
  v6 = *(void **)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 20) = v3;
  sub_1B1A02724(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphScheduling(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 21))
    return (*(_DWORD *)a1 + 126);
  v3 = ((*(unsigned __int8 *)(a1 + 20) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 20) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GraphScheduling(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 126;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 21) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_BYTE *)(result + 20) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_1B20CDD0C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 20) >> 6;
  if (v1 <= 1)
    return v1;
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1B20CDD28(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;
  unint64_t v3;

  v2 = *(_DWORD *)(a1 + 16);
  result = a1 + 16;
  v3 = v2 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
  *(_DWORD *)result = v2;
  *(_BYTE *)(result + 4) = BYTE4(v3) & 0x3F;
  return result;
}

uint64_t sub_1B20CDD44(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;

  if (a2 < 2)
  {
    v2 = *(_DWORD *)(result + 16);
    result += 16;
    v3 = (v2 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32)) & 0x1FFFFFFFFLL | (a2 << 38);
    *(_DWORD *)result = v2;
    *(_BYTE *)(result + 4) = BYTE4(v3);
  }
  else
  {
    *(_QWORD *)result = (a2 - 2);
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 20) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphScheduling()
{
  return &type metadata for GraphScheduling;
}

unint64_t sub_1B20CDD98()
{
  unint64_t result;

  result = qword_1EEF63210;
  if (!qword_1EEF63210)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B97E8, &type metadata for GraphScheduling);
    atomic_store(result, (unint64_t *)&qword_1EEF63210);
  }
  return result;
}

uint64_t sub_1B20CDDE0()
{
  return sub_1B20CDF00();
}

uint64_t sub_1B20CDE20(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 20) == *(unsigned __int8 *)(a2 + 20))
    return (*(_BYTE *)(a1 + 12) != 0) ^ (*(_BYTE *)(a2 + 12) != 0);
  else
    return 1;
}

uint64_t sub_1B20CDE50()
{
  return sub_1B20CE0A0();
}

uint64_t sub_1B20CDE98(_BYTE *a1, _BYTE *a2)
{
  if (a1[8] == a2[8])
    return (*a1 != 0) ^ (*a2 != 0);
  else
    return 1;
}

uint64_t sub_1B20CDEC8()
{
  return sub_1B20CE0A0();
}

uint64_t sub_1B20CDF00()
{
  uint64_t v0;
  int v1;
  uint64_t result;
  ValueMetadata *v3;
  _UNKNOWN **v4;
  int v5;
  int v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;

  if (*(_BYTE *)(v0 + 20))
  {
    if (*(_BYTE *)(v0 + 20) == 1)
    {
      v1 = *(unsigned __int8 *)(v0 + 12);
      sub_1B1BDB5D0();
      if (v1)
      {
        result = swift_allocObject();
        *(_OWORD *)(result + 16) = xmmword_1B226CD10;
        *(_QWORD *)(result + 32) = &type metadata for TransientOriginScale;
        *(_QWORD *)(result + 40) = &off_1E639F880;
        v3 = &type metadata for Scale2;
        v4 = &off_1E63BC3F0;
LABEL_9:
        *(_QWORD *)(result + 48) = v3;
        *(_QWORD *)(result + 56) = v4;
        return result;
      }
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_1B226D240;
      v7 = &type metadata for Scale2;
      v8 = &off_1E63BC3F0;
    }
    else
    {
      v6 = *(unsigned __int8 *)(v0 + 12);
      sub_1B1BDB5D0();
      if (v6)
      {
        result = swift_allocObject();
        *(_OWORD *)(result + 16) = xmmword_1B226CD10;
        *(_QWORD *)(result + 32) = &type metadata for TransientOriginScale;
        *(_QWORD *)(result + 40) = &off_1E639F880;
        v3 = &type metadata for Scale3;
        v4 = &off_1E63BC558;
        goto LABEL_9;
      }
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_1B226D240;
      v7 = &type metadata for Scale3;
      v8 = &off_1E63BC558;
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(v0 + 12);
    sub_1B1BDB5D0();
    if (v5)
    {
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_1B226CD10;
      *(_QWORD *)(result + 32) = &type metadata for TransientOriginScale;
      *(_QWORD *)(result + 40) = &off_1E639F880;
      v3 = &type metadata for Scale1;
      v4 = &off_1E63BC288;
      goto LABEL_9;
    }
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B226D240;
    v7 = &type metadata for Scale1;
    v8 = &off_1E63BC288;
  }
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = v8;
  return result;
}

uint64_t sub_1B20CE0A0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t result;
  ValueMetadata *v3;
  _UNKNOWN **v4;
  int v5;
  int v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;

  if (v0[8])
  {
    if (v0[8] == 1)
    {
      v1 = *v0;
      sub_1B1BDB5D0();
      if (v1)
      {
        result = swift_allocObject();
        *(_OWORD *)(result + 16) = xmmword_1B226CD10;
        *(_QWORD *)(result + 32) = &type metadata for TransientOriginScale;
        *(_QWORD *)(result + 40) = &off_1E639F880;
        v3 = &type metadata for Scale2;
        v4 = &off_1E63BC3F0;
LABEL_9:
        *(_QWORD *)(result + 48) = v3;
        *(_QWORD *)(result + 56) = v4;
        return result;
      }
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_1B226D240;
      v7 = &type metadata for Scale2;
      v8 = &off_1E63BC3F0;
    }
    else
    {
      v6 = *v0;
      sub_1B1BDB5D0();
      if (v6)
      {
        result = swift_allocObject();
        *(_OWORD *)(result + 16) = xmmword_1B226CD10;
        *(_QWORD *)(result + 32) = &type metadata for TransientOriginScale;
        *(_QWORD *)(result + 40) = &off_1E639F880;
        v3 = &type metadata for Scale3;
        v4 = &off_1E63BC558;
        goto LABEL_9;
      }
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_1B226D240;
      v7 = &type metadata for Scale3;
      v8 = &off_1E63BC558;
    }
  }
  else
  {
    v5 = *v0;
    sub_1B1BDB5D0();
    if (v5)
    {
      result = swift_allocObject();
      *(_OWORD *)(result + 16) = xmmword_1B226CD10;
      *(_QWORD *)(result + 32) = &type metadata for TransientOriginScale;
      *(_QWORD *)(result + 40) = &off_1E639F880;
      v3 = &type metadata for Scale1;
      v4 = &off_1E63BC288;
      goto LABEL_9;
    }
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B226D240;
    v7 = &type metadata for Scale1;
    v8 = &off_1E63BC288;
  }
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = v8;
  return result;
}

uint64_t sub_1B20CE240(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD v9[5];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(v2 + 112);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_7;
  v5 = *(_QWORD *)(v2 + 96);
  v6 = (_QWORD *)(v3 + 56);
  while ((ValueMetadata *)*(v6 - 3) != &type metadata for Depth)
  {
    v6 += 5;
    if (!--v4)
      goto LABEL_7;
  }
  if (*(_QWORD *)(v5 + *v6) != result)
  {
LABEL_7:
    v9[3] = &type metadata for Depth;
    v9[4] = &off_1E63BA3E0;
    v9[0] = result;
    v10 = 2;
    MEMORY[0x1E0C80A78](result, a2);
    sub_1B1F05610(v8, v7, (uint64_t (*)(uint64_t))sub_1B20D41E8);
    return sub_1B1B68F14((uint64_t)v9);
  }
  return result;
}

uint64_t sub_1B20CE344(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  char v10;
  uint64_t v11;
  _QWORD v12[5];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(v4 + 112);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = result;
    result = a4 & 1;
    v8 = *(_QWORD *)(v4 + 96);
    for (i = (_QWORD *)(v5 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Depth; i += 5)
    {
      if (!--v6)
        return result;
    }
    if (*(_QWORD *)(v8 + *i) == v7)
    {
      v12[3] = &type metadata for Depth;
      v12[4] = &off_1E63BA3E0;
      v12[0] = v7;
      v13 = 3;
      MEMORY[0x1E0C80A78](result, a2);
      sub_1B1F05610(v10, v11, (uint64_t (*)(uint64_t))sub_1B20D41E8);
      return sub_1B1B68F14((uint64_t)v12);
    }
  }
  return result;
}

BOOL sub_1B20CE448(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  for (i = (_QWORD *)(v2 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Depth; i += 5)
  {
    if (!--v3)
      return 0;
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 96) + *i) == a2;
}

uint64_t sub_1B20CE4D8(unint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;

  v3 = HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v3 != -1 && *(_DWORD *)(v5 + 12 * (int)a1 + 8) != (_DWORD)v3)
      return 0;
    v6 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + 8 * *(__int16 *)(v5 + 12 * (int)a1 + 6) + 32);
    v7 = *(_QWORD *)(v6 + 112);
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      return 0;
    v9 = *(_QWORD *)(v6 + 96);
    for (i = (_QWORD *)(v7 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Depth; i += 5)
    {
      if (!--v8)
        return 0;
    }
    if (v9)
      return *(_QWORD *)(v9 + *i);
    return 0;
  }
  return result;
}

uint64_t sub_1B20CE5B4(unint64_t a1)
{
  uint64_t v1;
  int v2;
  _DWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *i;
  BOOL v15;

  v2 = a1;
  v3 = (_DWORD *)HIDWORD(a1);
  if (a1 == 0xFFFFFFFF)
    return 0;
  result = 0;
  if ((v2 & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
    v6 = v2;
    if (v5 > v2)
    {
      v7 = 0;
      v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      while (1)
      {
        v9 = v8 + 12 * v6;
        v10 = *(__int16 *)(v9 + 4);
        if ((_DWORD)v3 != -1 && *(_DWORD *)(v9 + 8) != (_DWORD)v3)
          return v7;
        v11 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v8 + 12 * v6) + 32);
        v12 = *(_QWORD *)(v11 + 48);
        v13 = *(_QWORD *)(v12 + 16);
        if (!v13)
          return v7;
        for (i = (_QWORD *)(v12 + 56); (ValueMetadata *)*(i - 3) != &type metadata for Parent; i += 5)
        {
          if (!--v13)
            return v7;
        }
        v3 = (_DWORD *)(*(_QWORD *)(v11 + 128) + *i + 8 * v10);
        LODWORD(v6) = *v3;
        LODWORD(v3) = v3[1];
        v6 = (int)v6;
        result = 0;
        v15 = (_DWORD)v6 == -1 && (_DWORD)v3 == 0;
        if (v15 || (v6 & 0x80000000) != 0 || v5 <= (int)v6)
          return result;
        if ((_DWORD)v3 != -1 && *(_DWORD *)(v8 + 12 * (int)v6 + 8) != (_DWORD)v3)
          return 0;
        if (v7 == 1000)
          break;
        ++v7;
        if ((v6 & 0x80000000) != 0)
          return v7;
        result = v7;
        if (v5 <= (int)v6)
          return result;
      }
      return -1;
    }
  }
  return result;
}

uint64_t sub_1B20CE6DC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v4 = a1;
  if (a1 != 0xFFFFFFFF
    && (uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v5 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (HIDWORD(a1) == -1 || *(_DWORD *)(v5 + 12 * (int)a1 + 8) == HIDWORD(a1))
    {
      a1 = sub_1B20CE448(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 8 * *(__int16 *)(v5 + 12 * (int)a1 + 6) + 32), a2);
      if ((a1 & 1) != 0)
        return 1;
    }
  }
  if (a2 < 1)
  {
    v7 = sub_1B20CE4D8(v4);
    if ((v8 & 1) == 0)
    {
      MEMORY[0x1E0C80A78](v7, v8);
      sub_1B1DA6094(v4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B20D41EC);
    }
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a2);
    sub_1B1DA6094(v4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B20D4208);
  }
  return 0;
}

float32x4_t sub_1B20CE83C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  float32x4_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  _BYTE v15[80];
  _OWORD v16[4];
  char v17;

  v3 = swift_retain();
  sub_1B1F213C0(v3, (uint64_t)v15);
  swift_release();
  sub_1B1AE09AC((uint64_t)v15, (uint64_t)v16);
  if ((v17 & 1) == 0)
  {
    v13 = (float32x4_t)v16[1];
    v14 = (float32x4_t)v16[0];
    v11 = (float32x4_t)v16[3];
    v12 = (float32x4_t)v16[2];
    v5 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, *(uint64_t **)(a2 + 88), *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), *(_QWORD *)(a2 + 16));
    v6 = *(_QWORD *)(a2 + 48);
    v7 = *(_QWORD *)(a2 + 56) - v6;
    if (v7)
    {
      v8 = (float32x4_t *)(v5 + (v6 << 6) + 32);
      do
      {
        v9 = v8[1];
        result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)&v8[-1])), v13, *(float32x2_t *)v8[-1].f32, 1), v12, v8[-1], 2), v11, v8[-1], 3);
        v10 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*v8)), v13, *(float32x2_t *)v8->f32, 1), v12, *v8, 2), v11, *v8, 3);
        v8[-2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(*(_OWORD *)&v8[-2])), v13, *(float32x2_t *)v8[-2].f32, 1), v12, v8[-2], 2), v11, v8[-2], 3);
        v8[-1] = result;
        *v8 = v10;
        v8[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v9.f32[0]), v13, *(float32x2_t *)v9.f32, 1), v12, v9, 2), v11, v9, 3);
        v8 += 4;
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_1B20CE948()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B20CE97C();
  return v0;
}

uint64_t sub_1B20CE97C()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[40];
  _OWORD v33[2];
  uint64_t v34;
  _BYTE v35[40];
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  _BYTE v40[40];
  _QWORD v41[5];
  _OWORD v42[2];
  uint64_t v43;
  _BYTE v44[40];
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v83 = qword_1ED4D09F8;
  v84 = 0;
  v85 = 2;
  v86 = 0;
  v87 = 2;
  v88 = 0;
  swift_retain();
  sub_1B1E3B5F8(1, (uint64_t)&v22);
  swift_release();
  v1 = v23;
  v2 = v24;
  v3 = v26;
  v4 = v25 | 4;
  *(_QWORD *)(v0 + 16) = v22;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  v77 = qword_1ED4D09F8;
  v78 = 0;
  v79 = 2;
  v80 = 0;
  v81 = 2;
  v82 = 0;
  swift_retain();
  sub_1B1E3B7F0(1, (uint64_t)&v27);
  swift_release();
  v5 = v28;
  v6 = v29;
  v7 = v31;
  v8 = v30 | 4;
  *(_QWORD *)(v0 + 56) = v27;
  *(_DWORD *)(v0 + 64) = v5;
  *(_BYTE *)(v0 + 68) = v6;
  *(_QWORD *)(v0 + 72) = v8;
  *(_BYTE *)(v0 + 80) = 2;
  *(_QWORD *)(v0 + 88) = v7;
  v9 = qword_1ED4D09F8;
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 40) = &off_1E6382C78;
  *(_QWORD *)(inited + 48) = &type metadata for Depth;
  *(_QWORD *)(inited + 56) = &off_1E63BA410;
  v71 = v9;
  v72 = 0;
  v73 = 2;
  v74 = 0;
  v75 = 2;
  v76 = 0;
  swift_retain();
  sub_1B1E68AF8(inited, 1, (uint64_t)v32);
  swift_setDeallocating();
  swift_release();
  v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v11 + 32) = &type metadata for Parent;
  *(_QWORD *)(v11 + 40) = &off_1E63BB960;
  sub_1B1B441D4(v11, (uint64_t)v33);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v32);
  v12 = v33[1];
  *(_OWORD *)(v0 + 96) = v33[0];
  *(_OWORD *)(v0 + 112) = v12;
  *(_QWORD *)(v0 + 128) = v34;
  v65 = qword_1ED4D09F8;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  v69 = 2;
  v70 = 0;
  swift_retain();
  sub_1B1E3B9E8(2, (uint64_t)v35);
  swift_release();
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v13 + 32) = &type metadata for Fixed;
  *(_QWORD *)(v13 + 40) = &off_1E63BA508;
  *(_QWORD *)(v13 + 48) = &type metadata for Beamed;
  *(_QWORD *)(v13 + 56) = &off_1E63BB030;
  sub_1B1B44110(v36, v13);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v35);
  v14 = v36[1];
  *(_OWORD *)(v0 + 136) = v36[0];
  *(_OWORD *)(v0 + 152) = v14;
  *(_QWORD *)(v0 + 168) = v37;
  v59 = qword_1ED4D09F8;
  v60 = 0;
  v61 = 2;
  v62 = 0;
  v63 = 2;
  v64 = 0;
  swift_retain();
  sub_1B1B125D8(1, 2, (uint64_t)v38);
  swift_release();
  v15 = v38[1];
  *(_OWORD *)(v0 + 176) = v38[0];
  *(_OWORD *)(v0 + 192) = v15;
  *(_QWORD *)(v0 + 208) = v39;
  v53 = qword_1ED4D09F8;
  v54 = 0;
  v55 = 2;
  v56 = 0;
  v57 = 2;
  v58 = 0;
  swift_retain();
  sub_1B1B12804(1, 3, (uint64_t)v40);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAD48, &qword_1ED4B8A00, (unint64_t *)&qword_1ED4B89D0);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 32) = &type metadata for Depth;
  *(_QWORD *)(v16 + 40) = &off_1E63BA3E0;
  sub_1B1E8940C(v41);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v40);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226E100;
  *(_QWORD *)(v17 + 32) = &type metadata for Fixed;
  *(_QWORD *)(v17 + 40) = &off_1E63BA508;
  *(_QWORD *)(v17 + 48) = &type metadata for Beamed;
  *(_QWORD *)(v17 + 56) = &off_1E63BB030;
  *(_QWORD *)(v17 + 64) = &type metadata for NotInHierarchy;
  *(_QWORD *)(v17 + 72) = &off_1E63800B8;
  sub_1B1B44110(v42, v17);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v41);
  v18 = v42[1];
  *(_OWORD *)(v0 + 216) = v42[0];
  *(_OWORD *)(v0 + 232) = v18;
  *(_QWORD *)(v0 + 248) = v43;
  v47 = qword_1ED4D09F8;
  v48 = 0;
  v49 = 2;
  v50 = 0;
  v51 = 2;
  v52 = 0;
  swift_retain();
  sub_1B1B12804(1, 3, (uint64_t)v44);
  swift_release();
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
  *(_QWORD *)(v19 + 32) = &type metadata for Fixed;
  *(_QWORD *)(v19 + 40) = &off_1E63BA508;
  *(_QWORD *)(v19 + 48) = &type metadata for Beamed;
  *(_QWORD *)(v19 + 56) = &off_1E63BB030;
  *(_QWORD *)(v19 + 64) = &type metadata for NotInHierarchy;
  *(_QWORD *)(v19 + 72) = &off_1E63800B8;
  sub_1B1B44110(v45, v19);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v44);
  v20 = v45[1];
  *(_OWORD *)(v0 + 256) = v45[0];
  *(_OWORD *)(v0 + 272) = v20;
  *(_QWORD *)(v0 + 288) = v46;
  return v0;
}

void sub_1B20CEF54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double (*v69)(_QWORD);
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double (*v80)(_QWORD);
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double (*v132)(_QWORD);
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char v139;
  uint64_t v140;
  double (*v141)(_QWORD);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double (*v159)(_QWORD);
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unsigned int *v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  os_unfair_lock_s *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t i;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  void (*v185)(uint64_t);
  uint64_t v186;
  BOOL v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  uint64_t v194;
  unsigned int v195;
  BOOL v196;
  int v197;
  uint64_t v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char v205;
  __int128 v206;
  double v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int *v211;
  uint64_t v212;
  _QWORD *v213;
  unint64_t *v214;
  uint64_t v215;
  unint64_t **v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  unint64_t *v220;
  uint64_t v221;
  int v222;
  int v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  unint64_t **v227;
  int v228;
  uint64_t *v229;
  int *v230;
  char *v231;
  uint64_t *v232;
  char *v233;
  uint64_t *v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t v237;
  __int128 v238;
  double v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int *v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  unint64_t *v251;
  uint64_t v252;
  int v253;
  int v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  unint64_t **v258;
  int v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char v264;
  uint64_t v265;
  char v266;
  int v267;
  ValueMetadata *v268;
  unint64_t *v269;
  uint64_t v270;
  void **p_Description;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  os_unfair_lock_s *v275;
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  os_unfair_lock_s *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  _QWORD *v296;
  uint64_t v297;
  _QWORD *v298;
  ValueMetadata *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  ValueMetadata *v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  _QWORD *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  void *v321;
  uint64_t v322;
  _QWORD *v323;
  uint64_t v324;
  char v325;
  char v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  char *v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  unint64_t *v342;
  unint64_t *v343;
  unint64_t *v344;
  unint64_t *v345;
  uint64_t v346;
  unsigned int *v347;
  unsigned int *v348;
  unsigned int *v349;
  int v350;
  unsigned int *v351;
  uint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  unsigned int *v355;
  _QWORD *v356;
  int v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  __int128 v364;
  __int128 v365;
  uint64_t v366;
  _OWORD v367[2];
  uint64_t v368;
  __int128 v369;
  __int128 v370;
  uint64_t v371;
  _OWORD v372[2];
  uint64_t v373;
  _OWORD v374[2];
  uint64_t v375;
  _OWORD v376[2];
  uint64_t v377;
  uint64_t v378;
  int v379;
  char v380;
  uint64_t v381;
  char v382;
  uint64_t v383;
  _OWORD v384[2];
  uint64_t v385;
  _OWORD v386[2];
  uint64_t v387;
  _OWORD v388[2];
  uint64_t v389;
  _OWORD v390[2];
  uint64_t v391;
  uint64_t v392[8];
  uint64_t v393[12];
  uint64_t v394[12];
  uint64_t v395[12];
  uint64_t v396[12];
  uint64_t v397[12];
  __int128 v398;
  __int128 v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  _QWORD *v404;
  uint64_t v405;
  _OWORD v406[2];
  uint64_t v407;
  ValueMetadata *v408;
  unint64_t *v409;
  ValueMetadata *v410;
  _QWORD *v411;
  uint64_t v412;
  _QWORD v413[10];
  uint64_t v414;
  _QWORD v415[10];
  uint64_t v416;
  _OWORD v417[2];
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  ValueMetadata *v421;
  _QWORD *v422;
  uint64_t v423;
  _OWORD v424[2];
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  uint64_t v430;
  _BYTE v431[40];
  _BYTE v432[40];
  ValueMetadata *v433;
  unint64_t *v434;
  _QWORD *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  char v443;
  uint64_t v444;
  void *v445;
  void *v446;
  ValueMetadata *v447;
  unsigned int *v448;
  _QWORD *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  _QWORD *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  _BYTE v461[40];
  uint64_t v462;

  v2 = 0;
  v462 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(v1 + 56);
  v4 = *(_OWORD *)(v1 + 72);
  v391 = *(_QWORD *)(v1 + 88);
  v390[0] = v3;
  v390[1] = v4;
  sub_1B1E8FCE4(a1, (uint64_t)v390, 0x200000000, v392);
  sub_1B1A18378((uint64_t)v392, (uint64_t)v424, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v424[0])
  {
    v364 = v424[0];
    v365 = v424[1];
    v366 = v425;
    if (v430 >= 1)
    {
      v304 = v427;
      if (v427)
      {
        v302 = v426;
        v311 = *(unsigned __int8 *)(v428 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v308 = v429[4];
        v5 = v429 + 13;
        v323 = v429;
        v298 = v429 + 8;
        v300 = (uint64_t)(v429 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v6 = 0;
        v319 = v5;
        while (1)
        {
          v306 = v6;
          v7 = (unsigned int *)(v302 + 48 * v6);
          v8 = *v7;
          v352 = v7[1];
          v9 = *((_QWORD *)v7 + 3);
          v340 = (uint64_t *)*((_QWORD *)v7 + 2);
          v10 = *((_QWORD *)v7 + 5);
          v329 = *((_QWORD *)v7 + 4);
          v11 = v2;
          if (v311)
          {
            v12 = *(os_unfair_lock_s **)(v10 + 376);
            swift_retain();
            os_unfair_lock_lock(v12);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v308);
          sub_1B1A18378(v300, (uint64_t)v461, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v13 = v323[4];
          v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v323[6] = ecs_stack_allocator_allocate(v13, 48 * v14, 8);
          v323[7] = v14;
          v298[1] = 0;
          v298[2] = 0;
          *v298 = 0;
          swift_release();
          v15 = v329;
          v346 = sub_1B1A12038((uint64_t)&type metadata for SpaceOverride, (uint64_t)&off_1E637D298, v340, v9, v329, (uint64_t)v323);
          if (!v340)
            break;
          v2 = v11;
          if (v329)
          {
            v16 = 0;
            v17 = v319;
            do
            {
              v353 = v340[v16];
              v18 = *(unsigned __int8 *)(v346 + v16);
              if (v18 == 2)
              {
                v335 = v2;
                v41 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
                v42 = *(_QWORD *)(v41 + 128);
                if (!*(_QWORD *)(v42 + 16)
                  || (v43 = sub_1B1DC3AC8((uint64_t)&type metadata for ParentedToScene), (v44 & 1) == 0)
                  || *(ValueMetadata **)(*(_QWORD *)(v41 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v43) + 32) != &type metadata for ParentedToScene)
                {
                  *(_QWORD *)&v417[0] = &type metadata for ParentedToScene;
                  *((_QWORD *)&v417[0] + 1) = &off_1E6384748;
                  LOBYTE(v419) = 0;
                  v45 = *v17;
                  if (sub_1B1C7A1C4(*v17))
                  {
                    swift_retain();
                    swift_bridgeObjectRetain();
                    sub_1B1F09F2C(v45 + 32, (uint64_t)&v433);
                    sub_1B1BE90FC((uint64_t)&v433, (uint64_t)&v447);
                    sub_1B1BE90FC((uint64_t)v417, (uint64_t)&v453);
                    __asm { BR              X9 }
                  }
                  swift_retain();
                  v50 = *(_QWORD *)(v10 + 240) - *(_QWORD *)(v10 + 232);
                  v51 = ecs_stack_allocator_allocate(v323[4], 8 * v50, 8);
                  *v51 = v353;
                  sub_1B1BE90FC((uint64_t)v417, (uint64_t)&v447);
                  v453 = v51;
                  v454 = v50;
                  v455 = 1;
                  sub_1B1DC9A64();
                  v52 = *(_QWORD *)(v323[13] + 16);
                  sub_1B1DC9B00(v52);
                  sub_1B1DC9B98(v52, (uint64_t)&v447);
                  nullsub_16(v53);
                  sub_1B1B68F14((uint64_t)v417);
                  swift_release();
                }
                v54 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
                v55 = *(_QWORD *)(v54 + 128);
                if (!*(_QWORD *)(v55 + 16)
                  || (v56 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy), (v57 & 1) == 0)
                  || *(ValueMetadata **)(*(_QWORD *)(v54 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v55 + 56) + 8 * v56) + 32) != &type metadata for NotInHierarchy)
                {
                  v433 = &type metadata for NotInHierarchy;
                  v434 = &off_1E6380040;
                  LOBYTE(v438) = 0;
                  v58 = *v17;
                  v59 = sub_1B1C7A1C4(*v17);
                  if (v59)
                  {
                    v60 = v59;
                    v61 = v58 + 32;
                    swift_retain();
                    swift_bridgeObjectRetain();
                    v62 = 0;
                    v2 = v335;
                    while (1)
                    {
                      sub_1B1F09F2C(v61, (uint64_t)&v447);
                      v63 = sub_1B1F05D20((uint64_t)&v447, (uint64_t)&v433);
                      sub_1B1A04628((uint64_t)&v447, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                      if ((v63 & 1) != 0)
                        break;
                      ++v62;
                      v61 += 72;
                      if (v60 == v62)
                      {
                        swift_bridgeObjectRelease();
                        v17 = v319;
                        goto LABEL_49;
                      }
                    }
                    swift_bridgeObjectRelease();
                    v17 = v319;
                    v80 = sub_1B1F02954();
                    v81 = *(_QWORD *)(v79 + 48);
                    if (v81)
                    {
                      v82 = *(_QWORD *)(v79 + 64);
                      *(_QWORD *)(v81 + 8 * v82) = v353;
                      *(_QWORD *)(v79 + 64) = v82 + 1;
                    }
                    ((void (*)(ValueMetadata **, _QWORD))v80)(&v447, 0);
                  }
                  else
                  {
                    swift_retain();
LABEL_49:
                    v64 = *(_QWORD *)(v10 + 240) - *(_QWORD *)(v10 + 232);
                    v65 = ecs_stack_allocator_allocate(v323[4], 8 * v64, 8);
                    *v65 = v353;
                    sub_1B1BE90FC((uint64_t)&v433, (uint64_t)&v447);
                    v453 = v65;
                    v454 = v64;
                    v455 = 1;
                    sub_1B1DC9A64();
                    v66 = *(_QWORD *)(v323[13] + 16);
                    sub_1B1DC9B00(v66);
                    sub_1B1DC9B98(v66, (uint64_t)&v447);
                    nullsub_16(v67);
                    v2 = v335;
                  }
                  v15 = v329;
                  sub_1B1B68F14((uint64_t)&v433);
                  swift_release();
                  goto LABEL_13;
                }
                v2 = v335;
              }
              else if (v18 == 1)
              {
                v30 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
                v31 = *(_QWORD *)(v30 + 128);
                if (!*(_QWORD *)(v31 + 16)
                  || (v32 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy), (v33 & 1) == 0)
                  || *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32) != &type metadata for NotInHierarchy)
                {
                  v433 = &type metadata for NotInHierarchy;
                  v434 = &off_1E6380040;
                  LOBYTE(v438) = 0;
                  v34 = *v17;
                  v35 = sub_1B1C7A1C4(*v17);
                  if (v35)
                  {
                    v36 = v35;
                    v37 = v34 + 32;
                    swift_retain();
                    swift_bridgeObjectRetain();
                    v38 = 0;
                    while (1)
                    {
                      sub_1B1F09F2C(v37, (uint64_t)&v447);
                      sub_1B1F09F70((uint64_t)&v447, (uint64_t)&v433);
                      v40 = v39;
                      sub_1B1A04628((uint64_t)&v447, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                      if ((v40 & 1) != 0)
                        break;
                      ++v38;
                      v37 += 72;
                      if (v36 == v38)
                      {
                        swift_bridgeObjectRelease();
                        v17 = v319;
                        goto LABEL_38;
                      }
                    }
                    swift_bridgeObjectRelease();
                    v17 = v319;
                    v69 = sub_1B1F02954();
                    v70 = *(_QWORD *)(v68 + 48);
                    if (v70)
                    {
                      v71 = *(_QWORD *)(v68 + 64);
                      *(_QWORD *)(v70 + 8 * v71) = v353;
                      *(_QWORD *)(v68 + 64) = v71 + 1;
                    }
                    ((void (*)(ValueMetadata **, _QWORD))v69)(&v447, 0);
                  }
                  else
                  {
                    swift_retain();
LABEL_38:
                    v46 = *(_QWORD *)(v10 + 240) - *(_QWORD *)(v10 + 232);
                    v47 = ecs_stack_allocator_allocate(v323[4], 8 * v46, 8);
                    *v47 = v353;
                    sub_1B1BE90FC((uint64_t)&v433, (uint64_t)&v447);
                    v453 = v47;
                    v454 = v46;
                    v455 = 1;
                    sub_1B1DC9A64();
                    v48 = *(_QWORD *)(v323[13] + 16);
                    sub_1B1DC9B00(v48);
                    sub_1B1DC9B98(v48, (uint64_t)&v447);
                    nullsub_16(v49);
                  }
                  sub_1B1B68F14((uint64_t)&v433);
                  swift_release();
                }
                v72 = *(_QWORD *)(v10 + 40);
                v73 = *(_QWORD *)(v72 + 16);
                v74 = *(_QWORD *)(v73 + 128);
                if (*(_QWORD *)(v74 + 16))
                {
                  v75 = sub_1B1DC3AC8((uint64_t)&type metadata for ParentedToScene);
                  if ((v76 & 1) != 0
                    && *(ValueMetadata **)(*(_QWORD *)(v73 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v74 + 56) + 8 * v75)
                                         + 32) == &type metadata for ParentedToScene)
                  {
                    v77 = sub_1B1A10AA4(v72, (uint64_t)&type metadata for ParentedToScene, &v447);
                    if (v447 == 1)
                    {
                      v447 = &type metadata for ParentedToScene;
                      v448 = (unsigned int *)&off_1E6384748;
                      LOBYTE(v452) = 1;
                      MEMORY[0x1E0C80A78](v77, v78);
                      swift_retain();
                      sub_1B1F05610(0, v10, (uint64_t (*)(uint64_t))sub_1B20D41E8);
                      sub_1B1B68F14((uint64_t)&v447);
                      swift_release();
                    }
                  }
                }
              }
              else
              {
                if (*(_BYTE *)(v346 + v16))
                  goto LABEL_13;
                v19 = v2;
                v20 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
                v21 = *(_QWORD *)(v20 + 128);
                if (*(_QWORD *)(v21 + 16))
                {
                  v22 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy);
                  if ((v23 & 1) != 0)
                  {
                    v24 = *(_QWORD *)(v20 + 24) + 32;
                    if (*(ValueMetadata **)(v24 + 16 * *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22)) == &type metadata for NotInHierarchy)
                    {
                      if (*(_QWORD *)(v21 + 16))
                      {
                        v83 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy);
                        if ((v84 & 1) != 0
                          && *(ValueMetadata **)(v24 + 16 * *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v83)) == &type metadata for NotInHierarchy)
                        {
                          v447 = &type metadata for NotInHierarchy;
                          v448 = (unsigned int *)&off_1E6380040;
                          LOBYTE(v452) = 1;
                          MEMORY[0x1E0C80A78](v83, v84);
                          swift_retain();
                          sub_1B1F05610(0, v10, (uint64_t (*)(uint64_t))sub_1B20D41E8);
                          sub_1B1B68F14((uint64_t)&v447);
                          swift_release();
                        }
                      }
                    }
                  }
                }
                v25 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
                v26 = *(_QWORD *)(v25 + 128);
                if (*(_QWORD *)(v26 + 16))
                {
                  v27 = sub_1B1DC3AC8((uint64_t)&type metadata for ParentedToScene);
                  if ((v28 & 1) != 0)
                  {
                    v29 = *(_QWORD *)(v25 + 24) + 32;
                    if (*(ValueMetadata **)(v29 + 16 * *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27)) == &type metadata for ParentedToScene)
                    {
                      if (*(_QWORD *)(v26 + 16))
                      {
                        v85 = sub_1B1DC3AC8((uint64_t)&type metadata for ParentedToScene);
                        if ((v86 & 1) != 0
                          && *(ValueMetadata **)(v29 + 16 * *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v85)) == &type metadata for ParentedToScene)
                        {
                          v447 = &type metadata for ParentedToScene;
                          v448 = (unsigned int *)&off_1E6384748;
                          LOBYTE(v452) = 1;
                          MEMORY[0x1E0C80A78](v85, v86);
                          swift_retain();
                          sub_1B1F05610(0, v10, (uint64_t (*)(uint64_t))sub_1B20D41E8);
                          sub_1B1B68F14((uint64_t)&v447);
                          swift_release();
                        }
                      }
                    }
                  }
                }
                v2 = v19;
              }
              v15 = v329;
LABEL_13:
              ++v16;
            }
            while (v16 != v15);
          }
LABEL_73:
          v367[0] = v364;
          v367[1] = v365;
          v368 = v366;
          sub_1B1F05D48(v323, (unsigned __int16 **)v367, (uint64_t)v461);
          sub_1B1F03804((char *)v10);
          ecs_stack_allocator_pop_snapshot(v308);
          if ((v311 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
          }
          swift_release();
          v6 = v306 + 1;
          if (v306 + 1 == v304)
          {
            sub_1B19ED748(v392);
            goto LABEL_141;
          }
        }
        v2 = v11;
        if ((_DWORD)v8 == (_DWORD)v352)
          goto LABEL_73;
        v87 = v319;
        while (1)
        {
          v88 = *(unsigned __int8 *)(v346 + v8);
          if (v88 == 2)
          {
            v111 = v2;
            v112 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
            v113 = *(_QWORD *)(v112 + 128);
            if (!*(_QWORD *)(v113 + 16)
              || (v114 = sub_1B1DC3AC8((uint64_t)&type metadata for ParentedToScene), (v115 & 1) == 0)
              || *(ValueMetadata **)(*(_QWORD *)(v112 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v113 + 56) + 8 * v114) + 32) != &type metadata for ParentedToScene)
            {
              v433 = &type metadata for ParentedToScene;
              v434 = &off_1E6384748;
              LOBYTE(v438) = 0;
              v116 = *v87;
              v117 = sub_1B1C7A1C4(*v87);
              if (v117)
              {
                v118 = v117;
                v119 = v116 + 32;
                swift_retain();
                swift_bridgeObjectRetain();
                v120 = 0;
                while (1)
                {
                  sub_1B1F09F2C(v119, (uint64_t)&v447);
                  sub_1B1F09F70((uint64_t)&v447, (uint64_t)&v433);
                  v122 = v121;
                  sub_1B1A04628((uint64_t)&v447, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                  if ((v122 & 1) != 0)
                    break;
                  ++v120;
                  v119 += 72;
                  if (v118 == v120)
                  {
                    swift_bridgeObjectRelease();
                    v87 = v319;
                    goto LABEL_107;
                  }
                }
                swift_bridgeObjectRelease();
                v87 = v319;
                v141 = sub_1B1F02954();
                v142 = *(_QWORD *)(v140 + 48);
                if (v142)
                {
                  v143 = *(_QWORD *)(v140 + 64);
                  *(_QWORD *)(v142 + 8 * v143) = v8;
                  *(_QWORD *)(v140 + 64) = v143 + 1;
                }
                ((void (*)(ValueMetadata **, _QWORD))v141)(&v447, 0);
              }
              else
              {
                swift_retain();
LABEL_107:
                v127 = *(_QWORD *)(v10 + 240) - *(_QWORD *)(v10 + 232);
                v128 = ecs_stack_allocator_allocate(v323[4], 8 * v127, 8);
                *v128 = v8;
                sub_1B1BE90FC((uint64_t)&v433, (uint64_t)&v447);
                v453 = v128;
                v454 = v127;
                v455 = 1;
                sub_1B1DC9A64();
                v129 = *(_QWORD *)(v323[13] + 16);
                sub_1B1DC9B00(v129);
                sub_1B1DC9B98(v129, (uint64_t)&v447);
                nullsub_16(v130);
              }
              sub_1B1B68F14((uint64_t)&v433);
              swift_release();
            }
            v144 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
            v145 = *(_QWORD *)(v144 + 128);
            if (*(_QWORD *)(v145 + 16)
              && (v146 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy), (v147 & 1) != 0)
              && *(ValueMetadata **)(*(_QWORD *)(v144 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v145 + 56) + 8 * v146) + 32) == &type metadata for NotInHierarchy)
            {
              v2 = v111;
            }
            else
            {
              v433 = &type metadata for NotInHierarchy;
              v434 = &off_1E6380040;
              LOBYTE(v438) = 0;
              v148 = *v87;
              v149 = sub_1B1C7A1C4(*v87);
              if (v149)
              {
                v150 = v149;
                v151 = v148 + 32;
                swift_retain();
                swift_bridgeObjectRetain();
                v152 = 0;
                v2 = v111;
                while (1)
                {
                  sub_1B1F09F2C(v151, (uint64_t)&v447);
                  v153 = sub_1B1F05D20((uint64_t)&v447, (uint64_t)&v433);
                  sub_1B1A04628((uint64_t)&v447, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                  if ((v153 & 1) != 0)
                    break;
                  ++v152;
                  v151 += 72;
                  if (v150 == v152)
                  {
                    swift_bridgeObjectRelease();
                    v87 = v319;
                    goto LABEL_130;
                  }
                }
                swift_bridgeObjectRelease();
                v87 = v319;
                v159 = sub_1B1F02954();
                v160 = *(_QWORD *)(v158 + 48);
                if (v160)
                {
                  v161 = *(_QWORD *)(v158 + 64);
                  *(_QWORD *)(v160 + 8 * v161) = v8;
                  *(_QWORD *)(v158 + 64) = v161 + 1;
                }
                ((void (*)(ValueMetadata **, _QWORD))v159)(&v447, 0);
              }
              else
              {
                swift_retain();
LABEL_130:
                v154 = *(_QWORD *)(v10 + 240) - *(_QWORD *)(v10 + 232);
                v155 = ecs_stack_allocator_allocate(v323[4], 8 * v154, 8);
                *v155 = v8;
                sub_1B1BE90FC((uint64_t)&v433, (uint64_t)&v447);
                v453 = v155;
                v454 = v154;
                v455 = 1;
                sub_1B1DC9A64();
                v156 = *(_QWORD *)(v323[13] + 16);
                sub_1B1DC9B00(v156);
                sub_1B1DC9B98(v156, (uint64_t)&v447);
                nullsub_16(v157);
                v2 = v111;
              }
              sub_1B1B68F14((uint64_t)&v433);
              swift_release();
            }
            goto LABEL_76;
          }
          if (v88 == 1)
          {
            v101 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
            v102 = *(_QWORD *)(v101 + 128);
            if (!*(_QWORD *)(v102 + 16)
              || (v103 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy), (v104 & 1) == 0)
              || *(ValueMetadata **)(*(_QWORD *)(v101 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v102 + 56) + 8 * v103) + 32) != &type metadata for NotInHierarchy)
            {
              v433 = &type metadata for NotInHierarchy;
              v434 = &off_1E6380040;
              LOBYTE(v438) = 0;
              v105 = *v87;
              v106 = sub_1B1C7A1C4(*v87);
              if (v106)
              {
                v107 = v106;
                v108 = v105 + 32;
                swift_retain();
                swift_bridgeObjectRetain();
                v109 = 0;
                while (1)
                {
                  sub_1B1F09F2C(v108, (uint64_t)&v447);
                  v110 = sub_1B1F05D20((uint64_t)&v447, (uint64_t)&v433);
                  sub_1B1A04628((uint64_t)&v447, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                  if ((v110 & 1) != 0)
                    break;
                  ++v109;
                  v108 += 72;
                  if (v107 == v109)
                  {
                    swift_bridgeObjectRelease();
                    v87 = v319;
                    goto LABEL_105;
                  }
                }
                swift_bridgeObjectRelease();
                v87 = v319;
                v132 = sub_1B1F02954();
                v133 = *(_QWORD *)(v131 + 48);
                if (v133)
                {
                  v134 = *(_QWORD *)(v131 + 64);
                  *(_QWORD *)(v133 + 8 * v134) = v8;
                  *(_QWORD *)(v131 + 64) = v134 + 1;
                }
                ((void (*)(ValueMetadata **, _QWORD))v132)(&v447, 0);
              }
              else
              {
                swift_retain();
LABEL_105:
                v123 = *(_QWORD *)(v10 + 240) - *(_QWORD *)(v10 + 232);
                v124 = ecs_stack_allocator_allocate(v323[4], 8 * v123, 8);
                *v124 = v8;
                sub_1B1BE90FC((uint64_t)&v433, (uint64_t)&v447);
                v453 = v124;
                v454 = v123;
                v455 = 1;
                sub_1B1DC9A64();
                v125 = *(_QWORD *)(v323[13] + 16);
                sub_1B1DC9B00(v125);
                sub_1B1DC9B98(v125, (uint64_t)&v447);
                nullsub_16(v126);
              }
              sub_1B1B68F14((uint64_t)&v433);
              swift_release();
            }
            v135 = *(_QWORD *)(v10 + 40);
            v136 = *(_QWORD *)(v135 + 16);
            v137 = *(_QWORD *)(v136 + 128);
            if (!*(_QWORD *)(v137 + 16))
              goto LABEL_76;
            v138 = sub_1B1DC3AC8((uint64_t)&type metadata for ParentedToScene);
            if ((v139 & 1) == 0)
              goto LABEL_76;
            if (*(ValueMetadata **)(*(_QWORD *)(v136 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v137 + 56) + 8 * v138) + 32) != &type metadata for ParentedToScene)
              goto LABEL_76;
            v99 = sub_1B1A10AA4(v135, (uint64_t)&type metadata for ParentedToScene, &v447);
            if (v447 != 1)
              goto LABEL_76;
          }
          else
          {
            if (*(_BYTE *)(v346 + v8))
              goto LABEL_76;
            v89 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + 16);
            v90 = *(_QWORD *)(v89 + 128);
            if (*(_QWORD *)(v90 + 16))
            {
              v91 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy);
              if ((v92 & 1) != 0)
              {
                v93 = *(_QWORD *)(v89 + 24) + 32;
                if (*(ValueMetadata **)(v93 + 16 * *(_QWORD *)(*(_QWORD *)(v90 + 56) + 8 * v91)) == &type metadata for NotInHierarchy)
                {
                  if (*(_QWORD *)(v90 + 16))
                  {
                    v162 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy);
                    if ((v163 & 1) != 0
                      && *(ValueMetadata **)(v93 + 16 * *(_QWORD *)(*(_QWORD *)(v90 + 56) + 8 * v162)) == &type metadata for NotInHierarchy)
                    {
                      v447 = &type metadata for NotInHierarchy;
                      v448 = (unsigned int *)&off_1E6380040;
                      LOBYTE(v452) = 1;
                      MEMORY[0x1E0C80A78](v162, v163);
                      swift_retain();
                      sub_1B1F05610(0, v10, (uint64_t (*)(uint64_t))sub_1B20D41E8);
                      sub_1B1B68F14((uint64_t)&v447);
                      swift_release();
                    }
                  }
                }
              }
            }
            v94 = *(_QWORD *)(v10 + 40);
            v95 = *(_QWORD *)(v94 + 16);
            v96 = *(_QWORD *)(v95 + 128);
            if (!*(_QWORD *)(v96 + 16))
              goto LABEL_76;
            v97 = sub_1B1DC3AC8((uint64_t)&type metadata for ParentedToScene);
            if ((v98 & 1) == 0)
              goto LABEL_76;
            if (*(ValueMetadata **)(*(_QWORD *)(v95 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v96 + 56) + 8 * v97) + 32) != &type metadata for ParentedToScene)
              goto LABEL_76;
            v99 = sub_1B1A10AA4(v94, (uint64_t)&type metadata for ParentedToScene, &v447);
            if (v447 != 1)
              goto LABEL_76;
          }
          v447 = &type metadata for ParentedToScene;
          v448 = (unsigned int *)&off_1E6384748;
          LOBYTE(v452) = 1;
          MEMORY[0x1E0C80A78](v99, v100);
          swift_retain();
          sub_1B1F05610(0, v10, (uint64_t (*)(uint64_t))sub_1B20D41E8);
          sub_1B1B68F14((uint64_t)&v447);
          swift_release();
LABEL_76:
          if (++v8 == v352)
            goto LABEL_73;
        }
      }
    }
LABEL_141:
    sub_1B19ED748(v392);
  }
  v164 = *(_OWORD *)(v295 + 152);
  v388[0] = *(_OWORD *)(v295 + 136);
  v388[1] = v164;
  v389 = *(_QWORD *)(v295 + 168);
  sub_1B1E8FCE4(a1, (uint64_t)v388, 0x200000000, v393);
  v165 = sub_1B1A18378((uint64_t)v393, (uint64_t)v417, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v417[0])
  {
    v303 = v423;
    if (v423 >= 1)
    {
      v301 = v420;
      if (v420)
      {
        v166 = v422;
        v336 = v2;
        v341 = v422[4];
        v330 = *((unsigned __int8 *)&v421->Kind + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v369 = v417[0];
        v370 = v417[1];
        v297 = v419;
        v299 = v421;
        v371 = v418;
        v296 = v422 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v167 = 0;
        v354 = v166;
        while (1)
        {
          v324 = v167;
          v168 = (unsigned int *)(v297 + 48 * v167);
          v169 = (_QWORD *)*v168;
          v170 = v168[1];
          v171 = v168[2];
          v172 = *((_QWORD *)v168 + 3);
          v305 = *((_QWORD *)v168 + 2);
          v173 = *((_QWORD *)v168 + 4);
          v174 = (unsigned int *)*((_QWORD *)v168 + 5);
          if (v330)
          {
            v175 = (os_unfair_lock_s *)*((_QWORD *)v174 + 47);
            swift_retain_n();
            os_unfair_lock_lock(v175);
            os_unfair_lock_lock(*((os_unfair_lock_t *)v174 + 43));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v341);
          v316 = v166[7];
          v320 = v166[6];
          v309 = v166[9];
          v312 = v166[8];
          v307 = v166[10];
          v176 = v166[4];
          v347 = v174;
          v177 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v174 + 5) + 16) + 32) + 16) + 1;
          swift_retain();
          v178 = v347;
          v354[6] = ecs_stack_allocator_allocate(v176, 48 * v177, 8);
          v354[7] = v177;
          v166 = v354;
          v296[1] = 0;
          v296[2] = 0;
          *v296 = 0;
          swift_release();
          v447 = v299;
          v448 = v347;
          v449 = v354;
          v450 = v171;
          v451 = (v170 - (_DWORD)v169 + v171);
          v452 = v303;
          v453 = v169;
          v454 = v170;
          v455 = 0;
          v456 = 0;
          v457 = 1;
          v458 = v305;
          v459 = v172;
          v460 = v173;
          sub_1B20D3BA8((uint64_t)&v447);
          sub_1B1A10AA4(*((_QWORD *)v347 + 5), (uint64_t)&type metadata for ParentedToScene, &v433);
          if ((v433 & 1) != 0
            || (sub_1B1A10AA4(*((_QWORD *)v347 + 5), (uint64_t)&type metadata for Parent, &v433),
                (v433 & 1) == 0)
            && (sub_1B1A10AA4(*((_QWORD *)v347 + 5), (uint64_t)&type metadata for PointOfView, &v433),
                (v433 & 1) == 0)
            && (sub_1B1A10AA4(*((_QWORD *)v347 + 5), (uint64_t)&type metadata for NotInHierarchy, &v433),
                (v433 & 1) == 0))
          {
            sub_1B20CE83C(a1, (uint64_t)&v447);
          }
          v179 = v354[6];
          v180 = v354[8];
          if (!v180)
          {
            v203 = v354[7];
            v204 = (_QWORD *)v354[4];
            goto LABEL_186;
          }
          for (i = 0; i != v180; ++i)
          {
            v183 = (uint64_t *)(v179 + 48 * i);
            v184 = *v183;
            v185 = (void (*)(uint64_t))v183[4];
            v186 = v354[9];
            if (v186)
              v187 = v184 == v186;
            else
              v187 = 0;
            if (v187)
              goto LABEL_156;
            v188 = v369;
            if (!*(_WORD *)(v369 + 22))
              goto LABEL_156;
            v189 = v183[2];
            v190 = v369 + 41;
            v191 = *(unsigned __int16 *)(v369 + 18);
            if (v191 >= 0x10)
            {
              v192 = (_QWORD *)(v190 + *(unsigned __int16 *)(v369 + 16));
              v193 = v191 >> 4;
              v194 = v369 + 41;
              while (*v192 != v184)
              {
                ++v194;
                v192 += 2;
                if (!--v193)
                  goto LABEL_172;
              }
              v195 = *(unsigned __int8 *)(v194 + *(unsigned __int16 *)(v369 + 20));
              v196 = v195 > 5;
              v197 = (1 << v195) & 0x23;
              if (v196 || v197 == 0)
              {
LABEL_156:
                v182 = swift_retain();
                v185(v182);
                swift_release();
                continue;
              }
            }
LABEL_172:
            if (swift_conformsToProtocol2())
              v199 = v189;
            else
              v199 = 0;
            if (v199)
            {
              if ((sub_1B1A182FC(v199) & 1) != 0)
                goto LABEL_156;
              v200 = *(unsigned __int16 *)(v188 + 18);
              if (v200 < 0x10)
                goto LABEL_156;
              v201 = (_QWORD *)(v190 + *(unsigned __int16 *)(v188 + 16));
              v202 = 16 * (v200 >> 4);
              while (*v201 != v199)
              {
                v201 += 2;
                v202 -= 16;
                if (!v202)
                  goto LABEL_156;
              }
            }
          }
          v166 = v354;
          v203 = v354[7];
          v179 = v354[6];
          v204 = (_QWORD *)v354[4];
          if ((uint64_t)v354[8] >= 1)
            swift_arrayDestroy();
          v178 = v347;
LABEL_186:
          ecs_stack_allocator_deallocate(v204, v179, 48 * v203);
          v166[6] = v320;
          v166[7] = v316;
          v166[8] = v312;
          v166[9] = v309;
          v166[10] = v307;
          sub_1B1F03804((char *)v178);
          ecs_stack_allocator_pop_snapshot(v341);
          if ((v330 & 1) != 0)
          {
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v178 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v178 + 47));
          }
          swift_release();
          v167 = v324 + 1;
          if (v324 + 1 == v301)
          {
            sub_1B19ED748(v393);
            v2 = v336;
            break;
          }
        }
      }
    }
    v165 = (uint64_t)sub_1B19ED748(v393);
  }
  v205 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v295 + 160))(v165);
  if ((v205 & 1) == 0)
  {
    v229 = (uint64_t *)(v295 + 256);
    v230 = (int *)(v295 + 264);
    v231 = (char *)(v295 + 268);
    v232 = (uint64_t *)(v295 + 272);
    v233 = (char *)(v295 + 280);
    v234 = (uint64_t *)(v295 + 288);
LABEL_243:
    v263 = *v234;
    v264 = *v233;
    v265 = *v232;
    v266 = *v231;
    v267 = *v230;
    v378 = *v229;
    v379 = v267;
    v380 = v266;
    v381 = v265;
    v382 = v264;
    v383 = v263;
    swift_retain();
    sub_1B1E8FCE4(a1, (uint64_t)&v378, 0x200000000, v396);
    swift_release();
    sub_1B1A18378((uint64_t)v396, (uint64_t)v406, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v406[0])
    {
      v359 = v406[0];
      v361 = v406[1];
      v268 = v408;
      v363 = v407;
      v269 = v409;
      v356 = v411;
      v310 = v410;
      v313 = v412;
      if ((v205 & 1) != 0)
      {
        v433 = v408;
        v434 = (_UNKNOWN **)v409;
        sub_1B20D2E28((uint64_t *)&v433);
      }
      if (v313 >= 1 && v269)
      {
        v270 = v356[4];
        v350 = *((unsigned __int8 *)&v310->Kind + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        swift_retain();
        swift_retain();
        swift_retain();
        p_Description = &v268[1].Description;
        do
        {
          v338 = v2;
          v344 = v269;
          v272 = *((unsigned int *)p_Description - 6);
          v273 = *((unsigned int *)p_Description - 4);
          v274 = p_Description[2];
          v327 = *p_Description;
          v333 = (uint64_t)*(p_Description - 1);
          v317 = *((unsigned int *)p_Description - 5);
          v321 = p_Description[1];
          if (v350)
          {
            v275 = (os_unfair_lock_s *)*((_QWORD *)v274 + 47);
            swift_retain();
            os_unfair_lock_lock(v275);
            os_unfair_lock_lock(*((os_unfair_lock_t *)v274 + 43));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v270);
          sub_1B1A18378((uint64_t)(v356 + 6), (uint64_t)v432, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v276 = v356[4];
          v277 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v274 + 5) + 16) + 32) + 16) + 1;
          swift_retain();
          v356[6] = ecs_stack_allocator_allocate(v276, 48 * v277, 8);
          v356[7] = v277;
          v356[9] = 0;
          v356[10] = 0;
          v356[8] = 0;
          swift_release();
          v433 = v310;
          v434 = (_UNKNOWN **)v274;
          v435 = v356;
          v436 = v273;
          v437 = (v317 - v272 + v273);
          v438 = v313;
          v439 = v272;
          v440 = v317;
          v441 = 0;
          v442 = 0;
          v443 = 1;
          v2 = v338;
          v444 = v333;
          v445 = v327;
          v446 = v321;
          sub_1B20D152C(&v433, a1);
          v372[0] = v359;
          v372[1] = v361;
          v373 = v363;
          sub_1B1F05D48(v356, (unsigned __int16 **)v372, (uint64_t)v432);
          sub_1B1F03804((char *)v274);
          ecs_stack_allocator_pop_snapshot(v270);
          if (v350)
          {
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v274 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v274 + 47));
          }
          swift_release();
          p_Description += 6;
          v269 = (unint64_t *)((char *)v344 - 1);
        }
        while (v344 != (unint64_t *)1);
        sub_1B19ED748(v396);
      }
      sub_1B19ED748(v396);
    }
    v278 = *(_OWORD *)(v295 + 192);
    v376[0] = *(_OWORD *)(v295 + 176);
    v376[1] = v278;
    v377 = *(_QWORD *)(v295 + 208);
    sub_1B1E8FCE4(a1, (uint64_t)v376, 0x200000000, v397);
    sub_1B1A18378((uint64_t)v397, (uint64_t)&v398, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if ((_QWORD)v398)
    {
      if (v405 >= 1)
      {
        v334 = v402;
        if (v402)
        {
          v279 = v404;
          v280 = v404[4];
          v357 = *(unsigned __int8 *)(v403 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v374[0] = v398;
          v374[1] = v399;
          v375 = v400;
          v318 = (uint64_t)(v404 + 6);
          v322 = v401;
          v315 = v404 + 8;
          swift_retain();
          swift_retain();
          swift_retain();
          v281 = 0;
          v328 = v280;
          do
          {
            v282 = (unsigned int *)(v322 + 48 * v281);
            v351 = (unsigned int *)*v282;
            v339 = v2;
            v345 = (unint64_t *)v282[1];
            v284 = (uint64_t *)*((_QWORD *)v282 + 2);
            v283 = *((_QWORD *)v282 + 3);
            v285 = *((_QWORD *)v282 + 4);
            v286 = *((_QWORD *)v282 + 5);
            if (v357)
            {
              v287 = *(os_unfair_lock_s **)(v286 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v287);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v286 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v280);
            sub_1B1A18378(v318, (uint64_t)v431, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v288 = v279[4];
            v289 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v286 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v279[6] = ecs_stack_allocator_allocate(v288, 48 * v289, 8);
            v279[7] = v289;
            v315[1] = 0;
            v315[2] = 0;
            *v315 = 0;
            swift_release();
            v290 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v284, v283, v285, (uint64_t)v279);
            v291 = sub_1B1A12038((uint64_t)&type metadata for InverseWorldTransform, (uint64_t)&off_1E63A3318, v284, v283, v285, (uint64_t)v279);
            if ((_DWORD)v351 != (_DWORD)v345)
            {
              v292 = (char *)v345 - (char *)v351;
              v293 = v290 + ((_QWORD)v351 << 6) + 32;
              v294 = v291 + ((_QWORD)v351 << 6) + 32;
              do
              {
                *(simd_float4x4 *)(v294 - 32) = __invert_f4(*(simd_float4x4 *)(v293 - 32));
                v294 += 64;
                v293 += 64;
                --v292;
              }
              while (v292);
            }
            v2 = v339;
            sub_1B1F05D48(v279, (unsigned __int16 **)v374, (uint64_t)v431);
            sub_1B1F03804((char *)v286);
            v280 = v328;
            ecs_stack_allocator_pop_snapshot(v328);
            if ((v357 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v286 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v286 + 376));
            }
            swift_release();
            ++v281;
          }
          while (v281 != v334);
          sub_1B19ED748(v397);
        }
      }
      sub_1B19ED748(v397);
    }
    return;
  }
  v206 = *(_OWORD *)(v295 + 32);
  v386[0] = *(_OWORD *)(v295 + 16);
  v386[1] = v206;
  v387 = *(_QWORD *)(v295 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v386, 0x200000000, v394);
  sub_1B1A18378((uint64_t)v394, (uint64_t)v415, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v337 = v2;
  if (!v415[0])
    goto LABEL_218;
  v208 = v416;
  if (v416 < 1)
    goto LABEL_217;
  v209 = v415[8];
  v210 = v415[7];
  v211 = (unsigned int *)v415[5];
  v212 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v209 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                               + 8 * *(_QWORD *)thread_worker_index(v207)
                               + 8)
                   + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  ecs_stack_allocator_push_snapshot(v212);
  v213 = ecs_stack_allocator_allocate(v212, 8 * v208, 4);
  if (!v210)
    goto LABEL_216;
  v214 = v213;
  v325 = v205;
  v215 = 0;
  v342 = v213;
  v348 = &v211[12 * v210];
  v331 = (char *)v213 + 4;
  do
  {
    v216 = (unint64_t **)*((_QWORD *)v211 + 2);
    v217 = *((_QWORD *)v211 + 5);
    if (v216)
    {
      v218 = *((_QWORD *)v211 + 4);
      if (v218)
      {
        v355 = v211;
        swift_retain();
        v219 = &v331[8 * v215];
        do
        {
          v220 = *v216++;
          v214 = v220;
          v221 = swift_retain();
          if ((*(_BYTE *)(v217 + 184) & 1) != 0)
            goto LABEL_273;
          v222 = *(_DWORD *)(*(_QWORD *)(v217 + 168) + 4 * (_QWORD)v214);
          v223 = *(_DWORD *)(*(_QWORD *)(v221 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v222 + 8);
          swift_release();
          *((_DWORD *)v219 - 1) = v222;
          *(_DWORD *)v219 = v223;
          ++v215;
          v219 += 8;
          --v218;
        }
        while (v218);
LABEL_197:
        swift_release();
        v214 = v342;
        v211 = v355;
      }
    }
    else
    {
      v224 = *v211;
      v216 = (unint64_t **)v211[1];
      if ((_DWORD)v224 != (_DWORD)v216)
      {
        v355 = v211;
        swift_retain();
        v225 = &v331[8 * v215];
        do
        {
          v226 = swift_retain();
          if ((*(_BYTE *)(v217 + 184) & 1) != 0)
            goto LABEL_273;
          v214 = (unint64_t *)*(int *)(*(_QWORD *)(v217 + 168) + 4 * v224);
          v227 = (unint64_t **)(v224 + 1);
          v228 = *(_DWORD *)(*(_QWORD *)(v226 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v214 + 8);
          swift_release();
          *((_DWORD *)v225 - 1) = (_DWORD)v214;
          *(_DWORD *)v225 = v228;
          ++v215;
          v225 += 8;
          v224 = (unint64_t)v227;
        }
        while (v216 != v227);
        goto LABEL_197;
      }
    }
    v211 += 12;
  }
  while (v211 != v348);
  if (v215)
  {
    v235 = &v214[v215];
    v205 = v325;
    do
    {
      v236 = *v214++;
      v237 = sub_1B20CE5B4(v236);
      swift_retain();
      sub_1B20D4110(v236, v237, a1, a1);
      swift_release();
    }
    while (v214 != v235);
  }
  else
  {
    v205 = v325;
  }
LABEL_216:
  ecs_stack_allocator_pop_snapshot(v212);
  sub_1B19ED748(v394);
LABEL_217:
  sub_1B19ED748(v394);
LABEL_218:
  v238 = *(_OWORD *)(v295 + 112);
  v384[0] = *(_OWORD *)(v295 + 96);
  v384[1] = v238;
  v385 = *(_QWORD *)(v295 + 128);
  sub_1B1E8FCE4(a1, (uint64_t)v384, 0x200000000, v395);
  sub_1B1A18378((uint64_t)v395, (uint64_t)v413, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v413[0])
    goto LABEL_242;
  v240 = v414;
  if (v414 < 1)
  {
LABEL_241:
    sub_1B19ED748(v395);
LABEL_242:
    v2 = v337;
    v229 = (uint64_t *)(v295 + 216);
    v230 = (int *)(v295 + 224);
    v231 = (char *)(v295 + 228);
    v232 = (uint64_t *)(v295 + 232);
    v233 = (char *)(v295 + 240);
    v234 = (uint64_t *)(v295 + 248);
    goto LABEL_243;
  }
  v241 = v413[7];
  v242 = (unsigned int *)v413[5];
  v243 = (_QWORD *)thread_worker_index(v239);
  v245 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v244 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues) + 8 * *v243 + 8)
                   + 32);
  ecs_stack_allocator_push_snapshot(v245);
  v246 = ecs_stack_allocator_allocate(v245, 8 * v240, 4);
  if (!v241)
  {
LABEL_240:
    ecs_stack_allocator_pop_snapshot(v245);
    goto LABEL_241;
  }
  v214 = v246;
  v326 = v205;
  v247 = 0;
  v343 = v246;
  v349 = &v242[12 * v241];
  v332 = (char *)v246 + 4;
  while (1)
  {
    v216 = (unint64_t **)*((_QWORD *)v242 + 2);
    v248 = *((_QWORD *)v242 + 5);
    if (!v216)
      break;
    v249 = *((_QWORD *)v242 + 4);
    if (v249)
    {
      v355 = v242;
      swift_retain();
      v250 = &v332[8 * v247];
      while (1)
      {
        v251 = *v216++;
        v214 = v251;
        v252 = swift_retain();
        if ((*(_BYTE *)(v248 + 184) & 1) != 0)
          goto LABEL_273;
        v253 = *(_DWORD *)(*(_QWORD *)(v248 + 168) + 4 * (_QWORD)v214);
        v254 = *(_DWORD *)(*(_QWORD *)(v252 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v253 + 8);
        swift_release();
        *((_DWORD *)v250 - 1) = v253;
        *(_DWORD *)v250 = v254;
        ++v247;
        v250 += 8;
        if (!--v249)
          goto LABEL_222;
      }
    }
LABEL_223:
    v242 += 12;
    if (v242 == v349)
    {
      if (v247)
      {
        v260 = &v214[v247];
        v205 = v326;
        do
        {
          v261 = *v214++;
          v262 = sub_1B20CE5B4(v261);
          swift_retain();
          sub_1B20D4110(v261, v262, a1, a1);
          swift_release();
        }
        while (v214 != v260);
      }
      else
      {
        v205 = v326;
      }
      goto LABEL_240;
    }
  }
  v255 = *v242;
  v216 = (unint64_t **)v242[1];
  if ((_DWORD)v255 == (_DWORD)v216)
    goto LABEL_223;
  v355 = v242;
  swift_retain();
  v256 = &v332[8 * v247];
  while (1)
  {
    v257 = swift_retain();
    if ((*(_BYTE *)(v248 + 184) & 1) != 0)
      break;
    v214 = (unint64_t *)*(int *)(*(_QWORD *)(v248 + 168) + 4 * v255);
    v258 = (unint64_t **)(v255 + 1);
    v259 = *(_DWORD *)(*(_QWORD *)(v257 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v214 + 8);
    swift_release();
    *((_DWORD *)v256 - 1) = (_DWORD)v214;
    *(_DWORD *)v256 = v259;
    ++v247;
    v256 += 8;
    v255 = (unint64_t)v258;
    if (v216 == v258)
    {
LABEL_222:
      swift_release();
      v214 = v343;
      v242 = v355;
      goto LABEL_223;
    }
  }
LABEL_273:
  sub_1B2229688();
  __break(1u);

  v398 = v358;
  v399 = v360;
  v400 = v362;
  sub_1B1F05D48(v355, (unsigned __int16 **)&v398, (uint64_t)v432);
  sub_1B1F03804((char *)v214);
  ecs_stack_allocator_pop_snapshot(12);
  os_unfair_lock_unlock((os_unfair_lock_t)v214[43]);
  os_unfair_lock_unlock((os_unfair_lock_t)v214[47]);
  __break(1u);
}

uint64_t sub_1B20D152C(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  int v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int *v23;
  int v24;
  int v25;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  float32x4_t *v34;

  v4 = (uint64_t *)a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[2];
  v8 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v4, v5, v6, v7);
  result = sub_1B1A12038((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v4, v5, v6, v7);
  v11 = a1[6];
  v10 = a1[7];
  if (v11 != v10)
  {
    v12 = 0;
    v13 = (_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v14 = -1;
    v15 = (float32x4_t)xmmword_1B2244DB0;
    v16 = (float32x4_t)xmmword_1B2244DD0;
    v17 = (float32x4_t)xmmword_1B2244D90;
    v18 = (float32x4_t)xmmword_1B2244E20;
    do
    {
      v23 = (int *)(result + 8 * v11);
      v24 = *v23;
      v25 = v23[1];
      if (v24 != v14 || v25 != v12)
      {
        if (v24 == -1 && v25 == 0)
        {
          v12 = 0;
          v14 = -1;
          v15 = (float32x4_t)xmmword_1B2244DB0;
          v16 = (float32x4_t)xmmword_1B2244DD0;
          v17 = (float32x4_t)xmmword_1B2244D90;
          v18 = (float32x4_t)xmmword_1B2244E20;
        }
        else
        {
          if ((v24 & 0x80000000) == 0
            && v13[1] > v24
            && ((v28 = *v13 + 12 * v24, v29 = *(__int16 *)(v28 + 4), v25 == -1) || *(_DWORD *)(v28 + 8) == v25)
            && (v30 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * *(int *)(*v13 + 12 * v24) + 32),
                v31 = *(_QWORD *)(v30 + 48),
                (v32 = *(_QWORD *)(v31 + 16)) != 0))
          {
            v33 = (_QWORD *)(v31 + 56);
            while ((ValueMetadata *)*(v33 - 3) != &type metadata for WorldTransform)
            {
              v33 += 5;
              if (!--v32)
                goto LABEL_22;
            }
            v34 = (float32x4_t *)(*(_QWORD *)(v30 + 128) + *v33 + (v29 << 6));
            v15 = *v34;
            v16 = v34[1];
            v17 = v34[2];
            v18 = v34[3];
          }
          else
          {
LABEL_22:
            v15 = (float32x4_t)xmmword_1B2244DB0;
            v16 = (float32x4_t)xmmword_1B2244DD0;
            v17 = (float32x4_t)xmmword_1B2244D90;
            v18 = (float32x4_t)xmmword_1B2244E20;
          }
          v12 = v25;
          v14 = v24;
        }
      }
      v19 = v8 + (v11 << 6);
      v20 = *(float32x4_t *)(v19 + 48);
      v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)(v19 + 16))), v16, *(float32x2_t *)(v19 + 16), 1), v17, *(float32x4_t *)(v19 + 16), 2), v18, *(float32x4_t *)(v19 + 16), 3);
      v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)(v19 + 32))), v16, *(float32x2_t *)(v19 + 32), 1), v17, *(float32x4_t *)(v19 + 32), 2), v18, *(float32x4_t *)(v19 + 32), 3);
      *(float32x4_t *)v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)v19)), v16, *(float32x2_t *)v19, 1), v17, *(float32x4_t *)v19, 2), v18, *(float32x4_t *)v19, 3);
      *(float32x4_t *)(v19 + 16) = v21;
      *(float32x4_t *)(v19 + 32) = v22;
      *(float32x4_t *)(v19 + 48) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, v20.f32[0]), v16, *(float32x2_t *)v20.f32, 1), v17, v20, 2), v18, v20, 3);
      ++v11;
    }
    while (v11 != v10);
  }
  return result;
}

uint64_t type metadata accessor for HierarchySystem()
{
  return objc_opt_self();
}

uint64_t sub_1B20D1790()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

const char *sub_1B20D1798()
{
  return "HierarchySystem";
}

uint64_t type metadata accessor for SimplifiedHierarchySystem()
{
  return objc_opt_self();
}

uint64_t sub_1B20D17CC()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B20D1800();
  return v0;
}

uint64_t sub_1B20D1800()
{
  uint64_t v0;
  __int128 v1;
  uint64_t inited;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;
  _BYTE v10[40];
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v22 = qword_1ED4D09F8;
  v23 = 0;
  v24 = 2;
  v25 = 0;
  v26 = 2;
  v27 = 0;
  swift_retain();
  sub_1B19EF184((uint64_t)v8);
  swift_release();
  v1 = v8[1];
  *(_OWORD *)(v0 + 16) = v8[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v9;
  v16 = qword_1ED4D09F8;
  v17 = 0;
  v18 = 2;
  v19 = 0;
  v20 = 2;
  v21 = 0;
  swift_retain();
  sub_1B1B12804(1, 1, (uint64_t)v10);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for LastFrameWorldTransform;
  *(_QWORD *)(inited + 40) = &off_1E63AA9D8;
  sub_1B1B44110(&v11, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v10);
  v3 = v12;
  v4 = v13;
  v5 = v15;
  v6 = v14 | 4;
  *(_QWORD *)(v0 + 56) = v11;
  *(_DWORD *)(v0 + 64) = v3;
  *(_BYTE *)(v0 + 68) = v4;
  *(_QWORD *)(v0 + 72) = v6;
  *(_BYTE *)(v0 + 80) = 2;
  *(_QWORD *)(v0 + 88) = v5;
  return v0;
}

uint64_t sub_1B20D19BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

uint64_t *sub_1B20D1B1C(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  int *v19;
  int v20;
  int v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int *v44;
  int v45;
  int v46;
  BOOL v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  uint64_t *v79;
  _OWORD v80[2];
  uint64_t v81;
  _OWORD v82[2];
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _BYTE v89[72];
  ValueMetadata *v90;
  _UNKNOWN **v91;
  char v92;
  uint64_t v93[8];
  _OWORD v94[2];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _BYTE v101[40];
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(v1 + 72);
  v82[0] = *(_OWORD *)(v1 + 56);
  v82[1] = v2;
  v83 = *(_QWORD *)(v1 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v82, 0x200000000, v93);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v93, (uint64_t)v94, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v94[0])
  {
    if (v100 >= 1)
    {
      v73 = v97;
      if (v97)
      {
        v4 = v99[4];
        v76 = *(unsigned __int8 *)(v98 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v80[0] = v94[0];
        v80[1] = v94[1];
        v81 = v95;
        v70 = (uint64_t)(v99 + 6);
        v71 = v96;
        v5 = (_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v77 = v99;
        v68 = v99 + 13;
        v69 = v99 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v6 = 0;
        v7 = 0;
        v72 = v4;
        do
        {
          v74 = v7;
          v75 = v6;
          v8 = (unsigned int *)(v71 + 48 * v6);
          v10 = *v8;
          v9 = v8[1];
          v11 = *((_QWORD *)v8 + 3);
          v79 = (uint64_t *)*((_QWORD *)v8 + 2);
          v13 = *((_QWORD *)v8 + 4);
          v12 = *((_QWORD *)v8 + 5);
          if (v76)
          {
            v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v4);
          sub_1B1A18378(v70, (uint64_t)v101, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v15 = v77[4];
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v77[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v77[7] = v16;
          v69[1] = 0;
          v69[2] = 0;
          *v69 = 0;
          swift_release();
          v17 = sub_1B1A12038((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8, v79, v11, v13, (uint64_t)v77);
          sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v79, v11, v13, (uint64_t)v77);
          if (v79)
          {
            if (v13)
            {
              for (i = 0; i != v13; ++i)
              {
                v19 = (int *)(v17 + 8 * i);
                v20 = *v19;
                v21 = v19[1];
                v22 = v20 == -1 && v21 == 0;
                if (!v22
                  && (v20 & 0x80000000) == 0
                  && v5[1] > v20
                  && (v21 == -1 || *(_DWORD *)(*v5 + 12 * v20 + 8) == v21))
                {
                  v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(__int16 *)(*v5 + 12 * v20 + 6) + 32)
                                  + 16);
                  v25 = *(_QWORD *)(v24 + 128);
                  if (*(_QWORD *)(v25 + 16))
                  {
                    v26 = v79[i];
                    v27 = sub_1B1DC3AC8((uint64_t)&type metadata for LastFrameWorldTransform);
                    if ((v28 & 1) != 0
                      && *(ValueMetadata **)(*(_QWORD *)(v24 + 24)
                                           + 16 * *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v27)
                                           + 32) == &type metadata for LastFrameWorldTransform)
                    {
                      v29 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 16);
                      v30 = *(_QWORD *)(v29 + 128);
                      if (!*(_QWORD *)(v30 + 16)
                        || (v31 = sub_1B1DC3AC8((uint64_t)&type metadata for LastFrameWorldTransform), (v32 & 1) == 0)
                        || *(ValueMetadata **)(*(_QWORD *)(v29 + 24)
                                             + 16 * *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31)
                                             + 32) != &type metadata for LastFrameWorldTransform)
                      {
                        v90 = &type metadata for LastFrameWorldTransform;
                        v91 = &off_1E63AA960;
                        v92 = 0;
                        v33 = *v68;
                        if (*(_QWORD *)(*v68 + 16))
                        {
                          swift_retain();
                          swift_bridgeObjectRetain();
                          sub_1B1F09F2C(v33 + 32, (uint64_t)v89);
                          sub_1B1BE90FC((uint64_t)v89, (uint64_t)&v84);
                          sub_1B1BE90FC((uint64_t)&v90, (uint64_t)&v87);
                          __asm { BR              X9 }
                        }
                        swift_retain();
                        v34 = *(_QWORD *)(v12 + 240) - *(_QWORD *)(v12 + 232);
                        v35 = ecs_stack_allocator_allocate(v77[4], 8 * v34, 8);
                        *v35 = v26;
                        sub_1B1BE90FC((uint64_t)&v90, (uint64_t)&v84);
                        *(_QWORD *)&v87 = v35;
                        *((_QWORD *)&v87 + 1) = v34;
                        v88 = 1;
                        v36 = (_QWORD *)v77[13];
                        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                        v77[13] = v36;
                        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                        {
                          v36 = sub_1B1C631A0(0, v36[2] + 1, 1, v36);
                          *v68 = v36;
                        }
                        v39 = v36[2];
                        v38 = v36[3];
                        if (v39 >= v38 >> 1)
                        {
                          v36 = sub_1B1C631A0(v38 > 1, v39 + 1, 1, v36);
                          *v68 = v36;
                        }
                        v36[2] = v39 + 1;
                        v40 = &v36[9 * v39];
                        *((_OWORD *)v40 + 2) = v84;
                        v41 = v85;
                        v42 = v86;
                        v43 = v87;
                        v40[12] = v88;
                        *((_OWORD *)v40 + 4) = v42;
                        *((_OWORD *)v40 + 5) = v43;
                        *((_OWORD *)v40 + 3) = v41;
                        sub_1B1B68F14((uint64_t)&v90);
                        swift_release();
                      }
                    }
                  }
                }
              }
            }
          }
          else if ((_DWORD)v10 != (_DWORD)v9)
          {
            do
            {
              v44 = (int *)(v17 + 8 * v10);
              v45 = *v44;
              v46 = v44[1];
              v47 = v45 == -1 && v46 == 0;
              if (!v47
                && (v45 & 0x80000000) == 0
                && v5[1] > v45
                && (v46 == -1 || *(_DWORD *)(*v5 + 12 * v45 + 8) == v46))
              {
                v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(__int16 *)(*v5 + 12 * v45 + 6) + 32)
                                + 16);
                v50 = *(_QWORD *)(v49 + 128);
                if (*(_QWORD *)(v50 + 16))
                {
                  v51 = sub_1B1DC3AC8((uint64_t)&type metadata for LastFrameWorldTransform);
                  if ((v52 & 1) != 0
                    && *(ValueMetadata **)(*(_QWORD *)(v49 + 24)
                                         + 16 * *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v51)
                                         + 32) == &type metadata for LastFrameWorldTransform)
                  {
                    v53 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 16);
                    v54 = *(_QWORD *)(v53 + 128);
                    if (!*(_QWORD *)(v54 + 16)
                      || (v55 = sub_1B1DC3AC8((uint64_t)&type metadata for LastFrameWorldTransform), (v56 & 1) == 0)
                      || *(ValueMetadata **)(*(_QWORD *)(v53 + 24)
                                           + 16 * *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v55)
                                           + 32) != &type metadata for LastFrameWorldTransform)
                    {
                      v90 = &type metadata for LastFrameWorldTransform;
                      v91 = &off_1E63AA960;
                      v92 = 0;
                      v57 = *v68;
                      if (*(_QWORD *)(*v68 + 16))
                      {
                        swift_retain();
                        swift_bridgeObjectRetain();
                        sub_1B1F09F2C(v57 + 32, (uint64_t)v89);
                        sub_1B1BE90FC((uint64_t)v89, (uint64_t)&v84);
                        sub_1B1BE90FC((uint64_t)&v90, (uint64_t)&v87);
                        __asm { BR              X9 }
                      }
                      swift_retain();
                      v58 = *(_QWORD *)(v12 + 240) - *(_QWORD *)(v12 + 232);
                      v59 = ecs_stack_allocator_allocate(v77[4], 8 * v58, 8);
                      *v59 = v10;
                      sub_1B1BE90FC((uint64_t)&v90, (uint64_t)&v84);
                      *(_QWORD *)&v87 = v59;
                      *((_QWORD *)&v87 + 1) = v58;
                      v88 = 1;
                      v60 = (_QWORD *)v77[13];
                      v61 = swift_isUniquelyReferenced_nonNull_native();
                      v77[13] = v60;
                      if ((v61 & 1) == 0)
                      {
                        v60 = sub_1B1C631A0(0, v60[2] + 1, 1, v60);
                        *v68 = v60;
                      }
                      v63 = v60[2];
                      v62 = v60[3];
                      if (v63 >= v62 >> 1)
                      {
                        v60 = sub_1B1C631A0(v62 > 1, v63 + 1, 1, v60);
                        *v68 = v60;
                      }
                      v60[2] = v63 + 1;
                      v64 = &v60[9 * v63];
                      *((_OWORD *)v64 + 2) = v84;
                      v65 = v85;
                      v66 = v86;
                      v67 = v87;
                      v64[12] = v88;
                      *((_OWORD *)v64 + 4) = v66;
                      *((_OWORD *)v64 + 5) = v67;
                      *((_OWORD *)v64 + 3) = v65;
                      sub_1B1B68F14((uint64_t)&v90);
                      swift_release();
                    }
                  }
                }
              }
              ++v10;
            }
            while (v10 != v9);
          }
          v7 = v74;
          sub_1B1F05D48(v77, (unsigned __int16 **)v80, (uint64_t)v101);
          sub_1B1F03804((char *)v12);
          v4 = v72;
          ecs_stack_allocator_pop_snapshot(v72);
          if ((v76 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          v6 = v75 + 1;
        }
        while (v75 + 1 != v73);
        sub_1B19ED748(v93);
      }
    }
    return sub_1B19ED748(v93);
  }
  return result;
}

uint64_t *sub_1B20D27A4(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34[8];
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  _BYTE v44[40];
  _OWORD v45[2];
  uint64_t v46;

  sub_1B20D1B1C(a1);
  v3 = *(_OWORD *)(v1 + 32);
  v45[0] = *(_OWORD *)(v1 + 16);
  v45[1] = v3;
  v46 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v45, 0x200000000, v34);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v34, (uint64_t)v35, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v35[0])
  {
    if (v41 >= 1)
    {
      v29 = v38;
      if (v38)
      {
        v5 = v40;
        v33 = v40[4];
        v32 = *(unsigned __int8 *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v42[0] = v35[0];
        v42[1] = v35[1];
        v43 = v36;
        v27 = (uint64_t)(v40 + 6);
        v28 = v37;
        v26 = v40 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v6 = 0;
        v7 = 0;
        do
        {
          v8 = (unsigned int *)(v28 + 48 * v6);
          v9 = *v8;
          v10 = (uint64_t *)*((_QWORD *)v8 + 2);
          v11 = *((_QWORD *)v8 + 3);
          v13 = *((_QWORD *)v8 + 4);
          v12 = *((_QWORD *)v8 + 5);
          v30 = v7;
          v31 = v8[1];
          if (v32)
          {
            v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v33);
          sub_1B1A18378(v27, (uint64_t)v44, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v15 = v5[4];
          v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v5[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v5[7] = v16;
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          swift_release();
          v17 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v10, v11, v13, (uint64_t)v5);
          v18 = sub_1B1A12038((uint64_t)&type metadata for LastFrameWorldTransform, (uint64_t)&off_1E63AA960, v10, v11, v13, (uint64_t)v5);
          if ((_DWORD)v9 == (_DWORD)v31)
          {
            v7 = v30;
          }
          else
          {
            v19 = v31 - v9;
            v20 = (__int128 *)(v17 + (v9 << 6) + 32);
            v21 = (_OWORD *)(v18 + (v9 << 6) + 32);
            v7 = v30;
            do
            {
              v22 = *(v20 - 2);
              v23 = *(v20 - 1);
              v24 = *v20;
              v25 = v20[1];
              v20 += 4;
              *(v21 - 2) = v22;
              *(v21 - 1) = v23;
              *v21 = v24;
              v21[1] = v25;
              v21 += 4;
              --v19;
            }
            while (v19);
          }
          sub_1B1F05D48(v5, (unsigned __int16 **)v42, (uint64_t)v44);
          sub_1B1F03804((char *)v12);
          ecs_stack_allocator_pop_snapshot(v33);
          if ((v32 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          ++v6;
        }
        while (v6 != v29);
        sub_1B19ED748(v34);
      }
    }
    return sub_1B19ED748(v34);
  }
  return result;
}

uint64_t type metadata accessor for LastFrameWorldTransformSystem()
{
  return objc_opt_self();
}

const char *sub_1B20D2AC8()
{
  return "LastFrameWorldTransform";
}

uint64_t sub_1B20D2ADC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t type metadata accessor for LastFrameWorldTransformSystem_vfx1()
{
  return objc_opt_self();
}

uint64_t sub_1B20D2B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B20D2BD4(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  int v14;
  int v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20[8];
  _QWORD v21[7];
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v2 = *(_OWORD *)(v1 + 32);
  v24[0] = *(_OWORD *)(v1 + 16);
  v24[1] = v2;
  v25 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v24, 0x200000000, v20);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v20, (uint64_t)v21, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v21[0])
  {
    if (v23 >= 1)
    {
      v4 = v22;
      if (v22)
      {
        v5 = v21[5];
        swift_retain();
        swift_retain();
        swift_retain();
        v6 = 48 * v4;
        v7 = (uint64_t *)(v5 + 40);
        do
        {
          v12 = *v7;
          v13 = *(os_unfair_lock_s **)(*v7 + 376);
          swift_retain();
          os_unfair_lock_lock(v13);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          v14 = *(_DWORD *)(v12 + 24);
          swift_retain();
          v19 = 0;
          memset(v18, 0, sizeof(v18));
          v17 = 0;
          memset(v16, 0, sizeof(v16));
          v15 = sub_1B1DA4ED8(v14, (uint64_t)&type metadata for Fixed, (uint64_t)&off_1E63BA4D8, 0, 0, (uint64_t)v18, (uint64_t)v16);
          swift_release();
          sub_1B1A04628((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          sub_1B1A04628((uint64_t)v18, (uint64_t (*)(_QWORD))sub_1B19FFFFC);
          if (sub_1B1A10B20(v15))
          {
            sub_1B1A10BB0(v15);
          }
          else
          {
            v8 = *(_QWORD *)(v12 + 232);
            v9 = *(_QWORD *)(v12 + 240);
            v10 = *(unsigned __int8 *)(v12 + 120);
            v11 = *(unsigned int *)(v12 + 28);
            LOBYTE(v18[0]) = *(_BYTE *)(v12 + 32);
            sub_1B1FD8C68(v8, v9, v15, v10, v11 | ((unint64_t)LOBYTE(v18[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          swift_release();
          v7 += 6;
          v6 -= 48;
        }
        while (v6);
        sub_1B19ED748(v20);
      }
    }
    return sub_1B19ED748(v20);
  }
  return result;
}

uint64_t type metadata accessor for StaticToFixedSystem()
{
  return objc_opt_self();
}

const char *sub_1B20D2E10()
{
  return "StaticToFixed";
}

uint64_t sub_1B20D2E28(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t i;
  uint64_t v52;
  int v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1B22299E8();
  if (result >= v3)
  {
    if (v3)
      return sub_1B20D3570(0, v3, 1, v2);
    return result;
  }
  v105 = result;
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
    result = sub_1B222967C();
    __break(1u);
    return result;
  }
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
      goto LABEL_99;
    }
    v103 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1B2228B0C();
    *(_QWORD *)(v7 + 16) = v6;
    v103 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v102 = v2;
  v10 = *v2;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v104 = v3;
  while (2)
  {
    v13 = v9 + 1;
    if (v9 + 1 < v3)
    {
      v14 = *(_QWORD *)(v10 + 48 * v13 + 40);
      v15 = *(_QWORD *)(v14 + 40);
      v16 = *(_QWORD *)(v15 + 112);
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        v18 = *(_QWORD *)(v15 + 96);
        v19 = (_QWORD *)(v16 + 56);
        while ((ValueMetadata *)*(v19 - 3) != &type metadata for Depth)
        {
          v19 += 5;
          if (!--v17)
            goto LABEL_22;
        }
        v17 = *(_QWORD *)(v18 + *v19);
      }
LABEL_22:
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 48 * v9 + 40) + 40);
      v21 = *(_QWORD *)(v20 + 112);
      v22 = *(_QWORD *)(v21 + 16);
      if (v22)
      {
        v23 = *(_QWORD *)(v20 + 96);
        v24 = (_QWORD *)(v21 + 56);
        while ((ValueMetadata *)*(v24 - 3) != &type metadata for Depth)
        {
          v24 += 5;
          if (!--v22)
            goto LABEL_28;
        }
        v22 = *(_QWORD *)(v23 + *v24);
      }
LABEL_28:
      v13 = v9 + 2;
      if (v9 + 2 < v3)
      {
        do
        {
          v25 = *(_QWORD *)(v10 + 48 * v13 + 40);
          v26 = *(_QWORD *)(v25 + 40);
          v27 = *(_QWORD *)(v26 + 112);
          v28 = *(_QWORD *)(v27 + 16);
          if (v28)
          {
            v29 = *(_QWORD *)(v26 + 96);
            v30 = (_QWORD *)(v27 + 56);
            while ((ValueMetadata *)*(v30 - 3) != &type metadata for Depth)
            {
              v30 += 5;
              if (!--v28)
                goto LABEL_38;
            }
            v28 = *(_QWORD *)(v29 + *v30);
          }
LABEL_38:
          v31 = *(_QWORD *)(v14 + 40);
          v32 = *(_QWORD *)(v31 + 112);
          v33 = *(_QWORD *)(v32 + 16);
          if (v33)
          {
            v34 = *(_QWORD *)(v31 + 96);
            v35 = (_QWORD *)(v32 + 56);
            while ((ValueMetadata *)*(v35 - 3) != &type metadata for Depth)
            {
              v35 += 5;
              if (!--v33)
                goto LABEL_30;
            }
            if (v17 < v22 == v28 >= *(_QWORD *)(v34 + *v35))
              goto LABEL_46;
          }
          else
          {
LABEL_30:
            if (v17 < v22 == v28 >= 0)
              goto LABEL_46;
          }
          ++v13;
          v14 = v25;
        }
        while (v13 != v3);
        v13 = v3;
      }
LABEL_46:
      if (v17 < v22 && v9 < v13)
      {
        v36 = 48 * v13;
        v37 = 48 * v9;
        v38 = v13;
        v39 = v9;
        do
        {
          if (v39 != --v38)
          {
            v40 = (_OWORD *)(v10 + v37);
            v41 = *(_DWORD *)(v10 + v37 + 8);
            v42 = v10 + v36;
            v43 = *(_QWORD *)(v10 + v37 + 32);
            v44 = *(_QWORD *)(v10 + v37 + 40);
            v45 = *(_OWORD *)(v10 + v37 + 16);
            v46 = *(_QWORD *)(v10 + v37);
            v48 = *(_OWORD *)(v10 + v36 - 32);
            v47 = *(_OWORD *)(v10 + v36 - 16);
            *v40 = *(_OWORD *)(v10 + v36 - 48);
            v40[1] = v48;
            v40[2] = v47;
            *(_QWORD *)(v42 - 48) = v46;
            *(_DWORD *)(v42 - 40) = v41;
            *(_OWORD *)(v42 - 32) = v45;
            *(_QWORD *)(v42 - 16) = v43;
            *(_QWORD *)(v42 - 8) = v44;
          }
          ++v39;
          v36 -= 48;
          v37 += 48;
        }
        while (v39 < v38);
      }
    }
    if (v13 >= v3 || v13 - v9 >= v105)
      goto LABEL_76;
    v49 = v9 + v105;
    if (v9 + v105 >= v3)
      v49 = v3;
    if (v13 == v49)
      goto LABEL_76;
    while (2)
    {
      v50 = *(_QWORD *)(v10 + 48 * v13 + 40);
      for (i = v13; i != v9; --i)
      {
        v59 = *(_QWORD *)(v50 + 40);
        v60 = *(_QWORD *)(v59 + 112);
        v61 = *(_QWORD *)(v60 + 16);
        if (v61)
        {
          v62 = *(_QWORD *)(v59 + 96);
          v63 = (_QWORD *)(v60 + 56);
          while ((ValueMetadata *)*(v63 - 3) != &type metadata for Depth)
          {
            v63 += 5;
            if (!--v61)
              goto LABEL_66;
          }
          v64 = *(_QWORD *)(v62 + *v63);
        }
        else
        {
LABEL_66:
          v64 = 0;
        }
        v65 = v10 + 48 * i;
        v66 = *(_QWORD *)(*(_QWORD *)(v65 - 8) + 40);
        v67 = *(_QWORD *)(v66 + 112);
        v68 = *(_QWORD *)(v67 + 16);
        if (!v68)
        {
LABEL_60:
          if ((v64 & 0x8000000000000000) == 0)
            break;
          goto LABEL_61;
        }
        v69 = *(_QWORD *)(v66 + 96);
        v70 = (_QWORD *)(v67 + 56);
        while ((ValueMetadata *)*(v70 - 3) != &type metadata for Depth)
        {
          v70 += 5;
          if (!--v68)
            goto LABEL_60;
        }
        if (v64 >= *(_QWORD *)(v69 + *v70))
          break;
LABEL_61:
        v52 = v10 + 48 * i;
        v53 = *(_DWORD *)(v52 + 8);
        v54 = *(_QWORD *)(v52 + 32);
        v55 = *(_OWORD *)(v52 + 16);
        v56 = *(_QWORD *)v65;
        v57 = v10 + 48 * (i - 1);
        v58 = *(_OWORD *)(v65 - 32);
        *(_OWORD *)v65 = *(_OWORD *)(v65 - 48);
        *(_OWORD *)(v65 + 16) = v58;
        *(_OWORD *)(v65 + 32) = *(_OWORD *)(v65 - 16);
        *(_QWORD *)(v65 - 48) = v56;
        *(_DWORD *)(v57 + 8) = v53;
        *(_OWORD *)(v57 + 16) = v55;
        *(_QWORD *)(v57 + 32) = v54;
        *(_QWORD *)(v65 - 8) = v50;
      }
      if (++v13 != v49)
        continue;
      break;
    }
    v13 = v49;
LABEL_76:
    v106 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1B216CC74(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v72 = *((_QWORD *)v11 + 2);
    v71 = *((_QWORD *)v11 + 3);
    v12 = v72 + 1;
    if (v72 >= v71 >> 1)
      v11 = sub_1B216CC74(v71 > 1, v72 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v73 = v11 + 32;
    v74 = &v11[16 * v72 + 32];
    *(_QWORD *)v74 = v9;
    *((_QWORD *)v74 + 1) = v13;
    if (v72)
    {
      while (2)
      {
        v75 = v12 - 1;
        if (v12 >= 4)
        {
          v80 = &v73[16 * v12];
          v81 = *((_QWORD *)v80 - 7) - *((_QWORD *)v80 - 8);
          v78 = *((_QWORD *)v80 - 5) - *((_QWORD *)v80 - 6);
          v79 = v12 - 2;
          v82 = &v73[16 * v12 - 32];
          v76 = *(_QWORD *)v82;
          v77 = *((_QWORD *)v82 + 1);
          if (v78 - v76 + v77 < v81)
          {
LABEL_86:
            v83 = v77 - v76;
            v84 = *(_QWORD *)&v73[16 * v75 + 8] - *(_QWORD *)&v73[16 * v75];
            if (v83 + v84 < v78)
              goto LABEL_89;
            v85 = v78 < v84;
          }
          else
          {
            v85 = v78 < *(_QWORD *)&v73[16 * v75 + 8] - *(_QWORD *)&v73[16 * v75];
          }
          if (v85)
            v75 = v79;
        }
        else
        {
          if (v12 == 3)
          {
            v76 = *((_QWORD *)v11 + 6);
            v77 = *((_QWORD *)v11 + 7);
            v78 = *((_QWORD *)v11 + 5) - *((_QWORD *)v11 + 4);
            v79 = 1;
            goto LABEL_86;
          }
          v83 = *(_QWORD *)&v73[16 * v12 - 24] - *(_QWORD *)&v73[16 * v12 - 32];
          v84 = *(_QWORD *)&v73[16 * v75 + 8] - *(_QWORD *)&v73[16 * v75];
LABEL_89:
          if (v84 < v83)
            goto LABEL_14;
        }
        v86 = v11;
        v87 = &v73[16 * v75 - 16];
        v88 = *(_QWORD *)v87;
        v89 = v73;
        v90 = &v73[16 * v75];
        v91 = *((_QWORD *)v90 + 1);
        sub_1B20D3694((char *)(v10 + 48 * *(_QWORD *)v87), (char *)(v10 + 48 * *(_QWORD *)v90), (char *)(v10 + 48 * v91), __dst);
        if (v1)
          goto LABEL_105;
        *(_QWORD *)v87 = v88;
        *((_QWORD *)v87 + 1) = v91;
        v11 = v86;
        v92 = *((_QWORD *)v86 + 2);
        v12 = v92 - 1;
        memmove(v90, v90 + 16, 16 * (v92 - 1 - v75));
        *((_QWORD *)v86 + 2) = v92 - 1;
        v73 = v89;
        if (v92 <= 2)
          goto LABEL_14;
        continue;
      }
    }
    v12 = 1;
LABEL_14:
    v3 = v104;
    v9 = v106;
    if (v106 < v104)
      continue;
    break;
  }
  v2 = v102;
  v8 = v103;
LABEL_99:
  v103 = v8;
  if (v12 >= 2)
  {
    v93 = *v2;
    do
    {
      v94 = v11 + 32;
      v95 = (uint64_t)v11;
      v96 = *(_QWORD *)&v11[16 * v12];
      v97 = &v94[16 * v12 - 16];
      v98 = *((_QWORD *)v97 + 1);
      sub_1B20D3694((char *)(v93 + 48 * v96), (char *)(v93 + 48 * *(_QWORD *)v97), (char *)(v93 + 48 * v98), __dst);
      if (v1)
        break;
      v99 = (char *)v95;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v99 = sub_1B216D510(v95);
      v100 = &v99[16 * v12];
      *(_QWORD *)v100 = v96;
      *((_QWORD *)v100 + 1) = v98;
      v11 = v99;
      v101 = *((_QWORD *)v99 + 2);
      memmove(&v99[16 * v12 + 16], &v99[16 * v12 + 32], 16 * (v101 - v12));
      *((_QWORD *)v99 + 2) = v101 - 1;
      v12 = v101 - 1;
    }
    while (v101 > 2);
  }
LABEL_105:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v103 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20D3570(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  if (a3 != a2)
  {
    v4 = *a4;
    do
    {
      v5 = *(_QWORD *)(v4 + 48 * a3 + 40);
      for (i = a3; i != result; --i)
      {
        v14 = *(_QWORD *)(v5 + 40);
        v15 = *(_QWORD *)(v14 + 112);
        v16 = *(_QWORD *)(v15 + 16);
        if (v16)
        {
          v17 = *(_QWORD *)(v14 + 96);
          v18 = (_QWORD *)(v15 + 56);
          while ((ValueMetadata *)*(v18 - 3) != &type metadata for Depth)
          {
            v18 += 5;
            if (!--v16)
              goto LABEL_12;
          }
          v19 = *(_QWORD *)(v17 + *v18);
        }
        else
        {
LABEL_12:
          v19 = 0;
        }
        v20 = (uint64_t *)(v4 + 48 * i);
        v21 = *(_QWORD *)(*(v20 - 1) + 40);
        v22 = *(_QWORD *)(v21 + 112);
        v23 = *(_QWORD *)(v22 + 16);
        if (!v23)
        {
LABEL_6:
          if ((v19 & 0x8000000000000000) == 0)
            break;
          goto LABEL_7;
        }
        v24 = *(_QWORD *)(v21 + 96);
        v25 = (_QWORD *)(v22 + 56);
        while ((ValueMetadata *)*(v25 - 3) != &type metadata for Depth)
        {
          v25 += 5;
          if (!--v23)
            goto LABEL_6;
        }
        if (v19 >= *(_QWORD *)(v24 + *v25))
          break;
LABEL_7:
        v7 = v4 + 48 * i;
        v8 = *(_DWORD *)(v7 + 8);
        v9 = *(_QWORD *)(v7 + 32);
        v10 = *(_OWORD *)(v7 + 16);
        v11 = *v20;
        v12 = v4 + 48 * (i - 1);
        v13 = *((_OWORD *)v20 - 2);
        *(_OWORD *)v20 = *((_OWORD *)v20 - 3);
        *((_OWORD *)v20 + 1) = v13;
        *((_OWORD *)v20 + 2) = *((_OWORD *)v20 - 1);
        *(v20 - 6) = v11;
        *(_DWORD *)(v12 + 8) = v8;
        *(_OWORD *)(v12 + 16) = v10;
        *(_QWORD *)(v12 + 32) = v9;
        *(v20 - 1) = v5;
      }
      ++a3;
    }
    while (a3 != a2);
  }
  return result;
}

uint64_t sub_1B20D3694(char *__src, char *a2, char *a3, char *__dst)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  uint64_t result;
  char *v47;
  const void *v48;
  char *v49;

  v4 = __dst;
  v5 = a3;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - a2;
  v11 = (a3 - a2) / 48;
  v49 = __src;
  v48 = __dst;
  if (v9 >= v11)
  {
    if (v10 < -47)
      goto LABEL_62;
    if (__dst != a2 || &a2[48 * v11] <= __dst)
      memmove(__dst, a2, 48 * v11);
    v28 = &v4[48 * v11];
    v47 = v28;
    v49 = v6;
    if (v7 >= v6 || v10 < 48)
    {
LABEL_61:
      sub_1B216D194((void **)&v49, &v48, &v47);
      return 1;
    }
    while (1)
    {
      v29 = *(_QWORD *)(*((_QWORD *)v28 - 1) + 40);
      v30 = *(_QWORD *)(v29 + 112);
      v31 = *(_QWORD *)(v30 + 16);
      if (v31)
      {
        v32 = *(_QWORD *)(v29 + 96);
        v33 = (_QWORD *)(v30 + 56);
        while ((ValueMetadata *)*(v33 - 3) != &type metadata for Depth)
        {
          v33 += 5;
          if (!--v31)
            goto LABEL_42;
        }
        v34 = *(_QWORD *)(v32 + *v33);
      }
      else
      {
LABEL_42:
        v34 = 0;
      }
      v35 = v5 - 48;
      v36 = *(_QWORD *)(*((_QWORD *)v6 - 1) + 40);
      v37 = *(_QWORD *)(v36 + 112);
      v38 = *(_QWORD *)(v37 + 16);
      if (v38)
      {
        v39 = *(_QWORD *)(v36 + 96);
        v40 = (_QWORD *)(v37 + 56);
        while ((ValueMetadata *)*(v40 - 3) != &type metadata for Depth)
        {
          v40 += 5;
          if (!--v38)
            goto LABEL_48;
        }
        if (v34 >= *(_QWORD *)(v39 + *v40))
        {
LABEL_49:
          v47 = v28 - 48;
          if (v5 < v28 || v35 >= v28 || v5 != v28)
          {
            v41 = *((_OWORD *)v28 - 3);
            v42 = *((_OWORD *)v28 - 1);
            *((_OWORD *)v5 - 2) = *((_OWORD *)v28 - 2);
            *((_OWORD *)v5 - 1) = v42;
            *(_OWORD *)v35 = v41;
          }
          v43 = v6;
          v28 -= 48;
          if (v6 <= v7)
            goto LABEL_61;
          goto LABEL_60;
        }
      }
      else
      {
LABEL_48:
        if ((v34 & 0x8000000000000000) == 0)
          goto LABEL_49;
      }
      v43 = v6 - 48;
      if (v5 != v6 || v35 >= v6)
      {
        v44 = *(_OWORD *)v43;
        v45 = *((_OWORD *)v6 - 1);
        *((_OWORD *)v5 - 2) = *((_OWORD *)v6 - 2);
        *((_OWORD *)v5 - 1) = v45;
        *(_OWORD *)v35 = v44;
      }
      v49 = v6 - 48;
      if (v43 <= v7)
        goto LABEL_61;
LABEL_60:
      v6 = v43;
      v5 -= 48;
      if (v28 <= v4)
        goto LABEL_61;
    }
  }
  if (v8 >= -47)
  {
    if (__dst != __src || &__src[48 * v9] <= __dst)
      memmove(__dst, __src, 48 * v9);
    v12 = &v4[48 * v9];
    v47 = v12;
    if (v6 < v5 && v8 >= 48)
    {
      v13 = v4;
      while (1)
      {
        v14 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 40);
        v15 = *(_QWORD *)(v14 + 112);
        v16 = *(_QWORD *)(v15 + 16);
        if (v16)
        {
          v17 = *(_QWORD *)(v14 + 96);
          v18 = (_QWORD *)(v15 + 56);
          while ((ValueMetadata *)*(v18 - 3) != &type metadata for Depth)
          {
            v18 += 5;
            if (!--v16)
              goto LABEL_15;
          }
          v16 = *(_QWORD *)(v17 + *v18);
        }
LABEL_15:
        v19 = *(_QWORD *)(*((_QWORD *)v13 + 5) + 40);
        v20 = *(_QWORD *)(v19 + 112);
        v21 = *(_QWORD *)(v20 + 16);
        if (v21)
        {
          v22 = *(_QWORD *)(v19 + 96);
          v23 = (_QWORD *)(v20 + 56);
          while ((ValueMetadata *)*(v23 - 3) != &type metadata for Depth)
          {
            v23 += 5;
            if (!--v21)
              goto LABEL_19;
          }
          if (v16 < *(_QWORD *)(v22 + *v23))
          {
LABEL_24:
            v25 = v6 + 48;
            v24 = v6;
            if (v7 == v6 && v7 < v25)
              goto LABEL_29;
            goto LABEL_28;
          }
        }
        else
        {
LABEL_19:
          if (v16 < 0)
            goto LABEL_24;
        }
        v4 = v13 + 48;
        v24 = v13;
        v25 = v6;
        if (v7 == v13)
        {
          v13 += 48;
          if (v7 < v4)
            goto LABEL_29;
        }
        else
        {
          v13 += 48;
        }
LABEL_28:
        v26 = *(_OWORD *)v24;
        v27 = *((_OWORD *)v24 + 2);
        *((_OWORD *)v7 + 1) = *((_OWORD *)v24 + 1);
        *((_OWORD *)v7 + 2) = v27;
        *(_OWORD *)v7 = v26;
LABEL_29:
        v7 += 48;
        if (v13 < v12)
        {
          v6 = v25;
          if (v25 < v5)
            continue;
        }
        v48 = v4;
        v49 = v7;
        goto LABEL_61;
      }
    }
    goto LABEL_61;
  }
LABEL_62:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B20D3A50()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  _BYTE v4[40];
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  type metadata accessor for StaticToFixedSystem();
  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v7 = qword_1ED4D09F8;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1B6CB0C((uint64_t)v4);
  swift_release();
  sub_1B1BBF3BC(0, (unint64_t *)&qword_1ED4BAE50, (unint64_t *)&qword_1ED4BA1A0, (unint64_t *)&qword_1ED4BA190);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Fixed;
  *(_QWORD *)(inited + 40) = &off_1E63BA508;
  sub_1B1B44110(v5, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v4);
  v2 = v5[1];
  *(_OWORD *)(v0 + 16) = v5[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v6;
  return v0;
}

uint64_t sub_1B20D3BA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t *v13;
  __int128 *v14;
  float32x4_t *v15;
  uint64_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  __int128 v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  uint64_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  __int128 *v48;
  float32x4_t *v49;
  _OWORD *v50;
  int8x16_t v51;
  __int128 v52;
  __int128 v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  unint64_t v57;
  __int128 v58;
  float32x4_t *v59;
  _OWORD *v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  unint64_t v65;
  __int128 v66;
  float32x4_t v67;
  float32x4_t *v68;
  __int128 *v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t v72;
  __int128 v73;
  float32x4_t v74;
  float32x4_t v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t *v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  __int128 *v91;
  _OWORD *v92;
  __int128 v93;
  _OWORD *v94;

  v2 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, *(uint64_t **)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 16));
  v3 = sub_1B1B47C08();
  v5 = v4;
  v6 = sub_1B1B47EA8();
  v8 = v7;
  result = sub_1B1B47B98();
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56) - v11;
  if ((v5 & 1) != 0)
  {
    if ((v8 & 1) != 0)
    {
      if ((v10 & 1) != 0)
      {
        if (v12)
        {
          v94 = (_OWORD *)(v2 + (v11 << 6) + 32);
          do
          {
            *(v94 - 2) = xmmword_1B2244DB0;
            *(v94 - 1) = xmmword_1B2244DD0;
            *v94 = xmmword_1B2244D90;
            v94[1] = xmmword_1B2244E20;
            v94 += 4;
            --v12;
          }
          while (v12);
        }
      }
      else if (v12)
      {
        v59 = (float32x4_t *)(result + 16 * v11);
        v60 = (_OWORD *)(v2 + (v11 << 6) + 32);
        v61.i64[0] = 0x8000000080000000;
        v61.i64[1] = 0x8000000080000000;
        do
        {
          v62 = *v59++;
          v63 = vabsq_f32(v62);
          v63.i32[3] = 0;
          v64 = vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v63, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v62, v61));
          LODWORD(v65) = 0;
          HIDWORD(v65) = v64.i32[1];
          *(_QWORD *)&v66 = 0;
          *((_QWORD *)&v66 + 1) = v64.u32[2];
          *(v60 - 2) = v64.u32[0];
          *(v60 - 1) = v65;
          *v60 = v66;
          v60[1] = xmmword_1B2244E20;
          v60 += 4;
          --v12;
        }
        while (v12);
      }
    }
    else if ((v10 & 1) != 0)
    {
      if (v12)
      {
        v80.i64[0] = 0x4000000040000000;
        v80.i64[1] = 0x4000000040000000;
        v81 = (float32x4_t *)(v6 + 16 * v11);
        v82 = v2 + (v11 << 6) + 32;
        do
        {
          v83 = *v81++;
          v84 = v83;
          v85 = vmulq_f32(v84, v84);
          v86 = vmulq_laneq_f32(v84, v84, 3);
          v87 = vmulq_lane_f32(v84, *(float32x2_t *)v84.f32, 1).f32[0];
          v85.f32[0] = 0.5 - v85.f32[0];
          *(float32x2_t *)v84.f32 = vmul_laneq_f32(*(float32x2_t *)v84.f32, v84, 2);
          v88.i32[3] = 0;
          v88.f32[0] = (float)(0.5 - v85.f32[1]) - v85.f32[2];
          v88.f32[1] = v87 + v86.f32[2];
          v89.i32[3] = 0;
          v89.f32[0] = v87 - v86.f32[2];
          v88.f32[2] = v84.f32[0] - v86.f32[1];
          v89.f32[1] = v85.f32[0] - v85.f32[2];
          v89.f32[2] = v84.f32[1] + v86.f32[0];
          *(int32x2_t *)v86.f32 = vrev64_s32(*(int32x2_t *)v86.f32);
          v90.i32[0] = vadd_f32(*(float32x2_t *)v84.f32, *(float32x2_t *)v86.f32).u32[0];
          v90.i32[1] = vsub_f32(*(float32x2_t *)&v84, *(float32x2_t *)&v86).i32[1];
          v90.i64[1] = COERCE_UNSIGNED_INT(v85.f32[0] - v85.f32[1]);
          *(float32x4_t *)(v82 - 32) = vmulq_f32(v80, v88);
          *(float32x4_t *)(v82 - 16) = vmulq_f32(v80, v89);
          *(float32x4_t *)v82 = vmulq_f32(v80, v90);
          *(_OWORD *)(v82 + 16) = xmmword_1B2244E20;
          v82 += 64;
          --v12;
        }
        while (v12);
      }
    }
    else if (v12)
    {
      v32 = (float32x4_t *)(v6 + 16 * v11);
      v33 = (float32x4_t *)(result + 16 * v11);
      v34 = v2 + (v11 << 6) + 32;
      v35.i64[0] = 0x8000000080000000;
      v35.i64[1] = 0x8000000080000000;
      do
      {
        v36 = *v32++;
        v37 = v36;
        v38 = *v33++;
        v39 = vabsq_f32(v38);
        v39.i32[3] = 0;
        v40 = vmulq_f32(v37, v37);
        v41 = vmulq_laneq_f32(v37, v37, 3);
        v42 = vmulq_lane_f32(v37, *(float32x2_t *)v37.f32, 1).f32[0];
        v43 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v39, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v38, v35));
        v40.f32[0] = 0.5 - v40.f32[0];
        *(float32x2_t *)v37.f32 = vmul_laneq_f32(*(float32x2_t *)v37.f32, v37, 2);
        v44 = vaddq_f32(v43, v43);
        v45.i32[3] = 0;
        v45.f32[0] = (float)(0.5 - v40.f32[1]) - v40.f32[2];
        v45.f32[1] = v42 + v41.f32[2];
        v46.i32[3] = 0;
        v46.f32[0] = v42 - v41.f32[2];
        v45.f32[2] = v37.f32[0] - v41.f32[1];
        v46.f32[1] = v40.f32[0] - v40.f32[2];
        v46.f32[2] = v37.f32[1] + v41.f32[0];
        *(int32x2_t *)v41.f32 = vrev64_s32(*(int32x2_t *)v41.f32);
        v47.i32[0] = vadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v41.f32).u32[0];
        v47.i32[1] = vsub_f32(*(float32x2_t *)&v37, *(float32x2_t *)&v41).i32[1];
        v47.i64[1] = COERCE_UNSIGNED_INT(v40.f32[0] - v40.f32[1]);
        *(float32x4_t *)(v34 - 32) = vmulq_n_f32(v45, v44.f32[0]);
        *(float32x4_t *)(v34 - 16) = vmulq_lane_f32(v46, *(float32x2_t *)v44.f32, 1);
        *(float32x4_t *)v34 = vmulq_laneq_f32(v47, v44, 2);
        *(_OWORD *)(v34 + 16) = xmmword_1B2244E20;
        v34 += 64;
        --v12;
      }
      while (v12);
    }
  }
  else if ((v8 & 1) != 0)
  {
    if ((v10 & 1) != 0)
    {
      if (v12)
      {
        v91 = (__int128 *)(v3 + 16 * v11);
        v92 = (_OWORD *)(v2 + (v11 << 6) + 32);
        do
        {
          v93 = *v91++;
          *(v92 - 2) = xmmword_1B2244DB0;
          *(v92 - 1) = xmmword_1B2244DD0;
          *v92 = xmmword_1B2244D90;
          v92[1] = v93;
          v92 += 4;
          --v12;
        }
        while (v12);
      }
    }
    else if (v12)
    {
      v48 = (__int128 *)(v3 + 16 * v11);
      v49 = (float32x4_t *)(result + 16 * v11);
      v50 = (_OWORD *)(v2 + (v11 << 6) + 32);
      v51.i64[0] = 0x8000000080000000;
      v51.i64[1] = 0x8000000080000000;
      do
      {
        v52 = *v48++;
        v53 = v52;
        v54 = *v49++;
        v55 = vabsq_f32(v54);
        v55.i32[3] = 0;
        v56 = vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v55, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v54, v51));
        LODWORD(v57) = 0;
        HIDWORD(v57) = v56.i32[1];
        *(_QWORD *)&v58 = 0;
        *((_QWORD *)&v58 + 1) = v56.u32[2];
        *(v50 - 2) = v56.u32[0];
        *(v50 - 1) = v57;
        *v50 = v58;
        v50[1] = v53;
        v50 += 4;
        --v12;
      }
      while (v12);
    }
  }
  else if ((v10 & 1) != 0)
  {
    if (v12)
    {
      v67.i64[0] = 0x4000000040000000;
      v67.i64[1] = 0x4000000040000000;
      v68 = (float32x4_t *)(v6 + 16 * v11);
      v69 = (__int128 *)(v3 + 16 * v11);
      v70 = v2 + (v11 << 6) + 32;
      do
      {
        v71 = *v68++;
        v72 = v71;
        v73 = *v69++;
        v74 = vmulq_f32(v72, v72);
        v75 = vmulq_laneq_f32(v72, v72, 3);
        v76 = vmulq_lane_f32(v72, *(float32x2_t *)v72.f32, 1).f32[0];
        v74.f32[0] = 0.5 - v74.f32[0];
        *(float32x2_t *)v72.f32 = vmul_laneq_f32(*(float32x2_t *)v72.f32, v72, 2);
        v77.i32[3] = 0;
        v77.f32[0] = (float)(0.5 - v74.f32[1]) - v74.f32[2];
        v77.f32[1] = v76 + v75.f32[2];
        v78.i32[3] = 0;
        v78.f32[0] = v76 - v75.f32[2];
        v77.f32[2] = v72.f32[0] - v75.f32[1];
        v78.f32[1] = v74.f32[0] - v74.f32[2];
        v78.f32[2] = v72.f32[1] + v75.f32[0];
        *(int32x2_t *)v75.f32 = vrev64_s32(*(int32x2_t *)v75.f32);
        v79.i32[0] = vadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v75.f32).u32[0];
        v79.i32[1] = vsub_f32(*(float32x2_t *)&v72, *(float32x2_t *)&v75).i32[1];
        v79.i64[1] = COERCE_UNSIGNED_INT(v74.f32[0] - v74.f32[1]);
        *(float32x4_t *)(v70 - 32) = vmulq_f32(v77, v67);
        *(float32x4_t *)(v70 - 16) = vmulq_f32(v78, v67);
        *(float32x4_t *)v70 = vmulq_f32(v79, v67);
        *(_OWORD *)(v70 + 16) = v73;
        v70 += 64;
        --v12;
      }
      while (v12);
    }
  }
  else if (v12)
  {
    v13 = (float32x4_t *)(v6 + 16 * v11);
    v14 = (__int128 *)(v3 + 16 * v11);
    v15 = (float32x4_t *)(result + 16 * v11);
    v16 = v2 + (v11 << 6) + 32;
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    do
    {
      v18 = *v13++;
      v19 = v18;
      v20 = *v14++;
      v21 = v20;
      v22 = *v15++;
      v23 = vabsq_f32(v22);
      v23.i32[3] = 0;
      v24 = vmulq_f32(v19, v19);
      v25 = vmulq_laneq_f32(v19, v19, 3);
      v26 = vmulq_lane_f32(v19, *(float32x2_t *)v19.f32, 1).f32[0];
      v27 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v23, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v22, v17));
      v24.f32[0] = 0.5 - v24.f32[0];
      *(float32x2_t *)v19.f32 = vmul_laneq_f32(*(float32x2_t *)v19.f32, v19, 2);
      v28 = vaddq_f32(v27, v27);
      v29.i32[3] = 0;
      v29.f32[0] = (float)(0.5 - v24.f32[1]) - v24.f32[2];
      v29.f32[1] = v26 + v25.f32[2];
      v30.i32[3] = 0;
      v30.f32[0] = v26 - v25.f32[2];
      v29.f32[2] = v19.f32[0] - v25.f32[1];
      v30.f32[1] = v24.f32[0] - v24.f32[2];
      v30.f32[2] = v19.f32[1] + v25.f32[0];
      *(int32x2_t *)v25.f32 = vrev64_s32(*(int32x2_t *)v25.f32);
      v31.i32[0] = vadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v25.f32).u32[0];
      v31.i32[1] = vsub_f32(*(float32x2_t *)&v19, *(float32x2_t *)&v25).i32[1];
      v31.i64[1] = COERCE_UNSIGNED_INT(v24.f32[0] - v24.f32[1]);
      *(float32x4_t *)(v16 - 32) = vmulq_n_f32(v29, v28.f32[0]);
      *(float32x4_t *)(v16 - 16) = vmulq_lane_f32(v30, *(float32x2_t *)v28.f32, 1);
      *(float32x4_t *)v16 = vmulq_laneq_f32(v31, v28, 2);
      *(_OWORD *)(v16 + 16) = v21;
      v16 += 64;
      --v12;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_1B20D4110(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_retain();
  if ((sub_1B20CE6DC(a1, a2, a4) & 1) != 0)
    return swift_release();
  v8 = sub_1B1D15C40(a1);
  if (!v8)
    return swift_release();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = a2 + 1;
    v11 = v8 + 36;
    do
    {
      v12 = *(_QWORD *)(v11 - 4);
      swift_retain();
      sub_1B20D4110(v12, v10, a3, a4);
      swift_release();
      v11 += 8;
      --v9;
    }
    while (v9);
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

char *sub_1B20D41EC(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_1B20D4224(a1, a2, a3, (void (*)(_QWORD, char *, uint64_t, _QWORD, uint64_t))sub_1B20CE344);
}

char *sub_1B20D4208(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_1B20D4224(a1, a2, a3, (void (*)(_QWORD, char *, uint64_t, _QWORD, uint64_t))sub_1B20CE240);
}

char *sub_1B20D4224(uint64_t a1, char *a2, uint64_t a3, void (*a4)(_QWORD, char *, uint64_t, _QWORD, uint64_t))
{
  uint64_t v4;

  a4(**(_QWORD **)(v4 + 16), a2, a3, 0, a1);
  return sub_1B1F03804(a2);
}

BOOL sub_1B20D4278(uint64_t a1, uint64_t a2, float32x2_t *a3, char a4, uint64_t a5, uint64_t a6, float32x2_t *a7, char a8)
{
  if ((sub_1B2228B90() & 1) != 0 && sub_1B1CC94F4(a2, a6))
  {
    if (a3)
    {
      if (a7 && (sub_1B1CC9F30(a3, a7) & 1) != 0)
        return a4 == a8;
    }
    else if (!a7)
    {
      return a4 == a8;
    }
  }
  return 0;
}

void sub_1B20D4310(uint64_t a1, uint64_t a2, char a3, float a4, double a5, double a6, __n128 a7)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  simd_float4 v16;
  simd_float4 v17;
  int32x4_t v18;
  simd_float4 v19;
  simd_float4 v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  simd_float4 v24;
  simd_float4 v25;
  simd_float4 v26;
  float32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  simd_float4 v39;
  simd_float4 v40;
  int32x4_t v41;
  int8x16_t v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  simd_float4 v60;
  int v61;
  float v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  __n128 v77;

  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = 0;
    v9 = fminf(fmaxf(a4, 0.0), 1.0);
    v10 = a2 + 32;
    v11 = *(_QWORD *)(a2 + 16);
    do
    {
      v12 = v11 >> 1;
      v13 = v8 + (v11 >> 1);
      v11 += ~(v11 >> 1);
      if (v9 >= *(float *)(v10 + 4 * v13))
        v8 = v13 + 1;
      else
        v11 = v12;
    }
    while ((uint64_t)v11 > 0);
    if (v8 < v7 && v8)
    {
      v14 = v8 - 1;
      if (v8 <= 0)
        v14 = 0;
      if (a3)
      {
        a7.n128_f32[0] = (float)(v9 - *(float *)(v10 + 4 * v14))
                       / (float)(*(float *)(v10 + 4 * v8) - *(float *)(v10 + 4 * v14));
        v77 = a7;
        v15 = a1 + 32;
        if (a3 == 1)
        {
          v16 = *(simd_float4 *)(v15 + 16 * v14);
          v74 = (float32x4_t)v16;
          v16.i32[3] = 0;
          v17 = _simd_pow_f4(v16, (simd_float4)xmmword_1B22B99E0);
          v70 = (float32x4_t)vdupq_n_s32(0x3F870A3Du);
          v72 = (float32x4_t)vdupq_n_s32(0xBD6147AE);
          v76 = (float32x4_t)vdupq_n_s32(0x414EB852u);
          v68 = (float32x4_t)vdupq_n_s32(0x3B4D2E1Cu);
          v18 = vcgeq_f32(v68, v74);
          v18.i32[3] = 0;
          v66 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v18), (int8x16_t)vmulq_f32(v74, v76), (int8x16_t)vmlaq_f32(v72, v70, (float32x4_t)v17));
          v19 = *(simd_float4 *)(v15 + 16 * v8);
          v64 = (float32x4_t)v19;
          v19.i32[3] = 0;
          v20 = _simd_pow_f4(v19, (simd_float4)xmmword_1B22B99E0);
          v21 = vcgeq_f32(v68, v64);
          v21.i32[3] = 0;
          v22 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v21), (int8x16_t)vmulq_f32(v64, v76), (int8x16_t)vmlaq_f32(v72, v70, (float32x4_t)v20)), v66);
          v23.i32[3] = v77.n128_i32[3];
          *(float32x2_t *)v23.f32 = vadd_f32(*(float32x2_t *)v66.f32, vmul_n_f32(*(float32x2_t *)v22.f32, v77.n128_f32[0]));
          v23.f32[2] = v66.f32[2] + vmuls_lane_f32(v77.n128_f32[0], v22, 2);
          v24 = (simd_float4)vdivq_f32(vaddq_f32(v23, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), v70);
          v24.i32[3] = 0;
          _simd_pow_f4(v24, (simd_float4)xmmword_1B2268F30);
        }
        else
        {
          v25 = (simd_float4)vmulq_laneq_f32(*(float32x4_t *)(v15 + 16 * v14), *(float32x4_t *)(v15 + 16 * v14), 3);
          v69 = (float32x4_t)v25;
          v25.i32[3] = 0;
          v26 = _simd_pow_f4(v25, (simd_float4)xmmword_1B22B99E0);
          v27 = (float32x4_t)vdupq_n_s32(0x3F870A3Du);
          v75 = (float32x4_t)vdupq_n_s32(0xBD6147AE);
          v28 = (int8x16_t)vmlaq_f32(v75, v27, (float32x4_t)v26);
          v71 = (float32x4_t)vdupq_n_s32(0x414EB852u);
          v73 = v27;
          v67 = (float32x4_t)vdupq_n_s32(0x3B4D2E1Cu);
          v29 = vcgeq_f32(v67, v69);
          v29.i32[3] = 0;
          v30 = vbslq_s8((int8x16_t)vcltzq_s32(v29), (int8x16_t)vmulq_f32(v69, v71), v28);
          v31 = fmaxf(fmaxf(*(float *)v30.i32, *(float *)&v30.i32[2]), *(float *)&v30.i32[1]);
          v32 = v31 - fminf(fminf(*(float *)v30.i32, *(float *)&v30.i32[2]), *(float *)&v30.i32[1]);
          v33 = 0.0;
          v34 = 0.0;
          if (v32 != 0.0)
          {
            v35 = (float)((float)(*(float *)v30.i32 - *(float *)&v30.i32[1]) / v32) + 4.0;
            if (*(float *)&v30.i32[1] == v31)
              v35 = (float)((float)(*(float *)&v30.i32[2] - *(float *)v30.i32) / v32) + 2.0;
            if (*(float *)v30.i32 == v31)
              v36 = (float)(*(float *)&v30.i32[1] - *(float *)&v30.i32[2]) / v32;
            else
              v36 = v35;
            if (v36 >= 0.0)
              v34 = v36 * 0.16667;
            else
              v34 = (float)(v36 * 0.16667) + 1.0;
          }
          v37 = v32 / v31;
          if (v31 == 0.0)
            v38 = 0.0;
          else
            v38 = v37;
          v39 = (simd_float4)vmulq_laneq_f32(*(float32x4_t *)(v15 + 16 * v8), *(float32x4_t *)(v15 + 16 * v8), 3);
          v65 = (float32x4_t)v39;
          v39.i32[3] = 0;
          v40 = _simd_pow_f4(v39, (simd_float4)xmmword_1B22B99E0);
          v41 = vcgeq_f32(v67, v65);
          v41.i32[3] = 0;
          v42 = vbslq_s8((int8x16_t)vcltzq_s32(v41), (int8x16_t)vmulq_f32(v65, v71), (int8x16_t)vmlaq_f32(v75, v73, (float32x4_t)v40));
          v43 = fmaxf(fmaxf(*(float *)v42.i32, *(float *)&v42.i32[2]), *(float *)&v42.i32[1]);
          v44 = v43 - fminf(fminf(*(float *)v42.i32, *(float *)&v42.i32[2]), *(float *)&v42.i32[1]);
          if (v44 != 0.0)
          {
            v45 = (float)((float)(*(float *)v42.i32 - *(float *)&v42.i32[1]) / v44) + 4.0;
            if (*(float *)&v42.i32[1] == v43)
              v45 = (float)((float)(*(float *)&v42.i32[2] - *(float *)v42.i32) / v44) + 2.0;
            if (*(float *)v42.i32 == v43)
              v46 = (float)(*(float *)&v42.i32[1] - *(float *)&v42.i32[2]) / v44;
            else
              v46 = v45;
            if (v46 >= 0.0)
              v33 = v46 * 0.16667;
            else
              v33 = (float)(v46 * 0.16667) + 1.0;
          }
          v47 = v44 / v43;
          v48 = 0.0;
          if (v43 == 0.0)
            v47 = 0.0;
          v49 = v38 + (float)(v77.n128_f32[0] * (float)(v47 - v38));
          v50 = v34 + 1.0;
          v51 = v33 + 1.0;
          if (v33 <= v34)
            v50 = v34;
          else
            v51 = v33;
          v52 = v51 - v34;
          v53 = v50 - v33;
          if (v52 > v53)
            v54 = -v53;
          else
            v54 = v52;
          v55 = v34 + (float)(v77.n128_f32[0] * v54);
          if (v55 < 0.0)
            v55 = v55 + 1.0;
          if (v55 > 1.0)
            v55 = v55 + -1.0;
          v56.i32[3] = 0;
          v56.i64[0] = __PAIR64__(LODWORD(v49), LODWORD(v55));
          v56.f32[2] = v31 + (float)(v77.n128_f32[0] * (float)(v43 - v31));
          v57 = vmaxnmq_f32(v56, (float32x4_t)0);
          v57.i32[3] = 0;
          v58 = vminnmq_f32(v57, (float32x4_t)xmmword_1B2244F70);
          if (v58.f32[1] == 0.0)
          {
            v59 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2);
          }
          else
          {
            if (v58.f32[0] != 1.0)
              v48 = 6.0 * v58.f32[0];
            v61 = (int)v48;
            v62 = v48 - (float)(int)v48;
            v59 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2);
            v59.i32[1] = vmuls_lane_f32(1.0 - v58.f32[1], v58, 2);
            v59.i32[2] = vmuls_lane_f32(1.0 - (float)(v58.f32[1] * v62), v58, 2);
            v63 = (int32x4_t)v59;
            v63.i32[3] = vmuls_lane_f32(1.0 - (float)(v58.f32[1] * (float)(1.0 - v62)), v58, 2);
            switch(v61)
            {
              case 0:
                v59 = (float32x4_t)vzip1q_s32(v63, (int32x4_t)vextq_s8((int8x16_t)v63, (int8x16_t)v63, 0xCuLL));
                break;
              case 1:
                v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL);
                break;
              case 2:
                v59 = (float32x4_t)vrev64q_s32(v63);
                break;
              case 3:
                v59 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v59, (int8x16_t)v59, 0xCuLL), (int8x16_t)v59, 8uLL);
                break;
              case 4:
                v59 = (float32x4_t)vextq_s8((int8x16_t)v63, (int8x16_t)vrev64q_s32(v63), 0xCuLL);
                break;
              default:
                break;
            }
          }
          v60 = (simd_float4)vdivq_f32(vaddq_f32(v59, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
          v60.i32[3] = 0;
          _simd_pow_f4(v60, (simd_float4)xmmword_1B2268F30);
        }
      }
    }
  }
}

uint64_t sub_1B20D492C()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  void *v27;
  id v28;
  _BYTE v29[32];
  _QWORD v30[4];
  uint64_t v31;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_values);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v4 = v2;
    v5 = sub_1B2228AB8();

    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v27 = v1;
      v31 = v3;
      sub_1B202B074(0, v6, 0);
      v26 = v5;
      v7 = v5 + 32;
      do
      {
        sub_1B1A02864(v7, (uint64_t)v30);
        sub_1B1A02864((uint64_t)v30, (uint64_t)v29);
        sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
        if (swift_dynamicCast())
        {
          objc_msgSend(v28, sel_floatValue);
          v9 = v8;

        }
        else
        {
          v9 = 0;
        }
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v30);
        v3 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B202B074(0, *(_QWORD *)(v3 + 16) + 1, 1);
          v3 = v31;
        }
        v11 = *(_QWORD *)(v3 + 16);
        v10 = *(_QWORD *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          sub_1B202B074(v10 > 1, v11 + 1, 1);
          v3 = v31;
        }
        *(_QWORD *)(v3 + 16) = v11 + 1;
        *(_DWORD *)(v3 + 4 * v11 + 32) = v9;
        v7 += 32;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      v1 = v27;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v12 = objc_msgSend(v1, sel_keyTimes, v26);
  v13 = MEMORY[0x1E0DEE9D8];
  if (v12)
  {
    v14 = v12;
    sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
    v15 = sub_1B2228AB8();

    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v16)
      {
LABEL_17:
        v30[0] = v13;
        sub_1B202B074(0, v16 & ~(v16 >> 63), 0);
        v17 = 0;
        v18 = v30[0];
        do
        {
          if ((v15 & 0xC000000000000001) != 0)
            v19 = (id)MEMORY[0x1B5E21018](v17, v15);
          else
            v19 = *(id *)(v15 + 8 * v17 + 32);
          v20 = v19;
          objc_msgSend(v19, sel_floatValue);
          v22 = v21;

          v30[0] = v18;
          v24 = *(_QWORD *)(v18 + 16);
          v23 = *(_QWORD *)(v18 + 24);
          if (v24 >= v23 >> 1)
          {
            sub_1B202B074(v23 > 1, v24 + 1, 1);
            v18 = v30[0];
          }
          ++v17;
          *(_QWORD *)(v18 + 16) = v24 + 1;
          *(_DWORD *)(v18 + 4 * v24 + 32) = v22;
        }
        while (v16 != v17);
      }
    }
    else
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v16)
        goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_1B20D4C50()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  float64x2_t v29;
  float64x2_t v30;
  float32x4_t v31;
  void *v32;
  _BYTE v33[32];
  _QWORD v34[4];
  uint64_t v35;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_values);
  if (!v2
    || (v3 = v2, v4 = sub_1B2228AB8(), v3, v5 = sub_1B1F4A248(v4), swift_bridgeObjectRelease(), !v5))
  {
    v6 = objc_msgSend(v1, sel_values);
    v5 = MEMORY[0x1E0DEE9D8];
    if (v6)
    {
      v7 = v6;
      v8 = sub_1B2228AB8();

      v9 = *(_QWORD *)(v8 + 16);
      if (v9)
      {
        v35 = v5;
        sub_1B202AFCC(0, v9, 0);
        v10 = v8 + 32;
        while (1)
        {
          sub_1B1A02864(v10, (uint64_t)v34);
          sub_1B1A02864((uint64_t)v34, (uint64_t)v33);
          type metadata accessor for CGColor(0);
          swift_dynamicCast();
          v11 = sub_1B2228E54();
          if (!v11)
            goto LABEL_10;
          if (*(_QWORD *)(v11 + 16) != 4)
            break;
          v29 = *(float64x2_t *)(v11 + 32);
          v30 = *(float64x2_t *)(v11 + 48);

          swift_bridgeObjectRelease();
          v12 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v29), v30);
LABEL_11:
          v31 = v12;
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v34);
          v5 = v35;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1B202AFCC(0, *(_QWORD *)(v5 + 16) + 1, 1);
            v5 = v35;
          }
          v14 = *(_QWORD *)(v5 + 16);
          v13 = *(_QWORD *)(v5 + 24);
          if (v14 >= v13 >> 1)
          {
            sub_1B202AFCC(v13 > 1, v14 + 1, 1);
            v5 = v35;
          }
          *(_QWORD *)(v5 + 16) = v14 + 1;
          *(float32x4_t *)(v5 + 16 * v14 + 32) = v31;
          v10 += 32;
          if (!--v9)
            goto LABEL_16;
        }
        swift_bridgeObjectRelease();
LABEL_10:

        v12 = 0uLL;
        goto LABEL_11;
      }
LABEL_16:
      swift_bridgeObjectRelease();
    }
  }
  v15 = objc_msgSend(v1, sel_keyTimes, *(_OWORD *)&v29);
  v16 = MEMORY[0x1E0DEE9D8];
  if (v15)
  {
    v17 = v15;
    sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
    v18 = sub_1B2228AB8();

    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      v19 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v19)
      {
LABEL_20:
        v34[0] = v16;
        sub_1B202B074(0, v19 & ~(v19 >> 63), 0);
        v20 = 0;
        v21 = v34[0];
        do
        {
          if ((v18 & 0xC000000000000001) != 0)
            v22 = (id)MEMORY[0x1B5E21018](v20, v18);
          else
            v22 = *(id *)(v18 + 8 * v20 + 32);
          v23 = v22;
          objc_msgSend(v22, sel_floatValue);
          v25 = v24;

          v34[0] = v21;
          v27 = *(_QWORD *)(v21 + 16);
          v26 = *(_QWORD *)(v21 + 24);
          if (v27 >= v26 >> 1)
          {
            sub_1B202B074(v26 > 1, v27 + 1, 1);
            v21 = v34[0];
          }
          ++v20;
          *(_QWORD *)(v21 + 16) = v27 + 1;
          *(_DWORD *)(v21 + 4 * v27 + 32) = v25;
        }
        while (v19 != v20);
      }
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v19)
        goto LABEL_20;
    }
    swift_bridgeObjectRelease();
  }
  return v5;
}

void *sub_1B20D4FB8(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  double v13;
  id v14;
  void *v15;
  int64_t v16;
  uint64_t v17;
  float *v18;
  CGColorRef GenericRGB;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    *(_QWORD *)&v25 = MEMORY[0x1E0DEE9D8];
    v8 = v4;
    swift_bridgeObjectRetain();
    sub_1B2229550();
    v9 = 0;
    do
    {
      v10 = v9 + 1;
      v11 = *(_DWORD *)(a2 + 4 * v9 + 32);
      v12 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      LODWORD(v13) = v11;
      objc_msgSend(v12, sel_initWithFloat_, v13);
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
      v9 = v10;
    }
    while (v6 != v10);
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v14 = v4;
  }
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
  v15 = (void *)sub_1B2228AAC();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setKeyTimes_, v15);

  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v27 = v7;
    swift_bridgeObjectRetain();
    sub_1B202B190(0, v16, 0);
    v17 = v7;
    v18 = (float *)(a1 + 44);
    do
    {
      GenericRGB = CGColorCreateGenericRGB(*(v18 - 3), *(v18 - 2), *(v18 - 1), *v18);
      type metadata accessor for CGColor(0);
      v26 = v20;
      v27 = v17;
      *(_QWORD *)&v25 = GenericRGB;
      v22 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_1B202B190(v21 > 1, v22 + 1, 1);
        v17 = v27;
      }
      *(_QWORD *)(v17 + 16) = v22 + 1;
      sub_1B1A0DDAC(&v25, (_OWORD *)(v17 + 32 * v22 + 32));
      v18 += 4;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v23 = (void *)sub_1B2228AAC();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setValues_, v23);

  return v5;
}

void *sub_1B20D5250(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;
  double v12;
  id v13;
  void *v14;
  void *v15;

  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v5 = v4;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = v4;
    swift_bridgeObjectRetain();
    sub_1B2229550();
    v8 = 0;
    do
    {
      v9 = v8 + 1;
      v10 = *(_DWORD *)(a2 + 4 * v8 + 32);
      v11 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
      LODWORD(v12) = v10;
      objc_msgSend(v11, sel_initWithFloat_, v12);
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
      v8 = v9;
    }
    while (v6 != v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = v4;
  }
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
  v14 = (void *)sub_1B2228AAC();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setKeyTimes_, v14);

  sub_1B1C519D4(a1);
  v15 = (void *)sub_1B2228AAC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setValues_, v15);

  return v5;
}

uint64_t sub_1B20D5428()
{
  sub_1B20D8F34();
  return sub_1B2228A70();
}

uint64_t sub_1B20D5484()
{
  sub_1B20D8F34();
  return sub_1B22289F8();
}

uint64_t sub_1B20D54D0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v16 = a4;
  v17 = a3;
  sub_1B19F8E54(0, &qword_1EEF63248, (uint64_t (*)(void))sub_1B20D8988, (uint64_t)&type metadata for ColorRamp.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v15 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20D8988();
  sub_1B222A180();
  v19 = a2;
  v18 = 0;
  sub_1B1E0F450();
  sub_1B20D8A10(&qword_1EEF63250, (unint64_t *)&qword_1ED4B7318, MEMORY[0x1E0DEDDB8], MEMORY[0x1E0DEAF10]);
  sub_1B2229958();
  if (!v4)
  {
    v13 = v16;
    v19 = v17;
    v18 = 1;
    sub_1B1D5E43C(0, (unint64_t *)&qword_1ED4BA4C0);
    sub_1B20D7DB4((unint64_t *)&qword_1EEF58BD8, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEAF10]);
    sub_1B2229958();
    LOBYTE(v19) = v13;
    v18 = 2;
    sub_1B20D8A98();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B20D56D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F99E24(*a1, *a2);
}

uint64_t sub_1B20D56DC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x73656D6974;
  if (*v0 != 1)
    v1 = 1701080941;
  if (*v0)
    return v1;
  else
    return 0x73726F6C6F63;
}

uint64_t sub_1B20D5728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B20D8204(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B20D574C()
{
  sub_1B20D8988();
  return sub_1B222A1D4();
}

uint64_t sub_1B20D5774()
{
  sub_1B20D8988();
  return sub_1B222A1E0();
}

uint64_t sub_1B20D579C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = sub_1B1C512B4(a1);
  swift_bridgeObjectRelease();
  v4 = sub_1B2145310(v3);
  v6 = v5;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

uint64_t sub_1B20D57F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_1B222A06C();
  sub_1B20E3CA4((uint64_t)v4, v1);
  sub_1B20E3C50((uint64_t)v4, v2);
  sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B20D5860(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  sub_1B20E3CA4(a1, *v1);
  v3 = *(_QWORD *)(v2 + 16);
  sub_1B222A078();
  if (v3)
  {
    v4 = v2 + 32;
    do
    {
      v4 += 4;
      sub_1B222A09C();
      --v3;
    }
    while (v3);
  }
  return sub_1B222A084();
}

uint64_t sub_1B20D58C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *v0;
  v2 = v0[1];
  sub_1B222A06C();
  sub_1B20E3CA4((uint64_t)v4, v1);
  sub_1B20E3C50((uint64_t)v4, v2);
  sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B20D592C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1B20D86C4(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B20D5958(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B20D54D0(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1B20D5974(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (sub_1B1CC9434(*(_QWORD *)a1, *(_QWORD *)a2))
    return sub_1B1CC94F4(v2, v4) & (v3 == v5);
  else
    return 0;
}

uint64_t sub_1B20D59D4()
{
  sub_1B20D8F78();
  return sub_1B2228A70();
}

uint64_t sub_1B20D5A30()
{
  sub_1B20D8F78();
  return sub_1B22289F8();
}

uint64_t sub_1B20D5A7C(_QWORD *a1, __int16 a2, double a3, double a4)
{
  uint64_t v4;
  char v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  char v18;
  double v19;

  v5 = HIBYTE(a2);
  sub_1B19F8E54(0, &qword_1EEF632A0, (uint64_t (*)(void))sub_1B20D8E68, (uint64_t)&type metadata for CurveTangents.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v17 - v13;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20D8E68();
  sub_1B222A180();
  v19 = a3;
  v18 = 0;
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v15, MEMORY[0x1E0DEDD30]);
  sub_1B2229958();
  if (!v4)
  {
    v19 = a4;
    v18 = 1;
    sub_1B2229958();
    LOBYTE(v19) = 2;
    sub_1B222991C();
    LOBYTE(v19) = v5;
    v18 = 3;
    sub_1B20D8EF0();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

void sub_1B20D5C98(char *a1)
{
  sub_1B1F8F644(*a1);
}

uint64_t sub_1B20D5CA4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20D5CD8 + 4 * byte_1B22B99F5[*v0]))(0x49746E65676E6174, 0xE90000000000006ELL);
}

uint64_t sub_1B20D5CD8()
{
  return 0x4F746E65676E6174;
}

uint64_t sub_1B20D5CF4()
{
  return 0x73746E65676E6174;
}

uint64_t sub_1B20D5D18()
{
  return 0x6C6F707265746E69;
}

uint64_t sub_1B20D5D3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B20D7FEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B20D5D60()
{
  sub_1B20D8E68();
  return sub_1B222A1D4();
}

uint64_t sub_1B20D5D88()
{
  sub_1B20D8E68();
  return sub_1B222A1E0();
}

uint64_t sub_1B20D5DB0(float32x2_t *a1, float32x2_t *a2)
{
  return sub_1B20D7BAC(a1[2].u8[0] | (unsigned __int16)(a1[2].u8[1] << 8), a2[2].u8[0] | (a2[2].u8[1] << 8), *a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1B20D5DD4()
{
  sub_1B222A06C();
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B222A084();
  sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B20D5E54()
{
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B222A084();
  return sub_1B222A084();
}

uint64_t sub_1B20D5EB0()
{
  sub_1B222A06C();
  sub_1B1C31888();
  sub_1B1C31888();
  sub_1B222A084();
  sub_1B222A084();
  return sub_1B222A0C0();
}

void sub_1B20D5F2C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int16 v4;
  double v5;
  uint64_t v6;

  v5 = sub_1B20D8468(a1);
  if (!v2)
  {
    *(double *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 16) = v4 & 1;
    *(_BYTE *)(a2 + 17) = HIBYTE(v4);
  }
}

uint64_t sub_1B20D5F64(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B20D5A7C(a1, *(unsigned __int8 *)(v1 + 16) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 17) << 8), *(double *)v1, *(double *)(v1 + 8));
}

uint64_t sub_1B20D5F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  sub_1B2228B78();
  swift_bridgeObjectRelease();
  sub_1B20E3C50(a1, a3);
  sub_1B222A084();
  if (a4)
    sub_1B20E3D44(a1, a4);
  return sub_1B222A084();
}

uint64_t sub_1B20D6030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v7[72];

  sub_1B222A06C();
  sub_1B20D5F88((uint64_t)v7, a1, a2, a3);
  return sub_1B222A0C0();
}

uint64_t sub_1B20D60AC()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B20D60F8(char a1)
{
  if (!a1)
    return 0x73656D6974;
  if (a1 == 1)
    return 0x7365756C6176;
  return 0x73746E65676E6174;
}

uint64_t sub_1B20D6148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t result;

  v3 = sub_1B20D8338(a1);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v7;
  *(_BYTE *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_1B20D61A8()
{
  uint64_t *v0;

  return sub_1B20D6030(*v0, v0[1], v0[2]);
}

uint64_t sub_1B20D61C0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B20D5F88(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1B20D61D8()
{
  uint64_t *v0;
  _BYTE v2[72];

  sub_1B222A06C();
  sub_1B20D5F88((uint64_t)v2, *v0, v0[1], v0[2]);
  return sub_1B222A0C0();
}

BOOL sub_1B20D6224(uint64_t a1, uint64_t a2)
{
  return sub_1B20D4278(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(float32x2_t **)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(float32x2_t **)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_1B20D6270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B22BA1B4, a3);
  return sub_1B1F1DDE8();
}

uint64_t sub_1B20D62BC(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22B9F6C, a1);
  return sub_1B2228A28();
}

uint64_t sub_1B20D6308()
{
  MEMORY[0x1B5E23E74](&unk_1B22B9F6C);
  return sub_1B2228A40();
}

uint64_t sub_1B20D6358()
{
  MEMORY[0x1B5E23E74](&unk_1B22B9F6C);
  return sub_1B2228A34();
}

uint64_t sub_1B20D63A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B20D60AC();
  *a1 = result;
  return result;
}

uint64_t sub_1B20D63DC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B20D60F8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B20D6408()
{
  char *v0;

  return sub_1B20D60F8(*v0);
}

uint64_t sub_1B20D6414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = sub_1B20D60F4(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24));
  *a4 = result;
  return result;
}

uint64_t sub_1B20D6440(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22BA1B4, a1);
  return sub_1B222A1D4();
}

uint64_t sub_1B20D6474(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22BA1B4, a1);
  return sub_1B222A1E0();
}

uint64_t sub_1B20D64A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v23 = a7;
  v20 = a2;
  v21 = a4;
  v22 = a6;
  v9 = type metadata accessor for Curve.CodingKeys(255, a6, a7, a4);
  MEMORY[0x1B5E23E74](&unk_1B22BA1B4, v9);
  v10 = sub_1B22299C4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v19 - v13;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A180();
  v27 = a3;
  v26 = 0;
  sub_1B1D5E43C(0, (unint64_t *)&qword_1ED4BA4C0);
  sub_1B20D7DB4((unint64_t *)&qword_1EEF58BD8, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEAF10]);
  v15 = v24;
  sub_1B2229958();
  if (!v15)
  {
    v16 = v21;
    v27 = v20;
    v26 = 1;
    v17 = sub_1B2228B6C();
    v25 = *(_QWORD *)(v23 + 16);
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v17, &v25);
    sub_1B2229958();
    if (v16)
    {
      v27 = v16;
      v26 = 2;
      sub_1B1D5E43C(0, &qword_1ED4BA380);
      sub_1B20D7CFC(&qword_1EEF63230, (uint64_t (*)(void))sub_1B20D7E20, MEMORY[0x1E0DEAF10]);
      sub_1B2229958();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1B20D66E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v7 = type metadata accessor for Curve.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1B5E23E74](&unk_1B22BA1B4, v7);
  v19 = sub_1B2229898();
  v8 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v9);
  v10 = *(_QWORD *)(a1 + 24);
  v20 = a1;
  v11 = (_QWORD *)a1;
  v13 = (char *)&v19 - v12;
  sub_1B19FA070(v11, v10);
  sub_1B222A150();
  if (v4)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v20);
  }
  else
  {
    v14 = v8;
    sub_1B1D5E43C(0, (unint64_t *)&qword_1ED4BA4C0);
    v22 = 0;
    sub_1B20D7DB4((unint64_t *)&qword_1ED4BA4C8, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEAF40]);
    v15 = v19;
    sub_1B2229814();
    v17 = sub_1B2228B6C();
    v22 = 1;
    v21 = *(_QWORD *)(a3 + 8);
    swift_bridgeObjectRetain();
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v17, &v21);
    sub_1B2229814();
    v8 = v23;
    sub_1B20D7C20();
    v22 = 2;
    sub_1B20D7C84();
    swift_bridgeObjectRetain();
    sub_1B22297B4();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v15);
    v18 = v23;
    swift_bridgeObjectRetain();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1AE7230(v18);
  }
  return v8;
}

uint64_t sub_1B20D69DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;

  result = sub_1B20D66E0(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  if (!v4)
  {
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = v7;
    *(_QWORD *)(a4 + 16) = v8;
    *(_BYTE *)(a4 + 24) = v9;
  }
  return result;
}

uint64_t sub_1B20D6A14(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_1B20D64A8(a1, *v5, v5[1], v5[2], a5, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

void sub_1B20D6A40(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v3 = v1 + OBJC_IVAR____TtC3VFX11CurveObject_curve;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX11CurveObject_curve);
  v5 = v4 + 32;
  v6 = 4 * *(_QWORD *)(v4 + 16);
  v7 = (void *)sub_1B2228728();
  objc_msgSend(a1, sel_encodeBytes_length_forKey_, v5, v6, v7);

  v8 = *(_QWORD *)(v3 + 8);
  v9 = v8 + 32;
  v10 = 4 * *(_QWORD *)(v8 + 16);
  v11 = (void *)sub_1B2228728();
  objc_msgSend(a1, sel_encodeBytes_length_forKey_, v9, v10, v11);

  v12 = *(_QWORD *)(v3 + 16);
  if (v12)
  {
    v13 = v12 + 32;
    v14 = 18 * *(_QWORD *)(v12 + 16);
    v15 = (id)sub_1B2228728();
    objc_msgSend(a1, sel_encodeBytes_length_forKey_, v13, v14, v15);

  }
}

id sub_1B20D6BC8(void *a1)
{
  void *v1;
  char *v3;
  void *v4;
  id v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  char *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  id v21;
  objc_super v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v25[0] = 0;
  v3 = v1;
  v4 = (void *)sub_1B2228728();
  v5 = objc_retainAutorelease(a1);
  v6 = (char *)objc_msgSend(v5, sel_decodeBytesForKey_returnedLength_, v4, v25);

  if (!v6)
  {

    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v16 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v24 = 0;
    swift_retain();
    v17 = 0x80000001B234B660;
    v18 = v16;
    v19 = 0xD00000000000001CLL;
    goto LABEL_15;
  }
  v7 = (void *)sub_1B2228728();
  v5 = objc_retainAutorelease(v5);
  v8 = (char *)objc_msgSend(v5, sel_decodeBytesForKey_returnedLength_, v7, v25);

  if (!v8)
  {

    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v20 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v24 = 0;
    swift_retain();
    v19 = 0xD00000000000001DLL;
    v17 = 0x80000001B234B680;
    v18 = v20;
LABEL_15:
    sub_1B1F1AD70(v18, &v24, v19, v17);
    swift_release();

    swift_release();
    type metadata accessor for CurveObject();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v9 = v25[0] / 4;
  v10 = sub_1B1DC9670(v8, v25[0] / 4);
  v11 = sub_1B1DC9670(v6, v9);
  v12 = &v3[OBJC_IVAR____TtC3VFX11CurveObject_curve];
  *(_QWORD *)v12 = v10;
  *((_QWORD *)v12 + 1) = v11;
  *((_QWORD *)v12 + 2) = 0;
  v12[24] = 1;
  v13 = (void *)sub_1B2228728();
  v14 = objc_retainAutorelease(v5);
  v15 = (char *)objc_msgSend(v14, sel_decodeBytesForKey_returnedLength_, v13, v25);

  if (v15)
  {
    *((_QWORD *)v12 + 2) = sub_1B1DC98F8(v15, v25[0] / 18);

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  v23.receiver = v3;
  v23.super_class = (Class)type metadata accessor for CurveObject();
  v21 = objc_msgSendSuper2(&v23, sel_init);

  return v21;
}

id sub_1B20D6F80()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CurveObject();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1B20D6FEC(int64_t *a1)
{
  void *v1;
  id v3;
  int64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  id v10;
  id v11;

  v3 = objc_msgSend(v1, sel_init);
  v4 = *a1;
  v5 = v3;
  v6 = sub_1B20D835C(a1 + 1, v4);
  v8 = v7;
  sub_1B1B9DAD4(0, &qword_1EEF63260);
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7A8);
  v9 = (id)sub_1B2228EF0();
  if (!v9)
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2798]), sel_init);
  v10 = objc_msgSend(v9, sel_values);
  objc_msgSend(v5, sel_setValues_, v10);

  v11 = objc_msgSend(v9, sel_keyTimes);
  objc_msgSend(v5, sel_setKeyTimes_, v11);

  objc_msgSend(v9, sel_duration);
  objc_msgSend(v5, sel_setDuration_);

  sub_1B1A0DADC(v6, v8);
  return v5;
}

id sub_1B20D7168(uint64_t a1, uint64_t a2, int64_t *a3)
{
  return sub_1B20D6FEC(a3);
}

id sub_1B20D718C(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;

  v1 = a1;
  sub_1B20D71E4();
  v3 = v2;
  v5 = v4;

  v6 = (void *)sub_1B2228170();
  sub_1B1A0DADC(v3, v5);
  return v6;
}

void sub_1B20D71E4()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6[3];

  v6[2] = *(id *)MEMORY[0x1E0C80C00];
  v6[0] = 0;
  v1 = objc_msgSend((id)objc_opt_self(), sel_archivedDataWithRootObject_requiringSecureCoding_error_, v0, 0, v6);
  v2 = v6[0];
  if (v1)
  {
    sub_1B222817C();
    v4 = v3;

    __asm { BR              X10 }
  }
  v5 = v2;
  sub_1B2227FB4();

  swift_willThrow();
  swift_unexpectedError();
  __break(1u);
  JUMPOUT(0x1B20D7328);
}

void sub_1B20D7338(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = a3;
  __asm { BR              X10 }
}

void *sub_1B20D7388(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, int a11, uint64_t a12, uint64_t __src, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  size_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *result;
  uint64_t v29;
  __int16 v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v29 = v26;
  v30 = v27;
  v31 = BYTE2(v27);
  v32 = BYTE3(v27);
  v33 = BYTE4(v27);
  v34 = BYTE5(v27);
  if ((v24 & 0x8000000000000000) == 0)
    return memcpy(v25, &v29, v24);
  result = (void *)sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B20D7528(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1;
  CAKeyframeAnimation.serializedVFXBindingSize.getter();
  v3 = v2;

  return v3;
}

void CAKeyframeAnimation.serializedVFXBindingSize.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_serializedVFXBindingData);
  sub_1B222817C();
  v3 = v2;

  __asm { BR              X10 }
}

uint64_t sub_1B20D75B0()
{
  unint64_t v0;
  uint64_t v1;

  sub_1B1A0DADC(v1, v0);
  return BYTE6(v0);
}

uint64_t sub_1B20D7624(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  a1[1] = sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20], MEMORY[0x1E0DEDD40]);
  a1[2] = sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v2, MEMORY[0x1E0DEDD30]);
  result = sub_1B1A09538((unint64_t *)&unk_1ED4B72E0, &qword_1ED4BB080, v2, MEMORY[0x1E0DEDD38]);
  a1[3] = result;
  return result;
}

uint64_t sub_1B20D76B8(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
  a1[1] = sub_1B1A09538((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], MEMORY[0x1E0DEDD70]);
  a1[2] = sub_1B1A09538((unint64_t *)&qword_1ED4B72F8, (unint64_t *)&qword_1ED4BB0A0, v2, MEMORY[0x1E0DEDD60]);
  result = sub_1B1A09538((unint64_t *)&unk_1ED4B7300, (unint64_t *)&qword_1ED4BB0A0, v2, MEMORY[0x1E0DEDD68]);
  a1[3] = result;
  return result;
}

uint64_t sub_1B20D774C(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t result;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  a1[1] = sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8], MEMORY[0x1E0DEDDC8]);
  a1[2] = sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v2, MEMORY[0x1E0DEDDB8]);
  result = sub_1B1A09538((unint64_t *)&unk_1ED4B7320, (unint64_t *)&qword_1ED4BB0E0, v2, MEMORY[0x1E0DEDDC0]);
  a1[3] = result;
  return result;
}

uint64_t type metadata accessor for CurveObject()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for Curve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Curve);
}

ValueMetadata *type metadata accessor for ColorRamp()
{
  return &type metadata for ColorRamp;
}

unint64_t sub_1B20D7820()
{
  unint64_t result;

  result = qword_1EEF63228;
  if (!qword_1EEF63228)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9AEC, &type metadata for ColorRamp);
    atomic_store(result, (unint64_t *)&qword_1EEF63228);
  }
  return result;
}

void sub_1B20D7864()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B20D7874(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B20D78D8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;

  v12 = v5;
  LOWORD(v13) = v0;
  BYTE2(v13) = BYTE2(v0);
  HIBYTE(v13) = BYTE3(v0);
  v14 = BYTE4(v0);
  v15 = BYTE5(v0);
  v16 = BYTE6(v0);
  sub_1B20D7338(&v12, (uint64_t)&v12 + BYTE6(v0), v4, v2, v1);
  v6 = v12;
  v7 = v13;
  v8 = v14;
  v9 = v15;
  v10 = v16;
  result = sub_1B1A0DADC(v2, v1);
  *v3 = v6;
  v3[1] = v7 | (v8 << 32) | (v9 << 40) | (v10 << 48);
  return result;
}

uint64_t sub_1B20D7BAC(__int16 a1, int a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6)
{
  uint64_t result;
  int32x2_t v8;

  result = 0;
  if ((vceq_f32(a3, a5).u8[0] & 1) != 0)
  {
    v8 = vceq_f32((float32x2_t)__PAIR64__(a3.u32[1], a4.u32[0]), (float32x2_t)__PAIR64__(a5.u32[1], a6.u32[0]));
    if ((v8.i8[4] & 1) != 0 && (v8.i8[0] & 1) != 0)
      return vceq_f32(a4, a6).u32[1] & (((a1 & 1) == 0) ^ a2) & (HIBYTE(a1) == (unsigned __int16)(a2 & 0xFF00) >> 8);
  }
  return result;
}

uint64_t type metadata accessor for Curve.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Curve.CodingKeys);
}

void sub_1B20D7C20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA390)
  {
    sub_1B1D5E43C(255, &qword_1ED4BA380);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA390);
  }
}

unint64_t sub_1B20D7C84()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1ED4BA3A0;
  if (!qword_1ED4BA3A0)
  {
    sub_1B20D7C20();
    v2 = v1;
    v3 = sub_1B20D7CFC(&qword_1ED4BA388, (uint64_t (*)(void))sub_1B20D7D70, MEMORY[0x1E0DEAF40]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE9A0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA3A0);
  }
  return result;
}

uint64_t sub_1B20D7CFC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1B1D5E43C(255, &qword_1ED4BA380);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1B5E23E74](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B20D7D70()
{
  unint64_t result;

  result = qword_1ED4B8550;
  if (!qword_1ED4B8550)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA18C, &type metadata for CurveTangents);
    atomic_store(result, (unint64_t *)&qword_1ED4B8550);
  }
  return result;
}

uint64_t sub_1B20D7DB4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1B1D5E43C(255, (unint64_t *)&qword_1ED4BA4C0);
    v8 = a2;
    result = MEMORY[0x1B5E23E74](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B20D7E20()
{
  unint64_t result;

  result = qword_1EEF63238;
  if (!qword_1EEF63238)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA164, &type metadata for CurveTangents);
    atomic_store(result, (unint64_t *)&qword_1EEF63238);
  }
  return result;
}

uint64_t sub_1B20D7E64(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  BOOL v14;
  float v15;
  float v16;
  __int128 v17;
  __int128 v18;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6 != *(_QWORD *)(a4 + 16))
    return 0;
  if (v6)
    v7 = a1 == a4;
  else
    v7 = 1;
  if (v7)
    return sub_1B1CC94F4(a2, a5) & (a3 == a6);
  v9 = 0;
  v10 = a1 + 32;
  while (2)
  {
    v11 = 0;
    v12 = *(_OWORD *)(v10 + 16 * v9);
    v13 = *(_OWORD *)(a4 + 32 + 16 * v9);
    v14 = 1;
    while (!v14)
    {
      v14 = 0;
      result = 0;
      if (v11 == 3)
        return result;
LABEL_10:
      ++v11;
    }
    v17 = v12;
    v15 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v18 = v13;
    v16 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v14 = v15 == v16;
    if (v11 != 3)
      goto LABEL_10;
    if (v15 == v16)
    {
      if (++v9 == v6)
        return sub_1B1CC94F4(a2, a5) & (a3 == a6);
      continue;
    }
    return 0;
  }
}

uint64_t sub_1B20D7F58(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      return 0;
    }
    else
    {
      sub_1B2227E7C();
      swift_allocObject();
      sub_1B2227E58();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_1B222814C();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_1B20D7FEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49746E65676E6174 && a2 == 0xE90000000000006ELL;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4F746E65676E6174 && a2 == 0xEA00000000007475 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73746E65676E6174 && a2 == 0xEE0064656B6E694CLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F707265746E69 && a2 == 0xED00006E6F697461)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B20D8204(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73726F6C6F63 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73656D6974 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B20D8338(uint64_t a1)
{
  return sub_1B1E8D030(a1);
}

uint64_t sub_1B20D835C(void *__src, int64_t __n)
{
  uint64_t result;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!__n)
    return 0;
  if (__n <= 14)
  {
    memset(__dst, 0, sizeof(__dst));
    v5 = __n;
    memcpy(__dst, __src, __n);
    return *(_QWORD *)__dst;
  }
  else
  {
    sub_1B2227E7C();
    swift_allocObject();
    sub_1B2227E40();
    if ((unint64_t)__n >= 0x7FFFFFFF)
    {
      sub_1B222814C();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = __n;
    }
    else
    {
      return __n << 32;
    }
  }
  return result;
}

double sub_1B20D8468(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  char v13;
  double v14;

  sub_1B19F8E54(0, &qword_1EEF63288, (uint64_t (*)(void))sub_1B20D8E68, (uint64_t)&type metadata for CurveTangents.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20D8E68();
  sub_1B222A150();
  if (!v1)
  {
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v13 = 0;
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v10, MEMORY[0x1E0DEDD40]);
    sub_1B2229814();
    v2 = v14;
    v13 = 1;
    sub_1B2229814();
    LOBYTE(v14) = 2;
    sub_1B22297D8();
    v13 = 3;
    sub_1B20D8EAC();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B20D86C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_1B19F8E54(0, &qword_1ED4BAC90, (uint64_t (*)(void))sub_1B20D8988, (uint64_t)&type metadata for ColorRamp.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B20D8988();
  sub_1B222A150();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B1E0F450();
    v12 = 0;
    sub_1B20D8A10(&qword_1ED4BA508, (unint64_t *)&qword_1ED4B7330, MEMORY[0x1E0DEDDC8], MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    v9 = v13;
    sub_1B1D5E43C(0, (unint64_t *)&qword_1ED4BA4C0);
    v12 = 1;
    sub_1B20D7DB4((unint64_t *)&qword_1ED4BA4C8, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEAF40]);
    swift_bridgeObjectRetain();
    sub_1B2229814();
    v12 = 2;
    sub_1B20D89CC();
    swift_bridgeObjectRetain();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v9;
}

unint64_t sub_1B20D8988()
{
  unint64_t result;

  result = qword_1ED4BA148;
  if (!qword_1ED4BA148)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA114, &type metadata for ColorRamp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA148);
  }
  return result;
}

unint64_t sub_1B20D89CC()
{
  unint64_t result;

  result = qword_1ED4BA170;
  if (!qword_1ED4BA170)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA0EC, &type metadata for ColorRamp.InterpolationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4BA170);
  }
  return result;
}

uint64_t sub_1B20D8A10(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_1B1E0F450();
    v10 = v9;
    v11 = sub_1B1A09538(a2, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8], a3);
    result = MEMORY[0x1B5E23E74](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B20D8A98()
{
  unint64_t result;

  result = qword_1EEF63258;
  if (!qword_1EEF63258)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA0C4, &type metadata for ColorRamp.InterpolationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF63258);
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorRamp.CodingKeys()
{
  return &type metadata for ColorRamp.CodingKeys;
}

ValueMetadata *type metadata accessor for CurveInterpolationMode()
{
  return &type metadata for CurveInterpolationMode;
}

__n128 initializeBufferWithCopyOfBuffer for CurveTangents(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CurveTangents(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CurveTangents(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CurveTangents()
{
  return &type metadata for CurveTangents;
}

uint64_t _s3VFX22CurveInterpolationModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B20D8C08 + 4 * byte_1B22B9A06[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B20D8C3C + 4 * byte_1B22B9A01[v4]))();
}

uint64_t sub_1B20D8C3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20D8C44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20D8C4CLL);
  return result;
}

uint64_t sub_1B20D8C58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20D8C60);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B20D8C64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20D8C6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ColorRamp.InterpolationMode()
{
  return &type metadata for ColorRamp.InterpolationMode;
}

unint64_t sub_1B20D8C8C()
{
  unint64_t result;

  result = qword_1EEF63268;
  if (!qword_1EEF63268)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9D9C, &type metadata for ColorRamp.InterpolationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF63268);
  }
  return result;
}

unint64_t sub_1B20D8CD4()
{
  unint64_t result;

  result = qword_1EEF63270;
  if (!qword_1EEF63270)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9E04, &type metadata for CurveTangents);
    atomic_store(result, (unint64_t *)&qword_1EEF63270);
  }
  return result;
}

unint64_t sub_1B20D8D1C()
{
  unint64_t result;

  result = qword_1EEF63278;
  if (!qword_1EEF63278)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9EF4, &type metadata for CurveInterpolationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF63278);
  }
  return result;
}

void sub_1B20D8D60()
{
  JUMPOUT(0x1B5E23E74);
}

unint64_t sub_1B20D8D74()
{
  unint64_t result;

  result = qword_1EEF63280;
  if (!qword_1EEF63280)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA09C, &type metadata for ColorRamp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63280);
  }
  return result;
}

unint64_t sub_1B20D8DBC()
{
  unint64_t result;

  result = qword_1ED4BA158;
  if (!qword_1ED4BA158)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA00C, &type metadata for ColorRamp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA158);
  }
  return result;
}

unint64_t sub_1B20D8E04()
{
  unint64_t result;

  result = qword_1ED4BA150;
  if (!qword_1ED4BA150)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA034, &type metadata for ColorRamp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4BA150);
  }
  return result;
}

void sub_1B20D8E48()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B20D8E58()
{
  JUMPOUT(0x1B5E23E74);
}

unint64_t sub_1B20D8E68()
{
  unint64_t result;

  result = qword_1EEF63290;
  if (!qword_1EEF63290)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA2BC, &type metadata for CurveTangents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63290);
  }
  return result;
}

unint64_t sub_1B20D8EAC()
{
  unint64_t result;

  result = qword_1EEF63298;
  if (!qword_1EEF63298)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9E8C, &type metadata for CurveInterpolationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF63298);
  }
  return result;
}

unint64_t sub_1B20D8EF0()
{
  unint64_t result;

  result = qword_1EEF632A8;
  if (!qword_1EEF632A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9E64, &type metadata for CurveInterpolationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF632A8);
  }
  return result;
}

unint64_t sub_1B20D8F34()
{
  unint64_t result;

  result = qword_1ED4BA160;
  if (!qword_1ED4BA160)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9D24, &type metadata for ColorRamp.InterpolationMode);
    atomic_store(result, (unint64_t *)&qword_1ED4BA160);
  }
  return result;
}

unint64_t sub_1B20D8F78()
{
  unint64_t result;

  result = qword_1EEF632B8;
  if (!qword_1EEF632B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B9E2C, &type metadata for CurveInterpolationMode);
    atomic_store(result, (unint64_t *)&qword_1EEF632B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CurveTangents.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B20D9008 + 4 * byte_1B22B9A10[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B20D903C + 4 * byte_1B22B9A0B[v4]))();
}

uint64_t sub_1B20D903C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20D9044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20D904CLL);
  return result;
}

uint64_t sub_1B20D9058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20D9060);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B20D9064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20D906C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CurveTangents.CodingKeys()
{
  return &type metadata for CurveTangents.CodingKeys;
}

unint64_t sub_1B20D908C()
{
  unint64_t result;

  result = qword_1EEF632C0;
  if (!qword_1EEF632C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA294, &type metadata for CurveTangents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF632C0);
  }
  return result;
}

unint64_t sub_1B20D90D4()
{
  unint64_t result;

  result = qword_1EEF632C8;
  if (!qword_1EEF632C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA204, &type metadata for CurveTangents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF632C8);
  }
  return result;
}

unint64_t sub_1B20D911C()
{
  unint64_t result;

  result = qword_1EEF632D0;
  if (!qword_1EEF632D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA22C, &type metadata for CurveTangents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF632D0);
  }
  return result;
}

void sub_1B20D9160()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B20D91A8()
{
  return type metadata accessor for MathTransformNode(0);
}

uint64_t type metadata accessor for MathTransformNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF632E0);
}

unint64_t sub_1B20D91C4()
{
  return 0xD000000000000014;
}

uint64_t sub_1B20D91E0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B20D9434((uint64_t)&unk_1E63AF2A8, (uint64_t)&unk_1E63AF278, a1, (__n128)xmmword_1B22847D0);
}

unint64_t sub_1B20D91FC(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD00000000000001ELL;
  else
    return 0xD00000000000001DLL;
}

uint64_t sub_1B20D9234()
{
  return type metadata accessor for QuaternionFromNormalNode(0);
}

uint64_t type metadata accessor for QuaternionFromNormalNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF632F0);
}

unint64_t sub_1B20D9250()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1B20D926C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000050;
  *(_QWORD *)(v2 + 40) = v5 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000028;
  *(_QWORD *)(v6 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1E63B74A8;
  a1[3] = (uint64_t)&unk_1E63B7468;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v8;
  return result;
}

unint64_t sub_1B20D93A4(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000027;
  else
    return 0xD000000000000026;
}

uint64_t sub_1B20D93E0()
{
  return type metadata accessor for QuaternionFromFloat3AxisAngleNode(0);
}

uint64_t type metadata accessor for QuaternionFromFloat3AxisAngleNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63300);
}

unint64_t sub_1B20D93FC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1B20D9418@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B20D9434((uint64_t)&unk_1E63B7508, (uint64_t)&unk_1E63B74D8, a1, (__n128)xmmword_1B22847C0);
}

uint64_t sub_1B20D9434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  v8 = swift_allocObject();
  v9 = swift_allocObject();
  *(__n128 *)(v9 + 16) = a4;
  *(_QWORD *)(v8 + 16) = v9 | 0x1000000000000000;
  *(_QWORD *)(v7 + 32) = v8 | 0x6000000000000000;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000028;
  *(_QWORD *)(v10 + 32) = result | 0x6000000000000000;
  *a3 = v7;
  a3[1] = v10;
  a3[2] = a1;
  a3[3] = a2;
  v12 = MEMORY[0x1E0DEE9D8];
  a3[4] = MEMORY[0x1E0DEE9D8];
  a3[5] = v12;
  return result;
}

unint64_t sub_1B20D9554(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000024;
  else
    return 0xD000000000000023;
}

uint64_t sub_1B20D958C()
{
  return type metadata accessor for QuaternionFromFloat4AxisAngleNode(0);
}

uint64_t type metadata accessor for QuaternionFromFloat4AxisAngleNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63310);
}

unint64_t sub_1B20D95A8()
{
  return 0xD000000000000019;
}

uint64_t sub_1B20D95C4@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B20D9434((uint64_t)&unk_1E63B5148, (uint64_t)&unk_1E63B5118, a1, (__n128)xmmword_1B22847D0);
}

unint64_t sub_1B20D95E0(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000022;
  else
    return 0xD000000000000021;
}

uint64_t sub_1B20D9618()
{
  return type metadata accessor for QuaternionFromEulerAnglesNode(0);
}

uint64_t type metadata accessor for QuaternionFromEulerAnglesNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63320);
}

unint64_t sub_1B20D9634()
{
  return 0xD000000000000017;
}

uint64_t sub_1B20D9650@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B20D96F0((uint64_t)&unk_1E6384FD8, (uint64_t)&unk_1E6384FA8, a1);
}

unint64_t sub_1B20D9664(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000020;
  else
    return 0xD000000000000031;
}

uint64_t sub_1B20D96A4()
{
  return type metadata accessor for QuaternionXNode(0);
}

uint64_t type metadata accessor for QuaternionXNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63330);
}

unint64_t sub_1B20D96C0()
{
  return 0xD000000000000017;
}

uint64_t sub_1B20D96DC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B20D96F0((uint64_t)&unk_1E6385038, (uint64_t)&unk_1E6385008, a1);
}

uint64_t sub_1B20D96F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0x8000000000000050;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000028;
  *(_QWORD *)(v8 + 32) = result | 0x6000000000000000;
  *a3 = v6;
  a3[1] = v8;
  a3[2] = a1;
  a3[3] = a2;
  v10 = MEMORY[0x1E0DEE9D8];
  a3[4] = MEMORY[0x1E0DEE9D8];
  a3[5] = v10;
  return result;
}

unint64_t sub_1B20D97EC(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000020;
  else
    return 0xD000000000000031;
}

uint64_t sub_1B20D982C()
{
  return type metadata accessor for QuaternionYNode(0);
}

uint64_t type metadata accessor for QuaternionYNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63340);
}

unint64_t sub_1B20D9848()
{
  return 0xD000000000000017;
}

uint64_t sub_1B20D9864@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B20D96F0((uint64_t)&unk_1E6385098, (uint64_t)&unk_1E6385068, a1);
}

unint64_t sub_1B20D9878(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000020;
  else
    return 0xD000000000000031;
}

uint64_t sub_1B20D98B8()
{
  return type metadata accessor for QuaternionZNode(0);
}

uint64_t type metadata accessor for QuaternionZNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63350);
}

unint64_t sub_1B20D98D4()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_1B20D98F0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B20D99A4(3, (uint64_t)&unk_1E63B7B78, (uint64_t)&unk_1E63B7B48, a1, (__n128)xmmword_1B22847D0);
}

unint64_t sub_1B20D9910(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000023;
  else
    return 0xD000000000000022;
}

uint64_t sub_1B20D994C()
{
  return type metadata accessor for QuaternionFromRotationMatrix3x3Node(0);
}

uint64_t type metadata accessor for QuaternionFromRotationMatrix3x3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63360);
}

unint64_t sub_1B20D9968()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_1B20D9984@<X0>(uint64_t *a1@<X8>)
{
  return sub_1B20D99A4(4, (uint64_t)&unk_1E63B7BD8, (uint64_t)&unk_1E63B7BA8, a1, (__n128)xmmword_1B22847C0);
}

uint64_t sub_1B20D99A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
  v10 = swift_allocObject();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  v12 = swift_allocObject();
  *(__n128 *)(v12 + 16) = a5;
  *(_QWORD *)(v11 + 24) = v12 | 0x1000000000000000;
  *(_QWORD *)(v10 + 16) = v11 | 0x1000000000000000;
  *(_QWORD *)(v9 + 32) = v10 | 0x6000000000000000;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000028;
  *(_QWORD *)(v13 + 32) = result | 0x6000000000000000;
  *a4 = v9;
  a4[1] = v13;
  a4[2] = a2;
  a4[3] = a3;
  v15 = MEMORY[0x1E0DEE9D8];
  a4[4] = MEMORY[0x1E0DEE9D8];
  a4[5] = v15;
  return result;
}

unint64_t sub_1B20D9AF4(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000023;
  else
    return 0xD000000000000022;
}

uint64_t sub_1B20D9B30()
{
  return type metadata accessor for QuaternionFromRotationMatrix4x4Node(0);
}

uint64_t type metadata accessor for QuaternionFromRotationMatrix4x4Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63370);
}

uint64_t sub_1B20D9B4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1B2229430();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 3;
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v0 + 24) = v1 | 0x1000000000000000;
  sub_1B1D763B0(v0 | 0x1000000000000000);
  swift_release();
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  v2 = sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return v2;
}

double sub_1B20D9D00@<D0>(uint64_t *a1@<X8>)
{
  return sub_1B20D9D8C(0x8000000000000050, (uint64_t)&unk_1E63B6FC8, (uint64_t)&unk_1E63B6F98, a1);
}

unint64_t sub_1B20D9D1C()
{
  return 0xD000000000000046;
}

uint64_t sub_1B20D9D38()
{
  return type metadata accessor for RotationMatrixFromEulerAngleNode(0);
}

uint64_t type metadata accessor for RotationMatrixFromEulerAngleNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63380);
}

unint64_t sub_1B20D9D54()
{
  return 0xD00000000000001FLL;
}

double sub_1B20D9D70@<D0>(uint64_t *a1@<X8>)
{
  return sub_1B20D9D8C(0x8000000000000028, (uint64_t)&unk_1E63B7C38, (uint64_t)&unk_1E63B7C08, a1);
}

double sub_1B20D9D8C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v8 + 32) = v9 | 0x6000000000000000;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
  v11 = swift_allocObject();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = 3;
  v13 = swift_allocObject();
  *(_QWORD *)&result = 3;
  *(_OWORD *)(v13 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v12 + 24) = v13 | 0x1000000000000000;
  *(_QWORD *)(v11 + 16) = v12 | 0x1000000000000000;
  *(_QWORD *)(v10 + 32) = v11 | 0x6000000000000000;
  *a4 = v8;
  a4[1] = v10;
  a4[2] = a2;
  a4[3] = a3;
  v15 = MEMORY[0x1E0DEE9D8];
  a4[4] = MEMORY[0x1E0DEE9D8];
  a4[5] = v15;
  return result;
}

unint64_t sub_1B20D9ED0()
{
  return 0xD000000000000022;
}

uint64_t sub_1B20D9EEC()
{
  return type metadata accessor for RotationMatrix3x3FromQuaternionNode(0);
}

uint64_t type metadata accessor for RotationMatrix3x3FromQuaternionNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF63390);
}

unint64_t sub_1B20D9F08()
{
  return 0xD00000000000001FLL;
}

double sub_1B20D9F24@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000028;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  v5 = swift_allocObject();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 4;
  v7 = swift_allocObject();
  *(_QWORD *)&result = 4;
  *(_OWORD *)(v7 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v6 + 24) = v7 | 0x1000000000000000;
  *(_QWORD *)(v5 + 16) = v6 | 0x1000000000000000;
  *(_QWORD *)(v4 + 32) = v5 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1E63B7C98;
  a1[3] = (uint64_t)&unk_1E63B7C68;
  v9 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v9;
  return result;
}

unint64_t sub_1B20DA06C()
{
  return 0xD000000000000022;
}

uint64_t sub_1B20DA088()
{
  return type metadata accessor for RotationMatrix4x4FromQuaternionNode(0);
}

uint64_t type metadata accessor for RotationMatrix4x4FromQuaternionNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF633A0);
}

uint64_t sub_1B20DA0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1B2229430();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 4;
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v0 + 24) = v1 | 0x1000000000000000;
  sub_1B1D763B0(v0 | 0x1000000000000000);
  swift_release();
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  v2 = sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return v2;
}

double sub_1B20DA258@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0x8000000000000028;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v4 = swift_allocObject();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v4 + 16) = v5 | 0x1000000000000000;
  *(_QWORD *)(v2 + 40) = v4 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = swift_allocObject();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 4;
  v9 = swift_allocObject();
  *(_QWORD *)&result = 4;
  *(_OWORD *)(v9 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v8 + 24) = v9 | 0x1000000000000000;
  *(_QWORD *)(v7 + 16) = v8 | 0x1000000000000000;
  *(_QWORD *)(v6 + 32) = v7 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1E63B5E98;
  a1[3] = (uint64_t)&unk_1E63B5E58;
  v11 = MEMORY[0x1E0DEE9D8];
  a1[4] = MEMORY[0x1E0DEE9D8];
  a1[5] = v11;
  return result;
}

unint64_t sub_1B20DA3D8()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_1B20DA3F4()
{
  return type metadata accessor for RotationMatrixAroundCenterNode(0);
}

uint64_t type metadata accessor for RotationMatrixAroundCenterNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF633B0);
}

uint64_t sub_1B20DA410()
{
  return sub_1B20DA85C(3, (__n128)xmmword_1B22847D0);
}

uint64_t sub_1B20DA420@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DynamicType;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _QWORD v29[3];
  uint64_t v30;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B2286450;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000050;
  *(_QWORD *)(v2 + 40) = v5 | 0x6000000000000000;
  v6 = swift_allocObject();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B2286450;
  *(_QWORD *)(v6 + 16) = v7 | 0x1000000000000000;
  *(_QWORD *)(v2 + 48) = v6 | 0x6000000000000000;
  sub_1B1C27668(0, (unint64_t *)&unk_1EEF5C7D0);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226E100;
  sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  v10 = v9;
  v30 = v9;
  v29[0] = 0;
  sub_1B19FA070(v29, v9);
  DynamicType = swift_getDynamicType();
  v12 = sub_1B1D76F30(DynamicType);
  if ((~v12 & 0xF000000000000007) == 0)
    goto LABEL_5;
  v13 = v12;
  sub_1B1A02864((uint64_t)v29, v8 + 40);
  *(_QWORD *)(v8 + 32) = v13;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v29);
  v30 = MEMORY[0x1E0DEB188];
  LODWORD(v29[0]) = 0;
  sub_1B19FA070(v29, MEMORY[0x1E0DEB188]);
  v14 = swift_getDynamicType();
  v15 = sub_1B1D76F30(v14);
  if ((~v15 & 0xF000000000000007) == 0)
    goto LABEL_5;
  v16 = v15;
  sub_1B1A02864((uint64_t)v29, v8 + 80);
  *(_QWORD *)(v8 + 72) = v16;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v29);
  v30 = v10;
  __asm { FMOV            V0.2S, #1.0 }
  v29[0] = _D0;
  sub_1B19FA070(v29, v10);
  v22 = swift_getDynamicType();
  v23 = sub_1B1D76F30(v22);
  if ((~v23 & 0xF000000000000007) != 0)
  {
    v24 = v23;
    sub_1B1A02864((uint64_t)v29, v8 + 120);
    *(_QWORD *)(v8 + 112) = v24;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v29);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1B226D240;
    v26 = swift_allocObject();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = 3;
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B22847D0;
    *(_QWORD *)(v27 + 24) = result | 0x1000000000000000;
    *(_QWORD *)(v26 + 16) = v27 | 0x1000000000000000;
    *(_QWORD *)(v25 + 32) = v26 | 0x6000000000000000;
    *a1 = v2;
    a1[1] = v25;
    a1[2] = (uint64_t)&unk_1E63A6708;
    a1[3] = (uint64_t)&unk_1E63A66B8;
    a1[4] = MEMORY[0x1E0DEE9D8];
    a1[5] = v8;
  }
  else
  {
LABEL_5:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

unint64_t sub_1B20DA814()
{
  return 0xD000000000000033;
}

uint64_t sub_1B20DA830()
{
  return type metadata accessor for TRSFloat3x3MatrixNode(0);
}

uint64_t type metadata accessor for TRSFloat3x3MatrixNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF633C0);
}

uint64_t sub_1B20DA84C()
{
  return sub_1B20DA85C(4, (__n128)xmmword_1B22847C0);
}

uint64_t sub_1B20DA85C(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v4 = swift_allocObject();
  *(__n128 *)(v4 + 16) = a2;
  *(_QWORD *)(v3 + 24) = v4 | 0x1000000000000000;
  sub_1B1D763B0(v3 | 0x1000000000000000);
  swift_release();
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 5460564;
}

uint64_t sub_1B20DAA08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t DynamicType;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _QWORD v28[3];
  uint64_t v29;

  sub_1B1C27668(0, (unint64_t *)&qword_1EEF5CB90);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226E100;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v3 + 16) = v4 | 0x1000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x6000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000028;
  *(_QWORD *)(v2 + 40) = v5 | 0x6000000000000000;
  v6 = swift_allocObject();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v6 + 16) = v7 | 0x1000000000000000;
  *(_QWORD *)(v2 + 48) = v6 | 0x6000000000000000;
  sub_1B1C27668(0, (unint64_t *)&unk_1EEF5C7D0);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B226E100;
  sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
  v10 = v9;
  v29 = v9;
  v11 = swift_allocObject();
  v28[0] = v11;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  sub_1B19FA070(v28, v10);
  DynamicType = swift_getDynamicType();
  v13 = sub_1B1D76F30(DynamicType);
  if ((~v13 & 0xF000000000000007) == 0)
    goto LABEL_5;
  v14 = v13;
  sub_1B1A02864((uint64_t)v28, v8 + 40);
  *(_QWORD *)(v8 + 32) = v14;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v28);
  type metadata accessor for simd_quatf(0);
  v16 = v15;
  v29 = v15;
  v17 = swift_allocObject();
  v28[0] = v17;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  sub_1B19FA070(v28, v16);
  v18 = swift_getDynamicType();
  v19 = sub_1B1D76F30(v18);
  if ((~v19 & 0xF000000000000007) == 0)
    goto LABEL_5;
  v20 = v19;
  sub_1B1A02864((uint64_t)v28, v8 + 80);
  *(_QWORD *)(v8 + 72) = v20;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v28);
  v29 = v10;
  v28[0] = swift_allocObject();
  *(_OWORD *)(v28[0] + 16) = xmmword_1B2244F70;
  sub_1B19FA070(v28, v10);
  v21 = swift_getDynamicType();
  v22 = sub_1B1D76F30(v21);
  if ((~v22 & 0xF000000000000007) != 0)
  {
    v23 = v22;
    sub_1B1A02864((uint64_t)v28, v8 + 120);
    *(_QWORD *)(v8 + 112) = v23;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v28);
    v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1B226D240;
    v25 = swift_allocObject();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = 4;
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_1B22847C0;
    *(_QWORD *)(v26 + 24) = result | 0x1000000000000000;
    *(_QWORD *)(v25 + 16) = v26 | 0x1000000000000000;
    *(_QWORD *)(v24 + 32) = v25 | 0x6000000000000000;
    *a1 = v2;
    a1[1] = v24;
    a1[2] = (uint64_t)&unk_1E63A6788;
    a1[3] = (uint64_t)&unk_1E63A6738;
    a1[4] = MEMORY[0x1E0DEE9D8];
    a1[5] = v8;
  }
  else
  {
LABEL_5:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

unint64_t sub_1B20DAE4C(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000049;
  else
    return 0xD00000000000004ALL;
}

uint64_t sub_1B20DAE84()
{
  return type metadata accessor for TRSFloat4x4MatrixNode(0);
}

uint64_t type metadata accessor for TRSFloat4x4MatrixNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF633D0);
}

uint64_t sub_1B20DAEA0()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B20DAEC4()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B20DAEE8()
{
  return swift_deallocObject();
}

_QWORD *sub_1B20DAEF8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  if (a1)
    v9 = a2 - (_QWORD)a1;
  else
    v9 = 0;
  ecs_stack_allocator_deallocate(a5, (unint64_t)a1, v9);
  v10 = ecs_stack_allocator_allocate((uint64_t)a5, a3, a4);
  v11 = v10;
  if (v10 != a1)
    memcpy(v10, a1, v9);
  return v11;
}

uint64_t sub_1B20DAF80(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1FFF0F4((uint64_t)v2);
  v3 = *((_QWORD *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1B20DF890(v5);
  *a1 = v2;
  return result;
}

void sub_1B20DAFEC(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;

  if (a1 <= 1)
    v2 = 1;
  else
    v2 = a1;
  v1[1] = (char *)v2;
  v3 = *v1;
  v4 = (char *)aligned_alloc(8uLL, 8 * v2);
  *v1 = v4;
  v5 = v1[2];
  if (((unint64_t)v5 & 0x8000000000000000) != 0)
  {
    sub_1B2229700();
    __break(1u);
  }
  else
  {
    if (v4 != v3 || v4 >= &v3[8 * (_QWORD)v5])
      memmove(v4, v3, 8 * (_QWORD)v5);
    free(v3);
  }
}

uint64_t sub_1B20DB09C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  __int16 *v17;
  _QWORD *v18;
  char *i;
  __int16 v20;
  char *v21;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v40;
  int v41;
  _QWORD *v42;
  char *v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t result;

  v2 = 1;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 8);
    v4 = *(__int16 **)(v1 + 40);
    v5 = v3 - 1;
    if ((uint64_t)v3 >= 1)
    {
      v6 = v5 & a1;
      v7 = v4[v5 & a1];
      if ((v7 & 1) == 0)
      {
        v2 = 0;
        goto LABEL_63;
      }
      if (v3 > 1)
      {
        if ((v4[(v6 + 1) & v5] & 1) == 0)
          goto LABEL_63;
        if (v3 >= 3)
          break;
      }
    }
LABEL_13:
    v10 = -(uint64_t)__clz(v3);
    if (v3 == -1)
      v11 = 1;
    else
      v11 = 1 << v10;
    *(_QWORD *)(v1 + 8) = v11;
    v13 = *(char **)(v1 + 24);
    v12 = *(_QWORD **)(v1 + 32);
    v14 = 80 << v10;
    if (v3 == -1)
      v15 = 80;
    else
      v15 = v14;
    *(_QWORD *)(v1 + 24) = aligned_alloc(8uLL, v15);
    *(_QWORD *)(v1 + 32) = aligned_alloc(8uLL, 8 * v11);
    v16 = aligned_alloc(8uLL, 2 * v11);
    bzero(v16, 2 * v11);
    *(_QWORD *)(v1 + 40) = v16;
    *(_QWORD *)(v1 + 16) = 0;
    v17 = v4;
    v18 = v12;
    for (i = v13; v3; --v3)
    {
      v20 = *v17++;
      if ((v20 & 1) != 0)
      {
        v21 = (char *)(*(_QWORD *)(v1 + 24) + 80 * sub_1B20DB09C(*v18));
        if (i != v21 || v21 >= i + 80)
          memmove(v21, i, 0x50uLL);
      }
      i += 80;
      ++v18;
    }
    free(v13);
    free(v12);
    free(v4);
  }
  if ((v4[(v6 + 2) & v5] & 1) != 0)
  {
    v8 = 3;
    while (v3 != v8)
    {
      v9 = v4[(v6 + v8++) & v5];
      if ((v9 & 1) == 0)
      {
        v2 = v8 - 1;
        if ((unint64_t)(v8 - 2) < 0xE)
          goto LABEL_63;
        v23 = v6 - 14;
        while (1)
        {
          v24 = v23 + v2;
          v25 = (unsigned __int16)v4[(v23 + v2) & v5];
          v26 = v25 >> 1;
          v27 = __clz(__rbit32((v25 >> 1) | 0x10000));
          v28 = v25 >= 2 ? v27 : 15;
          if (v28 >= 0xE)
            break;
          v29 = v24 + v28;
          LOBYTE(v30) = 14;
LABEL_45:
          v33 = (v2 + v6) & v5;
          v34 = v29 & v5;
          v4[v24 & v5] = (2 * (((1 << (v30 & 0xF)) | v26) ^ (1 << (v28 & 0xF)))) | 1;
          v4[v34] ^= 1u;
          v4[v33] |= 1u;
          v35 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)(v35 + 8 * v33) = *(_QWORD *)(v35 + 8 * v34);
          *(_QWORD *)(v35 + 8 * v34) = 0;
          v36 = *(_QWORD *)(v1 + 24);
          v37 = (char *)(v36 + 80 * v33);
          v38 = (char *)(v36 + 80 * v34);
          if (v33 != v34 || v37 >= v38 + 80)
            memmove(v37, v38, 0x50uLL);
          v2 = v28 - v6 + v24;
          if (v2 < 15)
          {
            v7 = v4[v6];
            goto LABEL_63;
          }
        }
        v30 = 14;
        while (v30 != -1)
        {
          v31 = (unsigned __int16)v4[++v24 & v5];
          v26 = v31 >> 1;
          v32 = __clz(__rbit32((v31 >> 1) | 0x10000));
          if (v31 >= 2)
            v28 = v32;
          else
            v28 = 15;
          if (--v30 > v28)
          {
            if (v30 != -1)
            {
              v29 = v28 + v24;
              goto LABEL_45;
            }
            break;
          }
        }
        v40 = __clz(v3);
        v41 = -v40;
        *(_QWORD *)(v1 + 8) = 1 << -(char)v40;
        v43 = *(char **)(v1 + 24);
        v42 = *(_QWORD **)(v1 + 32);
        *(_QWORD *)(v1 + 24) = aligned_alloc(8uLL, 80 << -(char)v40);
        *(_QWORD *)(v1 + 32) = aligned_alloc(8uLL, 8 << v41);
        v44 = aligned_alloc(8uLL, 2 << v41);
        bzero(v44, 2 << v41);
        v45 = 0;
        *(_QWORD *)(v1 + 40) = v44;
        *(_QWORD *)(v1 + 16) = 0;
        v46 = v43;
        do
        {
          if ((v4[v45] & 1) != 0)
          {
            v47 = (char *)(*(_QWORD *)(v1 + 24) + 80 * sub_1B20DB09C(v42[v45]));
            if (v46 != v47 || v47 >= v46 + 80)
              memmove(v47, v46, 0x50uLL);
          }
          ++v45;
          v46 += 80;
        }
        while (v3 != v45);
        free(v43);
        free(v42);
        free(v4);
        if (*(_BYTE *)v1 == 1)
        {
          sub_1B2229430();
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          result = sub_1B2229688();
          __break(1u);
        }
        else
        {
          *(_BYTE *)v1 = 1;
          result = sub_1B20DB09C(a1);
          *(_BYTE *)v1 = 0;
        }
        return result;
      }
    }
    goto LABEL_13;
  }
  v2 = 2;
LABEL_63:
  v4[v6] = (1 << ((v2 + 1) & 0xF)) | v7;
  result = (v2 + v6) & v5;
  v4[result] |= 1u;
  *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8 * result) = a1;
  ++*(_QWORD *)(v1 + 16);
  return result;
}

uint64_t sub_1B20DB5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_unknownObjectRetain();
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1B20E008C(v5, a1, a2);
  swift_bridgeObjectRelease_n();
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v2 + 8) = v6;
  return result;
}

void sub_1B20DB618(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = 0;
  a1[1] = v1;
}

uint64_t sub_1B20DB628(char *a1, char *a2)
{
  return sub_1B1F9A12C(*a1, *a2);
}

uint64_t sub_1B20DB634()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20DB6B0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20DB708()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20DB780@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B20DB78C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1752393069;
  if (*v1)
    v2 = 0x6C6169726574616DLL;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE900000000000073;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B20DB7C8()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6169726574616DLL;
  else
    return 1752393069;
}

uint64_t sub_1B20DB800@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B20DB80C()
{
  sub_1B20E0838();
  return sub_1B222A1D4();
}

uint64_t sub_1B20DB834()
{
  sub_1B20E0838();
  return sub_1B222A1E0();
}

uint64_t sub_1B20DB85C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B20E0650(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B20DB884(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B20E018C(a1, *(_QWORD *)(v1 + 8));
}

__n128 sub_1B20DB89C@<Q0>(__n128 *a1@<X8>)
{
  __n128 result;

  result.n128_u64[0] = 0xFFFFFFFFLL;
  result.n128_u64[1] = 0xFFFFFFFFLL;
  *a1 = result;
  return result;
}

uint64_t sub_1B20DB8A8(char *a1, char *a2)
{
  return sub_1B1F8FA30(*a1, *a2);
}

uint64_t sub_1B20DB8B4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20DB934()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20DB990()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20DBA0C@<X0>(char *a1@<X8>)
{
  return sub_1B1FC22E0(a1);
}

void sub_1B20DBA18(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x6C65646F6DLL;
  if (*v1)
    v2 = 0xD000000000000010;
  v3 = 0x80000001B2328850;
  if (!*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B20DBA58()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0x6C65646F6DLL;
}

uint64_t sub_1B20DBA94@<X0>(char *a1@<X8>)
{
  return sub_1B1FC23B8(a1);
}

uint64_t sub_1B20DBAA0()
{
  sub_1B20E087C();
  return sub_1B222A1D4();
}

uint64_t sub_1B20DBAC8()
{
  sub_1B20E087C();
  return sub_1B222A1E0();
}

uint64_t sub_1B20DBAF0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v13 = a3;
  sub_1B19F8E54(0, &qword_1EEF63410, (uint64_t (*)(void))sub_1B20E087C, (uint64_t)&type metadata for ModelRenderer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20E087C();
  sub_1B222A180();
  v15 = a2;
  v14 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v3)
  {
    v15 = v13;
    v14 = 1;
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B20DBC54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1B20E0464(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B20DBC88(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B20DBAF0(a1, *v1, v1[1]);
}

uint64_t sub_1B20DBCA0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TransformBucket()
{
  return objc_opt_self();
}

char *sub_1B20DBCEC(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;

  v5 = *(_QWORD *)(v4 + 32);
  result = *(char **)(v4 + 16);
  if (v5 == *(_QWORD *)(v4 + 24))
  {
    v7 = 2 * v5;
    if (v7 <= 1)
      v7 = 1;
    *(_QWORD *)(v4 + 24) = v7;
    v19 = a4;
    v17 = a2;
    v18 = a3;
    v16 = a1;
    result = (char *)reallocf(result, v7 << 6);
    a1 = v16;
    a2 = v17;
    a3 = v18;
    a4 = v19;
    *(_QWORD *)(v4 + 16) = result;
    v5 = *(_QWORD *)(v4 + 32);
  }
  v8 = (__n128 *)&result[64 * v5];
  *v8 = a1;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  *(_QWORD *)(v4 + 32) = v5 + 1;
  v9 = *(_QWORD *)(v4 + 56);
  if (v9)
  {
    result = *(char **)(v4 + 40);
    if (v9 == *(_QWORD *)(v4 + 48))
    {
      v10 = 2 * v9;
      if (v10 <= 1)
        v10 = 1;
      *(_QWORD *)(v4 + 48) = v10;
      result = (char *)reallocf(result, 16 * v10);
      *(_QWORD *)(v4 + 40) = result;
      v9 = *(_QWORD *)(v4 + 56);
    }
    __asm { FMOV            V0.4S, #1.0 }
    *(_OWORD *)&result[16 * v9] = _Q0;
    *(_QWORD *)(v4 + 56) = v9 + 1;
  }
  *(_BYTE *)(v4 + 64) = 1;
  return result;
}

__n128 sub_1B20DBDAC(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 result;
  __int128 v29;

  v6 = *(_QWORD *)(v5 + 56);
  v7 = *(_QWORD *)(v5 + 32);
  v8 = v7 - v6;
  if (v7 == v6)
  {
    v9 = *(_QWORD *)(v5 + 56);
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
    v29 = _Q0;
    do
    {
      v15 = *(void **)(v5 + 40);
      if (v6 == *(_QWORD *)(v5 + 48))
      {
        v16 = 2 * v6;
        if (2 * v6 <= 1)
          v16 = 1;
        *(_QWORD *)(v5 + 48) = v16;
        v15 = reallocf(v15, 16 * v16);
        _Q0 = v29;
        *(_QWORD *)(v5 + 40) = v15;
        v6 = *(_QWORD *)(v5 + 56);
      }
      *((_OWORD *)v15 + v6++) = _Q0;
      *(_QWORD *)(v5 + 56) = v6;
      --v8;
    }
    while (v8);
    v9 = *(_QWORD *)(v5 + 32);
  }
  v17 = *(char **)(v5 + 16);
  if (v9 == *(_QWORD *)(v5 + 24))
  {
    v18 = 2 * v9;
    if (v18 <= 1)
      v18 = 1;
    *(_QWORD *)(v5 + 24) = v18;
    v17 = (char *)reallocf(v17, v18 << 6);
    *(_QWORD *)(v5 + 16) = v17;
    v9 = *(_QWORD *)(v5 + 32);
  }
  v19 = (__n128 *)&v17[64 * v9];
  *v19 = a1;
  v19[1] = a2;
  v19[2] = a3;
  v19[3] = a4;
  *(_QWORD *)(v5 + 32) = v9 + 1;
  v20 = *(__n128 **)(v5 + 40);
  if (v6 == *(_QWORD *)(v5 + 48))
  {
    v21 = 2 * v6;
    if (2 * v6 <= 1)
      v21 = 1;
    *(_QWORD *)(v5 + 48) = v21;
    v20 = (__n128 *)reallocf(v20, 16 * v21);
    *(_QWORD *)(v5 + 40) = v20;
  }
  v22 = *(_QWORD *)(v5 + 56);
  result = a5;
  v20[v22] = a5;
  *(_QWORD *)(v5 + 56) = v22 + 1;
  *(_BYTE *)(v5 + 64) = 1;
  return result;
}

uint64_t sub_1B20DBEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  void *v4;
  void *v5;
  uint64_t v7;

  v1 = v0;
  v2 = v0 + 16;
  sub_1B20E09A0(v0 + 16, (uint64_t)&v7);
  swift_retain();
  sub_1B1BBF134(&v7);
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, -*(_QWORD *)(v0 + 176));
  swift_release();
  swift_release();
  v4 = *(void **)(v0 + 192);
  v5 = *(void **)(v1 + 200);
  free(*(void **)(v1 + 184));
  free(v4);
  free(v5);
  sub_1B20E09FC(v2);
  return v1;
}

uint64_t sub_1B20DBF88()
{
  sub_1B20DBEE4();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RenderBuckets()
{
  return objc_opt_self();
}

char *sub_1B20DBFC8(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  void *v18;
  uint64_t v19;
  uint64_t KeyPath;
  BOOL v22;
  uint64_t v27;

  v7 = v6;
  v8 = a2;
  v10 = (int)a2 | (unint64_t)(a1 << 32);
  v11 = v6[21] - 1;
  v12 = v11 & v10;
  v13 = *(unsigned __int16 *)(v6[25] + 2 * (v11 & v10));
  if (v13 >= 2)
  {
    while ((v13 & 2) == 0 || *(_QWORD *)(v6[24] + 8 * (v12 & v11)) != v10)
    {
      ++v12;
      v22 = v13 >= 4;
      v13 >>= 1;
      if (!v22)
        goto LABEL_2;
    }
    if ((v12 & v11) != 0xFFFFFFFFFFFFFFFFLL)
      return sub_1B20DBCEC(a3, a4, a5, a6);
  }
LABEL_2:
  v14 = HIDWORD(a2);
  v15 = sub_1B20DB09C(v10);
  v16 = v7[23];
  v17 = (__n128 *)aligned_alloc(0x10uLL, 0x1000uLL);
  v18 = aligned_alloc(0x10uLL, 0x400uLL);
  v19 = v16 + 80 * v15;
  *(_DWORD *)v19 = v8;
  *(_DWORD *)(v19 + 4) = v14;
  *(_QWORD *)(v19 + 8) = a1;
  *(_QWORD *)(v19 + 16) = v17;
  *(_QWORD *)(v19 + 24) = 64;
  *(_QWORD *)(v19 + 40) = v18;
  *(_OWORD *)(v19 + 48) = xmmword_1B22BA560;
  *(_QWORD *)(v19 + 72) = 0;
  *v17 = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  *(_QWORD *)(v19 + 32) = 1;
  *(_BYTE *)(v19 + 64) = 1;
  sub_1B20E09A0((uint64_t)(v7 + 2), (uint64_t)&v27);
  swift_retain();
  sub_1B1BBF134(&v27);
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  return (char *)swift_release();
}

double sub_1B20DC158(uint64_t a1, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *v18;
  __n128 *v19;
  uint64_t v20;
  uint64_t KeyPath;
  double result;
  BOOL v23;
  uint64_t v29;

  v8 = v7;
  v9 = a2;
  v11 = (int)a2 | (unint64_t)(a1 << 32);
  v12 = v7[21] - 1;
  v13 = v12 & v11;
  v14 = *(unsigned __int16 *)(v7[25] + 2 * (v12 & v11));
  if (v14 < 2)
    goto LABEL_2;
  while ((v14 & 2) == 0 || *(_QWORD *)(v7[24] + 8 * (v13 & v12)) != v11)
  {
    ++v13;
    v23 = v14 >= 4;
    v14 >>= 1;
    if (!v23)
      goto LABEL_2;
  }
  if ((v13 & v12) == 0xFFFFFFFFFFFFFFFFLL)
  {
LABEL_2:
    v15 = HIDWORD(a2);
    v16 = sub_1B20DB09C(v11);
    v17 = v8[23];
    v18 = (__n128 *)aligned_alloc(0x10uLL, 0x1000uLL);
    v19 = (__n128 *)aligned_alloc(0x10uLL, 0x400uLL);
    v20 = v17 + 80 * v16;
    *(_DWORD *)v20 = v9;
    *(_DWORD *)(v20 + 4) = v15;
    *(_QWORD *)(v20 + 8) = a1;
    *(_QWORD *)(v20 + 16) = v18;
    *(_QWORD *)(v20 + 24) = 64;
    *(_QWORD *)(v20 + 40) = v19;
    *(_QWORD *)(v20 + 48) = 64;
    *(_QWORD *)(v20 + 72) = 0;
    *v18 = a3;
    v18[1] = a4;
    v18[2] = a5;
    v18[3] = a6;
    *(_QWORD *)(v20 + 32) = 1;
    *v19 = a7;
    *(_QWORD *)(v20 + 56) = 1;
    *(_BYTE *)(v20 + 64) = 1;
    sub_1B20E09A0((uint64_t)(v8 + 2), (uint64_t)&v29);
    swift_retain();
    sub_1B1BBF134(&v29);
    KeyPath = swift_getKeyPath();
    sub_1B1DAC77C(KeyPath, 1);
    swift_release();
    swift_release();
  }
  else
  {
    *(_QWORD *)&result = sub_1B20DBDAC(a3, a4, a5, a6, a7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1B20DC2EC(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  ValueMetadata *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v35 = result;
  v3 = *(_QWORD *)(v2 + 168);
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v44 + 200);
    v41 = *(_QWORD *)(v2 + 168);
    v42 = v5;
    do
    {
      if ((*(_WORD *)(v5 + 2 * v4) & 1) == 0)
        goto LABEL_6;
      v6 = *(_QWORD *)(v44 + 184);
      if (*(uint64_t *)(v6 + 80 * v4 + 32) < 1)
        goto LABEL_6;
      v40 = *(_QWORD *)(v6 + 80 * v4 + 32);
      v7 = *a2;
      v8 = (int *)(v6 + 80 * v4);
      v9 = a2[2];
      v11 = v8[2];
      v10 = v8[3];
      v12 = v8[1];
      v13 = *v8;
      v14 = *((_QWORD *)v8 + 2);
      v15 = (const void *)*((_QWORD *)v8 + 5);
      v16 = *((_QWORD *)v8 + 7);
      v17 = swift_retain();
      if ((_DWORD)v13 != -1 || v12 != 0)
      {
        v36 = v10;
        v37 = v15;
        v38 = v9;
        v39 = v7;
        if ((v13 & 0x80000000) == 0)
        {
          v19 = v17;
          if (*(_QWORD *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v13)
          {
            v20 = *(_QWORD *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
            if (v12 == -1 || *(_DWORD *)(v20 + 12 * (int)v13 + 8) == v12)
            {
              v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 80) + 8 * *(__int16 *)(v20 + 12 * (int)v13 + 6) + 32)
                              + 16);
              v23 = *(_QWORD *)(v22 + 128);
              if (*(_QWORD *)(v23 + 16))
              {
                v24 = sub_1B1DC3AC8((uint64_t)&type metadata for MeshModel);
                if ((v25 & 1) != 0)
                {
                  v26 = *(ValueMetadata **)(*(_QWORD *)(v22 + 24)
                                          + 16 * *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24)
                                          + 32);
                  result = swift_release();
                  if (v26 != &type metadata for MeshModel)
                    goto LABEL_5;
                  v27 = (_QWORD *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                  v28 = *(_QWORD *)(v19 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
                  swift_retain();
                  if (v28 > v13)
                  {
                    v29 = *v27 + 12 * (int)v13;
                    v30 = *(__int16 *)(v29 + 4);
                    if (v12 == -1 || *(_DWORD *)(v29 + 8) == v12)
                    {
                      v31 = *(_QWORD *)(*(_QWORD *)(v19 + 136) + 8 * *(int *)(*v27 + 12 * (int)v13) + 32);
                      v32 = *(_QWORD *)(v31 + 48);
                      v33 = *(_QWORD *)(v32 + 16);
                      if (v33)
                      {
                        v34 = (_QWORD *)(v32 + 56);
                        while ((ValueMetadata *)*(v34 - 3) != &type metadata for MeshModel)
                        {
                          v34 += 5;
                          if (!--v33)
                            goto LABEL_4;
                        }
                        sub_1B1D61ED8((uint64_t *)(*(_QWORD *)(v31 + 128) + *v34 + 16 * v30), v39, v19, v38, v11 | (v36 << 32), v14, v40, v37, v16, 0, v40, v35 | ((HIDWORD(v35) & 1) << 32));
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_4:
      result = swift_release();
LABEL_5:
      v3 = v41;
      v5 = v42;
LABEL_6:
      ++v4;
    }
    while (v4 != v3);
  }
  return result;
}

_QWORD *sub_1B20DC568(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD v29[19];

  v2 = v1[22];
  v3 = ecs_stack_allocator_allocate((uint64_t)a1, 8 * v2, 8);
  v4 = v1[21];
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = v1[25];
    v8 = 72;
    do
    {
      if ((*(_WORD *)(v7 + 2 * v6) & 1) != 0)
      {
        v10 = v1[23];
        v11 = *(_QWORD *)(v1[24] + 8 * v6);
        v12 = *(_QWORD *)(v10 + v8);
        if ((*(_BYTE *)(v10 + v8 - 8) & 1) == 0)
          *(_QWORD *)(v10 + v8) = ++v12;
        if (v12 < 61)
        {
          *(_BYTE *)(v10 + v8 - 8) = 0;
          v9 = v10 + v8;
          *(_QWORD *)(v9 - 40) = 0;
          *(_QWORD *)(v9 - 16) = 0;
        }
        else
        {
          v13 = v10 + v8;
          v14 = *(void **)(v13 - 32);
          free(*(void **)(v13 - 56));
          free(v14);
          if (v5 == v2)
          {
            if (2 * v2 <= 1)
              v15 = 1;
            else
              v15 = 2 * v2;
            v3 = sub_1B20DAEF8(v3, (uint64_t)&v3[v2], 8 * v15, 8, a1);
            v2 = v15;
          }
          v3[v5++] = v11;
        }
      }
      ++v6;
      v8 += 80;
    }
    while (v4 != v6);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v17 = v3[i];
        sub_1B20E09A0((uint64_t)(v1 + 2), (uint64_t)v29);
        v18 = v29[1];
        swift_retain();
        sub_1B1BBF134(v29);
        if (*(_QWORD *)(v18 + OBJC_IVAR____TtC3VFX13EntityManager_counters))
          vfx_counters.add(_:_:)(*(_DWORD *)(v18 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 92), -v1[22]);
        swift_release();
        v19 = v1[21] - 1;
        v20 = v19 & v17;
        v21 = v1[25];
        v22 = *(unsigned __int16 *)(v21 + 2 * (v19 & v17));
        if (v22 >= 2)
        {
          v23 = 0;
          v24 = *(_WORD *)(v21 + 2 * (v19 & v17));
          while (1)
          {
            if ((v24 & 2) != 0)
            {
              v26 = (v20 + v23) & v19;
              if (*(_QWORD *)(v1[24] + 8 * v26) == v17)
                break;
            }
            v25 = v24;
            v24 >>= 1;
            ++v23;
            if (v25 < 4)
              goto LABEL_17;
          }
          *(_WORD *)(v21 + 2 * v20) = (1 << ((v23 + 1) & 0xF)) ^ v22;
          *(_WORD *)(v21 + 2 * v26) ^= 1u;
          --v1[22];
        }
LABEL_17:
        ;
      }
    }
  }
  return ecs_stack_allocator_deallocate(a1, (unint64_t)v3, 8 * v2);
}

void sub_1B20DC794()
{
  void **v0;
  void *v1;

  v1 = *v0;
  type metadata accessor for RenderBuckets();
  swift_arrayDestroy();
  free(v1);
}

double sub_1B20DC7CC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = aligned_alloc(8uLL, 8uLL);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 8) = xmmword_1B2246910;
  return result;
}

uint64_t sub_1B20DC804()
{
  uint64_t inited;
  _BYTE v2[40];
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1B15354(1, 1, (uint64_t)v2);
  swift_release();
  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAE50, (void (*)(uint64_t))sub_1B19F66EC);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for FrustumCulled;
  *(_QWORD *)(inited + 40) = &off_1E637AEE0;
  *(_QWORD *)(inited + 48) = &type metadata for LODCulled;
  *(_QWORD *)(inited + 56) = &off_1E63C3FF0;
  sub_1B1B44110(v3, inited);
  swift_setDeallocating();
  xmmword_1ED4D0C50 = v3[0];
  *(_OWORD *)&qword_1ED4D0C60 = v3[1];
  qword_1ED4D0C70 = v4;
  return sub_1B19ED720((uint64_t)v2);
}

uint64_t sub_1B20DC950()
{
  uint64_t inited;
  _BYTE v2[40];
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1B15354(1, 1, (uint64_t)v2);
  swift_release();
  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAE50, (void (*)(uint64_t))sub_1B19F66EC);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for LODCulled;
  *(_QWORD *)(inited + 40) = &off_1E63C3FF0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldAABB;
  *(_QWORD *)(inited + 56) = &off_1E63C6040;
  sub_1B1B44110(v3, inited);
  swift_setDeallocating();
  xmmword_1ED4D0C78 = v3[0];
  unk_1ED4D0C88 = v3[1];
  qword_1ED4D0C98 = v4;
  return sub_1B19ED720((uint64_t)v2);
}

uint64_t sub_1B20DCA9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;

  v2 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F22258((uint64_t)&type metadata for MeshRenderSystemState, (uint64_t)&off_1E63A3450, v2);
  swift_release();
  if (qword_1ED4B8DF8 != -1)
    swift_once();
  v3 = xmmword_1ED4D0C50;
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  swift_release_n();
  if (qword_1ED4B8E00 != -1)
    swift_once();
  v7 = xmmword_1ED4D0C78;
  swift_getObjectType();
  v8 = sub_1B204D6E4();
  v9 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  sub_1B1E8F784(a1, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v8, v7);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  swift_release_n();
  swift_getObjectType();
  return sub_1B204D6E4();
}

uint64_t sub_1B20DCCA4(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  os_unfair_lock_s *v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD v44[12];
  _OWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  _BYTE v54[40];
  _OWORD v55[2];
  uint64_t v56;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    v1 = (_QWORD *)result;
    v2 = *(_QWORD *)(result + 176);
    swift_retain();
    swift_retain();
    v3 = sub_1B1F2173C(v2);
    v5 = v4;
    swift_release();
    if ((v5 & 1) != 0)
    {
      return swift_release();
    }
    else
    {
      if (qword_1ED4B8E00 != -1)
        swift_once();
      v55[0] = xmmword_1ED4D0C78;
      v55[1] = unk_1ED4D0C88;
      v56 = qword_1ED4D0C98;
      sub_1B1E8FCE4((uint64_t)v1, (uint64_t)v55, 0x200000000, v44);
      v6 = sub_1B1A18378((uint64_t)v44, (uint64_t)v45, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (*(_QWORD *)&v45[0])
      {
        if (v51 >= 1)
        {
          v36 = v48;
          if (v48)
          {
            v42 = v50[4];
            v41 = *(unsigned __int8 *)(v49 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v52[0] = v45[0];
            v52[1] = v45[1];
            v53 = v46;
            v33 = (uint64_t)(v50 + 6);
            v34 = v47;
            v43 = v50;
            v32 = v50 + 8;
            swift_retain();
            swift_retain();
            swift_retain();
            v8 = 0;
            v35 = v1;
            v9 = 0;
            do
            {
              v39 = v8;
              v40 = v9;
              v10 = *(_QWORD *)(v34 + 48 * v8 + 40);
              if (v41)
              {
                v11 = *(os_unfair_lock_s **)(v10 + 376);
                swift_retain();
                os_unfair_lock_lock(v11);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v42);
              sub_1B1A18378(v33, (uint64_t)v54, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
              v12 = v43[4];
              v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v43[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
              v43[7] = v13;
              v32[1] = 0;
              v32[2] = 0;
              *v32 = 0;
              swift_release();
              v14 = *(_DWORD *)(v10 + 24);
              v15 = (os_unfair_lock_s *)v1[16];
              swift_retain();
              os_unfair_lock_lock(v15);
              v38 = *(_DWORD *)(v10 + 188);
              v16 = (_QWORD *)v1[12];
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v1[12] = v16;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v16 = sub_1B1FFECDC(v16);
                v1[12] = v16;
              }
              v37 = v16 + 4;
              v18 = (uint64_t)&v16[5 * v14 + 4];
              v21 = *(_QWORD *)(v18 + 16);
              v20 = v18 + 16;
              v19 = v21;
              if (v3 >= *(_QWORD *)(v21 + 16))
              {
                sub_1B2229520();
                sub_1B2229538();
                do
                {
                  sub_1B2229520();
                  sub_1B2229568();
                  sub_1B2229574();
                  sub_1B2229538();
                  v19 = *(_QWORD *)v20;
                }
                while ((unint64_t)v3 >= *(_QWORD *)(*(_QWORD *)v20 + 16));
              }
              v22 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)v20 = v19;
              if ((v22 & 1) == 0)
                sub_1B216D614();
              v23 = v19 + 8 * v3;
              v26 = *(_QWORD *)(v23 + 32);
              v24 = (uint64_t *)(v23 + 32);
              v25 = v26;
              v27 = swift_isUniquelyReferenced_nonNull_native();
              *v24 = v26;
              if ((v27 & 1) == 0)
              {
                sub_1B202AFB0(0, *(_QWORD *)(v25 + 16) + 1, 1);
                v25 = *v24;
              }
              v29 = *(_QWORD *)(v25 + 16);
              v28 = *(_QWORD *)(v25 + 24);
              if (v29 >= v28 >> 1)
              {
                sub_1B202AFB0(v28 > 1, v29 + 1, 1);
                v25 = *v24;
              }
              *(_QWORD *)(v25 + 16) = v29 + 1;
              v30 = v25 + 24 * v29;
              *(_DWORD *)(v30 + 32) = v38;
              *(_QWORD *)(v30 + 40) = 0;
              *(_QWORD *)(v30 + 48) = 0;
              sub_1B2229538();
              LOBYTE(v37[5 * v14 + 3]) = 1;
              v1 = v35;
              os_unfair_lock_unlock((os_unfair_lock_t)v35[16]);
              swift_release();
              v9 = v40;
              sub_1B1F05D48(v43, (unsigned __int16 **)v52, (uint64_t)v54);
              sub_1B1F03804((char *)v10);
              ecs_stack_allocator_pop_snapshot(v42);
              if ((v41 & 1) != 0)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
              }
              swift_release();
              v8 = v39 + 1;
            }
            while (v39 + 1 != v36);
            sub_1B1A086DC(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
          }
        }
        v6 = (uint64_t)sub_1B1A086DC(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
      MEMORY[0x1E0C80A78](v6, v7);
      v31 = (_QWORD *)v1[22];
      swift_retain();
      sub_1B1F22244((uint64_t)&type metadata for MeshRenderSystemState, (uint64_t)&off_1E63A3450, v31, (void (*)(uint64_t))sub_1B20E08C0);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

_QWORD *sub_1B20DD1B8(uint64_t **a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  char *v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  char *v57;
  unsigned int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t ObjectType;
  uint64_t (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  _QWORD *result;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned __int16 *v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[48];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[10];
  _QWORD v98[12];
  _QWORD v99[12];
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  _QWORD *v118;

  if (qword_1ED4B8DF8 != -1)
    swift_once();
  v8 = 1 << a3;
  if (a3 >= 0x40)
    v8 = 0;
  if (a3 > 0x40)
    v8 = 0;
  v112 = xmmword_1ED4D0C50;
  v113 = DWORD2(xmmword_1ED4D0C50);
  v114 = BYTE12(xmmword_1ED4D0C50);
  v115 = qword_1ED4D0C60;
  v116 = byte_1ED4D0C68;
  v117 = v8;
  swift_retain();
  v73 = a2;
  sub_1B1E8FCE4(a2, (uint64_t)&v112, 0x200000000, v98);
  sub_1B1A18378((uint64_t)v98, (uint64_t)v99, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v89 = (unsigned __int16 *)v99[0];
  if (v99[0])
  {
    v9 = (_QWORD *)v99[9];
    v76 = v99[5];
    v77 = v99[8];
    v78 = v99[7];
    v79 = v99[10];
  }
  else
  {
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v9 = 0;
  }
  swift_release();
  v10 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v11 = a1[2];
  v118 = v9;
  if (v11)
  {
    v12 = *a1;
    v13 = *(_QWORD **)(*(_QWORD *)(v10 + 8) + 32);
    swift_retain();
    sub_1B20DC568(v13);
    swift_release();
  }
  else
  {
    type metadata accessor for RenderBuckets();
    v14 = swift_allocObject();
    v15 = aligned_alloc(8uLL, 0xA00uLL);
    v16 = aligned_alloc(8uLL, 0x100uLL);
    v17 = aligned_alloc(8uLL, 0x40uLL);
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 144) = 0u;
    *v17 = 0u;
    v17[1] = 0u;
    v17[2] = 0u;
    v17[3] = 0u;
    *(_BYTE *)(v14 + 160) = 0;
    *(_OWORD *)(v14 + 168) = xmmword_1B22BA570;
    *(_QWORD *)(v14 + 184) = v15;
    *(_QWORD *)(v14 + 192) = v16;
    *(_QWORD *)(v14 + 200) = v17;
    if (a1[1])
    {
      v18 = 0;
    }
    else
    {
      sub_1B20DAFEC(0);
      v18 = a1[2];
    }
    v12 = *a1;
    (*a1)[(_QWORD)v18] = v14;
    a1[2] = (uint64_t *)((char *)v18 + 1);
    v9 = v118;
  }
  v19 = *v12;
  v20 = *(_QWORD *)(v10 + 8);
  v102 = 0;
  v100 = 0u;
  v101 = 0u;
  memset(&v92[8], 0, 40);
  v93 = xmmword_1B2246910;
  v94 = 1uLL;
  *(_QWORD *)&v95 = 0;
  *((_QWORD *)&v95 + 1) = 1;
  v96 = 0uLL;
  v92[0] = 3;
  *(_QWORD *)&v90 = a4;
  *((_QWORD *)&v90 + 1) = v73;
  *(_QWORD *)&v91 = v20;
  *((_QWORD *)&v91 + 1) = 1;
  swift_retain();
  sub_1B1BBF08C((uint64_t)&v100, (uint64_t)&v92[8]);
  v97[6] = v94;
  v97[7] = v95;
  v97[8] = v96;
  v97[2] = *(_OWORD *)v92;
  v97[3] = *(_OWORD *)&v92[16];
  v97[4] = *(_OWORD *)&v92[32];
  v97[5] = v93;
  v97[0] = v90;
  v97[1] = v91;
  sub_1B20E08DC((uint64_t)v97, v19 + 16);
  swift_release();
  if (v89 && v79 > 0 && v78)
  {
    v72 = a4;
    v21 = v9[4];
    v88 = *(unsigned __int8 *)(v77 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    sub_1B1A086DC(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
    sub_1B1A086DC(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
    v22 = 0;
    v74 = v9 + 8;
    v80 = a1;
    v75 = v21;
    while (1)
    {
      v87 = v22;
      v23 = (unsigned int *)(v76 + 48 * v22);
      v24 = *v23;
      v25 = v23[1];
      v26 = v23[2];
      v27 = *((_QWORD *)v23 + 2);
      v28 = *((_QWORD *)v23 + 3);
      v29 = *((_QWORD *)v23 + 4);
      v30 = *((_QWORD *)v23 + 5);
      if (v88)
      {
        v31 = *(os_unfair_lock_s **)(v30 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v31);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v30 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v21);
      v84 = v9[7];
      v85 = v9[6];
      v82 = v9[9];
      v83 = v9[8];
      v81 = v9[10];
      v32 = v9[4];
      v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v34 = ecs_stack_allocator_allocate(v32, 48 * v33, 8);
      v118[6] = v34;
      v118[7] = v33;
      v9 = v118;
      v74[1] = 0;
      v74[2] = 0;
      *v74 = 0;
      swift_release();
      *(_QWORD *)&v100 = v77;
      v86 = v30;
      *((_QWORD *)&v100 + 1) = v30;
      *(_QWORD *)&v101 = v9;
      *((_QWORD *)&v101 + 1) = v26;
      v102 = (v25 - v24 + v26);
      v103 = v79;
      v104 = v24;
      v105 = v25;
      v106 = 0;
      v107 = 0;
      v108 = 1;
      v109 = v27;
      v110 = v28;
      v111 = v29;
      a1 = v80;
      sub_1B20DDA78(&v100);
      v35 = v9[6];
      v36 = v9[8];
      if (!v36)
      {
        v62 = v9[7];
        v63 = (_QWORD *)v9[4];
        goto LABEL_62;
      }
      for (i = 0; i != v36; ++i)
      {
        v39 = (uint64_t *)(v35 + 48 * i);
        v40 = *v39;
        v41 = (void (*)(uint64_t))v39[4];
        v42 = v9[9];
        if (v42)
          v43 = v40 == v42;
        else
          v43 = 0;
        if (v43 || !v89[11])
          goto LABEL_26;
        v44 = v89[9];
        v45 = (_QWORD *)((char *)v89 + v89[8] + 41);
        v46 = v39[2];
        v47 = v45;
        v48 = v44 >> 4;
        v49 = (char *)v89 + 41;
        if (v44 >= 0x10)
        {
          while (*v47 != v40)
          {
            ++v49;
            v47 += 2;
            if (!--v48)
              goto LABEL_41;
          }
          v50 = v49[v89[10]];
          v51 = v50 > 5;
          v52 = (1 << v50) & 0x23;
          if (v51 || v52 == 0)
          {
LABEL_26:
            v38 = swift_retain();
            v41(v38);
            swift_release();
            goto LABEL_27;
          }
        }
LABEL_41:
        if (swift_conformsToProtocol2())
          v54 = v46;
        else
          v54 = 0;
        if (v54)
        {
          if (v44 < 0x10)
            goto LABEL_26;
          v55 = v45;
          v56 = v44 >> 4;
          v57 = (char *)v89 + 41;
          while (*v55 != v54)
          {
            ++v57;
            v55 += 2;
            if (!--v56)
              goto LABEL_54;
          }
          v58 = v57[v89[10]];
          v51 = v58 > 5;
          v59 = (1 << v58) & 0x23;
          if (v51 || v59 == 0)
            goto LABEL_26;
LABEL_54:
          v61 = 16 * (v44 >> 4);
          while (*v45 != v54)
          {
            v45 += 2;
            v61 -= 16;
            if (!v61)
              goto LABEL_26;
          }
        }
LABEL_27:
        v9 = v118;
      }
      v62 = v118[7];
      v35 = v118[6];
      v63 = (_QWORD *)v118[4];
      if ((uint64_t)v118[8] >= 1)
        swift_arrayDestroy();
      a1 = v80;
LABEL_62:
      ecs_stack_allocator_deallocate(v63, v35, 48 * v62);
      v9[6] = v85;
      v9[7] = v84;
      v9[8] = v83;
      v9[9] = v82;
      v9[10] = v81;
      sub_1B1F03804((char *)v86);
      v21 = v75;
      ecs_stack_allocator_pop_snapshot(v75);
      if ((v88 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v86 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v86 + 376));
      }
      swift_release();
      v22 = v87 + 1;
      if (v87 + 1 == v78)
      {
        sub_1B1A086DC(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        sub_1B1A086DC(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        a4 = v72;
        break;
      }
    }
  }
  sub_1B1A18378(*(_QWORD *)(v73 + OBJC_IVAR____TtC3VFX13EntityManager_renderer) + 624, (uint64_t)&v90, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  sub_1B1A18378((uint64_t)&v90, (uint64_t)v97, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
  if (sub_1B1B3C438((uint64_t *)v97) == 1)
    goto LABEL_73;
  v64 = *((_QWORD *)&v97[0] + 1);
  ObjectType = swift_getObjectType();
  v66 = *(uint64_t (**)(uint64_t, uint64_t))(v64 + 144);
  swift_unknownObjectRetain();
  v67 = v66(ObjectType, v64);
  swift_unknownObjectRelease();
  if (BYTE4(v67))
  {
    v70 = v73;
    if (BYTE4(v67) == 2)
    {
      v68 = 0;
      v69 = 1;
      goto LABEL_70;
    }
LABEL_73:
    result = (_QWORD *)sub_1B2229688();
    __break(1u);
    return result;
  }
  v68 = v67;
  v69 = v67 == 0;
  v70 = v73;
LABEL_70:
  if ((*(_BYTE *)(v70 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) & 1) == 0)
    sub_1B20DDC74(0, a4, v70, (uint64_t)a1, v68 | ((unint64_t)v69 << 32));
  return sub_1B1A086DC(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

unint64_t sub_1B20DDA78(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  uint64_t v18;
  uint64_t *v19;
  __n128 *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v29;

  v2 = (uint64_t *)a1[11];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[1];
  v6 = a1[2];
  v7 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v2, v3, v4, v6);
  v8 = sub_1B1A12038((uint64_t)&type metadata for ModelRenderer, (uint64_t)&off_1E637B750, v2, v3, v4, v6);
  result = sub_1B1A10AA4(*(_QWORD *)(v5 + 40), (uint64_t)&type metadata for Color, &v29);
  if (v29 == 1)
  {
    swift_retain();
    v10 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v2, v3, v4, v6);
    v11 = a1[6];
    v12 = a1[7];
    v13 = v12 - v11;
    if (v12 != v11)
    {
      v17 = (__n128 *)(v7 + (v11 << 6) + 32);
      v18 = 16 * v11;
      v19 = (uint64_t *)(v18 + v8 + 8);
      v20 = (__n128 *)(v10 + v18);
      do
      {
        v21 = *((unsigned int *)v19 - 2);
        v22 = *((unsigned int *)v19 - 1);
        if ((_DWORD)v21 != -1 || (_DWORD)v22 != 0)
          sub_1B20DC158(*v19, v21 | (v22 << 32), v17[-2], v17[-1], *v17, v17[1], *v20);
        v17 += 4;
        v19 += 2;
        ++v20;
        --v13;
      }
      while (v13);
    }
    return swift_release();
  }
  v15 = a1[6];
  v14 = a1[7];
  v16 = v14 - v15;
  if (v14 != v15)
  {
    swift_retain();
    v24 = (__n128 *)(v7 + (v15 << 6) + 32);
    v25 = (uint64_t *)(v8 + 16 * v15 + 8);
    do
    {
      v26 = *((unsigned int *)v25 - 2);
      v27 = *((unsigned int *)v25 - 1);
      if ((_DWORD)v26 != -1 || (_DWORD)v27 != 0)
        sub_1B20DBFC8(*v25, v26 | (v27 << 32), v24[-2], v24[-1], *v24, v24[1]);
      v24 += 4;
      v25 += 2;
      --v16;
    }
    while (v16);
    return swift_release();
  }
  return result;
}

_QWORD *sub_1B20DDC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  _BYTE v10[48];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];
  uint64_t v16;
  _OWORD v17[9];

  v6 = *(_QWORD *)(8 * a1 + *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues) + 8);
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(&v10[8], 0, 40);
  v11 = xmmword_1B2246910;
  v12 = 1uLL;
  *(_QWORD *)&v13 = 0;
  *((_QWORD *)&v13 + 1) = 1;
  v14 = 0uLL;
  v10[0] = 3;
  *(_QWORD *)&v8 = a2;
  *((_QWORD *)&v8 + 1) = a3;
  *(_QWORD *)&v9 = v6;
  *((_QWORD *)&v9 + 1) = 1;
  sub_1B1BBF08C((uint64_t)v15, (uint64_t)&v10[8]);
  v17[6] = v12;
  v17[7] = v13;
  v17[8] = v14;
  v17[2] = *(_OWORD *)v10;
  v17[3] = *(_OWORD *)&v10[16];
  v17[4] = *(_OWORD *)&v10[32];
  v17[5] = v11;
  v17[0] = v8;
  v17[1] = v9;
  swift_retain();
  sub_1B20DC2EC(a5 | ((HIDWORD(a5) & 1) << 32), (uint64_t *)v17);
  swift_release();
  return sub_1B1BBF134(v17);
}

uint64_t type metadata accessor for MeshRenderSystem()
{
  return objc_opt_self();
}

const char *sub_1B20DDDA0()
{
  return "MeshRenderSystem";
}

uint64_t sub_1B20DDDB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  swift_release_n();
  swift_getObjectType();
  return sub_1B204D6E4();
}

_QWORD *sub_1B20DDEA4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  _QWORD *v46;
  size_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  double v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  void *v74;
  _QWORD *v75;
  void *v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t *v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  _QWORD *v99;
  _OWORD v100[2];
  uint64_t v101;
  void *v102;
  __int128 v103;
  __int128 v104;
  _OWORD v105[3];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[73];
  uint64_t v120[21];
  _OWORD v121[5];
  uint64_t v122;
  _QWORD v123[12];
  _OWORD v124[2];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  _OWORD v134[2];
  uint64_t v135;
  _OWORD v136[2];
  uint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  _OWORD v152[2];
  uint64_t v153;

  v2 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
  v3 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v3)
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 272) + 24);
    if (v4 == 2)
      goto LABEL_68;
    if ((v4 & 1) == 0)
      return result;
    v5 = (uint64_t)result;
    v6 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
    v7 = *(_BYTE *)(v3 + 536) ? 0 : 0x4000;
    swift_retain();
    swift_retain();
    sub_1B20621D0(v121);
    v96 = v121[1];
    v98 = v121[0];
    v92 = v121[3];
    v94 = v121[2];
    v89 = v121[4];
    v8 = v122;
    swift_release();
    v138 = v7;
    v139 = v98;
    v140 = v96;
    v141 = v94;
    v142 = v92;
    v143 = v89;
    v144 = v8;
    sub_1B1A18378(v3 + 624, (uint64_t)v119, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    sub_1B1A18378((uint64_t)v119, (uint64_t)v120, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    if (sub_1B1B3C438(v120) == 1)
    {
LABEL_68:
      result = (_QWORD *)sub_1B2229688();
      __break(1u);
      return result;
    }
    v9 = v120[1];
    ObjectType = swift_getObjectType();
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 144);
    swift_unknownObjectRetain();
    v12 = v11(ObjectType, v9);
    swift_unknownObjectRelease();
    v13 = *(_OWORD *)(v1 + 32);
    v152[0] = *(_OWORD *)(v1 + 16);
    v152[1] = v13;
    v153 = *(_QWORD *)(v1 + 48);
    sub_1B1E8FCE4(v5, (uint64_t)v152, v12 & 0xFFFFFFFFFFLL, v123);
    sub_1B1A18378((uint64_t)v123, (uint64_t)v124, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (!*(_QWORD *)&v124[0])
      return (_QWORD *)swift_release();
    v131 = v124[0];
    v132 = v124[1];
    v95 = v126;
    v133 = v125;
    v97 = v127;
    v14 = v128;
    v15 = v129;
    v16 = v5;
    v17 = v130;
    swift_retain();
    v18 = sub_1B2063514(v6);
    swift_release();
    v19 = sub_1B2229454();
    v76 = v18;
    sub_1B1BA77BC(v19, v20, v18);
    swift_bridgeObjectRelease();
    v78 = v16;
    v21 = *(_QWORD *)(v16 + v2);
    if (v21)
    {
      v22 = **(_QWORD **)(v21 + 496);
      swift_retain();
      if (!v22)
      {
        if (*(_QWORD *)(v21 + 376))
        {
          v71 = swift_dynamicCastObjCProtocolConditional();
          if (v71)
          {
            v72 = (void *)v71;
            swift_unknownObjectRetain();
            v73 = objc_msgSend(v72, sel_renderCommandEncoder);
            *(_QWORD *)&v110 = 0x646F636E45627573;
            *((_QWORD *)&v110 + 1) = 0xEB000000005B7265;
            *(_QWORD *)&v103 = 0;
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v74 = (void *)sub_1B2228728();
            swift_bridgeObjectRelease();
            objc_msgSend(v73, sel_setLabel_, v74);

            v75 = *(_QWORD **)(v21 + 496);
            *v75 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v73);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }
        }
      }
      if (**(_QWORD **)(v21 + 496))
      {
        v23 = swift_getObjectType();
        swift_unknownObjectRetain();
        sub_1B1E125C8(v78, v23);
        swift_unknownObjectRelease();
      }
      swift_release();
    }
    v87 = v3;
    v99 = v15;
    if (*(_QWORD *)(v3 + 376))
    {
      v102 = &unk_1EF028DD0;
      if (swift_dynamicCastObjCProtocolConditional())
      {
        if (v17 > 0)
        {
          if (v97)
          {
            v24 = v15[4];
            v25 = *(_BYTE *)(v14 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v134[0] = v131;
            v134[1] = v132;
            v135 = v133;
            v81 = (uint64_t)(v15 + 6);
            v77 = v15 + 13;
            sub_1B1A086DC(v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
            v26 = 0;
            v79 = v15 + 8;
            v83 = v25;
            v85 = v24;
            do
            {
              v27 = (unsigned int *)(v95 + 48 * v26);
              v29 = *v27;
              v28 = v27[1];
              v31 = (uint64_t *)*((_QWORD *)v27 + 2);
              v30 = *((_QWORD *)v27 + 3);
              v32 = *((_QWORD *)v27 + 5);
              v90 = *((_QWORD *)v27 + 4);
              if ((v25 & 1) != 0)
              {
                v33 = *(os_unfair_lock_s **)(v32 + 376);
                swift_retain_n();
                os_unfair_lock_lock(v33);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v32 + 344));
                swift_release();
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v24);
              sub_1B1A18378(v81, (uint64_t)v136, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
              v34 = v99[4];
              v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v99[6] = ecs_stack_allocator_allocate(v34, 48 * v35, 8);
              v99[7] = v35;
              v79[1] = 0;
              v79[2] = 0;
              *v79 = 0;
              swift_release();
              v36 = sub_1B1BA7B7C(v99[3]);
              if (v36)
              {
                v37 = (void *)v36;
                v101 = 0;
                memset(v100, 0, sizeof(v100));
                memset((char *)v105 + 8, 0, 40);
                v106 = xmmword_1B2246910;
                *(_QWORD *)&v108 = 0;
                v107 = 1uLL;
                *((_QWORD *)&v108 + 1) = 1;
                LOBYTE(v105[0]) = 0;
                v109 = 0uLL;
                *(_QWORD *)&v103 = v87;
                *((_QWORD *)&v103 + 1) = v78;
                *(_QWORD *)&v104 = v99;
                *((_QWORD *)&v104 + 1) = 1;
                swift_unknownObjectRetain();
                sub_1B1BBF08C((uint64_t)v100, (uint64_t)v105 + 8);
                v116 = v107;
                v117 = v108;
                v118 = v109;
                v112 = v105[0];
                v113 = v105[1];
                v114 = v105[2];
                v115 = v106;
                v110 = v103;
                v111 = v104;
                v38 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v31, v30, v90, (uint64_t)v99);
                if ((_DWORD)v29 != (_DWORD)v28)
                {
                  v150 = 0u;
                  v151 = 0u;
                  v148 = 0u;
                  v149 = 0u;
                  v146 = 0u;
                  v147 = 0u;
                  v40 = v28 - v29;
                  v41 = v38 + 8 * v29;
                  v145 = 0u;
                  do
                  {
                    v41 += 8;
                    v42 = swift_retain();
                    sub_1B1D60FC0(v42, &v138, (uint64_t *)&v145, v37, (uint64_t)&v110, 0);
                    swift_release();
                    --v40;
                  }
                  while (v40);
                }
                sub_1B1BBF134(&v110);
                swift_unknownObjectRelease();
                v39 = v99;
              }
              else
              {
                v39 = v99;
              }
              sub_1B1F05D48(v39, (unsigned __int16 **)v134, (uint64_t)v136);
              if (*(_QWORD *)(v39[13] + 16))
              {
                v43 = (_QWORD *)swift_bridgeObjectRetain();
                sub_1B1F05034(v43, v32);
                swift_bridgeObjectRelease();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v45 = v39[13];
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  sub_1B1C92670(0, *(_QWORD *)(v45 + 16));
                }
                else
                {
                  v46 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                  if (*(_QWORD *)(v45 + 24) >= 2uLL)
                  {
                    sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                    v46 = (_QWORD *)swift_allocObject();
                    v47 = j__malloc_size(v46);
                    v46[2] = 0;
                    v46[3] = 2 * ((uint64_t)(v47 - 32) / 72);
                  }
                  *v77 = v46;
                  swift_bridgeObjectRelease();
                }
                if (*(unsigned __int8 *)(v39[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
                {
                  v48 = *(char **)(v32 + 232);
                  v49 = *(char **)(v32 + 256);
                  if (v48 == v49)
                  {
                    v50 = *(char **)(v32 + 240);
                  }
                  else
                  {
                    sub_1B1A1059C(v49, v48);
                    v49 = *(char **)(v32 + 232);
                    v50 = *(char **)(v32 + 240);
                    if (v50 == v49)
                    {
                      v50 = 0;
                      v49 = 0;
                      *(_QWORD *)(v32 + 232) = 0;
                      *(_QWORD *)(v32 + 240) = 0;
                    }
                  }
                  *(_QWORD *)(v32 + 248) = v50;
                  *(_QWORD *)(v32 + 256) = v49;
                }
              }
              v24 = v85;
              ecs_stack_allocator_pop_snapshot(v85);
              v25 = v83;
              if ((v83 & 1) != 0)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v32 + 376));
              }
              swift_release();
              ++v26;
            }
            while (v26 != v97);
          }
          else
          {
            sub_1B1A086DC(v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
          }

          sub_1B1A086DC(v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
          goto LABEL_65;
        }
LABEL_57:

LABEL_65:
        sub_1B1A086DC(v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        return (_QWORD *)swift_release();
      }
    }
    v51 = sub_1B1BA7B7C(0);
    if (!v51)
      goto LABEL_57;
    v53 = (void *)v51;
    v54 = *(_QWORD *)(*(_QWORD *)(v78 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(_QWORD *)thread_worker_index(v52)
                    + 8);
    *(_QWORD *)&v147 = 0;
    v145 = 0u;
    v146 = 0u;
    memset((char *)v105 + 8, 0, 40);
    v106 = xmmword_1B2246910;
    v107 = 1uLL;
    *(_QWORD *)&v108 = 0;
    *((_QWORD *)&v108 + 1) = 1;
    LOBYTE(v105[0]) = 0;
    v109 = 0uLL;
    *(_QWORD *)&v103 = v3;
    *((_QWORD *)&v103 + 1) = v78;
    *(_QWORD *)&v104 = v54;
    *((_QWORD *)&v104 + 1) = 1;
    swift_unknownObjectRetain();
    sub_1B1BBF08C((uint64_t)&v145, (uint64_t)v105 + 8);
    v116 = v107;
    v117 = v108;
    v118 = v109;
    v112 = v105[0];
    v113 = v105[1];
    v114 = v105[2];
    v115 = v106;
    v110 = v103;
    v111 = v104;
    if (v17 >= 1 && v97)
    {
      v55 = v15[4];
      v56 = *(unsigned __int8 *)(v14 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v136[0] = v131;
      v136[1] = v132;
      v137 = v133;
      v82 = (uint64_t)(v15 + 6);
      sub_1B1A086DC(v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      v57 = 0;
      v58 = 0;
      v80 = v15 + 8;
      v84 = v56;
      v86 = v55;
      do
      {
        v59 = (unsigned int *)(v95 + 48 * v57);
        v60 = *v59;
        v61 = v59[1];
        v62 = *((_QWORD *)v59 + 3);
        v63 = *((_QWORD *)v59 + 5);
        v88 = *((_QWORD *)v59 + 4);
        v91 = (uint64_t *)*((_QWORD *)v59 + 2);
        v93 = v58;
        if (v56)
        {
          v64 = *(os_unfair_lock_s **)(v63 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v64);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v63 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v55);
        sub_1B1A18378(v82, (uint64_t)&v145, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v65 = v99[4];
        v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v99[6] = ecs_stack_allocator_allocate(v65, 48 * v66, 8);
        v99[7] = v66;
        v80[1] = 0;
        v80[2] = 0;
        *v80 = 0;
        swift_release();
        v67 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v91, v62, v88, (uint64_t)v99);
        if ((_DWORD)v60 != (_DWORD)v61)
        {
          v106 = 0u;
          v107 = 0u;
          memset(v105, 0, sizeof(v105));
          v68 = v61 - v60;
          v69 = v67 + 8 * v60;
          v103 = 0u;
          v104 = 0u;
          do
          {
            v69 += 8;
            v70 = swift_retain();
            sub_1B1D60FC0(v70, &v138, (uint64_t *)&v103, v53, (uint64_t)&v110, 0);
            swift_release();
            --v68;
          }
          while (v68);
        }
        v58 = v93;
        sub_1B1F05D48(v99, (unsigned __int16 **)v136, (uint64_t)&v145);
        sub_1B1F03804((char *)v63);
        v55 = v86;
        ecs_stack_allocator_pop_snapshot(v86);
        v56 = v84;
        if ((v84 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v63 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v63 + 376));
        }
        swift_release();
        ++v57;
      }
      while (v57 != v97);
    }
    else
    {
      sub_1B1A086DC(v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
    }

    sub_1B1A086DC(v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    sub_1B1A086DC(v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    swift_release();
    swift_unknownObjectRelease();
    return sub_1B1BBF134(&v110);
  }
  return result;
}

uint64_t type metadata accessor for OpaqueRenderPass()
{
  return objc_opt_self();
}

uint64_t sub_1B20DEB68()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  _BYTE v4[40];
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v7 = qword_1ED4D09F8;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1E3C1C8(1, (uint64_t)v4);
  swift_release();
  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 56) = &type metadata for DrawCallLayer;
  *(_QWORD *)(inited + 64) = &off_1E6379C28;
  *(_BYTE *)(inited + 32) = 0;
  sub_1B1E6892C(v5);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v4);
  v2 = v5[1];
  *(_OWORD *)(v0 + 16) = v5[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v6;
  return v0;
}

uint64_t sub_1B20DECCC()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B20DEB68();
  return v0;
}

const char *sub_1B20DED00()
{
  return "OpaqueRenderPass";
}

uint64_t sub_1B20DED14()
{
  return qword_1EEF5DE40;
}

uint64_t sub_1B20DED24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  swift_release_n();
  swift_getObjectType();
  return sub_1B204D6E4();
}

void sub_1B20DEE10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, unint64_t);
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  ValueMetadata *v44;
  uint64_t v45;
  void *v46;
  id v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  id v52;
  float32x4_t v53;
  float32x4_t v54;
  _OWORD v55[3];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[32];
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  _QWORD v72[20];
  uint64_t v73;
  unint64_t v74;
  _BYTE v75[16];
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[16];
  uint64_t v79;
  _BYTE v80[16];
  uint64_t v81;
  _QWORD v82[12];
  _OWORD v83[5];
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _OWORD v102[2];
  uint64_t v103;

  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare) & 1) == 0)
  {
    v3 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
    v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    if (v4)
    {
      v5 = v1;
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 272) + 24);
      if (v6 == 2)
        goto LABEL_38;
      if ((v6 & 0x100) == 0)
        return;
      v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
      swift_retain();
      swift_retain();
      v52 = (id)sub_1B2061C84(v7);
      swift_release();
      v8 = sub_1B2229454();
      sub_1B1BA77BC(v8, v9, v52);
      v10 = sub_1B1BA7B7C(0);
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      if (!v10)
      {
        swift_release();

        return;
      }
      v51 = (void *)v10;
      sub_1B206309C(4u, (uint64_t)v75);
      sub_1B206309C(5u, (uint64_t)v78);
      v11 = v77;
      v12 = v76;
      sub_1B206309C(0x13u, (uint64_t)v80);
      swift_retain();
      sub_1B1BA80C0((uint64_t)v80);
      v13 = v81;
      v14 = v79;
      if (v79 == 260)
        v15 = 260;
      else
        v15 = 0;
      sub_1B1BA80C0((uint64_t)v78);
      sub_1B1BA80C0((uint64_t)v75);
      swift_release();
      v90 = 0;
      v91 = v12;
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v95 = v13;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = v14;
      v100 = v15;
      v101 = v11;
      v16 = *(_QWORD *)(a1 + v3);
      if (v16)
      {
        v17 = **(_QWORD **)(v16 + 496);
        swift_retain();
        if (!v17)
        {
          if (*(_QWORD *)(v16 + 376))
          {
            v45 = swift_dynamicCastObjCProtocolConditional();
            if (v45)
            {
              v46 = (void *)v45;
              swift_unknownObjectRetain();
              v47 = objc_msgSend(v46, sel_renderCommandEncoder);
              v73 = 0x646F636E45627573;
              v74 = 0xEB000000005B7265;
              v72[0] = 0;
              sub_1B2229A0C();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B2228890();
              v48 = (void *)sub_1B2228728();
              swift_bridgeObjectRelease();
              objc_msgSend(v47, sel_setLabel_, v48);

              v49 = *(_QWORD **)(v16 + 496);
              *v49 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v47);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
            }
          }
        }
        if (**(_QWORD **)(v16 + 496))
        {
          ObjectType = swift_getObjectType();
          swift_unknownObjectRetain();
          sub_1B1E125C8(a1, ObjectType);
          swift_unknownObjectRelease();
        }
        swift_release();
      }
      sub_1B1A18378(v4 + 624, (uint64_t)v72, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
      sub_1B1A18378((uint64_t)v72, (uint64_t)&v73, &qword_1ED4BF400, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
      if (sub_1B1B3C438(&v73) == 1)
      {
LABEL_38:
        sub_1B2229688();
        __break(1u);
        return;
      }
      v19 = v74;
      v20 = swift_getObjectType();
      v21 = *(uint64_t (**)(uint64_t, unint64_t))(v19 + 144);
      swift_unknownObjectRetain();
      v22 = v21(v20, v19);
      swift_unknownObjectRelease();
      v23 = *(_OWORD *)(v5 + 32);
      v102[0] = *(_OWORD *)(v5 + 16);
      v102[1] = v23;
      v103 = *(_QWORD *)(v5 + 48);
      sub_1B1E8FCE4(a1, (uint64_t)v102, v22 & 0xFFFFFFFFFFLL, v82);
      sub_1B1A18378((uint64_t)v82, (uint64_t)v83, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
      if (*(_QWORD *)&v83[0])
      {
        v89 = v84;
        v86 = v83[2];
        v87 = v83[3];
        v88 = v83[4];
        v85[0] = v83[0];
        v85[1] = v83[1];
        v24 = v84;
        sub_1B1E129A0((__int128 *)&v62);
        v71 = (char *)MEMORY[0x1E0DEE9D8];
        sub_1B1BEB988((unsigned __int16 **)v85, v24, &v71, v62, v63, v64, v65);
        v25 = *((_QWORD *)v71 + 2);
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                        + 8 * *(_QWORD *)thread_worker_index(v26)
                        + 8);
        v61 = 0;
        memset(v60, 0, sizeof(v60));
        memset((char *)v55 + 8, 0, 40);
        v56 = xmmword_1B2246910;
        v57 = 1uLL;
        *(_QWORD *)&v58 = 0;
        *((_QWORD *)&v58 + 1) = 1;
        v59 = 0uLL;
        LOBYTE(v55[0]) = 1;
        v53.i64[0] = v4;
        v53.i64[1] = a1;
        v54.i64[0] = v27;
        v54.i64[1] = 1;
        v50 = v28;
        swift_bridgeObjectRetain();
        sub_1B1BBF08C((uint64_t)v60, (uint64_t)v55 + 8);
        v68 = v57;
        v69 = v58;
        v70 = v59;
        v64 = (float32x4_t)v55[0];
        v65 = (float32x4_t)v55[1];
        v66 = v55[2];
        v67 = v56;
        v62 = v53;
        v63 = v54;
        if (v25)
        {
          v29 = *((_QWORD *)&v86 + 1);
          v30 = *((_QWORD *)&v87 + 1);
          v31 = v88;
          v53 = 0u;
          v54 = 0u;
          memset(v55, 0, sizeof(v55));
          v56 = 0u;
          v57 = 0u;
          swift_bridgeObjectRetain();
          v32 = 0;
          do
          {
            if (v30)
            {
              v34 = *(_QWORD *)(v50 + 32 + 16 * v32);
              v35 = v30;
              v36 = v29;
              while (1)
              {
                v37 = *(unsigned int *)(v36 + 8);
                if (v34 >= v37 && v34 < (v37 - *(_DWORD *)v36 + *(_DWORD *)(v36 + 4)))
                  break;
                v36 += 48;
                if (!--v35)
                  goto LABEL_25;
              }
              v38 = *(_DWORD *)(*(_QWORD *)(v36 + 40) + 188);
            }
            else
            {
LABEL_25:
              v38 = -1;
            }
            v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 136) + 8 * v38 + 32) + 48);
            if (*(ValueMetadata **)(v39 + 32) != &type metadata for DrawCallComponent)
            {
              v40 = 0;
              v41 = *(_QWORD *)(v39 + 16);
              v42 = v39 + 72;
              v43 = v41 - 1;
              do
              {
                v44 = *(ValueMetadata **)(v42 + v40);
                v40 += 40;
                --v43;
              }
              while (v44 != &type metadata for DrawCallComponent);
            }
            ++v32;
            v33 = swift_retain();
            sub_1B1D60FC0(v33, &v90, (uint64_t *)&v53, v51, (uint64_t)&v62, 0);
            swift_release();
          }
          while (v32 != v25);
        }
        else
        {
          swift_bridgeObjectRetain();
        }

        swift_unknownObjectRelease();
        sub_1B1A086DC(v82, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        swift_release();
        swift_bridgeObjectRelease_n();
        sub_1B1BBF134(&v62);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();

        swift_unknownObjectRelease();
      }
    }
  }
}

uint64_t type metadata accessor for TransparentRenderPass()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for MeshBatch()
{
  return &type metadata for MeshBatch;
}

uint64_t destroy for MeshModel()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *_s3VFX9MeshModelVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MeshModel(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MeshModel(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MeshModel()
{
  return &type metadata for MeshModel;
}

ValueMetadata *type metadata accessor for ModelRenderer()
{
  return &type metadata for ModelRenderer;
}

uint64_t sub_1B20DF6D8()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  _BYTE v4[40];
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v7 = qword_1ED4D09F8;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1B145A4(1, 1, (uint64_t)v4);
  swift_release();
  sub_1B1CC6310(0, (unint64_t *)&qword_1ED4BAD30, (unint64_t *)&qword_1ED4B89D0, (uint64_t)&protocol descriptor for ClassComponent, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 56) = &type metadata for DrawCallLayer;
  *(_QWORD *)(inited + 64) = &off_1E6379C28;
  *(_BYTE *)(inited + 32) = 1;
  sub_1B1E6892C(v5);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v4);
  v2 = v5[1];
  *(_OWORD *)(v0 + 16) = v5[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v6;
  return v0;
}

uint64_t sub_1B20DF844()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B20DF6D8();
  return v0;
}

const char *sub_1B20DF878()
{
  return "TransparentRenderPass";
}

uint64_t sub_1B20DF890(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  float *v26;
  uint64_t v28;
  float *v29;
  float *v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1B22299E8();
  if (result >= v3)
  {
    if ((unint64_t)v3 >= 2)
    {
      v9 = *v2 + 16;
      v10 = -1;
      for (i = 1; i != v3; ++i)
      {
        v12 = v10;
        v13 = v9;
        do
        {
          v14 = *(float *)(v13 + 8);
          if (*(float *)(v13 - 8) >= v14)
            break;
          v15 = *(_QWORD *)v13;
          *(_OWORD *)v13 = *(_OWORD *)(v13 - 16);
          *(float *)(v13 - 8) = v14;
          *(_QWORD *)(v13 - 16) = v15;
          v13 -= 16;
        }
        while (!__CFADD__(v12++, 1));
        v9 += 16;
        --v10;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 >= -1)
    {
      v6 = result;
      if (v3 < 2)
      {
        v17 = MEMORY[0x1E0DEE9D8];
        __dst = (float *)(MEMORY[0x1E0DEE9D8] + 32);
        if (v3 != 1)
        {
          v21 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          v20 = (char *)MEMORY[0x1E0DEE9D8];
          if (v21 < 2)
          {
LABEL_69:
            swift_bridgeObjectRelease();
            *(_QWORD *)(v17 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
LABEL_73:
          v60 = *v2;
          do
          {
            v61 = *(_QWORD *)&v20[16 * v21];
            v62 = &v20[16 * v21 + 16];
            v63 = *((_QWORD *)v62 + 1);
            sub_1B20DFE04((float *)(v60 + 16 * v61), (float *)(v60 + 16 * *(_QWORD *)v62), v60 + 16 * v63, __dst);
            if (v1)
              break;
            v64 = v20;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v64 = sub_1B216D510((uint64_t)v20);
            v65 = &v64[16 * v21];
            *(_QWORD *)v65 = v61;
            *((_QWORD *)v65 + 1) = v63;
            v20 = v64;
            v66 = *((_QWORD *)v64 + 2);
            memmove(&v64[16 * v21 + 16], &v64[16 * v21 + 32], 16 * (v66 - v21));
            *((_QWORD *)v64 + 2) = v66 - 1;
            v21 = v66 - 1;
          }
          while (v66 > 2);
          goto LABEL_69;
        }
        v68 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v7 = v5 >> 1;
        sub_1B20E0938();
        v8 = sub_1B2228B0C();
        *(_QWORD *)(v8 + 16) = v7;
        v68 = v8;
        __dst = (float *)(v8 + 32);
      }
      v18 = 0;
      v67 = v2;
      v19 = *v2;
      v69 = v19 + 8;
      v20 = (char *)MEMORY[0x1E0DEE9D8];
      v70 = v6;
      v71 = v3;
      do
      {
        v22 = v18++;
        if (v18 < v3)
        {
          v23 = *(float *)(v69 + 16 * v18);
          v24 = 16 * v22;
          v25 = *(float *)(v69 + 16 * v22);
          v18 = v22 + 2;
          if (v22 + 2 < v3)
          {
            v26 = (float *)(v19 + 40 + 16 * v22);
            while (v25 < v23 != *(v26 - 4) >= *v26)
            {
              ++v18;
              v26 += 4;
              if (v3 == v18)
              {
                v18 = v3;
                break;
              }
            }
          }
          if (v25 < v23 && v22 < v18)
          {
            v34 = 16 * v18;
            v35 = v18;
            v36 = v22;
            do
            {
              if (v36 != --v35)
              {
                v37 = v19 + v34;
                v38 = *(_QWORD *)(v19 + v24);
                v39 = *(_DWORD *)(v19 + v24 + 8);
                *(_OWORD *)(v19 + v24) = *(_OWORD *)(v19 + v34 - 16);
                *(_QWORD *)(v37 - 16) = v38;
                *(_DWORD *)(v37 - 8) = v39;
              }
              ++v36;
              v34 -= 16;
              v24 += 16;
            }
            while (v36 < v35);
          }
        }
        if (v18 < v3 && v18 - v22 < v6)
        {
          v28 = v22 + v6;
          if (v22 + v6 >= v3)
            v28 = v3;
          if (v18 != v28)
          {
            v29 = (float *)(v19 + 16 * v18);
            do
            {
              v30 = v29;
              v31 = v22;
              do
              {
                v32 = v30[2];
                if (*(v30 - 2) >= v32)
                  break;
                v33 = *(_QWORD *)v30;
                *(_OWORD *)v30 = *((_OWORD *)v30 - 1);
                *(v30 - 2) = v32;
                *((_QWORD *)v30 - 2) = v33;
                v30 -= 4;
                ++v31;
              }
              while (v18 != v31);
              ++v18;
              v29 += 4;
            }
            while (v18 != v28);
            v18 = v28;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20 = sub_1B216CC74(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
        v41 = *((_QWORD *)v20 + 2);
        v40 = *((_QWORD *)v20 + 3);
        v21 = v41 + 1;
        if (v41 >= v40 >> 1)
          v20 = sub_1B216CC74(v40 > 1, v41 + 1, 1, v20);
        *((_QWORD *)v20 + 2) = v21;
        v42 = v20 + 32;
        v43 = &v20[16 * v41 + 32];
        *(_QWORD *)v43 = v22;
        *((_QWORD *)v43 + 1) = v18;
        if (v41)
        {
          while (1)
          {
            v44 = v21 - 1;
            if (v21 >= 4)
            {
              v49 = &v42[16 * v21];
              v50 = *((_QWORD *)v49 - 7) - *((_QWORD *)v49 - 8);
              v47 = *((_QWORD *)v49 - 5) - *((_QWORD *)v49 - 6);
              v48 = v21 - 2;
              v51 = &v42[16 * v21 - 32];
              v45 = *(_QWORD *)v51;
              v46 = *((_QWORD *)v51 + 1);
              if (v47 - v45 + v46 >= v50)
              {
                v54 = v47 < *(_QWORD *)&v42[16 * v44 + 8] - *(_QWORD *)&v42[16 * v44];
LABEL_63:
                if (v54)
                  v44 = v48;
                goto LABEL_65;
              }
            }
            else
            {
              if (v21 != 3)
              {
                v52 = *(_QWORD *)&v42[16 * v21 - 24] - *(_QWORD *)&v20[16 * v21];
                v53 = *(_QWORD *)&v42[16 * v44 + 8] - *(_QWORD *)&v42[16 * v44];
                goto LABEL_60;
              }
              v45 = *((_QWORD *)v20 + 6);
              v46 = *((_QWORD *)v20 + 7);
              v47 = *((_QWORD *)v20 + 5) - *((_QWORD *)v20 + 4);
              v48 = 1;
            }
            v52 = v46 - v45;
            v53 = *(_QWORD *)&v42[16 * v44 + 8] - *(_QWORD *)&v42[16 * v44];
            if (v52 + v53 >= v47)
            {
              v54 = v47 < v53;
              goto LABEL_63;
            }
LABEL_60:
            if (v53 < v52)
              goto LABEL_21;
LABEL_65:
            v55 = &v42[16 * v44 - 16];
            v56 = *(_QWORD *)v55;
            v57 = &v42[16 * v44];
            v58 = *((_QWORD *)v57 + 1);
            sub_1B20DFE04((float *)(v19 + 16 * *(_QWORD *)v55), (float *)(v19 + 16 * *(_QWORD *)v57), v19 + 16 * v58, __dst);
            if (v1)
            {
              v17 = v68;
              goto LABEL_69;
            }
            *(_QWORD *)v55 = v56;
            *((_QWORD *)v55 + 1) = v58;
            v59 = *((_QWORD *)v20 + 2);
            v21 = v59 - 1;
            memmove(&v42[16 * v44], v57 + 16, 16 * (v59 - 1 - v44));
            *((_QWORD *)v20 + 2) = v59 - 1;
            if (v59 <= 2)
              goto LABEL_21;
          }
        }
        v21 = 1;
LABEL_21:
        v6 = v70;
        v3 = v71;
      }
      while (v18 < v71);
      v17 = v68;
      v2 = v67;
      if (v21 < 2)
        goto LABEL_69;
      goto LABEL_73;
    }
    result = sub_1B222967C();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B20DFE04(float *__src, float *a2, unint64_t a3, float *__dst)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t result;
  float *v25;
  float *v26;
  float *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v26 = __dst;
  v27 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -15)
    {
      v19 = 4 * v13;
      if (__dst != a2 || &a2[v19] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v20 = &v4[v19];
      v25 = &v4[v19];
      v27 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 16) <= 0xFFFFFFFFFFFFFFE0)
      {
        v21 = (float *)(a3 - 16);
        do
        {
          v22 = v21 + 4;
          if (*(v6 - 2) >= *(v20 - 2))
          {
            v25 = v20 - 4;
            if (v22 < v20 || v21 >= v20 || v22 != v20)
              *(_OWORD *)v21 = *((_OWORD *)v20 - 1);
            v23 = v6;
            v20 -= 4;
            if (v6 <= v7)
              break;
          }
          else
          {
            v23 = v6 - 4;
            if (v22 != v6 || v21 >= v6)
              *(_OWORD *)v21 = *(_OWORD *)v23;
            v27 = v6 - 4;
            if (v23 <= v7)
              break;
          }
          v21 -= 4;
          v6 = v23;
        }
        while (v20 > v4);
      }
LABEL_44:
      sub_1B216D46C((void **)&v27, (const void **)&v26, &v25);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    v14 = 4 * v10;
    if (__dst != __src || &__src[v14] <= __dst)
      memmove(__dst, __src, v14 * 4);
    v15 = &v4[v14];
    v25 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 16) <= 0xFFFFFFFFFFFFFFE0)
    {
      v16 = v4;
      while (1)
      {
        if (v16[2] >= v6[2])
        {
          v4 = v16 + 4;
          v18 = v16;
          v17 = v6;
          if (v7 == v16)
          {
            v16 += 4;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v16 += 4;
          }
        }
        else
        {
          v17 = v6 + 4;
          v18 = v6;
          if (v7 == v6 && v7 < v17)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v18;
LABEL_22:
        v7 += 4;
        if (v16 < v15)
        {
          v6 = v17;
          if ((unint64_t)v17 < a3)
            continue;
        }
        v26 = v4;
        v27 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B20E008C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v14 = MEMORY[0x1E0DEE9D8];
    sub_1B202A38C(0, v3, 0);
    v4 = v14;
    ObjectType = swift_getObjectType();
    v7 = a1 + 36;
    do
    {
      v8 = *(_QWORD *)(v7 - 4);
      sub_1B1F02EF0(v8, 0, ObjectType, a3);
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        sub_1B202A38C(v10 > 1, v11 + 1, 1);
      v7 += 8;
      *(_QWORD *)(v14 + 16) = v11 + 1;
      *(_QWORD *)(v14 + 8 * v11 + 32) = v9;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B20E018C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];
  uint64_t v12;

  sub_1B19F8E54(0, &qword_1EEF633F8, (uint64_t (*)(void))sub_1B20E0838, (uint64_t)&type metadata for MeshModel.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v11[-v8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B20E0838();
  sub_1B222A180();
  v12 = a2;
  v11[15] = 1;
  sub_1B1A02758(0, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1CDAFC0((unint64_t *)&unk_1EEF63400, (uint64_t (*)(void))sub_1B1A0895C, MEMORY[0x1E0DEAF10]);
  sub_1B2229958();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B20E02E8(float32x4_t *a1, uint64_t a2, char **a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  char *v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  float32x4_t v26;
  char *v27;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;

  if (a2)
  {
    v10 = *a3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v10 = sub_1B1C69CC0(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v12 = 0;
    v14 = a4;
    v13 = a5;
    v15 = vabsq_f32(a4);
    v16 = vabsq_f32(a5);
    v17 = a6;
    v18 = vabsq_f32(a6);
    v19 = a1 + 1;
    v20 = a7;
    do
    {
      v21 = v19[-1];
      v22 = *(int32x4_t *)v19;
      *a3 = v10;
      v24 = *((_QWORD *)v10 + 2);
      v23 = *((_QWORD *)v10 + 3);
      if (v24 >= v23 >> 1)
      {
        v32 = v16;
        v33 = v15;
        v30 = v22;
        v31 = v18;
        v29 = v21;
        v27 = sub_1B1C69CC0(v23 > 1, v24 + 1, 1, v10);
        v21 = v29;
        v22 = v30;
        v18 = v31;
        v16 = v32;
        v15 = v33;
        v14 = a4;
        v13 = a5;
        v17 = a6;
        v20 = a7;
        v10 = v27;
      }
      v25 = &v10[16 * v24];
      *((_QWORD *)v25 + 4) = v12;
      v26 = (float32x4_t)v22;
      v26.i32[1] = v22.i32[0];
      v26.i32[2] = v22.i32[0];
      *((_QWORD *)v10 + 2) = v24 + 1;
      *((float *)v25 + 10) = -COERCE_FLOAT(vaddq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v20, v17, v21, 2), v13, *(float32x2_t *)&v21, 1), v14, *(float *)&v21), vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)&v22, 1), v22), v16), v26, v15), (float32x4_t)vzip2q_s32(vtrn1q_s32(v22, v22), v22), v18)).i32[2]);
      *a3 = v10;
      v19 += 2;
      ++v12;
    }
    while (a2 != v12);
  }
  return sub_1B20DAF80(a3);
}

uint64_t sub_1B20E0464(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  sub_1B19F8E54(0, &qword_1ED4BAA80, (uint64_t (*)(void))sub_1B20E087C, (uint64_t)&type metadata for ModelRenderer.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v13 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B20E087C();
  sub_1B222A150();
  if (!v1)
  {
    v14 = 0;
    sub_1B1A08878();
    sub_1B2229814();
    v9 = v15;
    v11 = a1[3];
    v12 = a1[4];
    sub_1B19FA070(a1, v11);
    if (sub_1B2067BAC(1099, v11, v12))
    {
      v14 = 1;
      sub_1B2229814();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1B20E0650(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];

  sub_1B19F8E54(0, &qword_1EEF633E0, (uint64_t (*)(void))sub_1B20E0838, (uint64_t)&type metadata for MeshModel.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v12[-v7];
  sub_1B19FA070(a1, a1[3]);
  sub_1B20E0838();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = a1[3];
  v11 = a1[4];
  sub_1B19FA070(a1, v10);
  if (sub_1B2067BAC(1099, v10, v11))
  {
    sub_1B1A02758(0, &qword_1ED4BA460, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v12[15] = 1;
    sub_1B1CDAFC0((unint64_t *)&unk_1ED4BA470, (uint64_t (*)(void))sub_1B1A08878, MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
  }
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return 0;
}

unint64_t sub_1B20E0838()
{
  unint64_t result;

  result = qword_1EEF633E8;
  if (!qword_1EEF633E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BAA74, &type metadata for MeshModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF633E8);
  }
  return result;
}

unint64_t sub_1B20E087C()
{
  unint64_t result;

  result = qword_1ED4B8738;
  if (!qword_1ED4B8738)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BAA24, &type metadata for ModelRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8738);
  }
  return result;
}

_QWORD *sub_1B20E08C0(uint64_t **a1)
{
  uint64_t v1;

  return sub_1B20DD1B8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1B20E08DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, &qword_1ED4B8868, (uint64_t)&type metadata for RenderContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1B20E0938()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BA570)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BA570);
  }
}

uint64_t sub_1B20E09A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1A02758(0, &qword_1ED4B8868, (uint64_t)&type metadata for RenderContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B20E09FC(uint64_t a1)
{
  uint64_t v2;

  sub_1B1A02758(0, &qword_1ED4B8868, (uint64_t)&type metadata for RenderContext, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for MeshRenderSystemState()
{
  return &type metadata for MeshRenderSystemState;
}

ValueMetadata *type metadata accessor for ModelRenderer.CodingKeys()
{
  return &type metadata for ModelRenderer.CodingKeys;
}

uint64_t _s3VFX13ModelRendererV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B20E0AC0 + 4 * byte_1B22BA585[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B20E0AF4 + 4 * byte_1B22BA580[v4]))();
}

uint64_t sub_1B20E0AF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20E0AFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20E0B04);
  return result;
}

uint64_t sub_1B20E0B10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20E0B18);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B20E0B1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20E0B24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeshModel.CodingKeys()
{
  return &type metadata for MeshModel.CodingKeys;
}

unint64_t sub_1B20E0B44()
{
  unint64_t result;

  result = qword_1EEF63418;
  if (!qword_1EEF63418)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA8CC, &type metadata for MeshModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63418);
  }
  return result;
}

unint64_t sub_1B20E0B8C()
{
  unint64_t result;

  result = qword_1EEF63420;
  if (!qword_1EEF63420)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA9BC, &type metadata for ModelRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63420);
  }
  return result;
}

unint64_t sub_1B20E0BD4()
{
  unint64_t result;

  result = qword_1ED4B8748;
  if (!qword_1ED4B8748)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA8F4, &type metadata for ModelRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8748);
  }
  return result;
}

unint64_t sub_1B20E0C1C()
{
  unint64_t result;

  result = qword_1ED4B8740;
  if (!qword_1ED4B8740)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA91C, &type metadata for ModelRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8740);
  }
  return result;
}

unint64_t sub_1B20E0C64()
{
  unint64_t result;

  result = qword_1EEF63428;
  if (!qword_1EEF63428)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA804, &type metadata for MeshModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63428);
  }
  return result;
}

unint64_t sub_1B20E0CAC()
{
  unint64_t result;

  result = qword_1EEF63430;
  if (!qword_1EEF63430)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BA82C, &type metadata for MeshModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63430);
  }
  return result;
}

uint64_t sub_1B20E0CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  __int128 v6;
  __int128 v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _OWORD v11[5];
  uint64_t v12;

  if (*(_QWORD *)(a1 + 8))
  {
    v6 = *(_OWORD *)(a1 + 48);
    v11[2] = *(_OWORD *)(a1 + 32);
    v11[3] = v6;
    v11[4] = *(_OWORD *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 80);
    v7 = *(_OWORD *)(a1 + 16);
    v11[0] = *(_OWORD *)a1;
    v11[1] = v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B8440C((uint64_t)v11, a2, a3, isUniquelyReferenced_nonNull_native);
    *v3 = v10;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B20E3EEC(a1, (unint64_t *)&unk_1ED4BB3A0);
    sub_1B1B8371C(a2, a3, (uint64_t)v11);
    swift_bridgeObjectRelease();
    return sub_1B20E3EEC((uint64_t)v11, (unint64_t *)&unk_1ED4BB3A0);
  }
}

uint64_t sub_1B20E0DEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B222826C();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v11 + 48))(a1, 1, v10, v13) == 1)
  {
    sub_1B1A04628(a1, (uint64_t (*)(_QWORD))sub_1B1B28F74);
    sub_1B1B83900(a2, (uint64_t)v9);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
    return sub_1B1A04628((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1B1B28F74);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v15, a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B848BC((uint64_t)v15, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v19;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
  }
}

uint64_t sub_1B20E0F5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1B1A0DDAC((_OWORD *)a1, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B85204(v9, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v8;
    swift_bridgeObjectRelease();
    v5 = sub_1B2229610();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    sub_1B20E3EEC(a1, (unint64_t *)&qword_1ED4BB150);
    sub_1B1B83B1C(a2, v9);
    v7 = sub_1B2229610();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a2, v7);
    return sub_1B20E3EEC((uint64_t)v9, (unint64_t *)&qword_1ED4BB150);
  }
}

unint64_t sub_1B20E105C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[8];
  char v23;
  _BYTE v24[80];
  _QWORD v25[8];
  char v26;

  v3 = v2;
  sub_1B19F66A0(a1, (uint64_t)v22, &qword_1EEF63450);
  v5 = v22[0];
  v6 = v22[1];
  v7 = v22[2];
  v8 = v22[3];
  v10 = v22[4];
  v9 = v22[5];
  v18 = v22[7];
  v19 = v22[6];
  v17 = v23;
  sub_1B19F66A0(a1, (uint64_t)v24, &qword_1EEF63450);
  if (v24[64] <= 0xEFu)
  {
    v25[0] = v5;
    v25[1] = v6;
    v25[2] = v7;
    v25[3] = v8;
    v25[4] = v10;
    v25[5] = v9;
    v25[6] = v19;
    v25[7] = v18;
    v26 = v17;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B85BC0((uint64_t)v25, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v21;
  }
  else
  {
    result = sub_1B1DC3AC8(a2);
    if ((v12 & 1) == 0)
      return result;
    v13 = result;
    v14 = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    v25[0] = *v3;
    *v3 = 0x8000000000000000;
    if (!v14)
    {
      sub_1B1EAA9D8();
      v15 = v25[0];
    }
    sub_1B1EA59A0(v13, v15);
    *v3 = v15;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20E11BC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = v2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    sub_1B20E3EEC(a1, &qword_1ED4BF478);
    v5 = sub_1B1DC3AC8(a2);
    v7 = v6;
    if ((v6 & 1) != 0)
    {
      v8 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v10 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1B1EAB46C();
        v10 = v13;
      }
      sub_1B1B9BAB0(*(_QWORD *)(v10 + 56) + 8 * v8, (uint64_t)&v15);
      sub_1B1EA5CF8(v8, v10);
      *v3 = v10;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
    }
    v16 = (v7 & 1) == 0;
    return sub_1B20E3EEC((uint64_t)&v15, &qword_1ED4BF478);
  }
  else
  {
    sub_1B1B9BAB0(a1, (uint64_t)&v15);
    v11 = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B86218((uint64_t)&v15, a2, v11);
    *v2 = v14;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B20E12E8(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v24[16];
  uint64_t v25;

  v3 = v2;
  sub_1B17928A0();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1B2228110();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v11 + 48))(a1, 1, v10, v13) == 1)
  {
    sub_1B1A04628(a1, (uint64_t (*)(_QWORD))sub_1B17928A0);
    v16 = sub_1B1DC41BC(a2 | ((HIDWORD(a2) & 1) << 32));
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = *v2;
      v25 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1B1EABF1C();
        v20 = v25;
      }
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v11 + 32))(v9, *(_QWORD *)(v20 + 56) + *(_QWORD *)(v11 + 72) * v18, v10);
      sub_1B1EA5EAC(v18, v20);
      *v3 = v20;
      swift_bridgeObjectRelease();
      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v21, 1, v10);
    return sub_1B1A04628((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1B17928A0);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 32))(v15, a1, v10);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B86540((uint64_t)v15, a2 | ((HIDWORD(a2) & 1) << 32), v22);
    *v2 = v25;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B20E14CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = v2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    sub_1B1A04628(a1, (uint64_t (*)(_QWORD))sub_1B1FAF280);
    v5 = sub_1B1DC3AC8(a2);
    v7 = v6;
    if ((v6 & 1) != 0)
    {
      v8 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v10 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1B1EAC690();
        v10 = v13;
      }
      sub_1B1A025EC(*(_QWORD *)(v10 + 56) + 8 * v8, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1B1FAF2A0);
      sub_1B1EA6280(v8, v10);
      *v3 = v10;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
    }
    v16 = (v7 & 1) == 0;
    return sub_1B1A04628((uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1B1FAF280);
  }
  else
  {
    sub_1B1A025EC(a1, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1B1FAF2A0);
    v11 = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B868CC((uint64_t)&v15, a2, v11);
    *v2 = v14;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B20E15F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = v2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    sub_1B1A04628(a1, (uint64_t (*)(_QWORD))sub_1B20E44E0);
    v5 = sub_1B1DC3AC8(a2);
    v7 = v6;
    if ((v6 & 1) != 0)
    {
      v8 = v5;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v10 = *v2;
      v13 = *v3;
      *v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1B1EAC87C();
        v10 = v13;
      }
      sub_1B1A025EC(*(_QWORD *)(v10 + 56) + 8 * v8, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1B20E44FC);
      sub_1B1EA6294(v8, v10);
      *v3 = v10;
      swift_bridgeObjectRelease();
    }
    else
    {
      v15 = 0;
    }
    v16 = (v7 & 1) == 0;
    return sub_1B1A04628((uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1B20E44E0);
  }
  else
  {
    sub_1B1A025EC(a1, (uint64_t)&v15, (uint64_t (*)(_QWORD))sub_1B20E44FC);
    v11 = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B869E0((uint64_t)&v15, a2, v11);
    *v2 = v14;
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_1B20E1724(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t result;
  char v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B86D40(a1, a2, isUniquelyReferenced_nonNull_native);
    *v2 = v12;
  }
  else
  {
    result = sub_1B1DC3AC8(a2);
    if ((v8 & 1) == 0)
      return result;
    v9 = result;
    v10 = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!v10)
    {
      sub_1B1EACC44();
      v11 = v13;
    }
    sub_1B1EA4F70(v9, v11);
    *v3 = v11;
    swift_unknownObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20E1804(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v24[16];
  uint64_t v25;

  v3 = v2;
  sub_1B1C1908C(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for GraphScriptingConfig.ScriptInfo();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, double))(v11 + 48))(a1, 1, v10, v13) == 1)
  {
    sub_1B1A04628(a1, (uint64_t (*)(_QWORD))sub_1B1C1908C);
    v16 = sub_1B1DC4040(a2 | ((HIDWORD(a2) & 1) << 32));
    if ((v17 & 1) != 0)
    {
      v18 = v16;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v20 = *v2;
      v25 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1B1EAD7E0();
        v20 = v25;
      }
      sub_1B1A025EC(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v11 + 72) * v18, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
      sub_1B1EA649C(v18, v20);
      *v3 = v20;
      swift_bridgeObjectRelease();
      v21 = 0;
    }
    else
    {
      v21 = 1;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v21, 1, v10);
    return sub_1B1A04628((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1B1C1908C);
  }
  else
  {
    sub_1B1A025EC(a1, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for GraphScriptingConfig.ScriptInfo);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v2;
    *v2 = 0x8000000000000000;
    sub_1B1B874A0((uint64_t)v15, a2 | ((HIDWORD(a2) & 1) << 32), v22);
    *v2 = v25;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B20E19E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v7;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  char v18;

  v4 = v3;
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    sub_1B20E3EEC(a1, &qword_1EEF63448);
    v9 = sub_1B1DC4138(a2, a3);
    if ((v10 & 1) != 0)
    {
      v11 = v9;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v13 = *v3;
      v15 = *v4;
      *v4 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1B1EAE428();
        v13 = v15;
      }
      sub_1B1B9A190(*(_QWORD *)(v13 + 56) + 48 * v11, (uint64_t)v16);
      sub_1B1EA66D0(v11, v13);
      *v4 = v13;
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      v18 = -1;
    }
    return sub_1B20E3EEC((uint64_t)v16, &qword_1EEF63448);
  }
  else
  {
    sub_1B1B9A190(a1, (uint64_t)v16);
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B87A98((uint64_t)v16, a2, a3, v7);
    *v3 = v14;
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B20E1B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v7;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[5];
  uint64_t v17;
  char v18;

  v4 = v3;
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    sub_1B20E3EEC(a1, &qword_1EEF63440);
    v9 = sub_1B1DC4138(a2, a3);
    if ((v10 & 1) != 0)
    {
      v11 = v9;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v13 = *v3;
      v15 = *v4;
      *v4 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1B1EAE9C8();
        v13 = v15;
      }
      sub_1B1B99D74(*(_QWORD *)(v13 + 56) + 96 * v11, (uint64_t)v16);
      sub_1B1EA68C8(v11, v13);
      *v4 = v13;
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      v18 = -1;
    }
    return sub_1B20E3EEC((uint64_t)v16, &qword_1EEF63440);
  }
  else
  {
    sub_1B1B99D74(a1, (uint64_t)v16);
    v7 = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B1B87FA8((uint64_t)v16, a2, a3, v7);
    *v3 = v14;
    return swift_bridgeObjectRelease();
  }
}

void *sub_1B20E1C70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint8x8_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  int v33;
  uint64_t v34;
  _DWORD v36[130];
  uint64_t v37;
  int16x8_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int32 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  sub_1B222A06C();
  sub_1B20E3C50((uint64_t)&v40, a1);
  sub_1B20E3C50((uint64_t)&v40, a2);
  sub_1B222A084();
  if (a3)
    sub_1B20E3D44((uint64_t)&v40, a3);
  sub_1B222A084();
  v10 = sub_1B222A0C0();
  v11 = v10;
  v12 = *(_QWORD *)(v4 + 16);
  if (*(_QWORD *)(v12 + 16))
  {
    v13 = sub_1B1DC3AC8(v10);
    if ((v14 & 1) != 0)
    {
      v15 = *(void **)(*(_QWORD *)(v12 + 56) + 8 * v13);
      swift_unknownObjectRetain();
      return v15;
    }
  }
  v39 = v11;
  RGTextureDescriptorMakeDefault((uint64_t)&v40);
  v16 = BYTE2(v41);
  v17 = v45;
  v18 = v46;
  v19 = v47;
  v5.i32[0] = v48;
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_14;
  v22 = Strong;
  v38 = (int16x8_t)vmovl_u8(v5);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  v40 = 0x1000100010080;
  LOWORD(v41) = 257;
  BYTE2(v41) = v16;
  v24 = v23;
  v42 = 0x37uLL;
  v43 = 0;
  v44 = 1;
  v45 = v17;
  v46 = v18;
  v47 = v19;
  v48 = vmovn_s16(v38).u32[0];
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v40, v23);
  v25 = objc_msgSend(*(id *)(v22 + 16), sel_newTextureWithDescriptor_, v24);
  if (!v25)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v40 = 0;
    v41 = 0xE000000000000000;
    v38.i64[0] = qword_1ED4D0FB0;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v40 = 0xD000000000000023;
    v41 = 0x80000001B2331BE0;
    v26 = objc_msgSend(v24, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v27 = v41;
    v37 = v40;
    v28 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v40 = 0;
    swift_retain();
    sub_1B1F1AD70(v28, &v40, v37, v27);
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    Strong = swift_release();
LABEL_14:
    v15 = 0;
    goto LABEL_15;
  }
  v15 = v25;
  sub_1B1F326B0((uint64_t)v25);
  objc_msgSend(v15, sel_setLabel_, 0);
  swift_release();

LABEL_15:
  MEMORY[0x1E0C80A78](Strong, v21);
  v29 = *(_QWORD *)(a2 + 16);
  if (v29)
    v30 = *(float *)(a2 + 4 * v29 + 28);
  else
    v30 = 1.0;
  v31 = 0;
  v32 = v30 / 127.0;
  do
  {
    sub_1B1FFCF6C(a1, a2, a3, a4, v32 * (float)v31);
    v36[v31++] = v33;
  }
  while (v31 != 128);
  if (v15)
  {
    sub_1B20E3E08((uint64_t)&v40);
    objc_msgSend(v15, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, &v40, 0, v36, 512);
  }
  v34 = swift_unknownObjectRetain();
  sub_1B20E1724(v34, v39);
  return v15;
}

float sub_1B20E2070(float a1, float a2, float a3, float a4, float a5)
{
  return (float)((float)((float)((float)(a3 * 0.5) - (float)(a1 * 0.5)) * a5)
               + (float)((float)((float)(a5 * a5)
                               * (float)((float)((float)((float)(a3 + a3) + a1) + (float)(a2 * -2.5)) - (float)(a4 * 0.5)))
                       + (float)((float)((float)(a5 * a5) * a5)
                               * (float)((float)((float)(a2 * 1.5) + (float)((float)(a4 * 0.5) - (float)(a3 * 1.5)))
                                       - (float)(a1 * 0.5)))))
       + a2;
}

float sub_1B20E20D8(float a1, float a2, float a3, float a4, float a5)
{
  float v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;

  v5 = 0.0;
  v6 = 20;
  v7 = 1.0;
  v8 = 0.5;
  do
  {
    v9 = (float)(a5 * (float)(v8 * (float)(v8 * v8)))
       + (float)((float)(a4 * (float)((float)(v8 * v8) * (float)((float)(1.0 - v8) * 3.0)))
               + (float)((float)(a2 * (float)((float)(1.0 - v8) * (float)((float)(1.0 - v8) * (float)(1.0 - v8))))
                       + (float)(a3 * (float)(v8 * (float)((float)((float)(1.0 - v8) * (float)(1.0 - v8)) * 3.0)))));
    if (vabds_f32(v9, a1) < 0.00001)
      break;
    if (v9 < a1)
      v5 = v8;
    else
      v7 = v8;
    v8 = (float)(v5 + v7) * 0.5;
    --v6;
  }
  while (v6);
  return v8;
}

uint64_t sub_1B20E2170(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v22 = a5;
  sub_1B20E4484(0, &qword_1EEF63458, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)&v21 - v13;
  sub_1B19FA070(a1, a1[3]);
  sub_1B20E4440();
  sub_1B222A180();
  v23 = a2;
  v24 = a3;
  v25 = a4;
  v26 = v22;
  sub_1B1A0DBF0(0, v15, v16, v17);
  sub_1B1BC374C((unint64_t *)&qword_1EEF63460, (uint64_t)&unk_1B22B9C6C, v18, v19);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1B20E22A8()
{
  sub_1B20E4440();
  return sub_1B222A1D4();
}

uint64_t sub_1B20E22D0()
{
  sub_1B20E4440();
  return sub_1B222A1E0();
}

_QWORD *sub_1B20E22F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_1B20E3F44(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_1B20E2328(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B20E2170(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

char *sub_1B20E2348@<X0>(uint64_t a1@<X8>)
{
  char *result;
  uint64_t v3;

  result = sub_1B21451EC((uint64_t)&unk_1E637EC30);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t sub_1B20E2380(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;

  v2 = v1;
  v4 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F22258((uint64_t)&type metadata for CurvesState, (uint64_t)&off_1E636FFB0, v4);
  swift_release();
  v5 = v2[2];
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v7 = sub_1B204D6E4();
  v8 = *(os_unfair_lock_s **)(v6 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  sub_1B1E8F784(a1, v5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v7, v5);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 40));
  swift_release_n();
  v9 = v2[7];
  swift_getObjectType();
  v10 = sub_1B204D6E4();
  v11 = *(os_unfair_lock_s **)(v6 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  sub_1B1E8F784(a1, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v10, v9);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 40));
  swift_release_n();
  v12 = v2[12];
  swift_getObjectType();
  v13 = sub_1B204D6E4();
  v14 = *(os_unfair_lock_s **)(v6 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v14);
  sub_1B1E8F784(a1, v12);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v13, v12);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 40));
  swift_release_n();
  v15 = v2[17];
  swift_getObjectType();
  v16 = sub_1B204D6E4();
  v17 = *(os_unfair_lock_s **)(v6 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v17);
  sub_1B1E8F784(a1, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v16, v15);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v6 + 40));
  return swift_release_n();
}

uint64_t sub_1B20E2628(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for CurvesState, (uint64_t)&off_1E636FFB0, v3, (void (*)(uint64_t))sub_1B20E3F28);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B20E26F0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
  {
    MEMORY[0x1E0C80A78](result, a2);
    v3 = *(_QWORD **)(v2 + 176);
    swift_retain();
    swift_retain();
    sub_1B1F22244((uint64_t)&type metadata for CurvesState, (uint64_t)&off_1E636FFB0, v3, (void (*)(uint64_t))sub_1B20E469C);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *sub_1B20E27B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  __int128 v14;
  unsigned __int16 *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;
  id v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD **v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  int v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  os_unfair_lock_s *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  float v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  float *v93;
  char *v94;
  float v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  float32x2_t v109;
  float32x2_t v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  float v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  float32x2_t v118;
  float v119;
  float v120;
  float v121;
  uint64_t v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int64_t v144;
  uint64_t v145;
  float v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  float *v150;
  char *v151;
  float v152;
  float v153;
  float v154;
  float v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  float v162;
  float v163;
  float v164;
  uint64_t v165;
  float32x2_t v166;
  float32x2_t v167;
  uint64_t v168;
  uint64_t v169;
  float v170;
  float v171;
  float32x2_t v172;
  float v173;
  float32x2_t v174;
  float32x2_t v175;
  float v176;
  float v177;
  float v178;
  uint64_t v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v185;
  float v186;
  void *v187;
  void *v188;
  _DWORD v190[130];
  uint64_t v191;
  unsigned __int16 *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  unsigned __int16 *v213;
  int v214;
  char v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  unsigned __int16 *v226;
  int v227;
  char v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  _OWORD v232[2];
  uint64_t v233;
  uint64_t v234;
  int v235;
  char v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  _OWORD v245[2];
  uint64_t v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  __int16 v255;
  __int16 v256;
  __int16 v257;
  char v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  uint64_t v262;
  int v263;
  _OWORD v264[2];
  uint64_t v265;
  uint64_t v266[8];
  uint64_t v267[12];
  uint64_t v268[12];
  _QWORD v269[12];
  _QWORD v270[12];
  _QWORD v271[12];
  uint64_t v272;
  int v273;
  char v274;
  uint64_t v275;
  char v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  char v285;
  uint64_t v286;
  char v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  char v295;
  uint64_t v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE v304[40];
  uint64_t v305;
  int v306;
  char v307;
  uint64_t v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;

  v5 = v4;
  v195 = a4;
  v316 = *MEMORY[0x1E0C80C00];
  v8 = *(_OWORD *)(a3 + 16);
  v9 = *(_OWORD *)(a3 + 32);
  v209 = a3;
  v265 = *(_QWORD *)(a3 + 48);
  v264[0] = v8;
  v264[1] = v9;
  v212 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  sub_1B1E8FCE4(a2, (uint64_t)v264, 0x200000000, v266);
  sub_1B19F66A0((uint64_t)v266, (uint64_t)&v293, (unint64_t *)&qword_1ED4B7DE0);
  v210 = a1;
  if (v293)
  {
    v10 = v302;
    v305 = v293;
    v306 = v294;
    v307 = v295;
    v308 = v296;
    v309 = v297;
    v310 = v298;
    v311 = v299;
    v312 = v300;
    v313 = v301;
    v314 = v302;
    v315 = v303;
    v11 = (void *)a1[3];
    v211 = a1 + 3;
    v208 = a2;
    swift_retain();
    swift_retain();
    swift_retain();
    if (v11)
    {
      *(_QWORD *)&v207 = v11;
      v12 = (unsigned __int16 *)objc_msgSend(v11, sel_arrayLength);
    }
    else
    {
      *(_QWORD *)&v207 = 0;
      v12 = 0;
    }
    v213 = v12;
    sub_1B2187BEC((uint64_t)&v305, (uint64_t)&v213);
    v205 = v5;
    v17 = (uint64_t)v12 + v10;
    v18 = sub_1B1BA2B0C(v17 << 9, 0);
    v20 = v19;
    v22 = v21;
    swift_unknownObjectRelease();
    *a1 = (uint64_t)v18;
    a1[1] = v20;
    a1[2] = v22;
    RGTextureDescriptorMakeDefault((uint64_t)&v247);
    v23 = BYTE10(v247);
    v24 = v250;
    v25 = v251;
    v26 = BYTE8(v251);
    v27 = BYTE9(v251);
    LODWORD(v206) = BYTE10(v251);
    LODWORD(v204) = BYTE11(v251);
    if (v17 <= 1)
      LOWORD(v17) = 1;
    v254 = 65664;
    v255 = 1;
    v256 = v17;
    v257 = 257;
    v258 = BYTE10(v247);
    v202 = xmmword_1B22BAAD0;
    v203 = xmmword_1B2298AF0;
    v259 = xmmword_1B22BAAD0;
    v260 = xmmword_1B2298AF0;
    v261 = v250;
    v262 = v251;
    v263 = DWORD2(v251);
    v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
    LODWORD(v247) = 65664;
    WORD2(v247) = 1;
    WORD3(v247) = v17;
    WORD4(v247) = 257;
    BYTE10(v247) = v23;
    v248 = xmmword_1B22BAAD0;
    v249 = xmmword_1B2298AF0;
    v250 = v24;
    *(_QWORD *)&v251 = v25;
    BYTE8(v251) = v26;
    BYTE9(v251) = v27;
    a1 = v210;
    BYTE10(v251) = v206;
    BYTE11(v251) = (_BYTE)v204;
    RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v247, v28);
    v29 = sub_1B1F328F4(v28, 0x736576727543, 0xE600000000000000);
    swift_unknownObjectRelease();

    v210[3] = (uint64_t)v29;
    v30 = *(_OWORD *)(v209 + 72);
    v245[0] = *(_OWORD *)(v209 + 56);
    v245[1] = v30;
    v246 = *(_QWORD *)(v209 + 88);
    sub_1B1E8FCE4(v208, (uint64_t)v245, 0x200000000, v267);
    sub_1B19F66A0((uint64_t)v267, (uint64_t)&v283, (unint64_t *)&qword_1ED4B7DE0);
    if (v283)
    {
      *(_QWORD *)&v247 = v283;
      DWORD2(v247) = v284;
      BYTE12(v247) = v285;
      *(_QWORD *)&v248 = v286;
      BYTE8(v248) = v287;
      v249 = v288;
      v250 = v289;
      v251 = v290;
      v252 = v291;
      v253 = v292;
      sub_1B2187C08((uint64_t)&v247, (uint64_t)a1, (uint64_t)&v254);
      v5 = v205;
      sub_1B19ED748(v267);
      if (v29)
        goto LABEL_12;
    }
    else
    {
      v5 = v205;
      if (v29)
      {
LABEL_12:
        swift_unknownObjectRetain();
        sub_1B1E8FCE4(v208, (uint64_t)v245, 0x200000000, v268);
        sub_1B19F66A0((uint64_t)v268, (uint64_t)&v272, (unint64_t *)&qword_1ED4B7DE0);
        if (v272)
        {
          v234 = v272;
          v235 = v273;
          v236 = v274;
          v237 = v275;
          v238 = v276;
          v239 = v277;
          v240 = v278;
          v241 = v279;
          v242 = v280;
          v243 = v281;
          v244 = v282;
          swift_unknownObjectRetain();
          sub_1B219EFA8((uint64_t)&v234, (uint64_t)v29);
          swift_unknownObjectRelease();
          sub_1B19ED748(v266);
          swift_unknownObjectRelease();
          sub_1B19ED748(v268);
        }
        else
        {
          sub_1B19ED748(v266);
          swift_unknownObjectRelease();
        }
        v13 = *v211;
        if (*v211)
        {
          v31 = *(_OWORD *)(v209 + 112);
          v232[0] = *(_OWORD *)(v209 + 96);
          v232[1] = v31;
          v233 = *(_QWORD *)(v209 + 128);
          swift_unknownObjectRetain();
          sub_1B1E8FCE4(v208, (uint64_t)v232, 0x200000000, v269);
          sub_1B19F66A0((uint64_t)v269, (uint64_t)v270, (unint64_t *)&qword_1ED4B7DE0);
          v15 = (unsigned __int16 *)v270[0];
          if (!v270[0])
            goto LABEL_135;
          v16 = v270;
LABEL_20:
          v32 = v16 + 11;
          v33 = v16 + 10;
          v34 = (_QWORD **)(v16 + 9);
          v35 = v16 + 8;
          v36 = v16 + 7;
          v37 = v16 + 5;
          v38 = v16 + 6;
          v39 = v16 + 4;
          v40 = (char *)(v16 + 3);
          v41 = v16 + 2;
          v42 = (char *)v16 + 12;
          v43 = *((_DWORD *)v16 + 2);
          v44 = *v42;
          v45 = *v41;
          v46 = *v40;
          v47 = *v39;
          v48 = *v37;
          v49 = *v38;
          v50 = *v36;
          v51 = *v35;
          v52 = *v34;
          v53 = *v33;
          v54 = *v32;
          v213 = v15;
          v214 = v43;
          v215 = v44;
          v216 = v45;
          v217 = v46;
          v218 = v47;
          v219 = v48;
          v199 = v48;
          v220 = v49;
          v221 = v50;
          v222 = v51;
          v223 = v52;
          v204 = v52;
          v224 = v53;
          v225 = v54;
          v194 = v54;
          if (v53 < 1 || !v50)
            goto LABEL_134;
          v193 = v13;
          *(_QWORD *)&v203 = v204[4];
          LODWORD(v202) = *(unsigned __int8 *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v226 = v15;
          v227 = v43;
          v228 = v44;
          v229 = v45;
          v230 = v46;
          v231 = v47;
          v196 = v204 + 8;
          v197 = v204 + 6;
          v192 = v15;
          swift_retain();
          v191 = v51;
          swift_retain();
          swift_retain();
          v55 = 0;
          __asm { FMOV            V0.2S, #1.0 }
          v207 = _Q0;
          v198 = v50;
          while (1)
          {
            v61 = (unsigned int *)(v199 + 48 * v55);
            v63 = *v61;
            v62 = v61[1];
            v205 = v5;
            v206 = v62;
            v64 = (uint64_t *)*((_QWORD *)v61 + 2);
            v65 = *((_QWORD *)v61 + 3);
            v66 = *((_QWORD *)v61 + 5);
            v208 = *((_QWORD *)v61 + 4);
            v201 = v55;
            if ((_DWORD)v202)
            {
              v67 = *(os_unfair_lock_s **)(v66 + 376);
              swift_retain();
              os_unfair_lock_lock(v67);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v66 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v203);
            sub_1B19F66A0((uint64_t)v197, (uint64_t)v304, &qword_1ED4B7FB0);
            v68 = v204;
            v69 = v204[4];
            v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v68[6] = ecs_stack_allocator_allocate(v69, 48 * v70, 8);
            v68[7] = v70;
            v71 = v196;
            v196[1] = 0;
            v71[2] = 0;
            *v71 = 0;
            swift_release();
            v72 = v208;
            v209 = sub_1B1A12038((uint64_t)&type metadata for CurveComponent, (uint64_t)&off_1E637EB48, v64, v65, v208, (uint64_t)v68);
            v73 = v65;
            v74 = v72;
            v200 = (char *)v66;
            v212 = sub_1B1A12038((uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1E6374B40, v64, v73, v72, (uint64_t)v68);
            if (v64)
            {
              a1 = v210;
              if (v72)
              {
                v75 = 0;
                while (1)
                {
                  v76 = (void *)*a1;
                  if (*a1)
                    break;
LABEL_31:
                  if (++v75 == v74)
                    goto LABEL_80;
                }
                v77 = a1[1];
                v78 = *(int *)(v212 + 4 * v75);
                swift_unknownObjectRetain();
                if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
                {
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  goto LABEL_31;
                }
                v79 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                v80 = v76;
                swift_unknownObjectRelease();
                v81 = swift_unknownObjectRelease();
                MEMORY[0x1E0C80A78](v81, v82);
                v87 = *(_QWORD *)(v86 + 16);
                if (v87)
                {
                  v88 = v87 - 1;
                  v89 = *(float *)(v86 + 4 * (v87 - 1) + 32);
                }
                else
                {
                  v89 = 1.0;
                  v88 = -1;
                }
                v90 = v207;
                v91 = 0;
                v92 = v86 + 32;
                v93 = (float *)(v83 + 32);
                v94 = &v79[512 * v78 + v77];
                v95 = v89 / 127.0;
                a1 = v210;
                v74 = v208;
                while (1)
                {
                  v96 = 0.0;
                  if (v87)
                  {
                    if (v87 == 1)
                    {
                      v96 = *v93;
                    }
                    else
                    {
                      v97 = v95 * (float)v91;
                      v98 = fminf(fmaxf(v97, 0.0), 1.0);
                      if (v97 == 0.0)
                      {
                        v99 = 1;
                      }
                      else
                      {
                        v99 = 0;
                        v100 = v87;
                        do
                        {
                          v101 = v100 >> 1;
                          v102 = v99 + (v100 >> 1);
                          v100 += ~(v100 >> 1);
                          if (v98 >= *(float *)(v92 + 4 * v102))
                            v99 = v102 + 1;
                          else
                            v100 = v101;
                        }
                        while ((uint64_t)v100 > 0);
                        if (v99 >= v87)
                        {
                          v111 = *(_QWORD *)(v83 + 16);
                          if (v111)
                            v96 = v93[v111 - 1];
                          goto LABEL_40;
                        }
                      }
                      v103 = v99 - 1;
                      v104 = v85;
                      if (v84)
                        v104 = *(unsigned __int8 *)(v84 + 49 + 24 * v103);
                      v105 = *(float *)(v92 + 4 * v103);
                      if (v104 == 1)
                        v104 = v87 != 2;
                      v106 = *(float *)(v92 + 4 * v99) - v105;
                      v107 = 0.0;
                      if (v106 == 0.0)
                      {
                        if (v104)
                          goto LABEL_57;
                      }
                      else
                      {
                        v107 = (float)(v98 - v105) / v106;
                        if (v104)
                        {
LABEL_57:
                          if (v104 == 1)
                          {
                            if (v103 <= 0)
                              v108 = 0;
                            else
                              v108 = v99 - 2;
                            v112 = v99;
                            if (v99 < v88)
                              v112 = v99 + 1;
                            v113 = v93[v108];
                            v114 = v93[v99];
                            v96 = v93[v103]
                                + (float)((float)(v107 * (float)((float)(v114 * 0.5) - (float)(v113 * 0.5)))
                                        + (float)((float)((float)(v107 * v107)
                                                        * (float)((float)((float)(v113 + (float)(v114 + v114))
                                                                        + (float)(v93[v103] * -2.5))
                                                                - (float)(v93[v112] * 0.5)))
                                                + (float)((float)(v107 * (float)(v107 * v107))
                                                        * (float)((float)((float)(v93[v103] * 1.5)
                                                                        + (float)((float)(v93[v112] * 0.5)
                                                                                - (float)(v114 * 1.5)))
                                                                - (float)(v113 * 0.5)))));
                          }
                          else
                          {
                            if (v84)
                            {
                              v109 = *(float32x2_t *)(v84 + 40 + 24 * v103);
                              v110 = *(float32x2_t *)(v84 + 32 + 24 * v99);
                            }
                            else
                            {
                              v110 = 0;
                              v109 = 0;
                            }
                            v115.i32[0] = 0;
                            v115.f32[1] = v93[v103];
                            v116 = v93[v99];
                            v117 = vadd_f32(v109, v115);
                            v118 = vadd_f32(v110, (float32x2_t)__PAIR64__(LODWORD(v116), v90));
                            v119 = 0.5;
                            v120 = 0.0;
                            v121 = 1.0;
                            v122 = 20;
                            while (1)
                            {
                              v123 = 1.0 - v119;
                              v124 = v123 * (float)(v123 * v123);
                              v125 = v119 * (float)((float)(v123 * v123) * 3.0);
                              v126 = (float)(v119 * v119) * (float)((float)(1.0 - v119) * 3.0);
                              v127 = v119 * (float)(v119 * v119);
                              v128 = v127
                                   + (float)((float)(v118.f32[0] * v126)
                                           + (float)((float)(v124 * 0.0) + (float)(v117.f32[0] * v125)));
                              if (vabds_f32(v128, v107) < 0.00001)
                                break;
                              if (v128 < v107)
                                v120 = v119;
                              else
                                v121 = v119;
                              v119 = (float)(v120 + v121) * 0.5;
                              if (!--v122)
                              {
                                v129 = 1.0 - v119;
                                v124 = v129 * (float)(v129 * v129);
                                v125 = v119 * (float)((float)(v129 * v129) * 3.0);
                                v126 = (float)(v119 * v119) * (float)((float)(1.0 - v119) * 3.0);
                                v127 = v119 * (float)(v119 * v119);
                                break;
                              }
                            }
                            v96 = (float)(v116 * v127)
                                + (float)(vmuls_lane_f32(v126, v118, 1)
                                        + (float)((float)(v93[v103] * v124) + vmuls_lane_f32(v125, v117, 1)));
                          }
                          goto LABEL_40;
                        }
                      }
                      v96 = v93[v103] + (float)(v107 * (float)(v93[v99] - v93[v103]));
                    }
                  }
LABEL_40:
                  *(float *)&v190[v91++] = v96;
                  if (v91 == 128)
                  {
                    memcpy(v94, v190, 0x200uLL);
                    goto LABEL_31;
                  }
                }
              }
              goto LABEL_80;
            }
            v130 = v206;
            a1 = v210;
            if ((_DWORD)v63 != (_DWORD)v206)
              break;
LABEL_80:
            v131 = v205;
            sub_1B1F05D48(v204, &v226, (uint64_t)v304);
            v5 = v131;
            v132 = v200;
            sub_1B1F03804(v200);
            ecs_stack_allocator_pop_snapshot(v203);
            if ((v202 & 1) != 0)
            {
              os_unfair_lock_unlock(*((os_unfair_lock_t *)v132 + 43));
              os_unfair_lock_unlock(*((os_unfair_lock_t *)v132 + 47));
            }
            swift_release();
            v55 = v201 + 1;
            if (v201 + 1 == v198)
            {
              swift_release();
              swift_release();
              swift_release();
              v13 = v193;
LABEL_134:
              v187 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
              v188 = (void *)sub_1B2228728();
              objc_msgSend(v187, sel_pushDebugGroup_, v188);

              swift_unknownObjectRetain();
              sub_1B20E40C4(v187, (uint64_t)&v213, v13, a1);
              swift_unknownObjectRelease();
              objc_msgSend(v187, sel_popDebugGroup);
              swift_unknownObjectRelease();
              swift_release();
              swift_release();
              swift_release();
LABEL_135:
              swift_unknownObjectRelease();
              return sub_1B19ED748(v266);
            }
          }
          while (1)
          {
            v133 = (void *)*a1;
            if (*a1)
              break;
LABEL_83:
            if (++v63 == v130)
              goto LABEL_80;
          }
          v134 = a1[1];
          v135 = *(int *)(v212 + 4 * v63);
          swift_unknownObjectRetain();
          if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            goto LABEL_83;
          }
          v136 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
          v137 = v133;
          swift_unknownObjectRelease();
          v138 = swift_unknownObjectRelease();
          MEMORY[0x1E0C80A78](v138, v139);
          v144 = *(_QWORD *)(v143 + 16);
          if (v144)
          {
            v145 = v144 - 1;
            v146 = *(float *)(v143 + 4 * (v144 - 1) + 32);
          }
          else
          {
            v146 = 1.0;
            v145 = -1;
          }
          v147 = v207;
          v148 = 0;
          v149 = v143 + 32;
          v150 = (float *)(v140 + 32);
          v151 = &v136[512 * v135 + v134];
          v152 = v146 / 127.0;
          a1 = v210;
          while (1)
          {
            v153 = 0.0;
            if (v144)
            {
              if (v144 == 1)
              {
                v153 = *v150;
              }
              else
              {
                v154 = v152 * (float)v148;
                v155 = fminf(fmaxf(v154, 0.0), 1.0);
                if (v154 == 0.0)
                {
                  v156 = 1;
                }
                else
                {
                  v156 = 0;
                  v157 = v144;
                  do
                  {
                    v158 = v157 >> 1;
                    v159 = v156 + (v157 >> 1);
                    v157 += ~(v157 >> 1);
                    if (v155 >= *(float *)(v149 + 4 * v159))
                      v156 = v159 + 1;
                    else
                      v157 = v158;
                  }
                  while ((uint64_t)v157 > 0);
                  if (v156 >= v144)
                  {
                    v168 = *(_QWORD *)(v140 + 16);
                    if (v168)
                      v153 = v150[v168 - 1];
                    goto LABEL_92;
                  }
                }
                v160 = v156 - 1;
                v161 = v142;
                if (v141)
                  v161 = *(unsigned __int8 *)(v141 + 49 + 24 * v160);
                v162 = *(float *)(v149 + 4 * v160);
                if (v161 == 1)
                  v161 = v144 != 2;
                v163 = *(float *)(v149 + 4 * v156) - v162;
                v164 = 0.0;
                if (v163 == 0.0)
                {
                  if (v161)
                    goto LABEL_109;
                }
                else
                {
                  v164 = (float)(v155 - v162) / v163;
                  if (v161)
                  {
LABEL_109:
                    if (v161 == 1)
                    {
                      if (v160 <= 0)
                        v165 = 0;
                      else
                        v165 = v156 - 2;
                      v169 = v156;
                      if (v156 < v145)
                        v169 = v156 + 1;
                      v170 = v150[v165];
                      v171 = v150[v156];
                      v153 = v150[v160]
                           + (float)((float)(v164 * (float)((float)(v171 * 0.5) - (float)(v170 * 0.5)))
                                   + (float)((float)((float)(v164 * v164)
                                                   * (float)((float)((float)(v170 + (float)(v171 + v171))
                                                                   + (float)(v150[v160] * -2.5))
                                                           - (float)(v150[v169] * 0.5)))
                                           + (float)((float)(v164 * (float)(v164 * v164))
                                                   * (float)((float)((float)(v150[v160] * 1.5)
                                                                   + (float)((float)(v150[v169] * 0.5)
                                                                           - (float)(v171 * 1.5)))
                                                           - (float)(v170 * 0.5)))));
                    }
                    else
                    {
                      if (v141)
                      {
                        v166 = *(float32x2_t *)(v141 + 40 + 24 * v160);
                        v167 = *(float32x2_t *)(v141 + 32 + 24 * v156);
                      }
                      else
                      {
                        v167 = 0;
                        v166 = 0;
                      }
                      v172.i32[0] = 0;
                      v172.f32[1] = v150[v160];
                      v173 = v150[v156];
                      v174 = vadd_f32(v166, v172);
                      v175 = vadd_f32(v167, (float32x2_t)__PAIR64__(LODWORD(v173), v147));
                      v176 = 0.5;
                      v177 = 0.0;
                      v178 = 1.0;
                      v179 = 20;
                      while (1)
                      {
                        v180 = 1.0 - v176;
                        v181 = v180 * (float)(v180 * v180);
                        v182 = v176 * (float)((float)(v180 * v180) * 3.0);
                        v183 = (float)(v176 * v176) * (float)((float)(1.0 - v176) * 3.0);
                        v184 = v176 * (float)(v176 * v176);
                        v185 = v184
                             + (float)((float)(v175.f32[0] * v183)
                                     + (float)((float)(v181 * 0.0) + (float)(v174.f32[0] * v182)));
                        if (vabds_f32(v185, v164) < 0.00001)
                          break;
                        if (v185 < v164)
                          v177 = v176;
                        else
                          v178 = v176;
                        v176 = (float)(v177 + v178) * 0.5;
                        if (!--v179)
                        {
                          v186 = 1.0 - v176;
                          v181 = v186 * (float)(v186 * v186);
                          v182 = v176 * (float)((float)(v186 * v186) * 3.0);
                          v183 = (float)(v176 * v176) * (float)((float)(1.0 - v176) * 3.0);
                          v184 = v176 * (float)(v176 * v176);
                          break;
                        }
                      }
                      v153 = (float)(v173 * v184)
                           + (float)(vmuls_lane_f32(v183, v175, 1)
                                   + (float)((float)(v150[v160] * v181) + vmuls_lane_f32(v182, v174, 1)));
                    }
                    goto LABEL_92;
                  }
                }
                v153 = v150[v160] + (float)(v164 * (float)(v150[v156] - v150[v160]));
              }
            }
LABEL_92:
            *(float *)&v190[v148++] = v153;
            if (v148 == 128)
            {
              memcpy(v151, v190, 0x200uLL);
              v130 = v206;
              goto LABEL_83;
            }
          }
        }
        return sub_1B19ED748(v266);
      }
    }
    sub_1B19ED748(v266);
    return sub_1B19ED748(v266);
  }
  v13 = a1[3];
  v211 = a1 + 3;
  if (v13)
  {
    v14 = *(_OWORD *)(v209 + 152);
    v247 = *(_OWORD *)(v209 + 136);
    v248 = v14;
    *(_QWORD *)&v249 = *(_QWORD *)(v209 + 168);
    swift_unknownObjectRetain();
    sub_1B1E8FCE4(a2, (uint64_t)&v247, 0x200000000, &v305);
    sub_1B19F66A0((uint64_t)&v305, (uint64_t)v271, (unint64_t *)&qword_1ED4B7DE0);
    v15 = (unsigned __int16 *)v271[0];
    if (!v271[0])
      goto LABEL_135;
    v16 = v271;
    goto LABEL_20;
  }
  return sub_1B19ED748(v266);
}

uint64_t type metadata accessor for CurveSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B20E3930()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[40];
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v40 = qword_1ED4D09F8;
  v41 = 0;
  v42 = 2;
  v43 = 0;
  v44 = 2;
  v45 = 0;
  swift_retain();
  sub_1B1E38CA0(1, (uint64_t)v10);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for CurveRuntime;
  *(_QWORD *)(inited + 40) = &off_1E6374B70;
  sub_1B1B44110(v11, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v10);
  v2 = v11[1];
  *(_OWORD *)(v0 + 16) = v11[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v12;
  v34 = qword_1ED4D09F8;
  v35 = 0;
  v36 = 2;
  v37 = 0;
  v38 = 2;
  v39 = 0;
  swift_retain();
  sub_1B1E38E98(1, (uint64_t)v13);
  swift_release();
  v3 = v13[1];
  *(_OWORD *)(v0 + 56) = v13[0];
  *(_OWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v0 + 88) = v14;
  v28 = qword_1ED4D09F8;
  v29 = 0;
  v30 = 2;
  v31 = 0;
  v32 = 2;
  v33 = 0;
  swift_retain();
  sub_1B1B10DF0(1, 1, (uint64_t)v15);
  swift_release();
  v4 = v15[1];
  *(_OWORD *)(v0 + 96) = v15[0];
  *(_OWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v0 + 128) = v16;
  v22 = qword_1ED4D09F8;
  v23 = 0;
  v24 = 2;
  v25 = 0;
  v26 = 2;
  v27 = 0;
  swift_retain();
  sub_1B1B10DF0(1, 1, (uint64_t)&v17);
  swift_release();
  v5 = v18;
  v6 = v19;
  v7 = v21;
  v8 = v20 | 4;
  *(_QWORD *)(v0 + 136) = v17;
  *(_DWORD *)(v0 + 144) = v5;
  *(_BYTE *)(v0 + 148) = v6;
  *(_QWORD *)(v0 + 152) = v8;
  *(_BYTE *)(v0 + 160) = 2;
  *(_QWORD *)(v0 + 168) = v7;
  return v0;
}

uint64_t sub_1B20E3B98()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B20E3930();
  return v0;
}

const char *sub_1B20E3BCC()
{
  return "CurveSystem";
}

uint64_t sub_1B20E3BE4()
{
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CurveCache()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for CurveRuntime()
{
  return &type metadata for CurveRuntime;
}

ValueMetadata *type metadata accessor for CurveComponent()
{
  return &type metadata for CurveComponent;
}

uint64_t sub_1B20E3C50(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1B222A078();
  if (v3)
  {
    v5 = a2 + 32;
    do
    {
      v5 += 4;
      result = sub_1B222A09C();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1B20E3CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1B222A078();
  if (v3)
  {
    v5 = a2 + 32;
    do
    {
      v5 += 16;
      sub_1B222A09C();
      sub_1B222A09C();
      sub_1B222A09C();
      result = sub_1B222A09C();
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1B20E3D44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1B222A078();
  if (v3)
  {
    v5 = a2 + 49;
    do
    {
      v5 += 24;
      sub_1B222A09C();
      sub_1B222A09C();
      sub_1B222A09C();
      sub_1B222A09C();
      sub_1B222A084();
      result = sub_1B222A084();
      --v3;
    }
    while (v3);
  }
  return result;
}

double sub_1B20E3E08@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 128;
  *(_OWORD *)(a1 + 24) = xmmword_1B22BAAE0;
  *(_QWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_1B20E3E28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_1B222A078();
  if (v3)
  {
    v5 = 0;
    v6 = a2 + 32;
    do
    {
      v7 = *(_QWORD *)(v6 + 8 * v5);
      result = sub_1B222A078();
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        swift_bridgeObjectRetain();
        v9 = v7 + 40;
        do
        {
          swift_bridgeObjectRetain();
          sub_1B2228824();
          swift_bridgeObjectRelease();
          v9 += 16;
          --v8;
        }
        while (v8);
        result = swift_bridgeObjectRelease();
      }
      ++v5;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t sub_1B20E3EEC(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  sub_1B19F900C(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_1B20E3F28(uint64_t *a1)
{
  uint64_t *v1;

  return sub_1B20E27B8(a1, v1[2], v1[3], v1[4]);
}

_QWORD *sub_1B20E3F44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;

  sub_1B20E4484(0, &qword_1ED4BAAA8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v16 - v7;
  sub_1B21451EC((uint64_t)&unk_1E637EB18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B20E4440();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1A0DBF0(0, v10, v11, v12);
    sub_1B1BC374C((unint64_t *)&qword_1ED4B9F30, (uint64_t)&unk_1B22B9C94, v13, v14);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v9 = v16;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

void sub_1B20E40C4(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[2];
  uint64_t v53;
  _QWORD v54[6];

  sub_1B20E4428((uint64_t)v54);
  if (*(uint64_t *)(a2 + 80) >= 1)
  {
    v38 = *(_QWORD *)(a2 + 56);
    if (v38)
    {
      v9 = v54[0];
      v8 = v54[1];
      v10 = v54[2];
      v11 = *(_QWORD **)(a2 + 72);
      v12 = v11[4];
      v45 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 64) + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v13 = *(_OWORD *)(a2 + 16);
      v52[0] = *(_OWORD *)a2;
      v52[1] = v13;
      v14 = *(_QWORD *)(a2 + 40);
      v53 = *(_QWORD *)(a2 + 32);
      v37 = v14;
      v33 = a2;
      sub_1B1D6631C(a2);
      v15 = 0;
      v16 = 0;
      v36 = v12;
      v34 = a1;
      v35 = a3;
      while (1)
      {
        v43 = v16;
        v44 = v15;
        v17 = (unsigned int *)(v37 + 48 * v15);
        v18 = *((_QWORD *)v17 + 4);
        v19 = *((_QWORD *)v17 + 5);
        v39 = v17[1];
        v40 = *v17;
        v41 = *((_QWORD *)v17 + 3);
        v42 = (uint64_t *)*((_QWORD *)v17 + 2);
        if (v45)
        {
          v20 = *(os_unfair_lock_s **)(v19 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v20);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v12);
        sub_1B19F66A0((uint64_t)(v11 + 6), (uint64_t)v54, &qword_1ED4B7FB0);
        v21 = v11[4];
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v11[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
        v11[7] = v22;
        v11[9] = 0;
        v11[10] = 0;
        v11[8] = 0;
        swift_release();
        sub_1B1A12038((uint64_t)&type metadata for CurveComponent, (uint64_t)&off_1E637EB48, v42, v41, v18, (uint64_t)v11);
        v23 = sub_1B1A12038((uint64_t)&type metadata for CurveRuntime, (uint64_t)&off_1E6374B40, v42, v41, v18, (uint64_t)v11);
        v24 = (int *)v23;
        if (v42)
        {
          if (v18)
          {
            v12 = v36;
            do
            {
              v25 = *a4;
              if (*a4)
              {
                v26 = *v24;
                v27 = a4[1] + (v26 << 9);
                v49 = v9;
                v50 = v8;
                v51 = v10;
                v46 = 0;
                v47 = 0;
                v48 = 0;
                objc_msgSend(v34, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, v25, v27, 512, 512, &v49, v35, v26, 0, &v46);
              }
              ++v24;
              --v18;
            }
            while (v18);
            goto LABEL_16;
          }
        }
        else if ((_DWORD)v40 != (_DWORD)v39)
        {
          v28 = v39 - v40;
          v29 = (int *)(v23 + 4 * v40);
          v12 = v36;
          do
          {
            v30 = *a4;
            if (*a4)
            {
              v31 = *v29;
              v32 = a4[1] + (v31 << 9);
              v49 = v9;
              v50 = v8;
              v51 = v10;
              v46 = 0;
              v47 = 0;
              v48 = 0;
              objc_msgSend(v34, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, v30, v32, 512, 512, &v49, v35, v31, 0, &v46, v33);
            }
            ++v29;
            --v28;
          }
          while (v28);
          goto LABEL_16;
        }
        v12 = v36;
LABEL_16:
        v16 = v43;
        sub_1B1F05D48(v11, (unsigned __int16 **)v52, (uint64_t)v54);
        sub_1B1F03804((char *)v19);
        ecs_stack_allocator_pop_snapshot(v12);
        if ((v45 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
        }
        swift_release();
        v15 = v44 + 1;
        if (v44 + 1 == v38)
        {
          sub_1B1D66364(v33);
          return;
        }
      }
    }
  }
}

double sub_1B20E4428@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 128;
  *(_OWORD *)a1 = xmmword_1B22BAAE0;
  *(_QWORD *)(a1 + 16) = 1;
  return result;
}

unint64_t sub_1B20E4440()
{
  unint64_t result;

  result = qword_1ED4B8A30;
  if (!qword_1ED4B8A30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BAD3C, &type metadata for CurveComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8A30);
  }
  return result;
}

void sub_1B20E4484(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B20E4440();
    v7 = a3(a1, &type metadata for CurveComponent.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1B20E44E0(uint64_t a1)
{
  sub_1B1791524(a1, &qword_1ED4BF650, (uint64_t (*)(uint64_t))sub_1B20E44FC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1B20E44FC(uint64_t a1)
{
  sub_1B1791524(a1, (unint64_t *)&unk_1ED4BF640, (uint64_t (*)(uint64_t))type metadata accessor for DepthStencilCache, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for WeakReference);
}

uint64_t storeEnumTagSinglePayload for CurveComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B20E4558 + 4 * byte_1B22BAAF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B20E4578 + 4 * byte_1B22BAAF5[v4]))();
}

_BYTE *sub_1B20E4558(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B20E4578(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B20E4580(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B20E4588(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B20E4590(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B20E4598(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CurveComponent.CodingKeys()
{
  return &type metadata for CurveComponent.CodingKeys;
}

ValueMetadata *type metadata accessor for CurvesState()
{
  return &type metadata for CurvesState;
}

unint64_t sub_1B20E45C8()
{
  unint64_t result;

  result = qword_1EEF63470;
  if (!qword_1EEF63470)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BAD14, &type metadata for CurveComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63470);
  }
  return result;
}

unint64_t sub_1B20E4610()
{
  unint64_t result;

  result = qword_1ED4B8A58;
  if (!qword_1ED4B8A58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BAC84, &type metadata for CurveComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8A58);
  }
  return result;
}

unint64_t sub_1B20E4658()
{
  unint64_t result;

  result = qword_1ED4B8A40[0];
  if (!qword_1ED4B8A40[0])
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BACAC, &type metadata for CurveComponent.CodingKeys);
    atomic_store(result, qword_1ED4B8A40);
  }
  return result;
}

uint64_t *sub_1B20E469C(uint64_t *a1)
{
  return sub_1B20E3F28(a1);
}

uint64_t sub_1B20E46B0()
{
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_retain();
  sub_1B1BCE95C();
  sub_1B2228890();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 60;
}

uint64_t sub_1B20E4764(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  uint64_t v25;

  v2 = v1;
  v4 = sub_1B222826C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1B1BCE288(1);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v12, v2 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
  type metadata accessor for AuthoringNode();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v15 = sub_1B20E4E94(v13, v14, (uint64_t)v12, 0, 0xF000000000000000);
  swift_release();
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
  v18 = (uint64_t *)(v15 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
  v19 = *(_QWORD *)(v15 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
  v20 = *(_QWORD *)(v15 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
  *v18 = v16;
  v18[1] = v17;
  sub_1B1AEB720(v16, v17);
  sub_1B1A0DAC8(v19, v20);
  if ((a1 & 1) == 0)
  {
    sub_1B2228260();
    v21 = v15 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    v22 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 24);
    v22(v15 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v8, v4);
    v23 = OBJC_IVAR____TtC3VFX13AuthoringNode_raw;
    v22(*(_QWORD *)(v15 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) + OBJC_IVAR____TtC3VFX4Node_authoringID, (char *)v21, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v22(*(_QWORD *)(v15 + v23) + OBJC_IVAR____TtC3VFX4Node_authoringID, (char *)v21, v4);
  }
  return v15;
}

uint64_t sub_1B20E495C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1A0DAC8(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData), *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8));
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1B20E49E0()
{
  return type metadata accessor for AuthoringNode();
}

uint64_t type metadata accessor for AuthoringNode()
{
  uint64_t result;

  result = qword_1EEF63478;
  if (!qword_1EEF63478)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B20E4A24()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B222826C();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthoringNode.Port()
{
  return &type metadata for AuthoringNode.Port;
}

uint64_t sub_1B20E4AC4()
{
  return sub_1B20E46B0();
}

uint64_t sub_1B20E4AE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = sub_1B222826C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1B222A06C();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v1);
  sub_1B1D3B59C();
  sub_1B22285E4();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B20E4BB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v1 = sub_1B222826C();
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v2 + 16))(v6, *v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v1, v4);
  sub_1B1D3B59C();
  sub_1B22285E4();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
  return sub_1B222A078();
}

uint64_t sub_1B20E4C6C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v1 = sub_1B222826C();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  sub_1B222A06C();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v1);
  sub_1B1D3B59C();
  sub_1B22285E4();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B20E4D44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, double);
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = sub_1B222826C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v21 - v12;
  v14 = *a1;
  v15 = a1[1];
  v16 = *a2;
  v17 = a2[1];
  v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v18((char *)&v21 - v12, v14 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v4, v11);
  ((void (*)(char *, uint64_t, uint64_t))v18)(v8, v16 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v4);
  LOBYTE(a2) = sub_1B222823C();
  v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v8, v4);
  v19(v13, v4);
  return a2 & (v15 == v17);
}

unint64_t sub_1B20E4E50()
{
  unint64_t result;

  result = qword_1EEF63488;
  if (!qword_1EEF63488)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BADD0, &type metadata for AuthoringNode.Port);
    atomic_store(result, (unint64_t *)&qword_1EEF63488);
  }
  return result;
}

uint64_t sub_1B20E4E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  void (*v20)(_QWORD *__return_ptr, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[6];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = v5;
  v33 = a4;
  v34 = a5;
  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1B222826C();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData) = xmmword_1B2281D30;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw) = a1;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 152);
  v21 = swift_retain();
  v20(v35, v21);
  v22 = v35[0];
  v40 = v35[1];
  v41 = v35[0];
  sub_1B1B28C6C((uint64_t)&v40);
  v39 = v35[2];
  sub_1B1B28C6C((uint64_t)&v39);
  v38 = v35[3];
  sub_1B1B28C6C((uint64_t)&v38);
  v37 = v35[4];
  sub_1B1B28C6C((uint64_t)&v37);
  v36 = v35[5];
  sub_1B1B28C6C((uint64_t)&v36);
  v23 = *(_QWORD *)(v22 + 16);
  sub_1B1B28C6C((uint64_t)&v41);
  if (v23 <= v19)
    v24 = v19;
  else
    v24 = v23;
  v25 = sub_1B1C6D288(0, v24, a2);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) = v25;
  sub_1B1B28FC8(a3, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1B2228260();
    sub_1B1B2900C(a3);
    sub_1B1B2900C((uint64_t)v13);
    v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  }
  else
  {
    sub_1B1B2900C(a3);
    v26 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v26(v18, v13, v14);
  }
  v27 = v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
  v26((char *)(v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID), v18, v14);
  v28 = (_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
  v29 = *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
  v30 = *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
  v31 = v34;
  *v28 = v33;
  v28[1] = v31;
  sub_1B1A0DAC8(v29, v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(a1 + OBJC_IVAR____TtC3VFX4Node_authoringID, v27, v14);
  return v6;
}

uint64_t sub_1B20E50E4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B202AD64(0, v1, 0);
    v2 = v18;
    v4 = sub_1B1C07550(a1);
    v5 = 0;
    v6 = a1 + 64;
    v7 = *(_QWORD *)(v18 + 16);
    v8 = a1 + 88;
    do
    {
      v9 = v7;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * v4);
      v11 = *(_QWORD *)(v18 + 24);
      ++v7;
      if (v9 >= v11 >> 1)
      {
        v17 = v8;
        sub_1B202AD64(v11 > 1, v7, 1);
        v8 = v17;
      }
      *(_QWORD *)(v18 + 16) = v7;
      *(_QWORD *)(v18 + 8 * v9 + 32) = v10;
      v12 = v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * (v4 >> 6)) & (-2 << v4)) != 0)
      {
        v4 = __clz(__rbit64(*(_QWORD *)(v6 + 8 * (v4 >> 6)) & (-2 << v4))) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v4 = 1 << *(_BYTE *)(a1 + 32);
        v13 = v12 + 1;
        v14 = (v4 + 63) >> 6;
        if (v12 + 1 < v14)
        {
          v15 = *(_QWORD *)(v6 + 8 * v13);
          if (!v15)
          {
            v13 = v12 + 2;
            if (v12 + 2 >= v14)
              goto LABEL_4;
            v15 = *(_QWORD *)(v6 + 8 * v13);
            if (!v15)
            {
              while (v14 - 3 != v12)
              {
                v15 = *(_QWORD *)(v8 + 8 * v12++);
                if (v15)
                {
                  v13 = v12 + 2;
                  goto LABEL_10;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_10:
          v4 = __clz(__rbit64(v15)) + (v13 << 6);
        }
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v1);
  }
  return v2;
}

id sub_1B20E5288@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isHidden);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20E52B8(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHidden_, *a1);
}

id sub_1B20E52CC@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_position);
  *a2 = v4;
  return result;
}

id sub_1B20E52FC(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPosition_, *a1);
}

id sub_1B20E5310@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_eulerAngles);
  *a2 = v4;
  return result;
}

id sub_1B20E5340(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setEulerAngles_, *a1);
}

id sub_1B20E5354@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_scale);
  *a2 = v4;
  return result;
}

id sub_1B20E5384(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setScale_, *a1);
}

id sub_1B20E5398@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = objc_msgSend(*a1, sel_worldTransform);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

id sub_1B20E53CC(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWorldTransform_, *a1, a1[2], a1[4], a1[6]);
}

id sub_1B20E53E8@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_opacity);
  *a2 = v4;
  return result;
}

id sub_1B20E5418(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setOpacity_, a3);
}

id sub_1B20E542C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_renderingOrder);
  *a2 = result;
  return result;
}

id sub_1B20E545C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setRenderingOrder_, *a1);
}

id sub_1B20E5470@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_castsShadow);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20E54A0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCastsShadow_, *a1);
}

id sub_1B20E54B4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_categoryBitMask);
  *a2 = result;
  return result;
}

id sub_1B20E54E4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCategoryBitMask_, *a1);
}

void sub_1B20E54F8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6387850;
}

uint64_t sub_1B20E5508()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  type metadata accessor for GraphNodeLibrary();
  v0 = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[2] = sub_1B1B96B00(MEMORY[0x1E0DEE9D8]);
  v0[3] = v1;
  v0[4] = sub_1B1B987F4(v1);
  result = sub_1B20E5660();
  qword_1EEFD58C0 = (uint64_t)v0;
  return result;
}

uint64_t sub_1B20E5560(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = v2;
  v6 = *a1;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0x8000000000000000;
  sub_1B1B854B0((uint64_t)a1, v6, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v2 + 16) = v13;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD **)(v2 + 24);
  swift_retain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 24) = v8;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C6928C(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
    *(_QWORD *)(v3 + 24) = result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)sub_1B1C6928C(v10 > 1, v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v12 = &v8[2 * v11];
  v12[4] = a1;
  v12[5] = a2;
  *(_QWORD *)(v3 + 24) = v8;
  return result;
}

uint64_t sub_1B20E5660()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;

  sub_1B20EC45C();
  sub_1B20E7638();
  sub_1B20E89EC();
  sub_1B20E5798();
  sub_1B20E6FF8(0);
  sub_1B20EB23C();
  sub_1B20E9590();
  sub_1B20EBF70();
  sub_1B20EB5E8();
  type metadata accessor for NoopReturnNode(0);
  v0 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC3VFX14NoopReturnNode_type) = 0x8000000000000050;
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v0, 1);
  swift_release();
  type metadata accessor for NoopReturnAnyNode(0);
  v2 = (uint64_t *)swift_allocObject();
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v2, 1);
  swift_release();
  type metadata accessor for NoopActionNode(0);
  v3 = (uint64_t *)swift_allocObject();
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v3, 1);
  swift_release();
  sub_1B20EC708();
  sub_1B20ECB5C();
  return sub_1B20ECC4C();
}

uint64_t sub_1B20E5798()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int16 v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  uint64_t KeyPath;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  char *v83;
  _OWORD *v84;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  char *v123;
  uint64_t *v124;
  char *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  unsigned int v134;
  __int16 v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143[8];
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  _BYTE v147[32];

  v0 = MEMORY[0x1B5E20D60](0x6E6F697469736F70, 0xE800000000000000);
  v4 = sub_1B1ADEE18(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v4 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  v8 = *(_QWORD *)(v4 + 32);
  v7 = *(_QWORD *)(v4 + 40);
  v9 = *(_QWORD *)(v4 + 48);
  v10 = *(_BYTE *)(v4 + 56);
  v11 = *(_WORD *)(v4 + 58);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  type metadata accessor for SetECSValueNode(0);
  v12 = (uint64_t *)swift_allocObject();
  v13 = (char *)v12 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath;
  *(_QWORD *)v13 = 0xFFFFFFFFLL;
  *((_QWORD *)v13 + 1) = v6;
  *((_QWORD *)v13 + 2) = v5;
  *((_QWORD *)v13 + 3) = v8;
  *((_QWORD *)v13 + 4) = v7;
  *((_QWORD *)v13 + 5) = v9;
  v13[48] = v10;
  *((_WORD *)v13 + 25) = v11;
  v12[2] = MEMORY[0x1E0DEE9D8];
  v12[3] = 0;
  v12[4] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2228260();
  sub_1B20E5560(v12, 2);
  swift_release();
  type metadata accessor for GetECSValueNode(0);
  v14 = (uint64_t *)swift_allocObject();
  v15 = (char *)v14 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath;
  *(_QWORD *)v15 = 0xFFFFFFFFLL;
  *((_QWORD *)v15 + 1) = v6;
  *((_QWORD *)v15 + 2) = v5;
  *((_QWORD *)v15 + 3) = v8;
  *((_QWORD *)v15 + 4) = v7;
  *((_QWORD *)v15 + 5) = v9;
  v15[48] = v10;
  *((_WORD *)v15 + 25) = v11;
  v14[2] = MEMORY[0x1E0DEE9D8];
  v14[3] = 0;
  v14[4] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2228260();
  sub_1B20E5560(v14, 2);
  swift_release();
  type metadata accessor for InspectorSetECSValueNode(0);
  v16 = (uint64_t *)swift_allocObject();
  v17 = (char *)v16 + OBJC_IVAR____TtC3VFX13_ECSValueNode_entityKeyPath;
  *(_QWORD *)v17 = 0xFFFFFFFFLL;
  v138 = v7;
  v139 = v6;
  *((_QWORD *)v17 + 1) = v6;
  *((_QWORD *)v17 + 2) = v5;
  *((_QWORD *)v17 + 3) = v8;
  *((_QWORD *)v17 + 4) = v7;
  v137 = v9;
  *((_QWORD *)v17 + 5) = v9;
  v135 = v11;
  v136 = v10;
  v17[48] = v10;
  *((_WORD *)v17 + 25) = v11;
  v16[2] = MEMORY[0x1E0DEE9D8];
  v16[3] = 0;
  v16[4] = 0;
  v141 = v5;
  swift_bridgeObjectRetain();
  v140 = v8;
  swift_retain();
  sub_1B2228260();
  sub_1B20E5560(v16, 2);
  swift_release();
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5CE88, (uint64_t)&type metadata for ScriptKeyPath, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B22ADAF0;
  v20 = swift_getKeyPath();
  *(_QWORD *)(inited + 32) = 0x656C6269736956;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  v21 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(inited + 48) = v20;
  *(_QWORD *)(inited + 56) = v21;
  *(_QWORD *)(inited + 64) = 0;
  *(_BYTE *)(inited + 72) = 1;
  *(_WORD *)(inited + 74) = 0;
  v22 = swift_getKeyPath();
  v23 = MEMORY[0x1E0DEB188];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v25 = v24;
  *(_QWORD *)(inited + 80) = 0x6E6F697469736F50;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  *(_QWORD *)(inited + 96) = v22;
  *(_QWORD *)(inited + 104) = v24;
  *(_QWORD *)(inited + 112) = 0;
  *(_BYTE *)(inited + 120) = 1;
  *(_WORD *)(inited + 122) = 0;
  v26 = swift_getKeyPath();
  *(_QWORD *)(inited + 128) = 0x72656C7545;
  *(_QWORD *)(inited + 136) = 0xE500000000000000;
  *(_QWORD *)(inited + 144) = v26;
  *(_QWORD *)(inited + 152) = v25;
  *(_QWORD *)(inited + 160) = 0;
  *(_BYTE *)(inited + 168) = 1;
  *(_WORD *)(inited + 170) = 0;
  v27 = swift_getKeyPath();
  *(_QWORD *)(inited + 176) = 0x656C616353;
  *(_QWORD *)(inited + 184) = 0xE500000000000000;
  *(_QWORD *)(inited + 192) = v27;
  *(_QWORD *)(inited + 200) = v25;
  *(_QWORD *)(inited + 208) = 0;
  *(_BYTE *)(inited + 216) = 1;
  *(_WORD *)(inited + 218) = 0;
  v28 = swift_getKeyPath();
  type metadata accessor for simd_float4x4(0);
  *(_QWORD *)(inited + 224) = 0x725420646C726F57;
  *(_QWORD *)(inited + 232) = 0xEF6D726F66736E61;
  *(_QWORD *)(inited + 240) = v28;
  *(_QWORD *)(inited + 248) = v29;
  *(_QWORD *)(inited + 256) = 0;
  *(_BYTE *)(inited + 264) = 1;
  *(_WORD *)(inited + 266) = 0;
  v30 = swift_getKeyPath();
  *(_QWORD *)(inited + 272) = 0x7974696361704FLL;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  *(_QWORD *)(inited + 288) = v30;
  *(_QWORD *)(inited + 296) = v23;
  *(_QWORD *)(inited + 304) = 0;
  *(_BYTE *)(inited + 312) = 1;
  *(_WORD *)(inited + 314) = 0;
  v31 = swift_getKeyPath();
  v32 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 320) = 0x726564724FLL;
  *(_QWORD *)(inited + 328) = 0xE500000000000000;
  *(_QWORD *)(inited + 336) = v31;
  *(_QWORD *)(inited + 344) = v32;
  *(_QWORD *)(inited + 352) = 0;
  *(_BYTE *)(inited + 360) = 1;
  *(_WORD *)(inited + 362) = 0;
  v33 = swift_getKeyPath();
  strcpy((char *)(inited + 368), "Casts Shadow");
  *(_BYTE *)(inited + 381) = 0;
  *(_WORD *)(inited + 382) = -5120;
  *(_QWORD *)(inited + 384) = v33;
  *(_QWORD *)(inited + 392) = v21;
  *(_QWORD *)(inited + 400) = 0;
  *(_BYTE *)(inited + 408) = 1;
  *(_WORD *)(inited + 410) = 0;
  v34 = swift_getKeyPath();
  *(_QWORD *)(inited + 416) = 0x70756F7247;
  *(_QWORD *)(inited + 424) = 0xE500000000000000;
  v35 = MEMORY[0x1E0DEE190];
  *(_QWORD *)(inited + 432) = v34;
  *(_QWORD *)(inited + 440) = v35;
  *(_QWORD *)(inited + 448) = 0;
  *(_BYTE *)(inited + 456) = 1;
  *(_WORD *)(inited + 458) = 0;
  v36 = *(_QWORD *)(inited + 16);
  if (v36)
  {
    sub_1B2229328();
    v142 = KeyPath;
    swift_retain();
    swift_bridgeObjectRetain();
    v37 = (unsigned __int16 *)(inited + 74);
    while (1)
    {
      v38 = *(_QWORD *)(v37 - 21);
      v39 = *(_QWORD *)(v37 - 17);
      v40 = *(_QWORD *)(v37 - 13);
      v41 = *(_QWORD *)(v37 - 9);
      v42 = *(_QWORD *)(v37 - 5);
      v43 = *((unsigned __int8 *)v37 - 2);
      v44 = *v37;
      swift_bridgeObjectRetain();
      v45 = swift_retain();
      if ((MEMORY[0x1B5E20EC8](v45, v142) & 1) != 0)
        break;
      swift_release();
      swift_bridgeObjectRelease();
      v37 += 24;
      if (!--v36)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        goto LABEL_7;
      }
    }
    swift_release();
    swift_bridgeObjectRelease_n();
    LODWORD(v36) = v43 | (v44 << 16);
    v46 = v39;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v38 = 0;
    v46 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
  }
  swift_release();
  v47 = WORD1(v36);
  v134 = WORD1(v36);
  type metadata accessor for SetWorldValueNode(0);
  v48 = (uint64_t *)swift_allocObject();
  v49 = (uint64_t)v48 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
  *(_OWORD *)v49 = xmmword_1B2244C80;
  *(_QWORD *)(v49 + 16) = 0;
  *(_QWORD *)(v49 + 24) = 0;
  sub_1B1FA35C8(v49);
  *(_OWORD *)v49 = xmmword_1B2244C80;
  *(_QWORD *)(v49 + 16) = 0;
  *(_QWORD *)(v49 + 24) = 0;
  v50 = (char *)v48 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  *(_QWORD *)v50 = v38;
  *((_QWORD *)v50 + 1) = v46;
  *((_QWORD *)v50 + 2) = v40;
  *((_QWORD *)v50 + 3) = v41;
  *((_QWORD *)v50 + 4) = v42;
  v51 = v36 & 1;
  v50[40] = v51;
  *((_WORD *)v50 + 21) = v47;
  v48[4] = 0;
  v48[2] = MEMORY[0x1E0DEE9D8];
  v48[3] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2228260();
  sub_1B20E5560(v48, 2);
  swift_release();
  type metadata accessor for GetWorldValueNode(0);
  v52 = (uint64_t *)swift_allocObject();
  v53 = (uint64_t)v52 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
  *(_OWORD *)v53 = xmmword_1B2244C80;
  *(_QWORD *)(v53 + 16) = 0;
  *(_QWORD *)(v53 + 24) = 0;
  sub_1B1FA35C8(v53);
  *(_OWORD *)v53 = xmmword_1B2244C80;
  *(_QWORD *)(v53 + 16) = 0;
  *(_QWORD *)(v53 + 24) = 0;
  v54 = (char *)v52 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  *(_QWORD *)v54 = v38;
  *((_QWORD *)v54 + 1) = v46;
  *((_QWORD *)v54 + 2) = v40;
  *((_QWORD *)v54 + 3) = v41;
  *((_QWORD *)v54 + 4) = v42;
  v54[40] = v51;
  *((_WORD *)v54 + 21) = v134;
  v52[4] = 0;
  v52[2] = MEMORY[0x1E0DEE9D8];
  v52[3] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2228260();
  sub_1B20E5560(v52, 2);
  swift_release();
  type metadata accessor for InspectorSetWorldValueNode(0);
  v55 = (uint64_t *)swift_allocObject();
  v56 = (uint64_t)v55 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
  *(_OWORD *)v56 = xmmword_1B2244C80;
  *(_QWORD *)(v56 + 16) = 0;
  *(_QWORD *)(v56 + 24) = 0;
  sub_1B1FA35C8(v56);
  *(_OWORD *)v56 = xmmword_1B2244C80;
  *(_QWORD *)(v56 + 16) = 0;
  *(_QWORD *)(v56 + 24) = 0;
  v57 = (char *)v55 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  *(_QWORD *)v57 = v38;
  *((_QWORD *)v57 + 1) = v46;
  *((_QWORD *)v57 + 2) = v40;
  *((_QWORD *)v57 + 3) = v41;
  *((_QWORD *)v57 + 4) = v42;
  v57[40] = v51;
  *((_WORD *)v57 + 21) = v134;
  v55[4] = 0;
  v58 = MEMORY[0x1E0DEE9D8];
  v55[2] = MEMORY[0x1E0DEE9D8];
  v55[3] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2228260();
  sub_1B20E5560(v55, 2);
  swift_release();
  swift_unknownObjectWeakInit();
  v144 = 0;
  swift_unknownObjectWeakAssign();
  v145 = 0x3E6C6C756E3CLL;
  v146 = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)v143, (uint64_t)v147);
  type metadata accessor for WorldReferenceNode(0);
  v59 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v59 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind) = 0;
  sub_1B1A00060((uint64_t)v147, (uint64_t)v59 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
  v59[3] = 0;
  v59[4] = 0;
  v59[2] = v58;
  sub_1B2228260();
  sub_1B19FC350((uint64_t)v147);
  sub_1B20E5560(v59, 4);
  swift_release();
  v144 = 0;
  swift_unknownObjectWeakInit();
  v144 = 0;
  swift_unknownObjectWeakAssign();
  v145 = 0x3E6C6C756E3CLL;
  v146 = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)v143, (uint64_t)v147);
  v60 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v60 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind) = 1;
  sub_1B1A00060((uint64_t)v147, (uint64_t)v60 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
  v60[3] = 0;
  v60[4] = 0;
  v60[2] = v58;
  sub_1B2228260();
  sub_1B19FC350((uint64_t)v147);
  sub_1B20E5560(v60, 4);
  swift_release();
  v144 = 0;
  swift_unknownObjectWeakInit();
  v144 = 0;
  swift_unknownObjectWeakAssign();
  v145 = 0x3E6C6C756E3CLL;
  v146 = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)v143, (uint64_t)v147);
  type metadata accessor for ImplicitWorldReferenceNode(0);
  v61 = (uint64_t *)swift_allocObject();
  sub_1B1A00060((uint64_t)v147, (uint64_t)v143);
  *((_BYTE *)v61 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind) = 0;
  sub_1B1A00060((uint64_t)v143, (uint64_t)v61 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
  v61[3] = 0;
  v61[4] = 0;
  v61[2] = v58;
  sub_1B2228260();
  sub_1B19FC350((uint64_t)v143);
  sub_1B19FC350((uint64_t)v147);
  sub_1B20E5560(v61, 2);
  swift_release();
  type metadata accessor for TimeNode(0);
  v62 = (uint64_t *)swift_allocObject();
  v62[3] = 0;
  v62[4] = 0;
  v62[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v62, 0);
  swift_release();
  type metadata accessor for DeltaTimeNode(0);
  v63 = (uint64_t *)swift_allocObject();
  v63[3] = 0;
  v63[4] = 0;
  v63[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v63, 0);
  swift_release();
  type metadata accessor for IsFirstFrameNode(0);
  v64 = (uint64_t *)swift_allocObject();
  v64[3] = 0;
  v64[4] = 0;
  v64[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v64, 0);
  swift_release();
  type metadata accessor for OnUpdateNode(0);
  v65 = (uint64_t *)swift_allocObject();
  v65[3] = 0;
  v65[4] = 0;
  v65[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v65, 0);
  swift_release();
  type metadata accessor for OnFirstFrameNode(0);
  v66 = (uint64_t *)swift_allocObject();
  v66[3] = 0;
  v66[4] = 0;
  v66[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v66, 0);
  swift_release();
  type metadata accessor for OnParticleStageNode(0);
  v67 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v67 + OBJC_IVAR____TtC3VFX19OnParticleStageNode_stage) = 3;
  v67[3] = 0;
  v67[4] = 0;
  v67[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v67, 0);
  swift_release();
  v68 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v68 + OBJC_IVAR____TtC3VFX19OnParticleStageNode_stage) = 5;
  v68[3] = 0;
  v68[4] = 0;
  v68[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v68, 0);
  swift_release();
  type metadata accessor for AlphaPremultipliedNode(0);
  v69 = (uint64_t *)swift_allocObject();
  v69[3] = 0;
  v69[4] = 0;
  v69[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v69, 0);
  swift_release();
  type metadata accessor for RGBAToHSBANode(0);
  v70 = (uint64_t *)swift_allocObject();
  v70[3] = 0;
  v70[4] = 0;
  v70[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v70, 0);
  swift_release();
  type metadata accessor for RGBToHSBNode(0);
  v71 = (uint64_t *)swift_allocObject();
  v71[3] = 0;
  v71[4] = 0;
  v71[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v71, 0);
  swift_release();
  type metadata accessor for HSBAToRGBANode(0);
  v72 = (uint64_t *)swift_allocObject();
  v72[2] = v58;
  v72[3] = 0;
  v72[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v72, 0);
  swift_release();
  type metadata accessor for HSBToRGBNode(0);
  v73 = (uint64_t *)swift_allocObject();
  v73[2] = v58;
  v73[3] = 0;
  v73[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v73, 0);
  swift_release();
  type metadata accessor for sRGBAToLinearNode(0);
  v74 = (uint64_t *)swift_allocObject();
  v74[2] = v58;
  v74[3] = 0;
  v74[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v74, 0);
  swift_release();
  type metadata accessor for sRGBToLinearNode(0);
  v75 = (uint64_t *)swift_allocObject();
  v75[2] = v58;
  v75[3] = 0;
  v75[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v75, 0);
  swift_release();
  type metadata accessor for LinearTosRGBNode(0);
  v76 = (uint64_t *)swift_allocObject();
  v76[2] = v58;
  v76[3] = 0;
  v76[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v76, 0);
  swift_release();
  type metadata accessor for LinearTosRGBANode(0);
  v77 = (uint64_t *)swift_allocObject();
  v77[2] = v58;
  v77[3] = 0;
  v77[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v77, 0);
  swift_release();
  type metadata accessor for EntityAssetNode(0);
  v78 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v78 + OBJC_IVAR____TtC3VFX15EntityAssetNode_kind) = 1;
  *(uint64_t *)((char *)v78 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity) = 0xFFFFFFFFLL;
  v78[2] = v58;
  v78[3] = 0;
  v78[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v78, 2);
  swift_release();
  type metadata accessor for ImplicitEntityAssetNode(0);
  v79 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v79 + OBJC_IVAR____TtC3VFX15EntityAssetNode_kind) = 1;
  *(uint64_t *)((char *)v79 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity) = 0xFFFFFFFFLL;
  v79[2] = v58;
  v79[3] = 0;
  v79[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v79, 2);
  swift_release();
  type metadata accessor for CurveTextureNode(0);
  swift_allocObject();
  v80 = sub_1B1D8C370();
  sub_1B20E5560(v80, 0);
  swift_release();
  type metadata accessor for EvaluateCurveNode(0);
  v81 = (uint64_t *)swift_allocObject();
  v81[2] = v58;
  v81[3] = 0;
  v81[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v81, 0);
  swift_release();
  type metadata accessor for ColorRampTextureNode(0);
  v82 = (uint64_t *)swift_allocObject();
  v83 = (char *)v82 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp;
  sub_1B1AE11F4();
  v84 = (_OWORD *)swift_allocObject();
  __asm { FMOV            V1.4S, #1.0 }
  v84[1] = xmmword_1B226CD10;
  v84[2] = _Q1;
  *(_QWORD *)v83 = v84;
  *((_QWORD *)v83 + 1) = &unk_1E63C3890;
  v83[16] = 1;
  *(uint64_t *)((char *)v82 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = 0xFFFFFFFFLL;
  v84[3] = xmmword_1B2244E20;
  v82[3] = 0;
  v82[4] = 0;
  v82[2] = v58;
  sub_1B2228260();
  sub_1B20E5560(v82, 0);
  swift_release();
  type metadata accessor for EvaluateColorRampNode(0);
  v90 = (uint64_t *)swift_allocObject();
  v90[2] = v58;
  v90[3] = 0;
  v90[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v90, 0);
  swift_release();
  type metadata accessor for Random01Node(0);
  v91 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v91 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = 0x8000000000000050;
  v91[2] = v58;
  v91[3] = 0;
  v91[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v91, 0);
  swift_release();
  v92 = swift_allocObject();
  *(_OWORD *)(v92 + 16) = xmmword_1B2286450;
  v93 = v92 | 0x1000000000000000;
  v94 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v94 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v93;
  v94[2] = v58;
  v94[3] = 0;
  v94[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v94, 0);
  swift_release();
  v95 = swift_allocObject();
  *(_OWORD *)(v95 + 16) = xmmword_1B22847D0;
  v96 = v95 | 0x1000000000000000;
  v97 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v97 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v96;
  v97[2] = v58;
  v97[3] = 0;
  v97[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v97, 0);
  swift_release();
  v98 = swift_allocObject();
  *(_OWORD *)(v98 + 16) = xmmword_1B22847C0;
  v99 = v98 | 0x1000000000000000;
  v100 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v100 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v99;
  v100[2] = v58;
  v100[3] = 0;
  v100[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v100, 0);
  swift_release();
  v101 = swift_allocObject();
  *(_OWORD *)(v101 + 16) = xmmword_1B2286450;
  v102 = v101 | 0x1000000000000000;
  type metadata accessor for RandomUnitVectorNode(0);
  v103 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v103 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v102;
  v103[2] = v58;
  v103[3] = 0;
  v103[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v103, 0);
  swift_release();
  v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_1B22847D0;
  v105 = v104 | 0x1000000000000000;
  v106 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v106 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v105;
  v106[2] = v58;
  v106[3] = 0;
  v106[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v106, 0);
  swift_release();
  v107 = swift_allocObject();
  *(_OWORD *)(v107 + 16) = xmmword_1B22847C0;
  v108 = v107 | 0x1000000000000000;
  v109 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v109 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v108;
  v109[2] = v58;
  v109[3] = 0;
  v109[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v109, 0);
  swift_release();
  v110 = swift_allocObject();
  *(_QWORD *)(v110 + 16) = 0x8000000000000050;
  v111 = v110 | 0x2000000000000000;
  type metadata accessor for RandomInRangeNode(0);
  v112 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v112 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v111;
  v112[2] = v58;
  v112[3] = 0;
  v112[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v112, 0);
  swift_release();
  v113 = swift_allocObject();
  *(_QWORD *)(v113 + 16) = 0x8000000000000040;
  v114 = v113 | 0x2000000000000000;
  v115 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v115 + OBJC_IVAR____TtC3VFX15RandomTypedNode_type) = v114;
  v115[2] = v58;
  v115[3] = 0;
  v115[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v115, 0);
  swift_release();
  type metadata accessor for RandomPositionInsideSphereNode(0);
  v116 = (uint64_t *)swift_allocObject();
  v116[2] = v58;
  v116[3] = 0;
  v116[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v116, 0);
  swift_release();
  type metadata accessor for RandomPositionInsideCubeNode(0);
  v117 = (uint64_t *)swift_allocObject();
  v117[2] = v58;
  v117[3] = 0;
  v117[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v117, 0);
  swift_release();
  type metadata accessor for PerlinNoiseFloatNode(0);
  v118 = (uint64_t *)swift_allocObject();
  v118[2] = v58;
  v118[3] = 0;
  v118[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v118, 0);
  swift_release();
  type metadata accessor for PerlinNoiseFloat2Node(0);
  v119 = (uint64_t *)swift_allocObject();
  v119[2] = v58;
  v119[3] = 0;
  v119[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v119, 0);
  swift_release();
  type metadata accessor for PerlinNoiseFloat3Node(0);
  v120 = (uint64_t *)swift_allocObject();
  v120[2] = v58;
  v120[3] = 0;
  v120[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v120, 0);
  swift_release();
  type metadata accessor for PerlinNoiseFloat4Node(0);
  v121 = (uint64_t *)swift_allocObject();
  v121[2] = v58;
  v121[3] = 0;
  v121[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v121, 0);
  swift_release();
  type metadata accessor for SetParticleValueNode(0);
  v122 = (uint64_t *)swift_allocObject();
  v123 = (char *)v122 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath;
  *(_QWORD *)v123 = v139;
  *((_QWORD *)v123 + 1) = v141;
  *((_QWORD *)v123 + 2) = v140;
  *((_QWORD *)v123 + 3) = v138;
  *((_QWORD *)v123 + 4) = v137;
  v123[40] = v136;
  *((_WORD *)v123 + 21) = v135;
  v122[4] = 0;
  v122[2] = MEMORY[0x1E0DEE9D8];
  v122[3] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2228260();
  sub_1B20E5560(v122, 2);
  swift_release();
  type metadata accessor for GetParticleValueNode(0);
  v124 = (uint64_t *)swift_allocObject();
  v125 = (char *)v124 + OBJC_IVAR____TtC3VFX18_ParticleValueNode_keyPath;
  *(_QWORD *)v125 = v139;
  *((_QWORD *)v125 + 1) = v141;
  *((_QWORD *)v125 + 2) = v140;
  *((_QWORD *)v125 + 3) = v138;
  *((_QWORD *)v125 + 4) = v137;
  v125[40] = v136;
  *((_WORD *)v125 + 21) = v135;
  v124[4] = 0;
  v126 = MEMORY[0x1E0DEE9D8];
  v124[2] = MEMORY[0x1E0DEE9D8];
  v124[3] = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B2228260();
  sub_1B20E5560(v124, 2);
  swift_release();
  type metadata accessor for SamplerNode(0);
  v127 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v127 + OBJC_IVAR____TtC3VFX11SamplerNode_textureType) = 0;
  v127[2] = v126;
  v127[3] = 0;
  v127[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v127, 0);
  swift_release();
  v128 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v128 + OBJC_IVAR____TtC3VFX11SamplerNode_textureType) = 1;
  v128[2] = v126;
  v128[3] = 0;
  v128[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v128, 0);
  swift_release();
  v129 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v129 + OBJC_IVAR____TtC3VFX11SamplerNode_textureType) = 2;
  v129[2] = v126;
  v129[3] = 0;
  v129[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v129, 0);
  swift_release();
  type metadata accessor for SampleNode(0);
  v130 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v130 + OBJC_IVAR____TtC3VFX10SampleNode_textureType) = 0;
  v130[2] = v126;
  v130[3] = 0;
  v130[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v130, 0);
  swift_release();
  v131 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v131 + OBJC_IVAR____TtC3VFX10SampleNode_textureType) = 1;
  v131[2] = v126;
  v131[3] = 0;
  v131[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v131, 0);
  swift_release();
  v132 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v132 + OBJC_IVAR____TtC3VFX10SampleNode_textureType) = 2;
  v132[2] = v126;
  v132[3] = 0;
  v132[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v132, 0);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B20E6FF8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;

  v2 = v1;
  *((_QWORD *)&v54 + 1) = &type metadata for BlendMode;
  v4 = sub_1B20ECFC8();
  *(_QWORD *)&v55 = v4;
  LODWORD(v53) = 0;
  BYTE4(v53) = 1;
  v51 = type metadata accessor for EnumConstantNode(0);
  v5 = (uint64_t *)swift_allocObject();
  sub_1B19FA198((uint64_t)&v53, (uint64_t)v5 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value);
  v6 = MEMORY[0x1E0DEE9D8];
  v5[3] = 0;
  v5[4] = 0;
  v5[2] = v6;
  sub_1B2228260();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v53);
  sub_1B20E5560(v5, 2);
  swift_release();
  *((_QWORD *)&v54 + 1) = &type metadata for BlendMode;
  *(_QWORD *)&v55 = v4;
  LODWORD(v53) = 0;
  BYTE4(v53) = 1;
  type metadata accessor for ImplicitEnumConstantNode(0);
  v7 = (uint64_t *)swift_allocObject();
  sub_1B19FA198((uint64_t)&v53, (uint64_t)&v57);
  sub_1B19FA198((uint64_t)&v57, (uint64_t)v7 + OBJC_IVAR____TtC3VFX16EnumConstantNode_value);
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v6;
  sub_1B2228260();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v57);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v53);
  sub_1B20E5560(v7, 2);
  result = swift_release();
  if ((a1 & 1) == 0)
    return result;
  if (!off_1ED4B84E0)
    goto LABEL_48;
  swift_retain();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_1B20E50E4(v9);
  swift_release();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    v12 = 0;
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    do
    {
      v15 = *(_QWORD *)(v10 + 8 * v12 + 32);
      v16 = swift_conformsToProtocol2();
      if (v16)
        v17 = v15;
      else
        v17 = 0;
      if (v16)
        v18 = v16;
      else
        v18 = 0;
      if (v17)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_1B1C69394(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
        v20 = *((_QWORD *)v13 + 2);
        v19 = *((_QWORD *)v13 + 3);
        if (v20 >= v19 >> 1)
          v13 = sub_1B1C69394(v19 > 1, v20 + 1, 1, v13);
        *((_QWORD *)v13 + 2) = v20 + 1;
        v14 = &v13[16 * v20];
        *((_QWORD *)v14 + 4) = v17;
        *((_QWORD *)v14 + 5) = v18;
      }
      ++v12;
    }
    while (v11 != v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v21 = *((_QWORD *)v13 + 2);
  if (!v21)
    return swift_bridgeObjectRelease();
  v22 = &v54;
  v23 = v13 + 40;
  v52 = MEMORY[0x1E0DEE9B8] + 8;
  v50 = &v54;
  while (1)
  {
    v24 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)v23 + 24) + 8))();
    if (*(_QWORD *)(v24 + 16))
    {
      sub_1B20ED00C(v24 + 32, (uint64_t)&v53);
    }
    else
    {
      v54 = 0u;
      v55 = 0u;
      v53 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v53 + 1))
    {
      sub_1B1B25B94((uint64_t)&v53, &qword_1EEF634B0, (void (*)(uint64_t))sub_1B20ED050);
      v57 = 0u;
      v58 = 0u;
      v59 = 0;
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
    sub_1B1A0DDAC(v22, &v56);
    sub_1B1C25C40();
    if ((swift_dynamicCast() & 1) == 0)
    {
      v59 = 0;
      v57 = 0u;
      v58 = 0u;
      goto LABEL_23;
    }
    if (*((_QWORD *)&v58 + 1))
      break;
LABEL_23:
    sub_1B1B25B94((uint64_t)&v57, &qword_1EEF5C6C8, (void (*)(uint64_t))sub_1B1C25C40);
LABEL_24:
    v23 += 16;
    if (!--v21)
      return swift_bridgeObjectRelease();
  }
  sub_1B1A02518(&v57, (uint64_t)&v53);
  sub_1B19FA198((uint64_t)&v53, (uint64_t)&v57);
  v25 = *((_QWORD *)&v58 + 1);
  v26 = v59;
  v27 = sub_1B19FC264((uint64_t)&v57, *((uint64_t *)&v58 + 1));
  v28 = MEMORY[0x1E0C80A78](v27, v27);
  v30 = (char *)&v49 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v31 + 16))(v30, v28);
  v32 = sub_1B1FF9650((uint64_t)v30, v51, v25, v26);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v57);
  v33 = *v32;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v57 = *(_QWORD *)(v2 + 16);
  v35 = v57;
  *(_QWORD *)(v2 + 16) = 0x8000000000000000;
  v36 = sub_1B1DC3AC8(v33);
  v38 = v37;
  v39 = *(_QWORD *)(v35 + 16) + ((v37 & 1) == 0);
  if (*(_QWORD *)(v35 + 24) >= v39)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1B1EA9D2C();
    goto LABEL_37;
  }
  sub_1B1E94400(v39, isUniquelyReferenced_nonNull_native);
  v40 = sub_1B1DC3AC8(v33);
  if ((v38 & 1) == (v41 & 1))
  {
    v36 = v40;
LABEL_37:
    v42 = (_QWORD *)v57;
    if ((v38 & 1) != 0)
    {
      v43 = *(_QWORD *)(v57 + 56);
      swift_release();
      *(_QWORD *)(v43 + 8 * v36) = v32;
    }
    else
    {
      *(_QWORD *)(v57 + 8 * (v36 >> 6) + 64) |= 1 << v36;
      *(_QWORD *)(v42[6] + 8 * v36) = v33;
      *(_QWORD *)(v42[7] + 8 * v36) = v32;
      ++v42[2];
    }
    *(_QWORD *)(v2 + 16) = v42;
    swift_bridgeObjectRelease();
    v44 = *(_QWORD **)(v2 + 24);
    swift_retain();
    v45 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v2 + 24) = v44;
    if ((v45 & 1) == 0)
    {
      v44 = sub_1B1C6928C(0, v44[2] + 1, 1, v44);
      *(_QWORD *)(v2 + 24) = v44;
    }
    v47 = v44[2];
    v46 = v44[3];
    if (v47 >= v46 >> 1)
      v44 = sub_1B1C6928C(v46 > 1, v47 + 1, 1, v44);
    v44[2] = v47 + 1;
    v48 = &v44[2 * v47];
    v48[4] = v32;
    v48[5] = 4;
    *(_QWORD *)(v2 + 24) = v44;
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v53);
    v22 = v50;
    goto LABEL_24;
  }
  sub_1B2229FC4();
  __break(1u);
LABEL_48:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B20E7638()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  ValueMetadata *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  ValueMetadata *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  ValueMetadata *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  ValueMetadata *v29;
  _OWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  ValueMetadata *v35;
  _OWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  ValueMetadata *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  ValueMetadata *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  ValueMetadata *v61;
  uint64_t *v62;
  uint64_t v63;
  ValueMetadata *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  char *v78;
  _OWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  ValueMetadata *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t DynamicType;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t result;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  ValueMetadata *v107;
  uint64_t v108;
  _QWORD v109[4];
  _DWORD v110[6];
  uint64_t v111;

  v0 = MEMORY[0x1E0DEB188];
  v111 = MEMORY[0x1E0DEB188];
  v110[0] = 0;
  sub_1B1A02864((uint64_t)v110, (uint64_t)v109);
  v108 = 0x8000000000000050;
  type metadata accessor for ImplicitConstantNode(0);
  v1 = (uint64_t *)swift_allocObject();
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)&v104);
  v2 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v104, (unint64_t *)((char *)v1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v1 + v2) = xmmword_1B2246910;
  v3 = MEMORY[0x1E0DEE9D8];
  v1[2] = MEMORY[0x1E0DEE9D8];
  v1[3] = 0;
  v1[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v104);
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v110);
  sub_1B20E5560(v1, 2);
  swift_release();
  v107 = (ValueMetadata *)v0;
  LODWORD(v104) = 0;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = 0x8000000000000050;
  type metadata accessor for ConstantNode(0);
  v4 = (uint64_t *)swift_allocObject();
  v5 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v4 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v4 + v5) = xmmword_1B2246910;
  v4[2] = v3;
  v4[3] = 0;
  v4[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v4, 0);
  swift_release();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B2286450;
  v7 = v6 | 0x1000000000000000;
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, v0, MEMORY[0x1E0DEDD20]);
  v107 = v8;
  v104 = 0;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = v7;
  v9 = (uint64_t *)swift_allocObject();
  v10 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v9 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v9 + v10) = xmmword_1B2246910;
  v9[2] = MEMORY[0x1E0DEE9D8];
  v9[3] = 0;
  v9[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v9, 0);
  swift_release();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B22847D0;
  v12 = v11 | 0x1000000000000000;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, v0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v107 = v13;
  v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = 0u;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = v12;
  v14 = (uint64_t *)swift_allocObject();
  v15 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v14 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v14 + v15) = xmmword_1B2246910;
  v16 = MEMORY[0x1E0DEE9D8];
  v14[2] = MEMORY[0x1E0DEE9D8];
  v14[3] = 0;
  v14[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v14, 0);
  swift_release();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B22847C0;
  v18 = v17 | 0x1000000000000000;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  v103 = (uint64_t)v19;
  v107 = v19;
  v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = 0u;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = v18;
  v20 = (uint64_t *)swift_allocObject();
  v21 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v20 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v20 + v21) = xmmword_1B2246910;
  v20[2] = v16;
  v20[3] = 0;
  v20[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v20, 0);
  swift_release();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = 2;
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1B2286450;
  *(_QWORD *)(v22 + 24) = v23 | 0x1000000000000000;
  type metadata accessor for simd_float2x2(0);
  v107 = v24;
  v104 = 1065353216;
  v105 = 0x3F80000000000000;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = v22 | 0x1000000000000000;
  v25 = (uint64_t *)swift_allocObject();
  v26 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v25 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v25 + v26) = xmmword_1B2246910;
  v25[2] = v16;
  v25[3] = 0;
  v25[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v25, 0);
  swift_release();
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = 3;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1B22847D0;
  *(_QWORD *)(v27 + 24) = v28 | 0x1000000000000000;
  type metadata accessor for simd_float3x3(0);
  v107 = v29;
  v30 = (_OWORD *)swift_allocObject();
  v104 = (uint64_t)v30;
  v30[1] = xmmword_1B2244DB0;
  v30[2] = xmmword_1B2244DD0;
  v30[3] = xmmword_1B2244D90;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = v27 | 0x1000000000000000;
  v31 = (uint64_t *)swift_allocObject();
  v32 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v31 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v31 + v32) = xmmword_1B2246910;
  v31[2] = v16;
  v31[3] = 0;
  v31[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v31, 0);
  swift_release();
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = 4;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1B22847C0;
  *(_QWORD *)(v33 + 24) = v34 | 0x1000000000000000;
  type metadata accessor for simd_float4x4(0);
  v107 = v35;
  v36 = (_OWORD *)swift_allocObject();
  v104 = (uint64_t)v36;
  v36[1] = xmmword_1B2244DB0;
  v36[2] = xmmword_1B2244DD0;
  v36[3] = xmmword_1B2244D90;
  v36[4] = xmmword_1B2244E20;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = v33 | 0x1000000000000000;
  v37 = (uint64_t *)swift_allocObject();
  v38 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v37 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v37 + v38) = xmmword_1B2246910;
  v39 = MEMORY[0x1E0DEE9D8];
  v37[2] = MEMORY[0x1E0DEE9D8];
  v37[3] = 0;
  v37[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v37, 0);
  swift_release();
  v107 = (ValueMetadata *)MEMORY[0x1E0DEDBC8];
  LODWORD(v104) = 0;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = 0x8000000000000030;
  v40 = (uint64_t *)swift_allocObject();
  v41 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v40 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v40 + v41) = xmmword_1B2246910;
  v40[2] = v39;
  v40[3] = 0;
  v40[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v40, 0);
  swift_release();
  v107 = (ValueMetadata *)MEMORY[0x1E0DEE0F8];
  LODWORD(v104) = 0;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = 0x8000000000000038;
  v42 = (uint64_t *)swift_allocObject();
  v43 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v42 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v42 + v43) = xmmword_1B2246910;
  v42[3] = 0;
  v42[4] = 0;
  v42[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v42, 0);
  swift_release();
  v107 = (ValueMetadata *)MEMORY[0x1E0DEDC60];
  v104 = 0;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = 0x8000000000000040;
  v44 = (uint64_t *)swift_allocObject();
  v45 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v44 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v44 + v45) = xmmword_1B2246910;
  v44[3] = 0;
  v44[4] = 0;
  v44[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v44, 0);
  swift_release();
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1B2292110;
  v47 = v46 | 0x1000000000000000;
  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v107 = v48;
  v49 = swift_allocObject();
  v104 = v49;
  *(_QWORD *)(v49 + 16) = 0;
  *(_QWORD *)(v49 + 24) = 0;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = v47;
  v50 = (uint64_t *)swift_allocObject();
  v51 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v50 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v50 + v51) = xmmword_1B2246910;
  v50[3] = 0;
  v50[4] = 0;
  v50[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v50, 0);
  swift_release();
  v107 = (ValueMetadata *)MEMORY[0x1E0DEAFA0];
  LOBYTE(v104) = 0;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = 0x8000000000000010;
  v52 = (uint64_t *)swift_allocObject();
  v53 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v52 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v52 + v53) = xmmword_1B2246910;
  v52[3] = 0;
  v52[4] = 0;
  v52[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v52, 0);
  swift_release();
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = 0x8000000000000050;
  v55 = v54 | 0x2000000000000000;
  sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  v107 = v56;
  v104 = 0;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = v55;
  v57 = (uint64_t *)swift_allocObject();
  v58 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v57 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v57 + v58) = xmmword_1B2246910;
  v57[3] = 0;
  v57[4] = 0;
  v57[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v57, 0);
  swift_release();
  v59 = swift_allocObject();
  *(_QWORD *)(v59 + 16) = 0x8000000000000040;
  v60 = v59 | 0x2000000000000000;
  sub_1B1AED5E4(0, &qword_1ED4BA5C8, MEMORY[0x1E0DEDC60], MEMORY[0x1E0DEDC78], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  v107 = v61;
  v104 = 0;
  v105 = 0;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = v60;
  v62 = (uint64_t *)swift_allocObject();
  v63 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v62 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v62 + v63) = xmmword_1B2246910;
  v62[3] = 0;
  v62[4] = 0;
  v62[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v62, 0);
  swift_release();
  type metadata accessor for simd_quatf(0);
  v107 = v64;
  v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_1B2244E20;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = 0x8000000000000028;
  v65 = (uint64_t *)swift_allocObject();
  v66 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v65 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v65 + v66) = xmmword_1B2246910;
  v65[3] = 0;
  v65[4] = 0;
  v65[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v65, 0);
  swift_release();
  v107 = (ValueMetadata *)MEMORY[0x1E0DEA968];
  v104 = 0;
  v105 = 0xE000000000000000;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = 0x8000000000000068;
  v67 = (uint64_t *)swift_allocObject();
  v68 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v67 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v67 + v68) = xmmword_1B2246910;
  v67[3] = 0;
  v67[4] = 0;
  v67[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v67, 0);
  swift_release();
  sub_1B1AE11F4();
  v69 = (_OWORD *)swift_allocObject();
  __asm { FMOV            V1.4S, #1.0 }
  v102 = _Q1;
  v69[1] = xmmword_1B226CD10;
  v69[2] = _Q1;
  v69[3] = xmmword_1B2244E20;
  v107 = &type metadata for ColorRamp;
  v104 = (uint64_t)v69;
  v105 = (unint64_t)&unk_1E63C3890;
  v106 = 1;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = 0x8000000000000070;
  v75 = (uint64_t *)swift_allocObject();
  v76 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v75 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v75 + v76) = xmmword_1B2246910;
  v75[3] = 0;
  v75[4] = 0;
  v75[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v75, 0);
  swift_release();
  type metadata accessor for ColorRampTextureNode(0);
  v77 = (uint64_t *)swift_allocObject();
  v78 = (char *)v77 + OBJC_IVAR____TtC3VFX20ColorRampTextureNode_colorRamp;
  v79 = (_OWORD *)swift_allocObject();
  v79[1] = xmmword_1B226CD10;
  v79[2] = v102;
  *(_QWORD *)v78 = v79;
  *((_QWORD *)v78 + 1) = &unk_1E63C3890;
  v78[16] = 1;
  *(uint64_t *)((char *)v77 + OBJC_IVAR____TtC3VFX14ECSStorageNode_entity) = 0xFFFFFFFFLL;
  v79[3] = xmmword_1B2244E20;
  v77[3] = 0;
  v77[4] = 0;
  v77[2] = v39;
  sub_1B2228260();
  sub_1B20E5560(v77, 0);
  swift_release();
  v80 = sub_1B21451EC(v39);
  v82 = v81;
  sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
  v107 = v83;
  v84 = swift_allocObject();
  v104 = v84;
  *(_QWORD *)(v84 + 16) = v80;
  *(_QWORD *)(v84 + 24) = v82;
  *(_QWORD *)(v84 + 32) = 0;
  *(_BYTE *)(v84 + 40) = 1;
  sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
  v108 = 0x8000000000000080;
  v85 = (uint64_t *)swift_allocObject();
  v86 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v85 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v85 + v86) = xmmword_1B2246910;
  v85[3] = 0;
  v85[4] = 0;
  v85[2] = v39;
  sub_1B2228260();
  sub_1B1A028A0((unint64_t *)&v108);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
  sub_1B20E5560(v85, 0);
  swift_release();
  type metadata accessor for CurveTextureNode(0);
  swift_allocObject();
  v87 = sub_1B1D8C370();
  sub_1B20E5560(v87, 0);
  swift_release();
  v107 = (ValueMetadata *)v103;
  v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = 0u;
  sub_1B19FA070(&v104, v103);
  DynamicType = swift_getDynamicType();
  v89 = sub_1B1D76F30(DynamicType);
  if ((~v89 & 0xF000000000000007) != 0)
  {
    v90 = v89;
    sub_1B1A02864((uint64_t)&v104, (uint64_t)v109);
    v108 = v90;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v104);
    v91 = (uint64_t *)swift_allocObject();
    v92 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
    sub_1B1A02828((unint64_t *)&v108, (unint64_t *)((char *)v91 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
    *(_OWORD *)((char *)v91 + v92) = xmmword_1B22BAE60;
    v91[2] = v39;
    v91[3] = 0;
    v91[4] = 0;
    sub_1B2228260();
    sub_1B1A028A0((unint64_t *)&v108);
    sub_1B20E5560(v91, 0);
    swift_release();
    type metadata accessor for PiNode(0);
    swift_allocObject();
    v93 = sub_1B1F1B83C();
    sub_1B20E5560(v93, 0);
    swift_release();
    type metadata accessor for TwoPiNode(0);
    swift_allocObject();
    v94 = sub_1B1F1B83C();
    sub_1B20E5560(v94, 0);
    swift_release();
    type metadata accessor for HalfPiNode(0);
    swift_allocObject();
    v95 = sub_1B1F1B83C();
    sub_1B20E5560(v95, 0);
    swift_release();
    type metadata accessor for EpsilonNode(0);
    swift_allocObject();
    v96 = sub_1B1F1B83C();
    sub_1B20E5560(v96, 0);
    swift_release();
    type metadata accessor for Identity2x2Node(0);
    swift_allocObject();
    v97 = sub_1B1F1B83C();
    sub_1B20E5560(v97, 0);
    swift_release();
    type metadata accessor for Identity3x3Node(0);
    swift_allocObject();
    v98 = sub_1B1F1B83C();
    sub_1B20E5560(v98, 0);
    swift_release();
    type metadata accessor for Identity4x4Node(0);
    swift_allocObject();
    v99 = sub_1B1F1B83C();
    sub_1B20E5560(v99, 0);
    swift_release();
    type metadata accessor for IdentityQuaternionNode(0);
    swift_allocObject();
    v100 = sub_1B1F1B83C();
    sub_1B20E5560(v100, 0);
    return swift_release();
  }
  else
  {
    v108 = 0;
    v109[0] = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v108 = 0xD000000000000011;
    v109[0] = 0x80000001B232E970;
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B20E89EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t result;
  _BYTE v79[16];
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[6];
  uint64_t v87[7];

  v1 = v0;
  type metadata accessor for DotNode(0);
  v2 = (uint64_t *)swift_allocObject();
  v3 = MEMORY[0x1E0DEE9D8];
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = v3;
  sub_1B2228260();
  sub_1B20E5560(v2, 2);
  swift_release();
  type metadata accessor for SubGraphNode(0);
  v4 = (uint64_t *)swift_allocObject();
  v5 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC3VFX12SubGraphNode_name);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph) = 0;
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  v6 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature);
  *v6 = v3;
  v6[1] = v3;
  v6[2] = (uint64_t)&unk_1E6387978;
  v6[3] = v3;
  v6[4] = v3;
  v6[5] = v3;
  v4[2] = v3;
  v4[3] = 0;
  v4[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v4, 2);
  swift_release();
  v87[0] = v3;
  v87[1] = v3;
  v87[2] = (uint64_t)&unk_1E6387918;
  v87[3] = v3;
  v87[4] = v3;
  v87[5] = v3;
  type metadata accessor for SubGraphEnterNode(0);
  swift_allocObject();
  v7 = sub_1B1B278AC(v87);
  sub_1B20E5560(v7, 2);
  swift_release();
  v86[0] = v3;
  v86[1] = v3;
  v86[2] = (uint64_t)&unk_1E6387948;
  v86[3] = v3;
  v86[4] = v3;
  v86[5] = v3;
  type metadata accessor for SubGraphReturnNode(0);
  swift_allocObject();
  v8 = sub_1B1B27F24(v86);
  sub_1B20E5560(v8, 2);
  swift_release();
  v80 = xmmword_1B226CAD0;
  v9 = 32;
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B2286450;
  v81 = v10 | 0x1000000000000000;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B22847D0;
  v82 = v11 | 0x1000000000000000;
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B22847C0;
  v83 = v12 | 0x1000000000000000;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0x8000000000000050;
  v84 = v13 | 0x2000000000000000;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0x8000000000000040;
  v85 = v14 | 0x2000000000000000;
  type metadata accessor for ComposeNode(0);
  while (1)
  {
    v15 = *(_QWORD *)&v79[v9];
    v16 = (uint64_t *)swift_allocObject();
    *(uint64_t *)((char *)v16 + OBJC_IVAR____TtC3VFX12_ComposeNode_type) = v15;
    v16[4] = 0;
    v16[2] = MEMORY[0x1E0DEE9D8];
    v16[3] = 0;
    sub_1B1B632F0(v15);
    sub_1B1B632F0(v15);
    sub_1B2228260();
    v17 = *v16;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = *(_QWORD **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0x8000000000000000;
    v21 = sub_1B1DC3AC8(v17);
    v22 = v20;
    v23 = v19[2] + ((v20 & 1) == 0);
    if (v19[3] < v23)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v20 & 1) == 0)
        goto LABEL_10;
    }
    else
    {
      sub_1B1EA9D2C();
      if ((v22 & 1) == 0)
      {
LABEL_10:
        v19[(v21 >> 6) + 8] |= 1 << v21;
        v27 = 8 * v21;
        *(_QWORD *)(v19[6] + v27) = v17;
        *(_QWORD *)(v19[7] + v27) = v16;
        ++v19[2];
        goto LABEL_11;
      }
    }
LABEL_8:
    v26 = v19[7];
    swift_release();
    *(_QWORD *)(v26 + 8 * v21) = v16;
LABEL_11:
    *(_QWORD *)(v1 + 16) = v19;
    swift_bridgeObjectRelease();
    v28 = *(_QWORD **)(v1 + 24);
    swift_retain();
    v29 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v1 + 24) = v28;
    if ((v29 & 1) == 0)
    {
      v28 = sub_1B1C6928C(0, v28[2] + 1, 1, v28);
      *(_QWORD *)(v1 + 24) = v28;
    }
    v31 = v28[2];
    v30 = v28[3];
    if (v31 >= v30 >> 1)
      v28 = sub_1B1C6928C(v30 > 1, v31 + 1, 1, v28);
    v28[2] = v31 + 1;
    v32 = &v28[2 * v31];
    v32[4] = v16;
    v32[5] = 0;
    *(_QWORD *)(v1 + 24) = v28;
    swift_release();
    sub_1B1B28D2C(v15);
    v9 += 8;
    if (v9 == 72)
    {
      type metadata accessor for DecomposeNode(0);
      v33 = 32;
      while (1)
      {
        v34 = *(_QWORD *)&v79[v33];
        v35 = (uint64_t *)swift_allocObject();
        *(uint64_t *)((char *)v35 + OBJC_IVAR____TtC3VFX12_ComposeNode_type) = v34;
        v35[4] = 0;
        v35[2] = MEMORY[0x1E0DEE9D8];
        v35[3] = 0;
        sub_1B1B632F0(v34);
        sub_1B1B632F0(v34);
        sub_1B2228260();
        v36 = *v35;
        swift_retain();
        v37 = swift_isUniquelyReferenced_nonNull_native();
        v38 = *(_QWORD **)(v1 + 16);
        *(_QWORD *)(v1 + 16) = 0x8000000000000000;
        v40 = sub_1B1DC3AC8(v36);
        v41 = v39;
        v42 = v38[2] + ((v39 & 1) == 0);
        if (v38[3] >= v42)
        {
          if ((v37 & 1) != 0)
          {
            if ((v39 & 1) == 0)
              goto LABEL_25;
          }
          else
          {
            sub_1B1EA9D2C();
            if ((v41 & 1) == 0)
              goto LABEL_25;
          }
        }
        else
        {
          sub_1B1E94400(v42, v37);
          v43 = sub_1B1DC3AC8(v36);
          if ((v41 & 1) != (v44 & 1))
            goto LABEL_32;
          v40 = v43;
          if ((v41 & 1) == 0)
          {
LABEL_25:
            v38[(v40 >> 6) + 8] |= 1 << v40;
            v46 = 8 * v40;
            *(_QWORD *)(v38[6] + v46) = v36;
            *(_QWORD *)(v38[7] + v46) = v35;
            ++v38[2];
            goto LABEL_26;
          }
        }
        v45 = v38[7];
        swift_release();
        *(_QWORD *)(v45 + 8 * v40) = v35;
LABEL_26:
        *(_QWORD *)(v1 + 16) = v38;
        swift_bridgeObjectRelease();
        v47 = *(_QWORD **)(v1 + 24);
        swift_retain();
        v48 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v1 + 24) = v47;
        if ((v48 & 1) == 0)
        {
          v47 = sub_1B1C6928C(0, v47[2] + 1, 1, v47);
          *(_QWORD *)(v1 + 24) = v47;
        }
        v50 = v47[2];
        v49 = v47[3];
        if (v50 >= v49 >> 1)
          v47 = sub_1B1C6928C(v49 > 1, v50 + 1, 1, v47);
        v47[2] = v50 + 1;
        v51 = &v47[2 * v50];
        v51[4] = v35;
        v51[5] = 0;
        *(_QWORD *)(v1 + 24) = v47;
        swift_release();
        sub_1B1B28D2C(v34);
        v33 += 8;
        if (v33 == 72)
        {
          swift_arrayDestroy();
          v52 = swift_allocObject();
          *(_OWORD *)(v52 + 16) = xmmword_1B22847D0;
          v53 = v52 | 0x1000000000000000;
          type metadata accessor for ImplicitComposeNode(0);
          v54 = (uint64_t *)swift_allocObject();
          *(uint64_t *)((char *)v54 + OBJC_IVAR____TtC3VFX12_ComposeNode_type) = v53;
          v54[4] = 0;
          v55 = MEMORY[0x1E0DEE9D8];
          v54[2] = MEMORY[0x1E0DEE9D8];
          v54[3] = 0;
          sub_1B2228260();
          sub_1B20E5560(v54, 2);
          swift_release();
          v56 = swift_allocObject();
          *(_OWORD *)(v56 + 16) = xmmword_1B22847D0;
          v57 = v56 | 0x1000000000000000;
          type metadata accessor for ImplicitDecomposeNode(0);
          v58 = (uint64_t *)swift_allocObject();
          *(uint64_t *)((char *)v58 + OBJC_IVAR____TtC3VFX12_ComposeNode_type) = v57;
          v58[3] = 0;
          v58[4] = 0;
          v58[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v58, 2);
          swift_release();
          v59 = swift_allocObject();
          *(_OWORD *)(v59 + 16) = xmmword_1B22847D0;
          v60 = v59 | 0x1000000000000000;
          type metadata accessor for ImplicitPartialComposeNode(0);
          v61 = (uint64_t *)swift_allocObject();
          *(uint64_t *)((char *)v61 + OBJC_IVAR____TtC3VFX12_ComposeNode_type) = v60;
          v61[3] = 0;
          v61[4] = 0;
          v61[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v61, 2);
          swift_release();
          type metadata accessor for GetArrayElementNode(0);
          v62 = (uint64_t *)swift_allocObject();
          v62[3] = 0;
          v62[4] = 0;
          v62[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v62, 0);
          swift_release();
          type metadata accessor for GetArraySizeNode(0);
          v63 = (uint64_t *)swift_allocObject();
          v63[3] = 0;
          v63[4] = 0;
          v63[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v63, 0);
          swift_release();
          type metadata accessor for ArrayNode(0);
          v64 = (uint64_t *)swift_allocObject();
          *(uint64_t *)((char *)v64 + OBJC_IVAR____TtC3VFX9ArrayNode_count) = 1;
          v64[3] = 0;
          v64[4] = 0;
          v64[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v64, 0);
          swift_release();
          type metadata accessor for DoNode(0);
          v65 = (uint64_t *)swift_allocObject();
          v65[3] = 0;
          v65[4] = 0;
          v65[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v65, 2);
          swift_release();
          type metadata accessor for ImplicitDoNode(0);
          v66 = (uint64_t *)swift_allocObject();
          v66[3] = 0;
          v66[4] = 0;
          v66[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v66, 2);
          swift_release();
          type metadata accessor for IfNode(0);
          v67 = (uint64_t *)swift_allocObject();
          v67[3] = 0;
          v67[4] = 0;
          v67[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v67, 0);
          swift_release();
          type metadata accessor for NoopNode(0);
          v68 = (uint64_t *)swift_allocObject();
          v68[3] = 0;
          v68[4] = 0;
          v68[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v68, 2);
          swift_release();
          type metadata accessor for ImplicitNoopNode(0);
          v69 = (uint64_t *)swift_allocObject();
          v69[3] = 0;
          v69[4] = 0;
          v69[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v69, 2);
          swift_release();
          type metadata accessor for NilNode(0);
          v70 = (uint64_t *)swift_allocObject();
          v70[3] = 0;
          v70[4] = 0;
          v70[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v70, 2);
          swift_release();
          type metadata accessor for ImplicitNilNode(0);
          v71 = (uint64_t *)swift_allocObject();
          v71[3] = 0;
          v71[4] = 0;
          v71[2] = v55;
          sub_1B2228260();
          sub_1B20E5560(v71, 2);
          swift_release();
          type metadata accessor for DecodingErrorNode(0);
          v72 = (uint64_t *)swift_allocObject();
          v73 = (uint64_t *)((char *)v72 + OBJC_IVAR____TtC3VFX17DecodingErrorNode_name);
          *v73 = 0;
          v73[1] = 0xE000000000000000;
          v72[2] = v55;
          v72[3] = 0;
          v72[4] = 0;
          sub_1B2228260();
          sub_1B20E5560(v72, 2);
          swift_release();
          type metadata accessor for ImportErrorNode(0);
          v74 = (uint64_t *)swift_allocObject();
          v75 = OBJC_IVAR____TtC3VFX15ImportErrorNode_message;
          *(uint64_t *)((char *)v74 + OBJC_IVAR____TtC3VFX15ImportErrorNode_inputCount) = 0;
          v76 = (uint64_t *)((char *)v74 + v75);
          v77 = (uint64_t *)((char *)v74 + OBJC_IVAR____TtC3VFX15ImportErrorNode_name);
          *v77 = 0;
          v77[1] = 0xE000000000000000;
          *v76 = 0;
          v76[1] = 0;
          v74[2] = v55;
          v74[3] = 0;
          v74[4] = 0;
          sub_1B2228260();
          sub_1B20E5560(v74, 2);
          return swift_release();
        }
      }
    }
  }
  sub_1B1E94400(v23, isUniquelyReferenced_nonNull_native);
  v24 = sub_1B1DC3AC8(v17);
  if ((v22 & 1) == (v25 & 1))
  {
    v21 = v24;
    if ((v22 & 1) == 0)
      goto LABEL_10;
    goto LABEL_8;
  }
LABEL_32:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B20E9590()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t *v114;

  type metadata accessor for AddNode(0);
  v0 = (uint64_t *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v0, 0);
  swift_release();
  type metadata accessor for SubNode(0);
  v2 = (uint64_t *)swift_allocObject();
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v2, 0);
  swift_release();
  type metadata accessor for MulNode(0);
  v3 = (uint64_t *)swift_allocObject();
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v3, 0);
  swift_release();
  type metadata accessor for DivNode(0);
  v4 = (uint64_t *)swift_allocObject();
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v4, 0);
  swift_release();
  type metadata accessor for RemainderNode(0);
  v5 = (uint64_t *)swift_allocObject();
  v5[3] = 0;
  v5[4] = 0;
  v5[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v5, 0);
  swift_release();
  type metadata accessor for QuotientNode(0);
  v6 = (uint64_t *)swift_allocObject();
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v6, 0);
  swift_release();
  type metadata accessor for FModNode(0);
  v7 = (uint64_t *)swift_allocObject();
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v7, 0);
  swift_release();
  type metadata accessor for MinNode(0);
  v8 = (uint64_t *)swift_allocObject();
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v8, 0);
  swift_release();
  type metadata accessor for MaxNode(0);
  v9 = (uint64_t *)swift_allocObject();
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v9, 0);
  swift_release();
  type metadata accessor for PowNode(0);
  v10 = (uint64_t *)swift_allocObject();
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v10, 0);
  swift_release();
  type metadata accessor for ATan2Node(0);
  v11 = (uint64_t *)swift_allocObject();
  v11[3] = 0;
  v11[4] = 0;
  v11[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v11, 0);
  swift_release();
  type metadata accessor for StepNode(0);
  v12 = (uint64_t *)swift_allocObject();
  v12[3] = 0;
  v12[4] = 0;
  v12[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v12, 0);
  swift_release();
  type metadata accessor for DistanceNode(0);
  v13 = (uint64_t *)swift_allocObject();
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v13, 0);
  swift_release();
  type metadata accessor for DistanceSquaredNode(0);
  v14 = (uint64_t *)swift_allocObject();
  v14[3] = 0;
  v14[4] = 0;
  v14[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v14, 0);
  swift_release();
  type metadata accessor for LengthSquaredNode(0);
  v15 = (uint64_t *)swift_allocObject();
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v15, 0);
  swift_release();
  type metadata accessor for IsAlmostEqualNode(0);
  v16 = (uint64_t *)swift_allocObject();
  v16[3] = 0;
  v16[4] = 0;
  v16[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v16, 0);
  swift_release();
  type metadata accessor for CrossProductNode(0);
  v17 = (uint64_t *)swift_allocObject();
  v17[3] = 0;
  v17[4] = 0;
  v17[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v17, 0);
  swift_release();
  type metadata accessor for DotProductNode(0);
  v18 = (uint64_t *)swift_allocObject();
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v18, 0);
  swift_release();
  type metadata accessor for Min3Node(0);
  v19 = (uint64_t *)swift_allocObject();
  v19[3] = 0;
  v19[4] = 0;
  v19[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v19, 0);
  swift_release();
  type metadata accessor for Max3Node(0);
  v20 = (uint64_t *)swift_allocObject();
  v20[3] = 0;
  v20[4] = 0;
  v20[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v20, 0);
  swift_release();
  type metadata accessor for SmoothStepNode(0);
  v21 = (uint64_t *)swift_allocObject();
  v21[3] = 0;
  v21[4] = 0;
  v21[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v21, 0);
  swift_release();
  type metadata accessor for MulAddNode(0);
  v22 = (uint64_t *)swift_allocObject();
  v22[3] = 0;
  v22[4] = 0;
  v22[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v22, 0);
  swift_release();
  type metadata accessor for ClampNode(0);
  v23 = (uint64_t *)swift_allocObject();
  v23[3] = 0;
  v23[4] = 0;
  v23[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v23, 0);
  swift_release();
  type metadata accessor for Remap01Node(0);
  v24 = (uint64_t *)swift_allocObject();
  v24[3] = 0;
  v24[4] = 0;
  v24[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v24, 0);
  swift_release();
  type metadata accessor for ToRadiansNode(0);
  v25 = (uint64_t *)swift_allocObject();
  v25[2] = v1;
  v25[3] = 0;
  v25[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v25, 0);
  swift_release();
  type metadata accessor for ToDegreesNode(0);
  v26 = (uint64_t *)swift_allocObject();
  v26[2] = v1;
  v26[3] = 0;
  v26[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v26, 0);
  swift_release();
  type metadata accessor for SqrtNode(0);
  v27 = (uint64_t *)swift_allocObject();
  v27[2] = v1;
  v27[3] = 0;
  v27[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v27, 0);
  swift_release();
  type metadata accessor for FractNode(0);
  v28 = (uint64_t *)swift_allocObject();
  v28[2] = v1;
  v28[3] = 0;
  v28[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v28, 0);
  swift_release();
  type metadata accessor for OneMinusNode(0);
  v29 = (uint64_t *)swift_allocObject();
  v29[2] = v1;
  v29[3] = 0;
  v29[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v29, 0);
  swift_release();
  type metadata accessor for Pow2Node(0);
  v30 = (uint64_t *)swift_allocObject();
  v30[2] = v1;
  v30[3] = 0;
  v30[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v30, 0);
  swift_release();
  type metadata accessor for Pow3Node(0);
  v31 = (uint64_t *)swift_allocObject();
  v31[2] = v1;
  v31[3] = 0;
  v31[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v31, 0);
  swift_release();
  type metadata accessor for RoundNode(0);
  v32 = (uint64_t *)swift_allocObject();
  v32[2] = v1;
  v32[3] = 0;
  v32[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v32, 0);
  swift_release();
  type metadata accessor for SignNode(0);
  v33 = (uint64_t *)swift_allocObject();
  v33[2] = v1;
  v33[3] = 0;
  v33[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v33, 0);
  swift_release();
  type metadata accessor for AbsNode(0);
  v34 = (uint64_t *)swift_allocObject();
  v34[2] = v1;
  v34[3] = 0;
  v34[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v34, 0);
  swift_release();
  type metadata accessor for FloorNode(0);
  v35 = (uint64_t *)swift_allocObject();
  v35[2] = v1;
  v35[3] = 0;
  v35[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v35, 0);
  swift_release();
  type metadata accessor for LogNode(0);
  v36 = (uint64_t *)swift_allocObject();
  v36[2] = v1;
  v36[3] = 0;
  v36[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v36, 0);
  swift_release();
  type metadata accessor for ExpNode(0);
  v37 = (uint64_t *)swift_allocObject();
  v37[2] = v1;
  v37[3] = 0;
  v37[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v37, 0);
  swift_release();
  type metadata accessor for Exp2Node(0);
  v38 = (uint64_t *)swift_allocObject();
  v38[2] = v1;
  v38[3] = 0;
  v38[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v38, 0);
  swift_release();
  type metadata accessor for Exp10Node(0);
  v39 = (uint64_t *)swift_allocObject();
  v39[2] = v1;
  v39[3] = 0;
  v39[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v39, 0);
  swift_release();
  type metadata accessor for CosNode(0);
  v40 = (uint64_t *)swift_allocObject();
  v40[2] = v1;
  v40[3] = 0;
  v40[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v40, 0);
  swift_release();
  type metadata accessor for SinNode(0);
  v41 = (uint64_t *)swift_allocObject();
  v41[2] = v1;
  v41[3] = 0;
  v41[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v41, 0);
  swift_release();
  type metadata accessor for ASinNode(0);
  v42 = (uint64_t *)swift_allocObject();
  v42[2] = v1;
  v42[3] = 0;
  v42[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v42, 0);
  swift_release();
  type metadata accessor for ACosNode(0);
  v43 = (uint64_t *)swift_allocObject();
  v43[2] = v1;
  v43[3] = 0;
  v43[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v43, 0);
  swift_release();
  type metadata accessor for CeilNode(0);
  v44 = (uint64_t *)swift_allocObject();
  v44[2] = v1;
  v44[3] = 0;
  v44[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v44, 0);
  swift_release();
  type metadata accessor for TanNode(0);
  v45 = (uint64_t *)swift_allocObject();
  v45[2] = v1;
  v45[3] = 0;
  v45[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v45, 0);
  swift_release();
  type metadata accessor for ATanNode(0);
  v46 = (uint64_t *)swift_allocObject();
  v46[2] = v1;
  v46[3] = 0;
  v46[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v46, 0);
  swift_release();
  type metadata accessor for LengthNode(0);
  v47 = (uint64_t *)swift_allocObject();
  v47[2] = v1;
  v47[3] = 0;
  v47[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v47, 0);
  swift_release();
  type metadata accessor for QLengthNode(0);
  v48 = (uint64_t *)swift_allocObject();
  v48[2] = v1;
  v48[3] = 0;
  v48[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v48, 0);
  swift_release();
  type metadata accessor for IsAlmostZeroNode(0);
  v49 = (uint64_t *)swift_allocObject();
  v49[2] = v1;
  v49[3] = 0;
  v49[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v49, 0);
  swift_release();
  type metadata accessor for SaturateNode(0);
  v50 = (uint64_t *)swift_allocObject();
  v50[2] = v1;
  v50[3] = 0;
  v50[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v50, 0);
  swift_release();
  type metadata accessor for SignedSaturateNode(0);
  v51 = (uint64_t *)swift_allocObject();
  v51[2] = v1;
  v51[3] = 0;
  v51[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v51, 0);
  swift_release();
  type metadata accessor for NormalizedNode(0);
  v52 = (uint64_t *)swift_allocObject();
  v52[2] = v1;
  v52[3] = 0;
  v52[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v52, 0);
  swift_release();
  type metadata accessor for QNormalizedNode(0);
  v53 = (uint64_t *)swift_allocObject();
  v53[2] = v1;
  v53[3] = 0;
  v53[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v53, 0);
  swift_release();
  type metadata accessor for ConjugateNode(0);
  v54 = (uint64_t *)swift_allocObject();
  v54[2] = v1;
  v54[3] = 0;
  v54[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v54, 0);
  swift_release();
  type metadata accessor for QLnNode(0);
  v55 = (uint64_t *)swift_allocObject();
  v55[2] = v1;
  v55[3] = 0;
  v55[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v55, 0);
  swift_release();
  type metadata accessor for QExpNode(0);
  v56 = (uint64_t *)swift_allocObject();
  v56[2] = v1;
  v56[3] = 0;
  v56[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v56, 0);
  swift_release();
  type metadata accessor for EulerAnglesNode(0);
  v57 = (uint64_t *)swift_allocObject();
  v57[2] = v1;
  v57[3] = 0;
  v57[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v57, 0);
  swift_release();
  type metadata accessor for AxisAngleNode(0);
  v58 = (uint64_t *)swift_allocObject();
  v58[2] = v1;
  v58[3] = 0;
  v58[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v58, 0);
  swift_release();
  type metadata accessor for AxisNode(0);
  v59 = (uint64_t *)swift_allocObject();
  v59[2] = v1;
  v59[3] = 0;
  v59[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v59, 0);
  swift_release();
  type metadata accessor for QAngleNode(0);
  v60 = (uint64_t *)swift_allocObject();
  v60[2] = v1;
  v60[3] = 0;
  v60[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v60, 0);
  swift_release();
  type metadata accessor for NormalAxisNode(0);
  v61 = (uint64_t *)swift_allocObject();
  v61[2] = v1;
  v61[3] = 0;
  v61[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v61, 0);
  swift_release();
  type metadata accessor for ReduceSumNode(0);
  v62 = (uint64_t *)swift_allocObject();
  v62[2] = v1;
  v62[3] = 0;
  v62[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v62, 0);
  swift_release();
  type metadata accessor for ReduceMulNode(0);
  v63 = (uint64_t *)swift_allocObject();
  v63[2] = v1;
  v63[3] = 0;
  v63[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v63, 0);
  swift_release();
  type metadata accessor for OrthonormalBasisNode(0);
  v64 = (uint64_t *)swift_allocObject();
  v64[2] = v1;
  v64[3] = 0;
  v64[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v64, 0);
  swift_release();
  type metadata accessor for MixNode(0);
  v65 = (uint64_t *)swift_allocObject();
  v65[2] = v1;
  v65[3] = 0;
  v65[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v65, 0);
  swift_release();
  type metadata accessor for QTransformNode(0);
  v66 = (uint64_t *)swift_allocObject();
  v66[2] = v1;
  v66[3] = 0;
  v66[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v66, 0);
  swift_release();
  type metadata accessor for InverseNode(0);
  v67 = (uint64_t *)swift_allocObject();
  v67[2] = v1;
  v67[3] = 0;
  v67[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v67, 0);
  swift_release();
  type metadata accessor for QInverseNode(0);
  v68 = (uint64_t *)swift_allocObject();
  v68[2] = v1;
  v68[3] = 0;
  v68[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v68, 0);
  swift_release();
  type metadata accessor for TransposeNode(0);
  v69 = (uint64_t *)swift_allocObject();
  v69[2] = v1;
  v69[3] = 0;
  v69[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v69, 0);
  swift_release();
  type metadata accessor for TransformNormalNode(0);
  v70 = (uint64_t *)swift_allocObject();
  v70[2] = v1;
  v70[3] = 0;
  v70[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v70, 0);
  swift_release();
  type metadata accessor for TransformPosition3Node(0);
  v71 = (uint64_t *)swift_allocObject();
  v71[2] = v1;
  v71[3] = 0;
  v71[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v71, 0);
  swift_release();
  type metadata accessor for TransformPosition4Node(0);
  v72 = (uint64_t *)swift_allocObject();
  v72[2] = v1;
  v72[3] = 0;
  v72[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v72, 0);
  swift_release();
  type metadata accessor for TransformNode(0);
  v73 = (uint64_t *)swift_allocObject();
  v73[2] = v1;
  v73[3] = 0;
  v73[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v73, 0);
  swift_release();
  type metadata accessor for TranslateMatrix3Node(0);
  v74 = (uint64_t *)swift_allocObject();
  v74[2] = v1;
  v74[3] = 0;
  v74[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v74, 0);
  swift_release();
  type metadata accessor for TranslateMatrix4Node(0);
  v75 = (uint64_t *)swift_allocObject();
  v75[2] = v1;
  v75[3] = 0;
  v75[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v75, 0);
  swift_release();
  type metadata accessor for ScaleMatrix3Node(0);
  v76 = (uint64_t *)swift_allocObject();
  v76[2] = v1;
  v76[3] = 0;
  v76[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v76, 0);
  swift_release();
  type metadata accessor for ScaleMatrix4Node(0);
  v77 = (uint64_t *)swift_allocObject();
  v77[2] = v1;
  v77[3] = 0;
  v77[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v77, 0);
  swift_release();
  type metadata accessor for ProjectPositionNode(0);
  v78 = (uint64_t *)swift_allocObject();
  v78[2] = v1;
  v78[3] = 0;
  v78[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v78, 0);
  swift_release();
  type metadata accessor for TransformDirection3Node(0);
  v79 = (uint64_t *)swift_allocObject();
  v79[2] = v1;
  v79[3] = 0;
  v79[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v79, 0);
  swift_release();
  type metadata accessor for TransformDirection4Node(0);
  v80 = (uint64_t *)swift_allocObject();
  v80[2] = v1;
  v80[3] = 0;
  v80[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v80, 0);
  swift_release();
  type metadata accessor for TRSNode(0);
  v81 = (uint64_t *)swift_allocObject();
  v81[2] = v1;
  v81[3] = 0;
  v81[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v81, 0);
  swift_release();
  type metadata accessor for GetTranslation3Node(0);
  v82 = (uint64_t *)swift_allocObject();
  v82[2] = v1;
  v82[3] = 0;
  v82[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v82, 0);
  swift_release();
  type metadata accessor for GetTranslation4Node(0);
  v83 = (uint64_t *)swift_allocObject();
  v83[2] = v1;
  v83[3] = 0;
  v83[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v83, 0);
  swift_release();
  type metadata accessor for GetRotationNode(0);
  v84 = (uint64_t *)swift_allocObject();
  v84[2] = v1;
  v84[3] = 0;
  v84[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v84, 0);
  swift_release();
  type metadata accessor for RotationNode(0);
  v85 = (uint64_t *)swift_allocObject();
  v85[2] = v1;
  v85[3] = 0;
  v85[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v85, 0);
  swift_release();
  type metadata accessor for GetScale3Node(0);
  v86 = (uint64_t *)swift_allocObject();
  v86[2] = v1;
  v86[3] = 0;
  v86[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v86, 0);
  swift_release();
  type metadata accessor for GetScale4Node(0);
  v87 = (uint64_t *)swift_allocObject();
  v87[2] = v1;
  v87[3] = 0;
  v87[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v87, 0);
  swift_release();
  type metadata accessor for RotateVectorNode(0);
  v88 = (uint64_t *)swift_allocObject();
  v88[2] = v1;
  v88[3] = 0;
  v88[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v88, 0);
  swift_release();
  type metadata accessor for QPowNode(0);
  v89 = (uint64_t *)swift_allocObject();
  v89[2] = v1;
  v89[3] = 0;
  v89[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v89, 0);
  swift_release();
  type metadata accessor for LookAtNode(0);
  v90 = (uint64_t *)swift_allocObject();
  v90[2] = v1;
  v90[3] = 0;
  v90[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v90, 0);
  swift_release();
  type metadata accessor for SlerpNode(0);
  v91 = (uint64_t *)swift_allocObject();
  v91[2] = v1;
  v91[3] = 0;
  v91[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v91, 0);
  swift_release();
  type metadata accessor for SlerpLongestNode(0);
  v92 = (uint64_t *)swift_allocObject();
  v92[2] = v1;
  v92[3] = 0;
  v92[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v92, 0);
  swift_release();
  type metadata accessor for SquadNode(0);
  v93 = (uint64_t *)swift_allocObject();
  v93[2] = v1;
  v93[3] = 0;
  v93[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v93, 0);
  swift_release();
  type metadata accessor for BezierNode(0);
  v94 = (uint64_t *)swift_allocObject();
  v94[2] = v1;
  v94[3] = 0;
  v94[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v94, 0);
  swift_release();
  type metadata accessor for RotationBetweenNode(0);
  v95 = (uint64_t *)swift_allocObject();
  v95[2] = v1;
  v95[3] = 0;
  v95[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v95, 0);
  swift_release();
  type metadata accessor for RotationBetweenFastNode(0);
  v96 = (uint64_t *)swift_allocObject();
  v96[2] = v1;
  v96[3] = 0;
  v96[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v96, 0);
  swift_release();
  type metadata accessor for IsIdentityNode(0);
  v97 = (uint64_t *)swift_allocObject();
  v97[2] = v1;
  v97[3] = 0;
  v97[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v97, 0);
  swift_release();
  type metadata accessor for AngleNode(0);
  v98 = (uint64_t *)swift_allocObject();
  v98[2] = v1;
  v98[3] = 0;
  v98[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v98, 0);
  swift_release();
  type metadata accessor for IsInClosedRange(0);
  v99 = (uint64_t *)swift_allocObject();
  v99[2] = v1;
  v99[3] = 0;
  v99[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v99, 0);
  swift_release();
  type metadata accessor for QuaternionFromNormalNode(0);
  v100 = (uint64_t *)swift_allocObject();
  v100[2] = v1;
  v100[3] = 0;
  v100[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v100, 0);
  swift_release();
  type metadata accessor for QuaternionFromFloat3AxisAngleNode(0);
  v101 = (uint64_t *)swift_allocObject();
  v101[2] = v1;
  v101[3] = 0;
  v101[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v101, 0);
  swift_release();
  type metadata accessor for QuaternionFromFloat4AxisAngleNode(0);
  v102 = (uint64_t *)swift_allocObject();
  v102[2] = v1;
  v102[3] = 0;
  v102[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v102, 0);
  swift_release();
  type metadata accessor for QuaternionFromEulerAnglesNode(0);
  v103 = (uint64_t *)swift_allocObject();
  v103[2] = v1;
  v103[3] = 0;
  v103[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v103, 0);
  swift_release();
  type metadata accessor for QuaternionXNode(0);
  v104 = (uint64_t *)swift_allocObject();
  v104[2] = v1;
  v104[3] = 0;
  v104[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v104, 0);
  swift_release();
  type metadata accessor for QuaternionYNode(0);
  v105 = (uint64_t *)swift_allocObject();
  v105[2] = v1;
  v105[3] = 0;
  v105[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v105, 0);
  swift_release();
  type metadata accessor for QuaternionZNode(0);
  v106 = (uint64_t *)swift_allocObject();
  v106[2] = v1;
  v106[3] = 0;
  v106[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v106, 0);
  swift_release();
  type metadata accessor for QuaternionFromRotationMatrix3x3Node(0);
  v107 = (uint64_t *)swift_allocObject();
  v107[2] = v1;
  v107[3] = 0;
  v107[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v107, 0);
  swift_release();
  type metadata accessor for QuaternionFromRotationMatrix4x4Node(0);
  v108 = (uint64_t *)swift_allocObject();
  v108[2] = v1;
  v108[3] = 0;
  v108[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v108, 0);
  swift_release();
  type metadata accessor for RotationMatrixFromEulerAngleNode(0);
  v109 = (uint64_t *)swift_allocObject();
  v109[2] = v1;
  v109[3] = 0;
  v109[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v109, 0);
  swift_release();
  type metadata accessor for RotationMatrix3x3FromQuaternionNode(0);
  v110 = (uint64_t *)swift_allocObject();
  v110[2] = v1;
  v110[3] = 0;
  v110[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v110, 0);
  swift_release();
  type metadata accessor for RotationMatrix4x4FromQuaternionNode(0);
  v111 = (uint64_t *)swift_allocObject();
  v111[2] = v1;
  v111[3] = 0;
  v111[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v111, 0);
  swift_release();
  type metadata accessor for RotationMatrixAroundCenterNode(0);
  v112 = (uint64_t *)swift_allocObject();
  v112[2] = v1;
  v112[3] = 0;
  v112[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v112, 0);
  swift_release();
  type metadata accessor for TRSFloat3x3MatrixNode(0);
  v113 = (uint64_t *)swift_allocObject();
  v113[2] = v1;
  v113[3] = 0;
  v113[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v113, 0);
  swift_release();
  type metadata accessor for TRSFloat4x4MatrixNode(0);
  v114 = (uint64_t *)swift_allocObject();
  v114[2] = v1;
  v114[3] = 0;
  v114[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v114, 0);
  return swift_release();
}

uint64_t sub_1B20EB23C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  type metadata accessor for SelectNode(0);
  v0 = (uint64_t *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v0, 0);
  swift_release();
  type metadata accessor for NotNode(0);
  v2 = (uint64_t *)swift_allocObject();
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v2, 0);
  swift_release();
  type metadata accessor for IsOddNode(0);
  v3 = (uint64_t *)swift_allocObject();
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v3, 0);
  swift_release();
  type metadata accessor for IsEvenNode(0);
  v4 = (uint64_t *)swift_allocObject();
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v4, 0);
  swift_release();
  type metadata accessor for OrNode(0);
  v5 = (uint64_t *)swift_allocObject();
  v5[3] = 0;
  v5[4] = 0;
  v5[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v5, 0);
  swift_release();
  type metadata accessor for AndNode(0);
  v6 = (uint64_t *)swift_allocObject();
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v6, 0);
  swift_release();
  type metadata accessor for NandNode(0);
  v7 = (uint64_t *)swift_allocObject();
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v7, 0);
  swift_release();
  type metadata accessor for NorNode(0);
  v8 = (uint64_t *)swift_allocObject();
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v8, 0);
  swift_release();
  type metadata accessor for IsGreaterNode(0);
  v9 = (uint64_t *)swift_allocObject();
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v9, 0);
  swift_release();
  type metadata accessor for IsGreaterOrEqualNode(0);
  v10 = (uint64_t *)swift_allocObject();
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v10, 0);
  swift_release();
  type metadata accessor for IsLesserNode(0);
  v11 = (uint64_t *)swift_allocObject();
  v11[3] = 0;
  v11[4] = 0;
  v11[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v11, 0);
  swift_release();
  type metadata accessor for IsLesserOrEqualNode(0);
  v12 = (uint64_t *)swift_allocObject();
  v12[3] = 0;
  v12[4] = 0;
  v12[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v12, 0);
  swift_release();
  type metadata accessor for IsEqualNode(0);
  v13 = (uint64_t *)swift_allocObject();
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v13, 0);
  swift_release();
  type metadata accessor for IsNotEqualNode(0);
  v14 = (uint64_t *)swift_allocObject();
  v14[3] = 0;
  v14[4] = 0;
  v14[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v14, 0);
  return swift_release();
}

uint64_t sub_1B20EB5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;

  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B2286450;
  v1 = v0 | 0x1000000000000000;
  type metadata accessor for CastNode(0);
  v2 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = 0x8000000000000050;
  *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v1;
  v3 = MEMORY[0x1E0DEE9D8];
  v2[2] = MEMORY[0x1E0DEE9D8];
  v2[3] = 0;
  v4 = v3;
  v2[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v2, 0);
  swift_release();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B22847D0;
  v6 = v5 | 0x1000000000000000;
  v7 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v7 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = 0x8000000000000050;
  *(uint64_t *)((char *)v7 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v6;
  v7[2] = v4;
  v7[3] = 0;
  v7[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v7, 0);
  swift_release();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B22847C0;
  v9 = v8 | 0x1000000000000000;
  v10 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v10 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = 0x8000000000000050;
  *(uint64_t *)((char *)v10 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v9;
  v10[2] = v4;
  v10[3] = 0;
  v10[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v10, 0);
  swift_release();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B2286450;
  v12 = v11 | 0x1000000000000000;
  v13 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v13 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v12;
  *(uint64_t *)((char *)v13 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = 0x8000000000000050;
  v13[2] = v4;
  v13[3] = 0;
  v13[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v13, 0);
  swift_release();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B2286450;
  v15 = v14 | 0x1000000000000000;
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B22847D0;
  v17 = v16 | 0x1000000000000000;
  v18 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v18 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v15;
  *(uint64_t *)((char *)v18 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v17;
  v18[2] = v4;
  v18[3] = 0;
  v18[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v18, 0);
  swift_release();
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B2286450;
  v20 = v19 | 0x1000000000000000;
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1B22847C0;
  v22 = v21 | 0x1000000000000000;
  v23 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v23 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v20;
  *(uint64_t *)((char *)v23 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v22;
  v23[2] = v4;
  v23[3] = 0;
  v23[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v23, 0);
  swift_release();
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1B22847D0;
  v25 = v24 | 0x1000000000000000;
  v26 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v26 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v25;
  *(uint64_t *)((char *)v26 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = 0x8000000000000050;
  v26[2] = v4;
  v26[3] = 0;
  v26[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v26, 0);
  swift_release();
  v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1B22847D0;
  v28 = v27 | 0x1000000000000000;
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1B2286450;
  v30 = v29 | 0x1000000000000000;
  v31 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v31 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v28;
  *(uint64_t *)((char *)v31 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v30;
  v31[2] = v4;
  v31[3] = 0;
  v31[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v31, 0);
  swift_release();
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1B22847D0;
  v33 = v32 | 0x1000000000000000;
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_1B22847C0;
  v35 = v34 | 0x1000000000000000;
  v36 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v36 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v33;
  *(uint64_t *)((char *)v36 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v35;
  v36[2] = v4;
  v36[3] = 0;
  v36[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v36, 0);
  swift_release();
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1B22847C0;
  v38 = v37 | 0x1000000000000000;
  v39 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v39 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v38;
  *(uint64_t *)((char *)v39 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = 0x8000000000000050;
  v39[2] = v4;
  v39[3] = 0;
  v39[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v39, 0);
  swift_release();
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1B22847C0;
  v41 = v40 | 0x1000000000000000;
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1B2286450;
  v43 = v42 | 0x1000000000000000;
  v44 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v44 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v41;
  *(uint64_t *)((char *)v44 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v43;
  v44[2] = v4;
  v44[3] = 0;
  v44[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v44, 0);
  swift_release();
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_1B22847C0;
  v46 = v45 | 0x1000000000000000;
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1B22847D0;
  v48 = v47 | 0x1000000000000000;
  v49 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v49 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v46;
  *(uint64_t *)((char *)v49 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v48;
  v49[2] = v4;
  v49[3] = 0;
  v49[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v49, 0);
  swift_release();
  v50 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v50 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = 0x8000000000000038;
  *(uint64_t *)((char *)v50 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = 0x8000000000000050;
  v50[2] = v4;
  v50[3] = 0;
  v50[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v50, 0);
  swift_release();
  v51 = swift_allocObject();
  *(_QWORD *)(v51 + 16) = 0x8000000000000050;
  v52 = v51 | 0x2000000000000000;
  v53 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v53 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = 0x8000000000000050;
  *(uint64_t *)((char *)v53 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v52;
  v53[2] = v4;
  v53[3] = 0;
  v53[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v53, 0);
  swift_release();
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = 0x8000000000000050;
  v55 = v54 | 0x2000000000000000;
  v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_1B2286450;
  v57 = v56 | 0x1000000000000000;
  v58 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v58 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v55;
  *(uint64_t *)((char *)v58 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v57;
  v59 = MEMORY[0x1E0DEE9D8];
  v58[2] = MEMORY[0x1E0DEE9D8];
  v58[3] = 0;
  v58[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v58, 0);
  swift_release();
  v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1B2286450;
  v61 = v60 | 0x1000000000000000;
  v62 = swift_allocObject();
  *(_QWORD *)(v62 + 16) = 0x8000000000000050;
  v63 = v62 | 0x2000000000000000;
  v64 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v64 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v61;
  *(uint64_t *)((char *)v64 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v63;
  v64[2] = v59;
  v64[3] = 0;
  v64[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v64, 0);
  swift_release();
  v65 = swift_allocObject();
  *(_QWORD *)(v65 + 16) = 0x8000000000000040;
  v66 = v65 | 0x2000000000000000;
  v67 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v67 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = 0x8000000000000040;
  *(uint64_t *)((char *)v67 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v66;
  v67[2] = v59;
  v67[3] = 0;
  v67[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v67, 0);
  swift_release();
  v68 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v68 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = 0x8000000000000020;
  *(uint64_t *)((char *)v68 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = 0x8000000000000040;
  v68[2] = v59;
  v68[3] = 0;
  v68[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v68, 0);
  swift_release();
  v69 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v69 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = 0x8000000000000040;
  *(uint64_t *)((char *)v69 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = 0x8000000000000020;
  v69[2] = v59;
  v69[3] = 0;
  v69[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v69, 0);
  return swift_release();
}

uint64_t sub_1B20EBF70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;

  type metadata accessor for BounceEaseNode(0);
  v0 = (uint64_t *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v0, 0);
  swift_release();
  type metadata accessor for CubicEaseInNode(0);
  v2 = (uint64_t *)swift_allocObject();
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v2, 0);
  swift_release();
  type metadata accessor for CubicEaseOutNode(0);
  v3 = (uint64_t *)swift_allocObject();
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v3, 0);
  swift_release();
  type metadata accessor for CubicEaseInOutNode(0);
  v4 = (uint64_t *)swift_allocObject();
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v4, 0);
  swift_release();
  type metadata accessor for ExponentialEaseNode(0);
  v5 = (uint64_t *)swift_allocObject();
  v5[3] = 0;
  v5[4] = 0;
  v5[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v5, 0);
  swift_release();
  type metadata accessor for PhysicalEaseNode(0);
  v6 = (uint64_t *)swift_allocObject();
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v6, 0);
  swift_release();
  type metadata accessor for PowerEaseNode(0);
  v7 = (uint64_t *)swift_allocObject();
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v7, 0);
  swift_release();
  type metadata accessor for QuadraticEaseInNode(0);
  v8 = (uint64_t *)swift_allocObject();
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v8, 0);
  swift_release();
  type metadata accessor for QuadraticEaseOutNode(0);
  v9 = (uint64_t *)swift_allocObject();
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v9, 0);
  swift_release();
  type metadata accessor for QuadraticEaseInOutNode(0);
  v10 = (uint64_t *)swift_allocObject();
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v10, 0);
  swift_release();
  type metadata accessor for QuarticEaseInNode(0);
  v11 = (uint64_t *)swift_allocObject();
  v11[3] = 0;
  v11[4] = 0;
  v11[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v11, 0);
  swift_release();
  type metadata accessor for QuarticEaseOutNode(0);
  v12 = (uint64_t *)swift_allocObject();
  v12[3] = 0;
  v12[4] = 0;
  v12[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v12, 0);
  swift_release();
  type metadata accessor for QuarticEaseInOutNode(0);
  v13 = (uint64_t *)swift_allocObject();
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v13, 0);
  swift_release();
  type metadata accessor for QuinticEaseInNode(0);
  v14 = (uint64_t *)swift_allocObject();
  v14[3] = 0;
  v14[4] = 0;
  v14[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v14, 0);
  swift_release();
  type metadata accessor for QuinticEaseOutNode(0);
  v15 = (uint64_t *)swift_allocObject();
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v15, 0);
  swift_release();
  type metadata accessor for QuinticEaseInOutNode(0);
  v16 = (uint64_t *)swift_allocObject();
  v16[3] = 0;
  v16[4] = 0;
  v16[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v16, 0);
  swift_release();
  type metadata accessor for SinEaseInNode(0);
  v17 = (uint64_t *)swift_allocObject();
  v17[3] = 0;
  v17[4] = 0;
  v17[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v17, 0);
  swift_release();
  type metadata accessor for SinEaseOutNode(0);
  v18 = (uint64_t *)swift_allocObject();
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v18, 0);
  swift_release();
  type metadata accessor for SinEaseInOutNode(0);
  v19 = (uint64_t *)swift_allocObject();
  v19[3] = 0;
  v19[4] = 0;
  v19[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v19, 0);
  return swift_release();
}

uint64_t sub_1B20EC45C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  type metadata accessor for RenderWorldNode(0);
  v0 = (uint64_t *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v0, 0);
  swift_release();
  type metadata accessor for PresentNode(0);
  v2 = (uint64_t *)swift_allocObject();
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v2, 0);
  swift_release();
  type metadata accessor for PublishTextureNode(0);
  v3 = (uint64_t *)swift_allocObject();
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v3, 0);
  swift_release();
  type metadata accessor for TextureDescriptorNode(0);
  v4 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor) = 0;
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v4, 0);
  swift_release();
  type metadata accessor for ComputeShaderNode(0);
  swift_allocObject();
  v5 = sub_1B20786F4();
  sub_1B20E5560(v5, 0);
  swift_release();
  type metadata accessor for FullscreenQuadNode(0);
  swift_allocObject();
  v6 = sub_1B20786F4();
  sub_1B20E5560(v6, 0);
  swift_release();
  type metadata accessor for BlurNode(0);
  v7 = (uint64_t *)swift_allocObject();
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v7, 0);
  swift_release();
  type metadata accessor for BloomNode(0);
  v8 = (uint64_t *)swift_allocObject();
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v8, 0);
  swift_release();
  type metadata accessor for RenderGraphTextureNode(0);
  v9 = (uint64_t *)swift_allocObject();
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v9, 0);
  swift_release();
  type metadata accessor for ResolveResolutionNode(0);
  v10 = (uint64_t *)swift_allocObject();
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v10, 0);
  return swift_release();
}

uint64_t sub_1B20EC708()
{
  uint64_t *v0;
  uint64_t v1;
  __CFString *v2;
  uint64_t *v3;
  __CFString *v4;
  uint64_t *v5;
  __CFString *v6;
  uint64_t *v7;
  __CFString *v8;
  uint64_t *v9;
  __CFString *v10;
  uint64_t *v11;
  __CFString *v12;
  uint64_t *v13;
  __CFString *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  type metadata accessor for OnTickTriggerNode(0);
  v0 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType) = (uint64_t)CFSTR("VFXTriggerTypeTicked");
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  v2 = CFSTR("VFXTriggerTypeTicked");
  sub_1B2228260();
  sub_1B20E5560(v0, 0);
  swift_release();
  type metadata accessor for OnMouseTriggerNode(0);
  v3 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType) = (uint64_t)CFSTR("VFXTriggerTypeMouseDown");
  v3[3] = 0;
  v3[4] = 0;
  v3[2] = v1;
  v4 = CFSTR("VFXTriggerTypeMouseDown");
  sub_1B2228260();
  sub_1B20E5560(v3, 0);
  swift_release();
  v5 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType) = (uint64_t)CFSTR("VFXTriggerTypeMouseUp");
  v5[3] = 0;
  v5[4] = 0;
  v5[2] = v1;
  v6 = CFSTR("VFXTriggerTypeMouseUp");
  sub_1B2228260();
  sub_1B20E5560(v5, 0);
  swift_release();
  v7 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v7 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType) = (uint64_t)CFSTR("VFXTriggerTypeMouseDragged");
  v7[3] = 0;
  v7[4] = 0;
  v7[2] = v1;
  v8 = CFSTR("VFXTriggerTypeMouseDragged");
  sub_1B2228260();
  sub_1B20E5560(v7, 0);
  swift_release();
  v9 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v9 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType) = (uint64_t)CFSTR("VFXTriggerTypeMouseMoved");
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = v1;
  v10 = CFSTR("VFXTriggerTypeMouseMoved");
  sub_1B2228260();
  sub_1B20E5560(v9, 0);
  swift_release();
  type metadata accessor for OnKeyTriggerNode(0);
  v11 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v11 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType) = (uint64_t)CFSTR("VFXTriggerTypeKeyDown");
  v11[3] = 0;
  v11[4] = 0;
  v11[2] = v1;
  v12 = CFSTR("VFXTriggerTypeKeyDown");
  sub_1B2228260();
  sub_1B20E5560(v11, 0);
  swift_release();
  v13 = (uint64_t *)swift_allocObject();
  *(uint64_t *)((char *)v13 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType) = (uint64_t)CFSTR("VFXTriggerTypeKeyUp");
  v13[3] = 0;
  v13[4] = 0;
  v13[2] = v1;
  v14 = CFSTR("VFXTriggerTypeKeyUp");
  sub_1B2228260();
  sub_1B20E5560(v13, 0);
  swift_release();
  type metadata accessor for StateNode(0);
  v15 = (uint64_t *)swift_allocObject();
  v16 = (uint64_t)v15 + OBJC_IVAR____TtC3VFX9StateNode_stateRef;
  swift_unknownObjectWeakInit();
  v23 = 0;
  swift_unknownObjectWeakAssign();
  v24 = 0x3E6C6C756E3CLL;
  v25 = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)&v22, v16);
  v15[3] = 0;
  v15[4] = 0;
  v15[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v15, 0);
  swift_release();
  type metadata accessor for ImplicitStateNode(0);
  v17 = (uint64_t *)swift_allocObject();
  v18 = (uint64_t)v17 + OBJC_IVAR____TtC3VFX9StateNode_stateRef;
  v23 = 0;
  swift_unknownObjectWeakInit();
  v23 = 0;
  swift_unknownObjectWeakAssign();
  v24 = 0x3E6C6C756E3CLL;
  v25 = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)&v22, v18);
  v17[3] = 0;
  v17[4] = 0;
  v17[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v17, 2);
  swift_release();
  type metadata accessor for SetStateNode(0);
  v19 = (uint64_t *)swift_allocObject();
  v19[3] = 0;
  v19[4] = 0;
  v19[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v19, 0);
  swift_release();
  type metadata accessor for TickNode(0);
  v20 = (uint64_t *)swift_allocObject();
  v20[3] = 0;
  v20[4] = 0;
  v20[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v20, 0);
  return swift_release();
}

uint64_t sub_1B20ECB5C()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;

  type metadata accessor for LogDebugNode(0);
  v0 = (uint64_t *)swift_allocObject();
  v1 = (uint64_t *)((char *)v0 + OBJC_IVAR____TtC3VFX23LogDebugPassthroughNode_message);
  *v1 = 0x65756C6156796DLL;
  v1[1] = 0xE700000000000000;
  v2 = MEMORY[0x1E0DEE9D8];
  v0[2] = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v0, 0);
  swift_release();
  type metadata accessor for LogDebugPassthroughNode(0);
  v3 = (uint64_t *)swift_allocObject();
  v4 = (uint64_t *)((char *)v3 + OBJC_IVAR____TtC3VFX23LogDebugPassthroughNode_message);
  *v4 = 0x65756C6156796DLL;
  v4[1] = 0xE700000000000000;
  v3[2] = v2;
  v3[3] = 0;
  v3[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v3, 0);
  return swift_release();
}

uint64_t sub_1B20ECC4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;

  type metadata accessor for CanvasItemNode(0);
  v0 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v0 + OBJC_IVAR____TtC3VFX14CanvasItemNode_stage) = 0;
  v1 = MEMORY[0x1E0DEE9D8];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v0, 2);
  swift_release();
  type metadata accessor for CanvasStickyNode(0);
  v2 = (uint64_t *)swift_allocObject();
  *((_BYTE *)v2 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_colorScheme) = 7;
  v3 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC3VFX16CanvasStickyNode_text);
  *v3 = 0;
  v3[1] = 0xE000000000000000;
  v2[2] = v1;
  v2[3] = 0;
  v2[4] = 0;
  sub_1B2228260();
  sub_1B20E5560(v2, 2);
  swift_release();
  type metadata accessor for CanvasStickyGroupNode(0);
  v4 = (uint64_t *)swift_allocObject();
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = v1;
  sub_1B2228260();
  sub_1B20E5560(v4, 2);
  return swift_release();
}

uint64_t type metadata accessor for GraphNodeLibrary()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for GraphNodeLibrary.NodeCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B20ECDE0 + 4 * byte_1B22BAE75[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B20ECE14 + 4 * byte_1B22BAE70[v4]))();
}

uint64_t sub_1B20ECE14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20ECE1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20ECE24);
  return result;
}

uint64_t sub_1B20ECE30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20ECE38);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B20ECE3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20ECE44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GraphNodeLibrary.NodeCategory()
{
  return &type metadata for GraphNodeLibrary.NodeCategory;
}

ValueMetadata *type metadata accessor for GraphNodeLibrary.Entry()
{
  return &type metadata for GraphNodeLibrary.Entry;
}

unint64_t sub_1B20ECE74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF63490;
  if (!qword_1EEF63490)
  {
    sub_1B1A02758(255, &qword_1EEF63498, (uint64_t)&type metadata for GraphNodeLibrary.NodeCategory, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF63490);
  }
  return result;
}

unint64_t sub_1B20ECED8()
{
  unint64_t result;

  result = qword_1EEF634A0;
  if (!qword_1EEF634A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BAF3C, &type metadata for GraphNodeLibrary.NodeCategory);
    atomic_store(result, (unint64_t *)&qword_1EEF634A0);
  }
  return result;
}

uint64_t sub_1B20ECF1C()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B20ECF40()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B20ECF64()
{
  return swift_deallocObject();
}

uint64_t sub_1B20ECF74()
{
  return swift_deallocObject();
}

uint64_t sub_1B20ECF84()
{
  return swift_deallocObject();
}

uint64_t sub_1B20ECF94()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_1B20ECFC8()
{
  unint64_t result;

  result = qword_1EEF634A8;
  if (!qword_1EEF634A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B226F4A0, &type metadata for BlendMode);
    atomic_store(result, (unint64_t *)&qword_1EEF634A8);
  }
  return result;
}

uint64_t sub_1B20ED00C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B20ED050();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1B20ED050()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BA350)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BA350);
  }
}

id sub_1B20ED0B8@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_position);
  *a2 = v4;
  return result;
}

id sub_1B20ED0E8(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPosition_, *a1);
}

id sub_1B20ED0FC@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isHidden);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20ED12C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHidden_, *a1);
}

id sub_1B20ED140@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_eulerAngles);
  *a2 = v4;
  return result;
}

id sub_1B20ED170(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setEulerAngles_, *a1);
}

id sub_1B20ED184@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;

  result = objc_msgSend(*a1, sel_scale);
  *a2 = v4;
  return result;
}

id sub_1B20ED1B4(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setScale_, *a1);
}

id sub_1B20ED1C8@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  result = objc_msgSend(*a1, sel_worldTransform);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

id sub_1B20ED1FC(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWorldTransform_, *a1, a1[2], a1[4], a1[6]);
}

id sub_1B20ED218@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result;
  int v4;

  result = objc_msgSend(*a1, sel_opacity);
  *a2 = v4;
  return result;
}

id sub_1B20ED248(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setOpacity_, a3);
}

id sub_1B20ED25C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_renderingOrder);
  *a2 = result;
  return result;
}

id sub_1B20ED28C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setRenderingOrder_, *a1);
}

id sub_1B20ED2A0@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_castsShadow);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B20ED2D0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCastsShadow_, *a1);
}

id sub_1B20ED2E4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_categoryBitMask);
  *a2 = result;
  return result;
}

id sub_1B20ED314(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCategoryBitMask_, *a1);
}

ValueMetadata *type metadata accessor for GraphNodeLibrary.Flags()
{
  return &type metadata for GraphNodeLibrary.Flags;
}

unint64_t sub_1B20ED33C()
{
  unint64_t result;

  result = qword_1EEF634B8;
  if (!qword_1EEF634B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB178, &type metadata for GraphNodeLibrary.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF634B8);
  }
  return result;
}

unint64_t sub_1B20ED384()
{
  unint64_t result;

  result = qword_1EEF634C0;
  if (!qword_1EEF634C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB148, &type metadata for GraphNodeLibrary.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF634C0);
  }
  return result;
}

unint64_t sub_1B20ED3CC()
{
  unint64_t result;

  result = qword_1EEF634C8;
  if (!qword_1EEF634C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB1A0, &type metadata for GraphNodeLibrary.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF634C8);
  }
  return result;
}

unint64_t sub_1B20ED414()
{
  unint64_t result;

  result = qword_1EEF634D0;
  if (!qword_1EEF634D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB1D8, &type metadata for GraphNodeLibrary.Flags);
    atomic_store(result, (unint64_t *)&qword_1EEF634D0);
  }
  return result;
}

uint64_t sub_1B20ED458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = v5 + 64;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v9 &= v9 - 1;
  while (1)
  {
    swift_retain();
    if (sub_1B222A210() == a1 && v14 == a2)
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_30:
      swift_bridgeObjectRelease();
      v17 = sub_1B1BCE288(1);
      swift_release();
      return v17;
    }
    v16 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      swift_release();
      goto LABEL_30;
    }
    swift_release();
    if (v9)
      goto LABEL_4;
LABEL_5:
    v12 = v11 + 1;
    if (v11 + 1 >= v10)
      goto LABEL_31;
    v13 = *(_QWORD *)(v6 + 8 * v12);
    if (!v13)
    {
      v12 = v11 + 2;
      if (v11 + 2 >= v10)
        goto LABEL_31;
      v13 = *(_QWORD *)(v6 + 8 * v12);
      if (!v13)
      {
        v12 = v11 + 3;
        if (v11 + 3 >= v10)
          goto LABEL_31;
        v13 = *(_QWORD *)(v6 + 8 * v12);
        if (!v13)
        {
          v12 = v11 + 4;
          if (v11 + 4 >= v10)
            goto LABEL_31;
          v13 = *(_QWORD *)(v6 + 8 * v12);
          if (!v13)
          {
            v12 = v11 + 5;
            if (v11 + 5 >= v10)
              goto LABEL_31;
            v13 = *(_QWORD *)(v6 + 8 * v12);
            if (!v13)
            {
              v12 = v11 + 6;
              if (v11 + 6 >= v10)
                goto LABEL_31;
              v13 = *(_QWORD *)(v6 + 8 * v12);
              if (!v13)
                break;
            }
          }
        }
      }
    }
LABEL_20:
    v9 = (v13 - 1) & v13;
    v11 = v12;
  }
  while (v10 - 7 != v11)
  {
    v13 = *(_QWORD *)(v5 + 8 * v11++ + 120);
    if (v13)
    {
      v12 = v11 + 6;
      goto LABEL_20;
    }
  }
LABEL_31:
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t *sub_1B20ED674(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = sub_1B222826C();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t sub_1B20ED728(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = sub_1B222826C();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *sub_1B20ED774(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_1B222826C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1B20ED800(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1B20ED89C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_1B222826C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1B20ED89C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ScriptIndex();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ScriptIndex()
{
  uint64_t result;

  result = qword_1ED4B7DF0;
  if (!qword_1ED4B7DF0)
    return swift_getSingletonMetadata();
  return result;
}

void *sub_1B20ED914(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = sub_1B222826C();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1B20ED9A0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_1B20ED89C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = sub_1B222826C();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1B20EDA3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_1B20EDA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_1B20EDA58()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1B20EDA68()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B222826C();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_1B20EDAD8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1B20EDAE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;

  result = type metadata accessor for ScriptCompileAttempt(319, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a4);
  if (v5 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    result = sub_1B2229124();
    if (v6 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1B20EDBC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  id v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  const void *v38;
  unsigned int (*v39)(const void *, uint64_t, uint64_t);
  id v40;
  uint64_t v41;
  size_t v43;
  void *v44;
  uint64_t v45;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = *(_DWORD *)(v9 + 80);
  if (*(_DWORD *)(v9 + 84))
    v11 = *(_QWORD *)(v9 + 64);
  else
    v11 = *(_QWORD *)(v9 + 64) + 1;
  v12 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  v13 = v12 <= 7 && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) == 0;
  if (v13
    && (v14 = (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8,
        v15 = v10 + 9,
        ((v10
        + 9
        + ((((((((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)) & ~v10)
      + v11 <= 0x18))
  {
    v16 = AssociatedTypeWitness;
    v43 = v11;
    v45 = ~v10;
    v17 = v14 + 8;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v18 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = *(_QWORD *)v19;
    *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
    *(_QWORD *)v18 = v20;
    *(_BYTE *)(v18 + 9) = *(_BYTE *)(v19 + 9);
    v21 = (_QWORD *)((v18 + 17) & 0xFFFFFFFFFFFFF8);
    v22 = (v19 + 17) & 0xFFFFFFFFFFFFF8;
    v23 = *(void **)v22;
    v22 += 15;
    v24 = v23;
    *v21 = v23;
    v25 = (_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v25 = *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8);
    v25[1] = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v22 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
    v26 = (_QWORD *)(((unint64_t)a1 + v17 + 7) & 0xFFFFFFFFFFFFF8);
    v27 = (_QWORD *)(((unint64_t)a2 + v17 + 7) & 0xFFFFFFFFFFFFF8);
    *v26 = *v27;
    v28 = (_QWORD *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFF8);
    v29 = (_QWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8);
    *v28 = *v29;
    v30 = (_QWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v30 = *v31;
    v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
    v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
    v34 = v16;
    v35 = *(void **)v33;
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
    v36 = ((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8;
    v37 = ((unint64_t)v31 + 31) & 0xFFFFFFFFFFFFFFF8;
    LOBYTE(v33) = *(_BYTE *)(v37 + 8);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *(_BYTE *)(v36 + 8) = v33;
    v44 = (void *)((v15 + v36) & v45);
    v38 = (const void *)((v15 + v37) & v45);
    v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v40 = v35;
    if (v39(v38, 1, v34))
    {
      memcpy(v44, v38, v43);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v44, v38, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v44, 0, 1, v34);
    }
  }
  else
  {
    v41 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v41 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1B20EDE98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(uint64_t, _QWORD))(v3 + 8))(a1, *(_QWORD *)(a2 + 16));
  v4 = *(_QWORD *)(v3 + 64) + 7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v5 = (((((a1
          + (((((((v4 & 0xFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = v5 + 31;
  swift_bridgeObjectRelease();

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = ((v6 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v8 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, AssociatedTypeWitness);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v8 + 8))(v9, AssociatedTypeWitness);
  return result;
}

uint64_t sub_1B20EDFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t AssociatedTypeWitness;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  unsigned int (*v31)(const void *, uint64_t, uint64_t);
  id v32;
  size_t v33;
  void *__dst;
  uint64_t v36;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 16))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = (_QWORD *)((v7 + 17) & 0xFFFFFFFFFFFFF8);
  v11 = (v8 + 17) & 0xFFFFFFFFFFFFF8;
  v12 = *(void **)v11;
  v11 += 15;
  v13 = v12;
  *v10 = v12;
  v14 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  v14[1] = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v11 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
  v15 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v36 = a1;
  v16 = a1 + v15 + 7;
  v17 = (_QWORD *)((a2 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  v16 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v16 = *v17;
  v18 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v16 + 15) & 0xFFFFFFFFFFFFF8);
  *v19 = *v18;
  v20 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = *(void **)v23;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v25 = ((unint64_t)v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v21) = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = (_BYTE)v21;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v28 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v29 = *(unsigned __int8 *)(v28 + 80);
  __dst = (void *)((v29 + 9 + v25) & ~v29);
  v30 = (const void *)((v29 + 9 + v26) & ~v29);
  v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v32 = v24;
  if (v31(v30, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v28 + 84))
      v33 = *(_QWORD *)(v28 + 64);
    else
      v33 = *(_QWORD *)(v28 + 64) + 1;
    memcpy(__dst, v30, v33);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(__dst, v30, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, AssociatedTypeWitness);
  }
  return v36;
}

uint64_t sub_1B20EE240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  void **v10;
  id *v11;
  id v12;
  id v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t AssociatedTypeWitness;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t (*v37)(void *, uint64_t, uint64_t);
  int v38;
  size_t v39;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 24))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = (void **)((v7 + 17) & 0xFFFFFFFFFFFFFFF8);
  v11 = (id *)((v8 + 17) & 0xFFFFFFFFFFFFF8);
  v12 = *v11;
  v13 = *v11;
  v14 = *v10;
  *v10 = v12;

  v15 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v18 = a1 + v17 + 7;
  v19 = a2 + v17 + 7;
  v20 = (v19 & 0xFFFFFFFFFFFFF8) + 15;
  *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFF8);
  v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v21 &= 0xFFFFFFFFFFFFFFF8;
  v20 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v21 = *(_QWORD *)v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (_QWORD *)((v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (unint64_t)v22 + 31;
  v24 = (_QWORD *)((v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(void **)v26;
  v28 = *(void **)v25;
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v29 = v27;

  *(_BYTE *)(v25 + 8) = *(_BYTE *)(v26 + 8);
  v30 = ((unint64_t)v24 + 31) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v30 + 8) = *(_BYTE *)((v23 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)v30 = v31;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v34 = *(unsigned __int8 *)(v33 + 80);
  v35 = (void *)((v34 + 9 + v30) & ~v34);
  v36 = (void *)((v34 + 9 + (v23 & 0xFFFFFFFFFFFFFFF8)) & ~v34);
  v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  LODWORD(v24) = v37(v35, 1, AssociatedTypeWitness);
  v38 = v37(v36, 1, AssociatedTypeWitness);
  if ((_DWORD)v24)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 16))(v35, v36, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 24))(v35, v36, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v35, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v33 + 84))
    v39 = *(_QWORD *)(v33 + 64);
  else
    v39 = *(_QWORD *)(v33 + 64) + 1;
  memcpy(v35, v36, v39);
  return a1;
}

uint64_t sub_1B20EE4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  size_t v30;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 32))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = (_QWORD *)((v7 + 17) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v8 + 17) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8);
  v14 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v15 = a1 + v14 + 7;
  v16 = (_QWORD *)((a2 + v14 + 7) & 0xFFFFFFFFFFFFF8);
  v15 &= 0xFFFFFFFFFFFFF8uLL;
  *(_QWORD *)v15 = *v16;
  v17 = (_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v15 + 15) & 0xFFFFFFFFFFFFF8);
  *v18 = *v17;
  v19 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  v20 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v19 = *v20;
  v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = ((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v20) = *(_BYTE *)(v24 + 8);
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = (_BYTE)v20;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (void *)((v27 + 9 + v23) & ~v27);
  v29 = (const void *)((v27 + 9 + v24) & ~v27);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v29, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v26 + 84))
      v30 = *(_QWORD *)(v26 + 64);
    else
      v30 = *(_QWORD *)(v26 + 64) + 1;
    memcpy(v28, v29, v30);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v28, v29, AssociatedTypeWitness);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t sub_1B20EE6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  void **v10;
  void **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t (*v34)(void *, uint64_t, uint64_t);
  int v35;
  size_t v36;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v5 + 40))(a1, a2, *(_QWORD *)(a3 + 16));
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = (void **)((v7 + 17) & 0xFFFFFFFFFFFFFFF8);
  v11 = (void **)((v8 + 17) & 0xFFFFFFFFFFFFF8);
  v12 = *v10;
  *v10 = *v11;

  v13 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  v15 = (((((((v6 & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  v16 = a1 + v15 + 7;
  v17 = (_QWORD *)((a2 + v15 + 7) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = *v17;
  v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v18 &= 0xFFFFFFFFFFFFFFF8;
  v19 = (_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
  *(_QWORD *)v18 = *v19;
  swift_bridgeObjectRelease();
  v20 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v21 = (unint64_t)v20 + 31;
  v22 = (_QWORD *)((v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v22 = *v20;
  swift_bridgeObjectRelease();
  v23 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = *(void **)v23;
  *(_QWORD *)v23 = *(_QWORD *)v24;

  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  v26 = ((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  v27 = v21 & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  *(_BYTE *)(v26 + 8) = *(_BYTE *)((v21 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)v26 = v28;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v31 = *(unsigned __int8 *)(v30 + 80);
  v32 = (void *)((v31 + 9 + v26) & ~v31);
  v33 = (void *)((v31 + 9 + v27) & ~v31);
  v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  LODWORD(v27) = v34(v32, 1, AssociatedTypeWitness);
  v35 = v34(v33, 1, AssociatedTypeWitness);
  if ((_DWORD)v27)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 32))(v32, v33, AssociatedTypeWitness);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, AssociatedTypeWitness);
      return a1;
    }
  }
  else
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 40))(v32, v33, AssociatedTypeWitness);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v32, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v30 + 84))
    v36 = *(_QWORD *)(v30 + 64);
  else
    v36 = *(_QWORD *)(v30 + 64) + 1;
  memcpy(v32, v33, v36);
  return a1;
}

uint64_t sub_1B20EE974(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v6 + 84);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v10 = *(_DWORD *)(v9 + 84);
  if (v10)
    v11 = v10 - 1;
  else
    v11 = 0;
  if (v11 <= v8)
    v12 = v8;
  else
    v12 = v11;
  if (v10)
    v13 = *(_QWORD *)(v9 + 64);
  else
    v13 = *(_QWORD *)(v9 + 64) + 1;
  if (!a2)
    return 0;
  v14 = *(_QWORD *)(v6 + 64);
  v15 = (((((((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(unsigned __int8 *)(v9 + 80);
  if (a2 <= v12)
    goto LABEL_33;
  v17 = v13
      + ((v16
        + ((((((((v15 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 9) & ~v16);
  v18 = 8 * v17;
  if (v17 <= 3)
  {
    v21 = ((a2 - v12 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      v19 = *(_DWORD *)(a1 + v17);
      if (!v19)
        goto LABEL_33;
      goto LABEL_24;
    }
    if (v21 > 0xFF)
    {
      v19 = *(unsigned __int16 *)(a1 + v17);
      if (!*(_WORD *)(a1 + v17))
        goto LABEL_33;
      goto LABEL_24;
    }
    if (v21 < 2)
    {
LABEL_33:
      if (v8 >= v11)
      {
        if (v7 < 0x7FFFFFFF)
        {
          v25 = *(_QWORD *)(((((((a1 + v14 + 7) & 0xFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)
                          + 8);
          if (v25 >= 0xFFFFFFFF)
            LODWORD(v25) = -1;
          return (v25 + 1);
        }
        else
        {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        }
      }
      else
      {
        v24 = (*(uint64_t (**)(unint64_t))(v9 + 48))((v16
                                                                     + ((((((((a1 + v15 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                           + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                         + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                     + 25) & ~v16);
        if (v24 >= 2)
          return v24 - 1;
        else
          return 0;
      }
    }
  }
  v19 = *(unsigned __int8 *)(a1 + v17);
  if (!*(_BYTE *)(a1 + v17))
    goto LABEL_33;
LABEL_24:
  v22 = (v19 - 1) << v18;
  if (v17 > 3)
    v22 = 0;
  if ((_DWORD)v17)
  {
    if (v17 <= 3)
      v23 = v17;
    else
      v23 = 4;
    __asm { BR              X12 }
  }
  return v12 + v22 + 1;
}

void sub_1B20EEBF4(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu)
    v8 = 0x7FFFFFFF;
  else
    v8 = *(_DWORD *)(v7 + 84);
  v9 = 0u;
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness() - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11)
    v12 = v11 - 1;
  else
    v12 = 0;
  if (v12 <= v8)
    v13 = v8;
  else
    v13 = v12;
  v14 = (((((((*(_QWORD *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(unsigned __int8 *)(v10 + 80);
  if (v11)
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  v17 = ((v15 + ((((((((v14 + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 9) & ~(_DWORD)v15)
      + v16;
  if (a3 > v13)
  {
    if (v17 > 3)
    {
      v9 = 1u;
      if (v13 >= a2)
LABEL_29:
        __asm { BR              X16 }
LABEL_22:
      v19 = ~v13 + a2;
      if (v17 < 4)
      {
        if (v17)
        {
          v20 = v19 & ~(-1 << (8 * v17));
          bzero(a1, ((v15+ ((((((((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)+ 9) & ~v15)+ v16);
          if (v17 == 3)
          {
            *(_WORD *)a1 = v20;
            a1[2] = BYTE2(v20);
          }
          else if (v17 == 2)
          {
            *(_WORD *)a1 = v20;
          }
          else
          {
            *a1 = v20;
          }
        }
      }
      else
      {
        bzero(a1, ((v15+ ((((((((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)+ 9) & ~v15)+ v16);
        *(_DWORD *)a1 = v19;
      }
      __asm { BR              X10 }
    }
    v18 = ((a3 - v13 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v18))
    {
      v9 = 4u;
      if (v13 >= a2)
        goto LABEL_29;
      goto LABEL_22;
    }
    if (v18 >= 0x100)
      v9 = 2;
    else
      v9 = v18 > 1;
  }
  if (v13 >= a2)
    goto LABEL_29;
  goto LABEL_22;
}

void sub_1B20EEF2C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
}

void sub_1B20EEF34()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
}

void sub_1B20EEF94()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_1B20EEFA4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_1B20EEFAC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t type metadata accessor for ScriptRuntime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScriptRuntime);
}

uint64_t storeEnumTagSinglePayload for ScriptScheduling(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B20EF010 + 4 * byte_1B22BB2F7[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B20EF044 + 4 * byte_1B22BB2F2[v4]))();
}

uint64_t sub_1B20EF044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20EF04C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B20EF054);
  return result;
}

uint64_t sub_1B20EF060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B20EF068);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B20EF06C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B20EF074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScriptScheduling()
{
  return &type metadata for ScriptScheduling;
}

unint64_t sub_1B20EF094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF634D8;
  if (!qword_1EEF634D8)
  {
    sub_1B20EF0DC();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF634D8);
  }
  return result;
}

void sub_1B20EF0DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF634E0)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF634E0);
  }
}

uint64_t sub_1B20EF130(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1B20EF138(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t sub_1B20EF140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t sub_1B20EF158(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = MEMORY[0x1E0C80A78](a1, v1);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v8 + *(int *)(v7 + 40));
  (*(void (**)(char *, double))(v3 + 16))(v6, v4);
  if (v9)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, a1);
  }
  else
  {
    v10 = *(_QWORD *)&v6[*(int *)(a1 + 44)];
    v11 = *(void (**)(char *, uint64_t))(v3 + 8);
    swift_bridgeObjectRetain();
    v11(v6, a1);
    if (!v10)
      return 0;
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t sub_1B20EF218()
{
  _QWORD *v0;
  uint64_t result;

  if (*(_QWORD *)(v0[4] + 16))
  {
    result = swift_bridgeObjectRelease();
    v0[1] = 0x64656D6D6972743CLL;
    v0[2] = 0xE90000000000003ELL;
  }
  return result;
}

uint64_t sub_1B20EF258()
{
  _QWORD *v0;
  uint64_t result;

  if (*(_QWORD *)(v0[4] + 16))
  {
    result = swift_bridgeObjectRelease();
    *v0 = 0x64656D6D6972743CLL;
    v0[1] = 0xE90000000000003ELL;
  }
  return result;
}

uint64_t sub_1B20EF298()
{
  uint64_t v0;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 8) = 0x64656D6D6972743CLL;
  *(_QWORD *)(v0 + 16) = 0xE90000000000003ELL;
  return result;
}

uint64_t sub_1B20EF2CC()
{
  _QWORD *v0;
  uint64_t result;

  if (*(_QWORD *)(*v0 + 16))
  {
    result = swift_bridgeObjectRelease();
    v0[1] = 0x64656D6D6972743CLL;
    v0[2] = 0xE90000000000003ELL;
  }
  return result;
}

uint64_t sub_1B20EF30C()
{
  _QWORD *v0;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v0 = 0x64656D6D6972743CLL;
  v0[1] = 0xE90000000000003ELL;
  return result;
}

uint64_t sub_1B20EF340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;

  sub_1B1F792EC(a1, a2, a3);
  v7 = (int *)type metadata accessor for ScriptRuntime(0, a1, a2, v6);
  *(_QWORD *)(a3 + v7[9]) = 0;
  *(_QWORD *)(a3 + v7[10]) = 0;
  *(_QWORD *)(a3 + v7[11]) = 0;
  *(_QWORD *)(a3 + v7[12]) = 0;
  *(_BYTE *)(a3 + v7[13]) = 0;
  v8 = a3 + v7[14];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  v9 = a3 + v7[15];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v9, 1, 1, AssociatedTypeWitness);
}

uint64_t sub_1B20EF3FC()
{
  sub_1B20F0208();
  return sub_1B222A1D4();
}

uint64_t sub_1B20EF424()
{
  sub_1B20F0208();
  return sub_1B222A1E0();
}

uint64_t sub_1B20EF44C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B20F01B0();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19FA070(a1, a1[3]);
  sub_1B20F0208();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t sub_1B20EF50C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1B20EFEDC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B20EF534()
{
  sub_1B20EFEEC();
  return sub_1B2228A58();
}

uint64_t sub_1B20EF590()
{
  sub_1B20EFEEC();
  return sub_1B22289E0();
}

void sub_1B20EF5DC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E638AB50;
}

unint64_t sub_1B20EF5F0()
{
  unint64_t result;

  result = qword_1EEF634E8;
  if (!qword_1EEF634E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB4E0, &type metadata for ScriptScheduling);
    atomic_store(result, (unint64_t *)&qword_1EEF634E8);
  }
  return result;
}

uint64_t sub_1B20EF634@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t result;
  uint64_t v10;

  result = sub_1B1B4F2A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2, a3, a4, a5, a6, a7);
  *a8 = result;
  a8[1] = v10;
  return result;
}

uint64_t sub_1B20EF680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  uint64_t v36;
  char *v37;
  uint64_t result;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = sub_1B2229124();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v52 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v51 = (char *)&v50 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v50 - v19;
  v22 = type metadata accessor for ScriptCompileAttempt(0, v7, v8, v21);
  sub_1B1F79378(a1, a2, v22);
  v23 = v3 + *(int *)(a3 + 60);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v24(v20, v23, v10);
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v20, 1, AssociatedTypeWitness);
  v53 = v11;
  if (v27 == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
    v28 = v10;
    goto LABEL_14;
  }
  v50 = v10;
  if ((swift_dynamicCast() & 1) == 0)
  {
    v28 = v50;
LABEL_14:
    v39 = v52;
    v24(v52, v23, v28);
    if (v26(v39, 1, AssociatedTypeWitness) == 1)
      return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v39, v28);
    result = swift_dynamicCast();
    if ((result & 1) != 0)
    {
      v41 = v54;
      v40 = v55;
      v42 = *((_QWORD *)v54 + 2);
      if (v42)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v41 = (char *)sub_1B1FFED40(v41);
        swift_getObjectType();
        v52 = v41;
        v43 = (uint64_t)(v41 + 32);
        do
        {
          v44 = swift_unknownObjectRetain();
          sub_1B1CA7D5C(v44, v43);
          swift_unknownObjectRelease();
          v43 += 32;
          --v42;
        }
        while (v42);
        v41 = v52;
      }
      v45 = v40[2];
      if (v45)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v52 = v41;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v40 = sub_1B1FFED40(v40);
        swift_getObjectType();
        v47 = (uint64_t)(v40 + 4);
        do
        {
          v48 = swift_unknownObjectRetain();
          sub_1B1CA7D5C(v48, v47);
          swift_unknownObjectRelease();
          v47 += 32;
          --v45;
        }
        while (v45);
        v41 = v52;
      }
      v54 = v41;
      v55 = v40;
      v49 = v51;
      swift_dynamicCast();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v49, 0, 1, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v53 + 40))(v23, v49, v28);
    }
    return result;
  }
  v29 = v54;
  v30 = v55;
  v31 = *((_QWORD *)v54 + 2);
  if (v31)
  {
    v32 = v55;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v29 = (char *)sub_1B1FFED40(v29);
    swift_getObjectType();
    v33 = (uint64_t)(v29 + 32);
    do
    {
      v34 = swift_unknownObjectRetain();
      sub_1B1CA7D5C(v34, v33);
      swift_unknownObjectRelease();
      v33 += 32;
      --v31;
    }
    while (v31);
    v30 = v32;
  }
  ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(ObjectType, a2) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v30 = 0;
  }
  v36 = v53;
  v54 = v29;
  v55 = v30;
  v37 = v51;
  swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v37, 0, 1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 40))(v23, v37, v50);
}

uint64_t sub_1B20EFA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B20EF340(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

void sub_1B20EFA94(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DEE9D8];
  *a1 = MEMORY[0x1E0DEE9D8];
  a1[1] = v1;
}

void sub_1B20EFAA4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_BYTE *)a1 = 0;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a1 + 16) = v1;
}

uint64_t sub_1B20EFAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v0 = sub_1B222874C();
  v2 = v1;
  if (v0 == sub_1B222874C() && v2 == v3)
  {
    v6 = 2;
LABEL_8:
    swift_bridgeObjectRelease_n();
    return v6;
  }
  v5 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
    return 2;
  v8 = sub_1B222874C();
  v10 = v9;
  if (v8 == sub_1B222874C() && v10 == v11)
  {
    v6 = 3;
    goto LABEL_8;
  }
  v13 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    return 3;
  v14 = sub_1B222874C();
  v16 = v15;
  if (v14 == sub_1B222874C() && v16 == v17)
  {
    v6 = 4;
    goto LABEL_8;
  }
  v18 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
    return 4;
  v19 = sub_1B222874C();
  v21 = v20;
  if (v19 == sub_1B222874C() && v21 == v22)
  {
    v6 = 5;
    goto LABEL_8;
  }
  v23 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v23 & 1) != 0)
    return 5;
  v24 = sub_1B222874C();
  v26 = v25;
  if (v24 == sub_1B222874C() && v26 == v27)
  {
    v6 = 6;
    goto LABEL_8;
  }
  v28 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v28 & 1) != 0)
    return 6;
  v29 = sub_1B222874C();
  v31 = v30;
  if (v29 == sub_1B222874C() && v31 == v32)
  {
    v6 = 7;
    goto LABEL_8;
  }
  v33 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
    return 7;
  v34 = sub_1B222874C();
  v36 = v35;
  if (v34 == sub_1B222874C() && v36 == v37)
  {
    v6 = 8;
    goto LABEL_8;
  }
  v38 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) != 0)
    return 8;
  sub_1B2229430();
  sub_1B2228890();
  type metadata accessor for VFXTriggerType(0);
  sub_1B22295EC();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

unint64_t sub_1B20EFEDC(unint64_t result)
{
  if (result >= 9)
    return 9;
  return result;
}

unint64_t sub_1B20EFEEC()
{
  unint64_t result;

  result = qword_1EEF634F0;
  if (!qword_1EEF634F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB4A8, &type metadata for ScriptScheduling);
    atomic_store(result, (unint64_t *)&qword_1EEF634F0);
  }
  return result;
}

uint64_t destroy for GeneratedScriptCode()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for GeneratedScriptCode(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for GeneratedScriptCode(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for GeneratedScriptCode(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for GeneratedScriptCode()
{
  return &type metadata for GeneratedScriptCode;
}

uint64_t sub_1B20F00A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScriptCompileOptions(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScriptCompileOptions(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ScriptCompileOptions()
{
  return &type metadata for ScriptCompileOptions;
}

ValueMetadata *type metadata accessor for CodableVoid()
{
  return &type metadata for CodableVoid;
}

uint64_t type metadata accessor for ScriptStateRestoration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScriptStateRestoration);
}

void sub_1B20F01B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF634F8)
  {
    sub_1B20F0208();
    v0 = sub_1B22299C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF634F8);
  }
}

unint64_t sub_1B20F0208()
{
  unint64_t result;

  result = qword_1EEF63500;
  if (!qword_1EEF63500)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB6CC, &type metadata for CodableVoid.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63500);
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableVoid.CodingKeys()
{
  return &type metadata for CodableVoid.CodingKeys;
}

unint64_t sub_1B20F0260()
{
  unint64_t result;

  result = qword_1EEF63508;
  if (!qword_1EEF63508)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB67C, &type metadata for CodableVoid.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63508);
  }
  return result;
}

unint64_t sub_1B20F02A8()
{
  unint64_t result;

  result = qword_1EEF63510;
  if (!qword_1EEF63510)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BB6A4, &type metadata for CodableVoid.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF63510);
  }
  return result;
}

uint64_t sub_1B20F02F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[12];
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v5 = *(_OWORD *)(a1 + 16);
  v28[0] = *(_OWORD *)a1;
  v28[1] = v5;
  v29 = *(_QWORD *)(a1 + 32);
  sub_1B1E8FCE4(v3, (uint64_t)v28, a2 & 0xFFFFFFFFFFLL, v16);
  result = sub_1B1A18378((uint64_t)v16, (uint64_t)&v17, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v17)
  {
    v7 = v20;
    v8 = v21;
    v9 = v22;
    v10 = v23;
    v11 = v24;
    v12 = v25;
    v13 = v26;
    v14 = v27;
    v15 = v18 | ((unint64_t)v19 << 32);
  }
  else
  {
    v15 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v13 = 0;
    v14 = 0;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v15;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 40) = v10;
  *(_OWORD *)(a3 + 48) = v11;
  *(_OWORD *)(a3 + 64) = v12;
  *(_QWORD *)(a3 + 80) = v13;
  *(_QWORD *)(a3 + 88) = v14;
  return result;
}

unint64_t sub_1B20F03D8@<X0>(unint64_t result@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64x2_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v3 = v2;
  v4 = result;
  v6 = 0uLL;
  if (HIDWORD(result) || (_DWORD)result != -1)
  {
    result = sub_1B1FD568C((uint64_t)&type metadata for Tombstone, (uint64_t)&off_1E63C5608, result);
    if ((result & 1) == 0)
    {
      result = sub_1B1D15698(v4, (uint64_t)&v37);
      v19 = v51;
      if (v51)
      {
        v7 = v37;
        v8 = v38;
        v9 = v41;
        v11 = v43;
        v12 = v44;
        v13 = v45;
        v14 = v46;
        v15 = v47;
        v16 = v48;
        v17 = v49;
        if (v37)
        {
          if ((v40 & 1) != 0)
          {
            v10 = v42 & 0x1FFFF;
            v18 = v50;
            v6 = vdupq_n_s64(1uLL);
            v6.i64[0] = v39;
            goto LABEL_18;
          }
        }
        else if ((v40 & 1) != 0)
        {
          result = sub_1B1A0866C(0, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51);
          goto LABEL_16;
        }
        v24 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
        v37 = 0;
        v38 = 0xE000000000000000;
        v29 = v7;
        v30 = v39;
        v32 = v8;
        v33 = v42;
        v34 = v41;
        v35 = v43;
        v36 = v44;
        v31 = v40;
        v28 = v50;
        swift_retain();
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v37 = 0x2065727574786554;
        v38 = 0xE800000000000000;
        sub_1B1BC3C70();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v25 = v37;
        v26 = v38;
        v27 = sub_1B2228E90();
        v37 = 0;
        (*(void (**)(uint64_t, unint64_t *, unint64_t, uint64_t))(*(_QWORD *)v24 + 88))(v27, &v37, v25, v26);
        swift_release();
        swift_bridgeObjectRelease();
        result = sub_1B1A0866C(v29, v32, v30, v31, v34, v33, v35, v36, v13, v14, v15, v16, v17, v28, v19);
      }
      else
      {
        result = sub_1B1DA4E70(v4);
        if ((result & 1) != 0)
        {
          v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
          v37 = 0;
          v38 = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          swift_bridgeObjectRelease();
          v37 = 0xD00000000000001ALL;
          v38 = 0x80000001B234C6B0;
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          swift_retain();
          sub_1B1D1568C(v4);
          swift_release();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v21 = v37;
          v22 = v38;
          v23 = sub_1B2228E90();
          v37 = 0;
          (*(void (**)(uint64_t, unint64_t *, unint64_t, uint64_t))(*(_QWORD *)v20 + 88))(v23, &v37, v21, v22);
          swift_release();
          swift_bridgeObjectRelease();
          sub_1B1FDF3AC(v4, v3);
          result = sub_1B1D1536C(v4);
          v7 = 0;
          if (BYTE3(result) == 2 || result != 1)
          {
            v8 = 0;
            v9 = 0;
            v10 = 0;
            v11 = 0;
            v12 = 0;
            v13 = 0;
            v14 = 0;
            v15 = 0;
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v19 = 0;
            goto LABEL_17;
          }
          result = sub_1B1FE16DC((uint64_t)&type metadata for TextureLoadRequestCPU, (uint64_t)&off_1E63A6C00, v4);
        }
      }
    }
LABEL_16:
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
LABEL_17:
    v6 = 0uLL;
    goto LABEL_18;
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
LABEL_18:
  a2->i64[0] = v7;
  a2->i64[1] = v8;
  a2[1] = v6;
  a2[2].i64[0] = v9;
  a2[2].i64[1] = v10;
  a2[3].i64[0] = v11;
  a2[3].i64[1] = v12;
  a2[4].i64[0] = v13;
  a2[4].i64[1] = v14;
  a2[5].i64[0] = v15;
  a2[5].i64[1] = v16;
  a2[6].i64[0] = v17;
  a2[6].i64[1] = v18;
  a2[7].i64[0] = v19;
  return result;
}

uint64_t sub_1B20F080C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v8;
  int v9;
  uint64_t v11[2];

  v1 = v0;
  v2 = (void *)v0[4];
  if (v2)
  {
    v3 = v1[5];
    ObjectType = swift_getObjectType();
    v6 = v1[2];
    v5 = v1[3];
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8);
    v8 = v2;
    swift_bridgeObjectRetain();
    v7(v6, v5, ObjectType, v3);

  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v11[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v9 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v11[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v9, v11, 0, 0xE000000000000000);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    sub_1B2228050();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20F09EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  objc_class *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  void *v18;
  char *v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  void (*v24)(char *, uint64_t);
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  objc_class *v31;
  char *v32;
  char *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  objc_super v42;
  objc_super v43;

  v2 = v1;
  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1B222805C();
  sub_1B20F15F4(v9, v10);
  v11 = (void *)v1[4];
  v12 = v2[5];
  v41 = a1;
  if (v11
    && (v13 = (objc_class *)type metadata accessor for AbsolutePathStorage(0), (v14 = swift_dynamicCastClass()) != 0))
  {
    v15 = v14;
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v8, a1, v4);
    v18 = *(void **)(v15 + OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver);
    v17 = *(_QWORD *)(v15 + OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver + 8);
    v19 = (char *)objc_allocWithZone(v13);
    v16(&v19[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_absoluteURL], (uint64_t)v8, v4);
    v20 = &v19[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver];
    *(_QWORD *)v20 = v18;
    *((_QWORD *)v20 + 1) = v17;
    v42.receiver = v19;
    v42.super_class = v13;
    v21 = v11;
    v22 = v18;
    v23 = objc_msgSendSuper2(&v42, sel_init);
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v25 = (void *)v2[4];
    v2[4] = (uint64_t)v23;
    v2[5] = (uint64_t)&off_1E6397578;
    v26 = v23;

    v27 = sub_1B222802C();
    v29 = v28;

  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v30(v8, a1, v4);
    v31 = (objc_class *)type metadata accessor for AbsolutePathStorage(0);
    v32 = (char *)objc_allocWithZone(v31);
    v30(&v32[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_absoluteURL], (uint64_t)v8, v4);
    v33 = &v32[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver];
    *(_QWORD *)v33 = v11;
    *((_QWORD *)v33 + 1) = v12;
    v43.receiver = v32;
    v43.super_class = v31;
    v34 = v11;
    v35 = objc_msgSendSuper2(&v43, sel_init);
    v24 = *(void (**)(char *, uint64_t))(v5 + 8);
    v24(v8, v4);
    v36 = (void *)v2[4];
    v2[4] = (uint64_t)v35;
    v2[5] = (uint64_t)&off_1E6397578;
    v37 = v35;

    v27 = sub_1B222802C();
    v29 = v38;

  }
  swift_bridgeObjectRelease();
  *v2 = v27;
  v2[1] = v29;
  return ((uint64_t (*)(uint64_t, uint64_t))v24)(v41, v4);
}

uint64_t sub_1B20F0C50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  id v7[2];
  __int128 v8;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 16))(&v4);
  v2 = v4;
  v8 = v5;
  sub_1B1BA80C0((uint64_t)&v8);
  sub_1B1AE72F4((uint64_t)&v6, (uint64_t)v7);
  sub_1B1BB52CC(v7);
  return v2;
}

unint64_t sub_1B20F0CB8()
{
  uint64_t v0;
  unint64_t v1;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1B1A20F64(v0);
  swift_bridgeObjectRelease();
  return v1;
}

BOOL sub_1B20F0D00(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  return (a4 & 0xFF00) == 256;
}

BOOL sub_1B20F0D10(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  return (a4 & 0xFF00) == 512;
}

uint64_t sub_1B20F0D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[32];

  sub_1B1A02864(a1, (uint64_t)v22);
  if (!swift_dynamicCast())
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v4 = v14;
LABEL_7:
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
LABEL_8:
      v12 = 15;
      goto LABEL_9;
    }
    if (swift_dynamicCast())
    {
      LODWORD(v4) = (__int16)v14;
      goto LABEL_3;
    }
    if (swift_dynamicCast())
      goto LABEL_13;
    if (swift_dynamicCast())
    {
      v4 = (unsigned __int16)v14;
      goto LABEL_7;
    }
    if (swift_dynamicCast())
    {
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v4 = v14;
      goto LABEL_4;
    }
    if (swift_dynamicCast())
    {
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v4 = v14;
      goto LABEL_8;
    }
    if (swift_dynamicCast())
    {
LABEL_13:
      v4 = v14;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      goto LABEL_4;
    }
    if (swift_dynamicCast())
    {
      v4 = v14;
      goto LABEL_7;
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
    if (swift_dynamicCast())
    {
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v4 = v14;
      v12 = 13;
      goto LABEL_9;
    }
    type metadata accessor for simd_float2x2(0);
    if (swift_dynamicCast())
    {
LABEL_26:
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v4 = v14;
      v5 = v15;
      v12 = 4;
      goto LABEL_9;
    }
    type metadata accessor for simd_float2x3(0);
    if (swift_dynamicCast())
      goto LABEL_28;
    type metadata accessor for simd_float2x4(0);
    if (swift_dynamicCast())
    {
LABEL_30:
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v4 = v14;
      v5 = v15;
      v12 = 6;
      goto LABEL_31;
    }
    type metadata accessor for simd_float3x2(0);
    if (swift_dynamicCast())
    {
LABEL_33:
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v4 = v14;
      v5 = v15;
      v6 = v16;
      v12 = 7;
      goto LABEL_9;
    }
    type metadata accessor for simd_float3x3(0);
    if (swift_dynamicCast())
      goto LABEL_35;
    type metadata accessor for simd_float3x4(0);
    if (swift_dynamicCast())
    {
LABEL_37:
      v10 = 0;
      v11 = 0;
      v4 = v14;
      v5 = v15;
      v6 = v16;
      v7 = v17;
      v12 = 9;
      goto LABEL_38;
    }
    type metadata accessor for simd_float4x2(0);
    if (swift_dynamicCast())
    {
LABEL_40:
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v4 = v14;
      v5 = v15;
      v12 = 10;
      goto LABEL_31;
    }
    type metadata accessor for simd_float4x3(0);
    if (swift_dynamicCast())
      goto LABEL_42;
    type metadata accessor for simd_float4x4(0);
    if (!swift_dynamicCast())
    {
      if (swift_dynamicCast())
      {
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v4 = v14;
        goto LABEL_9;
      }
      sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
      if (swift_dynamicCast())
      {
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v4 = v14;
        v12 = 1;
        goto LABEL_9;
      }
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      if (swift_dynamicCast())
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v4 = v14;
        v5 = v15;
        v12 = 2;
        goto LABEL_9;
      }
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      if (swift_dynamicCast())
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v4 = v14;
        v5 = v15;
        v12 = 3;
        goto LABEL_9;
      }
      if (swift_dynamicCast())
        goto LABEL_26;
      if (swift_dynamicCast())
        goto LABEL_33;
      if (swift_dynamicCast())
        goto LABEL_40;
      if (swift_dynamicCast())
      {
LABEL_28:
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v4 = v14;
        v5 = v15;
        v12 = 5;
LABEL_31:
        v6 = v16;
        v7 = v17;
        goto LABEL_9;
      }
      if (swift_dynamicCast())
      {
LABEL_35:
        v10 = 0;
        v11 = 0;
        v4 = v14;
        v5 = v15;
        v6 = v16;
        v7 = v17;
        v12 = 8;
LABEL_38:
        v8 = v18;
        v9 = v19;
        goto LABEL_9;
      }
      if (swift_dynamicCast())
      {
LABEL_42:
        v4 = v14;
        v5 = v15;
        v6 = v16;
        v7 = v17;
        v8 = v18;
        v9 = v19;
        v12 = 11;
LABEL_45:
        v10 = v20;
        v11 = v21;
        goto LABEL_9;
      }
      if (swift_dynamicCast())
        goto LABEL_30;
      if (swift_dynamicCast())
        goto LABEL_37;
      if (!swift_dynamicCast())
      {
        v4 = 0;
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = -1;
        goto LABEL_9;
      }
    }
    v4 = v14;
    v5 = v15;
    v6 = v16;
    v7 = v17;
    v8 = v18;
    v9 = v19;
    v12 = 12;
    goto LABEL_45;
  }
  LODWORD(v4) = (char)v14;
LABEL_3:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v4 = v4;
LABEL_4:
  v12 = 14;
LABEL_9:
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v22);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 56) = v11;
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

uint64_t sub_1B20F1554()
{
  unsigned __int16 *v0;
  unint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *((_QWORD *)v0 + 3);
  if (v1 > 8)
    return 1;
  if (((1 << v1) & 0x63) != 0)
  {
    v2 = *v0;
  }
  else
  {
    if (((1 << v1) & 0x11C) != 0)
    {
      v2 = *v0;
      v3 = v0[1];
    }
    else
    {
      v2 = *v0;
      v3 = v0[1];
      if (v0[2] > v3)
        v3 = v0[2];
    }
    if (v3 > v2)
      v2 = v3;
  }
  return (uint64_t)(float)(floorf(log2f(fmaxf((float)v2, 1.0))) + 1.0);
}

uint64_t sub_1B20F15F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t ObjectType;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;

  v3 = v2;
  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  v3[2] = a1;
  v3[3] = a2;
  v11 = (void *)v3[4];
  if (v11)
  {
    v12 = v3[5];
    ObjectType = swift_getObjectType();
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8);
    swift_bridgeObjectRetain();
    v15 = v11;
    v14(a1, a2, ObjectType, v12);
    swift_bridgeObjectRelease();

    a1 = sub_1B222802C();
    a2 = v16;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  result = swift_bridgeObjectRelease();
  *v3 = a1;
  v3[1] = a2;
  return result;
}

ValueMetadata *sub_1B20F1714()
{
  return &type metadata for VirtualFileAsset;
}

uint64_t sub_1B20F172C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  if (a7)
  {
    v7 = a7;
    v8 = (uint64_t *)(result + 48 * a3 + 40);
    v9 = (_QWORD *)(a4 + 56 * a6);
    do
    {
      v10 = *(v8 - 4);
      v17 = *(v8 - 3);
      v18 = *(v8 - 5);
      v12 = *(v8 - 2);
      v11 = (void *)*(v8 - 1);
      v13 = *v8;
      v8 += 6;
      v16 = (void *)v9[4];
      v14 = v11;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v15 = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      *v9 = v18;
      v9[1] = v10;
      v9[2] = v17;
      v9[3] = v12;
      v9[4] = v11;
      v9[5] = v13;
      sub_1B2054C68();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_arrayDestroy();
      v9 += 7;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B20F183C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  id v15;

  if (a7)
  {
    v7 = a7;
    v8 = result + 48 * a3;
    v9 = (void **)(a4 + 56 * a6 + 32);
    do
    {
      v10 = *(void **)(v8 + 8);
      v11 = *(void **)(v8 + 16);
      v12 = *(void **)(v8 + 24);
      v13 = *v9;
      v14 = *(_OWORD *)(v8 + 32);
      *(v9 - 4) = *(void **)v8;
      *(v9 - 3) = v10;
      *(_OWORD *)v9 = v14;
      *(v9 - 2) = v11;
      *(v9 - 1) = v12;
      v15 = (id)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      result = swift_arrayDestroy();
      v8 += 48;
      v9 += 7;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B20F1904(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  __int128 v14;
  id v15;

  if (a7)
  {
    v7 = a7;
    v8 = result + 48 * a3;
    v9 = (void **)(a4 + (a6 << 6) + 32);
    do
    {
      v10 = *(void **)(v8 + 8);
      v11 = *(void **)(v8 + 16);
      v12 = *(void **)(v8 + 24);
      v13 = *v9;
      v14 = *(_OWORD *)(v8 + 32);
      *(v9 - 4) = *(void **)v8;
      *(v9 - 3) = v10;
      *(_OWORD *)v9 = v14;
      *(v9 - 2) = v11;
      *(v9 - 1) = v12;
      v15 = (id)v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      result = swift_arrayDestroy();
      v8 += 48;
      v9 += 8;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B20F19C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  if (a7)
  {
    v7 = a7;
    v8 = (uint64_t *)(result + 48 * a3);
    v9 = (_QWORD *)(a4 + 48 * a6 + 24);
    do
    {
      v10 = v8[1];
      v12 = v8[2];
      v11 = v8[3];
      v13 = (void *)v8[4];
      v16 = v8[5];
      v17 = *v8;
      v14 = (void *)v9[1];
      v15 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      *(v9 - 3) = v17;
      *(v9 - 2) = v10;
      *(v9 - 1) = v12;
      *v9 = v11;
      v9[1] = v13;
      v9[2] = v16;
      result = swift_arrayDestroy();
      v8 += 6;
      v9 += 6;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B20F1A9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  __int128 v22;

  if (a7)
  {
    v7 = result + 56 * a3;
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(_QWORD *)(v7 + 16);
    v10 = *(_QWORD *)(v7 + 24);
    v11 = a4 + 48 * a6;
    v12 = *(_OWORD *)(v7 + 32);
    *(_QWORD *)v11 = *(_QWORD *)v7;
    *(_QWORD *)(v11 + 8) = v8;
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v10;
    *(_OWORD *)(v11 + 32) = v12;
    v13 = (void *)v12;
    v14 = a7 - 1;
    if (a7 != 1)
    {
      v15 = result + 56 * a3 + 56;
      v16 = (_OWORD *)(a4 + 48 * a6 + 80);
      do
      {
        v17 = *(_QWORD *)(v15 + 8);
        v18 = *(_QWORD *)(v15 + 16);
        v19 = *(_QWORD *)(v15 + 24);
        v22 = *(_OWORD *)(v15 + 32);
        *((_QWORD *)v16 - 4) = *(_QWORD *)v15;
        *((_QWORD *)v16 - 3) = v17;
        *((_QWORD *)v16 - 2) = v18;
        *((_QWORD *)v16 - 1) = v19;
        *v16 = v22;
        v16 += 3;
        v20 = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v13 = (void *)v22;
        v15 += 56;
        --v14;
      }
      while (v14);
    }
    v21 = v13;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B20F1B90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  __int128 v22;

  if (a7)
  {
    v7 = result + (a3 << 6);
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(_QWORD *)(v7 + 16);
    v10 = *(_QWORD *)(v7 + 24);
    v11 = a4 + 48 * a6;
    v12 = *(_OWORD *)(v7 + 32);
    *(_QWORD *)v11 = *(_QWORD *)v7;
    *(_QWORD *)(v11 + 8) = v8;
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v10;
    *(_OWORD *)(v11 + 32) = v12;
    v13 = (void *)v12;
    v14 = a7 - 1;
    if (a7 != 1)
    {
      v15 = v7 + 64;
      v16 = (_OWORD *)(a4 + 48 * a6 + 80);
      do
      {
        v17 = *(_QWORD *)(v15 + 8);
        v18 = *(_QWORD *)(v15 + 16);
        v19 = *(_QWORD *)(v15 + 24);
        v22 = *(_OWORD *)(v15 + 32);
        *((_QWORD *)v16 - 4) = *(_QWORD *)v15;
        *((_QWORD *)v16 - 3) = v17;
        *((_QWORD *)v16 - 2) = v18;
        *((_QWORD *)v16 - 1) = v19;
        *v16 = v22;
        v16 += 3;
        v20 = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v13 = (void *)v22;
        v15 += 64;
        --v14;
      }
      while (v14);
    }
    v21 = v13;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B20F1C78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  __int128 v24;

  if (a7)
  {
    v7 = result + 48 * a3;
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(_QWORD *)(v7 + 16);
    v10 = *(_QWORD *)(v7 + 24);
    v11 = a4 + 48 * a6;
    v12 = *(_OWORD *)(v7 + 32);
    *(_QWORD *)v11 = *(_QWORD *)v7;
    *(_QWORD *)(v11 + 8) = v8;
    *(_QWORD *)(v11 + 16) = v9;
    *(_QWORD *)(v11 + 24) = v10;
    *(_OWORD *)(v11 + 32) = v12;
    v13 = (void *)v12;
    v14 = a7 - 1;
    if (a7 != 1)
    {
      v15 = 0;
      v16 = result + 48 * a3;
      v17 = a4 + 48 * a6;
      do
      {
        v18 = *(_QWORD *)(v16 + v15 + 56);
        v19 = *(_QWORD *)(v16 + v15 + 64);
        v20 = *(_QWORD *)(v16 + v15 + 72);
        v21 = v17 + v15;
        v24 = *(_OWORD *)(v16 + v15 + 80);
        *(_QWORD *)(v21 + 48) = *(_QWORD *)(v16 + v15 + 48);
        *(_QWORD *)(v21 + 56) = v18;
        *(_QWORD *)(v21 + 64) = v19;
        *(_QWORD *)(v21 + 72) = v20;
        *(_OWORD *)(v21 + 80) = v24;
        v22 = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v13 = (void *)v24;
        v15 += 48;
        --v14;
      }
      while (v14);
    }
    v23 = v13;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B20F1D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B20F19C8(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1B20F1D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B20F1C78(a1, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_1B20F1D90(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _QWORD v6[5];
  char v7;

  v3 = *(_QWORD *)(v1 + 8);
  result = sub_1B1A10AA4(*(_QWORD *)(v3 + 40), (uint64_t)&type metadata for HalfSizeLegacyPatch, v6);
  if ((v6[0] & 1) == 0)
  {
    v6[0] = &type metadata for HalfSizeLegacyPatch;
    v6[1] = &off_1E6397E80;
    v7 = 0;
    MEMORY[0x1E0C80A78](result, v5);
    swift_retain();
    sub_1B1F05610(a1 & 1, v3, (uint64_t (*)(uint64_t))sub_1B20D41E8);
    sub_1B1B68F14((uint64_t)v6);
    return swift_release();
  }
  return result;
}

unint64_t sub_1B20F1E84(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _QWORD v6[5];
  char v7;

  v3 = *(_QWORD *)(v1 + 8);
  result = sub_1B1A10AA4(*(_QWORD *)(v3 + 40), (uint64_t)&type metadata for TextureCPURuntime, v6);
  if ((v6[0] & 1) == 0)
  {
    v6[0] = &type metadata for TextureCPURuntime;
    v6[1] = &off_1E638FF20;
    v7 = 0;
    MEMORY[0x1E0C80A78](result, v5);
    swift_retain();
    sub_1B1F05610(a1 & 1, v3, (uint64_t (*)(uint64_t))sub_1B20D41E8);
    sub_1B1B68F14((uint64_t)v6);
    return swift_release();
  }
  return result;
}

unint64_t sub_1B20F1F78(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _QWORD v6[5];
  char v7;

  v3 = *(_QWORD *)(v1 + 8);
  result = sub_1B1A10AA4(*(_QWORD *)(v3 + 40), (uint64_t)&type metadata for TextureGPURuntime, v6);
  if ((v6[0] & 1) == 0)
  {
    v6[0] = &type metadata for TextureGPURuntime;
    v6[1] = &off_1E6390060;
    v7 = 0;
    MEMORY[0x1E0C80A78](result, v5);
    swift_retain();
    sub_1B1F05610(a1 & 1, v3, (uint64_t (*)(uint64_t))sub_1B20D41E8);
    sub_1B1B68F14((uint64_t)v6);
    return swift_release();
  }
  return result;
}

unint64_t sub_1B20F206C(char a1)
{
  return sub_1B20F20D8(a1, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F2090(char a1)
{
  return sub_1B20F2200(a1, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F20B4(char a1)
{
  return sub_1B20F20D8(a1, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F20D8(char a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  _QWORD v13[5];
  char v14;

  sub_1B1A1B6FC(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  v10 = *(_QWORD *)(v5 + 8);
  result = sub_1B1A10AA4(*(_QWORD *)(v10 + 40), v8, v13);
  if (LOBYTE(v13[0]) == 1)
  {
    v13[0] = v9;
    v13[1] = &off_1E637D0A8;
    v14 = 1;
    MEMORY[0x1E0C80A78](result, v12);
    swift_retain();
    sub_1B1F05610(a1 & 1, v10, a5);
    sub_1B1B68F14((uint64_t)v13);
    return swift_release();
  }
  return result;
}

unint64_t sub_1B20F21DC(char a1)
{
  return sub_1B20F2200(a1, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F2200(char a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;
  _QWORD v13[5];
  char v14;

  sub_1B1A1B6FC(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v9 = v8;
  v10 = *(_QWORD *)(v5 + 8);
  result = sub_1B1A10AA4(*(_QWORD *)(v10 + 40), v8, v13);
  if (LOBYTE(v13[0]) == 1)
  {
    v13[0] = v9;
    v13[1] = &off_1E639EB98;
    v14 = 1;
    MEMORY[0x1E0C80A78](result, v12);
    swift_retain();
    sub_1B1F05610(a1 & 1, v10, a5);
    sub_1B1B68F14((uint64_t)v13);
    return swift_release();
  }
  return result;
}

unint64_t sub_1B20F2304(char a1)
{
  return sub_1B20F20D8(a1, &qword_1ED4B8890, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F2328(char a1)
{
  return sub_1B20F2200(a1, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F234C(char a1)
{
  return sub_1B20F20D8(a1, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F2370(char a1)
{
  return sub_1B20F2200(a1, &qword_1ED4B9670, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F2394(char a1)
{
  return sub_1B20F20D8(a1, (unint64_t *)&qword_1ED4B88C0, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F23B8(char a1)
{
  return sub_1B20F2200(a1, (unint64_t *)&unk_1ED4B9650, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F23DC(char a1)
{
  return sub_1B20F20D8(a1, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F2400(char a1)
{
  return sub_1B20F2200(a1, (unint64_t *)&unk_1ED4BB270, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F2424(char a1)
{
  return sub_1B20F20D8(a1, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F2448(char a1)
{
  return sub_1B20F2200(a1, (unint64_t *)&unk_1ED4B9660, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F246C(char a1)
{
  return sub_1B20F20D8(a1, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F2490(char a1)
{
  return sub_1B20F2200(a1, &qword_1ED4B9648, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t))sub_1B20D41E8);
}

unint64_t sub_1B20F24B4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _QWORD v6[5];
  char v7;

  v3 = *(_QWORD *)(v1 + 8);
  result = sub_1B1A10AA4(*(_QWORD *)(v3 + 40), (uint64_t)&type metadata for TextureCPURuntime, v6);
  if (LOBYTE(v6[0]) == 1)
  {
    v6[0] = &type metadata for TextureCPURuntime;
    v6[1] = &off_1E638FF20;
    v7 = 1;
    MEMORY[0x1E0C80A78](result, v5);
    swift_retain();
    sub_1B1F05610(a1 & 1, v3, (uint64_t (*)(uint64_t))sub_1B20D41E8);
    sub_1B1B68F14((uint64_t)v6);
    return swift_release();
  }
  return result;
}

unint64_t sub_1B20F25AC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _QWORD v6[5];
  char v7;

  v3 = *(_QWORD *)(v1 + 8);
  result = sub_1B1A10AA4(*(_QWORD *)(v3 + 40), (uint64_t)&type metadata for TextureGPURuntime, v6);
  if (LOBYTE(v6[0]) == 1)
  {
    v6[0] = &type metadata for TextureGPURuntime;
    v6[1] = &off_1E6390060;
    v7 = 1;
    MEMORY[0x1E0C80A78](result, v5);
    swift_retain();
    sub_1B1F05610(a1 & 1, v3, (uint64_t (*)(uint64_t))sub_1B20D41E8);
    sub_1B1B68F14((uint64_t)v6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B20F26A4(unint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;

  v5 = HIDWORD(a1);
  if ((_DWORD)a1 != -1 || (v6 = 0, HIDWORD(a1)))
  {
    if (!sub_1B1FD568C((uint64_t)&type metadata for Tombstone, (uint64_t)&off_1E63C5608, a1))
    {
      if ((uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
        && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
      {
        v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        if ((_DWORD)v5 == -1 || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == (_DWORD)v5)
        {
          v11 = sub_1B1D1E5C0(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32));
          if (v11 != 1)
          {
            v6 = v11;
            *a2 = 0;
            return v6;
          }
        }
      }
      if ((sub_1B1DA4E70(a1) & 1) != 0)
      {
        sub_1B1FDF258(a1, v2);
        v8 = sub_1B1D1536C(a1);
        if (HIBYTE(v8) != 2 && (v8 & 0xFF00) == 0x100)
          sub_1B1FE16DC((uint64_t)&type metadata for TextureLoadRequestGPU, (uint64_t)&off_1E63A6CD8, a1);
        v9 = sub_1B1D1536C(a1);
        if (HIBYTE(v9) != 2)
        {
          *a2 = 1;
          if (*(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
            __asm { BR              X10 }
        }
      }
    }
    return 0;
  }
  return v6;
}

void sub_1B20F2878()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  swift_retain();
  sub_1B1FAE1A4(0xD000000000000015, 0x80000001B233FDE0, v1, v0);
  swift_release();
  JUMPOUT(0x1B20F281CLL);
}

void sub_1B20F28AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  swift_retain();
  sub_1B1FAE1B0(0x47746C7561666544, 0xEE00786554796572, v1, v0);
  JUMPOUT(0x1B20F28E4);
}

uint64_t sub_1B20F28F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  switch(a1)
  {
    case 0:
      v2 = *(_QWORD *)(v1 + 240);
      swift_retain();
      v3 = sub_1B1FAE700(0xD000000000000015, 0x80000001B234C7B0, v2, v1);
      goto LABEL_6;
    case 2:
      v5 = *(_QWORD *)(v1 + 240);
      swift_retain();
      v3 = sub_1B1FAE1A4(0xD000000000000015, 0x80000001B233FDE0, v5, v1);
      goto LABEL_6;
    case 5:
      v6 = *(_QWORD *)(v1 + 240);
      swift_retain();
      v3 = sub_1B1FAE718(0xD000000000000017, 0x80000001B234C770, v6, v1);
      goto LABEL_6;
    case 7:
      v4 = *(_QWORD *)(v1 + 240);
      swift_retain();
      v3 = sub_1B1FAE70C(0xD000000000000015, 0x80000001B234C790, v4, v1);
LABEL_6:
      v7 = (uint64_t)v3;
      swift_release();
      result = v7;
      break;
    default:
      sub_1B2229430();
      sub_1B2228890();
      type metadata accessor for MTLTextureType(0);
      sub_1B22295EC();
      result = sub_1B2229688();
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1B20F2ABC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B20F2B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5[13] = a1;
  v5[14] = a2;
  v5[15] = a3;
  v5[16] = a4;
  v10 = sub_1B20F9F48();
  v12 = v11;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v5[19] = v10;
  v5[20] = v12;
  return result;
}

BOOL sub_1B20F2C10(void *a1)
{
  unsigned __int16 *v1;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v3 = (id)*v1;
  if (objc_msgSend(a1, sel_width) != v3)
    return 0;
  v4 = (id)v1[1];
  if (objc_msgSend(a1, sel_height) != v4)
    return 0;
  v5 = *((unsigned __int8 *)v1 + 8);
  if ((uint64_t)objc_msgSend(a1, sel_mipmapLevelCount) < v5)
    return 0;
  v6 = (id)*((_QWORD *)v1 + 2);
  if (v6 != objc_msgSend(a1, sel_pixelFormat))
    return 0;
  v7 = (id)*((_QWORD *)v1 + 3);
  if (v7 != objc_msgSend(a1, sel_textureType))
    return 0;
  v8 = (id)v1[3];
  if (objc_msgSend(a1, sel_arrayLength) != v8)
    return 0;
  v9 = (id)*((_QWORD *)v1 + 4);
  return v9 == objc_msgSend(a1, sel_storageMode);
}

uint64_t sub_1B20F2D04(__n128 a1)
{
  return sub_1B20F2E24(2, a1);
}

uint64_t sub_1B20F2D4C(__n128 a1)
{
  return sub_1B20F2E24(3, a1);
}

uint64_t sub_1B20F2D94(__n128 a1)
{
  return sub_1B20F2E24(0, a1);
}

uint64_t sub_1B20F2DDC(__n128 a1)
{
  return sub_1B20F2E24(1, a1);
}

uint64_t sub_1B20F2E24(char a1, __n128 a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  int32x4_t v6;
  uint64_t v7;
  id v8;
  id v9;
  char v10;
  int32x4_t v12;
  __int128 v14;
  uint64_t (*v15)(__int128 *, __n128);
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *(id *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  if (objc_msgSend(*(id *)v2, sel_storageMode) == (id)2)
  {
    v7 = 0;
  }
  else
  {
    v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v9 = v4;
    v7 = (uint64_t)v8 + v5;
  }
  v6.i32[0] = *(unsigned __int16 *)(v2 + 32);
  v6.i32[1] = *(unsigned __int16 *)(v2 + 34);
  v6.i32[2] = *(unsigned __int16 *)(v2 + 36);
  v12 = v6;
  v10 = sub_1B1EDF808(*(_QWORD *)(v2 + 48));
  vfx_sampler3d_make(v7, v10, a1, 1, (uint64_t)&v14, v12);
  return v15(&v14, a2);
}

uint64_t sub_1B20F2F40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  unint64_t v25;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 8);
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for TextureRequireCPURepresentation, &v24);
  v5 = v24;
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for TextureRequireGPURepresentation, &v24);
  if ((_BYTE)v24)
    v5 |= 2uLL;
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for TextureRequireNonSRGB, &v24);
  if ((_BYTE)v24)
    v5 |= 4uLL;
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for TextureRequireUnpremultiply, &v24);
  if ((_BYTE)v24)
    v5 |= 8uLL;
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for TextureRequireCubemap, &v24);
  if ((_BYTE)v24)
    v5 |= 0x10uLL;
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for TextureRequireMipmap, &v24);
  if ((_BYTE)v24)
    v5 |= 0x20uLL;
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for TextureRequireMipmapGeneration, &v24);
  if ((_BYTE)v24)
    v5 |= 0x40uLL;
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for TextureRequirePremultiplyWithLinearAlpha, &v24);
  if ((_BYTE)v24)
    v6 = v5 | 0x80;
  else
    v6 = v5;
  sub_1B1A10AA4(*(_QWORD *)(v4 + 40), (uint64_t)&type metadata for TextureRequireIOSurface, &v24);
  if (v24 == 1)
  {
    v6 |= 0x100uLL;
    v7 = v6 & 0x106;
    if (v7 != v6)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v24 = 0;
      v25 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v24 = 0x20666F20656D6F53;
      v25 = 0xE800000000000000;
      sub_1B20F416C(v6);
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v8 = v24;
      v9 = v25;
      v10 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v24 = 0;
      swift_retain();
      sub_1B1F1AD70(v10, &v24, v8, v9);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v6 = v7;
    }
  }
  v11 = *(_QWORD *)(v2 + 32);
  v12 = sub_1B1A11FDC((uint64_t)&type metadata for TextureRequireSizeLimit);
  if ((v13 & 1) != 0)
  {
    v16 = 0;
    v15 = 0;
    v17 = -2;
  }
  else
  {
    v14 = v12 + 24 * v11;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_BYTE *)(v14 + 16);
  }
  result = sub_1B1A11FDC((uint64_t)&type metadata for TextureRequireAnimationRepresentation);
  if ((v19 & 1) != 0)
  {
    v22 = 0;
    v21 = 0uLL;
    v23 = 768;
  }
  else
  {
    v20 = result + 32 * v11;
    v21 = *(_OWORD *)v20;
    v22 = *(_QWORD *)(v20 + 16);
    v23 = *(unsigned __int8 *)(v20 + 24) | (*(unsigned __int8 *)(v20 + 25) << 8);
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 16) = v16;
  *(_BYTE *)(a1 + 24) = v17;
  *(_OWORD *)(a1 + 32) = v21;
  *(_QWORD *)(a1 + 48) = v22;
  *(_WORD *)(a1 + 56) = v23;
  return result;
}

unint64_t sub_1B20F32E0(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4;

  if ((a3 & 1) != 0)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v4 = 0xD000000000000016;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v4 = 0xD000000000000017;
  }
  sub_1B2228890();
  return v4;
}

unint64_t sub_1B20F3394()
{
  uint64_t v0;

  return sub_1B20F32E0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_1B20F33A0()
{
  unsigned __int16 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *((unsigned __int8 *)v0 + 8);
  if (*((_BYTE *)v0 + 8))
  {
    v2 = 0;
    v3 = 0;
    v4 = *((_QWORD *)v0 + 2);
    v5 = *v0;
    v6 = v0[1];
    v7 = v0[2];
    do
    {
      v8 = v3 + 1;
      v2 += sub_1B1F9D7EC(v5, v6, v7, v3, v4);
      v3 = v8;
    }
    while (v1 != v8);
  }
  else
  {
    v2 = 0;
  }
  v9 = 6;
  switch(*((_QWORD *)v0 + 3))
  {
    case 1:
    case 3:
    case 8:
      v9 = v0[3];
      break;
    case 5:
      return v9 * v2;
    case 6:
      v9 = 6 * v0[3];
      break;
    default:
      v9 = 1;
      break;
  }
  return v9 * v2;
}

uint64_t sub_1B20F3468(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20F34A8 + 4 * byte_1B22BB736[a1]))(0x5465727574786574, 0xEB00000000657079);
}

uint64_t sub_1B20F34A8()
{
  return 0x726F466C65786970;
}

uint64_t sub_1B20F34C8()
{
  return 0x6874646977;
}

uint64_t sub_1B20F34DC()
{
  return 0x746867696568;
}

uint64_t sub_1B20F34F0()
{
  return 0x6874706564;
}

unint64_t sub_1B20F3504()
{
  return 0xD000000000000010;
}

uint64_t sub_1B20F3520()
{
  return 0x6F43656C706D6173;
}

uint64_t sub_1B20F3544()
{
  return 0x6E654C7961727261;
}

uint64_t sub_1B20F3564()
{
  return 0x6567617375;
}

unint64_t sub_1B20F3578()
{
  return 0xD000000000000019;
}

uint64_t sub_1B20F359C()
{
  return 0x656C7A7A697773;
}

uint64_t sub_1B20F35B4()
{
  return 0x4D656761726F7473;
}

uint64_t sub_1B20F35D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20F3614 + 4 * byte_1B22BB742[a1]))(0x5465727574786574, 0xEB00000000657079);
}

uint64_t sub_1B20F3614()
{
  return 0x726F466C65786970;
}

uint64_t sub_1B20F3634()
{
  return 0x6874646977;
}

uint64_t sub_1B20F3648()
{
  return 0x746867696568;
}

uint64_t sub_1B20F365C()
{
  return 0x6874706564;
}

unint64_t sub_1B20F3670()
{
  return 0xD000000000000010;
}

uint64_t sub_1B20F368C()
{
  return 0x6F43656C706D6173;
}

uint64_t sub_1B20F36B0()
{
  return 0x6E654C7961727261;
}

uint64_t sub_1B20F36D0()
{
  return 0x656372756F736572;
}

uint64_t sub_1B20F36F4()
{
  return 0x6567617375;
}

unint64_t sub_1B20F3708()
{
  return 0xD000000000000019;
}

uint64_t sub_1B20F372C()
{
  return 0x656C7A7A697773;
}

uint64_t sub_1B20F3744()
{
  return 0x4D656761726F7473;
}

uint64_t sub_1B20F3764(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20F37A4 + 4 * byte_1B22BB74F[a1]))(0x5465727574786574, 0xEB00000000657079);
}

uint64_t sub_1B20F37A4()
{
  return 0x726F466C65786970;
}

uint64_t sub_1B20F37C4()
{
  return 0x6874646977;
}

uint64_t sub_1B20F37D8()
{
  return 0x746867696568;
}

uint64_t sub_1B20F37EC()
{
  return 0x6874706564;
}

unint64_t sub_1B20F3800()
{
  return 0xD000000000000010;
}

uint64_t sub_1B20F381C()
{
  return 0x6F43656C706D6173;
}

uint64_t sub_1B20F3840()
{
  return 0x6E654C7961727261;
}

uint64_t sub_1B20F3860()
{
  return 0x656372756F736572;
}

uint64_t sub_1B20F3884()
{
  return 0x6567617375;
}

unint64_t sub_1B20F3898()
{
  return 0xD000000000000019;
}

uint64_t sub_1B20F38BC()
{
  return 0x656C7A7A697773;
}

uint64_t sub_1B20F38D4()
{
  return 0x4D656761726F7473;
}

uint64_t sub_1B20F38F4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B453F0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B20F3468);
}

uint64_t sub_1B20F3900()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F394C()
{
  return sub_1B222A078();
}

uint64_t sub_1B20F3980()
{
  sub_1B222A06C();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F39C8@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1B210B4EC(*a1);
  *a2 = result;
  return result;
}

void sub_1B20F39F0(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1B22BE8D8[*v1];
}

uint64_t sub_1B20F3A08()
{
  unsigned __int8 *v0;

  return sub_1B20F3468(*v0);
}

uint64_t sub_1B20F3A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B210AE28(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B20F3A34()
{
  char *v0;

  return qword_1B22BE8D8[*v0];
}

uint64_t sub_1B20F3A4C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1B210B4EC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B20F3A70()
{
  sub_1B2117688();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F3A98()
{
  sub_1B2117688();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F3AC0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B453F0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B20F3764);
}

uint64_t sub_1B20F3ACC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B20F35D4(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F3B2C()
{
  unsigned __int8 *v0;

  sub_1B20F35D4(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20F3B6C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B20F35D4(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F3BC8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B210B320();
  *a1 = result;
  return result;
}

uint64_t sub_1B20F3BF4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B20F35D4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B20F3C1C()
{
  unsigned __int8 *v0;

  return sub_1B20F3764(*v0);
}

uint64_t sub_1B20F3C24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B210B320();
  *a1 = result;
  return result;
}

uint64_t sub_1B20F3C48()
{
  sub_1B21176CC();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F3C70()
{
  sub_1B21176CC();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F3C98(_QWORD *a1)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;

  v2 = v1;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF63890, (uint64_t (*)(void))sub_1B2117688, (uint64_t)&type metadata for TextureDescriptorCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v16 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2117688();
  sub_1B222A180();
  v23 = *v2;
  v22 = v2[1];
  v21 = v2[2];
  v18 = v2[3];
  v20 = *((unsigned __int8 *)v2 + 8);
  v19 = *((unsigned __int8 *)v2 + 9);
  v27 = *((_BYTE *)v2 + 10);
  v10 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 4);
  v11 = *((_QWORD *)v2 + 5);
  v13 = *((_DWORD *)v2 + 18);
  v25 = *((_QWORD *)v2 + 3);
  v28 = 0;
  type metadata accessor for MTLTextureType(0);
  sub_1B19E52CC(&qword_1EEF616A8, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureType, (uint64_t)&protocol conformance descriptor for MTLTextureType);
  v14 = v24;
  sub_1B2229958();
  if (v14)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v16 = v12;
  v17 = v11;
  v26 = v13;
  v24 = v6;
  v25 = v10;
  v28 = 1;
  type metadata accessor for MTLPixelFormat(0);
  sub_1B19E52CC(&qword_1EEF638A0, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t)&protocol conformance descriptor for MTLPixelFormat);
  sub_1B2229958();
  LOBYTE(v25) = 2;
  sub_1B2229940();
  LOBYTE(v25) = 3;
  sub_1B2229940();
  LOBYTE(v25) = 4;
  sub_1B2229940();
  LOBYTE(v25) = 5;
  sub_1B2229940();
  LOBYTE(v25) = 6;
  sub_1B2229940();
  LOBYTE(v25) = 7;
  sub_1B2229940();
  v25 = v17;
  v28 = 8;
  type metadata accessor for MTLTextureUsage(0);
  sub_1B19E52CC(&qword_1EEF638A8, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&protocol conformance descriptor for MTLTextureUsage);
  sub_1B2229958();
  LOBYTE(v25) = 9;
  sub_1B222991C();
  LODWORD(v25) = v26;
  v28 = 10;
  type metadata accessor for MTLTextureSwizzleChannels(0);
  sub_1B19E52CC(&qword_1EEF638B0, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureSwizzleChannels, (uint64_t)&protocol conformance descriptor for MTLTextureSwizzleChannels);
  sub_1B2229958();
  if (v16 >= 0x100)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    LOBYTE(v25) = 11;
    sub_1B2229994();
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v9, v5);
  }
  return result;
}

__n128 sub_1B20F4110@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_1B2111C94(a1, v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B20F4158(_QWORD *a1)
{
  return sub_1B20F3C98(a1);
}

uint64_t sub_1B20F416C(__int16 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a1 & 1) != 0)
  {
    sub_1B2228890();
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1B2228890();
  if ((a1 & 4) != 0)
LABEL_4:
    sub_1B2228890();
LABEL_5:
  if ((a1 & 8) != 0)
  {
    sub_1B2228890();
    if ((a1 & 0x10) == 0)
    {
LABEL_7:
      if ((a1 & 0x20) == 0)
        goto LABEL_8;
      goto LABEL_18;
    }
  }
  else if ((a1 & 0x10) == 0)
  {
    goto LABEL_7;
  }
  sub_1B2228890();
  if ((a1 & 0x20) == 0)
  {
LABEL_8:
    if ((a1 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  sub_1B2228890();
  if ((a1 & 0x40) == 0)
  {
LABEL_9:
    if ((a1 & 0x80) == 0)
      goto LABEL_10;
LABEL_20:
    sub_1B2228890();
    if ((a1 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_19:
  sub_1B2228890();
  if ((a1 & 0x80) != 0)
    goto LABEL_20;
LABEL_10:
  if ((a1 & 0x100) != 0)
LABEL_11:
    sub_1B2228890();
LABEL_12:
  v2 = sub_1B214E3E8();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = MEMORY[0x1B5E20388](v2, v4, v6, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B20F437C()
{
  _QWORD *v0;

  return sub_1B20F416C(*v0);
}

uint64_t sub_1B20F4384()
{
  sub_1B2117D58();
  return sub_1B2228A58();
}

uint64_t sub_1B20F43E0()
{
  sub_1B2117D58();
  return sub_1B22289E0();
}

uint64_t sub_1B20F442C()
{
  uint64_t v0;
  int v1;

  v1 = *(char *)(v0 + 16);
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  if ((v1 & 0x80000000) == 0)
    sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F44D0()
{
  uint64_t v0;

  if (*(char *)(v0 + 16) < 0)
  {
    sub_1B222A078();
    sub_1B222A078();
    return sub_1B222A078();
  }
  else
  {
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A078();
    return sub_1B222A084();
  }
}

uint64_t sub_1B20F4544()
{
  uint64_t v0;
  int v1;

  v1 = *(char *)(v0 + 16);
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  if ((v1 & 0x80000000) == 0)
    sub_1B222A084();
  return sub_1B222A0C0();
}

BOOL sub_1B20F45E4(uint64_t a1, uint64_t a2)
{
  return sub_1B210A1B0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

char *sub_1B20F4600()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  ValueMetadata *v11;
  _UNKNOWN **v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[32];
  _BYTE v46[24];
  __int128 v47;
  unsigned __int8 v48;
  __int128 v49;
  char v50[16];
  char v51;
  _BYTE v52[32];

  sub_1B1B1F358();
  v42 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v41 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1B222820C();
  v39 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v4);
  v38 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)MEMORY[0x1E0DEE9D8];
  v7 = 0x20u;
  v34 = v0;
  v8 = *v0;
  v37 = xmmword_1B226D240;
  v36 = 0x80000001B234C7D0;
  v35 = v8;
  do
  {
    v10 = *(_QWORD *)((char *)&unk_1E6382418 + v7);
    if ((v10 & ~v8) == 0)
    {
      v11 = &type metadata for TextureRequireCPURepresentation;
      v12 = &off_1E63B6350;
      switch(v10)
      {
        case 1:
          break;
        case 2:
          v11 = &type metadata for TextureRequireGPURepresentation;
          v12 = &off_1E63B6428;
          break;
        case 3:
        case 5:
        case 6:
        case 7:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
          goto LABEL_10;
        case 4:
          v11 = &type metadata for TextureRequireNonSRGB;
          v12 = &off_1E63A70E8;
          break;
        case 8:
          v11 = &type metadata for TextureRequireUnpremultiply;
          v12 = &off_1E63B3A50;
          break;
        case 16:
          v11 = &type metadata for TextureRequireCubemap;
          v12 = &off_1E63A7010;
          break;
        case 32:
          v11 = &type metadata for TextureRequireMipmap;
          v12 = &off_1E639F630;
          break;
        case 64:
          v11 = &type metadata for TextureRequireMipmapGeneration;
          v12 = &off_1E63B5F20;
          break;
        default:
          if (v10 == 128)
          {
            v11 = &type metadata for TextureRequirePremultiplyWithLinearAlpha;
            v12 = &off_1E63B92C0;
          }
          else if (v10 == 256)
          {
            v11 = &type metadata for TextureRequireIOSurface;
            v12 = &off_1E63ACCF8;
          }
          else
          {
LABEL_10:
            if (qword_1ED4BF430 != -1)
              swift_once();
            v44 = qword_1ED4D0FB0;
            swift_retain();
            v13 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v14 = qword_1ED4D0FD0;
            v15 = qword_1ED4BF688;
            swift_retain();
            if (v15 != -1)
              swift_once();
            sub_1B1D11FE4(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v16 = swift_allocObject();
            *(_OWORD *)(v16 + 16) = v37;
            *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v16 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v16 + 32) = 0xD000000000000016;
            v17 = v36;
            *(_QWORD *)(v16 + 40) = v36;
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v43 = v14;
            v18 = v38;
            sub_1B2228200();
            v19 = v42[12];
            v20 = v42[16];
            v21 = (uint64_t)v41;
            v22 = &v41[v42[20]];
            (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v41, v18, v40);
            *(_BYTE *)(v21 + v19) = v13;
            *(_QWORD *)(v21 + v20) = 0;
            *(_QWORD *)v22 = 0xD000000000000016;
            *((_QWORD *)v22 + 1) = v17;
            sub_1B2228428();
            swift_release();
            sub_1B1A04628(v21, (uint64_t (*)(_QWORD))sub_1B1B1F358);
            swift_release();
            swift_release();
            v11 = &type metadata for NullEntityComponent;
            v12 = &off_1E63984B0;
            v8 = v35;
          }
          break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1B1C62F18(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v24 = *((_QWORD *)v6 + 2);
      v23 = *((_QWORD *)v6 + 3);
      if (v24 >= v23 >> 1)
        v6 = sub_1B1C62F18(v23 > 1, v24 + 1, 1, v6);
      *((_QWORD *)v6 + 2) = v24 + 1;
      v9 = &v6[16 * v24];
      *((_QWORD *)v9 + 4) = v11;
      *((_QWORD *)v9 + 5) = v12;
    }
    v7 += 8;
  }
  while (v7 != 104);
  v25 = v34;
  sub_1B1A18378((uint64_t)(v34 + 1), (uint64_t)v46, (unint64_t *)&unk_1ED4B7838, (uint64_t)&type metadata for TextureOptions.SizeModification);
  sub_1B1A18378((uint64_t)v46, (uint64_t)&v47, (unint64_t *)&unk_1ED4B7838, (uint64_t)&type metadata for TextureOptions.SizeModification);
  if (v48 <= 0xFDu)
  {
    sub_1B2114470(&v47, (uint64_t)&v49);
    sub_1B2114470(&v49, (uint64_t)v50);
    if (v51 < 0)
    {
      v51 &= ~0x80u;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1B1C62F18(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v27 = *((_QWORD *)v6 + 2);
      v26 = *((_QWORD *)v6 + 3);
      if (v27 >= v26 >> 1)
        v6 = sub_1B1C62F18(v26 > 1, v27 + 1, 1, v6);
      *((_QWORD *)v6 + 2) = v27 + 1;
      v28 = &v6[16 * v27];
      *((_QWORD *)v28 + 4) = &type metadata for TextureRequireSizeLimit;
      *((_QWORD *)v28 + 5) = &off_1E63ACEF8;
    }
  }
  sub_1B1A18378((uint64_t)(v25 + 4), (uint64_t)v45, &qword_1ED4B7940, (uint64_t)&type metadata for TextureRequireAnimationRepresentation);
  sub_1B1A18378((uint64_t)v45, (uint64_t)v52, &qword_1ED4B7940, (uint64_t)&type metadata for TextureRequireAnimationRepresentation);
  if (v52[25] << 8 != 768)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_1B1C62F18(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
    v30 = *((_QWORD *)v6 + 2);
    v29 = *((_QWORD *)v6 + 3);
    if (v30 >= v29 >> 1)
      v6 = sub_1B1C62F18(v29 > 1, v30 + 1, 1, v6);
    *((_QWORD *)v6 + 2) = v30 + 1;
    v31 = &v6[16 * v30];
    *((_QWORD *)v31 + 4) = &type metadata for TextureRequireAnimationRepresentation;
    *((_QWORD *)v31 + 5) = &off_1E63B88B8;
  }
  return v6;
}

_QWORD *sub_1B20F4C64@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t sub_1B20F4C78()
{
  return 0;
}

uint64_t sub_1B20F4C84@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = result != 0;
  return result;
}

uint64_t sub_1B20F4C94()
{
  sub_1B2117578();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F4CBC()
{
  sub_1B2117578();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F4CE4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v2 = v1;
  sub_1B19F8E54(0, &qword_1EEF63830, (uint64_t (*)(void))sub_1B2117578, (uint64_t)&type metadata for TextureOptions.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2117578();
  sub_1B222A180();
  v11[1] = *v2;
  sub_1B2117600();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B20F4DFC()
{
  uint64_t v0;
  unsigned int v1;
  __int16 v2;

  sub_1B222A06C();
  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_1B222A078();
  if (v1 >= 0xFE || (sub_1B222A084(), sub_1B222A078(), sub_1B222A078(), sub_1B222A078(), (v1 & 0x80) == 0))
    sub_1B222A084();
  v2 = *(_WORD *)(v0 + 56);
  if ((v2 & 0xFF00) != 0x300)
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    if ((v2 & 1) == 0)
      sub_1B222A078();
  }
  sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F4F58()
{
  uint64_t v0;
  unsigned int v1;
  __int16 v2;

  v1 = *(unsigned __int8 *)(v0 + 24);
  v2 = *(_WORD *)(v0 + 56);
  sub_1B222A078();
  if (v1 >= 0xFE || (sub_1B222A084(), sub_1B222A078(), sub_1B222A078(), sub_1B222A078(), (v1 & 0x80) == 0))
    sub_1B222A084();
  if ((v2 & 0xFF00) != 0x300)
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    if ((v2 & 1) == 0)
      sub_1B222A078();
  }
  return sub_1B222A084();
}

uint64_t sub_1B20F5064()
{
  uint64_t v0;
  unsigned int v1;
  __int16 v2;

  v1 = *(unsigned __int8 *)(v0 + 24);
  v2 = *(_WORD *)(v0 + 56);
  sub_1B222A06C();
  sub_1B222A078();
  if (v1 >= 0xFE || (sub_1B222A084(), sub_1B222A078(), sub_1B222A078(), sub_1B222A078(), (v1 & 0x80) == 0))
    sub_1B222A084();
  if ((v2 & 0xFF00) != 0x300)
  {
    sub_1B222A084();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    if ((v2 & 1) == 0)
      sub_1B222A078();
  }
  sub_1B222A084();
  return sub_1B222A0C0();
}

double sub_1B20F51C8@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_1B210FA58(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 42) = *(_OWORD *)((char *)v7 + 10);
  }
  return result;
}

uint64_t sub_1B20F5210(_QWORD *a1)
{
  return sub_1B20F4CE4(a1);
}

BOOL sub_1B20F5224(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)a1 + 42);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 10) = *(_OWORD *)((char *)a2 + 42);
  return sub_1B210A098((uint64_t)v5, (uint64_t)v7);
}

uint64_t sub_1B20F527C()
{
  sub_1B2117710();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F52A4()
{
  sub_1B2117710();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F52CC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF638B8, (uint64_t (*)(void))sub_1B2117710, (uint64_t)&type metadata for TextureSource.CodingKeys);
}

uint64_t sub_1B20F52F8(_QWORD *a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  _OWORD v12[2];
  _OWORD v13[2];

  v2 = v1;
  sub_1B19F8E54(0, &qword_1EEF63690, (uint64_t (*)(void))sub_1B2116028, (uint64_t)&type metadata for TextureLoadingOptions.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2116028();
  sub_1B222A180();
  v10 = v2[1];
  v12[0] = *v2;
  v12[1] = v10;
  v13[0] = v2[2];
  *(_OWORD *)((char *)v13 + 10) = *(_OWORD *)((char *)v2 + 42);
  sub_1B21160B0();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B20F5424()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_1B20F543C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B20F54D0()
{
  sub_1B2116028();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F54F8()
{
  sub_1B2116028();
  return sub_1B222A1E0();
}

double sub_1B20F5520@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_1B2111B04(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 42) = *(_OWORD *)((char *)v7 + 10);
  }
  return result;
}

uint64_t sub_1B20F5568(_QWORD *a1)
{
  return sub_1B20F52F8(a1);
}

void sub_1B20F557C(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 98;
  *(_BYTE *)(a1 + 24) = -2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 56) = 768;
}

uint64_t sub_1B20F55A4(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;

  sub_1B19F8E54(0, &qword_1EEF63910, (uint64_t (*)(void))sub_1B2117820, (uint64_t)&type metadata for RenderGraphTextureTarget.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2117820();
  sub_1B222A180();
  v12 = a2;
  sub_1B2114598();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B20F56B8()
{
  return 0x6B6361626C6C6166;
}

uint64_t sub_1B20F56D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6B6361626C6C6166 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B20F5764()
{
  sub_1B2117820();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F578C()
{
  sub_1B2117820();
  return sub_1B222A1E0();
}

unint64_t sub_1B20F57B4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1B21126F8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B20F57DC(_QWORD *a1)
{
  char *v1;

  return sub_1B20F55A4(a1, *v1);
}

uint64_t sub_1B20F57F4()
{
  return sub_1B1BB8F94();
}

uint64_t sub_1B20F5814()
{
  return sub_1B2228824();
}

uint64_t sub_1B20F5834()
{
  return sub_1B1BB8FE0();
}

uint64_t sub_1B20F5854@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB9034(a1);
}

void sub_1B20F5860(_QWORD *a1@<X8>)
{
  *a1 = 0x6F4370616D70696DLL;
  a1[1] = 0xEB00000000746E75;
}

uint64_t sub_1B20F5884()
{
  return 0x6F4370616D70696DLL;
}

uint64_t sub_1B20F58A4@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB908C(a1);
}

uint64_t sub_1B20F58B0()
{
  sub_1B21177DC();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F58D8()
{
  sub_1B21177DC();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F5900@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v16 = a2;
  sub_1B19F8E54(0, &qword_1EEF638F0, (uint64_t (*)(void))sub_1B21177DC, (uint64_t)&type metadata for TextureRequireMipmap.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v15 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21177DC();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v16;
  v11 = sub_1B22297A8();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)v10 = v11;
  *(_BYTE *)(v10 + 8) = v13 & 1;
  return result;
}

uint64_t sub_1B20F5A4C(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[16];

  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF63930, (uint64_t (*)(void))sub_1B2117864, (uint64_t)&type metadata for TextureRequireMask.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v12[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B2117864();
  sub_1B222A180();
  v12[15] = a2;
  v12[14] = 0;
  sub_1B1A70ED0();
  sub_1B2229958();
  if (!v2)
  {
    v12[13] = 1;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B20F5BA0(char *a1, char *a2)
{
  return sub_1B1F93A6C(*a1, *a2);
}

uint64_t sub_1B20F5BAC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6F687365726874;
  else
    return 0x6C656E6E616863;
}

uint64_t sub_1B20F5BEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B210AD2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B20F5C10()
{
  sub_1B2117864();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F5C38()
{
  sub_1B2117864();
  return sub_1B222A1E0();
}

void sub_1B20F5C60(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  float v5;

  v5 = sub_1B21105C4(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = v4;
    *(float *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B20F5C8C(_QWORD *a1)
{
  char *v1;

  return sub_1B20F5A4C(a1, *v1);
}

void sub_1B20F5CA8(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 3;
  *(_DWORD *)(a1 + 4) = 0;
}

void sub_1B20F5CB8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E637FA88;
}

uint64_t sub_1B20F5CC8()
{
  sub_1B21174F0();
  return sub_1B2228A70();
}

uint64_t sub_1B20F5D24()
{
  sub_1B21174F0();
  return sub_1B22289F8();
}

void sub_1B20F5D70(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6385D10;
}

uint64_t sub_1B20F5D80()
{
  sub_1B2117534();
  return sub_1B2228A70();
}

uint64_t sub_1B20F5DDC()
{
  sub_1B2117534();
  return sub_1B22289F8();
}

double sub_1B20F5E28@<D0>(_DWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 16842752;
  *a1 = 16842752;
  return result;
}

void sub_1B20F5E38(char *a1)
{
  sub_1B1F9311C(*a1);
}

void sub_1B20F5E44()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B20F5E88()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B20F5F1C()
{
  __asm { BR              X10 }
}

uint64_t sub_1B20F5F50()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B20F5FD0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B20F6010()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F60A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A50();
  *a1 = result;
  return result;
}

uint64_t sub_1B20F60D8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B20F6100 + 4 * byte_1B22BB7AB[*v0]))();
}

void sub_1B20F6100(_QWORD *a1@<X8>)
{
  *a1 = 0x65646F4D757063;
  a1[1] = 0xE700000000000000;
}

void sub_1B20F611C(_QWORD *a1@<X8>)
{
  *a1 = 0x65646F4D757067;
  a1[1] = 0xE700000000000000;
}

void sub_1B20F613C(_QWORD *a1@<X8>)
{
  *a1 = 0x6B6361626C6C6166;
  a1[1] = 0xE800000000000000;
}

void sub_1B20F6158(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "asynchronous");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1B20F617C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20F61A4 + 4 * byte_1B22BB7B0[*v0]))(1701080941, 0xE400000000000000);
}

uint64_t sub_1B20F61A4()
{
  return 0x65646F4D757063;
}

uint64_t sub_1B20F61BC()
{
  return 0x65646F4D757067;
}

uint64_t sub_1B20F61D8()
{
  return 0x6B6361626C6C6166;
}

uint64_t sub_1B20F61F0()
{
  return 0x6F7268636E797361;
}

uint64_t sub_1B20F6210@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A50();
  *a1 = result;
  return result;
}

uint64_t sub_1B20F623C()
{
  sub_1B2114488();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F6264()
{
  sub_1B2114488();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F628C(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  sub_1B19F8E54(0, &qword_1EEF63528, (uint64_t (*)(void))sub_1B2114488, (uint64_t)&type metadata for TextureLoadPolicy.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2114488();
  sub_1B222A180();
  v19 = a2;
  v18 = 1;
  sub_1B2114554();
  sub_1B2229958();
  if (!v2)
  {
    v17 = BYTE1(a2);
    v16 = 2;
    sub_1B2229958();
    v15 = BYTE2(a2);
    v14 = 3;
    sub_1B2114598();
    sub_1B2229958();
    v13 = 4;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B20F6454@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B2110338(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result) & 1;
  }
  return result;
}

uint64_t sub_1B20F6494(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;

  if (v1[3])
    v2 = 0x1000000;
  else
    v2 = 0;
  return sub_1B20F628C(a1, v2 | (v1[2] << 16) | (v1[1] << 8) | *v1);
}

uint64_t sub_1B20F64D0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];
  int v14;
  char v15;
  char v16;
  char v17;

  v14 = a4;
  v13[1] = a3;
  sub_1B19F8E54(0, &qword_1EEF638E8, (uint64_t (*)(void))sub_1B2117798, (uint64_t)&type metadata for TextureRequireSizeLimit.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2117798();
  sub_1B222A180();
  v17 = 0;
  sub_1B2229940();
  if (!v4)
  {
    v16 = 1;
    sub_1B2229940();
    v15 = 2;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B20F6638(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F97084(*a1, *a2);
}

uint64_t sub_1B20F6644()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x686769654878616DLL;
  if (*v0 != 1)
    v1 = 0x657073417065656BLL;
  if (*v0)
    return v1;
  else
    return 0x687464695778616DLL;
}

uint64_t sub_1B20F66B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B210B368(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B20F66D4()
{
  sub_1B2117798();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F66FC()
{
  sub_1B2117798();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F6724@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1B2112560(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_1B20F6754(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B20F64D0(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

int64x2_t sub_1B20F6770@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(0x400uLL);
  *a1 = result;
  a1[1].i8[0] = 1;
  return result;
}

uint64_t sub_1B20F6788()
{
  sub_1B2117754();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F67B0()
{
  sub_1B2117754();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F67D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF638C8, (uint64_t (*)(void))sub_1B2117754, (uint64_t)&type metadata for TextureGPURepresentationDoNotUpload.CodingKeys);
}

uint64_t sub_1B20F6804()
{
  sub_1B2117644();
  return sub_1B2228A7C();
}

uint64_t sub_1B20F6860()
{
  sub_1B2117644();
  return sub_1B2228A04();
}

void sub_1B20F68AC(char *a1)
{
  sub_1B1F98E50(*a1);
}

void sub_1B20F68B8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B20F6908()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B20F6994()
{
  __asm { BR              X10 }
}

uint64_t sub_1B20F69D4()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B20F6A4C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B20F6A98()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F6B24@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A50();
  *a1 = result;
  return result;
}

uint64_t sub_1B20F6B58()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B20F6B8C + 4 * byte_1B22BB7C4[*v0]))();
}

void sub_1B20F6B8C(_QWORD *a1@<X8>)
{
  *a1 = 0x726550656D617266;
  a1[1] = 0xEB00000000776F52;
}

void sub_1B20F6BB0(char *a1@<X8>)
{
  strcpy(a1, "framePerColumn");
  a1[15] = -18;
}

void sub_1B20F6BD8(_QWORD *a1@<X8>)
{
  *a1 = 1684957547;
  a1[1] = 0xE400000000000000;
}

void sub_1B20F6BEC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "useTexture3D");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1B20F6C10()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20F6C44 + 4 * byte_1B22BB7C9[*v0]))(0x756F43656D617266, 0xEA0000000000746ELL);
}

uint64_t sub_1B20F6C44()
{
  return 0x726550656D617266;
}

uint64_t sub_1B20F6C78()
{
  return 1684957547;
}

uint64_t sub_1B20F6C88()
{
  return 0x7574786554657375;
}

uint64_t sub_1B20F6CA8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A50();
  *a1 = result;
  return result;
}

uint64_t sub_1B20F6CD4()
{
  sub_1B21160F4();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F6CFC()
{
  sub_1B21160F4();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F6D24(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[5];
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  v16[2] = a2;
  v16[1] = a3;
  sub_1B19F8E54(0, &qword_1EEF636A8, (uint64_t (*)(void))sub_1B21160F4, (uint64_t)&type metadata for TextureRequireAnimationRepresentation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)v16 - v12;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21160F4();
  sub_1B222A180();
  v16[4] = a4;
  v17 = a5 & 1;
  v22 = 0;
  sub_1B1A02758(0, &qword_1ED4BA580, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1CDB03C(&qword_1EEF636B0, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEE988]);
  v14 = v16[3];
  sub_1B2229958();
  if (!v14)
  {
    v21 = 1;
    sub_1B2229940();
    v20 = 2;
    sub_1B2229940();
    v19 = HIBYTE(a5);
    v18 = 3;
    sub_1B211617C();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1B20F6F20()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  if (v1 != 1)
    sub_1B222A078();
  sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F6FC4()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  if (v1 != 1)
    sub_1B222A078();
  return sub_1B222A084();
}

uint64_t sub_1B20F703C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  if (v1 != 1)
    sub_1B222A078();
  sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F70DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  result = sub_1B2112848(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
    *(_BYTE *)(a2 + 25) = HIBYTE(v7);
  }
  return result;
}

uint64_t sub_1B20F7118(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B20F6D24(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 25) << 8));
}

BOOL sub_1B20F7148(uint64_t a1, uint64_t a2)
{
  return sub_1B210A388(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 25) << 8), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(unsigned __int8 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 25) << 8));
}

int64x2_t sub_1B20F7184@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(8uLL);
  *a1 = result;
  a1[1].i64[0] = 0;
  a1[1].i16[4] = 1;
  return result;
}

uint64_t sub_1B20F720C()
{
  return type metadata accessor for BundleResolver(0);
}

uint64_t type metadata accessor for BundleResolver(uint64_t a1)
{
  return sub_1B17925E0(a1, qword_1ED4B89B8);
}

uint64_t sub_1B20F7228()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2228110();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1B20F7294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v4 = sub_1B2228008();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = a1;
  v11[1] = a2;
  (*(void (**)(char *, _QWORD, uint64_t, double))(v5 + 104))(v9, *MEMORY[0x1E0CAFD68], v4, v7);
  sub_1B1A06460();
  sub_1B2228104();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_1B20F73E8()
{
  return type metadata accessor for AbsolutePathStorage(0);
}

uint64_t type metadata accessor for AbsolutePathStorage(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1ED4BB340);
}

uint64_t sub_1B20F7404()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2228110();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1B20F7478@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC3VFX19AbsolutePathStorage_absoluteURL;
  v4 = sub_1B2228110();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1B20F74BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, uint64_t);
  objc_class *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  Class v41;
  objc_class *v42;
  id v43;
  void (*v44)(char *, uint64_t);
  uint64_t result;
  uint64_t v46;
  Class v47;
  __int128 v48;
  objc_super v49;
  objc_super v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v3 = v2;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v46 - v8;
  v10 = sub_1B2228110();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v46 - v17;
  v53 = a1;
  v54 = a2;
  v51 = 47;
  v52 = 0xE100000000000000;
  sub_1B1A06460();
  if ((sub_1B2229274() & 1) == 0)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v2[2] = a1;
    v2[3] = a2;
    v19 = (void *)v2[4];
    if (v19)
    {
      type metadata accessor for AbsolutePathStorage(0);
      v20 = swift_dynamicCastClass();
      if (v20)
      {
        v48 = *(_OWORD *)(v20 + OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver);
        v21 = (id)v48;

        *((_OWORD *)v3 + 2) = v48;
      }
    }
    goto LABEL_12;
  }
  sub_1B22280EC();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1B1AEA224((uint64_t)v9, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
    goto LABEL_4;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v9, v10);
  v22 = sub_1B222805C();
  v24 = v23;
  swift_bridgeObjectRelease();
  v3[2] = v22;
  v3[3] = v24;
  v25 = (void *)v3[4];
  *(_QWORD *)&v48 = v3[5];
  if (v25 && (v47 = (Class)type metadata accessor for AbsolutePathStorage(0), (v26 = swift_dynamicCastClass()) != 0))
  {
    v27 = v26;
    *(_QWORD *)&v48 = *(_QWORD *)(v11 + 16);
    ((void (*)(char *, char *, uint64_t))v48)(v14, v18, v10);
    v28 = *(void **)(v27 + OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver);
    v46 = *(_QWORD *)(v27 + OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver + 8);
    v29 = (char *)objc_allocWithZone(v47);
    ((void (*)(char *, char *, uint64_t))v48)(&v29[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_absoluteURL], v14, v10);
    v30 = &v29[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver];
    v31 = v46;
    *(_QWORD *)v30 = v28;
    *((_QWORD *)v30 + 1) = v31;
    v49.receiver = v29;
    v49.super_class = v47;
    v32 = v25;
    v33 = v28;
    v34 = objc_msgSendSuper2(&v49, sel_init);
    v35 = *(void (**)(char *, uint64_t))(v11 + 8);
    v35(v14, v10);

    v35(v18, v10);
    v3[4] = v34;
  }
  else
  {
    v47 = (Class)v25;
    v36 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v36(v14, v18, v10);
    v37 = (objc_class *)type metadata accessor for AbsolutePathStorage(0);
    v38 = (char *)objc_allocWithZone(v37);
    v36(&v38[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_absoluteURL], v14, v10);
    v39 = &v38[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver];
    v41 = v47;
    v40 = v48;
    *(_QWORD *)v39 = v47;
    *((_QWORD *)v39 + 1) = v40;
    v50.receiver = v38;
    v50.super_class = v37;
    v42 = v41;
    v43 = objc_msgSendSuper2(&v50, sel_init);
    v44 = *(void (**)(char *, uint64_t))(v11 + 8);
    v44(v14, v10);
    v44(v18, v10);

    v3[4] = v43;
  }
  v3[5] = &off_1E6397578;
LABEL_12:
  result = swift_bridgeObjectRelease();
  *v3 = a1;
  v3[1] = a2;
  return result;
}

uint64_t sub_1B20F7868@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[4];

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FA070(v9, v9[3]);
  v5 = sub_1B2229D30();
  v7 = v6;
  swift_bridgeObjectRetain();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v5;
  a2[1] = v7;
  a2[2] = v5;
  a2[3] = v7;
  a2[4] = 0;
  a2[5] = 0;
  return result;
}

uint64_t sub_1B20F7940(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  swift_bridgeObjectRetain();
  sub_1B2229DB4();
  swift_bridgeObjectRelease();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

BOOL sub_1B20F79E4(uint64_t *a1, uint64_t *a2)
{
  return sub_1B210A3D8(a1[2], a1[3], a1[4], a1[5], a2[2], a2[3], a2[4]);
}

uint64_t sub_1B20F7A00(_QWORD *a1)
{
  return sub_1B20F7A14(a1);
}

uint64_t sub_1B20F7A14(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B1BB51BC();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B20F7AD4()
{
  return sub_1B1BB8F94();
}

uint64_t sub_1B20F7AE8()
{
  return sub_1B2228824();
}

uint64_t sub_1B20F7AFC()
{
  return sub_1B1BB8FE0();
}

uint64_t sub_1B20F7B10@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB9034(a1);
}

void sub_1B20F7B1C(_QWORD *a1@<X8>)
{
  *a1 = 0x737465737361;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1B20F7B34()
{
  return 0x737465737361;
}

uint64_t sub_1B20F7B48@<X0>(BOOL *a1@<X8>)
{
  return sub_1B1BB908C(a1);
}

uint64_t sub_1B20F7B54()
{
  sub_1B2115F4C();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F7B7C()
{
  sub_1B2115F4C();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F7BA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[2];

  sub_1B19F8E54(0, &qword_1EEF63670, (uint64_t (*)(void))sub_1B2115F4C, (uint64_t)&type metadata for TextureArrayFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)v11 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2115F4C();
  sub_1B222A180();
  v8 = swift_bridgeObjectRetain();
  v9 = sub_1B1A20F64(v8);
  swift_bridgeObjectRelease();
  v11[1] = v9;
  sub_1B1791524(0, &qword_1EEF596A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B2115F90(&qword_1EEF5EED0, &qword_1EEF62990, MEMORY[0x1E0CB0010], MEMORY[0x1E0DEAF10]);
  sub_1B2229958();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B20F7D20@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B2111938(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B20F7D48(_QWORD *a1)
{
  return sub_1B20F7BA4(a1);
}

BOOL sub_1B20F7D60(_QWORD **a1, _QWORD **a2)
{
  return (sub_1B1CC9D08(*a1, *a2) & 1) == 0;
}

uint64_t sub_1B20F7D84(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];

  sub_1B19F8E54(0, &qword_1EEF63638, (uint64_t (*)(void))sub_1B2115E80, (uint64_t)&type metadata for TextureFileData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2115E80();
  sub_1B222A180();
  v13[0] = a2;
  v13[1] = a3;
  sub_1B2115F08();
  sub_1B2229904();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B20F7EA0()
{
  return 1635017060;
}

uint64_t sub_1B20F7EB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B20F7F34()
{
  sub_1B2115E80();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F7F5C()
{
  sub_1B2115E80();
  return sub_1B222A1E0();
}

_QWORD *sub_1B20F7F84@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1B21101E0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B20F7FAC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B20F7D84(a1, *v1, v1[1]);
}

double sub_1B20F7FC4@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = xmmword_1B2281D30;
  return result;
}

void sub_1B20F7FD4(char *a1)
{
  sub_1B1F93B14(*a1);
}

void sub_1B20F7FE0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B20F8038()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B20F80C4()
{
  __asm { BR              X10 }
}

uint64_t sub_1B20F810C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B20F8184()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B20F81D8()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20F8264@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A50();
  *a1 = result;
  return result;
}

uint64_t sub_1B20F8298()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B20F82D4 + 4 * byte_1B22BB7DD[*v0]))();
}

void sub_1B20F82D4(_QWORD *a1@<X8>)
{
  *a1 = 1668506980;
  a1[1] = 0xE400000000000000;
}

void sub_1B20F82E8(_QWORD *a1@<X8>)
{
  *a1 = 0x6574656D61726170;
  a1[1] = 0xEA00000000007372;
}

void sub_1B20F8308(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "kernelScript");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1B20F832C(_QWORD *a1@<X8>)
{
  *a1 = 0x7365727574786574;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1B20F8348()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B20F8384 + 4 * byte_1B22BB7E2[*v0]))(0x75466C656E72656BLL, 0xEE006E6F6974636ELL);
}

uint64_t sub_1B20F8384()
{
  return 1668506980;
}

uint64_t sub_1B20F8394()
{
  return 0x6574656D61726170;
}

uint64_t sub_1B20F83B0()
{
  return 0x63536C656E72656BLL;
}

uint64_t sub_1B20F83D0()
{
  return 0x7365727574786574;
}

uint64_t sub_1B20F83E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1CA9A50();
  *a1 = result;
  return result;
}

uint64_t sub_1B20F8414()
{
  sub_1B21161C0();
  return sub_1B222A1D4();
}

uint64_t sub_1B20F843C()
{
  sub_1B21161C0();
  return sub_1B222A1E0();
}

uint64_t sub_1B20F8464(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v16;
  __int16 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  char v24;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF63718, (uint64_t (*)(void))sub_1B21161C0, (uint64_t)&type metadata for TextureShaderAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v16 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21161C0();
  sub_1B222A180();
  LOBYTE(v16) = 0;
  sub_1B2229910();
  if (!v2)
  {
    v16 = v3[17];
    v24 = 2;
    sub_1B21162C0(0, (unint64_t *)&qword_1EEF63550);
    sub_1B2116400();
    sub_1B2229958();
    v11 = *((_WORD *)v3 + 16);
    v12 = *((_BYTE *)v3 + 34);
    v13 = v3[11];
    v16 = v3[3];
    v17 = v11;
    v18 = v12;
    v14 = *(_OWORD *)(v3 + 7);
    v19 = *(_OWORD *)(v3 + 5);
    v20 = v14;
    v21 = *(_OWORD *)(v3 + 9);
    v22 = v13;
    v23 = *((_DWORD *)v3 + 24);
    v24 = 1;
    sub_1B1FD51F4();
    sub_1B2229958();
    v16 = *v3;
    v24 = 3;
    sub_1B1A0895C();
    sub_1B2229958();
    v16 = v3[18];
    v24 = 4;
    sub_1B21162C0(0, &qword_1EEF636F0);
    sub_1B2116478();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B20F86D4(uint64_t a1)
{
  sub_1B210A200(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1B20F86F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1B2110754(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B20F871C()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 24);
}

uint64_t sub_1B20F8724()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 26);
}

uint64_t sub_1B20F872C()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 28);
}

uint64_t sub_1B20F8734()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

_OWORD *sub_1B20F873C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  _OWORD *result;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;

  v4 = (_QWORD *)v3;
  if (*(_DWORD *)v3 != -1 || *(_DWORD *)(v3 + 4))
  {
    v8 = *(_QWORD *)(v3 + 128);
    v35 = *(_QWORD *)(v3 + 104);
    v36 = *(_QWORD *)(v3 + 120);
    v41 = *(_QWORD *)(v3 + 112);
    v7 = v41;
    v42 = v35;
    v39 = v8;
    v40 = v36;
    sub_1B1B28C44((uint64_t)&v42);
    sub_1B1B28C44((uint64_t)&v41);
    sub_1B1B28C44((uint64_t)&v40);
    sub_1B1B28C44((uint64_t)&v39);
    v9 = *(_QWORD *)(v7 + 16);
    if (v9)
      goto LABEL_4;
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    *(_QWORD *)(a3 + 24) = v29;
    result = (_OWORD *)swift_allocObject();
    *(_QWORD *)a3 = result;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    return result;
  }
  if (qword_1EEF57578 != -1)
    swift_once();
  v26 = *(_QWORD *)(v3 + 8);
  v27 = v4[2];
  swift_retain();
  sub_1B213ADD4(v26, v27, 0x6C7070612E6D6F63, 0xED00007866762E65);
  v7 = v28;
  swift_release();
  v9 = *(_QWORD *)(v7 + 16);
  if (!v9)
    goto LABEL_24;
LABEL_4:
  v10 = v7 + 72;
  while (1)
  {
    v11 = *(_QWORD *)(v10 - 40);
    v12 = *(_QWORD *)(v10 - 16);
    v13 = *(_QWORD *)(*(_QWORD *)v10 + 16) == a1 && *(_QWORD *)(*(_QWORD *)v10 + 24) == a2;
    if (v13 || (sub_1B2229D24() & 1) != 0)
      break;
    v10 += 48;
    if (!--v9)
      goto LABEL_24;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    v14 = v4[18];
    if (*(_QWORD *)(v14 + 16) && (v15 = sub_1B1DC3AC8(v12), (v16 & 1) != 0))
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
      *(_QWORD *)(a3 + 24) = &type metadata for Entity;
      result = (_OWORD *)swift_release();
      *(_QWORD *)a3 = v17;
    }
    else
    {
      *(_QWORD *)(a3 + 24) = &type metadata for Entity;
      result = (_OWORD *)swift_release();
      *(_QWORD *)a3 = 0xFFFFFFFFLL;
    }
  }
  else
  {
    v19 = v4[17];
    if (*(_QWORD *)(v19 + 16)
      && (v20 = sub_1B1DC3AC8(v12), (v21 & 1) != 0)
      && (v22 = *(_QWORD *)(v19 + 56) + 80 * v20, v23 = *(unsigned __int8 *)(v22 + 64), v23 <= 0xEF))
    {
      v30 = *(_OWORD *)v22;
      if ((v23 & 0x80) != 0)
      {
        *((_QWORD *)&v38 + 1) = &type metadata for Entity;
        *(_QWORD *)&v37 = v30;
      }
      else
      {
        v31 = *(_OWORD *)(v22 + 16);
        v32 = *(_OWORD *)(v22 + 32);
        v33 = *(_OWORD *)(v22 + 48);
        v43 = *(_OWORD *)v22;
        v44 = v31;
        v45 = v32;
        v46 = v33;
        v47 = v23;
        sub_1B1B29638();
      }
      swift_release();
      return sub_1B1A0DDAC(&v37, (_OWORD *)a3);
    }
    else
    {
      sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
      v37 = 0u;
      v38 = 0u;
      *(_QWORD *)(a3 + 24) = v24;
      v25 = swift_allocObject();
      *(_QWORD *)a3 = v25;
      swift_release();
      *(_QWORD *)(v25 + 16) = 0;
      *(_QWORD *)(v25 + 24) = 0;
      return (_OWORD *)sub_1B1AEA224((uint64_t)&v37, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
    }
  }
  return result;
}

uint64_t sub_1B20F8AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  int v20;
  _QWORD v23[4];
  uint64_t v24[10];

  v4 = v3;
  if (*(_DWORD *)v3 == -1 && *(_DWORD *)(v3 + 4) == 0)
  {
    v10 = *(_QWORD *)(v3 + 8);
    v11 = *(_QWORD *)(v4 + 16);
    if (qword_1EEF57578 != -1)
      swift_once();
    swift_retain();
    sub_1B213ADD4(v10, v11, 0x6C7070612E6D6F63, 0xED00007866762E65);
    v8 = v12;
    swift_release();
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
      goto LABEL_17;
LABEL_10:
    v13 = v8 + 72;
    while (1)
    {
      v14 = *(_QWORD *)(v13 - 40);
      v15 = *(_QWORD *)(v13 - 16);
      v16 = *(_QWORD *)(*(_QWORD *)v13 + 16) == a2 && *(_QWORD *)(*(_QWORD *)v13 + 24) == a3;
      if (v16 || (sub_1B2229D24() & 1) != 0)
        break;
      v13 += 48;
      if (!--v9)
        goto LABEL_17;
    }
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14)
    {
      v17 = a1;
      sub_1B1A02864(a1, (uint64_t)v24);
      if (swift_dynamicCast())
      {
        v18 = v23[0];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v24[0] = *(_QWORD *)(v4 + 144);
        *(_QWORD *)(v4 + 144) = 0x8000000000000000;
        sub_1B1B85ABC(v18, v15, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v4 + 144) = v24[0];
        swift_release();
        swift_bridgeObjectRelease();
        return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v17);
      }
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v20 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v24[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v20, v24, 0xD000000000000035, 0x80000001B234C7F0);
      swift_release();
      swift_release();
    }
    else
    {
      v17 = a1;
      sub_1B1A02864(a1, (uint64_t)v23);
      sub_1B210BC94((uint64_t)v23, (uint64_t)v24);
      sub_1B20E105C((uint64_t)v24, v15);
    }
    swift_release();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v17);
  }
  v8 = *(_QWORD *)(v3 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
    goto LABEL_10;
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = a1;
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v17);
}

uint64_t sub_1B20F8E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v5)(uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  char v36;
  _QWORD *v37;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v33 = a2;
  v5 = *(void (**)(uint64_t, _QWORD))(a2 + 8);
  v5(v2, 0);
  v6 = *(_QWORD *)(v2 + 144);
  v31 = v6 + 64;
  v7 = 1 << *(_BYTE *)(v6 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v6 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  v32 = v10;
  v30 = v10 - 7;
  while (1)
  {
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v14 = v11 + 1;
        if (v11 + 1 >= v32)
          return swift_release();
        v15 = *(_QWORD *)(v31 + 8 * v14);
        if (!v15)
        {
          v14 = v11 + 2;
          if (v11 + 2 >= v32)
            return swift_release();
          v15 = *(_QWORD *)(v31 + 8 * v14);
          if (!v15)
          {
            v14 = v11 + 3;
            if (v11 + 3 >= v32)
              return swift_release();
            v15 = *(_QWORD *)(v31 + 8 * v14);
            if (!v15)
            {
              v14 = v11 + 4;
              if (v11 + 4 >= v32)
                return swift_release();
              v15 = *(_QWORD *)(v31 + 8 * v14);
              if (!v15)
              {
                v14 = v11 + 5;
                if (v11 + 5 >= v32)
                  return swift_release();
                v15 = *(_QWORD *)(v31 + 8 * v14);
                if (!v15)
                {
                  v14 = v11 + 6;
                  if (v11 + 6 >= v32)
                    return swift_release();
                  v15 = *(_QWORD *)(v31 + 8 * v14);
                  if (!v15)
                  {
                    while (v30 != v11)
                    {
                      v15 = *(_QWORD *)(v6 + 120 + 8 * v11++);
                      if (v15)
                      {
                        v14 = v11 + 6;
                        goto LABEL_22;
                      }
                    }
                    return swift_release();
                  }
                }
              }
            }
          }
        }
LABEL_22:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v14 << 6);
        v11 = v14;
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v37 = *(_QWORD **)(v3 + 144);
      v18 = v37;
      *(_QWORD *)(v3 + 144) = 0x8000000000000000;
      v20 = sub_1B1DC3AC8(v16);
      v21 = v19;
      v22 = v18[2] + ((v19 & 1) == 0);
      if (v18[3] < v22)
        break;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v19 & 1) == 0)
          goto LABEL_34;
      }
      else
      {
        sub_1B1EA920C();
        if ((v21 & 1) == 0)
          goto LABEL_34;
      }
LABEL_29:
      v25 = (uint64_t)v37;
      v35 = *(_QWORD *)(v37[7] + 8 * v20);
      v36 = 0;
      ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v5)(&v35, 0, ObjectType, v33);
      if ((v36 & 1) != 0)
        sub_1B1EA4F70(v20, v25);
      else
        *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v20) = v35;
      *(_QWORD *)(v3 + 144) = v25;
    }
    sub_1B1E92F04(v22, isUniquelyReferenced_nonNull_native);
    v23 = sub_1B1DC3AC8(v16);
    if ((v21 & 1) != (v24 & 1))
      break;
    v20 = v23;
    if ((v21 & 1) != 0)
      goto LABEL_29;
LABEL_34:
    v35 = 0;
    v36 = 1;
    ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v5)(&v35, 0, ObjectType, v33);
    v26 = v37;
    if ((v36 & 1) == 0)
    {
      v27 = v35;
      v37[(v20 >> 6) + 8] |= 1 << v20;
      v28 = 8 * v20;
      *(_QWORD *)(v26[6] + v28) = v16;
      *(_QWORD *)(v26[7] + v28) = v27;
      ++v26[2];
    }
    *(_QWORD *)(v3 + 144) = v26;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

__n128 sub_1B20F9150@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[10];
  uint64_t v10;

  sub_1B2110A70(a1, (uint64_t)v9);
  if (!v2)
  {
    v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(_QWORD *)(a2 + 160) = v10;
    v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1B20F91C4(_QWORD *a1)
{
  return sub_1B20F8464(a1);
}

__n128 sub_1B20F91E0@<Q0>(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  __n128 result;
  uint64_t v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __n128 v19;
  uint64_t v20;
  int v21;

  RGTextureDescriptor.init()((uint64_t)&v14);
  v2 = v15;
  v3 = v16;
  v12 = v18;
  v13 = v17;
  v11 = v19;
  v4 = v20;
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = sub_1B1B95870(MEMORY[0x1E0DEE9D8]);
  v7 = sub_1B1B95978(v5);
  v8 = sub_1B1C6C500(v5);
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xE000000000000000;
  *(_QWORD *)(a1 + 24) = v14;
  *(_WORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 34) = v3;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  result = v11;
  *(__n128 *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 88) = v4;
  *(_DWORD *)(a1 + 96) = v21;
  *(_QWORD *)(a1 + 104) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(a1 + 112) = v5;
  *(_QWORD *)(a1 + 120) = v5;
  *(_QWORD *)(a1 + 128) = v5;
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 160) = v10;
  return result;
}

uint64_t sub_1B20F92C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v1 + 160);
  if (qword_1EEF57550 != -1)
    swift_once();
  v4 = qword_1EEFD58C8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_1B1C6A62C(v2, v3, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1AB293C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14[0] = v4;
  swift_bridgeObjectRetain();
  sub_1B19F4BEC((unint64_t)v5);
  v6 = v4;
  if (!(v4 >> 62))
  {
    v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_5;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v7 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (!v7)
    return swift_bridgeObjectRelease();
LABEL_5:
  for (i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
    {
      v9 = (_QWORD *)MEMORY[0x1B5E21018](i, v6);
    }
    else
    {
      v9 = *(_QWORD **)(v6 + 8 * i + 32);
      swift_retain();
    }
    v10 = v9[20];
    if (*(_QWORD *)(v10 + 16))
    {
      v11 = v9[2];
      v12 = v9[3];
      sub_1B1A02864(v10 + 48, (uint64_t)v14);
      swift_bridgeObjectRetain();
      sub_1B20F8AC0((uint64_t)v14, v11, v12);
    }
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20F9480()
{
  unsigned int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  if (v1 != 0xFFFFFFFFLL || v2 != 0)
    return v1 | (v2 << 32);
  v4 = *((_QWORD *)v0 + 1);
  swift_bridgeObjectRetain();
  return v4;
}

unint64_t sub_1B20F94DC(unint64_t result, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4 = v3;
  v5 = result;
  if ((a3 & 1) != 0)
  {
    v10 = HIDWORD(result);
    if (result != 0xFFFFFFFF)
    {
      result = swift_bridgeObjectRelease();
      v4[1] = 0;
      v4[2] = 0xE000000000000000;
    }
    *(_DWORD *)v4 = v5;
    *((_DWORD *)v4 + 1) = v10;
  }
  else
  {
    if ((result || a2 != 0xE000000000000000) && (sub_1B2229D24() & 1) == 0)
      *v3 = 0xFFFFFFFFLL;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v3[1] = v5;
    v3[2] = a2;
    v7 = sub_1B20F9F48();
    v9 = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4[19] = v7;
    v4[20] = v9;
    sub_1B20F92C8();
    return sub_1B1B0BB78(v5, a2, 0);
  }
  return result;
}

uint64_t sub_1B20F964C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E480;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5A998, (uint64_t)&type metadata for KernelReference, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1B0BB28;
  v2[5] = KeyPath;
  v2[2] = sub_1B1B0BB30;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC3910(0x6C656E72656BLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 13, 0, (uint64_t)v2, KeyPath, 0, 0,
         64,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B80E0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1B0BA84;
  v6[5] = v5;
  v6[2] = sub_1B1B0BA8C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AC3CCC(0x75466C656E72656BLL, 0xEE006E6F6974636ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         4,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1791524(0, &qword_1EEF59290, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B2114654;
  v9[5] = v8;
  v9[2] = sub_1B2114674;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AC3D3C(0x726F466C65786970, 0xEB0000000074616DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B21146AC;
  v12[5] = v11;
  v12[2] = sub_1B1B0B984;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AC3DB4(0x6874646977, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B21146AC;
  v15[5] = v14;
  v15[2] = sub_1B1B0B984;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AC3DB4(0x746867696568, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B21146AC;
  v18[5] = v17;
  v18[2] = sub_1B1B0B984;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AC3DB4(0x6874706564, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF5A968, (uint64_t)&type metadata for MetalFunctionReflection, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1B0B864;
  v21[5] = v20;
  v21[2] = sub_1B1B0B86C;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1AC3E24(0x746E656D75677261, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          68,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  sub_1B1791524(0, (unint64_t *)&unk_1EEF63540, (uint64_t (*)(uint64_t))type metadata accessor for MTLStorageMode, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B211471C;
  v24[5] = v23;
  v24[2] = sub_1B211473C;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1AC41E0(0x4D656761726F7473, 0xEB0000000065646FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          4,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  v26 = swift_getKeyPath();
  sub_1B211475C(0);
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1B0B74C;
  v27[5] = v26;
  v27[2] = sub_1B1B0B754;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1AC4258(0x6574656D61726170, 0xEA00000000007372, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          4,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 96) = v28;
  result = sub_1B2228AD0();
  qword_1EEFD58C8 = v0;
  return result;
}

uint64_t sub_1B20F9EE8@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = v3 == 0xFFFFFFFFLL && v4 == 0;
  v6 = !v5;
  if (v5)
  {
    v8 = *((_QWORD *)a1 + 1);
    result = swift_bridgeObjectRetain();
  }
  else
  {
    result = 0;
    v8 = v3 | (v4 << 32);
  }
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = result;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_1B20F9F48()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  double v12;
  char v13;
  double v14;
  char v15;
  double v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _OWORD v44[3];

  v1 = sub_1B1B7F1F4(MEMORY[0x1E0DEE9D8]);
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 112);
  if (*(_DWORD *)v0 == -1 && !*(_DWORD *)(v0 + 4))
  {
    if (qword_1EEF57578 != -1)
      swift_once();
    v33 = *(_QWORD *)(v0 + 8);
    v32 = *(_QWORD *)(v0 + 16);
    swift_retain();
    sub_1B213ADD4(v33, v32, 0x6C7070612E6D6F63, 0xED00007866762E65);
    v3 = v34;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v43 = v2;
      goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return (uint64_t)v2;
  v43 = v1;
  swift_bridgeObjectRetain();
LABEL_5:
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v6 = 72;
  v36 = MEMORY[0x1E0DEE9B8] + 8;
  v37 = v3;
  while (1)
  {
    v41 = v5;
    v42 = v4;
    v7 = *(_QWORD *)(v3 + v6);
    v8 = *(_QWORD *)(v7 + 24);
    v39 = *(_QWORD *)(v7 + 16);
    v40 = v6;
    v9 = *(_QWORD *)(v7 + 40);
    v10 = *(_QWORD *)(v7 + 152);
    v38 = *(_QWORD *)(v7 + 144);
    v11 = *(_BYTE *)(v7 + 188);
    if (v11)
      v12 = 0.0;
    else
      v12 = *(float *)(v7 + 184);
    v13 = *(_BYTE *)(v7 + 196);
    if (v13)
      v14 = 0.0;
    else
      v14 = *(float *)(v7 + 192);
    v15 = *(_BYTE *)(v7 + 204);
    if (v15)
      v16 = 0.0;
    else
      v16 = *(float *)(v7 + 200);
    memset(v44, 0, 32);
    swift_retain_n();
    swift_bridgeObjectRetain();
    v17 = (_QWORD *)sub_1B1A23334(v9, (uint64_t)v44, v39, v8, *(uint64_t *)&v12, v11, *(uint64_t *)&v14, v13, *(uint64_t *)&v16, v15, v38, v10, 0, 0, 0, (uint64_t)&type metadata for TextureShaderAsset, v9, (uint64_t)&off_1E6396670);
    swift_bridgeObjectRelease();
    sub_1B1AEA224((uint64_t)v44, (uint64_t)&qword_1ED4BB150, v36, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
    v17[20] = *(_QWORD *)(v7 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v18 = v17[2];
    v19 = v17[3];
    swift_retain_n();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v44[0] = v43;
    v21 = sub_1B1DC3B00(v18, v19);
    v23 = v22;
    v24 = v43[2] + ((v22 & 1) == 0);
    if (v43[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_1B1EA9B84();
      goto LABEL_22;
    }
    sub_1B1E93E78(v24, isUniquelyReferenced_nonNull_native);
    v25 = sub_1B1DC3B00(v18, v19);
    if ((v23 & 1) != (v26 & 1))
      break;
    v21 = v25;
LABEL_22:
    v5 = v41;
    v27 = *(_QWORD **)&v44[0];
    v43 = *(_QWORD **)&v44[0];
    if ((v23 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v44[0] + 56) + 8 * v21) = v17;
      swift_release();
      swift_release_n();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)&v44[0] + 8 * (v21 >> 6) + 64) |= 1 << v21;
      v28 = (uint64_t *)(v27[6] + 16 * v21);
      *v28 = v18;
      v28[1] = v19;
      *(_QWORD *)(v27[7] + 8 * v21) = v17;
      ++v27[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_1B1C63044(0, v41[2] + 1, 1, v41);
      v3 = v37;
      v30 = v5[2];
      v29 = v5[3];
      if (v30 >= v29 >> 1)
        v5 = sub_1B1C63044(v29 > 1, v30 + 1, 1, v5);
      v5[2] = v30 + 1;
      v31 = &v5[2 * v30];
      v31[4] = v18;
      v31[5] = v19;
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease();
    }
    swift_release();
    v6 = v40 + 48;
    v4 = v42 - 1;
    if (v42 == 1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v43;
    }
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B20FA3BC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;

  v9 = *(_QWORD *)(v4 + 152);
  v10 = MEMORY[0x1B5E20388]();
  if (*(_QWORD *)(v9 + 16) && (v12 = sub_1B1DC3B00(v10, v11), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v12);
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1EEF57550 != -1)
      swift_once();
    swift_bridgeObjectRetain();
    v15 = swift_bridgeObjectRetain();
    v14 = sub_1B1D33D74(v15, a1, a2, a3, a4);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_1B20FA4B4()
{
  return 0xD000000000000012;
}

uint64_t sub_1B20FA4D0(uint64_t a1, char a2)
{
  return a2 & 1 | (a1 > 1035);
}

uint64_t sub_1B20FA4E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  if (qword_1EEF57550 != -1)
    swift_once();
  v3 = qword_1EEFD58C8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v4 = sub_1B1C6A62C(v1, v2, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1AB293C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B19F4BEC((unint64_t)v4);
  return v3;
}

uint64_t sub_1B20FA598()
{
  if (qword_1EEF57550 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B20FA5DC(char *a1, char *a2)
{
  return sub_1B1F91378(*a1, *a2);
}

uint64_t sub_1B20FA5E8()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20FA660()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B20FA6B4()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B20FA728@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B20FA784(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1635017060;
  if (*v1)
    v2 = 0x65727574786574;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B20FA7BC()
{
  _BYTE *v0;

  if (*v0)
    return 0x65727574786574;
  else
    return 1635017060;
}

uint64_t sub_1B20FA7F0@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B20FA850()
{
  sub_1B21148FC();
  return sub_1B222A1D4();
}

uint64_t sub_1B20FA878()
{
  sub_1B21148FC();
  return sub_1B222A1E0();
}

uint64_t sub_1B20FA8A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[10];
  _QWORD v12[8];
  char v13;
  _BYTE v14[80];
  char v15;

  v2 = v1;
  sub_1B19F8E54(0, (unint64_t *)&unk_1EEF63568, (uint64_t (*)(void))sub_1B21148FC, (uint64_t)&_s10CodingKeysON_0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21148FC();
  sub_1B222A180();
  sub_1B1B9A484(v2, (uint64_t)v12);
  if (v13 < 0)
  {
    v13 &= ~0x80u;
    v11[0] = v12[0];
    v15 = 1;
    sub_1B1A0895C();
  }
  else
  {
    sub_1B1B2A86C((uint64_t)v12, (uint64_t)v14);
    sub_1B1B2A86C((uint64_t)v14, (uint64_t)v11);
    v15 = 0;
    sub_1B1C7EC88();
  }
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B20FAA18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v5[10];

  result = sub_1B210FBE4(a1, v5);
  if (!v2)
    return sub_1B1B9A484((uint64_t)v5, a2);
  return result;
}

uint64_t sub_1B20FAA5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  sub_1B1B9A484(v1, (uint64_t)&v4);
  return sub_1B20FA8A0(a1);
}

uint64_t sub_1B20FAAA8()
{
  sub_1B2115E3C();
  return sub_1B222A1D4();
}

uint64_t sub_1B20FAAD0()
{
  sub_1B2115E3C();
  return sub_1B222A1E0();
}

__n128 sub_1B20FAAF8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  uint64_t v17;
  int v18;

  RGTextureDescriptor.init()((uint64_t)&v11);
  v4 = v12;
  v5 = v13;
  v9 = v15;
  v10 = v14;
  v8 = v16;
  v6 = v17;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  *(_QWORD *)a2 = v11;
  *(_WORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 10) = v5;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v9;
  result = v8;
  *(__n128 *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 64) = v6;
  *(_DWORD *)(a2 + 72) = v18;
  return result;
}

uint64_t sub_1B20FAB98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF63610, (uint64_t (*)(void))sub_1B2115E3C, (uint64_t)&type metadata for TextureRenderTarget.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2115E3C();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

double sub_1B20FAC74@<D0>(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  double result;
  uint64_t v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  RGTextureDescriptor.init()((uint64_t)&v7);
  v2 = v8;
  v3 = v9;
  v4 = v13;
  *(_QWORD *)a1 = v7;
  *(_WORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 10) = v3;
  v5 = v11;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = v5;
  result = *(double *)&v12;
  *(_OWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 72) = v14;
  return result;
}

double sub_1B20FACD8@<D0>(uint64_t a1@<X8>)
{
  __int16 v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  double result;
  uint64_t v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  RGTextureDescriptor.init()((uint64_t)&v7);
  v2 = v8;
  v3 = v9;
  v4 = v13;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v7;
  *(_WORD *)(a1 + 40) = v2;
  *(_BYTE *)(a1 + 42) = v3;
  v5 = v11;
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v5;
  result = *(double *)&v12;
  *(_OWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 96) = v4;
  *(_DWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t sub_1B20FAD54(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  _BYTE v10[32];
  _BYTE v11[24];
  __int128 v12;
  unsigned __int8 v13;
  __int128 v14;
  uint64_t v15[2];
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  v5 = HIDWORD(a2);
  sub_1B1A18378(a1 + 8, (uint64_t)v11, (unint64_t *)&unk_1ED4B7838, (uint64_t)&type metadata for TextureOptions.SizeModification);
  sub_1B1A18378((uint64_t)v11, (uint64_t)&v12, (unint64_t *)&unk_1ED4B7838, (uint64_t)&type metadata for TextureOptions.SizeModification);
  if (v13 <= 0xFDu)
  {
    sub_1B2114470(&v12, (uint64_t)&v14);
    sub_1B2114470(&v14, (uint64_t)v15);
    if (v16 < 0)
    {
      v16 &= ~0x80u;
    }
    else if ((_DWORD)a2 == -1 && !(_DWORD)v5
           || (uint64_t)(a2 << 32) < (uint64_t)0xFFFFFFFF00000001
           || (int)a2 >= *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
           || (v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v5 != -1)
           && *(_DWORD *)(v6 + 12 * (int)a2 + 8) != (_DWORD)v5
           || (sub_1B1FEED5C(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v6 + 12 * (int)a2) + 32), v2, a2, v15[0], v15[1], v16 & 1) & 1) == 0)
    {
      v17 = 0;
      v18 = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      sub_1B1BC3C70();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
LABEL_22:
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
  }
  sub_1B1A18378(a1 + 32, (uint64_t)v10, &qword_1ED4B7940, (uint64_t)&type metadata for TextureRequireAnimationRepresentation);
  result = sub_1B1A18378((uint64_t)v10, (uint64_t)&v17, &qword_1ED4B7940, (uint64_t)&type metadata for TextureRequireAnimationRepresentation);
  v8 = v20 & 0xFF00;
  if (v8 != 768)
  {
    if ((_DWORD)a2 == -1 && !(_DWORD)v5
      || (uint64_t)(a2 << 32) < (uint64_t)0xFFFFFFFF00000001
      || (int)a2 >= *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
      || (v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v5 != -1)
      && *(_DWORD *)(v9 + 12 * (int)a2 + 8) != (_DWORD)v5
      || (result = sub_1B1FEEE34(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v9 + 12 * (int)a2) + 32), v2, a2, v17, v18, v19, v8 | v20 & 1u), (result & 1) == 0))
    {
      sub_1B2229430();
      sub_1B2228890();
      sub_1B1BC3C70();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      goto LABEL_22;
    }
  }
  return result;
}

double sub_1B20FB0FC(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, int a5, int a6, __int128 *a7)
{
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  double result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v30 = a5;
  v31 = a6;
  v11 = *a7;
  v12 = *((_QWORD *)a7 + 2);
  v13 = *((_BYTE *)a7 + 24);
  v28 = a7[2];
  v29 = v11;
  v14 = *((_QWORD *)a7 + 6);
  v15 = *((_WORD *)a7 + 28);
  v16 = sub_1B2228110();
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v21 + 16))(v20, a4, v18);
  sub_1B21142D4((uint64_t)v20, (uint64_t *)v32);
  v26 = v32[1];
  v27 = v32[0];
  v22 = v33;
  v23 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v24 = v26;
  *(_OWORD *)a1 = v27;
  *(_OWORD *)(a1 + 16) = v24;
  *(_QWORD *)(a1 + 32) = v22;
  *(_QWORD *)(a1 + 40) = v23;
  *a2 = v30;
  a2[1] = v31;
  *(_OWORD *)a3 = v29;
  *(_QWORD *)(a3 + 16) = v12;
  *(_BYTE *)(a3 + 24) = v13;
  result = *(double *)&v28;
  *(_OWORD *)(a3 + 32) = v28;
  *(_QWORD *)(a3 + 48) = v14;
  *(_WORD *)(a3 + 56) = v15;
  return result;
}

CGColorSpaceRef sub_1B20FB230()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  qword_1ED4D0908 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B20FB258()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA00]);
  qword_1ED4D0900 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B20FB280()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D978]);
  qword_1EEFD58D0 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B20FB2A8()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D9F0]);
  qword_1EEFD58D8 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B20FB2D0()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  qword_1EEFD58E0 = (uint64_t)result;
  return result;
}

CGColorSpaceRef sub_1B20FB2F8()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D958]);
  qword_1EEFD58E8 = (uint64_t)result;
  return result;
}

float sub_1B20FB320()
{
  CGColorSpace *v0;
  CGColorSpace *v1;
  CGColor *v2;
  CGColorRef CopyByMatchingToColorSpace;
  CGColorRef v4;
  long double v5;
  CGColor *v11;
  CGColorRef v12;
  CGColorRef v13;
  long double v14;
  double v15;
  int64x2_t v17;
  __int128 v18;
  uint64_t v19;

  v1 = v0;
  v19 = *MEMORY[0x1E0C80C00];
  v17 = vdupq_n_s64(0x3FA999999999999AuLL);
  v18 = xmmword_1B22BEBE0;
  if (qword_1ED4B7BC0 != -1)
    swift_once();
  v2 = CGColorCreate((CGColorSpaceRef)qword_1ED4D0900, (const CGFloat *)v17.i64);
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(v0, kCGRenderingIntentDefault, v2, 0);
  if (CopyByMatchingToColorSpace)
  {
    v4 = CopyByMatchingToColorSpace;
    v5 = *(double *)(sub_1B2228E54() + 32);

    swift_bridgeObjectRelease();
  }
  else
  {

    v5 = 0.05;
  }
  __asm { FMOV            V0.2D, #0.5 }
  v17 = _Q0;
  v18 = xmmword_1B22BEBF0;
  v11 = CGColorCreate((CGColorSpaceRef)qword_1ED4D0900, (const CGFloat *)v17.i64);
  v12 = CGColorCreateCopyByMatchingToColorSpace(v1, kCGRenderingIntentDefault, v11, 0);
  if (v12)
  {
    v13 = v12;
    v14 = *(double *)(sub_1B2228E54() + 32);

    swift_bridgeObjectRelease();
  }
  else
  {

    v14 = 0.5;
  }
  v15 = log(v5);
  return floor((-2.99573227 / v15 + -0.693147181 / log(v14)) * 0.5 * 100.0 + 0.5) / 100.0;
}

void sub_1B20FB4E0(uint64_t a1, unint64_t a2, size_t a3, uint64_t a4)
{
  void **v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const __CFData *v14;
  CGImageSource *v15;
  CGImageRef ImageAtIndex;
  CGImage *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v21 - v12;
  v14 = (const __CFData *)sub_1B2228170();
  v15 = CGImageSourceCreateWithData(v14, 0);

  if (!v15)
    goto LABEL_8;
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v15, 0, 0);
  if (!ImageAtIndex)
  {

LABEL_8:
    sub_1B2229688();
    __break(1u);
    return;
  }
  v17 = ImageAtIndex;
  v18 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 1, 1, v18);
  sub_1B20FB6E8(v17, a3, a4, (uint64_t)v13, 0, 1);
  sub_1B1AEA224((uint64_t)v13, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  if (!v5)
  {
    v19 = *v4;
    if (v19)
    {
      sub_1B1A0DC90(a1, a2);
      sub_1B2228134();
      sub_1B1A0DADC(a1, a2);
      v20 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      objc_msgSend(v19, sel_setLabel_, v20);

    }
  }

}

void sub_1B20FB6E8(CGImage *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Width;
  size_t Height;
  size_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  __int128 v25;
  int v26;
  CGColorSpace *v27;
  CGColorSpace *v28;
  CGImageAlphaInfo AlphaInfo;
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int64_t BitsPerComponent;
  _BOOL4 IsWideGamutRGB;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  size_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  id v54;
  uint64_t v55;
  id v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  char *v66;
  id v67;
  char *v68;
  id v69;
  CGContextRef v70;
  void *v71;
  CGContext *v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  __int16 v80;
  int v81;
  char v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  char v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  size_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  void *v99;
  id v100;
  uint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  size_t NumberOfComponents;
  _BOOL4 v106;
  id v107;
  CGBitmapInfo BitmapInfo;
  uint64_t v109;
  uint64_t v110;
  CGColorSpace *v111;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  size_t v118;
  _BYTE v119[24];
  __int16 v120;
  __int16 v121;
  __int16 v122;
  int v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  __int16 v131;
  __int16 v132;
  __int16 v133;
  int v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  unsigned __int8 v144;
  uint64_t v145;

  v7 = v6;
  v145 = a6;
  v110 = a4;
  v109 = a3;
  v113 = a2;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v104 - v16;
  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  v20 = Height;
  v112 = a5;
  if (a5 >= 2)
  {
    v21 = *(unsigned __int16 *)(v7 + 34);
    *(_QWORD *)&v115 = *(unsigned __int16 *)(v7 + 32);
    if (Width != (_QWORD)v115 || Height != v21)
    {
      v114 = v21;
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v116 = 0;
      *((_QWORD *)&v116 + 1) = 0xE000000000000000;
      v111 = (CGColorSpace *)qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v116 = 0x727574786554202DLL;
      *((_QWORD *)&v116 + 1) = 0xEB00000000282065;
      sub_1B19EC90C(v110, (uint64_t)v17);
      v22 = sub_1B2228110();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v17, 1, v22) == 1)
      {
        sub_1B1AEA224((uint64_t)v17, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
      }
      else
      {
        sub_1B2227FF0();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v22);
      }
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v118 = CGImageGetWidth(a1);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v118 = CGImageGetHeight(a1);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      Width = v115;
      v118 = v115;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v24 = v114;
      v118 = v114;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v25 = v116;
      v26 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v116 = 0;
      swift_retain();
      sub_1B1F1AD70(v26, (uint64_t *)&v116, v25, *((uint64_t *)&v25 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v20 = v24;
    }
  }
  v27 = CGImageGetColorSpace(a1);
  if (!v27)
  {
    *(_QWORD *)&v116 = 0;
    *((_QWORD *)&v116 + 1) = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    v118 = (size_t)a1;
    type metadata accessor for CGImage(0);
    sub_1B22295EC();
    sub_1B2228890();
    v32 = v116;
    sub_1B21158FC();
    swift_allocError();
    *(_OWORD *)v33 = v32;
    *(_BYTE *)(v33 + 16) = 0;
    swift_willThrow();
    return;
  }
  v28 = v27;
  BitmapInfo = CGImageGetBitmapInfo(a1);
  if (CGImageGetAlphaInfo(a1))
  {
    AlphaInfo = CGImageGetAlphaInfo(a1);
    v30 = (uint64_t *)v113;
    v31 = v20;
    v106 = AlphaInfo != kCGImageAlphaNoneSkipLast && CGImageGetAlphaInfo(a1) != kCGImageAlphaNoneSkipFirst;
  }
  else
  {
    v31 = v20;
    v106 = 0;
    v30 = (uint64_t *)v113;
  }
  BitsPerComponent = CGImageGetBitsPerComponent(a1);
  IsWideGamutRGB = CGColorSpaceIsWideGamutRGB(v28);
  v36 = BitsPerComponent > 71 && IsWideGamutRGB;
  LODWORD(v107) = v36;
  NumberOfComponents = CGColorSpaceGetNumberOfComponents(v28);
  CGImageGetBitmapInfo(a1);
  sub_1B1A18378((uint64_t)(v30 + 1), (uint64_t)v119, (unint64_t *)&unk_1ED4B7838, (uint64_t)&type metadata for TextureOptions.SizeModification);
  sub_1B1A18378((uint64_t)v119, (uint64_t)&v142, (unint64_t *)&unk_1ED4B7838, (uint64_t)&type metadata for TextureOptions.SizeModification);
  if (v144 <= 0xFDu)
  {
    v38 = v143;
    if ((v144 & 0x80) != 0)
    {
      Width = v142;
      v37 = v143;
    }
    else
    {
      v37 = v31;
      if ((v144 & 1) != 0)
      {
        if (v143 >= v142)
          v38 = v142;
        if (Width >= v31)
        {
          if (v38 >= Width)
            v38 = Width;
          v37 = v38 * v31 / Width;
          Width = v38;
        }
        else
        {
          if (v38 >= v31)
            v38 = v31;
          Width = v38 * Width / v31;
          v37 = v38;
        }
      }
      else
      {
        if (v142 < Width)
          Width = v142;
        if (v143 < v31)
          v37 = v143;
      }
    }
    if (Width != CGImageGetWidth(a1) || v37 != CGImageGetHeight(a1))
    {
      *(_QWORD *)&v115 = v37;
      if (qword_1ED4BF430 != -1)
        swift_once();
      v114 = Width;
      *(_QWORD *)&v116 = 0;
      *((_QWORD *)&v116 + 1) = 0xE000000000000000;
      v104 = qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v116 = 0x727574786554202DLL;
      *((_QWORD *)&v116 + 1) = 0xEB00000000282065;
      sub_1B19EC90C(v110, (uint64_t)v13);
      v39 = sub_1B2228110();
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v13, 1, v39) == 1)
      {
        sub_1B1AEA224((uint64_t)v13, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
      }
      else
      {
        sub_1B2227FF0();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v39);
      }
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v118 = CGImageGetWidth(a1);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v118 = CGImageGetHeight(a1);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      Width = v114;
      v118 = v114;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v118 = v115;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v41 = v116;
      v42 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v116 = 0;
      swift_retain();
      sub_1B1F1AD70(v42, (uint64_t *)&v116, v41, *((uint64_t *)&v41 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v37 = v115;
      v30 = (uint64_t *)v113;
    }
  }
  else
  {
    v37 = v31;
  }
  v43 = *v30;
  v111 = v28;
  if ((BitmapInfo & 0x100) != 0)
  {
    if ((v43 & 4) != 0)
    {
      if (qword_1EEF57568 != -1)
        swift_once();
      v45 = &qword_1EEFD58E0;
    }
    else
    {
      if (qword_1EEF57570 != -1)
        swift_once();
      v45 = &qword_1EEFD58E8;
    }
    v44 = (void *)*v45;
    goto LABEL_68;
  }
  if ((_DWORD)v107)
  {
    if (qword_1EEF57570 != -1)
      swift_once();
    v44 = (void *)qword_1EEFD58E8;
LABEL_68:
    v50 = v44;
    LODWORD(v107) = 4353;
    v51 = 2;
    v49 = 8;
    goto LABEL_87;
  }
  v46 = CGImageGetBitsPerComponent(a1);
  if (v46 == 16)
  {
    if (v106)
    {
      v47 = 4097;
      if ((v43 & 4) != 0)
      {
LABEL_63:
        v48 = 2;
        v49 = 8;
LABEL_82:
        LODWORD(v107) = v47;
        if (qword_1ED4B7618 != -1)
          swift_once();
        v53 = &qword_1ED4D0908;
LABEL_85:
        v54 = (id)*v53;
LABEL_86:
        v50 = v54;
        v51 = v48;
        goto LABEL_87;
      }
LABEL_77:
      LODWORD(v107) = v47;
      if (qword_1ED4B7BC0 != -1)
        swift_once();
      v53 = &qword_1ED4D0900;
      v48 = 2;
      v49 = 8;
      goto LABEL_85;
    }
    if (NumberOfComponents != 1)
    {
      v47 = 4101;
      if ((v43 & 4) != 0)
        goto LABEL_63;
      goto LABEL_77;
    }
    v52 = v37;
    v49 = 2;
    goto LABEL_133;
  }
  if (v106)
  {
    v47 = 16385;
LABEL_81:
    v48 = 1;
    v49 = 4;
    goto LABEL_82;
  }
  if (NumberOfComponents != 1)
  {
    v47 = 16389;
    goto LABEL_81;
  }
  v52 = v37;
  if ((v43 & 4) != 0)
  {
    v49 = 1;
  }
  else
  {
    swift_getObjectType();
    v97 = sub_1B1F9C9A8();
    v49 = 1;
    v98 = 1;
    if ((v97 & 1) == 0)
    {
LABEL_140:
      v48 = v98;
      v49 = 4 * v98;
      if (qword_1ED4B7618 != -1)
        swift_once();
      v54 = (id)qword_1ED4D0908;
      LODWORD(v107) = 5;
      v37 = v52;
      goto LABEL_86;
    }
  }
LABEL_133:
  swift_getObjectType();
  if ((sub_1B1F9FBBC() & 1) == 0)
  {
    v98 = v49;
    goto LABEL_140;
  }
  if (qword_1EEF57558 != -1)
    swift_once();
  v99 = (void *)qword_1EEFD58D0;
  if (v46 == 16 && (v43 & 4) == 0)
  {
    v101 = qword_1EEF57560;
    v102 = (id)qword_1EEFD58D0;
    if (v101 != -1)
      swift_once();
    v100 = (id)qword_1EEFD58D8;
  }
  else
  {
    v100 = (id)qword_1EEFD58D0;
  }
  v103 = v100;

  LODWORD(v107) = 0;
  v51 = v49;
  v37 = v52;
  v50 = v103;
LABEL_87:
  v114 = Width;
  *(_QWORD *)&v115 = v37;
  v113 = v49 * Width;
  v55 = v49 * Width * v37;
  v56 = *(id *)v7;
  v110 = v55;
  NumberOfComponents = v49;
  v57 = v43;
  if (v56)
  {
    v58 = v55 * v145;
    if (*(_QWORD *)(v7 + 16) == v55 * v145)
    {
      v59 = *(_QWORD *)(v7 + 8);
      goto LABEL_93;
    }
  }
  else
  {
    v58 = v55 * v145;
  }
  v60 = v51;
  swift_getObjectType();
  v56 = sub_1B1F9FC00(v58, 0);
  v59 = v61;
  v63 = v62;
  swift_unknownObjectRelease();
  *(_QWORD *)v7 = v56;
  *(_QWORD *)(v7 + 8) = v59;
  *(_QWORD *)(v7 + 16) = v63;
  if (!v56)
  {
    sub_1B21158FC();
    swift_allocError();
    *(_QWORD *)v76 = 0xD000000000000018;
    *(_QWORD *)(v76 + 8) = 0x80000001B234CDB0;
    *(_BYTE *)(v76 + 16) = 0;
    swift_willThrow();

    return;
  }
  v51 = v60;
LABEL_93:
  v64 = v51;
  v65 = 8 * v51;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    v66 = 0;
  }
  else
  {
    v67 = v50;
    v68 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v69 = v56;
    v66 = &v68[v59];
    v50 = v67;
  }
  v109 = v110 * v112;
  v70 = CGBitmapContextCreateWithData(&v66[v110 * v112], v114, v115, v65, v113, (CGColorSpaceRef)v50, (uint32_t)v107, (CGBitmapContextReleaseDataCallback)nullsub_192, 0);
  v71 = v50;
  if (v70)
  {
    v72 = v70;
    v107 = v71;
    sub_1B2228E78();
    v73 = sub_1B20FB320();
    if (v64 == 1 && v106 && v73 == 2.2 && (v57 & 4) == 0 && (v57 & 8) == 0 && (v57 & 0x80) == 0)
    {
      CACurrentMediaTime();
      CGBitmapContext_fixIncorrectPremultiply(v72);
    }
    v74 = 10;
    switch((NumberOfComponents - 1) & 0x1FFFFFFFFFFFFFFFLL)
    {
      case 0uLL:
        goto LABEL_113;
      case 1uLL:
        v74 = 30;
        goto LABEL_113;
      case 3uLL:
        v74 = 70;
        goto LABEL_113;
      case 7uLL:
        if ((BitmapInfo & 0x100) != 0)
          v74 = 115;
        else
          v74 = 110;
LABEL_113:
        *(_BYTE *)(v7 + 24) = 1;
        if (v145 <= 1)
          v78 = 2;
        else
          v78 = 3;
        *(_QWORD *)(v7 + 56) = v78;
        if ((v57 & 4) == 0)
          v74 = sub_1B1F9DB48(v74);
        *(_QWORD *)(v7 + 48) = v74;
        v79 = v114;
        *(_WORD *)(v7 + 32) = v114;
        v80 = v115;
        *(_WORD *)(v7 + 34) = v115;
        *(_WORD *)(v7 + 36) = 1;
        if ((v57 & 0x20) != 0)
        {
          v81 = *(_DWORD *)(v7 + 38);
          v82 = *(_BYTE *)(v7 + 42);
          v83 = *(_QWORD *)(v7 + 96);
          v120 = v79;
          v121 = v80;
          v122 = 1;
          v123 = v81;
          v124 = v82;
          v125 = v74;
          v126 = v78;
          v84 = *(_OWORD *)(v7 + 80);
          v127 = *(_OWORD *)(v7 + 64);
          v128 = v84;
          v129 = v83;
          v130 = *(_DWORD *)(v7 + 104);
        }
        else
        {
          if ((v57 & 0x40) == 0)
          {
            *(_BYTE *)(v7 + 40) = 1;
            goto LABEL_124;
          }
          v85 = *(_DWORD *)(v7 + 38);
          v86 = *(_BYTE *)(v7 + 42);
          v87 = *(_QWORD *)(v7 + 96);
          v131 = v114;
          v132 = v115;
          v133 = 1;
          v134 = v85;
          v135 = v86;
          v136 = v74;
          v137 = v78;
          v88 = *(_OWORD *)(v7 + 80);
          v138 = *(_OWORD *)(v7 + 64);
          v139 = v88;
          v140 = v87;
          v141 = *(_DWORD *)(v7 + 104);
        }
        *(_BYTE *)(v7 + 40) = sub_1B20F1554();
LABEL_124:
        *(_BYTE *)(v7 + 41) = 1;
        v89 = v145;
        *(_WORD *)(v7 + 38) = v145;
        *(_QWORD *)(v7 + 80) = 0;
        *(_QWORD *)(v7 + 96) = 0;
        *(_OWORD *)(v7 + 64) = xmmword_1B2298AF0;
        if (v89 < 2)
        {

          swift_unknownObjectRelease();
        }
        else
        {
          sub_1B1EFF5B0(v114, v115, &v116);
          v115 = v116;
          v90 = v117;
          v91 = *(char **)(v7 + 112);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v91 = sub_1B1C662B4(0, *((_QWORD *)v91 + 2) + 1, 1, v91);
          v93 = *((_QWORD *)v91 + 2);
          v92 = *((_QWORD *)v91 + 3);
          if (v93 >= v92 >> 1)
            v91 = sub_1B1C662B4(v92 > 1, v93 + 1, 1, v91);
          *((_QWORD *)v91 + 2) = v93 + 1;
          v94 = &v91[64 * v93];
          v95 = v113;
          *((_QWORD *)v94 + 4) = v109;
          *((_QWORD *)v94 + 5) = v95;
          *((_QWORD *)v94 + 6) = v110;
          *(_OWORD *)(v94 + 56) = v115;
          v96 = v112;
          *((_QWORD *)v94 + 9) = v90;
          *((_QWORD *)v94 + 10) = v96;
          *((_QWORD *)v94 + 11) = 0;

          swift_unknownObjectRelease();
          *(_QWORD *)(v7 + 112) = v91;
        }
        break;
      default:
        sub_1B21158FC();
        swift_allocError();
        *(_OWORD *)v77 = xmmword_1B22BEC00;
        *(_BYTE *)(v77 + 16) = 0;
        swift_willThrow();

        swift_unknownObjectRelease();
        return;
    }
  }
  else
  {
    sub_1B21158FC();
    swift_allocError();
    *(_QWORD *)v75 = 0xD000000000000026;
    *(_QWORD *)(v75 + 8) = 0x80000001B234CDD0;
    *(_BYTE *)(v75 + 16) = 0;
    swift_willThrow();

    swift_unknownObjectRelease();
  }
}

void sub_1B20FC9EC(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const __CFURL *v39;
  CGImageSource *v40;
  CGImageRef ImageAtIndex;
  CGImage *v42;
  uint64_t v43;
  uint64_t (*v44)(void);
  uint64_t v45;
  void **v46;
  const __CFData *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  const __CFData *v56;
  CGImageSource *v57;
  CGImageSource *v58;
  CGImageRef v59;
  CGImage *v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  const __CFURL *v64;
  CGImageSource *v65;
  CGImageRef v66;
  CGImage *v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  const __CFData *v86;
  uint64_t v87;
  const __CFData *v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  uint64_t v100;

  v93 = a3;
  v89 = a4;
  v90 = a5;
  v91 = a2;
  v100 = *MEMORY[0x1E0C80C00];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v87 - v13;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v87 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v87 - v21;
  sub_1B2228014();
  v23 = sub_1B22287B8();
  v25 = v24;
  swift_bridgeObjectRelease();
  if (v23 == 26230 && v25 == 0xE200000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1B2228128();
    if (!v5)
      __asm { BR              X10 }

    sub_1B2229688();
    __break(1u);
    JUMPOUT(0x1B20FD73CLL);
  }
  if (v23 == 7894123 && v25 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v27 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
LABEL_11:
    v28 = sub_1B2228128();
    if (!v5)
    {
      v30 = v28;
      v31 = v29;
      v32 = sub_1B2228110();
      v33 = *(_QWORD *)(v32 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v22, a1, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v22, 0, 1, v32);
      sub_1B2023184(v30, v31);
      sub_1B1AEA224((uint64_t)v22, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
      sub_1B1A0DADC(v30, v31);
      return;
    }
    v96 = v5;
    v34 = v5;
    sub_1B1AEC268(0, (unint64_t *)&qword_1ED4BB030);
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (v99 == 1)
      {
        v88 = 0;
        v35 = v5;
        sub_1B2024AD4(v97, v98, 1u);
        if (qword_1ED4BF430 != -1)
          swift_once();
        v94 = 0;
        v95 = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        sub_1B2228890();
        sub_1B222805C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        v36 = v94;
        v37 = v95;
        v38 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v94 = 0;
        swift_retain();
        sub_1B1F1AD70(v38, &v94, v36, v37);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v39 = (const __CFURL *)sub_1B2228074();
        v40 = CGImageSourceCreateWithURL(v39, 0);

        if (v40)
        {
          ImageAtIndex = CGImageSourceCreateImageAtIndex(v40, 0, 0);
          if (ImageAtIndex)
          {
            v42 = ImageAtIndex;
            v43 = sub_1B2228110();
            v44 = MEMORY[0x1E0CAFFF8];
            v45 = *(_QWORD *)(v43 - 8);
            (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v10, a1, v43);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v10, 0, 1, v43);
            v46 = v92;
            v47 = v88;
            sub_1B20FB6E8(v42, v91, v93, (uint64_t)v10, v89, v90);
            sub_1B1AEA224((uint64_t)v10, (uint64_t)&qword_1ED4BF720, (uint64_t)v44, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
            if (v47 || (v74 = *v46) == 0)
            {

            }
            else
            {
              sub_1B222805C();
              v75 = (void *)sub_1B2228728();
              swift_bridgeObjectRelease();
              objc_msgSend(v74, sel_setLabel_, v75);

            }
            goto LABEL_45;
          }

        }
        v94 = 0;
        v95 = 0xE000000000000000;
        sub_1B2229430();
        swift_bridgeObjectRelease();
        v94 = 0xD000000000000018;
        v95 = 0x80000001B234CC10;
        sub_1B2228110();
        sub_1B19E52CC((unint64_t *)&qword_1EEF5AE60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v71 = v94;
        v72 = v95;
        sub_1B21158FC();
        swift_allocError();
        *(_QWORD *)v73 = v71;
        *(_QWORD *)(v73 + 8) = v72;
        *(_BYTE *)(v73 + 16) = 0;
        swift_willThrow();

LABEL_45:
        return;
      }
      sub_1B2024AD4(v97, v98, v99);
    }

    v97 = 0;
    v98 = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    v94 = (uint64_t)v5;
    sub_1B22295EC();
    v51 = v97;
    v52 = v98;
    sub_1B21158FC();
    swift_allocError();
    *(_QWORD *)v53 = v51;
    *(_QWORD *)(v53 + 8) = v52;
    *(_BYTE *)(v53 + 16) = 0;
    swift_willThrow();

    return;
  }
  sub_1B2228014();
  v48 = sub_1B22287B8();
  v50 = v49;
  swift_bridgeObjectRelease();
  if (v48 == 2053403509 && v50 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_29:
    v55 = (void *)sub_1B2114BFC();
    if (v5)
      return;
    if (v55)
    {
      v56 = v55;
      v57 = CGImageSourceCreateWithData(v56, 0);
      if (v57)
      {
        v58 = v57;
        v88 = v56;
        v59 = CGImageSourceCreateImageAtIndex(v57, 0, 0);
        if (v59)
        {
          v60 = v59;
          v61 = sub_1B2228110();
          v62 = *(_QWORD *)(v61 - 8);
          (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v18, a1, v61);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v18, 0, 1, v61);
          v63 = v92;
          sub_1B20FB6E8(v60, v91, v93, (uint64_t)v18, v89, v90);
          sub_1B1AEA224((uint64_t)v18, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
          v84 = *v63;
          if (*v63)
          {
            v85 = (void *)sub_1B2228728();
            swift_bridgeObjectRelease();
            objc_msgSend(v84, sel_setLabel_, v85);

          }
          else
          {
            swift_bridgeObjectRelease();
          }

          v86 = v88;
          return;
        }

        v56 = v88;
      }
      v97 = 0;
      v98 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v97 = 0xD00000000000001BLL;
      v98 = 0x80000001B234CC60;
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v79 = v97;
      v80 = v98;
      sub_1B21158FC();
      swift_allocError();
      *(_QWORD *)v81 = v79;
      *(_QWORD *)(v81 + 8) = v80;
      *(_BYTE *)(v81 + 16) = 0;
      swift_willThrow();

      return;
    }
    v97 = 0;
    v98 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v97 = 0xD000000000000026;
    v98 = 0x80000001B234CC30;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
LABEL_48:
    v76 = v97;
    v77 = v98;
    sub_1B21158FC();
    swift_allocError();
    *(_QWORD *)v78 = v76;
    *(_QWORD *)(v78 + 8) = v77;
    *(_BYTE *)(v78 + 16) = 0;
    swift_willThrow();
    return;
  }
  v54 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v54 & 1) != 0)
    goto LABEL_29;
  v64 = (const __CFURL *)sub_1B2228074();
  v65 = CGImageSourceCreateWithURL(v64, 0);

  if (!v65)
  {
LABEL_47:
    v97 = 0;
    v98 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v97 = 0xD000000000000018;
    v98 = 0x80000001B234CC10;
    sub_1B2228110();
    sub_1B19E52CC((unint64_t *)&qword_1EEF5AE60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  v66 = CGImageSourceCreateImageAtIndex(v65, 0, 0);
  if (!v66)
  {

    goto LABEL_47;
  }
  v67 = v66;
  v68 = sub_1B2228110();
  v69 = *(_QWORD *)(v68 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v14, a1, v68);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v14, 0, 1, v68);
  v70 = v92;
  sub_1B20FB6E8(v67, v91, v93, (uint64_t)v14, v89, v90);
  if (v5)
  {
    sub_1B1AEA224((uint64_t)v14, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  }
  else
  {
    sub_1B1AEA224((uint64_t)v14, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
    v82 = *v70;
    if (*v70)
    {
      sub_1B222805C();
      v83 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      objc_msgSend(v82, sel_setLabel_, v83);

    }
  }

}

uint64_t sub_1B20FD77C(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  os_signpost_id_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE v30[4];
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = sub_1B2228380();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v30[-v11];
  swift_getObjectType();
  result = (uint64_t)objc_msgSend(a1, sel_mipmapLevelCount);
  if (result >= 2)
  {
    if (qword_1ED4BA0E0 != -1)
      swift_once();
    v14 = sub_1B22283B0();
    sub_1B1B40EC8(v14, (uint64_t)qword_1ED4D0E48);
    sub_1B2228398();
    sub_1B2228368();
    swift_unknownObjectRetain_n();
    v15 = sub_1B2228398();
    v16 = sub_1B2228FB0();
    if ((sub_1B2229094() & 1) != 0)
    {
      v31 = v16;
      v32 = a2;
      v33 = v5;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v8, v12, v4);
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v35 = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = objc_msgSend(a1, sel_label);
      if (v19)
      {
        v20 = v19;
        v21 = sub_1B222874C();
        v23 = v22;

      }
      else
      {
        v21 = sub_1B1F9DE5C();
        v23 = v24;
      }
      v34 = sub_1B1B3EF90(v21, v23, &v35);
      sub_1B22291D8();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      v25 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v15, (os_signpost_type_t)v31, v25, "generateMipmap", "CB %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E23F88](v18, -1, -1);
      MEMORY[0x1B5E23F88](v17, -1, -1);

      v5 = v33;
      (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v8, v4);
      a2 = v32;
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    v26 = (char *)objc_msgSend(a1, sel_pixelFormat);
    if ((unint64_t)(v26 - 160) <= 0x3A && ((1 << (v26 + 96)) & 0x7FDF1FF7CFD54FFLL) != 0)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v35 = 0;
      v36 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v35 = 0xD000000000000023;
      v36 = 0x80000001B234CB00;
      sub_1B1F9A724((uint64_t)objc_msgSend(a1, sel_pixelFormat));
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v27 = v35;
      v28 = v36;
      v29 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v35 = 0;
      swift_retain();
      sub_1B1F1AD70(v29, &v35, v27, v28);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      objc_msgSend(a2, sel_generateMipmapsForTexture_, a1);
    }
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v12, v4);
  }
  return result;
}

uint64_t *sub_1B20FDB98(uint64_t *result, void *a2, char a3, void *a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  id v38;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *result;
  if (*result)
  {
    v7 = result;
    v9 = result[1];
    v8 = result[2];
    v10 = result[14];
    v48 = v10;
    v11 = *(char **)(v10 + 16);
    if (v11)
    {
      swift_unknownObjectRetain();
      sub_1B1B28C44((uint64_t)&v48);
      v12 = (uint64_t *)(v10 + 48);
      v38 = v11;
      v13 = v11;
      v14 = v4;
      do
      {
        v41 = *v12;
        v42 = *(v12 - 1);
        v40 = *(_OWORD *)(v12 + 1);
        v15 = a2;
        v16 = a4;
        v17 = v12[3];
        v18 = v12[4];
        v19 = v12[5];
        v20 = *(v12 - 2) + v9;
        swift_unknownObjectRetain();
        sub_1B1BA8088(0, 0, 0, &v46);
        v21 = v47;
        v22 = v46;
        v46 = v40;
        v47 = v17;
        a2 = v15;
        v44 = v22;
        v45 = v21;
        v37 = v18;
        a4 = v16;
        objc_msgSend(v16, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, v14, v20, v42, v41, &v46, v15, v37, v19, &v44);
        swift_unknownObjectRelease();
        v12 += 8;
        --v13;
      }
      while (v13);
      sub_1B1B28C6C((uint64_t)&v48);
      if (v38 != objc_msgSend(v15, sel_arrayLength) || (a3 & 1) == 0)
        return (uint64_t *)swift_unknownObjectRelease();
    }
    else
    {
      v43 = v9;
      swift_getObjectType();
      swift_unknownObjectRetain();
      v23 = (uint64_t)objc_msgSend(a2, sel_depth);
      if (v23 <= 1)
        v24 = 1;
      else
        v24 = v23;
      v25 = v8 / v24;
      v26 = sub_1B1F9CFAC(0);
      v28 = v27;
      v30 = v29;
      v31 = *((unsigned __int16 *)v7 + 16);
      v32 = v7[6];
      if ((unint64_t)(v32 - 160) <= 0x3A && ((1 << (v32 + 96)) & 0x7FDF1FF7CFD54FFLL) != 0)
      {
        if ((unint64_t)(v32 - 186) > 0x20)
          LODWORD(v33) = 1;
        else
          v33 = qword_1B22BE938[v32 - 186];
        v34 = 16 * (((int)v33 + (int)v31 - 1) / v33);
        swift_unknownObjectRetain();
      }
      else
      {
        swift_unknownObjectRetain();
        v34 = sub_1B1F9BE6C(v32) * v31;
      }
      sub_1B1BA8088(0, 0, 0, &v46);
      v35 = v47;
      v36 = v46;
      *(_QWORD *)&v46 = v26;
      *((_QWORD *)&v46 + 1) = v28;
      v47 = v30;
      v44 = v36;
      v45 = v35;
      objc_msgSend(a4, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, v4, v43, v34, v25, &v46, a2, 0, 0, &v44);
      swift_unknownObjectRelease();
      if ((a3 & 1) == 0)
        return (uint64_t *)swift_unknownObjectRelease();
    }
    sub_1B20FD77C(a2, a4);
    return (uint64_t *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B20FDE68(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4, uint64_t *a5, void *a6, char a7, void *a8)
{
  uint64_t v9;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v46 = *a5;
  if (*a5)
  {
    v9 = a3;
    v11 = result;
    v12 = a4;
    v41 = a5[1];
    v13 = *((unsigned __int16 *)a5 + 16);
    v14 = *((unsigned __int16 *)a5 + 17);
    v15 = a5[6];
    if (*((unsigned __int16 *)a5 + 18) < 2u)
    {
      swift_unknownObjectRetain();
    }
    else
    {
      v17 = qword_1ED4BF430;
      swift_unknownObjectRetain();
      if (v17 != -1)
        swift_once();
      swift_retain();
      v18 = sub_1B2228E90();
      v9 = a3;
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v49 = 0;
      swift_retain();
      sub_1B1F1AD70(v18, (uint64_t *)&v49, 0xD00000000000002ELL, 0x80000001B234CAA0);
      swift_release();
      swift_release();
      v12 = a4;
    }
    if (a2 <= 1)
      v19 = 1;
    else
      v19 = a2;
    if (v19 >= 1024)
      v19 = 1024;
    if (v11 <= 1)
      v20 = 1;
    else
      v20 = v11;
    if (v20 >= 1024)
      v21 = 1024;
    else
      v21 = v20;
    v22 = v21 * v19;
    if ((v12 & 1) != 0)
      v23 = v21 * v19;
    else
      v23 = v9;
    if (v22 >= v23)
      v22 = v23;
    v43 = v22;
    if (v21 > v13)
      v24 = 1;
    else
      v24 = v13 / v21;
    v25 = v19 > v14;
    v26 = v14 / v19;
    if (v25)
      v27 = 1;
    else
      v27 = v26;
    v39 = a7;
    if ((unint64_t)(v15 - 160) <= 0x3A && ((1 << (v15 + 96)) & 0x7FDF1FF7CFD54FFLL) != 0)
    {
      if ((unint64_t)(v15 - 186) > 0x20)
        LODWORD(v28) = 1;
      else
        v28 = qword_1B22BE938[v15 - 186];
      v29 = 16 * (((int)v28 + (int)v13 - 1) / v28);
      v30 = 1;
    }
    else
    {
      v30 = 0;
      v29 = sub_1B1F9BE6C(v15) * v13;
    }
    swift_getObjectType();
    v31 = sub_1B1F9A54C();
    v32 = v27;
    if (v30)
    {
      if ((unint64_t)(v15 - 186) > 0x20)
        LODWORD(v33) = 1;
      else
        v33 = qword_1B22BEA40[v15 - 186];
      v32 = ((int)v33 + (int)v27 - 1) / v33;
    }
    sub_1B1F9D7EC(v24, v27, 1, 0, v15);
    sub_1B1EFF5B0(v24, v27, &v49);
    if (v43)
    {
      v34 = 0;
      v40 = v49;
      v35 = v50;
      do
      {
        if ((v12 & 0xFF00) == 0x100)
        {
          sub_1B1BA8088(0, 0, v34, &v49);
          v38 = 0;
          v36 = v49;
          v37 = v50;
        }
        else
        {
          sub_1B1BA8088(0, 0, 0, &v49);
          v36 = v49;
          v37 = v50;
          v38 = v34;
        }
        v49 = v40;
        v50 = v35;
        v47 = v36;
        v48 = v37;
        objc_msgSend(a8, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, v46, v41 + v32 * v29 * (v34 / v21) + v34 % v21 * v31, v29, 0, &v49, a6, v38, 0, &v47);
        ++v34;
      }
      while (v43 != v34);
    }
    if ((v39 & 1) != 0)
      sub_1B20FD77C(a6, a8);
    return swift_unknownObjectRelease();
  }
  return result;
}

double sub_1B20FE1E8@<D0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[32];
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 v58;

  v5 = (uint64_t)(v2 + 4);
  v6 = *v2;
  v34 = *((_BYTE *)a1 + 73);
  v35 = *((_BYTE *)a1 + 72);
  v32 = *((_BYTE *)a1 + 75);
  v33 = *((_BYTE *)a1 + 74);
  v39 = *((_QWORD *)a1 + 7);
  v40 = *((_QWORD *)a1 + 8);
  v38 = *((_QWORD *)a1 + 6);
  v7 = *((_QWORD *)a1 + 3);
  v41 = *((_QWORD *)a1 + 2);
  v36 = *((_BYTE *)a1 + 9);
  v37 = *((_BYTE *)a1 + 10);
  v29 = *((_BYTE *)a1 + 8);
  v8 = a1[3];
  v9 = a1[2];
  v10 = a1[1];
  v11 = *a1;
  sub_1B1A18378(v5, (uint64_t)v42, &qword_1ED4B7940, (uint64_t)&type metadata for TextureRequireAnimationRepresentation);
  sub_1B1A18378((uint64_t)v42, (uint64_t)&v55, &qword_1ED4B7940, (uint64_t)&type metadata for TextureRequireAnimationRepresentation);
  if ((v58 & 0xFF00) == 0x300 || !HIBYTE(v58))
  {
    v18 = v34;
    v17 = v35;
    v20 = v32;
    v19 = v33;
    v15 = v7;
    v16 = v29;
  }
  else
  {
    v12 = v56;
    v13 = v55;
    if (v56 <= 1)
      v12 = 1;
    if (v12 >= 1024)
      v12 = 1024;
    if (v55 <= 1)
      v13 = 1;
    if (v13 >= 1024)
      v13 = 1024;
    if ((v58 & 1) != 0)
      v14 = v13 * v12;
    else
      v14 = v57;
    if (v13 * v12 < v14)
      LOWORD(v14) = v13 * v12;
    v15 = 3;
    if (HIBYTE(v58) == 1)
    {
      v15 = 7;
      v8 = 1;
    }
    else
    {
      v8 = v14;
    }
    if (HIBYTE(v58) == 1)
      v9 = v14;
    else
      v9 = 1;
    if (v13 > v11)
      LOWORD(v11) = 1;
    else
      LODWORD(v11) = v11 / v13;
    if (v12 <= v10)
    {
      LODWORD(v10) = v10 / (unsigned __int16)v12;
      if ((v6 & 0x40) == 0)
      {
        v16 = 1;
        goto LABEL_31;
      }
    }
    else
    {
      LOWORD(v10) = 1;
      if ((v6 & 0x40) == 0)
      {
        v16 = 1;
LABEL_31:
        v18 = v34;
        v17 = v35;
        v20 = v32;
        v19 = v33;
        goto LABEL_39;
      }
    }
    if ((unint64_t)(v41 - 160) <= 0x3A && ((1 << (v41 + 96)) & 0x7FDF1FF7CFD54FFLL) != 0)
    {
      v30 = v15;
      if (qword_1ED4BF430 != -1)
        swift_once();
      v43 = 0;
      v44 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      type metadata accessor for MTLPixelFormat(0);
      sub_1B22295EC();
      v21 = v43;
      v22 = v44;
      v23 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v43 = 0;
      swift_retain();
      sub_1B1F1AD70(v23, &v43, v21, v22);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v16 = 1;
      v18 = v34;
      v17 = v35;
      v20 = v32;
      v19 = v33;
      v15 = v30;
    }
    else
    {
      LOWORD(v43) = v11;
      WORD1(v43) = v10;
      WORD2(v43) = v9;
      HIWORD(v43) = v8;
      LOBYTE(v44) = v29;
      BYTE1(v44) = v36;
      BYTE2(v44) = v37;
      v45 = v41;
      v46 = v15;
      v47 = *((_OWORD *)a1 + 2);
      v48 = v38;
      v49 = v39;
      v50 = v40;
      v18 = v34;
      v17 = v35;
      v51 = v35;
      v52 = v34;
      v20 = v32;
      v19 = v33;
      v53 = v33;
      v54 = v32;
      v31 = v11;
      v25 = v10;
      v26 = v9;
      v27 = v8;
      v28 = v15;
      v16 = sub_1B20F1554();
      v15 = v28;
      v8 = v27;
      v9 = v26;
      LOWORD(v10) = v25;
      LOWORD(v11) = v31;
    }
  }
LABEL_39:
  *(_WORD *)a2 = v11;
  *(_WORD *)(a2 + 2) = v10;
  *(_WORD *)(a2 + 4) = v9;
  *(_WORD *)(a2 + 6) = v8;
  *(_BYTE *)(a2 + 8) = v16;
  *(_BYTE *)(a2 + 9) = v36;
  *(_BYTE *)(a2 + 10) = v37;
  *(_QWORD *)(a2 + 16) = v41;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)&result = 2;
  *(_OWORD *)(a2 + 32) = xmmword_1B2298AF0;
  *(_QWORD *)(a2 + 48) = v38;
  *(_QWORD *)(a2 + 56) = v39;
  *(_QWORD *)(a2 + 64) = v40;
  *(_BYTE *)(a2 + 72) = v17;
  *(_BYTE *)(a2 + 73) = v18;
  *(_BYTE *)(a2 + 74) = v19;
  *(_BYTE *)(a2 + 75) = v20;
  return result;
}

uint64_t sub_1B20FE5E0(void *a1, id *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v9 = objc_msgSend(*a2, sel_pixelFormat);
  if (v9 != (id)11 && v9 != (id)71 && v9 != (id)81)
  {
    v21 = *a5;
    v20 = a5[1];
    sub_1B222A0CC();
    swift_bridgeObjectRetain_n();
    sub_1B2228824();
    sub_1B222A078();
    sub_1B222A078();
    sub_1B222A084();
    v35 = v30;
    v36 = v31;
    v37 = v32;
    v33 = v28;
    v34 = v29;
    v22 = sub_1B222A0B4();
    *(_QWORD *)&v28 = v21;
    *((_QWORD *)&v28 + 1) = v20;
    v29 = 0uLL;
    v30 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v31 = v22;
    v23 = sub_1B1B3947C((uint64_t)&v28, 0, 0);
    v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    swift_getObjectType();
    objc_msgSend(a1, sel_setTexture_atIndex_, *a2, 0);
    v26 = *a2;
    swift_unknownObjectRetain();
    sub_1B1F40F48(v23, (uint64_t)v26, 0);
    goto LABEL_7;
  }
  v11 = *a4;
  v10 = a4[1];
  sub_1B222A0CC();
  swift_bridgeObjectRetain_n();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v35 = v30;
  v36 = v31;
  v37 = v32;
  v33 = v28;
  v34 = v29;
  v12 = sub_1B222A0B4();
  *(_QWORD *)&v28 = v11;
  *((_QWORD *)&v28 + 1) = v10;
  v29 = 0uLL;
  v30 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v31 = v12;
  v13 = sub_1B1B3947C((uint64_t)&v28, 0, 0);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  v16 = *a2;
  v17 = objc_msgSend((id)swift_unknownObjectRetain(), sel_pixelFormat);
  v18 = objc_msgSend(v16, sel_newTextureViewWithPixelFormat_, sub_1B1F9DA94((uint64_t)v17));
  swift_unknownObjectRelease();
  if (v18)
  {
    swift_getObjectType();
    objc_msgSend(a1, sel_setTexture_atIndex_, v18, 0);
    v19 = *a2;
    swift_unknownObjectRetain();
    sub_1B1F40F48(v13, (uint64_t)v19, 0);
    swift_unknownObjectRelease();
LABEL_7:
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7990);
  sub_1B22295EC();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B20FE984()
{
  uint64_t v0;
  _BYTE v2[80];
  _BYTE v3[80];
  _BYTE v4[80];

  sub_1B1B9A484(v0, (uint64_t)v2);
  if ((v2[64] & 0x80000000) != 0)
    return 0;
  sub_1B1B2A86C((uint64_t)v2, (uint64_t)v3);
  sub_1B1B2A86C((uint64_t)v3, (uint64_t)v4);
  return qword_1B22BEB48[v4[64]];
}

uint64_t sub_1B20FE9EC(_QWORD *a1, unsigned int *a2, unint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char **v53;
  void *v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t result;
  __int128 v109;
  int v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  char *v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t KeyPath;
  uint64_t v145;
  uint64_t v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  double v155;
  char v156;
  double v157;
  char v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  char v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  __int16 v188;
  __int16 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  id v195;
  char v196;
  BOOL v197;
  char v198;
  id v199;
  id v200;
  void *v201;
  _QWORD *v202;
  void *v203;
  void *v204;
  void *v205;
  void *v206;
  void *v207;
  id v208;
  int v209;
  id v210;
  id v211;
  id v212;
  id v213;
  uint64_t v214;
  _BYTE v215[4];
  int v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  id v223;
  unint64_t v224;
  id v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  _QWORD *v231;
  int64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  int v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  _UNKNOWN **v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  char *v252;
  void *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  _UNKNOWN **v260;
  uint64_t v261;
  uint64_t v262;
  char v263;
  char v264;
  char v265;
  char v266;
  void *v267;
  uint64_t v268;
  char v269;
  _BYTE v270[80];
  _QWORD v271[8];
  unsigned __int8 v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  _UNKNOWN **v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  char v281;
  char v282;
  char v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  uint64_t v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD v307[7];
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  __int16 v316;
  __int16 v317;
  __int16 v318;
  __int16 v319;
  char v320;
  char v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int64_t v326;
  _UNKNOWN **v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  char v331;
  char v332;
  char v333;
  unsigned __int128 v334;
  uint64_t v335;
  uint64_t v336;
  __int128 v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341[3];

  v250 = a3;
  v231 = a1;
  sub_1B1D12E00();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = &v215[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = &v215[-v16];
  v18 = *((unsigned __int16 *)a2 + 12);
  v239 = *((unsigned __int16 *)a2 + 13);
  v240 = v18;
  v19 = *((unsigned __int16 *)a2 + 14);
  v237 = *((unsigned __int16 *)a2 + 15);
  v238 = v19;
  v234 = *((unsigned __int8 *)a2 + 32);
  v236 = *((unsigned __int8 *)a2 + 33);
  v20 = *((unsigned __int8 *)a2 + 34);
  v251 = *((_QWORD *)a2 + 5);
  v21 = *((_QWORD *)a2 + 6);
  v241 = *((_QWORD *)a2 + 7);
  v232 = *((_QWORD *)a2 + 8);
  v248 = (_UNKNOWN **)*((_QWORD *)a2 + 9);
  v249 = v21;
  v22 = *((_QWORD *)a2 + 10);
  v246 = *((_QWORD *)a2 + 11);
  v247 = v22;
  LODWORD(v22) = *((unsigned __int8 *)a2 + 96);
  v244 = *((unsigned __int8 *)a2 + 97);
  v245 = v22;
  LODWORD(v22) = *((unsigned __int8 *)a2 + 98);
  v242 = *((unsigned __int8 *)a2 + 99);
  v243 = v22;
  v235 = v20;
  v269 = v20;
  v24 = *a2;
  v23 = a2[1];
  swift_retain();
  v252 = a4;
  v233 = a5;
  if (__PAIR64__(v23, v24) != 0xFFFFFFFF)
  {
    v230 = v17;
    v89 = v24 | (v23 << 32);
    v90 = sub_1B1D16900(v89);
    if (v90)
    {
      sub_1B1DCC728(v90, v307);
      swift_bridgeObjectRelease();
      sub_1B1B4D278((uint64_t)v307, (uint64_t)&v308, &qword_1EEF635F8, (uint64_t (*)(uint64_t))sub_1B2115CCC);
      if (*((_QWORD *)&v308 + 1))
      {
        v92 = *((_QWORD *)&v309 + 1);
        v91 = v309;
        v228 = *((_QWORD *)&v310 + 1);
        v229 = v310;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_OWORD *)(a2 + 26) = __PAIR128__(v92, v91);
        v93 = v92;
        v95 = v228;
        v94 = v229;
        *((_QWORD *)a2 + 15) = v229;
        *((_QWORD *)a2 + 16) = v95;
        v96 = *((_QWORD *)a2 + 1);
        v97 = *((_QWORD *)a2 + 2);
        v98 = *((_QWORD *)a2 + 19);
        v99 = *((_QWORD *)a2 + 20);
        v313 = __PAIR64__(v23, v24);
        v314 = v96;
        v315 = v97;
        v316 = v240;
        v317 = v239;
        v318 = v238;
        v319 = v237;
        v320 = v234;
        v321 = v236;
        v322 = v235;
        v323 = v251;
        v324 = v249;
        v325 = v241;
        v326 = v232;
        v327 = v248;
        v328 = v247;
        v329 = v246;
        v330 = v245;
        v331 = v244;
        v332 = v243;
        v333 = v242;
        v334 = __PAIR128__(v93, v91);
        v335 = v94;
        v336 = v95;
        v337 = *(_OWORD *)(a2 + 34);
        v338 = v98;
        v339 = v99;
        v100 = sub_1B20F9F48();
        v102 = v101;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *((_QWORD *)a2 + 19) = v100;
        *((_QWORD *)a2 + 20) = v102;
      }
    }
    sub_1B1D16B3C(v89, (uint64_t)v11);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13) == 1)
    {
      sub_1B1A04628((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1B1D12E00);
      return swift_release();
    }
    v103 = v230;
    sub_1B2115AC4((uint64_t)v11, (uint64_t)v230);
    v104 = *(_QWORD *)&v103[*(int *)(v13 + 44)];
    if (v104)
    {
      if (v104 >> 62)
      {
        swift_bridgeObjectRetain();
        if (sub_1B22296AC())
        {
LABEL_54:
          if ((v104 & 0xC000000000000001) != 0)
          {
            v106 = MEMORY[0x1B5E21018](0, v104);
          }
          else
          {
            v106 = *(_QWORD *)(v104 + 32);
            swift_unknownObjectRetain();
          }
          swift_bridgeObjectRelease();
          v40 = sub_1B1B3B8B4(v106);
          v42 = v107;
          swift_unknownObjectRelease();
          sub_1B2115B28((uint64_t)v230);
          if (v42)
            goto LABEL_5;
LABEL_57:
          swift_release();
          return swift_unknownObjectRelease();
        }
      }
      else
      {
        v105 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v105)
          goto LABEL_54;
      }
      swift_bridgeObjectRelease();
      v103 = v230;
    }
    sub_1B2115B28((uint64_t)v103);
    return swift_release();
  }
  if (qword_1EEF57578 != -1)
    swift_once();
  v26 = *((_QWORD *)a2 + 1);
  v25 = *((_QWORD *)a2 + 2);
  swift_retain();
  swift_bridgeObjectRetain();
  v27 = sub_1B213ADD4(v26, v25, 0x6C7070612E6D6F63, 0xED00007866762E65);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *((_QWORD *)a2 + 13) = v27;
  *((_QWORD *)a2 + 14) = v29;
  *((_QWORD *)a2 + 15) = v31;
  *((_QWORD *)a2 + 16) = v33;
  v34 = *((_QWORD *)a2 + 19);
  v35 = *((_QWORD *)a2 + 20);
  v313 = 0xFFFFFFFFLL;
  v314 = v26;
  v315 = v25;
  v316 = v240;
  v317 = v239;
  v318 = v238;
  v319 = v237;
  v320 = v234;
  v321 = v236;
  v322 = v235;
  v323 = v251;
  v324 = v249;
  v325 = v241;
  v326 = v232;
  v327 = v248;
  v328 = v247;
  v329 = v246;
  v330 = v245;
  v331 = v244;
  v332 = v243;
  v333 = v242;
  *(_QWORD *)&v334 = v27;
  *((_QWORD *)&v334 + 1) = v29;
  v335 = v31;
  v336 = v33;
  v337 = *(_OWORD *)(a2 + 34);
  v338 = v34;
  v339 = v35;
  v36 = sub_1B20F9F48();
  v38 = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *((_QWORD *)a2 + 19) = v36;
  *((_QWORD *)a2 + 20) = v38;
  sub_1B222A0CC();
  swift_bridgeObjectRetain_n();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v310 = v297;
  v311 = v298;
  v312 = v299;
  v309 = v296;
  v308 = v295;
  v39 = sub_1B222A0B4();
  v307[0] = v26;
  v307[1] = v25;
  v307[3] = 0;
  v307[2] = 0;
  v307[4] = MEMORY[0x1E0DEE9D8];
  v307[5] = 0;
  v307[6] = v39;
  v40 = sub_1B1B3947C((uint64_t)v307, 1, 0);
  v42 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v42)
    goto LABEL_57;
LABEL_5:
  v223 = v40;
  v225 = v42;
  v43 = objc_msgSend(v225, sel_bindings);
  sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7980);
  v44 = sub_1B2228AB8();

  if (!(v44 >> 62))
  {
    v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v45)
      goto LABEL_7;
LABEL_59:
    swift_bridgeObjectRelease_n();
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v295 = 0;
    *((_QWORD *)&v295 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v109 = v295;
    v110 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v295 = 0;
    swift_retain();
    sub_1B1F1AD70(v110, (uint64_t *)&v295, v109, *((uint64_t *)&v109 + 1));
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v111 = v225;

    swift_release();
    return swift_unknownObjectRelease();
  }
  swift_bridgeObjectRetain();
  v45 = sub_1B22296AC();
  if (!v45)
    goto LABEL_59;
LABEL_7:
  v46 = 0;
  v224 = HIDWORD(v250);
  while (1)
  {
    if ((v44 & 0xC000000000000001) != 0)
    {
      v47 = (void *)MEMORY[0x1B5E21018](v46, v44);
    }
    else
    {
      v47 = *(void **)(v44 + 8 * v46 + 32);
      swift_unknownObjectRetain();
    }
    if (objc_msgSend(v47, sel_type) == (id)2 && objc_msgSend(v47, sel_access) == (id)2)
      break;
    swift_unknownObjectRelease();
    if (v45 == ++v46)
      goto LABEL_59;
  }
  v219 = v47;
  swift_bridgeObjectRelease_n();
  v48 = swift_bridgeObjectRetain();
  v268 = sub_1B1F4CE84(v48);
  v229 = *((_QWORD *)a2 + 17);
  swift_bridgeObjectRetain();
  v49 = objc_msgSend(v225, sel_bindings);
  v50 = sub_1B2228AB8();

  if (v50 >> 62)
  {
    swift_bridgeObjectRetain();
    v51 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v51)
      goto LABEL_16;
  }
  else
  {
    v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v51)
    {
LABEL_16:
      v52 = 0;
      v53 = &selRef_frontVectorWithPointOfView_;
      do
      {
        if ((v50 & 0xC000000000000001) != 0)
        {
          v54 = (void *)MEMORY[0x1B5E21018](v52, v50);
        }
        else
        {
          v54 = *(void **)(v50 + 8 * v52 + 32);
          swift_unknownObjectRetain();
        }
        if (objc_msgSend(v54, sel_access)
          || objc_msgSend(v54, sel_type)
          || (sub_1B1BA5C1C((uint64_t)objc_msgSend(v54, v53[114])),
              v253 = &unk_1EF028578,
              (v55 = swift_dynamicCastObjCProtocolConditional()) == 0))
        {
          swift_unknownObjectRelease();
        }
        else
        {
          v56 = (void *)v55;
          swift_unknownObjectRetain();

          v230 = (char *)objc_msgSend(v56, sel_bufferDataType);
          v57 = objc_msgSend(v54, v53[114]);
          v58 = (uint64_t)v57;
          v59 = *((_QWORD *)a2 + 17);
          if (!*(_QWORD *)(v59 + 16)
            || (v232 = (int64_t)v57, v60 = sub_1B1DC3AC8((uint64_t)v57), v58 = v232, (v61 & 1) == 0)
            || (sub_1B1B9A484(*(_QWORD *)(v59 + 56) + 80 * v60, (uint64_t)&v306),
                v62 = sub_1B20FE984(),
                v58 = v232,
                (v63 & 1) != 0)
            || (char *)v62 != v230)
          {
            sub_1B1B2AE34((uint64_t)v230, (uint64_t)v270);
            sub_1B1A18378((uint64_t)v270, (uint64_t)v271, (unint64_t *)&qword_1ED4BA1B8, (uint64_t)&type metadata for DataValue);
            if (v272 != 255)
            {
              LODWORD(v230) = v272;
              v217 = v271[0];
              v218 = v271[1];
              v220 = v271[2];
              v221 = v271[3];
              v222 = v271[4];
              v226 = v271[5];
              v227 = v271[6];
              v228 = v271[7];
              LODWORD(v232) = swift_isUniquelyReferenced_nonNull_native();
              v64 = v58;
              *(_QWORD *)&v295 = *((_QWORD *)a2 + 17);
              v65 = v295;
              *((_QWORD *)a2 + 17) = 0x8000000000000000;
              v67 = sub_1B1DC3AC8(v64);
              v68 = v66;
              v69 = *(_QWORD *)(v65 + 16) + ((v66 & 1) == 0);
              if (*(_QWORD *)(v65 + 24) >= v69)
              {
                if ((v232 & 1) == 0)
                {
                  v232 = v67;
                  v216 = v66;
                  sub_1B1EAA9D8();
                  v68 = v216;
                  v67 = v232;
                }
              }
              else
              {
                v216 = v66;
                sub_1B1E95854(v69, v232);
                v232 = v64;
                v70 = sub_1B1DC3AC8(v64);
                v68 = v216;
                if ((v216 & 1) != (v71 & 1))
                {
                  result = sub_1B2229FC4();
                  __break(1u);
                  return result;
                }
                v67 = v70;
                v64 = v232;
              }
              v77 = (char)v230;
              v79 = v227;
              v78 = v228;
              v80 = v226;
              v81 = v221;
              v82 = v222;
              v83 = v220;
              v85 = v217;
              v84 = v218;
              v86 = (_QWORD *)v295;
              if ((v68 & 1) != 0)
              {
                v87 = *(_QWORD *)(v295 + 56) + 80 * v67;
                *(_QWORD *)v87 = v217;
                *(_QWORD *)(v87 + 8) = v84;
                *(_QWORD *)(v87 + 16) = v83;
                *(_QWORD *)(v87 + 24) = v81;
                *(_QWORD *)(v87 + 32) = v82;
                *(_QWORD *)(v87 + 40) = v80;
                *(_QWORD *)(v87 + 48) = v79;
                *(_QWORD *)(v87 + 56) = v78;
                *(_BYTE *)(v87 + 64) = v77;
              }
              else
              {
                *(_QWORD *)(v295 + 8 * (v67 >> 6) + 64) |= 1 << v67;
                *(_QWORD *)(v86[6] + 8 * v67) = v64;
                v88 = v86[7] + 80 * v67;
                *(_QWORD *)v88 = v85;
                *(_QWORD *)(v88 + 8) = v84;
                *(_QWORD *)(v88 + 16) = v83;
                *(_QWORD *)(v88 + 24) = v81;
                *(_QWORD *)(v88 + 32) = v82;
                *(_QWORD *)(v88 + 40) = v80;
                *(_QWORD *)(v88 + 48) = v79;
                *(_QWORD *)(v88 + 56) = v78;
                *(_BYTE *)(v88 + 64) = v77;
                ++v86[2];
              }
              *((_QWORD *)a2 + 17) = v86;
              swift_unknownObjectRelease_n();
              goto LABEL_45;
            }
            v72 = sub_1B1DC3AC8(v58);
            if ((v73 & 1) != 0)
            {
              v74 = v72;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v76 = *((_QWORD *)a2 + 17);
              *(_QWORD *)&v295 = v76;
              *((_QWORD *)a2 + 17) = 0x8000000000000000;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                sub_1B1EAA9D8();
                v76 = v295;
              }
              sub_1B1EA59A0(v74, v76);
              *((_QWORD *)a2 + 17) = v76;
              swift_unknownObjectRelease_n();
LABEL_45:
              swift_bridgeObjectRelease();
              v53 = &selRef_frontVectorWithPointOfView_;
              goto LABEL_22;
            }
          }
          swift_unknownObjectRelease_n();
          v53 = &selRef_frontVectorWithPointOfView_;
        }
LABEL_22:
        ++v52;
      }
      while (v51 != v52);
    }
  }
  swift_bridgeObjectRelease();
  v112 = v268;
  v113 = v268 + 56;
  v114 = 1 << *(_BYTE *)(v268 + 32);
  v115 = -1;
  if (v114 < 64)
    v115 = ~(-1 << v114);
  v116 = v115 & *(_QWORD *)(v268 + 56);
  v117 = (unint64_t)(v114 + 63) >> 6;
  swift_bridgeObjectRetain();
  v118 = 0;
  v232 = v117 - 5;
  v230 = (char *)(v112 + 96);
  while (v116)
  {
    v119 = __clz(__rbit64(v116));
    v116 &= v116 - 1;
    v120 = v119 | (v118 << 6);
LABEL_87:
    v123 = sub_1B1DC3AC8(*(_QWORD *)(*(_QWORD *)(v112 + 48) + 8 * v120));
    if ((v124 & 1) != 0)
    {
      v125 = v123;
      v126 = swift_isUniquelyReferenced_nonNull_native();
      v127 = *((_QWORD *)a2 + 17);
      *(_QWORD *)&v295 = v127;
      *((_QWORD *)a2 + 17) = 0x8000000000000000;
      if ((v126 & 1) == 0)
      {
        sub_1B1EAA9D8();
        v127 = v295;
      }
      sub_1B1EA59A0(v125, v127);
      *((_QWORD *)a2 + 17) = v127;
      swift_bridgeObjectRelease();
    }
  }
  v121 = v118 + 1;
  if (v118 + 1 >= v117)
    goto LABEL_91;
  v122 = *(_QWORD *)(v113 + 8 * v121);
  if (v122)
    goto LABEL_86;
  v121 = v118 + 2;
  if (v118 + 2 >= v117)
    goto LABEL_91;
  v122 = *(_QWORD *)(v113 + 8 * v121);
  if (v122)
    goto LABEL_86;
  v121 = v118 + 3;
  if (v118 + 3 >= v117)
    goto LABEL_91;
  v122 = *(_QWORD *)(v113 + 8 * v121);
  if (v122)
    goto LABEL_86;
  v121 = v118 + 4;
  if (v118 + 4 >= v117)
    goto LABEL_91;
  v122 = *(_QWORD *)(v113 + 8 * v121);
  if (v122)
  {
LABEL_86:
    v116 = (v122 - 1) & v122;
    v120 = __clz(__rbit64(v122)) + (v121 << 6);
    v118 = v121;
    goto LABEL_87;
  }
  while (v232 != v118)
  {
    v122 = *(_QWORD *)&v230[8 * v118++];
    if (v122)
    {
      v121 = v118 + 4;
      goto LABEL_86;
    }
  }
LABEL_91:
  swift_release();
  v128 = sub_1B1D491F8(*((_QWORD *)a2 + 17), v229);
  swift_bridgeObjectRelease();
  if ((v128 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v129 = v252;
    v130 = v250;
  }
  else
  {
    v131 = *((_OWORD *)a2 + 9);
    v303 = *((_OWORD *)a2 + 8);
    v304 = v131;
    v305 = *((_QWORD *)a2 + 20);
    v132 = *((_OWORD *)a2 + 5);
    v299 = *((_OWORD *)a2 + 4);
    v300 = v132;
    v133 = *((_OWORD *)a2 + 7);
    v301 = *((_OWORD *)a2 + 6);
    v302 = v133;
    v134 = *((_OWORD *)a2 + 1);
    v295 = *(_OWORD *)a2;
    v296 = v134;
    v135 = *((_OWORD *)a2 + 3);
    v297 = *((_OWORD *)a2 + 2);
    v298 = v135;
    v136 = *((_QWORD *)&v304 + 1);
    v137 = v305;
    v138 = sub_1B20F9F48();
    v140 = v139;
    v341[0] = v136;
    sub_1B1B28C6C((uint64_t)v341);
    v340 = v137;
    sub_1B1B28C6C((uint64_t)&v340);
    *((_QWORD *)a2 + 19) = v138;
    *((_QWORD *)a2 + 20) = v140;
    v129 = v252;
    v222 = OBJC_IVAR____TtC3VFX13EntityManager_replicationStream;
    v130 = v250;
    if (*(_QWORD *)&v252[OBJC_IVAR____TtC3VFX13EntityManager_replicationStream])
    {
      v141 = *((_QWORD *)&v301 + 1);
      v142 = v302;
      v143 = v303;
      KeyPath = swift_getKeyPath();
      *(_QWORD *)&v284 = __PAIR64__(v224, v130);
      *((_QWORD *)&v284 + 1) = v129;
      sub_1B1B0B8A4();
      *((_QWORD *)&v286 + 1) = v145;
      *(_QWORD *)&v287 = &off_1E639B2E0;
      v146 = swift_allocObject();
      *(_QWORD *)&v285 = v146;
      *(_QWORD *)(v146 + 16) = KeyPath;
      *(_QWORD *)(v146 + 24) = v141;
      *(_OWORD *)(v146 + 32) = v142;
      *(_QWORD *)(v146 + 48) = v143;
      BYTE8(v287) = 11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1E2DB30((uint64_t)&v284);
      sub_1B1ADF058((uint64_t)&v284);
      v147 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 16);
      if (v147)
      {
        v148 = swift_bridgeObjectRetain();
        v149 = 72;
        v220 = MEMORY[0x1E0DEE9B8] + 8;
        v221 = v148;
        do
        {
          v232 = v147;
          v150 = *(_QWORD *)(v148 + v149);
          v151 = *(_QWORD *)(v150 + 24);
          v229 = *(_QWORD *)(v150 + 16);
          v230 = (char *)v149;
          v152 = *(_QWORD *)(v150 + 40);
          v153 = *(_QWORD *)(v150 + 144);
          v227 = *(_QWORD *)(v150 + 152);
          v228 = v153;
          v154 = *(_BYTE *)(v150 + 188);
          v155 = *(float *)(v150 + 184);
          if (v154)
            v155 = 0.0;
          v226 = *(_QWORD *)&v155;
          v156 = *(_BYTE *)(v150 + 196);
          if (v156)
            v157 = 0.0;
          else
            v157 = *(float *)(v150 + 192);
          v158 = *(_BYTE *)(v150 + 204);
          if (v158)
            v159 = 0.0;
          else
            v159 = *(float *)(v150 + 200);
          v273 = 0u;
          v274 = 0u;
          swift_retain_n();
          swift_bridgeObjectRetain();
          v214 = *(_QWORD *)&v159;
          v129 = v252;
          v160 = *(_QWORD *)&v157;
          v130 = v250;
          v161 = sub_1B1A23334(v152, (uint64_t)&v273, v229, v151, v226, v154, v160, v156, v214, v158, v228, v227, 0, 0, 0, (uint64_t)&type metadata for TextureShaderAsset, v152, (uint64_t)&off_1E6396670);
          swift_bridgeObjectRelease();
          sub_1B1AEA224((uint64_t)&v273, (uint64_t)&qword_1ED4BB150, v220, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
          v162 = *(_QWORD *)(v161 + 32);
          swift_retain();
          swift_release();
          v163 = *(_QWORD *)(v150 + 16);
          v164 = *(_QWORD *)(v150 + 24);
          v165 = *((_OWORD *)a2 + 9);
          v292 = *((_OWORD *)a2 + 8);
          v293 = v165;
          v294 = *((_QWORD *)a2 + 20);
          v166 = *((_OWORD *)a2 + 5);
          v288 = *((_OWORD *)a2 + 4);
          v289 = v166;
          v167 = *((_OWORD *)a2 + 7);
          v290 = *((_OWORD *)a2 + 6);
          v291 = v167;
          v168 = *((_OWORD *)a2 + 1);
          v284 = *(_OWORD *)a2;
          v285 = v168;
          v169 = *((_OWORD *)a2 + 3);
          v286 = *((_OWORD *)a2 + 2);
          v287 = v169;
          swift_bridgeObjectRetain();
          sub_1B20F873C(v163, v164, (uint64_t)&v254);
          swift_bridgeObjectRelease();
          *(_QWORD *)&v273 = __PAIR64__(v224, v130);
          *((_QWORD *)&v273 + 1) = v129;
          sub_1B2115BC8();
          v276 = v170;
          v277 = &off_1E639B2E0;
          v171 = swift_allocObject();
          *(_QWORD *)&v274 = v171;
          sub_1B1A02864((uint64_t)&v254, v171 + 24);
          *(_QWORD *)(v171 + 16) = v162;
          LOBYTE(v278) = 11;
          swift_retain();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v254);
          v172 = *(_QWORD *)&v129[v222];
          if (v172 && (*(_BYTE *)(v172 + 81) & 1) != 0)
          {
            if (*(_QWORD *)(v172 + 24) && swift_weakLoadStrong())
            {
              swift_retain();
              swift_unknownObjectRetain();
              swift_release();
              sub_1B1C18F3C((uint64_t)&v273, (uint64_t)&v254);
              v173 = *(_QWORD **)(v172 + 16);
              v174 = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)(v172 + 16) = v173;
              if ((v174 & 1) == 0)
              {
                v173 = sub_1B1C62F04(0, v173[2] + 1, 1, v173);
                *(_QWORD *)(v172 + 16) = v173;
              }
              v176 = v173[2];
              v175 = v173[3];
              if (v176 >= v175 >> 1)
              {
                v173 = sub_1B1C62F04(v175 > 1, v176 + 1, 1, v173);
                *(_QWORD *)(v172 + 16) = v173;
              }
              v173[2] = v176 + 1;
              sub_1B1C18F78((uint64_t)&v254, (uint64_t)&v173[8 * v176 + 4]);
              swift_release_n();
              swift_release();
              swift_unknownObjectRelease();
            }
            else
            {
              swift_release_n();
            }
            swift_release();
            v129 = v252;
          }
          else
          {
            swift_release_n();
            swift_release();
          }
          sub_1B1ADF058((uint64_t)&v273);
          v149 = (uint64_t)(v230 + 48);
          v147 = v232 - 1;
          v148 = v221;
        }
        while (v232 != 1);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      v177 = swift_getKeyPath();
      *(_QWORD *)&v273 = __PAIR64__(v224, v130);
      *((_QWORD *)&v273 + 1) = v129;
      sub_1B2115C68();
      v276 = v178;
      v277 = &off_1E639B2E0;
      *(_QWORD *)&v274 = v177;
      BYTE8(v274) = 1;
      LOBYTE(v278) = 11;
      sub_1B1E2DB30((uint64_t)&v273);
      sub_1B1ADF058((uint64_t)&v273);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v180 = *((_QWORD *)a2 + 1);
  v179 = *((_QWORD *)a2 + 2);
  v181 = sub_1B22287B8();
  v183 = v182;
  v267 = &unk_1EF028FA0;
  v184 = swift_dynamicCastObjCProtocolConditional();
  if (v184)
  {
    v185 = (char *)v184;
    swift_unknownObjectRetain_n();
    if (objc_msgSend(v185, sel_textureType) == (id)3)
    {
      v250 = v180;
      *(_QWORD *)&v273 = v181;
      *((_QWORD *)&v273 + 1) = v183;
      v254 = 1700951395;
      v255 = 0xE400000000000000;
      sub_1B1A06460();
      if ((sub_1B2229274() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v249 = 5;
        v180 = v250;
LABEL_136:
        v129 = v252;
        if ((unint64_t)(v251 - 160) <= 0x3A
          && ((1 << (v251 + 96)) & 0x7FDF1FF7CFD54FFLL) != 0)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          *(_QWORD *)&v273 = 0;
          *((_QWORD *)&v273 + 1) = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          sub_1B2228890();
          v254 = v251;
          type metadata accessor for MTLPixelFormat(0);
          sub_1B22295EC();
          v193 = *((_QWORD *)&v273 + 1);
          v192 = v273;
          v194 = sub_1B2228E90();
          if (qword_1ED4BF658 == -1)
            goto LABEL_141;
LABEL_167:
          swift_once();
          goto LABEL_141;
        }
        swift_getObjectType();
        v186 = v185;
        v213 = objc_msgSend(v185, sel_textureDataType);
        if ((sub_1B1F9F9E0(v251, (uint64_t)v213) & 1) != 0)
        {
          swift_unknownObjectRelease();
          goto LABEL_125;
        }
        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)&v273 = 0;
        *((_QWORD *)&v273 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        sub_1B2228890();
        v254 = v251;
        type metadata accessor for MTLPixelFormat(0);
        sub_1B22295EC();
        sub_1B2228890();
        v254 = (uint64_t)objc_msgSend(v185, sel_textureDataType);
        type metadata accessor for MTLDataType(0);
        sub_1B22295EC();
        sub_1B2228890();
        v193 = *((_QWORD *)&v273 + 1);
        v192 = v273;
        v194 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          goto LABEL_167;
LABEL_141:
        *(_QWORD *)&v273 = 0;
        swift_retain();
        sub_1B1F1AD70(v194, (uint64_t *)&v273, v192, v193);
        swift_release();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
        v195 = v225;

        swift_release();
        swift_unknownObjectRelease();
        swift_release();
        return swift_unknownObjectRelease();
      }
      *(_QWORD *)&v273 = v181;
      *((_QWORD *)&v273 + 1) = v183;
      v254 = 0x786F62796B73;
      v255 = 0xE600000000000000;
      v196 = sub_1B2229274();
      swift_bridgeObjectRelease();
      v180 = v250;
      if ((v196 & 1) != 0)
      {
        v249 = 5;
        goto LABEL_136;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v249 = (uint64_t)objc_msgSend(v185, sel_textureType);
    goto LABEL_136;
  }
  swift_bridgeObjectRelease();
  v186 = 0;
LABEL_125:
  v252 = v186;
  if ((_DWORD)v130 == -1 && !(_DWORD)v224)
  {
LABEL_148:
    LOBYTE(v191) = 1;
    goto LABEL_149;
  }
  swift_retain();
  v187 = sub_1B1D19800(v130);
  v189 = v188;
  swift_release();
  if ((v189 & 0x100) != 0)
  {
    swift_retain();
    v197 = sub_1B1FD568C((uint64_t)&type metadata for TextureRequireMipmapGeneration, (uint64_t)&off_1E63B5F50, v130);
    swift_release();
    if (v197)
    {
      LOWORD(v273) = v240;
      WORD1(v273) = v239;
      WORD2(v273) = v238;
      WORD3(v273) = v237;
      BYTE8(v273) = v234;
      BYTE9(v273) = v236;
      BYTE10(v273) = v235;
      *(_QWORD *)&v274 = v251;
      *((_QWORD *)&v274 + 1) = v249;
      v275 = v241;
      v276 = 3;
      v277 = v248;
      v278 = v247;
      v279 = v246;
      v280 = v245;
      v281 = v244;
      v282 = v243;
      v283 = v242;
      LOBYTE(v191) = sub_1B20F1554();
      goto LABEL_149;
    }
    goto LABEL_148;
  }
  LOWORD(v273) = v240;
  WORD1(v273) = v239;
  WORD2(v273) = v238;
  WORD3(v273) = v237;
  BYTE8(v273) = v234;
  BYTE9(v273) = v236;
  BYTE10(v273) = v235;
  *(_QWORD *)&v274 = v251;
  *((_QWORD *)&v274 + 1) = v249;
  v275 = v241;
  v276 = 3;
  v277 = v248;
  v278 = v247;
  v279 = v246;
  v280 = v245;
  v281 = v244;
  v282 = v243;
  v283 = v242;
  v190 = sub_1B20F1554();
  if ((v189 & 1) != 0)
    v191 = v190;
  else
    v191 = v187;
  if (v191 <= 0)
  {
    if (v190 < 1)
      goto LABEL_160;
    goto LABEL_148;
  }
  if (v190 >= v191)
    goto LABEL_149;
LABEL_160:
  LOBYTE(v191) = v190;
LABEL_149:
  v198 = v269;
  v199 = objc_allocWithZone(MEMORY[0x1E0CC6BB0]);
  swift_bridgeObjectRetain();
  v200 = objc_msgSend(v199, sel_init);
  LOWORD(v254) = v240;
  WORD1(v254) = v239;
  WORD2(v254) = v238;
  HIWORD(v254) = v237;
  LOBYTE(v255) = v191;
  BYTE1(v255) = v236;
  BYTE2(v255) = v198;
  v256 = v251;
  v257 = v249;
  v258 = v241;
  v259 = 3;
  v260 = v248;
  v261 = v247;
  v262 = v246;
  v263 = v245;
  v264 = v244;
  v265 = v243;
  v266 = v242;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v254, v200);
  v201 = sub_1B1F328F4(v200, v180, v179);
  swift_bridgeObjectRelease();

  if (!v201)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v209 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v254 = 0;
    swift_retain();
    sub_1B1F1AD70(v209, &v254, 0xD000000000000018, 0x80000001B233B8F0);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    v210 = v225;

    swift_release();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  v202 = v231;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *v202 = v201;
  v203 = v223;
  if (!v223)
  {
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v211 = v225;

    return swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  v204 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
  v205 = (void *)sub_1B2228728();
  objc_msgSend(v204, sel_pushDebugGroup_, v205);

  sub_1B2112E38(v204, v201, v252, v219, (uint64_t)a2, (uint64_t)v129, v203);
  objc_msgSend(v204, sel_popDebugGroup);
  swift_unknownObjectRelease();
  if ((uint64_t)objc_msgSend(v201, sel_mipmapLevelCount) < 2)
  {
    swift_release();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    v212 = v225;

    return swift_unknownObjectRelease();
  }
  v206 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
  v207 = (void *)sub_1B2228728();
  objc_msgSend(v206, sel_pushDebugGroup_, v207);

  swift_unknownObjectRetain();
  sub_1B20FD77C(v201, v206);
  swift_unknownObjectRelease();
  objc_msgSend(v206, sel_popDebugGroup);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  v208 = v225;

  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B21008CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 152);
  v4 = *(_QWORD *)(a2 + 160);
  v5 = sub_1B20F9F48();
  v7 = v6;
  v10 = v3;
  sub_1B1B28C6C((uint64_t)&v10);
  v9 = v4;
  result = sub_1B1B28C6C((uint64_t)&v9);
  *(_QWORD *)(a2 + 152) = v5;
  *(_QWORD *)(a2 + 160) = v7;
  return result;
}

unint64_t sub_1B2100964()
{
  const __CFURL *v0;
  CGImageSource *v1;
  CGImageRef ImageAtIndex;
  CGImageRef v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = (const __CFURL *)sub_1B2228074();
  v1 = CGImageSourceCreateWithURL(v0, 0);

  if (!v1)
    goto LABEL_7;
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v1, 0, 0);
  if (!ImageAtIndex)
  {

LABEL_7:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228110();
    sub_1B19E52CC((unint64_t *)&qword_1EEF5AE60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v5 = 0x80000001B234C940;
    sub_1B21158FC();
    swift_allocError();
    *(_QWORD *)v6 = 0xD00000000000001FLL;
    *(_QWORD *)(v6 + 8) = 0x80000001B234C940;
    *(_BYTE *)(v6 + 16) = 0;
    swift_willThrow();
    return v5;
  }
  v3 = ImageAtIndex;
  v4 = sub_1B18CA040();
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228110();
    sub_1B19E52CC((unint64_t *)&qword_1EEF5AE60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v5 = 0x80000001B234C960;
    sub_1B21158FC();
    swift_allocError();
    *(_QWORD *)v7 = 0xD000000000000023;
    *(_QWORD *)(v7 + 8) = 0x80000001B234C960;
    *(_BYTE *)(v7 + 16) = 0;
    swift_willThrow();
  }

  return v5;
}

void *sub_1B2100B78(void *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  os_signpost_type_t v27;
  os_signpost_id_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  __IOSurface *v32;
  os_signpost_type_t v33;
  os_signpost_id_t v34;
  uint64_t v35;
  size_t Width;
  size_t Height;
  signed int PixelFormat;
  id v39;
  void *v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  id v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD v52[2];
  _BYTE *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char *v62;
  void *v63;
  unint64_t v64;
  id v65;

  v53 = a2;
  v5 = sub_1B2228110();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B22283B0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v62 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1B2228380();
  v59 = *(_QWORD *)(v14 - 8);
  v60 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52[1] = a3;
  v55 = *(void **)(a3 + 16);
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v18 = sub_1B1B40EC8(v10, (uint64_t)qword_1ED4D0E48);
  sub_1B2228398();
  sub_1B2228368();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v62, v18, v10);
  (*(void (**)(char *, void *, uint64_t))(v6 + 16))(v9, a1, v5);
  v19 = swift_slowAlloc();
  v57 = v11;
  v61 = a1;
  v20 = v6;
  v21 = (uint8_t *)v19;
  v54 = swift_slowAlloc();
  v63 = (void *)v54;
  v56 = v10;
  *(_DWORD *)v21 = 136315138;
  v22 = sub_1B2228020();
  v65 = (id)sub_1B1B3EF90(v22, v23, (uint64_t *)&v63);
  sub_1B22291D8();
  swift_bridgeObjectRelease();
  v24 = v9;
  v25 = v5;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v5);
  v26 = sub_1B2228398();
  v27 = sub_1B2228FA4();
  v28 = sub_1B2228374();
  v29 = v61;
  _os_signpost_emit_with_name_impl(&dword_1B178D000, v26, v27, v28, "loadGPUTextureAsIOSurface", "URL: %s", v21, 0xCu);
  v30 = v58;
  v31 = sub_1B2100964();
  if (v30)
  {

    (*(void (**)(char *, uint64_t))(v57 + 8))(v62, v56);
LABEL_68:
    (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v60);
    return v29;
  }
  v32 = (__IOSurface *)v31;
  v58 = 0;
  v52[0] = v25;
  v33 = sub_1B2228F98();
  v34 = sub_1B2228374();
  _os_signpost_emit_with_name_impl(&dword_1B178D000, v26, v33, v34, "loadGPUTextureAsIOSurface", "URL: %s", v21, 0xCu);

  v35 = v54;
  swift_arrayDestroy();
  MEMORY[0x1B5E23F88](v35, -1, -1);
  MEMORY[0x1B5E23F88](v21, -1, -1);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v62, v56);
  Width = IOSurfaceGetWidth(v32);
  Height = IOSurfaceGetHeight(v32);
  PixelFormat = IOSurfaceGetPixelFormat(v32);
  v39 = objc_msgSend((id)objc_opt_self(), sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 0, Width, Height, 0);
  objc_msgSend(v39, sel_setUsage_, 1);
  if (PixelFormat > 1278226487)
  {
    v40 = v55;
    if (PixelFormat <= 2016686641)
    {
      if (PixelFormat == 1278226488)
      {
        v42 = v39;
        if ((*v53 & 4) != 0)
          v41 = 10;
        else
          v41 = 11;
        goto LABEL_52;
      }
      if (PixelFormat != 2016686640)
        goto LABEL_47;
    }
    else
    {
      if (PixelFormat == 2016686642)
        goto LABEL_18;
      if (PixelFormat != 2019963440)
      {
        if (PixelFormat != 2019963442)
          goto LABEL_47;
LABEL_18:
        if ((*v53 & 4) != 0)
        {
          if (qword_1EEF574D8 != -1)
            swift_once();
          v41 = qword_1EEFD57C0;
        }
        else
        {
          if (qword_1EEF574E0 != -1)
            swift_once();
          v41 = qword_1EEFD57C8;
        }
        goto LABEL_51;
      }
    }
    if ((*v53 & 4) != 0)
    {
      if (qword_1EEF574B8 != -1)
        swift_once();
      v41 = qword_1EEFD57A0;
    }
    else
    {
      if (qword_1EEF574C0 != -1)
        swift_once();
      v41 = qword_1EEFD57A8;
    }
    goto LABEL_51;
  }
  v40 = v55;
  if (PixelFormat > 875704437)
  {
    if (PixelFormat != 875704438)
    {
      if (PixelFormat == 875704934 || PixelFormat == 875704950)
      {
        if ((*v53 & 4) != 0)
        {
          if (qword_1EEF574C8 != -1)
            swift_once();
          v41 = qword_1EEFD57B0;
        }
        else
        {
          if (qword_1EEF574D0 != -1)
            swift_once();
          v41 = qword_1EEFD57B8;
        }
LABEL_51:
        v42 = v39;
        goto LABEL_52;
      }
LABEL_47:
      v63 = 0;
      v64 = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      LODWORD(v65) = PixelFormat;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
LABEL_66:
      sub_1B19E52CC((unint64_t *)&qword_1EEF5AE60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
LABEL_24:
    if ((*v53 & 4) != 0)
    {
      if (qword_1EEF574A8 != -1)
        swift_once();
      v41 = qword_1EEFD5790;
    }
    else
    {
      if (qword_1EEF574B0 != -1)
        swift_once();
      v41 = qword_1EEFD5798;
    }
    goto LABEL_51;
  }
  if (PixelFormat != 843264056)
  {
    if (PixelFormat != 875704422)
      goto LABEL_47;
    goto LABEL_24;
  }
  v42 = v39;
  if ((*v53 & 4) != 0)
    v41 = 30;
  else
    v41 = 31;
LABEL_52:
  objc_msgSend(v42, sel_setPixelFormat_, v41);
  swift_getObjectType();
  objc_msgSend(v39, sel_pixelFormat);
  if ((sub_1B1F9C9A8() & 1) == 0)
  {
    v63 = 0;
    v64 = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    v65 = objc_msgSend(v39, sel_pixelFormat);
    type metadata accessor for MTLPixelFormat(0);
    sub_1B22295EC();
    sub_1B2228890();
LABEL_67:
    v29 = v63;
    v49 = v64;
    sub_1B21158FC();
    swift_allocError();
    *(_QWORD *)v50 = v29;
    *(_QWORD *)(v50 + 8) = v49;
    *(_BYTE *)(v50 + 16) = 0;
    swift_willThrow();

    goto LABEL_68;
  }
  v43 = (unint64_t)objc_msgSend(v39, sel_pixelFormat);
  if (v43 <= 0x37 && ((1 << v43) & 0xE0000003D07C00) != 0)
  {
    if ((sub_1B1F9FBBC() & 1) != 0)
    {
      objc_msgSend(v39, sel_setSwizzle_, 33686018);
    }
    else
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v63 = 0;
      v64 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      v65 = objc_msgSend(v39, sel_pixelFormat);
      type metadata accessor for MTLPixelFormat(0);
      sub_1B22295EC();
      v44 = (uint64_t)v63;
      v45 = v64;
      v46 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v63 = 0;
      swift_retain();
      sub_1B1F1AD70(v46, (uint64_t *)&v63, v44, v45);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v40 = v55;
    }
  }
  v47 = objc_msgSend(v40, sel_newTextureWithDescriptor_iosurface_plane_, v39, v32, 0);
  if (!v47)
  {
    v63 = 0;
    v64 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v63 = (void *)0xD00000000000002CLL;
    v64 = 0x80000001B234C8D0;
    goto LABEL_66;
  }
  v29 = v47;
  sub_1B1F326B0((uint64_t)v47);
  sub_1B222805C();
  v48 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_setLabel_, v48);

  (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v60);
  return v29;
}

uint64_t sub_1B2101630@<X0>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(__int8 *, uint64_t, uint64_t);
  NSObject *v33;
  char v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(__int8 *, __int8 *, uint64_t);
  os_signpost_id_t v40;
  uint64_t v41;
  uint8_t *v42;
  __int8 *v43;
  __int8 *v44;
  uint8x8_t v45;
  __int8 *v46;
  NSObject *v47;
  __int8 *v48;
  os_signpost_type_t v49;
  __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int8 *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  void (*v62)(__int8 *, uint64_t);
  void (*v63)(__int8 *, uint64_t);
  __int8 *v64;
  __int8 *v65;
  uint8_t *v66;
  os_signpost_id_t v67;
  uint64_t result;
  __int8 *v69;
  uint8_t *v70;
  os_signpost_id_t v71;
  __int8 *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int16x8_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int8 *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  __int8 *v91;
  __int8 *v92;
  uint64_t v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;
  __int8 *v97;
  __int8 *v98;
  __int8 *v99;
  __int8 *v100;
  void (*v101)(__int8 *, __int8 *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  size_t v107;
  unsigned __int8 v108;
  uint64_t v109;
  __int16 v110;
  unsigned __int8 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int32 v116;
  char *v117;
  uint64_t v118;
  __int16 v119;
  unsigned __int8 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  __int32 v125;

  v96 = a3;
  v95 = a2;
  v87 = a4;
  v89 = sub_1B22283BC();
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v5);
  v86 = &v78.i8[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  v98 = &v78.i8[-v9];
  v10 = sub_1B2228110();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v78.i8[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_1B2228380();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v91 = &v78.i8[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v19, v20);
  v99 = &v78.i8[-v21];
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = &v78.i8[-v24];
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = &v78.i8[-v28];
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v30 = sub_1B22283B0();
  v31 = sub_1B1B40EC8(v30, (uint64_t)qword_1ED4D0E48);
  sub_1B2228398();
  sub_1B2228368();
  RGTextureDescriptor.init()((uint64_t)&v118);
  v107 = 0;
  v105 = 0;
  v106 = 0;
  v108 = 0;
  v109 = v118;
  v110 = v119;
  v111 = v120;
  v112 = v121;
  v113 = v122;
  v114 = v123;
  v115 = v124;
  v116 = v125;
  v117 = (char *)MEMORY[0x1E0DEE9D8];
  v32 = *(void (**)(__int8 *, uint64_t, uint64_t))(v11 + 16);
  v94 = a1;
  v32(v14, a1, v10);
  v93 = v31;
  v33 = sub_1B2228398();
  v90 = sub_1B2228FA4();
  v34 = sub_1B2229094();
  v92 = v25;
  v100 = v29;
  v102 = v16;
  if ((v34 & 1) != 0)
  {
    v85 = v10;
    v101 = *(void (**)(__int8 *, __int8 *, uint64_t))(v16 + 16);
    v101(v25, v29, v15);
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = swift_slowAlloc();
    v104 = v36;
    *(_DWORD *)v35 = 136315138;
    v37 = sub_1B2228020();
    v103 = sub_1B1B3EF90(v37, v38, &v104);
    v25 = v92;
    sub_1B22291D8();
    swift_bridgeObjectRelease();
    v39 = v101;
    (*(void (**)(__int8 *, uint64_t))(v11 + 8))(v14, v85);
    v40 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v33, (os_signpost_type_t)v90, v40, "loadTextureFromDisk", "URL: %s", v35, 0xCu);
    swift_arrayDestroy();
    v41 = v36;
    v29 = v100;
    MEMORY[0x1B5E23F88](v41, -1, -1);
    v42 = v35;
    v16 = v102;
    MEMORY[0x1B5E23F88](v42, -1, -1);

    (*(void (**)(__int8 *, uint64_t))(v16 + 8))(v25, v15);
  }
  else
  {

    (*(void (**)(__int8 *, uint64_t))(v11 + 8))(v14, v10);
    v39 = *(void (**)(__int8 *, __int8 *, uint64_t))(v16 + 16);
  }
  v43 = v98;
  v39(v25, v29, v15);
  sub_1B22283E0();
  swift_allocObject();
  sub_1B22283D4();
  v44 = v97;
  sub_1B20FC9EC(v94, v95, v96, 0, 1);
  v46 = v99;
  if (v44)
  {
    v101 = v39;
    v47 = sub_1B2228398();
    v48 = v91;
    sub_1B22283C8();
    v49 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      v98 = v44;
      swift_retain();
      v50 = v86;
      sub_1B22283EC();
      swift_release();
      v51 = v88;
      v52 = v89;
      if ((*(unsigned int (**)(__int8 *, uint64_t))(v88 + 88))(v50, v89) == *MEMORY[0x1E0DF2190])
      {
        v53 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(__int8 *, uint64_t))(v51 + 8))(v50, v52);
        v53 = "";
      }
      v64 = v92;
      v65 = v91;
      v101(v92, v91, v15);
      v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v66 = 0;
      v67 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v47, v49, v67, "loadTextureFromDisk", v53, v66, 2u);
      MEMORY[0x1B5E23F88](v66, -1, -1);

      v62 = *(void (**)(__int8 *, uint64_t))(v102 + 8);
      v62(v65, v15);
      v62(v64, v15);
      v29 = v100;
    }
    else
    {

      v62 = *(void (**)(__int8 *, uint64_t))(v102 + 8);
      v62(v48, v15);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return ((uint64_t (*)(__int8 *, uint64_t))v62)(v29, v15);
  }
  else
  {
    v98 = 0;
    v54 = v15;
    v55 = v105;
    v96 = v106;
    v95 = v107;
    LODWORD(v94) = v108;
    v56 = v109;
    LODWORD(v91) = v110;
    v90 = HIBYTE(v110);
    LODWORD(v86) = v111;
    v84 = *((_QWORD *)&v112 + 1);
    v85 = v112;
    v82 = *((_QWORD *)&v113 + 1);
    v83 = v113;
    v80 = *((_QWORD *)&v114 + 1);
    v81 = v114;
    v79 = v115;
    v45.i32[0] = v116;
    v78 = (int16x8_t)vmovl_u8(v45);
    v57 = v117;
    swift_unknownObjectRetain();
    v97 = v57;
    swift_bridgeObjectRetain();
    v58 = sub_1B2228398();
    sub_1B22283C8();
    LODWORD(v93) = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      v101 = v39;
      swift_retain();
      sub_1B22283EC();
      swift_release();
      v59 = v88;
      v60 = v89;
      if ((*(unsigned int (**)(__int8 *, uint64_t))(v88 + 88))(v43, v89) == *MEMORY[0x1E0DF2190])
      {
        v61 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(__int8 *, uint64_t))(v59 + 8))(v43, v60);
        v61 = "";
      }
      v69 = v92;
      v101(v92, v46, v54);
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      v71 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v58, (os_signpost_type_t)v93, v71, "loadTextureFromDisk", v61, v70, 2u);
      MEMORY[0x1B5E23F88](v70, -1, -1);

      v63 = *(void (**)(__int8 *, uint64_t))(v102 + 8);
      v63(v46, v54);
      v63(v69, v54);
    }
    else
    {

      v63 = *(void (**)(__int8 *, uint64_t))(v16 + 8);
      v63(v46, v54);
    }
    v72 = v97;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    result = ((uint64_t (*)(__int8 *, uint64_t))v63)(v100, v54);
    v73 = v87;
    v74 = v96;
    *v87 = v55;
    v73[1] = v74;
    v73[2] = v95;
    *((_BYTE *)v73 + 24) = v94;
    v73[4] = v56;
    *((_BYTE *)v73 + 40) = (_BYTE)v91;
    *((_BYTE *)v73 + 41) = v90;
    *((_BYTE *)v73 + 42) = (_BYTE)v86;
    v75 = v84;
    v73[6] = v85;
    v73[7] = v75;
    v76 = v82;
    v73[8] = v83;
    v73[9] = v76;
    v77 = v80;
    v73[10] = v81;
    v73[11] = v77;
    v73[12] = v79;
    *((_DWORD *)v73 + 26) = vmovn_s16(v78).u32[0];
    v73[14] = v72;
  }
  return result;
}

double sub_1B2102004@<D0>(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int16 v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;

  sub_1B2101630(a1, a2, *(_QWORD *)(a3 + 16), &v18);
  if (!v4)
  {
    v7 = v19;
    v8 = v20;
    v9 = v21;
    v10 = v27;
    v11 = v29;
    v12 = 0x10000;
    if (!v23)
      v12 = 0;
    v13 = v22 | (unint64_t)v12;
    v14 = v28 | 0x8000000000000000;
    result = *(double *)&v18;
    v15 = v24;
    v16 = v25;
    v17 = v26;
    *(_OWORD *)a4 = v18;
    *(_QWORD *)(a4 + 16) = v7;
    *(_QWORD *)(a4 + 24) = v8;
    *(_QWORD *)(a4 + 32) = v9;
    *(_QWORD *)(a4 + 40) = v13;
    *(_OWORD *)(a4 + 48) = v15;
    *(_OWORD *)(a4 + 64) = v16;
    *(_OWORD *)(a4 + 80) = v17;
    *(_QWORD *)(a4 + 96) = v10;
    *(_QWORD *)(a4 + 104) = v14;
    *(_QWORD *)(a4 + 112) = v11;
  }
  return result;
}

uint64_t sub_1B2102094(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  os_unfair_lock_s *v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t v42;
  os_unfair_lock_s *v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  uint64_t (**v59)();

  v2 = v1;
  v4 = v1[3];
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = v2[13];
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v11 = v2[18];
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v14 = v2[23];
  swift_getObjectType();
  v15 = sub_1B204D6E4();
  v16 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  sub_1B1E8F784(a1, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v15, v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v17 = v2[28];
  swift_getObjectType();
  v18 = sub_1B204D6E4();
  v19 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v19);
  sub_1B1E8F784(a1, v17);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v18, v17);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v20 = v2[33];
  swift_getObjectType();
  v21 = sub_1B204D6E4();
  v22 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v22);
  sub_1B1E8F784(a1, v20);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v21, v20);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v23 = v2[38];
  swift_getObjectType();
  v24 = sub_1B204D6E4();
  v25 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v25);
  sub_1B1E8F784(a1, v23);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v24, v23);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v26 = v2[43];
  swift_getObjectType();
  v27 = sub_1B204D6E4();
  v28 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v28);
  sub_1B1E8F784(a1, v26);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v27, v26);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v29 = v2[48];
  swift_getObjectType();
  v30 = sub_1B204D6E4();
  v31 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v31);
  sub_1B1E8F784(a1, v29);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v30, v29);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v32 = v2[53];
  swift_getObjectType();
  v33 = sub_1B204D6E4();
  v34 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v34);
  sub_1B1E8F784(a1, v32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v33, v32);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v35 = v2[58];
  swift_getObjectType();
  v36 = sub_1B204D6E4();
  v37 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v37);
  sub_1B1E8F784(a1, v35);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v36, v35);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v38 = v2[63];
  swift_getObjectType();
  v39 = sub_1B204D6E4();
  v40 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v40);
  sub_1B1E8F784(a1, v38);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v39, v38);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v41 = v2[68];
  swift_getObjectType();
  v42 = sub_1B204D6E4();
  v43 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v43);
  sub_1B1E8F784(a1, v41);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v42, v41);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v44 = v2[73];
  swift_getObjectType();
  v45 = sub_1B204D6E4();
  v46 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v46);
  sub_1B1E8F784(a1, v44);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v45, v44);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v47 = v2[78];
  swift_getObjectType();
  v48 = sub_1B204D6E4();
  v49 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v49);
  sub_1B1E8F784(a1, v47);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v48, v47);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v50 = v2[8];
  swift_getObjectType();
  v51 = sub_1B204D6E4();
  v52 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v52);
  sub_1B1E8F784(a1, v50);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v51, v50);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  result = swift_release_n();
  if (*(_BYTE *)(a1 + 48) == 1)
  {
    v54 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    if (v54)
    {
      v55 = *(_QWORD *)(v54 + 232);
      v56 = swift_allocObject();
      swift_weakInit();
      v57 = v55 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
      v58 = *(os_unfair_lock_s **)(v55 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
      swift_retain();
      swift_retain();
      swift_retain();
      os_unfair_lock_lock(v58);
      v59 = (uint64_t (**)())(v55 + OBJC_IVAR____TtC3VFX11ShaderCache_reloadCallback);
      *v59 = sub_1B2115DDC;
      v59[1] = (uint64_t (*)())v56;
      swift_retain();
      swift_release();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v57 + 24));
      swift_release();
      swift_release();
      return swift_release_n();
    }
  }
  return result;
}

uint64_t sub_1B2102A2C()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = swift_allocObject();
    swift_weakInit();
    v3 = v1 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocksLock;
    v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocksLock + 24);
    swift_retain();
    os_unfair_lock_lock(v4);
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = sub_1B2115DE4;
    *(_QWORD *)(v5 + 24) = v2;
    v6 = OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocks;
    v7 = *(_QWORD **)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocks);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v1 + v6) = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v7 = sub_1B1C62B5C(0, v7[2] + 1, 1, v7);
      *(_QWORD *)(v1 + v6) = v7;
    }
    v10 = v7[2];
    v9 = v7[3];
    if (v10 >= v9 >> 1)
      v7 = sub_1B1C62B5C(v9 > 1, v10 + 1, 1, v7);
    v7[2] = v10 + 1;
    v11 = &v7[2 * v10];
    v11[4] = sub_1B1CB734C;
    v11[5] = v5;
    *(_QWORD *)(v1 + v6) = v7;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v3 + 24));
    swift_release();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1B2102B80()
{
  uint64_t result;
  uint64_t v1;
  _OWORD v2[2];
  uint64_t v3;
  _QWORD v4[12];
  _OWORD v5[12];
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    v8 = qword_1ED4D09F8;
    v9 = 0;
    v10 = 2;
    v11 = 0;
    v12 = 2;
    v13 = 0;
    swift_retain();
    sub_1B1E3A248(3, (uint64_t)v2);
    swift_release();
    v6[0] = v2[0];
    v6[1] = v2[1];
    v7 = v3;
    sub_1B1E8FCE4(v1, (uint64_t)v6, 0x200000000, v4);
    sub_1B1A18378((uint64_t)v4, (uint64_t)v5, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v5[0])
    {
      v5[8] = v5[2];
      v5[9] = v5[3];
      v5[10] = v5[4];
      v5[11] = v5[5];
      v5[6] = v5[0];
      v5[7] = v5[1];
      sub_1B1BEB4CC();
      sub_1B1A086DC(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    sub_1B1D2F76C(v1);
    sub_1B19ED720((uint64_t)v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2102CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *j;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t *v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  _QWORD *v46;
  size_t v47;
  char *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  unsigned int *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  ValueMetadata *v93;
  _UNKNOWN **v94;
  char v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  char v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v113;
  uint64_t v114;
  os_unfair_lock_s *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double (*v136)(_QWORD);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  os_unfair_lock_s *v149;
  int v150;
  int v151;
  __int128 v152;
  uint64_t v153;
  char *v154;
  int *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  os_unfair_lock_s *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  os_unfair_lock_s *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t *v191;
  void *v192;
  uint64_t *v193;
  __int128 v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  unsigned int *v198;
  uint64_t v199;
  os_unfair_lock_s *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  uint64_t v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  os_unfair_lock_s *v245;
  int v246;
  int v247;
  __int128 v248;
  uint64_t v249;
  int v250;
  uint64_t *v251;
  __int128 *v252;
  __int128 v253;
  __int128 v254;
  uint64_t v255;
  os_unfair_lock_s *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  __int128 *v272;
  __int128 v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  __int128 *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD v286[3];
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  int *v292;
  uint64_t v293;
  uint64_t *v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t *v307;
  char *v308;
  uint64_t *v309;
  uint64_t v310;
  char *v311;
  _QWORD v312[12];
  _QWORD v313[12];
  _QWORD v314[12];
  _QWORD v315[12];
  _QWORD v316[12];
  _QWORD v317[12];
  _QWORD v318[12];
  _BYTE v319[64];
  _BYTE v320[64];
  _QWORD v321[12];
  _QWORD v322[12];
  _QWORD v323[12];
  _QWORD v324[12];
  _QWORD v325[12];
  _QWORD v326[12];
  _BYTE v327[40];
  _QWORD v328[12];
  _OWORD v329[6];
  _OWORD v330[6];
  _OWORD v331[5];
  __int128 v332;
  _OWORD v333[5];
  __int128 v334;
  _QWORD v335[7];
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  char v340;
  uint64_t v341;
  char v342;
  uint64_t v343;
  uint64_t v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  char v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  uint64_t v355;
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  char v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  uint64_t v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;
  uint64_t v370;
  _OWORD v371[2];
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  __int128 v378;
  __int128 v379;
  uint64_t v380;
  _OWORD v381[4];
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  _QWORD v390[7];
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  char v395;
  uint64_t v396;
  char v397;
  uint64_t v398;
  uint64_t v399;
  __int128 v400;
  __int128 v401;
  uint64_t v402;
  uint64_t v403;
  _OWORD v404[12];
  _OWORD v405[2];
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  _OWORD v412[2];
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t *v417;
  uint64_t v418;
  _OWORD v419[2];
  uint64_t v420;
  _OWORD v421[2];
  uint64_t v422;
  _OWORD v423[2];
  uint64_t v424;
  _OWORD v425[2];
  uint64_t v426;
  _OWORD v427[2];
  uint64_t v428;
  _OWORD v429[2];
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  __int128 v439;
  _OWORD v440[2];
  uint64_t v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  __int128 v446;
  uint64_t v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  char v453;
  __int128 v454;
  uint64_t v455;
  _OWORD v456[2];
  uint64_t v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  _BYTE v461[40];
  _OWORD v462[2];
  uint64_t v463;
  _OWORD v464[2];
  uint64_t v465;
  uint64_t v466;
  int v467;
  char v468;
  uint64_t v469;
  char v470;
  uint64_t v471;
  uint64_t v472;
  __int128 v473;
  __int128 v474;
  uint64_t v475;
  uint64_t v476;
  _OWORD v477[2];
  uint64_t v478;
  uint64_t v479;
  int v480;
  char v481;
  uint64_t v482;
  char v483;
  uint64_t v484;
  uint64_t v485;
  __int128 v486;
  __int128 v487;
  uint64_t v488;
  uint64_t v489;
  _OWORD v490[2];
  uint64_t v491;
  uint64_t v492;
  int v493;
  char v494;
  uint64_t v495;
  char v496;
  uint64_t v497;
  uint64_t v498;
  __int128 v499;
  __int128 v500;
  uint64_t v501;
  uint64_t v502;
  _OWORD v503[2];
  uint64_t v504;
  _BYTE v505[40];
  _QWORD v506[5];
  _QWORD v507[5];
  _OWORD v508[2];
  uint64_t v509;
  _BYTE v510[40];
  __int128 v511;
  __int128 v512;
  uint64_t v513;
  uint64_t *v514;
  unint64_t v515;
  uint64_t v516;
  _BYTE v517[24];
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _BYTE v521[40];
  __int128 v522;
  __int128 v523;
  uint64_t v524;
  uint64_t *v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  char v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  _OWORD v533[2];
  uint64_t v534;
  _OWORD v535[2];
  uint64_t v536;
  uint64_t v537;
  int v538;
  char v539;
  uint64_t v540;
  char v541;
  uint64_t v542;
  uint64_t v543;
  __int128 v544;
  __int128 v545;
  uint64_t v546;
  uint64_t v547;
  _OWORD v548[2];
  uint64_t v549;
  _OWORD v550[2];
  uint64_t v551;
  _BYTE v552[40];
  _QWORD v553[5];
  _QWORD v554[5];
  _OWORD v555[2];
  uint64_t v556;
  _QWORD v557[10];
  _QWORD v558[5];
  _OWORD v559[2];
  uint64_t v560;

  MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  sub_1B1B1F358();
  v292 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v291 = (char *)v286 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1B222820C();
  v289 = *(_QWORD *)(v8 - 8);
  v290 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v288 = (char *)v286 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = *(_QWORD *)&v4[OBJC_IVAR____TtC3VFX13EntityManager_renderer];
  if (!result)
    return result;
  v310 = *(_QWORD *)&v4[OBJC_IVAR____TtC3VFX13EntityManager_renderer];
  swift_retain();
  CACurrentMediaTime();
  v559[0] = *(_OWORD *)(v2 + 104);
  v559[1] = *(_OWORD *)(v2 + 120);
  v301 = v2;
  v560 = *(_QWORD *)(v2 + 136);
  v300 = *(_QWORD *)&v4[OBJC_IVAR____TtC3VFX13EntityManager_queryManager];
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v559, 0x200000000, v312);
  sub_1B1A18378((uint64_t)v312, (uint64_t)v412, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v308 = v4;
  if (!*(_QWORD *)&v412[0])
    goto LABEL_51;
  if (v418 <= 0 || (v303 = v415) == 0)
  {
    sub_1B1A086DC(v312, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_51:
    j = 0;
    goto LABEL_53;
  }
  v12 = v417[4];
  v307 = v416;
  v13 = *((unsigned __int8 *)v416 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v419[0] = v412[0];
  v419[1] = v412[1];
  v420 = v413;
  v297 = (uint64_t)(v417 + 6);
  v298 = (_QWORD *)v414;
  v309 = v417;
  v295 = v417 + 13;
  v296 = (uint64_t)(v417 + 8);
  swift_retain_n();
  v14 = 0;
  j = 0;
  LODWORD(v299) = v13;
  v302 = v12;
  do
  {
    v306 = v14;
    v16 = (unsigned int *)&v298[6 * v14];
    v18 = *v16;
    v17 = v16[1];
    v19 = v16[2];
    v20 = (uint64_t *)*((_QWORD *)v16 + 2);
    v22 = *((_QWORD *)v16 + 4);
    v21 = *((_QWORD *)v16 + 5);
    v304 = j;
    v305 = v17;
    if (v13)
    {
      v23 = *(os_unfair_lock_s **)(v21 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v23);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v21 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v12);
    sub_1B1A18378(v297, (uint64_t)v557, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v24 = v309;
    v25 = v309[4];
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v24[6] = (uint64_t)ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    v24[7] = v26;
    v27 = (_QWORD *)v296;
    *(_QWORD *)(v296 + 8) = 0;
    v27[2] = 0;
    *v27 = 0;
    swift_release();
    if (v20)
    {
      j = v304;
      if (!v22)
        goto LABEL_36;
      while (1)
      {
        v29 = *v20++;
        v28 = v29;
        v557[5] = v307;
        v557[6] = v21;
        v557[7] = v309;
        v557[8] = v19;
        v557[9] = v29;
        v30 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadPolicy);
        if ((v31 & 1) != 0 || !*(_BYTE *)(v30 + 4 * v28))
        {
          v32 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadingOptions);
          if ((v33 & 1) == 0)
          {
            v34 = *(_QWORD *)(v32 + (v28 << 6));
            if ((v34 & 1) == 0)
              *(_QWORD *)(v32 + (v28 << 6)) = v34 | 1;
          }
        }
        else
        {
          if (*(_BYTE *)(v30 + 4 * v28) != 1)
          {
            sub_1B20F24B4(0);
            goto LABEL_24;
          }
          sub_1B1A10AA4(*(_QWORD *)(v21 + 40), (uint64_t)&type metadata for TextureLoadRequestCPU, &v522);
          if ((v522 & 1) == 0)
            goto LABEL_24;
        }
        sub_1B20F1E84(0);
LABEL_24:
        v35 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadPolicy);
        if ((v36 & 1) != 0 || !*(_BYTE *)(v35 + 4 * v28 + 1))
        {
          v37 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadingOptions);
          if ((v38 & 1) == 0)
          {
            v39 = *(_QWORD *)(v37 + (v28 << 6));
            if ((v39 & 2) == 0)
              *(_QWORD *)(v37 + (v28 << 6)) = v39 | 2;
          }
        }
        else
        {
          if (*(_BYTE *)(v35 + 4 * v28 + 1) != 1)
          {
            sub_1B20F25AC(0);
            goto LABEL_14;
          }
          sub_1B1A10AA4(*(_QWORD *)(v21 + 40), (uint64_t)&type metadata for TextureLoadRequestGPU, &v522);
          if ((v522 & 1) == 0)
            goto LABEL_14;
        }
        sub_1B20F1F78(0);
LABEL_14:
        ++v19;
        if (!--v22)
          goto LABEL_36;
      }
    }
    j = v304;
    v40 = v305;
    if ((_DWORD)v18 != (_DWORD)v305)
    {
      do
      {
        v558[0] = v307;
        v558[1] = v21;
        v558[2] = v309;
        v558[3] = v19;
        v558[4] = v18;
        sub_1B2112B74((uint64_t)v558);
        ++v19;
        ++v18;
      }
      while (v40 != v18);
    }
LABEL_36:
    v41 = v309;
    sub_1B1F05D48(v309, (unsigned __int16 **)v419, (uint64_t)v557);
    v4 = v308;
    if (*(_QWORD *)(v41[13] + 16))
    {
      v42 = (_QWORD *)swift_bridgeObjectRetain();
      v43 = v309;
      sub_1B1F05034(v42, v21);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v45 = v43[13];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v45 + 16));
      }
      else
      {
        v46 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v45 + 24) >= 2uLL)
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v46 = (_QWORD *)swift_allocObject();
          v47 = j__malloc_size(v46);
          v46[2] = 0;
          v46[3] = 2 * ((uint64_t)(v47 - 32) / 72);
        }
        *v295 = v46;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v309[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v48 = *(char **)(v21 + 232);
        v49 = *(char **)(v21 + 256);
        if (v48 == v49)
        {
          v50 = *(char **)(v21 + 240);
        }
        else
        {
          sub_1B1A1059C(v49, v48);
          v49 = *(char **)(v21 + 232);
          v50 = *(char **)(v21 + 240);
          if (v50 == v49)
          {
            v50 = 0;
            v49 = 0;
            *(_QWORD *)(v21 + 232) = 0;
            *(_QWORD *)(v21 + 240) = 0;
          }
        }
        *(_QWORD *)(v21 + 248) = v50;
        *(_QWORD *)(v21 + 256) = v49;
      }
    }
    v12 = v302;
    ecs_stack_allocator_pop_snapshot(v302);
    v13 = v299;
    if ((v299 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v21 + 376));
    }
    swift_release();
    v14 = v306 + 1;
  }
  while (v306 + 1 != v303);
  swift_release();
  sub_1B1A086DC(v312, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  swift_release();
LABEL_53:
  v555[0] = *(_OWORD *)(v301 + 184);
  v555[1] = *(_OWORD *)(v301 + 200);
  v556 = *(_QWORD *)(v301 + 216);
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v555, 0x200000000, v313);
  sub_1B1A18378((uint64_t)v313, (uint64_t)v405, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v405[0])
  {
    if (v411 > 0 && (v306 = v408) != 0)
    {
      v305 = v409;
      v51 = v410;
      v52 = v410[4];
      v53 = *(unsigned __int8 *)(v409 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v421[0] = v405[0];
      v421[1] = v405[1];
      v422 = v406;
      v298 = v410 + 6;
      v299 = v407;
      v296 = (uint64_t)(v410 + 13);
      v297 = (uint64_t)(v410 + 8);
      swift_retain_n();
      v54 = 0;
      LODWORD(v302) = v53;
      v303 = v52;
      do
      {
        v309 = v54;
        v55 = (unsigned int *)(v299 + 48 * (_QWORD)v54);
        v56 = (uint64_t *)*v55;
        v307 = (uint64_t *)v55[1];
        v57 = v55[2];
        v58 = (uint64_t *)*((_QWORD *)v55 + 2);
        v59 = *((_QWORD *)v55 + 4);
        v60 = *((_QWORD *)v55 + 5);
        v304 = j;
        if (v53)
        {
          v61 = *(os_unfair_lock_s **)(v60 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v61);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v60 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v52);
        sub_1B1A18378((uint64_t)v298, (uint64_t)v552, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v62 = v51[4];
        v63 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v60 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v51[6] = ecs_stack_allocator_allocate(v62, 48 * v63, 8);
        v51[7] = v63;
        v64 = (_QWORD *)v297;
        *(_QWORD *)(v297 + 8) = 0;
        v64[2] = 0;
        *v64 = 0;
        swift_release();
        if (v58)
        {
          j = v304;
          for (i = v305; v59; --v59)
          {
            v66 = *v58++;
            v553[0] = i;
            v553[1] = v60;
            v553[2] = v51;
            v553[3] = v57;
            v553[4] = v66;
            sub_1B2112B74((uint64_t)v553);
            ++v57;
          }
        }
        else
        {
          v67 = v307;
          j = v304;
          v68 = v305;
          if ((_DWORD)v56 != (_DWORD)v307)
          {
            do
            {
              v554[0] = v68;
              v554[1] = v60;
              v554[2] = v51;
              v554[3] = v57;
              v554[4] = v56;
              sub_1B2112B74((uint64_t)v554);
              ++v57;
              v56 = (uint64_t *)((char *)v56 + 1);
            }
            while (v67 != v56);
          }
        }
        sub_1B1F05D48(v51, (unsigned __int16 **)v421, (uint64_t)v552);
        v4 = v308;
        if (*(_QWORD *)(v51[13] + 16))
        {
          v69 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v69, v60);
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            v70 = sub_1B1C7A1C4(v51[13]);
            sub_1B1C92670(0, v70);
          }
          else
          {
            v71 = sub_1B1B1C6B8(v51[13]);
            v72 = sub_1B1B1C808(0, v71);
            *(_QWORD *)v296 = v72;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v51[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            v73 = *(char **)(v60 + 232);
            v74 = *(char **)(v60 + 256);
            if (v73 == v74)
            {
              v75 = *(char **)(v60 + 240);
            }
            else
            {
              sub_1B1A1059C(v74, v73);
              v74 = *(char **)(v60 + 232);
              v75 = *(char **)(v60 + 240);
              if (v75 == v74)
              {
                v75 = 0;
                v74 = 0;
                *(_QWORD *)(v60 + 232) = 0;
                *(_QWORD *)(v60 + 240) = 0;
              }
            }
            *(_QWORD *)(v60 + 248) = v75;
            *(_QWORD *)(v60 + 256) = v74;
          }
        }
        v52 = v303;
        ecs_stack_allocator_pop_snapshot(v303);
        v53 = v302;
        if ((v302 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v60 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v60 + 376));
        }
        swift_release();
        v54 = (uint64_t *)((char *)v309 + 1);
      }
      while ((uint64_t *)((char *)v309 + 1) != (uint64_t *)v306);
      swift_release();
      sub_1B1A086DC(v313, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      swift_release();
    }
    else
    {
      sub_1B1A086DC(v313, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  v550[0] = *(_OWORD *)(v301 + 24);
  v550[1] = *(_OWORD *)(v301 + 40);
  v551 = *(_QWORD *)(v301 + 56);
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v550, 0x200000000, v314);
  sub_1B1A18378((uint64_t)v314, (uint64_t)v404, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v76 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)&v404[0])
  {
    v404[8] = v404[2];
    v404[9] = v404[3];
    v404[10] = v404[4];
    v404[11] = v404[5];
    v404[6] = v404[0];
    v404[7] = v404[1];
    v76 = sub_1B1BEA85C();
    sub_1B1A086DC(v314, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v309 = *(uint64_t **)(v76 + 16);
  if (v309)
  {
    v77 = v4;
    v78 = 0;
    v79 = &v77[OBJC_IVAR____TtC3VFX13EntityManager__entries];
    v307 = (uint64_t *)(v76 + 32);
    v286[2] = v76;
    v287 = OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
    v297 = 0x80000001B234C7D0;
    v298 = (_QWORD *)0xD000000000000016;
    v303 = (uint64_t)&v77[OBJC_IVAR____TtC3VFX13EntityManager__entries];
    do
    {
      v80 = &v307[(_QWORD)v78];
      v81 = *((unsigned int *)v80 + 1);
      v82 = *(int *)v80;
      v83 = (_DWORD)v82 == -1 && (_DWORD)v81 == 0;
      if (!v83 && (v82 & 0x80000000) == 0 && *((_QWORD *)v79 + 1) > v82)
      {
        v84 = *(_QWORD *)v79 + 12 * (int)v82;
        if ((_DWORD)v81 == -1 || *(_DWORD *)(v84 + 8) == (_DWORD)v81)
        {
          v86 = *(_QWORD *)(*((_QWORD *)v308 + 17) + 8 * *(int *)(*(_QWORD *)v79 + 12 * (int)v82) + 32);
          v87 = *(_QWORD *)(v86 + 48);
          v88 = *(_QWORD *)(v87 + 16);
          if (v88)
          {
            v299 = v81;
            v89 = *(__int16 *)(v84 + 4);
            v90 = (_QWORD *)(v87 + 56);
            while ((ValueMetadata *)*(v90 - 3) != &type metadata for TextureLoadingOptions)
            {
              v90 += 5;
              if (!--v88)
                goto LABEL_87;
            }
            v306 = *(_QWORD *)(*(_QWORD *)(v86 + 128) + *v90 + (v89 << 6));
            v305 = sub_1B1C7A1C4((uint64_t)qword_1E63822F8);
            if (v305)
            {
              v91 = 0;
              v302 = v82 | (unint64_t)(v299 << 32);
              v79 = (char *)v303;
              do
              {
                v92 = qword_1E63822F8[v91 + 4];
                v93 = &type metadata for TextureRequireCPURepresentation;
                v94 = &off_1E63B6350;
                switch(v92)
                {
                  case 1:
                    break;
                  case 2:
                    v93 = &type metadata for TextureRequireGPURepresentation;
                    v94 = &off_1E63B6428;
                    break;
                  case 3:
                  case 5:
                  case 6:
                  case 7:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                  case 17:
                  case 18:
                  case 19:
                  case 20:
                  case 21:
                  case 22:
                  case 23:
                  case 24:
                  case 25:
                  case 26:
                  case 27:
                  case 28:
                  case 29:
                  case 30:
                  case 31:
                  case 33:
                  case 34:
                  case 35:
                  case 36:
                  case 37:
                  case 38:
                  case 39:
                  case 40:
                  case 41:
                  case 42:
                  case 43:
                  case 44:
                  case 45:
                  case 46:
                  case 47:
                  case 48:
                  case 49:
                  case 50:
                  case 51:
                  case 52:
                  case 53:
                  case 54:
                  case 55:
                  case 56:
                  case 57:
                  case 58:
                  case 59:
                  case 60:
                  case 61:
                  case 62:
                  case 63:
                    goto LABEL_113;
                  case 4:
                    v93 = &type metadata for TextureRequireNonSRGB;
                    v94 = &off_1E63A70E8;
                    break;
                  case 8:
                    v93 = &type metadata for TextureRequireUnpremultiply;
                    v94 = &off_1E63B3A50;
                    break;
                  case 16:
                    v93 = &type metadata for TextureRequireCubemap;
                    v94 = &off_1E63A7010;
                    break;
                  case 32:
                    v93 = &type metadata for TextureRequireMipmap;
                    v94 = &off_1E639F630;
                    break;
                  case 64:
                    v93 = &type metadata for TextureRequireMipmapGeneration;
                    v94 = &off_1E63B5F20;
                    break;
                  default:
                    if (v92 == 128)
                    {
                      v93 = &type metadata for TextureRequirePremultiplyWithLinearAlpha;
                      v94 = &off_1E63B92C0;
                    }
                    else if (v92 == 256)
                    {
                      v93 = &type metadata for TextureRequireIOSurface;
                      v94 = &off_1E63ACCF8;
                    }
                    else
                    {
LABEL_113:
                      if (qword_1ED4BF430 != -1)
                        swift_once();
                      v296 = qword_1ED4D0FB0;
                      swift_retain();
                      v95 = sub_1B2228E90();
                      if (qword_1ED4BF658 != -1)
                        swift_once();
                      v304 = j;
                      v96 = (_QWORD *)qword_1ED4D0FD0;
                      v97 = qword_1ED4BF688;
                      swift_retain();
                      if (v97 != -1)
                        swift_once();
                      sub_1B1D11FE4(0, (unint64_t *)&qword_1ED4BF700, (unint64_t *)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                      v98 = swift_allocObject();
                      v99 = sub_1B19F909C(v98, 1);
                      v101 = v100;
                      v100[3] = MEMORY[0x1E0DEA968];
                      v100[4] = sub_1B1B1F47C();
                      v102 = v297;
                      *v101 = v298;
                      v101[1] = v102;
                      nullsub_16(v99);
                      sub_1B222835C();
                      swift_bridgeObjectRelease();
                      swift_retain();
                      v103 = v288;
                      sub_1B2228200();
                      v294 = (uint64_t *)v292[12];
                      v295 = v96;
                      v293 = v292[16];
                      v104 = v95;
                      v105 = (uint64_t)v291;
                      v106 = &v291[v292[20]];
                      (*(void (**)(char *, char *, uint64_t))(v289 + 32))(v291, v103, v290);
                      *((_BYTE *)v294 + v105) = v104;
                      *(_QWORD *)(v105 + v293) = 0;
                      v107 = v297;
                      *(_QWORD *)v106 = v298;
                      *((_QWORD *)v106 + 1) = v107;
                      sub_1B2228428();
                      swift_release();
                      sub_1B1A04628(v105, (uint64_t (*)(_QWORD))sub_1B1B1F358);
                      swift_release();
                      swift_release();
                      v93 = &type metadata for NullEntityComponent;
                      v94 = &off_1E63984B0;
                      v79 = (char *)v303;
                      j = v304;
                    }
                    break;
                }
                if ((v92 & ~v306) != 0)
                {
                  if (*((_QWORD *)v79 + 1) > v82)
                  {
                    v108 = *(_QWORD *)v79;
                    if ((_DWORD)v299 == -1 || *(_DWORD *)(v108 + 12 * (int)v82 + 8) == (_DWORD)v299)
                    {
                      v109 = (int *)(v108 + 12 * (int)v82);
                      v110 = *((__int16 *)v109 + 2);
                      v111 = *(_QWORD **)(*((_QWORD *)v308 + 17) + 8 * *v109 + 32);
                      if (v111[29] <= v110 && v111[30] > v110)
                      {
                        v294 = (uint64_t *)*((__int16 *)v109 + 2);
                        v304 = j;
                        v113 = **(_QWORD ***)&v308[v287];
                        v114 = (uint64_t)v111;
                        v115 = (os_unfair_lock_s *)v111[43];
                        swift_retain();
                        os_unfair_lock_lock(v115);
                        v295 = v113;
                        ecs_stack_allocator_push_snapshot(v113[4]);
                        v296 = v114;
                        v116 = *(_QWORD *)(*(_QWORD *)(v114 + 40) + 16);
                        v117 = *(_QWORD *)(v116 + 128);
                        if (*(_QWORD *)(v117 + 16)
                          && (v118 = sub_1B1DC3AC8((uint64_t)v93), (v119 & 1) != 0)
                          && *(ValueMetadata **)(*(_QWORD *)(v116 + 24)
                                               + 16 * *(_QWORD *)(*(_QWORD *)(v117 + 56) + 8 * v118)
                                               + 32) == v93)
                        {
                          *(_QWORD *)&v511 = v93;
                          *((_QWORD *)&v511 + 1) = v94;
                          LOBYTE(v514) = 1;
                          v121 = v295;
                          v122 = v295 + 13;
                          v123 = v295[13];
                          v124 = sub_1B1C7A1C4(v123);
                          if (v124)
                          {
                            v125 = v124;
                            v286[1] = v122;
                            v126 = v123 + 32;
                            swift_retain();
                            v293 = v123;
                            swift_bridgeObjectRetain();
                            v127 = 0;
                            v128 = v304;
                            while (1)
                            {
                              sub_1B1792810(v126, (uint64_t)&v522, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                              v129 = sub_1B1F05D20((uint64_t)&v522, (uint64_t)&v511);
                              sub_1B1A04628((uint64_t)&v522, (uint64_t (*)(_QWORD))sub_1B1B1F228);
                              if ((v129 & 1) != 0)
                                break;
                              ++v127;
                              v126 += 72;
                              if (v125 == v127)
                              {
                                v304 = v128;
                                swift_bridgeObjectRelease();
                                v121 = v295;
                                v130 = v296;
                                goto LABEL_145;
                              }
                            }
                            v304 = v128;
                            swift_bridgeObjectRelease();
                            v136 = sub_1B1F02954();
                            v137 = *(_QWORD *)(v135 + 48);
                            v121 = v295;
                            if (v137)
                            {
                              v138 = *(_QWORD *)(v135 + 64);
                              *(_QWORD *)(v137 + 8 * v138) = v294;
                              *(_QWORD *)(v135 + 64) = v138 + 1;
                            }
                            ((void (*)(__int128 *, _QWORD))v136)(&v522, 0);
                          }
                          else
                          {
                            v130 = swift_retain();
LABEL_145:
                            v131 = *(_QWORD *)(v130 + 240) - *(_QWORD *)(v130 + 232);
                            v132 = ecs_stack_allocator_allocate(v121[4], 8 * v131, 8);
                            *v132 = v294;
                            sub_1B1BE90FC((uint64_t)&v511, (uint64_t)&v522);
                            v526 = (unint64_t)v132;
                            v527 = v131;
                            v528 = 1;
                            sub_1B1DC9A64();
                            v133 = *(_QWORD *)(v121[13] + 16);
                            sub_1B1DC9B00(v133);
                            sub_1B1DC9B98(v133, (uint64_t)&v522);
                            nullsub_16(v134);
                          }
                          v120 = v296;
                          sub_1B1B68F14((uint64_t)&v511);
                        }
                        else
                        {
                          v120 = v296;
                          swift_retain();
                          v121 = v295;
                        }
                        sub_1B1F03804((char *)v120);
                        swift_release();
                        ecs_stack_allocator_pop_snapshot(v121[4]);
                        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v120 + 344));
                        swift_release();
                        v79 = (char *)v303;
                        j = v304;
                      }
                    }
                  }
                }
                else
                {
                  sub_1B1FE16DC((uint64_t)v93, (uint64_t)v94, v302);
                  v79 = (char *)v303;
                }
                ++v91;
              }
              while (v91 != v305);
            }
            else
            {
              v79 = (char *)v303;
            }
          }
        }
      }
LABEL_87:
      v78 = (uint64_t *)((char *)v78 + 1);
    }
    while (v78 != v309);
    swift_bridgeObjectRelease();
    v4 = v308;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v139 = v301;
  if (v4[48] == 1)
  {
    v140 = *(_OWORD *)(v301 + 80);
    v548[0] = *(_OWORD *)(v301 + 64);
    v548[1] = v140;
    v549 = *(_QWORD *)(v301 + 96);
    sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v548, 0x200000000, v315);
    sub_1B1A18378((uint64_t)v315, (uint64_t)&v393, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (v393)
    {
      v537 = v393;
      v538 = v394;
      v539 = v395;
      v541 = v397;
      v540 = v396;
      v542 = v398;
      v544 = v400;
      v545 = v401;
      v543 = v399;
      v546 = v402;
      v547 = v403;
      swift_retain();
      sub_1B219BBA8((uint64_t)&v537, (uint64_t)v4);
      swift_release();
      sub_1B1A086DC(v315, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    v139 = v301;
  }
  v141 = *(_OWORD *)(v139 + 160);
  v535[0] = *(_OWORD *)(v139 + 144);
  v535[1] = v141;
  v536 = *(_QWORD *)(v139 + 176);
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v535, 0x200000000, v316);
  sub_1B1A18378((uint64_t)v316, (uint64_t)v390, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v390[0])
  {
    v304 = j;
    if (v392 >= 1 && v391)
    {
      v142 = 48 * v391;
      v143 = v390[5] + 40;
      do
      {
        v148 = *(_QWORD *)v143;
        v149 = *(os_unfair_lock_s **)(*(_QWORD *)v143 + 376);
        swift_retain();
        os_unfair_lock_lock(v149);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v148 + 344));
        v150 = *(_DWORD *)(v148 + 24);
        swift_retain();
        v524 = 0;
        v523 = 0u;
        v522 = 0u;
        v513 = 0;
        v511 = 0u;
        v512 = 0u;
        v151 = sub_1B1DA4ED8(v150, (uint64_t)&type metadata for TextureGPURepresentationDoNotUpload, (uint64_t)&off_1E63B7CE8, 0, 0, (uint64_t)&v522, (uint64_t)&v511);
        swift_release();
        sub_1B1A12E98((uint64_t)&v511);
        sub_1B1A12E98((uint64_t)&v522);
        if (sub_1B1A10B20(v151))
        {
          sub_1B1A10BB0(v151);
        }
        else
        {
          v144 = *(_QWORD *)(v148 + 232);
          v145 = *(_QWORD *)(v148 + 240);
          v146 = *(unsigned __int8 *)(v148 + 120);
          v147 = *(unsigned int *)(v148 + 28);
          LOBYTE(v522) = *(_BYTE *)(v148 + 32);
          sub_1B1FD8C68(v144, v145, v151, v146, v147 | ((unint64_t)v522 << 32), 0, 0, 0);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v148 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v148 + 376));
        swift_release();
        v143 += 48;
        v142 -= 48;
      }
      while (v142);
    }
    sub_1B1A086DC(v316, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v4 = v308;
    j = v304;
  }
  v152 = *(_OWORD *)(v301 + 240);
  v533[0] = *(_OWORD *)(v301 + 224);
  v533[1] = v152;
  v534 = *(_QWORD *)(v301 + 256);
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v533, 0x200000000, v317);
  sub_1B1A18378((uint64_t)v317, (uint64_t)v381, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v153 = *(_QWORD *)&v381[0];
  if (!*(_QWORD *)&v381[0])
    goto LABEL_191;
  v386 = v381[2];
  v387 = v381[3];
  v388 = v382;
  v389 = v383;
  v384 = v381[0];
  v385 = v381[1];
  v154 = (char *)v382;
  v155 = (int *)*((_QWORD *)&v383 + 1);
  swift_retain();
  v299 = sub_1B1FAC22C();
  swift_release();
  v309 = (uint64_t *)v389;
  v304 = j;
  if ((uint64_t)v389 >= 1)
  {
    v156 = (uint64_t *)*((_QWORD *)&v387 + 1);
    if (*((_QWORD *)&v387 + 1))
    {
      v291 = v154;
      v292 = v155;
      v293 = v153;
      v157 = *((_QWORD *)&v388 + 1);
      v158 = *(_QWORD *)(*((_QWORD *)&v388 + 1) + 32);
      v159 = *((_QWORD *)&v386 + 1);
      v298 = (_QWORD *)v388;
      v160 = *(unsigned __int8 *)(v388 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v296 = *((_QWORD *)&v388 + 1) + 48;
      swift_retain();
      sub_1B1A086DC(v317, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      v294 = &v528;
      v295 = (_QWORD *)(v157 + 64);
      v161 = (uint64_t *)(v159 + 24);
      LODWORD(v297) = v160;
      do
      {
        v162 = *((unsigned int *)v161 - 6);
        v163 = *((unsigned int *)v161 - 5);
        v164 = *((unsigned int *)v161 - 4);
        v165 = *v161;
        v166 = v161[1];
        v167 = (_OWORD *)v161[2];
        v306 = *(v161 - 1);
        v307 = v156;
        v305 = v165;
        v302 = v162;
        v303 = v166;
        if (v160)
        {
          v168 = (os_unfair_lock_s *)*((_QWORD *)v167 + 47);
          swift_retain();
          os_unfair_lock_lock(v168);
          os_unfair_lock_lock(*((os_unfair_lock_t *)v167 + 43));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v158);
        sub_1B1A18378(v296, (uint64_t)v521, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v169 = *(_QWORD *)(v157 + 32);
        v170 = v158;
        v171 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v167 + 5) + 16) + 32) + 16) + 1;
        swift_retain();
        *(_QWORD *)(v157 + 48) = ecs_stack_allocator_allocate(v169, 48 * v171, 8);
        *(_QWORD *)(v157 + 56) = v171;
        v172 = v295;
        v295[1] = 0;
        v172[2] = 0;
        *v172 = 0;
        swift_release();
        *(_QWORD *)&v522 = v298;
        *((_QWORD *)&v522 + 1) = v167;
        *(_QWORD *)&v523 = v157;
        *((_QWORD *)&v523 + 1) = v164;
        v524 = (v163 - v302 + v164);
        v525 = v309;
        v526 = v302;
        v527 = v163;
        v173 = v294;
        *v294 = 0;
        v173[1] = 0;
        v529 = 1;
        v530 = v306;
        v531 = v305;
        v532 = v303;
        v4 = v308;
        swift_retain();
        j = v304;
        sub_1B21A2100((uint64_t *)&v522, (uint64_t)v4, v299, 0);
        if (j)
          goto LABEL_264;
        swift_release();
        v423[0] = v384;
        v423[1] = v385;
        v424 = v386;
        sub_1B1F05D48((_QWORD *)v157, (unsigned __int16 **)v423, (uint64_t)v521);
        sub_1B1F03804((char *)v167);
        ecs_stack_allocator_pop_snapshot(v170);
        v158 = v170;
        v160 = v297;
        if ((v297 & 1) != 0)
        {
          os_unfair_lock_unlock(*((os_unfair_lock_t *)v167 + 43));
          os_unfair_lock_unlock(*((os_unfair_lock_t *)v167 + 47));
        }
        v304 = 0;
        swift_release();
        v161 += 6;
        v156 = (uint64_t *)((char *)v307 - 1);
      }
      while (v307 != (uint64_t *)1);
      sub_1B1A086DC(v317, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      swift_release();
    }
  }
  v174 = v310;
  swift_retain();
  sub_1B1FAC4DC(v299);
  swift_release();
  sub_1B1BA2FBC();
  swift_retain();
  swift_retain();
  swift_retain();
  v175 = sub_1B1BEA85C();
  sub_1B1A086DC(v317, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B2112D04((uint64_t)v4, v175);
  swift_bridgeObjectRelease();
  v176 = *(void **)(v174 + 368);
  if (v176)
  {
    objc_msgSend(v176, sel_commit);
    *(_QWORD *)(v174 + 368) = 0;
    swift_unknownObjectRelease();
    if ((uint64_t)v309 <= 0)
      goto LABEL_190;
LABEL_180:
    v177 = (uint64_t *)*((_QWORD *)&v387 + 1);
    if (*((_QWORD *)&v387 + 1))
    {
      v170 = *((_QWORD *)&v388 + 1);
      v178 = *(_QWORD *)(*((_QWORD *)&v388 + 1) + 32);
      v179 = *((_QWORD *)&v386 + 1);
      v298 = (_QWORD *)v388;
      v180 = *(unsigned __int8 *)(v388 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v296 = *((_QWORD *)&v388 + 1) + 48;
      swift_retain();
      sub_1B1A086DC(v317, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      v294 = (uint64_t *)v517;
      v295 = (_QWORD *)(v170 + 64);
      v181 = (uint64_t *)(v179 + 24);
      LODWORD(v297) = v180;
      do
      {
        v182 = *((unsigned int *)v181 - 6);
        v183 = *((unsigned int *)v181 - 5);
        v157 = *((unsigned int *)v181 - 4);
        v184 = *v181;
        v185 = v181[1];
        v167 = (_OWORD *)v181[2];
        v306 = *(v181 - 1);
        v307 = v177;
        v305 = v184;
        v302 = v182;
        v303 = v185;
        if (v180)
        {
          v186 = (os_unfair_lock_s *)*((_QWORD *)v167 + 47);
          swift_retain();
          os_unfair_lock_lock(v186);
          os_unfair_lock_lock(*((os_unfair_lock_t *)v167 + 43));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v178);
        sub_1B1A18378(v296, (uint64_t)v510, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
        v187 = *(_QWORD *)(v170 + 32);
        v188 = v178;
        v189 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v167 + 5) + 16) + 32) + 16) + 1;
        swift_retain();
        *(_QWORD *)(v170 + 48) = ecs_stack_allocator_allocate(v187, 48 * v189, 8);
        *(_QWORD *)(v170 + 56) = v189;
        v190 = v295;
        v295[1] = 0;
        v190[2] = 0;
        *v190 = 0;
        swift_release();
        *(_QWORD *)&v511 = v298;
        *((_QWORD *)&v511 + 1) = v167;
        *(_QWORD *)&v512 = v170;
        *((_QWORD *)&v512 + 1) = v157;
        v513 = (v183 - v302 + v157);
        v514 = v309;
        v515 = v302;
        v516 = v183;
        v191 = v294;
        *v294 = 0;
        v191[1] = 0;
        v517[16] = 1;
        v518 = v306;
        v519 = v305;
        v520 = v303;
        v4 = v308;
        swift_retain();
        v192 = v304;
        sub_1B21A249C((uint64_t *)&v511, (uint64_t)v4);
        if (v192)
        {
          swift_release_n();

          v445 = v384;
          v446 = v385;
          v447 = v386;
          j = 0;
          sub_1B1F05D48((_QWORD *)v170, (unsigned __int16 **)&v445, (uint64_t)v510);
          sub_1B1F03804((char *)v167);
          v284 = v188;
          goto LABEL_266;
        }
        swift_release();
        v425[0] = v384;
        v425[1] = v385;
        v426 = v386;
        sub_1B1F05D48((_QWORD *)v170, (unsigned __int16 **)v425, (uint64_t)v510);
        sub_1B1F03804((char *)v167);
        ecs_stack_allocator_pop_snapshot(v188);
        v178 = v188;
        v193 = v307;
        v180 = v297;
        if ((v297 & 1) != 0)
        {
          os_unfair_lock_unlock(*((os_unfair_lock_t *)v167 + 43));
          os_unfair_lock_unlock(*((os_unfair_lock_t *)v167 + 47));
        }
        v304 = 0;
        swift_release();
        v181 += 6;
        v177 = (uint64_t *)((char *)v193 - 1);
      }
      while (v177);
      sub_1B1A086DC(v317, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      swift_release();
    }
    goto LABEL_190;
  }
  if ((uint64_t)v309 >= 1)
    goto LABEL_180;
LABEL_190:
  j = v304;
  swift_retain();
  sub_1B1FAC8F8(v299);
  sub_1B1A086DC(v317, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  swift_release();
LABEL_191:
  v311 = (char *)MEMORY[0x1E0DEE9D8];
  v509 = *(_QWORD *)(v301 + 296);
  v194 = *(_OWORD *)(v301 + 280);
  v508[0] = *(_OWORD *)(v301 + 264);
  v508[1] = v194;
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v508, 0x200000000, v318);
  sub_1B1A18378((uint64_t)v318, (uint64_t)v371, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v371[0])
  {
    v378 = v371[0];
    v379 = v371[1];
    v380 = v372;
    if (v377 >= 1)
    {
      v299 = v374;
      if (v374)
      {
        v298 = (_QWORD *)v373;
        v195 = v376[4];
        v305 = v375;
        v196 = *(unsigned __int8 *)(v375 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v307 = v376;
        v294 = v376 + 8;
        v295 = v376 + 6;
        swift_retain();
        swift_retain();
        swift_retain();
        v197 = 0;
        v297 = v195;
        LODWORD(v296) = v196;
        while (1)
        {
          v302 = v197;
          v198 = (unsigned int *)&v298[6 * v197];
          v170 = *v198;
          v303 = v198[1];
          v304 = j;
          v157 = v198[2];
          v309 = (uint64_t *)*((_QWORD *)v198 + 2);
          v167 = (_OWORD *)*((_QWORD *)v198 + 4);
          v306 = *((_QWORD *)v198 + 3);
          v199 = *((_QWORD *)v198 + 5);
          if (v196)
          {
            v200 = *(os_unfair_lock_s **)(v199 + 376);
            swift_retain();
            os_unfair_lock_lock(v200);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v199 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v195);
          sub_1B1A18378((uint64_t)v295, (uint64_t)v505, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v201 = v307;
          v202 = v307[4];
          v203 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v199 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v201[6] = (uint64_t)ecs_stack_allocator_allocate(v202, 48 * v203, 8);
          v201[7] = v203;
          v204 = v294;
          v294[1] = 0;
          v204[2] = 0;
          *v204 = 0;
          swift_release();
          v205 = v309;
          v206 = sub_1B1A12038((uint64_t)&type metadata for TextureArrayFileAsset, (uint64_t)&off_1E63A69A0, v309, v306, (uint64_t)v167, (uint64_t)v201);
          v207 = v206;
          v208 = v199;
          v306 = v199;
          if (v205)
          {
            for (j = v304; v167; v167 = (_OWORD *)((char *)v167 - 1))
            {
              v209 = j;
              v170 = *v309++;
              v506[0] = v305;
              v506[1] = v208;
              v506[2] = v307;
              v506[3] = v157;
              v506[4] = v170;
              sub_1B20F2F40((uint64_t)v319);
              v210 = *(_BYTE *)(v208 + 184);
              v211 = swift_retain();
              if ((v210 & 1) != 0)
                goto LABEL_261;
              v212 = *(unsigned int *)(*(_QWORD *)(v208 + 168) + 4 * v170);
              v213 = *(unsigned int *)(*(_QWORD *)(v211 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                     + 12 * (int)v212
                                     + 8);
              swift_release();
              sub_1B1DC9A70();
              v214 = *((_QWORD *)v311 + 2);
              sub_1B1DC9B0C(v214);
              v215 = v212 | (v213 << 32);
              v208 = v306;
              v216 = sub_1B1DC9BC8(v214, v215);
              nullsub_16(v216);
              swift_retain();
              v217 = sub_1B1A101F0(v170);
              swift_release();
              v218 = v310;
              swift_retain();
              v4 = v308;
              swift_retain();
              j = v209;
              sub_1B1FF25C0(v217, (uint64_t)v4, v207, (uint64_t)v319, (uint64_t)v506, (uint64_t)v4, v218);
              swift_release();
              swift_release();
              ++v157;
              v207 += 8;
            }
          }
          else
          {
            j = v304;
            if ((_DWORD)v170 != (_DWORD)v303)
            {
              v219 = v206 + 8 * v170;
              while (1)
              {
                v220 = j;
                v507[0] = v305;
                v507[1] = v208;
                v507[2] = v307;
                v507[3] = v157;
                v507[4] = v170;
                sub_1B20F2F40((uint64_t)v320);
                v221 = *(_BYTE *)(v208 + 184);
                v222 = swift_retain();
                if ((v221 & 1) != 0)
                  break;
                v223 = *(unsigned int *)(*(_QWORD *)(v208 + 168) + 4 * v170);
                v167 = (_OWORD *)(v170 + 1);
                v224 = *(unsigned int *)(*(_QWORD *)(v222 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                       + 12 * (int)v223
                                       + 8);
                swift_release();
                sub_1B1DC9A70();
                v225 = *((_QWORD *)v311 + 2);
                sub_1B1DC9B0C(v225);
                v226 = v223 | (v224 << 32);
                v208 = v306;
                v227 = sub_1B1DC9BC8(v225, v226);
                nullsub_16(v227);
                swift_retain();
                v228 = sub_1B1A101F0(v170);
                swift_release();
                v229 = v310;
                swift_retain();
                v4 = v308;
                swift_retain();
                j = v220;
                sub_1B1FF25C0(v228, (uint64_t)v4, v219, (uint64_t)v320, (uint64_t)v507, (uint64_t)v4, v229);
                swift_release();
                swift_release();
                ++v157;
                v219 += 8;
                v170 = (uint64_t)v167;
                if ((_OWORD *)v303 == v167)
                  goto LABEL_208;
              }
LABEL_261:
              sub_1B2229688();
              __break(1u);
              goto LABEL_262;
            }
          }
LABEL_208:
          v427[0] = v378;
          v427[1] = v379;
          v428 = v380;
          sub_1B1F05D48(v307, (unsigned __int16 **)v427, (uint64_t)v505);
          sub_1B1F03804((char *)v208);
          v230 = v208;
          v195 = v297;
          ecs_stack_allocator_pop_snapshot(v297);
          v196 = v296;
          if ((v296 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v230 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v230 + 376));
          }
          swift_release();
          v197 = v302 + 1;
          if (v302 + 1 == v299)
          {
            sub_1B1A086DC(v318, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            break;
          }
        }
      }
    }
    sub_1B1A086DC(v318, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v231 = *(_OWORD *)(v301 + 400);
  v503[0] = *(_OWORD *)(v301 + 384);
  v503[1] = v231;
  v504 = *(_QWORD *)(v301 + 416);
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v503, 0x200000000, v321);
  sub_1B1A18378((uint64_t)v321, (uint64_t)&v360, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v360)
  {
    v492 = v360;
    v493 = v361;
    v494 = v362;
    v496 = v364;
    v495 = v363;
    v497 = v365;
    v499 = v367;
    v500 = v368;
    v498 = v366;
    v501 = v369;
    v502 = v370;
    v232 = v310;
    swift_retain();
    sub_1B219C630((uint64_t)&v492, v232);
    swift_release();
    sub_1B1A086DC(v321, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v491 = *(_QWORD *)(v301 + 376);
  v233 = *(_OWORD *)(v301 + 360);
  v490[0] = *(_OWORD *)(v301 + 344);
  v490[1] = v233;
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v490, 0x200000000, v322);
  sub_1B1A18378((uint64_t)v322, (uint64_t)&v349, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v349)
  {
    v479 = v349;
    v480 = v350;
    v481 = v351;
    v483 = v353;
    v482 = v352;
    v484 = v354;
    v486 = v356;
    v487 = v357;
    v485 = v355;
    v488 = v358;
    v489 = v359;
    v234 = v310;
    swift_retain();
    sub_1B219CF64((uint64_t)&v479, v234);
    swift_release();
    sub_1B1A086DC(v322, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v235 = *(_OWORD *)(v301 + 640);
  v477[0] = *(_OWORD *)(v301 + 624);
  v477[1] = v235;
  v478 = *(_QWORD *)(v301 + 656);
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v477, 0x200000000, v323);
  sub_1B1A18378((uint64_t)v323, (uint64_t)&v338, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v338)
  {
    v466 = v338;
    v467 = v339;
    v468 = v340;
    v470 = v342;
    v469 = v341;
    v471 = v343;
    v473 = v345;
    v474 = v346;
    v472 = v344;
    v475 = v347;
    v476 = v348;
    v236 = v310;
    swift_retain();
    sub_1B21A0D4C((uint64_t)&v466, &v311, v236);
    swift_release();
    sub_1B1A086DC(v323, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v465 = *(_QWORD *)(v301 + 536);
  v237 = *(_OWORD *)(v301 + 520);
  v464[0] = *(_OWORD *)(v301 + 504);
  v464[1] = v237;
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)v464, 0x200000000, v324);
  sub_1B1A18378((uint64_t)v324, (uint64_t)v335, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v335[0])
  {
    if (v337 >= 1 && v336)
    {
      v238 = 48 * v336;
      v239 = v335[5] + 40;
      do
      {
        v244 = *(_QWORD *)v239;
        v245 = *(os_unfair_lock_s **)(*(_QWORD *)v239 + 376);
        swift_retain();
        os_unfair_lock_lock(v245);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v244 + 344));
        v246 = *(_DWORD *)(v244 + 24);
        swift_retain();
        v447 = 0;
        v446 = 0u;
        v445 = 0u;
        *(_QWORD *)&v436 = 0;
        v435 = 0u;
        v434 = 0u;
        v247 = sub_1B1DA4ED8(v246, (uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, 0, 0, (uint64_t)&v445, (uint64_t)&v434);
        swift_release();
        sub_1B1A12E98((uint64_t)&v434);
        sub_1B1A12E98((uint64_t)&v445);
        if (sub_1B1A10B20(v247))
        {
          sub_1B1A10BB0(v247);
        }
        else
        {
          v240 = *(_QWORD *)(v244 + 232);
          v241 = *(_QWORD *)(v244 + 240);
          v242 = *(unsigned __int8 *)(v244 + 120);
          v243 = *(unsigned int *)(v244 + 28);
          LOBYTE(v445) = *(_BYTE *)(v244 + 32);
          sub_1B1FD8C68(v240, v241, v247, v242, v243 | ((unint64_t)v445 << 32), 0, 0, 0);
        }
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v244 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v244 + 376));
        swift_release();
        v239 += 48;
        v238 -= 48;
      }
      while (v238);
    }
    sub_1B1A086DC(v324, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v4 = v308;
  }
  v248 = *(_OWORD *)(v301 + 560);
  v462[0] = *(_OWORD *)(v301 + 544);
  v462[1] = v248;
  v463 = *(_QWORD *)(v301 + 576);
  sub_1B20F02F4((uint64_t)v462, 0x200000000, (uint64_t)v325);
  sub_1B1B4D278((uint64_t)v325, (uint64_t)v333, &qword_1ED4BB2A8, (uint64_t (*)(uint64_t))sub_1B2114984);
  if (*(_QWORD *)&v333[0])
  {
    v433 = v334;
    v430 = v333[2];
    v431 = v333[3];
    v432 = v333[4];
    v429[0] = v333[0];
    v429[1] = v333[1];
    if ((uint64_t)v334 >= 1)
    {
      v307 = (uint64_t *)*((_QWORD *)&v431 + 1);
      if (*((_QWORD *)&v431 + 1))
      {
        v249 = *(_QWORD *)(*((_QWORD *)&v432 + 1) + 32);
        v302 = *((_QWORD *)&v430 + 1);
        v303 = *((_QWORD *)&v432 + 1);
        v250 = *(unsigned __int8 *)(v432 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v299 = *((_QWORD *)&v432 + 1) + 64;
        v300 = *((_QWORD *)&v432 + 1) + 48;
        swift_retain();
        swift_retain();
        swift_retain();
        v251 = 0;
        LODWORD(v305) = v250;
        v306 = v249;
        do
        {
          v304 = j;
          v252 = (__int128 *)(v302 + 48 * (_QWORD)v251);
          v253 = *v252;
          v254 = v252[2];
          v459 = v252[1];
          v460 = v254;
          v458 = v253;
          v309 = v251;
          if (v250)
          {
            v255 = *((_QWORD *)&v460 + 1);
            v256 = *(os_unfair_lock_s **)(*((_QWORD *)&v460 + 1) + 376);
            sub_1B20BEAA4((uint64_t)&v458);
            os_unfair_lock_lock(v256);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v255 + 344));
          }
          else
          {
            sub_1B20BEAA4((uint64_t)&v458);
          }
          ecs_stack_allocator_push_snapshot(v249);
          v257 = *((_QWORD *)&v460 + 1);
          sub_1B1A18378(v300, (uint64_t)v461, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v258 = v303;
          v259 = *(_QWORD *)(v303 + 32);
          v260 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v257 + 40) + 16) + 32) + 16) + 1;
          sub_1B20BEAA4((uint64_t)&v458);
          *(_QWORD *)(v258 + 48) = ecs_stack_allocator_allocate(v259, 48 * v260, 8);
          *(_QWORD *)(v258 + 56) = v260;
          v261 = (_QWORD *)v299;
          *(_QWORD *)(v299 + 8) = 0;
          v261[2] = 0;
          *v261 = 0;
          sub_1B1C798FC((uint64_t)&v458);
          v262 = v458;
          v263 = DWORD1(v458);
          v264 = *((_QWORD *)&v459 + 1);
          v265 = (uint64_t *)v459;
          v157 = v460;
          v167 = (_OWORD *)sub_1B1A12038((uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&off_1E6396640, (uint64_t *)v459, *((uint64_t *)&v459 + 1), v460, v258);
          v266 = sub_1B1A12038((uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, v265, v264, v157, v258);
          v170 = v266;
          if (v265)
          {
            v4 = v308;
            j = v304;
            if (v157)
            {
              do
              {
                v267 = *v265++;
                v266 = sub_1B2113B80(v257, v267, (uint64_t *)v167, (_QWORD *)v170, v4, &v311, v310);
                if (j)
                  goto LABEL_262;
                v170 += 8;
                v167 = (_OWORD *)((char *)v167 + 168);
              }
              while (--v157);
            }
          }
          else
          {
            v4 = v308;
            j = v304;
            if ((_DWORD)v262 != (_DWORD)v263)
            {
              v268 = (_QWORD *)(v266 + 8 * v262);
              v157 = (uint64_t)v167 + 168 * v262;
              while (1)
              {
                v266 = sub_1B2113B80(v257, v262, (uint64_t *)v157, v268, v4, &v311, v310);
                if (j)
                  break;
                ++v262;
                ++v268;
                v157 += 168;
                if (v263 == v262)
                  goto LABEL_231;
              }
LABEL_262:

              nullsub_16(v281);
              sub_1B1BEB470((uint64_t)v429, (uint64_t)v461, (uint64_t)&v458);
              j__ecs_stack_allocator_pop_snapshot(v306);
              sub_1B1BEB43C(v305, (uint64_t)&v458);
              sub_1B1A086DC(v325, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
              v282 = &v458;
              goto LABEL_263;
            }
          }
LABEL_231:
          v251 = (uint64_t *)((char *)v309 + 1);
          nullsub_16(v266);
          sub_1B1BEB470((uint64_t)v429, (uint64_t)v461, (uint64_t)&v458);
          v249 = v306;
          j__ecs_stack_allocator_pop_snapshot(v306);
          v250 = v305;
          sub_1B1BEB43C(v305, (uint64_t)&v458);
          sub_1B1C798FC((uint64_t)&v458);
        }
        while (v251 != v307);
        sub_1B1A086DC(v325, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    sub_1B1A086DC(v325, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v457 = *(_QWORD *)(v301 + 616);
  v269 = *(_OWORD *)(v301 + 600);
  v456[0] = *(_OWORD *)(v301 + 584);
  v456[1] = v269;
  sub_1B1B72A48(v326, v456, 0x200000000);
  sub_1B21149F8((uint64_t)v326, (uint64_t)v331, &qword_1ED4B81A8, &qword_1ED4B81A0, (uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060);
  if (*(_QWORD *)&v331[0])
  {
    v439 = v332;
    v436 = v331[2];
    v437 = v331[3];
    v438 = v331[4];
    v434 = v331[0];
    v435 = v331[1];
    v309 = (uint64_t *)v332;
    if ((uint64_t)v332 > 0 && (v270 = *((_QWORD *)&v437 + 1)) != 0)
    {
      v271 = *((_QWORD *)&v438 + 1);
      v170 = *(_QWORD *)(*((_QWORD *)&v438 + 1) + 32);
      v272 = (__int128 *)*((_QWORD *)&v436 + 1);
      v307 = (uint64_t *)v438;
      v157 = *(unsigned __int8 *)(v438 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      swift_retain();
      sub_1B1A086DC(v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
      do
      {
        v273 = *v272;
        v274 = v272[1];
        v444 = v272[2];
        v443 = v274;
        v167 = v329;
        v442 = v273;
        sub_1B20BEAA4((uint64_t)&v442);
        if ((_DWORD)v157)
          sub_1B1A10A88();
        j__ecs_stack_allocator_push_snapshot(v170);
        v275 = *((_QWORD *)&v444 + 1);
        sub_1B20BEAA4((uint64_t)&v442);
        sub_1B1F02DC8(v275, v271, (uint64_t)v327);
        sub_1B1C798FC((uint64_t)&v442);
        *(_QWORD *)&v445 = v307;
        *((_QWORD *)&v445 + 1) = v275;
        *(_QWORD *)&v446 = v271;
        *((_QWORD *)&v446 + 1) = DWORD2(v442);
        v447 = (DWORD1(v442) - v442 + DWORD2(v442));
        v276 = v310;
        v448 = v309;
        v449 = v442;
        v450 = DWORD1(v442);
        v451 = 0;
        v452 = 0;
        v453 = 1;
        v454 = v443;
        v455 = v444;
        swift_retain();
        v277 = sub_1B21A27DC(&v445, v276, &v311);
        if (j)
        {
          while (1)
          {
            swift_release();

            nullsub_16(v285);
            sub_1B1BEB470((uint64_t)&v434, (uint64_t)v327, (uint64_t)&v442);
            j__ecs_stack_allocator_pop_snapshot(v170);
            sub_1B1BEB43C(v157, (uint64_t)&v442);
            sub_1B1A086DC(v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            v282 = &v442;
LABEL_263:
            v283 = sub_1B1C798FC((uint64_t)v282);
            nullsub_16(v283);
            __break(1u);
LABEL_264:
            swift_release_n();

            v511 = v384;
            v512 = v385;
            v513 = v386;
            j = 0;
            sub_1B1F05D48((_QWORD *)v157, (unsigned __int16 **)&v511, (uint64_t)v521);
            sub_1B1F03804((char *)v167);
            v284 = v170;
LABEL_266:
            ecs_stack_allocator_pop_snapshot(v284);
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v167 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v167 + 47));
            __break(1u);
          }
        }
        nullsub_16(v277);
        sub_1B1BEB470((uint64_t)&v434, (uint64_t)v327, (uint64_t)&v442);
        j__ecs_stack_allocator_pop_snapshot(v170);
        sub_1B1BEB43C(v157, (uint64_t)&v442);
        sub_1B1C798FC((uint64_t)&v442);
        v272 += 3;
        --v270;
      }
      while (v270);
      sub_1B1A086DC(v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B1A086DC(v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      swift_release();
      v4 = v308;
    }
    else
    {
      sub_1B1A086DC(v326, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
  }
  v278 = *(_OWORD *)(v301 + 480);
  v440[0] = *(_OWORD *)(v301 + 464);
  v440[1] = v278;
  v441 = *(_QWORD *)(v301 + 496);
  sub_1B1B72A48(v328, v440, 0x200000000);
  sub_1B21149F8((uint64_t)v328, (uint64_t)v329, &qword_1ED4B81B8, &qword_1ED4B81B0, (uint64_t)&type metadata for TextureRenderTarget, (uint64_t)&off_1E639A9F0);
  v279 = v310;
  if (*(_QWORD *)&v329[0])
  {
    v330[2] = v329[2];
    v330[3] = v329[3];
    v330[4] = v329[4];
    v330[5] = v329[5];
    v330[0] = v329[0];
    v330[1] = v329[1];
    swift_retain();
    sub_1B219D254((uint64_t)v330, v279);
    swift_release();
    sub_1B1A086DC(v328, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v280 = v311;
  swift_bridgeObjectRetain();
  sub_1B2112D04((uint64_t)v4, (uint64_t)v280);
  swift_release();
  return swift_bridgeObjectRelease_n();
}

id sub_1B2105A04(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id result;
  _QWORD *v9;

  if ((a2 & 1) != 0 || (result = objc_msgSend(a1, sel_status), result == (id)5))
  {
    result = (id)swift_weakLoadStrong();
    if (result)
    {
      v9 = (_QWORD *)swift_allocObject();
      v9[2] = a4;
      v9[3] = a3;
      v9[4] = a5;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B1DA6294((uint64_t)sub_1B2115DD0, (uint64_t)v9);
      swift_release();
      return (id)swift_release();
    }
  }
  return result;
}

void sub_1B2105ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t Strong;
  double v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t ObjectType;
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int v74;
  _QWORD v75[2];
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;

  v85 = a3;
  v88 = sub_1B2228110();
  MEMORY[0x1E0C80A78](v88, v5);
  v90 = (char *)v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v82 = v6;
    v91 = a2 + 16;
    v9 = a1 + 32;
    swift_bridgeObjectRetain();
    v10 = 0;
    v84 = 0;
    v78 = 0x80000001B23326A0;
    v79 = 0x80000001B2332670;
    v80 = 0x80000001B234D060;
    v81 = 0x80000001B234D020;
    v86 = v8;
    v87 = a1;
    v89 = a1 + 32;
    while (1)
    {
      v11 = (int *)(v9 + 8 * v10);
      v12 = v11[1];
      v13 = *v11;
      v14 = *v11;
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v17 = v14 == -1 && v12 == 0;
        if (v17
          || (v13 & 0x80000000) != 0
          || *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v13
          || ((v18 = *(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager__entries), v12 != -1)
            ? (v19 = *(_DWORD *)(v18 + 12 * (int)v13 + 8) == v12)
            : (v19 = 1),
              !v19))
        {
          swift_release();
        }
        else
        {
          v20 = (int *)(v18 + 12 * (int)v13);
          v21 = *((__int16 *)v20 + 2);
          v22 = *(_QWORD *)(*(_QWORD *)(Strong + 136) + 8 * *v20 + 32);
          v23 = *(_QWORD *)(*(_QWORD *)(Strong + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                          + 8 * *(_QWORD *)thread_worker_index(v16)
                          + 8);
          v24 = *(_QWORD *)(v22 + 192);
          if (v24)
          {
            v25 = *(_QWORD *)(v22 + 208);
            v26 = 8 * (v21 >> 6);
            *(_QWORD *)(v24 + v26) |= 1 << v21;
            *(_QWORD *)(v25 + v26) &= ~(1 << v21);
          }
          if (*(_BYTE *)(*(_QWORD *)(v22 + 40) + 213) == 1)
          {
            v27 = *(_QWORD *)(v22 + 48);
            v28 = *(_QWORD *)(v27 + 16);
            v77 = v23;
            if (v28)
            {
              v29 = (uint64_t *)(v27 + 56);
              while ((ValueMetadata *)*(v29 - 3) != &type metadata for PropagateDirtiness)
              {
                v29 += 5;
                if (!--v28)
                  goto LABEL_24;
              }
              v83 = *v29;
            }
            else
            {
LABEL_24:
              v83 = 0;
            }
            v49 = *(_QWORD *)(v22 + 128);
            v50 = *(_BYTE *)(v22 + 184);
            v51 = swift_retain();
            if ((v50 & 1) != 0)
            {
              v74 = 0;
              v73 = 204;
              sub_1B2229688();
              __break(1u);
              return;
            }
            v52 = *(_DWORD *)(*(_QWORD *)(v22 + 168) + 4 * v21);
            v53 = (unsigned int *)(v49 + v83 + 8 * v21);
            v54 = *(unsigned int *)(*(_QWORD *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v52 + 8);
            swift_release();
            v55 = *v53;
            v56 = v53[1];
            if ((_DWORD)v55 != -1 || (_DWORD)v56 != 0)
              sub_1B1B8A6C8(&v92, v52 | (unint64_t)(v54 << 32), v55 | (v56 << 32));
            swift_release();
            v8 = v86;
            v9 = v89;
          }
          else
          {
            swift_release();
            v9 = v89;
          }
        }
      }
      v30 = swift_weakLoadStrong();
      if (v30)
      {
        v31 = v14 == -1 && v12 == 0;
        if (!v31
          && (v13 & 0x80000000) == 0
          && (v32 = (uint64_t *)(v30 + OBJC_IVAR____TtC3VFX13EntityManager__entries),
              *(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v13)
          && ((v33 = *v32, v34 = *v32 + 12 * (int)v13, v35 = *(__int16 *)(v34 + 4), v12 == -1)
           || *(_DWORD *)(v34 + 8) == v12)
          && (v36 = *(_QWORD *)(*(_QWORD *)(v30 + 136) + 8 * *(int *)(v33 + 12 * (int)v13) + 32),
              v37 = *(_QWORD *)(v36 + 48),
              (v38 = *(_QWORD *)(v37 + 16)) != 0))
        {
          v39 = (_QWORD *)(v37 + 56);
          while ((ValueMetadata *)*(v39 - 3) != &type metadata for TextureFileAsset)
          {
            v39 += 5;
            if (!--v38)
              goto LABEL_3;
          }
          v40 = (_QWORD *)(*(_QWORD *)(v36 + 128) + *v39 + 48 * v35);
          v41 = v40[1];
          v77 = v40[2];
          v43 = v40[3];
          v42 = (void *)v40[4];
          v44 = v40[5];
          v45 = v42;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_release();
          v83 = v41;
          if (v42)
          {
            ObjectType = swift_getObjectType();
            v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 8);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v48 = v45;
            v47(v77, v43, ObjectType, v44);
          }
          else
          {
            v76 = v45;
            v58 = qword_1ED4BF430;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v58 != -1)
              swift_once();
            v92 = 0;
            v93 = 0xE000000000000000;
            v75[1] = qword_1ED4D0FB0;
            swift_retain();
            sub_1B2229430();
            sub_1B2228890();
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v59 = v43;
            v60 = v92;
            v61 = v93;
            v62 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v92 = 0;
            swift_retain();
            sub_1B1F1AD70(v62, &v92, v60, v61);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRetain();
            sub_1B2228050();
            swift_bridgeObjectRelease();
            v43 = v59;
            v45 = v76;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (qword_1ED4BF430 != -1)
            swift_once();
          v77 = v43;
          v92 = 0;
          v93 = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          sub_1B2228890();
          sub_1B1BC3C70();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B19E52CC((unint64_t *)&qword_1EEF5AE60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v63 = v92;
          v64 = v93;
          v65 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v92 = 0;
          swift_retain();
          sub_1B1F1AD70(v65, &v92, v63, v64);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          if (v85)
          {
            v66 = *(_QWORD *)(v85 + 240);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v66 + 48));
            v67 = *(_QWORD *)(v66 + 72);
            MEMORY[0x1E0C80A78](v68, v69);
            v70 = v90;
            v73 = (uint64_t)v90;
            swift_bridgeObjectRetain();
            v71 = v84;
            v72 = sub_1B21095E4((uint64_t)sub_1B2000048, &v75[-4], v67);
            v84 = v71;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v66 + 72) = v72;
            swift_bridgeObjectRelease();
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v66 + 48));

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v82 + 8))(v70, v88);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v82 + 8))(v90, v88);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v8 = v86;
          v9 = v89;
        }
        else
        {
LABEL_3:
          swift_release();
        }
      }
      if (++v10 == v8)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
  }
}

void sub_1B21062F0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  __int16 v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  id v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD v33[3];
  char v34;
  __int128 v35;
  uint64_t v36;
  __int16 v37;
  id v38;

  if ((unint64_t)*(unsigned __int8 *)(a3 + 10) << 16 == 0x20000)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_BYTE *)(a2 + 24);
  }
  else
  {
    v7 = (unsigned __int16)*(_QWORD *)a3;
    v8 = WORD1(*(_QWORD *)a3);
    v9 = 0x80;
  }
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_WORD *)(a2 + 56);
  v33[0] = *(_QWORD *)a2;
  v33[1] = v7;
  v33[2] = v8;
  v34 = v9;
  v35 = *(_OWORD *)(a2 + 32);
  v36 = v10;
  v37 = v11;
  v12 = (void *)sub_1B210BD80(a1, (uint64_t)v33, 0, 1, a4);
  v13 = v12;
  if (v12)
  {
    if ((unint64_t)*(unsigned __int8 *)(a3 + 10) << 16 == 0x20000
      || (v14 = *(id *)(a3 + 16), v14 == objc_msgSend(v12, sel_pixelFormat)))
    {
      RGTextureDescriptorFromMTLTexture(v13, (uint64_t)&v26);
      v15 = v31;
      v16 = v32;
      v17 = 0x10000;
      if (!BYTE2(v27))
        v17 = 0;
      v18 = (unsigned __int16)v27 | (unint64_t)v17;
      v19 = v28;
      v20 = v29;
      v21 = v30;
      *(_QWORD *)a3 = v26;
      *(_QWORD *)(a3 + 8) = v18;
      *(_OWORD *)(a3 + 16) = v19;
      *(_OWORD *)(a3 + 32) = v20;
      *(_OWORD *)(a3 + 48) = v21;
      *(_QWORD *)(a3 + 64) = v15;
      *(_QWORD *)(a3 + 72) = v16;
    }
    else
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v26 = 0;
      v27 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      v22 = objc_msgSend(v13, sel_label);
      if (v22)
      {
        v23 = v22;
        sub_1B222874C();

      }
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v38 = v14;
      type metadata accessor for MTLPixelFormat(0);
      sub_1B22295EC();
      sub_1B2228890();
      v38 = objc_msgSend(v13, sel_pixelFormat);
      sub_1B22295EC();
      v24 = v26;
      v25 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v26 = 0;
      swift_retain();
      sub_1B1F1AD70(v25, &v26, v24, v27);
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v13 = 0;
    }
  }
  *a5 = v13;
}

uint64_t sub_1B2106604()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1B21066A0()
{
  sub_1B2106604();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TextureSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B21066E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v79;
  uint64_t v80;
  int v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[40];
  _OWORD v86[2];
  uint64_t v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[40];
  uint64_t v94;
  int v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  _BYTE v134[40];
  _OWORD v135[2];
  uint64_t v136;
  _BYTE v137[40];
  _OWORD v138[2];
  uint64_t v139;
  uint64_t v140;
  int v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  _BYTE v145[40];
  uint64_t v146;
  int v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  _BYTE v151[40];
  uint64_t v152;
  int v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  char v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  char v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  char v183;
  uint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  char v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  char v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  char v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  char v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  char v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  char v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  char v225;
  uint64_t v226;
  char v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  char v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  char v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  char v243;
  uint64_t v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  char v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  uint64_t v253;

  v1 = v0;
  v253 = *MEMORY[0x1E0C80C00];
  v2 = sub_1B2228F38();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1B2228F14();
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = sub_1B22284AC();
  MEMORY[0x1E0C80A78](v9, v10);
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B72D0);
  sub_1B22284A0();
  sub_1B2228F08();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0DEF8D0], v2);
  *(_QWORD *)(v1 + 16) = sub_1B2228F5C();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v247 = qword_1ED4D09F8;
  v248 = 0;
  v249 = 2;
  v250 = 0;
  v251 = 2;
  v252 = 0;
  swift_retain();
  sub_1B1E39678(1, (uint64_t)&v80);
  swift_release();
  v11 = v81;
  v12 = v82;
  v13 = v84;
  v14 = v83 | 4;
  *(_QWORD *)(v1 + 24) = v80;
  *(_DWORD *)(v1 + 32) = v11;
  *(_BYTE *)(v1 + 36) = v12;
  *(_QWORD *)(v1 + 40) = v14;
  *(_BYTE *)(v1 + 48) = 2;
  *(_QWORD *)(v1 + 56) = v13;
  v241 = qword_1ED4D09F8;
  v242 = 0;
  v243 = 2;
  v244 = 0;
  v245 = 2;
  v246 = 0;
  swift_retain();
  sub_1B1E39870(1, (uint64_t)v85);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_allocObject();
  v79 = xmmword_1B226D240;
  *(_OWORD *)(v15 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v15 + 32) = &type metadata for FileWatcher;
  *(_QWORD *)(v15 + 40) = &off_1E6370618;
  sub_1B1B44110(v86, v15);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v85);
  v16 = v86[1];
  *(_OWORD *)(v1 + 64) = v86[0];
  *(_OWORD *)(v1 + 80) = v16;
  *(_QWORD *)(v1 + 96) = v87;
  v17 = qword_1ED4D09F8;
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v79;
  *(_QWORD *)(v18 + 32) = &type metadata for TextureFileAsset;
  *(_QWORD *)(v18 + 40) = &off_1E638AE10;
  v235 = v17;
  v236 = 0;
  v237 = 2;
  v238 = 0;
  v239 = 2;
  v240 = 0;
  swift_retain();
  sub_1B1E68AF8(v18, 1, (uint64_t)&v88);
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_release();
  v19 = v92;
  v20 = v91 | 4;
  v21 = v89;
  v22 = v90;
  *(_QWORD *)(v1 + 104) = v88;
  *(_DWORD *)(v1 + 112) = v21;
  *(_BYTE *)(v1 + 116) = v22;
  *(_QWORD *)(v1 + 120) = v20;
  *(_BYTE *)(v1 + 128) = 2;
  *(_QWORD *)(v1 + 136) = v19;
  v23 = qword_1ED4D09F8;
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = v79;
  *(_QWORD *)(v24 + 32) = &type metadata for TextureFileAsset;
  *(_QWORD *)(v24 + 40) = &off_1E638AE10;
  v229 = v23;
  v230 = 0;
  v231 = 2;
  v232 = 0;
  v233 = 2;
  v234 = 0;
  swift_retain();
  sub_1B1E68AF8(v24, 1, (uint64_t)v93);
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_release();
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = v79;
  *(_QWORD *)(v25 + 32) = &type metadata for TextureGPURepresentationDoNotUpload;
  *(_QWORD *)(v25 + 40) = &off_1E63B7D18;
  sub_1B1B441D4(v25, (uint64_t)&v94);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v93);
  v26 = v98;
  v27 = v97 | 4;
  v28 = v95;
  v29 = v96;
  *(_QWORD *)(v1 + 144) = v94;
  *(_DWORD *)(v1 + 152) = v28;
  *(_BYTE *)(v1 + 156) = v29;
  *(_QWORD *)(v1 + 160) = v27;
  *(_BYTE *)(v1 + 168) = 2;
  *(_QWORD *)(v1 + 176) = v26;
  v30 = qword_1ED4D09F8;
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = v79;
  *(_QWORD *)(v31 + 32) = &type metadata for TextureArrayFileAsset;
  *(_QWORD *)(v31 + 40) = &off_1E63A6A18;
  v223 = v30;
  v224 = 0;
  v225 = 2;
  v226 = 0;
  v227 = 2;
  v228 = 0;
  swift_retain();
  sub_1B1E68AF8(v31, 1, (uint64_t)&v99);
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_release();
  v32 = v103;
  v33 = v102 | 4;
  v34 = v100;
  v35 = v101;
  *(_QWORD *)(v1 + 184) = v99;
  *(_DWORD *)(v1 + 192) = v34;
  *(_BYTE *)(v1 + 196) = v35;
  *(_QWORD *)(v1 + 200) = v33;
  *(_BYTE *)(v1 + 208) = 2;
  *(_QWORD *)(v1 + 216) = v32;
  v217 = qword_1ED4D09F8;
  v218 = 0;
  v219 = 2;
  v220 = 0;
  v221 = 2;
  v222 = 0;
  swift_retain();
  sub_1B1E39870(1, (uint64_t)&v104);
  swift_release();
  v36 = v105;
  v37 = v106;
  v38 = v108;
  v39 = v107 | 4;
  *(_QWORD *)(v1 + 224) = v104;
  *(_DWORD *)(v1 + 232) = v36;
  *(_BYTE *)(v1 + 236) = v37;
  *(_QWORD *)(v1 + 240) = v39;
  *(_BYTE *)(v1 + 248) = 2;
  *(_QWORD *)(v1 + 256) = v38;
  v211 = qword_1ED4D09F8;
  v212 = 0;
  v213 = 2;
  v214 = 0;
  v215 = 2;
  v216 = 0;
  swift_retain();
  sub_1B1E39A68(1, (uint64_t)&v109);
  swift_release();
  v40 = v110;
  v41 = v111;
  v42 = v113;
  v43 = v112 | 4;
  *(_QWORD *)(v1 + 264) = v109;
  *(_DWORD *)(v1 + 272) = v40;
  *(_BYTE *)(v1 + 276) = v41;
  *(_QWORD *)(v1 + 280) = v43;
  *(_BYTE *)(v1 + 288) = 2;
  *(_QWORD *)(v1 + 296) = v42;
  v205 = qword_1ED4D09F8;
  v206 = 0;
  v207 = 2;
  v208 = 0;
  v209 = 2;
  v210 = 0;
  swift_retain();
  sub_1B1B118D0(1, 2, (uint64_t)&v114);
  swift_release();
  v44 = v115;
  v45 = v116;
  v46 = v118;
  v47 = v117 | 4;
  *(_QWORD *)(v1 + 304) = v114;
  *(_DWORD *)(v1 + 312) = v44;
  *(_BYTE *)(v1 + 316) = v45;
  *(_QWORD *)(v1 + 320) = v47;
  *(_BYTE *)(v1 + 328) = 2;
  *(_QWORD *)(v1 + 336) = v46;
  v199 = qword_1ED4D09F8;
  v200 = 0;
  v201 = 2;
  v202 = 0;
  v203 = 2;
  v204 = 0;
  swift_retain();
  sub_1B1E39C60(1, (uint64_t)&v119);
  swift_release();
  v48 = v120;
  v49 = v121;
  v50 = v123;
  v51 = v122 | 4;
  *(_QWORD *)(v1 + 344) = v119;
  *(_DWORD *)(v1 + 352) = v48;
  *(_BYTE *)(v1 + 356) = v49;
  *(_QWORD *)(v1 + 360) = v51;
  *(_BYTE *)(v1 + 368) = 2;
  *(_QWORD *)(v1 + 376) = v50;
  v193 = qword_1ED4D09F8;
  v194 = 0;
  v195 = 2;
  v196 = 0;
  v197 = 2;
  v198 = 0;
  swift_retain();
  sub_1B1E39E58(1, (uint64_t)&v124);
  swift_release();
  v52 = v125;
  v53 = v126;
  v54 = v128;
  v55 = v127 | 4;
  *(_QWORD *)(v1 + 384) = v124;
  *(_DWORD *)(v1 + 392) = v52;
  *(_BYTE *)(v1 + 396) = v53;
  *(_QWORD *)(v1 + 400) = v55;
  *(_BYTE *)(v1 + 408) = 2;
  *(_QWORD *)(v1 + 416) = v54;
  v187 = qword_1ED4D09F8;
  v188 = 0;
  v189 = 2;
  v190 = 0;
  v191 = 2;
  v192 = 0;
  swift_retain();
  sub_1B1E3A050(1, (uint64_t)&v129);
  swift_release();
  v56 = v130;
  v57 = v131;
  v58 = v133;
  v59 = v132 | 4;
  *(_QWORD *)(v1 + 424) = v129;
  *(_DWORD *)(v1 + 432) = v56;
  *(_BYTE *)(v1 + 436) = v57;
  *(_QWORD *)(v1 + 440) = v59;
  *(_BYTE *)(v1 + 448) = 2;
  *(_QWORD *)(v1 + 456) = v58;
  v181 = qword_1ED4D09F8;
  v182 = 0;
  v183 = 2;
  v184 = 0;
  v185 = 2;
  v186 = 0;
  swift_retain();
  sub_1B1B6C4E4((uint64_t)v134);
  swift_release();
  v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = v79;
  *(_QWORD *)(v60 + 32) = &type metadata for TextureGPURuntime;
  *(_QWORD *)(v60 + 40) = &off_1E6390090;
  sub_1B1B44110(v135, v60);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v134);
  v61 = v135[1];
  *(_OWORD *)(v1 + 464) = v135[0];
  *(_OWORD *)(v1 + 480) = v61;
  *(_QWORD *)(v1 + 496) = v136;
  v175 = qword_1ED4D09F8;
  v176 = 0;
  v177 = 2;
  v178 = 0;
  v179 = 2;
  v180 = 0;
  swift_retain();
  sub_1B1E3A248(1, (uint64_t)v137);
  swift_release();
  v62 = swift_allocObject();
  *(_OWORD *)(v62 + 16) = v79;
  *(_QWORD *)(v62 + 32) = &type metadata for TextureGPURuntime;
  *(_QWORD *)(v62 + 40) = &off_1E6390090;
  sub_1B1B44110(v138, v62);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v137);
  v63 = v138[1];
  *(_OWORD *)(v1 + 504) = v138[0];
  *(_OWORD *)(v1 + 520) = v63;
  *(_QWORD *)(v1 + 536) = v139;
  v169 = qword_1ED4D09F8;
  v170 = 0;
  v171 = 2;
  v172 = 0;
  v173 = 2;
  v174 = 0;
  swift_retain();
  sub_1B1B11AFC(4, 2, (uint64_t)&v140);
  swift_release();
  v64 = v141;
  v65 = v142;
  v66 = v144;
  v67 = v143 | 4;
  *(_QWORD *)(v1 + 544) = v140;
  *(_DWORD *)(v1 + 552) = v64;
  *(_BYTE *)(v1 + 556) = v65;
  *(_QWORD *)(v1 + 560) = v67;
  *(_BYTE *)(v1 + 568) = 2;
  *(_QWORD *)(v1 + 576) = v66;
  v163 = qword_1ED4D09F8;
  v164 = 0;
  v165 = 2;
  v166 = 0;
  v167 = 2;
  v168 = 0;
  swift_retain();
  sub_1B1E3A440(2, (uint64_t)v145);
  swift_release();
  v68 = swift_allocObject();
  *(_OWORD *)(v68 + 16) = v79;
  *(_QWORD *)(v68 + 32) = &type metadata for TextureRequireCubemap;
  *(_QWORD *)(v68 + 40) = &off_1E63A7040;
  sub_1B1E68C98(&v146);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v145);
  v69 = v147;
  v70 = v148;
  v71 = v150;
  v72 = v149 | 4;
  *(_QWORD *)(v1 + 584) = v146;
  *(_DWORD *)(v1 + 592) = v69;
  *(_BYTE *)(v1 + 596) = v70;
  *(_QWORD *)(v1 + 600) = v72;
  *(_BYTE *)(v1 + 608) = 2;
  *(_QWORD *)(v1 + 616) = v71;
  v157 = qword_1ED4D09F8;
  v158 = 0;
  v159 = 2;
  v160 = 0;
  v161 = 2;
  v162 = 0;
  swift_retain();
  sub_1B1B11D28(1, 1, (uint64_t)v151);
  swift_release();
  v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = v79;
  *(_QWORD *)(v73 + 32) = &type metadata for TextureGPURepresentationDoNotUpload;
  *(_QWORD *)(v73 + 40) = &off_1E63B7D18;
  sub_1B1B44110(&v152, v73);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B19ED720((uint64_t)v151);
  v74 = v153;
  v75 = v154;
  v76 = v156;
  v77 = v155 | 4;
  *(_QWORD *)(v1 + 624) = v152;
  *(_DWORD *)(v1 + 632) = v74;
  *(_BYTE *)(v1 + 636) = v75;
  *(_QWORD *)(v1 + 640) = v77;
  *(_BYTE *)(v1 + 648) = 2;
  *(_QWORD *)(v1 + 656) = v76;
  return v1;
}

uint64_t sub_1B210722C()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B21066E0();
  return v0;
}

const char *sub_1B2107260()
{
  return "TextureSystem";
}

uint64_t sub_1B2107278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

_QWORD *sub_1B21073D8(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD v6[12];
  _QWORD v7[12];
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[12];
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;

  v2 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = (uint64_t)result;
    v4 = *(_OWORD *)(v1 + 32);
    v33[0] = *(_OWORD *)(v1 + 16);
    v33[1] = v4;
    v34 = *(_QWORD *)(v1 + 48);
    swift_retain();
    sub_1B1E8FCE4(v3, (uint64_t)v33, 0x200000000, v6);
    sub_1B1A18378((uint64_t)v6, (uint64_t)v19, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v19[0])
    {
      v19[8] = v19[2];
      v19[9] = v19[3];
      v19[10] = v19[4];
      v19[11] = v19[5];
      v19[6] = v19[0];
      v19[7] = v19[1];
      sub_1B1BEB4CC();
      sub_1B1A086DC(v6, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    v5 = *(_OWORD *)(v1 + 72);
    v31[0] = *(_OWORD *)(v1 + 56);
    v31[1] = v5;
    v32 = *(_QWORD *)(v1 + 88);
    sub_1B1E8FCE4(v3, (uint64_t)v31, 0x200000000, v7);
    sub_1B1A18378((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (v8)
    {
      v20 = v8;
      v21 = v9;
      v22 = v10;
      v23 = v11;
      v24 = v12;
      v25 = v13;
      v26 = v14;
      v27 = v15;
      v28 = v16;
      v29 = v17;
      v30 = v18;
      swift_retain();
      swift_retain();
      sub_1B21A1A08((uint64_t)&v20, v2, v3);
      swift_release_n();
      swift_release();
      return sub_1B1A086DC(v7, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    }
    else
    {
      return (_QWORD *)swift_release();
    }
  }
  return result;
}

uint64_t sub_1B21075A4(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = a2;
  v4 = HIDWORD(a2);
  v5 = swift_allocObject();
  swift_weakInit();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_DWORD *)(v6 + 24) = v2;
  *(_DWORD *)(v6 + 28) = v4;
  v7 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocksLock;
  v8 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocksLock + 24);
  swift_retain();
  os_unfair_lock_lock(v8);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_1B2115E34;
  *(_QWORD *)(v9 + 24) = v6;
  v10 = OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocks;
  v11 = *(_QWORD **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocks);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + v10) = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v11 = sub_1B1C62B5C(0, v11[2] + 1, 1, v11);
    *(_QWORD *)(a1 + v10) = v11;
  }
  v14 = v11[2];
  v13 = v11[3];
  if (v14 >= v13 >> 1)
    v11 = sub_1B1C62B5C(v13 > 1, v14 + 1, 1, v11);
  v11[2] = v14 + 1;
  v15 = &v11[2 * v14];
  v15[4] = sub_1B1DB39F8;
  v15[5] = v9;
  *(_QWORD *)(a1 + v10) = v11;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v7 + 24));
  swift_release();
  return swift_release();
}

uint64_t sub_1B2107714(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_weakLoadStrong();
  if (result)
  {
    if (a2 != 0xFFFFFFFFLL
      && (a2 & 0x80000000) == 0
      && (int)a2 < *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      v4 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (HIDWORD(a2) == -1 || *(_DWORD *)(v4 + 12 * (int)a2 + 8) == HIDWORD(a2))
        sub_1B1FF2FD0(*(_QWORD *)(*(_QWORD *)(result + 136) + 8 * *(int *)(v4 + 12 * (int)a2) + 32), *(_WORD *)(v4 + 12 * (int)a2 + 4), 120);
    }
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for TextureDownloadSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2107800()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[40];
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v22 = qword_1ED4D09F8;
  v23 = 0;
  v24 = 2;
  v25 = 0;
  v26 = 2;
  v27 = 0;
  swift_retain();
  sub_1B1B14378(1, 1, (uint64_t)v8);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureCPURuntime;
  *(_QWORD *)(inited + 40) = &off_1E638FF50;
  sub_1B1B44110(v9, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v8);
  v2 = v9[1];
  *(_OWORD *)(v0 + 16) = v9[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v10;
  v16 = qword_1ED4D09F8;
  v17 = 0;
  v18 = 2;
  v19 = 0;
  v20 = 2;
  v21 = 0;
  swift_retain();
  sub_1B1B14378(1, 1, (uint64_t)&v11);
  swift_release();
  v3 = v12;
  v4 = v13;
  v5 = v15;
  v6 = v14 | 4;
  *(_QWORD *)(v0 + 56) = v11;
  *(_DWORD *)(v0 + 64) = v3;
  *(_BYTE *)(v0 + 68) = v4;
  *(_QWORD *)(v0 + 72) = v6;
  *(_BYTE *)(v0 + 80) = 2;
  *(_QWORD *)(v0 + 88) = v5;
  return v0;
}

uint64_t sub_1B21079C4()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B2107800();
  return v0;
}

const char *sub_1B21079F8()
{
  return "TextureDownload";
}

uint64_t sub_1B2107A10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v6 = sub_1B204D6E4();
  v7 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v6, v4);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  swift_release_n();
  v8 = *(_QWORD *)(v2 + 56);
  swift_getObjectType();
  v9 = sub_1B204D6E4();
  v10 = *(os_unfair_lock_s **)(v5 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v9, v8);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 40));
  return swift_release_n();
}

_QWORD *sub_1B2107B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  int v15;
  int v16;
  __int128 v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  int v29;
  int v30;
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  _QWORD v35[8];
  _OWORD v36[2];
  uint64_t v37;
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[7];
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;

  v2 = v1;
  v4 = *(_OWORD *)(v1 + 32);
  v48[0] = *(_OWORD *)(v1 + 16);
  v48[1] = v4;
  v49 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v48, 0x200000000, v35);
  sub_1B1A18378((uint64_t)v35, (uint64_t)v43, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v43[0])
  {
    if (v45 >= 1)
    {
      v5 = v44;
      if (v44)
      {
        v6 = v43[5];
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 48 * v5;
        v8 = (uint64_t *)(v6 + 40);
        do
        {
          v13 = *v8;
          v14 = *(os_unfair_lock_s **)(*v8 + 376);
          swift_retain();
          os_unfair_lock_lock(v14);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
          v15 = *(_DWORD *)(v13 + 24);
          swift_retain();
          v39 = 0;
          memset(v38, 0, sizeof(v38));
          v37 = 0;
          memset(v36, 0, sizeof(v36));
          v16 = sub_1B1DA4ED8(v15, 0, 0, (uint64_t)&type metadata for TextureCPURuntime, (uint64_t)&off_1E638FF20, (uint64_t)v38, (uint64_t)v36);
          swift_release();
          sub_1B1A12E98((uint64_t)v36);
          sub_1B1A12E98((uint64_t)v38);
          if (sub_1B1A10B20(v16))
          {
            sub_1B1A10BB0(v16);
          }
          else
          {
            v9 = *(_QWORD *)(v13 + 232);
            v10 = *(_QWORD *)(v13 + 240);
            v11 = *(unsigned __int8 *)(v13 + 120);
            v12 = *(unsigned int *)(v13 + 28);
            LOBYTE(v38[0]) = *(_BYTE *)(v13 + 32);
            sub_1B1FD8C68(v9, v10, v16, v11, v12 | ((unint64_t)LOBYTE(v38[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
          swift_release();
          v8 += 6;
          v7 -= 48;
        }
        while (v7);
        sub_1B1A086DC(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    sub_1B1A086DC(v35, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v17 = *(_OWORD *)(v2 + 72);
  v46[0] = *(_OWORD *)(v2 + 56);
  v46[1] = v17;
  v47 = *(_QWORD *)(v2 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v46, 0x200000000, v36);
  result = (_QWORD *)sub_1B1A18378((uint64_t)v36, (uint64_t)v38, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v38[0])
  {
    if (v42 >= 1)
    {
      v19 = v41;
      if (v41)
      {
        v20 = v40;
        swift_retain();
        swift_retain();
        swift_retain();
        v21 = 48 * v19;
        v22 = (uint64_t *)(v20 + 40);
        do
        {
          v27 = *v22;
          v28 = *(os_unfair_lock_s **)(*v22 + 376);
          swift_retain();
          os_unfair_lock_lock(v28);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 344));
          v29 = *(_DWORD *)(v27 + 24);
          swift_retain();
          v34 = 0;
          memset(v33, 0, sizeof(v33));
          v32 = 0;
          memset(v31, 0, sizeof(v31));
          v30 = sub_1B1DA4ED8(v29, 0, 0, (uint64_t)&type metadata for TextureGPURuntime, (uint64_t)&off_1E6390060, (uint64_t)v33, (uint64_t)v31);
          swift_release();
          sub_1B1A12E98((uint64_t)v31);
          sub_1B1A12E98((uint64_t)v33);
          if (sub_1B1A10B20(v30))
          {
            sub_1B1A10BB0(v30);
          }
          else
          {
            v23 = *(_QWORD *)(v27 + 232);
            v24 = *(_QWORD *)(v27 + 240);
            v25 = *(unsigned __int8 *)(v27 + 120);
            v26 = *(unsigned int *)(v27 + 28);
            LOBYTE(v33[0]) = *(_BYTE *)(v27 + 32);
            sub_1B1FD8C68(v23, v24, v30, v25, v26 | ((unint64_t)LOBYTE(v33[0]) << 32), 0, 0, 0);
          }
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + 376));
          swift_release();
          v22 += 6;
          v21 -= 48;
        }
        while (v21);
        sub_1B1A086DC(v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      }
    }
    return sub_1B1A086DC(v36, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  return result;
}

uint64_t type metadata accessor for TextureDiscardSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B2107F80()
{
  uint64_t v0;
  uint64_t inited;
  int v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[40];
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _BYTE v21[40];
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v34 = qword_1ED4D09F8;
  v35 = 0;
  v36 = 2;
  v37 = 0;
  v38 = 2;
  v39 = 0;
  swift_retain();
  sub_1B1E3E4D4(1, (uint64_t)v14);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRequireCPURepresentation;
  *(_QWORD *)(inited + 40) = &off_1E63B6380;
  sub_1B1B44110(&v15, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v14);
  v2 = v16;
  v3 = v17;
  v4 = v19;
  v5 = v20;
  v6 = v18 | 0x20;
  *(_QWORD *)(v0 + 16) = v15;
  *(_DWORD *)(v0 + 24) = v2;
  *(_BYTE *)(v0 + 28) = v3;
  *(_QWORD *)(v0 + 32) = v6;
  *(_BYTE *)(v0 + 40) = v4;
  *(_QWORD *)(v0 + 48) = v5;
  v28 = qword_1ED4D09F8;
  v29 = 0;
  v30 = 2;
  v31 = 0;
  v32 = 2;
  v33 = 0;
  swift_retain();
  sub_1B1E3A440(1, (uint64_t)v21);
  swift_release();
  v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v7 + 32) = &type metadata for TextureRequireGPURepresentation;
  *(_QWORD *)(v7 + 40) = &off_1E63B6458;
  sub_1B1B44110(&v22, v7);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v21);
  v8 = v23;
  v9 = v24;
  v10 = v26;
  v11 = v27;
  v12 = v25 | 0x20;
  *(_QWORD *)(v0 + 56) = v22;
  *(_DWORD *)(v0 + 64) = v8;
  *(_BYTE *)(v0 + 68) = v9;
  *(_QWORD *)(v0 + 72) = v12;
  *(_BYTE *)(v0 + 80) = v10;
  *(_QWORD *)(v0 + 88) = v11;
  return v0;
}

uint64_t sub_1B21081B8()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B2107F80();
  return v0;
}

const char *sub_1B21081EC()
{
  return "TextureDiscard";
}

uint64_t sub_1B2108204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t sub_1B21082CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD v44[12];
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD v67[2];
  uint64_t v68;

  v2 = a1;
  v3 = MEMORY[0x1E0DEE9D8];
  v43 = MEMORY[0x1E0DEE9D8];
  v4 = *(_OWORD *)(v1 + 32);
  v67[0] = *(_OWORD *)(v1 + 16);
  v67[1] = v4;
  v68 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v67, 0x200000000, v44);
  sub_1B1A18378((uint64_t)v44, (uint64_t)&v45, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v45)
  {
    v56 = v45;
    v57 = v46;
    v58 = v47;
    v59 = v48;
    v60 = v49;
    v61 = v50;
    v62 = v51;
    v63 = v52;
    v64 = v53;
    v65 = v54;
    v66 = v55;
    sub_1B2187740((uint64_t)&v56, (uint64_t)&v43);
    sub_1B1A086DC(v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v3 = v43;
  }
  v39 = *(_QWORD *)(v3 + 16);
  if (v39)
  {
    v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v38 = v3 + 32;
    v35 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
    swift_bridgeObjectRetain();
    v6 = 0;
    v36 = v2;
    v37 = v5;
    while (1)
    {
      v8 = (unsigned int *)(v38 + 8 * v6);
      v9 = v8[1];
      v10 = (int)*v8;
      v11 = (_DWORD)v10 == -1 && (_DWORD)v9 == 0;
      if (v11
        || (v10 & 0x80000000) != 0
        || v5[1] <= v10
        || ((v12 = *v5 + 12 * (int)v10, (_DWORD)v9 != -1) ? (v13 = *(_DWORD *)(v12 + 8) == (_DWORD)v9) : (v13 = 1),
            !v13
         || (v14 = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(*v5 + 12 * (int)v10) + 32),
             v15 = *(_QWORD *)(v14 + 48),
             (v16 = *(_QWORD *)(v15 + 16)) == 0)))
      {
LABEL_53:
        sub_1B2229430();
        sub_1B2228890();
        sub_1B1BC3C70();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228890();
        while (1)
        {
LABEL_54:
          sub_1B2229688();
          __break(1u);
        }
      }
      v17 = v6 + 1;
      v18 = *(__int16 *)(v12 + 4);
      v19 = (_QWORD *)(v15 + 56);
      while ((ValueMetadata *)*(v19 - 3) != &type metadata for TexturePlaceholder)
      {
        v19 += 5;
        if (!--v16)
          goto LABEL_53;
      }
      v20 = (unsigned int *)(*(_QWORD *)(v14 + 128) + *v19 + 16 * v18);
      v21 = v2;
      v23 = *v20;
      v22 = v20[1];
      v40 = v8[1];
      v24 = *v8 | (unint64_t)(v9 << 32);
      swift_unknownObjectRetain();
      sub_1B1FDF548(v23 | (v22 << 32), v21, v24);
      v25 = (_DWORD)v23 == -1 && (_DWORD)v22 == 0;
      v41 = v17;
      v42 = v23 | (v22 << 32);
      if (v25 || sub_1B1FD568C((uint64_t)&type metadata for Tombstone, (uint64_t)&off_1E63C5608, v23 | (v22 << 32)))
      {
        v26 = 0;
        v2 = v21;
      }
      else
      {
        v28 = sub_1B1D15420(v23 | (v22 << 32));
        if (v28 == 1)
        {
          v26 = 0;
          v29 = (int)v23;
          if ((v23 & 0x80000000) == 0)
          {
            v5 = v37;
            if (v37[1] <= v29)
            {
              v2 = v36;
            }
            else
            {
              v30 = *(_DWORD *)(*v37 + 12 * (int)v29 + 8);
              if ((_DWORD)v22 == -1 || v30 == (_DWORD)v22)
              {
                v2 = v36;
                sub_1B1FDF258(v42, v36);
                v32 = sub_1B1D1536C(v42);
                if (HIBYTE(v32) != 2 && (v32 & 0xFF00) == 0x100)
                  sub_1B1FE16DC((uint64_t)&type metadata for TextureLoadRequestGPU, (uint64_t)&off_1E63A6CD8, v42);
                v33 = sub_1B1D1536C(v42);
                if (HIBYTE(v33) != 2 && *(_QWORD *)(v36 + v35))
                  __asm { BR              X9 }
                v26 = 0;
              }
              else
              {
                v26 = 0;
                v2 = v36;
              }
            }
            goto LABEL_29;
          }
        }
        else
        {
          v26 = v28;
        }
        v2 = v36;
      }
      v5 = v37;
LABEL_29:
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      sub_1B1FE6E64(v24, v2, v26);
      swift_unknownObjectRelease_n();
      if (v5[1] <= v10)
        goto LABEL_54;
      v27 = *v5;
      if (v40 != -1 && *(_DWORD *)(v27 + 12 * (int)v10 + 8) != v40)
        goto LABEL_54;
      v7 = *(__int16 *)(v27 + 12 * (int)v10 + 4);
      swift_retain();
      sub_1B1FDB6A0(v7, v42, v26);
      swift_unknownObjectRelease();
      swift_release();
      v6 = v41;
      if (v41 == v39)
        return swift_bridgeObjectRelease_n();
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TextureClientPlaceholderSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for TextureRequireCPURepresentation()
{
  return &type metadata for TextureRequireCPURepresentation;
}

ValueMetadata *type metadata accessor for TextureGPURuntime()
{
  return &type metadata for TextureGPURuntime;
}

ValueMetadata *type metadata accessor for TextureRenderTarget()
{
  return &type metadata for TextureRenderTarget;
}

ValueMetadata *type metadata accessor for TextureRequireGPURepresentation()
{
  return &type metadata for TextureRequireGPURepresentation;
}

uint64_t *destroy for TextureFileData(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)sub_1B1A0DADC(*result, v1);
  return result;
}

uint64_t _s3VFX15TextureFileDataVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_1B1A0DC90(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for TextureFileData(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      sub_1B1A0DC90(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_1B1A0DADC(v7, v8);
      return a1;
    }
    sub_1B2108ABC((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  sub_1B1A0DC90(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t sub_1B2108ABC(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

uint64_t *assignWithTake for TextureFileData(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_1B1A0DADC(v6, v4);
      return a1;
    }
    sub_1B2108ABC((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureFileData(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureFileData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureFileData()
{
  return &type metadata for TextureFileData;
}

ValueMetadata *type metadata accessor for TextureArrayFileAsset()
{
  return &type metadata for TextureArrayFileAsset;
}

__n128 initializeWithCopy for TextureOptions(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for TextureLoadingOptions()
{
  return &type metadata for TextureLoadingOptions;
}

__n128 initializeWithCopy for TextureRequireAnimationRepresentation(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TextureRequireAnimationRepresentation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 25);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureRequireAnimationRepresentation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureRequireAnimationRepresentation()
{
  return &type metadata for TextureRequireAnimationRepresentation;
}

ValueMetadata *type metadata accessor for TextureFileAsset()
{
  return &type metadata for TextureFileAsset;
}

uint64_t destroy for TextureShaderAsset()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextureShaderAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v3;
  v4 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v4;
  v5 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v5;
  v6 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextureShaderAsset(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_WORD *)(a1 + 26) = *(_WORD *)(a2 + 26);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  *(_WORD *)(a1 + 30) = *(_WORD *)(a2 + 30);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  *(_BYTE *)(a1 + 98) = *(_BYTE *)(a2 + 98);
  *(_BYTE *)(a1 + 99) = *(_BYTE *)(a2 + 99);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TextureShaderAsset(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for TextureShaderAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureShaderAsset(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureShaderAsset(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureShaderAsset()
{
  return &type metadata for TextureShaderAsset;
}

uint64_t destroy for TextureCPURuntime()
{
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextureCPURuntime(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextureCPURuntime(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(_WORD *)(a1 + 34) = *(_WORD *)(a2 + 34);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  *(_WORD *)(a1 + 38) = *(_WORD *)(a2 + 38);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  *(_BYTE *)(a1 + 107) = *(_BYTE *)(a2 + 107);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TextureCPURuntime(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureCPURuntime(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureCPURuntime(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 112) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureCPURuntime()
{
  return &type metadata for TextureCPURuntime;
}

unint64_t sub_1B21094A8()
{
  unint64_t result;

  result = qword_1EEF63520;
  if (!qword_1EEF63520)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BBCF0, &type metadata for TextureRequireAnimationRepresentation);
    atomic_store(result, (unint64_t *)&qword_1EEF63520);
  }
  return result;
}

uint64_t sub_1B21094F0()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v11 = qword_1ED4D09F8;
  v12 = 0;
  v13 = 2;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  swift_retain();
  sub_1B1E3F9DC(1, (uint64_t)&v6);
  swift_release();
  v1 = v7;
  v2 = v8;
  v3 = v10;
  v4 = v9 | 4;
  *(_QWORD *)(v0 + 16) = v6;
  *(_DWORD *)(v0 + 24) = v1;
  *(_BYTE *)(v0 + 28) = v2;
  *(_QWORD *)(v0 + 32) = v4;
  *(_BYTE *)(v0 + 40) = 2;
  *(_QWORD *)(v0 + 48) = v3;
  return v0;
}

const char *sub_1B21095CC()
{
  return "TextureClientPlaceholder";
}

_QWORD *sub_1B21095E4(uint64_t isStackAllocationSafe, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v6)(char *, _BYTE *);
  char v7;
  unint64_t v8;
  size_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD v13[2];

  v5 = a2;
  v6 = (uint64_t (*)(char *, _BYTE *))isStackAllocationSafe;
  v13[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(a3 + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = sub_1B2109754((_QWORD *)((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a3, v6);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    v5 = sub_1B2109754((unint64_t *)v11, v8, a3, v6);
    MEMORY[0x1B5E23F88](v11, -1, -1);
  }
  return v5;
}

_QWORD *sub_1B2109754(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, _BYTE *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  _BYTE v29[168];
  uint64_t (*v30)(char *, _BYTE *);

  v30 = a4;
  v23 = a2;
  v24 = a1;
  v6 = type metadata accessor for TextureCache.TextureKey();
  v28 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0;
  v10 = 0;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(a3 + 64);
  v27 = (unint64_t)(v11 + 63) >> 6;
  v22 = v27 - 5;
  v26 = a3 + 64;
  v21 = a3 + 104;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_18;
    }
    v16 = v10 + 1;
    if (v10 + 1 >= v27)
      return sub_1B1C0658C(v24, v23, v25, (_QWORD *)a3);
    v17 = *(_QWORD *)(v26 + 8 * v16);
    if (!v17)
    {
      v16 = v10 + 2;
      if (v10 + 2 >= v27)
        return sub_1B1C0658C(v24, v23, v25, (_QWORD *)a3);
      v17 = *(_QWORD *)(v26 + 8 * v16);
      if (!v17)
      {
        v16 = v10 + 3;
        if (v10 + 3 >= v27)
          return sub_1B1C0658C(v24, v23, v25, (_QWORD *)a3);
        v17 = *(_QWORD *)(v26 + 8 * v16);
        if (!v17)
        {
          v16 = v10 + 4;
          if (v10 + 4 >= v27)
            return sub_1B1C0658C(v24, v23, v25, (_QWORD *)a3);
          v17 = *(_QWORD *)(v26 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_17:
    v13 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v10 = v16;
LABEL_18:
    sub_1B1792810(*(_QWORD *)(a3 + 48) + *(_QWORD *)(v28 + 72) * v15, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    sub_1B1C1AA1C(*(_QWORD *)(a3 + 56) + 160 * v15, (uint64_t)v29);
    v18 = v30(v9, v29);
    sub_1B1FAE9DC((uint64_t)v29);
    result = (_QWORD *)sub_1B1A04628((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TextureCache.TextureKey);
    if (v4)
      return result;
    if ((v18 & 1) != 0)
    {
      *(unint64_t *)((char *)v24 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      ++v25;
    }
  }
  while (v22 != v10)
  {
    v17 = *(_QWORD *)(v21 + 8 * v10++);
    if (v17)
    {
      v16 = v10 + 4;
      goto LABEL_17;
    }
  }
  return sub_1B1C0658C(v24, v23, v25, (_QWORD *)a3);
}

uint64_t sub_1B2109A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;

  v7 = (unsigned __int16 *)sub_1B2227E4C();
  if (v7)
    v7 = (unsigned __int16 *)((char *)v7 + a1 - sub_1B2227E70());
  v8 = sub_1B2227E64();
  v9 = a2 - a1;
  if (v8 < a2 - a1)
    v9 = v8;
  v10 = (char *)v7 + v9;
  if (v7)
    v11 = (uint64_t)v10;
  else
    v11 = 0;
  sub_1B1FC12B4(v7, v11, a4);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B2109AB8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  swift_retain();
  v6 = sub_1B1A84588(a1, (uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&off_1E6396640, a2);
  result = swift_release();
  *a3 = v6;
  return result;
}

uint64_t sub_1B2109B1C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B21147C0);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2109BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B2109DCC(a1, a2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A846BC, a3);
}

uint64_t sub_1B2109BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B21147F8);
}

uint64_t sub_1B2109BE0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  swift_retain();
  v6 = sub_1B1A846C8(a1, (uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&off_1E6396640, a2);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  result = swift_release();
  *a3 = v6;
  a3[1] = v8;
  a3[2] = v10;
  a3[3] = v12;
  return result;
}

uint64_t sub_1B2109C5C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B2114814);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2109D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B2109DCC(a1, a2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A813C4, a3);
}

uint64_t sub_1B2109D14(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B2114850);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2109DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B2109DCC(a1, a2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A82E64, a3);
}

uint64_t sub_1B2109DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t (*a3)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t result;

  swift_retain();
  v8 = a3(a1, &type metadata for TextureShaderAsset, &off_1E6396640, a2);
  LOBYTE(a2) = v9;
  result = swift_release();
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 8) = a2 & 1;
  return result;
}

uint64_t sub_1B2109E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B211486C);
}

uint64_t sub_1B2109E58@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_retain();
  v6 = sub_1B1A82400(a1, (uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&off_1E6396640, a2);
  v8 = v7;
  result = swift_release();
  *a3 = v6;
  a3[1] = v8;
  return result;
}

uint64_t sub_1B2109EC0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B2114888);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B2109F6C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;

  swift_retain();
  v6 = sub_1B1A84814(a1, (uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&off_1E6396640, a2);
  v8 = v7;
  v10 = v9;
  result = swift_release();
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_1B2109FE4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B21148C0);
    return swift_release();
  }
  return result;
}

BOOL sub_1B210A098(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a2 + 24);
  if (v2 > 0xFD)
  {
    if (v3 <= 0xFD)
      return 0;
    goto LABEL_4;
  }
  if (v3 > 0xFD)
    return 0;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 16);
  if ((v2 & 0x80) != 0)
  {
    if ((v3 & 0x80) == 0)
      return 0;
    if (v9 != v11 || v8 != v10)
      return 0;
LABEL_4:
    v4 = *(unsigned __int16 *)(a1 + 56);
    v5 = *(unsigned __int16 *)(a2 + 56);
    v6 = v5 & 0xFF00;
    if ((v4 & 0xFF00) == 0x300)
      return v6 == 768;
    if (v6 != 768 && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
    {
      if ((v4 & 1) == 0)
      {
        if ((v5 & 1) != 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
          return 0;
        return v4 >> 8 == v5 >> 8;
      }
      if ((v5 & 1) != 0)
        return v4 >> 8 == v5 >> 8;
    }
    return 0;
  }
  if ((v3 & 0x80) != 0)
    return 0;
  v12 = (v2 & 1) == 0;
  if (v9 == v11 && v8 == v10 && ((v12 ^ v3) & 1) != 0)
    goto LABEL_4;
  return 0;
}

BOOL sub_1B210A1B0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  BOOL v7;
  char v8;
  BOOL v9;

  v7 = a1 == a4 && a2 == a5;
  if ((a6 & 0x80) == 0)
    v7 = 0;
  v8 = ((a3 & 1) == 0) ^ a6;
  if (a2 != a5)
    v8 = 0;
  if (a1 != a4)
    v8 = 0;
  if (a6 < 0)
    v9 = 0;
  else
    v9 = v8;
  if (a3 < 0)
    return v7;
  return v9;
}

void sub_1B210A200(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

BOOL sub_1B210A220(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  return !a6 && *(float *)&a1 == *(float *)&a4;
}

BOOL sub_1B210A388(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  _BOOL8 result;

  result = 0;
  if (a1 == a5 && a2 == a6)
  {
    if ((a4 & 1) != 0)
    {
      if ((a8 & 1) == 0)
        return 0;
    }
    else
    {
      result = 0;
      if ((a8 & 1) != 0 || a3 != a7)
        return result;
    }
    return HIBYTE(a4) == (unsigned __int16)(a8 & 0xFF00) >> 8;
  }
  return result;
}

BOOL sub_1B210A3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v9;
  _BOOL8 result;
  _BOOL4 v11;

  if (a1 == a5 && a2 == a6 || (v9 = sub_1B2229D24(), result = 0, (v9 & 1) != 0))
  {
    v11 = a3 == a7;
    if (!a7)
      v11 = a3 == 0;
    if (a3)
      return v11;
    else
      return a7 == 0;
  }
  return result;
}

uint64_t sub_1B210A448(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 1;
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
    && *(unsigned __int16 *)(a1 + 24) == *(unsigned __int16 *)(a2 + 24)
    && *(unsigned __int16 *)(a1 + 26) == *(unsigned __int16 *)(a2 + 26)
    && *(unsigned __int16 *)(a1 + 28) == *(unsigned __int16 *)(a2 + 28)
    && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
    && *(_DWORD *)a1 == *(_DWORD *)a2
    && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4))
  {
    v4 = *(_QWORD *)(a1 + 136);
    v3 = *(_QWORD *)(a1 + 144);
    v6 = *(_QWORD *)(a2 + 136);
    v5 = *(_QWORD *)(a2 + 144);
    if ((*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
       || (sub_1B2229D24() & 1) != 0)
      && (sub_1B1D491F8(v4, v6) & 1) != 0)
    {
      v2 = sub_1B1D49464(v3, v5) ^ 1;
    }
    else
    {
      v2 = 1;
    }
  }
  return v2 & 1;
}

uint64_t sub_1B210A53C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  id v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_signpost_type_t v38;
  uint64_t v39;
  uint8_t *v40;
  char *v41;
  uint64_t v42;
  os_signpost_id_t v43;
  uint64_t v44;
  uint8_t *v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  __int16 v58;
  char v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint8_t *v76;
  os_signpost_id_t v77;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  id v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;

  v87 = a6;
  v86 = a5;
  v85 = a4;
  v93 = a2;
  v91 = a1;
  v89 = sub_1B22283BC();
  v83 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v7);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v79 - v12;
  v14 = sub_1B2228380();
  v94 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v82 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v88 = (char *)&v79 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v79 - v22;
  MEMORY[0x1E0C80A78](v24, v25);
  v95 = (char *)&v79 - v26;
  v27 = *(_OWORD *)(a3 + 64);
  v28 = *(_OWORD *)(a3 + 96);
  v108 = *(_OWORD *)(a3 + 80);
  v109 = v28;
  v29 = *(_OWORD *)(a3 + 32);
  v106 = *(_OWORD *)(a3 + 48);
  v107 = v27;
  v105 = v29;
  v30 = sub_1B20F33A0();
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB34E8]), sel_init);
  objc_msgSend(v31, sel_setCountStyle_, 3);
  v32 = objc_msgSend(v31, sel_stringFromByteCount_, v30);
  v84 = sub_1B222874C();
  v34 = v33;

  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v35 = sub_1B22283B0();
  v36 = sub_1B1B40EC8(v35, (uint64_t)qword_1ED4D0E48);
  sub_1B2228398();
  sub_1B2228368();
  swift_bridgeObjectRetain();
  v90 = v36;
  v37 = sub_1B2228398();
  v38 = sub_1B2228FA4();
  if ((sub_1B2229094() & 1) != 0)
  {
    v92 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
    v92(v23, v95, v14);
    v80 = v14;
    v39 = swift_slowAlloc();
    v81 = v13;
    v40 = (uint8_t *)v39;
    v41 = v23;
    v42 = swift_slowAlloc();
    v97 = v42;
    *(_DWORD *)v40 = 136315138;
    swift_bridgeObjectRetain();
    v96 = sub_1B1B3EF90(v84, v34, &v97);
    v14 = v80;
    sub_1B22291D8();
    swift_bridgeObjectRelease_n();
    v43 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v37, v38, v43, "downloadGPUTextureToCPU", "size: %s", v40, 0xCu);
    swift_arrayDestroy();
    v44 = v42;
    v23 = v41;
    MEMORY[0x1B5E23F88](v44, -1, -1);
    v45 = v40;
    v13 = v81;
    MEMORY[0x1B5E23F88](v45, -1, -1);

    (*(void (**)(char *, uint64_t))(v94 + 8))(v41, v14);
    v46 = v92;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v46 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  }
  v92 = v46;
  v46(v23, v95, v14);
  sub_1B22283E0();
  swift_allocObject();
  sub_1B22283D4();
  swift_getObjectType();
  v47 = sub_1B1F9DCE8(0);
  v48 = v47;
  v49 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 && *(_QWORD *)(a3 + 16) == v47)
    goto LABEL_11;
  v50 = v13;
  swift_getObjectType();
  v51 = sub_1B1F9FC00(v48, 0);
  v53 = v52;
  v55 = v54;
  swift_unknownObjectRelease();
  *(_QWORD *)a3 = v51;
  *(_QWORD *)(a3 + 8) = v53;
  *(_QWORD *)(a3 + 16) = v55;
  v56 = v93;
  if (v51)
  {
    v57 = objc_msgSend(v93, sel_label);
    objc_msgSend(v51, sel_setLabel_, v57);

  }
  RGTextureDescriptorFromMTLTexture(v56, (uint64_t)&v97);
  v58 = v98;
  v59 = v99;
  v60 = v103;
  v61 = v100;
  v62 = v101;
  v63 = v102;
  v64 = v104;
  *(_QWORD *)(a3 + 32) = v97;
  *(_WORD *)(a3 + 40) = v58;
  *(_BYTE *)(a3 + 42) = v59;
  *(_OWORD *)(a3 + 48) = v61;
  *(_OWORD *)(a3 + 64) = v62;
  *(_OWORD *)(a3 + 80) = v63;
  *(_QWORD *)(a3 + 96) = v60;
  *(_DWORD *)(a3 + 104) = v64;
  v49 = *(_QWORD *)a3;
  v13 = v50;
  if (*(_QWORD *)a3)
  {
LABEL_11:
    v65 = *(_QWORD *)(a3 + 8);
    v66 = v93;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    v67 = v86;
    v68 = v87;
    sub_1B19F8C48(v86);
    sub_1B1BA6994(0xD000000000000014, 0x80000001B234C710, v85, v91, v66, v49, v65, v67, v68);
    sub_1B19E5A18(v67);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v69 = sub_1B2228398();
    v70 = v88;
    sub_1B22283C8();
    LOBYTE(v49) = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      swift_retain();
      sub_1B22283EC();
      swift_release();
      v71 = v83;
      if ((*(unsigned int (**)(char *, uint64_t))(v83 + 88))(v13, v89) != *MEMORY[0x1E0DF2190])
      {
        (*(void (**)(char *, uint64_t))(v71 + 8))(v13, v89);
LABEL_19:
        v73 = "";
        goto LABEL_20;
      }
      goto LABEL_16;
    }
  }
  else
  {
    v69 = sub_1B2228398();
    v70 = v82;
    sub_1B22283C8();
    v49 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      swift_retain();
      sub_1B22283EC();
      swift_release();
      v72 = v83;
      if ((*(unsigned int (**)(char *, uint64_t))(v83 + 88))(v9, v89) != *MEMORY[0x1E0DF2190])
      {
        (*(void (**)(char *, uint64_t))(v72 + 8))(v9, v89);
        goto LABEL_19;
      }
LABEL_16:
      v73 = "[Error] Interval already ended";
LABEL_20:
      v92(v23, v70, v14);
      v75 = v23;
      v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v76 = 0;
      v77 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v69, (os_signpost_type_t)v49, v77, "downloadGPUTextureToCPU", v73, v76, 2u);
      MEMORY[0x1B5E23F88](v76, -1, -1);

      v74 = *(void (**)(char *, uint64_t))(v94 + 8);
      v74(v70, v14);
      v74(v75, v14);
      goto LABEL_21;
    }
  }

  v74 = *(void (**)(char *, uint64_t))(v94 + 8);
  v74(v70, v14);
LABEL_21:
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v74)(v95, v14);
}

uint64_t sub_1B210AD2C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C656E6E616863 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1B210AE28(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x5465727574786574 && a2 == 0xEB00000000657079 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F466C65786970 && a2 == 0xEB0000000074616DLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6874706564 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B2329850 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6F43656C706D6173 && a2 == 0xEB00000000746E75 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6E654C7961727261 && a2 == 0xEB00000000687467 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6567617375 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001B2329890 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656C7A7A697773 && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x4D656761726F7473 && a2 == 0xEB0000000065646FLL)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v5 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_1B210B320()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 0xD)
    return 13;
  else
    return v0;
}

uint64_t sub_1B210B368(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x687464695778616DLL && a2 == 0xE800000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x686769654878616DLL && a2 == 0xE900000000000074 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657073417065656BLL && a2 == 0xEF6F697461527463)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B210B4EC(unint64_t a1)
{
  if (a1 > 0xC)
    return 12;
  else
    return byte_1B22BEBC8[a1];
}

int8x8_t sub_1B210B50C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double Default;
  int16x8_t v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  char v36;
  char v37;
  __int16 v38;
  int8x8_t result;
  __int128 v40;
  int16x8_t v41;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[48];
  __int128 v46;
  uint64_t v47;
  int v48;

  Default = RGTextureDescriptorMakeDefault((uint64_t)v45);
  LODWORD(Default) = v48;
  v21 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&Default);
  v43 = a2;
  v44 = a1;
  if (a3 > 0)
  {
    v22 = a3;
    if (a4 > 0)
      goto LABEL_3;
LABEL_6:
    v23 = 1;
    v24 = 1;
    if (a5 < 1)
      goto LABEL_9;
    goto LABEL_7;
  }
  v22 = 1;
  if (a4 < 1)
    goto LABEL_6;
LABEL_3:
  if (a5 >= 1)
  {
    v23 = a4;
LABEL_7:
    v24 = v23;
    v23 = a5;
    goto LABEL_9;
  }
  v23 = 1;
  v24 = a4;
LABEL_9:
  v26 = a11;
  v25 = a12;
  v27 = v45[10];
  v28 = v46;
  v29 = v47;
  if (a5 <= a4)
    v30 = a4;
  else
    v30 = a5;
  if (v30 <= a3)
    v30 = a3;
  if ((a7 & 1) != 0)
  {
    if (!a6)
    {
      LOBYTE(v35) = 1;
      v37 = 1;
      v36 = a8;
      if (a8 >= 1)
        goto LABEL_22;
      goto LABEL_25;
    }
    v31 = v47;
    v40 = v46;
    v41 = v21;
    v32 = a11;
    v33 = a12;
    v34 = v22;
    v35 = (uint64_t)(float)(floorf(log2f(fmaxf((float)v30, 1.0))) + 1.0);
  }
  else
  {
    v31 = v47;
    v40 = v46;
    v41 = v21;
    v32 = a11;
    v33 = a12;
    v34 = v22;
    v35 = (uint64_t)(float)(floorf(log2f(fmaxf((float)v30, 1.0))) + 1.0);
    if (v35 >= a6)
      LOBYTE(v35) = a6;
  }
  v36 = a8;
  v21 = v41;
  v22 = v34;
  if (a8 >= 1)
  {
    v25 = v33;
    v26 = v32;
    v28 = v40;
    v29 = v31;
LABEL_22:
    v37 = v36;
    goto LABEL_25;
  }
  v37 = 1;
  v25 = v33;
  v26 = v32;
  v28 = v40;
  v29 = v31;
LABEL_25:
  *(_WORD *)a9 = v22;
  if (a10 <= 1)
    v38 = 1;
  else
    v38 = a10;
  *(_WORD *)(a9 + 2) = v24;
  *(_WORD *)(a9 + 4) = v23;
  *(_WORD *)(a9 + 6) = v38;
  *(_BYTE *)(a9 + 8) = v35;
  *(_BYTE *)(a9 + 9) = v37;
  *(_BYTE *)(a9 + 10) = v27;
  *(_QWORD *)(a9 + 16) = v43;
  *(_QWORD *)(a9 + 24) = v44;
  *(_QWORD *)(a9 + 32) = v26;
  *(_QWORD *)(a9 + 40) = v25;
  *(_OWORD *)(a9 + 48) = v28;
  *(_QWORD *)(a9 + 64) = v29;
  result = vmovn_s16(v21);
  *(_DWORD *)(a9 + 72) = result.i32[0];
  return result;
}

uint64_t sub_1B210B714(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  id v32;
  id v33;
  void (*v34)(char *, uint64_t);
  uint64_t *v35;
  uint64_t result;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v45;
  uint64_t v46;

  v43 = a4;
  v46 = a5;
  v41 = a2;
  v6 = sub_1B2228110();
  v42 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v37 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v37 - v16;
  v18 = a3[3];
  v19 = (void *)a3[4];
  v40 = a3[2];
  if (v19)
  {
    v20 = v18;
    v21 = a3[5];
    ObjectType = swift_getObjectType();
    v39 = v6;
    v23 = ObjectType;
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 8);
    swift_bridgeObjectRetain();
    v24 = v19;
    v25 = v23;
    v6 = v39;
    v38(v40, v20, v25, v21);

  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v44 = 0;
    v45 = 0xE000000000000000;
    v39 = qword_1ED4D0FB0;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v26 = v45;
    v38 = v44;
    v27 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v44 = 0;
    swift_retain();
    sub_1B1F1AD70(v27, (uint64_t *)&v44, (uint64_t)v38, v26);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  swift_retain();
  v28 = sub_1B1A101F0(v41);
  swift_release();
  v29 = v42;
  v30 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v30(v13, v17, v6);
  type metadata accessor for URLWatcher();
  v31 = swift_allocObject();
  v30(v9, v13, v6);
  v32 = objc_allocWithZone((Class)type metadata accessor for URLWatcher.Presenter());
  v33 = sub_1B1FFF190((uint64_t)v9, v28, v46);
  *(_QWORD *)(v31 + 16) = v33;
  objc_msgSend((id)objc_opt_self(), sel_addFilePresenter_, v33);
  v34 = *(void (**)(char *, uint64_t))(v29 + 8);
  v34(v13, v6);
  v34(v17, v6);
  v35 = v43;
  result = swift_release();
  *v35 = v31;
  return result;
}

uint64_t sub_1B210BA5C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  unsigned int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t result;
  void *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int v29;

  v6 = *((unsigned __int8 *)a3 + 8);
  v7 = *((_BYTE *)a3 + 9);
  v22 = *((_BYTE *)a3 + 10);
  v20 = *((_OWORD *)a3 + 2);
  v21 = *((_OWORD *)a3 + 1);
  v19 = *((_OWORD *)a3 + 3);
  v8 = a3[8];
  v23[0] = 0;
  v23[1] = 0xE000000000000000;
  v9 = *a3;
  v10 = *((_DWORD *)a3 + 18);
  sub_1B2229430();
  swift_bridgeObjectRelease();
  strcpy((char *)v23, "RenderTarget[");
  HIWORD(v23[1]) = -4864;
  swift_retain();
  v11 = sub_1B1A101F0(a2);
  swift_release();
  v29 = v11;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v12 = v23[0];
  v13 = v23[1];
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  v23[0] = v9;
  LOBYTE(v23[1]) = v6;
  BYTE1(v23[1]) = v7;
  BYTE2(v23[1]) = v22;
  v24 = v21;
  v25 = v20;
  v26 = v19;
  v27 = v8;
  v28 = v10;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)v23, v14);
  v15 = sub_1B1F328F4(v14, v12, v13);
  swift_bridgeObjectRelease();

  result = swift_unknownObjectRelease();
  *a4 = v15;
  if (v6 >= 2)
  {
    v17 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
    v18 = (void *)sub_1B2228728();
    objc_msgSend(v17, sel_pushDebugGroup_, v18);

    objc_msgSend(v17, sel_generateMipmapsForTexture_, v15);
    objc_msgSend(v17, sel_popDebugGroup);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B210BC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[10];
  _OWORD v13[4];
  unsigned __int8 v14;

  sub_1B1A02864(a1, (uint64_t)v13);
  if ((swift_dynamicCast() & 1) != 0)
  {
    *(_QWORD *)&v4 = v12[0];
    v11 = v4;
    result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
    v6 = v11;
    v7 = 0uLL;
    v8 = 0x80;
LABEL_6:
    v9 = 0uLL;
    v10 = 0uLL;
    goto LABEL_7;
  }
  sub_1B1A02864(a1, (uint64_t)v13);
  sub_1B20F0D20((uint64_t)v13, (uint64_t)v12);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  result = sub_1B1A18378((uint64_t)v12, (uint64_t)v13, (unint64_t *)&qword_1ED4BA1B8, (uint64_t)&type metadata for DataValue);
  v8 = v14;
  if (v14 == 255)
  {
    v6 = 0uLL;
    v8 = -16;
    v7 = 0uLL;
    goto LABEL_6;
  }
  v6 = v13[0];
  v7 = v13[1];
  v9 = v13[2];
  v10 = v13[3];
LABEL_7:
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(_BYTE *)(a2 + 64) = v8;
  return result;
}

uint64_t sub_1B210BD80(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  int v32;
  double (*v33)@<D0>(uint64_t@<X8>);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[15];
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51[7];
  uint64_t v52[13];
  uint64_t v53;

  v44 = a3;
  v9 = sub_1B2228110();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64);
  MEMORY[0x1E0C80A78](v9, v11);
  v12 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v13, v14);
  v18 = (char *)&v38 - v15;
  v19 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v19)
    return 0;
  v39 = a4;
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16);
  v21 = a1;
  v22 = v16;
  v20((char *)&v38 - v15, v21, v9, v17);
  v38 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
  v40 = *(_QWORD *)(v19 + 240);
  v41 = v18;
  ((void (*)(char *, char *, uint64_t))v20)(v12, v18, v9);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v45 = v19;
  v24 = (v23 + 16) & ~v23;
  v25 = (v10 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 65) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject();
  v28 = v27 + v24;
  v29 = v45;
  v42 = v22;
  v43 = v9;
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v28, v12, v9);
  v30 = (_OWORD *)(v27 + v25);
  v31 = *(_OWORD *)(a2 + 16);
  *v30 = *(_OWORD *)a2;
  v30[1] = v31;
  v30[2] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)((char *)v30 + 42) = *(_OWORD *)(a2 + 42);
  *(_QWORD *)(v27 + v26) = v29;
  *(_QWORD *)(v27 + ((v26 + 15) & 0xFFFFFFFFFFFFFFF8)) = v38;
  if ((v39 & 1) != 0)
  {
    if (v44)
    {
      v32 = 2;
      swift_retain_n();
      swift_retain();
      swift_release();
      v33 = 0;
      v27 = 0;
      v35 = 0;
    }
    else
    {
      swift_retain_n();
      swift_retain();
      v35 = 0;
      v32 = 0;
      v33 = sub_1B2114B70;
    }
    v34 = v41;
  }
  else
  {
    swift_retain_n();
    swift_retain();
    v32 = 1;
    v33 = sub_1B2114B70;
    v34 = v41;
    v35 = v44;
  }
  sub_1B1FAD418(1, (uint64_t *)a2, (uint64_t)v33, v27, v35, v32, v46);
  sub_1B1FAE964((uint64_t)v33, v27, v35, v32);
  swift_release();
  sub_1B1A18378((uint64_t)v46, (uint64_t)&v47, &qword_1ED4B7750, (uint64_t)&type metadata for TextureCache.Texture);
  if (v48 >> 1 == 0xFFFFFFFF && !(v49 >> 17) && !HIDWORD(v50))
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
    swift_release();
    return 0;
  }
  sub_1B1FAEAA4(&v47, (uint64_t)v51);
  sub_1B1FAEAA4(v51, (uint64_t)v52);
  if ((v53 & 0x8000000000000000) == 0)
  {
    v36 = v52[0];
    swift_release();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v43);
    return v36;
  }
  v53 &= ~0x8000000000000000;
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B210C200(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  uint64_t result;
  _QWORD *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  char v79;
  char v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v60 = a6;
  v65 = a5;
  v64 = a4;
  v63 = a3;
  v8 = sub_1B2228110();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = xmmword_1B22BEC10;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v13 = swift_bridgeObjectRetain();
  v14 = sub_1B1A20F64(v13);
  v15 = v6;
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v59 = a1;
  v68 = MEMORY[0x1E0DEE9D8];
  sub_1B2229550();
  v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v61 = v14;
  v18 = v14 + v17;
  v62 = *(_QWORD *)(v9 + 72);
  v19 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
  do
  {
    v19(v12, v18, v8);
    sub_1B21062F0((uint64_t)v12, v63, (uint64_t)&v81, v65, &v66);
    v86 = v15;
    if (v15)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      result = swift_release();
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    sub_1B2229520();
    sub_1B2229568();
    sub_1B2229574();
    sub_1B2229538();
    v18 += v62;
    --v16;
    v15 = v86;
  }
  while (v16);
  v20 = v68;
  swift_bridgeObjectRelease();
  v21 = *((_QWORD *)&v81 + 1);
  if ((*((_QWORD *)&v81 + 1) & 0xFF0000) == 0x20000)
    return swift_bridgeObjectRelease();
  v22 = *(_QWORD **)(v20 + 16);
  if (!v22)
    return swift_bridgeObjectRelease();
  v65 = *((_QWORD *)&v83 + 1);
  v62 = v83;
  v63 = *((_QWORD *)&v84 + 1);
  v64 = v84;
  v23 = *((_QWORD *)&v85 + 1);
  v61 = v85;
  v24 = v82;
  v25 = v81;
  v58 = *((_QWORD *)&v85 + 1) >> 24;
  v57 = *((_QWORD *)&v85 + 1) >> 16;
  v56 = *((_QWORD *)&v85 + 1) >> 8;
  v26 = DWORD1(v81);
  v27 = (unint64_t)v81 >> 16;
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  LODWORD(v68) = v25;
  v52 = v27;
  v29 = v28;
  v53 = v26;
  WORD2(v68) = WORD2(v25);
  HIWORD(v68) = (_WORD)v22;
  LOWORD(v69) = v21;
  v54 = v21 >> 8;
  v51 = WORD1(v21) & 1;
  BYTE2(v69) = BYTE2(v21) & 1;
  v55 = v24;
  v70 = v24;
  v71 = 3;
  v72 = v62;
  v73 = v65;
  v74 = v64;
  v75 = v63;
  v76 = v61;
  v77 = v23;
  v78 = v56;
  v79 = v57;
  v80 = v58;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v68, v28);
  v30 = objc_msgSend(*(id *)(v60 + 16), sel_newTextureWithDescriptor_, v29);
  if (v30)
  {
    v31 = v30;
    sub_1B1F326B0((uint64_t)v30);
    objc_msgSend(v31, sel_setLabel_, 0);

    v32 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
    v33 = (void *)sub_1B2228728();
    objc_msgSend(v32, sel_pushDebugGroup_, v33);

    v34 = *(_QWORD *)(v20 + 16);
    if (v34)
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      for (i = 0; i != v34; ++i)
      {
        v36 = *(_QWORD *)(v20 + 8 * i + 32);
        if (v36)
          objc_msgSend(v32, sel_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount_, v36, 0, 0, v31, i, 0, 1, 1);
      }
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v32, sel_popDebugGroup);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v38 = v59;
    result = swift_unknownObjectRelease();
    *v38 = v31;
  }
  else
  {
    v49 = v21;
    v50 = v25;
    v59 = v22;
    v60 = v23;
    if (qword_1ED4BF430 != -1)
      swift_once();
    v68 = 0;
    v69 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v68 = 0xD000000000000023;
    v69 = 0x80000001B2331BE0;
    v39 = v29;
    v40 = objc_msgSend(v29, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v41 = v68;
    v42 = v69;
    v43 = sub_1B2228E90();
    v44 = v62;
    if (qword_1ED4BF658 != -1)
      swift_once();
    v68 = 0;
    swift_retain();
    sub_1B1F1AD70(v43, &v68, v41, v42);
    swift_bridgeObjectRelease();

    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v68 = 0;
    v69 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    v66 = v68;
    v67 = v69;
    sub_1B2228890();
    LOWORD(v68) = v50;
    WORD1(v68) = v52;
    WORD2(v68) = v53;
    HIWORD(v68) = (_WORD)v59;
    LOBYTE(v69) = v49;
    BYTE1(v69) = v54;
    BYTE2(v69) = v51;
    v70 = v55;
    v71 = 3;
    v72 = v44;
    v73 = v65;
    v74 = v64;
    v75 = v63;
    v76 = v61;
    v77 = v60;
    v78 = v56;
    v79 = v57;
    v80 = v58;
    type metadata accessor for TextureDescriptor(0);
    sub_1B22295EC();
    v45 = v66;
    v46 = v67;
    v47 = sub_1B2228E90();
    v68 = 0;
    swift_retain();
    sub_1B1F1AD70(v47, &v68, v45, v46);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B210C9D4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v26 = a6;
  v28 = a5;
  v32 = a4;
  v29 = a3;
  v8 = sub_1B2228110();
  v27 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2[3];
  v13 = (void *)a2[4];
  if (v13)
  {
    v14 = a2[2];
    v15 = a2[5];
    ObjectType = swift_getObjectType();
    v25 = (char *)v8;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8);
    swift_bridgeObjectRetain();
    v18 = v13;
    v17(v14, v12, ObjectType, v15);
    v8 = (uint64_t)v25;

    v19 = (uint64_t)v11;
  }
  else
  {
    v25 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (qword_1ED4BF430 != -1)
      swift_once();
    v30 = 0;
    v31 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v20 = v30;
    v21 = v31;
    v22 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v30 = 0;
    swift_retain();
    sub_1B1F1AD70(v22, &v30, v20, v21);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    v19 = (uint64_t)v25;
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  v23 = sub_1B210BD80(v19, v29, v32, v28 & 1, v26);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v19, v8);
  result = swift_unknownObjectRelease();
  *a1 = v23;
  return result;
}

uint64_t sub_1B210CC58(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;

  v24 = a3;
  v25 = a4;
  v26 = a1;
  v5 = sub_1B2228110();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[2];
  v10 = a2[3];
  v12 = (void *)a2[4];
  if (v12)
  {
    v13 = a2[5];
    ObjectType = swift_getObjectType();
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8);
    swift_bridgeObjectRetain();
    v16 = v12;
    v15(v11, v10, ObjectType, v13);

  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    v27 = 0;
    v28 = 0xE000000000000000;
    v23 = qword_1ED4D0FB0;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v17 = v27;
    v18 = v28;
    v19 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v27 = 0;
    swift_retain();
    sub_1B1F1AD70(v19, &v27, v17, v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  v20 = sub_1B210BD80((uint64_t)v9, v24, 1, 1, v25);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v21 = v26;
  result = swift_unknownObjectRelease();
  *v21 = v20;
  return result;
}

void sub_1B210CEAC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  void (*v23)(char *, uint64_t, uint64_t, __n128);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  int v32;
  double (*v33)@<D0>(uint64_t@<X8>);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[15];
  __int128 v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62[7];
  __int128 v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int16 v67;
  unsigned __int8 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  *(_QWORD *)&v54 = a3;
  v11 = sub_1B2228110();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v49 - v18;
  v21 = *(_QWORD *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  v22 = 0uLL;
  if (!v21)
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0uLL;
    v43 = 0uLL;
    v44 = 0uLL;
LABEL_13:
    *(_OWORD *)a6 = v22;
    *(_QWORD *)(a6 + 16) = v36;
    *(_QWORD *)(a6 + 24) = v37;
    *(_QWORD *)(a6 + 32) = v38;
    *(_QWORD *)(a6 + 40) = v21;
    *(_OWORD *)(a6 + 48) = v42;
    *(_OWORD *)(a6 + 64) = v43;
    *(_OWORD *)(a6 + 80) = v44;
    *(_QWORD *)(a6 + 96) = v39;
    *(_QWORD *)(a6 + 104) = v40;
    *(_QWORD *)(a6 + 112) = v41;
    return;
  }
  v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
  LODWORD(v50) = a4;
  v24 = v19;
  v56 = v21;
  v23((char *)&v49 - v18, a1, v19, (__n128)0);
  *(_QWORD *)&v51 = *(_QWORD *)(v56 + 240);
  v55 = v20;
  ((void (*)(char *, char *, uint64_t))v23)(v15, v20, v24);
  v25 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v26 = (v13 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject();
  v28 = v27 + v25;
  v52 = v12;
  v53 = v24;
  v29 = v56;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v28, v15, v24);
  v30 = (_OWORD *)(v27 + v26);
  v31 = *(_OWORD *)(a2 + 16);
  *v30 = *(_OWORD *)a2;
  v30[1] = v31;
  v30[2] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)((char *)v30 + 42) = *(_OWORD *)(a2 + 42);
  *(_QWORD *)(v27 + ((v26 + 65) & 0xFFFFFFFFFFFFFFF8)) = v29;
  if ((v50 & 1) != 0)
  {
    if ((_QWORD)v54)
    {
      v32 = 2;
      swift_retain_n();
      swift_retain();
      swift_release();
      v33 = 0;
      v27 = 0;
      v35 = 0;
    }
    else
    {
      swift_retain_n();
      swift_retain();
      v35 = 0;
      v32 = 0;
      v33 = sub_1B21158E8;
    }
    v34 = v55;
  }
  else
  {
    swift_retain_n();
    swift_retain();
    v32 = 1;
    v33 = sub_1B21158E8;
    v34 = v55;
    v35 = v54;
  }
  sub_1B1FAD418(0, (uint64_t *)a2, (uint64_t)v33, v27, v35, v32, v57);
  sub_1B1FAE964((uint64_t)v33, v27, v35, v32);
  swift_release();
  sub_1B1A18378((uint64_t)v57, (uint64_t)&v58, &qword_1ED4B7750, (uint64_t)&type metadata for TextureCache.Texture);
  if (v59 >> 1 == 0xFFFFFFFF && !(v60 >> 17) && !HIDWORD(v61))
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v53);
    swift_release();
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v21 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0uLL;
    v43 = 0uLL;
    v44 = 0uLL;
    v22 = 0uLL;
    goto LABEL_13;
  }
  sub_1B1FAEAA4(&v58, (uint64_t)v62);
  sub_1B1FAEAA4(v62, (uint64_t)&v63);
  v45 = v73;
  if (v73 < 0)
  {
    v73 &= ~0x8000000000000000;
    v54 = v63;
    v36 = v64;
    v37 = v65;
    v38 = v66;
    v46 = v68;
    v50 = v70;
    v51 = v69;
    v49 = v71;
    v40 = v45;
    v39 = v72;
    v41 = v74;
    v47 = v67;
    swift_release();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v55, v53);
    v44 = v49;
    v43 = v50;
    v42 = v51;
    v22 = v54;
    v48 = 0x10000;
    if (!v46)
      v48 = 0;
    v21 = v47 | v48;
    goto LABEL_13;
  }
  sub_1B2229688();
  __break(1u);
}

double sub_1B210D3D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[120];
  _OWORD v36[7];
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v34 = a6;
  v46 = a4;
  v32 = a3;
  v8 = a5 & 1;
  v33 = sub_1B2228110();
  v9 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v10);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (char *)&v28 - v12;
  v14 = a2[3];
  v15 = (void *)a2[4];
  if (v15)
  {
    v29 = a2[2];
    v16 = a2[5];
    ObjectType = swift_getObjectType();
    v30 = v9;
    v18 = ObjectType;
    LODWORD(v31) = v8;
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 8);
    swift_bridgeObjectRetain();
    v20 = v15;
    v21 = v18;
    v9 = v30;
    v19(v29, v14, v21, v16);
    v8 = (int)v31;

  }
  else
  {
    v31 = (char *)&v28 - v12;
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = 0xE000000000000000;
    v30 = qword_1ED4D0FB0;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v22 = *((_QWORD *)&v38 + 1);
    v29 = v38;
    v23 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v38 = 0;
    swift_retain();
    sub_1B1F1AD70(v23, (uint64_t *)&v38, v29, v22);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    v13 = v31;
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  sub_1B210CEAC((uint64_t)v13, v32, v46, v8, v34, (uint64_t)v35);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v33);
  sub_1B1A18378((uint64_t)v35, (uint64_t)v36, (unint64_t *)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime);
  if (v37)
  {
    v42 = v36[4];
    v43 = v36[5];
    v44 = v36[6];
    v38 = v36[0];
    v39 = v36[1];
    v45 = v37;
    v40 = v36[2];
    v41 = v36[3];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v25 = v43;
    *(_OWORD *)(a1 + 64) = v42;
    *(_OWORD *)(a1 + 80) = v25;
    *(_OWORD *)(a1 + 96) = v44;
    *(_QWORD *)(a1 + 112) = v45;
    v26 = v39;
    *(_OWORD *)a1 = v38;
    *(_OWORD *)(a1 + 16) = v26;
    result = *(double *)&v40;
    v27 = v41;
    *(_OWORD *)(a1 + 32) = v40;
    *(_OWORD *)(a1 + 48) = v27;
  }
  return result;
}

double sub_1B210D6D0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  double result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[120];
  _OWORD v33[7];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v30 = a4;
  v31 = a3;
  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (char *)&v26 - v10;
  v12 = a2[3];
  v13 = (void *)a2[4];
  if (v13)
  {
    v27 = a2[2];
    v14 = a2[5];
    ObjectType = swift_getObjectType();
    v28 = v7;
    v29 = (char *)v6;
    v16 = ObjectType;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8);
    swift_bridgeObjectRetain();
    v18 = v13;
    v19 = v16;
    v7 = v28;
    v17(v27, v12, v19, v14);
    v6 = (uint64_t)v29;

  }
  else
  {
    v29 = (char *)&v26 - v10;
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v35 = 0;
    *((_QWORD *)&v35 + 1) = 0xE000000000000000;
    v28 = qword_1ED4D0FB0;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v20 = *((_QWORD *)&v35 + 1);
    v27 = v35;
    v21 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v35 = 0;
    swift_retain();
    sub_1B1F1AD70(v21, (uint64_t *)&v35, v27, v20);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    v11 = v29;
    sub_1B2228050();
  }
  swift_bridgeObjectRelease();
  sub_1B210CEAC((uint64_t)v11, v31, 1, 1, v30, (uint64_t)v32);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  sub_1B1A18378((uint64_t)v32, (uint64_t)v33, (unint64_t *)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime);
  if (v34)
  {
    v39 = v33[4];
    v40 = v33[5];
    v41 = v33[6];
    v35 = v33[0];
    v36 = v33[1];
    v42 = v34;
    v37 = v33[2];
    v38 = v33[3];
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    v23 = v40;
    *(_OWORD *)(a1 + 64) = v39;
    *(_OWORD *)(a1 + 80) = v23;
    *(_OWORD *)(a1 + 96) = v41;
    *(_QWORD *)(a1 + 112) = v42;
    v24 = v36;
    *(_OWORD *)a1 = v35;
    *(_OWORD *)(a1 + 16) = v24;
    result = *(double *)&v37;
    v25 = v38;
    *(_OWORD *)(a1 + 32) = v37;
    *(_OWORD *)(a1 + 48) = v25;
  }
  return result;
}

uint64_t sub_1B210D9BC(void *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t result;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  sub_1B1EFF5B0(*a2, a2[1], &v27);
  if (!a3)
    return sub_1B20FD77C(a7, a1);
  v10 = 0;
  v11 = v27;
  v12 = v28;
  while (1)
  {
    sub_1B1BA8088(v10 % a4 * v11, v10 / a4 * *((_QWORD *)&v11 + 1), 0, &v27);
    v15 = v27;
    v16 = v28;
    if (a5 != 1)
      break;
    sub_1B1BA8088(0, 0, v10, &v27);
    v13 = v28;
    v14 = v27;
    v27 = v15;
    v28 = v16;
    v25 = v11;
    v26 = v12;
    v23 = v14;
    v24 = v13;
    objc_msgSend(a1, sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, a6, 0, 0, &v27, &v25, a7, 0, 0, &v23);
LABEL_4:
    if (a3 == ++v10)
      return sub_1B20FD77C(a7, a1);
  }
  if (a5 == 2)
  {
    sub_1B1BA8088(0, 0, 0, &v27);
    v17 = v28;
    v18 = v27;
    v27 = v15;
    v28 = v16;
    v25 = v11;
    v26 = v12;
    v23 = v18;
    v24 = v17;
    objc_msgSend(a1, sel_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, a6, 0, 0, &v27, &v25, a7, v10, 0, &v23);
    goto LABEL_4;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void *sub_1B210DB84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  double v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  int16x8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int32 v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;

  RGTextureDescriptorFromMTLTexture(a1, (uint64_t)&v64);
  v9 = sub_1B20FE1E8((unsigned __int16 *)&v64, (uint64_t)&v52);
  v10 = v52;
  v11 = v53;
  v12 = v54;
  v37 = v55;
  v35 = v57;
  v36 = v56;
  v33 = v59;
  v34 = v58;
  v31 = v61;
  v32 = v60;
  v30 = v62;
  LODWORD(v9) = v63;
  v29 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v9);
  v13 = objc_msgSend(a1, sel_label);
  if (v13)
  {
    v14 = v13;
    v15 = sub_1B222874C();
    v17 = v16;

  }
  else
  {
    v17 = 0x80000001B234CB40;
    v15 = 0xD000000000000010;
  }
  v18 = 1024;
  if (a2 >= 1024)
    v19 = 1024;
  else
    v19 = a2;
  if (v19 <= 1)
    v20 = 1;
  else
    v20 = v19;
  if (a3 <= 1)
    v21 = 1;
  else
    v21 = a3;
  if (v21 < 1024)
    v18 = v21;
  v22 = v18 * v20;
  v23 = a4;
  if ((a5 & 1) != 0)
    v23 = v22;
  if (v22 >= v23)
    v22 = v23;
  v39 = v22;
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  v40 = v10;
  v41 = v11;
  v42 = v12;
  v43 = v37;
  v44 = v36;
  v45 = v35;
  v46 = v34;
  v47 = v33;
  v48 = v32;
  v49 = v31;
  v50 = v30;
  v51 = vmovn_s16(v29).u32[0];
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v40, v24);
  v25 = sub_1B1F328F4(v24, v15, v17);
  swift_bridgeObjectRelease();

  v26 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
  v27 = (void *)sub_1B2228728();
  objc_msgSend(v26, sel_pushDebugGroup_, v27);

  swift_unknownObjectRetain();
  sub_1B210D9BC(v26, (unsigned __int16 *)&v52, v39, v20, SHIBYTE(a5), (uint64_t)a1, v25);
  swift_unknownObjectRelease();
  objc_msgSend(v26, sel_popDebugGroup);
  swift_unknownObjectRelease();
  return v25;
}

id sub_1B210DE54(uint64_t *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  NSObject *v39;
  char v40;
  uint8_t *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  os_signpost_id_t v51;
  void (*v52)(char *, char *, uint64_t);
  id v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int16 v57;
  unsigned __int16 v58;
  unsigned __int16 v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  id v63;
  __int128 v64;
  int v65;
  uint64_t v66;
  _BOOL4 v68;
  uint64_t v69;
  int v70;
  char v71;
  void *v72;
  char v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  void *v81;
  void *v82;
  char v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 v87;
  unsigned int v88;
  __int16 v89;
  _BOOL4 v90;
  unsigned int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  void *v100;
  void *v101;
  id v102;
  id v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  int v110;
  NSObject *v111;
  char *v112;
  os_signpost_type_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  void (*v118)(uint64_t, uint64_t);
  void *v119;
  uint64_t v120;
  void *v121;
  id v122;
  unint64_t v123;
  void *v124;
  void *v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  id v130;
  uint64_t v131;
  void *v132;
  char *v133;
  char *v134;
  uint8_t *v135;
  os_signpost_id_t v136;
  void *v137;
  void *v138;
  void *v139;
  id v140;
  unsigned __int8 v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  NSObject *v148;
  char *v149;
  os_signpost_type_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  id v154;
  const char *v155;
  uint64_t v156;
  char *v157;
  uint8_t *v158;
  os_signpost_id_t v159;
  id v160;
  __int128 v161;
  int v162;
  NSObject *v163;
  char *v164;
  os_signpost_type_t v165;
  char *v166;
  uint64_t v167;
  int v168;
  const char *v169;
  char *v170;
  char *v171;
  uint8_t *v172;
  os_signpost_id_t v173;
  uint64_t v175;
  char *v176;
  id v177;
  char *v178;
  uint64_t v179;
  int v180;
  char *v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  _BOOL4 v187;
  uint64_t v188;
  int v189;
  int v190;
  void (*v191)(char *, char *, uint64_t);
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  id v202;
  uint64_t v203;
  unsigned int v204;
  char *v205;
  int v206;
  uint8_t *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t *v211;
  id v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  unint64_t v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226[2];
  uint64_t v227[2];
  id v228;
  int v229;
  char v230;
  char v231;
  __int16 v232;
  unsigned __int16 v233;
  unsigned __int16 v234;
  unsigned __int16 v235;
  unsigned __int8 v236;
  unsigned __int8 v237;
  char v238;
  int v239;
  char v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int8 v248;
  unsigned __int8 v249;
  unsigned __int8 v250;
  unsigned __int8 v251;
  int v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  char v262;
  char v263;
  char v264;
  uint64_t v265;
  _BYTE v266[32];
  _OWORD v267[10];
  _OWORD v268[11];
  id v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  _QWORD v276[2];
  __int128 v277;
  __int128 v278;
  __int16 v279;
  _QWORD v280[6];
  __int16 v281;
  unsigned __int16 v282;
  unsigned __int16 v283;
  __int16 v284;
  char v285;
  char v286;
  char v287;
  int v288;
  char v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char v297;
  char v298;
  char v299;
  char v300;
  int v301;
  _QWORD v302[3];
  unsigned __int16 v303;

  v211 = a2;
  v212 = a4;
  v6 = sub_1B22283BC();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v184 = (char *)&v175 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v181 = (char *)&v175 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v183 = (char *)&v175 - v15;
  v16 = sub_1B2228380();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  MEMORY[0x1E0C80A78](v21, v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v175 - v25;
  MEMORY[0x1E0C80A78](v27, v28);
  v33 = (char *)&v175 - v32;
  v209 = a1;
  v34 = (void *)*a1;
  if (v34)
  {
    v182 = v31;
    v178 = v30;
    v179 = v6;
    v176 = v29;
    v210 = a3;
    v35 = qword_1ED4BA0E0;
    swift_unknownObjectRetain();
    if (v35 != -1)
      swift_once();
    v36 = sub_1B22283B0();
    v37 = sub_1B1B40EC8(v36, (uint64_t)qword_1ED4D0E48);
    sub_1B2228398();
    sub_1B2228368();
    v38 = v209;
    sub_1B1E7D33C((uint64_t)v209);
    sub_1B1E7D33C((uint64_t)v38);
    v185 = v37;
    v39 = sub_1B2228398();
    LODWORD(v208) = sub_1B2228FA4();
    v40 = sub_1B2229094();
    v192 = v16;
    v193 = v17;
    v205 = v33;
    v186 = v26;
    v202 = v34;
    v188 = v7;
    if ((v40 & 1) != 0)
    {
      v191 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v191(v26, v33, v16);
      v41 = (uint8_t *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      *(_DWORD *)v41 = 136315138;
      *(_QWORD *)&v253 = v42;
      v207 = v41 + 4;
      v43 = *((_OWORD *)v38 + 5);
      v267[7] = *((_OWORD *)v38 + 4);
      v267[8] = v43;
      v267[9] = *((_OWORD *)v38 + 6);
      v44 = *((_OWORD *)v38 + 2);
      v267[6] = *((_OWORD *)v38 + 3);
      v267[5] = v44;
      v45 = sub_1B20F33A0();
      v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB34E8]), (SEL)0x1F34D2DC8);
      objc_msgSend(v46, sel_setCountStyle_, 3);
      v47 = objc_msgSend(v46, sel_stringFromByteCount_, v45);
      v48 = sub_1B222874C();
      v50 = v49;

      v16 = v192;
      *(_QWORD *)&v268[0] = sub_1B1B3EF90(v48, v50, (uint64_t *)&v253);
      v33 = v205;
      sub_1B22291D8();
      v26 = v186;
      swift_bridgeObjectRelease();
      sub_1B1FAEB64((uint64_t)v38);
      sub_1B1FAEB64((uint64_t)v38);
      v51 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v39, (os_signpost_type_t)v208, v51, "uploadTextureToGPU", "%s", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E23F88](v42, -1, -1);
      MEMORY[0x1B5E23F88](v41, -1, -1);

      (*(void (**)(char *, uint64_t))(v193 + 8))(v26, v16);
      v52 = v191;
    }
    else
    {

      sub_1B1FAEB64((uint64_t)v38);
      sub_1B1FAEB64((uint64_t)v38);
      v52 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    }
    v191 = v52;
    v52(v26, v33, v16);
    sub_1B22283E0();
    swift_allocObject();
    v203 = sub_1B22283D4();
    v54 = v210;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v210 + 208));
    v55 = *((_OWORD *)v38 + 5);
    v267[2] = *((_OWORD *)v38 + 4);
    v267[3] = v55;
    v267[4] = *((_OWORD *)v38 + 6);
    v56 = *((_OWORD *)v38 + 2);
    v267[1] = *((_OWORD *)v38 + 3);
    v267[0] = v56;
    sub_1B20FE1E8((unsigned __int16 *)v267, (uint64_t)&v232);
    v57 = v232;
    v58 = v233;
    v59 = v234;
    v204 = v236;
    v200 = v237;
    v201 = v235;
    v231 = v238;
    v229 = v239;
    v230 = v240;
    v60 = v241;
    v61 = v244;
    v195 = v243;
    v196 = v242;
    v198 = v246;
    v199 = v245;
    v197 = v247;
    v62 = v248;
    LODWORD(v208) = v249;
    v206 = v251;
    LODWORD(v207) = v250;
    v180 = v252;
    v63 = v212;
    v189 = v234;
    v190 = v233;
    if (v241 <= 0x37 && ((1 << v241) & 0xE0000003D07C00) != 0)
    {
      swift_getObjectType();
      if ((sub_1B1F9FBBC() & 1) == 0 || (v61 & 2) != 0)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)&v253 = 0;
        *((_QWORD *)&v253 + 1) = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        sub_1B2228890();
        *(_QWORD *)&v268[0] = v60;
        type metadata accessor for MTLPixelFormat(0);
        sub_1B22295EC();
        v64 = v253;
        v65 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v194 = v62;
        *(_QWORD *)&v253 = 0;
        swift_retain();
        sub_1B1F1AD70(v65, (uint64_t *)&v253, v64, *((uint64_t *)&v64 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v54 = v210;
        v63 = v212;
        v59 = v189;
        v58 = v190;
      }
      else
      {
        v194 = 2;
        LODWORD(v208) = 2;
        v206 = 2;
        LODWORD(v207) = 2;
      }
    }
    else
    {
      v194 = v248;
    }
    v66 = *v211;
    v68 = v60 == 125 || v60 == 115;
    if ((v66 & 8) == 0)
      v68 = 0;
    v187 = v68;
    v177 = *(id *)(v54 + 16);
    if (objc_msgSend(v177, sel_readWriteTextureSupport) == (id)2)
    {
      v69 = sub_1B1F9DA94(v60);
      v70 = 0;
      switch(v69)
      {
        case 10:
        case 13:
        case 14:
        case 23:
        case 25:
        case 70:
        case 73:
        case 74:
        case 113:
        case 114:
        case 115:
        case 123:
        case 124:
        case 125:
          break;
        default:
          v70 = 1;
          break;
      }
      if (!(v70 | !v187 | (v61 >> 1) & 1))
        v61 |= 2uLL;
    }
    if (v63)
    {
      v281 = v57;
      v282 = v58;
      v283 = v59;
      v284 = v201;
      v285 = v204;
      v286 = v200;
      v71 = v231;
      v287 = v231;
      v288 = v229;
      v289 = v230;
      v290 = v60;
      v291 = v196;
      v292 = v195;
      v293 = v61;
      v294 = v199;
      v295 = v198;
      v296 = v197;
      v297 = v194;
      v298 = v208;
      v299 = (char)v207;
      v300 = v206;
      v301 = v180;
      v72 = (void *)swift_unknownObjectRetain();
      if (sub_1B20F2C10(v72))
        goto LABEL_39;
      swift_unknownObjectRelease();
      v73 = v71 & 1;
    }
    else
    {
      v73 = v231;
    }
    v74 = objc_msgSend(v202, sel_label);
    if (v74)
    {
      v75 = v74;
      v76 = sub_1B222874C();
      v78 = v77;

    }
    else
    {
      v76 = 0;
      v78 = 0;
    }
    v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
    LOWORD(v253) = v57;
    WORD1(v253) = v190;
    WORD2(v253) = v189;
    WORD3(v253) = v201;
    BYTE8(v253) = v204;
    BYTE9(v253) = v200;
    BYTE10(v253) = v73;
    v254 = v60;
    v255 = v196;
    v256 = v195;
    v257 = v61;
    v258 = v199;
    v259 = v198;
    v260 = v197;
    v261 = v194;
    v262 = v208;
    v263 = (char)v207;
    v264 = v206;
    RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v253, v79);
    v80 = sub_1B1F328F4(v79, v76, v78);

    swift_bridgeObjectRelease();
    if (!v80)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v253 = 0;
      *((_QWORD *)&v253 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      v268[0] = v253;
      sub_1B2228890();
      LOWORD(v253) = v57;
      WORD1(v253) = v190;
      WORD2(v253) = v189;
      WORD3(v253) = v201;
      BYTE8(v253) = v204;
      BYTE9(v253) = v200;
      BYTE10(v253) = v73;
      v254 = v60;
      v255 = v196;
      v256 = v195;
      v257 = v61;
      v258 = v199;
      v259 = v198;
      v260 = v197;
      v261 = v194;
      v262 = v208;
      v263 = (char)v207;
      v264 = v206;
      type metadata accessor for TextureDescriptor(0);
      sub_1B22295EC();
      sub_1B2228890();
      v98 = objc_msgSend(v202, sel_label);
      v99 = v193;
      if (v98)
      {
        v100 = v98;
        sub_1B222874C();

      }
      v97 = v192;
      v108 = v188;
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v109 = v268[0];
      v110 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v253 = 0;
      swift_retain();
      sub_1B1F1AD70(v110, (uint64_t *)&v253, v109, *((uint64_t *)&v109 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v210 + 208));
      v111 = sub_1B2228398();
      v112 = v178;
      sub_1B22283C8();
      v113 = sub_1B2228F98();
      if ((sub_1B2229094() & 1) != 0)
      {
        swift_retain();
        v114 = v183;
        sub_1B22283EC();
        swift_release();
        v115 = v179;
        v116 = v99;
        if ((*(unsigned int (**)(char *, uint64_t))(v108 + 88))(v114, v179) == *MEMORY[0x1E0DF2190])
        {
          v117 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v108 + 8))(v114, v115);
          v117 = "";
        }
        v133 = v186;
        v134 = v178;
        v191(v186, v178, v97);
        v135 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v135 = 0;
        v136 = sub_1B2228374();
        _os_signpost_emit_with_name_impl(&dword_1B178D000, v111, v113, v136, "uploadTextureToGPU", v117, v135, 2u);
        MEMORY[0x1B5E23F88](v135, -1, -1);

        v118 = *(void (**)(uint64_t, uint64_t))(v116 + 8);
        v118((uint64_t)v134, v97);
        v118((uint64_t)v133, v97);
      }
      else
      {

        v118 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
        v118((uint64_t)v112, v97);
      }
      goto LABEL_97;
    }
    v63 = v80;
LABEL_39:
    v212 = v63;
    v228 = v63;
    v81 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
    v82 = (void *)sub_1B2228728();
    objc_msgSend(v81, sel_pushDebugGroup_, v82);

    sub_1B1A18378((uint64_t)(v211 + 4), (uint64_t)v266, &qword_1ED4B7940, (uint64_t)&type metadata for TextureRequireAnimationRepresentation);
    sub_1B1A18378((uint64_t)v266, (uint64_t)v302, &qword_1ED4B7940, (uint64_t)&type metadata for TextureRequireAnimationRepresentation);
    v83 = v303;
    v84 = v303 & 0xFF00;
    if (v84 == 768 || v303 < 0x100u)
    {
      v90 = v187;
      v91 = !v187 & (v66 >> 6);
      swift_unknownObjectRetain();
      v53 = v212;
      swift_unknownObjectRetain();
      sub_1B20FDB98(v209, v53, v91, v81);
    }
    else
    {
      v85 = v302[1];
      v208 = v302[2];
      v86 = v302[0];
      v87 = v187;
      v88 = !v187 & (v66 >> 6);
      swift_unknownObjectRetain();
      v53 = v212;
      swift_unknownObjectRetain();
      v89 = v84 | v83 & 1;
      v90 = v87;
      sub_1B20FDE68(v86, v85, v208, v89, v209, v53, v88, v81);
    }
    v92 = v205;
    v93 = v188;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    objc_msgSend(v81, sel_popDebugGroup);
    swift_unknownObjectRelease();
    v94 = v210;
    if (!v90)
    {
      v97 = v192;
LABEL_81:
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v94 + 208));
      v148 = sub_1B2228398();
      v149 = v182;
      sub_1B22283C8();
      v150 = sub_1B2228F98();
      if ((sub_1B2229094() & 1) != 0)
      {
        v151 = v149;
        swift_retain();
        v152 = v184;
        sub_1B22283EC();
        swift_release();
        v153 = v179;
        if ((*(unsigned int (**)(char *, uint64_t))(v93 + 88))(v152, v179) == *MEMORY[0x1E0DF2190])
        {
          v154 = v53;
          v155 = "[Error] Interval already ended";
        }
        else
        {
          v156 = v93;
          v154 = v53;
          (*(void (**)(char *, uint64_t))(v156 + 8))(v152, v153);
          v155 = "";
        }
        v157 = v186;
        v191(v186, v151, v97);
        v158 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v158 = 0;
        v159 = sub_1B2228374();
        _os_signpost_emit_with_name_impl(&dword_1B178D000, v148, v150, v159, "uploadTextureToGPU", v155, v158, 2u);
        MEMORY[0x1B5E23F88](v158, -1, -1);

        v118 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
        v118((uint64_t)v151, v97);
        v118((uint64_t)v157, v97);
        v53 = v154;
        v92 = v205;
      }
      else
      {

        v118 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
        v118((uint64_t)v149, v97);
      }
      swift_unknownObjectRelease();
      swift_release();
      goto LABEL_98;
    }
    v226[0] = 0xD00000000000001DLL;
    v226[1] = 0x80000001B234C9D0;
    v227[0] = 0xD00000000000001DLL;
    v227[1] = 0x80000001B234C9D0;
    if (objc_msgSend(v177, sel_readWriteTextureSupport) == (id)2)
    {
      switch(sub_1B1F9DA94((uint64_t)objc_msgSend(v53, sel_pixelFormat)))
      {
        case 10:
        case 13:
        case 14:
        case 23:
        case 25:
        case 70:
        case 73:
        case 74:
        case 113:
        case 114:
        case 115:
        case 123:
        case 124:
        case 125:
          v95 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
          v96 = (void *)sub_1B2228728();
          objc_msgSend(v95, sel_pushDebugGroup_, v96);

          sub_1B20FE5E0(v95, &v228, v94, v226, v227);
          objc_msgSend(v95, sel_popDebugGroup);
          swift_unknownObjectRelease();
          goto LABEL_75;
        default:
          break;
      }
    }
    sub_1B1B9DAD4(0, &qword_1ED4842F0);
    swift_getObjectType();
    v101 = (void *)swift_unknownObjectRetain();
    v102 = sub_1B1FA04C4(v101);
    objc_msgSend(v102, sel_setUsage_, 5);
    v103 = objc_msgSend(v53, sel_label);
    if (v103)
    {
      v104 = v103;
      v105 = sub_1B222874C();
      v107 = v106;

    }
    else
    {
      v107 = 0x80000001B234CA10;
      v105 = 0xD000000000000010;
    }
    v119 = sub_1B1F328F4(v102, v105, v107);
    swift_bridgeObjectRelease();
    if (v119)
    {
      v209 = (uint64_t *)v102;
      v120 = swift_unknownObjectRetain();
      v121 = sub_1B1BA147C(v120, 0, 0, 2, 0, 0);
      swift_unknownObjectRelease();
      v122 = objc_msgSend(v212, sel_pixelFormat);
      v270 = 0u;
      v271 = 0u;
      v272 = 0u;
      v273 = 0u;
      v269 = v122;
      v274 = 0;
      v275 = 1;
      *(_QWORD *)&v213 = 0xD000000000000010;
      *((_QWORD *)&v213 + 1) = 0x80000001B23338F0;
      v214 = 0;
      v215 = 0;
      *(_QWORD *)&v216 = MEMORY[0x1E0DEE9D8];
      *((_QWORD *)&v216 + 1) = 0xD00000000000001ELL;
      v217 = 0x80000001B234C9F0;
      v218 = 0;
      *(_QWORD *)&v219 = 0;
      *((_QWORD *)&v219 + 1) = MEMORY[0x1E0DEE9D8];
      v222 = 0u;
      v223 = 0u;
      v224 = 0u;
      v225 = 0u;
      v220 = 0u;
      v221 = 0u;
      v268[0] = v213;
      v268[1] = 0u;
      v268[2] = v216;
      v268[3] = 0x80000001B234C9F0;
      v268[4] = v219;
      memset(&v268[5], 0, 96);
      v276[1] = 0;
      v276[0] = 0;
      v277 = xmmword_1B2246910;
      v278 = xmmword_1B2246910;
      v279 = 15;
      v280[0] = 0;
      v280[1] = 0;
      v280[2] = 2;
      memset(&v280[3], 0, 24);
      sub_1B1FD1C40((uint64_t *)v268, &v269, 0, 0, 0, (uint64_t)v276, 3, (uint64_t)v280, (uint64_t)&v253, 1, 1);
      sub_1B1BDB228((uint64_t *)&v213);
      v123 = sub_1B1B32B58((uint64_t)&v253, 0);
      v125 = v124;
      v126 = 0;
      if (v123 >= 3)
      {
        v123 = swift_unknownObjectRetain();
        v126 = v123;
      }
      sub_1B1B427DC(v123, v125);
      sub_1B1B41134((uint64_t *)&v253);
      v127 = v210;
      sub_1B1BA77BC(0x6C756D6572706E55, 0xED0000796C706974, v121);
      v128 = sub_1B1BA7B7C(0);
      v92 = v205;
      if (v128)
      {
        v129 = (void *)v128;
        swift_unknownObjectRetain();
        sub_1B1F9AEC4((uint64_t)&v265);
        swift_getObjectType();
        objc_msgSend(v129, sel_setRenderPipelineState_, v126);
        objc_msgSend(v129, sel_setFragmentTexture_atIndex_, v212, 0);
        sub_1B20BFD00(1);
        sub_1B1BA2FBC();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

      }
      v228 = v119;
      v53 = v119;
      v94 = v127;
LABEL_75:
      if (v204 >= 2)
      {
        v137 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
        v138 = (void *)sub_1B2228728();
        objc_msgSend(v137, sel_pushDebugGroup_, v138);

        swift_unknownObjectRetain();
        v139 = (void *)swift_unknownObjectRetain();
        sub_1B20FD77C(v139, v137);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        objc_msgSend(v137, sel_popDebugGroup);
        swift_unknownObjectRelease();
      }
      v140 = v53;
      sub_1B1A18378((uint64_t)v266, (uint64_t)&v213, &qword_1ED4B7940, (uint64_t)&type metadata for TextureRequireAnimationRepresentation);
      v141 = v215;
      v142 = v215 & 0xFF00;
      if (v142 == 768)
      {
        v97 = v192;
        v53 = v140;
      }
      else
      {
        v144 = *((_QWORD *)&v213 + 1);
        v143 = v213;
        v145 = v214;
        v146 = (void *)swift_unknownObjectRetain();
        v147 = v143;
        v94 = v210;
        v53 = sub_1B210DB84(v146, v147, v144, v145, v142 | v141 & 1u);
        swift_unknownObjectRelease_n();
        v97 = v192;
      }
      v93 = v188;
      goto LABEL_81;
    }
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v253 = 0;
    *((_QWORD *)&v253 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    v130 = objc_msgSend(v212, sel_label);
    v131 = v193;
    if (v130)
    {
      v132 = v130;
      sub_1B222874C();

    }
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v160 = objc_msgSend(v102, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v161 = v253;
    v162 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v253 = 0;
    swift_retain();
    sub_1B1F1AD70(v162, (uint64_t *)&v253, v161, *((uint64_t *)&v161 + 1));
    swift_unknownObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v210 + 208));
    v163 = sub_1B2228398();
    v164 = v176;
    sub_1B22283C8();
    v165 = sub_1B2228F98();
    if ((sub_1B2229094() & 1) != 0)
    {
      swift_retain();
      v166 = v181;
      sub_1B22283EC();
      swift_release();
      v167 = v179;
      v168 = (*(uint64_t (**)(char *, uint64_t))(v93 + 88))(v166, v179);
      v97 = v192;
      if (v168 == *MEMORY[0x1E0DF2190])
      {
        v169 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v93 + 8))(v166, v167);
        v169 = "";
      }
      v170 = v186;
      v171 = v176;
      v191(v186, v176, v97);
      v172 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v172 = 0;
      v173 = sub_1B2228374();
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v163, v165, v173, "uploadTextureToGPU", v169, v172, 2u);
      MEMORY[0x1B5E23F88](v172, -1, -1);

      v118 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
      v118((uint64_t)v171, v97);
      v118((uint64_t)v170, v97);
    }
    else
    {

      v118 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
      v97 = v192;
      v118((uint64_t)v164, v192);
    }
LABEL_97:
    swift_unknownObjectRelease();
    swift_release();
    v53 = 0;
    v92 = v205;
LABEL_98:
    v118((uint64_t)v92, v97);
    return v53;
  }
  return 0;
}

uint64_t sub_1B210FA58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1B19F8E54(0, &qword_1EEF63818, (uint64_t (*)(void))sub_1B2117578, (uint64_t)&type metadata for TextureOptions.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v14 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2117578();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B21175BC();
  v11 = v14;
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v11);
  v12 = v15;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 24) = -2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_WORD *)(a2 + 56) = 768;
  return result;
}

uint64_t sub_1B210FBE4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD *v39;

  sub_1B19F8E54(0, &qword_1ED4BAAE8, (uint64_t (*)(void))sub_1B21148FC, (uint64_t)&_s10CodingKeysON_0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v29 - v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_1B19FA070(a1, v13);
  if (!sub_1B2067BAC(1077, v13, v14))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v2)
    {
      sub_1B19FA070(v31, v32);
      sub_1B2229D48();
      v39 = a2;
      v25 = 0;
      v23 = 0;
      v21 = v26;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v31);
      v29 = 0;
      v30 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      goto LABEL_7;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  v39 = a2;
  sub_1B19FA070(a1, a1[3]);
  sub_1B21148FC();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v38) = 0;
  sub_1B1C7EBE8();
  sub_1B2229814();
  v16 = v33;
  v29 = v32;
  v30 = v31[2];
  v17 = v34;
  v18 = v35;
  v19 = v36;
  v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21 = v31[0];
  v22 = v12;
  v23 = v37;
  v24 = v6;
  v25 = v31[1];
  v20(v22, v24);
LABEL_7:
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v27 = v39;
  *v39 = v21;
  v27[1] = v25;
  v28 = v29;
  v27[2] = v30;
  v27[3] = v28;
  v27[4] = v16;
  v27[5] = v17;
  v27[6] = v18;
  v27[7] = v19;
  *((_BYTE *)v27 + 64) = v23;
  return result;
}

_QWORD *sub_1B21101E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;

  sub_1B19F8E54(0, &qword_1EEF63620, (uint64_t (*)(void))sub_1B2115E80, (uint64_t)&type metadata for TextureFileData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B2115E80();
  v10 = v9;
  sub_1B222A150();
  if (!v1)
  {
    sub_1B2115EC4();
    sub_1B22297B4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = v12;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

uint64_t sub_1B2110338(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  char v15;
  int v16;
  _BYTE v17[16];
  unsigned __int8 v18;
  char v19;
  char v20;
  unsigned __int8 v21;
  char v22;
  unsigned __int8 v23;
  char v24;
  unsigned __int8 v25;

  sub_1B19F8E54(0, &qword_1ED4BAB78, (uint64_t (*)(void))sub_1B2114488, (uint64_t)&type metadata for TextureLoadPolicy.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v17[-v7];
  sub_1B19FA070(a1, a1[3]);
  sub_1B2114488();
  sub_1B222A150();
  if (v1)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067B64(2040, v9, v10))
  {
    v17[15] = 0;
    sub_1B21144CC();
    sub_1B2229814();
    v11 = v18;
    v12 = v18;
  }
  else
  {
    v24 = 1;
    sub_1B21144CC();
    sub_1B2229814();
    v12 = v25;
    v22 = 2;
    sub_1B2229814();
    v11 = v23;
  }
  v20 = 3;
  sub_1B2114510();
  sub_1B2229814();
  v13 = v21;
  v19 = 4;
  v15 = sub_1B22297D8();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if ((v15 & 1) != 0)
    v16 = 0x1000000;
  else
    v16 = 0;
  return v16 | (v13 << 16) | (v11 << 8) | v12;
}

float sub_1B21105C4(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  float v11;
  _BYTE v12[15];

  sub_1B19F8E54(0, &qword_1EEF63918, (uint64_t (*)(void))sub_1B2117864, (uint64_t)&type metadata for TextureRequireMask.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B2117864();
  sub_1B222A150();
  if (!v1)
  {
    v12[14] = 0;
    sub_1B1A70E8C();
    sub_1B2229814();
    v12[13] = 1;
    sub_1B22297F0();
    v2 = v11;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B2110754(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  _QWORD v6[4];

  v3 = a1[3];
  sub_1B19FA070(a1, v3);
  sub_1B222A138();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B19FA070(v6, v6[3]);
    sub_1B2229D48();
    v3 = v4;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v3;
}

uint64_t sub_1B2110A70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint8x8_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  __int32 v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  char *v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  int16x8_t v90;
  _QWORD *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _QWORD *v102;
  char v103;
  unsigned __int16 v104;
  unsigned __int16 v105;
  unsigned __int16 v106;
  unsigned __int16 v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  char *v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 v118;
  unsigned __int8 v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  char v128;
  int v129;
  char v130;
  char *v131;
  uint64_t v132;
  int64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int32 v138;
  __int32 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  int64_t v146;
  _QWORD *v147;
  int v148;
  char v149;
  uint64_t v150;
  unsigned __int8 v151;
  unsigned __int8 v152;
  unsigned __int8 v153;
  int v154;
  char v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  __int32 v163;
  __int32 v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unsigned __int16 v168;
  unsigned __int16 v169;
  unsigned __int16 v170;
  unsigned __int16 v171;
  unsigned __int8 v172;
  unsigned __int8 v173;
  unsigned __int8 v174;
  char *v175;
  uint64_t v176;
  int64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int8 v182;
  unsigned __int8 v183;
  unsigned __int8 v184;
  unsigned __int8 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;

  v74 = a2;
  sub_1B19F8E54(0, &qword_1EEF636C8, (uint64_t (*)(void))sub_1B21161C0, (uint64_t)&type metadata for TextureShaderAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v62 - v9;
  RGTextureDescriptor.init()((uint64_t)&v150);
  v11 = v150;
  LODWORD(v86) = v151;
  v84 = v153;
  LODWORD(v85) = v152;
  v148 = v154;
  v149 = v155;
  v82 = v157;
  v83 = v156;
  v80 = v159;
  v81 = v158;
  v78 = v161;
  v79 = v160;
  v77 = v162;
  v3.i32[0] = v163;
  v90.i32[0] = v164;
  v12 = MEMORY[0x1E0DEE9D8];
  v91 = sub_1B1B95870(MEMORY[0x1E0DEE9D8]);
  v87 = sub_1B1B95978(v12);
  v13 = sub_1B1C6C500(v12);
  v88 = v14;
  v89 = v13;
  v15 = a1[3];
  v194 = a1;
  sub_1B19FA070(a1, v15);
  sub_1B21161C0();
  sub_1B222A150();
  if (v2)
  {
    v17 = 0;
    v22 = 0;
    v24 = 0xE000000000000000;
    v18 = -1;
    v19 = v90.i32[0];
    v20 = v87;
LABEL_4:
    v90 = (int16x8_t)vmovl_u8(v3);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v194);
    v122 = __PAIR64__(v17, v18);
    v123 = v22;
    v124 = v24;
    v125 = v11;
    v126 = v86;
    v127 = v85;
    v128 = v84;
    v129 = v148;
    v130 = v149;
    v131 = v83;
    v132 = v82;
    v133 = v81;
    v134 = v80;
    v135 = v79;
    v136 = v78;
    v137 = v77;
    v138 = vmovn_s16(v90).u32[0];
    v139 = v19;
    v140 = MEMORY[0x1E0DEE9E0];
    v141 = MEMORY[0x1E0DEE9D8];
    v142 = MEMORY[0x1E0DEE9D8];
    v143 = MEMORY[0x1E0DEE9D8];
    v144 = v91;
    v145 = v20;
    v146 = v89;
    v147 = v88;
    return sub_1B1EC5968((uint64_t)&v122);
  }
  v72 = v7;
  LOBYTE(v122) = 0;
  v16 = 0;
  v22 = sub_1B22297CC();
  v24 = v23;
  v68 = v6;
  v69 = v10;
  v25 = v194[3];
  v26 = v194[4];
  sub_1B19FA070(v194, v25);
  if (sub_1B2067BAC(1048, v25, v26))
  {
    LOBYTE(v92) = 3;
    sub_1B1A08878();
    sub_1B2229814();
    v66 = v122;
  }
  else
  {
    v66 = 0xFFFFFFFFLL;
  }
  v27 = v194[3];
  v28 = v194[4];
  sub_1B19FA070(v194, v27);
  v29 = sub_1B2067BAC(1081, v27, v28);
  v30 = MEMORY[0x1E0DEE9D8];
  if (!v29)
  {
    sub_1B21162C0(0, &qword_1EEF636D8);
    LOBYTE(v92) = 2;
    sub_1B2116204();
    sub_1B22297B4();
    v32 = (_QWORD *)v122;
    v67 = 0;
    if (!v122)
      v32 = sub_1B1B988D4(MEMORY[0x1E0DEE9D8]);
    v33 = 0;
    v34 = v32[8];
    v70 = v32 + 8;
    v35 = 1 << *((_BYTE *)v32 + 32);
    v36 = -1;
    if (v35 < 64)
      v36 = ~(-1 << v35);
    v37 = v36 & v34;
    v71 = (unint64_t)(v35 + 63) >> 6;
    v65 = v71 - 5;
    v73 = v22;
    if (v37)
    {
      v76 = (v37 - 1) & v37;
      v38 = __clz(__rbit64(v37));
      goto LABEL_30;
    }
    v39 = 1;
    if (v71 <= 1)
    {
      swift_release();
      v16 = v67;
      goto LABEL_33;
    }
    v40 = v70[1];
    v16 = v67;
    if (!v40)
    {
      v39 = 2;
      if (v71 <= 2)
        goto LABEL_32;
      v40 = v70[2];
      if (!v40)
      {
        v39 = 3;
        if (v71 <= 3)
          goto LABEL_32;
        v40 = v70[3];
        if (!v40)
        {
          v39 = 4;
          if (v71 > 4)
          {
            v40 = v70[4];
            if (!v40)
            {
              do
              {
                if (v65 == v33)
                  goto LABEL_32;
                v40 = v32[v33++ + 13];
              }
              while (!v40);
              v39 = v33 + 4;
            }
            goto LABEL_29;
          }
LABEL_32:
          swift_release();
          goto LABEL_33;
        }
      }
    }
LABEL_29:
    v76 = (v40 - 1) & v40;
    v38 = __clz(__rbit64(v40)) + (v39 << 6);
    v33 = v39;
LABEL_30:
    v41 = v32[7] + 32 * v38;
    v75 = *(_QWORD *)v41;
    v42 = *(unsigned __int8 *)(v41 + 16);
    v91 = (_QWORD *)v33;
    __asm { BR              X9 }
  }
  sub_1B21162C0(0, (unint64_t *)&qword_1EEF63550);
  LOBYTE(v92) = 2;
  sub_1B2116388();
  sub_1B22297B4();
  v31 = (_QWORD *)v122;
  if (!v122)
    v31 = sub_1B1B95870(MEMORY[0x1E0DEE9D8]);
  swift_bridgeObjectRelease();
  v91 = v31;
LABEL_33:
  sub_1B21162C0(0, &qword_1EEF636F0);
  LOBYTE(v92) = 4;
  sub_1B2116310();
  v43 = v68;
  v44 = v69;
  sub_1B22297B4();
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v44, v43);
    v19 = v90.i32[0];
    v20 = v87;
    v18 = v66;
    v17 = HIDWORD(v66);
    goto LABEL_4;
  }
  v45 = (_QWORD *)v122;
  if (!v122)
    v45 = sub_1B1B95978(MEMORY[0x1E0DEE9D8]);
  v47 = v68;
  v46 = v69;
  v48 = v72;
  swift_bridgeObjectRelease();
  v103 = 1;
  sub_1B1FD5188();
  sub_1B2229814();
  LODWORD(v80) = v104;
  LODWORD(v79) = v105;
  LODWORD(v78) = v106;
  v73 = v22;
  LODWORD(v77) = v107;
  LODWORD(v76) = v108;
  LODWORD(v75) = v109;
  LODWORD(v72) = v110;
  v69 = v111;
  v67 = 0;
  v68 = v112;
  v64 = v24;
  v65 = v113;
  v63 = v114;
  v86 = v116;
  v87 = v115;
  v85 = v117;
  v84 = v118;
  LODWORD(v83) = v119;
  LODWORD(v82) = v120;
  LODWORD(v81) = v121;
  v165 = v66;
  v166 = v22;
  v167 = v24;
  v168 = v104;
  v169 = v105;
  v170 = v106;
  v171 = v107;
  v172 = v108;
  v173 = v109;
  v174 = v110;
  v175 = v111;
  v176 = v112;
  v177 = v113;
  v178 = v114;
  v179 = v115;
  v180 = v116;
  v181 = v117;
  v182 = v118;
  v183 = v119;
  v184 = v120;
  v185 = v121;
  v186 = MEMORY[0x1E0DEE9E0];
  v187 = v30;
  v188 = v30;
  v189 = v30;
  v190 = v91;
  v191 = v45;
  v192 = v89;
  v193 = v88;
  v49 = sub_1B20F9F48();
  v70 = v50;
  v71 = v49;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
  v51 = v66;
  *(_QWORD *)&v92 = v66;
  *((_QWORD *)&v92 + 1) = v73;
  *(_QWORD *)&v93 = v64;
  WORD4(v93) = v80;
  WORD5(v93) = (_WORD)v79;
  WORD6(v93) = v78;
  HIWORD(v93) = v77;
  LOBYTE(v94) = v76;
  BYTE1(v94) = v75;
  BYTE2(v94) = v72;
  *(_DWORD *)((char *)&v94 + 3) = v148;
  BYTE7(v94) = v149;
  v53 = v68;
  v52 = v69;
  *((_QWORD *)&v94 + 1) = v69;
  *(_QWORD *)&v95 = v68;
  v54 = v65;
  v55 = v63;
  *((_QWORD *)&v95 + 1) = v65;
  *(_QWORD *)&v96 = v63;
  *((_QWORD *)&v96 + 1) = v87;
  *(_QWORD *)&v97 = v86;
  *((_QWORD *)&v97 + 1) = v85;
  LOBYTE(v98) = v84;
  BYTE1(v98) = (_BYTE)v83;
  BYTE2(v98) = v82;
  BYTE3(v98) = v81;
  LODWORD(v46) = v90.i32[0];
  DWORD1(v98) = v90.i32[0];
  *((_QWORD *)&v98 + 1) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)&v99 = v30;
  *((_QWORD *)&v99 + 1) = v30;
  *(_QWORD *)&v100 = v30;
  *((_QWORD *)&v100 + 1) = v91;
  *(_QWORD *)&v101 = v45;
  *((_QWORD *)&v101 + 1) = v71;
  v102 = v70;
  sub_1B1EC58D0((uint64_t)&v92);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v194);
  v122 = __PAIR64__(HIDWORD(v66), v51);
  v123 = v73;
  v124 = v64;
  LOWORD(v125) = v80;
  WORD1(v125) = (_WORD)v79;
  WORD2(v125) = v78;
  HIWORD(v125) = v77;
  v126 = v76;
  v127 = v75;
  v128 = v72;
  v129 = v148;
  v130 = v149;
  v131 = v52;
  v132 = v53;
  v133 = v54;
  v134 = v55;
  v135 = v87;
  v136 = v86;
  v137 = v85;
  LOBYTE(v138) = v84;
  BYTE1(v138) = (_BYTE)v83;
  BYTE2(v138) = v82;
  HIBYTE(v138) = v81;
  v139 = (int)v46;
  v140 = MEMORY[0x1E0DEE9E0];
  v141 = v30;
  v142 = v30;
  v143 = v30;
  v144 = v91;
  v145 = v45;
  v146 = v71;
  v147 = v70;
  result = sub_1B1EC5968((uint64_t)&v122);
  v56 = v101;
  v57 = v74;
  *(_OWORD *)(v74 + 128) = v100;
  *(_OWORD *)(v57 + 144) = v56;
  *(_QWORD *)(v57 + 160) = v102;
  v58 = v97;
  *(_OWORD *)(v57 + 64) = v96;
  *(_OWORD *)(v57 + 80) = v58;
  v59 = v99;
  *(_OWORD *)(v57 + 96) = v98;
  *(_OWORD *)(v57 + 112) = v59;
  v60 = v93;
  *(_OWORD *)v57 = v92;
  *(_OWORD *)(v57 + 16) = v60;
  v61 = v95;
  *(_OWORD *)(v57 + 32) = v94;
  *(_OWORD *)(v57 + 48) = v61;
  return result;
}

uint64_t sub_1B2111938(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11[4];

  v2 = v1;
  sub_1B19F8E54(0, &qword_1EEF63648, (uint64_t (*)(void))sub_1B2115F4C, (uint64_t)&type metadata for TextureArrayFileAsset.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2115F4C();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1A20F64(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRelease();
    sub_1B1791524(0, &qword_1EEF596A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B2115F90((unint64_t *)&unk_1EEF63660, (unint64_t *)&qword_1ED4B7B20, MEMORY[0x1E0CB0038], MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    v2 = sub_1B1A20E68(v11[3]);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B2111B04@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v24 = a2;
  sub_1B19F8E54(0, &qword_1EEF63678, (uint64_t (*)(void))sub_1B2116028, (uint64_t)&type metadata for TextureLoadingOptions.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v16 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B2116028();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v24;
  sub_1B211606C();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v11 = v19;
  v12 = v20;
  v16 = v21;
  v17 = v18;
  v13 = v22;
  v14 = v23;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_OWORD *)v10 = v17;
  *(_QWORD *)(v10 + 16) = v11;
  *(_BYTE *)(v10 + 24) = v12;
  *(_OWORD *)(v10 + 32) = v16;
  *(_QWORD *)(v10 + 48) = v13;
  *(_WORD *)(v10 + 56) = v14;
  return result;
}

uint64_t sub_1B2111C94@<X0>(_QWORD *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint8x8_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  __int16 v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  char v26;
  _WORD *v27;
  unint64_t v28;
  uint64_t v29;
  int16x8_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v40 = a2;
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_1B19F8E54(0, &qword_1EEF63848, (uint64_t (*)(void))sub_1B2117688, (uint64_t)&type metadata for TextureDescriptorCoder.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v30.i8[-v8];
  sub_1B19F8E54(0, &qword_1EEF63858, (uint64_t (*)(void))sub_1B21176CC, (uint64_t)&type metadata for TextureDescriptorCoder.CodingKeys_pre2019, v5);
  v11 = v10;
  v41 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v30.i8[-v13];
  RGTextureDescriptorMakeDefault((uint64_t)&v45);
  v38 = v48;
  v39 = v47;
  v37 = v49;
  v50 = v46;
  v15 = a1[3];
  v16 = a1[4];
  sub_1B19FA070(a1, v15);
  v17 = sub_1B2067B64(2019, v15, v16);
  sub_1B19FA070(a1, a1[3]);
  if (!v17)
  {
    sub_1B2117688();
    sub_1B222A150();
    if (!v2)
    {
      type metadata accessor for MTLTextureType(0);
      v44 = 0;
      sub_1B19E52CC((unint64_t *)&unk_1ED4BA718, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureType, (uint64_t)&protocol conformance descriptor for MTLTextureType);
      sub_1B2229814();
      v18 = v45;
      type metadata accessor for MTLPixelFormat(0);
      v44 = 1;
      sub_1B19E52CC(&qword_1EEF63870, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t)&protocol conformance descriptor for MTLPixelFormat);
      sub_1B2229814();
      v19 = v45;
      LOBYTE(v45) = 2;
      v20 = sub_1B22297FC();
      LOBYTE(v45) = 3;
      v36 = sub_1B22297FC();
      LOBYTE(v45) = 4;
      v35 = sub_1B22297FC();
      LOBYTE(v45) = 5;
      v34 = sub_1B22297FC();
      LOBYTE(v45) = 6;
      v33 = sub_1B22297FC();
      LOBYTE(v45) = 7;
      v32 = sub_1B22297FC();
      type metadata accessor for MTLTextureUsage(0);
      v44 = 8;
      sub_1B19E52CC(&qword_1EEF63878, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&protocol conformance descriptor for MTLTextureUsage);
      sub_1B2229814();
      v31 = v45;
      LOBYTE(v45) = 9;
      v50 = sub_1B22297D8() & 1;
      type metadata accessor for MTLTextureSwizzleChannels(0);
      v44 = 10;
      sub_1B19E52CC(&qword_1EEF63880, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureSwizzleChannels, (uint64_t)&protocol conformance descriptor for MTLTextureSwizzleChannels);
      sub_1B2229814();
      v3.i32[0] = v45;
      LOBYTE(v45) = 11;
      v24 = sub_1B2229850();
      v30 = (int16x8_t)vmovl_u8(v3);
      (*(void (**)(__int8 *, uint64_t))(v42 + 8))(v9, v43);
      if (v24 == 1)
        v25 = 0;
      else
        v25 = v24;
      v23 = v25;
      goto LABEL_11;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B21176CC();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  type metadata accessor for MTLTextureType(0);
  v44 = 0;
  sub_1B19E52CC((unint64_t *)&unk_1ED4BA718, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureType, (uint64_t)&protocol conformance descriptor for MTLTextureType);
  sub_1B2229814();
  v18 = v45;
  type metadata accessor for MTLPixelFormat(0);
  v44 = 1;
  sub_1B19E52CC(&qword_1EEF63870, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t)&protocol conformance descriptor for MTLPixelFormat);
  sub_1B2229814();
  v19 = v45;
  LOBYTE(v45) = 2;
  v20 = sub_1B22297FC();
  LOBYTE(v45) = 3;
  v36 = sub_1B22297FC();
  LOBYTE(v45) = 4;
  v35 = sub_1B22297FC();
  LOBYTE(v45) = 5;
  v34 = sub_1B22297FC();
  LOBYTE(v45) = 6;
  v33 = sub_1B22297FC();
  LOBYTE(v45) = 7;
  v32 = sub_1B22297FC();
  type metadata accessor for MTLTextureUsage(0);
  v44 = 9;
  sub_1B19E52CC(&qword_1EEF63878, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&protocol conformance descriptor for MTLTextureUsage);
  sub_1B2229814();
  v31 = v45;
  LOBYTE(v45) = 10;
  v50 = sub_1B22297D8() & 1;
  type metadata accessor for MTLTextureSwizzleChannels(0);
  v44 = 11;
  sub_1B19E52CC(&qword_1EEF63880, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureSwizzleChannels, (uint64_t)&protocol conformance descriptor for MTLTextureSwizzleChannels);
  sub_1B2229814();
  v3.i32[0] = v45;
  type metadata accessor for MTLResourceOptions(0);
  v44 = 8;
  sub_1B19E52CC(&qword_1EEF63888, (uint64_t (*)(uint64_t))type metadata accessor for MTLResourceOptions, (uint64_t)&protocol conformance descriptor for MTLResourceOptions);
  sub_1B2229814();
  v30 = (int16x8_t)vmovl_u8(v3);
  v22 = v45;
  (*(void (**)(__int8 *, uint64_t))(v41 + 8))(v14, v11);
  v23 = (v22 >> 4) & 2;
LABEL_11:
  v26 = v50;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v27 = v40;
  *v40 = v20;
  v27[1] = v36;
  v27[2] = v35;
  v27[3] = v32;
  *((_BYTE *)v27 + 8) = v34;
  *((_BYTE *)v27 + 9) = v33;
  *((_BYTE *)v27 + 10) = v26;
  *((_QWORD *)v27 + 2) = v19;
  *((_QWORD *)v27 + 3) = v18;
  v28 = v31;
  *((_QWORD *)v27 + 4) = v23;
  *((_QWORD *)v27 + 5) = v28;
  v29 = v38;
  *((_QWORD *)v27 + 6) = v39;
  *((_QWORD *)v27 + 7) = v29;
  *((_QWORD *)v27 + 8) = v37;
  *((_DWORD *)v27 + 18) = vmovn_s16(v30).u32[0];
  return result;
}

uint64_t sub_1B2112560(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  sub_1B19F8E54(0, &qword_1EEF638D8, (uint64_t (*)(void))sub_1B2117798, (uint64_t)&type metadata for TextureRequireSizeLimit.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B2117798();
  sub_1B222A150();
  if (!v1)
  {
    v14 = 0;
    v9 = sub_1B22297FC();
    v13 = 1;
    sub_1B22297FC();
    v12 = 2;
    sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B21126F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  unsigned __int8 v13;

  sub_1B19F8E54(0, &qword_1EEF63900, (uint64_t (*)(void))sub_1B2117820, (uint64_t)&type metadata for RenderGraphTextureTarget.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B2117820();
  v10 = (unint64_t)v9;
  sub_1B222A150();
  if (!v1)
  {
    sub_1B2114510();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = v13;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

uint64_t sub_1B2112848(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  char v19;

  sub_1B19F8E54(0, &qword_1ED4BAC40, (uint64_t (*)(void))sub_1B21160F4, (uint64_t)&type metadata for TextureRequireAnimationRepresentation.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v15 - v7;
  v9 = a1[4];
  sub_1B19FA070(a1, a1[3]);
  sub_1B21160F4();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1A02758(0, &qword_1ED4BA580, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v19 = 0;
    sub_1B1CDB03C((unint64_t *)&qword_1ED4BA590, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEE9A0]);
    sub_1B2229814();
    v10 = v18;
    LOBYTE(v17) = 1;
    v9 = sub_1B22297FC();
    v16 = v10;
    v12 = a1[3];
    v13 = a1[4];
    sub_1B19FA070(a1, v12);
    if (!sub_1B2067B64(1009, v12, v13))
    {
      LOBYTE(v17) = 2;
      sub_1B22297FC();
    }
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    if (sub_1B2067B64(2011, v14, v15))
    {
      LOBYTE(v17) = 4;
      sub_1B22297D8();
    }
    else
    {
      v19 = 3;
      sub_1B2116138();
      sub_1B2229814();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B2112B74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _BYTE v14[16];
  char v15;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadPolicy);
  if ((v4 & 1) != 0 || !*(_BYTE *)(v3 + 4 * v2))
  {
    v5 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadingOptions);
    if ((v6 & 1) == 0)
    {
      v7 = *(_QWORD *)(v5 + (v2 << 6));
      if ((v7 & 1) == 0)
        *(_QWORD *)(v5 + (v2 << 6)) = v7 | 1;
    }
  }
  else
  {
    if (*(_BYTE *)(v3 + 4 * v2) != 1)
    {
      sub_1B20F24B4(0);
      goto LABEL_10;
    }
    sub_1B1A10AA4(*(_QWORD *)(v1 + 40), (uint64_t)&type metadata for TextureLoadRequestCPU, v14);
    if (v14[0] != 1)
      goto LABEL_10;
  }
  sub_1B20F1E84(0);
LABEL_10:
  v8 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadPolicy);
  if ((v9 & 1) != 0 || !*(_BYTE *)(v8 + 4 * v2 + 1))
  {
    v11 = sub_1B1A11FDC((uint64_t)&type metadata for TextureLoadingOptions);
    if ((v12 & 1) == 0)
    {
      v13 = *(_QWORD *)(v11 + (v2 << 6));
      if ((v13 & 2) == 0)
        *(_QWORD *)(v11 + (v2 << 6)) = v13 | 2;
    }
    return sub_1B20F1F78(0);
  }
  if (*(_BYTE *)(v8 + 4 * v2 + 1) != 1)
    return sub_1B20F25AC(0);
  result = sub_1B1A10AA4(*(_QWORD *)(v1 + 40), (uint64_t)&type metadata for TextureLoadRequestGPU, &v15);
  if (v15 == 1)
    return sub_1B20F1F78(0);
  return result;
}

void sub_1B2112D04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    v3 = *(void **)(v2 + 368);
    if (v3)
    {
      v5 = *(_BYTE *)(v2 + 32);
      v6 = swift_allocObject();
      swift_weakInit();
      v7 = swift_allocObject();
      *(_BYTE *)(v7 + 16) = v5;
      *(_QWORD *)(v7 + 24) = v6;
      *(_QWORD *)(v7 + 32) = a2;
      *(_QWORD *)(v7 + 40) = v2;
      v9[4] = sub_1B2115D8C;
      v9[5] = v7;
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 1107296256;
      v9[2] = sub_1B1BA0C14;
      v9[3] = &unk_1E63D4A88;
      v8 = _Block_copy(v9);
      swift_retain_n();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      objc_msgSend(v3, sel_addCompletedHandler_, v8);
      swift_unknownObjectRelease();
      swift_release();
      _Block_release(v8);
    }
  }
}

uint64_t sub_1B2112E38(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t result;
  uint64_t v93;
  __int128 v94;
  int64_t v95;
  id v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _OWORD v107[2];
  uint64_t v108;
  _OWORD v109[2];
  uint64_t v110;
  _BYTE v111[80];

  swift_getObjectType();
  v12 = objc_msgSend(a2, sel_textureType) != (id)5 || a3 == 0;
  v97 = a2;
  if (v12 || objc_msgSend(a3, sel_textureType) != (id)3)
  {
    objc_msgSend(a1, sel_setTexture_atIndex_, a2, objc_msgSend(a4, sel_index));
  }
  else
  {
    objc_msgSend(a1, sel_setTexture_atIndex_, sub_1B1F9DDF8(), objc_msgSend(a4, sel_index));
    swift_unknownObjectRelease();
  }
  v13 = 0;
  v102 = a5;
  v14 = *(_QWORD *)(a5 + 136);
  v15 = v14 + 64;
  v16 = 1 << *(_BYTE *)(v14 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v14 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_12;
    }
    v23 = v13 + 1;
    if (v13 + 1 >= v19)
      goto LABEL_26;
    v24 = *(_QWORD *)(v15 + 8 * v23);
    if (!v24)
    {
      v23 = v13 + 2;
      if (v13 + 2 >= v19)
        goto LABEL_26;
      v24 = *(_QWORD *)(v15 + 8 * v23);
      if (!v24)
      {
        v23 = v13 + 3;
        if (v13 + 3 >= v19)
          goto LABEL_26;
        v24 = *(_QWORD *)(v15 + 8 * v23);
        if (!v24)
        {
          v23 = v13 + 4;
          if (v13 + 4 >= v19)
            goto LABEL_26;
          v24 = *(_QWORD *)(v15 + 8 * v23);
          if (!v24)
            break;
        }
      }
    }
LABEL_25:
    v18 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v23 << 6);
    v13 = v23;
LABEL_12:
    v22 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v21);
    sub_1B1B9A484(*(_QWORD *)(v14 + 56) + 80 * v21, (uint64_t)v111);
    swift_getObjectType();
    swift_retain();
    sub_1B1F82938((uint64_t)v111, v22);
    swift_release();
  }
  while (v19 - 5 != v13)
  {
    v24 = *(_QWORD *)(v14 + 104 + 8 * v13++);
    if (v24)
    {
      v23 = v13 + 4;
      goto LABEL_25;
    }
  }
LABEL_26:
  swift_release();
  v25 = *(_QWORD *)(v102 + 144);
  v105 = v25 + 64;
  v26 = 1 << *(_BYTE *)(v25 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & *(_QWORD *)(v25 + 64);
  v29 = (unint64_t)(v26 + 63) >> 6;
  swift_bridgeObjectRetain();
  v30 = 0;
  v95 = v29 - 5;
  v101 = v29;
  v103 = v25;
  while (1)
  {
    if (v28)
    {
      v31 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      v32 = v31 | (v30 << 6);
      goto LABEL_44;
    }
    v33 = v30 + 1;
    if (v30 + 1 >= v29)
      goto LABEL_116;
    v34 = *(_QWORD *)(v105 + 8 * v33);
    if (!v34)
    {
      v33 = v30 + 2;
      if (v30 + 2 >= v29)
        goto LABEL_116;
      v34 = *(_QWORD *)(v105 + 8 * v33);
      if (!v34)
      {
        v33 = v30 + 3;
        if (v30 + 3 >= v29)
          goto LABEL_116;
        v34 = *(_QWORD *)(v105 + 8 * v33);
        if (!v34)
        {
          v33 = v30 + 4;
          if (v30 + 4 >= v29)
            goto LABEL_116;
          v34 = *(_QWORD *)(v105 + 8 * v33);
          if (!v34)
            break;
        }
      }
    }
LABEL_43:
    v28 = (v34 - 1) & v34;
    v32 = __clz(__rbit64(v34)) + (v33 << 6);
    v30 = v33;
LABEL_44:
    v35 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v32);
    v36 = (int *)(*(_QWORD *)(v25 + 56) + 8 * v32);
    v37 = v36[1];
    v38 = *v36;
    swift_retain();
    if ((_DWORD)v38 == -1 && (_DWORD)v37 == 0)
      goto LABEL_29;
    v40 = (_QWORD *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v41 = *(_QWORD *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
    if ((v38 & 0x80000000) != 0 || v41 <= v38)
    {
LABEL_67:
      if ((v38 & 0x80000000) != 0 || v41 <= v38)
        goto LABEL_29;
    }
    else
    {
      v104 = v28;
      if ((_DWORD)v37 == -1 || *(_DWORD *)(*v40 + 12 * (int)v38 + 8) == (_DWORD)v37)
      {
        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 80) + 8 * *(__int16 *)(*v40 + 12 * (int)v38 + 6) + 32) + 16);
        v44 = *(_QWORD *)(v43 + 128);
        if (*(_QWORD *)(v44 + 16))
        {
          v45 = (_QWORD *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v46 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone);
          v40 = v45;
          if ((v47 & 1) != 0
            && *(ValueMetadata **)(*(_QWORD *)(v43 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v46) + 32) == &type metadata for Tombstone)
          {
            swift_release();
            v29 = v101;
            v25 = v103;
            v28 = v104;
            continue;
          }
        }
      }
      v48 = *v40 + 12 * (int)v38;
      if ((_DWORD)v37 == -1 || *(_DWORD *)(v48 + 8) == (_DWORD)v37)
      {
        v50 = *(_QWORD *)(*(_QWORD *)(a6 + 136) + 8 * *(int *)(*v40 + 12 * (int)v38) + 32);
        v51 = *(_QWORD *)(v50 + 48);
        v52 = *(_QWORD *)(v51 + 16);
        if (v52)
        {
          v53 = *(__int16 *)(v48 + 4);
          v54 = (_QWORD *)(v51 + 56);
          v29 = v101;
          v25 = v103;
          v28 = v104;
          while ((ValueMetadata *)*(v54 - 3) != &type metadata for TextureGPURuntime)
          {
            v54 += 5;
            if (!--v52)
              goto LABEL_67;
          }
          v73 = *(_QWORD *)(*(_QWORD *)(v50 + 128) + *v54 + 8 * v53);
          swift_unknownObjectRetain();
          swift_release();
          if (v73)
          {
            objc_msgSend(a1, sel_setTexture_atIndex_, v73, v35);
            swift_unknownObjectRelease();
          }
          continue;
        }
      }
      v29 = v101;
      v25 = v103;
      v28 = v104;
      if (v41 <= v38)
        goto LABEL_29;
    }
    v55 = *v40;
    if ((_DWORD)v37 != -1 && *(_DWORD *)(v55 + 12 * (int)v38 + 8) != (_DWORD)v37)
      goto LABEL_29;
    v56 = (int *)(v55 + 12 * (int)v38);
    v57 = *((__int16 *)v56 + 2);
    v58 = *(_QWORD *)(*(_QWORD *)(a6 + 136) + 8 * *v56 + 32);
    if (*(_QWORD *)(v58 + 232) <= v57 && *(_QWORD *)(v58 + 240) > v57)
    {
      v100 = v40;
      v60 = **(_QWORD **)(a6 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      v61 = *(os_unfair_lock_s **)(v58 + 344);
      swift_retain();
      os_unfair_lock_lock(v61);
      v99 = v60;
      v98 = *(_QWORD *)(v60 + 32);
      ecs_stack_allocator_push_snapshot(v98);
      v62 = *(_QWORD *)(*(_QWORD *)(v58 + 40) + 16);
      v63 = *(_QWORD *)(v62 + 128);
      if (*(_QWORD *)(v63 + 16)
        && (v64 = sub_1B1DC3AC8((uint64_t)&type metadata for TextureLoadingOptions), (v65 & 1) != 0)
        && *(ValueMetadata **)(*(_QWORD *)(v62 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v63 + 56) + 8 * v64) + 32) == &type metadata for TextureLoadingOptions)
      {
        swift_retain();
      }
      else
      {
        swift_retain();
        v66 = ecs_stack_allocator_allocate(v98, 8, 8);
        v67 = v66;
        *v66 = v57;
        v68 = *(_QWORD *)(v58 + 192);
        if (v68)
          sub_1B1FE2290(v66, 1, 1, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 1, v68, *(_QWORD *)(v58 + 200), *(_QWORD *)(v58 + 208));
        sub_1B1FE26A8(*(_QWORD *)(v58 + 40), v58, v67, 1, 1);
        v69 = *(_DWORD *)(v58 + 24);
        swift_retain();
        v110 = 0;
        memset(v109, 0, sizeof(v109));
        v108 = 0;
        memset(v107, 0, sizeof(v107));
        v70 = sub_1B1DA4ED8(v69, (uint64_t)&type metadata for TextureLoadingOptions, (uint64_t)&off_1E63A6E90, 0, 0, (uint64_t)v109, (uint64_t)v107);
        swift_release();
        sub_1B1A12E98((uint64_t)v107);
        sub_1B1A12E98((uint64_t)v109);
        if ((uint64_t)(*(_QWORD *)(v58 + 240) - *(_QWORD *)(v58 + 232)) < 2)
        {
          if (sub_1B1A10B20(v70))
          {
            sub_1B1A10BB0(v70);
          }
          else
          {
            v74 = *(_QWORD *)(v58 + 232);
            v75 = *(_QWORD *)(v58 + 240);
            v76 = *(unsigned __int8 *)(v58 + 120);
            v77 = *(unsigned int *)(v58 + 28);
            LOBYTE(v109[0]) = *(_BYTE *)(v58 + 32);
            sub_1B1FD8C68(v74, v75, v70, v76, v77 | ((unint64_t)LOBYTE(v109[0]) << 32), 0, 0, 0);
          }
        }
        else
        {
          v71 = *(unsigned __int8 *)(v58 + 120);
          v72 = *(unsigned int *)(v58 + 28);
          LOBYTE(v109[0]) = *(_BYTE *)(v58 + 32);
          sub_1B1FD891C(v67, 1, 1, v70, v71, v72 | ((unint64_t)LOBYTE(v109[0]) << 32), 0, 0);
        }
      }
      v29 = v101;
      if ((sub_1B1FE0214(v38 | (unint64_t)(v37 << 32), a6) & 1) == 0)
      {
        *(_QWORD *)&v109[0] = 0;
        *((_QWORD *)&v109[0] + 1) = 0xE000000000000000;
        sub_1B2229430();
        sub_1B2228890();
        sub_1B1BC3C70();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228890();
        result = sub_1B2229688();
        __break(1u);
        return result;
      }
      swift_release();
      ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v99 + 32));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v58 + 344));
      swift_release();
      v40 = v100;
    }
    v78 = v40[1];
    v25 = v103;
    if (v78 > v38)
    {
      v79 = *v40 + 12 * (int)v38;
      v80 = *(__int16 *)(v79 + 4);
      if ((_DWORD)v37 == -1 || *(_DWORD *)(v79 + 8) == (_DWORD)v37)
      {
        v81 = *(_QWORD *)(*(_QWORD *)(a6 + 136) + 8 * *(int *)(*v40 + 12 * (int)v38) + 32);
        v82 = *(_QWORD *)(v81 + 48);
        v83 = *(_QWORD *)(v82 + 16);
        if (v83)
        {
          v84 = (_QWORD *)(v82 + 56);
          while ((ValueMetadata *)*(v84 - 3) != &type metadata for TextureLoadPolicy)
          {
            v84 += 5;
            if (!--v83)
              goto LABEL_105;
          }
          if (*(_BYTE *)(*(_QWORD *)(v81 + 128) + *v84 + 4 * v80 + 1) == 1)
          {
            v85 = v40;
            sub_1B1FE16DC((uint64_t)&type metadata for TextureLoadRequestGPU, (uint64_t)&off_1E63A6CD8, v38 | (unint64_t)(v37 << 32));
            v40 = v85;
            v29 = v101;
            v78 = v85[1];
          }
        }
      }
    }
LABEL_105:
    if (v78 <= v38
      || (v86 = *v40 + 12 * (int)v38, v87 = *(__int16 *)(v86 + 4), (_DWORD)v37 != -1)
      && *(_DWORD *)(v86 + 8) != (_DWORD)v37
      || (v88 = *(_QWORD *)(*(_QWORD *)(a6 + 136) + 8 * *(int *)(*v40 + 12 * (int)v38) + 32),
          v89 = *(_QWORD *)(v88 + 48),
          (v90 = *(_QWORD *)(v89 + 16)) == 0))
    {
LABEL_29:
      swift_release();
      continue;
    }
    v91 = v89 + 56;
    while (*(ValueMetadata **)(v91 - 24) != &type metadata for TextureLoadPolicy)
    {
      v91 += 40;
      if (!--v90)
        goto LABEL_29;
    }
    if (*(_QWORD *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
      __asm { BR              X9 }
    swift_release();
    v29 = v101;
  }
  while (v95 != v30)
  {
    v34 = *(_QWORD *)(v25 + 8 * v30++ + 104);
    if (v34)
    {
      v33 = v30 + 4;
      goto LABEL_43;
    }
  }
LABEL_116:
  swift_release();
  switch((unint64_t)objc_msgSend(v97, sel_textureType))
  {
    case 0uLL:
      swift_getObjectType();
      result = sub_1B1F40EF8(a7, (uint64_t)v97, 0);
      break;
    case 2uLL:
      swift_getObjectType();
      result = sub_1B1F40F48(a7, (uint64_t)v97, 0);
      break;
    case 5uLL:
      swift_getObjectType();
      result = sub_1B1F411DC(a7, (uint64_t)v97, 0);
      break;
    case 7uLL:
      swift_getObjectType();
      result = sub_1B1F40FDC(a7, (uint64_t)v97, 0);
      break;
    default:
      sub_1B1A02758(0, &qword_1ED4BAFF0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = xmmword_1B226D240;
      *(_QWORD *)&v109[0] = 0;
      *((_QWORD *)&v109[0] + 1) = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      *(_QWORD *)&v107[0] = objc_msgSend(v97, sel_textureType);
      type metadata accessor for MTLTextureType(0);
      sub_1B22295EC();
      sub_1B2228890();
      v94 = v109[0];
      *(_QWORD *)(v93 + 56) = MEMORY[0x1E0DEA968];
      *(_OWORD *)(v93 + 32) = v94;
      sub_1B222A048();
      result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

uint64_t sub_1B2113B80(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4, char *a5, char **a6, uint64_t a7)
{
  char v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;

  swift_retain();
  v13 = sub_1B1D3B278(a2, 2);
  swift_release();
  if ((v13 & 1) != 0 || (result = sub_1B2094F98(*a3), (result & 1) != 0))
  {
    v22 = a7;
    swift_retain();
    v15 = sub_1B1A101F0(a2);
    swift_release();
    v16 = *a6;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a6 = v16;
    v21 = (unsigned int *)a3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v16 = sub_1B1C63D98(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
      *a6 = v16;
    }
    v19 = *((_QWORD *)v16 + 2);
    v18 = *((_QWORD *)v16 + 3);
    if (v19 >= v18 >> 1)
      v16 = sub_1B1C63D98(v18 > 1, v19 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v19 + 1;
    *(_QWORD *)&v16[8 * v19 + 32] = v15;
    *a6 = v16;
    swift_retain();
    v20 = sub_1B1A101F0(a2);
    swift_release();
    return sub_1B20FE9EC(a4, v21, v20, a5, v22);
  }
  return result;
}

uint64_t sub_1B2113CFC(uint64_t result, uint64_t a2, void **a3, uint64_t a4, char **a5)
{
  void *v5;
  id v9;
  id v10;
  int8x8_t v11;
  uint64_t v12;
  char v13;
  id v14;
  void *v15;
  __int128 v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char **v35;
  int16x8_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unsigned __int32 v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int32 v68;

  v5 = *a3;
  if (!*a3)
    return result;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_textureType) == (id)5)
    return swift_unknownObjectRelease();
  v9 = objc_msgSend(v5, sel_width);
  if (v9 != (id)(2 * (_QWORD)objc_msgSend(v5, sel_height)))
    return swift_unknownObjectRelease();
  v34 = a2;
  v35 = a5;
  v10 = objc_msgSend(v5, sel_height);
  v11 = sub_1B210B50C(5, 115, (uint64_t)v10, (uint64_t)v10, 1, 1, 1, 1, (uint64_t)&v57, 1, 2, 3);
  v12 = v57;
  v13 = v58;
  v45 = v59;
  v44 = v60;
  v42 = v62;
  v43 = v61;
  v40 = v64;
  v41 = v63;
  v38 = v66;
  v39 = v65;
  v37 = v67;
  v11.i32[0] = v68;
  v36 = (int16x8_t)vmovl_u8((uint8x8_t)v11);
  sub_1B2229430();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v51 = 0xD000000000000010;
  *((_QWORD *)&v51 + 1) = 0x80000001B234CFC0;
  v14 = objc_msgSend(v5, sel_label);
  if (v14)
  {
    v15 = v14;
    sub_1B222874C();

  }
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v16 = v51;
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6BB0]), sel_init);
  *(_QWORD *)&v51 = v12;
  BYTE8(v51) = v13;
  BYTE9(v51) = v45;
  BYTE10(v51) = v44;
  *(_QWORD *)&v52 = v43;
  *((_QWORD *)&v52 + 1) = v42;
  *(_QWORD *)&v53 = v41;
  *((_QWORD *)&v53 + 1) = v40;
  *(_QWORD *)&v54 = v39;
  *((_QWORD *)&v54 + 1) = v38;
  v55 = v37;
  v56 = vmovn_s16(v36).u32[0];
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)&v51, v17);
  v18 = sub_1B1F328F4(v17, v16, *((uint64_t *)&v16 + 1));
  swift_bridgeObjectRelease();

  sub_1B222A0CC();
  sub_1B2228824();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  v53 = v48;
  v54 = v49;
  v55 = v50;
  v51 = v46;
  v52 = v47;
  v19 = sub_1B222A0B4();
  *(_QWORD *)&v46 = 0xD000000000000015;
  *((_QWORD *)&v46 + 1) = 0x80000001B234CFE0;
  v47 = 0uLL;
  v48 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v49 = v19;
  v20 = sub_1B1B3947C((uint64_t)&v46, 0, 0);
  v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (!v20)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  v23 = v20;
  v24 = (void *)sub_1B1BA669C(0x657475706D6F43, 0xE700000000000000, 0);
  swift_getObjectType();
  v25 = (void *)sub_1B2228728();
  objc_msgSend(v24, sel_pushDebugGroup_, v25);

  objc_msgSend(v24, sel_setTexture_atIndex_, v5, 0);
  swift_getObjectType();
  objc_msgSend(v24, sel_setTexture_atIndex_, sub_1B1F9DDF8(), 1);
  swift_unknownObjectRelease();
  sub_1B1F411DC(v23, (uint64_t)v18, 0);
  objc_msgSend(v24, sel_popDebugGroup);
  swift_unknownObjectRelease();
  v26 = v18;
  if ((uint64_t)objc_msgSend(v18, sel_mipmapLevelCount) > 1)
  {
    v27 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
    v28 = (void *)sub_1B2228728();
    objc_msgSend(v27, sel_pushDebugGroup_, v28);

    swift_unknownObjectRetain();
    sub_1B20FD77C(v18, v27);
    swift_unknownObjectRelease();
    objc_msgSend(v27, sel_popDebugGroup);
    swift_unknownObjectRelease();
  }
  swift_retain();
  v29 = sub_1B1A101F0(v34);
  swift_release();
  v30 = *v35;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v35 = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v30 = sub_1B1C63D98(0, *((_QWORD *)v30 + 2) + 1, 1, v30);
    *v35 = v30;
  }
  v33 = *((_QWORD *)v30 + 2);
  v32 = *((_QWORD *)v30 + 3);
  if (v33 >= v32 >> 1)
    v30 = sub_1B1C63D98(v32 > 1, v33 + 1, 1, v30);
  *((_QWORD *)v30 + 2) = v33 + 1;
  *(_QWORD *)&v30[8 * v33 + 32] = v29;
  *v35 = v30;
  swift_unknownObjectRelease_n();
  result = swift_unknownObjectRelease();
  *a3 = v26;
  return result;
}

uint64_t sub_1B21142D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, double);
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  char *v18;
  char *v19;
  id v20;
  void (*v21)(char *, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  objc_super v29;

  v28 = a1;
  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v27 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v14((char *)&v27 - v12, a1, v4, v11);
  v27 = sub_1B222805C();
  v16 = v15;
  ((void (*)(char *, char *, uint64_t))v14)(v8, v13, v4);
  v17 = (objc_class *)type metadata accessor for AbsolutePathStorage(0);
  v18 = (char *)objc_allocWithZone(v17);
  ((void (*)(char *, char *, uint64_t))v14)(&v18[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_absoluteURL], v8, v4);
  v19 = &v18[OBJC_IVAR____TtC3VFX19AbsolutePathStorage_pathResolver];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v29.receiver = v18;
  v29.super_class = v17;
  swift_bridgeObjectRetain();
  v20 = objc_msgSendSuper2(&v29, sel_init);
  v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  v21(v8, v4);
  v22 = v20;
  v23 = sub_1B222802C();
  v25 = v24;

  swift_bridgeObjectRelease();
  v21(v13, v4);
  result = ((uint64_t (*)(uint64_t, uint64_t))v21)(v28, v4);
  *a2 = v23;
  a2[1] = v25;
  a2[2] = v27;
  a2[3] = v16;
  a2[4] = (uint64_t)v20;
  a2[5] = (uint64_t)&off_1E6397578;
  return result;
}

uint64_t sub_1B2114470(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t sub_1B2114488()
{
  unint64_t result;

  result = qword_1ED4B9170;
  if (!qword_1ED4B9170)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDB84, &type metadata for TextureLoadPolicy.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9170);
  }
  return result;
}

unint64_t sub_1B21144CC()
{
  unint64_t result;

  result = qword_1ED4B8A98;
  if (!qword_1ED4B8A98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDB5C, &type metadata for LoadPolicyMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B8A98);
  }
  return result;
}

unint64_t sub_1B2114510()
{
  unint64_t result;

  result = qword_1ED4B8D50;
  if (!qword_1ED4B8D50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDB34, &type metadata for TextureFallback);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D50);
  }
  return result;
}

unint64_t sub_1B2114554()
{
  unint64_t result;

  result = qword_1EEF63530;
  if (!qword_1EEF63530)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDB0C, &type metadata for LoadPolicyMode);
    atomic_store(result, (unint64_t *)&qword_1EEF63530);
  }
  return result;
}

unint64_t sub_1B2114598()
{
  unint64_t result;

  result = qword_1EEF63538;
  if (!qword_1EEF63538)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDAE4, &type metadata for TextureFallback);
    atomic_store(result, (unint64_t *)&qword_1EEF63538);
  }
  return result;
}

uint64_t sub_1B21145DC()
{
  return swift_deallocObject();
}

unint64_t sub_1B21145F0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  sub_1B1B0BB50(*(_QWORD *)a1, v2, v3);
  return sub_1B20F94DC(v1, v2, v3);
}

uint64_t sub_1B211463C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 40);
  return result;
}

_QWORD *sub_1B2114648(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 40) = *result;
  return result;
}

uint64_t sub_1B2114654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109DCC(a1, v2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A82E64, a2);
}

uint64_t sub_1B2114674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B211486C);
}

uint64_t sub_1B2114694@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int16 *)(result + 24);
  return result;
}

_QWORD *sub_1B21146A0(_QWORD *result, uint64_t a2)
{
  *(_WORD *)(a2 + 24) = *result;
  return result;
}

uint64_t sub_1B21146AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109DCC(a1, v2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B21146CC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int16 *)(result + 26);
  return result;
}

_QWORD *sub_1B21146D8(_QWORD *result, uint64_t a2)
{
  *(_WORD *)(a2 + 26) = *result;
  return result;
}

uint64_t sub_1B21146E4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int16 *)(result + 28);
  return result;
}

_QWORD *sub_1B21146F0(_QWORD *result, uint64_t a2)
{
  *(_WORD *)(a2 + 28) = *result;
  return result;
}

uint64_t sub_1B2114704@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 56);
  return result;
}

_QWORD *sub_1B2114710(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 56) = *result;
  return result;
}

uint64_t sub_1B211471C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109DCC(a1, v2, (uint64_t (*)(uint64_t, ValueMetadata *, _UNKNOWN **, uint64_t))sub_1B1A846BC, a2);
}

uint64_t sub_1B211473C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B21147F8);
}

void sub_1B211475C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t Set;
  uint64_t v6;

  if (!qword_1EEF5A930)
  {
    sub_1B21162C0(255, (unint64_t *)&qword_1EEF63550);
    Set = type metadata accessor for EntityGetSet(a1, v2, v3, v4);
    if (!v6)
      atomic_store(Set, (unint64_t *)&qword_1EEF5A930);
  }
}

uint64_t sub_1B21147C0()
{
  uint64_t v0;

  return sub_1B1A7EF54(**(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1B21147F8(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A78610);
}

uint64_t sub_1B2114814()
{
  uint64_t v0;

  return sub_1B1A7F0C8(**(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 8), *(_QWORD **)(*(_QWORD *)(v0 + 16) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1B2114850(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7863C);
}

uint64_t sub_1B211486C(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A78668);
}

uint64_t sub_1B2114888()
{
  uint64_t v0;

  return sub_1B1A7F270(**(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 8), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1B21148C0()
{
  uint64_t v0;

  return sub_1B1A7F28C(**(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 8), *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

unint64_t sub_1B21148FC()
{
  unint64_t result;

  result = qword_1ED4B8D10;
  if (!qword_1ED4B8D10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDA94, &_s10CodingKeysON_0);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D10);
  }
  return result;
}

unint64_t sub_1B2114940()
{
  unint64_t result;

  result = qword_1EEF63560;
  if (!qword_1EEF63560)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BDA54, &_s19PostTypeCodingErrorON);
    atomic_store(result, (unint64_t *)&qword_1EEF63560);
  }
  return result;
}

uint64_t sub_1B2114984()
{
  uint64_t result;

  result = qword_1ED4BB2A0;
  if (!qword_1ED4BB2A0)
    type metadata accessor for QueryResult2();
  return result;
}

uint64_t sub_1B21149F8(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;

  sub_1B2114A4C(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void sub_1B2114A4C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1B2114AA4(255, a3, a4, a5);
    v6 = sub_1B2229124();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1B2114AA4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t Result1;
  uint64_t v6;

  if (!*a2)
  {
    Result1 = type metadata accessor for QueryResult1(0, a3, a4, a4);
    if (!v6)
      atomic_store(Result1, a2);
  }
}

uint64_t sub_1B2114AEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1B2228110();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

double sub_1B2114B70@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double result;

  v4 = *(_QWORD *)(sub_1B2228110() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = sub_1B2115428((void *)(v1 + v5), v1 + v6, *(_QWORD *)(v1 + ((v6 + 65) & 0xFFFFFFFFFFFFF8)));
  if (!v2)
  {
    *(_QWORD *)a1 = v7;
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
  }
  return result;
}

uint64_t sub_1B2114BFC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unsigned __int8 *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, unint64_t, uint64_t);
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;

  v1 = sub_1B2228110();
  v76 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v2);
  v78 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1B2227DEC();
  v84 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_1B22280D4();
  v9 = v8;
  v10 = sub_1B22280E0();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v85 = 0;
    v86 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v85 = 0xD00000000000002ALL;
    v86 = 0x80000001B234CD10;
    sub_1B19E52CC((unint64_t *)&qword_1EEF5AE60, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
    sub_1B2229A0C();
    sub_1B2228890();
LABEL_9:
    swift_bridgeObjectRelease();
    v24 = v85;
    v23 = v86;
    sub_1B21158FC();
    swift_allocError();
    *(_QWORD *)v25 = v24;
    *(_QWORD *)(v25 + 8) = v23;
    *(_BYTE *)(v25 + 16) = 0;
    swift_willThrow();
    return v23;
  }
  v79 = v9;
  v74 = v1;
  v85 = v10;
  v86 = v11;
  sub_1B1A06460();
  v12 = sub_1B2229244();
  if (!v13)
  {
    swift_bridgeObjectRelease();
    v85 = 0;
    v86 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v85 = 0xD000000000000030;
    v86 = 0x80000001B234CD40;
    sub_1B2228890();
    goto LABEL_9;
  }
  v14 = v12;
  v15 = v13;
  swift_bridgeObjectRelease();
  v75 = v15;
  if ((sub_1B2228914() & 1) == 0)
    goto LABEL_85;
  v16 = objc_allocWithZone(MEMORY[0x1E0CB3998]);
  v17 = (void *)sub_1B2228074();
  v18 = objc_msgSend(v16, sel_initWithURL_resolvingAgainstBaseURL_, v17, 0);

  if (v18)
  {
    v19 = objc_msgSend(v18, sel_queryItems);
    v20 = v84;
    if (v19)
    {
      v21 = v19;
      v22 = sub_1B2228AB8();

    }
    else
    {
      v22 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    v22 = MEMORY[0x1E0DEE9D8];
    v20 = v84;
  }
  v84 = *(_QWORD *)(v22 + 16);
  if (!v84)
  {

    swift_bridgeObjectRelease();
LABEL_85:
    swift_bridgeObjectRelease();
    return 0;
  }
  v71 = v18;
  v72 = v22;
  v73 = v14;
  v26 = 0;
  v83 = v22 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  v82 = *(_QWORD *)(v20 + 72);
  v27 = *(void (**)(char *, unint64_t, uint64_t))(v20 + 16);
  v80 = 0;
  v81 = v27;
  v69 = (char *)&v85 + 2;
  v70 = (char *)&v85 + 3;
  v27(v7, v83, v4);
  while (1)
  {
    if (sub_1B2227DD4() == 0x74657366666FLL && v34 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0)
        goto LABEL_67;
    }
    v36 = sub_1B2227DE0();
    v38 = v37;
    v39 = HIBYTE(v37) & 0xF;
    v40 = v36 & 0xFFFFFFFFFFFFLL;
    if ((v38 & 0x2000000000000000) != 0)
      v41 = v39;
    else
      v41 = v36 & 0xFFFFFFFFFFFFLL;
    if (v41)
    {
      if ((v38 & 0x1000000000000000) != 0)
      {
        sub_1B1DCCE40(v36, v38, 10);
      }
      else if ((v38 & 0x2000000000000000) != 0)
      {
        v85 = v36;
        v86 = v38 & 0xFFFFFFFFFFFFFFLL;
        if (v36 == 43)
        {
          if (v39 != 1
            && (BYTE1(v36) - 48) <= 9u
            && v39 != 2
            && (BYTE2(v36) - 48) <= 9u)
          {
            v43 = 10 * (BYTE1(v36) - 48) + (BYTE2(v36) - 48);
            v44 = v39 - 3;
            if (v44)
            {
              v45 = (unsigned __int8 *)v70;
              do
              {
                v46 = *v45 - 48;
                if (v46 > 9)
                  break;
                v47 = 10 * v43;
                if ((unsigned __int128)(v43 * (__int128)10) >> 64 != (10 * v43) >> 63)
                  break;
                v43 = v47 + v46;
                if (__OFADD__(v47, v46))
                  break;
                ++v45;
                --v44;
              }
              while (v44);
            }
          }
        }
        else if (v36 == 45)
        {
          if (v39 != 1
            && (BYTE1(v36) - 48) <= 9u
            && v39 != 2
            && (BYTE2(v36) - 48) <= 9u)
          {
            v53 = -10 * (BYTE1(v36) - 48) - (BYTE2(v36) - 48);
            v54 = v39 - 3;
            if (v54)
            {
              v57 = (unsigned __int8 *)v70;
              do
              {
                v58 = *v57 - 48;
                if (v58 > 9)
                  break;
                v59 = 10 * v53;
                if ((unsigned __int128)(v53 * (__int128)10) >> 64 != (10 * v53) >> 63)
                  break;
                v53 = v59 - v58;
                if (__OFSUB__(v59, v58))
                  break;
                ++v57;
                --v54;
              }
              while (v54);
            }
          }
        }
        else if (v39)
        {
          if ((v36 - 48) <= 9u && v39 != 1 && (BYTE1(v36) - 48) <= 9u)
          {
            v48 = 10 * (v36 - 48) + (BYTE1(v36) - 48);
            v49 = v39 - 2;
            if (v49)
            {
              v50 = (unsigned __int8 *)v69;
              do
              {
                v51 = *v50 - 48;
                if (v51 > 9)
                  break;
                v52 = 10 * v48;
                if ((unsigned __int128)(v48 * (__int128)10) >> 64 != (10 * v48) >> 63)
                  break;
                v48 = v52 + v51;
                if (__OFADD__(v52, v51))
                  break;
                ++v50;
                --v49;
              }
              while (v49);
            }
          }
        }
      }
      else
      {
        if ((v36 & 0x1000000000000000) != 0)
          v42 = (unsigned __int8 *)((v38 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v42 = (unsigned __int8 *)sub_1B22294FC();
        sub_1B1DCCD48(v42, v40, 10);
      }
    }
    swift_bridgeObjectRelease();
LABEL_67:
    if (sub_1B2227DD4() == 1702521203 && v55 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v56 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v56 & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v4);
        goto LABEL_20;
      }
    }
    v28 = sub_1B2227DE0();
    v30 = sub_1B1DCCA1C(v28, v29);
    v32 = v31;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v4);
    v33 = (v32 & 1) != 0 ? 0 : v30;
    v80 = v33;
LABEL_20:
    if (++v26 == v84)
      break;
    v81(v7, v83 + v82 * v26, v4);
  }
  swift_bridgeObjectRelease();
  if (v80 <= 0)
  {

    goto LABEL_85;
  }
  v60 = v78;
  sub_1B2228050();
  swift_bridgeObjectRelease();
  v61 = sub_1B2228128();
  if (v0)
  {

    (*(void (**)(char *, uint64_t))(v76 + 8))(v60, v74);
    return 0;
  }
  else
  {
    v64 = v61;
    v65 = v62;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v60, v74);
    v66 = sub_1B22281A0();
    v68 = v67;
    sub_1B1A0DADC(v64, v65);
    v23 = sub_1B2228170();

    sub_1B1A0DADC(v66, v68);
  }
  return v23;
}

uint64_t sub_1B2115428(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  __int128 v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  __int16 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  _OWORD *v49;
  void *v50;
  uint64_t v51[5];
  _QWORD v52[15];
  uint64_t v53[3];
  char v54;
  uint64_t v55;
  __int16 v56;
  char v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  char v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  __int128 v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;

  v4 = v3;
  v50 = a1;
  v7 = sub_1B2228110();
  v8 = *(_QWORD **)(v7 - 8);
  v9 = v8[8];
  MEMORY[0x1E0C80A78](v7, v10);
  v11 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_QWORD *)a2 & 0x100) != 0)
  {
    v16 = 0;
    v12 = *(_QWORD *)a2 & 0x104;
    v13 = 0uLL;
    v17 = 768;
    v14 = -2;
    v15 = 0uLL;
  }
  else
  {
    v12 = *(_QWORD *)a2 & 0x1FCLL;
    v13 = *(_OWORD *)(a2 + 8);
    v14 = *(_BYTE *)(a2 + 24);
    v15 = *(_OWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 48);
    v17 = *(_WORD *)(a2 + 56);
  }
  v69 = v12;
  v70 = v13;
  v71 = v14;
  v72 = v15;
  v73 = v16;
  v74 = v17;
  v75 = a3;
  if (v12 >= 0x100)
  {
    v18 = sub_1B2100B78(v50, &v69, a3);
    if (!v3)
      return (uint64_t)v18;
    v46 = v7;
    v47 = v8;
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_getErrorValue();
    swift_retain();
    v19 = sub_1B2229FE8();
    v21 = v20;
    v22 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v49 = (_OWORD *)a2;
    v51[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v22, v51, v19, v21);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

    v48 = 0;
    v7 = v46;
    v8 = v47;
    a3 = v75;
  }
  else
  {
    v48 = v3;
    v49 = (_OWORD *)a2;
  }
  v47 = *(_QWORD **)(a3 + 240);
  ((void (*)(char *, void *, uint64_t))v8[2])((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v50, v7);
  v23 = v7;
  v24 = (*((unsigned __int8 *)v8 + 80) + 16) & ~(unint64_t)*((unsigned __int8 *)v8 + 80);
  v25 = (v9 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject();
  ((void (*)(unint64_t, char *, uint64_t))v8[4])(v26 + v24, v11, v23);
  v27 = (_OWORD *)(v26 + v25);
  v28 = v49;
  v29 = v49[1];
  *v27 = *v49;
  v27[1] = v29;
  v27[2] = v28[2];
  *(_OWORD *)((char *)v27 + 42) = *(_OWORD *)((char *)v28 + 42);
  *(_QWORD *)(v26 + ((v25 + 65) & 0xFFFFFFFFFFFFFFF8)) = v75;
  swift_retain();
  v30 = v47;
  v31 = v48;
  sub_1B1FAD418(0, (uint64_t *)&v69, (uint64_t)sub_1B21158E8, v26, 0, 0, v52);
  if (v31)
  {
    swift_release();
    return (uint64_t)v30;
  }
  v32 = v52[1];
  v40 = v52[2];
  v41 = v52[0];
  v33 = v52[4];
  v30 = (id)v52[5];
  v50 = (void *)v52[6];
  v47 = (_QWORD *)v52[8];
  v48 = (void *)v52[7];
  v45 = v52[10];
  v46 = v52[9];
  v44 = v52[11];
  v34 = v52[13];
  v42 = v52[3];
  v43 = v52[12];
  v35 = v52[14];
  swift_release();
  if (v34 < 0)
  {
    v53[0] = v41;
    v53[1] = v32;
    v53[2] = v40;
    v54 = v42 & 1;
    v55 = v33;
    v56 = (__int16)v30;
    v57 = BYTE2(v30) & 1;
    v58 = v50;
    v59 = v48;
    v60 = v47;
    v61 = v46;
    v62 = v45;
    v63 = v44;
    v64 = v43;
    v65 = v34;
    v66 = BYTE2(v34);
    v67 = BYTE3(v34);
    v68 = v35;
    v36 = sub_1B210DE54(v53, (uint64_t *)v28, v75, 0);
    if (v36)
    {
      v30 = v36;
    }
    else
    {
      sub_1B21158FC();
      swift_allocError();
      *(_QWORD *)v38 = 0xD000000000000017;
      *(_QWORD *)(v38 + 8) = 0x80000001B234C830;
      *(_BYTE *)(v38 + 16) = 1;
      swift_willThrow();
    }
    sub_1B2115940((uint64_t)v52);
    return (uint64_t)v30;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

double sub_1B21158E8@<D0>(uint64_t a1@<X8>)
{
  return sub_1B2115A5C(a1);
}

unint64_t sub_1B21158FC()
{
  unint64_t result;

  result = qword_1EEF63578;
  if (!qword_1EEF63578)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BD9F4, &type metadata for TextureError);
    atomic_store(result, (unint64_t *)&qword_1EEF63578);
  }
  return result;
}

uint64_t sub_1B2115940(uint64_t a1)
{
  sub_1B2115998(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  return a1;
}

